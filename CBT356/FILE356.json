{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011827000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 823004, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE356.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 823004, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 823004, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE356.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0e\\x06'", "DS1TRBAL": "b'\\xc5\\\\'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x97\\x00\\x0c\\x02\\x98\\x00\\x0b\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$NAME": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x04\\x1f\\x00\\x99\\x04\\x1f\\x18\\x18\\x00\\x0b\\x00\\x0b\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-10T00:00:00", "modifydate": "1999-02-10T18:18:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "NETSOL"}, "text": "\nFrom: \"David F. Juraschek\" <davej@gmu.edu>\n\nDavid Juraschek\nMS 1B5 - UCIS\nGeorge Mason University\n4400 University Drive\nFairfax, Va.  22030\n(703) 993-3353\ndavej@gmu.edu\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x04\\x1f\\x17T\\x00*\\x00\\x1f\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-10T17:54:00", "lines": 42, "newlines": 31, "modlines": 0, "user": "NETSOL"}, "text": "NETSOL is a public domain VTAM session manager.  It is\nbased on (Network Solicitor), the original version written in 1981.\n\nSee the PDS member DOC for more information.\n\nIt is supplied by \"David F. Juraschek\" <davej@GMU.EDU>\n\nThere is also a copy of NETSOL on the GMU web server at:\n   http://syscdj1.gmu.edu/netsol\nor anonymous ftp at:\n   ftp://syscdj1.gmu.edu\n   and go to the NETSOL directory.\n\nHere are some comments from Dave on his use of NETSOL.\n\nI make this the default APPLID for various LU's especially all our\nTCP/IP terminals (our primary connection methodology).  It presents\nthe users with a menu of application options (which matches a\nUSSTAB menu I use for our local terminals), and also includes a number\nof \"hidden\" menu options/choices.  In addition, users can view\ninstallation NEWS and HELP or EXIT (which closes their session - very\nuseful for IP connected LU's).\n\nAs a PD product, full source code is here.  You can enhance or\nrestrict to your heart's desire.  NETSOL effectively passes the LU\nto the desired APPLID associated with your defined options.  You can\nalso pass appropriate parameters as needed.  NETSOL runs as an STC\non your system and represents almost no load whatsoever.  I run mine\nswappable and so it only comes in when a new user attaches to my\nsystem via TCP/IP as it is defined as the default APPLID for all\nTN3270 (TELNET) sessions.\n\nFrom: \"David F. Juraschek\" <davej@gmu.edu>\n\nDavid Juraschek\nMS 1B5 - UCIS\nGeorge Mason University\n4400 University Drive\nFairfax, Va.  22030\n(703) 993-3353\ndavej@gmu.edu\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALL": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x03O\\t#\\x00\\x14\\x00\\x14\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-03T09:23:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "NETSOL"}, "text": "\n                  G E O R G E  M A S O N  U N I V E R S I T Y\n\n                 U N I V E R S I T Y  C O M P U T I N G  A N D\n                     I N F O R M A T I O N  S Y S T E M S\n\n          Option  Command    Alias      Description\n\n            A     CICS       PRDCICS    Production CICS\n            B     NOTIS      XLIBRIS    On-Line Library Catalog (XLIBRIS)\n            C     TSO        -          MVS Time Sharing\n            D     QACICS     QA         Quality Assurance/Training CICS\n            E     DEVCICS    DEV        Development CICS\n\n\n   Enter either the OPTION, COMMAND or ALIAS to connect to that application\n   Enter EXIT to disconnect from George Mason Universities IBM mainframe\n\n           ONLY FIRST 18 LINES OF THIS MEMBER ARE USED.\n           ONLY FIRST 18 LINES OF THIS MEMBER ARE USED.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "APPL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x03O\\t#\\x00\\x04\\x00\\x04\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-03T09:23:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "NETSOL"}, "text": "NETSOLAP VBUILD TYPE=APPL\nGMUMENU  APPL  ACBNAME=NETSOL,                                         +\n               AUTH=(ACQ,PASS,SPO,NVPACE),                             +\n               EAS=404\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASM": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x03O\\t$\\x1cG\\x1cG\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-03T09:24:00", "lines": 7239, "newlines": 7239, "modlines": 0, "user": "NETSOL"}, "text": "         PRINT OFF\n         MACRO\n&LABEL   $CMD  &GAPPL,&VAPPL,&ROUT,&CMDTEXT,&CMDFLAG\n.*\n.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S COMMAND LOOK-UP TABLE.\n.*\n.*  INPUT    : &GAPPL   - GENERALIZED APPLICATION NAME.\n.*             &VAPPL   - ASSOCIATED VTAM APPLICATION NAME.\n.*             &ROUT    - ROUTINE TO PROCESS THE COMMAND.\n.*             &CMDTEXT - COMMAND ENTERED FROM TERMINAL.\n.*             &CMDFLAG - COMMAND FLAG BYTE.\n.*\n.*  OUTPUT   : AN ENTRY IN NETSOL'S COMMAND ENTRY TABLE IS GENERATED.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : APR  15/81\n.*\n         LCLA  &L\n&L       SETA  K'&CMDTEXT-2\n&LABEL   DC    CL8'&GAPPL',CL8'&VAPPL',CL8&CMDTEXT,AL4(&ROUT),AL2(&L),AX\n               L1(&CMDFLAG,0)\n         MEND\n         MACRO\n&LABEL   $GP   &GPLEN,&ERRTEXT,&GPFLAG\n.*\n.*  FUNCTION : GENERATE AN ENTRY FOR NETSOL'S GETPARM OPTION LIST.\n.*\n.*  INPUT    : &GPLEN   - MAXIMUM LENGTH OF PARAMETER.\n.*             &ERRTEXT - TEXT FOR ERROR MSG FROM GETPARM ROUTINE.\n.*             &GPFLAG  - OPTION BYTE FOR GETPARM.\n.*\n.*  OUTPUT   : A PARAMETER OPTION LIST\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : JUNE 19/81\n.*\n         LCLA  &L\n&L       SETA  K'&ERRTEXT-2\n&LABEL   DC    AL2(&GPLEN,&L),AL1(&GPFLAG),CL&L&ERRTEXT\n         MEND\n         SPACE 2\n*        COPY MACROS\n         MACRO\n         $ATTR  &ATTR\n.*\n.*  FUNCTION : VALIDATE 3270 ATTRIBUTE OPTIONS AND GENERATE\n.*             APPROPRIATE HEX CODE.\n.*\n.*  METHOD   : USE BIT ARRAY TO FLAG SELECTED OPTIONS THEN GENERATE\n.*             APPROPRIATE HEX CODE.\n.*\n.*  INPUT    : &ATTR - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                    (PROT,NUM,MDT,HI,NONDISP,SKIP)\n.*                    (UNPROT,ALPHA,NOMDT)\n.*\n.*  OUTPUT   : &RC      =  0 => ATTRIBUTE OPTIONS OK\n.*                        \u00ac0 => ATTRIBUTE OPTIONS ARE NOT OK.\n.*           : &ATTRIB  = HEX CODE FOR ATTRIBUTE OPTIONS SELECTED.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLA  &I1,&BIT(8)\n&I1      SETA  1\n.LOOP    ANOP\n.*   PROCESS PROT ATTRIBUTE\n         AIF ('&ATTR(&I1)' NE 'PROT').UNPROT\n&BIT(3)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS UNPROT ATTRIBUTE\n.UNPROT  AIF ('&ATTR(&I1)' NE 'UNPROT').NUM\n&BIT(3)  SETA  0\n         AGO    .NXTONE\n.*   PROCESS NUM ATTRIBUTE\n.NUM     AIF ('&ATTR(&I1)' NE 'NUM').ALPHA\n&BIT(4)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS ALPHA ATTRIBUTE\n.ALPHA   AIF ('&ATTR(&I1)' NE 'ALPHA').SKIP\n&BIT(4)  SETA  0\n         AGO    .NXTONE\n.*   PROCESS SKIP ATTRIBUTE\n.SKIP    AIF ('&ATTR(&I1)' NE 'SKIP').NONDISP\n&BIT(3)  SETA  1\n&BIT(4)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS NONDISP ATTRIBUTE\n.NONDISP AIF ('&ATTR(&I1)' NE 'NONDISP').HI\n&BIT(5)  SETA  1\n&BIT(6)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS HI ATTRIBUTE\n.HI      AIF ('&ATTR(&I1)' NE 'HI').MDT\n&BIT(5)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS MDT ATTRIBUTE\n.MDT     AIF ('&ATTR(&I1)' NE 'MDT').NOMDT\n&BIT(8)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS NOMDT ATTRIBUTE\n.NOMDT   AIF ('&ATTR(&I1)' NE 'NOMDT').ERROR\n&BIT(8)  SETA  0\n         AGO    .NXTONE\n.ERROR   MNOTE 8,'&ATTR(&I1) IS AN INVALID ATTRIBUTE OPTION'\n.NXTONE  ANOP\n&I1      SETA  &I1+1\n         AIF (&I1 LE N'&ATTR).LOOP\n.*   CALCULATE VALUE OF OPTION BYTE\n&I1      SETA &BIT(8)+&BIT(6)*4+&BIT(5)*8+&BIT(4)*16+&BIT(3)*32+1\n         AIF (&I1 LE 64).GETCHAR\n         MNOTE 8,'&I1 IS GREATE THAN 64'\n&RC      SETA  4\n         MEXIT\n.*   LOOK UP CHAR FOR CALCULATED OPTION BYTE.\n.GETCHAR ANOP\n&ATTRIB  SETC  '&TAB3270(&I1)'\n&RC      SETA  0\n         MEND\n         MACRO\n         $COL   &COL\n.*\n.*  FUNCTION : VALIDATE COLOUR OPTION AND SELECT\n.*             APPROPRIATE HEX CODE.\n.*\n.*  INPUT    : &COL - COLOUR OPTION. IT MUST BE ONE OF\n.*                  (DEFAULT,BLUE,RED,PINK,GREEN,TURQUOIS,YELLOW,WHITE)\n.*                    ONLY 1ST 3 CHARS ARE CHECKED\n.*\n.*  OUTPUT   : &RC      =  0 => COLOUR OPTION IS OK.\n.*                        \u00ac0 => COLOUR OPTION IS NOT OK.\n.*           : &ATTRIB  = HEX CODE FOR COLOUR OPTION SELECTED.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &ATTRIB\n         GBLA  &RC\n         AIF ('&COL'(1,3) NE 'DEF').BLUE\n.*   SET HEX CODE FOR DEFAULT\n&ATTRIB  SETC  '00'\n         AGO    .COLFND\n.BLUE    AIF ('&COL'(1,3) NE 'BLU').RED\n.*   SET HEX CODE FOR BLUE\n&ATTRIB  SETC  'F1'\n         AGO    .COLFND\n.RED     AIF ('&COL'(1,3) NE 'RED').PINK\n.*   SET HEX CODE FOR RED\n&ATTRIB  SETC  'F2'\n         AGO    .COLFND\n.PINK    AIF ('&COL'(1,3) NE 'PIN').GREEN\n.*   SET HEX CODE FOR PINK\n&ATTRIB  SETC  'F3'\n         AGO    .COLFND\n.GREEN   AIF ('&COL'(1,3) NE 'GRE').TURQ\n.*   SET HEX CODE FOR GREEN\n&ATTRIB  SETC  'F4'\n         AGO    .COLFND\n.TURQ    AIF ('&COL'(1,3) NE 'TUR').YELLOW\n.*   SET HEX CODE FOR TURQUOISE\n&ATTRIB  SETC  'F5'\n         AGO    .COLFND\n.YELLOW  AIF ('&COL'(1,3) NE 'YEL').WHITE\n.*   SET HEX CODE FOR YELLOW\n&ATTRIB  SETC  'F6'\n         AGO    .COLFND\n.WHITE   AIF ('&COL'(1,3) NE 'WHI').ERROR\n.*   SET HEX CODE FOR WHITE\n&ATTRIB  SETC  'F7'\n         AGO    .COLFND\n.*   REJECT COLOUR OPTION\n.ERROR   MNOTE 8,'&COL IS AN INVALID COLOUR.'\n&RC      SETA  4\n         MEXIT\n.*   ACCEPT COLOUR OPTION\n.COLFND  ANOP\n&RC      SETA  0\n         MEND\n         MACRO\n&LABEL   $IC\n.*\n.*  FUNCTION : GENERATE 3270 INSERT CURSOR ORDER.\n.*\n.*  INPUT    : NONE\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE IC ORDER\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n&LABEL   DC    X'13'               IC\n         MEND\n         MACRO\n&LABEL   $IO   &CMD\n.*\n.*  FUNCTION : GENERATE VALID IO COMMAND FOR 3270 DATA STREAM.\n.*\n.*  INPUT    : &CMD     = WRITE\n.*                        WSF         - WRITE STRUCTURED FIELD\n.*                        ERASE/WRITE - USE &MODEL TO SELECT IO CMD\n.*             &MODEL   - SPECIFIES MODEL NUMBER OF 3270 TERMINAL.\n.*\n.*  OUTPUT   : ASSEMBLER DC STATEMENT FOR IO COMMAND.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MODEL\n         LCLC  &OPCODE,&COMMENT\n.*   PROCESS WRITE COMMAND\n         AIF ('&CMD' NE 'WRITE').WSF\n&OPCODE  SETC  'F1'\n         AGO    .DC\n.*   PROCESS WRITE STRUCTURED FIELD COMMAND\n.WSF     AIF ('&CMD' NE 'WSF').ERWRIT\n&OPCODE  SETC  'F3'\n         AGO    .DC\n.*   PROCESS ERASE/WRITE COMMAND\n.ERWRIT  AIF ('&CMD' NE 'ERASE/WRITE').ERROR\n&OPCODE  SETC  'F5'\n         AIF (&MODEL LE 2).DC\n&OPCODE  SETC  '7E'\n         AGO    .DC\n.*   PROCESS INVALID COMMANDS\n.ERROR   MNOTE 8,'&CMD IS AN INVALID 3270 COMMAND'\n         MEXIT\n.DC      ANOP\n&COMMENT SETC '                &CMD FOR 3270 MODEL &MODEL'\n&LABEL   DC    X'&OPCODE'&COMMENT\n         MEND\n         MACRO\n         $MODEL &NUM\n.*\n.*  FUNCTION : SET MODEL NUMBER FOR SUBSEQUENT 3270 MACRO INSTRUCTIONS.\n.*\n.*  INPUT    : 3270 MODEL NUMBER (1,2,3,4 OR 5)\n.*\n.*  OUTPUT   : &MODEL SETA SYMBOL IS SET.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC,&MODEL\n         AIF   ((&NUM GE 2) AND (&NUM LE 4)).OK\n         MNOTE 8,'3270 MODEL &MODEL IS NOT SUPPORTED BY THESE MACROS.'\n         MEXIT\n.OK      ANOP\n&MODEL   SETA  &NUM\n         MEND\n         MACRO\n         $PSS   &PSS\n.*\n.*  FUNCTION : VALIDATE PROGRAMMED SYMBOL SET.\n.*\n.*  INPUT    : &PSS - PROGRAMMED SYMBOL SET ID\n.*\n.*  OUTPUT   : &RC      =  0 => SYMBOL SET OK.\n.*                        \u00ac0 => SYMBOL SET IS INVALID.\n.*           : &ATTRIB  = VALID PROGRAMMED SYMBOL SET ID.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &ATTRIB\n         GBLA  &RC\n         AIF (('&PSS' GE '40') AND ('&PSS' LE 'EF')).PSSFND\n.*   REJECT SYMBOL SET\n         MNOTE 8,'&PSS IS AN INVALID SYMBOL SET'\n&RC      SETA  4\n         MEXIT\n.*   ACCEPT SYMBOL SET\n.PSSFND  ANOP\n&ATTRIB  SETC  '&PSS'\n&RC      SETA  0\n         MEND\n         MACRO\n&LABEL   $RA   &OPTIONS\n.*\n.*  FUNCTION : GENERATE 3270 REPEAT TO ADDRESS ORDER. THE (ROW,COLUMN)\n.*             FORMAT ADDRESS IS CONVERTED TO THE HEX CHARACTERS\n.*             REQUIRED FOR THE ORDER AND THE REPEAT CHARACTER IS\n.*             APPENDED TO THE END OF THE RA ORDER.\n.*\n.*  REFERENCE: BUFFER ADDRESS CONVERSION ALGORITHM IN\n.*             GC27-6999 INTRO TO PROGRAMMING THE 3270 IDS\n.*\n.*  INPUT    : BUFFER ADDRESS AND CHARACTER IN (ROW,COLUMN,CHAR) FORMAT\n.*             CHAR MUST BE IN THE FORMAT C'A' OR X'C1'\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE RA ORDER\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC\n         LCLA  &ROW,&COLUMN,&BUFFLOC,&I1,&I2\n         LCLC  &COMMENT,&CHAR\n&ROW     SETA  &OPTIONS(1)\n&COLUMN  SETA  &OPTIONS(2)\n&CHAR    SETC  '&OPTIONS(3)'\n.*  CALC OFFSET IN 3270 BUFFER\n&BUFFLOC SETA  ((&ROW-1)*80)+(&COLUMN-1)\n.*  CONVERT 12 BIT ADDR TO TWO 6 BIT ADDRS\n&I1      SETA  &BUFFLOC/64\n&I2      SETA  &BUFFLOC-(&I1*64)\n.*  CHANGE INDICES INTO 3270 CONVERSION TABLE FROM 0-BASED TO 1-BASED\n&I1      SETA  &I1+1\n&I2      SETA  &I2+1\n&COMMENT SETC  '    RA &OPTIONS'\n&LABEL   DC    XL3'3C&TAB3270(&I1)&TAB3270(&I2)',&CHAR&COMMENT\n         MEND\n         MACRO\n&LABEL   $SBA  &ADDR\n.*\n.*  FUNCTION : GENERATE 3270 SET BUFFER ADDRESS ORDER. THE (ROW,COLUMN)\n.*             FORMAT ADDRESS IS CONVERTED TO THE HEX CHARACTERS\n.*             REQUIRED FOR THE ORDER.\n.*\n.*  REFERENCE: BUFFER ADDRESS CONVERSION ALGORITHM IN\n.*             GC27-6999 INTRO TO PROGRAMMING THE 3270 IDS\n.*\n.*  INPUT    : BUFFER ADDRESS IN (ROW,COLUMN FORMAT)\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE SBA ORDER AND THE BUFFER ADDR\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC\n         LCLA  &ROW,&COLUMN,&BUFFLOC,&I1,&I2\n         LCLC  &COMMENT\n&ROW     SETA  &ADDR(1)\n&COLUMN  SETA  &ADDR(2)\n.*  CALC OFFSET IN 3270 BUFFER\n&BUFFLOC SETA  ((&ROW-1)*80)+(&COLUMN-1)\n.*  CONVERT 12 BIT ADDR TO TWO 6 BIT ADDRS\n&I1      SETA  &BUFFLOC/64\n&I2      SETA  &BUFFLOC-(&I1*64)\n.*  CHANGE INDICES INTO 3270 CONVERSION TABLE FROM 0-BASED TO 1-BASED\n&I1      SETA  &I1+1\n&I2      SETA  &I2+1\n&COMMENT SETC  '          SBA &ADDR'\n&LABEL   DC    XL3'11&TAB3270(&I1)&TAB3270(&I2)'&COMMENT\n         MEND\n         MACRO\n&LABEL   $SBATEST\n.*\n.*  FUNCTION : GENERATE ALL 3270 BUFFER ADDRESSES TO TEST $SBA.\n.*\n.*  OUTPUT   : CODE IS GENERATED FOR THE SBA ORDER AND THE BUFFER ADDR\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64)\n         GBLA  &RC\n         LCLA  &M,&N\n&TAB3270(1) SETC  '40'\n&TAB3270(2) SETC  'C1'\n&TAB3270(3) SETC  'C2'\n&TAB3270(4) SETC  'C3'\n&TAB3270(5) SETC  'C4'\n&TAB3270(6) SETC  'C5'\n&TAB3270(7) SETC  'C6'\n&TAB3270(8) SETC  'C7'\n&TAB3270(9) SETC  'C8'\n&TAB3270(10) SETC 'C9'\n&TAB3270(11) SETC '4A'\n&TAB3270(12) SETC '4B'\n&TAB3270(13) SETC '4C'\n&TAB3270(14) SETC '4D'\n&TAB3270(15) SETC '4E'\n&TAB3270(16) SETC '4F'\n&TAB3270(17) SETC '50'\n&TAB3270(18) SETC 'D1'\n&TAB3270(19) SETC 'D2'\n&TAB3270(20) SETC 'D3'\n&TAB3270(21) SETC 'D4'\n&TAB3270(22) SETC 'D5'\n&TAB3270(23) SETC 'D6'\n&TAB3270(24) SETC 'D7'\n&TAB3270(25) SETC 'D8'\n&TAB3270(26) SETC 'D9'\n&TAB3270(27) SETC '5A'\n&TAB3270(28) SETC '5B'\n&TAB3270(29) SETC '5C'\n&TAB3270(30) SETC '5D'\n&TAB3270(31) SETC '5E'\n&TAB3270(32) SETC '5F'\n&TAB3270(33) SETC '60'\n&TAB3270(34) SETC '61'\n&TAB3270(35) SETC 'E2'\n&TAB3270(36) SETC 'E3'\n&TAB3270(37) SETC 'E4'\n&TAB3270(38) SETC 'E5'\n&TAB3270(39) SETC 'E6'\n&TAB3270(40) SETC 'E7'\n&TAB3270(41) SETC 'E8'\n&TAB3270(42) SETC 'E9'\n&TAB3270(43) SETC '6A'\n&TAB3270(44) SETC '6B'\n&TAB3270(45) SETC '6C'\n&TAB3270(46) SETC '6D'\n&TAB3270(47) SETC '6E'\n&TAB3270(48) SETC '6F'\n&TAB3270(49) SETC 'F0'\n&TAB3270(50) SETC 'F1'\n&TAB3270(51) SETC 'F2'\n&TAB3270(52) SETC 'F3'\n&TAB3270(53) SETC 'F4'\n&TAB3270(54) SETC 'F5'\n&TAB3270(55) SETC 'F6'\n&TAB3270(56) SETC 'F7'\n&TAB3270(57) SETC 'F8'\n&TAB3270(58) SETC 'F9'\n&TAB3270(59) SETC '7A'\n&TAB3270(60) SETC '7B'\n&TAB3270(61) SETC '7C'\n&TAB3270(62) SETC '7D'\n&TAB3270(63) SETC '7E'\n&TAB3270(64) SETC '7F'\n&M       SETA  1\n.LOOP1   ANOP\n&N       SETA  1\n.LOOP2   ANOP\n         $SBA  (&M,&N)\n&N       SETA  &N+1\n         AIF (&N LE 80).LOOP2\n&M       SETA  &M+1\n         AIF (&M LE 43).LOOP1\n         MEND\n         MACRO\n&LABEL   $SF    &ATTR\n.*\n.*  FUNCTION : GENERATE START FIELD ORDER WITH SPECIFIED\n.*             OPTIONS.\n.*\n.*  INPUT    : &ATTR   - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                       (PROT,NUM,MDT,HI,NONDISP,SKIP)\n.*                       (UNPROT,ALPHA,NOMDT)\n.*\n.*  OUTPUT   : SFE ORDER PLUS OPTION BYTES.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLC  &COMMENT\n.*   PROCESS ATTRIBUTE OPTIONS\n         AIF (N'&ATTR  EQ 0).NOATTR\n         $ATTR &ATTR\n         AIF (&RC EQ 0).DC\n.* USE DEFAULT ATTRIBUTE BYTE\n.NOATTR  ANOP\n&ATTRIB  SETC  '40'\n.DC      ANOP\n&COMMENT SETC  '              SF &ATTR'\n&LABEL   DC    X'1D&ATTRIB'&COMMENT\n         MEND\n         MACRO\n&LABEL   $SFE   &ATTR=,&XHL=,&COL=,&PSS=\n.*\n.*  FUNCTION : GENERATE START FIELD EXTENDED ORDER WITH SPECIFIED\n.*             OPTIONS.\n.*\n.*  INPUT    : &ATTRIB - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                       (PROT,NUM,MDT,HI,NONDISP,SKIP)\n.*                       (UNPROT,ALPHA,NOMDT)\n.*           : &XHL    - EXTENDED HIGHLIGHTING OPTIONS. MUST BE ONE OF\n.*                       (BLINKING,REVERSE,UNDERSCORE)\n.*           : &COL    - COLOUR OPTION. IT MUST BE ONE OF\n.*                       (BLUE,RED,PINK,GREEN,TURQUOISE,YELLOW,WHITE)\n.*                       ONLY 1ST 3 CHARS ARE CHECKED\n.*           : &PSS    - PROGRAMMED SYMBOL SET. THE VALUE MUST BE\n.*                       BETWEEN X'40' AND X'EF'.\n.*\n.*  OUTPUT   : SFE ORDER PLUS OPTION BYTES.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC\n         LCLA  &CNT\n         LCLC  &OPTIONS,&COMMENT\n.*   PROCESS ATTRIBUTE OPTIONS\n         AIF ('&ATTR' EQ '').XHL\n         $ATTR &ATTR\n         AIF (&RC NE 0).XHL\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'C0'.'&ATTRIB'\n.*   PROCESS EXTENDED HIGHLIGHT OPTIONS\n.XHL     AIF ('&XHL' EQ '').COL\n         $XHL  &XHL\n         AIF (&RC NE 0).COL\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'41'.'&ATTRIB'\n.*   PROCESS COLOUR OPTION.\n.COL     AIF ('&COL' EQ '').PSS\n         $COL  &COL\n         AIF (&RC NE 0).PSS\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'42'.'&ATTRIB'\n.*   PROCESS PROGRAMMED SYMBOL SET OPTION\n.PSS     AIF ('&PSS' EQ '').CHKCNT\n         $PSS  &PSS\n         AIF (&RC NE 0).CHKCNT\n&CNT     SETA  &CNT+1\n&OPTIONS SETC  '&OPTIONS'.'43'.'&ATTRIB'\n.*   VERIFY ATLEAST ONE VALID OPTION.\n.CHKCNT  AIF (&CNT GT 0).DC\n         MNOTE 8,'NO VALID ATTRIBUTES SPECIFIED IN $SFE MACRO'\n&RC      SETA  4\n         MEXIT\n.*   GENERATE SFE ORDER AND OPTIONS\n.DC      ANOP\n&COMMENT SETC  '      SFE &ATTR,&XHL,&COL,&PSS'\n&LABEL   DC    X'290&CNT&OPTIONS'&COMMENT\n         MEND\n         MACRO\n&LABEL   $WCC   &OPTIONS\n.*\n.*  FUNCTION : GENERATE VALID WRITE CONTROL CHARACTER FOR 3270 DATA\n.*             STREAM.\n.*\n.*  METHOD   : USE BIT ARRAY TO FLAG SELECTED OPTIONS THEN GENERATE\n.*             APPROPRIATE HEX CODE.\n.*\n.*  INPUT    : &OPTIONS - ATTRIBUTE OPTIONS. IT MUST BE ONE OF\n.*                        (ALARM,RESETKBD,MDT)\n.*\n.*  OUTPUT   : ASSEMBLER DC STATEMENT FOR WCC CODE.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MODEL\n         LCLA  &I1,&BIT(8)\n         LCLC  &COMMENT\n         AIF   (N'&OPTIONS EQ 0).DEFAULT\n&I1      SETA  1\n.LOOP    ANOP\n.*   PROCESS ALARM ATTRIBUTE\n         AIF ('&OPTIONS(&I1)' NE 'ALARM').RESETKB\n&BIT(6)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS RESETKBD ATTRIBUTE\n.RESETKB AIF ('&OPTIONS(&I1)' NE 'RESETKBD').MDT\n&BIT(7)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS MDT ATTRIBUTE\n.MDT     AIF ('&OPTIONS(&I1)' NE 'MDT').ERROR\n&BIT(8)  SETA  1\n         AGO    .NXTONE\n.*   PROCESS INVALID ATTRIBUTES\n.ERROR   MNOTE 8,'&OPTIONS(&I1) IS INVALID FOR WCC'\n.NXTONE  ANOP\n&I1      SETA  &I1+1\n         AIF (&I1 LE N'&OPTIONS).LOOP\n.*   CALCULATE VALUE OF OPTION BYTE PLUS ONE\n.DEFAULT ANOP\n&I1      SETA &BIT(8)+&BIT(7)*2+&BIT(6)*4+1\n         AIF (&I1 LE 64).GETCHAR\n         MNOTE 8,'&I1 IS GREATE THAN 64'\n         MEXIT\n.*   LOOK UP CHAR FOR CALCULATED OPTION BYTE.\n.GETCHAR ANOP\n&COMMENT SETC '                WCC &OPTIONS'\n&LABEL   DC    X'&TAB3270(&I1)'&COMMENT\n         MEND\n         MACRO\n         $XHL   &XHL\n.*\n.*  FUNCTION : VALIDATE EXTENDED HIGHLIGHTING OPTION AND SELECT\n.*             APPROPRIATE HEX CODE.\n.*\n.*  INPUT    : &XHL - EXTENDED HIGHLIGHTING OPTION. IT MUST BE ONE OF\n.*                    (BLINK,REVERSE,UNDERSCORE)\n.*\n.*  OUTPUT   : &RC      =  0 => XH OPTION IS OK.\n.*                        \u00ac0 => XH OPTION IS INVALID.\n.*           : &ATTRIB  = HEX CODE FOR XH OPTION SELECTED.\n.*\n.*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n.*\n.*  DATE     : SEPT 19/80\n.*\n         GBLC  &ATTRIB\n         GBLA  &RC\n         AIF ('&XHL' NE 'BLINK').REVID\n.*   SET HEX CODE FOR BLINKING\n&ATTRIB  SETC  'F1'\n         AGO    .XHLFND\n.REVID   AIF ('&XHL' NE 'REVERSE').UNDER\n.*   SET HEX CODE FOR REVERSE\n&ATTRIB  SETC  'F2'\n         AGO    .XHLFND\n.UNDER   AIF ('&XHL' NE 'UNDERSCORE').ERROR\n.*   SET HEX CODE FOR UNDERSCORE\n&ATTRIB  SETC  'F4'\n         AGO    .XHLFND\n.*   REJECT EXTENDED HIGHLIGHTING OPTION\n.ERROR   MNOTE 8,'&XHL IS AN INVALID EXTENDED HIGHLIGHTING OPTION.'\n&RC      SETA  4\n         MEXIT\n.*   ACCEPT XH OPTION\n.XHLFND  ANOP\n&RC      SETA  0\n         MEND\n*\n*  FUNCTION : INITIALIZE MACRO SYMBOLS REQUIRED BY 3270 MACROS.\n*\n*  AUTHOR   : ED PITKIN, DISTRIBUTED SERVICES\n*\n*  DATE     : SEPT 19/80\n*\n         GBLC  &TAB3270(64),&ATTRIB\n         GBLA  &RC,&MODEL\n         PRINT OFF\n&MODEL      SETA  2\n&TAB3270(1) SETC  '40'\n&TAB3270(2) SETC  'C1'\n&TAB3270(3) SETC  'C2'\n&TAB3270(4) SETC  'C3'\n&TAB3270(5) SETC  'C4'\n&TAB3270(6) SETC  'C5'\n&TAB3270(7) SETC  'C6'\n&TAB3270(8) SETC  'C7'\n&TAB3270(9) SETC  'C8'\n&TAB3270(10) SETC 'C9'\n&TAB3270(11) SETC '4A'\n&TAB3270(12) SETC '4B'\n&TAB3270(13) SETC '4C'\n&TAB3270(14) SETC '4D'\n&TAB3270(15) SETC '4E'\n&TAB3270(16) SETC '4F'\n&TAB3270(17) SETC '50'\n&TAB3270(18) SETC 'D1'\n&TAB3270(19) SETC 'D2'\n&TAB3270(20) SETC 'D3'\n&TAB3270(21) SETC 'D4'\n&TAB3270(22) SETC 'D5'\n&TAB3270(23) SETC 'D6'\n&TAB3270(24) SETC 'D7'\n&TAB3270(25) SETC 'D8'\n&TAB3270(26) SETC 'D9'\n&TAB3270(27) SETC '5A'\n&TAB3270(28) SETC '5B'\n&TAB3270(29) SETC '5C'\n&TAB3270(30) SETC '5D'\n&TAB3270(31) SETC '5E'\n&TAB3270(32) SETC '5F'\n&TAB3270(33) SETC '60'\n&TAB3270(34) SETC '61'\n&TAB3270(35) SETC 'E2'\n&TAB3270(36) SETC 'E3'\n&TAB3270(37) SETC 'E4'\n&TAB3270(38) SETC 'E5'\n&TAB3270(39) SETC 'E6'\n&TAB3270(40) SETC 'E7'\n&TAB3270(41) SETC 'E8'\n&TAB3270(42) SETC 'E9'\n&TAB3270(43) SETC '6A'\n&TAB3270(44) SETC '6B'\n&TAB3270(45) SETC '6C'\n&TAB3270(46) SETC '6D'\n&TAB3270(47) SETC '6E'\n&TAB3270(48) SETC '6F'\n&TAB3270(49) SETC 'F0'\n&TAB3270(50) SETC 'F1'\n&TAB3270(51) SETC 'F2'\n&TAB3270(52) SETC 'F3'\n&TAB3270(53) SETC 'F4'\n&TAB3270(54) SETC 'F5'\n&TAB3270(55) SETC 'F6'\n&TAB3270(56) SETC 'F7'\n&TAB3270(57) SETC 'F8'\n&TAB3270(58) SETC 'F9'\n&TAB3270(59) SETC '7A'\n&TAB3270(60) SETC '7B'\n&TAB3270(61) SETC '7C'\n&TAB3270(62) SETC '7D'\n&TAB3270(63) SETC '7E'\n&TAB3270(64) SETC '7F'\n         PRINT ON\n*        COPY $3270INT\n         PRINT ON,NOGEN\n         SPACE 2\n         TITLE '* * * * * * * * *    N E T S O L'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                  * * * * * * * * *                                  *\n*                                                                     *\n*                    N E T W O R K                                    *\n*                                                                     *\n*                  S O L I C I T O R                                  *\n*                                                                     *\n*                   ( N E T S O L )                                   *\n*                                                                     *\n*                                                                     *\n*  ENTRY PARAMETERS:  R15  -  ENTRY POINT ADDRESS                     *\n*                     R13  -  CALLERS SAVE AREA (FROM ATTACH)         *\n*                     R14  -  RETURN ADDRESS (POINTS TO SVC 3 IN CASE *\n*                             OF ATTACH BY NET)                       *\n*                     R0-R12  NOT USED                                *\n*                                                                     *\n*  EXIT PARAMETERS:   R0-R14  SAME AS ENTRY TO NETSOL                 *\n*                     R15     ZERO                                    *\n*                                                                     *\n*  FUNCTION:  NETSOL IS USED TO HANDLE TERMINAL INITIATED LOGONS      *\n*             AND AS SUCH SOLICITS LOGON DATA FROM THE TERMINALS      *\n*             UNDER ITS CONTROL.                                      *\n*                                                                     *\n*             WITH THE ABOVE DATA, NETSOL CAN PASS CONTROL OF THE     *\n*             LOGICAL UNIT FROM NETSOL'S CONTROL TO THAT OF THE       *\n*             REQUESTED APPLICATION.                                  *\n*                                                                     *\n*             TO FACILITATE ENDUSER EASE OF USE, NETSOL HAS A TABLE   *\n*             OF APPLICATIONS THAT USE NON-STANDARD LOGMODE TABLE     *\n*             ENTRIES. WHEN THE USER REQUESTS ONE OF THESE            *\n*             APPLICATIONS, NETSOL LOADS THE APPROPRIATE LOGMODE      *\n*             NAME FROM THE TABLE AND PASSWS THIS INFORMATION         *\n*             TO THE APPLICATION DURING THE CLSDST(PASS). THE ENDUSER *\n*             IS NOT REQUIRED TO KNOW ABOUT LOGMODE TABLES. THE       *\n*             NAME OF THIS TABLE IS 'LOGMDTAB'.                       *\n*                                                                     *\n*             THE 'LOGOFF' COMMAND HAS BEEN ADDED TO NETSOL TO ALLOW  *\n*             8100-ATTACHED TERMINALS TO DISCONNECT FROM NETSOL. 8100 *\n*             TERMINALS ARE GENNED WITH A NULL 'LOGAPPL'. LOGOFF     .*\n*             ENTERED AT A STANDARD 3270 TERMINAL, WILL HAVE NO       *\n*             EFFECT SINCE LOGAPPL=NETSOL FOR THESE TERMINALS.        *\n*                                                                     *\n*             ERROR MESSAGES CAN BE ISSUED AT VARIOUS STAGES OF THIS  *\n*             PROCESS IF THE APPLICATION IS INACTIVE, LOGON DATA      *\n*             ENTERED IS INVALID, APPLICATION WON'T ACCEPT LOGONS,ETC.*\n*                                                                     *\n*             TO AID IN DEBUGGING, NETSOL ALSO WRITES SOME MESSAGES   *\n*             TO THE OPERATORS CONSOLE WHEN ERRORS AE DETECTED AS A   *\n*             RESULT OF I/O ERRORS, INVALID LOGONS, ETC.              *\n*                                                                     *\n*             NETSOL SUPPORTS BISYNC AND SDLC 3270 DEVICES (3276'S,   *\n*             3275'S, 3276'S, AND 3278'S).                            *\n*                                                                     *\n*             NETSOL USES RECORD MODE I/O TO TALK TO ITS TERMINALS    *\n*             SO IT DOES NOT SUPPORT ANY TERMINALS THAT CAN BE        *\n*             ACCESSED VIA BASIC MODE I/O ONLY.                       *\n*                                                                     *\n*             TO AID IN CONTROLLING THE TERMINALS LOGGED ON TO        *\n*             NETSOL, NETSOL MAINTAINS A TERMINAL TABLE WHICH HAS     *\n*             AN ENTRY FOR EACH TERMINAL THAT HAS BEEN LOGGED ON      *\n*             AT ANY TIME SINCE NETSOL WAS FIRST BROUGHT UP. THESE    *\n*             TERMINAL TABLE ENTRIES (TTE'S) ARE USED TO PROVIDE      *\n*             A MEANS OF TRANSLATING A GIVEN CID TO THE LU NAME AND   *\n*             WHEN THE RELEASE-REQUEUE (RELREQ) EXIT NEEDS TO KNOW    *\n*             THE STATUS OF A GIVEN TERMINAL (IE IS IT TRYING TO      *\n*             DO A LOGON).                                            *\n*                                                                     *\n*             MOST OF NETSOL'S FUNCTIONS ARE PERFORMED IN VARIOUS     *\n*             EXITS AS FOLLOWS:                                       *\n*                                                                     *\n*             1) TPEND EXIT        - HANDLE 'Z NET' FUNCTION          *\n*                                    WHERE NETSOL IS TO SHUT DOWN.    *\n*                                                                     *\n*             2) LOGON EXIT        - HANDLES TERMINALS BEING LOGGED   *\n*                                    ON TO NETSOL. BUILDS OR UPDATES  *\n*                                    TTE, DOES OPNDST(ACCEPT), AND    *\n*                                    SENDS THE FORMATTED LOGON SCREEN *\n*                                    TO THE TERMINAL.                 *\n*                                                                     *\n*             3) LOSTERM EXIT      - HANDLE 'LOST TERMINAL' CONDITIONS*\n*                                    DUE TO LU/PU/LINK/NCP FAILURES.  *\n*                                    DEPENDING ON THE CONDITION, MAY  *\n*                                    ATTEMPT TO RECOVER THE TERMINAL. *\n*                                                                     *\n*             4) RELREQ EXIT       - HANDLE RELEASE-REQUEUE REQUESTS  *\n*                                    WHERE ANOTHER VTAM APPLICATION   *\n*                                    WANTS THE TERMINAL OWNED BY      *\n*                                    NETSOL. UNLESS A LOGON IS TAKING *\n*                                    PLACE, NETSOL RELEASES THE LU.   *\n*                                                                     *\n*             AS WELL, A NUMBER OF RPL EXITS ARE USED TO HANDLE       *\n*             RPL COMMANDS THAT ARE DONE ASYNCHRONOUSLY VIA RPL'S     *\n*             THAT ARE GETMAINED WHEN NEEDED. THESE EXITS ARE:        *\n*                                                                     *\n*             1) OPNDST END EXIT   - ENTERED WHEN AN ASYNCHRONOUS     *\n*                                    OPDNST TO A SPECIFIC TERMINAL    *\n*                                    COMPLETES.                       *\n*                                                                     *\n*             2) RECEIVE END EXIT  - ENTERED WHEN A RECEIVE(ANY) RPL  *\n*                                    IS POSTED COMPLETE. EXAMINES THE *\n*                                    DATA ENTERED FOR A LOGON REQUEST *\n*                                    FROM THE TERMINAL USER.          *\n*                                                                     *\n*             3) END OF SEND EXIT  - ENTERED WHEN AN ASYNCHRONOUS     *\n*                                    SEND TO THE TERMINAL COMPLETES.  *\n*                                                                     *\n*             4) CLSDST(PASS) END  - ENTERED WHEN THE CLSDST(PASS)    *\n*                                    COMPLETES THAT PASSES CONTROL    *\n*                                    TO THE APPLICATION REQUESTED.    *\n*                                    NETSOL NO LONGER SIMLOGONS TO    *\n*                                    GAIN CONTROL BACK WHEN USER      *\n*                                    LOGS OFF THE APPLICATION         *\n*                                                                     *\n*             5) CLSDST(RELEASE)   - ENTERED WHEN CLSDST(RELEASE)     *\n*                                    COMPLETES. DONE DUE TO RELREQ    *\n*                                    REQUEST OR I/O ERRORS.           *\n*                                                                     *\n*             AS WELL, NETSOL MAKES USE OF A NUMBER OF SUBROUTINES    *\n*             AS FOLLOWS:                                             *\n*                                                                     *\n*             1) GETRPL            - OBTAIN DYNAMIC RPLS VIA A        *\n*                                    GETMAIN FROM SUBPOOL 1           *\n*                                                                     *\n*             2) FREERPL           - FREEMAIN DYNAMIC RPL'S           *\n*                                                                     *\n*             3) RECSUB            - ISSUE RECEIVE ANY'S              *\n*                                                                     *\n*             4) ERROR EXIT        - HANDLES ERRORS WHEN A CHECK      *\n*                                    MACRO IS USED ON AN ASYNC RPL    *\n*                                    OR A SYNC RPL COMPLETES. PASSES  *\n*                                    BACK RETURN CODES AND A MODIFIER *\n*                                    (USUALLY ERROR MESSAGE NUMBER)   *\n*                                    TO CODE AFTER THE INSTRUCTION    *\n*                                    THAT MADE THE MACRO CALL         *\n*                                                                     *\n*                                                                     *\n*  REGISTER USAGE:                                                    *\n*                                                                     *\n*         R0  - ERROR MESSAGE NUMBER, PARAMETERS, SVC'S, ETC          *\n*         R1  - PARAMETERS TO MACROS, SVC'S                           *\n*         R2  - WORK                                                  *\n*         R3  - -> TTE IN MOST CASES / WORK                           *\n*         R4  - WORK                                                  *\n*         R5  - -> DYNAMIC RPL / SYNCHRONOUS RPL                      *\n*         R6  - WORK                                                  *\n*         R7  - WORK  (ADDRESS OF ERROR SOMETIMES ON BAL R7,SNOCCUR)  *\n*         R8  - -> ASYNCHRONOUS / SYNCHRONOUS NIB                     *\n*         R9  - -> DDT WHEN DOING DEVICE DEP WORK / WORK              *\n*         R10 - BASE REGISTER 3                                       *\n*         R11 - BASE REGISTER 2                                       *\n*         R12 - BASE REGISTER 1                                       *\n*         R13 - ADDRESS OF SAVE AREA (USUALLY IN DYNAMIC RPL)         *\n*         R14 - RETURN ADDRESS                                        *\n*         R15 - ENTRY POINT, RETURN CODES                             *\n*                                                                     *\n*                                                                     *\n*  ATTRIBUTES: SERIALLY REUSEABLE , NON-AUTHORIZED, VTAM APPLICATION  *\n*                                                                     *\n*  CONTROL BLOCK DEPENDENCIES: RPL, ACB, NIB, EXIT PARAMETER LISTS    *\n*                                                                     *\n*  ROUTINES CALLED: NONE                                              *\n*                                                                     *\n*  * * * * * MACROS USED: DCLSW, GOIF, SET, RESET, EXECUTE            *\n*                                                                     *\n*  SYSTEM MACROS USED: SAVE, GETMAIN, FREEMAIN, STIMER, OPEN,         *\n*                      WAIT, WTO, CLOSE, ABEND, POST, CHECK           *\n*                                                                     *\n*  VTAM MACROS USED:  SETLOGON, OPNDST, INTRPRET, INQUIRE,            *\n*                     GENCB, CLSDST, SIMLOGON, SEND, RECEIVE          *\n*                                                                     *\n*  MESSAGES TO TERMINAL USER:                                         *\n*                                                                     *\n*             LOGON SCREEN WITH LOGO.                                 *\n*                                        ENTERED BY THE TERMINAL USER)*\n*                                                                     *\n*             GMU-101          LOGMODE ENTRY UNDEFINED                *\n*                                                                     *\n*             GMU-102 INVALID LOGON SEQUENCE , REENTER                *\n*                                                                     *\n*             GMU-103 NO INTERPRET TABLE SPECIFIED FOR LU             *\n*                                                                     *\n*             GMU-104 NO INTERPRET ROUTINE TO RECOGNIZE APPLICATION   *\n*                                                                     *\n*             GMU-105 USER UNAUTHORIZED FOR THIS APPLICATION          *\n*                                                                     *\n*             GMU-106 LOGON IN PROGRESS                               *\n*                                                                     *\n*             GMU-107 XXXXXXXX NOT DEFINED TO VTAM                    *\n*                                                                     *\n*             GMU-108 XXXXXXXX IS NOT ACTIVE OR LOGMODE INVALID       *\n*                                                                     *\n*             GMU-109 XXXXXXXX NO LONGER ACCEPTING LOGONS             *\n*                                                                     *\n*             GMU-110 XXXXXXXX NEVER ACCEPTING LOGONS                 *\n*                                                                     *\n*             GMU-111 XXXXXXXX TEMPORARILY NOT ACCEPTING LOGONS       *\n*                                                                     *\n*                                                                     *\n*  MESSAGES TO THE SYSTEM OPERATOR:                                   *\n*                                                                     *\n*             GMU-001 TERM=******** HAS BEEN RELEASED BY NETSOL       *\n*                     DUE TO I/O ERROR                                *\n*                                                                     *\n*             GMU-002 RC=42 ON NETSOL CLOSE ACB                       *\n*                                                                     *\n*             GMU-003 SYNAD/LERAD EXIT REQ=**,FBDK2=**,SSENSEI=**,    *\n*                     SSENSMI=**,SENSE=****,TERM=********             *\n*                                                                     *\n*             GMU-004 LOSTERM ENTRY CODE ** FOR TERM=********         *\n*                                                                     *\n*             GMU-005 TERM=******** RELEASED DUE TO RELREQ REQUEST    *\n*                                                                     *\n*             GMU-006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS    *\n*                     PROGRAM IS TERMINATED.                          *\n*                                                                     *\n*             GMU-007 TERM=******** NOT RELEASED BY RELREQ EXIT       *\n*                                                                     *\n*  USER ABEND CODES:  U0001 - PROBLEM WITH OPEN OF THE ACB            *\n*                     U0002 - SETLOGON FAILED                         *\n*                     U0004 - RETURN CODE/SENSE CODE NOT EXPECTED     *\n*                     U0008 - PROBLEM WITH THE TERMINAL TABLE (TTE)   *\n*                                                                     *\n*                                                                     *\n*  RESTRICTIONS:                                                      *\n*                                                                     *\n*        1) THE TERMINAL TABLE HAS ONLY ROOM FOR 256 TERMINALS (4K),  *\n*           IF MORE ARE NEEDED, THE CONSTANT 'TERMLTAB' WILL HAVE TO  *\n*           BE CHANGED WITH A ZAP OR BY RE-ASSEMBLY OF NETSOL.        *\n*                                                                     *\n*        2) ONLY RECORD MODE DEVICES ARE CURRENTLY SUPPORTED.         *\n*                                                                     *\n*        3) NO DEVICES ARE CURRENTLY SUPPORTED THAT DO NOT SEND       *\n*           3270 CONTROL CHARACTERS (EG SBA X'11'). LOGON CODE        *\n*           WOULD HAVE TO BE CHANGED TO SUPPORT THEM.                 *\n*                                                                     *\n*        4) ANY FIELDS IN THE RPL WORK AREA THAT NEED TO BE ZERO      *\n*           INITIALLY SHOULD BE PLACED AHEAD OF THE I/O AREAS AS      *\n*           THESE ARE NOT INITIALIZED. IF THE AMOUNT TO BE            *\n*           INITIALIZED EXCEEDS 256 BYTES, THE INITIALIZATION AND     *\n*           COPY CODE IN GETRPL AND ERREXIT WILL HAVE TO BE CHANGED.  *\n*                                                                     *\n*        5) NETSOL ASSUMES THAT IT CAN ONLY HAVE ITS LOSTERM EXIT     *\n*           ENTERED FOR TERMINALS WHOSE CID'S CAN BE FOUND IN THE     *\n*           TERMINAL TABLE. A U0008 ABEND WILL OCCUR IF NOT FOUND.    *\n*                                                                     *\n*        6) NETSOL OBTAINS THE SYSTEM ID FOR CHANGING '* *OLT* *'     *\n*           APPLICATION ID'S USING SVC 253. IF THIS FUNCTION CHANGES, *\n*           NETSOL WILL HAVE TO BE LOOK AT                            *\n*                                                                     *\n*        7) BE CAREFUL OF CHANGING CODE THAT SETS BRACKET STATES AS   *\n*           YOU MAY CAUSE ERRORS ON THE 3276 (MUST SEND GMU-106 WITH  *\n*           AND END BRACKET BECAUSE IF THE CLSDST(PASS) FAILS AND WE  *\n*           SEND AN ERROR MESSAGE (GMU-108) TO THE 3276, GET A X'0404'*\n*           WITH A SENSE OF '081B' INDICATING BAD STATE).             *\n*                                                                     *\n*                                                                     *\n*  VERSION:  * * * * *  NETSOL   DC18202                              *\n*                                                                     *\n*  LAST UPDATE: FEB 27, 1979                                          *\n*                                                                     *\n*                                                                     *\n*        F O R   F U R T H E R   I N F O R M A T I O N   O N          *\n*          T H I S   P R O D U C T   S E E   T H E                    *\n*              N E T S O L   D O C U M E N T A T I O N                *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         TITLE '* * * * *  N E T S O L  -  INITIAL DECLARATIONS'      *\n         SPACE 2\n         TITLE '* * * * *  N E T S O L  -  MAINLINE'\nNETSOL   CSECT\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        NETSOL MAIN-LINE CODE INITIALIZATION                         *\n*        REQUIRES OS/VS2 MVS RELEASE 3.7 + ACF/VTAM (SU 35+40)        *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nSTART    B     STM-START(0,15)         JUMP OVER APPL NAME\nNSNAME   DC    AL1(8),CL8'NETSOL  '    LOGON APPLID NAME FOR NETSOL\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'//&SYSTIME/'        ASSEMBLY TIME\nSTM      STM   14,12,12(13)            SAVE REGISTERS\n         LR    R12,R15                 LOAD 1ST BASE REGISTER\n         USING START,R12,R11,R10       TELL ASSEMBLER\n         LM    R10,R11,RESTBASE        REST OF BASES\n         ST    R13,MAINSAVE+4          CHAIN SAVE AREAS\n         LR    R15,R13\n         LA    R13,MAINSAVE            POINT R13 TO NS SAVE AREA\n         ST    R13,8(,R15)             FORWARD SAVE AREA CHAIN\n         SPACE 2\n         USING IFGRPL,PTRRPL           => R P L\n         USING ISTDNIB,PTRNIB          => N I B\n         USING TERMTABL,R3             => TERMINAL TABLE ENTRY\n         USING DDT,R9                  => DEVICE DEPENDENT TABLE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        IF THE APPLID FIELD DOESN'T CONTAIN 'NETSOL' FOR THE         *\n*        APPLICATION NAME, THIS CODE WILL MOVE THE CONTENTS OF NSNAME *\n*        INTO MESSAGE 12 FOR EACH OF THE SUPPORTED DEVICES TO ALLOW   *\n*        FOR EASY VISUAL IDENTIFICATION OF THE TEST VERSION OF NETSOL.*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CLC   NSNAME+1(8),=CL8'NETSOL ' PRODUCTION VERSION OF NETSOL?\n         BE    GETTAB                   YES => BR TO GET TERM TABLE\n         L     R1,=AL4(S32NSCOM)        NO  => UPDATE 3270\n         MVC   0(8,R1),NSNAME+1                   MSG 12\n         L     R1,=AL4(S3ENSCOM)        NO  => UPDATE 3270 EXTENDED\n         MVC   0(8,R1),NSNAME+1                   MSG 12\n         L     R1,=AL4(S37NSCOM)        NO  => UPDATE 3767\n         MVC   0(8,R1),NSNAME+1                   MSG 12\n*        SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        OBTAIN SPACE FROM SUBPOOL 2 FOR THE TERMINAL TABLE. THIS     *\n*        TABLE IS USED TO MAINTAIN THE TERMINAL NAME, CID, AND LOGON  *\n*        STATUS FOR ALL TERMINALS CONNECTED TO NETSOL. BY USING THIS  *\n*        TABLE AND PROVIDING ENTRY ADDRESS IN THE RPL USER FIELD, WE  *\n*        SAVE ON HAVING TO DO CID TRANSLATES FOR NAMES.               *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nGETTAB   L     R0,TERMLTAB             GET LENGTH FOR GETMAIN\n         ICM   R0,8,=X'02'             ADD SUBPOOL=2 TO IT\n         GETMAIN R,LV=(0)              GET SPACE FOR TABLE\n         ST    R1,TERMTABS             SAVE STARTING ADDRESS\n         A     R1,TERMLTAB             COMPUTE END ADDRESS\n         ST    R1,TERMTEND             SAVE IT TOO\n         SPACE 1\nRTRYOPEN DS    0H\n         SR    R15,R15                 CLEAR RETURN-CODE REGISTER\n         OPEN  ACB                     CONNECT NETSOL TO VTAM\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *\n*   ERREXIT IS NOT ENTERED FOR OPEN ERROR.                            *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CLI   ACB+X'31',X'52'         HALT IN PROGRESS ?\n         BE    CLSOK                   YES, END THE TASK\n         LTR   R15,R15                 SUCCESSFUL OPEN ?\n         BZ    OPENOK                  YES, ALLOW LOGONS TO HAPPEN\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CHECK FOR AN ACB ERROR CODE OF X'58' WHICH CAN HAPPEN IF     *\n*        THE OPERATOR HAS STARTED A SECOND COPY OF NETSOL. IN THIS    *\n*        CASE, TELL THE OPERATOR ABOUT HIS MISTAKE AND TERMINATE      *\n*        EXECUTION.                                                   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CLI   ACB+X'31',X'58'         APPLID ALREADY IN USE?\n         BNE   OPENA5A                 NO => CHECK NEXT ERROR\n         WTO   MF=(E,LISTWTO6)         TELL OPERATOR HIS MISTAKE\n         B     FREETTE                 FREE TTE TABLE AND END\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CHECK FOR AN ACB ERROR CODE OF X'5A' WHICH CAN HAPPEN IF     *\n*        VTAM IS JUST COMMING UP AND NETSOL'S APPLID IS NOT YET       *\n*        ACTIVE. IF THIS IS THE CASE, ISSUE A STIMER WAIT FOR         *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nOPENA5A  CLI   ACB+X'31',X'5A'         CAN'T OPEN ACB YET ?\n         BE    OPENLOOP                NO, REAL OPEN ERROR\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CHECK FOR AN ACB ERROR CODE OF X'5C' WHICH CAN HAPPEN IF     *\n*        VTAM IS DOWN. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CLI   ACB+X'31',X'5C'         CAN'T OPEN ACB YET ?\n         BE    OPENLOOP                NO, REAL OPEN ERROR\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CHECK FOR AN ACB ERROR CODE OF X'70' WHICH CAN HAPPEN IF     *\n*        NETSOL ABENDS AND IS RE-ATTACHED BY VTAM AND VTAM HAS NOT    *\n*        YET SUCCESSFULLY FINISHED CLEANUP PROCESSING FOR             *\n*        NETSOL'S ACB. IF THIS IS THE CASE ISSUE A STIMER WAIT FOR    *\n*        ONE (1) SECOND AND RETRY THE OPEN ACB FUNCTION.              *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CLI   ACB+X'31',X'70'         CAN'T OPEN ACB YET ?\n         BNE   OPENFAIL                NO, REAL OPEN ERROR\nOPENLOOP STIMER WAIT,BINTVL=WAIT1SEC   WAIT 1 SECOND, TRY AGAIN\n         B     RTRYOPEN                GO AND RETRY OPERATION\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        READ THE INITIALIZATION FILE CONTAINING NETSOL COMMANDS      *\n*        WHICH ESTABLISH AUTO LOGON,WTO MSG DEFAULTS,ETC.             *\n*        AN ASYNC RPL WILL BE USED WHEN PROCESSING THESE INIT CMDS.   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nOPENOK   DS    0H\n         BAL   R14,GETRPL              GET RPL FOR INIT CMD USE.\n         BAL   R14,READINIT            PROCESS INIT CMDS\n         BAL   R14,RECSUB              NOW REUSE RPL FOR RECEIVE\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        BEFORE ALLOWING LOGONS TO TAKE PLACE ISSUE 10 RECEIVE ANY'S  *\n*        SO WE CAN HANDLE UP TO 10 LOGONS AT A TIME. WHEN THE RECEIVE *\n*        EXIT IS SCHEDULED, IT WILL ALSO RE-ISSUE A RECEIVE ANY WITH  *\n*        A NEW GOTTEN RPL.                                            *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LA    R2,9                    # OF RPLS FOR RECEIVES\nGETLOOP  BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE\n         BAL   R14,RECSUB              ISSUE RECEIVE ANY\n         BCT   R2,GETLOOP              LOOP TILL TEN DONE\n         L     PTRRPL,=A(SETLRPL)      POINT TO RPL FOR WORKAREA   TAMU\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        ISSUE SETLOGON WITH START OPTION TO ALLOW LOGONS TO TAKE     *\n*        PLACE. ANY LOGONS QUEUED FOR NETSOL WILL NOW DRIVE NETSOL'S  *\n*        LOGON EXIT.                                                  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nSLOGON   SETLOGON RPL=(PTRRPL),        SYNCH OPERATION. ACT-           X\n               OPTCD=START             IVATE LOGON EXIT.\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.  IF          *\n*   ERREXIT WAS ENTERED, THE VTAM FEEDBACK CODE IN REG 0 WAS          *\n*   PLACED IN REG 15 BEFORE RETURNING TO THE MAINLINE NSI.            *\n*   ERREXIT DID NOT CHANGE THE RETURN CODES TO ACTION CODES.          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX8                NEED TO REISSUE?\n         BE    SLOGON                  YES.  DO IT\n         LTR   R15,R15                 SETLOGON ACCEPTED ?\n         BNZ   SETLFAIL                NO, BRANCH\n         LTR   R0,R0                   VALID COMPLETION?\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    ALL FURTHER WORK IN NETSOL IS PERFORMED VIA ASYNCHRONOUS EXIT    *\n*    ROUTINES. THE MAINLINE CODE WAITS UPON AN ECB WHICH IS POSTED    *\n*    BY THE TPEND EXIT WHEN VTAM SHUTS DOWN NETSOL.                   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         WAIT  ECB=FINISECB            WAIT FOR VTAM END\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        EXECUTION CONTINUES HERE WHEN ECB IS POSTED BY TPEND EXIT.   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         SR    R15,R15                 ZERO RC REG FOR CLOSE\n         CLOSE ACB                     RELEASE CONNECTION WITH\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*  THE VALUES IN REG 15 ARE RETURN CODES AS SET BY VTAM.              *\n*   ERREXIT IS NOT ENTERED FOR CLSDSTERROR.                           *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LTR   R15,R15                 DID THE CLOSE GO?\n         BZ    CLSOK                   YES, EXIT\n         CLI   ACB+X'31',X'42'         CLOSE COMPLETE?\n         BNE   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         WTO MF=(E,LISTWTO1)           INFORM OPERATER\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        SINCE WE DON'T KNOW HOW MANY RPL'S ARE OUTSTANDING (MAY BE   *\n*        MORE THAN 10), WE FREE THE WHOLE SUBPOOL OF RPL'S AND DO THE *\n*        SAME FOR THE TERMINAL TABLE AS WELL.                         *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nCLSOK    FREEMAIN R,SP=1               FREE DYNAMIC RPL SPACE\n         SPACE 1\nFREETTE  FREEMAIN R,SP=2               FREE TERMINAL TABLE SPACE\n         SPACE 1\n         L     R13,MAINSAVE+4          FIND INPUT SAVE AREA\n         SR    R14,R14                 CLEAR FORWARD SAVE\n         ST    R14,8(,R13)             AREA CHAIN PTR\n         LM    R14,R12,12(R13)         LOAD INPUT REGS\n         SR    R15,R15                 RCODE=0 FOR NORMAL RTN\n*        RETURN\n         BR    14                      RETURN TO CALLER OR ATTACHER\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THE FOLOWING CODE IS BRANCHED TO FROM THE MAIN-LINE CODE,    *\n*        EXIT CODE, AND FROM THE ERREXIT ROUTINE.  THE ONLY ACTION    *\n*        TAKEN SINCE THE CASES ARE 'SHOULD NOT OCCUR' CONDITIONS, IS  *\n*        TO ABNORMALLY TERMINATE NETSOL WITH A REASON CODE IN         *\n*        DUMPFLAG AND CAUSE A DUMP TO BE TAKEN.                       *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nOPENFAIL DS    0H                      OPEN-ACB IN MAIN-LINE FAILED\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         MVI   DUMPFLAG,OPENCODE       SAVE NETSOL DUMP CODE\n         B     DUMP                    BRANCH\n         SPACE 1\nSETLFAIL DS    0H                      SETLOGON IN MAIN-LINE FAILED\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         MVI   DUMPFLAG,SETLCODE       SAVE NETSOL DUMP CODE\n         B     DUMP                    BRANCH\n         SPACE 1\nSNOCCUR  DS    0H                      REQUEST FAILED BECAUSE\n*                                       OF AN INVALID CONTROL\n*                                       BLOCK OR OTHER CON-\n*                                       DITION WHICH SHOULD\n*                                       NOT OCCUR\n         STM   R0,R15,SNOREGS          REGS FOR DEBUGGING\n         CLOSE ACB                     AVOID OPEN FAILURE ON\n*                                      RE-DISPATCH OF SUBTASK\n         MVI   DUMPFLAG,CBLKCODE       SAVE NETSOL DUMP CODE\n         B     DUMP\n         SPACE 1\nTOOSMALL STM   R0,R15,SNOREGS          SAVE REGS\n         MVI   DUMPFLAG,TABLTRBL       TROUBLE WITH TTE\n         B     DUMP\n         SPACE 1\nDUMP     DS    0H                      TERMINATE WITH A DUMP\n         SR    R1,R1                   PUT REASON CODE IN REG 1\n         IC    R1,DUMPFLAG\n         SPACE 1\n         ABEND (1),DUMP\n         TITLE '* * * * *  N E T S O L  -  MAINLINE DATA AREAS'\nMAINSAVE DS    18F                     SAVE AREA FOR MAINLINE\nRESTBASE DC    A(START+8192,START+4096) REST OF BASE REG VALUES\nWAIT1SEC DC    F'100'                  WAIT TIME OF 1.00 SECS\nTERMTABS DC    A(0)                    START OF TERMINAL TABLE  FOR\nTERMTABI DC    A(TERMELEN)             INDEX VALUE              BXLE\nTERMTABE DC    A(0)                    LAST ENTRY USED ADDRESS  USE\nTERMLTAB DC    A(2560*TERMELEN)        SIZE OF TABLE (ENTRIES*LENGTH)\nTERMTEND DC    A(0)                    END OF TABLE + 1\nDUMMY    DS    CL40           DEFINE DUMMY WORK AREA FOR TIME ETC.\nFLAGALL  DC    CL1'N'         DEFINE FLAG FOR READING ALL SCREEN\nFLAGHELP DC    CL1'N'         DEFINE FLAG FOR READING HELP SCREEN\nFLAGNEWS DC    CL1'N'         DEFINE FLAG FOR READING NEWS SCREEN\n         EJECT\n         TITLE '* * * * *  N E T S O L  - READ INITIALIZATION COMMANDS'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    READINIT PROCESSES THE NETSOL COMMANDS IN THE SYSIN FILE.        *\n*    COMMANDS WHICH CAN BE PLACED IN THIS FILE ARE FLAGGED            *\n*    WITH 'CMDINIT' IN THEIR CMD TABLE ENTRY.                         *\n*                                                                     *\n*    TO ALLOW COMMAND PROCESSING ROUTINES TO BE INDEPENDENT OF THEIR  *\n*    SOURCE, ALL COMMAND PROCESSORS ASSUME A DDT,TTE AND ASYNC RPL    *\n*    AVAILABLE FOR THEIR USE. THEREFORE, THESE CONTROL BLOCKS HAVE    *\n*    BEEN SET UP FOR READINIT.                                        *\n*                                                                     *\n*    INPUT : R5  - A(ASYNC RPL)                                       *\n*            R13 - A(SAVE AREA)                                       *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : REGISTERS ARE UNCHANGED                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\nREADINIT DS    0H\n         SPACE 1\n         STM   R14,R12,12(R13)         SET\n         ST    R13,RPLSAVE+4             UP\n         LA    R1,RPLSAVE                  SAVE\n         ST    R1,8(,R13)                    AREA\n         LR    R13,R1                          CHAIN\n         SPACE 1\n*        OPEN SYSIN AND SYSOUT FILES. NETSOL WILL CONTINUE EXECUTION\n*        EVEN WITH ERRORS IN THE INIT FILE.\n         SPACE 1\n         OPEN  (SYSINDCB,(INPUT),SYSOUDCB,(OUTPUT)) OPEN FILES\n         TM    SYSINDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSIN OPEN?\n         BZ    DCBOSYSI                           NO => ERROR MSG\n         TM    SYSOUDCB+DCBOFLGS-IHADCB,DCBOFOPN  SYSOUT OPEN?\n         BNZ   RIOPENOK                           YES => BR TO CONTINUE\n         MVC   DCBMSG+12(6),=CL6'SYSOUT'  MOVE\n         B     *+10                        DDNAME\nDCBOSYSI MVC   DCBMSG+12(6),=CL6'SYSIN '      TO OPERATOR MSG\n         WTO   MF=(E,DCBMSG)             LOG ERROR MESSAGE ON SYSLOG\n         B     RIEXIT                    END PROCESSING\n         SPACE 1\n*        SET UP RPL,TTE AND DDT LINKS FOR INIT\n         SPACE 1\nRIOPENOK OI    UFLAGS,INIT               FLAG PROCESSING INITIALIZATION\n         LA    R3,TTEDUMMY               LOAD A(DUMMY TTE FOR INIT)\n         ST    R3,RPLUSFLD               SET UP RPL USER PTR\n         L     R9,=AL4(DDTSYSIN)         LOAD A(DDT FOR INIT)\n         ST    R9,TERMDDT                SAVE IN TTE\n         SPACE 1\n*        PROCESS NETSOL COMMANDS FROM THE SYSIN FILE\n         SPACE 1\nREADLOOP LA    R6,IOAREA                 LOAD A(IO BUFFER)\n         GET   SYSINDCB,(R6)             READ CMD FROM SYSIN FILE\n         PUT   SYSOUDCB,(R6)             ECHO CMD TO SYSOUT FILE\n         LA    R2,80                     SET UP REG 2 WIH REC LENGTH\n         B     INTRPRET                  BR TO EDIT COMMAND\n         SPACE 1\n*        RETURN FROM CMD PROCESSING.\n*        R0 CONTAINS MSG INDEX FOR OUTPUT MSG\n         SPACE 1\nRIPUTMSG LR    R1,R0                   LOAD INDEX INTO R1\n         BCTR  R1,0                    INDEX - 1\n         SLL   R1,2                    4 * (INDEX - 1)\n*                                      = DISPLACEMENT OF MESSAGE\n         L     R2,DDTMSGTB(R1)         POINT TO MSG. ENTRY IN TABLE\n         LH    R1,0(,R2)               PICK UP MSG LENGTH\n         LA    R2,2(R2)                SKIP OVER MSG LENGTH\n*        MOVE MESSAGE TO OUTPUT BUFFER AND WRITE TO SYSOUT\n         MVI   IOAREA,X'40'            INITIALIZE BUFFER\n         MVC   IOAREA+1(79),IOAREA       WITH BLANKS\n         BCTR  R1,0                    MOVE MESSAGE\n         EX    R1,RIEX1                  TO OUTPUT BUFFER\n         PUT   SYSOUDCB,IOAREA         WRITE MESSAGE TO SYSOUT FILE\n         B     READLOOP                BR TO GET NEXT CMD\n         SPACE 1\n*        END OF DATA REACHED ON SYSIN FILE\n         SPACE 1\nEODSYSIN TM    UFLAGS,INITERR          ERROR WHILE PROCESSING CMD FILE\n         BNO   RICLOSE                 NO => CONTINUE\n         WTO   MF=(E,INITEMSG)         YES => LOG ERROR TO OPERATOR\nRICLOSE  CLOSE (SYSINDCB,,SYSOUDCB)    CLOSE SYSIN & SYSOUT\n         NI    UFLAGS,X'FF'-INIT       FLAG END OF INIT PROCESSING\n         SPACE 1\n*        EXIT FROM READINIT\n         SPACE 1\nRIEXIT   L     R13,4(,R13)             RESTORE\n         LM    R14,R12,12(R13)           REGISTERS\n         BR    R14                         AND RETURN\n         SPACE 5\nRIEX1    MVC   IOAREA(0),0(R2)         MOVE MSG TO OUTPUT BUFFER\n         TITLE '* * * * *  N E T S O L  - GETPARM SUBROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    GETPARM LOCATES THE NEXT TEXT UNIT IN THE COMMAND BUFFER.        *\n*                                                                     *\n*    THIS TEXT UNIT IS VALIDATED FOR:                                 *\n*         A) MAXIMUM LENGTH                                           *\n*         B) REQUIRED PARAMETER                                       *\n*                                                                     *\n*    INPUT : R1  - A(PARAMETER OPTION LIST)                           *\n*            R2  - A(OUTPUT MSG BUFFER)                               *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : R1  - A(TEXT UNIT) OR GARBAGE IF ERROR                   *\n*            R15 - LENGTH OF TEXT UNIT                                *\n*                                                                     *\n*   RETURN : 0(R14) - VALID TEXT UNIT FOUND                           *\n*            4(R14) - NO TEXT UNIT FOUND (IF PARAMETER IS OPTIONAL)   *\n*            8(R14) - ERROR DETECTED WHILE PROCESSING TEXT UNIT       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nGETPARM  DS    0H\n         SPACE 1\n         ST    R1,GPPARM          SAVE A(PARM OPTION LIST)\n         SPACE 1\n*        CHECK FOR NO DATA LEFT IN COMMAND BUFFER\n         SPACE 1\n         LH    R6,GPDATAL         GET LENGTH OF REMAINING DATA\n         LTR   R6,R6              ANY DATA LEFT?\n         BZ    GPNODATA           NO => BR TO HANDLE\n         SPACE 1\n*        FIND NEXT TEXT UNIT IN COMMAND BUFFER\n         SPACE 1\n         L     R7,GPDATAP         LOAD A(CURRENT OFFSET IN CMD BUFFER)\nGRPLOOP1 CLI   0(R7),X'40'        FIND\n         BNZ   GPNONBLK             FIRST\n         LA    R7,1(,R7)              NON\n         BCT   R6,GRPLOOP1              BLANK\n         B     GPNODATA                   CHARACTER\n         SPACE 1\n*        FIND END OF TEXT UNIT\n         SPACE 1\nGPNONBLK LR    R1,R7              SET TEXT UNIT PTR\nGPLOOP2  CLI   0(R7),X'40'        FIND\n         BE    GPGOTIT              LAST\n         LA    R7,1(,R7)              NON-BLANK\n         BCT   R6,GPLOOP2               CHARACTER\n         SPACE 1\n*        NEXT TEXT UNIT HAS BEEN FOUND\n         SPACE 1\nGPGOTIT  ST    R7,GPDATAP         SAVE CURRENT OFFSET IN CMD BUFFER\n         STH   R6,GPDATAL         SAVE LENGTH OF REMAINING DATA\n         SR    R7,R1              CALC LENGTH OF THE TEXT UNIT\n         LR    R15,R7               & MOVE TO REG 15\n         B     GPCHKOPT           BR TO VALIDATE PARM OPTIONS\n         SPACE 1\nGPNODATA SR    R15,R15            INDICATE NO TEXT UNIT\n         SPACE 1\n*        VALIDATE THE PARAMETER OPTIONS FOR THE TEXT UNIT\n         SPACE 1\nGPCHKOPT L     R6,GPPARM          LOAD A(OPTION LIST)\n         CH    R15,GPLEN(,R6)     TU > MAX ALLOWED?\n         BNH   GPCHK10            NO => BR TO NEXT CHECK\n         MVC   0(L'GPMSG1,R2),GPMSG1 MOVE ERR MSG TO BUFFER\n         CH    R15,=H'8'          MOVE\n         BNH   *+8                  MAX 8\n         LA    R15,8                  CHARACTERS\n         BCTR  R15,0                    OF TEXT UNIT\n         EX    R15,GPEX1                  TO ERROR MSG\n         LA    R1,L'GPMSG1(,R2)   POINT TO END OF ERROR MSG\n         B     GPERRTXT           BR TO MOVE KEYWORD TO MSG\n         SPACE 1\nGPCHK10  LTR   R15,R15            WAS THERE A TEXT UNIT?\n         BNZ   GPXFND             YES => EXIT NORMAL\n         TM    GPFLAG(R6),GPOPT   WAS PARAMETER OPTIONAL?\n         BNZ   GPXZERO            YES => EXIT NO PARM\n         MVC   0(L'GPMSG2,R2),GPMSG2 NO => MOVE ERR MSG\n         LA    R1,L'GPMSG2(,R2)   POINT TO END OF ERROR MSG\n         SPACE 1\nGPERRTXT LH    R7,GPTEXTL(,R6)    GET LENGTH OF TEXT IN OPT LIST\n         BCTR  R7,0               DECREMENT FOR MOVE\n         EX    R7,GPEX2           ADD OPTION LIST TEXT TO ERR MSG\n         SPACE 1\n         B     8(,R14)            TAKE ERROR RETURN\n         SPACE 1\nGPXZERO  B     4(,R14)            RETURN WITH NO TEXT UNIT\n         SPACE 1\nGPXFND   BR    R14                RETURN WITH TEXT UNIT FOUND\n         SPACE 5\nGPEX1    MVC   0(0,R2),0(R1)      MOVE TEXT UNIT TO ERROR MSG\nGPEX2    MVC   0(0,R1),GPTEXT(R6) MOVE OPT LIST TEXT TO ERROR MSG\nGPMSG1   DC    C'XXXXXXXX IS TOO BIG FOR '\nGPMSG2   DC    C'MISSING PARAMETER '\n         TITLE '* * * * *  N E T S O L  - INIT MSG13 SUBROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    INITMSG4 LOCATES AND INITIALIZES THE MSG4 OUTPUT BUFFER.         *\n*                                                                     *\n*    INPUT : R9  - A(DDT)                                             *\n*            R14 - RETURN ADDRESS                                     *\n*                                                                     *\n*   OUTPUT : R2  - A(MSG13 OUTPUT BUFFER)                             *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nINITMSG4 DS    0H\n         SPACE 1\n         L     R2,DDTM4OFS        GET A(MSG13)\n         LH    R1,DDTM4L          LOAD LENGTH OF MSG13 BUFFER\n         MVI   0(R2),X'40'        INSERT 1ST BLANK\n         BCTR  R1,0               DECREMENT LENGTH\n         BCTR  R1,0               DECREMENT LENGTH\n         EX    R1,INITM4X         INIT REST OF BUFFER\n         SPACE 1\n         BR    R14\n         SPACE 5\nINITM4X  MVC   1(0,R2),0(R2)      PROPOGATE BLANK THRU OUT BUFFER\n         TITLE '* * * * *  N E T S O L  - REFRESH COMMAND'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    REFRESH COMMAND CAUSES ALL PANELS IN STORAGE TO BE CLEARED       *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        REFRESH                                                      *\n*                                                                     *\n*    THERE ARE NO PARAMETERS FOR THIS COMMAND.                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n*                                       REFRESH  DS    0H\nCMDREF   DS  0H\n         SPACE 1\n         L     R3,RPLUSFLD              -> TTE\n         MVI   FLAGNEWS,C'N'   CHECK IF NEWS SCREEN IN STORAGE\n         MVI   FLAGHELP,C'N'   CHECK IF HELP SCREEN IN STORAGE\n         MVI   FLAGALL,C'N'    CHECK IF ALL SCREEN IN STORAGE\n         B     RESEND          BRANCH TO DISPLAY NEW MSG12\n         TITLE '* * * * *  N E T S O L  - NEWS COMMAND'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    NEWS COMMAND CHANGES SCREEN DISPLAYED TO ALL APPLS(DDT3270F).    *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        NEWS                                                         *\n*                                                                     *\n*    THERE ARE NO PARAMETERS FOR THIS COMMAND.                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n*                                       SCREEN4  DS    0H\nCMDNEWS  DS    0H\n         SPACE 1\n         L     R3,RPLUSFLD              -> TTE\n         CLI   FLAGNEWS,C'Y'   CHECK IF NEWS SCREEN IN STORAGE\n         BE    CONTNEWS        IF IN STORAGE, BYPASS READ\n         OPEN  NEWSDCB         OPEN NEWS DCB\n         TM    NEWSDCB+48,X'10' CHECK IF OPEN WORKED\n         BO    READNEWS        IF OPEN O.K., BRANCH TO READ\n         WTO   'OPEN FOR NETSOL''S NEWS DCB FAILED'\nREADNEWS DS    0H\n         L     R0,=AL4(NEWSBUFF)\n         GET   NEWSDCB,(0)     GET 'NEWS' SCREEN INTO NEWSBUFF\n         MVI   FLAGNEWS,C'Y'   SET 'NEWS' SCREEN AS IN STORAGE\nNEWSEOD  DS    0H\n         CLOSE NEWSDCB\nCONTNEWS DS    0H\n         L     R9,=AL4(DDT3270F)        -> DDT FOR TERMINAL\n         ST    R9,TERMDDT               -> DDT FOR TERMINAL\n         B     RESEND          BRANCH TO DISPLAY NEW MSG12\n         TITLE '* * * * *  N E T S O L  - HELP COMMAND'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    HELP COMMAND CHANGES SCREEN DISPLAYED TO HELP APPLS(DDT3270E).   *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        HELP                                                         *\n*                                                                     *\n*    THERE ARE NO PARAMETERS FOR THIS COMMAND.                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n*                                       SCREEN4  DS    0H\nCMDHELP  DS    0H\n         SPACE 1\n         L     R3,RPLUSFLD              -> TTE\n         CLI   FLAGHELP,C'Y'   CHECK IF HELP SCREEN IN STORAGE\n         BE    CONTHELP        IF IN STORAGE, BYPASS READ\n         OPEN  HELPDCB         OPEN HELP DCB\n         TM    HELPDCB+48,X'10' CHECK IF OPEN WORKED\n         BO    READHELP        IF OPEN O.K., BRANCH TO READ\n         WTO   'OPEN FOR NETSOL''S HELP DCB FAILED'\nREADHELP DS    0H\n         L     R0,=AL4(HELPBUFF)\n         GET   HELPDCB,(0)     GET 'HELP' SCREEN INTO HELPBUFF\n         MVI   FLAGHELP,C'Y'   SET 'HELP' SCREEN AS IN STORAGE\nHELPEOD  DS    0H\n         CLOSE HELPDCB\nCONTHELP DS    0H\n         L     R9,=AL4(DDT3270E)        -> DDT FOR TERMINAL\n         ST    R9,TERMDDT               -> DDT FOR TERMINAL\n         B     RESEND          BRANCH TO DISPLAY NEW MSG12\n         TITLE '* * * * *  N E T S O L  - ALL COMMAND'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    ALL COMMAND CHANGES SCREEN DISPLAYED TO ALL APPLS(DDT3270D).     *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        ALL                                                          *\n*                                                                     *\n*    THERE ARE NO PARAMETERS FOR THIS COMMAND.                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n*                                       SCREEN4  DS    0H\nCMDALL   DS    0H\n         SPACE 1\n         L     R3,RPLUSFLD              -> TTE\n         CLI   FLAGALL,C'Y'    CHECK IF ALL SCREEN IN STORAGE\n         BE    CONTALL         IF IN STORAGE, BYPASS READ\n         OPEN  ALLDCB          OPEN ALL DCB\n         TM    ALLDCB+48,X'10' CHECK IF OPEN WORKED\n         BO    READALL         IF OPEN O.K., BRANCH TO READ\n         WTO   'OPEN FOR NETSOL''S ALL DCB FAILED'\nREADALL  DS    0H\n         L     R0,=AL4(ALLBUFF)\n         GET   ALLDCB,(0)      GET 'ALL' SCREEN INTO ALLBUFF\n         MVI   FLAGALL,C'Y'    SET 'ALL' SCREEN AS IN STORAGE\nALLEOD   DS    0H\n         CLOSE ALLDCB\nCONTALL  DS    0H\n         L     R9,=AL4(DDT3270D)        -> DDT FOR TERMINAL\n         ST    R9,TERMDDT               -> DDT FOR TERMINAL\n         B     RESEND          BRANCH TO DISPLAY NEW MSG12\n         TITLE '* * * * *  N E T S O L  - INFO COMMAND'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    INFO COMMAND CHANGES SCREEN DISPLAYED TO SCREEN3(DDT3270C).      *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        INFO                                                         *\n*                                                                     *\n*    THERE ARE NO PARAMETERS FOR THIS COMMAND.                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n*                              SCREEN 3\nCMDINFO  DS    0H\n         SPACE 1\n         L     R3,RPLUSFLD              -> TTE\n         L     R9,=AL4(DDT3270C)        -> DDT FOR TERMINAL\n         ST    R9,TERMDDT               -> DDT FOR TERMINAL\n         BAL   R14,TIMETERM    TIME AND TERMINAL ID IN MSG12\n         B     RESEND          BRANCH TO DISPLAY NEW MSG12\n         TITLE '* * * * *  N E T S O L  - HOST COMMAND'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    HOST COMMAND CHANGES SCREEN DISPLAYED TO SCREEN2(DDT3270B).      *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        CENA   OR                                                    *\n*        EASA   OR                                                    *\n*        HOST   OR                                                    *\n*        NOVA   OR                                                    *\n*        WESA   DEPENDING ON WHICH REGION NETSOL IS RUNNING ON.       *\n*                                                                     *\n*    THERE ARE NO PARAMETERS FOR THIS COMMAND.                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nSCREEN2  DS    0H\n         SPACE 1\n         L     R3,RPLUSFLD              -> TTE\n         L     R9,=AL4(DDT3270B)        -> DDT FOR TERMINAL\n         ST    R9,TERMDDT               -> DDT FOR TERMINAL\n         BAL   R14,TIMETERM    TIME AND TERMINAL ID IN MSG12\n         B     RESEND          BRANCH TO DISPLAY NEW MSG12\n         TITLE '* * * * *  N E T S O L  - END COMMAND'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    END COMMAND CHANGES SCREEN DISPLAYED TO SCREEN1(DDT3270A).       *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        END                                                          *\n*                                                                     *\n*    THERE ARE NO PARAMETERS FOR THIS COMMAND.                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nSCREEN1  DS    0H\nCMDEND   DS    0H\n         SPACE 1\n         L     R3,RPLUSFLD              -> TTE\n         SLR   R0,R0              CLEAR WORK REGISTER\n         IC    R0,TERMCID         LOAD FIRST BYTE OF CID\n         SRL   R0,3               ISOLATE SUB-AREA NO., (IF MAXSUBA=31)\nENDLOCAL DS    0H\n         L     R9,=AL4(DDT3270A)        -> DDT FOR TERMINAL\n         ST    R9,TERMDDT               -> DDT FOR TERMINAL\n         BAL   R14,TIMETERM    TIME AND TERMINAL ID IN MSG12\n         B     RESEND          BRANCH TO DISPLAY NEW MSG12\nENDXDOM  DS    0H\n         C     R9,=AL4(DDT3270B)        -> DDT FOR TERMINAL\n         BE    LOGOFCMD        GO BACK TO YOUR LOCAL NETSOL\n         L     R9,=AL4(DDT3270B)        -> DDT FOR TERMINAL\n         ST    R9,TERMDDT               -> DDT FOR TERMINAL\n         BAL   R14,TIMETERM    TIME AND TERMINAL ID IN MSG12\n         B     RESEND          BRANCH TO DISPLAY NEW MSG12\n         TITLE '* * * * *  N E T S O L  - SETLOGON COMMAND'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    SETLOGON SETS UP THE AUTOMATIC LOGON APPLICATION FOR A NODE.     *\n*                                                                     *\n*    THE FORMAT OF THE COMMAND IS:                                    *\n*                                                                     *\n*        SETLOGON NODENAME APPLID                                     *\n*                                                                     *\n*    IF THE APPLID IS OMITTED, THEN THE LOGAPPL RESET TO NOTHING.     *\n*                                                                     *\n*    INPUT : NO PARAMETERS                                            *\n*                                                                     *\n*   OUTPUT : R0  - INDEX INTO DDT MSG TABLE                           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nSETLOGON DS    0H\n         SPACE 1\n         BAL   R14,INITMSG4       OBTAIN MSG4  BUFFER\n         SPACE 1\n*        GET NODENAME\n         SPACE 1\n         LA    R1,SLNODE          LOAD A(OPTION LIST)\n         BAL   R14,GETPARM        GO GET NODE NAME\n         B     *+12               +0 - FOUND IT\n         B     SLXERR             +4 - NOT THERE\n         B     SLXERR             +8 - ERROR IN NODENAME\n         MVC   NODENAME,=CL8' '   SAVE\n         BCTR  R15,0                NODENAME\n         EX    R15,SLEX1              FOR LATER\n         SPACE 1\n*        GET APPLID (OPTIONAL)\n         SPACE 1\n         LA    R1,SLAPPL          LOAD A(OPTION LIST)\n         BAL   R14,GETPARM        GO GET APPLID\n         B     *+12               +0 - FOUND APPLID\n         B     SLTABLOK           +4 - APPLID NOT SPECIFIED\n         B     SLXERR             +8 - ERROR IN APPLID\n         MVC   DLOGAPPL,=CL8' '   SAVE\n         BCTR  R15,0                APPLID\n         EX    R15,SLEX2              FOR LATER\n         LA    R15,1(,R15)        RESTORE APPLID LENGTH\n         SPACE 1\n*        SCAN TERM TABLE FOR NODENAME\n         SPACE 1\nSLTABLOK STM   R3,R5,12(R13)      SAVE REGS\n         LA    R1,NODENAME             PT @ NODENAME\n         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES\n         CR    R3,R5                   CHECK FOR NULL TABLE\n         BH    SLNOENT                 NO ENTRIES AS R3 > R5 (INIT 0)\n         SPACE 1\nSLTABLP  CLC   0(8,R1),TERMNAME        MATCH THE NAME ?\n         BE    SLFNDTAB                YES, ALREADY IN THE TABLE\n         BXLE  R3,R4,SLTABLP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1\n         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?\n         BL    SLNOENT                 NO => NODENAME NOT IN TABLE\n         BAL   R7,SNOCCUR              YES => SHOULD NOT OCCUR\n         SPACE 1\n*        THERE IS NO TTE ENTRY FOR THIS NODE.\n*        NO APPLID WILL BE TREATED AS AN ERROR IN THIS CASE.\n         SPACE 1\nSLNOENT  L     R5,20(,R13)             RESTORE A(RPL)\n         LTR   R15,R15                 APPLID SPECIFIED?\n         BNZ   SLADDENT                YES => ADD ENTRY\n         MVC   0(L'SLMSG1,R2),SLMSG1   NO  => MOVE ERROR MSG TO BUFFER\n         MVC   0(8,R2),NODENAME               MOVE NODENAME TO MSG\n         LM    R3,R5,12(R13)                  RESTORE REGS\n         B     SLXERR                         BR TO ERROR EXIT\n         SPACE 1\n*        ADD TERM TABLE ENTRY FOR SPECIFIED NODE NAME\n*        IF NO APPLID WAS SPECIFIED, THEN THE LOGAPPL IS RESET IN TTE\n         SPACE 1\nSLADDENT ST    R3,TERMTABE             SAVE NEW TABLE END\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY\n         MVC   TERMNAME(8),NODENAME    COPY NAME ACROSS\n         B      SLADDAPL               BR TO ADD APPLID TO ENTRY\n         SPACE 1\nSLFNDTAB MVI   TERMFLAG,0              CLEAR LOGON STATUS FLAG\n         L     R5,20(,R13)             RESTORE A(RPL)\n         LTR   R15,R15                 APPLID SPECIFIED?\n         BNZ   SLADDAPL                YES => GO ADD APPLID\n         XC    TERMDAPL,TERMDAPL       NO  => ZERO LOGON APPLID\n         MVC   0(L'SLMSG2,R2),SLMSG2          MOVE MSG TO OUT BUF\n         MVC   19(8,R2),NODENAME              ADD NODE NAME TO MSG\n         B     SLNDTTE                        BR TO END OF TTE PROCESS\n         SPACE 1\nSLADDAPL MVC   TERMDAPL,DLOGAPPL       ADD LOGON APPLID TO TTE\n         MVC   0(L'SLMSG3,R2),SLMSG3   MOVE OK MSG TO OUT BUF\n         MVC   0(8,R2),TERMDAPL        ADD APPLID TO MSG\n         MVC   33(8,R2),TERMNAME       ADD NODE NAME TO MSG\n         SPACE 1\nSLNDTTE  LM    R3,R4,13(R13)           RESTORE REGS\n         B     SLEXIT                  BR TO EXIT\n         SPACE 1\nSLXERR   TM    UFLAGS,INIT             CMD ISSUED DURING INITIALIZATION\n         BZ    *+8                     NO  => BR TO CONTINUE\n         OI    UFLAGS,INITERR          YES => FLAG ERROR DURING INIT\n         SPACE 1\nSLEXIT   LA    R0,MSG04                INDICATE MSG4  TO BE SENT\n         B     SENDMSG                 EXIT TO SEND MSG\n         SPACE 5\nSLEX1    MVC   NODENAME(0),0(R1)       SAVE NODENAME PARM\nSLEX2    MVC   DLOGAPPL(0),0(R1)       SAVE APPLID PARM\nSLMSG1   DC    C'XXXXXXXX NOT KNOWN TO NETSOL'\nSLMSG2   DC    C'DEFAULT APPLID FOR XXXXXXXX RESET'\nSLMSG3   DC    C'XXXXXXXX IS NOW LOGON APPLID FOR XXXXXXXX'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    ACTION OF NETSOL NOW PROCEEDS BY USE OF EXIT ROUTINES.           *\n*    THE FOLLOWING EXITS ARE SCHEDULED IN RESPONSE TO VTAM EVENTS:    *\n*                                                                     *\n*              TPEND   - VTAM SHUTS DOWN                              *\n*              LOGON   - A TERMINAL IS SIMULATED LOGGED ON TO NETSOL, *\n*                        OR IS PASSED TO NETSOL BY ANOTHER APPLICATION*\n*              LOSTERM - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *\n*                        IS DISCONNECTED (DIAL-LINE), OR 'VARY'ED TO  *\n*                        ANOTHER APPLICATION                          *\n*              RELREQ  - A TERMINAL CURRENTLY LOGGED ON TO NETSOL     *\n*                        IS REQUESTED BY ANOTHER APPLICATION          *\n*                                                                     *\n*     RPL EXITS -                                                     *\n*                                                                     *\n*             READEND  - THE OUTSTANDING READ(ANY) HAS BEEN SATISFIED *\n*             SENDEND  - A SEND HAS BEEN POSTED COMPLETE.             *\n*             OPENEND  - AN OPNDST HAS COMPLETED.                     *\n*             PASSEND  - CLSDST(PASS) HAS COMPLETED FOR A LOGON       *\n*                        REQUEST MADE FROM A TERMINAL.                *\n*             WRITEND  - END OF WRITE REQUEST.  WRITE WAS DUE         *\n*                        TO INVALID LOGON FROM THE TERMINAL.          *\n*             CDSTEND1 - CLSDST(RELEASE) COMPLETED.                   *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         TITLE '* * * * *  N E T S O L  -  TPEND EXIT ROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *\n*                                                                     *\n*              * VTAM IS CLOSING DOWN                                 *\n*                                                                     *\n*              * OPERATOR ISSUED A HALT COMMAND                       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *\n*                                                                     *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - REASON CODE FOR SHUTDOWN                      *\n*                                                                     *\n*        THIS PARAMETER LIST IS NOT USED BY NETSOL                    *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nTPEND    DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        REST OF  BASE REGS\n         OI    UFLAGS,SHUTDOWN         INFORM OTHER EXITS OF SHUTDOWN\n         SPACE 1\n         POST  FINISECB                POST MAINLINES ECB\n         SPACE 1\n         SR    R15,R15                 ZERO RETURN CODE\n         BR    R14                     RETURN FROM IRB\n         SPACE 3\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  LOGON EXIT ROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN:                             *\n*                                                                     *\n*              * A TERMINAL IS LOGGED ON VIA VARY TO NETSOL           *\n*                                                                     *\n*              * A TERMINAL IS RETURNED TO NETSOL BY AN APPLICATION.  *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE FOLLOWING:  *\n*                                                                     *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - POINTER TO SYMBOLIC TERMINAL NAME             *\n*              WORD 2 - RESERVED                                      *\n*              WORD 3 - LENGTH OF LOGON DATA.                         *\n*              WORD 4 - READ-ONLY RPL POINTING TO LOGON CINIT.        *\n*              WORD 5 - CID OF PENDING SESSION.                       *\n*                                                                     *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nLOGON    DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         LA    R13,GENSAVE             POINT TO SAVE-AREA\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        NOW ADD THE TERMINAL NAME TO THE TERMINAL TABLE AND RETURN   *\n*        THE ENTRIE'S ADDRESS SO IT CAN BE PLACED IN THE NIB USER     *\n*        FIELD. SUBSEQUENT OPERATIONS USING AN RPL WILL HAVE THE      *\n*        RPLUSFLD UPDATED WITH THE TERMINAL TABLE ADDRESS FROM THE    *\n*        NIB. IF ENTRY ALREADY EXISTS IN TABLE (SECOND LOGON, ETC.),  *\n*        THEN WE RESET THE TERMINALS STATUS. A COUNT IS MAINTAINED    *\n*        OF THE NUMBER OF LOGONS FOR A GIVEN TERMINAL. THE TERMINAL   *\n*        TABLE CAN BE EXPANDED IF NEEDED TO PROVIDE ADDITIONAL STATS. *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         L     R2,4(,R1)               -> TERMINAL NAME PASSED BY LOGON\n         LM    R3,R5,TERMTABS          GET BXLE TABLE VALUES\n         CR    R3,R5                   CHECK FOR NULL TABLE\n         BH    NOTABLE                 NO ENTRIES AS R3 > R5 (INIT 0)\n         SPACE 1\nTABLOOP  CLC   0(8,R2),TERMNAME        MATCH THE NAME ?\n         BE    FOUNDTAB                YES, ALREADY IN THE TABLE\n         BXLE  R3,R4,TABLOOP           CONTINUE THE SCAN FOR A WHILE\n         SPACE 1\n         C     R3,TERMTEND             PASSED MAXIMUM TABLE SIZE ?\n         BNL   TOOSMALL                YES, ABEND USER 0008\n         SPACE 1\nNOTABLE  ST    R3,TERMTABE             SAVE NEW TABLE END\n         XC    0(TERMELEN,R3),0(R3)    CLEAR OUT THE TABLE ENTRY\n         MVC   TERMNAME(8),0(R2)       COPY NAME ACROSS\n         SPACE 1\nFOUNDTAB LH    R4,TERMLOGC             GET LOGON COUNT\n         A     R4,=F'1'                ADD 1 TO IT\n         STH   R4,TERMLOGC             SAVE IT BACK\n         MVI   TERMFLAG,0              CLEAR LOGON STATUS FLAG\n         MVC   TERMCID(4),20(R1)       SAVE PENDING CID FOR INQUIRE\n         SPACE 2                                                   TAMU\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *TAMU\n*        OBTAIN THE LOGMODE NAME FROM THE CINIT RU                *TAMU\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *TAMU\n         SPACE 1                                                   TAMU\n         XC    TERMLOGM,TERMLOGM       CLEAR IN CASE NO LOGMODE    TAMU\n         L     PTRRPL,16(,R1)          ADDR OF R2AD ONLY RPL       TAMU\n         L     R7,RPLAREA              ADDR OF CINIT RU            TAMU\n         L     R6,RPLRLEN              LENGTH OF CINIT RU          TAMU\n         AR    R6,R7                   CALC END OF CINIT RU        TAMU\n*                                                                  TAMU\n         XR    R2,R2                   CLEAR FOR ICM               TAMU\n         ICM   R2,3,10(R7)             GET LENGTH OF BIND IMAGE    TAMU\n         LA    R7,12(R2,R7)            BUMP PAST BIND IMAGE        TAMU\n*                                                                  TAMU\n         XR    R2,R2                   CLEAR FOR IC                TAMU\n         IC    R2,1(,R7)               GET LENGTH OF SLU NAME      TAMU\n         LA    R7,2(R2,R7)             BUMP PAST SLU NAME          TAMU\n*                                                                  TAMU\n         IC    R2,0(,R7)               GET LENGTH OF R2SERV1 FIELD TAMU\n         LA    R7,1(R2,R7)             BUMP PAST R2SERV1 FIELD     TAMU\n*                                                                  TAMU\n         IC    R2,0(,R7)               GET LENGTH OF R2SERV2 FIELD TAMU\n         LA    R7,1(R2,R7)             BUMP PAST R2SERV2 FIELD     TAMU\n*                                                                  TAMU\n         IC    R2,0(,R7)               GET LENGTH OF USER DATA     TAMU\n         LA    R7,1(R2,R7)             BUMP PAST USER DATA         TAMU\n*                                                                  TAMU\n         ICM   R2,3,0(R7)              GET LENGTH OF DEVICE INFO   TAMU\n         LA    R7,2(R2,R7)             BUMP PAST DEVICE INFO       TAMU\n*                                                                  TAMU\n         XR    R2,R2                   CLEAR FOR IC                TAMU\n         IC    R2,0(,R7)               GET LENGTH OF KEY           TAMU\n         LA    R7,1(R2,R7)             BUMP PAST KEY               TAMU\n*                                                                  TAMU\nCHKVCTR  DS    0H                                                  TAMU\n         CR    R7,R6                   ANY VECTORS LEFT?           TAMU\n         BNL   NOLMODE                 NO                          TAMU\n         CLI   0(R7),X'0D'             IS THIS LOGMODE VECTOR?     TAMU\n         BE    SETLMODE                YES                         TAMU\n         XR    R2,R2                   CLEAR FOR IC                TAMU\n         IC    R2,1(,R7)               GET LENGTH                  TAMU\n         LA    R7,2(R2,R7)             CALC ADDR OF NEXT VECTOR    TAMU\n         B     CHKVCTR                                             TAMU\n*                                                                  TAMU\nSETLMODE DS    0H                                                  TAMU\n         MVC   TERMLOGM(8),2(R7)       SAVE LOGMODE NAME           TAMU\nNOLMODE  DS    0H                                                  TAMU\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        OBTAIN AN ASYNC RPL/NIB AND PREPARE FOR OPNDST               *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         BAL   R14,GETRPL              OBTAIN AN RPL\n         OI    EXITFLAG,LOGONEX        MARK LOGON EXIT ENTERED\n         ST    R3,RPLUSFLD             SAVE FOR ERROR ON OPNDST\n         ST    PTRRPL,TERMCRPL         SAVE A(RPL) IN TTE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        OBTAIN THE SESSION PARAMETERS WITH THE INQUIRE MACRO         *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nINQUIRSE XC    SESSPARM,SESSPARM       ZERO SESSION PARM WORK AREA\n         L     R2,TERMCID              LOAD CID FOR INQUIRE\n         OI    MACFLAG2,INQSES         INDICATE INQUIRE(SESSPARM)\n         OI    MFLAGS2,INQSESS\n         INQUIRE RPL=(PTRRPL),                                         X\n               OPTCD=SESSPARM,                                         X\n               ARG=(R2),                                               X\n               AREA=SESSPARM,                                          X\n               AREALEN=L'SESSPARM,                                     X\n               EXIT=INQSESX\n         NI    MFLAGS2,255-(INQSESS)   RESET ERREXIT FLAG\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(SESSPARM)                                *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    INQUIRSE                YES. REISSUE\n         LTR   R15,R15                 SIMLOGON ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '* * * * *  N E T S O L  -  INQUIRE END EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CHECK VALIDITY OF THE INQUIRE(SESSPARM)                      *\n*        ENTRY IS FROM THE INQUIRE INVOKED IN THE LOGON EXIT          *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nINQSESX  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS2,INQSESS\n*                                       IS FOR SIMLOGON\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS2,255-(INQSESS)   RESET ERREXIT FLAG\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(SESSPARM)                                *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO CINIT QUEUED                      14  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n*======> BH    SNOCCUR                 CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTABC(R15)            CHECK VALID ACTIONS\nERRTABC  B     R0CHKC               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8\n         BAL   R7,SNOCCUR           C\n         B     INQUIRSE            10  REISSUE.  NO NEED TO\n         B     FREERPL             14  TERMINAL GONE. END REQUEST\n         SPACE 1\nR0CHKC   DS    0H\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n*======> BNZ   SNOCCUR                 YES, OR OTHER ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        USE BIND PARAMETERS JUST OBTAINED TO DETERMINE TERMINAL TYPE *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         L     R3,RPLUSFLD             LOAD A(TTE) FROM RPL\n         LA    R2,SESSPARM             ESTABLISH ADDRESSABILITY\n         USING ISTDBIND,R2               TO BIND PARMATERS\n         CLI   BINLUP,BINLUP0C         IF LU TYPE 0\n         BE    LUTYPE0                   YES - BR TO MORE CHECKS\n         CLI   BINLUP,BINLUP1C         LU TYPE 1 (POSIBLY 3287 SCS) ?\n         BE    LUTYPE1                   YES - BR TO MORE CHECKS\n         CLI   BINLUP,BINLUP2C         LU TYPE 2 (3270) ?\n         BE    LU3270                    YES SO GO PROCESS IT\n         CLI   BINLUP,BINLUP3C         IF LU TYPE 3\n         BE    LUTYPE3                   YES - BR TO MORE CHECKS\n         B     BADLU                   NOTHING WE CAN HANDLE SO AXE IT\nLUTYPE0  CLI   BINFM,X'02'               IF FM=02 THEN IT IS A 3277\n         BE    LU3270                         YES SO USR LU3270\n         CLI   BINFM,X'03'                    IF FM=03 THEN 3767 OR RJE\n         BE    LU0FM3                         YES SO FIND WHICH IT IS\n         B     BADLU                          ELSE DEVICE NOT SUPPORTED\nLU0FM3   TM BINCMNP,BINFMHD            IF THIS IS TRUE THEN HEADERS MAY\n*                                      USED IMPLING RJE SO DROP\n         BNZ   BADLU                   RJE SO DROP\n         B     LU3767                  ELSE 3767 SO GO HANDLE\nLUTYPE1  CLI   BINPRSVC+4,X'E1'        MIGHT BE 3287 SO CHECK BINPDSB1\n*                                      (SEE VTAM PROGRAMMING ON BNDAREA\n*                                     DSECT) FOR AN X'E1' (ALL OUR 3287\n*                                     PRINTERS HAVE THIS SET IN MODETBL\n         BE    LU3767                  YES SO GO HANDLE IT (USE 3767)\n         B     BADLU                   NO SO GET RID OF IT\nLUTYPE3  B     BADLU                   SHOULD NOT HAVE ANY OF THESE\n*                                      SO GET RID OF IT\n*        START OF TERMINAL MODEL DETERMINATION LOGIC\nLU3270   DC    0H'0'\n         CLI   BINPRESZ,BINPSZ0        UNDEFINED ROWXCOL?\n         BE    ISMOD0                  YES - UNABLE TO DETERMINE MODEL\n         MVC   TERMDFT,BINDFLAG        SAVE EXTENDED 3270 DATA STREAM,\n*                                      DEVICE FLAG         W.A.M.\n         CLI   BINPRESZ,BINPSZ1        MODEL 1 ?\n         BE    ISMOD1                  YES - FILL IN TERMMODL\n         CLI   BINPRESZ,BINPSZ2        MODEL 2 ?\n         BE    ISMOD2                  YES - FILL IN TERMMODL\n         XR    R14,R14                 CLEAR R14 FOR ROWSIZE\n         CLI   BINPRESZ,BINPSFX        DEFAULT PSERVIC ROWXCOL ?\n         BNE   ALTROW                  NO - CONTINUE\n         IC    R14,BINSPRIR            PRIMARY ROWSIZE\n         B     GOTROW                  FILL IN TERMROW & TERMCOL\nALTROW   DC    0H'0'\n         CLI   BINPRESZ,BINPSZRC       ALTERNATE PSERVIC ROWXCOL ?\n         BNE   ISMOD0                  NO - UNABLE TO DETERMINE ROWSIZE\n         IC    R14,BINSALTR            ALTERNATE ROWSIZE\nGOTROW   DC    0H'0'\n         CH    R14,=H'12'              IF ROWSIZE=12 THEN MODEL=1\n         BE    ISMOD1\n         CH    R14,=H'24'              IF ROWSIZE=24 THEN MODEL=2\n         BE    ISMOD2\n         CH    R14,=H'32'              IF ROWSIZE=32 THEN MODEL=3\n         BE    ISMOD3\n         CH    R14,=H'43'              IF ROWSIZE=43 THEN MODEL=4\n         BE    ISMOD4\n         CH    R14,=H'27'              IF ROWSIZE=27 THEN MODEL=5\n         BE    ISMOD5\n         B     TERMFIN\nISMOD0   MVI   TERMMODL,C'?'           MODEL TYPE ?\n         B     TERMFIN                 AND CONTINUE\nISMOD1   MVI   TERMMODL,C'1'           MODEL TYPE 1\n         B     TERMFIN                 AND CONTINUE\nISMOD2   MVI   TERMMODL,C'2'           MODEL TYPE 2\n         B     TERMFIN                 AND CONTINUE\nISMOD3   MVI   TERMMODL,C'3'           MODEL TYPE 3\n         B     TERMFIN                 AND CONTINUE\nISMOD4   MVI   TERMMODL,C'4'           MODEL TYPE 4\n         B     TERMFIN                 AND CONTINUE\nISMOD5   MVI   TERMMODL,C'5'           MODEL TYPE 5\n         B     TERMFIN                 AND CONTINUE\nTERMFIN  DC    0H'0'\n*        END OF TERMMODL MODS\n         TM    BINDFLAG,BINSEDS        3270 WITH EXTENDED FUNCTION?\n         BO    LU3270X                 YES - BR TO LOAD DDT3270X\n         L     R1,=AL4(DDT3270A)       NO  - PT AT DDT3270\n         B     STORDDT                       BR TO STORE A(DDT)\nLU3270X  L     R1,=AL4(DDT3270A)       PT AT DDT3270X (PATCHED BY RAG)\n         B     STORDDT                 BR TO STORE IN TTE\nLU3767   DS    0H\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*   LU3767 SUPPORT DROPPED, DUE TO 3262 PRINTERS LOOKING LIKE 3767    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n         SPACE 2\n         L     R1,=AL4(DDT3767)        PT AT DDT FOR 3767\nSTORDDT  ST    R1,TERMDDT              STORE A(DDT) IN TTE\n         DROP  R2\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    ISSUE AN OPNDST TO CONNECT NETSOL TO LOGGED-ON TERMINAL.         *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LA    PTRNIB,NIBSTART         -> NIB WITHIN RPL\n         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP\n         ST    R3,NIBUSER              SAVE IN THE USER FIELD\n         MVC   NIBSYM(8),TERMNAME      TERMINAL NAME TO NIB\nOPENDST  OI    MACFLAGS,OPNSPEC        INDICATE DOING AN OPNDST(SP)\n         OI   MFLAGS,OPNDSPEC\n         OPNDST RPL=(PTRRPL),                                          X\n               OPTCD=(ACCEPT,SPEC,NQ),                                 X\n               EXIT=OPENEND,                                           X\n               NIB=NIBSTART\n         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST                                           *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    OPENDST                 YES. REISSUE\n         LTR   R15,R15                 CLSDST ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '* * * * *  N E T S O L  -  OPNDST END EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CHECK VALIDITY OF THE OPNDST                                 *\n*        ENTRY IS FROM THE OPNDST IN THE LOGON EXIT.                  *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nOPENEND  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR\n*                                       IS FOR OPNDST\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(ACCEPT,SPEC)                              *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                   (R15 R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    09    NODE DEACTIVATED                     14  00           *\n*   10    00    TERMINAL UNAVAILABLE                 14  00           *\n*   10    01    OPNDST FAILED                        14  00           *\n*   10    03    VTAM IS HALTING                      14  00           *\n*   10    05    PERMENENT FAILURE IN PATH            08  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   10    11    SDT FAILED                           14  00           *\n*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *\n*   14    54    INVALID TERMINAL NAME                14  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         OI    EXITFLAG,OPENEX         INDICATE IN OPNDST EXIT\n         CH    R15,HEX14               HIGHEST VALID ACTION\n*======> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB1(R15)            CHECK VALID ACTIONS\nERRTAB1  B     R0CHK1               0  CHECK IF TERM ACCEPTED\n         BAL   R7,SNOCCUR           4\n         B     FREERPL              8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         BAL   R7,SNOCCUR           C  CAN'T WRITE MSG IF NOT\n*                                      CONNECTED\n         B     OPENDST             10  REISSUE. CHECK FOR RESET\n         B     FREERPL             14  CAN'T CONNECT DEVICE\n         SPACE 1\nR0CHK1   DS    0H\n         CH    R0,HEX9                 TERM UNAVAILABLE\n         BE    RETURN                  RETURN IF SO\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CID OF DEVICE JUST OPNDST'ED IS NOW IN ASYNC NIB.            *\n*        NOTE : PGM MANUAL INDICATES CID USUALLY???? IN RPLARG FIELD. *\n*        SOLICIT THE DEVICE JUST CONNECTED.                           *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         LA    PTRNIB,NIBSTART         ADDRESS NIB\n         L     R3,NIBUSER              -> TERM TABLE ENTRY\n         ST    R3,RPLUSFLD             SAVE A(TTE) IN RPL FOR MSG\n         MVC   CID(4),NIBCID           SAVE CID IN RPL WORKAREA\n         MVC   TERMCID,NIBCID          COPY THE CID TO TTE\n         MVI   TERMFLG2,TOPEN          MARK TERM ON NETSOL\n         OI    FLAGS,FIRSTSND          FIRST SEND TO THE DEVICE\n         NI    SRPLEXT1,FF-RPLNIB      RESET SYNCHRPL\n         SLR   R0,R0              CLEAR WORK REGISTER\n         IC    R0,TERMCID         LOAD FIRST BYTE OF CID\n         SRL   R0,3               ISOLATE SUB-AREA NO., (IF MAXSUBA=31)\n         CLC   TERMDDT,=AL4(DDT3270A)  IS TERMINAL MONOCHROME\n         BNE   OPNLOCAL                IF COLOR DO NOT CHANGE\n         MVC   TERMDDT,=AL4(DDT3270B)  DISPLAY SCREEN2 IF XDOMAIN\nOPNLOCAL DS    0H\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        DO AUTOMATIC LOGON FOR THOSE TERMINALS THAT HAD A            *\n*        DEFAULT LOGON SPECIFIED IN THE INITIALIZATION DATA SET.      *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CLC   TERMDAPL,=XL8'00'       IS THERE A DEFAULT APPL?\n         BE    OPNDSTC                 NO  => GO WRITE MSG TO DEVICE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        TO PREVENT LOOPING IN AUTOMATIC LOGON, AUTO LOGON WILL       *\n*        BE TERMINATED IF MORE THAN 3 LOGONS FOR A TERMINAL ARE       *\n*        PROCESSED IN A 60 SECOND TIME PERIOD.                        *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         TIME  BIN                     GET TIME IN .01 SECS\n         C     R0,TERMDTIM             < 60 SECS SINCE LAST LOGON?\n         BH    AUTONEW                 NO  => ASSUME NEW AUTO LOGON\n         LH    R1,TERMDCNT             YES => INCR\n         LA    R1,1(,R1)                        LOOP\n         STH   R1,TERMDCNT                        COUNTER\n         CH    R1,HEX2                 MORE THAN 3 TIMES IN 60 SECS?\n         BNH   AUTOINQR                NO  => GO INQUIRE RE APPL STATUS\n         B     OPNDSTC                 YES => SKIP AUTO LOGON\nAUTONEW  A     R0,=AL4(100*60)         ADD 60 SECS TO CURRENT TIME\n         ST    R0,TERMDTIM  AND STORE FOR LATER\n         XC    TERMDCNT,TERMDCNT       ZERO LOOP COUNTER\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *\n*    OF THE DEFAULT LOGON APPLICATION FOR THIS TERMINAL.              *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nAUTOINQR MVC   APPLID(8),TERMDAPL      SAVE APPLID FROM TTE ENTRY\n         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP\n         LA    PTRNIB,NIBSTART         PUT THE APPLICATION\n         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    INQUIRE FOR THE APPLICATION STATUS                               *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nINQUIREA OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT\n         OI    MFLAGS,INQAPPST\n         INQUIRE RPL=(PTRRPL),                                         X\n               OPTCD=APPSTAT,                                          X\n               NIB=NIBSTART,                                           X\n               EXIT=INQAPP1X\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    INQUIREA                YES. REISSUE\n         LTR   R15,R15                 SIMLOGON ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '* * * * *  N E T S O L  -  INQUIRE(APPSTAT) END EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CHECK VALIDITY OF THE INQUIRE(APPSTAT)                       *\n*        ENTRY IS FROM THE INQUIRE INVOKED IN THE LOGON EXIT          *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nINQAPP1X DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,INQAPPST\n*                                       IS FOR SIMLOGON\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  0C  06           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         CH    R15,HEX10               HIGHEST POSSIBLE ACTION\n*======> BH    SNOCCUR                 CODE IS X'10'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB3(R15)            CHECK VALID ACTIONS\nERRTAB3  B     R0CHK3               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS\n*                                      IRRELEVANT\n         B     OPNDSTC              C  DEFAULT APPL IS UNKNOWN SO\n*                                      SKIP AUTO LOGON\n         B     INQUIREA            10  REISSUE.  NO NEED TO\n         SPACE 1\nR0CHK3   DS    0H\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n*======> BNZ   SNOCCUR                 YES, OR OTHER ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *\n*    CODES ARE:                                                       *\n*                                                                     *\n*        0 - ACTIVE AND AVAILABLE                                     *\n*        4 - INACTIVE                                                 *\n*        8 - NEVER ACCEPTS A LOGON                                    *\n*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *\n*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         SR    R15,R15                 CLEAR  REG 15\n         IC    R15,RPLFDB3             EXTRACT FEEDBACK INFO.\n         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.\n         B     STATUS3(R15)            BRANCH IN TABLE\nSTATUS3  B     DAPACTIV             0  DO AUTO LOGON\n         B     OPNDSTC              4  SKIP AUTO LOGON\n         B     OPNDSTC              8  SKIP AUTO LOGON\n         B     OPNDSTC             12  SKIP AUTP LOGON\n         B     OPNDSTC             16  SKIP AUTO LOGON\n         SPACE 1\nDAPACTIV SR    R4,R4                   SET A(LOGON DATA) = 0\n         SR    R2,R2                   SET L(LOGON DATA) = 0\n         B     FILLNIB                 BR INTO LOGON PROCESSING\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        NO AUTO LOGON IS BEING DONE FOR THIS TERMINAL SO             *\n*        GO SOLICIT LOGON INFORMATION FROM THE TERMINAL USER.         *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nOPNDSTC  LA    R0,MSG12                WRITE LOGON MESSAGE\n         B     SENDMSG                 IS FROM THE LOGON EXIT\n         SPACE 3\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  RECEIVE ANY EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN THE OUTSTANDING REC-ANY      *\n*    COMPLETES.                                                       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS TO THE RPL USED FOR THE READ-ANY (IGFRPL)      *\n*                                                                     *\n*               THE CID FIELD OF THIS RPL HAS CID OF DEVICE           *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nRECEND   DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESSABILITY\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         LA    R13,GENSAVE             POINT TO SAVE-AREA\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        ISSUE NEW READ SO WE CAN HANDLE MORE THAN 1 LOGON AT A TIME. *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LR    R7,R1                   SAVE R7 AROUND THE REC ANY CODE\n         BAL   R14,GETRPL              GET AN RPL FOR THE RECEIVE\n         BAL   R14,RECSUB              ISSUE A RECEIVE (ANY)\n         SPACE 1\n         LR    PTRRPL,R7               RESTORE THE INPUT RPL @\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         L     R3,RPLUSFLD             -> TTE\n         ST    R5,TERMCRPL             SAVE A(RPL)\n         OI    EXITFLAG,RECEX\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        SAVE CID OF DEVICE FROM RPL ARG FIELD.                       *\n*        GET LENGTH OF RECORD READ. THIS WILL BE DECREMENTED          *\n*        IF DEVICE CONTROL CHARACTERS ARE REMOVED BEFORE INTRPRET.    *\n*                                                                     *\n*        NOTE: INFO IN RPL MAY NOT BE VALID IF CHECK RETURNS          *\n*              AN ERROR.                                              *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         MVC   CID(4),RPLARG           GET CID FROM RPL\n         MVC   RECLEN(4),RPLRLEN       GET RPL RECORD LENGTH\n         SPACE 1\n         OI    MFLAGS,RECA             TELL ERREXIT THAT ERRORS\n*                                       ARE FOR REC(ANY)\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                      IS ENTERED IF ERRORS HAVE\n         NI    MFLAGS,255-(RECA)       RESET READ INDICATOR\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR CHECK OF READ (ANY)                              *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                   (R15  R0)         *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                 00  00          *\n*   04    04    EXCP. CONDITION ON INCOMMING MESSAGE                  *\n*                                                                     *\n*             SSENSEI/SSENSMI                                         *\n*                80     XX        PATH ERRORS         14  00          *\n*                80     05        NO SESSION COND.    08  04          *\n*                40     XX        RH   ERRORS         SNOCCUR         *\n*                20     XX        STATE ERRORS        08  04          *\n*                10     03        FUNCTION \u00ac SUPPORTED08  00          *\n*                10     XX        REQUEST ERRORS      SNOCCUR         *\n*                08     00        BRACKET ERROR       18  00          *\n*                08     01        REQUEST REJECT      08  00          *\n*                08     02        INTV REQ            14  00          *\n*                08     13        BRACKET ERROR       18  00          *\n*                08     2B        PRES. SPACE INT. LO 18  00          *\n*                08     2D        SLU BUSY            14  00          *\n*                                                                     *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *\n*   0C    01    I/O ERROR.  DEVICE NOT USABLE         08  00          *\n*   0C    02    TEST REQUEST SET (LOSTTERM)           14  00          *\n*   0C    07    CONNECT REC. IN PROGRESS              14  00          *\n*   0C    08    LU RESTARTED (LOSTTERM)               14  00          *\n*   0C    0A    REQU. CANCEL. BY RESETR               SNOCCUR         *\n*   0C    0B    CANCELED BY CLSDST                    14  00          *\n*   0C    0C    REQUEST CANCEL. BY CLEAR              08  04          *\n*   10    05    PERMANENT PATH FAILURE                08  00          *\n*   10    07    REQUEST CANCEL BY VARY (LOSTTERM)     14  00          *\n*   10    09    TERMINATE SELF OR LOGOFF (LOSTTERM)   14  00          *\n*   10    0F    BUFFERS FILLED (LOSTTERM)             14  00          *\n*   10    10    TERMINATE SELF COMMAND                08  04          *\n*   10    0C    DIAL-IN DISCONNECT                    08  00          *\n*   14    12    CLSDST IN PROGRESS                    14  00          *\n*   14    32    REQUEST INVALID FOR SPECIFIED DEVICE  08  00          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         CH    R15,HEX18               HIGHEST POSSIBLE ACTION\n*======> BH    SNOCCUR                  CODE IS X'20'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB2(R15)            CHECK VALID ACTIONS\nERRTAB2  B     R0CHK2               0  VALID DATA FROM READ?\n         BAL   R7,SNOCCUR           4\n         B     RELOPNB              8  CHECK IF WE WANT TO REOPEN\n         B     SENDMSG              C  SEND A MESSAGE (MSG# FROM ERREX)\n         B     RESEND               10 REISSUE\n         B     FREERPL              14\n         B     RESEND               18\n         SPACE 1\nRELOPNB  LTR   R0,R0                   DO OPNDST AFTER CLSDST ?\n         BZ    RELEASE\n         OI    FLAGS,RELOPND           SAY WE WANT TO REOPEN AFTER RELS\n         B     RELEASE\n         SPACE 1\nR0CHK2   DS    0H\n         LTR   R0,R0\n*======> BNZ   SNOCCUR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         TM    RPLCNTDC,RPLLUS         DID WE RECEIVE LUSTAT ?\n         BO    LUSTATUS                YES, GO HANDLE IT\n         SPACE 1\n         TM    TERMFLAG,LOGPROC        HAS IMPATIENT USER ISSUED\n*                                      A SECOND LOGON SEQUENCE WHILE\n*                                      THE FIRST IS IN PROGRESS?\n         BO    FREERPL                 YES => IGNORE THIS REQUEST\n         OI    TERMFLAG,LOGPROC        NO  => SET LOGON BEING PROCESSED\n         SPACE 1\n         LA    R6,IOAREA               POINT TO DATA RECEIVED\n         L     R2,RECLEN               GET DATA LENGTH\n         LTR   R2,R2                   RECEIVE ANY DATA?\n*                                      IN CASE NO DATA RECEIVED\n*                                       RESOLICIT THE TERMINAL\n         BZ    RESEND\n         LA    R3,L'IOAREA             COMPARE THE RECLEN WITH\n         CR    R2,R3                    THE READ BUFFER LENGTH.\n         BNH   GOEDIT                  BUFFER LENGTH GREATER\n*                                       THAN INPUT RECORD.\n         LR    R2,R3                   ONLY THE FIRST 80 BYTES\n*                                       WILL BE READ IN.\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        BRANCH TO INPUT EDIT ROUTINE FOR THE APPROPRIATE DEVICE TYPE.*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nGOEDIT   DS    0H\n         L     R3,RPLUSFLD             LOAD A(TTE)\n         L     R9,TERMDDT              LOAD A(DDT FOR DEVICE)\n         L     R15,DDTEDIT             LOAD A(DEVICE EDIT ROUTINE)\n         BR    R15                     GO EDIT INPUT\n         TITLE '* * * * *  N E T S O L  -  INPUT EDIT ROUTINE FOR 3270'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        S32EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3270       *\n*        DEVICE CONTROL CHARACTERS.                                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nS32EDIT  DS    0H\n         CLI   0(R6),CLEARKEY          IS IT 'CLEAR' KEY ?\n         BNE   S32PFK                  NO SO CHECK VALID LOGON\n*        TEST FOR CPIC TERMINAL, IF SO CHANGE TO PFK2-83/01/26 BJH\n         CLC   TERMNAME(8),=C'Y0ACA01 '\n         BE    CLRCPIC\n         CLC   TERMNAME(8),=C'Y0AEA01 '\n         BE    CLRCPIC\n         CLC   TERMNAME(8),=C'Y0A5A01 '\n         BE    CLRCPIC\n         CLC   TERMNAME(8),=C'Z0B8A01 '\n         BE    CLRCPIC\n         B     RESEND                  NOT CPIC SO ASK FOR MORE\n*        MUST BE A CPIC TERMINAL SO CHANGE TO A PFK2\nCLRCPIC  MVI   0(R6),C'2'\n         B     S32PFK                  AND GO PROCESS IT\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        NOT 'CLEAR' KEY, CHECK FOR OTHER FUNCTION KEY DEPRESS.  IF   *\n*        IT IS A FUNCTION KEY THE DATA WILL BE PASSED DIRECTLY TO     *\n*        INTERPRET, OTHERWISE THE DATA POINTER WILL BE UPDATED TO     *\n*        SKIP THE 3270 DEVICE CONTROL SEQUENCE.                       *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nS32PFK   DS    0H\n         CLI   0(R6),X'4A'             IS IT PF22\n         BL    S32PFK2                 IF LOW CHECK PF10\n         CLI   0(R6),X'4C'             IS IF PF24\n         BNH   S32OI                   IF IN RANGE, CHANGE TO PF10-12\n         CLI   0(R6),X'C1'             IS IT PF13\n         BL    S32PFK2                 IF LOW CHECK PF10\n         CLI   0(R6),X'C9'             IS IT PF21\n         BH    S32PFK2                 IF OUT OF RANGE CONTINUE\nS32OI    DS    0H\n         OI    0(R6),X'30'             CHANGE HI PFK TO LO PFK\n         B     INTRPRET                IN RANGE GO AHEAD\nS32PFK2  DS    0H\n         CLI   0(R6),X'7A'             IS IT PF10\n         BL    S32PA                   IF LOW CHECK PROGRAM ACCESS\n         CLI   0(R6),X'7C'             IS IF PF12\n         BNH   INTRPRET                IF IN RANGE DO IT\n         CLI   0(R6),C'1'              IS IT PF1\n         BL    S32ENTER                IF LOW CARRY ON\n         CLI   0(R6),C'9'              IS IT PF9\n         BNH   INTRPRET                IF IN RANGE DO IT\n*        CHECK PROGRAM ACCESS KEYS HERE\nS32PA    CLI   0(R6),X'6C'             IS IT PA1\n         BE    INTRPRET                IF YES, DO IT\n         CLI   0(R6),X'6E'             IS IT PA2\n         BE    INTRPRET                IF YES, DO IT\n         CLI   0(R6),X'6B'             IS IT PA3\n         BE    INTRPRET                IF YES, DO IT\n         SPACE 1\nS32ENTER DS    0H\n         CLI   0(R6),ENTERKEY          IS IT THE ENTER KEY?\n         BNE   BADINPUT\n         LA    R3,3                    USER MIGHT HAVE HIT\n         CR    R2,R3                   ENTER KEY ONLY BUT NO LOGON\n         BE    RESEND                  IF SO LETS GIVE HIM ANOTHER GO\n         SPACE 1\n         LA    R6,6(R6)                BYPASS SBA 3270 CONTROL + ORDER\n         LA    R1,6\n         SR    R2,R1                   ALLOW FOR DECREASE\n         LTR   R2,R2                   IS THERE ANY THING\n         BNP   BADINPUT                NO SO MUST BE INVALID\n         B     INTRPRET                GO INTERPRET LOGON SEQ\n         TITLE '* * * * *  N E T S O L  -  INPUT EDIT ROUTINE FOR 3767'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        S37EDIT PROCESSES THE INPUT DATA STREAM TO REMOVE 3767       *\n*        DEVICE CONTROL CHARACTERS.                                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nS37EDIT  DS    0H\n         CLI   0(R6),CR                ONLY CARRIAGE RETURN?\n         BE    RESEND                  YES => WRITE MSG 12\n         BCTR  R2,0                    DECREMENT SIZE TO REMOVE CR TAMU\n         LTR   R2,R2                   ANYTHING LEFT               TAMU\n         BP    INTRPRET                YES                         TAMU\n         B     BADINPUT                NO                          TAMU\n         TITLE '* * * * *  N E T S O L  -  COMMAND LOOKUP'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    SCAN NETSOL'S COMMAND TABLE FOR AN ENTRY MATCHING THE LOGON DATA *\n*    ENTERED FROM THE TERMINAL.  IF A MATCH IS FOUND, THE SPECIFIED   *\n*    CMD ROUTINE IS BRANCHED TO. OTHERWISE, AN ERROR MESSAGE IS       *\n*    WRITTEN TO THE TERMINAL INDICATING INVALID LOGON DATA.           *\n*                                                                     *\n*    THE COMMAND CAN BE EITHER:                                       *\n*           - A REQUEST FOR LOGON TO A VTAM APPLICATION PROGRAM, OR   *\n*           - A REQUEST FOR A SERVICE FROM NETSOL, SUCH AS, LOGOFF    *\n*                                                                     *\n*    INPUT :                                                          *\n*        R2 - LENGTH OF LOGON DATA                                    *\n*        R6 - A(LOGON DATA IN DATA BUFFER)                            *\n*                                                                     *\n*    OUTPUT:                                                          *\n*        R0 - ERROR MSG # IF NO ENTRY FOUND                           *\n*        R1 - A(MATCHING COMMAND TABLE ENTRY)                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nBADINPUT LA    R0,MSG02                INPUT NOT RECOGNISED\n         B     SENDMSG\n         SPACE 1\nINTRPRET DS    0H\n         STC   R2,DATASEQL             SAVE LOGON DATA LENGTH\n         ST    R6,DATAPTR              SAVE A(LOGON DATA)\n*        CONVERT LOGON DATA TO UPPER CASE\nLOWTOUP  OI    0(R6),X'40'             MAKE CURRENT CHAR UPPER CASE\n         LA    R6,1(R6)                GET\n         BCT   R2,LOWTOUP                  NEXT CHAR\n*        SAVE DATA FOR USE IN CLSDST(PASS)\n         IC    R2,DATASEQL             RESTORE LOGON DATA LENGTH\n         L     R6,DATAPTR              RESTORE A(LOGON DATA)\n         BCTR  R2,0                    REDUCE FOR MOVE\n         XC    DATASEQ,DATASEQ         ZERO OUT MSG WORK AREA\n         EX    R2,@EXEC1               SAVE LOGON DATA\n         SPACE 1\n*        SEARCH COMMND TABLE FOR MATCHING COMMAND TEXT\n         SPACE 1\n         L     R1,=AL4(CMDTAB)\nCMDTABLP CLC   CMDGAPPL(,R1),=CL8'ENDOFTAB' END OF SEARCH?\n         BNE   CMDTABL1                NO\n         LA    R0,MSG07                YES => LOAD ERROR MSG #\n         B     SENDMSG                        AND GO SEND IT\nCMDTABL1 LH    R2,CMDTEXTL(R1)         LOAD LENGTH OF CMDTEXT\n         LA    R4,CMDTEXT(,R1)         PT @ CMDTEXT\n         LA    R6,DATASEQ              PT @ LOGON DATA\nCMDTABL2 CLC   0(1,R4),0(R6)           DOES THIS CHAR MATCH?\n         BNE   CMDTABL3                NO => GET NEXT ENTRY\n         LA    R4,1(,R4)               YES => COMPARE\n         LA    R6,1(,R6)                        NEXT\n         BCT   R2,CMDTABL2                        CHARACTER PAIR\n*        TO ENSURE UNIQUENESS OF CMDS, COMMAND TEXT MUST\n*        END WITH A BLANK OR BE AT THE END OF THE CMD BUFFER.\n         CLI   0(R6),X'40'             IS NEXT CHAR A BLANK?\n         BE    CMDFOUND                YES => CMD IS A MATCH\n         CLI   0(R6),X'00'             IS THIS END OF CMD BUFFER?\n         BE    CMDFOUND                YES => CMD IS A MATCH\n         CLI   0(R6),C'$'              LAST CHAR OF PFK INPUT(PFK5=5$)\n         BE    CMDFOUND                YES => CMD IS A MATCH\nCMDTABL3 LA    R1,CMDTABL(,R1)         NO => GET\n         B     CMDTABLP                          NEXT ENTRY\n         SPACE 1\n*        MATCHING CMD HAS BEEN FOUND\n         SPACE 1\n*        CHECK IF CMD IS VALID FOR THE SOURCE OF THE CMD\nCMDFOUND TM    UFLAGS,INIT             CMD ISSUED DURING NETSOL INIT?\n         BZ    CMDCKTRM                NO  => CHECK IF CMD OK FROM TERM\n         TM    CMDFLAG(R1),CMDINIT     CMD VALID FROM SYSIN?\n         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK\n         B     CMDSETGP                YES => CONTINUE CMD SETUP\nCMDCKTRM TM    CMDFLAG(R1),CMDTERM     CMD VALID FROM TERMINAL?\n         BZ    CMDTABL3                NO  => CHECK FOR CMD THAT'S OK\n*        SET UP PARAMETERS FOR GETPARM SUBROUTINE\nCMDSETGP ST    R6,GPDATAP              SAVE CURRENT CMD BUFFER PTR\n         LA    R2,DATASEQ              CALCULATE\n         SR    R6,R2                     LENGTH OF CMD\n         SR    R2,R2                   CALCULATE\n         IC    R2,DATASEQL               LENGTH OF TEXT\n         SR    R2,R6                       REMAINING IN CMD BUFFER\n         STH   R2,GPDATAL              SAVE FOR USE BY GETPARM\n*        BRANCH TO CMD PROCESSING ROUTINE\n         L     R2,CMDROUTA(,R1)        LOAD A(CMD ROUTINE)\n         BR    R2                        AND BR TO IT\n         SPACE 2\n*        EXECUTED CODE\n@EXEC1   MVC   DATASEQ(0),0(R6)\n         TITLE '* * * * *  N E T S O L  -  CHECK APPLICATION STATUS'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    USE THE INQUIRE MACRO IN DETERMINING THE CURRENT STATUS          *\n*    OF THE VTAM APPLICATION ASSOCIATED WITH THE LOGON DATA.          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nCHKAPPL  MVC   APPLID(8),CMDVAPPL(R1)  SAVE APPLID FROM CMD TABLE ENTRY\n         ST    R1,CMDENTRY             SAVE CMD ENTRY ADDR         TAMU\n         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP\n         LA    PTRNIB,NIBSTART         PUT THE APPLICATION\n         MVC   NIBSYM(8),APPLID        NAME INTO NIB SYMBOLIC NAME SLOT\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    INQUIRE FOR THE APPLICATION STATUS                               *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nINQUIREB OI    MACFLAGS,INQAPPS        TELL ABOUT INQUIRE FOR APPSTAT\n         OI    MFLAGS,INQAPPST\n         INQUIRE RPL=(PTRRPL),                                         X\n               OPTCD=APPSTAT,                                          X\n               NIB=NIBSTART,                                           X\n               EXIT=INQAPP2X\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    INQUIREB                YES. REISSUE\n         LTR   R15,R15                 SIMLOGON ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '* * * * *  N E T S O L  -  INQUIRE(APPSTAT) END EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CHECK VALIDITY OF THE INQUIRE(APPSTAT)                       *\n*        ENTRY IS FROM THE INQUIRE INVOKED IN THE RECEIVE EXIT        *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nINQAPP2X DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,INQAPPST\n*                                       IS FOR SIMLOGON\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(INQAPPST)   RESET ERREXIT FLAG\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  0C  06           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  0C  06           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         CH    R15,HEX10               HIGHEST POSSIBLE ACTION\n*======> BH    SNOCCUR                 CODE IS X'10'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB4(R15)            CHECK VALID ACTIONS\nERRTAB4  B     R0CHK4               0  PROBABLY WORKED OK\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CONNECTION TO DEVICE IS\n*                                      IRRELEVANT\n         B     APPLBAD              C  THIS IS NORMAL CASE FOR\n*                                      APPLICATION UNKNOWN\n         B     INQUIREB            10  REISSUE.  NO NEED TO\n         SPACE 1\nR0CHK4   DS    0H\n         LTR   R0,R0                   INQUIRE AREA TOO SMALL?\n*======> BNZ   SNOCCUR                 YES, OR OTHER ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    TEST RPL FEEDBACK (FDBK) FOR INDICATION OF APPLICATION STATUS.   *\n*    CODES ARE:                                                       *\n*                                                                     *\n*        0 - ACTIVE AND AVAILABLE                                     *\n*        4 - INACTIVE                                                 *\n*        8 - NEVER ACCEPTS A LOGON                                    *\n*       12 - TEMPORARILY NOT ACCEPTING LOGONS                         *\n*       16 - APPLICATION IS QUIESCING (CLOSED ITS LOGON QUEUE)        *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         SR    R15,R15                 CLEAR  REG 15\n         IC    R15,RPLFDB3             EXTRACT FEEDBACK INFO.\n         STC   R15,APPLSTAT            SAVE FOR DEBUGGING.\n         B     STATUS(R15)             BRANCH IN TABLE\nSTATUS   B     APPACTIV             0\n         B     APPINACT             4\n         B     APPNEVER             8\n         B     APPTEMP             12\n         B     APPCLOSE            16\n         SPACE 1\nAPPTEMP  DS    0H                      APPLICATION TEMPORARILY NOT\n*                                      ACCEPTING LOGONS\n         LA    R0,MSG11                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPNEVER DS    0H                      APPLICATION NEVER ACCEPTS LOGONS\n         LA    R0,MSG10                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPINACT DS    0H                      APPLICATION INACTIVE\n         LA    R0,MSG08                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPCLOSE DS    0H                      APPLICATION QUIESCING\n         LA    R0,MSG09                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         SPACE 1\nAPPLBAD  DS    0H                      BAD APPLICATION NAME\n         LA    R0,MSG07                SET MESSAGE CODE\n         B     SENDMSG                 TELL TERMINAL USER\n         TITLE '* * * * *  N E T S O L  -  CLSDST(PASS) FUNCTION'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    THE APPLICATION IS ACTIVE AND AVAILABLE. PASS THE TERMINAL PLUS  *\n*    LOGON DATA TO THE DESIRED APPLICATION.                           *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nAPPACTIV OI    FLAGS,CLEARSCR          MUST ISSUE CLEAR SCREEN\n         LA    R0,MSG06                SEND LOGON IN PROGRESS\n         B     SENDMSG                 GO ISSUE SEND\n         SPACE 1\nCONTPASS NI    FLAGS,255-(CLEARSCR)    TURN OFF FLAG TO INDICATE RETURN\n         SR    R2,R2                   CLEAR\n         IC    R2,DATASEQL             GET DATA SEQUENCE LENGTH PASSED\n*                                       FROM INTRPRET\n         LA    R4,DATASEQ              ADDRESS OF DATA TO PASS\n         SPACE 1\nFINDBLNK CLI   0(R4),X'40'             IS IT A BLANK?\n         BE    FINDDATA                YES SEE IF ANY DATA FIELD\n         LA    R4,1(R4)                OVERWISE GO TO NEXT BYTE\n         BCT   R2,FINDBLNK             DECREASE COUNT TRY NEXT\n         SPACE 1\nNODATA   SR    R4,R4                   CLEAR REG TO SAY NO DATA\n         B     FILLNIB                 GO ISSUE PASS WITH NO DAT\n         SPACE 1\nFINDDATA LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),X'40'             IS IT STILL A BLANK?\n         BNE   DATAFOND                NO SO WE HAVE DATA\n         BCT   R2,FINDDATA             TRY AND FIND MORE DATA\n         B     NODATA                  ISSUE PASS WITH NO DATA\n         SPACE 1\nDATAFOND BCTR  R2,0                    END OF LOGON BUT NO DATA\n         LTR   R2,R2                   NO MORE DATA?\n         BZ    NODATA                  ISSUE CLSDST WITH NO DATA\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* THIS CODE WILL CHECK IF THE REQUESTED APPLICATION IS ONE THAT HAS   *\n* A SPECIAL LOGMODE ENTRY. IF SO, THE ASSOCIATED LOGMODE ENTRY IN THE *\n* TABLE WILL BE ADDED TO THE NIB PRIOR TO THE CLSDST(PASS).           *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nFILLNIB  LA    PTRNIB,NIBSTART         USE NIB CONTAINED IN RPL.\n         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP\n         MVC   NIBLMODE,TERMLOGM       COPY LOGMODE FROM OPENDST   TAMU\n         CLI   NIBLMODE,X'40'          IS THERE ONE?               TAMU\n         BH    HAVELOGM                YES CONTINUE                TAMU\n         MVC   NIBLMODE,=CL8'M_      '                             TAMU\n         MVC   NIBLMODE+1(1),TERMMODL                              TAMU\n         CLC   TERMDDT,=A(DDT3767)     IS THIS 3767?               TAMU\n         BNE   NOT3767                 NO                          TAMU\n         MVC   NIBLMODE,=CL8'INTERACT'                             TAMU\nNOT3767  DS    0H                                                  TAMU\nHAVELOGM DS    0H                                                  TAMU\n         LA    R1,LOGMDTAB             PT @ LOGMODE TABLE\nLOGMDLP  CLC   LOGMDAPP(8,R1),=XL8'FFFFFFFFFFFFFFFF' END OF TABLE?\n         BE    SKIPLOGM                YES => USE DEFAULT ENTRY\n         CLC   APPLID(8),LOGMDAPP(R1)  DOES APPLID MATCH TABLE ENTRY?\n         BE    INSRTLGM                YES => GO INSERT LOGMODE NAME\n         LA    R1,LOGMDLEN(,R1)        NO  => GET NEXT TABLE ENTRY\n         B     LOGMDLP                        & PROCESS IT\nINSRTLGM MVC   NIBLMODE(8),LOGMDENT(R1) MOVE LOGMODE NAME INTO NIB\n         SPACE 1\nSKIPLOGM DS    0H\n         LA    R1,DFLTDTAB             PT @ DEFAULT DATA TAB       TAMU\n         L     R3,CMDENTRY             ADDR OF CMD ENTRY           TAMU\nDFLTDLP  CLC   DFLTDAPP(8,R1),=XL8'FFFFFFFFFFFFFFFF' END OF TABLE? TAMU\n         BE    SKPDFLTD                YES => DONT SET DEFAULT     TAMU\n         CLC   CMDTEXT(8,R3),DFLTDAPP(R1)  DOES APPLID MATCH?      TAMU\n         BE    INSRTSTR                YES => GO INSERT DFLT DATA  TAMU\n         LA    R1,DFLTDLEN(,R1)        NO  => GET NEXT TABLE ENTRY TAMU\n         B     DFLTDLP                        & PROCESS IT         TAMU\nINSRTSTR DS    0H                                                  TAMU\n         SR    R2,R2                                               TAMU\n         IC    R2,DFLTDSIZ(,R1)                                    TAMU\n         LA    R4,DFLTDSTR(,R1)                                    TAMU\n         SPACE 1                                                   TAMU\nSKPDFLTD DS    0H\n         L     R3,RPLUSFLD             -> TTE\n         MVC   NIBSYM(8),TERMNAME      COPY TERMINAL NAME TO NIB\n         SPACE 1\nPASS     OI    MFLAGS,CLSDST           CLSDST(PASS) BEING DONE\n         OI    MACFLAGS,CLOSPASS\n         SPACE 1\n         CLSDST  RPL=(PTRRPL),                                         X\n               NIB=(PTRNIB),                                           X\n               OPTCD=(ASY,PASS),                                       X\n               AAREA=APPLID,                                           X\n               AREA=(R4),                                              X\n               RECLEN=(R2),                                            X\n               EXIT=PASSEND\n         NI    MFLAGS,255-(CLSDST)\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(PASS)                                     *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    PASS                    YES. REISSUE\n         LTR   R15,R15                 CLOSE(PASS) ACCEPTED\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   VALID COMPLETION?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  RETURN TO VTAM\n         SPACE 3\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  CLSDST(PASS) EXIT RTN'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CHECK THAT THE CLSDST(PASS) WORKED CORRECTLY                 *\n*                                                                     *\n*        THIS EXIT ROUTINE IS SCHEDULED WHEN A CLSDST (PASS)          *\n*        IS ISSUED.  THE CLSDST IS ISSUED WHEN A VALID LOGON          *\n*        SEQUENCE HAS BEEN RECEIVED FROM THE TERMINAL AND             *\n*        THE DESIRED APPLICATION IS RECEIVING LOGON'S.                *\n*                                                                     *\n*        REGISTER 5 CONTAINS THE ADDRESS OF THE RPL USED              *\n*            IN THE CLSDST.                                           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nPASSEND  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         LR    PTRRPL,R1               GET THE RPL PASSED\n         LA    R13,RPLSAVE             R13 -> RPL SAVE AREA\n         SPACE 1\n         OI    MFLAGS,CLSDST           INDICATE IN PASSEND\n         OI    EXITFLAG,PASSEX\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(CLSDST)\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(PASS)                                     *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   00    08    QUEUED SESSION ALREADY EXISTS        00  08           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *\n*   10    00    APPLICATION UNAVAILABLE              0C  08           *\n*   10    02    TARGET APPLICATION UNACCEPTABLE      0C  09           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0D    VTAM INACTIVE TO YOUR ACB            SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    13    CID INVALID                          14  00           *\n*   14    4B    INVALID LOGMODE ENTRY SPECIFIED      0C  01           *\n*   14    53    TERMINAL NOT DEFINED CROSS DOMAIN    0C  03           *\n*   14    55    NO OPNDST AUTHORIZATION              0C  05           *\n*   14    5D    OPNDST INVALID (TERM NOT CONNECTED)  14  00           *\n*   14    5F    RESOURCE NOT OWNED                   14  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n*======> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB5(R15)            CHECK VALID ACTIONS\nERRTAB5  B     R0CHK5               0  PROBABLY PASSED DEVICE\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8\n         B     SENDMSG              C  NORMAL CASE IF APPLI-\n*                                       CATION STOPPED ACCEPT-\n*                                       ING LOGONS SINCE THE\n*                                       INQUIRE\n         B     RESEND              10  LET USER TRY AGAIN LATER\n         B     FREERPL             14  IT COULD BE THAT NETSOL\n*                                       NO LONGER HAS THE\n*                                       DEVICE SINCE IT WAS\n*                                       FREED BY RELREQ AFTER\n*                                       THE READEND EXIT WAS\n*                                       SCHEDULED.\nR0CHK5   DS    0H\n         CH    R0,HEX8             08  QUEUED SESSION EXISTS\n         BE    QSESSION                 => ISSUE CLSDST RELEASE\n         LTR   R0,R0                   ANYTHING BUT FDBK2=08\n*======> BNZ   SNOCCUR                   SHOULD NOT OCCUR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*\n*        BYPASS SIMLOGON FUNCTION & FREE RPL - GO BACK TO VTAM\n*\n         B     FREERPL                 FREE RPL - GO BACK TO VTAM\n         TITLE '* * * * *  N E T S O L  -  SIMLOGON FUNCTION'\nSIMLOGON L     R3,RPLUSFLD             -> TTE\n         MVI   TERMFLG2,TPASSED        MARK TERM NOT ON NETSOL\n         MVC   TERMAPPL,APPLID         REMEMBER APPL FROM CLSDST(PASS)\n         LA    PTRNIB,NIBSTART         GET ADDRESS OF NIB\n         MVC   NIBSTART(NIBLNIB),FRESHNIB CLEAR NIB            EFP\n         ST    R3,NIBUSER              SAVE IN THE USER FIELD\n         MVC   NIBSYM(8),TERMNAME      TERMINAL NAME TO NIB\n         SPACE 1\n         OI    MFLAGS,SMLOGON           INDICATE SIMLOGON\n         OI    MACFLAGS,SIMLGON\n         SIMLOGON RPL=(PTRRPL),                                        X\n               NIB=NIBSTART,                                           X\n               OPTCD=(Q,NRELRQ),                                       X\n               EXIT=SIMEND\n         NI    MFLAGS,255-(SMLOGON)\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR SIMLOGON                                         *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    SIMLOGON                YES. REISSUE\n         LTR   R15,R15                 SIMLOGON ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '* * * * *  N E T S O L  -  SIMLOGON END EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CHECK VALIDITY OF THE SIMLOGON                               *\n*        ENTRY IS FROM THE SIMLOGON USUALLY INVOKED BY THE            *\n*        CLSDST(PASS) EXIT.                                           *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nSIMEND   DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,SMLOGON          TELL ERREXIT THAT ERROR\n*                                       IS FOR SIMLOGON\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(SMLOGON)     RESET ERROR EXIT INFO\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR SIMLOGON                                         *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    00    TERMINAL UNAVAILABLE                 14  00           *\n*   10    03    VTAM IS HALTING                      14  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    13    CID INVALID                          14  00           *\n*   10    4B    INVALID LOGON                        0C  02           *\n*   14    53    TERMINAL NOT FOUND                   SNOCCUR          *\n*   14    54    INVALID TERMINAL NAME                14  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX14               HIGHEST VALID ACTION\n*======> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB6(R15)            CHECK VALID ACTIONS\nERRTAB6  B     R0CHK6               0  CHECK IF TERM ACCEPTED\n         BAL   R7,SNOCCUR           4\n         B     FREERPL              8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         B     FREERPL              C  CAN'T SEND MSG IF NOT CONNECTED\n*                                      CONNECTED\n         B     SIMLOGON            10  REISSUE. CHECK FOR RESET\n         B     FREERPL             14  CAN'T CONNECT DEVICE\n         SPACE 1\nR0CHK6   DS    0H\n         CH    R0,HEX9                 TERM UNAVAILABLE\n         BE    FREERPL                 RETURN IF SO\n         CH    R0,HEX8                 X'0008' THAT WE SHOULD NOT GET ?\n         BE    FREERPL                 YES, IGNORE IT FOR NOW\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n*======> BNZ   SNOCCUR                 ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     FREERPL                 FREE RPL GO BACK TO VTAM\n         TITLE '* * * * *  N E T S O L  -  SEND MESSAGES ROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*          BRANCH TO DEVICE DEPENDENT SEND ROUTINE TO WRITE           *\n*          A MESSAGE TO THE LOGICAL UNIT.                             *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         SPACE 3\nSENDMSG  DS    0H\n         L     R3,RPLUSFLD             -> TTE\n         L     R9,TERMDDT              -> DDT FOR TERMINAL\n         L     R15,DDTSEND             -> SEND ROUTINE FOR TERMINAL\n         BR    R15                     GO SEND MESSAGE\n         TITLE '* * * * *  N E T S O L  -  SEND ROUTINE FOR 3270'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*          S32SEND EDITS AND SENDS NETSOL MESSAGES TO 3270 DEVICES.   *\n*                                                                     *\n*          ALL MESSAGES SENT ARE ASYNCHRONOUS USING THE RPL PASSED    *\n*          IN R5.                                                     *\n*                                                                     *\n*               ON ENTRY:                                             *\n*                  REG. 0 CONTAINS MESSAGE NUMBER                     *\n*                  REG. 3 POINTS TO TTE OF ACTIVE TERMINAL            *\n*                  REG. 5 POINTS TO RPL BEING USED                    *\n*                  REG. 9 POINTS TO DDT FOR TERMINAL                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nS32SEND  DS    0H\n         CLM   R0,1,=AL1(MSG06)        LOGON MESSAGE ?\n         BNE   S32MSG1                 NO, THEN DON'T SEND MSG WITH EB\n         OI    TERMFLAG,LOGPROC        SINCE SENDING MSG IS LOGON\n         OI    RPLRH3,RPLEB            SEND WITH END BRACKET ON\n*                                      AS 3276 MAY GET UPSET ON CLSDST\n         B     S32MSG2                 SKIP CHECK FOR EB SEND\n         SPACE 1\nS32MSG1  TM    TERMFLAG,SENDSCED   IS THERE A SEND (POST=SCHED) DC18203\n*                                   ALREADY ISSUED FOR THIS LU  DC18203\n       BO    MISSSEND              IF SO DO NOT ISSUE A NEW ONE DC18203\n       NI    TERMFLAG,255-(LOGPROC) INDICAT NOT IN LOGON FUNCTION\n         TM    RPLRH3,RPLEB            END BRACKET DUE TO MSG 6 ?\n         BNO   S32MSG2                 NO, OKAY STILL IN BRACKET\n         NI    RPLRH3,X'FF'-RPLEB      CLEAR END BRACKET STATE\n*        CLI   TERMDFT,X'80'           CHECK DFT MODE TERMINAL\n*        BE    RETURN                  NO BEGIN BRACKET FOR DFT TERMS.\n         OI    RPLRH3,RPLBB            3276 MIGHT LIKE TO KNOW\n         SPACE 1\nS32MSG2  DS    0H\n         STC   R0,MSGINDEX             SAVE MESSAGE INDEX\n         TM    FLAGS,FIRSTSND          IS THIS FIRST SEND AFTER OPNDST\n         BZ    S32MSGOK\n         NI    FLAGS,255-(FIRSTSND)    NEXT SEND ALLOWED\n*        CLI   TERMDFT,X'80'           CHECK DFT MODE TERMINAL\n*        BE    RETURN                  NO SEND ON FIRST OPEN DEST,\n*                                      IF LU TYPE 2 ( 3290, 3790, DFT )\n         OI    RPLRH3,RPLBB            SWITCH ON BB TERMINAL INDICATOR\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        FIND OUTPUT MESSAGE AND LENGTH                               *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nS32MSGOK DS    0H\n*        ADD TEST FOR CPIC MSG12 AND REPLACE WITH MSG04\n         CLC   TERMNAME(8),=C'Y0ACA01 '\n         BE    SENDCPIC\n         CLC   TERMNAME(8),=C'Y0AEA01 '\n         BE    SENDCPIC\n         CLC   TERMNAME(8),=C'Y0A5A01 '\n         BE    SENDCPIC\n         CLC   TERMNAME(8),=C'Z0B8A01 '\n         BE    SENDCPIC\n         B     NOTCPIC                 NO SO CONTINUE\n*        CHANGE MESSAGE\nSENDCPIC MVI   MSGINDEX,X'04'                   CHANGE TO MSG04\n         L     R1,=A(S32M4NOD)         KLUDGE TO GET ADDRBILITY\n         MVC   0(8,R1),TERMNAME        ADD NODE NAME\nNOTCPIC  SR    R1,R1                   CLEAR OUT REG\n         IC    R1,MSGINDEX             GET THE INDEX\n         LA    R2,X'FF'-X'80'          TURN OFF POSSIBLE RESET\n         NR    R1,R2                    INDICATOR PRIOR TO INDEXING\n         BCTR  R1,0                    INDEX - 1\n         SLL   R1,2                    4 * (INDEX - 1)\n*                                      = DISPLACEMENT OF MESSAGE\n         L     R2,DDTMSGTB(R1)         POINT TO MSG. ENTRY IN TABLE\n         LH    R1,0(R2)                GET MESSAGE LENGTH\n         S     R1,=F'2'                REDUCE BY LENGTH FIELD AT FRONT\n         LA    R2,2(R2)                POINT TO ACTUAL MSG.\n         LA    R6,IOAREA               POINT TO OUTPUT AREA\n         LR    R7,R2                   POINT TO MESSAGE AREA\n         AH    R7,DDTMSGOF               WHERE DATA IS TO BE MOVED\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        REGISTER 1 CONTAINS MESSAGE LENGTH                           *\n*        REGISTER 2 POINTS TO MESSAGE                                 *\n*        REGISTER 6 POINTS TO OUTPUT AREA                             *\n*        REGISTER 7 POINTS TO MESSAGE AREA FOR VARIABLE DATA          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        EDIT MESSAGE 01                                              *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         CLI   MSGINDEX,X'01'          IS THIS MESSAGE 01?\n         BNE   S32CKM4                 NO SO CARRY ON\n         LA    R8,NIBSTART             YES => POINT AT NIB\n         MVC   0(8,R7),NIBLMODE               ADD LOGMODE ENTRY TO MSG\n         B     S32CONT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        EDIT MESSAGE 04                                              *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nS32CKM4  DS    0H\n         CLI   MSGINDEX,X'04'          IS THIS MESSAGE 04?\n         BNE   S32CKM7                 NO SO CARRY ON\n         STM   R0,R1,TIMESAVE         SAVE REGS\n         TIME  DEC\n         STM   R0,R1,TIMEWORK        TIME STASHED AS HHMMSSTH DDYYY\n         L     R1,=A(S32M4TIM)       -> THE TIME FIELD\n         MVC   0(L'EDITMASK,R1),EDITMASK  SET UP THE EDIT MASK\n         OI    TIMEWORK+2,X'0F'      SET UP THE SIGN\n         ED    0(7,R1),TIMEWORK\n         MVI   3(R1),C':'            SET SEPARATOR\n         MVI   6(R1),C' '            BLANK OUT THE SECONDS DIGIT\n         ED    8(7,R1),TIMEWORK+5    DO IT TO THE DATE\n         LM    R0,R1,TIMESAVE        RESTORE REG\n         B     S32CONT                 AND GO SEND IT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        EDIT MESSAGE 07                                              *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nS32CKM7  DS    0H\n         CLI   MSGINDEX,X'07'          IS THIS MESSAGE 07?\n         BNE   S32CKM8                 NO SO CARRY ON\n         MVC   0(8,R7),=CL8' '         BLANK OUT USER DATA FIELD\n         LR    R0,R1                   SAVE CONTENTS OF R1\n         SR    R1,R1                   LOAD LENGTH\n         IC    R1,DATASEQL              OF USER DATA\n         CH    R1,=AL2(8)              IF LENGTH\n         BNH   *+8                      GREATER THAN 8\n         LA    R1,8                      THEN SET TO 8\n         BCTR  R1,0                    DECREMENT FOR MVC\n         EX    R1,S32MVAPP             MOVE APPLICATION ID TO MSG.\n         LR    R1,R0                   RESTORE R1\n         B     S32CONT                 SKIP FURTHER EDITS\nS32MVAPP MVC   0(0,R7),DATASEQ         * * EXECUTED * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        EDIT MESSAGE 8,9,10,11                                       *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nS32CKM8  DS    0H\n         CLI   MSGINDEX,X'08'          IS MSG # LESS THAN 8?\n         BL    S32CONT                 YES => BYPASS FURTHER CHECKING\n         CLI   MSGINDEX,X'0B'          IS MSG # GREATER THAN 11?\n         BH    S32CKM12                YES => CONTINUE MESSAGE CHECKING\n         MVC   0(8,R7),APPLID          MOVE APPLID TO MESSAGE\n         B     S32CONT                 SKIP FURTHER EDITS\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        EDIT MESSAGE 12                                              *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nS32CKM12 CLI   MSGINDEX,X'0C'          IS IT MSG12?\n         BNE   S32CONT                 NO\n         BAL   R14,TIMETERM            FIND WHERE TO DO IT\n         SPACE 1\n*        ALL MENUS WRITTEN FOR LOGABAX TERMINALS ARE TO\n*        TRACKED BY WRITING A MESSAGE TO SYSLOG.\n         SPACE 1\n         C     R9,=AL4(DDT3767)        IF THIS IS A LOGABAX TERMINAL\n         B     S32CONT                   BYPASS LOG MSG     **LRE**\n         MVC   LOGMENU+17(8),TERMNAME    YES => ADD NODE NAME TO MSG\n         MVC   LOGMENU+44(6),=CL6'LOGON'        ASSUME FROM LOGON EXIT\n         TM    EXITFLAG,LOGONEX                 IF FROM LOGON EXIT\n         BO    *+10                               YES=> BYPASS\n         MVC   LOGMENU+44(6),=CL6'RESEND'         NO => MARK AS RESEND\n         STM   R0,R1,RPLERRSA                   SAVE REGS\n         WTO   MF=(E,LOGMENU)                   WRITE MSG TO LOG\n         LM    R0,R1,RPLERRSA                   RESTORE REGS\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MOVE MESSAGE TO OUTPUT AREA                                  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nS32CONT  DS    0H\n         LR    R3,R1                   LOAD MESSAGE LENGTH TO ODD REG\n         LR    R7,R1                   LOAD MESSAGE LENGTH TO ODD REG\n         MVCL  R6,R2                   MOVE MESSAGE TO OUTPUT BUFFER\n         L     R3,RPLUSFLD             RESTORE TTE POINTER\n         LA    R1,IOAREA               CALCULATE\n         SR    R6,R1                     THE MESSAGE LENGTH\n         ST    R6,SENDLEN              SAVE LENGTH OF SEND\n         SPACE 1\nSEND     OI    MFLAGS,SENDING          TELL ERREXIT ASY. SEND\n         OI    MACFLAGS,SENDASY\n         L     R2,SENDLEN              LENGTH TO SEND TO TERM\n         L     R4,CID                  TERMINAL ADDRESS\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CHECK TO SEE IF SEND IS FOR MESSAGE 6 (LOGON IN PROGRESS)    *\n*        AND IF SO, SEND REQUESTING A POSITIVE RESPONSE SO THAT THE   *\n*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *\n*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CLI   MSGINDEX,X'06'          LOGON IN PROGRESS MSG ?\n         BE    S32SEND6                YES, DO ELSEWHERE\n         OI    TERMFLAG,SENDSCED    INDICATE A SEND TO BE ISSUEDDC18203\n         SPACE 1\n*        TM    TERMDFT,X'80'      SEE IF A DFT TYPE TERMINAL\n*        BNO   SENDNBB            IF NOT,  SEND GO SEND EX RESPONDS\n         TM    RPLRH3,RPLBB       SEE IF A BEGIN BRACKET NEEDED\n         BZ    SENDNBB            IF NOT,  SEND GO SEND EX RESPONDS\n         CLC   TERMDDT,=A(DDT3767)     IS THIS 3767?               TAMU\n         BNE   BB3270                  NO                          TAMU\n         LA    R2,S37SIZNL        LOAD LENGTH TO SEND\n         LA    R7,S37NULL         ADDR OF AREA\n         B     SENDBB\nBB3270   DS    0H\n         LA    R2,S32SIZNL        LOAD LENGTH TO SEND\n         LA    R7,S327NULL        ADDR OF AREA\nSENDBB   DS    0H\n         SEND  STYPE=REQ,CONTROL=DATA,AREA=(R7),RECLEN=(R2),           X\n               EXIT=SENDEND,RPL=(PTRRPL),POST=SCHED,                   X\n               CHNGDIR=(NCMD,NREQ),ARG=(R4),                           X\n               OPTCD=(ASY,CA),RESPOND=(NEX,FME,RRN)\n         SPACE 1\n         B     S32CHKSD                HANDLE LIKE REST OF SENDS\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        FULLSCREEN MESSAGE OF BLANK FOR 3275/3277/3278               *\n*        ADDED 3-17-86   W.A.M.                                       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nS327NULL DS    0H\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (RESETKBD,MDT)     SET WCC CODE\n         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER\n         $SF   (SKIP)\n         DC    CL1' '             SCREEN OF A SINGLE BLANK\nS32SIZNL EQU   *-S327NULL         LENGTH OF BLANK MESSAGE\n         SPACE\nS37NULL  DS    0H\n         DC    X'15'              3767 NL\nS37SIZNL EQU   *-S37NULL          LENGTH OF BLANK MESSAGE\n         SPACE 3\nSENDNBB  DS    0H                 SEND WITHOUT A BEGIN BRACKET\n         SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         X\n               EXIT=SENDEND,RPL=(PTRRPL),POST=SCHED,                   X\n               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X\n               OPTCD=(ASY,CA),RESPOND=(EX,FME,NRRN)\n         SPACE 1\n         B     S32CHKSD                HANDLE LIKE REST OF SENDS\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        SEND MESSAGE 6 REQUESTING A POSITIVE RESPONSE SO THAT THE    *\n*        CLSDST(PASS) DOESN'T DELETE IT (WILL IF DONE WHEN STILL IN   *\n*        THE BUFFER AT THE TIME CLSDST IS ISSUED).                    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nS32SEND6 SEND  STYPE=REQ,CONTROL=DATA,AREA=IOAREA,RECLEN=(R2),         X\n               EXIT=SENDEND,RPL=(PTRRPL),POST=RESP,                    X\n               CHNGDIR=(CMD,NREQ),ARG=(R4),                            X\n               OPTCD=(ASY,CA),RESPOND=(NEX,FME,NRRN)\nS32CHKSD NI    MFLAGS,255-(SENDING)\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    SEND                    YES. REISSUE\n         LTR   R15,R15                 WRITE ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND CHK)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         B     RETURN                  RETURN TO VTAM\n         SPACE 3\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  SEND EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*         SENDEND IS ENTERED WHEN THE EXIT HAS BEEN SCHEDULED         *\n*         FOR THE SEND DONE ABOVE.                                    *\n*                                                                     *\n*         REGISTER 1 POINTS TO THE ASYNCH RPL BEING USED              *\n*         REGISTER 15 =A(SENDEND)                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nSENDEND  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN RPL\n         L     R3,RPLUSFLD                                      DC18203\n         NI    TERMFLAG,X'FF'-SENDSCED INDICATE SEND COMPLETE   DC18203\n         OI    MFLAGS,SENDING          TELL ERREXIT THAT ERROR\n*                                      ARE FOR SEND\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                      IS ENTERED IF ERRORS HAVE\n*                                      OCCURRED\n         NI    MFLAGS,255-(SENDING)\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                    ACTION           *\n*  RTNCD FDBK2                                       CODE(S)          *\n*  CODE  CODE         MEANING                        RETURNED         *\n*                                                   (R15  R0)         *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                 00  00          *\n*   04    04    EXCP. INCOMMING MESSAGE                               *\n*               REC  RESP HANDLES 0404 FOR 'SEND POST=SCHED'          *\n*               SEND EXIT HANDLES 0404 FOR 'SEND POST=RESP'           *\n*                                                                     *\n*             SSENSEI/SSENSMI                                         *\n*                80     XX        PATH ERRORS         14  00          *\n*                80     05        NO SESSION COND.    08  04          *\n*                40     XX        RH   ERRORS         SNOCCUR         *\n*                20     XX        STATE ERRORS        08  04          *\n*                10     XX        REQUEST ERRORS      SNOCCUR         *\n*                08     00        BRACKET ERROR       18  00          *\n*                08     01        REQUEST REJECT      08  00          *\n*                08     02        INTV REQ            14  00          *\n*                08     13        BRACKET ERROR       18  00          *\n*                08     2B        PRES. SPACE INT. LO 18  00          *\n*                08     2D        SLU BUSY            14  00          *\n*                                                                     *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE       10  00          *\n*   0C    01    LU NOT AVAILABLE (POWERED OFF)        08  00          *\n*   0C    02    REQUEST CANCELLED TEST REQ (LOSTTERM) 14  00          *\n*   0C    07    CONNECTION RECOVERY        (LOSTTERM) 14  00          *\n*   0C    08    LU RESTARTED               (LOSTTERM) 14  00          *\n*   0C    0B    REQUEST CANCELLED BY CLSDST           14  00          *\n*   0C    0C    REQUEST CANCELLED BY CLEAR            08  04          *\n*   10    03    QUICK HALT (TPEND)                    SNOCCUR         *\n*   10    05    PERMANENT CHANNEL OR LINK FAILURE     08  00          *\n*   10    07    VARY DEACTIVATE IMMEDIATE  (LOSTTERM) 14  00          *\n*   10    09    TERMINATE SELF OR LOGOFF   (LOSTTERM) 14  00          *\n*   10    0A    ACF/VTAM ERROR                        SNOCCUR         *\n*   10    0D    ACF/VTAM INACTIVE FOR ACB             SNOCCUR         *\n*   10    0E    ABEND FOR PROGRAMS TCB                SNOCCUR         *\n*   10    0F    BUFFERS FULL               (LOSTTERM) 14  00          *\n*   10    10    TERMINATE SELF RECEIVED               08  04          *\n*   14    12    CLSDST IN PROGRESS                    14  00          *\n*   14    13    CID INVALID                           14  00          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         OI    EXITFLAG,SENDEX         INDICATE WRITE EXIT\n         CH    R15,HEX18               HIGHEST VALID ACTION\n*======> BH    SNOCCUR                  CODE IS X'20'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTABB(R15)            CHECK VALID ACTION\nERRTABB  B     ROCHKB               0  CHECK IF WRITE WENT\n         BAL   R7,SNOCCUR           4\n         B     RELOPNA              8  CHECK IF WE WANT TO REOPEN\n         BAL   R7,SNOCCUR           C\n         B     WHATSEND            10  FIND OUT WHAT KIND OF SEND\n         B     FREERPL             14  LOST DEVICE\n         B     RESENDM             18  RESEND MSG\n         SPACE 1\nRELOPNA  LTR   R0,R0                   OPNDST AFTER CLSDST ?\n         BZ    RELEASE                 NO SO JUST GO CLSDST\n         OI    FLAGS,RELOPND           INDICATE WE WANT RE-OPEN\n         B     RELEASE                 CLSDST FIRST\n         SPACE 1\nWHATSEND TM    FLAGS,LUSTATE           LUSTAT SEND ?\n         BO    SENDLU\n         B     SEND                    NO, NORMAL SEND, CONTINUE IT\n         SPACE 1\nRESENDM  DS    0H                      RESEND MESSAGE\n         NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB TERMINAL MIGHT\n*                                      HAVE STARTED FIRST\n         IC    R0,MSGINDEX             RETRIEVE SAVED MSG #\n         B     SENDMSG\n         SPACE 1\nROCHKB   DS    0H\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n*======> BNZ   SNOCCUR                 NO ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n*ISSSEND NI    FLAGS,255-(LOOPONCE)     TURN OFF RETRY INDIC\nMISSSEND TM    FLAGS,LUSTATE           CONTINUE LUSTAT PROC ?\n         BO    CONTLU\n         TM    FLAGS,CLEARSCR          CLEAR OF SCREEN FROM RECEND?\n         BO    CONTPASS\n         B     FREERPL                 WAIT FOR ACITIVITY FROM LU\n         SPACE 3\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  RELREQ EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    THIS EXIT ROUTINE IS SCHEDULED WHEN AN APPLICATION ISSUES        *\n*    OPNDST (ACQUIRE) FOR A TERMINAL CURRENTLY OWNED BY NETSOL.       *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *\n*         FOLLOWING;                                                  *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - ADDRESS OF SYMBOLIC NAME OF TERMINAL          *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nRELREQ   DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RRFAIL                  YES => WRITE REL REQ FAILED MSG\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        NOW SCAN THE TERMINAL TABLE ENTRIES TO SEE IF WE CAN FIND A  *\n*        MATCH ON THE TERMINAL NAME (ERROR IF DON'T). WHEN FOUND,     *\n*        SEE IF A LOGON IS IN PROGRESS (VIA LOGPROC FLAG). IF THIS IS *\n*        THE CASE, WE WON'T RELEASE THE TERMINAL, OTHERWISE RELEASE   *\n*        TO THE APPLICATION REQUESTING IT.                            *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LM    R3,R5,TERMTABS          SET UP FOR THE BXLE THRU TABLE\n         CR    R3,R5                   NULL TABLE ?\n*======> BH    SNOCCUR                 YES, ERROR IF SO\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         L     R6,4(,R1)               ADDRESS OF RELREQ NAME OF TERM\n         SPACE 1\nFINDNAME CLC   0(8,R6),TERMNAME        MATCH ON THE NAME\n         BE    FNDNAME                 YES, FOUND ITS TTE\n         BXLE  R3,R4,FINDNAME          CONTINUE\n         BAL   R7,SNOCCUR              ERROR, SHOULD NEVER GET HERE\n         SPACE 1\nFNDNAME  TM    TERMFLAG,LOGPROC        LOGON ? YES, DON'T FREE TERMINAL\n         BO    RRFAIL                  YES => WRITE REL REQ FAILED MSG\n         SPACE 1\n         OI    EXITFLAG,RELREQEX       INDICATE IN RELREQ EXIT\n         BAL   R14,GETRPL              GET AN RPL\n         LA    R13,RPLSAVE             R13 -> SAVE IN THE RPL\n         ST    R3,RPLUSFLD             SAVE ADDRESS OF TTE IN THE RPL\n         ST    R5,TERMCRPL             SAVE ADDRESS OF RPL IN THE TTE\n         LA    PTRNIB,SYNCHNIB\n         MVC   NIBSYM(8),TERMNAME      PLACE SYMBOLIC TERMINAL\n*                                      SET INDICATOR TO\n         OI    FLAGS,RELOPND           RELEASE THE DEVICE AND\n*                                      TRY TO REOPEN IT\n         MVC   CID,TERMCID             GET CID INTO ASYNCH RPL\n         SPACE 1\n         MVC   RELRQMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG\n         WTO   MF=(E,RELRQMSG)         INFORM WORLD OF REQUEST\n         SPACE 1\n         B     RELEASE                 GO DO THE RELEASE\n         SPACE 1\nRRFAIL   MVC   RELFLMSG+17(8),TERMNAME NAME FROM THE TTE TO MSG\n         WTO   MF=(E,RELFLMSG)         INFORM WORLD OF REQUEST FAILURE\n         SPACE 1\n         B     RETURN                  REFUSE RELEASE REQUEST\n         SPACE 3\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  LOSTERM EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*   THIS EXIT ROUTINE IS SCHEDULED BY VTAM WHEN :                     *\n*                                                                     *\n*                * WHEN CONTACT WITH AN LU IS LOST                    *\n*                * WHEN A LU REQUESTED A LOGOFF                       *\n*                * WHEN CERTAIN ERRORS DETECTED IN TRANSMISSION       *\n*                * WHEN A LU IS TEMPORARILY UNAVAILABLE               *\n*                                                                     *\n*        ON ENTRY:                                                    *\n*                                                                     *\n*    REGISTER 1 POINTS AT A PARAMETER LIST CONTAINING THE             *\n*            FOLLOWING;                                               *\n*              WORD 0 - ACB ADDRESS.                                  *\n*              WORD 1 - CID OF LOST TERMINAL                          *\n*              WORD 2 - USER FIELD FROM NIB                           *\n*              WORD 3 - REASON CODE, AS FOLLOWS:                      *\n*                                                                     *\n*  0 - DIAL-LINE DISCONNECT (DIAL-IN)            RELEASE (CLSDST)     *\n*  4 - DIAL-LINE DISCONNECT (DIAL-OUT)           RELEASE (CLSDST)     *\n*  8 - RESERVED                                                       *\n*  C - CONTACT WITH LU PERMANENTLY LOST          PROBDEV (CLSDST)     *\n* 10 - LU SUCCESSFULLY RECONTACTED               RELEASE              *\n* 14 - UNCONDITIONAL TERMINATE COMMAND           RELEASE (CLSDST)     *\n*    -       \"       CHARACTER CODED LOGOFF         \"        \"        *\n*    -       \"       TERMSESS                       \"        \"        *\n* 18 - CONTACT WITH LU LOST                      RETURN TO VTAM       *\n* 1C - RESERVED                                                       *\n* 20 - CONDITIONAL TERMINATE SELF                RELEASE              *\n*    -     \"       CHARACTER CODED LOGOFF           \"                 *\n*    -     \"       TERMSESS                         \"                 *\n* 24 - BUFFER LIMIT DEFINED FOR LU EXCEEDED         \"                 *\n* 28 - TEST REQUEST SET                             \"                 *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS                              *\n*                                                                     *\n*    REGISTER 15 CONTAINS ENTRY ADDRESS                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nLOSTERM  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO    RETURN\n         SPACE 1\n         LR    R7,R1                   SAVE ACROSS GETRPL\n         BAL   R14,GETRPL              GET AN RPL FOR WORK\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         MVC   RPLUSFLD(4),8(R7)       COPY TTE ADDRESS TO RPL\n         OI    EXITFLAG,LOSTEX         INDICATE IN LOSTERM EXIT\n         MVC   CID,4(R7)               SAVE CID IN RPL/WORKQREA\n* LRE    MVC   PACKWORK(1),15(R7)      COPY LOSTERM CODE TO WORK AREA\n* LRE    UNPK  PACKWORK+2(3),PACKWORK(2) UNPACK TO PRINT\n* LRE    MVC   LOSTMSG+31(2),PACKWORK+2  TO MSG AREA\n* LRE    TR    LOSTMSG+31(2),TRTAB     MAKE IT PRINTABLE\n         L     R3,RPLUSFLD             GET TTE POINTER\n         ST    R5,TERMCRPL             SAVE A(RPL) IN TTE\n* LRE    MVC   LOSTMSG+43(8),TERMNAME  TERMINAL LU NAME\n* LRE    WTO   MF=(E,LOSTMSG)          ISSUE ERROR MSG.\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        NOW CHECK TO MAKE SURE THAT THE NIB USER FIELD IS CORRECT.   *\n*        WOULD NOT BE IF OPNDST DONE WITH WRONG NIBUSER VALUE.        *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CLC   CID,TERMCID             CHECK THAT CID'S ARE CORRECT\n         BE    LOSTCODE                YES SO GO CHECK CODE     DC18203\n         CLC   TERMCID,=F'0'           IS IT ZERO (THIS HAPPENS DC18203\n*                                      WHEN AN OPNDST FAILS FOR DC18203\n*                                      FIRST LOGON PRIOR TO     DC18203\n*                                      LOSTERM SCHEDULED )      DC18203\n*======> BNE   SNOCCUR                 BAD NEWS IF NOT !!!!!!!\n         BNE   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\nLOSTCODE L     R4,12(R7)               GET LOSTERM ENTRY CODE\n         CH    R4,HEX8                 IS IT 0,4 OR 8 ?\n         BNH   RELEASE                 YES SO JUST CLSDST DEVICE\n         CH    R4,HEXC                 IS IT 12 ?\n         BE    PROBDEV                 YES SO WTO AND CLSDST\n         CH    R4,HEX10                IS IT X'10' ?\n         BE    RELEASE                 YES SO LETS RELEASE\n         CH    R4,HEX14                IS IT X'14' ?\n         BE    PROBDEV                 YES SO WTO AND CLSDST\n         CH    R4,HEX20                IS IT GREATER THAN X'20' ?\n         BNL   RELEASE                 YES SO LETS RELEASE\n         B     FREERPL                 X'18' CODE (24), IGNORE, WAIT\n*                                       FOR REENTRY WITH X'0C' OR X'10'\n         SPACE 1\nREAQUIRE OI    FLAGS,RELOPND           INDICATE TO RELEASE\n         B     RELEASE\n         SPACE 3\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  RELEASE TERMINAL SUBRTN'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        RELEASE THE TERMINAL, AND PERHAPS RE-ACQUIRE IT.             *\n*                                                                     *\n*        THERE ARE THREE ENTRY POINTS TO THIS ROUTINE.                *\n*                                                                     *\n*        'LOGOFF' IS USED WHEN THE USER ISSUES A LOGOFF COMMAND TO    *\n*        NETSOL. THE TERMINAL IS RELEASED.                            *\n*                                                                     *\n*        'QSESSION' IS USED WHEN A CLSDST(PASS) FAILS BECAUSE A QUEUED*\n*        SESSION REQUEST IS OUTSTANDING FOR THIS TERMINAL FROM THE    *\n*        REQUESTED APPLICATION. THE TERMINAL IS RELEASED AND THEN     *\n*        A SIMLOGON IS NOT ISSUED TO REACQUIRE THE TERMINAL WHEN IT   *\n*        IS RELEASED BY THE APPLICATION.                              *\n*                                                                     *\n*        'PROBDEV' WILL WTO AND RELEASE THE DEVICE BECAUSE OF AN I/O  *\n*        PROBLEM.                                                     *\n*                                                                     *\n*        'RELEASE' WILL RELEASE THE DEVICE AND, IF THERE IS A TEST    *\n*        REQUEST SET, 'RELEASE' WILL REACQUIRE THE DEVICE.            *\n*                                                                     *\n*        REGISTER 5 (PTRRPL) WILL POINT TO AN RPL.                    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nLOGOFCMD OI    FLAGS,LOGOFF            INDICATE CLSDST TO RELEASE THE\n*                                      TERMINAL.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nQSESSION OI    FLAGS,LOGOFF            INDICATE CLSDST THEN NO SIMLOGON\n*                                      THE CLSDST RELEASE MUST BE DONE\n*                                      SINCE THE CLSDST PASS FAILED.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nPROBDEV  OI    FLAGS,BADEVICE          TURN ON  FLAG FOR WTO.\n         B     RELCODE                 GOTO RELEASE CODE\n         SPACE 1\nBADLU    MVC   LISTWTO8+17(8),TERMNAME ADD TERMNAME TO ERROR MSG\n         WTO   MF=(E,LISTWTO8)         WRITE ERROR MSG\n         MVC   CID,TERMCID             MOVE CID INTO RPL FOR LATER USE\n         B     RELCODE                 GO TO RELEASE CODE\n         SPACE 1\nRELEASE  TM    FLAGS,RELOPND           IS RELEASE A PRELUDE TO\n         BO    CLOSEREL                 REOPEN?\n*                                      NO. SIMPLY RELEASE IT\n*                                      YES. MUST SAVE SYMBOLIC\n*                                       NAME FOR LATER REOPEN\n*                                      NOTE: THIS CAN OCCUR\n*                                       FOR READ(ANY)/CHECK\n*                                       ERROR HANDLING.\nRELCODE  L     R3,RPLUSFLD             -> TTE FROM RPL\n         SPACE 1\n*        TM    FLAGS,BADEVICE  82018   IS WTO BIT ON ?   COMMENT OUT\n         B     CLOSEREL        82018   BYPASS WTO\n         NI    FLAGS,255-(BADEVICE)    YES WTO BIT ON THEN\n*                                       TURN WTO FLAG OFF.\n         MVC   LISTWTO+17(8),TERMNAME  MOVE DEVICE NAME INTO\n*                                      THE MESSAGE AREA OF\n*                                      THE LIST FORM OF WTO.\n         WTO   MF=(E,LISTWTO)          EXECUTE FORM OF WTO\n         SPACE 1\nCLOSEREL OI    MACFLAGS,CLSREL         INDICATE DOING CLOSE(REL\n         OI    MFLAGS,CLSDST\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CLSDST RELEASE WILL BE DONE FOR THE TERMINAL BY SPECIFYING   *\n*        THE TERMINAL NAME IN THE NIB. THE NIB IS USED BECAUSE THE    *\n*        CLSDST(RELEASE) CAN BE DONE FROM THE LOGON EXIT BEFORE A     *\n*        SESSION HAS BEEN ESTABLISHED. IN THIS CASE, THE CID WOULD BE *\n*        REJECTED BY VTAM IF USED IN THE CLSDST(RELEASE).             *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         MVC   NIBSTART(NIBLNIB),FRESHNIB INITIALIZE NIB\n         LA    PTRNIB,NIBSTART         -> NIB\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,NIBUSER              SAVE A(TTE) IN NIB\n         MVC   NIBSYM(8),TERMNAME      MOVE TERMINAL NAME TO NIB\n         CLSDST RPL=(PTRRPL),                                          X\n               EXIT=CDSTEND1,                                          X\n               OPTCD=RELEASE,                                          X\n               NIB=NIBSTART\n         SPACE 1\n         NI    MFLAGS,255-(CLSDST)     INDICATE CLOSE DONE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    CLOSEREL                YES. REISSUE\n         LTR   R15,R15                 CLSDST ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '* * * * *  N E T S O L  -  CLSDST(RELEASE) END EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CHECK VALIDITY OF THE CLSDST(RELEASE)                        *\n*        ENTRY IS FROM THE CLSDST(RELEASE) IN THE RELEASE RTN.        *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nCDSTEND1 DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,CLSDST           TELL ERREXIT THAT ERROR\n*                                       IS FOR CLSDST(RELEASE)\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(CLSDST)\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR CLSDST(RELEASE)                                  *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   0C    0B    REQUEST CANCELLED BY CLSDST          14  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    52    NIB INVALID                          SNOCCUR          *\n*   14    60    INVALID LU NAME                      14  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         OI    EXITFLAG,CLOSEX         INDICATE IN CLOSE REL EX\n         CH    R15,HEX14               HIGHEST POSSIBLE ACTION\n*======> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB9(R15)            CHECK VALID ACTIONS\nERRTAB9  B     R0CHK9               0  PROBABLY RELEASED IT\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  ALREADY RELEASING, NEW\n*                                       RELEASE WON'T HELP\n         BAL   R7,SNOCCUR           C  NO MSG TO WRITE AND\n*                                       PROBABLY COULDN'T\n*                                       ANYWAY\n         B     CLOSEREL            10  REISSUE.\n         B     FREERPL             14  IT COULD BE THAT NETSOL\n*                                       NO LONGER HAS THE\n*                                       DEVICE SINCE IT WAS\n*                                       ALREADY FREED BY A LOSTERM,\n*                                       RELREQ OR READEND\n*                                       REQUEST.\n         SPACE 1\nR0CHK9   DS    0H\n         LTR   R0,R0                   VALID COMPLETION?\n*======> BNZ   SNOCCUR                 ERROR IF NOT\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  AFTER RELEASING THE TERMINAL, IT IS NOT NECESSARY TO               *\n*  RE-ACQUIRE IT, OR AT LEAST ATTEMPT TO RE-ACQUIRE IT, FOR THE       *\n*  FOLLOWING REASONS:                                                 *\n*                                                                     *\n*    THE OTHER APPLICATION MAY CANCEL ITS REQUEST FOR THE             *\n*    TERMINAL AFTER NETSOL'S RELREQ EXIT HAS ISSUED THE               *\n*    CLSDST(RELEASE), BUT BEFORE LOGGING ONTO THE TERMINAL.           *\n*    IN THIS CASE NETSOL WISHES TO RE-ACQUIRE THE TERMINAL.           *\n*    THE TERMINAL WILL ONLY BE ACQUIRED BY NETSOL IF THE              *\n*    OTHER APPLICATION HAS NOT ALREADY LOGGED ON THE TERMINAL.        *\n*                                                                     *\n*    THE TERMINAL MAY HAVE BEEN RELEASED BECAUSE IT WAS LOGGED        *\n*    ON TO NETSOL WHEN THE TEST REQUEST KEY WAS SET.  THIS            *\n*    BLOCKS ALL FURTHER I/O TO THE DEVICE, INCLUDING ENTRY OF         *\n*    A LOGON SEQUENCE NECESSARY TO PASS THE DEVICE TO TOLTEP.         *\n*    NETSOL MUST RELEASE, THEN RE-ACQUIRE THE DEVICE SO THAT          *\n*    I/O IS NO LONGER BLOCKED.                                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         L     R3,RPLUSFLD             -> TTE FOR THE NAME\n         MVI   TERMFLG2,TREL           MARK TERM RELEASED\n*\n*        UNCOND BRANCH TO FREERPL TO BYPASS OPNDST ACQUIRE\n*\n         B     FREERPL                 TO FREERPL\n         TM    FLAGS,LOGOFF            LOGOFF COMMAND ISSUED?\n         BO    FREERPL                  YES => FINISHED\n         TM    FLAGS,SIMLOG            NOW DO SIMLOGON?\n         BO    SIMLOGON                 YES => BR TO SIMLOGON CODE\n         TM    FLAGS,RELOPND           RELEASE DEVICE ONLY ?\n         BZ    FREERPL\n         NI    FLAGS,255-(RELOPND)\n         LA    PTRNIB,NIBSTART         POINT TO THE NIB\n         L     R3,RPLUSFLD             -> TTE FOR THE NAME\n         MVC   NIBSYM(8),TERMNAME      GET THE SYMBOLIC NAME\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*  MUST USE NIB WITH SYMBOLIC TERMINAL NAME BECAUSE THE CID IS        *\n*  NO LONGER VALID AFTER DEVICE IS RELEASED.  OPNDST(SPEC)            *\n*  MUST HAVE A SYMBOLIC TERMINAL NAME SUPPLIED.                       *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nREOPEN   DS    0H                      USE THIS LABEL FOR ERREXIT\n         L     R3,RPLUSFLD             -> TTE\n         ST    R3,NIBUSER              -> TTE IN NIB FOR FUTURE RPL'S\n         OI    MACFLAGS,OPNDACQ        SET OPNDST ISSUED\n         OI    MFLAGS,OPNDSPEC         SET OPNDST IS CURRENTLY ACTIVE\n         OPNDST RPL=(PTRRPL),                                          X\n               OPTCD=(SPEC,ACQUIRE),                                   X\n               EXIT=OPNAQRX,                                           X\n               NIB=NIBSTART\n         NI    MFLAGS,255-(OPNDSPEC)   OPNDST(SPEC) COMPLETED\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    REOPEN                  YES. REISSUE\n         LTR   R15,R15                 OPNDST ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RETURN                  GO BACK TO VTAM AND\n*                                      WAIT FOR EXIT TO BE SCHEDULED\n         TITLE '* * * * *  N E T S O L  -  OPNDST (SPEC,ACQUIRE) EXIT'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CHECK VALIDITY OF THE OPNDST                                 *\n*        ENTRY IS FROM THE OPNDST IN THE CLSDST END EXIT.             *\n*                                                                     *\n*        REGISTER 1 - POINTS TO THE RPL USED.                         *\n*        REGISTER 15 - BASE REGISTER                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nOPNAQRX  DS    0H\n         DROP  R10,R11,R12             DROP BASE REGS\n         USING *,R15                   ESTABLISH INITIAL ADDRESS\n         L     R12,=A(START)           R12 IS BASE REGISTER\n         DROP  R15\n         USING START,R12,R11,R10       TELL ASSEM\n         LM    R10,R11,RESTBASE        SET BASE REGS\n         ST    R14,RETVTAM@            SAVE EXIT RETURN ADDRESS\n         TM    UFLAGS,SHUTDOWN         SHUTDOWN IN PROGRESS?\n         BO     RETURN\n         LR    PTRRPL,R1               POINT TO THE INPUT RPL\n         LA    R13,RPLSAVE             R13 -> SAVE AREA IN THE RPL\n         OI    MFLAGS,OPNDSPEC         TELL ERREXIT THAT ERROR\n*                                       IS FOR OPNDST\n         CHECK RPL=(PTRRPL)            CHECK FOR ERROR, ERREXIT\n*                                       IS ENTERED IF ERRORS HAVE\n*                                       OCCURRED\n         NI    MFLAGS,255-(OPNDSPEC)    RESET ERROR EXIT INFO\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR OPNDST(SPEC,ACQUIRE)                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*   10    00    DEVICE UNAVAILABLE                   14  00           *\n*   10    03    VTAM IS HALTING                      SNOCCUR          *\n*   10    05    PERMENENT FAILURE IN PATH            08  00           *\n*   10    06    AUTO NETWORK SHUTDOWN                08  00           *\n*   10    0A    APPARENT VTAM ERROR                  SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    12    CLSDST IN PROGRESS                   14  00           *\n*   14    53    NODE UNKNOWN TO VTAM                 14  00           *\n*   14    55    NO OPNDST AUTHORIZATION              SNOCCUR          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         OI    EXITFLG2,OPNACQX        INDICATE OPNDST EXIT ENTERED\n         CH    R15,HEX14               HIGHEST VALID ACTION\n*======> BH    SNOCCUR                  CODE IS X'14'\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     ERRTAB7(R15)            CHECK VALID ACTIONS\nERRTAB7  B     R0CHK7               0  CHECK IF DEVICE ACCEPTED\n         BAL   R7,SNOCCUR           4\n         BAL   R7,SNOCCUR           8  CAN'T RELEASE IF CAN'T\n*                                       GET IT\n         BAL   R7,SNOCCUR           C  CAN'T WRITE MSG IF NOT\n*                                      CONNECTED\n         B     REOPEN              10  REISSUE. NO NEED TO\n*                                       CHECK FOR RESET\n         B     FREERPL             14  A NORMAL CASE.  FAILED\n*                                       TO RECONNECT DEVICE.\n         SPACE 1\nR0CHK7   DS    0H\n         CH    R0,HEX8                 TERMINAL RECONNECTED?\n         BE    FREERPL                 NO. THIS IS WHAT IS\n*                                       WANTED.  CONTINUE\n*                                       WITH OTHER DEVICES.\n         LTR   R0,R0                   SUCCESSFUL COMPLETION?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         L     R3,RPLUSFLD             -> TTE\n         MVI   TERMFLG2,TOPEN             MARK TERM ON NETSOL\n         OI    FLAGS,FIRSTSND\n         B     RESEND\n         TITLE '* * * * *  N E T S O L  -  RESEND ROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        RESEND (REISSUE A SEND)                                      *\n*                                                                     *\n*   THIS ROUTINE IS USER BY THE SENDEND EXIT , RECEND EXIT ,          *\n*   RELEASE EXIT TO REISSUE THE 'GOOD MORNING ' MESSAGE               *\n*   AFTER RECEIVING A BAD LOGON OR RECOVERING AN LU                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nRESEND   DS    0H\n         LA    R0,MSG12                LOGON MESSAGE\n         NI    RPLRH3,X'FF'-RPLBB      SWITCH OFF BB TERMINAL MIGHT\n*                                      HAVE STARTED FIRST\n         B     SENDMSG\n*        A SUBROUTINE TO PUT NODE AND TIME IN MESSAGE 12\n*        RETURNS TO R14\nTIMETERM DS    0H\n         STM   R0,R1,TIMESAVE         SAVE REGS\n         L     R1,DDTTERM             -> TERM FIELD IN MSG12\n         MVC   0(8,R1),TERMNAME      INSERT THE NAME\n*        PLACE IN MSG12\n         TIME  DEC\n         STM   R0,R1,TIMEWORK        TIME STASHED AS HHMMSSTH DDYYY\n         L     R1,DDTTIME            -> THE TIME FIELD\n         MVC   0(L'EDITMASK,R1),EDITMASK  SET UP THE EDIT MASK\n         OI    TIMEWORK+2,X'0F'      SET UP THE SIGN\n         ED    0(7,R1),TIMEWORK\n         MVI   3(R1),C':'            SET SEPARATOR\n         MVI   6(R1),C' '            BLANK OUT THE SECONDS DIGIT\n         ED    8(7,R1),TIMEWORK+5    DO IT TO THE DATE\n         L     R1,DDTTMDL            -> MODEL FIELD IN MSG 12\n         LTR   R1,R1                 IF =0 THEN EXIT\n         BZ    TIMEEXIT\n         MVC   0(1,R1),TERMMODL      MOVE IN MODEL NUMBER\nTIMEEXIT DC    0H'0'\n         LM    R0,R1,TIMESAVE        RESTORE REG\n         BR    R14\nTIMEWORK DC    F'0'\nTIMESAVE DC    2F'0'\nEDITMASK DC    X'4020214B212121404021204B212121' TIMESTAMP EDIT\n         TITLE '* * * * *  N E T S O L  -  GET AN RPL SUBROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        THE GETRPL SUBROUTINE GETS A NEW RPL VIA A GETMAIN MACRO     *\n*        FOR 'LNGTHRPL' IN SUBPOOL 1. IT THEN INITIALIZES IT AND      *\n*        RETURNS TO THE CALLER WITH THE RPL ADDRESS IN R5.            *\n*                                                                     *\n*        INPUT REGISTERS:                                             *\n*                                                                     *\n*              REG 10-12 - BASE REGISTERS                             *\n*              REG 14    - CALLER'S RETURN ADDRESS                    *\n*                                                                     *\n*        OUTPUT REGISTERS:                                            *\n*                                                                     *\n*              REG 0-1 - UNPREDICTABLE                                *\n*              REG 5   - ADDRESS OF AN INITIALIZED RPL/NIB/WORKAREA   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nGETRPL   DS    0H\n*        L     R0,LNGTHRPL             LENGTH OF RPL + SUBPOOL     TAMU\n         L     R1,=A(LNGTHRPL)         ADDR OF RPL LENGTH          TAMU\n         L     R0,0(,R1)               LENGTH OF RPL + SUBPOOL     TAMU\n         GETMAIN R,LV=(0)              G E T M A I N    R P L\n         MVC   0(8,R1),=CL8'DYNAMRPL'  IDENTIFY THE RPL AS DYNAMIC\n         LA    PTRRPL,8(,R1)           R5 -> R P L\n         MVC   IFGRPL(LNIFGRPL),FRESHRPL  COPY RPL TO GOTTEN ONE\n*                                      NOTE: THIS MAKES RPL ASYNCH\n         MVC   NIBDMPID(8),=CL8'DYNAMNIB' SET NIB DUMP ID\n         MVC   NIBSTART(NIBLNIB),FRESHNIB INITITIALIZE NIB\n         XC    WORKSPAC(WORKRPLA),WORKSPAC ZERO OUT KEY WORK AREA STUFF\n         STM   R0,R1,TIMESAVE          SAVE WORK REGS\n         TIME  DEC                      SAVE TIMESTAMP\n         STM   R0,R1,GRPLTIME            IN RPL WORKAREA\n         LM    R0,R1,TIMESAVE             RESTORE WORK REGS\n         BR    R14                     RETURN TO CALLER\n         TITLE '* * * * *  N E T S O L  -  FREE RPL SUBROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        FREERPL IS ENTERED WHEN AN RPL/WORKAREA IS NOLONGER          *\n*        NEEDED BY THE EXIT ROUTINES.  IT ISSUES A FREEMAIN           *\n*        MACRO FOR THE RPL ADDRESS IN REGISTER 5.                     *\n*        IF THE FIRST 8 CHARACTERS OF THE WORKAREA ARE NOT 'DYNAMRPL' *\n*        THEN THIS SUBROUTINE BRANCHES TO INDICATE A USER 0008 ABEND. *\n*                                                                     *\n*        AT EXIT FROM FREERPL, CONTROL IS RETURNED TO VTAM.           *\n*                                                                     *\n*        INPUT REGISTERS                                              *\n*          R5  - POINTS TO RPL/WORKAREA TO BE FREED                   *\n*          R10-R12 - BASE REGISTERS                                   *\n*          R13 - ADDRESS OF REGISTER SAVE AREA                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nFREERPL  DS    0H\n         L     R3,RPLUSFLD             -> TTE\n         LTR   R3,R3                   IF NOT ZERO\n         BZ    *+10                      THEN\n         XC    TERMCRPL,TERMCRPL              RESET A(RPL) IN TTE\n*        L     R0,LNGTHRPL             LENGTH OF RPL TO BE FREED   TAMU\n         L     R1,=A(LNGTHRPL)         ADDR OF RPL LENGTH          TAMU\n         L     R0,0(,R1)               LENGTH OF RPL + SUBPOOL     TAMU\n         S     R5,=F'8'                REDUCE FOR INDENTITY AT FRONT\n         CLC   0(8,R5),=CL8'DYNAMRPL'  IS IT A DYNAMIC RPL ?\n         BNE   TOOSMALL                NO, ISSUE U0008 ABEND\n         SPACE 1\n         FREEMAIN R,LV=(0),A=(5)       F R E E   R P L  -> R5\n         SPACE 1\nRETURN   DS    0H\n         L     R14,RETVTAM@            RESTORE EXIT RETURN ADDRESS\n         BR    R14                     RETURN\n         TITLE '* * * * *  N E T S O L  -  RECEIVE(ANY) SUBROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                   RECEIVE (ANY)                                     *\n*                                                                     *\n*        THIS SUBROUTINE IS ENTERED ONLY WHEN A REC (ANY) IS TO       *\n*        BE ISSUED.                                                   *\n*                                                                     *\n*        INPUT REGISTERS:                                             *\n*                                                                     *\n*              REG 5     - POINTS TO AN ASYNCHRONOUS RPL PLUS         *\n*                          ITS WORKAREA                               *\n*              REG 14    - CALLER'S RETURN ADDRESS                    *\n*                                                                     *\n*         OUTPUT REGISTERS:                                           *\n*                                                                     *\n*               REG 0-1   - UNPREDICTABLE                             *\n*               REG 2-14  - VALUE AT INPUT                            *\n*               REG 15    - UNPREDICTABLE                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nRECSUB   DS    0H\n         ST    R14,SUBSAV14            SAVE RETURN ADDR\nRECANY   OI    MFLAGS,RECA             INDICATE READ(ANY) IN PROGRESS\n         RECEIVE RPL=(PTRRPL),OPTCD=(ASY,ANY,TRUNC,Q),                 X\n               AREA=IOAREA,AREALEN=L'IOAREA,EXIT=RECEND,               X\n               RTYPE=(DFSYN,RESP,NDFASY)\n         NI    MFLAGS,255-(RECA)\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR RECEIVE(ANY):                                    *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    RECANY                  YES. REISSUE\n         LTR   R15,R15                 READ-ANY ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND TEST)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 1\n         L     R14,SUBSAV14            RESTORE THE RETURN ADDR\n         BR    R14                     RETURN TO CALLER\n         SPACE 3\n         LTORG\n         TITLE '* * * * * N E T S O L  -  LUSTAT ROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*       ROUTINE TO HANDLE LOGICAL UNIT STATUS RECEIVED                *\n*                                                                     *\n*    SSENEEI  SSENSMI                                                 *\n*      00        02       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *\n*      00        02          SNOCCUR                                  *\n*      08        1C       DEVICE NOW AVAILABLE  SEND +VE RESPONSE     *\n*      08        2B         \"     \"     \"        \"    \"    \"  (RESEND)*\n*      08        31       DEVICE POWERED OFF     \"    \"    \"          *\n*      08        01          SNOCCUR                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nLUSTATUS DS    0H\n         OI    FLAGS,LUSTATE           SEND +VE RESPONSE\n         OI    MFLAGS,LUSEND\n         MVC   SENSE(2),RPLSSEI   SAVE SSENSEI + SSENSMI\n         MVC   USENSE(2),RPLUSNSI SAVE USSESEI(2 BYTES)\n         NI    RPLOPT12,FF-RPLFMHDR CLEAR FM HDR BIT\n         SPACE 1\nSENDLU   EQU   *\n         SEND  STYPE=RESP,CONTROL=LUS,RESPOND=(NEX,FME,NRRN),          *\n               RPL=(PTRRPL),POST=SCHED,OPTCD=(ASY,CA),EXIT=SENDEND\n         NI    MFLAGS,255-(LUSEND)     SEND DONE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  ERROR ACTIONS FOR SEND                                             *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      10  00           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CH    R15,HEX10               VTAM BUFFERS FULL?\n*                                       (ONLY POSSIBLE ERROR)\n         BE    SENDLU                  YES. REISSUE\n         LTR   R15,R15                 WRITE ACCEPTED?\n*======> BNZ   SNOCCUR                 NO. IMPOSSIBLE\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LTR   R0,R0                   ACCEPTED? (2ND CHK)?\n*======> BNZ   SNOCCUR                 NO. ERROR\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B    RETURN                   RETURN TO VTAM\n         SPACE 1\nCONTLU   NI    FLAGS,255-(LUSTATE)     LUSTAT SEND DONE\n         CLC   SENSE,LUS0001           IS DEVICE NOW AVAILABLE\n         BE    RESEND                  YES SO SEND LOGON MSG.\n         CLC   SENSE,LUS082B           IS DEVICE NOW AVAILABLE\n         BE    RESEND\n         CLC   SENSE,LUS0831           HAS DEVICE BEEN POWERED OFF?\n         BE    LOGOFCMD                YES SO RELEASE TERM.  VTAM WILL\n*                                      SCHEDULE A LOGON WHEN DEVICE\n*                                      COMES AVAILABLE (3274 ONLY)\n         B     FREERPL\n         TITLE '* * * * *  N E T S O L  -  ERROR EXIT RTN'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    THIS ROUTINE IS ENTERED IF AN ERROR IS DETECTED.                 *\n*                                                                     *\n*        INPUT REGS:                                                  *\n*                                                                     *\n*    REGISTER 0 CONTAINS A RTNCD CODE (4, 8, C, 10, 14, 18)           *\n*                                                                     *\n*    REGISTER 1 POINTS TO THE RPL OF THE REQUEST                      *\n*                                                                     *\n*           THE FDBK2 FIELD OF THIS RPL CONTAINS A REASON             *\n*           CODE WHICH IS A SUBCODE OF THE RTNCD CODE IN              *\n*           REGISTER 0.                                               *\n*                                                                     *\n*    REGISTER 2 - 12 UNMODIFIED BY VTAM                               *\n*                                                                     *\n*    REGISTER 13 POINTS TO THE SAVE AREA IN USE                       *\n*                                                                     *\n*    REGISTER 14 CONTAINS RETURN ADDRESS TO VTAM                      *\n*                                                                     *\n*    REGISTER 15 ERREXIT ROUTINE ADDRESS                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    EXIT FROM ERREXIT IS AS FOLLOWS:                                 *\n*                                                                     *\n*           THRU ERRETURN TO VTAM, WHICH WILL RETURN TO THE           *\n*           MAINLINE OR EXIT ROUTINE NSI.                             *\n*                                                                     *\n*           TO SNOCCUR, WHICH WILL ABNORMALLY TERMINATE               *\n*           NETSOL.                                                   *\n*                                                                     *\n*           TO PROBDEV.                                               *\n*                                                                     *\n*                                                                     *\n*        OUTPUT REGS:                                                 *\n*                                                                     *\n*    REGISTER  1-9  UNPREDICTABLE                                     *\n*                                                                     *\n*    REGISTER 10-12 NETSOL BASE REGISTERS                             *\n*                                                                     *\n*    REGISTER 13    SAVE AREA UPON ENTRY                              *\n*                                                                     *\n*    REGISTER 14    UNPREDICTABLE IF EXIT TO SNOCCUR OR               *\n*                    RETURN.                                          *\n*                   VALUE AT INPUT IF RETURN TO VTAM.                 *\n*                                                                     *\n*    REGISTER 15    THE INPUT RTNCD CODE IF ERREXIT WAS               *\n*                   ENTERED FROM MAINLINE NETSOL.                     *\n*                   AN ACTION CODE IF ENTERED FROM AN EXIT            *\n*                    ROUTINE.                                         *\n*                                                                     *\n*    REGISTER  0    UNPREDICTABLE IF ENTERED FROM MAINLINE            *\n*                    NETSOL.                                          *\n*                   AN ACTION CODE MODIFIER IF ENTERED FROM AN        *\n*                    EXIT ROUTINE.                                    *\n*                                                                     *\n*        NOTE: REGISTERS 0 AND 15 WILL BE RETURNED THRU VTAM          *\n*              TO MAINLINE OR EXIT ROUTINE NSI.                       *\n*    DESCRIPTION OF ACTION CODES AND FLAGS                            *\n*                                                                     *\n*                                                                     *\n*        THE ERREXIT ROUTINE COMMUNICATES TO THE ERROR EXIT NSI       *\n*        VIA AN ACTION CODE SET IN REG 15 AND, IN SOME CASES,         *\n*        AN ACTION CODE MODIFIER SET IN REG 0. IN SOME SPECIAL        *\n*        CASES, FLAGS ARE SET TO PASS INFORMATION TOO.                *\n*                                                                     *\n*        THE ACTION CODES AND MODIFIERS INDICATE APPROPRIATE          *\n*        ACTIONS TO BE TAKEN BY THE EXIT ROUTINE. THE EXIT            *\n*        ROUTINE MAY, HOWEVER, HANDLE THE ERROR ACTION                *\n*        DIFFERENTLY FROM WHAT ERREXIT INDICATES BY ITS ACTION        *\n*        CODE, IF IT SO CHOOSES.                                      *\n*                                                                     *\n*        ACTION CODES AND MODIFIERS ARE AS FOLLOWS:                   *\n*                                                                     *\n*            00 MACRO COMPLETED SUCCESSFULLY                          *\n*               REG 0 MODIFIER=0                                      *\n*                                                                     *\n*            04 THIS IS A SNO (SHOULD NOT OCCUR) WHICH WILL NOT       *\n*               BE SET BY THE ERROR EXIT. IF THIS IS SET AT           *\n*               NSI, THE NETWORK SOLICITOR SHOULD ABNORMALLY          *\n*               TERMINATE.                                            *\n*                                                                     *\n*TORELES     08 BRANCH TO RELEASE                                     *\n*RELONLY        REG 0 MODIFIER=0 CLSDST                               *\n*REL1ST                        4 CLSDST + OPNDST (AQUIRE)             *\n*                                                                     *\n*TOSEND     0C BRANCH TO SENDMSG                                      *\n*               REG 0 MODIFIER=MESSAGE NUMBER                         *\n*                                                                     *\n*REISSU        10     REISSUE THE REQUEST                             *\n*                                                                     *\n*TOENDREQ    14 BRANCH TO FREERPL                                     *\n*                                                                     *\n*TORESEND    18 RESEND                                                *\n*RSETSOL     1C SNOCCUR                                               *\n*                                                                     *\n*TOPROBDV    20 BRANCH TO PROBDEV                                     *\n*                                                                     *\n*    SINCE NETSOL DOES NOT ISSUE ALL API MACROS, NOT ALL              *\n*    RTNCD CODES AND REASON CODES ARE POSSIBLE. THOSE                 *\n*    FDBK3 CODES WHICH CAN OCCUR FOR THE MACROS ISSUED ARE            *\n*    LISTED WITHIN THE SUBSECTIONS OF ERREXIT FOR EACH                *\n*    RTNCD CODE. THIS LIST INCLUDES ANY WHICH MAY BE                  *\n*    IMPOSSIBLE BECAUSE OF CURRENT NETSOL LOGIC.  THOSE WHICH         *\n*    ARE POSSIBLE ARE INDICATED WITH AN '*'.  BASIC ONLY              *\n*    CODES ARE NOT LISTED.                                            *\n*                                                                     *\n*                                                                     *\n*    THE FLAGS SET ARE:                                               *\n*                                                                     *\n*          LOOPONCE - REISSUE I/O COMMAND ONE MORE TIME. IF           *\n*                     THE REISSUED COMMAND IS SUCCESSFUL, THE         *\n*                     FLAG MUST BE TURNED OFF BY THE MAINLINE         *\n*                     OR EXIT ROUTINE. IF UNSUCCESSFUL,               *\n*                     ERREXIT TURNS OFF THE FLAG ON ENTRY TO          *\n*                     HANDLE THE FAILURE.                             *\n*                                                                     *\n*            RELOPND - RELEASE THE DEVICE THEN OPNDST(ACQUIRE)        *\n*                      IT, THUS RE-ESTABLISHING A SESSION FOR         *\n*                      THAT DEVICE.                                   *\n*                                                                     *\n*           SHUTDOWN - NETSOL SHUTDOWN IN PROGRESS. IF THIS           *\n*                      BIT IS ON AT ENTRY TO AN EXIT ROUTINE          *\n*                      OTHER THAN TPEND, NO PROCESSING IS DONE        *\n*                      WITHIN THE ROUTINE. THIS WILL RAPIDLY          *\n*                      FLUSH EXITS REQUESTS ALREADY SCHEDULED         *\n*                      AT THE TIME A NEED FOR SHUTDOWN IS             *\n*                      DETECTED.                                      *\n*                      NOTE: THIS BIT IS ALSO SET BY THE TPEND        *\n*                            EXIT, WHICH HAS BEEN SCHEDULED           *\n*                            PRIOR TO ENTRY TO ERREXIT FOR A          *\n*                            SHUTDOWN CONDITION.                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nERREXIT  DS    0H\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        NO NEED TO ESTABLISH ADDRESSABILITY, SINCE BASE REGISTERS    *\n*        HAVE NOT BEEN MODIFIED.  NOTE THAT ALSO PTRRPL POINTS TO RPL *\n*        USED IN EXIT ROUTINE, ALTHOUGH IT IS NOT NECESSARILY THE RPL *\n*        IN USE WHEN ERREXIT WAS ENTERED, I. E. SYNCHRPL MAY          *\n*        HAVE BEEN IN USE FOR INQUIRE (APPSTAT).                      *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LR    R7,R0                   SAVE RTNCD CODE TO\n*                                       USE AS RETURN CODE IF\n*                                       ENTRY FROM MAINLINE.\n         SPACE 1\n         DROP  R5\n         USING IFGRPL,R1               => R P L\n         SPACE 1\n         LR    R8,R1                   SAVE RPL ADRESS\n         LR    R6,R14                  SAVE RETURN ADDRESS\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        FORMAT THE RPL ERROR FIELDS INTO A READABLE MESSAGE AND      *\n*        WRITE THE MESSAGE TO THE OPERATOR. NOTE THAT SOME ERRORS     *\n*        WILL NOT BE LOGGED TO THE SYSTEM LOG AS THEY ARE CONSIDERED  *\n*        UNIMPORTANT. THE DATA IN ERMDATA IS AVAILABLE FOR            *\n*        DEBUGGING PURPOSES.                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        BYPASS THOSE ERROR COMBINATIONS DEFINED IN 'ERMSGTAB'        *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         STM   R3,R5,RPLERRSA     SAVE WORK REGS DURING TABLE SCAN\n         MVC   ERMDATA(1),RPLREQ  BUILD                  REQ\n         MVC   ERMDATA+1(2),RPLFDBK   ERROR COMPARISON  /RTNCD/FDBK2\n         MVC   ERMDATA+3(4),RPLSSEI     FIELD           /SSEI/SSMI/USER\n         LM    R3,R5,ERMBXLE      LOAD BXLE REGS\n         CR    R3,R5              NULL TABLE?\n         BH    ERMSG              YES => DISPLAY ERROR MSG\n         SPACE 1\nERMLOOP  MVC   ERMTEMP,ERMDATA    COPY COMPARISON FIELD TO WORKAREA\n         NC    ERMTEMP,ERMAND(R3) ZERO IRRELEVANT FIELDS FOR COMPARE\n         CLC   ERMTEMP,ERMCODE(R3) A NON-DISPLAY ERROR?\n         BE    ERMBYPAS             YES => DON'T DISPLAY ERROR MSG\n         BXLE  R3,R4,ERMLOOP        NO  => LOOK AT NEXT TABLE ENTRY\n         SPACE 1\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        FORMAT AND DISPLAY ERROR MESSAGE                             *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nERMSG    UNPK  PACKWORK(3),RPLREQ(2)   UNPACK REQUEST CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+33(2),PACKWORK PUT IN THE MESSAGE\n         UNPK  PACKWORK(3),RPLRTNCD(2) UNPACK RETURN CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+42(2),PACKWORK PUT IT IN THE MESSAGE\n         UNPK  PACKWORK(3),RPLFDB2(2)  UNPACK FEEDBACK 2 CODE\n         TR    PACKWORK(2),TRTAB       MAKE IT PRETTY\n         MVC   ERRORMSG+51(2),PACKWORK PLACE IN MESSAGE\n         UNPK  PACKWORK(9),RPLSSEI(5)  UNPACK SYSTEM SENSE CODES\n         TR    PACKWORK(8),TRTAB       PRETTY IT UP\n         MVC   ERRORMSG+62(2),PACKWORK TO MESSAGE\n         MVC   ERRORMSG+73(2),PACKWORK+2  RPLSSMI CODES TOO\n         MVC   ERRORMSG+82(4),PACKWORK+4  RPLUSNSI CODES ALSO\n         L     R3,RPLUSFLD             -> TTE FOR TERMINAL NAME\n         MVC   ERRORMSG+92(8),TERMNAME TO ERROR MESSAGE AREA\nERMWTO   WTO   MF=(E,ERRORMSG)              WRITE ERROR MSG.\nERMBYPAS LR    R15,R7                  RESTORE R0 RETURN CODE\n         LR    R1,R8                   RESTORE RPL ADDRESS\n         LR    R14,R6                  RESTORE RETURN ADDRESS\n         LM    R3,R5,RPLERRSA          RESTORE WORK REGS\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CHECK IF ERREXIT HAS BEEN ENTERED FROM MAIN LINE OR          *\n*        EXIT ROUTINE . IF ERROR IN MAIN LINE THEN RETURN VIA         *\n*        REGISTER 14, AND UPON RETURN TO MAIN-LINE CODE               *\n*        APPROPRIATE ACTION WILL BE TAKEN.                            *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LR    R3,R14                  SAVE RETURN ADDR\n         L     R8,=A(SETLRPL)          IS REQUEST A                TAMU\n         CR    R1,R8                   SETLOGON?\n         BER   R14                     YES.  IN MAINLINE\n*                                       AND RETURN TO VTAM.\n         CH    R15,HEX18           18  RPL ECB/EXIT PROBLEM?\n*======> BNL   SNOCCUR                 YES. CANNOT VALIDLY\n         BNL   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*                                       OCCUR SINCE SHUTDOWN\n*                                       SWITCH STOPS EXITS'\n*                                       ACTION PRIOR TO THE\n*                                       CLSDSTACB.\n*                                      NOTE. CODES HIGHER\n*                                       THAN 18 DO NOT EXIST\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        UPON ENTRY IF R1 IS NOT EQUAL TO R5 (R1 = A(SYNCHRPL) )      *\n*        THEN R1'S AND R5'S INFORMATION MUST BE COMBINED.             *\n*        THE COMMAND THAT CAUSED THE ERROR WAS                        *\n*        ISSUED USING SYNCHRPL AND R5 IS POINTING TO AN               *\n*        ASYNCH RPL.  FOR THIS RTN WE NEED SOME INFO IN BOTH.         *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         CR    R1,R5                   ARE WE USING ONE RPL\n         BE    ERRPLOK                 YES, BRANCH\n*              MOVE THE NECESSARY INFORMATION FROM THE R5 RPL TO\n*              SYNCHRONOUS RPL (R1). THIS IS THE SWITCHES, SAVE AREAS\n*              ETC. PRIOR TO THE WORK AREAS.\n         MVC   SYNWORK(WORKRPLA),LNIFGRPL(R5)\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        GET THE FDBK2 FIELD FROM THE RPL.                            *\n*        PREPARE TO BRANCH BASED ON 'RTNCD'.                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nERRPLOK  DS    0H\n         SR    R6,R6                   CLEAR REG 6  .\n         IC    R6,RPLFDB2              PICK UP REASON CODE\n         LR    R7,R6                   START TO INITIALIZE R7\n*                                       WHICH WILL BE USED AS\n*                                       AN INDEX FOR BRANCH\n*                                       TABLES\n         SR    R0,R0                   SET UP DEFAULT ACTION CODE\n          SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* TRANSLATE RTNCD CODE AND FDBK2 CODE INTO ACTION CODE                *\n*                                                                     *\n*   RTNCD CODES HAVE A GENERAL MEANING AS FOLLOWS:                    *\n*                                                                     *\n*          04   EXTRAORDINARY COMPLETION                              *\n*                 FUNCTION COMPLETED. ADDITIONAL INFORMATION          *\n*                 AVAILABLE. PROBABLY HANDLED OUT OF LINE.            *\n*                 CONDITION SHOULD BE HANDLED BEFORE MAKING           *\n*                 FURTHER REQUESTS TO THE DEVICE.                     *\n*                                                                     *\n*          08   REISSUE                                               *\n*                 TEMPORARY ENVIRONMENT CONDITION CAUSED              *\n*                 REQUEST TO BE REJECTED.                             *\n*                                                                     *\n*          0C   DAMAGE                                                *\n*                 INTEGRITY OF THE REQUEST OR DEVICE HAS BEEN         *\n*                 DISTURBED.                                          *\n*                                                                     *\n*          10   ENVIRONMENT ERROR                                     *\n*                 REQUEST INCOMPLETE DUE TO ENVIRONMENTAL             *\n*                 CONDITION. ENVIRONMENT MUST BE ALTERED              *\n*                 BEFORE RECOVERY CAN BE ATTEMPTED.                   *\n*                                                                     *\n*          14   USER LOGIC ERROR                                      *\n*                 USER ERROR ON THE REQUEST. REQUEST REJECTED         *\n*                 OR INCOMPLETE. NOT EXECUTABLE IN THE                *\n*                 PRESENT FORM.                                       *\n*                                                                     *\n*          18   RPL NOT AN RPL   OR   RPL IS ALREADY ACTIVE.          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         B     FEEDTAB(R15)            GO TO FEEDBACK CODE\n*                                       HANDLING ROUTINE\nFEEDTAB  BAL   R7,SNOCCUR           0  FEEDBACK OF 00 DOESN'T\n*                                       ENTER LERAD OR SYNAD\n         B     EXTRAORD             4  EXTRAORDINARY COM-\n*                                       PLETION\n         B     REISSUE              8  REISSUE\n         B     DAMAGE               C  DAMAGE\n         B     ENVIRON             10  ENVIRONMENT ERROR\n         B     LOGIC               14  LOGIC ERROR\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  RTNCD CODE 04 - EXTRAORDINARY COMPLETION                           *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)         MEANING                             *\n*                                                                     *\n*    03        *  RECEIVE    /   \"     \"          \"     MESSAGE       *\n*    04        *  RECEIVE    / EXCP CONDITION INCOMMING RESPONSE      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nEXTRAORD DS    0H\n         CH    R6,HEX3                 IS IS VALID FDBK2\n         BE    VALFDBK2                YES SO HANDLE IT\n         CH    R6,HEX4                 IS IT ONLY VALID REASON CODE\n*======> BNE   SNOCCUR                 NO SO FORGET IT\n         BNE   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* BSC DEVICES UNDER VTAM2 RESPOND WITH ZERO SENSE IN SOME CASES\n* TO RECORD MODE MACROS I.E.\n* WHEN USER SENSE INCLUDED THE SSENSEI + SSENSMI FIELDS ARE 0\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nVALFDBK2 IC    R7,SENSE                SAVE SSENSEI FOR BRANCHING\n         LTR   R7,R7                   DO WE HAVE ZERO STATUS?\n         BZ    STAT3270                MUST BE STATUS FROM 3270\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        CONVERT SENSE CODE INTO BRANCH TABLE OFFSET                  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SRL   R7,3                    ASSUME X'04' IS INDEX = 0\n         SR    R6,R6                   ZERO INDEX REG\nCINDEX4  LTR   R7,R7                   INDEX DONE?\n         BZ    BRTAB4                  YES => GO BRANCH\n         SRL   R7,1                    NO  => SHIFT NEXT BIT OUT\n         LA    R6,4(,R6)                      BUMP INDEX BY 4\n         B     CINDEX4                        GET NEXT BIT\nBRTAB4   CH    R6,HEX14                INDEX TOO BIG?\n*======> BH    SNOCCUR YES => SNOCCUR\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         B     RSNTAB4(R6)             GO TO HANDLE SSENSMI\nRSNTAB4  BAL   R7,SNOCCUR        <08 (00)  SHOULD NOT OCCUR\n         B     REQREJ             08 (04)  REQUEST REJECT\n         B     REQERR             10 (08)  REQUEST ERROR\n         B     STATERR            20 (0C)  STATE ERROR\n         B     RHERROR            40 (10)  RH ERROR\n         B     PATHERR            80 (14)  PATH ERROR\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        08 - REQUEST REJECT                                          *\n*                                                                     *\n*     SSENSEI/SSENSMI                                                 *\n*       08      00                  REISSUE SEND (IN BRACKET)         *\n*       08      01                  RELEASE LU                        *\n*       08      02                  IGNORE (CONTINUE)                 *\n*       08      13                  REISSUE SEND (IN BRACKET)         *\n*       08      1B                  IGNORE (WAIT FOR LU TO ENTER DATA)*\n*       08      1C                  IGNORE                  DC18203   *\n*       08      2B                  REISSUE SEND                      *\n*       08      2D                  IGNORE (CONTINUE)                 *\n*       08      31                     \"       \"                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nREQREJ   IC    R7,SENSE+1              GET SSENSMI\n         CH    R7,HEX2                 IS IT POSSIBLE\n         BH    TRYHIGH                 >2 TRY FOR HIGH RANGE\n         LR    R6,R7\n         AR    R7,R7                   PEPARE FOR BRANCH\n         AR    R7,R6                   TABLE INDEXING\n         SLL   R7,2\n         B     RSNTAB5(R7)             HANDLE SSENSMI\n         SPACE 1\nRSNTAB5  LA    R15,TORESEND         0  REISSUE SEND WITH OUT BB\n         B     ERRETURN\n         NOP   0\n         LA    R15,TORELES          1  RELEASE\n         LA    R0,RELONLY              NO OPNDST\n         B     ERRETURN\n         LA    R15,TOENDREQ         2  CONTINUE REQUEST (IGNORE)\n         B     ERRETURN\n         NOP   0\n         SPACE 1\nTRYHIGH  CH    R7,HEX13            13  REISSUE SEND\n         BNE   CHK1BX\n         LA    R15,TORESEND            WITH IN BRACKET CONDITION\n         B     ERRETURN\n         SPACE 1\nCHK1BX   CH    R7,HEX1B                KEY PRESSED ON TERMINAL ?\n         BNE   CHK1CX                                         DC18203\n         LA    R15,TOENDREQ        1B  WE SHOULD IGNORE\n         B     ERRETURN\n         SPACE 1\nCHK1CX   EQU   *                                               DC18203\n         CH    R7,HEX1C                                        DC18203\n         BNE   CHK2BX                                          DC18203\n         LA    R15,TOENDREQ        IC WE SHOULD IGNORE IT      DC18203\n         B     ERRETURN                                        DC18203\n         SPACE 1                                               DC18203\nCHK2BX   CH    R7,HEX2B\n         BNE   CHK2DX\n         LA    R15,TORESEND        2B  WE SHOULD TRY AGAIN\n         B     ERRETURN\n         SPACE 1\nCHK2DX   CH    R7,HEX2D\n         BNE   CHK31X                                           DC18203\n         LA    R15,TOENDREQ        2D  WE SHOULD IGNORE\n         B     ERRETURN\nCHK31X   CH    R7,HEX31            31  DEVICE POWERED OFF       DC18203\n*======> BNE   SNOCCUR                                          DC18203\n*        BNE   *+8           JUMP TO THE BAL\n*        B     *+8           JUMP OVER THE BAL\n*        BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         BNE   SENSERR             INVALID SENSE - RELEASE NODE\n         LA    R15,TOENDREQ            SO IGNORE                DC18203\n         B     ERRETURN                                         DC18203\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        10 - REQUEST ERROR                                           *\n*                                                                     *\n*     SSENSEI/SSENSMI                                                 *\n*       10      03                  RELEASE TERMINAL                  *\n*       10      05                  8775 MOD1 INVALID SBA             *\n*       10      XX                  SHOULD NOT OCCUR - RELEASE NODE   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nREQERR   CLI   SENSE+1,X'03'           FUNCTION NOT SUPPORTED?\n         BE    SENSEI03\n         CLI   SENSE+1,X'05'           INVALID SBA ? (PROB 8775 IN MOD1\n*======> BNE   SNOCCUR                 NO - SNOCCUR\n*        BNE   *+8                          JUMP TO THE BAL\n*        B     *+8                          JUMP OVER THE BAL\n*        BAL   R7,SNOCCUR                   TELL WHERE WE CAME FROM\n         BNE   SENSERR                 NO - RELEASE NODE\n         LA    R0,MSG13                SET MESSAGE NUMBER\n         LA    R15,TOSEND              INDICATE WE WILL SEND A MSG\n         B     ERRETURN\n         SPACE 1\nSENSEI03 STM   R1,R3,RPLERRSA          SAVE REG 1-3\n         L     R3,RPLUSFLD             LOAD A(TTE)\n         MVC   MSG1003+17(8),TERMNAME  MOVE NODE NAME TO MSG\n         LR    R3,R1                   SAVE REG 1 RPLERRSA BASE REG LRE\n         WTO   MF=(E,MSG1003)          WTO ERROR MSG\n         SPACE 1\n         LR    R1,R3                   RSTR REG 1 RPLERRSA BASE REG LRE\n         LM    R1,R3,RPLERRSA          RESTORE REG 1-3\nSENSERR  EQU   *\n         LA    R15,TORELES         03  FUNCTION NOT SUPPORTED\n         LA    R0,RELONLY              RELEASE TERMINAL\n         B     ERRETURN\n         SPACE 1\nSTATERR  LA    R15,TORELES         20  STATE ERROR\n         LA    R0,REL1ST               RELEASE AND REOPEN\n         B     ERRETURN\n         SPACE 1\nRHERROR  B     SENSERR             RELEASE NODE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*          80 - PATH ERRORS                                           *\n*                                                                     *\n*           SSENSEI/SSENSMI                                           *\n*             80      05           NO SESSION CONDITION               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nPATHERR  IC    R7,SENSE+1              GET   SSENSMI\n         CH    R7,HEX5                 IS IT ONE WE CAN HANDLE\n         BE    NOSESS                  YES SO HANDLE IT\n         LA    R15,TOENDREQ            OTHERWISE END THIS REQUEST\n         B     ERRETURN\n         SPACE 1\nNOSESS   DS    0H                      THIS IS A NO SESSION COND.\n*                                       A SESSION FOR SOME REASON HAS\n*                                       NOT BEEN ESTABLISHED BETWEEN\n*                                       THE SENDER AND RECEIVER\n         LA    R15,TORELES              SO LETS CLOSE TO CLEAR\n         LA    R0,REL1ST                AND REOPEN\n         B     ERRETURN\n         SPACE 1\nSTAT3270 DS    0H                      HANDLE 2 BYT OF USER SENSE CODES\n*                                       RETURNED FROM 3270\n         LA    R15,TORELES             ASSUME DEVICE UNUSABLE\n         CLC   USENSE,SNAS0200         WAS SDLC STATUS RETURNED FOR DE\n*                                       WHICH SHOWS POWER ON\n         BE    INTRREQ1                YES CHECK MORE\n         CLC   USENSE,SNAS0010         NO CHECK IF INTV. REQ. (DEVICE\n*                                       POWERED OFF )\n         BNE   ERRETURN                RELEASE DEVICE\n         LA    R15,TOENDREQ            WE SHOULD IGNORE REQUEST AND\n*                                      WAIT FOR TERM TO BE POWERED UP\n         B     ERRETURN                BEFORE WE SEND SCREEN\n         SPACE 1\nINTRREQ1 DS    0H                      DEVICE IS NOW AVAILABLE. JUST\n         LA    R15,TOENDREQ            IGNORE BECAUSE LOSTERM WILL GET\n         B     ERRETURN                SCHEDULLED .\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  RTNCD CODE 08 - REISSUE                                            *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)         MEANING                             *\n*                                                                     *\n*      00      * ALL API MACROS   TEMPORARY STORAGE                   *\n*                (NOT CHECK,       ALLOCATION FAILURE                 *\n*                 OPEN, OR CLOSE)                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nREISSUE  DS    0H\n         LTR   R6,R6                   ONLY VALID REASON CODE\n*                                       IS 0\n*======> BNZ   SNOCCUR             >0  ERROR IF NOT\n         BNZ   *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         LA    R15,REISSU           0  ACTION IS TO REISSUE\n*                                      REG 0 IS ALREADY SET FOR\n*                                       REISSUE ONLY\n         B     ERRETURN                RETURN TO EXIT ROUTINE\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  FEEDBACK CODE 0C - DAMAGE                                          *\n*                                                                     *\n*   REASON CODE   MACROS         MEANING          ACTION              *\n*    00              *           BASIC ONLY          *                *\n*    01          RECEIVE      LU NOT AVAILABLE     RELEASE 08         *\n*                 SEND         \"    \"   \"            \"     08         *\n*    02          REC/SEND     REQUEST CANCELLED    FREERPL 14 00      *\n*                             BY TEST REQUEST                         *\n*    03              *         BASIC ONLY             *               *\n*    04              *         BASIC ONLY             *               *\n*    05              *         BASIC ONLY             *               *\n*    06              *         BASIC ONLY             *               *\n*    07          REC/SEND     CONNECTION RECOVERY  FREERPL 14 00      *\n*                               IN PROGRESS                           *\n*    08          REC/SEND     LU RESTARTED         FREERPL 14 00      *\n*    09          OPNDST       NODE DEACTIVATED     FREERPL 14 00      *\n*    0A          RECEIVE      SNOCCUR                SNOCCUR          *\n*    0B         RE/SEND/CLSDST REQUEST CANCELLED   FREERPL 14 00      *\n*                                BY CLSDST                            *\n*    0C          REC/ SEND     REQUEST CANCELLED   RELEASE 14 04      *\n*                                BY CLEAR                             *\n*    0D          SEND          REQ CANCEL BY EXCP.  SNOCCUR           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nDAMAGE   DS    0H\n         CH    R6,HEXD                 IS REASON CODE WITHIN\n*                                       LIMITS OF POSSIBILITY?\n*======> BH    SNOCCUR             >D  YES, ERROR\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         AR    R7,R7                   MULTIPLY REASON CODE BY\n         AR    R7,R6                   12 FOR BRANCH TABLE\n         SLL   R7,2                    INDEXING\n         B     RSNTABC(R7)             GO TO REASON CODE\n*                                       HANDLING ROUTINE\nRSNTABC  BAL   R7,SNOCCUR          0   BASIC MODE ONLY\n         NOP   0\n         NOP   0\n         LA    R15,TORELES         1   LU NOT AVAILABLE\n         LA    R0,RELONLY              DO NOT REOPEN\n         B     ERRETURN\n         LA    R15,TOENDREQ        2   REQUEST CANCELLED BY TEST REQ.\n         B     ERRETURN\n         NOP   0\n         BAL   R7,SNOCCUR          3   BASIC ONLY\n         NOP   0\n         NOP   0\n         BAL   R7,SNOCCUR          4   BASIC ONLY\n         NOP   0\n         NOP   0\n         BAL   R7,SNOCCUR          5   BASIC ONLY\n         NOP   0\n         NOP   0\n         BAL   R7,SNOCCUR          6   BASIC ONLY\n         NOP   0\n         NOP   0\n         LA    R15,TOENDREQ        7   CONNECTION RECOVERY\n         B     ERRETURN                 IN PROGRESS\n         NOP   0\n         LA    R15,TOENDREQ        8   LU  RESTARTED\n         B     ERRETURN\n         NOP   0\n         LA    R15,TOENDREQ        9   NODE DEACTIVATED\n         B     ERRETURN\n         NOP   0\n         BAL   R7,SNOCCUR          A   SNOCCUR\n         NOP   0\n         NOP   0\n         LA    R15,TOENDREQ        B   REQUEST CANCELLED BY CLSDST\n         B     ERRETURN\n         NOP   0\n         LA    R15,TORELES         C   RELEASE WITH OPNDST\n         LA    R0,REL1ST\n         B     ERRETURN\n         BAL   R7,SNOCCUR          D   SNOCCUT\n         NOP   0\n         NOP   0\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  RTNCD CODE 10 - ENVIRONMENT                                        *\n*                                                                     *\n*   FDBK2 CODE   MACRO(S)      MEANING                  ACTION        *\n*                                                                     *\n*     00        OPNDST/CLSDST  TERM,LU,APPL NOT ACTIVE  CLSDST  0C 08 *\n*                                              (OPNDST) FREERPL 14 00 *\n*     01        OPNDST         OPNDST FAILED           FREERPL  14 00 *\n*                                                                     *\n*     02        CLSDST (PASS)  TARGET APPL. UNACCEPTABLE MSG.   0C 09 *\n*                                                                     *\n*     03        OPNDST/SEND/REC  HALT QUICK                   SNOCCUR *\n*                                                                     *\n*     05         \"      \"     \"   CHANNEL/LINK FAILURE RELEASE  08 00 *\n*                                                                     *\n*     06        OPNDST          ANS                    RELEASE  08 00 *\n*                                                                     *\n*     07        SEND/REC        CANCELLED BY VARY      RELEASE  08 00 *\n*                                                                     *\n*     09         \"    \"         TERMINATE SELF/LOGOFF  FREERPL  14 00 *\n*                                                                     *\n*     0A        ALL MACROS      ACF/VTAM ERROR         RELEASE  08 00 *\n*                                                                     *\n*     0D        ALL MACROS      ACF/VTAM INACTIVE TO ACB       SNOCCUR*\n*                                                                     *\n*     0E        ALL MACROS      TCB ABENDED            FREERPL  14 00 *\n*                                                                     *\n*     0F        SEND/REC        BUFFERS FILLED         FREERPL  14 00 *\n*                                                                     *\n*     10         \"   \"          TERMINATE SELF COMMAND RELEASE  08 04 *\n*                                                                     *\n*     11        OPNDST          SDT FAILED             FREERPL  14 00 *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nENVIRON  DS    0H\n         CH    R6,HEX11                IS RSN COD11VALID SIZE?\n*======> BH    SNOCCUR             >11 NO. ERROR\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*   HANDLE FIRST THREE REASON CODES WITHOUT BRANCH TABLE.             *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         LTR   R6,R6                   CHECK FOR TERMINAL OR\n*                                       APPLICATION NOT\n*                                       AVAILABLE.\n         BNZ   CHKQUIES            \u00ac0  IF NOT, NEXT CHECK\n*\n         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?\n         BO    TERMUNAV\n         LA    R15,TOSEND              NO. APPLICATION UNAVAIL-\n         LA    R0,MSG08                ABLE WRITE ERROR MSG\n         B     ERRETURN\nTERMUNAV DS    0H\n         LA    R15,TOENDREQ            TERMINAL UNAVAILABLE FOR\n         B     ERRETURN                 OPNDST(SPEC) AFTER\n*                                       CLSDST(PASS) BECAUSE\n*                                       CLSDST(PASS) FAILED\n*                                       AND THE NETWORK OPER-\n*                                       ATOR VARRIED OFF THE\n*                                       TERMINAL.\nCHKQUIES DS    0H\n         LA    R15,TORELES             PREPARE ACTION CODE\n         SLL   R7,2                     AND BRANCH TABLE INDEX\n*                                       IN CASE REASON CODE\n*                                       GREATER THAN 2\n         CH    R6,HEX2                 CHECK FOR 1 OR 2\n*\n         BL    TERMUNAV             1  OPNDST FAILED FREERPL\n*\n         BH    RSNTAB10(R7)        >2  GO TO REASON CODE\n*                                       HANDLING ROUTINE\n*\n         LA    R15,TOSEND           2  APPLICATION IS QUIESCING\n         LA    R0,MSG09                 OR NEVER ACCEPTS LOGONS\n*                                       BUT QUIESCE IS MORE\n*                                       LIKELY SINCE 'NEVER\n*                                       ACCEPTS WOULD PROBABLY\n*                                       HAVE BEEN FOUND ON THE\n*                                       INQUIRE.  EITHER CAN\n*                                       HAPPEN IF THE OTHER\n*                                       APPLICATION CHANGES ITS\n*                                       STATUS AFTER NETSOL'S\n*                                       INQUIRE(APPSTAT) BUT\n*                                       PRIOR TO THE LATER\n*                                       CLSDST(PASS).\n         B     ERRETURN                WRITE ERROR MESSAGE\nRSNTAB10 EQU   *-(3*4)                 START TABLE AT R6=3\n*\n         B     QUIKHALT             3  VTAM IS HALTING.\n*                                      NETSOL CAN NO LONGER\n*                                       COMMUNICATE WITH\n*                                       DEVICES. TPEND NOTIFIED\n*\n         BAL   R7,SNOCCUR           4  BASIC MODE ONLY\n         B     ERRETURN             5  PERMANENT PATH FAILURE\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         B     ERRETURN             6  AUTO NETWORK SHUTDOWN\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         B     ERRETURN             7  VARY DEACT. IMMEDIATE\n*                                       LOSTERM WAS SCHEDULED\n*                                      ACTION CODE ALREADY SET\n*                                       UP TO RELEASE DEVICE\n*\n         BAL   R7,SNOCCUR           8  DIAL BASIC MODE ONLY\n         B     IGNORERR             9  TERMINATE SELF OR LOGOFF\n*\n         B     VTAMERR              A  VTAM ERROR FOR DEVICE\n*\n         BAL   R7,SNOCCUR           B  DIAL-OUT ONLY\n*\n         BAL   R7,SNOCCUR           C  DIAL IN BASIC MODE ONLY\n         BAL   R7,SNOCCUR           D  VTAM INACTIVE TO YOUR\n*                                      ACB.  SHOULD NOT OCCUR\n*\n         B     IGNORERR             E  TCB ABENDED\n         B     IGNORERR             F  BUFFERS FILLED\n         B     ERR1010             10  TERMINATE SELF\n         B     IGNORERR            11  SDT FAILED\n*\nQUIKHALT DS    0H\n         LA    R15,TOENDREQ            INDICATE RETURN TO VTAM\n         OI    UFLAGS,SHUTDOWN         TURN ON SHUTDOWN\n         B     ERRETURN\n*\nVTAMERR  DS    0H                      ON 100A RTNCD  JUST\n         LA    R15,TOPROBDV             RELEASE THE TERMINAL.\n         B     ERRETURN\n         SPACE 1\nIGNORERR DS    0H\n         LA    R15,TOENDREQ            END REQUEST\n         B     ERRETURN\n         SPACE 1\nERR1010  DS    0H\n         LA    R15,TORELES\n         LA    R0,REL1ST\n         B     ERRETURN\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  RTNCD CODE 14 - LOGIC\n*                                                                     *\n*   FDBK2 CODE      MACRO(S)     MEANING                    ACTION    *\n*                                                                     *\n*       00        REC/SEND    NON-VTAM REQUEST CDE         SNOCCUR    *\n*                                                                     *\n*       02         \"    \"     EXIT ADDRESS ZERO            SNOCCUR    *\n*                                                                     *\n*       03         \"    \"     ECB ADDRESS ZERO             SNOCCUR    *\n*                                                                     *\n*       04         CHECK      RPL IS NOT ACTIVE            SNOCCUR    *\n*                                                                     *\n*       10         REC/SEND   INVALID ACB                  SNOCCUR    *\n*                                                                     *\n*       11          \"    \"                                            *\n*                                                                     *\n*       12          \"    \"    CLSDST IN PROGRESS (FREERPL)  14 00     *\n*                                                                     *\n*       13      REC/SEND/INT  RPL ARG + NIB CID INVALID     14 00     *\n*                                                                     *\n*       1E      REC/SEND      INVALID DATA ARE OR LENGTH   SNOCCUR    *\n*                                                                     *\n*       23        \"   \"       INVALID MACRO REQUEST TYPE   SNOCCUR    *\n*                                                                     *\n*         3C    SEND (POST=SCHED)   TRIED TO ISSUE 2ND SEND14 00DC18203\n*       3B-47     \"   \"                                    SNOCCUR    *\n*                                                                     *\n*       4A                                                 SNOCCUR    *\n*                                                                     *\n*       4B          \"         INVALID LOGON         (MSG)   0C 07     *\n*                                                                     *\n*       4C       INQUIRE(APPLSTAT) NO APPL NAME     (MSG)   0C 07     *\n*                INQUIRE(SESSPARM) NO QUEUED CINIT(FREERPL) 14 00     *\n*                CLSDST(PASS)      NO CDRSC FOR TERM(MSG)   0C 03     *\n*                                                                     *\n*       4D                                                 SNOCCUR    *\n*                                                                     *\n*       4E-51                                              SNOCCUR    *\n*                                                                     *\n*       52      INVALID NIB                                SNOCCUR    *\n*                                                                     *\n*       53      INQUIRE       INVALID SYM. NAME     (MSG)   0C 06     *\n*               OPNDST(SPEC)  INVALID SYM. NAME   (FREERPL) 14 00     *\n*                                                                     *\n*       54      OPNDST        DEST. UNOPENABLE    (FREERPL) 14 00     *\n*                                                                     *\n*       55      OPNDST(AQUIRE) APPL NOT AUTHORIZED         SNOCCUR    *\n*               CLSDST(PASS)   ????????????????????   (MSG) 0C 05     *\n*                                                                     *\n*       56-5C                                              SNOCCUR    *\n*                                                                     *\n*       5D      CLSDST        DEST, NOT OPENED    (FREERPL) 14 00     *\n*                                                                     *\n*       5E                                                            *\n*                                                                     *\n*       5F      CLSDST        RESOURCE NOT OWNED  (FREERPL) 14 00     *\n*                                                                     *\n*       60      CLSDST           \"      \"  CLOSABL   \"     14 00      *\n*                                                                     *\n*        62     REC/SEND                                   SNOCCUR    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nLOGIC    DS    0H\n         CH    R6,HEX60                 IS REASON CODE WITHIN\n*                                       LIMITS OF POSSIBILITY?\n*                                       X'60' IS HIGHEST VALID\n*                                       VALUE TO BE EXPECTED.\n*======> BH    SNOCCUR            >60  NO. ERROR\n         BH    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         CH    R6,HEX4A                IF REASON CODE AT LEAST\n         BNL   CHK56X            >=4A   X'4A', DO SEPARATELY\n         LA    R15,TOENDREQ            PREPARE ACTION FOR\n*                                       REASON CODES OF 12 & 13\n         CH    R6,HEX12                CLSDST IN PROGRESS?\n         BE    ERRETURN            12  YES, ACTION CODE\n*                                        ALREADY SET\n         CH    R6,HEX13                IS REASON CODE 13?\n         BE    ERRETURN            13  CID INVALID    *GJL-MADE COMMENT\n*                                                      LRE DEL COMMENT\n         BE    *+8                 *GJL-GO TO DUMP\n         B     *+8                 *GJL-OK, GO AROUND\n         BAL   R7,SNOCCUR          *GJL-DUMP\n*                                      PROBABLY ALREADY\n*                                       RELEASED THE TERMINAL.\n*                                       IGNORE.\n         CH    R6,HEX3C             3C  TRY TO ISSUE 2ND SEND   DC18203\n         BE    ERRETURN                 YES SO IGNORE           DC18203\n         BAL   R7,SNOCCUR        16\nCHK56X   DS    0H\n         CH    R6,HEX56                IF REASON CODE MORE THAN\n         BH    CHK5DX             >56   X'56', DO SEPARATELY\n         LA    R15,TOSEND              PREPARE DEFAULT ACTION\n         SLL   R7,3                     AND BRANCH TABLE INDEX\n         B     RSNTAB14(R7)            GO TO REASON CODE\n*                                       HANDLING ROUTINE\nRSNTAB14 EQU   *-(8*(X'4A'))           START TABLE W/ R6=X'4A'\n*\n         BAL   R7,SNOCCUR          4A\n         NOP   0\n*\n         LA    R0,MSG07            4B  UNKNOWN LOGOMODE TABLE ENTRY\n         B     ER144B                  OR UNIDENTIFIED APPLICATION\n*\n         LA    R0,MSG07            4C  INQUIRE(APPSTAT)..NO SYMBOLIC\n         B     TSTINQA                  NAME FOR APPLICATION\n*                                     OR INQUIRE(SESSPARM)..NO QUEUED\n*                                       CINIT\n*                                      ASSUME INQUIRE(APPSTAT)\n*                                       THEN CHECK FOR IT\n*\n         BAL   R7,SNOCCUR          4D\n         NOP   0\n*\n         BAL   R7,SNOCCUR          4E\n         NOP   0\n*\n         BAL   R7,SNOCCUR          4F\n         NOP   0\n*\n         BAL   R7,SNOCCUR          50\n         NOP   0\n*\n         BAL   R7,SNOCCUR          51  APPLICATION NEVER\n         NOP   0                        ACCEPTS LOGONS\n*                                      MEANS NETSOL NEVER\n*                                       ACCEPTS LOGON.\n*\n         BAL   R7,SNOCCUR          52\n         NOP   0\n*\n         LA    R0,MSG07            53  SYMBOLIC (APPL OR TERM)\n         B     TSTINQA                  NAME NOT KNOWN\n*                                      ASSUME INQUIRE(APPSTAT)\n*                                       THEN CHECK FOR IT\n*\n         LA    R15,TOENDREQ                   54\n         B     ERRETURN\n*\n         LA    R0,MSG05            55  APPLICATION NOT AUTHORIZED\n         B     OPNDSPC                  FOR OPNDST(ACQUIRE)\n*                                      OR\n*                                      CLSDST FAILURE.\n*\n         BAL   R7,SNOCCUR          56  CONFLICT BETWEEN MODE\n         NOP   0                        AND DEVICE TYPE.\n*                                      TRIED TO OPNDST FOR\n*                                       A RECORD DEVICE.\n*                                       NETSOL ONLY SUPPORTS\n*                                       BASIC DEVICES.\n*                                      CAN NOT OCCUR IN NETSOL\nCHK5DX   DS    0H\n         CH    R6,HEX5D                CLSDST INVALID (TERMINAL\n*                                       NOT CONNECTED)\n         BNE   CHK5FX             \u00ac5D  NOT X'5D', CHECK FURTHER\n         LA    R15,TOENDREQ        5D  ACTION, RELEASE RPL AND\n         B     ERRETURN                 RETURN TO VTAM\nCHK5FX   DS    0H\n         CH    R6,HEX5F                LESS THAN X'5F' NOT\n*======> BL    SNOCCUR            <5F   VALID\n         BL    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n*\n         LA    R15,TOENDREQ     5F 60  REASON CODES OF 5F\n         B     ERRETURN                 AND 60 ARE POSSIBLE IF\n*                                       A RELREQ OR READEND\n*                                       EXIT IS PROCESSED\n*                                       AFTER THE DEVICE WAS\n*                                       PASSED TO ANOTHER\n*                                       APPLICATION.  THIS CAN\n*                                       HAPPEN BECAUSE THE\n*                                       CLSDST(PASS) WILL NOT\n*                                       PURGE AN ALREADY\n*                                       SCHEDULED EXIT.\nTSTINQA  DS    0H\n         TM    MFLAGS,INQAPPST         INQUIRE(APPSTAT) MEANS THE\n         BO    ERRETURN                 APPLICATION WAS UNKNOWN TO\n*                                       VTAM.\n*                                       => PUT OUT ERROR MESSAGE\n         LA    R0,MSG03                ASSUME CLSDST(PASS)\n         TM    MFLAGS,CLSDST           CLSDST FAILURE MEANS THERE\n         BO    ERRETURN                 IS NO CDRSC FOR THE TERMINAL\n*                                       IN A CROSS-DOMAIN SESSION.\n*                                       => PUT OUT ERROR MESSAGE\n         LA    R15,TOENDREQ            ASSUME INQUIRE(SESSPARM)\n*                                       FAILURE IMPLIES THAT THERE\n         TM    MFLAGS2,INQSESS          IS NO QUEUED CINIT FOR LOGON\n         BO    ERRETURN                 PROCESSING FOR THE TERMINAL.\n*                                       => END THE REQUEST\n         LA    R15,TOENDREQ            ASSUME OPNDST(SPEC)\n         TM    MFLAGS,OPNDSPEC         OPNDST FAILURE MEANS THE\n         BO    ERRETURN                 NODE IS UNKNOWN TO VTAM.\n*                                       POSSIBLY DUE TO MAJOR NODE\n*                                       BEING DEACTIVATED.\n*                                       => END THE REQUEST\n         BAL   R7,SNOCCUR              ANY OTHER CAUSE OF\n*                                       ERROR IS IMPOSSIBLE\nER144B   DS    0H\n         TM    MFLAGS,CLSDST           ERROR ON CLSDST(PASS)\n         BZ    ERRETURN                NO => WRITE UNKNOWN APPL'N\n         LA    R0,MSG01                YES. WRITE THE MESSAGE\n*                                       'XXXXXXXX UNKNOWN LOGOMODE'\n         B     ERRETURN\nOPNDSPC  DS    0H\n         TM    MFLAGS,OPNDSPEC         ERROR ON OPNDST(SPEC)?\n*======> BO    SNOCCUR\n         BO    *+8           JUMP TO THE BAL\n         B     *+8           JUMP OVER THE BAL\n         BAL   R7,SNOCCUR    TELL US WHERE WE CAME FROM\n         TM    MFLAGS,CLSDST           WAS THIS A CLOSE\n         BO    ERRETURN                 CLDST(PASS).  OR\n*                                       APPLICATION CAN'T BE\n*                                       CONNECTED AS REQUESTED\n*                                       IN RELREQ OR READEND.\n*                                       ISSUE ALREADY PREPARED\n*                                       ERROR MESSAGE.\n         BAL   R7,SNOCCUR              NO, ANY OTHER CAUSE\n*                                       IS IMPOSSIBLE\n         TITLE '* * * * *  N E T S O L  -  SCAN FOR LOGON SUBROUTINE'\nERRETURN DS    0H\n         STC   R15,ACTIONS             SAVE ACTION CODES FOR\n         STC   R0,ACTIONS+1             DEBUGGING\n         CR    R1,R5                   DO WE HAVE BOTH A SYNCH\n*                                      RPL AND A ASYNCH RPL\n         BE    ERROUT                  NO, SKIP THE MOVE OF THE\n*                                      RPL WORKAREA\n         MVC   LNIFGRPL(WORKRPLA,R5),SYNWORK RESTORE WORKAREA\n         SPACE 1\n         DROP  R1\n         USING IFGRPL,R5\n         SPACE 1\nERROUT   DS    0H\n         LR    R14,R3                  RESTORE ADDR AND RETURN\n         BR    R14                      VTAM WHICH WILL RETURN\n*                                       TO THE NSI AFTER THE\n*                                       COMMAND WHICH CAUSED\n*                                       ERREXIT TO BE ENTERED.\n         TITLE '* * * * *  N E T S O L  -  EQUATES AND CONSTANTS'\nR0       EQU   0                       MACRO WORK REGISTER, AND\n*                                      CONTAINS REASON CODE UPON\n*                                      ABNORMAL TERMINATION\nR1       EQU   1                       PARAMETER REGISTER,\n*                                      CORRUPTED BY API MACROS\nR2       EQU   2                       WORK REGISTER\nR3       EQU   3                       WORK REGISTER\nR4       EQU   4                       WORK REGISTER\nR5       EQU   5                       POINTER TO CURRENT RPL, IT\n*                                      IS NOT USED FOR ANY OTHER\n*                                      PURPOSE\nPTRRPL   EQU   R5                      AS ABOVE\nR6       EQU   6                       WORK REGISTER\nR7       EQU   7                       WORK REG\nR8       EQU   8                       NIB POINTER\nPTRNIB   EQU   8                        EXCEPT IN STD LOGON.\nR9       EQU   9                       WORK REG\nR10      EQU   10                      THIRD BASE REGISTER\nR11      EQU   11                      SECOND BASE REGISTER\nR12      EQU   12                      FIRST BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN REGISTER\nR15      EQU   15                      RETURN CODE AND EXIT ENTRY PTR\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        FLAGS INDEPENDENT OF A SPECIFIC REQUEST                      *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nUFLAGS   DC    X'00'                   MAIN NETSOL FLAGS\nSHUTDOWN EQU   X'80'                   SHUTDOWN IN PROGRESS\nINIT     EQU   X'40'                   INITIALIZATION IN PROGRESS\nINITERR  EQU   X'20'                   ERROR DURING INITIALIZATION\n         SPACE 1\nDUMPFLAG DC    X'00'                   REASON CODE FOR DUMPING\nOPENCODE EQU   1                       OPEN ACB FAILURE\nSETLCODE EQU   2                       SETLOGON FAILURE\nCBLKCODE EQU   4                       CONTROL BLOCK FAILURE\nTABLTRBL EQU   8                       TROUBLE WITH THE TTE'S\n         SPACE 1\nTRTAB1   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6' HEX->CHAR TR TABLE\nTRTAB    EQU   TRTAB1-X'F0'            USE ONLY LAST 16 OF TRTAB\n         SPACE 1\n         DS    0D\nPACKWORK DS    XL16                    UNPACK WORK AREA\n         SPACE 1\nSYSTEMID DC    X'00'                   SYSTEM ID FOR SOME APPLIDS\n         SPACE 1\n         DC    C'SAVED REGISTERS FOR USER ABENDS HERE'\nSNOREGS  DC    16F'0'                  REGS FOR SNO CONDITIONS\n         SPACE 1\nRETVTAM@ DS    F                       SAVE AREA FOR EXIT RETURN ADDR\n         SPACE 1\nGENSAVE  DS    18F                     SAVE AREA FOR SOME EXIT RTNS\n         SPACE 1\nSUBSAV14 DC    F'0'                    SAVE AREA FOR REG 14\n*                                       USED BY SUBROUTINES\nFINISECB DC    F'0'                    ECB THAT MAIN-LINE CODE WAITS\n*                                      ON, IT IS POST'ED BY TPEND EXIT\nCMDENTRY DS    A                      ADDRESS OF MATCHING CMD      TAMU\n         EJECT\n*              MISCELLANEOUS CONSTANTS AND MASKS.\nSBA      EQU   X'11'                   3270 SET BUFFER @ FIELD\nCLEARKEY EQU   X'6D'                   3270 CLEAR KEY\nENTERKEY EQU   X'7D'                   3270 ENTER KEY\nHEX50    EQU   X'50'                   3270 BUFFER ADDRESS\nHEXD3    EQU   X'D3'                     \"    \"       \"\nHEXD5    EQU   X'D5'                     \"     \"       \"\nCR       EQU   X'0D'                   3767 CARRIAGE RETURN\nFF       EQU   X'FF'                   USED TO TURN OFF SWITCHES\n         SPACE 1\n*              EQUATES FOR ACTION CODES AND MODIFIERS\nTORELES  EQU   8                       BRANCH TO RELEASE\nTOSEND   EQU   X'0C'                   BRANCH TO WRITE\nREISSU   EQU   X'10'                   REISSUE COMMAND\nRELONLY  EQU   0                       RELEASE ONLY DONT REAQUIRE\nREL1ST   EQU   4                       RELEASE AND ACQUIRE\nTOENDREQ EQU   X'14'                   BRANCH TO FREERPL\nTORESEND EQU   X'18'                   TAKE ACTION ACCORDING TO RTN\nTOPROBDV EQU   X'20'                   BRANCH TO PROBDEV\n         EJECT\n*              HEX VALUES FOR FEEDBACK AND RETURN CODE COMPARES\n         SPACE 1\n         DS    0H\nHEX2     DC    XL2'2'\nHEX3     DC    XL2'3'\nHEX4     DC    XL2'4'\nHEX5     DC    XL2'5'\nHEX8     DC    XL2'8'\nHEX9     DC    XL2'9'\nHEXC     DC    XL2'C'\nHEXD     DC    XL2'D'\nHEX10    DC    XL2'10'\nHEX11    DC    XL2'11'\nHEX12    DC    XL2'12'\nHEX13    DC    XL2'13'\nHEX14    DC    XL2'14'\nHEX18    DC    XL2'18'\nHEX1B    DC    XL2'1B'\nHEX1C    DC    XL2'1C'                                      DC18203\nHEX20    DC    XL2'20'\nHEX2B    DC    XL2'2B'\nHEX2D    DC    XL2'2D'\nHEX31    DC    XL2'31'\nHEX3C    DC    XL2'3C'\nHEX4A    DC    XL2'4A'\nHEX56    DC    XL2'56'\nHEX5D    DC    XL2'5D'\nHEX5F    DC    XL2'5F'\nHEX60    DC    XL2'60'\n         EJECT\n*              BISYNCH STATUS ERROR MESSAGE CODES\n         DS    0H\nSNAS0010 DC    XL2'0010'               3270 -- INTERRUPTION\n*                                       REQUIRED BECAUSE DEVICE\n*                                       POWERED OFF.\nSNAS0200 DC    XL2'0200'                3270 -- DEVICE END\n*                                       (ALONE), MEANING THAT\n*                                       THE DEVICE IS POWERED\n*                                       ON AND OK TO USE.\n         SPACE 1\n*              LOGICAL UNIT STATUS FOR 3276/3278/3287/ETC.\n         SPACE 1\nLUS0001  DC    XL2'0001'               DEVICE AVAILABLE\nLUS082B  DC    XL2'082B'               DEVICE AVAILABLE\nLUS0831  DC    XL2'0831'               DEVICE POWERED OFF\n         SPACE 1\n@EXEC2   MVC   0(0,R4),2(R7)\n@EXEC3   MVC   0(0,R4),0(R6)\n         SPACE 3\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  ERROR BYPASS TABLE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS TABLE DEFINES THOSE RPL-BASED MACRO ERRORS WHICH        *\n*        ARE NOT TO BE WRITTEN TO THE OPERATOR'S CONSOLE.             *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OFTHE FOLLOWING FIELDS:            *\n*                                                                     *\n*             ERMCODE - THE ERROR COMBINATION TO BE BYPASSED.         *\n*                       THE FORMAT OF THIS FIELD IS:                  *\n*                     RPLREQ/RPLRTNCD/RPLFDB2/RPLSSEI/RPLSSMI/RPLUSNSI*\n*                       ANY FIELD WHICH DOESN'T MATTER SHOULD BE SET  *\n*                       TO ZERO.                                      *\n*                                                                     *\n*             ERMAND  - THE MASK TO ZERO IRRELEVANT FIELDS IN THE     *\n*                       CONSTRUCTED ERROR COMBINATION FIELD PRIOR     *\n*                       TO COMPARISON WITH ERMCODE. EACH BYTE HERE    *\n*                       HAS A CORRESPONDING BYTE IN ERMCODE AND SHOULD*\n*                       BE SET TO:                                    *\n*                         X'FF' - IF THE FIELD IN ERRCODE IS NON-ZERO.*\n*                         X'00' - IF THE FIELD IN ERRCODE IS ZERO.    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nERMCODE  EQU   0,7                    ERROR COMBINATION TO BE COMPARED\nERMAND   EQU   7,7                    MASK TO ZERO IRRELEVANT FIELDS\nERMSGL   EQU   14                     LENGTH OF A TABLE ENTRY\n         SPACE 2\nERMSGTAB EQU   *                      START OF ERROR MSG TABLE\nERM1CODE DC    XL7'1B144B00000000'      BAD APPLID\nERM1AND  DC    XL7'FFFFFF00000000'        KEYED IN AT TERMINAL\nERMSGEND EQU   *-ERMSGL               LAST ENTRY IN TABLE\n         SPACE 2\nERMBXLE  DC    A(ERMSGTAB)            BXLE (TABLE START)\n         DC    A(ERMSGL)                REGS   (ENTRY LENGTH)\n         DC    A(ERMSGEND)                FOR TABLE SEARCH  (TABLE END)\n         TITLE '* * * * *  N E T S O L  -  NETSOL GETPARM OPTIONS'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS TABLE DEFINES THE OPTIONS WHICH CAN BE SPECIFIED        *\n*        WHEN SEARCHING THE INPUT CMD STRING FOR AN OPTION.           *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *\n*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *\n*                        MULTIPLE LOGON SEQUENCES.                    *\n*                                                                     *\n*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *\n*                        WITH CMDGAPPL                                *\n*                                                                     *\n*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *\n*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *\n*                                                                     *\n*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *\n*                        COMMAND.                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nGPAMECT  EQU   0                      START OF OPTION LIST\nGPLEN    EQU   0,2                    MAX LENGTH OF PARAMETER\nGPTEXTL  EQU   2,2                    LEN OF PARM ERROR TEXT\nGPFLAG   EQU   4,1                    OPTION FLAGS\nGPOPT    EQU   X'80'                  PARAMETER IS OPTIONAL\nGPNULL   EQU   X'00'                  NO OPTIONS FOR THIS PARAMTER\nGPTEXT   EQU   5                      TEXT INSERTED INTO GP ERR MSG\n         SPACE 2\n         PRINT NOGEN\n*\n*        APPLICATION LOGON SEQUENCES\n*\nSLNODE   $GP    8,'NODENAME',GPNULL\nSLAPPL   $GP    8,'LOGON APPLID',GPOPT\n         PRINT NOGEN\n         TITLE '* * * * *  N E T S O L  -  SPECIAL LOGMODE ENTRY TABLE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS TABLE DEFINES THOSE APPLICATIONS WHICH DO NOT USE       *\n*        THE DEFAULT LOGMODE ENTRY FOR THE DEVICE.                    *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             LOGMDAPP - THE APPLID OF THE APPLICATION USING A        *\n*                        DIFFERNENT LOGOMODE TABLE ENTRY.             *\n*                                                                     *\n*             LOGMDENT- THE ASSOCIATED LOGOMODE TABLE ENTRY NAME.     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nLOGMDAPP EQU   0,8                    APPLICATION NAME\nLOGMDENT EQU   8,8                    ASSOCIATED LOGMODE TABLE ENTRY\nLOGMDLEN EQU   16                     LENGTH OF A TABLE ENTRY\n         SPACE 2\nLOGMDTAB EQU   *                             START OF LOGMODE TABLE\n*                 /APPLID  /    /LOGMODE /   FORMAT ENTRY\nLOGMDHCF DC    CL8'SHCF    ',CL8'HCFPX   '   HCF\n*        DC    CL8'TAMCICS ',CL8'M2      '   CICS                  TAMU\n*        DC    CL8'TAMCICST',CL8'M2      '   CICS                  TAMU\n*        DC    CL8'TAMCITRN',CL8'M2      '   CICS                  TAMU\n*        DC    CL8'TAMLIB  ',CL8'M2      '   CICS                  TAMU\n*        DC    CL8'TAMLIBT ',CL8'M2      '   CICS                  TAMU\n*        DC    CL8'TAMNAT  ',CL8'M2      '   CICS                  TAMU\n*        DC    CL8'TAMREG  ',CL8'M2      '   CICS                  TAMU\n*        DC    CL8'TAMSIMS ',CL8'M2      '   CICS                  TAMU\n*        DC    CL8'TEXSRCH ',CL8'M2      '   MEDLINE               TAMU\n*LOGMDNCF DC    CL8'NCCF    ',CL8'DSILGMOD'   NCCF\nLOGMDEND DC    XL8'FFFFFFFFFFFFFFFF'         END OF LOGMODE TABLE\n         TITLE '* * * * *  N E T S O L  -  DEFAULT DATA TABLE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS TABLE DEFINES THOSE APPLICATIONS WHICH NEED DEFAULT     *\n*        DATA PASSED WITH THE CLSDEST PASS.                           *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             DFLTDAPP - THE APPLID OF THE APPLICATION NEEDING        *\n*                        A DEFAULT DATA FIELD                         *\n*                                                                     *\n*             DFLTDSIZ- THE SIZE OF THE DEFAULT DATA FIELDS.          *\n*             DFLTDSTR- THE DEFAULT DATA STRING TO BE PASSED.         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nDFLTDAPP EQU   0,8                    APPLICATION NAME\nDFLTDSIZ EQU   8,1                    ASSOCIATED DEFAULT DATA SIZE\nDFLTDSTR EQU   9,15                   ASSOCIATED DEFAULT DATA\nDFLTDLEN EQU   24                     LENGTH OF A TABLE ENTRY\n         SPACE 2\nDFLTDTAB EQU   *                             START DATA TABLE      TAMU\n*                 /APPLID  /  /SZ/     /DATA/                      TAMU\nDFLTDUTA DC    CL8'INFO    ',X'13',CL15'D TAMUNIX F00'             TAMU\n*        DC    CL8'UNIX    ',X'09',CL15'D TAMUNIX'                 TAMU\n         DC    CL8'UTALIB  ',X'04',CL15'COMC'                      TAMU\nDFLTDEND DC    XL8'FFFFFFFFFFFFFFFF'         END OF DATA TABLE     TAMU\n         TITLE '* * * * *  N E T S O L  -  MESSAGE EQUATES/CONSTANTS'\n*              EQUATES FOR ERROR MESSAGE NUMBERS AND REASON-CODES\nMSG01    EQU   1                       INVALID LOGMODE TABLE ENTRY\nMSG02    EQU   2                       LOGON DATA NOT IN INTRPRET TBLE.\nMSG03    EQU   3                       NO INTRPRET TABLE\nMSG04    EQU   4                       NO ROUTINE TO FIND APPL NAME\nMSG05    EQU   5                       NOT AUTHORIZED FOR APPLICATION\nMSG06    EQU   6                       APPLICATION NOT KNOWN\nMSG07    EQU   7                       APPLICATION DEACTIVATED\nMSG08    EQU   8                       APPLICATION INACTIVE\nMSG09    EQU   9                       APPLICATION QUIESCING\nMSG10    EQU   10                      APPLICATION NEVER ACCEPTS LOGONS\nMSG11    EQU   11                      APPLICATION TEMPORARILY NOT\n*                                      ACCEPTING LOGONS.\nMSG12    EQU   12                      THIS TERMINAL LOGGED ON\n*                                      TO NETWORK SOLICITOR\nMSG13    EQU   13                      8775 WRONG SCREEN SIZE\n         SPACE 2\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        LIST FORMS OF SOME MESSAGES                                  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\nLISTWTO  WTO  'GMU-001 TERM=******** HAS BEEN RELEASED BY NETSOL DUE TOX\n                I/O ERROR',                                            X\n               ROUTCDE=(1,8),DESC=(7),MF=L\n         SPACE 3\nLISTWTO1 WTO  'GMU-002 RC=42 ON NETSOL CLOSE ACB',                     X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLISTWTO6 WTO  'GMU-006 NETSOL IS ALREADY RUNNING. EXECUTION OF THIS PROX\n               GRAM IS TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nERRORMSG WTO  'GMU-003 SYNAD/LERAD EXIT REQ=**,RTNCD=**,FDBK2=**,SSENSEX\n               I=**,SSENSMI=**,SENSE=****,TERM=********',              X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLOSTMSG  WTO  'GMU-004 LOSTERM ENTRY CODE XX FOR TERM=********',       X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nRELRQMSG WTO  'GMU-005 TERM=******** RELEASED DUE TO RELREQ REQUEST',  X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nRELFLMSG WTO  'GMU-007 TERM=******** NOT RELEASED BY RELREQ EXIT',     X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLISTWTO8 WTO  'GMU-008 TERM=******** IS AN UNSUPPORTED TERMINAL TYPE', X\n               ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nLOGMENU  WTO  'GMU-009 TERM=******** MENU WRITTEN FROM ******',        X\n               ROUTCDE=(11),DESC=(7),MF=L\n         SPACE 3\nMSG1003  WTO  'GMU-010 TERM=******** LOGMODE NOT COMPATIBLE WITH TERMINX\n               AL',ROUTCDE=(8),DESC=(7),MF=L\n         SPACE 3\nDCBMSG   WTO  'GMU-011 XXXXXX FILE WILL NOT OPEN. INITIALIZATION BYPASSX\n               ED',ROUTCDE=(1,8),DESC=(7),MF=L\n         SPACE 3\nINITEMSG WTO  'GMU-012 ERROS ON INITIALIZATION FILE. EXECUTION CONTINUEX\n               S',ROUTCDE=(1,8),DESC=(7),MF=L\n         TITLE '* * * * *  N E T S O L  -  A C B'\n         DS    0D\n         DC    CL8'ACB'\n         SPACE 2\nACB      ACB   AM=VTAM,                                                X\n               APPLID=NSNAME,                                          X\n               EXLST=EXLST,                                            X\n               MACRF=LOGON\n         TITLE '* * * * *  N E T S O L  -  A C B   EXIT LIST'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    EXIT ROUTINES TO BE SCHEDULED IN RESPONSE TO VTAM EVENTS         *\n*                                                                     *\n*              * ERREXIT ENTERED FOR ERROR CONDITIONS.                *\n*              * TPEND SCHEDULED WHEN VTAM SHUTS DOWN                 *\n*              * LOGON SCHEDULED WHEN A TERMINAL LOGS ON              *\n*              * LOSTERM SCHEDULED WHEN A TERMINAL IS LOST            *\n*              * RELREQ SCHEDULED WHEN ANOTHER APPLICATION ACQUIRES   *\n*                A TERMINAL CURRENTLY LOGGED ON TO NETSOL.            *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0D\n         DC    CL8'EXITLIST'\n         SPACE 2\nEXLST    EXLST LERAD=ERREXIT,                                          X\n               SYNAD=ERREXIT,                                          X\n               TPEND=TPEND,                                            X\n               RELREQ=RELREQ,                                          X\n               LOGON=LOGON,                                            X\n               LOSTERM=LOSTERM,                                        X\n               AM=VTAM\n         TITLE '* * * * *  N E T S O L  -  ASYNCHRONOUS  N I B'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THE FOLLOWING NIB IS USED TO REFRESH THE NIB IN THE          *\n*        ASYNCHROUS RPL. IT ITSELF IS NOT USED IN ANY MACRO.          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0D\n         DC    CL8'FRESHNIB'\n         SPACE 2\nFRESHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X\n               LISTEND=YES,LOGMODE=0,BNDAREA=0\n         TITLE '* * * * *  N E T S O L  -  ASYNCHRONOUS   R P L'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE ASYNC        *\n*        RPL'S IN THE RPL CSECT.  IT IS NOT ITSELF USED IN ANY        *\n*        MACRO.                                                       *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0D\n         DC    CL8'FRESHRPL'\n         SPACE 2\nFRESHRPL RPL   ACB=ACB,                                                X\n               AM=VTAM,                                                X\n               OPTCD=ASY\n         SPACE 2\n         LTORG\n         TITLE '* * * * *  N E T S O L  -  TERMINAL TABLE DSECT'\nTERMTABL DSECT\nTERMNAME DS    CL8                     TERMINAL LU NAME FROM LOGON\nTERMCID  DS    XL4                     CID GOTTEN AFTER OPNDST\nTERMCRPL DS    AL4                     A(ACTIVE RPL FOR THIS TTE)\nTERMAPPL DS    CL8                     APPLID FOR LAST CLSDST(PASS)\nTERMDAPL DS    CL8                     DEFAULT LOGON APPLID FOR TERM\nTERMLOGC DS    H                       LOGON COUNTER\nTERMFLAG DS    XL1                     FLAG BYTE FOR LOGON STATUS\nLOGPROC  EQU   X'80'                   LOGON PROCEEEDING\nSENDSCED EQU   X'40'                   SEND (POST=SCED) ISSUED  DC18203\nTERMFLG2 DS    XL1                     FLAG FOR TERMINAL'S NETSOL STAT\nTOPEN    EQU   X'80'                   TERM LOGGED ON TO NETSOL\nTPASSED  EQU   X'40'                   TERM SUCCESSFULLY TO APPLID\nTREL     EQU   X'20'                   TERM RELEASED FOR SOME REASON\nTINIT    EQU   X'10'                   DEFAULT APPLID SET AT INIT TIME\nTERMDDT  DS    AL4                     A(DDT FOR THIS TERMINAL)\nTERMDTIM DS    F                       TIME+60 SECS OF AUTO LOGON\nTERMDCNT DS    H                       AUTO LOGON LOOP COUNTER\nTERMMODL DS    C                       TERM MODEL NUMBER\nTERMDFT  DS    XL1                     DFT MODE TERMINAL\nTERMLOGM DS    CL8                     LOGMODE FROM OPENDST        TAMU\nTERMFILL DS    CL8                     RESERVED\nTERMELEN EQU   *-TERMNAME              LENGTH OF AN ENTRY\n         TITLE '* * * * *  N E T S O L  - DEVICE DEPENDENT TABLE DSECT'\nDDT      DSECT\n         SPACE 2\n*        THE DEVICE DEPENDENT TABLE IDENTIFIES EDIT AND I/O ROUTINES\n*        AND MESSAGES APPLICABLE TO A PARTICULAR DEVICE TYPE.\n*        THE INQUIRE MACRO IS ISSUED IN THE LOGON EXIT TO OBTAIN\n*        LOGMODE INFORMATION SO THAT THE DEVICE TYPE CAN BE DETERMINED.\n*        TERMDDT POINTS TO THE DDT FOR A TERMINAL.\n         SPACE 2\n         DS    0D\nDDTEDIT  DS    AL4                     A(INPUT EDIT ROUTINE)\nDDTSEND  DS    AL4                     A(SEND ROUTINE)\nDDTTERM  DS    AL4                     A(TERMINAL FIELD IN MSG 12)\nDDTTIME  DS    AL4                     A(TIME FIELD IN MSG 12)\nDDTM4OFS DS    AL4                     A(USEABLE MSG BUFFER IN MSG4)\nDDTMSGOF DS    AL2                     MSG OFFSET OF DATA FIELD\nDDTM4L   DS    AL2                     LEN(USEABLE MSG BUFFER IN MSG4)\nDDTTMDL  DS    AL4                     A(MODEL NUMBER IN MSG 12)\nDDTMSGTB DS    0F\nDDTMSG01 DS    AL4                     A(MSG 01)\nDDTMSG02 DS    AL4                     A(MSG 02)\nDDTMSG03 DS    AL4                     A(MSG 03)\nDDTMSG04 DS    AL4                     A(MSG 04)\nDDTMSG05 DS    AL4                     A(MSG 05)\nDDTMSG06 DS    AL4                     A(MSG 06)\nDDTMSG07 DS    AL4                     A(MSG 07)\nDDTMSG08 DS    AL4                     A(MSG 08)\nDDTMSG09 DS    AL4                     A(MSG 09)\nDDTMSG10 DS    AL4                     A(MSG 10)\nDDTMSG11 DS    AL4                     A(MSG 11)\nDDTMSG12 DS    AL4                     A(MSG 12)\nDDTMSG13 DS    AL4                     A(MSG 13)\n         TITLE '* * * * *  N E T S O L  -  D C B ''S'\n*        DCB FOR SYSIN FILE\n         SPACE 1\nNETSOL   CSECT\n         PRINT NOGEN\nSYSINDCB DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EODSYSIN,MACRF=(GM),        X\n               LRECL=80\n*        DCB FOR NEWS SCREEN\nNEWSDCB  DCB   DDNAME=NEWSDD,DSORG=PS,EODAD=NEWSEOD,MACRF=(GM),        X\n               LRECL=0,BLKSIZE=1440,RECFM=U,BUFNO=1\n*        DCB FOR HELP SCREEN\nHELPDCB  DCB   DDNAME=HELPDD,DSORG=PS,EODAD=HELPEOD,MACRF=(GM),        X\n               LRECL=0,BLKSIZE=1440,RECFM=U,BUFNO=1\n*        DCB FOR ALL SCREEN\nALLDCB   DCB   DDNAME=ALLDD,DSORG=PS,EODAD=ALLEOD,MACRF=(GM),          X\n               LRECL=0,BLKSIZE=1440,RECFM=U,BUFNO=1\n*        DCB FOR SYSOUT FILE\n         SPACE 1\nSYSOUDCB DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=F\n         SPACE 1\n         DCBD   DSORG=PS\n*        PRINT NOGEN\n         PRINT GEN\n         TITLE '* * * * *  N E T S O L  -  N I B   DSECT'\n         ISTDNIB\n         TITLE '* * * * *  N E T S O L  -  B I N D   DSECT'\n         ISTDBIND\n         TITLE '* * * * *  N E T S O L  -  R P L   DSECT'\nIFGRPLX  DSECT\nSTSECT   DS    0D                  START DSECT ON D-WORD\n         IFGRPL DSECT=NO,AM=VTAM\n         EJECT\n* * * * *       END OF RPL DSECT AND START OF NIB       * * * * * * *\n         ORG\nNIBDMPID DC    0D'0',CL8'DYNAMNIB'     NIB DUMP ID\nNIBSTART DS    CL(NIBLNIB)             ASYNCHROUS NIB\n* * * * *       END OF NIB AND START OF RPL WORK AREA   * * * * * * *\nWORKSPAC DS    0D                      START OF RPL WORK AREA\nCID      DS    F                       CID OF READ DEVICE\nRPLSAVE  DS    18F                     SAVE AREA FOR RPL OPERATIONS\nRPLERRSA DS    12F                     SAVE AREA FOR SYNAD EXIT\n*                                      THAT ARE ASYNCHRONOUS\nAPPLID   DS    CL8                     NAME OF APPLICATION\nMODETAB  DS    CL8                     NAME OF MODE TABLE ENTRY\nGRPLTIME DS    CL8     (HHMMSSTH YYYDD) TIMESTAMP WHEN RPL GETMAINED\nRECLEN   DS    F                       FOR READ RECLEN FIELD\nSENDLEN  DS    F                       FOR SEND TO TERMINAL\nDATAPTR  DS    AL4(0)                  A(LOGON SEQUENCE IN IOAREA)\nGPPARM   DS    AL4(0)                  A(OPTION LIST PASSED TO GETPARM)\nGPDATAP  DS    AL4(0)                  A(CURRENT PTR IN CMD BUFFER)\nGPDATAL  DS    H                       LENGTH OF TEXT LEFT IN CMD BUF\nMSGINDEX DS    X                       NUMBER OF ERROR MESSAGE WRITTEN\nERMDATA  DS    CL7                     COMBINED ERROR FIELD\nREQ      EQU   ERMDATA,1               FOR RPL REQ FIELD\nRTNCD    EQU   ERMDATA+1,1             FOR RPL RTNCD FIELD\nFDBK2    EQU   ERMDATA+2,1             FOR RPL FDBK2 FIELD\nSENSE    EQU   ERMDATA+3,2             SAVE SSENSEI + SSENSMI FIELDS\nUSENSE   EQU   ERMDATA+5,2             SAVE USSESEI (2 BYTES)\nERMTEMP  DS    CL7                     ERROR FIELD WORKAREA\nACTIONS  DS    2X                      SAVE AREA FOR ERROR\nAPPLSTAT DC    X'0'                    FOR RPL FDBK FIELD\n*                                      ACTION CODES\n*        INTERNAL FLAG BYTES\nFLAGS    DS    X                       FLAG BYTE\n*\nLOGOFF   EQU   X'80'                   LOGOFF COMMAND ISSUED\nRELOPND  EQU   X'40'                   RELEASE DEVICE, THEN\n*                                      ATTEMPT TO RECONNECT\n*                                      VIA OPNDST\nBADEVICE EQU   X'20'                   PROBLEM WITH DEVICE\nLOGMODE  EQU   X'10'                   FLAG TO INDICATE THE USER\n*                                      HAS SUPPLIED THE NAME OF A\n*                                      LOGMODE TABLE ENTRY IN THE\n*                                      LOGON MSG TO BE PASSED TO\n*                                      THE APPLICATION.\nFIRSTSND EQU   X'08'                   FIRST SEND TO TERMINAL\nCLEARSCR EQU   X'04'                   RECEND ISSUING CLEAR SCREEN\nLUSTATE  EQU   X'02'                   LUSTAT PROCESSING FOR TERMINAL\nSIMLOG   EQU   X'01'                   CLSDST(PASS) FAILED => MUST\n*                                      ISSUE CLSDST(RELEASE) BEFORE\n*                                      CONTINUING WITH SIMLOGON\n         SPACE 1\nEXITFLAG DS    X                       FLAG INDICATING WHICH EXITS\n*                                      HAVE BEEN ENTERED.\nLOGONEX  EQU   X'80'                   ENTERED THE LOGON EXIT\nRECEX    EQU   X'40'                   ENTERED THE READEND EXIT\nPASSEX   EQU   X'20'                   ENTERED THE CLSDST(PASS) EXIT\nSENDEX   EQU   X'10'                   ENTERED THE WRITE EXIT\nRELREQEX EQU   X'08'                   ENTERED THE RELREQ EXIT\nLOSTEX   EQU   X'04'                   ENTERED THE LOSTERM EXIT\nCLOSEX   EQU   X'02'                   ENTERED THE CLSDST(RELEASE)EXIT\nOPENEX   EQU   X'01'                   ENTERED THE OPNDST EXIT\n         SPACE 1\nEXITFLG2 DS    X                       2ND FLAG INDICATING WHICH EXITS\n*                                      HAVE BEEN ENTERED.\nOPNACQX  EQU   X'80'                   ENTERED THE OPNDST(ACQUIRE) EXIT\n         SPACE 1\nMFLAGS   DS    X                       FLAG BYTE FOR CURRENT VTAM MACRO\nOPNDSPEC EQU   X'80'                   OPNDST(SPEC) IN PROGRESS\nINQAPPST EQU   X'40'                   INQUIRE(APPSTST) IN PROGRESS\nSENDING  EQU   X'20'                   WRITE IN PROGRESS\nRECA     EQU   X'10'                   READ(ANY) IN PROGRESS\nSMLOGON  EQU   X'08'                   SIMLOGON ISSUED AFTER CLSDST\nINTRPRT  EQU   X'04'                   INTRPRET IN PROGRESS\nCLSDST   EQU   X'02'                   CLSDST IN PROGRESS\nLUSEND   EQU   X'01'                   LUSTAT RESPONSE SENT\n         SPACE 1\n         SPACE 1\nMFLAGS2  DS    X                      FLAG BYTE2 FOR CURRENT VTAM MACRO\nINQSESS  EQU   X'80'                   INQUIRE(SESSPARM) IN PROGRESS\n         SPACE 1\nMACFLAGS DS    X                       INDICATE MACROS CALLED FLAG 1\nCLSREL   EQU   X'80'                   WILL DO CLSDST(RELEASE)\nOPNSPEC  EQU   X'40'                   WILL DO OPEN(SPEC)\nSIMLGON  EQU   X'20'                   SIMLOGON AFTER CLSDST\nINTAPPID EQU   X'10'                   WILL DO INTERP (APPLID)\nINQAPPS  EQU   X'08'                   WILL DO INQUIRE(APPSTAT)\nCLOSPASS EQU   X'04'                   WILL DO CLSDST(PASS)\nSENDASY  EQU   X'02'                   WILL DO SEND ASY\nOPNDACQ  EQU   X'01'                   WILL DO OPNDST(AQUIRE)\n         SPACE 1\nMACFLAG2 DS    X                       INDICATE MACROS CALLED FLAG 2\nINQSES   EQU   X'80'                   WILL DO INQUIRE(SESSPARM)\n         SPACE 1\nDATASEQL DS    X                       X-LATED DATA SEQ-LENGTH\n         SPACE 2\nWORKRPLA EQU   *-WORKSPAC              USED TO CLEAR OUT WORKAREA\n         TITLE '* * * * *  N E T S O L  -  SYNCHRONOUS RPL + NIB + WA'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THE FOLLOWING RPL IS USED FOR ALL SYNCHRONOUS COMMANDS       *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nNETSOL   CSECT\n         DS    0D\n         DC    CL8'SYNCHRPL'\n         SPACE 2\nSYNCHRPL RPL  ACB=ACB,OPTCD=SYN,                                       X\n               AM=VTAM\n         ORG\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THE FOLLOWING NIB IS USED FOR ALL SYNCHRONOUS OPERATIONS     *\n*        REQUIRING A NIB.                                             *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0D\n         DC    CL8'SYNCHNIB'\n         SPACE 2\nSYNCHNIB NIB  MODE=RECORD,PROC=TRUNC,                                  X\n               LISTEND=YES,LOGMODE=C' ',BNDAREA=0\n         DS    0D\nSYNWORK  DC    (WORKRPLA)X'00'         RPL WORK AREA\n         DS    0D\nLNGTHRPL DC    AL1(1),AL3(ENDSECT-STSECT+8)  SUBPOOL #/LENGTH OF RPL\n*                                      AND ITS OWN WORKAREA\nSYNARG   EQU   SYNCHRPL+RPLARG-IFGRPL  DISPLACEMENT TO THE ARG\n*                                      WITHIN SYNCHRPL\nSYNFDB3  EQU   SYNCHRPL+RPLFDB3-IFGRPL DISPLACEMENT TO FBD3\n*                                      IN SYNCHRPL'S WORKAREA\nSRPLEXT1 EQU   SYNCHRPL+RPLEXTD1-IFGRPL DISPLACEMENT TO 'NIB@\n*                                      IN ARG FIELD' BIT\nSYNUSFLD EQU   SYNCHRPL+RPLUSFLD-IFGRPL DISPLACEMENT TO RPL USER FIELD\n*                                      FOR USE BY ERROR EXIT ROUTINE\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS RPL IS USED EXCLUSIVELY FOR REFRESHING THE SYNCRONOUS   *\n*        RPL'S. IT IS NOT ITSELF USED IN ANY MACROS      DC18203      *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 1\n         DS    0D                                              DC18203\n         DC    CL8'FRSYNRPL'                                   DC18203\n         SPACE 2\nFRSYNRPL RPL   ACB=ACB,AM=VTAM,OPTCD=SYN                       DC18203\nFRSYNL   EQU   *-FRSYNRPL    LENGTH OF SYN RPL FOR REFRESH     DC18203\n         TITLE '* * * * *  N E T S O L  -  SETLOGON RPL'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        SETLOGON RPL - A SEPARATE RPL IS NECESSARY BECAUSE           *\n*         THE LOGON EXIT CAN BE DRIVEN BEFORE THE SETLOGON            *\n*         COMPLETES.                                                  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0D\n         DC    CL8'LOGONRPL'\n         SPACE 2\nSETLRPL  RPL   ACB=ACB,OPTCD=SYN,                                      X\n               AM=VTAM\nSETNIB   DC    (8+NIBLNIB)X'00'        NIB IN IFGRPLX DSECT\nSETWORKA DC    (WORKRPLA)X'00'         WORKAREA IN IFGRPLX DSECT\n         TITLE '* * * * *  N E T S O L  -  NETSOL COMMAND TABLE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS TABLE DEFINES THE COMMANDS WHICH MAY BE ENTERED FROM    *\n*        THE TERMINAL.                                                *\n*                                                                     *\n*        EACH TABLE ENTRY CONSISTS OF THE FOLLOWING FIELDS:           *\n*                                                                     *\n*             CMDGAPPL - THE GENERIC NAME OF THE VTAM APPLICATION.    *\n*                        THIS IDENTIFIES APPLICATIONS WHICH HAVE      *\n*                        MULTIPLE LOGON SEQUENCES.                    *\n*                                                                     *\n*             CMDVAPPL-  THE ACTUAL VTAM APPLICATION NAME ASSOCIATED  *\n*                        WITH CMDGAPPL                                *\n*                                                                     *\n*             CMDTEXT -  THE LOGON SEQUENCE OF COMMAND ENTERED AT THE *\n*                        TERMINAL TO SELECT THIS APPLICATION OR CMD.  *\n*                                                                     *\n*             CMDROUTA-  ADDRESS OF THE ROUTINE WHICH PROCESSES THIS  *\n*                        COMMAND.                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nCMDGAPPL EQU   0,8                    GENERIC APPLICATION NAME\nCMDVAPPL EQU   8,8                    VTAM APPLICATION NAME\nCMDTEXT  EQU   16,8                   LOGON SEQUENCE OR COMMAND\nCMDROUTA EQU   24,4                   A(CMD PROCESSING ROUTINE)\nCMDTEXTL EQU   28,2                   LENGTH OF CMDTEXT\nCMDFLAG  EQU   30,1                   COMMAND FLAG\nCMDINIT  EQU   X'80'                  COMMAND ALLOWED FROM SYSIN FILE\nCMDTERM  EQU   X'40'                  COMMAND ALLOWED FROM TERMINAL\nCMDFILL  EQU   31,1                   FILLER\nCMDTABL  EQU   32                     LENGTH OF CMD TABLE ENTRY\n         SPACE 2\n         PRINT NOGEN\nCMDTAB   EQU   *                             START OF COMMAND TABLE\n*\n*        APPLICATION LOGON SEQUENCES\n*\n*        $CMD  NAME    ,APPLID  ,CHKAPPL,'NAME    ',CMDTERM        TAMU\n*                                                                  TAMU\n         $CMD  A,PRDCICS,CHKAPPL,'A',CMDTERM                       GMU\n         $CMD  B,NOTIS,CHKAPPL,'B',CMDTERM                         GMU\n         $CMD  C,TSO,CHKAPPL,'C',CMDTERM                           GMU\n         $CMD  PRDCICS,PRDCICS,CHKAPPL,'PRDCICS',CMDTERM           GMU\n         $CMD  CICS,PRDCICS,CHKAPPL,'CICS',CMDTERM                 GMU\n         $CMD  CSO,MLT3278,CHKAPPL,'CSO',CMDTERM                   GMU\n         $CMD  D,QACICS,CHKAPPL,'D',CMDTERM                        GMU\n         $CMD  E,DEVCICS,CHKAPPL,'E',CMDTERM                       GMU\n*        $CMD  E,TSTIDMS,CHKAPPL,'E',CMDTERM                       GMU\n         $CMD  S,NOTISS,CHKAPPL,'S',CMDTERM                        GMU\n         $CMD  T,NOTIST,CHKAPPL,'T',CMDTERM                        GMU\n         $CMD  GMUCICS,CICS,CHKAPPL,'GMUCICS',CMDTERM              GMU\n         $CMD  MCONS,MSOCONSA,CHKAPPL,'MCONS',CMDTERM              GMU\n         $CMD  MSOCONS,MSOCONSA,CHKAPPL,'MSOCONS',CMDTERM          GMU\n         $CMD  NOTIS,NOTIS,CHKAPPL,'NOTIS',CMDTERM                 GMU\n         $CMD  NOTISS,NOTISS,CHKAPPL,'NOTISS',CMDTERM              GMU\n         $CMD  NOTIST,NOTIST,CHKAPPL,'NOTIST',CMDTERM              GMU\n         $CMD  TEST,TSTNOTIS,CHKAPPL,'TEST',CMDTERM                GMU\n         $CMD  TRAIN,TSTCICS,CHKAPPL,'TRAIN',CMDTERM               GMU\n         $CMD  QA,QACICS,CHKAPPL,'QA',CMDTERM                      GMU\n         $CMD  DEV,DEVCICS,CHKAPPL,'DEV',CMDTERM                   GMU\n         $CMD  DEVL,DEVCICS,CHKAPPL,'DEVL',CMDTERM                 GMU\n         $CMD  TSO,TSO,CHKAPPL,'TSO',CMDTERM                       GMU\n         $CMD  TSTCICS,TSTCICS,CHKAPPL,'TSTCICS',CMDTERM           GMU\n         $CMD  QACICS,QACICS,CHKAPPL,'QACICS',CMDTERM              GMU\n         $CMD  TSTNOTIS,TSTNOTIS,CHKAPPL,'TSTNOTIS',CMDTERM        GMU\n         $CMD  DEVCICS,DEVCICS,CHKAPPL,'DEVCICS',CMDTERM           GMU\n         $CMD  VIRTERM,MLT3278,CHKAPPL,'VIRTERM',CMDTERM           GMU\n         $CMD  CARSEDI,TSOS1,CHKAPPL,'CARSEDI',CMDTERM             GMU\n         $CMD  CARS,COMPCARS,CHKAPPL,'CARS',CMDTERM                GMU\n         $CMD  PMIS,STIP,CHKAPPL,'PMIS',CMDTERM                    GMU\n         $CMD  STIP,STIP,CHKAPPL,'STIP',CMDTERM                    GMU\n         $CMD  STARS,IMSAPPL,CHKAPPL,'STARS',CMDTERM               GMU\n         $CMD  DITIMS,IMS,CHKAPPL,'DITIMS',CMDTERM                 GMU\n         $CMD  XLIBRIS,NOTIS,CHKAPPL,'XLIBRIS',CMDTERM             GMU\n         $CMD  IDMSDC,IDMSDC,CHKAPPL,'IDMSDC',CMDTERM              GMU\n         $CMD  IDMSDC10,IDMSDC10,CHKAPPL,'IDMSDC10',CMDTERM        GMU\n         $CMD  IDMSDC20,IDMSDC20,CHKAPPL,'IDMSDC20',CMDTERM        GMU\n         $CMD  IDMSDC30,IDMSDC30,CHKAPPL,'IDMSDC30',CMDTERM        GMU\n         $CMD  PRDIDMS,PRDIDMS,CHKAPPL,'PRDIDMS',CMDTERM           GMU\n         $CMD  QAIDMS,QAIDMS,CHKAPPL,'QAIDMS',CMDTERM              GMU\n         $CMD  TSTIDMS,TSTIDMS,CHKAPPL,'TSTIDMS',CMDTERM           GMU\n         $CMD  ALAMO,OMIIMVS,CHKAPPL,'ALAMO',CMDTERM               GMU\n         $CMD  EMVS,EMVSVTAM,CHKAPPL,'EMVS',CMDTERM                GMU\n         $CMD  EMVSVTAM,EMVSVTAM,CHKAPPL,'EMVSVTAM',CMDTERM        GMU\n*        $CMD  W,ALADIN,CHKAPPL,'W',CMDTERM                        GMU\n*        $CMD  WRLC,ALADIN,CHKAPPL,'WRLC',CMDTERM                  GMU\n*        $CMD  ACCESS,TAMCICS,CHKAPPL,'ACCESS',CMDTERM             TAMU\n*        $CMD  CICS,TAMCICS,CHKAPPL,'CICS',CMDTERM                 TAMU\n*        $CMD  CICSMRO,CICSMRO,CHKAPPL,'CICSMRO',CMDTERM           TAMU\n*        $CMD  CICSNAT,TAMNAT,CHKAPPL,'CICSNAT',CMDTERM            TAMU\n*        $CMD  CICSREG,TAMREG,CHKAPPL,'CICSREG',CMDTERM            TAMU\n*        $CMD  CICSIMS,TAMSIMS,CHKAPPL,'CICSIMS',CMDTERM           TAMU\n*        $CMD  SIMS,TAMSIMS,CHKAPPL,'SIMS',CMDTERM                 TAMU\n*        $CMD  CICSTRN,TAMCITRN,CHKAPPL,'CICSTRN',CMDTERM          TAMU\n*        $CMD  DISPATCH,TAMDSPCH,CHKAPPL,'DISPATCH',CMDTERM        TAMU\n*        $CMD  IMS,TAMIMSA,CHKAPPL,'IMS',CMDTERM                   TAMU\n*        $CMD  IMSTEST,TAMIMST,CHKAPPL,'IMSTEST',CMDTERM           TAMU\n*        $CMD  LIBTEST,TAMLIBT,CHKAPPL,'LIBTEST',CMDTERM           TAMU\n*        $CMD  MVSTWYL,MVSTWYL,CHKAPPL,'MVSTWYL',CMDTERM           TAMU\n*        $CMD  NETSPY,NETSPY,CHKAPPL,'NETSPY',CMDTERM              TAMU\n*        $CMD  NETVIEW,CNM01,CHKAPPL,'NETVIEW',CMDTERM             TAMU\n*        $CMD  NODE,NODE,CHKAPPL,'NODE',CMDTERM                    TAMU\n*        $CMD  NOMAD,TAMNOMAD,CHKAPPL,'NOMAD',CMDTERM              TAMU\n*        $CMD  NOTIS,TAMLIB,CHKAPPL,'NOTIS',CMDTERM                TAMU\n*        $CMD  OMA,OMEGAMNA,CHKAPPL,'OMA',CMDTERM                  TAMU\n*        $CMD  PHONBOOK,TAMCICS,CHKAPPL,'PHONBOOK',CMDTERM         TAMU\n*        $CMD  PNMS,TAMPNMS,CHKAPPL,'PNMS',CMDTERM                 TAMU\n*        $CMD  TAO,TAOVAP,CHKAPPL,'TAO',CMDTERM                    TAMU\n*        $CMD  TAOVAP,TAOVAP,CHKAPPL,'TAOVAP',CMDTERM              TAMU\n*        $CMD  TESTCICS,TAMCICST,CHKAPPL,'TESTCICS',CMDTERM        TAMU\n*        $CMD  TESTIMS,TAMIMST,CHKAPPL,'TESTIMS',CMDTERM           TAMU\n*        $CMD  TESTVM,TAMVMT,CHKAPPL,'TESTVM',CMDTERM              TAMU\n*        $CMD  TPX,TAMTPX,CHKAPPL,'TPX',CMDTERM                    TAMU\n*        $CMD  TPX2,TAMTPXT,CHKAPPL,'TPX2',CMDTERM                 TAMU\n*        $CMD  TSO,TAMTS,CHKAPPL,'TSO',CMDTERM                     TAMU\n*        $CMD  TSOT,TAMTST,CHKAPPL,'TSOT',CMDTERM                  TAMU\n*        $CMD  WYLBUR,TAMWYL,CHKAPPL,'WYLBUR',CMDTERM              TAMU\n*        $CMD  WYLTST,TAMWYLT,CHKAPPL,'WYLTST',CMDTERM             TAMU\n*        $CMD  VM,TAMVM,CHKAPPL,'VM',CMDTERM                       TAMU\n*        $CMD  UNIX,TAMVM,CHKAPPL,'UNIX',CMDTERM                   TAMU\n*        $CMD  UTS,TAMUTS,CHKAPPL,'UTS',CMDTERM                    TAMU\n*        $CMD  INFO,TAMVM,CHKAPPL,'INFO',CMDTERM                   TAMU\n*                                                                  TAMU\n*        $CMD  TAITSO,TAITSO,CHKAPPL,'TAITSO',CMDTERM              TAMU\n*        $CMD  TAIVM,TAIVM,CHKAPPL,'TAIVM',CMDTERM                 TAMU\n*                                                                  TAMU\n*        $CMD  CCSUVM,CCSUVM,CHKAPPL,'CCSUVM',CMDTERM              TAMU\n*                                                                  TAMU\n*        $CMD  UTADP,UTX0COM3,CHKAPPL,'UTADP',CMDTERM              TAMU\n*        $CMD  UTAINFO,UTXVSCS,CHKAPPL,'UTAINFO',CMDTERM           TAMU\n*        $CMD  UTALIB,UTX0COM3,CHKAPPL,'UTALIB',CMDTERM            TAMU\n*                                                                  TAMU\n*        $CMD  MEDLINE,TEXSRCH,CHKAPPL,'MEDLINE',CMDTERM UTAMDACC  TAMU\n*                                                                  TAMU\n*        $CMD  THDCX30,CX30,CHKAPPL,'THDCX30',CMDTERM              TAMU\n*        $CMD  THD,CX30,CHKAPPL,'THD',CMDTERM                      TAMU\n*                                                                  TAMU\n*\n*        NETSOL COMMANDS\n*\n         $CMD  END,END,CMDEND,'END',CMDTERM\n         $CMD  END,END,CMDEND,'3',CMDTERM\n         $CMD  INFO,INFO,CMDINFO,'INFO',CMDTERM\n         $CMD  INFO,INFO,CMDINFO,'1',CMDTERM\n         $CMD  ALL,ALL,CMDALL,'ALL',CMDTERM\n         $CMD  HELP,HELP,CMDHELP,'HELP',CMDTERM\n         $CMD  NEWS,NEWS,CMDNEWS,'NEWS',CMDTERM\n         $CMD  REFRESH,REFRESH,CMDREF,'REFRESH',CMDTERM\n         $CMD  LOGOFF,LOGOFF,LOGOFCMD,'LOGOFF',CMDTERM\n         $CMD  EXIT,LOGOFF,LOGOFCMD,'EXIT',CMDTERM\n         $CMD  SETLOGON,SETLOGON,SETLOGON,'SETLOGON',CMDTERM+CMDINIT\n*\n         SPACE 1\nCMDTABND DC    CL8'ENDOFTAB'                 END OF COMMAND TABLE\n         PRINT NOGEN\n         TITLE '* * * * *  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               270'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDT3270F DS    0D\n         DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\n         DC    A(S32SEND)         A(3270 SEND ROUTINE)\n         DC    A(DUMMY)           A(TERMINAL FIELD IN MSG 12) DUMMY\n         DC    A(DUMMY)           A(TIME FIELD IN MSG 12) DUMMY\n         DC    A(S32M4OF)         A(USEABLE BUFFER IN MSG 4)\n         DC    AL2(23)            MSG OFFSET FOR INSERTED DATA\n         DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n         DC    A(DUMMY)           A(MODEL NUMBER IN MSG 12) DUMMY\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(S327NEWS)\n         DC    A(S32MSG13)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDT3270E DS    0D\n         DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\n         DC    A(S32SEND)         A(3270 SEND ROUTINE)\n         DC    A(DUMMY)           A(TERMINAL FIELD IN MSG 12) DUMMY\n         DC    A(DUMMY)           A(TIME FIELD IN MSG 12) DUMMY\n         DC    A(S32M4OF)         A(USEABLE BUFFER IN MSG 4)\n         DC    AL2(23)            MSG OFFSET FOR INSERTED DATA\n         DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n         DC    A(DUMMY)           A(MODEL NUMBER IN MSG 12) DUMMY\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(S327HELP)\n         DC    A(S32MSG13)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDT3270D DS    0D\n         DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\n         DC    A(S32SEND)         A(3270 SEND ROUTINE)\n         DC    A(DUMMY)           A(TERMINAL FIELD IN MSG 12) DUMMY\n         DC    A(DUMMY)           A(TIME FIELD IN MSG 12) DUMMY\n         DC    A(S32M4OF)         A(USEABLE BUFFER IN MSG 4)\n         DC    AL2(23)            MSG OFFSET FOR INSERTED DATA\n         DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n         DC    A(DUMMY)           A(MODEL NUMBER IN MSG 12) DUMMY\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(S3270ALL)\n         DC    A(S32MSG13)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDT3270C DS    0D\n         DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\n         DC    A(S32SEND)         A(3270 SEND ROUTINE)\n         DC    A(SZZTERM)         A(TERMINAL FIELD IN MSG 12)\n         DC    A(SZZTIME)         A(TIME FIELD IN MSG 12)\n         DC    A(S32M4OF)         A(USEABLE BUFFER IN MSG 4)\n         DC    AL2(23)            MSG OFFSET FOR INSERTED DATA\n         DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n         DC    A(SZZMDL+6)        A(MODEL NUMBER IN MSG 12)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(SZZMSG12)\n         DC    A(S32MSG13)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDT3270B DS    0D\n         DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\n         DC    A(S32SEND)         A(3270 SEND ROUTINE)\n         DC    A(S32TERM)         A(TERMINAL FIELD IN MSG 12)\n         DC    A(S32TIME)         A(TIME FIELD IN MSG 12)\n         DC    A(S32M4OF)         A(USEABLE BUFFER IN MSG 4)\n         DC    AL2(23)            MSG OFFSET FOR INSERTED DATA\n         DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n         DC    A(S32MDL+6)        A(MODEL NUMBER IN MSG 12)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(S32MSG12)\n         DC    A(S32MSG13)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES.    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDT3270A DS    0D\n         DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\n         DC    A(S32SEND)         A(3270 SEND ROUTINE)\n         DC    A(SXXTERM)         A(TERMINAL FIELD IN MSG 12)\n         DC    A(SXXTIME)         A(TIME FIELD IN MSG 12)\n         DC    A(S32M4OF)         A(USEABLE BUFFER IN MSG 4)\n         DC    AL2(23)            MSG OFFSET FOR INSERTED DATA\n         DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n         DC    A(SXXMDL+6)        A(MODEL NUMBER IN MSG 12)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0F\n         DC    A(S32MSG01)\n         DC    A(S32MSG02)\n         DC    A(S32MSG03)\n         DC    A(S32MSG04)\n         DC    A(S32MSG05)\n         DC    A(S32MSG06)\n         DC    A(S32MSG07)\n         DC    A(S32MSG08)\n         DC    A(S32MSG09)\n         DC    A(S32MSG10)\n         DC    A(S32MSG11)\n         DC    A(SXXMSG12)\n         DC    A(S32MSG13)\n         TITLE '* * * * *  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               270 EXTENDED FUNCTION'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3270 DEVICES     *\n*        THAT HAVE EXTENDED FUNCTION (I.E. COLOUR + SYMBOL SETS ).    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDT3270X DS    0D\n         DC    A(S32EDIT)         A(3270 INPUT EDIT ROUTINE)\n         DC    A(S32SEND)         A(3270 SEND ROUTINE)\n         DC    A(S3ETERM)         A(TERMINAL FIELD IN MSG 12)\n         DC    A(S3ETIME)         A(TIME FIELD IN MSG 12)\n         DC    A(S3EM4OF)         A(USEABLE BUFFER IN MSG 4)\n         DC    AL2(27)            MSG OFFSET FOR INSERTED DATA\n         DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\n         DC    A(S3EMDL+6)        A(MODEL NUMBER IN MSG 12)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DS    0F\n         DC    A(S3EMSG01)\n         DC    A(S3EMSG02)\n         DC    A(S3EMSG03)\n         DC    A(S3EMSG04)\n         DC    A(S3EMSG05)\n         DC    A(S3EMSG06)\n         DC    A(S3EMSG07)\n         DC    A(S3EMSG08)\n         DC    A(S3EMSG09)\n         DC    A(S3EMSG10)\n         DC    A(S3EMSG11)\n         DC    A(S3EMSG12)\n         DC    A(S3EMSG13)\n         TITLE '* * * * *  N E T S O L  -  DEVICE DEPENDENT TABLE FOR 3X\n               767'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN COMMUNICATING WITH 3767 TERMINALS.  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDT3767  DS    0D\nS37EDITA DC    A(S37EDIT)         A(3767 INPUT EDIT ROUTINE)\nS37SENDA DC    A(S32SEND)         A(3767 SEND ROUTINE)\nS37TERMA DC    A(S37TERM)         A(TERMINAL FIELD IN MSG 12)\nS37TIMEA DC    A(S37TIME)         A(TIME FIELD IN MSG 12)\nS37M4OFS DC    A(S37M4OF)         A(USEABLE BUFFER IN MSG 4)\nS37OFFST DC    AL2(9)             MSG OFFSET FOR INSERTED DATA\nS37M4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\nS37MDLA  DC    A(0)               A(MODEL NUMBER IN MSG 12)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nS37MSGTB DS    0F\n         DC    A(S37MSG01)\n         DC    A(S37MSG02)\n         DC    A(S37MSG03)\n         DC    A(S37MSG04)\n         DC    A(S37MSG05)\n         DC    A(S37MSG06)\n         DC    A(S37MSG07)\n         DC    A(S37MSG08)\n         DC    A(S37MSG09)\n         DC    A(S37MSG10)\n         DC    A(S37MSG11)\n         DC    A(S37MSG12)\n         DC    A(S37MSG13)\n         TITLE '* * * * *  N E T S O L  -  DEVICE DEPENDENT TABLE FOR SX\n               YSIN FILE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        THIS DDT DEFINES THE INPUT EDIT AND SEND ROUTINES AND        *\n*        THE MESSAGE TEXT USED IN PROCESSING CMDS FROM THE SYSIN FILE.*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nDDTSYSIN DS    0D\nSINEDITA DC    A(0)               A(SYSIN INPUT EDIT ROUTINE)\nSINSENDA DC    A(RIPUTMSG)        A(SYSIN SEND ROUTINE)\nSINTERMA DC    A(0)               A(TERMINAL FIELD IN MSG 12)\nSINTIMEA DC    A(0)               A(TIME FIELD IN MSG 12)\nSINM4OFS DC    A(SINM4OF)         A(USEABLE BUFFER IN MSG 4)\nSINOFFST DC    AL2(0)             MSG OFFSET FOR INSERTED DATA\nSINM4L   DC    AL2(60)            L(USEABLE BUFFER IN MSG 4)\nSINMDLA  DC    A(0)               A(MODEL NUMBER IN MSG 12)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TABLE INDEX                                          *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nSINMSGTB DS    0F\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG04)         RESPONSE FOR INITIALIZATION CMDS\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG07)         FOR INVALID COMMANDS\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         DC    A(SINMSG00)\n         TITLE '* * * * *  N E T S O L  -  MESSAGES FOR 3270'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TEXTS                                                *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         $MODEL 2               SET 3270 MODEL NUMBER FOR 3270 MACROS\n         SPACE 3\nS32MSG01 DC    YL2(S32END01-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\n         DC    C'GMU-101 XXXXXXXX LOGMODE ENTRY UNDEFINED'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END01 EQU   *\n         SPACE 3\nS32MSG02 DC    YL2(S32END02-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\n         DC    C'GMU-102 INVALID LOGON SEQUENCE , REENTER'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END02 EQU   *\n         SPACE 3\nS32MSG03 DC    YL2(S32END03-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\n         DC    C'GMU-103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END03 EQU   *\n         SPACE 3\nS32MSG04 DC    YL2(S32END04-*)\n         SPACE\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (RESETKBD,MDT)     SET WCC CODE\n         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER\n         $SF   (SKIP)\nS32M4OF  DC    CL46'GMU-04 - VIRGINIA TEST LINK                   '\nS32M4TIM DC    CL15' '\n         DC    CL1' '             BLANK FIELD SEPARATER-83/01/26 BJH\nS32M4NOD DC    CL8' '             NODE NAME\n         DC    CL4'****'          PADDING TO AVOID TRUNC-83/01/26 BJH\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END04 EQU   *\n         SPACE 3\nS32MSG05 DC    YL2(S32END05-*)\n         $IO   WRITE\n         $WCC  (ALARM,RESETKBD,MDT)\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)\n         $SF   (HI,SKIP)\n         DC    C'GMU-105 USER UNAUTHORIZED FOR THIS APPLICATION'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END05 EQU   *\n         SPACE 3\nS32MSG06 DC    YL2(S32END06-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (MDT)              SETUP WCC\n         $SBA  (1,1)              SET BUFFER ADDRESS\n         $SF   (PROT)             SET ATTRIBUTE BYTE\n         DC    C'GMU-106 LOGON IN PROGRESS'\nS32END06 EQU   *\n         SPACE 3\nS32MSG07 DC    YL2(S32END07-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n*        DC    C'GMU-107          NOT DEFINED TO VTAM'\n         DC    C'GMU-107          APPLICATION REJECTED LOGON'      TAMU\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END07 EQU   *\n         SPACE 3\nS32MSG08 DC    YL2(S32END08-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'GMU-108          IS NOT ACTIVE'  OR LOGMODE INVALID\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END08 EQU   *\n         SPACE 3\nS32MSG09 DC    YL2(S32END09-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'GMU-109          NO LONGER ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END09 EQU   *\n         SPACE 3\nS32MSG10 DC    YL2(S32END10-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'GMU-110          NEVER ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END10 EQU   *\n         SPACE 3\nS32MSG11 DC    YL2(S32END11-*)\n         $IO   WRITE              SET 3270 COMMAND CODE\n         $WCC  (ALARM,RESETKBD,MDT) SET WCC CODE\n         $SBA  (23,1)             CLEAR\n         $IC                        OLD\n         $RA   (24,01,X'00')          INPUT BUFFER               W.A.M.\n         $SBA  (24,16)            SET BUFFER ADDRESS\n         $SF   (HI,SKIP)          SET BUFFER ATTRIBUTES\n         DC    C'GMU-111          TEMPORARILY NOT ACCEPTING LOGONS'\n         $RA   (24,80,X'00')      CLEAR REST OF MSG BUFFER\nS32END11 EQU   *\n         SPACE 3\nS327NEWS DC    YL2(S327NEND-*)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        FULLSCREEN MSG FOR 3275/3277    NEWS SCREEN                  *\n*        MODIFIED 6/5/85 R.A.G.                                       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (RESETKBD,MDT)     SET WCC CODE\n         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER\n         $SF   (SKIP)\n         $SBA  (2,27)             GO TO LINE 2 COL 27\n         DC    CL25'   G M U    NEWS SCREEN'\n         $SBA  (4,1)              START AT FOURTH LINE\nNEWSBUFF DC    18CL80' '          DEFINE 18 LINES FOR NEWS SCREEN\n         $SBA  (22,25)            GO TO LINE 22\n         DC    CL29'TO EXIT THIS SCREEN PRESS PF3'\n         $SBA  (22,80)\n         $SF   (UNPROT)            SF,ATT(UNPROTECT)\n         $IC                        OLD\n         $SBA  (24,1)              DEFINE END OF INPUT FIELD\n         $SF   (SKIP)\nS327NEND EQU   *\nS32SIZNE EQU   S327NEND-S327NEWS   CALCULATE SIZE OF MSG 12\n         SPACE 3\nS327HELP DC    YL2(S327HEND-*)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        FULLSCREEN MSG FOR 3275/3277    HELP SCREEN                  *\n*        MODIFIED 6/5/85 R.A.G.                                       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (RESETKBD,MDT)     SET WCC CODE\n         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER\n         $SF   (SKIP)\n         $SBA  (2,27)             GO TO LINE 2 COL 27\n         DC    CL25'   G M U    HELP SCREEN'\n         $SBA  (4,1)              START AT FOURTH LINE\nHELPBUFF DC    18CL80' '          DEFINE 18 LINES FOR HELP SCREEN\n         $SBA  (22,25)            GO TO LINE 22\n         DC    CL29'TO EXIT THIS SCREEN PRESS PF3'\n         $SBA  (22,80)\n         $SF   (UNPROT)            SF,ATT(UNPROTECT)\n         $IC                        OLD\n         $SBA  (24,1)              DEFINE END OF INPUT FIELD\n         $SF   (SKIP)\nS327HEND EQU   *\nS32SIZHE EQU   S327HEND-S327HELP   CALCULATE SIZE OF MSG 12\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        FULLSCREEN MSG FOR 3275/3277                                 *\n*        MODIFIED 6/5/85 R.A.G.                                       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nS3270ALL DC    YL2(S327AEND-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (RESETKBD,MDT)     SET WCC CODE\n         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER\n         $SF   (SKIP)\n         $SBA  (2,27)             GO TO LINE 2 COL 27\n         DC    CL24'   G M U    ALL SCREEN'\n         $SBA  (4,1)              START AT FOURTH LINE\nALLBUFF  DC    18CL80' '          DEFINE 18 LINES FOR ALL SCREEN\n         $SBA  (22,25)            GO TO LINE 22\n         DC    CL29'TO EXIT THIS SCREEN PRESS PF3'\n         $SBA  (22,80)\n         $SF   (UNPROT)            SF,ATT(UNPROTECT)\n         $IC                        OLD\n         $SBA  (24,1)              DEFINE END OF INPUT FIELD\n         $SF   (SKIP)\nS327AEND EQU   *\nS32SIZAL EQU   S327AEND-S3270ALL   CALCULATE SIZE OF MSG 12\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        FULLSCREEN MSG FOR 3275/3277                                 *\n*        MODIFIED 6/5/85 R.A.G.                                       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nX32MSG12 DC    YL2(S32END12-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (RESETKBD,MDT)     SET WCC CODE\n         $SBA  (1,1)              DEFINE ATTRIBUTES OF 1ST BUFFER\n         $SF   (SKIP)\nS32NSNAM DC    0H'0'\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        TIME AND DATE STAMP                                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         $SBA  (10,63)\n         DC    C'TERM:'           TELL 'EM IT THE NODE NAME\nS32TERM  DC    CL13' '            TERM NAME\n         $SBA  (11,68)\nS32MDL   DC    CL7'MODEL  '       TERMINAL MODEL NUMBER\n         $SBA  (11,30)\nS32TIME  DC    CL15' '            TIME STAMP\n         EJECT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        LOGON INPUT AREA                                             *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         $SBA  (22,80)\n         $SF   (UNPROT)            SF,ATT(UNPROTECT)\n         $IC\n         $SBA  (24,1)              DEFINE END OF INPUT FIELD\n         $SF   (SKIP)\nS32END12 EQU   *\nX32SIZ12 EQU   S32END12-S32MSG12   CALCULATE SIZE OF MSG 12\n         SPACE 3\nSXXMSG12 DC    YL2(SXXEND12-*)\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        FULLSCREEN MSG FOR 3275/3277                                 *\n*        MODIFIED 6/5/85 R.A.G.                                       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n*\nLOGOCMD  DC    X'F5'                   ERASE WRITE COMMAND\n         DC    X'C3'                   WCC\n*        DC    X'1140401D60'           SBA(01,01)/SF(60)\n*        DC    X'11C2F81D60'           SBA(03,25)/SF(60)\n*        DC    C'       GMUIBM.GMU.EDU      '\n*        DC    X'11C4C9'               SBA(04,26)\n*        DC    C'        129.174.1.10       '\n*        DC    X'11C5D9'               SBA(05,26)\n*        DC    C'                           '\n         DC    X'1140D71DF8'      SBA R1 C24 Prot Skip HiLite\n         DC    C'GEORGE MASON UNIVERSITY'\n         DC    X'11C15D1DF8'      SBA R2 C14 Prot Skip HiLite\n         DC    C'University Computing and Information Systems'\n         DC    X'11C2F31DF8'      SBA R3 C20 Prot Skip HiLite\n*        DC    C'Computer Systems and operations'\n         DC    C'   IBM Administrative System   '\n         DC    X'11C5C31DF0'      SBA R5 C4  Prot Skip Norm\n         DC    C'Enter the character of your selection '\n         DC    C'and press the ENTER key:'\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'C7E9'            ROW 7 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL7' '\n         DC    CL2'A '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== IA/IDMS Administrative Applications '\n*                   1...5....0....5....2....5....3....5....4\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'C8F9'            ROW 8 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL7' '\n         DC    CL2'B '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== NOTIS Library Support Applications  '\n*                   1...5....0....5....2....5....3....5....4\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'4AC9'            ROW 9 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL7' '\n         DC    CL2'C '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== TSO/E Time Sharing Options Extended '\n*                   1...5....0....5....2....5....3....5....4\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'4BD9'            ROW 10 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL7' '\n         DC    CL2'D '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== Quality Assurance/Training   QACICS '\n*                   1...5....0....5....2....5....3....5....4\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'4CE9'            ROW 11 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL7' '\n         DC    CL2'E '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== Development                 DEVCICS '\n*                   1...5....0....5....2....5....3....5....4\n*\n*        DC    X'4DF9'            ROW 12 COLUMN 10 (may be wrong!)\n*        DC    X'4FC9'            ROW 13 COLUMN 10\n*        DC    X'50D9'            ROW 14 COLUMN 10\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         DC    X'11D45B1D60'           SBA(17,28),SF(60)\n         DC    C'George Mason University'\n         DC    X'11D56E'               SBA(18,31)\n         DC    C'  GMUIBM.GMU.EDU '\n         DC    X'11D7F1'               SBA(20,02)\n         DC    C'Enter application  or HELP or EXIT'\n         DC    X'11D9C1'               SBA(21,02)\n         DC    C'(A)-CICS/'\n         DC    C'PRDCICS, '\n         DC    C'(B)-XLIBRIS, '\n         DC    C'(C)-TSO, '\n         DC    C'(D)-QACICS/'\n         DC    C'QA,  '\n         DC    C'(E)-DEVCICS/'\n         DC    C'DEV  '\n         DC    X'115B601D4013'         SBA(23,01)/SF(40)/IC\nLOGOLEN  EQU   *-LOGOCMD\n         SPACE 3\nSXXEND12 EQU   *\nSXXSIZ12 EQU   SXXEND12-SXXMSG12   CALCULATE SIZE OF MSG 1M\n*\nS32MSG13 DC    YL2(S32END13-*)\n         $IO   ERASE/WRITE        SET 3270 COMMAND CODE\n         $WCC  (MDT)              SETUP WCC\n         $SBA  (1,1)              SET BUFFER ADDRESS\n         $SF   (PROT)             SET ATTRIBUTE BYTE\n         DC    C'GMU-113 SCREEN SIZE SET TO 960 PLEASE CORRECT'\nS32END13 EQU   *\n         EJECT\nS32NSCOM DC    CL32' '\nS3ENSCOM EQU   S32NSCOM\nS3EMSG01 EQU   S32MSG01\nS3EMSG02 EQU   S32MSG02\nS3EMSG03 EQU   S32MSG03\nS3EMSG04 EQU   S32MSG04\nS3EMSG05 EQU   S32MSG05\nS3EMSG06 EQU   S32MSG06\nS3EMSG07 EQU   S32MSG07\nS3EMSG08 EQU   S32MSG08\nS3EMSG09 EQU   S32MSG09\nS3EMSG10 EQU   S32MSG10\nS3EMSG11 EQU   S32MSG11\nS3EMSG12 EQU   SXXMSG12\nS32MSG12 EQU   SXXMSG12\nS3EMSG13 EQU   S32MSG13\nS3ESIZ12 EQU   SXXSIZ12\nS32SIZ12 EQU   SXXSIZ12\nS3EM4OF  EQU   S32M4OF\nSZZMSG12 EQU   SXXMSG12\nSXXTERM  EQU   SZZTERM\nSXXMDL   EQU   SZZMDL\nSXXTIME  EQU   SZZTIME\nS3ETERM  EQU   SZZTERM\nS3EMDL   EQU   SZZMDL\nS3ETIME  EQU   SZZTIME\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        TIME AND DATE STAMP                                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         $SBA  (10,63)\n         DC    C'TERM:'           TELL 'EM IT THE NODE NAME\nSZZTERM  DC    CL13' '            TERM NAME\n         $SBA  (11,68)\nSZZMDL   DC    CL7'MODEL  '       TERMINAL MODEL NUMBER\n         $SBA  (11,30)\nSZZTIME  DC    CL15' '            TIME STAMP\n         EJECT\n         TITLE '* * * * *  N E T S O L  -  MESSAGES FOR 3767'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TEXTS                                                *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nS37MSG01 DC    YL2(S37END01-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-101 XXXXXXXX LOGMODE ENTRY UNDEFINED'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END01 EQU   *\n         SPACE 3\nS37MSG02 DC    YL2(S37END02-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-102 INVALID LOGON SEQUENCE , REENTER'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END02 EQU   *\n         SPACE 3\nS37MSG03 DC    YL2(S37END03-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-103 TERMINAL NOT DEFINED AS CROSS DOMAIN RESOURCE'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END03 EQU   *\n         SPACE 3\nS37MSG04 DC    YL2(S37END04-*)\n         DC    X'15'              CARRIAGE RETURN\nS37M4OF  DC    CL60' '\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END04 EQU   *\n         SPACE 3\nS37MSG05 DC    YL2(S37END05-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-105 USER UNAUTHORIZED FOR THIS APPLICATION'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END05 EQU   *\n         SPACE 3\nS37MSG06 DC    YL2(S37END06-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-106 LOGON IN PROGRESS'\n         DC    X'15'              CARRIAGE RETURN\nS37END06 EQU   *\n         SPACE 3\nS37MSG07 DC    YL2(S37END07-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-107          NOT DEFINED TO VTAM'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END07 EQU   *\n         SPACE 3\nS37MSG08 DC    YL2(S37END08-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-108          IS NOT ACTIVE'  OR LOGMODE INVALID\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END08 EQU   *\n         SPACE 3\nS37MSG09 DC    YL2(S37END09-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-109          NO LONGER ACCEPTING LOGONS'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END09 EQU   *\n         SPACE 3\nS37MSG10 DC    YL2(S37END10-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-110          NEVER ACCEPTING LOGONS'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END10 EQU   *\n         SPACE 3\nS37MSG11 DC    YL2(S37END11-*)\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'GMU-111          TEMPORARILY NOT ACCEPTING LOGONS'\n         DC    X'15'              CARRIAGE RETURN\n         DC    C'ENTER ? '        PROMPT FOR INPUT\nS37END11 EQU   *\n         SPACE 3\nS37MSG12 DC    YL2(S37END12-*)\n         DC    XL2'15'            3767 NL\nS37NSCOM EQU   *\nS37NSNAM DC    C'George Mason University'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        TIME AND DATE STAMP                                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         DC    C'TERM:'           TERM KEYWORD\nS37TERM  DC    CL8' '             TERM NAME\n         DC    CL3' '             FILLER\nS37TIME  DC    CL15' '            TIME STAMP\n         DC    XL2'1515'          CARRIAGE RETURN\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        APPLICATION SELECTION MENU                                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         DC    C'  ENTER TSO, VM, OR WYLBUR'\n         DC    X'15'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        PROMPT FOR INPUT                                             *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         DC    C'ENTER ? '\nS37END12 EQU   *\nS37SIZ12 EQU   S37END12-S37MSG12\n         SPACE 3\nS37MSG13 DC    YL2(S37END13-*)\n         DC    C'GMU-113 PRESS ENTER FOR LOGO'\n         DC    X'15'              CARRIAGE RETURN\nS37END13 EQU   *\n         TITLE '* * * * *  N E T S O L  -  MESSAGES FOR SYSIN'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        MESSAGE TEXTS                                                *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nSINMSG00 DC    YL2(SINEND00-*)\n         DC    C'UNSUPPORTED MESSAGE FOR SYSIN CMDS'\nSINEND00 EQU   *\n         SPACE 3\nSINMSG04 DC    YL2(SINEND04-*)\nSINM4OF  DC    CL60' '\nSINEND04 EQU   *\n         SPACE 3\nSINMSG07 DC    YL2(SINEND07-*)\n         DC    CL60'GMU-107 INVALID COMMAND'\nSINEND07 EQU   *\n         SPACE 3\n         EJECT\n         TITLE '* * * * *  N E T S O L  -  R P L   DSECT CONTINUED'\nIFGRPLX  DSECT\n*        THE FOLLOWING SECTION OF THE WORK AREA IS NOT INITIALIZED BY\n*        THE GETRPL FUNCTION SO NO DATA SHOULD BE PLACED IN THAT NEEDS\n*        TO BE ZERO AT THE BEGINNING\n         SPACE 1\n*        THE FOLLOWING MANIPULATION RESERVES A MESSAGE BUFFER FOR\n*        THE LARGEST EXISTING MESSAGE.\nIOBASE   DS    CL(S32SIZNE)            SPACE FOR 3270 'NEWS' SCREEN\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S32SIZHE)            SPACE FOR 3270 'HELP' SCREEN\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S32SIZAL)            SPACE FOR 3270 'ALL' SCREEN\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S32SIZ12)            SPACE FOR 3270 MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S3ESIZ12)            SPACE FOR 3270 EXTENDED MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         DS    CL(S37SIZ12)            SPACE FOR 3767 MSG 12\n         ORG   IOBASE                  BACK TO START OF BUFFER\n         ORG   ,                       GO TO END OF BUFFER\nLMSG12   EQU   *-IOBASE                CALC MAX MSG 12 SIZE\n         ORG   IOBASE BACK TO START OF BUFFER\nIOAREA   DS    CL(LMSG12)              FOR MSG OUTPUT / INPUT FROM LU\n         ORG   IOAREA+80               ORG OVER SYSIN BUFFER\nNODENAME DS    CL8                     TEMP NODE NAME STORAGE\nDLOGAPPL DS    CL8                     TEMP APPLID STORAGE\nTTEDUMMY DS    CL(TERMELEN)            DUMMY TTE USED BY SYSIN CMDS\nSESSPARM DS    XL120                   INQUIRE(SESSPARM) WORK AREA\n*                                      MAX SIZE ENCOUNTERED IS 88\n         ORG   ,                       ORG BACK TO END OF BUFFER\n*        OUTPUT BUFFER DEFINITION COMPLETE.\nDATASEQ  DS    CL256                   TRANSLATED DATA SEQUENC DC18203\nENDSECT  DS    0D                      END DSECT ON D-WORD\nLNIFGRPL EQU   WORKSPAC-STSECT         LENGTH OF ONE RPL AREA\nIOBUFLEN EQU   ENDSECT-IOAREA          LENGTH OF THE IOAREA\n*                                      WITHOUT THE WORKAREA\n.THEEND  ANOP\n         END\nGORK GORK GORK\n* THE FOLLOWING MENU IS FOR NON-SNA TERMINALS ONLY\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'C7E9'            ROW 7 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL2'A '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== IA/IDMS Administrative Applications '\n*                   1...5....0....5....2....5....3....5....4\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'C8F9'            ROW 8 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL2'B '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== NOTIS Library Support Applications  '\n*                   1...5....0....5....2....5....3....5....4\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'4AC9'            ROW 9 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL2'C '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== TSO/E Time Sharing Options Extended '\n*                   1...5....0....5....2....5....3....5....4\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'4BD9'            ROW 10 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL2'D '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== Training CICS Region        TSTCICS '\n*                   1...5....0....5....2....5....3....5....4\n*\n         DC    X'11'              SET BUFFER ADDRESS ORDER\n         DC    X'4CE9'            ROW 11 COLUMN 10\n         DC    X'1D'              START FIELD ORDER\n         DC    X'F8'              PROTECT SKIP INTENSIFY\n         DC    CL2'E '\n         DC    X'1D'              START FIELD\n         DC    X'F0'              PROTECT SKIP NORMAL\n         DC    CL40'<== Testing CICS Region         TSTNOTIS'\n*                   1...5....0....5....2....5....3....5....4\n*\n*        DC    X'4DF9'            ROW 12 COLUMN 10 (may be wrong!)\n*        DC    X'4FC9'            ROW 13 COLUMN 10\n*        DC    X'50D9'            ROW 14 COLUMN 10\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DATA": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x03O\\t$\\x00\\x00\\x00\\x00\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-03T09:24:00", "lines": 0, "newlines": 0, "modlines": 0, "user": "NETSOL"}, "mimetype": "application/x-empty", "datatype": "binary", "extension": ".x-empty"}, "DOC": {"ttr": 3339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x04\\x1f\\x18\\x18\\x00'\\x00\\x1e\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-10T18:18:00", "lines": 39, "newlines": 30, "modlines": 0, "user": "NETSOL"}, "text": "You should receive the following files:\n\nNETSOL.ALL  - This file is displayed when the ALL command is entered.\nNETSOL.APPL - This is the VTAM appl definition I use.\nNETSOL.ASM  - This is the source for NETSOL.\nNETSOL.DATA - This file contains command executed at statrt-up (empty)\nNETSOL.DOC  - you are reading it\nNETSOL.HELP - This file is displayed when the HELP command is entered.\nNETSOL.JCL  - This is the JCL to assembled and link NETSOL.\nNETSOL.NEWS - This file is displayed when the NEWS command is entered.\nNETSOL.PROC - This is the JCL to run NETSOL.\n\n\n   This is a modified version of the old NETWORK SOLICITOR. I have\ndeleted a lot of old code, but it still needs more clean-up.\nHowever it seems to run fine. You may need to check the processing\nI do to set NIBLMODE. It is based on my local logmode names. You\ncould probably remove this altogether and use the original logmode\nof the terminal (assuming it had one). I put it in for some special\nrequirements with some of out APPL's.\n\n   I am considering modifying NETSOL to process a USS table so it\nwill stay in sync with my real terminals. I only use NETSOL for\nsessions that don't support USS (TCP/IP, and a DECNET GATEWAY).\nI didn't want to use the storage needed to establish sessions\nbetween NETSOL and all my real terminals. This may not be as big\na problem now as it used to be, but USS works well enough so I\nhaven't reconsidered it.\n\n   If you have any problems, or suggestions please let me know.\n\nDavid Juraschek\nMS 1B5 - UCIS\nGeorge Mason University\n4400 University Drive\nFairfax, Va.  22030\n(703) 993-3353\ndavej@gmu.edu\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HELP": {"ttr": 3341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x03O\\t$\\x00\\x14\\x00\\x14\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-03T09:24:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "NETSOL"}, "text": "\n                  G E O R G E  M A S O N  U N I V E R S I T Y\n\n                 U N I V E R S I T Y  C O M P U T I N G  A N D\n                     I N F O R M A T I O N  S Y S T E M S\n\n\n       Hardware Help Line :  (703) 993-3455\n       UCIS Help Desk     :  (703) 993-3444\n       System Status Line :  (703) 993-3365\n\n  Commands you can enter now (or from the menu) are:\n     HELP   (this screen),\n     ALL    (provides a list of all IBM applications),\n     NEWS   (important information relating to the IBM only),\n     EXIT   (disconnect - return to your TELNET origination point)\n\n\n           ONLY FIRST 18 LINES OF THIS MEMBER ARE USED.\n           ONLY FIRST 18 LINES OF THIS MEMBER ARE USED.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCL": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x03O\\t$\\x00\\x16\\x00\\x16\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-03T09:24:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "NETSOL"}, "text": "//ASMNTSOL JOB (SYS,COMM),'NETSOL',\n//             CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1)\n//*\n//ASM     EXEC PGM=IEV90,REGION=4M,\n//             PARM='NODECK,OBJECT,NORLD,XREF(SHORT)'\n//*\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD UNIT=SYSDA,SPACE=(TRK,(10,10))\n//SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=8000\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSLIN    DD DSN=&&OBJ,UNIT=SYSDA,SPACE=(80,(500,50)),DISP=(,PASS)\n//SYSIN     DD DSN=SYS2.NETSOL.ASM,DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,PARM='LET,LIST,MAP,NCAL',\n//             REGION=1M\n//*\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD UNIT=SYSDA,SPACE=(1024,(500,500))\n//SYSLMOD   DD DSN=SYS1.VTAMLIB,DISP=SHR\n//SYSLIN    DD DSN=&&OBJ,DISP=(OLD,DELETE)\n//          DD *\n NAME NETSOL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWS": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x03O\\t$\\x00\\x14\\x00\\x14\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-03T09:24:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "NETSOL"}, "text": "\n                  G E O R G E  M A S O N  U N I V E R S I T Y\n\n                 U N I V E R S I T Y  C O M P U T I N G  A N D\n                     I N F O R M A T I O N  S Y S T E M S\n\n\n\n\n\n  The latest GMU news can be seen by typing NEWS from the CICS command\n  prompt (clear screen) or GMUNEWS from TSO READY Mode.\n\n  Other Commands in TSO ONLY:\n    TSO %GMUNEWS from any screen will produce the current NEWS info.\n    TSO %README will display the GMU System README file for GMUIBM\n        which shows the current hardware and software on GMUIBM.\n\n           ONLY FIRST 18 LINES OF THIS MEMBER ARE USED.\n           ONLY FIRST 18 LINES OF THIS MEMBER ARE USED.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PROC": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x03O\\x00\\x99\\x03O\\t$\\x00\\t\\x00\\t\\x00\\x00\\xd5\\xc5\\xe3\\xe2\\xd6\\xd3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-02-03T00:00:00", "modifydate": "1999-02-03T09:24:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "NETSOL"}, "text": "//NETSOL  EXEC PGM=NETSOL,REGION=1M,PERFORM=5,DPRTY=(15,10)\n//STEPLIB   DD DSN=SYS1.VTAMLIB,DISP=SHR\n//SYSOUT    DD SYSOUT=A\n//SYSUDUMP  DD SYSOUT=A\n//ABNLDUMP  DD DUMMY\n//SYSIN     DD DSN=SYS2.NETSOL.DATA,DISP=SHR\n//NEWSDD    DD DSN=SYS2.NETSOL.NEWS,DISP=SHR\n//HELPDD    DD DSN=SYS2.NETSOL.HELP,DISP=SHR\n//ALLDD     DD DSN=SYS2.NETSOL.ALL,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT356/FILE356.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT356", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}