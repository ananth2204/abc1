{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011841000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE363.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE363.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x04'", "DS1TRBAL": "b'\\xa2\\xf6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xaa\\x00\\n\\x02\\xaa\\x00\\r\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x99\\x07/\\x01\\x00)\\x9f\\x114\\x00 \\x00\\x11\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "2000-10-25T11:34:00", "lines": 32, "newlines": 17, "modlines": 0, "user": "WSBG"}, "text": "This is a thread on the ISPF-L newsgroup, concerning the coding\nof a Data Set Name Change Exit, to dynamically change the name of\nthe ISPF Recovery Data Sets.\n\nIncluded is a coded exit from Stephen Bacher of the Draper Labs\nat M.I.T. in Cambridge, Massachusetts.  The entire thread of\ndiscussion is included as MSG001 thru MSG008.\n\nThis exit (as coded) is invoked under PIE (a vendor product which\nallows the running of multiple TSO sessions under ONE address\nspace).  Since there are (potentially) multiple ISPF sessions which\ncan generate Recovery Data Set names that are identical, we need\nthis exit to make the dataset names unique, by appending the session\nid of the particular PIE session to the dataset name.\n\nHowever, there is much flexibility in this exit routine, as is\ndocumented in the code, and the exit is a good coding example\nto follow if you have some related need.\n\n  Sam Golob  sbgolob@attglobal.net  or  sbgolob@aol.com\n\n  Taken from the following:\nSubj:   ISPF-L Digest - 9 Mar 1999 to 10 Mar 1999 (#1999-50)\nSubj:   ISPF-L Digest - 10 Mar 1999 to 11 Mar 1999 (#1999-51)\nSubj:   ISPF-L Digest - 11 Mar 1999 to 12 Mar 1999 (#1999-52)\n\nFrom:   LISTSERV@LISTSERV.ND.EDU (Automatic digest processor)\nSender: ISPF-L@LISTSERV.ND.EDU (ISPF discussion list)\nReply-to:       ISPF-L@LISTSERV.ND.EDU (ISPF discussion list)\nTo:     ISPF-L@LISTSERV.ND.EDU (Recipients of ISPF-L digests)\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MSG001": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07/!0\\x00\\x0b\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-13T21:30:00", "lines": 11, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "\nDate:    Wed, 10 Mar 1999 18:07:46 -0600\nFrom:    Oscar Omar Ortega Ortega <omarorte@BSANTANDER.COM.MX>\nSubject: Data Set Name Change Exit\n\nHi all,\n        Does any one have a sample of the exit that handles the name\nof the pdf recovery datasets?  I want to insert the system id or smf\nid as one qualifier.  Thanks in advance,\n                        Oscar Omar Ortega\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MSG002": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07/!0\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-13T21:30:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "\nDate:    Thu, 11 Mar 1999 08:58:02 +0100\nFrom:    Peter Weigold <pweigold@CSC.COM>\nSubject: Re: Data Set Name Change Exit\n\nHi,\n\nThere is a sample exit in file 245 of the CBT that is available via\nthe web HTTP://www.cbttape.org.\n\nI have recently installed this exit in an ISPF 4.4 environment\nwithout problems.\n\nPeter\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MSG003": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07/!0\\x00!\\x00 \\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-13T21:30:00", "lines": 33, "newlines": 32, "modlines": 0, "user": "SBGOLOB"}, "text": "\nDate:    Thu, 11 Mar 1999 00:19:34 -0800\nFrom:    \"Leonard D. Woren\" <ldw@LINDY.STANFORD.EDU>\nSubject: Re: Data Set Name Change Exit\n\nOn Wed, Mar 10, 1999 at 06:07:46PM -0600, Oscar Omar Ortega wrote:\n>         Does any one have a sample of the exit that handles the\n> name of the pd recovery datasets? I want to insert the system id\n> or smf id as one qualifier.\n\nLast time I fiddled with recovery datasets (a version or two or three\nago), the recovery dataset names were a bit tricky.  What follows is\nthe situation as I remember it from back then; I have no idea whether\nit still works this way.\n\nThe recovery dataset names are stored in a table in your profile\ndataset (along with some status flags and stuff.)  I think the table\nis named xxxxEDRT, where xxxx is the applid, normally ISR.  There is\na clist (ISREDRT?) which initializes this table.  So, to put the\nsystem id in your recovery dataset names would probably require\ngoing through recovery on any existing datasets, then exiting ISPF\nand deleting the xxxxEDRT members.  Of course, you'd need to modify\nISREDRT first so the new table gets generated with the desired\ndsnames.\n\nWhen I was doing this, it wasn't for multiple systems, but for PIE/\nMultiTSO, where you could run multiple copies of ISPF on a single\nTSO logon.  It's been 10+ years, so I don't even remember if I got\nit working.  I think I did, with a lot of aggravation.\n\n\n/Leonard\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MSG004": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07/!0\\x00\\x0b\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-13T21:30:00", "lines": 11, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "\nDate:    Thu, 11 Mar 1999 09:13:53 -0600\nFrom:    Oscar Omar Ortega <omarorte@BSANTANDER.COM.MX>\nSubject: Re: Data Set Name Change Exit\n\nI installed the EXIT 16 from that cbt file (3 members ISP*), but\nthat's only for log and list temporary files. It does not affect\nrecovery files.  Am I wrong?\n\n                                Oscar Omar\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MSG005": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07/!0\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-13T21:30:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "De:     Peter Weigold\u00ddSMTP:pweigold@CSC.COM\u00a8\nResponder a:    ISPF discussion list\nEnviado el:     jueves 11 de marzo de 1999 1:58\nPara:   ISPF-L@listserv.nd.edu\nAsunto:         Re: Data Set Name Change Exit\n\nHi,\n\nThere is a sample exit in file 245 of the CBT that is available via\nthe web HTTP://www.cbttape.org.\n\nI have recently installed this exit in an ISPF 4.4 environment\nwithout problems.\n\nPeter\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MSG006": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07/!0\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-13T21:30:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SBGOLOB"}, "text": "\nDate:    Thu, 11 Mar 1999 10:45:31 -0500\nFrom:    \"Metz, Seymour\" <smetz@NSF.GOV>\nSubject: Re: Data Set Name Change Exit\n\nI've got an exit for ISPF temporary dataset names; I don't recall\nwhether that includes recovery.\n\nShmuel (Seymour J.) Metz\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MSG007": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07/!0\\x00%\\x00%\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-13T21:30:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SBGOLOB"}, "text": "\nDate:    Thu, 11 Mar 1999 14:17:05 -0600\nFrom:    Mark Zelden <mzelden@FLASH.NET>\nSubject: Re: Data Set Name Change Exit\n\nOscar Omar Ortega wrote:\n>\n> I installed the EXIT 16 from that cbt file (3 members ISP*), but\n> that's only for log and list temporary files. It does not affect\n> recovery files.  Am I wrong?\n>\n>                                 Oscar Omar\n>\n\nYou are correct. EXIT 16 is an ISP exit and is defined\nin ISPXDT with a series of macros (big pain in the you know\nwhat). The Data Set Name Change Exit is an ISR exit and the\nname is specified in the ISPF Configuration Table (NMCHGPGM).\n\nIt would be nice if the ISP exits were defined in ISRCONFG\nas well, but remember that ISPF V4 (and OS/390 ISPF) is really\nthe combination of ISPF/PDF under the covers.\n\nMaybe Doug and the gang can add that enhancement to our Millenium\nX-MAS wish list. :-)\n\n--\n+--------------------------------+--------------------------------+\n| Mark Zelden                    | OS/390 Consultant              |\n| http://www.flash.net/~mzelden/ | 3D Business Solutions          |\n| mailto:mzelden@flash.net       | mailto:mzelden@3dsolutions.com |\n+--------------------------------+--------------------------------+\n\n             Check out my MVS utilities page at:\n          http://www.flash.net/~mzelden/mvsutil.html\n\n------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MSG008": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07/!0\\x00+\\x00*\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-13T21:30:00", "lines": 43, "newlines": 42, "modlines": 0, "user": "SBGOLOB"}, "text": "\nDate:    Fri, 12 Mar 1999 10:33:49 -0500\nFrom:    \"Stephen E. Bacher\" <seb@DRAPER.COM>\nSubject: Re: Data Set Name Change Exit\n\n>Last time I fiddled with recovery datasets (a version or two or\n>three ago), the recovery dataset names were a bit tricky.\n\n\u00ddsnip\u00a8\n\n>When I was doing this, it wasn't for multiple systems, but for PIE/\n>MultiTSO, where you could run multiple copies of ISPF on a single\n>TSO logon.  It's been 10+ years, so I don't even remember if I got\n>it working.\n\nOriginally, PIE provided an update to the ISREDRTI clist (and, by\nextension, also the ISREIRTI clist, which didn't exist at that time)\nto create uniquely named edit recovery data sets.  But when the ISPF\nexits came along, I coded a data set name change exit that changed\nthe recovery data set names to include the PIE session identifier.\n\n(I still have a usermod that modifies ISRE*RTI, but all it does is\nto add a UID() parameter to the CLIST so that our procedure that\ninitializes new TSO/ISPF users can invoke it on behalf of a target\nnew user to precreate their edit recovery table.)\n\nThe data set name change exit (Exit 16) contains all the code\nrequired to append the PIE/MultiTSO session ID character to the\nend of the ISPF recovery backup data set name.\n\nNote my comments here about how ISPF passes the name:\n\n Although this is still not clearly documented in the ISPF Planning\n and Customizing manual, the fact is that when this exit is invoked\n for the RECOVERY data set, the only field filled in is the\n OTHER DATA SET field, and the contents are the FULLY QUALIFIED\n backup data set name WITHOUT QUOTES.  There is no member name.\n\n\n - Steve Bacher\n   Draper Laboratory\n   seb@draper.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XSRNMCHG": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07/\\x00\\x99\\x07?\\x08H\\x01\\xc7\\x01\\xc7\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-13T00:00:00", "modifydate": "1999-03-14T08:48:00", "lines": 455, "newlines": 455, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE 'XSRNMCHG - ISPF/PDF data set name change exit'\n***********************************************************************\n*                                                                     *\n* XSRNMCHG - ISPF/PDF data set name change exit                       *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* Reference: ISPF and ISPF/PDF Version 4 Release 2                    *\n*            Planning and Customizing             -  SC34-4443-01     *\n*            Page 201 - Data Set Name Change Exit                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* DESCRIPTION:  You can use the data set name change exit to change   *\n* the name of the data set entered on the data entry panel.  This     *\n* allows PDF to process using the new data set name without the       *\n* variables originally entered on the panel being changed.  Anywhere  *\n* the data set name is displayed, other than the data entry panel,    *\n* can reflect either the original or the changed data set name.  The  *\n* data entry fields will not reflect any changes made to the data set *\n* name.  If the exit is not specified, all data set names are used    *\n* exactly as they are entered.                                        *\n*                                                                     *\n* PDF calls this exit routine using the standard conventions.  The    *\n* exit is invoked for every data set specified on a data entry panel  *\n* or in a PDF service call at the point in the PDF processing flow    *\n* when the data set name is built from its component parts.  This     *\n* includes the library access services, EDIT and BROWSE services, and *\n* the PDF product dialogs themselves.  The routine must be a program. *\n* All ISPF, PDF and system services are available to it.              *\n*                                                                     *\n* If more than one ISPF library is specified on a data entry panel,   *\n* the exit is invoked once for each library specified before each     *\n* library is allocated.  The libraries are not concatenated until     *\n* each library is processed by the exit and allocated.                *\n*                                                                     *\n* EXIT PARAMETERS:  PDF passes the data set name information as it    *\n* was entered on the panel to the exit routine.  Register 1 points    *\n* to the parameter list.                                              *\n*                                                                     *\n* PDF uses the following parameters to communicate with the data set  *\n* name change exit:                                                   *\n*                                                                     *\n* PROJECT        CHAR(8)  Project name as it was entered on the panel *\n*                                                                     *\n* GROUP          CHAR(8)  Group name as it was entered on the panel   *\n*                                                                     *\n* TYPE           CHAR(8)  Type name as it was entered on the panel    *\n*                                                                     *\n* MEMBER         CHAR(8)  Member name as it was entered on the panel  *\n*                                                                     *\n* OTHER DATA SET CHAR(56) On input to the exit, the other data set    *\n*                         name as entered on the panel.  On output    *\n*                         from the exit, blank or the data set name   *\n*                         to be used.  This may be used to replace an *\n*                         ISPF library.                               *\n*                                                                     *\n* REASON         CHAR(8)  Reason the data set is being allocated      *\n*                                                                     *\n*                 RECOVERY The data set is the edit recovery data set.*\n*                          The OTHER DATA SET field contains the      *\n*                          fully qualified data set name.             *\n*                                                                     *\n*                 TEMP     The data set is a temporary PDF data set.  *\n*                          This includes the following:               *\n*                                                                     *\n*                          * The data set name specified on the       *\n*                            member list SAVE command                 *\n*                                                                     *\n*                          * The data set name specified on the       *\n*                            data set list SAVE command               *\n*                                                                     *\n*                          * The data set name specified under LMF    *\n*                            options 8.5.2.3 and 8.5.3.3 (review      *\n*                            listings)                                *\n*                                                                     *\n*                          * The data set name specified for LMF      *\n*                            options 8.1.3.2, 8.1.3.3 and 8.1.3.4     *\n*                            (initialize, clear of verify member      *\n*                            controls)                                *\n*                                                                     *\n*                          * The data set used during the outlist     *\n*                            utility processing (PDF option 3.8, when *\n*                            using program ISRUOLP instead of CLIST   *\n*                            ISRUOL).                                 *\n*                                                                     *\n*                 blank                                               *\n*                                                                     *\n*                          * Any data set entered on a PDF data       *\n*                            entry panel                              *\n*                                                                     *\n*                          * The LMF member activity log              *\n*                                                                     *\n*                          * The LMF Administrator activity log       *\n*                                                                     *\n*                          * Data sets specified on the LMINIT service*\n*                                                                     *\n*                          * Data sets specified on any service that  *\n*                            does not need an LMINIT to have been     *\n*                            previously performed.                    *\n*                                                                     *\n* Any of the parameters can be modified and are picked up by PDF      *\n* with the exception of the REASON field, which is for the            *\n* information of the exit only.  Both an ISPF library (a              *\n* PROJECT/GROUP/TYPE combination) and an OTHER DATA SET can be        *\n* present in the parameter list.  In this case, the OTHER DATA SET    *\n* name supersedes the ISPF library name.  If an ISPF library          *\n* combination is specified as input to the exit and the exit wishes   *\n* to create a new name that does not fit the ISPF library naming      *\n* convention, the ISPF library name can be replaced by the exit       *\n* filling in the OTHER DATA SET field.                                *\n*                                                                     *\n* Once the data set name has been changed by the exit, PDF does its   *\n* normal data set processing, such as appending the user's prefix if  *\n* an OTHER DATA SET name without quotes is returned by the exit.  The *\n* changed data set name values are not saved in any variable pool,    *\n* but are saved internally by PDF.  The original input fields on the  *\n* data entry panel are not changed, but any title line on a panel     *\n* which contains a data set name can reflect either the original or   *\n* the changed data set name.                                          *\n*                                                                     *\n*                                                                     *\n* Usage Notes:                                                        *\n*                                                                     *\n* 1. Those data sets marked with a reason of TEMP can go through the  *\n*    exit more than once.  The exit should not blindly add qualifiers *\n*    to the TEMP data set names.                                      *\n*                                                                     *\n* 2. Any sequential data set that is used for output, such as being   *\n*    edited, the target of a Move/Copy (option 3.3), the source of    *\n*    an Edit MOVE command or the target of an Edit REPLACE command,   *\n*    or being reallocated by Edit after a space ABEND (B37), is sent  *\n*    through the exit twice.  In addition, if a member is being       *\n*    browsed via the Library utility browse line command (browse      *\n*    under option 3.1), the data set is sent through the exit twice.  *\n*                                                                     *\n* 3. Data sets that are allocated in a CLIST as well as a program or  *\n*    that have their data set names built in a CLIST or skeleton      *\n*    cannot be modified by the data set name exit unless the CLIST or *\n*    skeleton has also been modified to change the data set name in   *\n*    the same way that the exit does.  These data sets include the    *\n*    following:                                                       *\n*                                                                     *\n*    * The list data set name produced by the language processors in  *\n*      Foreground and Batch, and the term data sets in Batch.         *\n*                                                                     *\n*    * The input and output data sets for SUPERC.  The CLISTS to be   *\n*      modified are ISRSFORG and ISRSSRCH.                            *\n*                                                                     *\n*    * The data set created by the Outlist utility (option 3.8) if    *\n*      CLIST ISRUOL is used rather than program ISRUOLP.              *\n*                                                                     *\n* 4. If the data set is being allocated for recovery, the data set    *\n*    name change exit should check the recovery table and generate a  *\n*    unique data set name.                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* NOTE:                                                               *\n*                                                                     *\n* Although this is still not clearly documented in the ISPF Planning  *\n* and Customizing manual, the fact is that when this exit is invoked  *\n* for the RECOVERY data set, the only field filled in is the          *\n* OTHER DATA SET field, and the contents are the FULLY QUALIFIED      *\n* backup data set name WITHOUT QUOTES.  There is no member name.      *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* Corequisites:                                                       *\n*                                                                     *\n* (1) Modify the ISRCONFG module as follows:                          *\n*                                                                     *\n* NMCHGPGM DC  CL8'XSRNMCHG'    Program for data set name change exit *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* Draper usage of this exit:                                          *\n*                                                                     *\n* (1) To change the names of the edit recovery data sets when edit    *\n*     recovery is invoked under a PIE session.  The PIE session       *\n*     number is appended to the end of the data set name to make it   *\n*     unique to that session.                                         *\n*                                                                     *\n*     Note that the modification of CLIST ISREDRTI, while formerly    *\n*     both necessary and sufficient to implement this change, is      *\n*     now neither.                                                    *\n*                                                                     *\n*     Example:                                                        *\n*                                                                     *\n*     If this is PIE session 2, and the name of the edit recovery     *\n*     backup data set passed is ISR0001.BACKUP, this exit changes     *\n*     the name to ISR0001.BACKUP2.                                    *\n*                                                                     *\n* 03/10/88 - We must check that the name we generate is not in use    *\n*            by ISPF, which it sometimes is, particularly when a      *\n*            SAVE is done in one edit and another edit is started up. *\n*            To do this, we test via ENQ to see if the name is in use *\n*            and increment the numeric part of the name until we get  *\n*            a successful not-in-use backup data set name.            *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* As of now this exit does not require any additional storage,        *\n* UNLESS it needs to do an ENQ because it changed the dsname.         *\n* It needs no save area, as it does not do I/O or call subroutines.   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\nXSRNMCHG CSECT\nXSRNMCHG AMODE ANY\nXSRNMCHG RMODE ANY\n         SAVE  (14,12),,XSRNMCHG_&SYSDATE._&SYSTIME\n         LR    R12,R15             Set up base register\n         USING XSRNMCHG,R12        Address our code\n         USING PARMS,R1            Address parameter list\n         EJECT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n* See if we want to handle this call.                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         L     R14,PREASON         Get address of REASON parameter\n         CLC   0(8,R14),=CL8'RECOVERY' If reason is RECOVERY\n         BE    DORECOV                 then process this request.\n         B     RETURN              Otherwise return doing nothing.\n         SPACE 1\nDORECOV  DS    0H                  REASON = RECOVERY\n         SPACE 1\n***********************************************************************\n*                                                                     *\n* Determine if PIE is active.  If it isn't, then do nothing.          *\n*                                                                     *\n* See PIE macro \"#SCVTUTL\" for similar code.                          *\n*                                                                     *\n* This code was written by scanning the PIE control blocks in virtual *\n* storage, and also by taking a sneak peek at PIECHECK.               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         L     R2,X'21C'           Get TCB address from PSA\n         USING TCB,R2\n         L     R2,TCBJSTCB         Get address of job step TCB\n         ICM   R2,15,TCBOTC        Get job step TCB's mother task TCB\n         BZ    RETURN              If none, PIE not active, just return\n         ICM   R2,15,TCBUSER       Else PIE's TCB, so get user field\n         BZ    RETURN              If none, PIE not active, just return\n         DROP  R2\n         CLC   =C'SCVT',0(R2)      Check eyecatcher:  PIE SCVT?\n         BNE   RETURN              If not, PIE not active, just return\n         ICM   R2,15,8(R2)         Else PIE's SCVT, so get addr of STCB\n         BZ    RETURN              If none, PIE not active, just return\n         CLC   =C'STCB',0(R2)      Check eyecatcher:  PIE STCB?\n         BNE   RETURN              If not, PIE not active, just return\n         CLI   X'84'(R2),C'1'      If this is PIE session 1\n         BE    RETURN              then primary session, just return\n         XR    R3,R3               Else clear insert register\n         IC    R3,X'84'(,R2)       Load PIE session ID\n         SPACE 1\n***********************************************************************\n*                                                                     *\n* Now that we've determined that we are in a non-primary PIE session, *\n* we must modify the EDIT recovery data set name.  Scan backwards     *\n* from the end of the \"OTHER DATA SET\" field for the last nonblank.   *\n* Provided the name does not already end in the PIE session character *\n* we append it to the name.                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         L     R4,POTHERDS         Get address of other data set name\n         CLI   0(R4),C' '          If the name is blank\n         BE    ERROR1              then error\n         CLI   0(R4),C''''         If the name begins with a quote\n         BE    ERROR4              then something is not as expected.\n         CLI   55(R4),C' '         If all 56 characters are used\n         BNE   ERROR2              then error\n         LA    R5,54(,R4)          Else point to last possible nonblank\nNAMELOOP DS    0H\n         CLI   0(R5),C' '          Loop until nonblank found\n         BNE   FOUNDNB\n         BCT   R5,NAMELOOP\n*\n* The above loop assumes that (1) the OTHER DATA SET NAME field is\n* never blank, and (2) R5, being an address, will never go to zero.\n* Seems reasonable, no?\n*\nFOUNDNB  DS    0H                  Found nonblank; R5 points to it\n*\n* If there is a member name, we can't deal with it.  There shouldn't.\n*\n         CLI   0(R5),C')'          If a member name was specified\n         BE    ERROR3              then something is terribly wrong.\n*\n* We can stick the character on.\n*\n         CLM   R3,B'0001',0(R5)    If the character is there already\n         BE    RETURN              then do nothing\n         SPACE 1\n         STC   R3,1(,R5)           Else stick it on the end\n*\n* Before returning, we must make sure that the name we have just\n* generated is not in use.  If it is in use, we must modify it.\n*\n         LA    R0,QDL              Get length of area needed\n         GETMAIN R,LV=(0)          Get storage for ENQ parameter list\n         LR    R6,R1               Save address of storage\n         USING QD,R6\n         MVC   ENQ(ENQL),$ENQ      Build ENQ parameter list\n         MVC   ENQRNDSN(44),0(R4)  Move data set name to ENQRNAME\n         MVC   ENQRNMEM(8),=CL8' ' Clear member name portion\n*\n* Scan backwards to locate the numeric portion of the data set name.\n*\n         LA    R1,1(,R5)           Get length of data to scan\n         SR    R1,R4                and bump down by 4 because the\n         SH    R1,=H'4'              period must follow 4 characters\n         LA    R7,ENQRNDSN-1+4(R1) Point to last char in ENQ DSN\nNUMELOOP DS    0H\n         CLI   0(R7),C'.'          Loop until period found\n         BE    FOUND#\n         BCTR  R7,0\n         BCT   R1,NUMELOOP         Continue until data set name is\n         B     ERROR5               exhausted, at which point error\nFOUND#   DS    0H                  R7 -> the period\n         LR    R8,R7               Look for ---nnnn.\n         SH    R8,=H'4'            Point to character 4 bytes before\n         TRT   0(4,R8),NUMTBL      Verify all numerics\n         BNZ   ERROR5\n*\n* Now R8 -> numeric part of dsn.  Prepare for ENQ!\n*\nTRYENQ   DS    0H                  See if dataset is in use\n         ENQ   (ENQQNAME,ENQRNDSN,E,52,SYSTEMS),RET=TEST,MF=(E,ENQ)\n         LTR   R15,R15             If resource is available\n         BZ    AVAIL               then everything is OK.\n*\n* The name must be changed.  Do this by incrementing the numeric part\n* of the name and trying again.\n*\n         PACK  DOUBLE(8),0(4,R8)   Convert to packed decimal\n         AP    DOUBLE(8),=P'1'     Increment\n         UNPK  0(4,R8),DOUBLE(8)   Put back into ENQ dsn\n         OI    3(R8),X'F0'         Fix up zone\n         B     TRYENQ              See if name is available\n         SPACE 1\nAVAIL    DS    0H                  This name is available\n         SPACE 1\n         MVC   0(44,R4),ENQRNDSN   Move back the name\n         LA    R0,QDL              Get length of GETMAINed area\n         LR    R1,R6               Get address of GETMAINed area\n         FREEMAIN R,LV=(0),A=(1)\n******** B     RETURN              and return.\n*\n* Also assume that the final qualifier is less than 8 characters.\n* It should always be BACKUP or BACKUPI.  If not, ISPF will get some\n* kind of dynamic allocation error, so you'll find out about your\n* mistake one way or the other.\n*\n         EJECT\nRETURN   DS    0H                  Return to ISPF\n         SPACE 1\n         LM    R14,R12,12(R13)     Reload registers\n         XR    R15,R15             Set return code to zero\n         BR    R14                 Return\n         EJECT\nERROR1   DS    0H                  \"This shouldn't happen!!!\"\n         SPACE 1\n         WTO   'XSRNMCHG: OTHER DATA SET field blank for RECOVERY DS.',X\n               ROUTCDE=11          Write to programmer\n         B     ABEND\nERROR2   DS    0H                  \"This shouldn't happen!!!\"\n         SPACE 1\n         WTO   'XSRNMCHG: RECOVERY data set name too long to modify.', X\n               ROUTCDE=11          Write to programmer\n         B     ABEND\nERROR3   DS    0H                  \"This shouldn't happen!!!\"\n         SPACE 1\n         WTO   'XSRNMCHG: RECOVERY data set name has a member specifiedX\n               .',ROUTCDE=11       Write to programmer\n         B     ABEND\nERROR4   DS    0H                  \"This shouldn't happen!!!\"\n         SPACE 1\n         WTO   'XSRNMCHG: RECOVERY data set name is enclosed in single X\n               quotes.',ROUTCDE=11 Write to programmer\n         B     ABEND\nERROR5   DS    0H                  \"This shouldn't happen!!!\"\n         SPACE 1\n         WTO   'XSRNMCHG: RECOVERY data set name has no numeric infix pX\n               ortion.',ROUTCDE=11 Write to programmer\n         B     ABEND\nABEND    DS    0H\n         LR    R1,R4\n         LA    R0,44\n         TPUT  (1),(0),R           Display the data set name\n         ABEND 1234,DUMP\n         EJECT\n         SPACE 1\n$ENQ     ENQ   (*-*,*-*,E,*-*,SYSTEMS),RET=TEST,MF=L\nENQL     EQU   *-$ENQ              Length of ENQ parameter list\n         SPACE 1\nENQQNAME DC    CL8'SPFEDIT '       Qname for ENQ\n         SPACE 1\nNUMTBL   DC    256X'FF'            Table to validate numerics\n         ORG   NUMTBL+X'F0'\n         DC    10X'00'\n         ORG   ,\n         SPACE 1\n         LTORG\n         SPACE 1\n         DROP  R12\n         EJECT\nQD       DSECT ,                   Area used to do ENQ\n         SPACE 1\nDOUBLE   DS    D\nENQ      ENQ   (*-*,*-*,E,*-*,SYSTEMS),RET=TEST,MF=L\nENQRNDSN DS    CL44\nENQRNMEM DS    CL8\n         SPACE 1\nQDL      EQU   *-QD\n         EJECT\nPARMS    DSECT ,                   Parameters passed via register 1\n         SPACE 1\nPPROJECT DS    A                   Address of PROJECT\nPGROUP   DS    A                   Address of GROUP\nPTYPE    DS    A                   Address of TYPE\nPMEMBER  DS    A                   Address of MEMBER\nPOTHERDS DS    A                   Address of OTHER DATA SET\nPREASON  DS    A                   Address of REASON\n         SPACE 1\n         IKJTCB ,                  Map the TCB\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT363/FILE363.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT363", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}