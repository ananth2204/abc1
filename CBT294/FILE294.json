{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011652000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 705432, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE294.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 705432, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 705432, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE294.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\r\\x03'", "DS1TRBAL": "b'\\xb1,'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xfc\\x00\\x0e\\x01\\xfd\\x00\\x0c\\x00\\x0e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00B\\x01\\x125\\x9f\\x01\\x125\\x9f\"\\x15\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2012-12-24T00:00:00", "modifydate": "2012-12-24T22:15:42", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-486"}, "text": "REGULAR CBT TAPE - VERSION 486    FILE:  294\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT486.FILE294\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 40 MEMBERS COUNTED; CUMULATIVE SIZE IS 6,481 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/24/12    22:15:42    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00$\\x00$\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "OLDF294"}, "text": "$$DOC......THIS FILE                             ADDED BY CBT\n$CAPDOC....SAME AS DOCUMENT EXCEPT ALL CAPS      ADDED BY CBT\n$CBTJCL....JCL TO INSTALL AT CBT\nASMOPTIM...JCL TO ASSEMBLE\nASMPLOPT...JCL TO ASSEMBLE\nASMVSAMS...JCL TO ASSEMBLE\nASMVSAMS...JCL TO ASSEMBLE\nBUF3270....MACRO\nDATASCRN...SCREEN DESCRIPTION\nDESCSCRN...SCREEN DESCRIPTION\nDOCUMENT...DOCUMENTATION OF THE COMMAND\nDTLSCRN....SCREEN DESCRIPTION\nFIELD......MACRO\nHEADSCRN...SCREEN DESCRIPTION\nHELP.......THE HELP MEMBER                       ADDED BY CBT\nHLP0SCRN...SCREEN DESCRIPTION\nHLP1SCRN...SCREEN DESCRIPTION\nHLP2SCRN...SCREEN DESCRIPTION\nHLP3SCRN...SCREEN DESCRIPTION\nHLP4SCRN...SCREEN DESCRIPTION\nHLP5SCRN...SCREEN DESCRIPTION\nHLP6SCRN...SCREEN DESCRIPTION\nHLP7SCRN...SCREEN DESCRIPTION\nMEMUSCRN...SCREEN DESCRIPTION\nOSINIT.....MACRO\nSBA........MACRO\nSF.........MACRO\nVSAMADEV...ASSEMBLER DSECT\nVSAMADTL...ASSEMBLER MODULE\nVSAMAEQU...SYMBOLIC  EQUATES\nVSAMAGET...ASSEMBLER MODULE\nVSAMAHLP...ASSEMBLER MODULE\nVSAMANAL...ASSEMBLER MODULE\nVSAMANDX...PLI       MODULE\nVSAMAWRK...ASSEMBLER DSECT\nVSAMSIZE...ASSEMBLER MODULE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$CAPDOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00U\\x00 \\x00\\x84\\x08_\\x01\\x125\\x9f\\x12I\\x019\\x018\\x00\\x00\\xc6\\xd6\\xd9\\xf3\\xf3\\xf9\\xf0@@@'", "ispf": {"version": "00.85", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "2012-12-24T12:49:20", "lines": 313, "newlines": 312, "modlines": 0, "user": "FOR3390"}, "text": "\nVSAM ANALYZER\n-------------\n  THE VSAM ANALYZER PROVIDES USERS  WITH A METHOD OF DETERMINING\nHOW MUCH PHYSICAL SPACE A DATASET WILL REQUIRE.  IT CAN ALSO BE\nUSED TO DETERMINE AN OPTIMUM DATA CI-SIZE, CI AND CA FREESPACE\nPERCENTAGES BASED ON FREE RECORD VALUES, TRACK UTILIZATION\nPERCENTAGES, AND OTHER VSAM DATASET STATISTICS THAT ARE HELPFUL\nWHEN DEFINING A NEW DATASET OR ANALYSING EXISTING DATASET\nDEFINITIONS.\n  IF YOU USE THE PLI OPTIMIZING COMPILER THEN YOU MUST CHANGE THE\nENTRY POINT FOR PLI FROM IHESAPB TO PLICALLA. HOWEVER, VSAMANAL\nMAY RUN CONSIDERABLY SLOWER DUE TO TIME SPENT SEARCHING FOR PLI\nMODULES AT EXEC TIME. (REFER TO PLI PROGRAMMER\"S GUIDE FOR MORE\nDETAILS.) IF YOU MUST USE THE OPTIMIZING COMPILER CHANGE THE LINK\nEDIT STEP FOR VSAMANAL TO INCLUDE THE FOLLOWING:\n   //LKED.SYSLMOD  DD  DSN=YOUR.LIB\n   //PLILIB        DD  DSN=IBM.PLI.LIB\n   //SYSIN         DD  *\n    INCLUDE SYSMOD(VSAMANDX)\n    INCLUDE PLILIB(IBMBPIIA)\n    INCLUDE PLILIB(IBMBPGRA)\n    INCLUDE PLILIB(IBMBPITA)\n    NAME VSAMANAL(R)\n   /*\nTHIS WILL GIVE YOU BETTER RESPONSE TIME.\n\n  THE DEVICE TYPES CURRENTLY SUPPORTED ARE 3390'S 3380'S 3350'S\n  AND 3330'S.\n  VSAM ANALYZER IS A TSO COMMAND PROCESSOR FOR 3270 DISPLAYS.  THE\nANALYZER USES 3270 FIELD AND PF KEYS PROCESSING AND CAN BE\nEXECUTED BY ENTERING \"VSAMANAL\" OR AS AN SPF SUB-FUNCTION 9.1.\n\nENTERING INPUT PARAMETERS\n\n  WHEN THE VSAM ANALYZER IS EXECUTED AN INPUT ENTRY SCREEN, WITH\nREQUIRED AND OPTIONAL PARAMETERS WILL BE DISPLAYED\nON YOUR TUBE.  THE FOLLOWING IS A DESCRIPTION OF ALL THE INPUT\nPARAMETERS.\n\n\"AVG-RECSIZE\" - REQUIRED\n\nAVERAGE RECORDIZE.  THIS VALUE CAN BE ANY NUMBER\nFROM 1 TO 32761.  FOR FIXED-LENGTH RECORDS THIS\nIS THE RECORD SIZE.  FOR VARIABLE-LENGTH RECORDS\nTHIS IS THE AVERAGE RECORDSIZE VALUE USED IN ALL\nSPACE AND FREESPACE CALCULATIONS.  REMEMBER A\nTRUE AVERAGE RECORDSIZE SHOULD BE BASED ON RECORD\nSIZES AND OCCURANCES OF THOSE RECORD SIZES.  AN\nINADEQUATE OR EXCESSIVE VALUE WILL CAUSE CORRESPONDING\nSPACE AND FREESPACE VALUES TO BE CALCULATED.\n\n\"MAX-RECSIZE\" - REQUIRED FOR VARIABLE LENGTH RECORDS\n\nMAXIMUM RECORD SIZE FOR VARIABLE LENGTH RECORDS.  THIS\nVALUE CAN BE ANY MEMBER FROM 1 TO 32761 BUT CANNOT BE\nLOWER THAN \"AVG-RECSIZE\".  IT REPRESENTS THE LARGEST\nRECORDSIZE YOUR DATASET WILL CONTAIN.\n\n\"RECORDS T/B LOADED\" - REQUIRED\n\nNUMBER OF RECORDS TO BE LOADED  INTO YOUR DATASET.  THIS\nVALUE CAN BE ANY NUMBER FROM 1 TO 9999999 AND IS USED IN\nTHE CALCULATION OF NON FREE SPACE FOR YOUR DATASET.\n\n\"RECORDS T/B ADDED\" - OPTIONAL\n\nNUMBER OF RECORDS TO BE ADDED TO YOUR DATASET BETWEEN\nREORGANIZATION.  THIS VALUE CAN BE ANY NUMBER FROM 1\nTO 9999999 AND IS USED TO CALCULATE FREESPACE FOR YOUR\nDATASET.\n\nFOR NON-KSDS DATASETS OR FOR KSDS DATASETS WITH NO CI\nAND CA FREE RECORD PERCENTAGES SPECIFIED, THIS VALUE\nWILL BE ADDED TO \"RECORDS T/B LOADED\" VALUE  TO\nDETERMINE SPACE ALLOCATION.\n\nFOR KSDS DATASETS WITH A CI AND/OR  CA FREE RECORD\nPERCENTAGES SPECIFIED, THIS VALUE WILL BE USED TO CALCULATE\nAPPROPRIATE VSAM CI/CA FREESPACE PERCENTAGES THAT WILL\nACCOMODATE THE INDICATED NUMBER OF FREE RECORDS.\n\n\" % ADD RECS CA FREESPACE\" - OPTIONAL\n\nPERCENTAGE OF \"RECORDS T/B ADDED\" VALUE.  THIS VALUE\nCAN BE ANY NUMBER FROM 1 TO 100 AND REPRESENTS A NUMBER\nOF RECORDS VALUE THAT WILL BE USED TO CALCULATE A\nCORRSPONDING VSAM CA FREESPACE PERCPENTAGE.\n\nTHIS PERCENTAGE IS ANALAGOUS TO THE VSAM CA FREESPACE\nPERCENTAGE, EXCEPT IT INDICATES A NUMBER OF FREE RECORDS\nRATHER THAN A NUMBER OF FREE CONTROL INTERVALS.  THE\nVSAM CA FREESPACE PERCENTAGE THAT IS CALCULATED IS BASED\nON THE EVEN DISTRIBUTION OF THE FREE RECORDS, THROUGHOUT\nTHE DATASET, IN FREE CONTROL INTERVALS WITHIN A CONTROL\nAREA.\n\nTHIS VALUE AND THE CI PERCENTAGE VALUE CANNOT BE\nCOLLECTIVELY OVER 100.  IF THEY ARE UNDER 100, THE\nDIFFERENCE (ALSO A PERCENTAGE) IS CONVERTED TO A FREE\nRECORD VALUE, AND A CORRESPONDING SPACE ALLOCATION\nWILL BE ADDED TO THE SPACE ALLOCATION NEEDED FOR \"RECORDS\nT/B LOADED\" AND ANY CI/CA FREESPACE REQUIREMENTS.\n\n\" % ADD RECS CI FREESPACE\" - OPTIONAL\n\nPERCENTAGE OF \"RECORDS T/B ADDED\" VALUE.  THIS VALUE CAN\nBE ANY NUMBER FROM 1 TO 100 AND REPRESENTS A NUMBER OF\nRECORDS VALUE THAT WILL BE USED TO CALCULATE A CORRESPONDING\nVSAM CI FREESPACE PERCENTAGE.\n\nTHIS PERCENTAGE IS ANALAGOUS TO THE VSAM CI FREESPACE,\nEXCEPT IT INDICATES A NUMBER OF FREE RCORDS RATHER THAN\nA NUMBER OF FREE BYTES.  THE VSAM CI FREESPACE PERCENTAGE\nTHAT IS CALCULATED IS BASED ON THE EVEN DISTRIBUTION OF\nTHE FREE RECORDS, THROUGHOUT THE DATASET, IN THOSE CONTROL\nINTERVALS NOT AFFECTED BY THE CA FREESPACE PERCENTAGE.\n\nTHIS VALUE AND THE CA PERPCENTAGE VALUE CANNOT BE\nCOLLECTIVELY OVER 100.  IF THEY ARE UNDER 100, THE\nDIFFERENCE (ALSO A PERCENTAGE) IS CONVERTED TO A FREE\nRECORD VALUE AND A CORRESPONDING SPACE ALLOCATION WHICH\nWILL BE ADDED TO THE SPACE ALLOCATION NEEDED FOR \"RECORDS\nT/B LOADED\" AND ANY CI/CA FREESPACE REQUIREMENTS.\n\n\"DEVICE TYPE\" - REQUIRED\n\nDASD DEVICE TYPE YOUR DATASET WILL BE ON.  CAN BE \"3390\"\nOR \"3380\" OR \"3350\".\n\n\"KEYLENGTH\" - REQUIRED FOR KSDS\n\nLENGTH OF DATASET KEY.\n\n\"IMBED\" - OPTIONAL\n\nCAN BE \"YES\" OR \"NO\".\nSEE \"VSAM ACCESS METHED SERVICES\".\n\n\"REPLICATE\" - OPTIONAL\n\nCAN BE \"YES\" OR \"NO.\nSEE \"VSAM ACCESS METHOD SERVICES\".\n\n\nPF KEY ASSIGNMENTS\n\nTHE PROGRAM FUNCTION KEYS ARE ASSIGNED THE FOLLOWING FUNCTIONS\nFOR ALL VSAM ANALYZER SCREENS.\n\nPF KEY ASSIGNMENTS        FUNCTION\n------------------        --------\n\n1                         TUTORIAL\n2                         NOT USED\n3                         RETURN TO PREVIOUS SCREEN\n4                         EXIT VSAM ANALYZER\n5                         NOT USED\n6                         NOT USED\n7                         PAGE BACK IN SAME SCREEN\n8                         PAGE FORWARD IN SAME SCREEN\n9, 10, 11, 12             NOT USED\n\nDATA CI-SIZE SELECTION AND DISPLAY\n\nWHEN ALL INPUT PARAMETERES HAVE BEEN ENTERED CORRECTLY A DATA\nCI-SIZE SELECTION SCREEN WILL BE DISPLAYED IN THE LOWER HALF\nOF THE TUBE.  ALL AVAILABLE DATA CI-SIZES WILL BE DISPLAYED.\n  THE SCREEN IS PAGEABLE BY USING PF KEYS 7 & 8 FOR BACKWORD\nAND FORWARD DISPLAYS OF ALL DATA CI-SIZES.  USING THE DATA\nCI-SIZE SELECTION CHART YOU CAN SELECT ONE OR MORE CI-SIZES\nFROM THIS SCREEN.  WHEN THE DATA CI-SIZE(S) HAVE BEEN SELECTED\nAND \"ENTER\" IS PRESSED, A DETAIL DISPLAY SCREEN FOR EACH CI-SIZE\nSELECTED (STARTING WITH THE FIRST) WILL BE DISPLAYED IN THE\nLOWER HALF OF YOUR TUBE.  USE PF KEYS 7 & 8 FOR BACKWARD AND\nFORWARD DISPLAYS OF EACH DETAIL CI-SIZE SCREEN.\n\nTHE DETAIL DISPLAY SCREEN GIVES YOU STATISTICS ABOUT YOUR VSAM\nDATASET BASED ON A DATA CI-SIZE SELECTED.  THE FOLLOWING LIST\nIS AN EXPLANATION BY DISPLAY KEYWORD OF EACH STATISTIC DISPLAYED\n\nCONTROL INTERVAL STATISTICS\n\nCISIZE (DATA)\n\nSIZE OF THE SELECTED DATA CI.\n\nCI/CA\n\nNUMBER OF CONTROL INTERVALS IN A CONTROL AREA.\n\nRECS-MAX\n\nMAXIMUM NUMBER OF RECORDS THAT CAN FIT IN A\nCONTROL INTERVAL.  BASED ON \"AVG-RECSIZE\".\n\nRECS-LOAD\n\nNUMBER OF RECORDS THAT WILL BE LOADED INTO\nA CONTROL INTERVAL OF A KSDS/AIX WITH THE\nCI-CA FREESPACE INDICATED.  BASED ON \"AVG-RECSIZE\".\n\nCISIZE (INDEX)\n\nCONTROL INTERVAL SIZE CALCULATED FOR THE INDEX\nCOMPONENT OF A KSDS/AIX.\n\nINDEX LEVELS\n\nNUMBER OF INDEX LEVELS THE INDEX COMPONENT OF A\nKSDS/AIX WILL CONTAIN.\n\nCONTROL AREA STATISTICS\n\nCASIZE (TRKS)\n\nCONTROL AREA SIZE IN TRACKS USED FOR ALL CALCULATIONS.\n\nRECS-MAX\n\nMAXIMUM NUMBER OF RECORDS THAT CAN FIT IN A CONTROL\nAREA.  BASED ON \"AVG-RECSIZE\".\n\nREC-LOAD\n\nNUMBER OF RECORDS THAT WILL BE LOADED INTO A CONTROL\nAREA OF A KSDS/AIX WITH THE CI-CA FREESPACE SPECIFIED.\n\nDATASET STATISTICS\n\nTOTAL-RECS-DSET\n\nMAXIMUM NUMBER OF RECORDS THAT THE DATASET CAN HOLD.  THIS\nVALUE IS THE IDEAL NUMBER, BUT WILL MOST LIKELY BE TOO HIGH\nFOR THOSE DATASETS\nWITH FREESPACE BECAUSE OF CI/CA SPLITTING.  IT MAY ALSO\nVARY FOR VARIABLE LENGTH RECORDS IF THE \"AVG-RECSIZE\" IS\nNOT A TRUE AVERAGE.\n\nTOTAL-RECS-LOAD\n\nNUMBER OF RECORDS THAT CAN BE LOADED INTO A KSDS/AIX\nDATASET WITH FREESPACE SPECIFIED.\n\nVOLUME-PHYSICAL STATISTICS\n\nBLKSIZE (DATA)\n\nPHYSICAL BLOCK SIZE OF THE DATA COMPONENT.\n\nBLKS/TRK\n\nNUMBER OF PHYSICAL BLOCKS PER TRACK.\n\nTRK-UTIL %\n\nPERCENTAGE OF TRACK UTILIZATION BASED ON PHYSICAL\nBLOCK SIZE.\n\n\nCYLNDERS\nTRACKS\n\nNUMBER OF CYLINDERS (IF CASIZE = 1 CYL) OR TRACKS\n(IF CASIZE LESS THAN CYL) NEEDED FOR THE DATA\nCOMPONENT.\n\nBLKSIZE (INDEX)\n\nPHYSICAL BLOCKSIZE OF THE INDEX COMMPONENT.\n\nTRACKS (INDEX)\n\nNUMBER OF TRACKS NEEDED FOR THE INDEX COMPONENT.\n\n\nFREESPACE STATISTICS\n\nCA %\n\nCONTROL AREA FREESPACE PERCENTAGE.  THIS VALUE\nSHOULD BE USED IN THE DEFINE CLUSTER.\n\nFREE CI'S/CA\n\nNUMBER OF FREE CONTROL INTERVALS PER CONTROL AREA.\n\nCI %\n\nCONTROL INTERVAL FREESPACE PERCENTAGE.  THIS VALUE\nSHOULD BE USED IN THE DEFINE CLUSTER.\n\nFREERECS/CI\n\nNUMBER OF FREE RECORDS IN A NON-FREE CONTROL INTERVAL.\n\nFREERECS/CA\n\nNUMBER OF FREE RECORDS IN A CONTROL AREA.\n\nTOTAL-FREE-RECS-DSET\n\nNUMBER OF FREE RECORDS IN THE DATA COMPONENT.  BASED\nON \"AVG-RECSIZE\".\n\n\n***  WARNING ***\n\n    ALL FREE RECORD VALUES ARE IDEAL NUMBERS AND IN MOST CASES\n    WILL ALWAYS BE HIGH.  THIS IS DUE TO CI AND CA SPLITTING\n    THAT CAN OCCUR WHILE INSERTING RECORDS. THEREFORE, IT IS\n    RECOMMENDED THAT THE \"RECORDS T/B ADDED\" VALUE BE LARGE\n    ENOUGH TO ACCOMODATE LOST SPACE THROUGH CI-CA SPLITTING.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CBTJCL": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "OLDF294"}, "text": "//CBT1116 JOB 527TSO000S0008,VSAMANAL,CLASS=J,MSGCLASS=6,\n//          NOTIFY=TS15500\n//STEP00    EXEC PLIX,SO=6\n//SYSIN     DD   DSN=TS15500.CBT1116.PDS(VSAMANDX),DISP=SHR\n//STEP01    EXEC TESTLINK,SO=6,LIB='SYS2.MLINKLIB',NAME=VSAMANDX\n//STEP02    EXEC ASMBLR,SO=6,LIB='TS15500.CBT1116.PDS'\n//SYSLIB    DD   DCB=BLKSIZE=32720\n//SYSIN     DD   DSN=TS15500.CBT1116.PDS(VSAMADTL),DISP=SHR\n//STEP03    EXEC TESTLINK,SO=6,LIB='SYS2.MLINKLIB',NAME=VSAMADTL\n//STEP04    EXEC ASMBLR,SO=6,LIB='TS15500.CBT1116.PDS'\n//SYSLIB    DD   DCB=BLKSIZE=32720\n//SYSIN     DD   DSN=TS15500.CBT1116.PDS(VSAMAGET),DISP=SHR\n//STEP05    EXEC TESTLINK,SO=6,LIB='SYS2.MLINKLIB',NAME=VSAMAGET\n//STEP06    EXEC ASMBLR,SO=6,LIB='TS15500.CBT1116.PDS'\n//SYSLIB    DD   DCB=BLKSIZE=32720\n//SYSIN     DD   DSN=TS15500.CBT1116.PDS(VSAMAHLP),DISP=SHR\n//STEP07    EXEC TESTLINK,SO=6,LIB='SYS2.MLINKLIB',NAME=VSAMAHLP\n//STEP08    EXEC ASMBLR,SO=6,LIB='TS15500.CBT1116.PDS'\n//SYSLIB    DD   DCB=BLKSIZE=32720\n//SYSIN     DD   DSN=TS15500.CBT1116.PDS(VSAMANAL),DISP=SHR\n//STEP09    EXEC TESTLINK,SO=6,LIB='SYS2.MLINKLIB',NAME=VSAMANAL\n INCLUDE A(VSAMANDX)\n INCLUDE B(IBMBPIIA)\n INCLUDE B(IBMBPGRA)\n INCLUDE B(IBMBPITA)\n//A         DD   DSN=SYS2.MLINKLIB,DISP=SHR\n//B         DD   DSN=SYS2.MLINKLIB,DISP=SHR\n//STEP10    EXEC ASMBLR,SO=6,LIB='TS15500.CBT1116.PDS'\n//SYSLIB    DD   DCB=BLKSIZE=32720\n//SYSIN     DD   DSN=TS15500.CBT1116.PDS(VSAMSIZE),DISP=SHR\n//STEP11    EXEC TESTLINK,SO=6,LIB='SYS2.MLINKLIB',NAME=VSAMSIZE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INSTALL": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x94\\x19_\\x00\\x94%\\x8f\\x11\\x00\\x00d\\x003\\x00\\x00\\xe3\\xe2\\xc4\\xc4\\xc3@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1994-07-14T00:00:00", "modifydate": "1994-09-15T11:00:00", "lines": 100, "newlines": 51, "modlines": 0, "user": "TSDDC"}, "text": "//*\n//*      PDSDOC *COMPILE AND ASSEMBLE VSAMANAL TO STEPLIB.............*\n//*\n//PLIXCL   PROC LKLBDSN='SYS1.PLIBASE'\n//PLI      EXEC PGM=IEL0AA,PARM='OBJECT,NODECK'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=SYSDA,\n//             SPACE=(80,(250,100))\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,\n//             SPACE=(1024,(200,50),,CONTIG,ROUND),DCB=BLKSIZE=1024\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST',COND=(9,LT,PLI)\n//SYSLIB   DD  DSN=&LKLBDSN,DISP=SHR\n//         DD  DSN=SYS1.PLIBASE,DISP=SHR\n//SYSLMOD  DD  DSN=&&GOSET(GO),DISP=(MOD,PASS),UNIT=SYSDA,\n//             SPACE=(1024,(50,20,1))\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,\n//             SPACE=(1024,(200,50),,CONTIG,ROUND),DCB=BLKSIZE=1024\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  DUMMY\n//*\n//       PEND  PLIXCL\n//*\n//STEP01  EXEC PLIXCL,\n//             PARM.PLI='OBJECT,NODECK,XREF(SHORT),ATTR',\n//             PARM.LKED='LIST,XREF,MAP,NCAL,REFR,REUS,MAP,OFFSET'\n//PLI.SYSIN DD DISP=SHR,DSN=TSD.TSDDC.VSAMANAL(VSAMANDX)\n//LKED.SYSLMOD DD  DISP=SHR,SPACE=,UNIT=,\n//             DSN=TSD.TSDDC.LOADLIB\n//SYSIN    DD  *\n NAME VSAMANDX(R)\n/*\n//*\n//ANAL    EXEC ASMHCL,\n//             PARM.C='NODECK,OBJECT,TERM,XREF(SHORT)',\n//*            COND.L=(99,NE),\n//             PARM.L='LIST,MAP,REUS,REFR,XREF,LET'\n//C.SYSLIB   DD  DISP=SHR,DSN=TSD.TSDDC.VSAMANAL\n//           DD  DISP=SHR,DSN=SYS1.MACLIB\n//C.SYSTERM  DD  SYSOUT=*\n//C.SYSIN    DD  DISP=SHR,DSN=TSD.TSDDC.VSAMANAL(VSAMANAL)\n/*\n//L.SYSLMOD   DD  DISP=SHR,DSN=TSD.TSDDC.LOADLIB\n//L.SYSLIB    DD  DISP=SHR,DSN=SYS1.PLIBASE\n//            DD  DISP=SHR,DSN=SYS1.PLILINK\n//L.SYSIN    DD *\n  INCLUDE SYSLMOD(VSAMANDX)\n INCLUDE SYSLIB(IBMBPIIA)\n INCLUDE SYSLIB(IBMBPGRA)\n INCLUDE SYSLIB(IBMBPITA)\n  NAME VSAMANL(R)\n/*\n//*\n//ASM3     EXEC ASMHCL,\n//*\n//*\n//*  THE PARM.C OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.C='XREF(SHORT),NODECK,LOAD'\n//C.SYSLIB DD DSN=TSD.TSDDC.VSAMANAL,DISP=SHR\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSPRINT DD SYSOUT=A\n//C.SYSIN DD DSN=TSD.TSDDC.VSAMANAL(VSAMAGET),DISP=SHR\n//L.SYSLMOD DD DSN=TSD.TSDDC.LOADLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMAGET(R)\n/*\n//ASM4     EXEC ASMHCL,\n//*\n//*\n//*  THE PARM.C OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.C='XREF(SHORT),LOAD,NODECK'\n//C.SYSLIB DD DSN=TSD.TSDDC.VSAMANAL,DISP=SHR\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSPRINT DD SYSOUT=A\n//C.SYSIN DD DSN=TSD.TSDDC.VSAMANAL(VSAMADTL),DISP=SHR\n//L.SYSLMOD DD DSN=TSD.TSDDC.LOADLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMADTL(R)\n/*\n//ASM5     EXEC ASMHCL,\n//*\n//*\n//*  THE PARM.C OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.C='XREF(SHORT),LOAD,NODECK'\n//C.SYSLIB DD DSN=TSD.TSDDC.VSAMANAL,DISP=SHR\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSPRINT DD SYSOUT=A\n//C.SYSIN DD DSN=TSD.TSDDC.VSAMANAL(VSAMAHLP),DISP=SHR\n//L.SYSLMOD DD DSN=TSD.TSDDC.LOADLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMAHLP(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE294": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x005\\x01\\x125\\x9f\\x01\\x125\\x9f\"\\x15\\x00\\x15\\x00\\x15\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2012-12-24T00:00:00", "modifydate": "2012-12-24T22:15:35", "lines": 21, "newlines": 21, "modlines": 0, "user": "CBT-486"}, "text": "//***FILE 294 CONTAINS THE SOURCE FOR THE TSO CP CALLED VSAMANAL.   *   FILE 294\n//*           THE LOAD MODULES FOR THIS PROGRAM RESIDE IN FILE 035  *   FILE 294\n//*           OF THIS TAPE.                                         *   FILE 294\n//*                                                                 *   FILE 294\n//*           THE VSAMANAL TSO CP IS USED TO PROVIDE THE USER       *   FILE 294\n//*           WITH A METHOD OF DETERMINING HOW MUCH PHYSICAL        *   FILE 294\n//*           SPACE A DATASET WILL REQUIRE.  IT CAN ALSO BE USED    *   FILE 294\n//*           TO DETERMINE AN OPTIMUM DATA CI-SIZE, CI AND CA       *   FILE 294\n//*           FREESPACE PERCENTAGES BASED ON FREE RECORD VALUES,    *   FILE 294\n//*           TRACK UTILIZATION PERCENTAGES, AND OTHER VSAM         *   FILE 294\n//*           DATASET STATISTICS.  THESE ARE HELPFUL WHEN           *   FILE 294\n//*           DEFINING A NEW DATASET OR ANALYZING EXISTING          *   FILE 294\n//*           DATASET DEFINITIONS.  VSAMANAL USES 3270 I/O.  THE    *   FILE 294\n//*           DEVICES CURRENTLY SUPPORTED ARE 3330'S, 3350'S,       *   FILE 294\n//*           3380'S, AND 3390'S.  (UPDATED 10/94)                  *   FILE 294\n//*                                                                 *   FILE 294\n//*           Fixed to show 3390's and 3380's instead of 3350's     *   FILE 294\n//*           and 3330's.  (SG - Dec 2012)                          *   FILE 294\n//*                                                                 *   FILE 294\n//*           Compiled for CBT File 035 with PL/I Optimizer 1.4.0.  *   FILE 294\n//*                                                                 *   FILE 294\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@INSTALL": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x00$\\x00\\x94\\x19_\\x01\\x125\\x9f\\x16#\\x00n\\x003\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "1994-07-14T00:00:00", "modifydate": "2012-12-24T16:23:24", "lines": 110, "newlines": 51, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBV JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*\n//*      PDSDOC *COMPILE AND ASSEMBLE VSAMANAL TO STEPLIB.............* VSAMANAL\n//*\n//PLIXCL   PROC LKLBDSN='PLI.PLI140.PLIBASE'\n//PLI      EXEC PGM=IEL0AA,PARM='OBJECT,NODECK'\n//STEPLIB  DD  DISP=SHR,DSN=PLI.PLI140.PLIBASE\n//         DD  DISP=SHR,DSN=PLI.PLI140.PLICOMP\n//         DD  DISP=SHR,DSN=PLI.PLI140.PLILINK\n//         DD  DISP=SHR,DSN=PLI.PLI140.PLITASK\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=SYSDA,\n//             SPACE=(80,(250,100))\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,\n//             SPACE=(1024,(200,50),,CONTIG,ROUND),DCB=BLKSIZE=1024\n//LKED     EXEC PGM=IEWL,PARM='XREF,LIST',COND=(9,LT,PLI)\n//SYSLIB   DD  DSN=&LKLBDSN,DISP=SHR\n//         DD  DISP=SHR,DSN=PLI.PLI140.PLIBASE\n//         DD  DISP=SHR,DSN=PLI.PLI140.PLICOMP\n//         DD  DISP=SHR,DSN=PLI.PLI140.PLILINK\n//         DD  DISP=SHR,DSN=PLI.PLI140.PLITASK\n//SYSLMOD  DD  DSN=&&GOSET(GO),DISP=(MOD,PASS),UNIT=SYSDA,\n//             SPACE=(1024,(50,20,1))\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,\n//             SPACE=(1024,(200,50),,CONTIG,ROUND),DCB=BLKSIZE=1024\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  DUMMY\n//*\n//       PEND  PLIXCL\n//*\n//STEP01  EXEC PLIXCL,\n//             PARM.PLI='OBJECT,NODECK,XREF(SHORT),ATTR',\n//             PARM.LKED='LIST,XREF,MAP,REUS,MAP'\n//PLI.SYSIN DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE294(VSAMANDX)\n//LKED.SYSLMOD DD  DISP=SHR,SPACE=,UNIT=,\n//             DSN=SYS1.W$$.LINKLIB\n//SYSIN    DD  *\n NAME VSAMANDX(R)\n/*\n//*\n//ANAL    EXEC ASMACL,\n//             PARM.C='NODECK,OBJECT,TERM,XREF(SHORT)',\n//*            COND.L=(99,NE),\n//             PARM.L='LIST,MAP,REUS,XREF,LET'\n//C.SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.CBT486.FILE294\n//           DD  DISP=SHR,DSN=SYS1.MACLIB\n//C.SYSTERM  DD  SYSOUT=*\n//C.SYSIN    DD  DISP=SHR,DSN=SBGOLOB.CBT486.FILE294(VSAMANAL)\n/*\n//L.SYSLMOD   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//L.SYSLIB    DD  DISP=SHR,DSN=PLI.PLI140.PLIBASE\n//            DD  DISP=SHR,DSN=PLI.PLI140.PLILINK\n//L.SYSIN    DD *\n  INCLUDE SYSLMOD(VSAMANDX)\n INCLUDE SYSLIB(IBMBPIIA)\n INCLUDE SYSLIB(IBMBPGRA)\n INCLUDE SYSLIB(IBMBPITA)\n  NAME VSAMANAL(R)\n/*\n//*\n//ASM3     EXEC ASMACL,\n//*\n//*\n//*  THE PARM.C OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.C='XREF(SHORT),NODECK'\n//C.SYSLIB DD DSN=SBGOLOB.CBT486.FILE294,DISP=SHR\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSPRINT DD SYSOUT=A\n//C.SYSIN DD DSN=SBGOLOB.CBT486.FILE294(VSAMAGET),DISP=SHR\n//L.SYSLMOD DD DSN=SYS1.W$$.LINKLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMAGET(R)\n/*\n//ASM4     EXEC ASMACL,\n//*\n//*\n//*  THE PARM.C OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.C='XREF(SHORT),NODECK'\n//C.SYSLIB DD DSN=SBGOLOB.CBT486.FILE294,DISP=SHR\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSPRINT DD SYSOUT=A\n//C.SYSIN DD DSN=SBGOLOB.CBT486.FILE294(VSAMADTL),DISP=SHR\n//L.SYSLMOD DD DSN=SYS1.W$$.LINKLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMADTL(R)\n/*\n//ASM5     EXEC ASMACL,\n//*\n//*\n//*  THE PARM.C OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.C='XREF(SHORT),NODECK'\n//C.SYSLIB DD DSN=SBGOLOB.CBT486.FILE294,DISP=SHR\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSPRINT DD SYSOUT=A\n//C.SYSIN DD DSN=SBGOLOB.CBT486.FILE294(VSAMAHLP),DISP=SHR\n//L.SYSLMOD DD DSN=SYS1.W$$.LINKLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMAHLP(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMOPTIM": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00U\\x00U\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "OLDF294"}, "text": "//XYT6970A JOB (DC,R412,20,10),'VSAM ANALYZER MODS',MSGCLASS=A,\n//  MSGLEVEL=(1,1),CLASS=O,NOTIFY=XYT6970\n/*JOBPARM S=CCCC\n//* THIS JOB WILL REASSEMBLE AND LINK ALL VSAMANAL MODULES\n//* ALL SPECIAL MACROS ARE IN CBT.FILE294.PDS\n//* OPT(0) GIVES FAST COMPILE SLOW EXECUTION\n//* OPT(2) GIVES SLOW COMPILE FAST EXECUTION\n//ASM1   EXEC  PLIXCL,\n//   PARM.PLI='XREF,A,LIST,MACRO,OPT(2)'\n//PLI.SYSPRINT DD SYSOUT=A\n//PLI.SYSIN   DD  DSN=CBT.FILE294.PDS(VSAMANDX),\n//   DISP=SHR\n//LKED.SYSLMOD DD DSN=A.DC.TEST.LOADLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMANDX(R)\n/*\n//ASM2     EXEC ASMFCL,\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.ASM='XREF(SHORT),LOAD,NODECK',\n//  PARM.LKED='LIST,XREF'\n//ASM.SYSLIB DD DSN=CBT.FILE294.PDS,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=A\n//ASM.SYSIN DD DSN=CBT.FILE294.PDS(VSAMANAL),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.DC.TEST.LOADLIB,\n//   DISP=SHR\n//PLILIB       DD DSN=A.DC.PLILINK,\n//   DISP=SHR\n//SYSIN  DD  *\n INCLUDE SYSLMOD(VSAMANDX)\n INCLUDE PLILIB(IBMBPIIA)\n INCLUDE PLILIB(IBMBPGRA)\n INCLUDE PLILIB(IBMBPITA)\n NAME VSAMANAL(R)\n/*\n//ASM3     EXEC ASMFCL,\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.ASM='XREF(SHORT),NODECK,LOAD'\n//ASM.SYSLIB DD DSN=CBT.FILE294.PDS,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=A\n//ASM.SYSIN DD DSN=CBT.FILE294.PDS(VSAMAGET),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.DC.TEST.LOADLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMAGET(R)\n/*\n//ASM4     EXEC ASMFCL,\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.ASM='XREF(SHORT),LOAD,NODECK'\n//ASM.SYSLIB DD DSN=CBT.FILE294.PDS,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=A\n//ASM.SYSIN DD DSN=CBT.FILE294.PDS(VSAMADTL),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.DC.TEST.LOADLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMADTL(R)\n/*\n//ASM5     EXEC ASMFCL,\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//  PARM.ASM='XREF(SHORT),LOAD,NODECK'\n//ASM.SYSLIB DD DSN=CBT.FILE294.PDS,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=A\n//ASM.SYSIN DD DSN=CBT.FILE294.PDS(VSAMAHLP),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.DC.TEST.LOADLIB,\n//   DISP=SHR\n//SYSIN  DD  *\n NAME VSAMAHLP(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMPLOPT": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "OLDF294"}, "text": "//XYT6970A JOB (DC,R412,20,10),'VSAM ANALYZER MODS',MSGCLASS=A,\n//  MSGLEVEL=(1,1),CLASS=O,NOTIFY=XYT6970\n/*JOBPARM S=CCCC\n//ASM2     EXEC ASMFCL,\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//* PARM.ASM='XREF(SHORT),TEST,NODECK',\n//  PARM.LKED='LIST,XREF'\n//ASM.SYSLIB DD DSN=A.VSAM.ANALYZER.SOURCE,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=A\n//ASM.SYSIN DD DSN=A.VSAM.ANALYZER.SOURCE(VSAMANAL),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.DC.TEST.LOADLIB,\n//   DISP=SHR\n//PLILIB       DD DSN=A.DC.PLILINK,\n//   DISP=SHR\n//SYSIN  DD  *\n INCLUDE SYSLMOD(VSAMANDX)\n INCLUDE PLILIB(IBMBPIIA)\n INCLUDE PLILIB(IBMBPGRA)\n INCLUDE PLILIB(IBMBPITA)\n NAME VSAMANAL(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMVSAMA": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00Q\\x00Q\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "OLDF294"}, "text": "//XYT3960A JOB (DC,R412,20,10),'VSAM ANALYZER MODS',MSGCLASS=R,\n//  MSGLEVEL=(1,1),CLASS=A,NOTIFY=XYT3960\n//* THIS JOB WILL REASSEMBLE AND LINK ALL VSAMANAL MODULES\n//* ALL SPECIAL MACROS ARE IN A.VSAM.ANALYZER.SOURCE\n//ASM1   EXEC  PL1LFCLC,ACCT=(9998,3961,02),\n//   PARM.PL1L='XREF,ATR,LIST,MACRO,OPT=00'\n//PL1L.SYSPRINT DD SYSOUT=1\n//PL1L.SYSIN  DD  DSN=A.VSAM.ANALYZER.SOURCE(VSAMANDX),\n//   DISP=SHR\n//LKED.SYSLMOD DD  DSN=A.VSAM.ANALYZER.LOADLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=1\n//SYSIN  DD  *\n NAME VSAMANDX(R)\n/*\n//\n//ASM2     EXEC FLFASML,ACCT=(9998,8600,02)\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//* PARM.ASM='XREF(SHORT),TEST',\n//* PARM.LKED='LIST,XREF,LET,TEST'\n//ASM.SYSLIB DD DSN=A.VSAM.ANALYZER.SOURCE,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=1\n//ASM.SYSIN DD DSN=A.VSAM.ANALYZER.SOURCE(VSAMANAL),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.VSAM.ANALYZER.LOADLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=1\n//LKED.SYSIN DD *\n  INCLUDE SYSLMOD(VSAMANDX)\n  NAME VSAMANAL(R)\n/*\n//ASM3     EXEC FLFASML,ACCT=(9998,8600,02)\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//* PARM.ASM='XREF(SHORT),TEST',\n//* PARM.LKED='LIST,XREF,LET,TEST'\n//ASM.SYSLIB DD DSN=A.VSAM.ANALYZER.SOURCE,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=1\n//ASM.SYSIN DD DSN=A.VSAM.ANALYZER.SOURCE(VSAMAGET),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.VSAM.ANALYZER.LOADLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=1\n//LKED.SYSIN DD *\n  NAME VSAMAGET(R)\n/*\n//ASM4     EXEC FLFASML,ACCT=(9998,8600,02)\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//* PARM.ASM='XREF(SHORT),TEST',\n//* PARM.LKED='LIST,XREF,LET,TEST'\n//ASM.SYSLIB DD DSN=A.VSAM.ANALYZER.SOURCE,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=1\n//ASM.SYSIN DD DSN=A.VSAM.ANALYZER.SOURCE(VSAMADTL),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.VSAM.ANALYZER.LOADLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=1\n//LKED.SYSIN DD *\n  NAME VSAMADTL(R)\n/*\n//ASM5     EXEC FLFASML,ACCT=(9998,8600,02)\n//*\n//*\n//*  THE PARM.ASM OVERRIDE IS FOR TESTING ONLY\n//*\n//* PARM.ASM='XREF(SHORT),TEST',\n//* PARM.LKED='LIST,XREF,LET,TEST'\n//ASM.SYSLIB DD DSN=A.VSAM.ANALYZER.SOURCE,DISP=SHR,DCB=BLKSIZE=12320\n// DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=1\n//ASM.SYSIN DD DSN=A.VSAM.ANALYZER.SOURCE(VSAMAHLP),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.VSAM.ANALYZER.LOADLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=1\n//LKED.SYSIN DD *\n  NAME VSAMAHLP(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMVSAMS": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "OLDF294"}, "text": "//XYT3961P JOB (DC,R412,20,20),'VSAMANAL VERSION 1',\n//  MSGLEVEL=(1,1),CLASS=B,NOTIFY=SPT8081\n//DC86071  EXEC FLFASML,ACCT=(9998,3960,02)\n//ASM.SYSLIB DD DSN=A.VSAM.ANALYZER.SOURCE,DISP=SHR,DCB=BLKSIZE=12230\n//           DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=1\n//ASM.SYSIN DD DSN=A.VSAM.ANALYZER.SOURCE(VSAMSIZE),DISP=SHR\n//LKED.SYSLMOD DD DSN=A.VSAM.ANALYZER.LOADLIB,DISP=SHR\n//LKED.SYSPRINT DD SYSOUT=1\n//LKED.SYSIN DD *\n  NAME VSAMSIZE(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUF3270": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00K\\x00K\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "OLDF294"}, "text": "         MACRO\n&NAME    BUF3270 &WCC=,&TYPE=\n.********** S T A R T    O F    G L O B A L S / L O C A L S ***********\n         GBLC  &DSECTNM           NAME OF SCREEN DSECT\n         GBLC  &FLINE        LINE POSITION OF FIRST FIELD IN SCREEN\n         GBLC  &FCOLMN     COLUMN POSITION OF FIRST FIELD IN SCREEN\n         LCLA  &COUNT             DSECT NAME -1\n.**********   E N D      O F    G L O B A L S / L O C A L S ***********\n         AIF   ('&TYPE' EQ '').TYPERR\n         AIF   ('&TYPE' EQ 'END').ENDBUF\n         AIF   ('&TYPE' NE 'START').TYPERR\n.STRTBUF ANOP\n         AIF ('&NAME' EQ '').NAMERR\n         AIF (K'&NAME GT 7).NAMERR\n         AIF   ('&DSECTNM' NE '').ENDERR\n&DSECTNM SETC  '&NAME.D'          SET SCREEN DSECT NAME\n.START   ANOP\n         SPACE 3\n         AGO   .WCC\n.NAMERR  ANOP\n         MNOTE 12,'MACRO ''NAME'' SYMBOL NOT SPECIFIED OR GREATER THAN X\n               7 CHARACTERS'\n         MEXIT\n.COMERR  ANOP\n         MNOTE 12,'COMMAND-CODE AND WCC NOT SPECIFIED IN ''WCC'' PARAMEX\n               TER.'\n         MEXIT\n.TYPERR  ANOP\n         MNOTE 12,'''TYPE'' NOT SPECIFIED OR IS INVALID.'\n         MEXIT\n.ENDERR  ANOP\n         MNOTE 12,'NO ''BUF3270 TYPE=END'' SPECIFIED FOR PREVIOUSLY DEFI\n               INED SCREEN.'\n         MEXIT\n.WCC     ANOP\n         SPACE 3\n********************************************************************\n***********  S T A R T    O F    3 2 7 0    B U F F E R ************\n***********                                             ************\n***********                                             ************\n********************        W C C              *********************\n&NAME    DS    0F                 START OF 3270 BUFFER\n         AIF  ('&WCC' EQ '').WCCDFLT\n         DC    XL1'&WCC'          3270(WCC)\n         AGO  .CONTWCC\n.WCCDFLT ANOP\n         DC    XL1'C2'            3270(WCC)\n.CONTWCC ANOP\n         DC    XL3'115D7E'        SPF FULLSCR SIGNAL STRING(TYPE B)\n&DSECTNM DSECT                    START OF SCREEN DSECT\n&NAME.W  DS    XL1                3270(WCC)\n         DS    XL3                SPF FULLSCR SIGNAL STRING(TYPE B)\n&SYSECT  CSECT                    CONTINUE USERS CSECT\n         MEXIT\n.END     ANOP\n*******************************************************************\n         SPACE 2\n         MEXIT\n.ENDBUF  ANOP\n         AIF   ('&WCC' EQ '').ENDCONT\n         MNOTE '''WCC'' PARAMETER IGNORED WHEN ''TYPE=END'' SPECIFIED.'\n.ENDCONT ANOP\n         AIF   ('&FLINE' EQ '').GENLEN\n         FIELD POS=(&FLINE,&FCOLMN),CUR=YES\n.GENLEN  ANOP\n&COUNT   SETA   K'&DSECTNM-1\n&DSECTNM SETC '&DSECTNM'(1,&COUNT)\n&DSECTNM.L EQU *-&DSECTNM        LENGTH OF 3270 SCREEN BUFFER\n&DSECTNM SETC  ''                    SET DSECT NAME TO NULL\n***********                                             ***********\n***********                                             ***********\n***********                                             ***********\n***********    E N D      O F    3 2 7 0    B U F F E R ***********\n*******************************************************************\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATASCRN": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90(/\\x00\\x90(/\\x13\\x08\\x00+\\x00+\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-10-09T00:00:00", "modifydate": "1990-10-09T13:08:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "CART1"}, "text": "DATA     BUF3270 TYPE=START\n         FIELD POS=(13,1),ATTR=(ASKIP,MDTOFF)\nDATAS1   FIELD POS=(14,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO1    FIELD POS=(14,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAS2   FIELD POS=(15,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO2    FIELD POS=(15,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAS3   FIELD POS=(16,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO3    FIELD POS=(16,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAS4   FIELD POS=(17,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO4    FIELD POS=(17,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAS5   FIELD POS=(18,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO5    FIELD POS=(18,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAS6   FIELD POS=(19,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO6    FIELD POS=(19,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAS7   FIELD POS=(20,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO7    FIELD POS=(20,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAS8   FIELD POS=(21,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO8    FIELD POS=(21,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAS9   FIELD POS=(22,1),ATTR=(UP,MDTOFF,HI),DATA=' '\nINFO9    FIELD POS=(22,3),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='                                                  X\n                                          '\nDATAMSG  FIELD POS=(23,1),ATTR=(ASKIP,MDTOFF,HI),                      X\n               DATA='SELECT (KEY ''S'') CONTROL INTERVAL(S) FOR MORE INX\n               FORMATION!!!!                 '\n         FIELD POS=(14,2),CUR=YES\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DESCSCRN": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00U\\x009\\x00\\x84\\x08_\\x01\\x125\\x9f\\x12I\\x00%\\x00%\\x00\\x01\\xc6\\xd6\\xd9\\xf3\\xf3\\xf9\\xf0@@@'", "ispf": {"version": "00.85", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "2012-12-24T12:49:39", "lines": 37, "newlines": 37, "modlines": 1, "user": "FOR3390"}, "text": "DESC     BUF3270 TYPE=START\n         FIELD POS=(1,1),ATTR=(ASKIP,MDTOFF,HI),                       *\n               DATA='------- TUTORIAL --------- V S A M   A N A L Y Z E*\n                R ------- TUTORIAL ---------'\n         FIELD POS=(3,1),ATTR=(ASKIP,OFF),                             X\n               DATA='THIS UTILITY WILL CALCULATE VSAM DATASET INFORMATIX\n               ON FOR 3390 AND 3380 DASD.'\n         FIELD POS=(5,3),ATTR=(ASKIP,OFF),                             X\n               DATA='THE FOLLOWING INFORMATION WILL BE CALCULATED AND DX\n               ISPLAYED FOR A VSAM DATASET'\n         FIELD POS=(7,10),ATTR=(ASKIP,OFF),                            X\n               DATA='CONTROL INTERVAL SIZES AND RELATED ATTRIBUTES.'\n         FIELD POS=(8,10),ATTR=(ASKIP,OFF),                            X\n               DATA='CONTROL AREA SIZES AND RELATED ATTRIBTES.'\n         FIELD POS=(9,10),ATTR=(ASKIP,OFF),                            X\n               DATA='PHYSICAL SPACE REQUIREMENTS AND RELATED ATTRIBUTESX\n               .'\n         FIELD POS=(10,10),ATTR=(ASKIP,OFF),                           X\n               DATA='FREESPACE SPECIFICATIONS AND RELATED ATTRIBUTES.'\n         FIELD POS=(12,3),ATTR=(ASKIP,OFF),                            X\n               DATA='ALL VSAM DATASET TYPES(KSDS/AIX/ESDS/RRDS) ARE SUPX\n               PORTED.'\n         FIELD POS=(14,3),ATTR=(ASKIP,OFF),                            X\n               DATA='SPANNED RECORDS ARE NOT SUPPORTED.'\n         FIELD POS=(16,1),ATTR=(ASKIP,OFF),                            X\n               DATA='PF KEY ASSIGNMENTS FOR ALL MENUS;'\n         FIELD POS=(17,3),ATTR=(ASKIP,OFF),                            X\n               DATA='PF1=TUTORIAL'\n         FIELD POS=(18,3),ATTR=(ASKIP,OFF),                            X\n               DATA='PF3=GO BACK TO PREVIOUS MENU'\n         FIELD POS=(19,3),ATTR=(ASKIP,OFF),                            X\n               DATA='PF4=SPF PRIMARY OPTION MENU'\n         FIELD POS=(20,3),ATTR=(ASKIP,OFF),                            X\n               DATA='PF7=PAGE BACKWARD IN CURRENT MENU'\n         FIELD POS=(21,3),ATTR=(ASKIP,OFF),                            X\n               DATA='PF8=PAGE FORWARD IN CURRENT MENU'\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCUMENT": {"ttr": 789, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00U\\x00\\x12\\x00\\x84\\x08_\\x01\\x125\\x9f\\x12Q\\x019\\x018\\x00\\x15\\xc6\\xd6\\xd9\\xf3\\xf3\\xf9\\xf0@@@'", "ispf": {"version": "00.85", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "2012-12-24T12:51:12", "lines": 313, "newlines": 312, "modlines": 21, "user": "FOR3390"}, "text": "VSAM ANALYZER\n-------------\n  The VSAM analyzer provides users  with a method of determining\nhow much physical space a dataset will require.  It can also be\nused to determine an optimum data CI-size, CI and CA freespace\npercentages based on free record values, track utilization\npercentages, and other VSAM dataset statistics that are helpful\nwhen defining a new dataset or analysing existing dataset\ndefinitions.\n\n  If you use the PLI optimizing compiler the you must change the\nentry point for PLI from ihesapb to PLICALLA. However, vsamanal\nmay run considerably slower due to time spent searching for PLI\nmodules at exec time. (Refer to PLI programmers guide for more\ndetails.) If you must use the optimizing compiler change the link\nedit step for VSAMANAL to include the following:\n   //LKED.SYSLMOD  DD  DSN=YOUR.LIB\n   //PLILIB        DD  DSN=IBM.PLI.LIB\n   //SYSIN         DD  *\n    INCLUDE SYSMOD(VSAMANDX)\n    INCLUDE PLILIB(IBMBPIIA)\n    INCLUDE PLILIB(IBMBPGRA)\n    INCLUDE PLILIB(IBMBPITA)\n    NAME VSAMANAL(R)\n   /*\nThis will give you better response time.\n\n  The device types currently supported are 3390's, 3380's 3350's\n  and 3330's\n  VSAM analyzer is a TSO command processor for 3270 displays.  the\nanalyzer uses 3270 field and PF KEYS processing and can be\nexecuted by entering \"VSAMANAL\" or as an SPF sub-function 9.1.\n\nENTERING INPUT PARAMETERS\n\n  When the VSAM analyzer is executed an input entry screen, with\nrequired and optional parameters will be displayed\non your tube.  The following is a description of all the input\nparameters.\n\n\"AVG-RECSIZE\" - Required\n\nAverage recordize.  This value can be any number\nfrom 1 to 32761.  For fixed-length records this\nis the record size.  For variable-length records\nthis is the average recordsize value used in all\nspace and freespace calculations.  Remember a\ntrue average recordsize should be based on record\nsizes and occurances of those record sizes.  An\ninadequate or excessive value will cause corresponding\nspace and freespace values to be calculated.\n\n\"MAX-RECSIZE\" - Required for variable length records\n\nMaximum record size for variable length records.  This\nvalue can be any member from 1 to 32761 but cannot be\nlower than \"AVG-RECSIZE\".  It represents the largest\nrecordsize your dataset will contain.\n\n\"RECORDS T/B LOADED\" - Required\n\nNumber of records to be loaded  into your dataset.  This\nvalue can be any number from 1 to 9999999 and is used in\nthe calculation of non free space for your dataset.\n\n\"RECORDS T/B ADDED\" - Optional\n\nNumber of records to be added to your dataset between\nreorganization.  This value can be any number from 1\nto 9999999 and is used to calculate freespace for your\ndataset.\n\nFor non-KSDS datasets or for KSDS datasets with no CI\nand CA free record percentages specified, this value\nwill be added to \"RECORDS T/B LOADED\" value  to\ndetermine space allocation.\n\nFor KSDS datasets with a CI and/or  CA free record\npercentages specified, this value will be used to calculate\nappropriate VSAM CI/CA freespace percentages that will\naccomodate the indicated number of free records.\n\n\" % ADD RECS CA FREESPACE\" - Optional\n\nPercentage of \"RECORDS T/B ADDED\" value.  This value\ncan be any number from 1 to 100 and represents a number\nof records value that will be used to calculate a\ncorrsponding VSAM CA freespace percpentage.\n\nThis percentage is analagous to the VSAM CA freespace\npercentage, except it indicates a number of free records\nrather than a number of free control intervals.  The\nVSAM CA freespace percentage that is calculated is based\non the even distribution of the free records, throughout\nthe dataset, in free control intervals within a control\narea.\n\nThis value and the CI percentage value cannot be\ncollectively over 100.  If they are under 100, the\ndifference (also a percentage) is converted to a free\nrecord value, and a corresponding space allocation\nwill be added to the space allocation needed for \"RECORDS\nT/B LOADED\" and any CI/CA freespace requirements.\n\n\" % ADD RECS CI FREESPACE\" - Optional\n\nPercentage of \"RECORDS T/B ADDED\" value.  This value can\nbe any number from 1 to 100 and represents a number of\nrecords value that will be used to calculate a corresponding\nVSAM CI freespace percentage.\n\nThis percentage is analagous to the VSAM CI freespace,\nexcept it indicates a number of free rcords rather than\na number of free bytes.  The VSAM CI freespace percentage\nthat is calculated is based on the even distribution of\nthe free records, throughout the dataset, in those control\nintervals not affected by the CA freespace percentage.\n\nThis value and the CA perpcentage value cannot be\ncollectively over 100.  If they are under 100, the\ndifference (also a percentage) is converted to a free\nrecord value and a corresponding space allocation which\nwill be added to the space allocation needed for \"RECORDS\nT/B LOADED\" and any CI/CA freespace requirements.\n\n\"DEVICE TYPE\" - Required\n\nDASD device type your dataset will be on.  Can be \"3390\"\n\"3380\" or \"3350\" or \"3330\".\n\n\"KEYLENGTH\" - Required for KSDS\n\nLength of dataset key.\n\n\"IMBED\" - Optional\n\nCan be \"YES\" or \"NO\".\nSee \"VSAM ACCESS METHED SERVICES\".\n\n\"REPLICATE\" - Optional\n\nCan be \"YES\" or \"NO.\nSee \"VSAM ACCESS METHOD SERVICES\".\n\n\nPF KEY ASSIGNMENTS\n\nThe program function keys are assigned the following functions\nfor all VSAM analyzer screens.\n\nPF KEY ASSIGNMENTS        FUNCTION\n------------------        --------\n\n1                         Tutorial\n2                         Not used\n3                         Return to previous screen\n4                         Exit VSAM Analyzer\n5                         Not used\n6                         Not used\n7                         Page back in same screen\n8                         Page forward in same screen\n9, 10, 11, 12             Not used\n\nDATA CI-SIZE SELECTION AND DISPLAY\n\nWhen all input parameteres have been entered correctly a data\nCI-size selection screen will be displayed in the lower half\nof the tube.  All available data CI-sizes will be displayed.\n  The screen is pageable by using PF Keys 7 & 8 for backword\nand forward displays of all data CI-sizes.  Using the data\nCI-size selection chart you can select one or more CI-sizes\nfrom this screen.  When the data CI-size(s) have been selected\nand \"ENTER\" is pressed, a detail display screen for each CI-size\nselected (starting with the first) will be displayed in the\nlower half of your tube.  Use PF Keys 7 & 8 for backward and\nforward displays of each detail CI-size screen.\n\nThe detail display screen gives you statistics about your VSAM\ndataset based on a data CI-size selected.  The following list\nis an explanation by display keyword of each statistic displayed\n\nCONTROL INTERVAL STATISTICS\n\nCISIZE (DATA)\n\nSize of the selected data CI.\n\nCI/CA\n\nNumber of control intervals in a control area.\n\nRECS-MAX\n\nMaximum number of records that can fit in a\ncontrol interval.  Based on \"AVG-RECSIZE\".\n\nRECS-LOAD\n\nNumber of records that will be loaded into\na control interval of a KSDS/AIX with the\nCI-CA freespace indicated.  Based on \"AVG-RECSIZE\".\n\nCISIZE (INDEX)\n\nControl interval size calculated for the index\ncomponent of a KSDS/AIX.\n\nINDEX LEVELS\n\nNumber of index levels the index component of a\nKSDS/AIX will contain.\n\nCONTROL AREA STATISTICS\n\nCASIZE (TRKS)\n\nControl area size in tracks used for all calculations.\n\nRECS-MAX\n\nMaximum number of records that can fit in a control\narea.  Based on \"AVG-RECSIZE\".\n\nREC-LOAD\n\nNumber of records that will be loaded into a control\narea of a KSDS/AIX with the CI-CA freespace specified.\n\nDATASET STATISTICS\n\nTOTAL-RECS-DSET\n\nMaximum number of records that the dataset can hold.  This\nvalue is the ideal number, but will most likely be too high\nfor those datasets\nwith freespace because of CI/CA splitting.  It may also\nvary for variable length records if the \"AVG-RECSIZE\" is\nnot a true average.\n\nTOTAL-RECS-LOAD\n\nNumber of records that can be loaded into a KSDS/AIX\ndataset with freespace specified.\n\nVOLUME-PHYSICAL STATISTICS\n\nBLKSIZE (DATA)\n\nPhysical block size of the data component.\n\nBLKS/TRK\n\nNumber of physical blocks per track.\n\nTRK-UTIL %\n\nPercentage of track utilization based on physical\nblock size.\n\n\nCYLNDERS\nTRACKS\n\nNumber of cylinders (if CASIZE = 1 cyl) or tracks\n(if CASIZE less than CYL) needed for the data\ncomponent.\n\nBLKSIZE (INDEX)\n\nPhysical blocksize of the index commponent.\n\nTRACKS (INDEX)\n\nNumber of tracks needed for the index component.\n\n\nFREESPACE STATISTICS\n\nCA %\n\nControl area freespace percentage.  This value\nshould be used in the define cluster.\n\nFREE CI'S/CA\n\nNumber of free control intervals per control area.\n\nCI %\n\nControl interval freespace percentage.  This value\nshould be used in the define cluster.\n\nFREERECS/CI\n\nNumber of free records in a non-free control interval.\n\nFREERECS/CA\n\nNumber of free records in a control area.\n\nTOTAL-FREE-RECS-DSET\n\nNumber of free records in the data component.  Based\non \"AVG-RECSIZE\".\n\n\n***  WARNING ***\n\n    All free record values are IDEAL NUMBERS and in most cases\n    will always be high.  This is due to CI and CA splitting\n    that can occur while inserting records. Therefore, it is\n    recommended that the \"RECORDS T/B ADDED\" value be large\n    enough to accomodate lost space through CI-CA splitting.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DTLSCRN": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x18\\x7f\\x00\\x94\\x18\\x7f\\x079\\x00Q\\x00Q\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-07-06T00:00:00", "modifydate": "1994-07-06T07:39:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "CART1"}, "text": "DETAIL   BUF3270 TYPE=START\n        FIELD POS=(09,1),ATTR=(ASKIP,OFF),                             *\n               DATA=' CONTROL INTERVAL  *   CONTROL AREA    * VOLUME-PH*\n               YSICAL  '\n@FREE1   FIELD POS=(09,60),ATTR=(ASKIP,OFF),DATA='*    FREESPACE      '\n         FIELD POS=(10,1),ATTR=(ASKIP,OFF),DATA='      DATA         *  *\n                   DATA         *      DATA         '\n@FREE2   FIELD POS=(10,60),ATTR=(ASKIP,OFF),DATA='*       DATA        '\n         FIELD POS=(11,1),ATTR=(ASKIP,OFF),                            *\n               DATA='------------------ * ----------------- * ---------*\n               --------'\n@FREE12  FIELD POS=(11,60),ATTR=(ASKIP,OFF),DATA='* ------------------'\n         FIELD POS=(12,1),ATTR=(ASKIP,OFF),DATA='CISIZE'\n@DCISZ   FIELD POS=(12,8),ATTR=(ASKIP,OFF,HI),DATA='          '\n         FIELD POS=(12,19),ATTR=(ASKIP,OFF),DATA=' * CASIZE(TRKS)'\n@DCASZ   FIELD POS=(12,35),ATTR=(ASKIP,OFF,HI),DATA='    '\n         FIELD POS=(12,40),ATTR=(ASKIP,OFF),DATA='* BLKSIZE '\n@BLKSZ   FIELD POS=(12,51),ATTR=(ASKIP,OFF,HI),DATA='        '\n@FREE3   FIELD POS=(12,60),ATTR=(ASKIP,OFF),DATA='* CA%        '\n@CAFREE  FIELD POS=(12,74),ATTR=(ASKIP,OFF,HI),DATA='      '\n         FIELD POS=(13,1),ATTR=(ASKIP,OFF),DATA='CI/CA '\n@CICA    FIELD POS=(13,8),ATTR=(ASKIP,OFF,HI),DATA='          '\n         FIELD POS=(13,19),ATTR=(ASKIP,OFF),                           *\n               DATA=' *                   * BLKS/TRK'\n@BLKTRK  FIELD POS=(13,51),ATTR=(ASKIP,OFF,HI),DATA='        '\n@FREE4   FIELD POS=(13,60),ATTR=(ASKIP,OFF),DATA='* FREECI''S/CA'\n@FCICA   FIELD POS=(13,74),ATTR=(ASKIP,OFF,HI),DATA='      '\n         FIELD POS=(14,1),ATTR=(ASKIP,OFF),DATA='RECS-MAX'\n@MRECCI  FIELD POS=(14,10),ATTR=(ASKIP,OFF,HI),DATA='        '\n         FIELD POS=(14,19),ATTR=(ASKIP,OFF),DATA=' * RECS-MAX'\n@MRECCA  FIELD POS=(14,31),ATTR=(ASKIP,OFF,HI),DATA='        '\n         FIELD POS=(14,40),ATTR=(ASKIP,OFF),DATA='* TRK-UTIL% '\n@TRKUTL  FIELD POS=(14,53),ATTR=(ASKIP,OFF,HI),DATA='      '\n@FREE5   FIELD POS=(14,60),ATTR=(ASKIP,OFF),DATA='* CI%        '\n@CIFREE  FIELD POS=(14,74),ATTR=(ASKIP,OFF,HI),DATA='      '\n@FREE6   FIELD POS=(15,1),ATTR=(ASKIP,OFF),DATA='RECS-LOAD '\n@LRECCI  FIELD POS=(15,12),ATTR=(ASKIP,OFF,HI),DATA='      '\n@FREE7   FIELD POS=(15,19),ATTR=(ASKIP,OFF),DATA=' * RECS-LOAD '\n@LRECCA  FIELD POS=(15,33),ATTR=(ASKIP,OFF,HI),DATA='      '\n         FIELD POS=(15,40),ATTR=(ASKIP,OFF),DATA='*                  '\n@FREE8   FIELD POS=(15,60),ATTR=(ASKIP,OFF),DATA='* FREERECS/CI'\n@FRECCI  FIELD POS=(15,74),ATTR=(ASKIP,OFF,HI),DATA='      '\n         FIELD POS=(16,1),ATTR=(ASKIP,OFF),                            *\n               DATA='          TOTAL-RECS-DSET'\n@DRECS   FIELD POS=(16,27),ATTR=(ASKIP,OFF,HI),DATA='            '\n@TYPESD  FIELD POS=(16,40),ATTR=(ASKIP,OFF),DATA='* CYLNDERS'\n@SPACED  FIELD POS=(16,51),ATTR=(ASKIP,OFF,HI),DATA='        '\n@FREE9   FIELD POS=(16,60),ATTR=(ASKIP,OFF),DATA='* FREERECS/CA'\n@FRECCA  FIELD POS=(16,74),ATTR=(ASKIP,OFF,HI),DATA='      '\n@FREE10  FIELD POS=(17,1),ATTR=(ASKIP,OFF),                            *\n               DATA='          TOTAL-RECS-LOAD'\n@LRECS   FIELD POS=(17,27),ATTR=(ASKIP,OFF,HI),DATA='            '\n@FREE11  FIELD POS=(17,40),ATTR=(ASKIP,OFF),                           *\n               DATA='*      TOTAL-FREE-RECS-DSET'\n@FDRECS  FIELD POS=(17,68),ATTR=(ASKIP,OFF,HI),DATA='            '\n         FIELD POS=(18,1),ATTR=(ASKIP,OFF)\n         DC    X'3C5D7F00'   R/T/A FOR LINES 18,19,20,21,22,23,24\n         BUF3270 TYPE=END\nINDEX    BUF3270 TYPE=START\n         FIELD POS=(18,1),ATTR=(ASKIP,OFF),                            *\n               DATA='--------------------------------------------------*\n               -----------------------------'\n         FIELD POS=(19,1),ATTR=(ASKIP,OFF),                            *\n               DATA='      INDEX        *                   *      INDE*\n               X'\n         FIELD POS=(20,1),ATTR=(ASKIP,OFF),                            *\n               DATA='------------------ * ----------------- * ---------*\n               --------'\n         FIELD POS=(21,1),ATTR=(ASKIP,OFF),DATA='CISIZE'\n@ICISZ   FIELD POS=(21,8),ATTR=(ASKIP,OFF,HI),DATA='          '\n         FIELD POS=(21,19),ATTR=(ASKIP,OFF),                           *\n               DATA=' *                   * BLKSIZE '\n@IBLKSZ  FIELD POS=(21,51),ATTR=(ASKIP,OFF,HI),DATA='        '\n         FIELD POS=(21,60),ATTR=(ASKIP,OFF),                           *\n               DATA='                     INDEX LEVELS'\n@ILEVLS  FIELD POS=(22,14),ATTR=(ASKIP,OFF,HI),DATA='    '\n         FIELD POS=(22,19),ATTR=(ASKIP,OFF),                           *\n               DATA=' *'\n@TYPESI  FIELD POS=(22,40),ATTR=(ASKIP,OFF),DATA='*   TRACKS'\n@SPACEI  FIELD POS=(22,51),ATTR=(ASKIP,OFF,HI),DATA='        '\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIELD": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00W\\x00W\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "OLDF294"}, "text": "         MACRO\n&NAME    FIELD &POS=,&ATTR=,&DATA=,&CUR=NO\n.********** S T A R T    O F    G L O B A L S / L O C A L S ***********\n         GBLC  &DSECTNM           NAME OF SCREEN DSECT\n         GBLC  &FLINE        LINE POSITION OF FIRST FIELD\n         GBLC  &FCOLMN     COLUMN POSITION OF FIRST FIELD\n         LCLC  &DATALEN           LENGTH OF DATA FIELD\n         LCLC  &CURNAME           NAME OF CURSOR FIELD\n         LCLA  &LEN               LENGTH OF DATA FIELD\n         LCLA  &COUNT             WORK COUNTER\n.**********   E N D      OF     G L O B A L S / L O C A L S ***********\n         AIF ('&DSECTNM' EQ '').NOSCRN\n         AIF (K'&NAME GT 7).NAMERR\n********************  S T A R T    O F    F I E L D  ******************\n         AIF   ('&FLINE' NE '').SBA\n&FLINE   SETC  '&POS(1)'     LINE POSITION OF FIRST FIELD IN SCREEN\n&FCOLMN  SETC  '&POS(2)'   COLUMN POSITION OF FIRST FIELD IN SCREEN\n.SBA     ANOP\n         SBA   &POS\n&DSECTNM DSECT                    CONTINUE SCREEN DSECT\n         AIF ('&NAME' EQ '').SBANON\n&NAME.S  DS    XL3                SBA-ADDRESS\n         AGO   .CONT1\n.SBANON  ANOP\n         AIF  ('&CUR' EQ 'YES').CURSBA\n         DS    XL3                SBA-ADDRESS\n         AGO  .CONT1\n.CURSBA  ANOP\n         DS    XL1                SBA\n&COUNT   SETA  K'&DSECTNM-1\n&CURNAME SETC '&DSECTNM'(1,&COUNT).'X'\n&CURNAME DS    XL2                CURSOR ADDRESS\n.CONT1   ANOP\n&SYSECT  CSECT                    CONTINUE USERS CSECT\n         AIF   ('&CUR' EQ 'YES').CURSOR\n         SF    &ATTR\n&DSECTNM DSECT                    CONTINUE SCREEN DSECT\n         AIF   ('&NAME' EQ '').SFNON\n         DS    XL1                START FIELD(X'1D')\n&NAME.A  DS    XL1                ATTRIBUTE BYTE\n         AGO   .CONT2\n.SFNON   ANOP\n         DS    XL1                START FIELD(X'1D')\n         DS    XL1                ATTRIBUTE BYTE\n.CONT2   ANOP\n&SYSECT  CSECT                    CONTINUE USERS CSECT\n         AIF   ('&CUR' EQ 'YES').CURSOR\n         AIF   ('&DATA' NE '').DATA\n         AGO   .END\n.DATA    ANOP\n&LEN     SETA  K'&DATA-2\n&DATALEN SETC  '&LEN'\n         DC    CL&DATALEN&DATA    FIELD DATA\n&DSECTNM DSECT                    CONTINUE SCREEN DSECT\n         AIF   ('&NAME' EQ '').DATANON\n&NAME    DS    CL&DATALEN         FIELD DATA\n&NAME.L  EQU   &DATALEN          FIELD LENGTH\n         AGO   .CONT3\n.DATANON ANOP\n         DS    CL&DATALEN\n.CONT3   ANOP\n&SYSECT  CSECT                    CONTINUE USERS CSECT\n         AGO   .END\n.CURSOR  ANOP\n         AIF   ('&DATA' EQ '').CURCONT\n         MNOTE 'DATA PARAMETER IGNORED WHEN CUR PARAMETER SPECIFIED.'\n.CURCONT ANOP\n         AIF   ('&ATTR' EQ '').CURAGAN\n         MNOTE 'ATTR PARAMETER IGNORED WHEN CUR PARAMETER SPECIFIED.'\n.CURAGAN ANOP\n&FLINE   SETC  ''\n&FCOLMN  SETC  ''\n         DC    XL1'13'            CURSOR\n&DSECTNM DSECT                    CONTINUE SCREEN DSECT\n         DS    XL1                CURSOR\n&SYSECT  CSECT                    CONTINUE USERS CSECT\n.END     ANOP\n********************    E N D      O F    F I E L D  ******************\n         SPACE 2\n         MEXIT\n.NOSCRN  ANOP\n         MNOTE 12,'''BUF3270'' MACRO REQUIRED BEFORE FIRST ''FIELD'' MAC\n               CRO.'\n         MEXIT\n.NAMERR  ANOP\n         MNOTE 12,'MACRO ''NAME'' SYMBOL IS GREATER THAN 7 CHARACTERS.'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HEADSCRN": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x18\\x7f\\x00\\x94\\x18\\x7f\\x07@\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-07-06T00:00:00", "modifydate": "1994-07-06T07:40:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CART1"}, "text": "HEADR    BUF3270 TYPE=START\n         FIELD POS=(9,1),ATTR=(ASKIP,MDTOFF),DATA='DATA COMPONENT'\nFILETYP  FIELD POS=(9,16),ATTR=(ASKIP,MDTOFF),DATA='           '\n         FIELD POS=(9,28),ATTR=(ASKIP,MDTOFF)\n         DC    CL161' '\n         FIELD POS=(11,30),ATTR=(ASKIP,MDTOFF),                        X\n               DATA='LOAD     LOAD    FRSPC     MAX      MAX     SPACE X\n                   DCISZ   TRK/CA   CI/CA   REC/CA   REC/CI   CI-CA   RX\n               EC/CA   REC/CI   CYL-TRK'\n         FIELD POS=(13,1),ATTR=(ASKIP,MDTOFF)\n         DC    CL80' '\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HELP": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00W\\x00\\x16\\x00\\x84\\x08_\\x01\\x125\\x9f!Y\\x01\\x0b\\x01\\x06\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.87", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "2012-12-24T21:59:16", "lines": 267, "newlines": 262, "modlines": 0, "user": "FILE294"}, "text": ")F FUNCTION -\n                 The VSAMANAL command is used to provide the user\n                 with a method of determining how much physical\n                 space a dataset will require.  It can also be used\n                 to determine an optimum data CI-SIZE, CI and CA\n                 freespace percentages based on free record values,\n                 track utilization percentages, and other VSAM\n                 dataset statistics, which are helpful when defining\n                 a new dataset, or when analysing existing dataset\n                 definitions.\n\n                 The devices currently supported are 3390's and\n                 3380's as well as 3350's and 3330's.\n\n                 VSAMANAL is a TSO command processor for 3270 displays.\n                 The analyzer uses 3270 field and PF keys processing\n                 and can be executed by entering \"VSAMANAL\".\n\n)X SYNTAX -\n                 VSAMANAL\n\n)O OPERANDS -\n\n))AVG-RECSIZE -  REQUIRED\n                 This value can be any number from 1 to 32761.  For\n                 fixed length records this is the record size.  For\n                 variable-length records this is the average record-\n                 size value used in all space and freespace cal-\n                 culations.  Remember a true average record size\n                 should be based on record size and occurrences of\n                 those record sizes.  An inadequate or excessive\n                 value will cause corresponding space and free-\n                 space values to be calculated.\n\n))MAX-RECSIZE -  REQUIRED\n                 Maximum record size for variable length records. This\n                 value can be any number from 1 to 32761, but cannot be\n                 lower than 'AVG-RECSIZE'.  It represents the largest\n                 recordsize your dataset will contain.\n\n))RECORDS T/B LOADED - REQUIRED\n                 Number of records to be loaded into your dataset. This\n                 value can be any number from 1 to 9999999 and is used\n                 in the calculation of non free space for your dataset.\n\n))RECORDS T/B ADDED - OPTIONAL\n                 Number of records to be added to your dataset\n                 between reorganizations.  This value can be any\n                 number from 1 to 9999999 and is used to calculate\n                 freespace for your dataset.\n\n                 For NON-KSDS datasets or for KSDS datasets with no CI\n                 and CA free record percentages specified, this value\n                 will be added to \"RECORDS T/B LOADED\" value to\n                 determine space allocation.\n\n                 For KSDS datasets with a CI and/or CA free record\n                 percentages specified, this value will be used to\n                 calcuate appropriate VSAM CI/CA freespace percentages\n                 that will accommodate the indicated number of free\n                 records.\n\n))% ADD RECS CA FREESPACE - OPTIONAL\n                 Percentage of \"RECORDS T/B ADDED\" value.  This value\n                 can be any number from 1 to 100 and represents a\n                 number of records value that will be used to calculate\n                 a corresponding VSAM CA freespace percentage.\n\n                 This percentage is analagous to the VSAM CA\n                 freespace percentage, except it indicates a number of\n                 free records rather than a number of free control\n                 intervals.  The VSAM CA freespace percentage that is\n                 calculated is based on the even distribution of the\n                 free records, throughout the dataset, in free\n                 control intervals within a control area.\n\n                 This value and the CI percentage value cannot be\n                 collectively over 100.  If they are under 100, the\n                 difference (also a percentage) is converted to a free\n                 record value, and a corresponding space allocation\n                 will be added to the space allocation needed for\n                 \"RECORDS T/B LOADED\" and any CI/CA freespace\n                 requirements.\n\n))% ADD RECS CI FREESPACE - OPTIONAL\n                 Percentage of \"RECORDS T/B ADDED\" value.  This value\n                 can be any number from 1 to 100, and represents a\n                 number of records value that will be used to calculate\n                 a corresponding VSAM CI freespace percentage.\n\n                 This percentage is analagous to the VSAM CI\n                 freespace, except that it indicates a number of free\n                 records, rather than a number of free bytes.  The VSAM\n                 CI freespace percentage that is calculated, is based\n                 on the even distribution of the free records,\n                 throughout the dataset, in those control intervals\n                 not affected by the CA freespace percentage.\n\n                 This value and the CA percentage value cannot be\n                 collectively over 100.  If they are under 100, the\n                 difference (also a percentage) is converted to a\n                 free record value, and a corresponding space\n                 allocation which will be added to the space\n                 allocation needed for \"RECORDS T/B LOADED\", and any\n                 CI/CA freespace requirements.\n\n))DEVICE TYPE -  REQUIRED\n                 DASD device type your dataset will be on.  Can be\n                 \"3390\" or \"3380\" or \"3350\" or \"3330\".\n\n))KEYLENGTH -    REQUIRED FOR KSDS\n                 Length of dataset key.\n\n))IMBED -        OPTIONAL\n                 Can be \"YES\" or \"NO\".  See \"VSAM Access\n                 Method Services\".\n\n))REPLICATE -    OPTIONAL\n                 Can be \"YES\" or \"NO\".  See \"VSAM Access\n                 Method Services\".\n\n))PF KEY ASSIGNMENTS\n\n                 PFK KEY       FUNCTION\n                 -------       --------\n                 1             TUTORIAL\n                 2             NOT USED\n                 3             RETURN TO PREVIOUS SCREEN\n                 4             EXIT VSAM ANALYZER\n                 5             NOT USED\n                 6             NOT USED\n                 7             PAGE BACK    IN SAME SCREEN\n                 8             PAGE FORWARD IN SAME SCREEN\n                 9,10,11,12    NOT USED\n\n))DATA CI-SIZE SELECTION AND DISPLAY\n                 When all input parameters have been entered correctly,\n                 a data CI-SIZE selection screen will be displayed in\n                 the lower half of the tube.  All available data CI-\n                 SIZEs will be displayed.\n\n                 The screen is pageable by using PF keys 7 & 8 for\n                 backward and forward displays of all data CI-SIZEs.\n                 Using the data CI-SIZE selection chart, you can select\n                 one or more CI-SIZEs from this screen.  When the data\n                 CI-SIZE(s) have been selected and \"enter\" is pressed,\n                 a detail display screen for each CI-SIZE selected\n                 (starting with the first), will be displayed in the\n                 lower half of your tube.  Use PF keys 7 & 8 for\n                 backward and forward displays of each detail CI-SIZE\n                 screen.\n\n                 The detail display screen gives you statistics about\n                 your VSAM dataset based on a data CI-SIZE selected.\n                 The following list is an explanation by display\n                 keyword of each statistic displayed.\n\n))CONTROL INTERVAL STATISTICS\n\n                 CISIZE (DATA)\n                 Size of the selected data CI.\n\n                 CI/CA\n                 Number of control intervals in a control area.\n\n                 RECS-MAX\n                 Maximum number of records that can fit in a\n                 control interval.  Based on \"AVG-RECSIZE\".\n\n                 RECS-LOAD\n                 Number of records that will be loaded into a control\n                 interval of a KSDS/AIX with the CI-CA freespace\n                 indicated. based on \"AVG-RECSIZE\".\n\n                 CISIZE (INDEX)\n                 Control interval size calculated for the index\n                 components of a KSDS/AIX.\n\n                 INDEX LEVELS\n                 Number of index levels the index components of a\n                 KSDS/AIX will contain.\n\n))CONTROL AREA STATISTICS\n\n                 CASIZE (trks)\n                 Control area size in tracks used for all\n                 calculations.\n\n                 RECS-MAX\n                 Maximum number of records that can fit in a control\n                 area.  Based on \"AVG-RECSIZE\".\n\n                 REC-LOAD\n                 Number of records that will be loaded into a control\n                 area of a KSDS/AIX with the CI-CA freespace specified.\n\n))DATASET STATISTICS\n\n                 TOTAL-RECS-DSET\n                 Maximum number of records that the dataset can hold.\n                 This value is the ideal number, but will most likely\n                 be too high for those datasets with free space,\n                 because of ci/ca splitting.  It may also vary for\n                 variable length records if the \"AVG-RECSIZE\" is not a\n                 true average.\n\n                 TOTAL-RECS-LOAD\n                 Number of records that can be loaded inta a KSDS/AIX\n                 dataset with free space specified.\n\n))VOLUME-PHYSICAL STATISTICS\n\n                 BLKSIZE (data)\n                 Physical block size of the data component.\n\n                 BLKS/TRK\n                 Number of physical blocks per track.\n\n                 TRK-UTIL %\n                 Percentage of tracks utilization based on physical\n                 block size.\n\n                 CYLINDERS\n                 TRACKS\n                 Number of cylinders (if CASIZE = 1 cyl) or tracks (if\n                 CASIZE less than cyl) needed for the data component.\n\n                 BLKSIZE(INDEX)\n                 Physical blocksize of the index component.\n\n                 TRACKS (INDEX)\n                 Number of tracks needed for the index component.\n\n))FREESPACE STATISTICS\n\n                 CA %\n                 Control Area freespace percentage.  This value should\n                 be used in the define cluster.\n\n                 FREE CI'S/CA\n                 Number of free control intervals per control area.\n\n                 CI %\n                 Control Interval freespace percentage.  This value\n                 should be used in the define cluster.\n\n                 FREERECS/CI\n                 Number of free records in a non-free control interval.\n\n                 FREERECS/CA\n                 Number of free records in a control area.\n\n                 TOTAL-FREE-RECS-DSET\n                 Number of free records in the data component.  Based\n                 on \"AVG-RECSIZE\".\n\n))WARNING\n                 ********** WARNING **********\n\n                 All free record values are ideal numbers and in most\n                 cases will always be high.  This is due to CI and\n                 CA splitting that can occur while inserting records.\n                 Therefore, it is recommended that the \"RECORDS T/B\n                 ADDED\" value be large enough to accommodate lost\n                 space through CI-CA splits.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HLP0SCRN": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00U\\x004\\x00\\x84\\x08_\\x01\\x125\\x9f\\x12R\\x007\\x007\\x00\\x01\\xc6\\xd6\\xd9\\xf3\\xf3\\xf9\\xf0@@@'", "ispf": {"version": "00.85", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "2012-12-24T12:52:34", "lines": 55, "newlines": 55, "modlines": 1, "user": "FOR3390"}, "text": "MENU     BUF3270 TYPE=START\n         FIELD POS=(1,1),ATTR=(ASKIP,MDTOFF,HI),                       *\n               DATA='------- TUTORIAL --------- V S A M   A N A L Y Z E*\n                R ------- TUTORIAL ---------'\n         FIELD POS=(2,1),ATTR=(ASKIP,MDTOFF),                          *\n               DATA='ENTER PARAMETERS BELOW:'\n         FIELD POS=(3,4),ATTR=(ASKIP,MDTOFF),DATA='AVG-RECSIZE'\n         FIELD POS=(3,23),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nRECA     FIELD POS=(3,28),ATTR=(UP,MDTOFF,HI),DATA='     '\n         FIELD POS=(3,34),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(3,46),ATTR=(ASKIP,MDTOFF),DATA='MAX-RECSIZE'\n         FIELD POS=(3,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nRECM     FIELD POS=(3,69),ATTR=(UP,MDTOFF,HI),DATA='     '\n         FIELD POS=(3,75),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(4,4),ATTR=(ASKIP,MDTOFF),DATA='RECORDS T/B LOADED'\n         FIELD POS=(4,23),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nRECLOAD  FIELD POS=(4,28),ATTR=(UP,MDTOFF,HI),DATA='       '\n         FIELD POS=(4,36),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(4,46),ATTR=(ASKIP,MDTOFF),DATA='RECORDS T/B ADDED'\n         FIELD POS=(4,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nRECADD   FIELD POS=(4,69),ATTR=(UP,MDTOFF,HI),DATA='       '\n         FIELD POS=(4,77),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(5,4),ATTR=(ASKIP,MDTOFF),DATA='DEVICE TYPE'\n         FIELD POS=(5,23),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nDEVTYPE  FIELD POS=(5,28),ATTR=(UP,MDTON,HI),DATA='3390'\n         FIELD POS=(5,33),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(5,46),ATTR=(ASKIP,MDTOFF),DATA='KEYLENGTH'\n         FIELD POS=(5,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nKEYL     FIELD POS=(5,69),ATTR=(UP,MDTOFF,HI),DATA='   '\n         FIELD POS=(5,73),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(6,4),ATTR=(ASKIP,MDTOFF),DATA='IMBED'\n         FIELD POS=(6,23),ATTR=(ASKIP,HI,MDTOFF),DATA='===>'\nIMB      FIELD POS=(6,28),ATTR=(UP,MDTON,HI),DATA='NO '\n         FIELD POS=(6,32),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(6,46),ATTR=(ASKIP,MDTOFF),DATA='REPLICATE'\n         FIELD POS=(6,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nREPL     FIELD POS=(6,69),ATTR=(UP,MDTON,HI),DATA='NO '\n         FIELD POS=(6,74),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(7,4),ATTR=(ASKIP,MDTOFF),DATA='%-ADD RECS CI FREESP*\n               ACE'\n         FIELD POS=(7,28),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nCIPER    FIELD POS=(7,33),ATTR=(UP,MDTON,HI),DATA='   '\n         FIELD POS=(7,38),ATTR=(ASKIP,MDTOFF),DATA='%-ADD RECS CA FREES*\n               PACE '\n         FIELD POS=(7,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nCAPER    FIELD POS=(7,69),ATTR=(UP,MDTON,HI),DATA='   '\n         FIELD POS=(7,73),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(8,1),ATTR=(ASKIP,MDTOFF,HI),                       *\n               DATA='-------------------'\nERROR    FIELD POS=(8,21),ATTR=(ASKIP,MDTOFF,HI),                      *\n               DATA='----------------------------------------'\n         FIELD POS=(8,62),ATTR=(PL,MDTOFF,HI),                         *\n               DATA='------------------'\n         FIELD POS=(3,29),CUR=YES\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLP1SCRN": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00!\\x00!\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "OLDF294"}, "text": "HELP1    BUF3270 TYPE=START\n         FIELD POS=(1,1),ATTR=(ASKIP,OFF,HI),                          X\n               DATA='------- TUTORIAL --------- V S A M   A N A L Y Z EX\n                R ------- TUTORIAL ---------'\n         FIELD POS=(3,17),ATTR=(ASKIP,OFF),                            X\n               DATA='MENU                                  DESCRIPTION'\n         FIELD POS=(4,1),ATTR=(ASKIP,OFF),                             X\n               DATA='--------------------------------------------------X\n               -----------------------------'\n         FIELD POS=(5,6),ATTR=(ASKIP,OFF),                             X\n               DATA='INPUT SELECTION'\n         FIELD POS=(5,41),ATTR=(ASKIP,OFF),                            X\n               DATA='REQUIRED+OPTIONAL INPUT PARAMETERS.'\n         FIELD POS=(7,6),ATTR=(ASKIP,OFF),                             X\n               DATA='CONTROL INTERVAL SELECTION'\n         FIELD POS=(7,41),ATTR=(ASKIP,OFF),                            X\n               DATA='OUTPUT OF INPUT SELECTION MENU.'\n         FIELD POS=(8,41),ATTR=(ASKIP,OFF),                            X\n               DATA='LIST OF AVAILABLE CONTROL INTERVAL'\n         FIELD POS=(9,41),ATTR=(ASKIP,OFF),                            X\n               DATA='SIZES AND DATASET ATTRIBUTES FOR'\n         FIELD POS=(10,41),ATTR=(ASKIP,OFF),                           X\n               DATA='SELECTIVE PROCESSING.'\n         FIELD POS=(13,6),ATTR=(ASKIP,OFF),                            X\n               DATA='CONTROL INTERVAL DISPLAY'\n         FIELD POS=(13,41),ATTR=(ASKIP,OFF),                           X\n               DATA='OUTPUT OF CONTROL INTERVAL SELECTION'\n         FIELD POS=(14,41),ATTR=(ASKIP,OFF),DATA='MENU.'\n         FIELD POS=(15,41),ATTR=(ASKIP,OFF),                           X\n               DATA='ALL AVAILABLE INFORMATION FOR A'\n         FIELD POS=(16,41),ATTR=(ASKIP,OFF),                           X\n               DATA='SELECTED CONTROL INTERVAL SIZE.'\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLP2SCRN": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "OLDF294"}, "text": "HELP2    BUF3270 TYPE=START\n         FIELD POS=(2,1),ATTR=(ASKIP,OFF),                             X\n               DATA='INPUT SELECTION MENU DESCRIPTION.'\n         FIELD POS=(9,3),ATTR=(ASKIP,OFF),                             X\n               DATA='AVG-RECSIZE (REQUIRED) VALUE 1 TO 32761.'\n         FIELD POS=(10,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  RECORD SIZE FOR FIXED LENGTH RECORDS.'\n         FIELD POS=(11,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  AVERAGE RECSIZE FOR VARIABLE LENGTH RECORDS.'\n         FIELD POS=(12,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  THIS VALUE IS THE BASIS FOR MOST SPACE CALCULATX\n               IONS'\n         FIELD POS=(13,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   SO FOR VARIABLE LENGTH RECORDS IT SHOULD BE'\n         FIELD POS=(14,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   DETERMINED BY RECORDSIZE RANGE AND RECORDSIZE'\n         FIELD POS=(15,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   OCCURANCES SO THAT INADEQUATE OR EXCESSIVE SPACX\n               E'\n         FIELD POS=(16,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   AND FREESPACE SPECIFICATIONS ARE NOT CALCULATEDX\n               .'\n         FIELD POS=(18,3),ATTR=(ASKIP,OFF),                            X\n               DATA='MAX=RECSIZE (REQUIRED-VARIABLE) VALUE 1 TO 32761.'\n         FIELD POS=(19,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  MAXIMUM RECORDSIZE FOR VARIABLE LENGTH RECORDS.X\n               '\n         FIELD POS=(20,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  MUST BE GREATER THAN OR EQUAL TO ''AVG-RECSIZE'X\n               '.'\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLP3SCRN": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00U\\x00\\x05\\x00\\x84\\x08_\\x01\\x125\\x9f\\x12S\\x00\\x17\\x00\\x17\\x00\\x01\\xc6\\xd6\\xd9\\xf3\\xf3\\xf9\\xf0@@@'", "ispf": {"version": "00.85", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "2012-12-24T12:53:05", "lines": 23, "newlines": 23, "modlines": 1, "user": "FOR3390"}, "text": "HELP3    BUF3270 TYPE=START\n         FIELD POS=(2,1),ATTR=(ASKIP,OFF),                             X\n               DATA='INPUT SELECTION MENU DESCRIPTION:'\n         FIELD POS=(9,3),ATTR=(ASKIP,OFF),                             X\n               DATA='RECORDS T/B LOADED (REQUIRED) VALUE 1 TO 9999999.'\n         FIELD POS=(10,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  NUMBER OF RECORDS TO BE LOADED INTO DATASET.'\n         FIELD POS=(12,3),ATTR=(ASKIP,OFF),                            X\n               DATA='RECORDS T/B ADDED (OPTIONAL) VALUE 1 TO 9999999.'\n         FIELD POS=(13,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  NUMBER OF FREE RECORDS POSITIONS YOU WANT LEFT'\n         FIELD POS=(14,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   AFTER INITIAL DATASET LOAD.'\n         FIELD POS=(15,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  USED TO DETERMINE CI-CA FREESPACE PERCENTAGES'\n         FIELD POS=(16,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   FOR KSDS AND AIX DATASETS.'\n         FIELD POS=(18,3),ATTR=(ASKIP,OFF),                            X\n               DATA='DEVICE TYPE (REQUIRED,DEFAULT=3390) VALUE ''3380''X\n                OR ''3350''.'\n         FIELD POS=(19,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  TYPE OF DASD WHERE DATASET IS DEFINED.'\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLP4SCRN": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "OLDF294"}, "text": "HELP4    BUF3270 TYPE=START\n         FIELD POS=(2,1),ATTR=(ASKIP,OFF),                             X\n               DATA='INPUT SELECTION MENU DESCRIPTION:'\n         FIELD POS=(9,3),ATTR=(ASKIP,OFF),                             X\n               DATA='KEYLENGTH (REQUIRED FOR KSDS/AIX) VALUE 1 TO 255.'\n         FIELD POS=(10,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  LENGTH OF KSDS/AIX RECORD KEY.'\n         FIELD POS=(12,3),ATTR=(ASKIP,OFF),                            X\n               DATA='IMBED (OPTIONAL,DEFAULT=NO) VALUE ''NO'' OR ''YES'X\n               '.'\n         FIELD POS=(13,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  IGNORED IF KEYLENGTH IS NULL OR ''0''.'\n         FIELD POS=(15,3),ATTR=(ASKIP,OFF),                            X\n               DATA='REPLICATE (OPTIONAL,DEFAULT=NO) VALUE ''NO'' OR ''X\n               YES''.'\n         FIELD POS=(16,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  IGNORED IF KEYLENGTH IS NULL OF ''0''.'\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLP5SCRN": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00,\\x00,\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "OLDF294"}, "text": "HELP5    BUF3270 TYPE=START\n         FIELD POS=(2,1),ATTR=(ASKIP,OFF),                             X\n               DATA='INPUT SELECTION MENU DESCRIPTION:'\n         FIELD POS=(9,3),ATTR=(ASKIP,OFF),                             X\n               DATA='%-ADD RECS CI FREESPACE (OPTIONAL) DEFAULT=0  VALUX\n               E=0 TO 100'\n         FIELD POS=(10,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  INDICATES THE PERCENTAGE OF \"RECORDS T/B ADDED\"X\n               '\n         FIELD POS=(11,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   (FREE RECORD SLOTS) THAT ARE TO BE LEFT IN CONTX\n               ROL'\n         FIELD POS=(12,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   INTERVAL FREESPACE.'\n         FIELD POS=(13,3),ATTR=(ASKIP,OFF),                            X\n               DATA='%-ADD RECS CA FREESPACE (OPTIONAL) DEFAULT=0 VALUEX\n               E=0 TO 100'\n         FIELD POS=(14,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  INDICATES THE PERCENTAGE OF \"RECORDS T/B ADDED\"X\n               '\n         FIELD POS=(15,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   (FREE RECORDS SLOTS) THAT ARE TO BE LEFT IN CONT\n               TROL'\n         FIELD POS=(16,24),ATTR=(ASKIP,OFF),                           X\n               DATA='   AREA FREESPACE.'\n         FIELD POS=(17,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  BOTH PARAMETERS ARE VALID ONLY FOR KSDA/AIX DATA\n               SETS.'\n         FIELD POS=(19,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*  NOTE: \"%-ADD RECS CI FREESPACE\" AND \"%-FREE RECX\n               S'\n         FIELD POS=(20,24),ATTR=(ASKIP,OFF),                           X\n               DATA='         CA FREESPACE\" CANNOT COLLECTIVELY BE OVERX\n                100.'\n         FIELD POS=(21,24),ATTR=(ASKIP,OFF),                           X\n               DATA='*        IF THEY ARE UNDER 100 THE DIFFERENCE (IN X\n               FREE'\n         FIELD POS=(22,24),ATTR=(ASKIP,OFF),                           X\n               DATA='         RECORD SLOTS) WILL BE CALCULATED TO EXISTX\n               '\n         FIELD POS=(23,24),ATTR=(ASKIP,OFF),                           X\n               DATA='         AT THE END OF DATASET AFTER THE INITIAL LX\n               OAD.'\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HLP6SCRN": {"ttr": 1296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00)\\x00)\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "OLDF294"}, "text": "HELP6    BUF3270 TYPE=START\n         FIELD POS=(1,1),ATTR=(ASKIP,MDTOFF,HI),                       *\n               DATA='------- TUTORIAL --------- V S A M   A N A L Y Z E*\n                R ------- TUTORIAL ---------'\n         FIELD POS=(2,1),ATTR=(ASKIP,OFF),                             X\n               DATA='CONTROL INTERVAL SELECTION MENU DESCRIPTION:'\n         FIELD POS=(4,1),ATTR=(ASKIP,MDTOFF),DATA='DATA COMPONENT'\nFILETYP  FIELD POS=(4,16),ATTR=(ASKIP,MDTOFF),DATA='(KSDS/AIX) '\n         FIELD POS=(4,28),ATTR=(ASKIP,MDTOFF)\n         DC    CL161' '\n         FIELD POS=(6,30),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='LOAD     LOAD    FRSPC     MAX      MAX     SPACE X\n                   DCISZ   TRK/CA   CI/CA   REC/CA   REC/CI   CI-CA   RX\n               EC/CA   REC/CI   CYL-TRK'\n         FIELD POS=(8,1),ATTR=(ASKIP,OFF),                             X\n               DATA='S     512    30      810      2000         3   50-X\n                50    4000        6    100 C'\n         FIELD POS=(9,1),ATTR=(ASKIP,OFF),                             X\n               DATA='     1024    30      400      2500         5   40-X\n                45    5000        9     85 C'\n         FIELD POS=(10,1),ATTR=(ASKIP,OFF),                            X\n               DATA='S    1536    30      330      2100         4   38-X\n                41    4700        7     93 C'\n         FIELD POS=(12,1),ATTR=(ASKIP,MDTOFF),                         X\n               DATA='SELECT (KEY ''S'') CONTOL INTERVAL(S) FOR MORE INFX\n               ORMATION             '\n         FIELD POS=(13,1),ATTR=(ASKIP,OFF),                            X\n               DATA='---------------------------------------------------\n               -----------------------------'\n         FIELD POS=(15,1),ATTR=(ASKIP,OFF),                            X\n               DATA='THIS SCREEN LISTS AVAILABLE CONTROL INTERVAL SIZESX\n                FOR YOUR DATASET.'\n         FIELD POS=(17,1),ATTR=(ASKIP,OFF),                            X\n               DATA='ONE OR MORE CONTROL INTERVALS CAN BE SELECTED FOR X\n               A MORE EXTENSIVE DISPLAY'\n         FIELD POS=(18,1),ATTR=(ASKIP,OFF),                            X\n               DATA='OF ASSOCIATED ATTRIBUTES.'\n         FIELD POS=(20,1),ATTR=(ASKIP,OFF),                            X\n               DATA='THIS IS A MULTIPAGE SCREEN(PF7=PAGE BACKWARD, PF8=X\n               PAGE FORWARD).'\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLP7SCRN": {"ttr": 1298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00]\\x00]\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "OLDF294"}, "text": "HELP7    BUF3270 TYPE=START\n         FIELD POS=(1,1),ATTR=(ASKIP,MDTOFF,HI),                       *\n               DATA='------- TUTORIAL --------- V S A M   A N A L Y Z E*\n                R -------- TUTORIAL --------'\n         FIELD POS=(2,1),ATTR=(ASKIP,OFF),                             X\n               DATA='CONTROL INTERVAL DISPLAY MENU DESCRIPTION:'\n        FIELD POS=(03,1),ATTR=(ASKIP,OFF),                             *\n               DATA=' CONTROL INTERVAL  *   CONTROL AREA    * VOLUME-PH*\n               YSICAL  '\n@FREE1   FIELD POS=(03,60),ATTR=(ASKIP,OFF),DATA='*    FREESPACE      '\n          FIELD POS=(4,1),ATTR=(ASKIP,OFF),DATA='      DATA         *  *\n                   DATA         *      DATA         '\n@FREE2   FIELD POS=(4,60),ATTR=(ASKIP,OFF),DATA='*       DATA        '\n         FIELD POS=(05,1),ATTR=(ASKIP,OFF),                            *\n               DATA='------------------ * ----------------- * ---------*\n               --------'\n@FREE12  FIELD POS=(05,60),ATTR=(ASKIP,OFF),DATA='* ------------------'\n         FIELD POS=(06,1),ATTR=(ASKIP,OFF),DATA='CISIZE'\n@DCISZ   FIELD POS=(06,8),ATTR=(ASKIP,OFF,HI),DATA='-------512'\n         FIELD POS=(06,19),ATTR=(ASKIP,OFF),DATA=' * CASIZE(TRKS)'\n@DCASZ   FIELD POS=(06,35),ATTR=(ASKIP,OFF,HI),DATA='--30'\n         FIELD POS=(06,40),ATTR=(ASKIP,OFF),DATA='* BLKSIZE '\n@BLKSZ   FIELD POS=(06,51),ATTR=(ASKIP,OFF,HI),DATA='-----512'\n@FREE3   FIELD POS=(06,60),ATTR=(ASKIP,OFF),DATA='* CA%        '\n@CAFREE  FIELD POS=(06,74),ATTR=(ASKIP,OFF,HI),DATA='----50'\n         FIELD POS=(07,1),ATTR=(ASKIP,OFF),DATA='CI/CA '\n@CICA    FIELD POS=(07,8),ATTR=(ASKIP,OFF,HI),DATA='-------810'\n         FIELD POS=(07,19),ATTR=(ASKIP,OFF),                           *\n               DATA=' *                   * BLKS/TRK'\n@BLKTRK  FIELD POS=(07,51),ATTR=(ASKIP,OFF,HI),DATA='------27'\n@FREE4   FIELD POS=(07,60),ATTR=(ASKIP,OFF),DATA='* FREECI''S/CA'\n@FCICA   FIELD POS=(07,74),ATTR=(ASKIP,OFF,HI),DATA='---405'\n         FIELD POS=(08,1),ATTR=(ASKIP,OFF),DATA='RECS-MAX'\n@MRECCI  FIELD POS=(08,10),ATTR=(ASKIP,OFF,HI),DATA='-------6'\n         FIELD POS=(08,19),ATTR=(ASKIP,OFF),DATA=' * RECS-MAX'\n@MRECCA  FIELD POS=(08,31),ATTR=(ASKIP,OFF,HI),DATA='----4000'\n         FIELD POS=(08,40),ATTR=(ASKIP,OFF),DATA='* TRK-UTIL% '\n@TRKUTL  FIELD POS=(08,53),ATTR=(ASKIP,OFF,HI),DATA='----77'\n@FREE5   FIELD POS=(08,60),ATTR=(ASKIP,OFF),DATA='* CI%        '\n@CIFREE  FIELD POS=(08,74),ATTR=(ASKIP,OFF,HI),DATA='----50'\n@FREE6   FIELD POS=(09,1),ATTR=(ASKIP,OFF),DATA='RECS-LOAD '\n@LRECCI  FIELD POS=(09,12),ATTR=(ASKIP,OFF,HI),DATA='-----3'\n@FREE7   FIELD POS=(09,19),ATTR=(ASKIP,OFF),DATA=' * RECS-LOAD '\n@LRECCA  FIELD POS=(09,33),ATTR=(ASKIP,OFF,HI),DATA='--2000'\n         FIELD POS=(09,40),ATTR=(ASKIP,OFF),DATA='*                  '\n@FREE8   FIELD POS=(09,60),ATTR=(ASKIP,OFF),DATA='* FREERECS/CI'\n@FRECCI  FIELD POS=(09,74),ATTR=(ASKIP,OFF,HI),DATA='-----1'\n         FIELD POS=(10,1),ATTR=(ASKIP,OFF),                            *\n               DATA='          TOTAL-RECS-DSET'\n@DRECS   FIELD POS=(10,27),ATTR=(ASKIP,OFF,HI),DATA='------400000'\n@TYPESD  FIELD POS=(10,40),ATTR=(ASKIP,OFF),DATA='* CYLNDERS'\n@SPACED  FIELD POS=(10,51),ATTR=(ASKIP,OFF,HI),DATA='-----100'\n@FREE9   FIELD POS=(10,60),ATTR=(ASKIP,OFF),DATA='* FREERECS/CA'\n@FRECCA  FIELD POS=(10,74),ATTR=(ASKIP,OFF,HI),DATA='--1640'\n@FREE10  FIELD POS=(11,1),ATTR=(ASKIP,OFF),                            *\n               DATA='          TOTAL-RECS-LOAD'\n@LRECS   FIELD POS=(11,27),ATTR=(ASKIP,OFF,HI),DATA='-------81000'\n@FREE11  FIELD POS=(11,40),ATTR=(ASKIP,OFF),                           *\n               DATA='*      TOTAL-FREE-RECS-DSET'\n@FDRECS  FIELD POS=(11,68),ATTR=(ASKIP,OFF,HI),DATA='------419000'\n         FIELD POS=(12,1),ATTR=(ASKIP,OFF),                            *\n               DATA='***************************************************\n               *****************************'\n         FIELD POS=(13,1),ATTR=(ASKIP,OFF),                            *\n               DATA='      INDEX        *                   *      INDE*\n               X'\n         FIELD POS=(14,1),ATTR=(ASKIP,OFF),                            *\n               DATA='------------------ * ----------------- * ---------*\n               --------'\n         FIELD POS=(15,1),ATTR=(ASKIP,OFF),DATA='CISIZE'\n@ICISZ   FIELD POS=(15,8),ATTR=(ASKIP,OFF,HI),DATA='------1024'\n         FIELD POS=(15,19),ATTR=(ASKIP,OFF),                           *\n               DATA=' *                   * BLKSIZE '\n@IBLKSZ  FIELD POS=(15,51),ATTR=(ASKIP,OFF,HI),DATA='----1024'\n         FIELD POS=(15,60),ATTR=(ASKIP,OFF),                           *\n               DATA='                     INDEX LEVELS'\n@ILEVLS  FIELD POS=(16,14),ATTR=(ASKIP,OFF,HI),DATA='---3'\n         FIELD POS=(16,19),ATTR=(ASKIP,OFF),                           *\n               DATA=' *'\n@TYPESI  FIELD POS=(16,40),ATTR=(ASKIP,OFF),DATA='*   TRACKS'\n@SPACEI  FIELD POS=(16,51),ATTR=(ASKIP,OFF,HI),DATA='-------7'\n         FIELD POS=(18,1),ATTR=(ASKIP,OFF),                            *\n               DATA='THIS SCREEN IS A DISPLAY OF ALL AVAILABLE INFORMAT*\n               ION FOR EACH CONTROL'\n         FIELD POS=(19,1),ATTR=(ASKIP,OFF),                            *\n               DATA='INTERVAL SIZE THAT YOU SELECTED FROM THE CONTROL I*\n               NTERVAL SELECTION MENU.'\n         FIELD POS=(21,1),ATTR=(ASKIP,OFF),                            *\n               DATA='THIS IS A MULTIPAGE SCREEN(PF7=PAGE BACKWARD, PF8=*\n               PAGE FORWARD).'\n         FIELD POS=(23,1),ATTR=(ASKIP,OFF),                            *\n               DATA='END OF TUTORIAL.'\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MENUSCRN": {"ttr": 1301, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x90(\\x1f\\x00\\x94\\x19_\\x088\\x007\\x007\\x00\\x00\\xe3\\xe2\\xc4\\xc4\\xc3@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-10-08T00:00:00", "modifydate": "1994-07-14T08:38:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "TSDDC"}, "text": "MENU     BUF3270 TYPE=START\n         FIELD POS=(1,1),ATTR=(ASKIP,MDTOFF,HI),                       *\n               DATA='-------------------------- V S A M   A N A L Y Z E*\n                R --------------------------'\n         FIELD POS=(2,1),ATTR=(ASKIP,MDTOFF),                          *\n               DATA='ENTER PARAMETERS BELOW:'\n         FIELD POS=(3,4),ATTR=(ASKIP,MDTOFF),DATA='AVG-RECSIZE'\n         FIELD POS=(3,23),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nRECA     FIELD POS=(3,28),ATTR=(UP,MDTOFF,HI),DATA='     '\n         FIELD POS=(3,34),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(3,46),ATTR=(ASKIP,MDTOFF),DATA='MAX-RECSIZE'\n         FIELD POS=(3,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nRECM     FIELD POS=(3,69),ATTR=(UP,MDTOFF,HI),DATA='     '\n         FIELD POS=(3,75),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(4,4),ATTR=(ASKIP,MDTOFF),DATA='RECORDS T/B LOADED'\n         FIELD POS=(4,23),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nRECLOAD  FIELD POS=(4,28),ATTR=(UP,MDTOFF,HI),DATA='        '\n         FIELD POS=(4,37),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(4,46),ATTR=(ASKIP,MDTOFF),DATA='RECORDS T/B ADDED'\n         FIELD POS=(4,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nRECADD   FIELD POS=(4,69),ATTR=(UP,MDTOFF,HI),DATA='       '\n         FIELD POS=(4,77),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(5,4),ATTR=(ASKIP,MDTOFF),DATA='DEVICE TYPE'\n         FIELD POS=(5,23),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nDEVTYPE  FIELD POS=(5,28),ATTR=(UP,MDTON,HI),DATA='3390'\n         FIELD POS=(5,33),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(5,46),ATTR=(ASKIP,MDTOFF),DATA='KEYLENGTH'\n         FIELD POS=(5,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nKEYL     FIELD POS=(5,69),ATTR=(UP,MDTOFF,HI),DATA='   '\n         FIELD POS=(5,73),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(6,4),ATTR=(ASKIP,MDTOFF),DATA='IMBED'\n         FIELD POS=(6,23),ATTR=(ASKIP,HI,MDTOFF),DATA='===>'\nIMB      FIELD POS=(6,28),ATTR=(UP,MDTON,HI),DATA='NO '\n         FIELD POS=(6,32),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(6,46),ATTR=(ASKIP,MDTOFF),DATA='REPLICATE'\n         FIELD POS=(6,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nREPL     FIELD POS=(6,69),ATTR=(UP,MDTON,HI),DATA='NO '\n         FIELD POS=(6,74),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(7,4),ATTR=(ASKIP,MDTOFF),DATA='%-ADD RECS CI FREESP*\n               ACE'\n         FIELD POS=(7,28),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nCIPER    FIELD POS=(7,33),ATTR=(UP,MDTON,HI),DATA='   '\n         FIELD POS=(7,37),ATTR=(ASKIP,MDTOFF),DATA='%-ADD RECS CA FREES*\n               PACE   '\n         FIELD POS=(7,64),ATTR=(ASKIP,MDTOFF,HI),DATA='===>'\nCAPER    FIELD POS=(7,69),ATTR=(UP,MDTON,HI),DATA='   '\n         FIELD POS=(7,73),ATTR=(ASKIP,MDTOFF)\n         FIELD POS=(8,1),ATTR=(ASKIP,MDTOFF,HI),                       *\n               DATA='-------------------'\nERROR    FIELD POS=(8,21),ATTR=(ASKIP,MDTOFF,HI),                      *\n               DATA='----------------------------------------'\n         FIELD POS=(8,62),ATTR=(PL,MDTOFF,HI),                         *\n               DATA='------------------'\n         FIELD POS=(3,29),CUR=YES\n         BUF3270 TYPE=END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OSINIT": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00F\\x00F\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 70, "newlines": 70, "modlines": 0, "user": "OLDF294"}, "text": "*          DATA SET MACRO      AT LEVEL 001 AS OF 06/14/78\n         MACRO\n         OSINIT &NAME,&BASE,&SAVE\n         LCLA  &Z\n         LCLC  &A,&B,&C,&D,&E,&F,&G,&H\n         AIF (N'&BASE GT 0 AND N'&BASE LE 8 ).BASEOK\n         MNOTE ,'NUMBER OF BASE REGISTERS MUST BE 1 TO 8'\n         MEXIT\n.BASEOK  ANOP\n&Z       SETA  0\n.LOOP    ANOP\n&Z       SETA  1+&Z\n&A       SETC   '&A,&BASE(&Z)'\n         AIF   (N'&BASE EQ &Z).DONE\n         AGO   .LOOP\n.DONE    ANOP\n         AIF   (T'&BASE(1) NE 'N').BADREG\n&NAME    CSECT\n         B     50(15)          AROUND CONSTANTS\n         DC    C'PROG ID:'\n         DC    CL8'&NAME'\n         DC    C'  DATE: '\n         DC    CL8'&SYSDATE'\n         DC    C'  TIME: '\n         DC    CL6'&SYSTIME'\n         DS    0H\n         SAVE  (14,12)\n         USING &NAME&A\n         LR    &BASE(1),15\n         AIF   (N'&BASE EQ 1 ).FINISH\n        AIF   (T'&BASE(2) NE 'N').BADREG\n         LA    &BASE(2),4095(&BASE(1))\n         LA    &BASE(2),1(&BASE(2))\n         AIF   (N'&BASE  EQ 2 ).FINISH\n        AIF   (T'&BASE(3) NE 'N').BADREG\n         LA    &BASE(3),4095(&BASE(2))\n         LA    &BASE(3),1(&BASE(3))\n         AIF   (N'&BASE  EQ 3 ).FINISH\n        AIF   (T'&BASE(4) NE 'N').BADREG\n         LA    &BASE(4),4095(&BASE(3))\n         LA    &BASE(4),1(&BASE(4))\n         AIF   (N'&BASE  EQ 4 ).FINISH\n        AIF   (T'&BASE(5) NE 'N').BADREG\n         LA    &BASE(5),4095(&BASE(4))\n         LA    &BASE(5),1(&BASE(5))\n         AIF   (N'&BASE  EQ 5 ).FINISH\n         AIF   (T'&BASE(6) NE 'N').BADREG\n         LA    &BASE(6),4095(&BASE(5))\n         LA    &BASE(6),1(&BASE(6))\n         AIF   (N'&BASE  EQ 6 ).FINISH\n         AIF   (T'&BASE(7) NE 'N').BADREG\n         LA    &BASE(7),4095(&BASE(6))\n         LA    &BASE(7),1(&BASE(7))\n         AIF   (N'&BASE  EQ 7 ).FINISH\n         AIF   (T'&BASE(8) NE 'N').BADREG\n         LA    &BASE(8),4095(&BASE(7))\n         LA    &BASE(8),1(&BASE(8))\n.FINISH  ANOP\n         AIF   ('&SAVE' EQ 'NO').NOSAVE\n         LA    15,&SAVE\n         ST    15,8(13)\n         ST    13,4(15)\n         LR    13,15\n         MEXIT\n.NOSAVE  ANOP\n         MNOTE *,'NO SAVE AREA SPECIFIED, MUST BE USER SUPPLIED'\n         MEXIT\n.BADREG ANOP\n         MNOTE ,'BASE REGISTERS MUST BE NUMERIC'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SBA": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00^\\x00^\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 94, "newlines": 94, "modlines": 0, "user": "OLDF294"}, "text": "         MACRO\n&NAME    SBA   &POS,&OVRD\n         LCLC  &BIT0,&BIT1,&BIT2,&BIT3,&BIT4,&BIT5,&BIT6,&BIT7\n         LCLC  &BIT8,&BIT9,&BIT10,&BIT11,&BIT12,&BIT13,&BIT14,&BIT15\n         LCLC  &ADR1,&ADR2,&TYP\n         LCLA  &DISP\n         AIF   ('&OVRD' EQ '3C').OVRD\n&TYP     SETC  '11'\n         AGO   .NOVRD\n.OVRD    ANOP\n&TYP     SETC  '&OVRD'\n.NOVRD   ANOP\n         AIF   ('&POS(2)' NE '').NASB\n&DISP    SETA  &POS\n         AGO   .ASB\n.NASB    ANOP\n&DISP    SETA  80*(&POS(1)-1)+&POS(2)-1\n.ASB     ANOP\n&BIT0    SETC  '0'\n&BIT1    SETC  '1'\n&BIT2    SETC  '0'\n&BIT3    SETC  '0'\n&BIT4    SETC  '0'\n&BIT5    SETC  '0'\n&BIT6    SETC  '0'\n&BIT7    SETC  '0'\n&BIT8    SETC  '0'\n&BIT9    SETC  '1'\n&BIT10   SETC  '0'\n&BIT11   SETC  '0'\n&BIT12   SETC  '0'\n&BIT13   SETC  '0'\n&BIT14   SETC  '0'\n&BIT15   SETC  '0'\n         AIF   (&DISP LT 1024).NOT3\n&DISP    SETA  &DISP-1024\n&BIT3    SETC  '1'\n.NOT3    ANOP\n         AIF   (&DISP LT 512).NOT4\n&DISP    SETA  &DISP-512\n&BIT4    SETC  '1'\n.NOT4    ANOP\n         AIF   (&DISP LT 256).NOT5\n&DISP    SETA  &DISP-256\n&BIT5    SETC  '1'\n.NOT5    ANOP\n         AIF   (&DISP LT 128).NOT6\n&DISP    SETA  &DISP-128\n&BIT6    SETC  '1'\n.NOT6    ANOP\n         AIF   (&DISP LT 64).NOT7\n&DISP    SETA  &DISP-64\n&BIT7    SETC  '1'\n.NOT7    ANOP\n         AIF   (&DISP LT 32).NOT10\n&DISP    SETA  &DISP-32\n&BIT10   SETC  '1'\n.NOT10   ANOP\n         AIF   (&DISP LT 16).NOT11\n&DISP    SETA  &DISP-16\n&BIT11   SETC  '1'\n.NOT11   ANOP\n         AIF   (&DISP LT 8).NOT12\n&DISP    SETA  &DISP-8\n&BIT12   SETC  '1'\n.NOT12   ANOP\n         AIF   (&DISP LT 4).NOT13\n&DISP    SETA  &DISP-4\n&BIT13   SETC  '1'\n.NOT13   ANOP\n         AIF   (&DISP LT 2).NOT14\n&DISP    SETA  &DISP-2\n&BIT14   SETC  '1'\n.NOT14   ANOP\n         AIF   (&DISP LT 1).NOT15\n&BIT15   SETC  '1'\n.NOT15   ANOP\n&ADR1    SETC  '&BIT1'.'&BIT2'.'&BIT3'.'&BIT4'.'&BIT5'.'&BIT6'.'&BIT7'\n&ADR2    SETC  '&BIT9'.'&BIT10'.'&BIT11'.'&BIT12'.'&BIT13'.'&BIT14'\n&ADR2    SETC  '&ADR2'.'&BIT15'\n         AIF   ('&ADR1'(4,4) GT '1001').NOT0\n         AIF   ('&ADR1'(4,4) EQ '0000' AND '&ADR1'(2,2) NE '11').NOT0\n         AIF   ('&ADR1'(2,6) EQ '100001').NOT0\n&BIT0    SETC  '1'\n.NOT0    ANOP\n         AIF   ('&ADR2'(4,4) GT '1001').NOT8\n         AIF   ('&ADR2'(4,4) EQ '0000' AND '&ADR2'(2,2) NE '11').NOT8\n         AIF   ('&ADR2'(2,6) EQ '100001').NOT8\n&BIT8    SETC  '1'\n.NOT8    ANOP\n&ADR1    SETC  '&BIT0'.'&ADR1'\n&ADR2    SETC  '&BIT8'.'&ADR2'\n&NAME    DC    X'&TYP',B'&ADR1',B'&ADR2'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SF": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x00I\\x00I\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "OLDF294"}, "text": "         MACRO\n&NAME    SF\n         LCLC  &BIT2,&BIT3,&BIT4,&BIT5,&BIT7,&CURR,&ATTR\n         LCLA  &N\n&BIT2    SETC  '0'\n&BIT3    SETC  '0'\n&BIT4    SETC  '0'\n&BIT5    SETC  '0'\n&BIT7    SETC  '0'\n.LOOP    ANOP\n&N       SETA  &N+1\n&CURR    SETC  '&SYSLIST(1,&N)'\n         AIF   ('&CURR' EQ '').ESCAN\n         AIF   ('&CURR' EQ 'PROT').PL\n         AIF   ('&CURR' EQ 'PL').PL\n         AIF   ('&CURR' EQ 'ASKIP').PS\n         AIF   ('&CURR' EQ 'PS').PS\n         AIF   ('&CURR' EQ 'UNPROT').LOOP\n         AIF   ('&CURR' EQ 'UP').LOOP\n         AIF   ('&CURR' EQ 'NUM').NU\n         AIF   ('&CURR' EQ 'NU').NU\n         AIF   ('&CURR' EQ 'AN').LOOP\n         AIF   ('&CURR' EQ 'NORM').LOOP\n         AIF   ('&CURR' EQ 'NI').LOOP\n         AIF   ('&CURR' EQ 'BRT').HI\n         AIF   ('&CURR' EQ 'HI').HI\n         AIF   ('&CURR' EQ 'DRK').ND\n         AIF   ('&CURR' EQ 'ND').ND\n         AIF   ('&CURR' EQ 'SPD').SPD\n         AIF   ('&CURR' EQ 'NSP').LOOP\n         AIF   ('&CURR' EQ 'FSET').MDTON\n         AIF   ('&CURR' EQ 'MDTON').MDTON\n         AIF   ('&CURR' EQ 'MDTOFF').LOOP\n         AIF   ('&CURR' EQ 'ON').MDTON\n         AIF   ('&CURR' EQ 'OFF').LOOP\n         MNOTE 4,&CURR IS NOT A SF OPTION'\n         AGO   .LOOP\n.PL      ANOP\n&BIT2    SETC  '1'\n&BIT3    SETC  '0'\n         AGO   .LOOP\n.PS      ANOP\n&BIT2    SETC  '1'\n&BIT3    SETC  '1'\n         AGO   .LOOP\n.NU      ANOP\n&BIT3    SETC  '1'\n         AGO   .LOOP\n.HI      ANOP\n&BIT4    SETC  '1'\n         AGO   .LOOP\n.ND      ANOP\n&BIT4    SETC  '1'\n&BIT5    SETC  '1'\n         AGO   .LOOP\n.SPD     ANOP\n&BIT5    SETC  '1'\n         AGO   .LOOP\n.MDTON   ANOP\n&BIT7    SETC  '1'\n         AGO   .LOOP\n.ESCAN   ANOP\n&ATTR    SETC  '1'.'&BIT2'.'&BIT3'.'&BIT4'.'&BIT5'.'0'.'&BIT7'\n         AIF   ('&ATTR'(4,4) GT '1001').USE0\n         AIF ('&ATTR'(4,4) EQ '0000' AND '&ATTR'(2,6) NE '110000').USE0\n         AIF   ('&ATTR'(2,6) EQ '100001').USE0\n&ATTR    SETC  '1'.'&ATTR'\n         AGO   .EOJ\n.USE0    ANOP\n&ATTR    SETC  '0'.'&ATTR'\n.EOJ     ANOP\n&NAME    DC    X'1D',B'&ATTR'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMADEV": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x00\\x90'\\x8f\\x00\\x90(/\\x08D\\x001\\x001\\x00\\x01\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-10-05T00:00:00", "modifydate": "1990-10-09T08:44:00", "lines": 49, "newlines": 49, "modlines": 1, "user": "CART1"}, "text": "         TITLE 'DEVICE TABLE DSECT'\n***********************************************************************\n*                                                                     *\n* THIS IS THE COMMOM DSECT FOR A DEVICE TABLE ENTRY USED BY THE       *\n* VSAMANAL(TSO COMMAND PROCESSOR) AND ITS SUB-MODULES.....            *\n*                                                                     *\nDEVENTRY DSECT\nDSELECT  DS    0X   DATA CONTROL INTERVAL(DETAIL SELECT INDICATOR)\n*              X'00'=NOT SELECTED.\n*              X'01'=SELETED FOR DETAIL SCREEN DISPLAY.\nDCISZ    DS    F    DATA CONTROL INTERVAL SIZE\nPHYBLKSZ DS    F    PHYSICAL BLOCKSIZE\n#BLKSTRK DS    F    NUMBER OF PHYSICAL BLOCKS PER TRACK\nTRKUTL   DS    F    PERCENTAGE OF TRACK UTILIZATION\n#TRKCA   DS    F    NUMBER OF TRACK PER CONTROL AREA (DEFAULT = 1 CYL)\nDCIRATIO DS    F    PERCENTAGE OF RECORDS ADDED NEEDED IN CIFREESPACE\nDCARATIO DS    F    PERCENTAGE OF RECORDS ADDED NEEDED IN CAFREESPACE\n#CICA    DS    F    NUMBER OF CONTROL INTERVALS PER CONTROL AREA\n#RCINFSP DS    F    NUMBER OF RECORDS PER CONTROL INTERVAL-NO FREESPACE\n#RCANFSP DS    F    NUMBER OF RECORDS PER CONTROL AREA -   NO FREESPACE\n#FRCA    DS    F    NUMBER OF FREE RECORDS NEED PER CONTROL AREA\nFRCAFSP  DS    F    NUMBER OF FREE RECORDS NEED/CA FREESPACE\nFRCIFSP  DS    F    NUMBER OF FREE RECORDS NEED/CI FREESPACE\nPERFSPCI DS    F    PERCENTAGE OF FREESPACE PER CONTROL INTERVAL\nPERFSPCA DS    F    PERCENTAGE OF FREESPACE PER CONTROL AREA\n#FCICA   DS    F    NUMBER OF FREE CONTROL INTERVALS PER CONTROL AREA\n#RCILOAD DS    F    NUMBER OF RECORDS IN A CONTROL INTERVAL AT LOADTIME\n#RCALOAD DS    F    NUMBER OF RECORDS IN A CONTROL AREA AT LOADTIME\n#RCIFREE DS    F    NUMBER OF FREE RECORDS-IN A NON-FREE CI\n#RCAFREE DS    F    NUMBER OF FREE RECORDS IN FREE CI'S IN A CA\n#TRKDATA DS    F    NUMBER OF TRACKS FOR DATA COMPONENT WITH FREESPACE\n#TRKXTRA DS    F    NUMBER OF TRACKS FOR FREE RECS AT END OF DATASET\n#TRKNFSP DS    F    NUMBER OF TRACKS FOR DATA COMPONENT WITHOUT FREESPC\nXRCCAFSP DS    F    NUMBER OF EXCESS RECORDS IN FREE CI'S(CAFREESPACE)\n*                   NUMBER OF EXCESS RECORDS(IN MULTIPLES OF NON-FREE\n*                                            CI'S PER CA)\nZRCCAFSP DS    F    TRUE NUMBER OF EXCESS FREE RECORDS PER CA\n#TRKINDX DS    F    NUMBER OF TRACKS NEED FOR INDEX COMPONENT\n#INDXLV  DS    F    NUMBER OF INDEX LEVELS NEEDED TO ADDR DATA\nICISZ    DS    F    INDEX CONTROL INTERVAL SIZE\n#CIHIGHL DS    F    NUMBER OF HIGH LEVEL INDEX RECORDS\nDEVENLEN EQU   *-DCISZ\n         ORG\nDEVCLLEN EQU   *-#CICA  LENGTH OF CLEAR FOR RECALCULATION\n*                                                                     *\n*                                                                     *\n*           E N D   O F    D E V I C E    E N T R Y   D S E C T       *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMADTL": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x18\\x7f\\x00\\x94\\x18\\x7f\\x077\\x01K\\x01K\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-07-06T00:00:00", "modifydate": "1994-07-06T07:37:00", "lines": 331, "newlines": 331, "modlines": 0, "user": "CART1"}, "text": "***********************************************************************\n*                                                                     *\n* THIS PROGRAM IS A SUB-MODULE OF VSAMANAL(TSO COMMAND PROCESSOR)     *\n*                                                                     *\n* ITS FUNCTION IS TO PROCESS THE DETAIL DISPLAY OF THE DATA AND INDEX *\n* COMPONENT INFORMATION FROM THE DEVICE TABLE FOR THOSE DATA CISZ'S   *\n* SELECTED BY THE TSO USER FROM THE DATA SCREEN.                      *\n*                                                                     *\n*                                                                     *\n* THIS PROGRAM IS RE-ENTRANT.                                         *\n*                                                                     *\n* AUTHOR: ARTHUR J. CARTIER                                           *\n* DATA:   11/16/78                                                    *\n* OWNER:  STATE OF CONNECTICUT                                        *\n*         CENTRAL DATA PROCESSING SERVICES(CDPS)                      *\n*         TECHNICAL SUPPORT SECTION                                   *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* LINKAGE TO THIS PROGRAM IS BY THE LINK MACRO IN THE FORM...         *\n*                                                                     *\n*        LA  R0,WORKAREA   WORKAREA=STARTING ADDRESS OF VSAMANAL      *\n*                                   COMMON WORKAREA                   *\n*        LA  R13,CALLERSAVEAREA                                       *\n*        LINK EP=VSAMADTL                                             *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT NOGEN\n         EJECT\n         OSINIT VSAMADTL,(11,12),NO\n         USING WORKAREA,R10       ADDRESSABILITY TO COMMON WORKAREA\n         LR    R10,R0             COMMON WORKAREA ADDRESS\n         LA    R14,SAVEDTL        OUR SAVE AREA\n         ST    R14,8(R13)         FORWARD SAVE AREA CHAIN\n         ST    R13,SAVEDTL+4      BACKWARD SAVE AREA CHAIN\n         LR    R13,R14            OUR SAVE AREA AS CURRENT\n         GETMAIN R,LV=DETAILL+INDEXL\n         LR    R6,R1              ADDRESS OF GETMAINED AREA\n* INITIALIZE DETAIL SCREEN (3270 FULLSCR OUTPUT BUFFER)\n         ST    R6,ADETAIL         SAVE DETAIL SCREEN ADDRESS\n         LA    R7,DETAILL         LENGTH OF DETAIL SCREEN\n         ST    R7,LDETAIL         SAVE DETAIL SCREEN LENGTH\n         LR    R9,R7\n         LA    R8,DETAIL          ADDR OF ORIGINAL SCREEN\n         MVCL  R6,R8              MOVE DETAIL SCREEN TO WORKAREA\n* INITIALIZE INDEX SCREEN (3270 FULLSCR OUTPUT BUFFER)\n         ST    R6,AINDEX          SAVE INDEX SCREEN ADDRESS\n         LA    R7,INDEXL          LENGTH OF INDEX SCREEN\n         ST    R7,LINDEX          SAVE INDEX SCREEN LENGTH\n         LR    R9,R7\n         LA    R8,INDEX           ADDRESS OF ORIGINAL INDEX SCREEN\n         MVCL  R6,R8              MOVE INDEX SCREEN TO WORKAREA\n         EJECT\n***********************************************************************\n*                                 *\n* THE DEVICE TABLE WILL BE SCANNED (TOP-DOWN) FOR THE FIRST DCISZ     *\n* SELECTED FOR DETAILED DATA-INDEX INFORMATION. ONCE FOUND THE DETAIL *\n* SCREEN WILL BE FORMATTED AND DISPLAYED ON THE TUBE...               *\n*                                 *\n* A READ(TGET) FROM THE TUBE WILL THEN BE EXECUTED FOR PFKEY ANALYSIS *\n* IN ORDER TO DETERINE IF THE TSO USER WANTS TO LOOK AT NEXT SELECTED *\n* DCISZ, THE PREVIOUSLY SELECTED DCISZ, BACK TO THE PREVIOUS PHASE, OR*\n* BACK TO THE MENU SELECTION SCREEN...                                *\n*                                 *\n         L     R7,DEVREGSV        START OF DEVICE TABLE\n         USING DEVENTRY,R7        ADDRESSABILITY TO DEVICE TABLE ENTRY\nDTLSCNDV DS    0H SCAN THE DEVICE TABLE FOR A SELECTED DCISZ\n         CLC   DCISZ,=F'-1'       END OF DEVICE TABLE?\n         BE    ANYSEL             YES-GO READ FROM THE TUBE..\n         CLI   DSELECT,X'01'      WAS THIS DCISZ SELECTED??\n         BE    FORMTDTL           YES-GO FORMAT THE DETAIL SCREEN\nNXTDEV   DS    0H\n         LA    R7,DEVENLEN(R7)    NEXT DEVICE TABLE ENTRY\n         B     DTLSCNDV           GO LOOK FOR NEXT SELECTED DCISZ\nANYSEL   DS    0H\n         CLI   ADETAIL,X'01'      WERE ANY DCISZ'S SELECTED...\n         BNE   RETURN             NO-GO BACK TO CALLING MODULE..\n         B     PAGEBACK           YES-GO REDISPLAY LAST SEL ENTRY..\n         EJECT\nFORMTDTL DS    0H\n         L     SCRNREG,ADETAIL    START OF DETAIL SCREEN(WORKAREA COPY)\n         USING DETAILD,SCRNREG    ADDRESSABILITY TO SCREEN DSECT\n         MVI   ADETAIL,X'01'      SET SELECTED DCISZ WAS FOUND..\n         OC    #RECADD,#RECADD    DO WE HAVE TO WORRY ABOUT FREESPACE\n         BNZ   BYFREECL           YES-DON'T CLEAR FREESPACE CAPTIONS\n         MVC   @FREE1,BLANKS      **************************\n         MVC   @FREE2,BLANKS      * C L E A R              *\n         MVC   @FREE3,BLANKS      *                        *\n         MVC   @FREE4,BLANKS      *     F R E E S P A C E  *\n         MVC   @FREE5,BLANKS      *                        *\n         MVC   @FREE6,BLANKS      *        S E C T I O N   *\n         MVC   @FREE7,BLANKS      *                        *\n         MVC   @FREE8,BLANKS      *              O F       *\n         MVC   @FREE9,BLANKS      *                        *\n         MVC   @FREE10,BLANKS     *        S C R E E N     *\n         MVC   @FREE11,BLANKS     *                        *\n         MVC   @FREE12,BLANKS     **************************\nBYFREECL DS    0H\n         L     WORKREG,DCISZ      DATA CI SIZE\n         LA    WORKREG,0(WORKREG) CLEAR SELECTION INDICATOR\n         CVD   WORKREG,DOUBLE\n         MVC   @DCISZ,DMASK\n         ED    @DCISZ,DOUBLE+3\n         SPACE 3\n         L     WORKREG,#TRKCA     NUMBER OF TRACKS PER CONTROL AREA\n         CVD   WORKREG,DOUBLE\n         MVC   @DCASZ,DMASK\n         ED    @DCASZ,DOUBLE+6\n         SPACE 3\n         L     WORKREG,PHYBLKSZ   PHYSICAL BLOCK SIZE\n         CVD   WORKREG,DOUBLE\n         MVC   @BLKSZ,DMASK\n         ED    @BLKSZ,DOUBLE+4\n         SPACE 3\n         L     WORKREG,#CICA      NUMBER OF CI'S PER CA\n         CVD   WORKREG,DOUBLE\n         MVC   @CICA,DMASK\n         ED    @CICA,DOUBLE+3\n         SPACE 3\n         L     WORKREG,#BLKSTRK   NUMBER OF PHSYICAL BLOCKS PER TRACK\n         CVD   WORKREG,DOUBLE\n         MVC   @BLKTRK,DMASK\n         ED    @BLKTRK,DOUBLE+4\n         SPACE 3\n         L     WORKREG,#RCINFSP   NUMBER OF RECS IN A CI (MAXIMUM)\n         CVD   WORKREG,DOUBLE\n         MVC   @MRECCI,DMASK\n         ED    @MRECCI,DOUBLE+4\n         SPACE 3\n         L     WORKREG,#RCANFSP   NUMBER OF RECS IN A CA (MAXIMUM)\n         CVD   WORKREG,DOUBLE\n         MVC   @MRECCA,DMASK\n         ED    @MRECCA,DOUBLE+4\n         SPACE 3\n         L     WORKREG,TRKUTL\n         CVD   WORKREG,DOUBLE\n         MVC   @TRKUTL,DMASK\n         ED    @TRKUTL,DOUBLE+5\n         SPACE 3\n*                                 TOTAL RECS IN DATASET\n         XR    R8,R8              CLEAR FOR MULTIPLY\n         L     R9,#RCILOAD        NUMBER OF RECS IN CI(NON-FREE)\n         A     R9,#RCIFREE        NUMBER OF RECS IN CI(FREE)\n         L     WORKREG,#CICA      NUMBER OF CI'S PER CA\n         S     WORKREG,#FCICA     SUB FREE CI'S PER CA GIVING NON-FREE\n         MR    R8,WORKREG         MAX RECORDS IN NON-FREE CI'S PER CA\n         A     R9,#RCAFREE        PLUS TOTAL RECS IN FREE CI'S PER CA\n         LR    WORKREG,R9         GIVES MAX RECS PER CA(FREE+NONFREE)\n         L     R9,#TRKDATA        TOTAL TRACKS IN DATA SET\n         D     R8,#TRKCA          TATAL CA'S IN DATA SET\n         MR    R8,WORKREG         MAX RECORDS(AVG) IN DATA SET\n         CVD   R9,DOUBLE\n         MVC   @DRECS,DMASK\n         ED    @DRECS,DOUBLE+2\n         SPACE 3\n         L     R9,#TRKDATA        TOTAL TRACKS IN DATA SET\n         CLC   #TRKCA,TRKCYL      IS THE CA A CYLINDER?\n         BNE   TRKALLOC           NO- INDICATE ALLOCATION IN TRACKS\n         XR    R8,R8              TYPE OF ALLOCATION(CYL OR TRK)\n         L     R1,TRKCYL          TRACKS PER CYLINER\n         DR    R8,R1              NUMBER OF CYLINDERS NEEDED\n         MVC   @TYPESD,=C'* CYLNDERS'  INDICATE ALLOCATION IN CYLINDERS\n         B     SETSPACE\nTRKALLOC DS    0H\n         MVC   @TYPESD,=C'*   TRACKS'  INDICATE ALLOCATION IN TRACKS\n         B     SETSPACE           GO MOVE SPACE VALUE TO SCREEN\nSETSPACE DS    0H\n         CVD   R9,DOUBLE\n         MVC   @SPACED,DMASK\n         ED    @SPACED,DOUBLE+4\n         SPACE 3\n         OC    #RECADD,#RECADD    ANY FREESPACE\n         BZ    PUTDTL             NO-GO DISPLAY DETAIL(DATA CMPNT)\n*\n*\n* MOVE FREESPACE INFORMATION TO SCREEN BUFFER\n*\n*\n         L     WORKREG,PERFSPCA\n         CVD   WORKREG,DOUBLE\n         MVC   @CAFREE,DMASK\n         ED    @CAFREE,DOUBLE+5\n         SPACE 3\n         L     WORKREG,#FCICA     FREE CI'S PER CA\n         CVD   WORKREG,DOUBLE\n         MVC   @FCICA,DMASK\n         ED    @FCICA,DOUBLE+5\n         SPACE 3\n         L     WORKREG,PERFSPCI  CONTROL INTERVAL FREESPACE PERCENTAGE\n         CVD   WORKREG,DOUBLE\n         MVC   @CIFREE,DMASK\n         ED    @CIFREE,DOUBLE+5\n         SPACE 3\n         L     WORKREG,#RCILOAD   NUMBER OF RECS IN CI AT LOAD TIME\n         CVD   WORKREG,DOUBLE\n         MVC   @LRECCI,DMASK\n         ED    @LRECCI,DOUBLE+5\n         SPACE 3\n         L     WORKREG,#RCALOAD   NUMBER OF RECS IN CA AT LOAD TIME\n         CVD   WORKREG,DOUBLE\n         MVC   @LRECCA,DMASK\n         ED    @LRECCA,DOUBLE+5\n         SPACE 3\n         L     WORKREG,#RCIFREE   NUMBER OF FREE RECS IN A CI\n         CVD   WORKREG,DOUBLE\n         MVC   @FRECCI,DMASK\n         ED    @FRECCI,DOUBLE+5\n         SPACE 3\n         XR    R8,R8\n         L     R9,#CICA           NUMBER OF CI'S PER CA\n         S     R9,#FCICA         SUB FREE CI'S PER CA GIVING NONFREE\n         MR    R8,WORKREG         MULT FREE RECS PER CI BY NONFREE CI'S\n         A     R9,#RCAFREE        ADD FREE RECS IN FREE CI'S PER CA\n         CVD   R9,DOUBLE\n         MVC   @FRECCA,DMASK\n         ED    @FRECCA,DOUBLE+5\n         SPACE 3\n         L     WORKREG,#RCALOAD NUMBER OF RECS IN CA AT LOAD TIME\n         XR    R8,R8\n         L     R9,#TRKDATA        NUMBER OF TRACKS IN DATA SET\n         D     R8,#TRKCA       BY TRACKS PER CA GIVING CA'S IN DATASET\n         XR    R8,R8\n         ST    R9,SAVEREG         SAVE NUMBER OF CA'S IN DATASET\n         MR    R8,WORKREG         MULT BY NUMBER OF LOAD RECS/CA\n         CVD   R9,DOUBLE          GIVING NUMBER OF LOAD RECS IN DATASET\n         MVC   @LRECS,DMASK\n         ED    @LRECS,DOUBLE+2\n         SPACE 3\n         L     R9,#CICA           NUMBER OF CI'S PER CA\n         S     R9,#FCICA          MINUS FREE CI'S PER CA\n         XR    R8,R8\n         M     R8,#RCIFREE        NON FREE CI'S PER CA BY FREERECS/CI\n         A     R9,#RCAFREE        PLUS FREE RECS IN FREE CI'S PER CA\n*                                 GIVES FREE RECS PER CA..\n         M     R8,SAVEREG         MULT BY CA'S IN DATASET GIVES\n         CVD   R9,DOUBLE          FREE RECORDS IN DATA SETR\n         MVC   @FDRECS,DMASK\n         ED    @FDRECS,DOUBLE+2\n         SPACE 3\nPUTDTL   DS    0H\n         L     R1,ADETAIL         3270 SCREEN ADDRESS\n         L     R0,LDETAIL         LENGTH OF SCREEN\n         ICM   R1,8,FULLSCR       OPTION BYTE\n         TPUT  ((R1)),((R0)),R\n         OC    KEYLEN,KEYLEN      IS THIS A KSDS/AIX?\n         BZ    DTLGET             NO-BYPASS INDEX SCREEN\n         L     SCRNREG,AINDEX     YES-INDEX SCREEN ADDRESS\n         USING INDEXD,SCRNREG     ESTABLISH ADDRESSABILITY\n         SPACE 3\n         L     WORKREG,ICISZ      INDEX CISIZE\n         CVD   WORKREG,DOUBLE\n         MVC   @ICISZ,DMASK\n         ED    @ICISZ,DOUBLE+3\n         MVC   @IBLKSZ,DMASK\n         ED    @IBLKSZ,DOUBLE+4\n         SPACE 3\n         L     WORKREG,#INDXLV    NUMBER OF INDEX LEVELS\n         CVD   WORKREG,DOUBLE\n         MVC   @ILEVLS,DMASK\n         ED    @ILEVLS,DOUBLE+6\n         SPACE 3\n         L     R9,#TRKINDX\n         CVD   R9,DOUBLE\n         MVC   @SPACEI,DMASK\n         ED    @SPACEI,DOUBLE+4\n         LR    R1,SCRNREG\n         L     R0,LINDEX\n         ICM   R1,8,FULLSCR\n         TPUT  ((R1)),((R0)),R\nDTLGET   DS    0H\n         L     R0,LDETAIL         SCREEN LENGTH\n         L     R1,ADETAIL         SCREEN ADDRESS\n         LR    R2,R10             COMMON WORKAREA ADDRESS\n         LINK  EP=VSAMAGET        GO READ FROM THE TUBE\n         CLI   KEYHIT,PF1         WAS-PF1 KEY HIT(HELP)?\n         BNE   NXTKEY             NO-LOOK AGAIN\n         LR    R0,R10             COMMON WORKAREA ADDRESS\n         MVC   HLPTYPE,=CL3'DTL'\n         LINK  EP=VSAMAHLP\n         CLI   KEYHIT,PF4         WAS-PF4(SPF PRIMARY OPTION MENU)\n         BE    RETURN\n         TPUT  CLEARBUF,CLEARLEN,FULLSCR CLEAR SCREEN\n         L     R1,AMENUD          MENU SCREEN ADDRESS\n         L     R0,LMENUD          MENU SCREEN LENGTH\n         ICM   R1,8,FULLSCR       FULLSCR OPTION\n         TPUT  ((R1)),((R0)),R    REDISPLAY MENU SCREEN\n         B     PUTDTL             GO REDISPLAY LAST PAGE AGAIN\nNXTKEY   DS    0H\n         CLI   KEYHIT,CLEAR       WAS-CLEAR KEY HIT?\n         BE    PUTDTL             YES-GO REDISPLAY LAST PAGE AGAIN..\n         CLI   KEYHIT,PF7         WAS PF7(PAGE BACK) HIT?\n         BE    PAGEBACK           YES-DISPLAY LAST PAGE IF POSSIBLE\n         CLI   KEYHIT,PF3         WAS PF3(BACK TO DATASELECT) HIT?\n         BE    RETURN             YES-GO BACK TO CALLING MODULE..\n         CLI   KEYHIT,PF4         WAS PF4(END COMMAND HIT) HIT?\n         BE    RETURN             YES-GO BACK TO CALLING MODULE...\n         CLI   KEYHIT,PF8         WAS PF8(PAGE FORWARD) HIT?\n         BNE   PUTDTL             GO REDISPLAY LAST PAGE AGIAN....\n         CLC   DCISZ,=F'-1'       YES-ARE WE ALREADY AT END OF TABLE\n         BNE   NXTDEV             NO-GO POINT TO NEXT TABLE ENTRY\n         B     PUTDTL             YES-GO REDISPLAY LAST PAGE AGAIN..\n         EJECT\nPAGEBACK DS    0H\n         C     R7,DEVREGSV  ARE WE AT THE BEGINNING OF DEVICE TABLE\n         BE    PUTDTL             YES-GO REDISPLAY LAST PAGE AGAIN..\n         SH    R7,=Y(DEVENLEN)    NO-THEN BACK UP ONE TABLE ENTRY\n         CLI   DSELECT,X'01'      IS IT A SELECTED ENTRY???\n         BE    FORMTDTL           YES-GO FORMAT IT AGAIN...\n         B     PAGEBACK           NO-GO BACKUP ANOTHER TABLE ENTRY\n         SPACE 3\nRETURN   DS    0H\n         L     R1,ADETAIL         SET UP STORAGE ADDRESS FOR FREEMAIN\n         FREEMAIN R,A=(1),LV=DETAILL+INDEXL\n         XC    ADETAIL,ADETAIL    CLEAR STORAGE POINTER\n         L     R13,SAVEDTL+4\n         RETURN (14,12)\n         EJECT\nBLANKS   DC    CL80' '\nDMASK    DC    XL12'602020202020202020202020'\nFULLSCR  DC    X'03'\nCLEARBUF DC    X'C2115D7F1140403C5D7F0011404013'  *POSITIONAL*\nCLEARLEN EQU   *-CLEARBUF                         *POSITIONAL*\n         LTORG\n         EJECT\n         COPY VSAMAEQU\n         COPY DTLSCRN\n         COPY VSAMAWRK\n         COPY VSAMADEV\n         END  VSAMADTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMAEQU": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x18\\x7f\\x00\\x94\\x18\\x7f\\x078\\x00C\\x00C\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-07-06T00:00:00", "modifydate": "1994-07-06T07:38:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "CART1"}, "text": "         EJECT\n***********************************************************************\n*                                                                     *\n* THE FOLLOWING ARE THE SYMBOLIC EQUATES USED BY VSAMANAL(TSO COMMAND *\n* PROCESSOR) AND SUB-MODULES(VSAMAGET VSAMADTL)......                 *\n*                                                                     *\n*\n*\n****** SYMBOLIC VALUES.............\nCLEAR   EQU  X'6D'\nENTER   EQU  X'7D'\nPF1     EQU  X'F1'\nPF2     EQU  X'F2'\nPF3     EQU  X'F3'\nPF4     EQU  X'F4'\nPF5     EQU  X'F5'\nPF6     EQU  X'F6'\nPF7     EQU  X'F7'\nPF8     EQU  X'F8'\nPF9     EQU  X'F9'\nSBA      EQU   X'11'\n*\n*\n*  R E G I S T E R    E Q U A T E S\n*\n*\n*\nWORKREG  EQU   5\nSCRNREG  EQU   4\nR1       EQU   1\nDATALEN  EQU   4\nDATASW   EQU   6\nLINKREG  EQU   6\nDEVREG   EQU   4\nR15      EQU   15\nEVENODD  EQU   8\nDIVIDEND EQU   9\nREMAINDR EQU   8\nQUOTIENT EQU   9\nDIVISOR  EQU   15\nR8       EQU   8\nR5       EQU   5\nR4       EQU   4\nWAREAREG EQU   13\nR2       EQU   2\nR3       EQU   3\nR6       EQU   6\nR7       EQU   7\nR9       EQU   9\nR13      EQU   13\nR14      EQU   14\nR0       EQU   0\nR10      EQU   10\nR12      EQU   12\nBUFFLEN  EQU   15\nSCRN     EQU   4\nSCRNLEN  EQU   5\nSCRNEND  EQU   7\nBUFF     EQU   8\nBUFFEND  EQU   9\nLINE     EQU   7\nLINECNT  EQU   8\nPAGEREG  EQU   9\n*                                                                     *\n*      E N D    O F    S Y M B O L I C    E Q U A T E S               *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMAGET": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x18\\x7f\\x00\\x94\\x18\\x7f\\x078\\x01\\x18\\x01\\x18\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-07-06T00:00:00", "modifydate": "1994-07-06T07:38:00", "lines": 280, "newlines": 280, "modlines": 0, "user": "CART1"}, "text": "***********************************************************************\n*                                                                     *\n* THIS PROGRAM IS A SUB-MODULE OF THE VSAMANAL(TSO COMMAND PROCESSOR) *\n*                                                                     *\n* THE MAIN FUNCTION OF THIS PROGRAM IS TO PERFORM A TSO TGET W/ASIS   *\n* OPTION INTO AN INPUT WORK BUFFER.....THE BUFFER WILL BE EDITED FOR  *\n* VALIDITY AND ALL DATA FOUND IN THE BUFFER WILL BE MOVED TO ITS      *\n* CORRESPONDING 3270(FULLSCRN) SCREEN BUFFER.  ALL MOVING IS ON A 3270*\n* FIELD(SBA,ADDR,SF,ATTR,DATA) LEVEL, AND INPUT FIELDS ARE MOVED ONLY *\n* IF A CORRESPONDING FIELD IS FOUND IN THE SCREEN BUFFER. ALL DATA IS *\n* MOVED FOR THE LENGTH OF THE SCREEN FIELD SO AS TO PROTECT THE       *\n* INTEGRITY OF THE SCREEN BUFFER FOR SUBSEQUENT TPUTS(FULLSCRN).      *\n* THE SCREEN FIELD WILL PADDED RIGHT W/X'40'S IF NECESSARY.           *\n*                                                                     *\n* ERRORS:   ANY PREDICTABLE PROGRAM ERRORS WILL CAUSE AN ERROR DESCRIP*\n*           TION TO BE PLACED IN THE COMMON WORKAREA FIELD(PROCERR).  *\n*                                                                     *\n* LINKAGE:  LINKAGE IS EXPECTED THROUGH THE LINK MACRO IN THE FORM..  *\n*            LA  0,LENGTH    LENGTH=LENGTH OF 3270 SCREEN BUFFER      *\n*                                   BUFFER.\n*            LA  2,WORKAREA  WORKAREA=STARTING LOCATION OF THE VSAMANAL\n*            LA  13,CALLERSAVEAREA\n*            LINK EP=VSAMAGET                                         *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* THIS PROGRAM IS WRITTEN AS A RE-ENTRANT MODULE......                *\n*                                                                     *\n*  AUTHOR:  ARTHUR J. CARTIER                                         *\n* DATE: 11/14/78                                                      *\n* PROPERTY OF:   STATE OF CONNECTICUT                                 *\n*                CENTRAL DATA PROCESSING SERVICES(CDPS)               *\n*                TECHNICAL SUPPORT SECTION.                           *\n*                                                                     *\n* ASSOCIATED PROGRAMS:                                                *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT NOGEN\n         EJECT\n         OSINIT VSAMAGET,(11,12),NO\n         USING WORKAREA,R10       ADDRESSABILITY TO VSAMANAL WORKAREA\n         LR    R10,R2             POINT THE WORKAREA DSECT REG. TO IT\n         ST    R0,SCRNLSV         SAVE SCREEN LENGTH\n         ST    R1,SCRNSAVE        SAVE SCREEN ADDRESS\n         LA    R14,SAVEGET   THIS PROGRAMS SAVE AREA(PART OF WORKAREA)\n         ST    R14,8(R13)         FORWARD SAVE AREA(CHAIN)\n         ST    R13,4(R14)         BACKWARD SAVE AREA(CHAIN)\n         LR    R13,R14            SET YOUR SAVE AREA POINTER\n         XC    PROCERR,PROCERR    CLEAR ERROR INDICATOR\n         LA    R1,INBUFF\n         ICM   R1,8,TGETASIS\n         LA    R0,INBUFFL\n         TGET  ((R1)),((R0)),R\n         OR    R15,R15            TGET SUCESSFUL\n         BNZ   TGETERR            NO GO PROCESS ERROR\n*\n         MVC   KEYHIT,INBUFF      SAVE KEY ENTERED\n         MVC   CURPOS,INBUFF+1    SAVE WHERE CURSOR WAS\n         LR    BUFFLEN,R1         BUFFER LENGTH\n         SH    BUFFLEN,=H'4'     SUB FOR KEYENTRD,CURSOR,EXECUTE INSTR\n         BNP   EXITSCRN           GO EXIT IF NO DATA ENTERED\n         LA    BUFF,INBUFF+3      START OF INPUT BUFFER+3\n         LA    BUFFEND,0(BUFF,BUFFLEN) END OF BUFFER DATA\n         CLI   0(BUFF),SBA        IS THERE AN SBA\n         BNE   BUFFERR            NO BUFFER ERROR\nSETSCRN  DS    0H\n         L     SCRN,SCRNSAVE      START OF INPUT SCREEN\n         LA    SCRN,4(SCRN)       FIRST SBA IN SCREEN\n         L     SCRNLEN,SCRNLSV    LENGTH OF INPUT SCREEN\n         SH    SCRNLEN,=H'5'      SUB FOR WCC,SPF STRING,EXECUTE\n         LA    SCRNEND,0(SCRN,SCRNLEN) END OF INPUT SCREEN\n         CLI   0(SCRN),SBA        IS INPUT SCREEN GOOD\n         BNE   SCRNERR            NO ERROR IN INPUT SCREEN\n         B     BUFFSCAN           GO MATCH UP BUFFER TO SCREEN FIELDS\n         EJECT\nFINDSBA  TRT   0(0,R1),SBATABLE    TRANSLATE FOR SBA(X'11')\nMOVFIELD MVC   5(0,SCRN),0(BUFF)   MOVE BUFF FIELD TO SCREEN FIELD\nUPPERCSE OC    5(0,SCRN),BLANKS    SET ALL ALPHA TO UPPER CASE\n         SPACE 3\nBUFFSCAN DS    0H\n         CR    BUFF,BUFFEND       END OF INPUT BUFFER\n         BNL   EXITSCRN           YES-GET OUT\n         LA    BUFF,1(BUFF)       3270 ADDRESS BYTES\n         BCTR  BUFFLEN,0          ADJUST\n         MVC   ADDRESS,0(BUFF)    MOVE FOR ADDRESS ADJUSTMNT\n         LA    BUFF,2(BUFF)       DATA FIELD IN INPUT BUFFER\n         BCTR  BUFFLEN,0          ADJUST\n         BCTR  BUFFLEN,0          ADJUST\n         BAL   LINKREG,SBAMINUS   GO ADJUST 3270 ADDRESS (-1)\n         CR    BUFF,BUFFEND       ANY DATA IN FIELD???\n         BH    CLRFIELD           NO-HIT (EOF) CLEAR LAST FIELD\n         CLI   0(BUFF),SBA        ANY DATA FIELD????\n         BE    CLRFIELD           NO-HIT (EOF) GO CLEAR FIELD\nCOMPADDR DS    0H\n         CLC   ADDRESS,1(SCRN)    IS THIS THE FIELD\n         BNE   SCRNSCAN           NO-GO FIND NEXT FIELD\nEXBUFF   DS    0H\n         LR    R1,BUFF            SET FOR TRANSLATE\n         LR    R14,BUFFLEN        SAVE FOR TRANSLATE LENGTH\n         C     R14,=F'255'        BUFFLEN GREATER THAN MAX TRANSLATE\n         BNH   EXSBABUF           NO-USE BUFFLEN FOR TRANSLATE\n         LA    R14,255            YES-USE MAX TRANSLATE LENGTH\nEXSBABUF DS    0H\n         EX    R14,FINDSBA        FIND NEXT SBA\n         BNZ   MOVEDATA           FOUND IT-GO MOVE DATA\n         CR    R14,BUFFLEN        NO SBA FOUND-DID WE LOOK AT\n*                                 ALL THE BUFFER....\n         BL    TRYABUFF           NO WE DIDN'T- GO TRY NEXT 256 OR LESS\n         LR    R1,BUFFEND         YES WE DID-SET END-OF-BUFFER\n         LA    R1,1(R1)           END-OF-BUFFER +1\n         B     MOVEDATA           NOW GO MOVE THE LAST DATA FIELD\nTRYABUFF DS    0H\n         SR    BUFFLEN,R14        ADJUST BUFFER LENGTH\n         BCTR  BUFFLEN,0\n         MVC   5(256,SCRN),0(BUFF)\n         LA    SCRN,1(R14,SCRN)   BUMP SCREEN POINTER BY 256\n         LA    BUFF,1(R14,BUFF)   BUMP BUFFER POINTER BY 256\n         B     EXBUFF             GO LOOK AT NEXT 256 OR LESS FOR SBA\nMOVEDATA DS    0H\n         LA    R1,0(R1)           CLEAR HIGH ORDER BYTE\n         LR    R2,R1              SAVE NEW SBA OR END-OF-BUFFER\n         SR    R1,BUFF            LENGTH OF DATA\n         BCTR  R1,0               LENGTH OF DATA-1\n         EX    R1,MOVFIELD        MOVE BUFF DATA TO SCREEN FIELD\n         EX    R1,UPPERCSE        GO SET ALL ALPHA TO UPPER CASE\n         LR    BUFF,R2            NEW SBA OR END-OF-BUFFER\n         SR    BUFFLEN,R1         NEW BUFFER LENGTH\n         BCTR  BUFFLEN,0          ADJUST\n         LA    SCRN,6(R1,SCRN)    LAST BYTE MOVED + 1\nDATALOOP DS    0H\n         CR    SCRN,SCRNEND       END OF SCREEN?????\n         BH    SETSCRN            YES-GO LOOK AT NEXT BUFFER FIELD\n         CLI   0(SCRN),SBA        NO-AT NEXT FIELDS SBA\n         BE    SETSCRN            YES-GO LOOK AT NEXT BUFFER FIELD\n         MVI   0(SCRN),X'40'      PAD END OF SCREEN FIELD\n         LA    SCRN,1(SCRN)       NEXT SCREEN BYTE\n         B     DATALOOP           GO CHECK AGAIN FOR PADDING\n         SPACE 3\nSCRNSCAN DS    0H\n         CR    SCRN,SCRNEND       END OF SCREEN\n         BNL   SETSCRN            YES-GO PROCESS NEXT BUFFER FIELD\n         LA    SCRN,5(SCRN)       FIELD DATA\n         SH    SCRNLEN,=H'5'      ADJUST\n         LR    R1,SCRN            SET FOR TRANSLATE\nEXSCRN   DS    0H\n         LR    R14,SCRNLEN        SAVE SCRNLEN FOR TRANSLATE\n         C     R14,=F'255'        SCRNLEN GREATER THAN MAX TRANSLATE\n         BNH   EXSBASCR           NO-USE SCRNLEN FOR TRANSLATE\n         LA    R14,255            YES-USE MAX TRANSLATE LENGTH\nEXSBASCR DS    0H\n         EX    R14,FINDSBA        FIND NEXT SBA IN SCREEN\n         BNZ   SCRNSBA            FOUND IT-GO ADJUST SCRN POINTERS\n         CR    R14,SCRNLEN        NO SBA FOUND- DID WE LOOK AT\n*                                 ALL OF THE SCREEN....\n         BNL   SETSCRN            YES WE DID-NEXT BUFFER FIELD\n*                                 NO WE DIDN'T...\n         SR    SCRNLEN,R14        TRY NEXT 256 OR LESS\n         LA    SCRN,1(R14,SCRN)   BUMP SCREEN POINTER\n         B     EXSCRN             GO LOOK AGAIN...\nSCRNSBA  DS    0H\n         LA    R1,0(R1)           CLEAR HIGH ORDER BYTE\n         LR    SCRN,R1\n         CLI   3(SCRN),X'13'      IS IT THE CURSOR FIELD\n         BE    SETSCRN            YES-GO PROCESS NEXT BUFFER FIELD\n         B     COMPADDR           GO BACK-CHECK FOR FIELD MATCH\n         SPACE 3\nCLRFIELD DS    0H\n         CLC   ADDRESS,1(SCRN)    CHECK FOR FIELD MATCH\n         BNE   CLRFLDSC           NO MATCH-FIND NEXT FIELD\n         LA    SCRN,5(SCRN)       MATCH-START OF DATA???\n         SH    SCRNLEN,=H'5'      ADJUST\nCLRLOOP  DS    0H\n         CR    SCRN,SCRNEND       END OF SCREEN\n         BNL   EXITCLR            YES-GET OUT OF CLEAR FIELD LOGIC\n         CLI   0(SCRN),SBA        IS THERE ANY DATA IN FIELD\n         BE    EXITCLR            NO-GET OUT OF CLEAR FIELD LOGIC\n         MVI   0(SCRN),X'40'      YES-CLEAR THIS BYTE\n         LA    SCRN,1(SCRN)       NEXT BYTE\n         BCTR  SCRNLEN,0          ADJUST\n         B     CLRLOOP            GO CLEAR THIS BYTE??????\nCLRFLDSC DS    0H\n         CR    SCRN,SCRNEND       END OF SCREEN\n         BNL   EXITCLR            YES-GET OUT CLEAR FIELD LOGIC\n         LA    SCRN,5(SCRN)       NO-POINT TO FIELD DATA\n         SH    SCRNLEN,=H'5'      ADJUST\n         LR    R1,SCRN            LOAD FOR TRANSLATE SBA\nEXCLR    DS    0H\n         LR    R14,SCRNLEN        SAVE FOR TRANSLATE\n         C     R14,=F'255'        IS SCRNLEN GREATER THAN MAX TRANSLT\n         BNH   EXSBACLR           NO-US THIS LENGTH FOR TRANSLATE\n         LA    R14,255            YES-SET LENGTH TO MAX\nEXSBACLR DS    0H\n         EX    R14,FINDSBA        GO FIND NEXT SBA\n         BNZ   CLRSBA             FOUND IT-GO SET UP FOR RETRY\n         CR    R14,SCRNLEN        NOT FOUND-AT END OF SCREEN\n         BNL   EXITCLR            YES-GET OUT OF CLEAR FIELD LOGIC\n         SR    SCRNLEN,R14        NO-ADJUST FOR ANOTHER TRANSLATE\n         LA    SCRN,1(R14,SCRN)      ADJUST FOR ANOTHER TRANSLATE\n         B     EXCLR              GO TRY TRANSLATE AGAIN\nCLRSBA   DS    0H\n         LA    R1,0(R1)           CLEAR HI-ORDER BYTE\n         LR    SCRN,R1            NEW SBA\n         CLI   3(SCRN),X'13'      ARE WE AT THE CURSOR FIELD(LAST)\n         BE    EXITCLR            YES-GET OUT OF CLEAR FIELD LOGIC\n         B     CLRFIELD           NO-GO LOOK FOR FIELD MATCH AGAIN\nEXITCLR  DS    0H\n         CR    BUFF,BUFFEND       END OF INPUT BUFFER\n         BNL   EXITSCRN           YES-ALL THROUGH\n         B     SETSCRN            NO-GO LOOK NEXT BUFFER FIELD\nTGETERR  DS    0H\n         MVC   PROCERR,=CL40'TGET ERROR'\n         B     EXITSCRN\nBUFFERR  DS    0H\n         MVC   PROCERR,=CL40'NO SBA FOUND IN TGET BUFFER'\n         B     EXITSCRN\nSCRNERR  DS    0H\n         MVC   PROCERR,=CL40'INVALID SCREEN IN GETSCRN LOGIC.'\n         B     EXITSCRN\nEXITSCRN DS    0H\n         L     R13,SAVEGET+4      POINT TO CALLER SAVEAREA FOR RETURN\n         RETURN (14,12) GO BACK TO CALLER\n         EJECT\nSBAMINUS DS    0H                 THIS ROUTINE SUBS 1 FROM 3270 ADDR\n         ST    R15,SAVEREG        SAVE\n         XR    R15,R15            CLEAR\n         XR    R14,R14            CLEAR\n         IC    R14,ADDRESS        FIRST 3270 ADDRESS BYTE\n         N     R14,=X'0000003F'   TURN OFF UNUSED BITS 0-1\n         IC    R15,ADDRESS+1      SECOND 3270 ADDRESS BYTE\n         N     R15,=X'0000003F'   TURN OFF UNUSED BITS 0-1\n         SLL   R14,6\n         AR    R14,R15            RELATIVE BUFFER POSITION\n         BCTR  R14,0              SUB 1 FROM RELATIVE POSITION\n         SPACE 3\n         XR    R15,R15            CLEAR\n         SLL   R14,20\n         SRDL  R14,26\n         SRL   R15,26\n         STC   R14,ADDRESS\n         STC   R15,ADDRESS+1\n         TR    ADDRESS,BUFTABLE\n         L     R15,SAVEREG        RESTORE BEFORE EXITING\n         BR    LINKREG\n         EJECT\nSBAPLUS  DS    0H                 THIS ROUTINE ADDS 1 TO 3270 ADDR\n         XR    R15,R15            CLEAR\n         XR    R14,R14            CLEAR\n         IC    R14,ADDRESS        FIRST 3270 ADDRESS BYTE\n         N     R14,=X'0000003F'   TURN OFF UNUSED BITS 0-1\n         IC    R15,ADDRESS+1      SECOND 3270 ADDRESS BYTE\n         N     R15,=X'0000003F'   TURN OFF UNUSED BITS 0-1\n         SLL   R14,6\n         AR    R14,R15            RELATIVE BUFFER POSITION\n         LA    R14,1(R14)         ADD 1 TO RELATIVE POSITION\n         SPACE 3\n         XR    R15,R15            CLEAR\n         SLL   R14,20\n         SRDL  R14,26\n         SRL   R15,26\n         STC   R14,ADDRESS\n         STC   R15,ADDRESS+1\n         TR    ADDRESS,BUFTABLE\n         BR    LINKREG\n         LTORG\nTGETASIS DC    X'81'              TGET ASIS OPTION BYTE\nBUFTABLE DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F' 64 BYTE TRANSLATE\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F' TABLE FOR CONVERT\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F' TO 3270 LINE CODE\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         SPACE 3\nSBATABLE DC    17X'00'  256 BYTE TRANSLATE TABLE TO FIND SBA(X'11)\n         DC    X'11'    IN THE TGET INPUT BUFFER AND CORRESPONDING 3270\n         DC    238X'00' SCREEN......\nBLANKS   DC    CL256' '\n         EJECT\n         LTORG\n         COPY VSAMAEQU            VSAMANAL EQUATES\n         COPY VSAMAWRK            VSAMANAL COMMON WORKAREA\n         END   VSAMAGET\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMAHLP": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x18\\x7f\\x00\\x94\\x18\\x7f\\x078\\x01\\x02\\x01\\x02\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-07-06T00:00:00", "modifydate": "1994-07-06T07:38:00", "lines": 258, "newlines": 258, "modlines": 0, "user": "CART1"}, "text": "***********************************************************************\n*                                                                     *\n* THIS PROGRAM IS A SUB-MODULE OF VSAMANAL(TSO COMMAND PROCESSOR).    *\n* IT FUNCTION IS TO DISPLAY HELP DATA TO VSAMANAL USERS(INITIATED BY  *\n* PRESSING PF1 KEY). THE DATA DESCRIBES THE COMMAND PROCESSOR MENUS   *\n* AND INPUT PARAMETERS..                                              *\n*                                                                     *\n* AUTHOR: ARTHUR J. CARTIER                                           *\n* DATA:   12/06/78                                                    *\n* OWNER:  STATE OF CONNECTICUT                                        *\n*         CENTRAL DATA PROCESSING SERVICES                            *\n*         TECHNICAL SUPPORT SECTION                                   *\n*                                                                     *\n* LINKAGE:                                                            *\n*          LINKAGE IS BY THE OS LINK MACRO AND IS AS FOLLOWS;         *\n*                       LA  R0,VSAMANALWORKAREA                       *\n*                       LINK EP=VSAMAHLP                              *\n***********************************************************************\n         EJECT\n         PRINT NOGEN\n         EJECT\n         OSINIT VSAMAHLP,(10,11,12),NO\n         USING  WORKAREA,R2\n         LR    R2,R0\n         LA    R14,SAVEHLP OUR SAVE AREA\n         ST    R14,8(R13)  FORWARD SAVE AREA CHAIN\n         ST    R13,SAVEHLP+4  BACKWARD SAVE AREA CHAIN\n         LR    R13,R14     OUR SAVE AREA AS CURRENT\n         CLC   HLPTYPE,=CL3'DTL'  WAS CI DISPLAY HELP REQSTD\n         BE    PAGE7              YES-DISPLAY HELP PAGE 7 ONLY\n         CLC   HLPTYPE,=CL3'CIS'  WAS CI SELECTION HELP REQSTD\n         BE    PAGE6              YES-DISPLAY HELP PAGE 6 ONLY\n         USING MENUD,SCRNREG      NO- ALL HELP DATA WAS REQSTD\n         LA    SCRNREG,MENU\n         EJECT\nPAGE0    DS    0H\n         TPUT  CLEARBUF,CLEARLEN,FULLSCR\n         LA    R1,DESC    HELP SCREEN NO. 0\n         LA    R0,DESCL   LENGTH OF SCREEN\n         ICM   R1,8,FULLSCR SET FULLSCRN OPTION\n         TPUT  ((R1)),((R0)),R\nPAGE0GET DS    0H\n         LA    R1,DESC    HELP SCREEN\n         LA    R0,DESCL   LENGTH OF SCREEN\n         LINK  EP=VSAMAGET READ FROM TUBE\n         CLI   KEYHIT,ENTER  SHOULD WE DISPLAY NEXT HELP PAGE\n         BE    PAGE1\n         CLI   KEYHIT,PF3    EXIT HELP FUNCTION????\n         BE    RETURN        YES GET OUT\n         CLI   KEYHIT,PF4    SPF PRIMARY OPTION MENU\n         BE    RETURN\n         CLI   KEYHIT,PF8    PAGE FORWARD???\n         BE    PAGE1\n         B     PAGE0GET      GO SEE WHAT TO DO NEXT\n         EJECT\nPAGE1    DS    0H\n         TPUT  CLEARBUF,CLEARLEN,FULLSCR\n         LA    R1,HELP1    HELP SCREEN NO. 1\n         LA    R0,HELP1L   LENGTH OF SCREEN\n         ICM   R1,8,FULLSCR SET FOR FULLSCREEN OPTION\n         TPUT  ((R1)),((R0)),R\nPAGE1GET DS    0H\n         LA    R1,HELP1    HELP SCREEN\n         LA    R0,HELP1L\n         LINK  EP=VSAMAGET   READ FROM TUBE\n         CLI   KEYHIT,ENTER  SHOULD WE DISPLAY NEXT HELP PAGE\n         BE    PAGE2\n         CLI   KEYHIT,PF3    EXIT HELP FUNCTION????\n         BE    RETURN        YES GET OUT\n         CLI   KEYHIT,PF4    SPF PRIMARY OPTION MENU\n         BE    RETURN\n         CLI   KEYHIT,PF7    PAGE BACK\n         BE    PAGE0\n         CLI   KEYHIT,PF8    PAGE FORWARD???\n         BE    PAGE2\n         B     PAGE1GET      GO SEE WHAT TO DO NEXT\n         EJECT\nPAGE2    DS    0H\n         BAL   LINKREG,RESETATR GO RESET ATTRIBUTES TO ASKIP,MDTOFF\n         BAL   LINKREG,DISMENU GO DISPLAY INPUT SELECTION MENU\n         LA    R1,HELP2\n         LA    R0,HELP2L\n         ICM   R1,8,FULLSCR\n         TPUT  ((R1)),((R0)),R\nPAGE2GET DS    0H\n         LA    R1,HELP2\n         LA    R0,HELP2L\n         LINK  EP=VSAMAGET\n         CLI   KEYHIT,ENTER  SHOULD WE DISPLAY NEXT HELP PAGE\n         BE    PAGE3\n         CLI   KEYHIT,PF3    EXIT HELP FUNCTION????\n         BE    RETURN        YES GET OUT\n         CLI   KEYHIT,PF4    SPF PRIMARY OPTION MENU\n         BE    RETURN\n         CLI   KEYHIT,PF7    PAGE BACK\n         BE    PAGE1\n         CLI   KEYHIT,PF8    PAGE FORWARD\n         BE    PAGE3\n         B     PAGE2GET      GO SEE WHAT TO DO NEXT\n         EJECT\nPAGE3    DS    0H\n         BAL   LINKREG,RESETATR GO RESET ATTRIBUTES TO ASKIP,MDTOFF\n         BAL   LINKREG,DISMENU GO DISPLAY INPUT SELECTION MENU\n         LA    R1,HELP3\n         LA    R0,HELP3L\n         ICM   R1,8,FULLSCR\n         TPUT  ((R1)),((R0)),R\nPAGE3GET DS    0H\n         LA    R1,HELP3\n         LA    R0,HELP3L\n         LINK  EP=VSAMAGET\n         CLI   KEYHIT,ENTER  SHOULD WE DISPLAY NEXT HELP PAGE\n         BE    PAGE4\n         CLI   KEYHIT,PF3    EXIT HELP FUNCTION????\n         BE    RETURN        YES GET OUT\n         CLI   KEYHIT,PF4    SPF PRIMARY OPTION MENU\n         BE    RETURN\n         CLI   KEYHIT,PF7    PAGE BACK\n         BE    PAGE2\n         CLI   KEYHIT,PF8    PAGE FORWARD\n         BE    PAGE4\n         B     PAGE3GET      GO SEE WHAT TO DO NEXT\n         EJECT\nPAGE4    DS    0H\n         BAL   LINKREG,RESETATR GO RESET ATTRIBUTES TO ASKIP,MDTOFF\n         BAL   LINKREG,DISMENU GO DISPLAY INPUT SELECTION MENU\n         LA    R1,HELP4\n         LA    R0,HELP4L\n         ICM   R1,8,FULLSCR\n         TPUT  ((R1)),((R0)),R\nPAGE4GET DS    0H\n         LA    R1,HELP4\n         LA    R0,HELP4L\n         LINK  EP=VSAMAGET\n         CLI   KEYHIT,ENTER  SHOULD WE DISPLAY NEXT HELP PAGE\n         BE    PAGE5\n         CLI   KEYHIT,PF3    EXIT HELP FUNCTION????\n         BE    RETURN        YES GET OUT\n         CLI   KEYHIT,PF4    SPF PRIMARY OPTION MENU\n         BE    RETURN\n         CLI   KEYHIT,PF7    PAGE BACK\n         BE    PAGE3\n         CLI   KEYHIT,PF8    PAGE FORWARD\n         BE    PAGE5\n         B     PAGE4GET      GO SEE WHAT TO DO NEXT\n         EJECT\nPAGE5    DS    0H\n         BAL   LINKREG,RESETATR GO RESET ATTRIBUTES TO ASKIP,MDTOFF\n         BAL   LINKREG,DISMENU GO DISPLAY INPUT SELECTION MENU\n         LA    R1,HELP5\n         LA    R0,HELP5L\n         ICM   R1,8,FULLSCR\n         TPUT  ((R1)),((R0)),R\nPAGE5GET DS    0H\n         LA    R1,HELP5\n         LA    R0,HELP5L\n         LINK  EP=VSAMAGET\n         CLI   KEYHIT,ENTER  WAS ENTER KEY HIT?\n         BE    PAGE6         YES-DISPLAY NEXT HELP PAGE.\n         CLI   KEYHIT,PF3    GET OUT OF HELP\n         BE    RETURN\n         CLI   KEYHIT,PF4    SPF PRIMARY OPTION MENU\n         BE    RETURN\n         CLI   KEYHIT,PF7    PAGE BACK\n         BE    PAGE4\n         CLI   KEYHIT,PF8    PAGE FORWARD\n         BE    PAGE6\n         B     PAGE5GET\nPAGE6    DS    0H\n         TPUT  CLEARBUF,CLEARLEN,FULLSCR\n         LA    R1,HELP6   SCREEN ADDRESS\n         LA    R0,HELP6L  SCREEN LENGTH\n         ICM   R1,8,FULLSCR  OPTION BYTE\n         TPUT  ((R1)),((R0)),R\nPAGE6GET DS    0H\n         LA    R1,HELP6   SCREEN ADDRESS\n         LA    R0,HELP6L  SCREEN LENGTH\n         LINK  EP=VSAMAGET GO READ FROM TUBE\n         CLI   KEYHIT,PF3  EXIT HELP FUNCTION?\n         BE    RETURN      YES-GET OUT\n         CLI   KEYHIT,PF4  SPF PRIMARY OPTION MENU?\n         BE    RETURN      YES-GET OUT\n         CLC   HLPTYPE,=CL3'CIS'  CI SELECTION HELP ONLY REQSTD?\n         BE    PAGE6GET    YES-GO SEE WHAT TO DO?\n         CLI   KEYHIT,ENTER ENTER-NEXT HELP PAGE?\n         BE    PAGE7        YES-GO DISPLAY IT\n         CLI   KEYHIT,PF7   PAGE BACKWARD?\n         BE    PAGE5        YES-GO DO IT\n         CLI   KEYHIT,PF8   PAGE FORWARD?\n         BE    PAGE7        YES-GO DO IT\n         B     PAGE6GET     GO SEE WHAT TO DO AGAIN!\nPAGE7    DS    0H\n         TPUT  CLEARBUF,CLEARLEN,FULLSCR\n         LA    R1,HELP7   SCREEN ADDRESS\n         LA    R0,HELP7L  SCREEN LENGTH\n         ICM   R1,8,FULLSCR  OPTION BYTE\n         TPUT  ((R1)),((R0)),R\nPAGE7GET DS    0H\n         LA    R1,HELP7   SCREEN ADDRESS\n         LA    R0,HELP7L  SCREEN LENGTH\n         LINK  EP=VSAMAGET GO READ FROM TUBE\n         CLI   KEYHIT,PF3  EXIT HELP FUNCTION?\n         BE    RETURN      YES-GET OUT\n         CLI   KEYHIT,PF4  SPF PRIMARY OPTION MENU?\n         BE    RETURN      YES-GET OUT\n         CLC   HLPTYPE,=CL3'DTL'  CI DISPLAY HELP ONLY REQSTD?\n         BE    PAGE7GET    YES-GO SEE WHAT TO DO?\n         CLI   KEYHIT,PF7   PAGE BACKWARD?\n         BE    PAGE6        YES-GO DO IT\n         B     PAGE7GET     GO SEE WHAT TO DO AGAIN!\nDISMENU  DS    0H\n         TPUT  CLEARBUF,CLEARLEN,FULLSCR\n         LA    R1,MENU\n         LA    R0,MENUL\n         ICM   R1,8,FULLSCR\n         TPUT  ((R1)),((R0)),R\n         BR    LINKREG\n         SPACE 3\nRESETATR DS    0H\n         MVC   RECAA,ASKIPOFF\n         MVC   RECMA,ASKIPOFF\n         MVC   RECLOADA,ASKIPOFF\n         MVC   RECADDA,ASKIPOFF\n         MVC   DEVTYPEA,ASKIPOFF\n         MVC   KEYLA,ASKIPOFF\n         MVC   CIPERA,ASKIPOFF\n         MVC   IMBA,ASKIPOFF\n         MVC   REPLA,ASKIPOFF\n         BR    LINKREG\n         SF    (ASKIP,MDTOFF)\n         ORG   *-1\nASKIPOFF DS    0X\n         ORG\n         EJECT\nRETURN   DS    0H\n         MVC   HLPTYPE,=CL3' '  CLEAR BEFORE RETURNING\n         L     R13,SAVEHLP+4\n         RETURN (14,12)\n         EJECT\n         COPY  VSAMAEQU\nFULLSCR  DC    X'03'\nCLEARBUF DC    X'C2115D7F1140403C5D7F0011404013' *POSITIONAL*\nCLEARLEN EQU   *-CLEARBUF                        *POSITIONAL*\n         EJECT\n         LTORG\n         EJECT\n         COPY  DESCSCRN\n         COPY  HLP0SCRN\n         COPY  HLP1SCRN\n         COPY  HLP2SCRN\n         COPY  HLP3SCRN\n         COPY  HLP4SCRN\n         COPY  HLP5SCRN\n         COPY  HLP6SCRN\n         COPY  HLP7SCRN\n         EJECT\n         COPY  VSAMAWRK\n         END   VSAMAHLP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMANAL": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x13\\x004\\x00\\x90'\\x8f\\x01\\x125\\x9f\\x12S\\x079\\x07\\x0f\\x00\\x00\\xc6\\xd6\\xd9\\xf3\\xf3\\xf9\\xf0@@@\"", "ispf": {"version": "01.19", "flags": 0, "createdate": "1990-10-05T00:00:00", "modifydate": "2012-12-24T12:53:34", "lines": 1849, "newlines": 1807, "modlines": 0, "user": "FOR3390"}, "text": "*\n*        PDSDOC *VSAMANAL UPDATED FOR 3380 (AND 3390?)................*\n*\n***********************************************************************\n*                                                                     *\n* THIS PROGRAM IS A TSO COMMAND PROCESSOR CALLED 'VSAMANAL'           *\n*                                                                     *\n* THE FUNCTION OF THIS COMMAND PROCESSOR IS TO DISPLAY TO THE USER    *\n* THE AVAILABLE CONTROL INTERVAL SIZES FOR A VSAM DATASET HAVING THE  *\n* CHARACTERISTICS DESCRIBED BY THE USER THROUGH THE FILLING IN OF     *\n* A MENU SELECTION SCREEN.                                            *\n* ALONG WITH THE AVAILABLE CONTROL INTERVAL SIZES OTHER               *\n* CHARACTERISTICS PERTINENT TO A VSAM DATASET WILL BE DISPLAYED       *\n* INCLUDING ESTIMATED SPACE REQUIREMENTS FOR THE DESCRIBED DATASET    *\n*                                                                     *\n* ALL COMMUNICATION WITH THE TSO USER IS THROUGH THE USE OF TPUT'S    *\n* AND TGET'S.  THE FULLSCR OPTION IS USED FOR ALL TPUT'S AND THE      *\n* BUFFERS USED ARE CREATED THROUGH THE CODING OF SPECIALIZED MACROS   *\n* WHICH GENERATE ALL THE 3270 BUFFER CONTROL CHARACTERS....           *\n*                                                                     *\n* AUTHOR: ARTHUR J. CARTIER                                           *\n* DATE:   10/10/78                                                    *\n* OWNER:  STATE OF CONNECTICUT                                        *\n*         CENTRAL DATA PROCESSING SERVICES                            *\n*         TECHNICAL SUPPORT SECTION                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* THE FOLLOWING SPECIAL MACROS ARE USED BY THIS MODULE:               *\n*     BUF3270                                                         *\n*     FIELD (NESTED MACROS= SBA,SF)                                   *\n*                                                                     *\n***********************************************************************\n*        PRINT NOGEN\n         PRINT ON,GEN              ASSEMBLER OPTIONS\n         EJECT\n         OSINIT  VSAMANAL,(3,10,11,12),NO\nGETSTRG  GETMAIN R,                                                    X\n               LV=WORKLEN+(DEVTABLN*DEVICES)+MENUL+HEADRL+(DATAL*4)\n         USING WORKAREA,WAREAREG        ADDRESSABILITY  TO OUR WORKAREA\n*INITIALIZE WORKAREA DSECT.......................................\n         LR    R6,R1             SET FOR CLEAR TO LOW VALUES(X'00')\n         LA    R7,WORKLEN        LENGTH OF WORKAREA FOR CLEAR\n         XR    R8,R8                   ZERO FOR CLEAR\n         XR    R9,R9                   ZERO FOR CLEAR\n         MVCL  R6,R8           CLEAR WORKAREA TO BINARY ZEROS(X'00'S)\n         ST    R1,8(R13)                SET FORWORD SAVEAREA CHAIN\n         ST    R13,4(R1)                SET BACKWORD SAVEAREA CHAIN\n         LR    WAREAREG,R1              WORKAREA ADDRESS\n*INITIALIZE MENU SCREEN (3270 FULLSCR OUTPUT BUFFER).............\n         ST    R6,AMENUD               SET WORKAREA MENU SCREEN POINTER\n         LA    R7,MENUL                 LENGTH OF MVCL OPERAND 1\n         ST    R7,LMENUD                SAVE LENGTH FOR OTHER MODS\n         LR    R9,R7                    SAVE LENGTH FOR OPERAND 2\n         LA    R8,MENU                  ADDR OF OPERAND 2 FOR MVCL\n         MVCL  R6,R8                    MOVE MENU SCREEN TO WORKAREA\n*INITIALIZE HEADR SCREEN (3270 FULLSCR OUTPUT BUFFER).............\n         ST    R6,AHEADRD             SET WORKAREA HEADR SCREEN POINTER\n         LA    R7,HEADRL                LENGTH OF MVCL OPERAND 1\n         ST    R7,LHEADRD               SAVE LENGTH FOR OTHER MODS\n         LR    R9,R7                    SAVE LENGTH FOR OPERAND 2\n         LA    R8,HEADR                 ADDR OF OPERAND 2 FOR MVCL\n         MVCL  R6,R8                    MOVE MENU SCREEN TO WORKAREA\nINITPGE1 DS    0H\n*INITIALIZE(PAGE1) DATA SCREEN (3270 FULLSCR OUTPUT BUFFER)...........\n         ST    R6,DATA1PGE             SET WORKAREA DATA SCREEN(PAGE 1)\n         LA    R7,DATAL                 LENGTH OF MVCL OPERAND 1\n         ST    R7,LDATAD                SAVE LENGTH FOR OTHER MODS\n         LR    R9,R7                    SAVE LENGTH FOR OPERAND 2\n         LA    R8,DATA                  ADDR OF OPERAND 2 FOR MVCL\n         MVCL  R6,R8                    MOVE MENU SCREEN TO WORKAREA\n*INITIALIZE(PAGE2) DATA SCREEN (3270 FULLSCR OUTPUT BUFFER)...........\n         ST    R6,DATA2PGE             SET WORKAREA DATA SCREEN(PAGE 1\n         LA    R7,DATAL                 LENGTH OF MVCL OPERAND 1\n         LR    R9,R7                    SAVE LENGTH FOR OPERAND 2\n         LA    R8,DATA                  ADDR OF OPERAND 2 FOR MVCL\n         MVCL  R6,R8                    MOVE MENU SCREEN TO WORKAREA\n*INITIALIZE(PAGE3) DATA SCREEN (3270 FULLSCR OUTPUT BUFFER)...........\n         ST    R6,DATA3PGE             SET WORKAREA DATA SCREEN(PAGE 1\n         LA    R7,DATAL                 LENGTH OF MVCL OPERAND 1\n         LR    R9,R7                    SAVE LENGTH FOR OPERAND 2\n         LA    R8,DATA                  ADDR OF OPERAND 2 FOR MVCL\n         MVCL  R6,R8                    MOVE MENU SCREEN TO WORKAREA\n*INITIALIZE(PAGE4) DATA SCREEN (3270 FULLSCR OUTPUT BUFFER)...........\n         ST    R6,DATA4PGE             SET WORKAREA DATA SCREEN(PAGE 4\n         LA    R7,DATAL                 LENGTH OF MVCL OPERAND 1\n         LR    R9,R7                    SAVE LENGTH FOR OPERAND 2\n         LA    R8,DATA                  ADDR OF OPERAND 2 FOR MVCL\n         MVCL  R6,R8                    MOVE MENU SCREEN TO WORKAREA\n         EJECT\nINITDEVC DS    0H\n*INITIALIZE ALL DEVICE TABLES ...................................\n*  EACH DEVICE TYPE SUPPORTED BY THIS PROGRAM HAS ITS OWN TABLE OF\n*  CI SIZES AND OTHER DEVICE DEPENDENT DATA.\n*  FOR RE-ENTRENCY PURPOSES THE DEVICE TABLES, WHICH ARE USED\n*  FOR CALCULATIONS, WILL BE COPIES OF THE REAL DEVICE TABLES.\n*  THE STORAGE FOR THESE TABLES(COPIES) WAS JUST GETMAINED SO NOW\n*  THE WORKING DEVICE TABLES MUST BE INITIALIZED.\n*  THIS IS ACCOMPLISHED THROUGH THE USE OF STATIC DEVICE LIST WHICH\n*  CONTAINS THE NO. OF DEVICES TYPES SUPPORTED (DEVICE TABLES),\n*  AND AND ENTRY FOR EACH DEVICE TYPE SUPPORTED,  WHICH CONSISTS\n*  OF THE DEVICE TYPE AND THE ADDRESS OF THE REAL DEVICE TABLE.\n*\n*  THERE ALSO IS A WORK DEVICE LIST IN OUR COMMON WORKAREA THAT\n*  CORRESPONDS TO THE STATIC DEVICE LIST.            .\n*  THIS WORK LIST WILL BE INITIALIZED WITH THE ADDRESSES OF THE\n*  WORKING DEVICE TABLES.\n*\n*  AFTER INITIALIZATION THE WORK DEVICE TABLES, THE WORK DEVICE\n*  LIST POINTING TO THESE DEVICE TABLES WILL BE USED IN ALL\n*  PROCESSING.\n*\n         MVC   DEVLSTWK,DEVLSTST    MAKE BOTH DEVICE LISTS THE SAME\n         LA    R1,DEVLSTST    START OF STATIC DEVICE LIST\n         LA    R2,DEVLSTWK    START OF WORKING DEVICE LIST\n         LH    R15,0(R1)      NUMBER OF DEVICES IN DEVICE LIST\n         LA    R1,2(R1)       FIRST DEVICE ENTRY IN STATIC LIST\n         LA    R2,2(R2)       FIRST DEVICE ENTRY IN WORKING LIST\nDEVTBLP  DS    0H             ENTRY POINT FOR DEVICE LIST LOOP\n         ST    R6,4(R2)       SET WORKING LIST DEVICE TABLE ADDRESS\n         LA    R7,DEVTABLN    LENGTH OF DEVICE TABLE FOR MVCL\n         LR    R9,R7          SAVE LENGTH FOR OPERAND 2\n         L     R8,4(R1)       ADDR OF STATIC LIST DEVICE ENTRY\n         MVCL  R6,R8          MOVE DEVICE TABLE TO WORK COPY\n         LA    R1,8(R1)       NEXT STATIC LIST ENTRY\n         LA    R2,8(R2)       NEXT WORKING LIST ENTRY\n         BCT   R15,DEVTBLP\n         EJECT\nPUTMENU  DS    0H\n         L     SCRNREG,AMENUD  ESTABLISH ADDRESSABILITY FOR SCREEN\n         USING MENUD,SCRNREG            ADDRESSABILITY FOR DSECT\n         TPUT CLEARBUF,CLEARLEN,FULLSCR\n         LR    R1,SCRNREG               LOAD FOR TPUT REGISTER FORMAT\n         L     R0,LMENUD                LOAD FOR TPUT REGISTER FORMAT\n         ICM   R1,8,FULLSCR             SET FOR FULLSCR OPTION\n         TPUT ((1)),((0)),R\n         LA    R1,MENUD                 ADDR OF MENU SCREEN IN WORKAREA\n         L     R0,LMENUD                LENGTH OF MENU SCREEN\n         LR    R2,WAREAREG              ADDR OF COMMON WORKAREA\n         MVC   HLPTYPE,=CL3'ALL'        HELP TYPE REQUESTED\n         LINK  EP=VSAMAGET              GO AND READ FROM TUBE\n*                                       AND PROCESS INPUT\n         OC    PROCERR,PROCERR          ANY PROCESSING ERRORS?\n         BZ    CKMENUKY                 NO GO EDIT INPUT DATA\n         MVC   ERROR,PROCERR            SET PROCESSING ERROR IN MENU\n         B     PUTMENU\nCKMENUKY DS    0H\n         CLI   KEYHIT,CLEAR\n         BE    RETURN\n         CLI   KEYHIT,PF4               WAS PF4-HIT??\n         BE    RETURN                   YES-GET OUT OF THIS PROGRAM\n         CLI   KEYHIT,PF3               WAS PF3-HIT??\n         BE    REINIT                   NO-GO CHECK PARMAMETERS\n         CLI   KEYHIT,PF1               WAS HELP REQUESTED?\n         BNE   PARM1\n         LR    R0,WAREAREG              WORKAREA ADDRESS\n         LINK  EP=VSAMAHLP\n         CLI   KEYHIT,PF4               SPF PRIMARY OPTION MENU\n         BE    RETURN\n         B     PUTMENU\nREINIT   DS    0H\n         LR    R1,WAREAREG              SET FOR FREEMAIN\n         L     R13,SAVE+4               RESET SAVE AREA POINTER\nFREESTRG FREEMAIN R,A=(1),                                             X\n               LV=WORKLEN+(DEVTABLN*DEVICES)+MENUL+HEADRL+(DATAL*3)\n         B     GETSTRG                  GO GET ANOTHER PROGRAM WORKAREA\n         EJECT\nPARM1    DS    0H\n         LA    R15,RECA\n         LH    R14,=Y(RECAL)          LENGTH OF FIELD\n         BAL   LINKREG,NUMERIC         GO SEE IF DATA IS NUMERIC\n         B     BADRECSA                NOT NUMERIC\n         CLC   RECA,BLANKS             WAS DATA KEYED\n         BE    NORECA                  NO-ERROR PARAMETER NOT OPTIONAL\n         BAL   LINKREG,CVB             YES-CONVERT DATA TO BINARY\n         OR    R1,R1              WAS RECSIZE-AVG ZEROS????\n         BZ    RECAZERO           YES-ERROR\n         ST    R1,RECSZ                 STORE DATA\n         C     R1,=F'32761'             IS IT GREATER THAN MAX ALLOWED\n         BH    RECALARG                 YES - ERROR\n         SPACE 3\nPARM2    DS    0H\n         LA    R15,RECM\n         LH    R14,=Y(RECML)           LENGTH OF DATA 730\n         BAL   LINKREG,NUMERIC         GO SEE IF DATA IS NUMERIC\n         B     BADRECSM                NOT NUMERIC\n         CLC   RECM,BLANKS             WAS DATA KEYED\n         BNE   PARM2C                  YES-GO CONVERT IT TO BINARY\nSAVAVG   DS    0H\n         MVC   MAXRECSZ,RECSZ          NO-MAKE IT SAVE AS AVERAGE\n         B     PARM3                   GO PROCESS NEXT PARAMETER\nPARM2C   DS    0H\n         BAL   LINKREG,CVB              CONVERT DATA TO BINARY\n         ST    R1,MAXRECSZ              STORE DATA\n         C     R1,=F'32761'             IS MAXIMUM GREATER THAN ALLOWED\n         BH    RECMLARG                 YES-ERROR IN RECSIZE\n         C     R1,RECSZ                 IS MAX GREATER THAN AVG\n         BL    LORECM                   NO-MAX RECSZ ERROR(LOW)\n         OR    R1,R1                    WAS ZEROS KEYED???\n         BZ    SAVAVG                   YES-USE AVG-RECSIZE\n         SPACE 3\nPARM3    DS    0H\n         CLC   RECLOAD,BLANKS          WAS DATA KEYED\n         BE    NORECLD                 NO-ERROR PARAMETER NOT OPTIONAL\n         LA    R15,RECLOAD\n         LH    R14,=Y(RECLOADL)        LENGTH OF DATA FIELD910\n         BAL   LINKREG,NUMERIC         GO SEE IF DATA IS NUMERIC\n         B     BADRECLD                NOT NUMERIC\n         BAL   LINKREG,CVB              CONVERT DATA TO BINARY\n         OR    R1,R1              WAS RECLOAD ZEROS???????\n         BZ    RECLZERO           YES-ERROR\n         ST    R1,#RECLD                STORE DATA\n         SPACE 3\nPARM4    DS    0H\n         CLC   RECADD,BLANKS            WAS PARAMETER KEYED\n         BNE   CONTP4                   YES-GO PROCESS THIS PARAMETER\n         XC    #RECADD,#RECADD          ZERO OUT PARAMETER\n         B     PARM5\nCONTP4   DS    0H\n         LA    R15,RECADD\n         LH    R14,=Y(RECADDL)          LENGTH OF DATA FIELD\n         BAL   LINKREG,NUMERIC          GO SEE IF DATA IS NUMERIC\n         B     BADRECAD                 NOT NUMERIC\n         BAL   LINKREG,CVB              YES-CONVERT DATA TO BINARY\n         ST    R1,#RECADD               STORE DATA\nPARM5    DS    0H\n         LA    R15,KEYL\n         LH    R14,=Y(KEYLL)           LENGTH OF DATA FIELD\n         BAL   LINKREG,NUMERIC          GO SEE IT DATA IS NUMERIC\n         B     BADKLEN                  NOT NUMERIC\n         CLC   KEYL,BLANKS              WAS PARAMETER KEYED\n         BE    CHKRADD                  NO- GO SEE IF RADD KEYED\n         BAL   LINKREG,CVB              YES- CONVERT DATA TO BINARY\n         STH   R1,KEYLEN                STORE DATA\n         CH    R1,=H'255'               IS KEYLEN GREATER THAN MAX\n         BH    HIKLEN                   YES- ERROR IN KEY\n         C     R1,MAXRECSZ              IS MAXRECSZ LESS THAN KEYLEN\n         BH    BADMAXRC                 YES-ERROR IN KEYLEN OR MAXRSZ\n         B     PARM6                    GO PROCESS NEXT PARAMETER\nCHKRADD  DS    0H\n         XC    KEYLEN,KEYLEN            ZERO OUT PARAMETER\n         OC    #RECADD,#RECADD          WAS RADD PARAMETER KEYED\n         BZ    PARM6                    NO-GO PROCESS NEXT PARAMETER\n         L     R1,#RECADD\n         A     R1,#RECLD               ADD RADD TO RLOAD\n         ST    R1,#RECLD               SET NEW RECLOAD\n         XC    #RECADD,#RECADD          CLEAR BECAUSE NOT KSDS\n         SPACE 3\nPARM6    DS    0H\n         OC    #RECADD,#RECADD   #RECADD NOT ENTERED OR ESDS/RRDS?\n         BZ    NOCICAPR          YES-GO SET CICA RATIOS TO ZERO?\n         CLC   CIPER,BLANKS   WAS CIPERCENTAGE KEYED??\n         BE    SETCIPD        NO-GO SET CI/CA RATIO DEFAULTS...\n         LA    R15,CIPER      ADDRESS OF DATA\n         LH    R14,=Y(CIPERL) LENGTH OF DATA\n         BAL   LINKREG,NUMERIC IS DATA NUMERIC????\n         B     BADCIPER       NOT NUMERIC\n         BAL   LINKREG,CVB    NUMERIC-CONVERT IT TO BINARY\n         C     R1,=F'100'     IS PERCENTAGE GREATER THAN 100\n         BH    CIPERHI        YES-ERROR\n         ST    R1,CIRATIO       SET CI FREESPACE RATIO(INSRT RATE)\n         B     PARM6A\nSETCIPD  DS    0H\n         MVC   CIRATIO,=F'0'    CIRATIO  DEFAULT\n         B     PARM6A\nNOCICAPR DS    0H\n         XC    CIRATIO,CIRATIO  ZERO\n         XC    CARATIO,CARATIO  ZERO\n         XC    XTRARECS,XTRARECS ZERO\n         B     PARM7\n         SPACE 3\nPARM6A   DS    0H\n         CLC   CAPER,BLANKS   WAS CAPERCENTAGE KEYED??\n         BE    SETCAPD        NO-GO SET CA RATIO DEFAULTS...\n         LA    R15,CAPER      ADDRESS OF DATA\n         LH    R14,=Y(CAPERL) LENGTH OF DATA\n         BAL   LINKREG,NUMERIC IS DATA NUMERIC????\n         B     BADCAPER       NOT NUMERIC\n         BAL   LINKREG,CVB    NUMERIC-CONVERT IT TO BINARY\n         C     R1,=F'100'     IS PERCENTAGE GREATER THAN 100\n         BH    CAPERHI        YES-ERROR\n         A     R1,CIRATIO     ADD CI RATIO TO CA RATIO\n         C     R1,=F'100'     ARE THEY COLLECTIVELY GREATER THAN 100\n         BH    CICAPRHI       YES-ERROR\n         S     R1,CIRATIO     NO- SUB CI RATIO\n         ST    R1,CARATIO       SET CA FREESPACE RATIO(INSRT RATE)\n         B     XTRAINSR       GO CI CA RATIOS ARE COLLECTIVELY LESS\n*                             THAN 100 IF SO THEN GIVE USER FREE RECS\n*                             AT THE END OF THE DATASET.....\nSETCAPD  DS    0H\n         MVC   CARATIO,=F'0'   CARATIO  DEFAULT\n         B     XTRAINSR\n         SPACE 3\nXTRAINSR DS    0H\n         OC    CIRATIO,CIRATIO    WAS CI% KEYED?\n         BNZ   CONTXTRA           YES-CONT PROCESSING\n         OC    CARATIO,CARATIO    WAS CA% KEYED?\n         BZ    NULLRECA           NO-BOTH CI% AND CA% NOT KEYED.\nCONTXTRA DS    0H\n         XC    XTRARECS,XTRARECS  ZERO\n         L     R14,CIRATIO\n         A     R14,CARATIO\n         LA    WORKREG,100\n         SR    WORKREG,R14\n         OR    WORKREG,WORKREG    DO CI CA RATIO EQUAL 100\n         BZ    PARM7              YES-NO XTRA RECS AT END OF DATASET\n* THE (ADD RECORD PERCENTAGES FOR CI AND CA FREESPACE CALCULATIONS DO\n* NOT ADD UP TO 100, THEREFORE THE NUMBER OF ADD RECORDS NOT ACCOUNTED\n* FOR IN THE TWO PERCENTAGES WILL BE CALCULATED TO FIT AT THE END OF\n* THE DATASET AND NOT WITHIN CI-CA FREESPACE.\n*\n         XR    R14,R14            CLEAR\n         L     R15,#RECADD        SET FOR MULTIPLY\n         MR    R14,WORKREG        #RECADD X (100 - (CIRATIO + CARATIO))\n         D     R14,=F'100'        FIND HOW MANY XTRA RECS AT END DSET\n         ST    R15,XTRARECS       STORE XTRARECS VALUE FOR FUTURE CALC\n* NOW THAT THE EXTRA RECORDS SLOTS TO BE LEFT AT THE END OF THE DATASET\n* HAS BEEN CALCULATED THE CIRATIO AND CARATIO MUST BE RATIOED SO THEY\n* ADD UP TO 100.\n* THE CALCULATION FOR ADJUSTMENT IS:\n*\n*   CIRATIO = (CIRATIO * 100)  /  (CIRATIO + CARATIO)   (DON'T ROUND)\n*\n*   CARATIO = (CARATIO * 100)  /  (CIRATIO + CARATIO)   (ROUNDED UP)\n*\n*\n         L     WORKREG,CIRATIO     SET UP DIVISOR\n         A     WORKREG,CARATIO     WORKREG = (CIRATIO + CARATIO)\n         XR    R14,R14             CLEAR FOR MULTIPLY\n         L     R15,CIRATIO         SET UP FOR MULTIPLY\n         MH    R15,=H'100'         MULTIPLY BY 100 FOR PERCENTAGE\n         DR    R14,WORKREG         DIVIDE GIVING ADJUSTED PERCENTAGE\n         ST    R15,CIRATIO         SAVE NEW PERCENTAGE\n         XR    R14,R14             CLEAR FOR MULTIPLY\n         L     R15,CARATIO         SET UP FOR MULTIPLY\n         MH    R15,=H'100'         MULTIPLY BY 100 FOR PERCENTAGE\n         DR    R14,WORKREG         DIVIDE GIVING ADJUSTED PERCENTAGE\n         OR    R14,R14             CHECK IF ROUNDING NEEDED\n         BZ    BYRATRND            NO - BYPASS ROUNDING UP\n         LA    R15,1(R15)          ROUND UP\nBYRATRND DS    0H\n         ST    R15,CARATIO         SAVE NEW PERCENTAGE\n         B     PARM7\n         SPACE 3\nNULLRECA DS    0H\n         L     WORKREG,#RECLD     CI AND CA ADD REC %'S WERE NOT KEYED\n         A     WORKREG,#RECADD    SO RECORDS T/B ADDED WILL BE ADDED TO\n         ST    WORKREG,#RECLD     RECORDS T/B LOADED. AND THEN MADE 0\n         XC    #RECADD,#RECADD\n         B     PARM7\n         SPACE 3\nPARM7    DS    0H\n         LA    R1,DEVLSTWK              START OF WORK DEVICE LIST\n         XR    R14,R14\n         ICM   R14,3,0(R1)              NO OF DEVICES IN LIST\n         LA    R1,2(R1)                 FIRST ENTRY IN DEVICE LIST\nDEVLOOP  DS    0H\n         CLC   DEVTYPE,0(R1)            IS DEVICE IN LIST\n         BE    SETDEVIC                 YES GO SETUP AS ACTIVE\n         LA    R1,8(R1)                 NEXT ENTRY IN LIST\n         BCT   R14,DEVLOOP              GO CHECK IT OUT\n         B     BADDEV                   DEVICE TYPE NOT IN LIST\nSETDEVIC DS    0H\n         MVC   DEVICE,DEVTYPE           SET DEVICE AS KEYED\n         MVC   DEVREGSV,4(R1)           SAVE WORK DEVICE TABLE ADDR\n         B     PARM8\nPARM8    DS    0H\n         OC    IMB,BLANKS          MAKE UPPERCASE\n         CLC   IMB,BLANKS          WAS IMBED KEYED\n         BE    SETNOIMB            NO-SET TO NOIMBED\n         CLC   IMB,=C'NO '         WAS NO KEYED\n         BE    SETNOIMB            YES-GO SET\n         CLC   IMB,=C'YES'         WAS YES KEYED\n         BNE   BADIMB              NO-ERROR IS SPECIFICATION\n         MVC   IMBFCTR,=H'1'       YES -SET IMBED FACTOR\n         B     PARM9\nSETNOIMB DS    0H\n         XC    IMBFCTR,IMBFCTR     SET IMBED FACTOR TO ZERO\n         B     PARM9\n*\nPARM9    DS    0H\n         OC   REPL,BLANKS          MAKE UPPERCASE\n         CLC  REPL,BLANKS          WAS REPLICATE KEYED\n         BE    SETNOREP            NO-SET TO NOREPL\n         CLC  REPL,=C'NO '         WAS NO KEYED\n         BE    SETNOREP            YES-GO SET\n         CLC  REPL,=C'YES'         WAS YES KEYED\n         BNE   BADREPL             NO-ERROR IS SPECIFICATION\n         MVC   REPLFCTR,=H'1'      YES -SET REPLICATE FACTOR\n         B     RESTMENU       GO RESET MENU FIELDS\nSETNOREP DS    0H\n         XC    REPLFCTR,REPLFCTR   SET REPLICATE FACTOR TO ZERO\n         B     RESTMENU\n* CONVERT A PARAMETER TO BINARY\nCVB      DS    0H\n         XR    R1,R1               CLEAR\n         LA    WORKREG,0(R14,R15)  END OF DATA + 1\n         BCTR  WORKREG,0           END OF DATA\nCVBCOMP  DS    0H\n         CLI   0(WORKREG),C' '     IS THERE A BLANK\n         BNE   CVBCONT             NO-CONTINUE\n         BCTR  R14,0               YES- SUB 1 FROM DATALENGTH\n         BCTR  WORKREG,0           BACKUP 1 BYTE\n         CR    WORKREG,R15         ARE WE AT THE BEGINNING OF DATA\n         BLR   LINKREG             YES-EXIT DATA IS ALL BLANK\n         B     CVBCOMP        NO-GO FIND NON-BLANK\nCVBCONT  DS    0H\n         IC    R1,PACKPARM+1       SET TO INSTRUCTION LENGHTS\n         AR    R1,R14              ADD LENGTH OF KEYED DATA (OPERAND 2)\n         BCTR  R1,0                SUB 1 FOR EXECUTE  INSTRUCTION\n         EX    R1,PACKPARM         DO VARIABLE PACK\n         CVB   R1,DOUBLE           CONVERT PARM VALUE TO BINARY\n         BR    LINKREG\nPACKPARM PACK  DOUBLE,0(0,R15)     VARIABLE LENGTH PACK\n         SPACE 3\nNUMERIC  DS    0H\n         BCTR  R14,0               SUB 1 FOR EXECUTE\n         EX    R14,NUMTRT          GO CHECK FOR ALL NUMERICS OR BLANKS\n         LA    R14,1(R14)          RESET TO DATALENGTH\n         BNZR  LINKREG             GO TO ERROR BRANCH(NOT NUMERIC)\n         B     4(LINKREG)          NUMERIC BRANCH\nNUMTRT   TRT   0(0,R15),NUMTABLE\nNUMTABLE DS    0CL256\n         DC    CL64' '\n         DC    X'00'      BLANK\n         DC    CL175' '\n         DC    10X'00'    0 THRU 9\n         DC    CL6' '\nRESTMENU DS    0H\n* THIS ROUTINE WILL RESET ALL KEYABLE FIELDS IN THE MENU SCREEN\n* TO ASKIP,MDTOFF BECAUSE NO FIELDS WERE IN ERROR.........\n*\n         MVC   RECAA,ASKIPOFF     RESET ATTRIBUTE\n         MVC   RECMA,ASKIPOFF     RESET ATTRIBUTE\n         MVC   RECLOADA,ASKIPOFF  RESET ATTRIBUTE\n         MVC   RECADDA,ASKIPOFF   RESET ATTRIBUTE\n         MVC   DEVTYPEA,ASKIPOFF  RESET ATTRIBUTE\n         MVC   KEYLA,ASKIPOFF     RESET ATTRIBUTE\n         MVC   CIPERA,ASKIPOFF    RESET ATTRIBUTE\n         MVC   CAPERA,ASKIPOFF    RESET ATTRIBUTE\n         MVC   IMBA,ASKIPOFF      RESET ATTRIBUTE\n         MVC   REPLA,ASKIPOFF     RESET ATTRIBUTE\n         MVC   ERRORA,ASKIPOFF    RESET ATTRIBUTE\n         MVC   ERROR,MENU+ERROR-MENUD\n         LR    R1,SCRNREG         MENU SCREEN ADDRESS\n         L     R0,LMENUD          MENU SCREEN LENGTH\n         ICM   R1,8,FULLSCR       TPUT,FULLSCR OPTION BYTE\n         TPUT  ((R1)),((R0)),R\n         B     CKDEVTYP           KEEP ON T\n         SF    (ASKIP,MDTOFF,HI)\n         ORG   *-1                LOCATION TO ATTRIBUTE\nASKIPOFF DS    0X                 SYMBOLIC REFERENCE TO ATTRIBUTE BYTE\n         ORG\n         EJECT\n* INPUT ERROR ROUTINES...DESCRIPTIVE MESSAGE OF ERROR\n* CONDITION WILL BE DISPLAYED ON TERMINAL........\n*\n*\nBADKLEN  DS    0H\n         MVC   ERROR,KLENMSG\n         MVC   ADDRESS,KEYLS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADCIPER DS    0H\n         MVC   ERROR,CIPMSG\n         MVC   ADDRESS,CIPERS+1   3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nCIPERHI  DS    0H\n         MVC   ERROR,CIPHIMSG\n         MVC   ADDRESS,CIPERS+1   3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADCAPER DS    0H\n         MVC   ERROR,CAPMSG\n         MVC   ADDRESS,CAPERS+1   3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nCAPERHI  DS    0H\n         MVC   ERROR,CAPHIMSG\n         MVC   ADDRESS,CAPERS+1   3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nCICAPRHI DS    0H\n         MVC   ERROR,CICAHMSG\n         MVC   ADDRESS,CIPERS+1   3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nHIKLEN   DS    0H\n         MVC   ERROR,HIKEYMSG\n         MVC   ADDRESS,KEYLS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADMAXRC DS    0H\n         MVC   ERROR,BADKYMSG\n         MVC   ADDRESS,KEYLS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADDEV   DS    0H\n         MVC   ERROR,DEVMSG\n         MVC   ADDRESS,DEVTYPES+1 3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADRECSA DS    0H\n         MVC   ERROR,RECAMSG\n         MVC   ADDRESS,RECAS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nRECAZERO DS    0H\n         MVC   ERROR,RECAZMSG\n         MVC   ADDRESS,RECAS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADRECSM DS    0H\n         MVC   ERROR,RECMMSG\n         MVC   ADDRESS,RECMS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nRECMLARG DS    0H\n         MVC   ERROR,RECMLMSG\n         MVC   ADDRESS,RECMS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nRECALARG DS    0H\n         MVC   ERROR,RECALMSG\n         MVC   ADDRESS,RECAS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADIMB   DS    0H\n         MVC   ERROR,IMBMSG\n         MVC   ADDRESS,IMBS+1     3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADREPL  DS    0H\n         MVC   ERROR,REPLMSG\n         MVC   ADDRESS,REPLS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADRECLD DS    0H\n         MVC   ERROR,RECLDMSG\n         MVC   ADDRESS,RECLOADS+1 3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nBADRECAD DS    0H\n         MVC   ERROR,RECADMSG\n         MVC   ADDRESS,RECADDS+1  3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nNORECLD  DS    0H\n         MVC   ERROR,NRECLMSG\n         MVC   ADDRESS,RECLOADS+1 3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nRECLZERO DS    0H\n         MVC   ERROR,RECLZMSG\n         MVC   ADDRESS,RECLOADS+1 3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nNORECA   DS    0H\n         MVC   ERROR,NRECAMSG\n         MVC   ADDRESS,RECAS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         SPACE 3\nLORECM   DS    0H\n         MVC   ERROR,LORECMSG\n         MVC   ADDRESS,RECMS+1    3270 ADDRESS OF FIELDS ATTR BYTE\n         BAL   LINKREG,SBAPLUS    GO ADD 1 TO 3270 ADDRESS\n         MVC   MENUX,ADDRESS      SET TO FIRST BYTE IN ERROR FIELD\n         B     PUTMENU\n         EJECT\nSBAMINUS DS    0H                 THIS ROUTINE SUBS 1 FROM 3270 ADDR\n         ST    R15,SAVEREG        SAVE\n         XR    R15,R15            CLEAR\n         XR    R14,R14            CLEAR\n         IC    R14,ADDRESS        FIRST 3270 ADDRESS BYTE\n         N     R14,=X'0000003F'   TURN OFF UNUSED BITS 0-1\n         IC    R15,ADDRESS+1      SECOND 3270 ADDRESS BYTE\n         N     R15,=X'0000003F'   TURN OFF UNUSED BITS 0-1\n         SLL   R14,6\n         AR    R14,R15            RELATIVE BUFFER POSITION\n         BCTR  R14,0              SUB 1 FROM RELATIVE POSITION\n         SPACE 3\n         XR    R15,R15            CLEAR\n         SLL   R14,20\n         SRDL  R14,26\n         SRL   R15,26\n         STC   R14,ADDRESS\n         STC   R15,ADDRESS+1\n         TR    ADDRESS,BUFTABLE\n         L     R15,SAVEREG        RESTORE BEFORE EXITING\n         BR    LINKREG\n         EJECT\nSBAPLUS  DS    0H                 THIS ROUTINE ADDS 1 TO 3270 ADDR\n         XR    R15,R15            CLEAR\n         XR    R14,R14            CLEAR\n         IC    R14,ADDRESS        FIRST 3270 ADDRESS BYTE\n         N     R14,=X'0000003F'   TURN OFF UNUSED BITS 0-1\n         IC    R15,ADDRESS+1      SECOND 3270 ADDRESS BYTE\n         N     R15,=X'0000003F'   TURN OFF UNUSED BITS 0-1\n         SLL   R14,6\n         AR    R14,R15            RELATIVE BUFFER POSITION\n         LA    R14,1(R14)         ADD 1 TO RELATIVE POSITION\n         SPACE 3\n         XR    R15,R15            CLEAR\n         SLL   R14,20\n         SRDL  R14,26\n         SRL   R15,26\n         STC   R14,ADDRESS\n         STC   R15,ADDRESS+1\n         TR    ADDRESS,BUFTABLE\n         BR    LINKREG\n         EJECT\n* THIS ROUTINE WILL SET UP THE CORRECT DEVICE TABLE POINTERS ACCORDING\n* TO THE DEVICE TYPE SPECIFIED BY INPUT OR THE DEFAULT DEVICE TYPE..\n*\n*\nCKDEVTYP DS    0H\n         USING DEVENTRY,DEVREG     ADDRESSABILITY FOR DEVICE DSECT\n         L     DEVREG,DEVREGSV     POINT TO BEGINNING OF DEVICE TABLE\n         LA    DEVREG,DEVTABLN-4(DEVREG) BLOCK OVERHEAD VALUE\n         MVC   BLKOVRHD,0(DEVREG)  BLOCK OVERHEAD IN BYTES\n         SH    DEVREG,=H'4'        TRACK CAPACITY VALUE\n         MVC   TRKCAP,0(DEVREG) MOVE IT\n         SH    DEVREG,=H'2'   TRACKS PER CYLINDER VALUE\n         LH    WORKREG,0(DEVREG)   GET TRACKS PER CYLINDER\n         ST    WORKREG,TRKCYL      SAVE IT\n         SH    DEVREG,=H'2'        DEVICE TYPE CODE\n         MVC   DEVCODE,0(DEVREG)   MOVE IT\n         B     NULLCISZ            GO NULLIFY DCISZ TABLE ENTRIES\n         EJECT\n* THIS ROUTINE WILL SCAN THE DATA CI SIZE FIELD IN EACH ENTRY OF THE\n* DEVICE TABLE TO SEE IF THE DATA CI SIZE IS TO SMALL FOR THE\n* MAXRECSZ+7.. IF SO THEN THAT DATA CI SIZE ENTRY WILL NULLED(ZEROS)\n* SO THAT IT WILL NOT BE CONSIDERED WHEN FINDING THE BEST DATA CI SIZES\n*\n*\nNULLCISZ DS    0H\n         L     DEVREG,DEVREGSV         FIRST TABLE ENTRY\n         L     R15,MAXRECSZ\n         LA    R15,7(R15)              ADD 7 TO MAXRECSZ\nNULLLOOP DS    0H\n         CLC   DCISZ,=F'-1'            ARE WE AT THE END OF THE TABLE\n         BE    PROCCISZ                YES- GO PROCESS DCISZ'S IN TABLE\n         C     R15,DCISZ               IS MAXRECSZ+7 GREATER THAN DCISZ\n         BNH   PROCCISZ                NO-GO PROCESS DCISZ'S IN TABLE\n         XC    DCISZ,DCISZ             YES-NULLIFY THIS TABLE ENTRY\n         LA    DEVREG,DEVENLEN(DEVREG) POINT TO THE NEXT TABLE ENTRY\n         B     NULLLOOP                GO LOOK AGAIN\n         EJECT\n* THIS ROUTINE WILL PROCESS EACH DATA CI SIZE ENTRY IN THE DEVICE TABLE\n* IN ORDER TO DETERMINE WHICH DATA CI SIZES ARE THE BEST CHOICES FOR\n* THE INDICATED RECORDSIZES........\n*\n*\nPROCCISZ DS    0H\n         L     DEVREG,DEVREGSV     SET TO TOP OF DEVICE TABLE\nDCISZP2  OC    DCISZ,DCISZ         DOES THIS DCISZ QUALIFY\n         BZ    NXTDCISZ            NO -  GO BUMP TO NEXT ENTRY\n         CLC   DCISZ,=F'-1'        IS IT THE END OF THE DEVICE TABLE\n         BE    PUTHEADR            YES - GO DISPLAY THE INFO\n         MVC   DCARATIO,CARATIO    MOVE PERCENTAGE OF ADD RECORDS\n         MVC   DCIRATIO,CIRATIO    NEEDED IN CI-CA FREESPACE FOR EACH\n*                                  DCISZ TABLE ENTRY\n         BAL   LINKREG,CALC#0D     GO CALCULATE #TRKCA,#CICA,#RCINFSP,\n*                                  #RCANFSP\n         B     DCALC#4\nDCALC#1  DS    0H\n         XC    #CICA(DEVCLLEN),#CICA CLEAR FOR RE-CALCULATION\n         BAL   LINKREG,CALC#1D     GO CALCULATE #CICA\n         BAL   LINKREG,CALC#2D     GO CALCULATE #RCINFSP\n         BAL   LINKREG,CALC#3D     GO CALCULATE #RCANFSP\nDCALC#4  DS    0H\n         BAL   LINKREG,CALC#4D     GO CALCULATE #TRKNFSP\n         OC    #RECADD,#RECADD     ARE RECORDS GOING TO BE ADDED\n         BZ    NOFREESP            NO- GO PROCESS NO FREESPACE LOGIC\n* RECORDS TO BE ADDED WAS SPECIFIED(RECADD INPUT KEYWORD)\n* SO WE MUST CALCULATE HOW MUCH FREESPACE WILL BE NEEDED TO ADD THE\n* RECORDS SPECIFIED TO THE PRIMARY DATASET ALLOCATION\n         BAL   LINKREG,CALC#5D     GO CALCULATE PERRADD\n         BAL   LINKREG,CALC#6D     GO CALCULATE #FRCA\n         BAL   LINKREG,CALC#7D     GO CALCULATE PERFSPCA\n         BAL   LINKREG,CALC#8D     GO CALCULATE PERFSPC2\n         BAL   LINKREG,CALC#9D     GO CALCULATE #RCILOAD\n         BAL   LINKREG,CALC#10D    GO CALCULATE #RCALOAD\n         BAL   LINKREG,CALC#11D    GO CALCULATE #TRKXTRA\n         BAL   LINKREG,CALC#12D    GO CALCULATE #TRKDATA\n         EJECT\nCALCINDX DS    0H\n         OC    KEYLEN,KEYLEN       IS THIS A KSDS/AIX?\n         BZ    NXTDCISZ            NO-GO PROCESS NEXT DCISZ\n* SET UP PARAMETER LIST TO LINK TO PL/1 INDEX CALCULATION ROUTINE.\n* ALL PARAMETERS PASSED ARE FIXED BIN(15,0) OR (31,0).\n         LA    WORKREG,KEYLEN\n         ST    WORKREG,PLIPLIST       PARM. 1  FIXED BIN(15,0)\n         LA    WORKREG,IMBFCTR\n         ST    WORKREG,PLIPLIST+4*1   PARM. 2  FIXED BIN(15,0)\n         LA    WORKREG,REPLFCTR\n         ST    WORKREG,PLIPLIST+4*2   PARM. 3  FIXED BIN(15,0)\n         LA    WORKREG,#CICA\n         ST    WORKREG,PLIPLIST+4*3   PARM. 4  FIXED BIN(31,0)\n         LA    WORKREG,#TRKDATA\n         ST    WORKREG,PLIPLIST+4*4   PARM. 5  FIXED BIN(31,0)\n         LA    WORKREG,#TRKCA\n         ST    WORKREG,PLIPLIST+4*5   PARM. 6  FIXED BIN(31,0)\n         LA    WORKREG,#TRKINDX\n         ST    WORKREG,PLIPLIST+4*6   PARM. 7  FIXED BIN(31,0)\n         LA    WORKREG,TRKCAP\n         ST    WORKREG,PLIPLIST+4*7   PARM. 8  FIXED BIN(31,0)\n         LA    WORKREG,BLKOVRHD\n         ST    WORKREG,PLIPLIST+4*8   PARM. 9  FIXED BIN(31,0)\n         LA    WORKREG,#INDXLV\n         ST    WORKREG,PLIPLIST+4*9   PARM. 10 FIXED BIN(31,0)\n         LA    WORKREG,ICISZ\n         ST    WORKREG,PLIPLIST+4*10  PARM. 11 FIXED BIN(31,0)\n         LA    WORKREG,#CIHIGHL\n         ST    WORKREG,PLIPLIST+4*11  PARM. 12 FIXED BIN(31,0)\n         MVI   PLIPLIST+4*11,X'80'    FLAG LAST PARM IN LIST\n*         L     R15,=V(IHESAPB)        PLI ENTRY POINT(VSAMANDX)\n         L     R15,=V(PLICALLA)       PLI ENTRY POINT(VSAMANDX)\n         LA    R1,PLIPLIST            PARAMETER LIST\n         BALR  R14,R15                GO DO INDEX CALCULATIONS\n         OC    #INDXLV,#INDXLV        WAS INDEX CISZ TO LARGE\n         BNZ   INDXSTAR               NO GO PROCESS NEXT DCISZ\n* INDEX CISZ WAS TO COMPUTED AND FOUND TO BE LARGER THAN THE MAXIMUM\n* ALLOWED (4096). SO NOW WE DECRESE THE SIZE OF THE DATA CONTROL\n* AREA BY 1 TRK AND TRY OUR  CALCULATIONS AGAIN.\n         L     WORKREG,#TRKCA         CONTROL AREA SIZE(IN TRACKS)\n         SH    WORKREG,=H'1'          SUB 1 TRK\n         BP    NEWTRKCA               IF NOT NEGATIVE OR ZERO GO\n*                                     RETRY CALCULATIONS, OTHERWISE\n         XC    DCISZ,DCISZ            NULLIFY THIS DCISZ(NOT ACCEPTED)\nINDXSTAR DS    0H                     CHECK NUMBER OF INDEX TRACKS\n         OC    BLKOVRHD,BLKOVRHD      DO WE HAVE A BLOCK OVERHEAD?\n         BNZ   NXTDCISZ               NO, #TRKINDX IS VALID\n         OC    #TRKINDX,#TRKINDX   INDEX TRACKS CALCULATED?\n         BNZ   NXTDCISZ            YES, CARRY ON\n         TRKCALC FUNCTN=TRKCAP,    FIND TRACK CAPACITY                 +\n               TYPE=DEVCODE,       FOR THIS DEVICE                     +\n               R=1,K=0,DD=ICISZ+2, WITH THIS INDEX                     +\n               REGSAVE=YES,        SAVE THE REGISTERS                  +\n               MF=(E,TRKCALST)     USING A REMOTE LIST\n         LTR   R15,R15             GET AN ANSWER?\n         BNZ   NXTDCISZ            NO, FORGET IT\n         SR    EVENODD,EVENODD     CLEAR EVEN REGISTER\n         LR    DIVISOR,R0          GET RECORDS PER TRACK\n         L     DIVIDEND,#CIHIGHL   GET TOTAL NUMBER OF RECORDS\n         DR    EVENODD,DIVISOR     CALCULATE TRACKS REQUIRED\n         LTR   REMAINDR,REMAINDR   ANY REMAINDER?\n         BZ    *+4+4               NO, NO ADJUSTMENT NEEDED\n         LA    QUOTIENT,1(QUOTIENT) YES, CANNOT HAVE PART OF A TRACK\n         ST    QUOTIENT,#TRKINDX   SAVE NUMBER OF INDEX TRACKS\n         EJECT\nNXTDCISZ DS    0H\n         LA    DEVREG,DEVENLEN(DEVREG)  POINT TO NEXT TABLE ENTRY\n         B     DCISZP2\nNEWTRKCA DS    0H\n         ST    WORKREG,#TRKCA         NEW TRK/CA VALUE\n         B     DCALC#1                GO RECALCULATE\n         SPACE 3\nNOFREESP DS    0H\n         MVC   #RCILOAD,#RCINFSP        SAME AS NO FREESPACE\n         MVC   #RCALOAD,#RCANFSP        SAME AS NO FREESPACE\n         MVC   #TRKDATA,#TRKNFSP        SAME AS NO FREESPACE\n         B     CALCINDX                 GO CALC INDEX IF NECESSARY\n         EJECT\nCALC#0D  DS    0H\n*\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF TRACKS PER CONTROL AREA\n*\n* THE VALUE IS DETERMINED BY THE SMALLER OF:\n*\n*        NUMBER OF TRACKS PER CYLINDER.\n*\n*                    OR\n*\n*        NUMBER OF TRACKS NEEDED TO CONTAIN (#RECLD + #RECADD).\n*\n*\n* THIS CALCULATION WILL FORCE A CA SIZE OF 1 CYL IF (#RECLD + #RECADD)\n* WILL NEED 1 CYLINDER OF MORE OF SPACE\n*\n*\n*\n* NOTE: IF (#RECLD+#RECADD) IS LESS THAN OR EQUAL TO THE #RCINFSP VALUE\n* (NUMBER OF RECORDS THAT FIT IN A CI WITH NO FREESPACE)\n* FOR THE CURRENT DCISZ TABLE ENTRY THEN THIS ENTRY(IF NOT THE FIRST)\n* AND ALL SUBSEQUENT DCISZ TABLE\n* ENTRIES WILL BE NULLED(ZEROS) AND THE PROCESSING OF THE DCISZ TABLE\n* WILL BE STOPPED AND ALL VALID DCISZ'S WILL BE DISPLAYED TO THE USER\n* FOR SELECTION.\n*\n         ST    LINKREG,DOUBLE   SAVE OUR LINK REGISTER\n         BAL   LINKREG,CALC#1D      GO CALC #CICA\n         BAL   LINKREG,CALC#2D      GO CALC #RCINFSP\n         BAL   LINKREG,CALC#3D      GO CALC #RCANFSP\n         L     WORKREG,#RECLD\n         A     WORKREG,#RECADD\n         C     WORKREG,#RCINFSP     WILL 1 CI HANDLE ALL RECORDS\n         BNH   NULL#0D              YES - GO NULL THE REMAINING DCISZ'S\nBYNULLCK DS    0H\n         C     WORKREG,#RCANFSP     IS CASIZE(TRACKS) TO LARGE FOR\n*                                   TOTAL RECORD SPACE NEEDED\n         BNL   EXITC#0              NO - WERE ALL THRU HERE\n         OC    DCIRATIO,DCIRATIO    IF TRKS NEEDED FOR DATASET IS LESS\n         BNZ   EXITC#0              THAN TRKS PER CYL AND FREESPACE\n         OC    DCARATIO,DCARATIO    WAS REQUEST (CI OR CA) THEN USE\n         BNZ   EXITC#0              TRKS PER CYL.\n         LH    R1,IMBFCTR           IMBED FACTOR (IF SPECIFIED)\n*                                   REGISTER 1 NOW CONTAINS THE MINIMUM\n*                                   ALLOWABLE CASIZE - 1\nRE#TRKCA DS    0H                   OTHERWISE,\n         L     R8,#TRKCA            WE MUST DECREASE THE CASIZE BY\n         SH    R8,=H'1'             1 TRACK UNTIL WE GET A GOOD FIT.\n         CR    R8,R1                ARE BELOW THE MIMIMUM CASIZE\n         BE    MINTRKCA             IF IF SO GO MAKE IT THE MINIMUM\n         ST    R8,#TRKCA            OTHERWISE SAVE NEW #TRKCA\n         ST    WORKREG,DOUBLE+4     SAVE WORKREG\n         BAL   LINKREG,CALC#1D      GO RE-CALC #CICA\n         BAL   LINKREG,CALC#2D      GO RE-CALC #RCINFSP\n         BAL   LINKREG,CALC#3D      GO RE-CALC #RCANFSP\n         L     WORKREG,DOUBLE+4     RESTORE WORKREG\n         C     WORKREG,#RCANFSP     IS CASIZE(TRACKS) STILL TO LARGE\n         BL    RE#TRKCA             YES - GO MAKE IT SMALLER\n         BE    EXITC#0              NO - ITS JUST WHERE WE WANT IT\n*                                   NO - NOW ITS TO SMALL SO\n         L     R8,#TRKCA            PUT IT BACK IN REGISTER\n         LA    R8,1(R8)             INCREASE IT BY 1 TRACK\n         ST    R8,#TRKCA            STORE FINAL VALUE AND DO\n*                                   LAST RE-CALCULATION FOR:\n         BAL   LINKREG,CALC#1D      #CICA\n         BAL   LINKREG,CALC#2D      #RCINFSP\n         BAL   LINKREG,CALC#3D      #RCANFSP\n         B     EXITC#0              AND EXIT THIS ROUTINE\nMINTRKCA DS    0H                   BECAUSE ITS NOW TO SMALL\n         LA    R8,1(R8)             SO LETS INCREASE IT BY 1 TRACK\n         ST    R8,#TRKCA            AND CALL IT A DAY\nEXITC#0  DS    0H                   EXIT CALCULATION\n         L     LINKREG,DOUBLE       RESTORE LINK REGISTER\n         BR    LINKREG              AND GO BACK TO WHEREVER\nNULL#0D  DS    0H\n         ST    DEVREG,DOUBLE+4      SAVE CURRENT DCISZ ENTRY PTR\nNULL#0DL DS    0H\n         LA    DEVREG,DEVENLEN(DEVREG) POINT TO NEXT DCISZ ENTRY\n         CLC   DCISZ,=F'-1'       IS IT THE END OF THE TABLE\n         BE    NULL#0DE           YES - GO RESET DCISZ PTR\n         XC    DCISZ,DCISZ        NULL THIS DCISZ ENTRY (TO LARGE)\n         B     NULL#0DL           AND GO CHECK OUT THE NEXT ENTRY...\nNULL#0DE DS    0H\n         L     DEVREG,DOUBLE+4    RESTORE PTR TO LAST GOOD DCISZ ENTRY\n         B     BYNULLCK           GO FINISH UP WITH THIS DCISZ\n         EJECT\nCALC#1D  DS    0H       ROUNDED DOWN\n* #CICA= #TRKCA*#BLKSTRK/(DCISZ/PHYBLKSZ)\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF CT'S PER CA FOR THE CONTROL\n* INTERVAL SIZE DEVICE TABLE ENTRY\n         L     DIVIDEND,#TRKCA     NUMBER OF TRACKS PER CONTROL AREA\n         SH    DIVIDEND,IMBFCTR    SUB IMBED FACTOR (IF ANY)\n         M     EVENODD,#BLKSTRK    MULTIPLY BY THE NUMBER OF PHYSICAL\n         LR    WORKREG,QUOTIENT    BLOCKS PER TRACK\n         L     DIVIDEND,DCISZ      LOAD FOR DIVIDE\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVISOR,PHYBLKSZ    LOAD FOR DIVIDE\n         DR    EVENODD,DIVISOR     DIVIDE DCISZ BY PHYSBLK SIZE\n         LR    DIVISOR,QUOTIENT    USE RESULT FOR NEXT DIVIDE\n         XR    EVENODD,EVENODD     CLEAR\n         LR    DIVIDEND,WORKREG    NUMBER OF PHYSICAL BLOCKS PER CA\n         DR    EVENODD,DIVISOR     DIVIDE PHYSBLKS/CA BY PHYSBLKS/CI\n         ST    QUOTIENT,#CICA      GIVING #CICA(ROUNDED DOWN)\n         BR    LINKREG             GO BACK\n         SPACE 3\nCALC#2D  DS    0H  ROUNDED DOWN                 ROUNDED DOWN\n* #RCINFSP = (DCISZ-10)/(RECSZ) FIXED OR (DCISZ-4)/(RECSZ+3) VARIABL\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF RECORDS THAT CAN FIT IN A\n* CONTROL INTERVAL WITH NO FREESPACE SPECIFIED\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,DCISZ      DATA CONTROL INTERVAL SIZE\n         L     DIVISOR,RECSZ       AVERAGE RECORD SIZE\n         CLC   RECSZ,MAXRECSZ      IS IT FIXED LENGTH RECORDS\n         BNE   VAR#2D              NO - GO DO VARIABLE LENGTH LOGIC\n* FIXED LENGTH RECORDS\n         SH    DIVIDEND,=H'07'     SUB LENGTH OF CIDF+RDF FIELDS\n         B     DOCALC#2\n* VARIBLE LENGTH RECORDS\nVAR#2D   DS    0H\n         SH    DIVIDEND,=H'4'      SUB LENGTH OF CIDF FIELD\n         LA    DIVISOR,3(DIVISOR)  ADD LENGTH OF RDF  FIELD\nDOCALC#2 DS    0H\n         DR    EVENODD,DIVISOR     DIVIDE DCISZ BY RECSZ\n         ST    QUOTIENT,#RCINFSP   GIVING #RCINFSP(ROUNDED DOWN)\n         BR    LINKREG\n         EJECT\nCALC#3D  DS    0H\n*  #RCANFSP =  #RCINFSP * #CICA\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF RECORDS PER CONTROL AREA\n* WITH NO FREESPACE\n*\n         L     DIVIDEND,#RCINFSP\n         M     EVENODD,#CICA\n         ST    QUOTIENT,#RCANFSP\n         BR    LINKREG\n         SPACE 3\nCALC#4D  DS    0H ROUNDED UP (PUTS #TRKNFSP ON CA BOUNDARY)\n*  #TRKNFSP =  #RECLD/#RCANFSP*#TRKCA\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF TRACKS NEEDED FOR THE DATA\n* COMPONENT (NO FREESPACE)\n         L     DIVISOR,#RCANFSP\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,#RECLD\n         DR    EVENODD,DIVISOR\n         OR    REMAINDR,REMAINDR   IS THIS THERE A REMINDER\n         BZ    MULT#4D             NO-GO MULTIPLY\n         LA    QUOTIENT,1(QUOTIENT) YES ADD 1 TO QUOTIENT\nMULT#4D  M     EVENODD,#TRKCA      MULT BY TRACK PER CA\n         ST    QUOTIENT,#TRKNFSP   GIVING #TRKNFSP\n         BR    LINKREG\n         SPACE 3\nCALC#5D  DS    0H        ROUNDED UP\n*  PERRADD =  (#RECADD-XTRARECS)/(#RECLD+#RECADD-XTRARECS)\n* THIS ROUTINE CALCULATES THE INSERTION RATE USING THE RECADD FIELD\n* OBTAINED FROM INPUT......\n*\n*\n         XR    EVENODD,EVENODD\n         L     DIVISOR,#RECLD\n         L    DIVIDEND,#RECADD\n         S    DIVIDEND,XTRARECS\n         AR    DIVISOR,DIVIDEND ADD RECADD TO RECLOADED FOR INSRT RATE\n         MH   DIVIDEND,=H'100'          MULT DIVIDEND BY 100\n         DR    EVENODD,DIVISOR          YES- FIND PERCENTAGE\n         OR    REMAINDR,REMAINDR        IS THERE A REMAINDER\n         BZ    SETPERCT                 NO-GO SET PERCENTAGE\n         LA    QUOTIENT,1(QUOTIENT)     YES-ROUND UP\nSETPERCT DS    0H\n         ST    QUOTIENT,PERRADD         SET PERCENTAGE\n         BR    LINKREG\n         EJECT\nCALC#6D  DS    0H     ROUNDED DOWN\n*  #FRCA =  #RCANFSP*PERRADD\n*  THIS ROUTINE WILL DETERMINE THE NUMBER OF FREE RECORDS NEEDED PER\n*  CONTROL AREA\n*\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,#RCANFSP   NUMBER OF RECORDS PER CA\n         M     EVENODD,PERRADD     MULT BY PERCENT OF RECADD TO RECLOAD\n         LH    DIVISOR,=H'100'     SET FOR TRUE PERCENTAGE CALC\n         DR    EVENODD,DIVISOR     DIVIDE BY 100\n         OC    DCIRATIO,DCIRATIO   ANY CI FREESPACE NEEDED??\n         BNZ   BYRND#6             YES - THAT WILL TAKE CARE OF ANY\n*                                  RECORD FRACTIONS.\n         OR    REMAINDR,REMAINDR   NO  -  CI FREESPACE WILL NOT BE\n*                                  CALCULATED SO IF THERE IS A REMAINDR\n*                                  (RECORD FRACTION) WE HAVE TO ROUND\n*                                  UP FOR THIS CALCULATION.\n         BZ    BYRND#6             NO FRACTION (DONT ROUND)\n         LA    QUOTIENT,1(QUOTIENT) RECORD FRACTION (ROUND UP)\nBYRND#6  DS    0H\n         LTR   QUOTIENT,QUOTIENT   IS IT LESS THAN 1\n         BZ    SETFRCA1            YES SET #FRCA TO 1\n         C     QUOTIENT,#RCANFSP   ARE WE ASKING FOR 100% FREESPACE\n         BL    NOSUB#6 NO THEN DONT SUB #CICA\n         S     QUOTIENT,#CICA  SUB SO 1 REC/CI IS LOADED\nNOSUB#6  DS    0H\n         ST    QUOTIENT,#FRCA      SET #FRCA\n         M     EVENODD,DCARATIO  NO. FREE RECORDS NEEDED FOR FREE CI'S\n         D     EVENODD,=F'100'          TRUE VALUE\n         ST    QUOTIENT,FRCAFSP\n         L     EVENODD,#FRCA    FREE RECORDS NEEDED PER CA\n         SR    EVENODD,QUOTIENT SUB FREE RECORDS NEEDED IN CAFREESPACE\n         ST    EVENODD,FRCIFSP  SET NUMBER OF RECORDS NEED IN CIFREESP\n         BR    LINKREG\nSETFRCA1 DS    0H\n         MVC   #FRCA,=F'1'         SET TO | (MINIMUM)\n         BR    LINKREG\n         EJECT\nCALC#7D  DS   0H\n* PERFSPCA  = (FRCAFSP/#RCINFSP)/#CICA\n* THIS CALCULATION DETERMINES THE CA FREESPACE PERCENTAGE BY\n* DETERMINING THE NUMBER OF FREE CI'S NEEDED TO CONTAIN ENOUGH\n* RECORDS TO SATISFY THE CARATIO OF THE INSERTION RATE..\n*\n*\n         OC    FRCAFSP,FRCAFSP          DO WE NEED CA FREESPACE\n         BZR   LINKREG                  NO GET OUT\n         XR    EVENODD,EVENODD          CLEAR\n         L     DIVIDEND,FRCAFSP         RECS NEEDED IN CA FREESPACE\n         D     EVENODD,#RCINFSP         NO OF FREE CI'S NEEDED\n         OR    REMAINDR,REMAINDR        IS THERE A REMAINDER\n         BZ    BYRND#71                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     YES ROUND UP\nBYRND#71 DS    0H\n         M     EVENODD,=F'100' FOR TRUE PERCENTAGE\n         D     EVENODD,#CICA\n         OR    REMAINDR,REMAINDR        IS THERE A REMAINDER\n         BZ    BYRND#72                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     YES ROUND UP\nBYRND#72 DS 0H\n         ST    QUOTIENT,PERFSPCA        SET CA FREESPACE PERCENTAGE\n         L     DIVIDEND,#CICA           NO OF CI'S PER CA\n         M     EVENODD,PERFSPCA         FOR PERCENTAGE\n         D     EVENODD,=F'100'          FIND FREE CI'S PER CA\n         OR    QUOTIENT,QUOTIENT        IS RESULT ZERO\n         BNZ   BYRND#73                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     ROUND UP\nBYRND#73 DS    0H\n         C     QUOTIENT,#CICA        ARE FREE CI'S EQUAL TO MAX CI/CA\n         BNE   STORE#7\n         BCTR  QUOTIENT,0             SUB 1(CANT BE SAME AS #CICA)\nSTORE#7  DS    0H\n         ST    QUOTIENT,#FCICA          STORE IT\n         M     EVENODD,#RCINFSP HOW MANY REC FIT IN FREE CI'S\n         ST    QUOTIENT,#RCAFREE SAVE RECS IN FREE CI'S\n         S     QUOTIENT,FRCAFSP  SUB FREE RECORDS NEEDED IF FREE CI'S\n         BMR   LINKREG           LEAVE ZERO IF NEGATIVE\n         ST    QUOTIENT,XRCCAFSP SAVE EXCESS FREE RECORDS IN FREE CI'S\n         BR    LINKREG                  GET OUT\n         EJECT\nCALC#8D  DS    0H\n         SPACE 3\n********************************************************************\n*                                                                  *\n*              IF  FRCIFSP = 0 OR,                                 *\n*                                                                  *\n*              IF  FREE RECS NEEDED PER NON FREE CI IS GREATER OR  *\n*                  EQUAL TO #RCINFSP                               *\n*                                                                  *\n* PERFSPCI = 0.                                                    *\n*                                                                  *\n*              IF  XRCCAFSP (IS GREATER THAN OR EQUAL TO) FRCIFSP, *\n*                                                                  *\n* PERFSPCI = FRCIFSP/B*(RECSZ+X)/DCISZ                             *\n*                                                                  *\n*              IF XRCCAFSP (IS LESS THAN) FRCIFSP,                 *\n*                                                                  *\n* PERFSPCI = ((FRCIFSP-A)/B))*(RECSZ+C)/DCISZ  ROUNDED UP          *\n*                                                                  *\n*                                                                  *\n********************************************************************\n*                                                                  *\n*  WHERE:A=(XRCCAFSP/B) DONT ROUND---THE REMAINDER IS ZRCCAFSP     *\n*                                                                  *\n*        B=(#CICA-#FCICA)                                          *\n*                                                                  *\n*        C=0 FOR FIXED LENGTH RECORDS                              *\n*                                                                  *\n*        C=3 FOR VARIABLE LENGTH RECORDS                           *\n*                                                                  *\n*  AND  : ((FRCIFSP-A)/B)) IS ROUNDED UP IF                        *\n*                          REMAINDER IS GREATER THAN ZRCCAFSP      *\n*                                                                  *\n*                                                                  *\n*                                                                  *\n*                                                                  *\n*                                                                  *\n********************************************************************\n         OC    FRCIFSP,FRCIFSP          DO WE NEED ANY CI FREESPACE\n         BZR   LINKREG                  NO-GET OUT\n         CLC   XRCCAFSP,FRCIFSP         EXCESS RECS LESS THAN FRCIFSP\n         BL    USEXCESS                 YES-USE EXCESS RECS IN CALC\n         XC    XRCCAFSP,XRCCAFSP        ZERO OUT EXCESS FREE RECS\n         B     CALC8P2                  BY PASS USING EXCESS FREE RECS\nUSEXCESS DS    0H\n         XR    EVENODD,EVENODD          CLEAR FOR DIVIDE\n         L     DIVIDEND,XRCCAFSP        WHAT WE ARE DIVIDING INTO\n         L     DIVISOR,#CICA\n         S     DIVISOR,#FCICA  DIVISOR=B  WHAT WE ARE DIVIDING BY;\n*                                       NON-FREE CI'S IN A CA\n         DR    EVENODD,DIVISOR          DIVIDE GIVING A\n         ST    REMAINDR,ZRCCAFSP        SAVE NEW EXCESS FREE RECS\n         ST    QUOTIENT,XRCCAFSP QUOTIENT=A -NO. OF EXCESS FREE RECS\n*                                       PER NON-FREE CI IN A CA\nCALC8P2  DS    0H\n         L     DIVIDEND,FRCIFSP\n         XR    EVENODD,EVENODD          CLEAR\n         S     QUOTIENT,XRCCAFSP        SUB EXCESS\n         DR    EVENODD,DIVISOR          FREE RECS NEEDED NON-FREE CI'S\n         C     REMAINDR,ZRCCAFSP        IS REMAINDER GREATER THAN\n*                                       THE NEW EXCESS VALUE\n         BNH   BYRND#81                 NO-THEN DONT ROUND UP\n         LA    QUOTIENT,1(QUOTIENT)     ROUND UP\nBYRND#81 DS    0H\n         C     QUOTIENT,#RCINFSP        ARE FREE RECS NEEDED GREATER\n*                                       OR EQUAL TO MAX RECS-CI\n         BNL   NOCIPR                   YES - GO NULL OUT CI FREESPACE\n         L     DIVISOR,RECSZ  DIVISOR=C RECORD SIZE\n         CLC   RECSZ,MAXRECSZ           CHECK FOR FIXED/VARIABLE\n         BE    FIX#8                    FIXED LENGTH\n         LA    DIVISOR,3(DIVISOR)       ADD 3 FOR VAR RECS\nFIX#8    DS    0H\n         MR    EVENODD,DIVISOR          BYTES NEEDED FOR FREE RECS/CI\n         M     EVENODD,=F'100'          FOR PERCENTAGE\n         L     DIVISOR,DCISZ            DATA CI SIZE\n         DR    EVENODD,DIVISOR          PERCENT OF CI\n         OR    REMAINDR,REMAINDR        DO WE HAVE A REMAINDER\n         BZ    BYRND#82                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     YES ROUND UP\nBYRND#82 DS    0H\n         ST    QUOTIENT,PERFSPCI        SET CI FREESPACE PERCENTAGE\n* NOW CALCULATE FREE RECS PER CI USING THE CI FREESPACE PERCENTAGE\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,DCISZ      SET FOR MULTIPLY\n         M     EVENODD,PERFSPCI    NUMBER OF FREE BYTES PER CI * 100\n         D     EVENODD,=F'100'     NUMBER OF FREE BYTES PER CI\n         L     DIVISOR,RECSZ       SET UP FOR FINAL DIVIDE\n         CLC   RECSZ,MAXRECSZ      FIXED OR VARIABLE LENGTH RECS\n         BE    FIX#8B              FIXED\n         LA    DIVISOR,3(DIVISOR)  VARIABLE\nFIX#8B   DS    0H\n         XR    EVENODD,EVENODD     CLEAR\n         DR    EVENODD,DIVISOR     DIVIDE GIVING NO OF FREE RECS PER CI\n         ST    QUOTIENT,#RCIFREE        SAVE FREE RECS-NON FREE CI'S\n         BR    LINKREG\nNOCIPR   DS    0H\n         L     WORKREG,DCARATIO\n         A     WORKREG,DCIRATIO    MAKE ALL RECS TO BE ADDED\n         ST    WORKREG,DCARATIO    GO INTO CA FREESPACE\n         XC    DCIRATIO,DCIRATIO   CLEAR OUT CIRATIO\n         B     DCALC#1             GO DO IT ALL OVER FOR THIS DCISZ\n         EJECT\nCALC#9D  DS    0H\n*\n* THIS CALCULATION WILL COMPUTE THE NUMBER OF RECORDS THAT CAN FIT IN\n* A CI AT LOAD TIME AND THE MAXIMUM NUMBER OF RECORDS THAT CAN FIT IN\n* IN A CI TAKING INTO ACCOUNT THE POSSIBLE RECORD FRACTION LOST\n* BECAUSE CI FREESPACE.\n*\n* #RCILOAD = (DCISZ*(1-PERFSPCI)-10)/(RECSZ+0)  FOR FIXED LENGTH RECS\n*          = (DCISZ*(1-PERFSPCI)-4)/(RECSZ+3)   FOR VARIABLE LENGTH REC\n*\n*\n* #RCIMAX = (DCISZ - (DCISZ * PERFSPCI / 100)) / RECSZ + #RCILOAD\n*    OR\n* #RCIMAX = (DCISZ - (DCISZ * PERFSPCI / 100)) / (RECSZ + 3) + #RCILOAD\n*\n*\n         L     DIVIDEND,DCISZ\n         LH    WORKREG,=H'100'     SET FOR (1-PERFSPCI)\n         S     WORKREG,PERFSPCI    SUB CI FREESPACE PERCENTAGE\n         BZ    RCIDFLT1            IF ZERO DEFAULT TO 1 REC-CI-LOAD\n         MR    EVENODD,WORKREG     GET NUMBER OF CI BYTES*100 AVAIL LD\n         XR    EVENODD,EVENODD     CLEAR\n         D     EVENODD,=F'100'     GET NUMBER OF CI'S BYTES AVAIL AT LD\n         SH    QUOTIENT,=H'07'     SUB CIDF AND RDF FIELDS\n         BNP   CIPER100            IF NOT PLUS MAKE CI FREESPACE 100\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVISOR,RECSZ\n         CLC   RECSZ,MAXRECSZ      IS IT FIXED LENGTH RECORDS\n         BE    FIXCALC9            YES - DONT AD 3 BYTE RDF\n         LA    DIVISOR,3(DIVISOR)  NO- VARIABLE SO ADD 3 BYTE RDF\n         LA    QUOTIENT,3(QUOTIENT) NEGATE PREVIOUS RDF SUBTRACTION\nFIXCALC9 DS    0H\n         DR    EVENODD,DIVISOR     PERFORM FINAL CALC\n         OR    QUOTIENT,QUOTIENT  IS IT LESS THAN ONE RECORD\n         BNZ   STORE                    NO GO STORE IT\nCIPER100 DS    0H\n         MVC   PERFSPCI,=F'100'  CHANGE CI FREESPACE TO 100 PERCENT\nRCIDFLT1 DS    0H\n         MVC   #RCILOAD,=F'1'           SET REC PER CI TO MINIMUM\n         BR    LINKREG                  GET THE HELL OUT\nSTORE    DS    0H\n         ST    QUOTIENT,#RCILOAD\n         BR    LINKREG\n         EJECT\nCALC#10D DS    0H\n* #RCALOAD = #RCILOAD*(#CICA-#FCICA)\n* THIS CALCULATION WILL COMPUTE   THE NUMBER OF RECORDS THAT CAN FIT\n* IN A CONTROL AREA AT LOAD TIME\n*\n         XR    EVENODD,EVENODD     CLEAR\n         L     WORKREG,#CICA       CI'S PER CA\n         S     WORKREG,#FCICA      SUB FREE CI'S PER CA\n         L     QUOTIENT,#RCILOAD\n         MR    EVENODD,WORKREG     DETERMINE NUMBER OF REC/CA AT LOAD\n         ST    QUOTIENT,#RCALOAD\n         BR    LINKREG\n         SPACE 3\nCALC#11D DS    0H\n* #TRKXTRA = XTRARECS/#RCANFSP*#TRKCA\n* THIS CALCULATION WILL COMPUTE THE NUMBER OF TRACKS NEEDED FOR THE\n* XTRA FREE RECS NEEDED AT END OF DATA COMPONENT\n* (THAT IS THOSE FREE RECORDS NOT INCLUDED IN CI AND CA FREESPACE\n* CALCULATIONS).\n*\n         OC    XTRARECS,XTRARECS\n         BZR   LINKREG\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,XTRARECS\n         L     DIVISOR,#RCANFSP\n         DR    EVENODD,DIVISOR\n         OR    REMAINDR,REMAINDR   IS THIS THERE A REMAINDER\n         BZ    BYRND#11            NO - DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT) ROUND UP\nBYRND#11 DS    0H\n         L     WORKREG,#TRKCA\n         MR    EVENODD,WORKREG\n         ST    QUOTIENT,#TRKXTRA\n         BR    LINKREG\nCALC#12D DS    0H\n*\n* #TRKDATA = THE GREATER OF:\n*\n*       #RECLD /  #RCALOAD * #TRKCA + #TRKXTRA\n*\n*     OR\n*\n*                (#RECADD-XTRARECS)\n*       -----------------------------------------   * #TRKCA\n*       (#RCAFREE + (#RCIFREE * (#CICA - #FCICA)))\n*\n*\n*\n* THIS CALCULATION WILL COMPUTE THE NUMBER OF TRACKS NEEDED FOR THE\n* DATA COMPONENT:\n*\n*\n* START 1ST CALCULATION:\n*\n*       #RECLD /  #RCALOAD * #TRKCA + #TRKXTRA\n*\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,#RECLD\n         L     DIVISOR,#RCALOAD\n         DR    EVENODD,DIVISOR\n         OR    REMAINDR,REMAINDR   IS THIS THERE A REMAINDER\n         BZ    BYRND#12            NO - DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT) ROUND UP\nBYRND#12 DS    0H\n         L     WORKREG,#TRKCA\n         MR    EVENODD,WORKREG\n         A     QUOTIENT,#TRKXTRA\n         ST    QUOTIENT,#TRKDATA\n*\n* START 2ND CALCULATION:\n*\n*                (#RECADD-XTRARECS)\n*       -----------------------------------------   * #TRKCA\n*       (#RCAFREE + (#RCIFREE * (#CICA - #FCICA)))\n*\n         XR    EVENODD,EVENODD     CLEAR\n         L     WORKREG,#CICA\n         S     WORKREG,#FCICA      NO. OF NON-FREE CI'S PER CA\n         L     DIVIDEND,#RCIFREE   LOAD FOR MULTIPLY\n         MR    EVENODD,WORKREG     NO. OF FREE RECS IN NON-FREE CI'S\n*                                  IN A CA\n         LR    DIVISOR,DIVIDEND    SET UP FOR DIVIDE\n         A     DIVISOR,#RCAFREE    ADD FREE RECS IN FREE CI'S IN A CA\n         L     DIVIDEND,#RECADD    SET UP FOR DIVIDE\n         S     DIVIDEND,XTRARECS   SUB XTRARECS AT END OF DATASET\n         DR    EVENODD,DIVISOR     FREE RECS NEEDED IN A CA\n         OR    REMAINDR,REMAINDR   ROUND UP\n         BZ    BYRND12B\n         LA    QUOTIENT,1(QUOTIENT)\nBYRND12B DS    0H\n         XR    EVENODD,EVENODD     CLEAR\n         M     EVENODD,#TRKCA      MULTIPLY BY TRACK PER CA\n         C     QUOTIENT,#TRKDATA   CHECK IF GREATER THAN PREVIOUS CALC\n         BNHR  LINKREG             IF LOW OR EQUAL USE PREVIOUS RESULT\n         ST    QUOTIENT,#TRKDATA   IF HIGH USE 2ND CALC RESULT\n         BR    LINKREG             GET OUT\n         EJECT\nPUTHEADR DS    0H\n*\n* THIS ROUTINE WILL DISPLAY THE HEADR SCREEN FOR THE DATACISZ\n* SELECTION SCREEN...\n*\n*\n*\n         L     SCRNREG,AHEADRD     ADDRESS OF HEADR SCREEN\n         USING HEADRD,SCRNREG      ADDRESSABILITY FOR SCREEN DSECT\n         OC    KEYLEN,KEYLEN       IT THIS A KSDS??\n         BZ    ESDSRRDS            NO-MUST BE AN ESDS OR RRDS\n         MVC   FILETYP,=CL11'(KSDS)' YES-SET HEADR FILETYP\n         B     TPUTHEAD            GO DISPLAY HEADR ON TUBE\nESDSRRDS DS    0H\n         MVC   FILETYP,=CL11'(ESDS/RRDS)' SET HEADR FILETYP\nTPUTHEAD DS    0H\n         LR    R1,SCRNREG          BUFFER(SCREEN) ADDRESS\n         L     R0,LHEADRD          BUFFER(SCREEN) LENGTH\n         ICM   R1,8,FULLSCR        SET OPTION BYTE\n         TPUT  ((R1)),((R0)),R\n         L     R2,DEVREGSV         START OF DEVICE TABLE\n         USING DEVENTRY,R2         ADDRESSABILITY FOR DEVENTRY DSECT\n         LA    WORKREG,DATA1PGE    ADDR OF PAGE 1 SCREEN POINTER\n         ST    WORKREG,FRSTPAGE    SAVE AS FIRST PAGE POINTER\n         ST    WORKREG,CURPAGE     SAVE AS CURRENT PAGE POINTER\n         L     SCRNREG,DATA1PGE    PAGE 1 SCREEN ADDR\n         LA    PAGEREG,DATA1PGE    ADDR OF PAGE 1 SCREEN ADDR\n         BAL   LINKREG,DPAGEBLD    GO BUILD 1ST DATACISZ PAGE\n         L     SCRNREG,DATA2PGE    PAGE 2 SCREEN ADDR\n         LA    PAGEREG,DATA2PGE    ADDR OF PAGE 1 SCREEN ADDR\n         BAL   LINKREG,DPAGEBLD    GO BUILD 2ND DATACISZ PAGE\n         L     SCRNREG,DATA3PGE    PAGE 3 SCREEN ADDR\n         LA    PAGEREG,DATA3PGE    ADDR OF PAGE 3 SCREEN ADDR\n         BAL   LINKREG,DPAGEBLD    GO BUILD 3RD DATACISZ PAGE\n         L     SCRNREG,DATA4PGE    PAGE 4 SCREEN ADDR\n         LA    PAGEREG,DATA4PGE    ADDR OF PAGE 4 SCREEN ADDR\n         BAL   LINKREG,DPAGEBLD    GO BUILD 4TH DATACISZ PAGE\n         B     PUTDPAGE            GO DISPLAY 1ST PAGE\n         EJECT\nDPAGEBLD DS    0H\n         USING DATAD,SCRNREG       ADDRSABLTY TO DATA SCREEN DSECT\n         LA    LINE,INFO1          1ST INFO LINE ON SCREEN\n         LA    LINECNT,9           NUMBER OF INFO LINES ON SCREEN\nDETLOOP  DS    0H\n*                                  WAIT TO MOVE PERIOD SO WE CAN FIT\n*                                  THE EDIT MASK FOR DCISZ\n* CONVERT CONTROL INTERVAL SIZE\n*\n         OC    DCISZ,DCISZ        IS THIS DCISZ NULLED\n         BZ    NXTD               YES-GO LOOK AT THE NEXT DCISZ\n         L     WORKREG,DCISZ            CONTROL INTERVAL SIZE\n         CVD   WORKREG,DOUBLE\n         MVC   1(6,LINE),MASK6\n         ED    1(6,LINE),DOUBLE+5\n*\n*\n* CONVERT NUMBER OF TRACKS PER CONTROL AREA\n*\n         L    WORKREG,#TRKCA\n         CVD   WORKREG,DOUBLE\n         MVC   9(4,LINE),MASK4\n         ED    9(4,LINE),DOUBLE+6\n*\n*\n* CONVERT NUMBER OF CONTROL INTERVALS PER CONTROL AREA\n*\n         L    WORKREG,#CICA\n         CVD   WORKREG,DOUBLE\n         MVC  18(4,LINE),MASK4\n         ED   18(4,LINE),DOUBLE+6\n*\n*\n* CONVERT RECORDS PER CONTROL AREA (TO BE LOADED)\n*\n         L    WORKREG,#RCALOAD\n         CVD   WORKREG,DOUBLE\n         MVC  26(6,LINE),MASK6\n         ED   26(6,LINE),DOUBLE+5\n*\n*\n* CONVERT RECORDS PER CONTROL INTERVAL (TO BE LOADED)\n*\n         L    WORKREG,#RCILOAD\n         CVD   WORKREG,DOUBLE\n         MVC  35(6,LINE),MASK6\n         ED   35(6,LINE),DOUBLE+5\n*\n*\n* CONVERT                  FREESPACE PERCENTAGE\n*\n         L    WORKREG,PERFSPCI\n         CVD   WORKREG,DOUBLE\n         MVC  42(4,LINE),MASK4\n         ED   42(4,LINE),DOUBLE+6\n         L    WORKREG,PERFSPCA\n         CVD   WORKREG,DOUBLE\n         MVC  46(4,LINE),MASK4\n         ED   46(4,LINE),DOUBLE+6\n         MVI  46(LINE),C'-'\n*\n*\n* CONVERT RECORDS PER CONTROL AREA WITH NO FREESPACE\n*\n         L     WORKREG,#RCANFSP\n         CVD   WORKREG,DOUBLE\n         MVC   52(6,LINE),MASK6\n         ED    52(6,LINE),DOUBLE+5\n*\n*\n* CONVERT RECORDS PER CONTROL AREA WITH NO FREESPACE\n*\n         L     WORKREG,#RCINFSP\n         CVD   WORKREG,DOUBLE\n         MVC   61(6,LINE),MASK6\n         ED    61(6,LINE),DOUBLE+5\n*\n* CONVERT TOTAL TRACKS NEEDED TO CYLS IF #TRKCA IS EQUAL TO TRKCYL\n*\n*\n         CLC   #TRKCA,TRKCYL    IS #TRKCA EQUAL TO TRKCYL\n         BNE   USET             NO- SPECIFIFY SPACE IN TRACKS\n         XR    R14,R14          YES-GET SET TO CALC NO. OF CYLS\n         L     R15,#TRKDATA\n         L     R1,TRKCYL\n         DR    R14,R1\n         LR    WORKREG,R15\n         MVI   76(LINE),C'C'\n         B     CONVIT\nUSET     DS    0H\n         L     WORKREG,#TRKDATA\n         MVI   76(LINE),C'T'\nCONVIT   DS    0H\n         CVD   WORKREG,DOUBLE\n         MVC   67(8,LINE),MASK8\n         ED    67(8,LINE),DOUBLE+4\nNXTDETAL DS    0H\n         LA    LINE,INFO2-INFO1(LINE)  POINT TO NEXT INFO LINE\n         LA    R2,DEVENLEN(R2)    NEXT DCISZ\n         CLC   DCISZ,=F'-1'       IS IT THE END OF TABLE\n         BE    SETLASTP           YES-GO SET LAST PAGE POINTER\n         BCT   LINECNT,DETLOOP    GO PROCESS NEXT LINE\n         BR    LINKREG            GO BACK TO CALLER\nNXTD     DS    0H\n         LA    R2,DEVENLEN(R2)    NEXT DCISZ\n         CLC   DCISZ,=F'-1'       IS IT THE END OF TABLE\n         BE    SETLASTP           YES-GO SET LAST PAGE POINTER\n         B     DETLOOP            GO LOOK AT NEXT DCISZ\nSETLASTP DS    0H\n         ST    PAGEREG,LASTPAGE   SET THIS PAGE AS LAST PAGE POINTER\n         B     PUTDPAGE\n         EJECT\nPUTDPAGE DS    0H\n         L     WORKREG,CURPAGE    CURRENT PAGE POINTER\n         L     R1,0(WORKREG)      PAGE(SCREEN) ADDRESS\n         LA    R0,DATAL           LENGTH OF PAGE(SCREEN)\n         ICM   R1,8,FULLSCR       OPTION BYTE\n         TPUT  ((R1)),((R0)),R\n         LA    R0,DATAL           SCREEN LENGTH\n         L     R1,0(WORKREG)      SCREEN ADDRESS\n         LR    R2,WAREAREG        COMMON WORKAREA ADDRESS\n         LINK  EP=VSAMAGET        LINK TO MODULE FOR TGET/ASIS\n*                                 AND INPUT BUFFER EDITING...\n         OC    PROCERR,PROCERR    ANY ERRORS IN SCREEN PROCESSING..\n         BNZ   PUTDPAGE           YES-GO TRY IT AGAIN.....\n*\n         CLI   KEYHIT,CLEAR       WAS CLEAR KEY PRESSED?\n         BE    RETURN             YES-GET OUT THIS PROGRAM\n         CLI   KEYHIT,PF3         WAS PF3 (LAST MENU) PRESSED?\n         BE    RSETATTR           YES-RESET KEYABLE FIELDS(UP,MDTOFF)\n         CLI   KEYHIT,PF4         WAS PF4-SPF PRIMARY OPTION MENU?\n         BE    RETURN             YES-GET OUT OF THIS..\n         CLI   KEYHIT,PF7         WAS PF7 (PAGE BACKWARD) HIT?\n         BE    SELLOGIC           YES-GO SEE IF ANY DCISZ'S SELCTD\n         CLI   KEYHIT,PF8         WAS PF8 (PAGE FORWARD) HIT?\n         BE    SELLOGIC           YES-GO SEE IF ANY DCISZ'S SELCTD\n         CLI   KEYHIT,ENTER       WAS ENTER(DETAIL INFO) HIT?\n         BE    SELLOGIC           YES-GO SEE IF ANY DCISZ'S SELCTD\n         CLI   KEYHIT,PF1         WAS HELP REQUESTED?\n         BNE   PUTDPAGE           NO-GO REDISPLAY CURRENT PAGE.\n         LR    R0,WAREAREG        WORKAREA ADDRESS\n         MVC   HLPTYPE,=CL3'CIS'  INDICATE CI SELECTION HELP RQSTD\n         LINK  EP=VSAMAHLP\n         CLI   KEYHIT,PF4         WAS PF4-SPF PRIMARY OPTION MENU?\n         BE    RETURN             YES-GET OUT OF THIS...\n         TPUT  CLEARBUF,CLEARLEN,FULLSCR\n         L     R1,AMENUD          MENU SCREEN ADDRESS\n         L     R0,LMENUD          MENU SCREEN LENGTH\n         ICM   R1,8,FULLSCR       FULLSCR OPTION\n         TPUT  ((R1)),((R0)),R    REDISPLAY MENU SCREEN\n         L     R1,AHEADRD         HEADER SCREEN ADDRESS\n         L     R0,LHEADRD         HEADER SCREEN LENGTH\n         ICM   R1,8,FULLSCR       FULLSCR OPTION\n         TPUT  ((R1)),((R0)),R\n         B     PUTDPAGE           GO REDISPLAY CURRENT DATA PAGE..\nSELLOGIC DS    0H\n*\n* THIS NEXT ROUTINE WILL LOOK IF ANY DCISZ'S WERE SELECTED FOR\n* ADDITIONAL INFORMATION AND SET THE SELECT INDICATOR FOR THOSE\n* SELECTED.\n*\n         L     SCRNREG,0(WORKREG) SET UP SCREEN POINTER\n         USING DATAD,SCRNREG      ADDRESSABILITY TO SCREEN DSECT\n         LA    WORKREG,9          LOOP FACTOR(MAX 9 DCISZ'S PER PAGE)\n         LA    R7,DATAS1          FIRST SELECT FIELD IN SCREEN\n         SPACE 2\nCHKSEL   DS    0H\n         CLC   INFO1-DATAS1+1(6,R7),BLANKS  IS THIS SCREEN LINE BLANKS\n         BE    CHKPFKEY                     YES-CONT PFKEY CHECKING\n         LA    R15,INFO1-DATAS1+1(R7)  ADDR OF DCISZ(CHARACTER)\n         LA    R14,6              LENGTH OF DCISZ\n         ST    WORKREG,SAVEREG    TEMP SAVE\n         BAL   LINKREG,CVB        GO CONVERT IT TO BINARY\n         L     WORKREG,SAVEREG    RESTORE AFTER CVB ROUTINE\n         USING DEVENTRY,DEVREG    ADDRESSABILITY TO DEVICE ENTRY DSECT\n         L     DEVREG,DEVREGSV    START OF DEVICE TABLE\nCHKSEL2  DS    0H\n         CLM   R1,7,DCISZ+1       IS THE RIGHT DEVICE TABLE ENTRY\n         BNE   SELP2              NO-GO CHECK NEXT DEVICE TABLE ENTRY\n         CLI   0(R7),C'S'         YES-WAS THIS DCISZ SELECTED???\n         BNE   DSELOFF            NO-TURN OFF SELECTION INDICATOR..\n         MVI   DSELECT,X'01'      YES-INDICATE IT WAS SELECTED...\n         B     SELP3              GO-PROCESS NEXT SCREEN ENTRY\nDSELOFF  DS    0H\n         MVI   DSELECT,X'00'      TURN OFF SELECTION INDICATOR\n         B     SELP3              GO PROCESS NEXT SCREEN ENTRY\nSELP2    DS    0H\n         LA    DEVREG,DEVENLEN(DEVREG) NEXT DEVICE TABLE ENTRY\n         CLC   DCISZ,=F'-1'       END OF DEVICE TABLE\n         BE    CHKPFKEY           YES-CONT. PFKEY PROCESSING\n         B     CHKSEL2\nSELP3    DS    0H\n         LA    R7,DATAS2-DATAS1(R7) NEXT SCREEN ENTRY\n         BCT   WORKREG,CHKSEL     DO LOOP\n* END OF DETAIL SELECTION LOGIC...............\nCHKPFKEY DS    0H\n         CLI   KEYHIT,PF7         WAS PF7 (PAGE BACKWARD) PRESSED?\n         BE    DPAGBACK           YES-GO AND PAGE BACKWARD\n         CLI   KEYHIT,PF8         WAS PF8 (PAGE FORWARD) PRESSED?\n         BE    DPAGFRWD           YES-GO AND PAGE FORWARD\n         CLI   KEYHIT,ENTER       WAS ENTER (DETAIL PHASE) PRESSED?\n         BNE   PUTDPAGE           NO-GO DISPLAY CURRENT PAGE AGAIN..\n         LR    R0,WAREAREG        COMMON WORKAREA ADDRESS\n         LINK  EP=VSAMADTL        GO TO DETAIL PHASE PROCESSING\n         CLI   KEYHIT,CLEAR       WAS CLEAR KEY PRESSED?\n         BE    RETURN             YES-GET OUT OF THIS PROGRAM\n         CLI   KEYHIT,PF3         WAS-PF3 (LAST DATA) PRESSED?\n         BE    DPAGFRST           YES-GO REDISPLAY FIRST DATA SCREEN\n         CLI   KEYHIT,PF4         WAS-PF4 (LAST MENU) PRESSED?\n         BE    RETURN             YES-GO BACK TO SPF PRIMARY OPTION\n         B     PUTDPAGE           NO-GO REDISPLAY CURRENT PAGE....\nRSETATTR DS    0H\n         L     SCRNREG,AMENUD     ADDR OF MENU SCREEN\n         USING MENUD,SCRNREG      ADDRESSABILITY TO SCREEN DSECT\n         MVC   RECAA,UPOFF        RESET ATTRIBUTE\n         MVC   RECMA,UPOFF        RESET ATTRIBUTE\n         MVC   RECLOADA,UPOFF     RESET ATTRIBUTE\n         MVC   RECADDA,UPOFF      RESET ATTRIBUTE\n         MVC   DEVTYPEA,UPOFF     RESET ATTRIBUTE\n         MVC   KEYLA,UPOFF        RESET ATTRIBUTE\n         MVC   CIPERA,UPOFF       RESET ATTRIBUTE\n         MVC   CAPERA,UPOFF       RESET ATTRIBUTE\n         MVC   IMBA,UPOFF         RESET ATTRIBUTE\n         MVC   REPLA,UPOFF        RESET ATTRIBUTE\n         MVC   MENUX,MENU+MENUX-MENUD  RESET CURSOR TO FIRST KEYABLE\n         L     R6,DATA1PGE        SET FOR REINITIALIZATION OF PAGES\n         B     INITPGE1           RENINIT(PAGES-DEV TABLES) + REDISPLAY\n         SF    (UP,MDTOFF,HI)\n         ORG   *-1\nUPOFF    DS    0X\n         ORG\n         EJECT\nDPAGBACK DS    0H\n         L     PAGEREG,CURPAGE    ADDR OF CURRENT PAGE POINTER\n         L     WORKREG,FRSTPAGE   ADDR OF FIRST PAGE POINTER\n         CR    PAGEREG,WORKREG    CAN WE PAGE BACKWARDS\n         BNH   PUTDPAGE           NO-THEN REDISPLAY CURRENT PAGE\n         SH    PAGEREG,=H'4'      YES-BACK UP 1 PAGE POINTER\n         ST    PAGEREG,CURPAGE    SET AS CURRENT PAGE\n         B     PUTDPAGE           GO DISPLAY NEW PAGE ON TUBE\nDPAGFRST DS    0H\n         L     WORKREG,FRSTPAGE   ADDR OF FIRST PAGE POINTER\n         ST    WORKREG,CURPAGE    SET AS CURRENT PAGE\n         L     R1,AHEADRD         ADDRESS OF HEADER SCREEN\n         LA    R0,HEADRL          LENGTH OF HEADER SCREEN\n         ICM   R1,8,FULLSCR       SET OPTION BYTE\n         TPUT  ((R1)),((R0)),R\n         B     PUTDPAGE           GO DISPLAY NEW PAGE ON TUBE\n         SPACE 3\nDPAGFRWD DS    0H\n         L     PAGEREG,CURPAGE    ADDR OF CURRENT PAGE POINTER\n         L     WORKREG,LASTPAGE   ADDR OF FIRST PAGE POINTER\n         CR    PAGEREG,WORKREG    CAN WE PAGE FORWARD??\n         BNL   PUTDPAGE           NO-THEN REDISPLAY CURRENT PAGE\n         LA    PAGEREG,4(PAGEREG) YES-FORWARD 1 PAGE POINTER\n         ST    PAGEREG,CURPAGE    SET AS CURRENT PAGE\n         B     PUTDPAGE           GO DISPLAY NEW PAGE ON TUBE\n         EJECT\nRETURN   DS    0H\n         TPUT CLEARBUF,CLEARLEN,FULLSCR\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         TITLE 'VSAM ANALYZER STATIC DEVICE TABLE LIST'\n         CNOP  2,4       ALIGN LIST ON PROPER BOUNDARY\nDEVLSTST DS    0H\n         DC    Y(DEVICES)   NUMBER OF DEVICE TABLES IN LIST\n         DC    CL4'3330',A(DEV3330)\n         DC    CL4'3350',A(DEV3350)\n         DC    CL4'3380',A(DEV3380)\n         DC    CL4'3390',A(DEV3390)\n*\n*  THIS NEXT VALUE MUST BE CHANGED WHEN ANY DEVICE TABLES ARE ADDED\n*  OR DELETED FROM THIS PROGRAM. IT INDICATES THE NUMBER OF DEVICES\n*  SUPPORTED BY THIS PROGRAM.\n*\n*  WHEN ADDING ANY NEW DEVICES TO THIS PROGRAM A DEVICE TABLE MUST\n*  BE CODED WITH THE DEVICE DEPENDENT DATA, AN ENTRY FOR IT PLACED IN\n*  THE DEVICE LIST (DEVLSTST), AND THE NUMBER OF DEVICES AS INDICATED\n*  BY THE SYMBOL (DEVICES) MUST BE INCREMENTED ACCORDINGLY.\n*\n*  ALSO THE VSAMAWRK MODULE LABEL=DEVLSTWK MUST ALSO BE INCREMENTED\n*  TO REFLECT THE SIZE OF THE DEVICE LIST (DEVLSTST). A CHANGE TO\n*  THIS MODULE WILL NECESSITATE ALL OTHER VSAMANAL SUB-MODULES TO\n*  BE RE-ASSEMBLED.\n*\nDEVICES  EQU   4           NUMBER OF DEVICES TABLES\n         EJECT\n*\n*   P R O G R A M   C O N S T A N T S\n*\nMASK8    DC    XL8'4020202020202120'\nMASK6    DC    XL6'402020202120'\nMASK4    DC    XL4'40202120'\n*\n*\n*\nKLENMSG  DC CL40'KEYLENGTH(NONNUMERIC)'\n*\nCIPMSG   DC CL40'%-ADD RECS CI-FREESPACE(NONNUMERIC)'\n*\nCAPMSG   DC CL40'%-ADD RECS CA-FREESPACE(NONNUMERIC)'\n*\nDEVMSG   DC CL40'DEVICE TYPE NOT ''3390''/''3380'''\n*\nRECAMSG  DC CL40'AVG-RECSIZE(NONNUMERIC)'\nRECMMSG  DC CL40'MAX-RECSIZE(NONNUMERIC)'\n*\nCIPHIMSG DC CL40'%-ADD RECS CI-FREESPACE OVER 100'\n*\nCAPHIMSG DC CL40'%-ADD RECS CA-FREESPACE OVER 100'\n*\nCICAHMSG DC CL40'%-ADD RECS CI-CA COLLECTIVELY OVER 100'\n*\nIMBMSG   DC CL40'IMBED NOT ''NO''/''YES'''\n*\nREPLMSG  DC CL40'REPLICATE NOT ''NO''/''YES'''\n*\nRECLDMSG DC CL40'RECORDS T/B LOADED(NONNUMERIC)'\n*\nRECADMSG DC CL40'RECORDS T/B ADDED(NONNUMERIC)'\n*\nHIKEYMSG DC CL40'KEYLENGTH GREATER THAN 255'\nBADKYMSG DC CL40'KEYLENGTH GREATER THAN MAX-RECSIZE'\n*\nNRECLMSG DC CL40'RECORDS T/B LOADED REQUIRED'\n*\nNRECAMSG DC CL40'AVG-RECSIZE REQUIRED'\n*\nLORECMSG DC CL40'MAX-RECSIZE LESS THAN AVG-RECSIZE'\nRECAZMSG DC CL40'AVG-RECSIZE CANNOT BE 0'\n*\nRECLZMSG DC CL40'RECORDS T/B LOADED CANNOT BE 0'\n*\nRECMLMSG DC CL40'MAX-RECSIZE GREATER THAN 32761'\n*\nRECALMSG DC CL40'AVG-RECSIZE GREATER THAN 32761'\n*\n*\n         SPACE 3\nFULLSCR  DC    X'03'                    FULLSCRN OPTION BYTE\nTGETASIS DC    X'81'                    ASIS OPTION BYTE\n         SPACE 3\nBUFTABLE DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F' 64 BYTE TRANSLATE\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F' TABLE FOR CONVERT\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F' TO 3270 LINE CODE\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         SPACE 3\nSBATABLE DC    17X'00'  256 BYTE TRANSLATE TABLE TO FIND SBA(X'11)\n         DC    X'11'    IN THE TGET INPUT BUFFER AND CORRESPONDING 3270\n         DC    238X'00' SCREEN......\n         SPACE 3\nBLANKS   DC    CL200' '\nCLEARBUF DC X'C2115D7F1140403C5D7F0011404013'  *POSITIONAL*\nCLEARLEN EQU *-CLEARBUF                        *POSITIONAL*\n         LTORG\n         COPY  VSAMAEQU    SYMBOLIC EQUATES\n         COPY  MENUSCRN    MENU SCREEN(3270 OUTPUT BUFFER)\n         COPY  HEADSCRN    HEADER SCREEN(3270 OUTPUT BUFFER)\n         COPY  DATASCRN    DATA SCREEN(3270 OUTPUT BUFFER)\n         TITLE 'VSAM ANALYZER DEVICE TABLE FOR 3330S MOD 1 AND 2'\nDEV3330  DS    0F\n         DC    F'512',F'512',F'20',F'77',F'19',24F'0'\n         DC    F'1024',F'1024',F'11',F'85',F'19',24F'0'\n         DC    F'1536',F'512',F'20',F'77',F'19',24F'0'\n         DC    F'2048',F'2048',F'6',F'93',F'19',24F'0'\n         DC    F'2560',F'512',F'20',F'77',F'19',24F'0'\n         DC    F'3072',F'1024',F'11',F'85',F'19',24F'0'\n         DC    F'3584',F'512',F'20',F'77',F'19',24F'0'\n         DC    F'4096',F'4096',F'3',F'93',F'19',24F'0'\n         DC    F'4608',F'512',F'20',F'77',F'19',24F'0'\n         DC    F'5120',F'1024',F'11',F'85',F'19',24F'0'\n         DC    F'5632',F'512',F'20',F'77',F'19',24F'0'\n         DC    F'6144',F'2048',F'6',F'93',F'19',24F'0'\n         DC    F'6656',F'512',F'20',F'77',F'19',24F'0'\n         DC    F'7168',F'1024',F'11',F'85',F'19',24F'0'\n         DC    F'7680',F'1536',F'7',F'82',F'19',24F'0'\n         DC    F'8192',F'4096',F'3',F'93',F'19',24F'0'\n         DC    F'10240',F'2048',F'6',F'93',F'19',24F'0'\n         DC    F'12288',F'4096',F'3',F'93',F'19',24F'0'\n         DC    F'14336',F'2048',F'6',F'93',F'19',24F'0'\n         DC    F'16384',F'4096',F'3',F'93',F'19',24F'0'\n         DC    F'18432',F'2048',F'6',F'93',F'19',24F'0'\n         DC    F'20480',F'4096',F'3',F'93',F'19',24F'0'\n         DC    F'22528',F'2048',F'6',F'93',F'19',24F'0'\n         DC    F'24576',F'4096',F'3',F'93',F'19',24F'0'\n         DC    F'26624',F'2048',F'6',F'93',F'19',24F'0'\n         DC    F'28672',F'4096',F'3',F'93',F'19',24F'0'\n         DC    F'30720',F'2048',F'6',F'93',F'19',24F'0'\n         DC    F'32768',F'4096',F'3',F'93',F'19',24F'0'\n         DC    F'-1'                              END OF TABLE INDICATR\n         DC    X'00'       DEVICE TYPE\n         DC    X'00'       RESERVED\n         DC    H'19'         CYLINDERS PER TRACK\n         DC    F'13165'      TRACK CAPACITY IN BYTES\n         DC    F'135'        BLOCK OVERHEAD(INTER BLOCK GAP)\nDEVTABLN EQU   *-DEV3330\n         TITLE 'VSAM ANALYZER DEVICE TABLE FOR 3350 DEVICE'\nDEV3350  DS    0F\n         DC    F'512',F'512',F'27',F'71',F'30',24F'0'\n         DC    F'1024',F'1024',F'15',F'79',F'30',24F'0'\n         DC    F'1536',F'512',F'27',F'71',F'30',24F'0'\n         DC    F'2048',F'2048',F'8',F'85',F'30',24F'0'\n         DC    F'2560',F'512',F'27',F'71',F'30',24F'0'\n         DC    F'3072',F'1024',F'15',F'79',F'30',24F'0'\n         DC    F'3584',F'512',F'27',F'71',F'30',24F'0'\n         DC    F'4096',F'4096',F'4',F'85',F'30',24F'0'\n         DC    F'4608',F'512',F'27',F'71',F'30',24F'0'\n         DC    F'5120',F'1024',F'15',F'79',F'30',24F'0'\n         DC    F'5632',F'512',F'27',F'71',F'30',24F'0'\n         DC    F'6144',F'2048',F'8',F'85',F'30',24F'0'\n         DC    F'6656',F'512',F'27',F'71',F'30',24F'0'\n         DC    F'7168',F'3584',F'5',F'93',F'30',24F'0'\n         DC    F'7680',F'2560',F'7',F'93',F'30',24F'0'\n         DC    F'8192',F'4096',F'4',F'85',F'30',24F'0'\n         DC    F'10240',F'2048',F'8',F'85',F'30',24F'0'\n         DC    F'12288',F'4096',F'4',F'85',F'30',24F'0'\n         DC    F'14336',F'2048',F'8',F'85',F'30',24F'0'\n         DC    F'16384',F'4096',F'4',F'85',F'30',24F'0'\n         DC    F'18432',F'2048',F'8',F'85',F'30',24F'0'\n         DC    F'20480',F'4096',F'4',F'85',F'30',24F'0'\n         DC    F'22528',F'2048',F'8',F'85',F'30',24F'0'\n         DC    F'24576',F'4096',F'4',F'85',F'30',24F'0'\n         DC    F'26624',F'2048',F'8',F'85',F'30',24F'0'\n         DC    F'28672',F'4096',F'4',F'85',F'30',24F'0'\n         DC    F'30720',F'2048',F'8',F'85',F'30',24F'0'\n         DC    F'32768',F'4096',F'4',F'85',F'30',24F'0'\n         DC    F'-1'                              END OF TABLE INDICATR\n         DC    X'00'       DEVICE TYPE\n         DC    X'00'       RESERVED\n         DC    H'30'       CYLINDERS PER TRACK\n         DC    F'19254'    TRACK CAPACITY IN BYTES\n         DC    F'185'      BLOCK OVERHEAD(INTER BLOCK GAP)\n         TITLE 'VSAM ANALYZER DEVICE TABLE FOR 3390 DEVICE'\nDEV3390  DS    0F\n         DC     F'512',F'512',F'49',F'45',F'15',24F'0'\n         DC     F'1024',F'1024',F'33',F'63',F'15',24F'0'\n         DC     F'1536',F'1536',F'26',F'71',F'15',24F'0'\n         DC     F'2048',F'2048',F'20',F'78',F'15',24F'0'\n         DC     F'2560',F'2560',F'17',F'81',F'15',24F'0'\n         DC     F'3072',F'3072',F'15',F'84',F'15',24F'0'\n         DC     F'3584',F'3584',F'13',F'87',F'15',24F'0'\n         DC     F'4096',F'4096',F'12',F'88',F'15',24F'0'\n         DC     F'4608',F'4608',F'10',F'89',F'15',24F'0'\n         DC     F'5120',F'5120',F'9',F'91',F'15',24F'0'\n         DC     F'5632',F'5632',F'9',F'91',F'15',24F'0'\n         DC     F'6144',F'6144',F'8',F'92',F'15',24F'0'\n         DC     F'6656',F'6656',F'7',F'93',F'15',24F'0'\n         DC     F'7168',F'7168',F'7',F'93',F'15',24F'0'\n         DC     F'7680',F'7680',F'6',F'94',F'15',24F'0'\n         DC     F'8192',F'8192',F'6',F'94',F'15',24F'0'\n         DC     F'10240',F'10240',F'5',F'95',F'15',24F'0'\n         DC     F'12288',F'12288',F'4',F'97',F'15',24F'0'\n         DC     F'14336',F'7168',F'7',F'93',F'15',24F'0'\n         DC     F'16384',F'16384',F'3',F'98',F'15',24F'0'\n         DC     F'18432',F'18432',F'3',F'98',F'15',24F'0'\n         DC     F'20480',F'10240',F'5',F'95',F'15',24F'0'\n         DC     F'22528',F'5632',F'9',F'91',F'15',24F'0'\n         DC     F'24576',F'24576',F'2',F'99',F'15',24F'0'\n         DC     F'26624',F'26624',F'2',F'99',F'15',24F'0'\n         DC     F'28672',F'7168',F'7',F'93',F'15',24F'0'\n         DC     F'30720',F'7680',F'6',F'94',F'15',24F'0'\n         DC     F'32768',F'16384',F'3',F'98',F'15',24F'0'\n         DC    F'-1'                              END OF TABLE INDICATR\n         DC    X'0F'       DEVICE TYPE\n         DC    X'00'       RESERVED\n         DC    H'15'       CYLINDERS PER TRACK\n         DC    F'56664'    TRACK CAPACITY IN BYTES\n         DC    F'0'        BLOCK OVERHEAD(INTER BLOCK GAP)\n         TITLE 'VSAM ANALYZER DEVICE TABLE FOR 3380 DEVICE'\nDEV3380  DS    0F\n         DC     F'512',F'512',F'46',F'49',F'15',24F'0'\n         DC     F'1024',F'1024',F'31',F'66',F'15',24F'0'\n         DC     F'1536',F'1536',F'23',F'74',F'15',24F'0'\n         DC     F'2048',F'2048',F'18',F'77',F'15',24F'0'\n         DC     F'2560',F'2560',F'15',F'80',F'15',24F'0'\n         DC     F'3072',F'3072',F'13',F'83',F'15',24F'0'\n         DC     F'3584',F'3584',F'11',F'82',F'15',24F'0'\n         DC     F'4096',F'4096',F'10',F'85',F'15',24F'0'\n         DC     F'4608',F'4608',F'9',F'86',F'15',24F'0'\n         DC     F'5120',F'5120',F'8',F'85',F'15',24F'0'\n         DC     F'5632',F'5632',F'7',F'82',F'15',24F'0'\n         DC     F'6144',F'6144',F'7',F'90',F'15',24F'0'\n         DC     F'6656',F'6656',F'6',F'83',F'15',24F'0'\n         DC     F'7168',F'7168',F'6',F'90',F'15',24F'0'\n         DC     F'7680',F'7680',F'5',F'80',F'15',24F'0'\n         DC     F'8192',F'8192',F'5',F'85',F'15',24F'0'\n         DC     F'10240',F'10240',F'4',F'85',F'15',24F'0'\n         DC     F'12288',F'6144',F'7',F'90',F'15',24F'0'\n         DC     F'14336',F'14336',F'3',F'90',F'15',24F'0'\n         DC     F'16384',F'8192',F'5',F'85',F'15',24F'0'\n         DC     F'18432',F'6144',F'7',F'90',F'15',24F'0'\n         DC     F'20480',F'20480',F'2',F'85',F'15',24F'0'\n         DC     F'22528',F'22528',F'2',F'94',F'15',24F'0'\n         DC     F'24576',F'6144',F'7',F'90',F'15',24F'0'\n         DC     F'26624',F'6656',F'6',F'83',F'15',24F'0'\n         DC     F'28672',F'14336',F'3',F'90',F'15',24F'0'\n         DC     F'30720',F'6144',F'7',F'90',F'15',24F'0'\n         DC     F'32768',F'8192',F'5',F'85',F'15',24F'0'\n         DC    F'-1'                              END OF TABLE INDICATR\n         DC    X'0E'       DEVICE TYPE\n         DC    X'00'       RESERVED\n         DC    H'15'       CYLINDERS PER TRACK\n         DC    F'47968'    TRACK CAPACITY IN BYTES\n         DC    F'0'        BLOCK OVERHEAD(INTER BLOCK GAP)\n         COPY  VSAMAWRK    COMMON WORKAREA DSECT\n         COPY  VSAMADEV    DEVICE TABLE ENTRY DSECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMANDX": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x94\"\\x1f\\x00\\x94\"\\x1f\\x15\\x02\\x00P\\x00P\\x00\\x00\\xe3\\xe2\\xc4\\xc4\\xc3@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1994-08-09T00:00:00", "modifydate": "1994-08-09T15:02:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "TSDDC"}, "text": " /*                                                                 */\n /*      PDSDOC *VSAMANDX - CALCULATE INDEX PARAMETERS..............*/\n /*                                                                 */\n /* 09AUG93 DARNICK COMPUTING LTD. ALLOW UNLIMITED ICF INDEX CISIZE */\n /*                                                                 */\n /*                                                                 */\n  VINDEX: PROC (KEYLEN,IMBFCTR,REPLFCTR,#CICA,#TRKDATA,#TRKCA,#TRKINDX,\n                TRKCAP,BLKOVRHD,#INDXLV,ICISZ,#CIHIGHL) OPTIONS(MAIN);\n          DCL (KEYLEN,IMBFCTR,REPLFCTR) FIXED BIN (15,0);\n          DCL (#CICA,#TRKDATA,#TRKCA,#TRKINDX,TRKCAP,BLKOVRHD,#INDXLV,\n               ICISZ,#CIHIGHL) FIXED BIN (31,0);\n          DCL (CICAROOT,DROOT) FIXED BIN(31,14);\n          DCL (A,B,C,D,X,Y,REMAINDR,MAXPTRS,#CILV2,#CILV3H,\n              #CINXTLL,#ICITRK,#CISS,IBLKSZ,IWORK) FIXED BIN(31,0)\n              INITIAL (0);\n     CICAROOT = SQRT(#CICA);\n            X = 31+2*(KEYLEN+2)+(3*#CICA);\n            Y = 31+(#CICA*8)+(2*CICAROOT);\n /*  IF X > Y THEN ICISZ = X;                                       */\n /*           ELSE ICISZ = Y;                                       */\n /*                                                                 */\n            ICISZ = ((#CICA * (KEYLEN / 2)) + 7 );\n            DO IWORK = 512 TO 8192 BY 512;\n               IF IWORK > ICISZ THEN GOTO FND#CISS;\n            END;\n            DO IWORK = 8192 BY 2048;\n               IF IWORK > ICISZ THEN GOTO FND#CISS;\n            END;\n /*                                                                 */\n FND#CISS:  ICISZ = IWORK;\n            #CISS=#TRKDATA/#TRKCA;\n             A = 0;\n             B = 0;\n             C = #CICA;\n             D = C;\n                     DO WHILE (A < ICISZ);\n                         A = 31+2*(KEYLEN+2)+(3*C);\n                         C = C+1;\n                     END;\n                     DO WHILE (B < ICISZ);\n                         DROOT = SQRT(D);\n                         B = 31+(D*8)+(2*DROOT);\n                         D = D+1;\n                     END;\n                     IF C > D THEN MAXPTRS = D;\n                              ELSE GO TO MAXISC;\n                     IF B > ICISZ THEN MAXPTRS = MAXPTRS - 1;\n                              GO TO CILEVELS;\n             MAXISC: IF A > ICISZ THEN MAXPTRS = C - 1;\n                              ELSE MAXPTRS = C;\n CILEVELS: #CILV2 = #CISS/MAXPTRS;\n                REMAINDR = MOD(#CISS,MAXPTRS);\n                IF REMAINDR \u00ac= 0 THEN #CILV2 = #CILV2 + 1;\n       #CINXTLL = #CILV2;\n       #INDXLV  = 2;\n                IF #CILV2 = 1 THEN GO TO CALC#CII;\n                     DO WHILE (#CINXTLL \u00ac= 1);\n                         A = #CINXTLL/MAXPTRS;\n                             REMAINDR = MOD(#CINXTLL,MAXPTRS);\n                             IF REMAINDR \u00ac= 0 THEN #CINXTLL = A+1;\n                                              ELSE #CINXTLL = A;\n                         #INDXLV = #INDXLV+1;\n                         #CILV3H = #CILV3H+#CINXTLL;\n                     END;\n CALC#CII: #CIHIGHL = #CILV2+#CILV3H;\n           IF (IMBFCTR = 1 & REPLFCTR = 1) THEN GO TO IMBREPL;\n           IF IMBFCTR = 1 THEN GO TO CALCITRK;\n           IF REPLFCTR = 1 THEN #TRKINDX = #CIHIGHL + #CISS;\n                           ELSE GO TO NOIMBREP;\n           GO TO EXITINDX;\n IMBREPL:  #TRKINDX = #CIHIGHL;\n           GO TO EXITINDX;\n NOIMBREP: #CIHIGHL = #CIHIGHL + #CISS;\n CALCITRK: IF BLKOVRHD = 0 THEN GO TO EXITINDX;\n           IBLKSZ = ICISZ+BLKOVRHD;\n           #ICITRK = TRKCAP/IBLKSZ;\n           #TRKINDX = #CIHIGHL/#ICITRK;\n                      REMAINDR = MOD(#CIHIGHL,#ICITRK);\n                      IF REMAINDR \u00ac= 0 THEN #TRKINDX = #TRKINDX+1;\n EXITINDX: END VINDEX;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMAWRK": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00\\x00\\x00\\x90'\\x8f\\x00\\x94\\x17_\\x078\\x00L\\x00G\\x00\\x00\\xc3\\xc1\\xd9\\xe3\\xf1@@@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "1990-10-05T00:00:00", "modifydate": "1994-06-24T07:38:00", "lines": 76, "newlines": 71, "modlines": 0, "user": "CART1"}, "text": "         EJECT\n***********************************************************************\n*                                                                     *\n*  THIS IS THE COMMON WORKAREA DSECT FOR ALL VSAMANAL(TSO COMMAND     *\n*  PROCESSOR) MODULES.....                                            *\n*                                                                     *\nWORKAREA DSECT\nSAVE     DS    9D *POSITIONAL*\nSAVEGET  DS    9D *POSITIONAL*     SAVE AREA FOR VSAMAGET SUB-MODULE\nSAVEDTL  DS    9D *POSITIONAL*     SAVE AREA FOR VSAMADLT SUB-MODULE\nSAVEHLP  DS    9D *POSITIONAL*     SAVE AREA FOR VSAMAHLP SUB-MODULE\nSCRNLSV  DS    F                   LENGTH OF INPUT SCREEN\nSCRNSAVE DS    F                   ADDRESS OF INPUT SCREEN\nSAVEREG  DS    F                   MISC SAVE AREA\nAMENUD   DS    F                   ADDRESS OF MENU SCREEN\nLMENUD   DS    F                  LENGTH OF MENU SCREEN\nAHEADRD  DS    F                  ADDRESS OF HEADR SCREEN\nLHEADRD  DS    F                  LENGTH OF HEADR SCREEN\nLDATAD   DS    F                  LENGTH OF DATA SCREEN\nDATA1PGE DS    F  *POSITIONAL*    ADDRESS OF DATA SCREEN(PAGE1)\nDATA2PGE DS    F  *POSITIONAL*    ADDRESS OF DATA SCREEN(PAGE2)\nDATA3PGE DS    F  *POSITIONAL*    ADDRESS OF DATA SCREEN(PAGE3)\nDATA4PGE DS    F  *POSITIONAL*    ADDRESS OF DATA SCREEN(PAGE4)\nFRSTPAGE DS    F                  ADDR OF FIRST PAGE POINTER\nLASTPAGE DS    F                  ADDR OF LAST PAGE POINTER\nCURPAGE  DS    F                  ADDR OF CURRENT PAGE POINTER\nADETAIL  DS    F                  ADDR OF DETAIL SCREEN\nLDETAIL  DS    F                  LENGTH OF DETAIL SCREEN\nAINDEX   DS    F                  ADDR OF INDEX SCREEN\nLINDEX   DS    F                  LENGTH OF INDEX SCREEN\nPLIPLIST DS    12F                PARM LIST FOR VSAMANDX(PLI) CALL\n         SPACE 3\n***********************************************************************\n* THE FOLLOWING VALUES ARE ENTERED AS INPUT TO THIS COMMAND\n*\nRECSZ    DC    F'0'                INPUT=RECA\nMAXRECSZ DC    F'0'                INPUT=RECM\n#RECLD   DC    F'0'                INPUT=RECLOAD\n#RECADD  DC    F'0'                INPUT=RECADD\nKEYLEN   DC    H'0'                INPUT=KEYL\nPERRADD  DC    F'0'                COMPUTE: #RECADD / #RECLD\nCIRATIO  DC    F'0'                INPUT=CIPER\nCARATIO  DC    F'0'                INPUT=CAPER\nXTRARECS DC    F'0'                COMPUTE:\n*                                  #RECADD-(#RECADD-(CIRATIO+CARATIO))\nDEVICE   DC    CL4' '              INPUT=DEVTYPE\nIMBFCTR  DC    H'0'                INPUT=IMB 0=IF 'NO' OR NOT ENTERD\n*                                            1=IF 'YES'\nREPLFCTR DC    H'0'                INPUT=REPL 0=IF 'NO' OR NOT ENTERD\n*                                             1=IF ENTERED\n***********************************************************************\n         SPACE 3\nDOUBLE   DS    D\nDEVLSTWK DS    CL34                ADDRESS OF WORK DEVICE LIST\nDEVREGSV DS    F                   ADDRESS OF ACTIVE WORK DEVICE TABLE\nTRKCAP   DS    F           TRACK CAPACITY IN BYTES(ACTIVE DEVICE TAB)\nTRKCYL   DS    F           TRACKS/CYLINDER(CURRENT DEVICE TAB)\nBLKOVRHD DS    F           SIZE OF INTER BLOCK GAP(ACTIVE DEVICE TAB)\nKEYHIT   DS    CL1                    KEY PRESSED BY TERMINAL OPERATOR\nCURPOS   DS    CL2                    CURSOR POSITION WHEN KEY PRESSED\nHLPTYPE  DS    CL3                    TYPE OF HELP REQUESTED.\nINBUFF   DS    CL500   TGET INPUT BUFFER(USED BY GETSCRN ROUTINE)\nINBUFFL  EQU   *-INBUFF                 LENGTH OF INPUT BUFFER\nADDRESS  DS    CL2     3270 BUFFER ADDRESS FOR CONVERSION\nPROCERR  DC    CL40' '           ERROR DESCRIPTION FROM GETSCRN ROUTINE\n         SPACE 2\nTRKCALST TRKCALC MF=L              TRKCALC MACRO PARAMETER LIST\nDEVCODE  DS    XL1'00'             DEVICE TYPE CODE\n         DS    XL7'00'             RESERVED\n         DS    0D                  ALIGN FOR GETMAIN\nWORKLEN  EQU   *-WORKAREA\n*                                                                     *\n*             E N D   O F   V S A M A N A L   C O M M O N             *\n*                          W O R K A R E A                            *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMSIZE": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00T\\x00\\x00\\x00\\x84\\x08_\\x00\\x84\\x08_\\x12\\x00\\x04_\\x04_\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.84", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "1984-03-25T12:00:00", "lines": 1119, "newlines": 1119, "modlines": 0, "user": "OLDF294"}, "text": "* THIS TSO COMMAND PROCESSOR IS AN EARLY VERSION OF VSAMANAL TO BE\n* USED FOR TSO NON-3270 TERMINALS (HARDCOPY). INPUT IS THRU\n* THE TSO PARSE ROUTINES.....\n* NOTE:  THIS VERSION IS AT A LOWER LEVEL THAN THE 3270 VERSION\n*        AND DOES NOT PROVIDE THE USER WITH DATA CISZ SELECTION\n*        CAPABILITIES.\n         OSINIT  VSAMSIZE,(11,12),NO\n         LR    R2,R1                    SAVE COMMAND PARM LIST\n         GETMAIN R,LV=DEV3330L+DEV3350L+WORKLEN\n         LR    R6,R1                    SETE 3330 TABLE ADDR FOR MVCL\n         LA    R7,DEV3330L    LENGTH OF MVCL OPERAND 1\n         LR    R9,R7          SAVE LENGTH FOR OPERAND 2\n         LA    R8,DEV3330     ADDR OF OPERAND 2 FOR MVCL\n         MVCL  R6,R8          MOVE DEV3330 TABLE TO WORKAREA\n         LR    R3,R1                    3330 TABLE ADDRESS\n         LA    R1,DEV3330L(R1)          POINT TO 3350 TABLE LOCATION\n         LR    R6,R1                    SETE 3350 TABLE ADDR FOR MVCL\n         LA    R7,DEV3350L    LENGTH OF MVCL OPERAND 1\n         LR    R9,R7          SAVE LENGTH FOR OPERAND 2\n         LA    R8,DEV3350     ADDR OF OPERAND 2 FOR MVCL\n         MVCL  R6,R8          MOVE DEV3350 TABLE TO WORKAREA\n         LR    R4,R1                    3350 TABLEADDRESS\n         LA    WAREAREG,DEV3350L(R1)    WORKAREA ADDRESS\n         USING WORKAREA,WAREAREG        ADDRESSABILITY  TO OUR WORKAREA\n         LR    R6,WAREAREG       SET FOR CLEAR TO LOW VALUES(X'00')\n         LA    R7,WORKLEN        LENGTH OF WORKAREA FOR CLEAR\n         XR    R8,R8                   ZERO FOR CLEAR\n         XR    R9,R9                   ZERO FOR CLEAR\n         MVCL  R6,R8           CLEAR WORKAREA TO BINARY ZEROS(X'00'S)\n         ST    R3,A3330TAB              SET WORKAREA 3330 TABLE POINTER\n         ST    R4,A3350TAB              SET WORKAREA 3350 TABLE POINTER\n         MVC   CIRATIO,=F'75'           SET CIRATIO DEFAULT...\n         MVC   CARATIO,=F'25' SET CARATIO DEFAULT...\n         LA    R3,SAVE                  OUR SAVE AREA\n         ST    R3,8(R13)                SET FORWORD SAVEAREA CHAIN\n         ST    R13,4(R3)                SET BACKWORD SAVEAREA CHAIN\n         LR    R13,R3                   POINT R13 TO OUR SAVE AREA\n         EJECT\n* THIS ROUTINE WILL INITIALIZE THE PARSE PARAMETER LIST IN\n* PREPARATION FOR OUR LINKING TO THE PARSE PROCESSING ROUTINE(IKJPARS)\n*\n* THE PARSE ROUTINE WILL PROCESS ALL OF THE KEYWORD INPUT FOR THIS\n* COMMAND..........\n         ST    R2,CPPLADDR              SAVE COMMAND PROCESSOR PARM LST\n         L     CPPLREG,CPPLADDR         LOAD INTO CPPL ADDRESS REGISTER\n         USING CPPL,CPPLREG             ESTABLISH ADDRESSABILTY TO CPPL\n         LA    PPLREG,PPLAREA           LOAD PPL ADDR INTO ADDRESS REG.\n         USING PPL,PPLREG               ESTABLISH ADDRESSABILITY TO PPL\n         MVC   PPLUPT,CPPLUPT               USER'S PROFILE TABLE ADDR\n         MVC   PPLECT,CPPLECT               ENVIRONMENT CNTRL TABL ADDR\n         XC    CMDECB,CMDECB                CLEAR ECB TO ZEROS\n         LA    WORKREG,CMDECB\n         ST    WORKREG,PPLECB               ECB ADDR\n         LA    WORKREG,PDLADDR\n         ST    WORKREG,PPLANS               ADDR OF PDL ADDR WORD\n         MVC   PPLCBUF,CPPLCBUF             COMMAND BUFFER ADDR\n         L     WORKREG,=A(PCL)\n         ST    WORKREG,PPLPCL               PCL ADDR\n         LR    R1,PPLREG                LOAD PPL ADDR FOR LINK TO PARSE\n         LINK  EP=IKJPARS               GO TO PARSE PROCESSING ROUTINE\n         LTR   R15,R15                  IS PARSE RETURN CODE OKAY\n         BNZ   BADPARSE                 NO WE HAVEN A PARSE ERROR\n         L     PDLREG,PDLADDR           LOAD PDL ADDR FROM PARSE\n         USING IKJPARMD,PDLREG          ESTABLISH ADDRESSABILITY TO PDL\n         EJECT\n* THIS ROUTINE WILL PERFORM A FINAL EDIT ON THE COMMAND INPUT RETURNED\n* FROM PARSE...AND MOVE ALL INPUT VALUES TO THEIR CORRESPONDING\n* FIELDS IN OUR WORKAREA...AND THEN THE PARSE PDL AREA WILL BE RELEASED\n*\n*\nPARM1    DS    0H\n         LA    PDE,RECSIZEA             ADDR OF PDE (AVERAGE RECSIZE)\n         BAL   LINKREG,CVB              CONVERT DATA TO BINARY\n         ST    R1,RECSZ                 STORE DATA\n         SPACE 3\nPARM2    DS    0H\n         LA    PDE,RECSIZEM             ADDR OF PDE (MAXIMUM RECSIZE)\n         BAL   LINKREG,CVB              CONVERT DATA TO BINARY\n         ST    R1,MAXRECSZ              STORE DATA\n         C     R1,=F'32761'             IS MAXIMUM GREATER THAN ALLOWED\n         BH    BADRECSZ                 YES-ERROR IN RECSIZE\n         SPACE 3\nPARM3    DS    0H\n         LA    PDE,RECLOAD              ADDR OF PDE(RECORDS TO LOAD)\n         BAL   LINKREG,CVB              CONVERT DATA TO BINARY\n         ST    R1,#RECLD                STORE DATA\n         SPACE 3\nPARM4    DS    0H\n         LA    PDE,RECADD               ADDR OF PDE (RECORDS ADDED)\n         TM    DATASW(PDE),KEYED        WAS PARAMETER KEYED\n         BNO   PARM5                    NO-GO PROCESS NEXT PARAMETER\n         BAL   LINKREG,CVB              YES-CONVERT DATA TO BINARY\n         ST    R1,#RECADD               STORE DATA\n         LA    PDE,CIPER  ADDR OF PDE(PERCNT OF INSRT RATE/CI FREESPC)\n         TM    DATASW(PDE),KEYED        WAS PARAMETE KEYED\n         BNO   PARM5                    NO-GO PROCESS NEXT PARAMETER\n         BAL   LINKREG,CVB              YES-CONVERT DATA TO BINARY\n         C     R1,=F'100'               IS RATIO GREATER THAN 100\n         BH    BADCIPER\n         ST    R1,CIRATIO       SET CI FREESPACE RATIO(INSRT RATE)\n         LA    WORKREG,100              SET FOR DETERM CA RATIO\n         SR    WORKREG,R1               SUB CI RATIO FOR CA RATIO\n         ST    WORKREG,CARATIO  SET CA FREESPACE RATIO(INSRT RATE)\nPARM5    DS    0H\n         LA    PDE,KEYLENTH             ADDR OF PDE(KEY LENGTH)\n         TM    DATASW(PDE),KEYED        WAS PARAMETER KEYED\n         BNO   CHKRADD                  NO- GO SEE IF RADD KEYED\n         BAL   LINKREG,CVB              YES- CONVERT DATA TO BINARY\n         STH   R1,KEYLEN                STORE DATA\n         CH    R1,=H'255'               IS KEYLEN GREATER THAN MAX\n         BH    BADKLEN                  YES- ERROR IN KEY\n         B     PARM6                    GO PROCESS NEXT PARAMETER\nCHKRADD  DS    0H\n         OC    #RECADD,#RECADD          WAS RADD PARAMETER KEYED\n         BZ    PARM6                    NO-GO PROCESS NEXT PARAMETER\n         A     R1,RECLOAD              ADD RADD TO RLOAD\n         ST    R1,RECLOAD              SET NEW RECLOAD\n         XC    #RECADD,#RECADD          CLEAR BECAUSE NOT KSDS\n         SPACE 3\nPARM6    DS    0H\n         L     R15,KEYCOMP              ADDR OF KEYED DATA\n         LA    PDE,KEYCOMP              ADDR OF PDE(KEY COMPRESSION)\n         TM    DATASW(PDE),KEYED        WAS PARAMETER KEYED\n         BNO   SETFAIR                  NO- GO SET TO DEFAULT\n         CLC   DATALEN(2,PDE),=H'3'     IS DATA LENGTH LESS THAN 3\n         BL    BADKCOMP                 YES-ERROR IN SPECIFICATION\n         BE    COMPBAD                  EQUAL TO 3 CAN ONLY EQUAL 'BAD'\n         CLC   0(4,R15),=C'FAIR'        IS IT 'FAIR'\n         BE    SETFAIR                  YES- GO SET\n         CLC   0(4,R15),=C'GOOD'        IS IT 'GOOD'\n         BNE   BADKCOMP                 NO- ERROR IN SPECIFICATION\n         MVC   KEYCMP,=C'GOOD'          YES- SET AND GO PROCESS NEXT\n         B     PARM7                    PARAMETER\nCOMPBAD  DS    0H\n         CLC   0(3,R15),=C'BAD'         IS IT 'BAD'\n         BNE   BADKCOMP                 NO - ERROR IN SPECIFICATION\n         MVC   KEYCOMP,=C'BAD '         YES - SET AND GO PROCESS NEXT\n         B     PARM7                    PARAMETER\nSETFAIR  DS    0H\n         MVC   KEYCMP,=C'FAIR'          SET\n         SPACE 3\nPARM7    DS    0H\n         L     R15,DEVTYPE              ADDR OF KEYED DATA\n         LA    PDE,DEVTYPE              ADDR OF PDE(DEVICE TYPE)\n         TM    DATASW(PDE),KEYED        WAS PARAMETER KEYED\n         BNO   SET3350                  NO- GO SET TO DEFAULT\n         CLC   DATALEN(2,PDE),=H'4'     WAS 4 NUMERICS KEYED\n         BL    BADDEV                   NO- ERROR IN DEVICE TYPE\n         CLC   0(4,R15),=C'3350'        WAS 3350 DEVICE TYPE KEYED\n         BE    SET3350                  YES GO SET\n         CLC   0(4,R15),=C'3330'        WAS 3330 DEVICE TYPE KEYED\n         BNE   BADDEV                   NO - ERROR IN DEVICE TYPE\n         MVC   DEVICE,=C'3330'          SET FOR 3330\n         B     PARM8910\nSET3350  DS    0H\n         MVC   DEVICE,=C'3350'          SET FOR 3350\nPARM8910 DS    0H\n         MVC   IMBFCTR,IMB\n         MVC   REPLFCTR,REPL\n         MVC   ALLFCTR,ALL\n* RELEASE PDL STORAGE\n*\n         USING PPL,PPLREG\n         LA    PPLREG,PPLAREA\n         L     R1,PPLANS\n         IKJRLSA (1)               RELEASE PARSE STORAGE (PDL)\n*\n         B     CKDEVTYP            GO AND PROCESS DEVICE TYPE TABLE\n* CONVERT A PARAMETER TO BINARY\nCVB      DS    0H\n         L     R15,0(PDE)          ADDR OF KEYED DATA\n         XR    R1,R1               CLEAR FOR PROCESSING\n         IC    R1,PACKPARM+1       SET TO INSTRUCTION LENGHTS\n         AH    R1,DATALEN(PDE)     ADD LENGTH OF KEYED DATA (OPERAND 2)\n         BCTR  R1,0                SUB 1 FOR EXECUTE  INSTRUCTION\n         EX    R1,PACKPARM         DO VARIABLE PACK\n         CVB   R1,DOUBLE           CONVERT PARM VALUE TO BINARY\n         BR    LINKREG\nPACKPARM PACK  DOUBLE,0(0,R15)     VARIABLE LENGTH PACK\n         EJECT\n* INPUT AND PARSE ERROR ROUTINES...DESCRIPTIVE MESSAGE OF ERROR\n* CONDITION WILL BE DISPLAYED ON TERMINAL........\n*\n*\nBADPARSE DS    0H\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  PARSRTNC,DOUBLE+5(2)\n         LA    R2,PARSMSG\n         BAL   LINKREG,TPUT\n         B     RETURN\n         SPACE 3\nBADKLEN  DS    0H\n         LA    R2,KLENMSG\n         BAL   LINKREG,TPUT\n         B     RETURN\n         SPACE 3\nBADKCOMP DS    0H\n         LA    R2,KCMPMSG\n         BAL   LINKREG,TPUT\n         B     RETURN\n         SPACE 3\nBADDEV   DS    0H\n         LA    R2,DEVMSG\n         BAL   LINKREG,TPUT\n         B     RETURN\n         SPACE 3\nBADRECSZ DS    0H\n         LA    R2,RECSMSG\n         BAL   LINKREG,TPUT\n         B     RETURN\n         SPACE 3\nBADCIPER DS    0H\n         LA    R2,CIPRMSG\n         BAL   LINKREG,TPUT\n         B     RETURN\n         SPACE 3\n         EJECT\n* THIS ROUTINE WILL SET UP THE CORRECT DEVICE TABLE POINTERS ACCORDING\n* TO THE DEVICE TYPE SPECIFIED BY INPUT OR THE DEFAULT DEVICE TYPE..\n*\n*\nCKDEVTYP DS    0H\n         USING DEVENTRY,DEVREG          ADDRESSABILITY FOR DSECT\n         CLC   DEVICE,=C'3350'\n         BE    USE3350\n*3330 DEVICE TYPE IS BEING USED\n*\n         L     DEVREG,A3330TAB     POINT TO BEGINNING OF 3330 TABLE\n         ST    DEVREG,DEVREGSV     SAVE REGISTER\n         B     NULLCISZ            GO NULLIFY DCISZ TABLE ENTRIES\n         SPACE 3\nUSE3350  DS    0H\n         L     DEVREG,A3350TAB     POINT TO BEGINNING OF 3350 TABLE\n         ST    DEVREG,DEVREGSV     SAVE REGISTER\n         B     NULLCISZ            GO NULLIFY DCISZ TABLE ENTRIES\n         EJECT\n* THIS ROUTINE WILL SCAN THE DATA CI SIZE FIELD IN EACH ENTRY OF THE\n* DEVICE TABLE TO SEE IF THE DATA CI SIZE IS TO SMALL FOR THE\n* MAXRECSZ+7.. IF SO THEN THAT DATA CI SIZE ENTRY WILL NULLED(ZEROS)\n* SO THAT IT WILL NOT BE CONSIDERED WHEN FINDING THE BEST DATA CI SIZES\n*\n*\nNULLCISZ DS    0H\n         L     DEVREG,DEVREGSV         FIRST TABLE ENTRY\n         L     R15,MAXRECSZ\n         LA    R15,7(R15)              ADD 7 TO MAXRECSZ\nNULLLOOP DS    0H\n         CLC   DCISZ,=F'-1'            ARE WE AT THE END OF THE TABLE\n         BE    PRODCISZ                YES- GO PROCESS DCISZ'S IN TABLE\n         C     R15,DCISZ               IS MAXRECSZ+7 GREATER THAN DCISZ\n         BNH   PRODCISZ                NO-GO PROCESS DCISZ'S IN TABLE\n         XC    DCISZ,DCISZ             YES-NULLIFY THIS TABLE ENTRY\n         LA    DEVREG,DEVENLEN(DEVREG) POINT TO THE NEXT TABLE ENTRY\n         B     NULLLOOP                GO LOOK AGAIN\n         EJECT\n* THIS ROUTINE WILL PROCESS EACH DATA CI SIZE ENTRY IN THE DEVICE TABLE\n* IN ORDER TO DETERMINE WHICH DATA CI SIZES ARE THE BEST CHOICES FOR\n* THE INDICATED RECORDSIZES........\n*\n*\nPRODCISZ DS    0H\n         L     DEVREG,DEVREGSV     SET TO TOP OF DEVICE TABLE\nDCISZP2  OC    DCISZ,DCISZ         DOES THIS DCISZ QUALIFY\n         BZ    NXTDCISZ            NO -  GO BUMP TO NEXT ENTRY\n         CLC   DCISZ,=F'-1'        IS IT THE END OF THE DEVICE TABLE\n         BE    DETBESTD            YES - GO FIND THE BEST DCISZ'S\n         BAL   LINKREG,CALC#0D     GO CALCULATE #TRKCA\n         BAL   LINKREG,CALC#1D     GO CALCULATE #CICA\n         BAL   LINKREG,CALC#2D     GO CALCULATE #RCINFSP\n         BAL   LINKREG,CALC#3D     GO CALCULATE #RCANFSP\n         BAL   LINKREG,CALC#4D     GO CALCULATE #TRKNFSP\n         OC    #RECADD,#RECADD     ARE RECORDS GOING TO BE ADDED\n         BZ    NOFREESP            NO- GO PROCESS NO FREESPACE LOGIC\n* RECORDS TO BE ADDED WAS SPECIFIED(RECADD INPUT KEYWORD)\n* SO WE MUST CALCULATE HOW MUCH FREESPACE WILL BE NEEDED TO ADD THE\n* RECORDS SPECIFIED TO THE PRIMARY DATASET ALLOCATION\n         OC    PERRADD,PERRADD WAS THIS VALUE ALREADY CALCULATED\n         BNZ   DO#6           YES DONT DO IT AGAIN\n         BAL   LINKREG,CALC#5D     GO CALCULATE PERRADD\nDO#6     DS    0H\n         BAL   LINKREG,CALC#6D     GO CALCULATE #FRCA\n         BAL   LINKREG,CALC#7D     GO CALCULATE PERFSPCA\n         BAL   LINKREG,CALC#8D     GO CALCULATE PERFSPC2\n         BAL   LINKREG,CALC#9D     GO CALCULATE #RCILOAD\n         BAL   LINKREG,CALC#10D    GO CALCULATE #RCALOAD\n         BAL   LINKREG,CALC#12D    GO CALCULATE #TRKDATA\nNXTDCISZ DS    0H\n         LA    DEVREG,DEVENLEN(DEVREG)  POINT TO NEXT TABLE ENTRY\n         B     DCISZP2\n         SPACE 3\nNOFREESP DS    0H\n         MVC   #RCILOAD,#RCINFSP        SAME AS NO FREESPACE\n         MVC   #RCALOAD,#RCANFSP        SAME AS NO FREESPACE\n         MVC   #TRKDATA,#TRKNFSP        SAME AS NO FREESPACE\n         B     NXTDCISZ                 GO DO THE NEXT DCISZ\n         EJECT\nCALC#0D  DS    0H\n*\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF TRACKS PER CONTROL AREA\n*\n* #TRKCA = ((RECSZ+3)*(#RECLD+#RECADD))/(PHYBLKSZ*#BLKSTRK)\n*        OR\n* #TRKCA = # OF TRACKS PER CYLINDER (19 OR 30)\n*        WHICHEVER IS SMALLER\n*\n* NOTE: IF ((RECSZ+3)*(#RECLD+#RECADD) IS  <   CURRENT DCISZ TABLE\n* ENTRY THEN THIS AND ALL SUBSEQUENT DCISZ TABLE ENTRIES WILL BE\n* NULLED(ZEROS) AND THE PROCESSING OF THE DCISZ TABLE WILL BE STOPPED\n* AND CONTROL WILL BE PASSED TO THE BESTFIT ROUTINE.....\n*\n         L     DIVIDEND,RECSZ\n         LA    DIVIDEND,3(DIVIDEND)\n         L     WORKREG,#RECLD\n         A     WORKREG,#RECADD\n         MR    EVENODD,WORKREG\n         C     DIVIDEND,DCISZ  IS THE DATASET SMALLER THAN THIS DCISZ\n         BL    NULL#0D    YES-GO NULLIFY THIS AND REMAINING DCISZ'S\n         L     DIVISOR,PHYBLKSZ\n         M     DIVISOR-1,#BLKSTRK\n         DR    EVENODD,DIVISOR\n         OR    REMAINDR,REMAINDR\n         BZ    CHKTRKS\n         LA    QUOTIENT,1(QUOTIENT)\nCHKTRKS  DS    0H\n         AH    QUOTIENT,IMBFCTR\n         C     QUOTIENT,#TRKCA\n         BNLR  LINKREG\n         ST    QUOTIENT,#TRKCA\n         BR    LINKREG\nNULL#0D  DS    0H\n         XC    DCISZ,DCISZ  NULL THIS DCISZ ENTRY(GREATER THAN DATASET)\n         LA    DEVREG,DEVENLEN(DEVREG) POINT TO NEXT DCISZ ENTRY\n         CLC   DCISZ,=F'-1'       IS IT THE END OF THE TABLE\n         BE    DETBESTD           YES-GO PROCESS BEST FITS...\n         B     NULL#0D            NO-GO NULLIFY THIS ENTRY ALSO...\n         EJECT\nCALC#1D  DS    0H       ROUNDED DOWN\n* #CICA= #TRKCA*#BLKSTRK/(DCISZ/PHYBLKSZ)\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF CT'S PER CA FOR THE CONTROL\n* INTERVAL SIZE DEVICE TABLE ENTRY\n         L     DIVIDEND,#TRKCA     NUMBER OF TRACKS PER CONTROL AREA\n         SH    DIVIDEND,IMBFCTR    SUB IMBED FACTOR (IF ANY)\n         M     EVENODD,#BLKSTRK    MULTIPLY BY THE NUMBER OF PHYSICAL\n         LR    WORKREG,QUOTIENT    BLOCKS PER TRACK\n         L     DIVIDEND,DCISZ      LOAD FOR DIVIDE\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVISOR,PHYBLKSZ    LOAD FOR DIVIDE\n         DR    EVENODD,DIVISOR     DIVIDE DCISZ BY PHYSBLK SIZE\n         LR    DIVISOR,QUOTIENT    USE RESULT FOR NEXT DIVIDE\n         XR    EVENODD,EVENODD     CLEAR\n         LR    DIVIDEND,WORKREG    NUMBER OF PHYSICAL BLOCKS PER CA\n         DR    EVENODD,DIVISOR     DIVIDE PHYSBLKS/CA BY PHYSBLKS/CI\n         ST    QUOTIENT,#CICA      GIVING #CICA(ROUNDED DOWN)\n         BR    LINKREG             GO BACK\n         SPACE 3\nCALC#2D  DS    0H  ROUNDED DOWN                 ROUNDED DOWN\n* #RCINFSP = (DCISZ-7)/(RECSZ) FIXED OR (DCISZ-4)/(RECSZ+3) VARIABL\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF RECORDS THAT CAN FIT IN A\n* CONTROL INTERVAL WITH NO FREESPACE SPECIFIED\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,DCISZ      DATA CONTROL INTERVAL SIZE\n         L     DIVISOR,RECSZ       AVERAGE RECORD SIZE\n         CLC   RECSZ,MAXRECSZ      IS IT FIXED LENGTH RECORDS\n         BNE   VAR#2D              NO - GO DO VARIABLE LENGTH LOGIC\n* FIXED LENGTH RECORDS\n         SH    DIVIDEND,=H'7'      SUB LENGTH OF CIDF+RDF FIELDS\n         B     DOCALC#2\n* VARIBLE LENGTH RECORDS\nVAR#2D   DS    0H\n         SH    DIVIDEND,=H'4'      SUB LENGTH OF CIDF FIELD\n         LA    DIVISOR,3(DIVISOR)  ADD LENGTH OF RDF  FIELD\nDOCALC#2 DS    0H\n         DR    EVENODD,DIVISOR     DIVIDE DCISZ BY RECSZ\n         ST    QUOTIENT,#RCINFSP   GIVING #RCINFSP(ROUNDED DOWN)\n         BR    LINKREG\n         EJECT\nCALC#3D  DS    0H\n*  #RCANFSP =  #RCINFSP * #CICA\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF RECORDS PER CONTROL AREA\n* WITH NO FREESPACE\n*\n         L     DIVIDEND,#RCINFSP\n         M     EVENODD,#CICA\n         ST    QUOTIENT,#RCANFSP\n         BR    LINKREG\n         SPACE 3\nCALC#4D  DS    0H ROUNDED UP (PUTS #TRKNFSP ON CA BOUNDARY)\n*  #TRKNFSP =  #RECLD/#RCANFSP*#TRKCA\n* THIS ROUTINE WILL CALCULATE THE NUMBER OF TRACKS NEEDED FOR THE DATA\n* COMPONENT (NO FREESPACE)\n         L     DIVISOR,#RCANFSP\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,#RECLD\n         DR    EVENODD,DIVISOR\n         OR    REMAINDR,REMAINDR   IS THIS THERE A REMINDER\n         BZ    MULT#4D             NO-GO MULTIPLY\n         LA    QUOTIENT,1(QUOTIENT) YES ADD 1 TO QUOTIENT\nMULT#4D  M     EVENODD,#TRKCA      MULT BY TRACK PER CA\n         ST    QUOTIENT,#TRKNFSP   GIVING #TRKNFSP\n         BR    LINKREG\n         SPACE 3\nCALC#5D  DS    0H        ROUNDED UP\n*  PERRADD =  #RECADD/(#RECLD+#RECADD)\n* THIS ROUTINE CALCULATES THE INSERTION RATE USING THE RECADD FIELD\n* OBTAINED FROM INPUT......\n*\n*\n         XR    EVENODD,EVENODD\n         L     DIVISOR,#RECLD\n         L    DIVIDEND,#RECADD\n         AR    DIVISOR,DIVIDEND ADD RECADD TO RECLOADED FOR INSRT RATE\n         MH   DIVIDEND,=H'100'          MULT DIVIDEND BY 100\n         DR    EVENODD,DIVISOR          YES- FIND PERCENTAGE\n         OR    REMAINDR,REMAINDR        IS THERE A REMAINDER\n         BZ    SETPERCT                 NO-GO SET PERCENTAGE\n         LA    QUOTIENT,1(QUOTIENT)     YES-ROUND UP\nSETPERCT DS    0H\n         ST    QUOTIENT,PERRADD         SET PERCENTAGE\n         BR    LINKREG\n         EJECT\nCALC#6D  DS    0H     ROUNDED DOWN\n*  #FRCA =  #RCANFSP*PERRADD\n*  THIS ROUTINE WILL DETERMINE THE NUMBER OF FREE RECORDS NEEDED PER\n*  CONTROL AREA\n*\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,#RCANFSP   NUMBER OF RECORDS PER CA\n         M     EVENODD,PERRADD     MULT BY PERCENT OF RECADD TO RECLOAD\n         LH    DIVISOR,=H'100'     SET FOR TRUE PERCENTAGE CALC\n         DR    EVENODD,DIVISOR     DIVIDE BY 100\n         LTR   QUOTIENT,QUOTIENT   IS IT LESS THAN 1\n         BZ    SETFRCA1            YES SET #FRCA TO 1\n         C     QUOTIENT,#RCANFSP   ARE WE ASKING FOR 100% FREESPACE\n         BL    NOSUB#6 NO THEN DONT SUB #CICA\n         S     QUOTIENT,#CICA  SUB SO 1 REC/CI IS LOADED\nNOSUB#6  DS    0H\n         ST    QUOTIENT,#FRCA      SET #FRCA\n         L     QUOTIENT,#FRCA\n         M     EVENODD,CARATIO NO OF FREE RECORDS NEEDED FOR FREE CI'S\n         D     EVENODD,=F'100'          TRUE VALUE\n         ST    QUOTIENT,FRCAFSP\n         BR    LINKREG\nSETFRCA1 DS    0H\n         MVC   #FRCA,=F'1'         SET TO | (MINIMUM)\n         BR    LINKREG\n         EJECT\nCALC#7D  DS   0H\n* PERFSPCA  = (FRCAFSP/#RCINFSP)/#CICA\n* THIS CALCULATION DETERMINES THE CA FREESPACE PERCENTAGE BY\n* DETERMINING THE NUMBER OF FREE CI'S NEEDED TO CONTAIN ENOUGH\n* RECORDS TO SATISFY THE CARATIO OF THE INSERTION RATE..\n*\n*\n         OC    FRCAFSP,FRCAFSP          DO WE NEED CA FREESPACE\n         BZR   LINKREG                  NO GET OUT\n         XR    EVENODD,EVENODD          CLEAR\n         L     DIVIDEND,FRCAFSP         RECS NEEDED IN CA FREESPACE\n         D     EVENODD,#RCINFSP         NO OF FREE CI'S NEEDED\n         OR    REMAINDR,REMAINDR        IS THERE A REMAINDER\n         BZ    BYRND#71                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     YES ROUND UP\nBYRND#71 DS    0H\n         M     EVENODD,=F'100' FOR TRUE PERCENTAGE\n         D     EVENODD,#CICA\n         OR    REMAINDR,REMAINDR        DO WE HAVE A REMAINDER\n         BZ    BYRND#72                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     YES ROUND UP\nBYRND#72 DS    0H\n         ST    QUOTIENT,PERFSPCA        SET CA FREESPACE PERCENTAGE\n         L     DIVIDEND,#CICA           NO OF CI'S PER CA\n         M     EVENODD,PERFSPCA         FOR PERCENTAGE\n         D     EVENODD,=F'100'          FIND FREE CI'S PER CA\n         OR    REMAINDR,REMAINDR        CHK FOR REMAINDER\n         BZ    BYRND#73                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     ROUND UP\nBYRND#73 DS    0H\n         C     QUOTIENT,#CICA        ARE FREE CI'S EQUAL TO MAX CI/CA\n         BNE   STORE#7\n         BCTR  QUOTIENT,0               SUB 1(CANT BE SAME AS #CICA)\nSTORE#7  DS    0H\n         ST    QUOTIENT,#FCICA          STORE IT\n         M     EVENODD,#RCINFSP HOW MANY REC FIT IN FREE CI'S\n         L     WORKREG,#FRCA TOTAL NO. OF FREE RECS NEEDED/CA\n         SR    WORKREG,QUOTIENT   NO. OF RECS NEEDED IN CIFREESPACE\n         BMR   LINKREG  MAKE CI FREESPACE ZERO\n         ST    WORKREG,FRCIFSP  STORE IN TABLE\n         BR    LINKREG                  GET OUT\n         EJECT\nCALC#8D  DS    0H\n*\n*PERFSPCI  =   (FRCIFSP/(#CICA-(#FCICA))*RECSZ+X)/DCISZ\n*      WHERE  X =  0 FOR FIXED LENGTH RECORDS,\n*                  3 FOR VARIABLE LENGTH RECORDS\n*\n*\n         L     DIVISOR,#CICA\n         S     DIVISOR,#FCICA           SUB NUMBER OF FREE CI'S IN A CA\n         OC    FRCIFSP,FRCIFSP          DO WE NEED AND CI FREESPACE\n         BZR   LINKREG                  GO GET OUT\n         L     DIVIDEND,FRCIFSP\n         XR    EVENODD,EVENODD          CLEAR\n         DR    EVENODD,DIVISOR\n         OR    REMAINDR,REMAINDR        DO WE HAVE A REMAINDER\n         BZ    BYRND#81                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     YES ROUND UP\nBYRND#81 DS    0H\n         L     DIVISOR,RECSZ            RECORD SIZE\n         CLC   RECSZ,MAXRECSZ           CHECK FOR FIXED/VARIABLE\n         BE    FIX#8                    FIXED LENGTH\n         LA    DIVISOR,3(DIVISOR)       ADD 3 FOR VAR RECS\nFIX#8    DS    0H\n         MR    EVENODD,DIVISOR          BYTES NEEDED FOR FREE RECS/CI\n         M     EVENODD,=F'100'          FOR PERCENTAGE\n         L     DIVISOR,DCISZ            DATA CI SIZE\n         DR    EVENODD,DIVISOR          PERCENT OF CI\n         OR    REMAINDR,REMAINDR        DO WE HAVE A REMAINDER\n         BZ    BYRND#82                 NO DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT)     YES ROUND UP\nBYRND#82 DS    0H\n         ST    QUOTIENT,PERFSPCI        SET CI FREESPACE PERCENTAGE\n         BR    LINKREG\n         EJECT\nCALC#9D  DS    0H\n*  RCILOAD = (DCISZ*(1-PERFSPCI)-7)/(RECSZ+0)   FOR FIXED LENGTH RECS\n*          = (DCISZ*(1-PERFSPCI)-7)/(RECSZ+3)   FOR VARIABLE LENGTH REC\n* THIS CALCULATION WILL COMPUTE THE NUMBER OF RECORDS THAT CAN FIT IN\n* A CI AT LOAD TIME.\n*\n         L     DIVIDEND,DCISZ\n         LH    WORKREG,=H'100'     SET FOR (1-PERFSPCI)\n         S     WORKREG,PERFSPCI    SUB CI FREESPACE PERCENTAGE\n         MR    EVENODD,WORKREG     GET NUMBER OF CI BYTES*100 AVAIL LD\n         XR    EVENODD,EVENODD     CLEAR\n         D     EVENODD,=F'100'     GET NUMBER OF CI'S BYTES AVAIL AT LD\n         SH    QUOTIENT,=H'7'      SUB CIDF AND RDF FIELDS\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVISOR,RECSZ\n         CLC   RECSZ,MAXRECSZ      IS IT FIXED LENGTH RECORDS\n         BE    FIXCALC9            YES - DONT AD 3 BYTE RDF\n         LA    DIVISOR,3(DIVISOR)  NO- VARIABLE SO ADD 3 BYTE RDF\nFIXCALC9 DS    0H\n         DR    EVENODD,DIVISOR     PERFORM FINAL CALC\n         OR    QUOTIENT,QUOTIENT  IS IT LESS THAN ONE RECORD\n         BNZ   STORE                    NO GO STORE IT\n         MVC   PERFSPCI,=F'100'  CHANGE CI FREESPACE TO 100 PERCENT\n         MVC   #RCILOAD,=F'1'           SET REC PER CI TO MINIMUM\n         BR    LINKREG                  GET THE HELL OUT\nSTORE    DS    0H\n         ST    QUOTIENT,#RCILOAD\n         BR    LINKREG\n         EJECT\nCALC#10D DS    0H\n* #RCALOAD = #RCILOAD*(#CICA*(1-PERFSPCA))\n* THIS CALCULATION WILL COMPUTE   THE NUMBER OF RECORDS THAT CAN FIT\n* IN A CONTROL AREA AT LOAD TIME\n*\n         XR    EVENODD,EVENODD     CLEAR\n         LH    WORKREG,=H'100'\n         S     WORKREG,PERFSPCA    GET PERCENT OF CI/CA USED FOR LOAD\n         L     DIVIDEND,#CICA\n         MR    EVENODD,WORKREG\n         D     EVENODD,=F'100'     GET NUMBER OF NONFREE CI/CA\n         OR    QUOTIENT,QUOTIENT        IS LOAD CI'S/CA ZERO\n         BNZ   LOAD#10                  NO EVERYTHINGS COOL\n         LA    QUOTIENT,1(QUOTIENT)     YES-ADD 1(CANT BE ZERO)\nLOAD#10  DS    0H\n         LR    WORKREG,QUOTIENT\n         L     QUOTIENT,#RCILOAD\n         MR    EVENODD,WORKREG     DETERMINE NUMBER OF REC/CA AT LOAD\n         ST    QUOTIENT,#RCALOAD\n         BR    LINKREG\n         SPACE 3\nCALC#12D DS    0H\n* #TRKDATA = #RECLD/#RCALOAD*#TRKCA\n* THIS CALCULATION WILL COMPUTE THE NUMBER OF TRACKS NEEDED FOR THE\n* DATA COMPONENT\n*\n*\n         XR    EVENODD,EVENODD     CLEAR\n         L     DIVIDEND,#RECLD\n*        A     DIVIDEND,#RECADD\n         L     DIVISOR,#RCALOAD\n         DR    EVENODD,DIVISOR\n         OR    REMAINDR,REMAINDR   IS THIS THERE A REMAINDER\n         BZ    BYRND#11            NO - DONT ROUND\n         LA    QUOTIENT,1(QUOTIENT) ROUND UP\nBYRND#11 DS    0H\n         L     WORKREG,#TRKCA\n         MR    EVENODD,WORKREG\n         ST    QUOTIENT,#TRKDATA\n         BR    LINKREG\n         EJECT\nDETBESTD DS    0H\n*\n* THIS ROUTINE WILL WILL SCAN THE DEVICE TABLE FOR THE FOUR BEST DATA\n* CONTROL INTERVAL SIZES. THE CRITERIA FOR CHOOSING THESE CI SIZES\n* WILL BE DISK UTILIZATION WHICH IS THE SMALLEST OF #TRKDATA FIELDS IN\n* THE TABLE\n*\n         OC    ALLFCTR,ALLFCTR    WAS DISPLAY ALL DCISZ'S SPECIFIED\n         BNZ   SCREEN             YES THEN DONT DETERMINE BEST FIT.....\n*                                 GO DISPLAY ALL THE DCISZ'S\n         L     DEVREG,DEVREGSV     POINT TO TOP OF DEVICE TABLE\nBEGNBFIT DS    0H\n         LA    R15,4               NUMBER OF BEST FITS\n         LA    WORKREG,BESTFIT1    POINT TO FIRST BEST FIT\n         CLC   DCISZ,=F'-1'        ARE WE AT THE END OF DEVICE TABLE\n         BE    DISPLAYD            YES- GO DISPLAY DATA INFO\n         OC    DCISZ,DCISZ         IS THIS DATA CISIZE NULLED\n         BZ    NEXTDCZ             YES-GO PROCESS NEXT TABLE ENTRY\nBFITLOOP L     R14,0(WORKREG)      LOAD CURRENT BEST FIT\n         LTR   R14,R14             IS THERE ONE\n         BZ    MAKECURB            NO MAKE THIS ONE THE CURRENT BESTFIT\n         CLC   #TRKDATA,#TRKDATA-DEVENTRY(R14) IS THIS DCISZ BETTER\n         BNL   NEXTBFIT  NO GO PROCESS NEXT BEST FIT\n         MVC   12(4,WORKREG),8(WORKREG) YES-MOVE CURRENT BESTFIT DOWN\n         MVC   8(4,WORKREG),4(WORKREG)\n         MVC   4(4,WORKREG),0(WORKREG)\nMAKECURB DS    0H\n         ST    DEVREG,0(WORKREG)   SAVE AS BEST FIT IN CURRENT POSITION\n         B     NEXTDCZ             GO PROCESS NEXT DCISZ\nNEXTBFIT DS    0H\n         LA    WORKREG,4(WORKREG)      BUMP TO NEXT BEST FIT\n         BCT   R15,BFITLOOP        DID WE LOOK AT THE FOUR BEST\n         B     NEXTDCZ             YES- GO LOOK AT NEXT DCISZ\nNEXTDCZ  DS    0H\n         LA    DEVREG,DEVENLEN(DEVREG)  BUMP TO NEXT TABLE ENTRY\n         B     BEGNBFIT            GO LOOK AT THIS ONE\nDISPLAYD DS    0H\n*\n* THIS ROUTINE WILL SORT THE FOUR BEST FITS INTO ASCENDING ORDER\n* BY DCISIZE\n*\n         LA    R15,DATAFIT1        RECEIVING FIELD FOR TABLE ADDRESSES\n         LA    R4,4                LOOPING FACTOR\n         MVC   WORKFIT(16),BESTFIT1 SAVE BEST FITS IN #TRKDATA ORDER\nBESTLOOP DS    0H\n         LA    R8,3                LOOPING FACTOR\n         LA    WORKREG,WORKFIT     POINT TO THE FIRST OF THE FIRST FITS\n         LA    R9,WORKFIT+4        POINT TO NEXT ENTRY FOR COMPARE\n*\n* NOTE :  THE TABLE ENTRY WITH THE LOWEST ADDRESS HAS THE SMALLEST\n*      DCISIZE BECAUSE OF THE ORDER OF THE TABLE\n*\nLOWLOOP  DS    0H\n         CLC   0(4,WORKREG),0(R9)   DOES WORKREG POINT TO THE ENTRY\n*                                  WITH THE LOWEST ADDRESS?\n         BL    BUMPR9              YES-GO SET R9 FOR NEXT COMPARE\n         LR    WORKREG,R9          NO-THEN MAKE SURE IT DOES\nBUMPR9   DS    0H\n         LA    R9,4(R9)            SET FOR NEXT COMPARE\n         BCT   R8,LOWLOOP          CONTINUE SEARCH FOR LOWEST ADDRESS\n         MVC   0(4,R15),0(WORKREG) SAVE IT IN RECEIVING FIELD\n         MVC   0(4,WORKREG),=F'-1' NULL THAT ENTRY SO WE CAN FIND\n*                                  THE NEXT LOWEST ENTRY\n         LA    R15,12(R15)         BUMP RECEIVING FIELD POINTER\n         BCT   R4,BESTLOOP         GO FIND THE NEXT ONE\n* INITIALIZE DATAFIT FIELDS WITH THEIR APPROPRIATE DESCRIPTORS..\n         MVC   DATAFIT1+4(8),=C'DIR     '\n         MVC   DATAFIT2+4(8),=C'DIR-SEQ '\n         MVC   DATAFIT3+4(8),=C'SEQ-DIR '\n         MVC   DATAFIT4+4(8),=C'SEQ     '\n         EJECT\nSCREEN   DS    0H\n*\n* THE FOLLOWING ROUTINE WILL FORMAT AND PRINT ALL THE HEADING AND\n* DETAIL LINES\n         MVC   PLINE,=CL79' '\n         MVC   PLINE(40),=C'          V S A M   A N A L Y Z E R   ( '\n         OC    KEYLEN,KEYLEN       IS THIS FOR A KSDS?\n         BZ    ESDSRRDS            NO-THEN SET UP HEADER ACCORDINGLY\n         MVC   PLINE+40(10),=C'K S D S   '\n         LA    WORKREG,PLINE+50\n         B     FINHEAD\nESDSRRDS DS    0H\n         MVC   PLINE+40(20),=C'E S D S / R R D S   '\n         LA    WORKREG,PLINE+60\nFINHEAD  DS    0H\n         CLC   DEVICE,=C'3330'     IS DEVINE TYPE 3330?\n         BNE   FIFTY               NO-THEN ITS A 3350\n         MVC   0(9,WORKREG),=C'3 3 3 0 )'\n         B     PUTH1\nFIFTY    DS    0H\n         MVC   0(9,WORKREG),=C'3 3 5 0 )'\nPUTH1    DS    0H\n         BAL   LINKREG,TPUTPLIN\n         MVC   PLINE,=CL79' '    CLEAR\n         BAL   LINKREG,TPUTPLIN\n         MVC   PLINE,=CL79' '  CLEAR\n         MVC   PLINE(15),=C'DATA COMPONENT:'\n         BAL   LINKREG,TPUTPLIN\n         MVC   PLINE,=CL79' ' CLEAR\n         MVC   PLINE(78),=C'                             LOAD     LOAD *\n                  CI-CA     MAX      MAX     SPACE'\n         BAL   LINKREG,TPUTPLIN\n         MVC   PLINE,=CL79' '\n         MVC   PLINE,=CL79'   DCISZ   TRK/CA   CI/CA   REC/CA   REC/CI *\n                 FRSPC   REC/CA   REC/CI   CYL-TRK'\n         BAL   LINKREG,TPUTPLIN\n         OC    ALLFCTR,ALLFCTR    WAS DISPLY ALL DCISZ'S SPECIFIED\n         BZ    BESTDETL           NO-GO DISPLY 4 BEST\n         L     DEVREG,DEVREGSV    YES-POINT TO TOP OF DEVICE TABLE\n         B     ALL1        GO-PROCESS 1ST DETAIL LINE FOR ALL DCISZ'S\nBESTDETL DS    0H\n         LA    R2,BESTFIT1\n         LA    R3,4\nALL1     DS    0H\n         ZAP   COUNT,=P'0'\nDETLOOP  DS    0H\n         MVC   PLINE,=CL79' '      CLEAR PRINT LINE\n*                                  WAIT TO MOVE PERIOD SO WE CAN FIT\n*                                  THE EDIT MASK FOR DCISZ\n* CONVERT CONTROL INTERVAL SIZE\n*\n         OC    ALLFCTR,ALLFCTR    WAS DISPLY ALL DCISZ'S SPECFD\n         BNZ   DONTLOAD           YES-DONT LOAD DEVREG\n         L     DEVREG,0(R2)        ADDRESSABILITY TO TABLE ENTRY\nDONTLOAD DS    0H\n         OC    DCISZ,DCISZ        IS THIS DCISZ NULLED\n         BZ    NXTDETAL           YES-GO LOOK AT THE NEXT DCISZ\n         L     WORKREG,DCISZ            CONTROL INTERVAL SIZE\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+1(8),MASK               SUPPRESS LEADING ZEROS\n         ED    PLINE+1(8),DOUBLE+4\n         OI    PLINE+8,X'F0'       GET RID OF SIGN\n         AP    COUNT,=P'1'         DETAIL LINE COUNTER\n         UNPK  PLINE(2),COUNT\n         OI    PLINE+1,X'F0'         GET RID OF SIGN\n         MVI   PLINE+2,C'.'\n*\n*\n* CONVERT NUMBER OF TRACKS PER CONTROL AREA\n*\n         L    WORKREG,#TRKCA\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+11(4),MASK\n         ED    PLINE+11(4),DOUBLE+6\n*\n*\n* CONVERT NUMBER OF CONTROL INTERVALS PER CONTROL AREA\n*\n         L    WORKREG,#CICA\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+20(4),MASK\n         ED    PLINE+20(4),DOUBLE+6\n*\n*\n* CONVERT RECORDS PER CONTROL AREA (TO BE LOADED)\n*\n         L    WORKREG,#RCALOAD\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+27(6),MASK\n         ED    PLINE+27(6),DOUBLE+5\n*\n*\n* CONVERT RECORDS PER CONTROL INTERVAL (TO BE LOADED)\n*\n         L    WORKREG,#RCILOAD\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+36(6),MASK\n         ED    PLINE+36(6),DOUBLE+5\n         OI    PLINE+41,X'F0'\n*\n*\n* CONVERT                  FREESPACE PERCENTAGE\n*\n         L    WORKREG,PERFSPCA\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+46(4),MASK\n         ED    PLINE+46(4),DOUBLE+6\n         OI    PLINE+49,X'F0'\n         L    WORKREG,PERFSPCI\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+43(4),MASK\n         ED    PLINE+43(4),DOUBLE+6\n         OI    PLINE+46,X'F0'\n*\n*\n* CONVERT RECORDS PER CONTROL AREA WITH NO FREESPACE\n*\n         L     WORKREG,#RCANFSP\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+53(6),MASK\n         ED    PLINE+53(6),DOUBLE+5\n*\n*\n* CONVERT RECORDS PER CONTROL AREA WITH NO FREESPACE\n*\n         L     WORKREG,#RCINFSP\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+62(6),MASK\n         ED    PLINE+62(6),DOUBLE+5\n*\n*\n* CONVERT TOTAL TRACKS NEEDED\n*\n         XR    EVENODD,EVENODD\n         L     DIVIDEND,#TRKDATA\n         CLC   DEVICE,=C'3330'\n         BNE   USE30\n         LA    DIVISOR,19\n         B     DIVIDIT\nUSE30    DS    0H\n         LA    DIVISOR,30\nDIVIDIT  DS    0H\n         DR    EVENODD,DIVISOR\n         OR    QUOTIENT,QUOTIENT\n         BZ    USET\n         OR    REMAINDR,REMAINDR  CYLINDER BOUNDARY?????\n         BNZ   USET    SPECIFY SPACE IN TRACKS\n         LR    WORKREG,QUOTIENT\n         MVI   PLINE+77,C'C'\n         B     CONVIT\nUSET     DS    0H\n         L     WORKREG,#TRKDATA\n         MVI   PLINE+77,C'T'\nCONVIT   DS    0H\n         CVD   WORKREG,DOUBLE\n         MVC   PLINE+70(6),MASK\n         ED    PLINE+70(6),DOUBLE+5\n         BAL   LINKREG,TPUTPLIN\nNXTDETAL DS    0H\n         OC    ALLFCTR,ALLFCTR    WAS DISPLY ALL DCISZ'S SPECFD\n         BZ    BESTBMP            NO-GO BUMP THROUGH BEST FIT\n         LA    DEVREG,DEVENLEN(DEVREG) NEXT DCISZ\n         CLC   DCISZ,=F'-1'       IS IT THE END OF TABLE\n         BE    RETURN             YES-GET THE HELL OUT\n         B     DETLOOP            NO- GO DO THE NEXT DETAIL LINE\nBESTBMP  DS    0H\n*\n         LA    R2,4(R2)            POINT TO NEXT BEST\n         BCT   R3,DETLOOP          CONTINUE\n         MVC   PLINE,=CL79' '\n         BAL   LINKREG,TPUTPLIN\n         B     BOTTOM\nBOTTOM   MVC   PLINE,TRAILER\n         LA    R4,PLINE+8-18\n         LA    R6,4\n         LA    R8,BESTFIT1\nCLOOP    DS    0H\n         LA    R5,4\n         LA    R9,DATAFIT1\nLINELOOP DS    0H\n         CLC   0(4,R8),0(R9)\n         BE    GETWORDS\n         LA    R9,12(R9)\n         BCT   R5,LINELOOP\n         LA    R4,18(R4)\n         MVC   0(8,R4),=CL8'*ERROR*'\n         B     ECONT\nGETWORDS DS    0H\n         LA    R4,18(R4)\n         MVC   0(8,R4),4(R9)\nECONT    LA    R8,4(R8)\n         BCT   R6,CLOOP\n         BAL   LINKREG,TPUTPLIN\n         B     RETURN\n         SPACE 3\nTPUTPLIN DS    0H\n         LA    R1,PLINE\n         LA    R0,79\n         TPUT ((1)),((0)),R\n         BR    LINKREG\nTPUT     DS    0H\n         XR    R9,R9\n         ICM   R9,3,0(R2)\n         LA    R8,2(R2)\n         TPUT  ((8)),((9)),R\n         BR    LINKREG\n         SPACE 3\nRETURN   DS    0H\n         L     R13,SAVE+4\n         RETURN (14,12)\n         TITLE 'VSAM ANALYZER DEVICE TABLE FOR 3330S MOD 1 AND 2'\nDEV3330  DS    0F\n         DC    F'512',F'512',F'20',F'19',13F'0'\n         DC    F'1024',F'1024',F'11',F'19',13F'0'\n         DC    F'1536',F'512',F'20',F'19',13F'0'\n         DC    F'2048',F'2048',F'6',F'19',13F'0'\n         DC    F'2560',F'512',F'20',F'19',13F'0'\n         DC    F'3072',F'1024',F'11',F'19',13F'0'\n         DC    F'3584',F'512',F'20',F'19',13F'0'\n         DC    F'4096',F'4096',F'3',F'19',13F'0'\n         DC    F'4608',F'512',F'20',F'19',13F'0'\n         DC    F'5120',F'1024',F'11',F'19',13F'0'\n         DC    F'5632',F'512',F'20',F'19',13F'0'\n         DC    F'6144',F'2048',F'6',F'19',13F'0'\n         DC    F'6656',F'512',F'20',F'19',13F'0'\n         DC    F'7168',F'1024',F'11',F'19',13F'0'\n         DC    F'8192',F'4096',F'3',F'19',13F'0'\n         DC    F'10240',F'2048',F'6',F'19',13F'0'\n         DC    F'12288',F'4096',F'3',F'19',13F'0'\n         DC    F'14336',F'2048',F'6',F'19',13F'0'\n         DC    F'16384',F'4096',F'3',F'19',13F'0'\n         DC    F'18432',F'2048',F'6',F'19',13F'0'\n         DC    F'20480',F'4096',F'3',F'19',13F'0'\n         DC    F'22528',F'2048',F'6',F'19',13F'0'\n         DC    F'24576',F'4096',F'3',F'19',13F'0'\n         DC    F'26624',F'2048',F'6',F'19',13F'0'\n         DC    F'28672',F'4096',F'3',F'19',13F'0'\n         DC    F'30720',F'2048',F'6',F'19',13F'0'\n         DC    F'32768',F'4096',F'3',F'19',13F'0'\n         DC    F'-1'                              END OF TABLE INDICATR\nDEV3330L EQU   *-DEV3330\n         EJECT\nDEV3350  DS    0F\n         DC    F'512',F'512',F'27',F'30',13F'0'\n         DC    F'1024',F'1024',F'15',F'30',13F'0'\n         DC    F'1536',F'512',F'27',F'30',13F'0'\n         DC    F'2048',F'2048',F'8',F'30',13F'0'\n         DC    F'2560',F'512',F'27',F'30',13F'0'\n         DC    F'3072',F'1024',F'15',F'30',13F'0'\n         DC    F'3584',F'512',F'27',F'30',13F'0'\n         DC    F'4096',F'4096',F'4',F'30',13F'0'\n         DC    F'4608',F'512',F'27',F'30',13F'0'\n         DC    F'5120',F'1024',F'15',F'30',13F'0'\n         DC    F'5632',F'512',F'27',F'30',13F'0'\n         DC    F'6144',F'2048',F'8',F'30',13F'0'\n         DC    F'6656',F'512',F'27',F'30',13F'0'\n         DC    F'7168',F'1024',F'15',F'30',13F'0'\n         DC    F'8192',F'4096',F'4',F'30',13F'0'\n         DC    F'10240',F'2048',F'8',F'30',13F'0'\n         DC    F'12288',F'4096',F'4',F'30',13F'0'\n         DC    F'14336',F'2048',F'8',F'30',13F'0'\n         DC    F'16384',F'4096',F'4',F'30',13F'0'\n         DC    F'18432',F'2048',F'8',F'30',13F'0'\n         DC    F'20480',F'4096',F'4',F'30',13F'0'\n         DC    F'22528',F'2048',F'8',F'30',13F'0'\n         DC    F'24576',F'4096',F'4',F'30',13F'0'\n         DC    F'26624',F'2048',F'8',F'30',13F'0'\n         DC    F'28672',F'4096',F'4',F'30',13F'0'\n         DC    F'30720',F'2048',F'8',F'30',13F'0'\n         DC    F'32768',F'4096',F'4',F'30',13F'0'\n         DC    F'-1'                              END OF TABLE INDICATR\nDEV3350L EQU   *-DEV3350\n         EJECT\n*\n*   P R O G R A M   C O N S T A N T S\n*\nTRAILER  DC    CL79' 1-BEST            2-BEST            3-BEST        *\n                   4-BEST'\nMASK     DC    XL8'4020202020202020'\n*\n*\nPARSMSG  DC    YL2(PARSMSGE-*-2)\n         DC    C'PARSE ERROR--RETURN CODE='\nPARSRTNC DC    C'  '\nPARSMSGE EQU   *\n*\nKLENMSG  DC    YL2(KLENMSGE-*-2)\n         DC    C'KEYL GREATER THAN 255'\nKLENMSGE EQU   *\n*\nKCMPMSG  DC    YL2(KCMPMSGE-*-2)\n         DC    C'KCOMP IS NOT ''BAD'' ''GOOD'' OR ''FAIR'''\nKCMPMSGE EQU   *\n*\nDEVMSG   DC    YL2(DEVMSGE-*-2)\n         DC    C'DEV IS NOT ''3330'' OR ''3350'''\nDEVMSGE  EQU   *\n*\nRECSMSG  DC    YL2(RECSMSGE-*-2)\n         DC    C'MAXIMUM RECORD SIZE IS GREATER THAN ''32761'''\nRECSMSGE EQU   *\n*\nCIPRMSG  DC    YL2(CIPRMSGE-*-2)\n         DC    C'CI PERCENTAGE IS GREATER THAN ''100'''\nCIPRMSGE EQU   *\n         SPACE 3\n         LTORG\n         EJECT\n*\n*\n*  R E G I S T E R    E Q U A T E S\n*\n*\n*\nCPPLREG  EQU   3\nPPLREG   EQU   4\nWORKREG  EQU   5\nPDLREG   EQU   4\nBASEREG1 EQU   11\nBASEREG2 EQU   12\nR1       EQU   1\nPDE      EQU   5\nDATALEN  EQU   4\nDATASW   EQU   6\nKEYED    EQU   X'80'\nNOTKEYED EQU   X'00'\nLINKREG  EQU   6\nDEVREG   EQU   4\nR15      EQU   15\nEVENODD  EQU   8\nDIVIDEND EQU   9\nREMAINDR EQU   8\nQUOTIENT EQU   9\nDIVISOR  EQU   15\nR8       EQU   8\nR5       EQU   5\nR4       EQU   4\nWAREAREG EQU   10\nR2       EQU   2\nR3       EQU   3\nR6       EQU   6\nR7       EQU   7\nR9       EQU   9\nR13      EQU   13\nR14      EQU   14\nR0       EQU   0\n         EJECT\nPCL      IKJPARM\nRSIZE    IKJKEYWD\n         IKJNAME 'RSIZE',SUBFLD=RSIZESUB\nRLOAD    IKJKEYWD\n         IKJNAME 'RLOAD',SUBFLD=RLOADSUB\nRADD     IKJKEYWD\n         IKJNAME 'RADD',SUBFLD=RADDSUB\nKLEN     IKJKEYWD\n         IKJNAME 'KLEN',SUBFLD=KLENSUB\nKCOMP    IKJKEYWD\n         IKJNAME 'KCOMP',SUBFLD=KCOMPSUB\nDEV      IKJKEYWD\n         IKJNAME 'DEV',SUBFLD=DEVSUB\nIMB      IKJKEYWD\n         IKJNAME 'IMB'\nREPL     IKJKEYWD\n         IKJNAME 'REPL'\nALL      IKJKEYWD\n         IKJNAME 'ALL'\nRSIZESUB IKJSUBF\nRECSIZEA IKJIDENT 'NUMBER',MAXLNTH=6,FIRST=NUMERIC,OTHER=NUMERIC,      *\n               PROMPT='RECORDSIZE-AVG MAX'\nRECSIZEM IKJIDENT 'NUMBER',MAXLNTH=6,FIRST=NUMERIC,OTHER=NUMERIC,      *\n               PROMPT='RECORDSIZE-MAX'\nRLOADSUB IKJSUBF\nRECLOAD  IKJIDENT 'NUMBER',MAXLNTH=7,FIRST=NUMERIC,OTHER=NUMERIC,      *\n               PROMPT='RECORDS TO BE LOADED'\nRADDSUB  IKJSUBF\nRECADD   IKJIDENT 'NUMBER',MAXLNTH=6,FIRST=NUMERIC,OTHER=NUMERIC\nCIPER    IKJIDENT 'NUMBER',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC\nKLENSUB  IKJSUBF\nKEYLENTH IKJIDENT 'NUMBER',MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC\nKCOMPSUB IKJSUBF\nKEYCOMP  IKJIDENT 'BAD/FAIR/GOOD',MAXLNTH=4,\nDEVSUB   IKJSUBF\nDEVTYPE  IKJIDENT '3330/3350',MAXLNTH=4,FIRST=NUMERIC,OTHER=NUMERIC\n         IKJENDP\n         EJECT\nWORKAREA DSECT\nCPPLADDR DS    F                   ADDRESS OF CPPL\nPPLAREA  DS    7F                  PPL AREA USED TO COMMUNICATE W/PARSE\nCMDECB   DS    F                   COMMAND ECB USED BY PARSE\nPDLADDR  DS    F                   ANSWER AREA USED BY PARSE\n         SPACE 3\n* THE FOLLOWING VALUES ARE ENTERED AS INPUT TO THIS COMMAND\n*\nRECSZ    DC    F'0'                INPUT(PDL=RECSIZEA)\nMAXRECSZ DC    F'0'                INPUT(PDL=RECSIZEM)\n#RECLD   DC    F'0'                INPUT(PDL=RECLOAD)\n#RECADD  DC    F'0'                INPUT(PDL=RECADD)\nKEYLEN   DC    H'0'                INPUT(PDL=KEYLENGTH)\nPERRADD  DC    F'0'                COMPUTE: #RECADD / #RECLD\nCIRATIO  DC    F'0'\nCARATIO  DC    F'0'\nDEVICE   DC    CL4' '              INPUT(PDL=DEVTYPE)\nIMBFCTR  DC    H'0'                INPUT(PDL=IMB) 0=IF NOT ENTERED\n*                                                 1=IF ENTERED\nKEYCMP   DC    CL4' '              INPUT(PDL=KEYCOMB)\nDOUBLE   DS    D\nREPLFCTR DC    H'0'\nALLFCTR   DC   H'0'                INPUT(PDL=ALL) 0=IF NOT ENTERED\n*                                                 1=IF ENTERED\nA3330TAB DS    F                   ADDRESS OF 3330 TABLE\nA3350TAB DS    F                   ADDRESS OF 3350 TABLE\nDATAFIT1 DS    3F                  BEST DATA CISZ FIT FROM TABLE+ADDR\nDATAFIT2 DS    3F                  BEST DATA CISZ FIT FROM TABLE+ADDR\nDATAFIT3 DS    3F                  BEST DATA CISZ FIT FROM TABLE+ADDR\nDATAFIT4 DS    3F                  BEST DATA CISZ FIT FROM TABLE+ADDR\nDEVREGSV DS    F                   SAVE AREA FOR BEGINNING OF DEVTABLE\nBESTFIT1 DS    F               1ST BEST  #TRKDATA  FIT FROM TABLE\nBESTFIT2 DS    F               2ND BEST  #TRKDATA  FIT FROM TABLE\nBESTFIT3 DS    F               3RD BEST  #TRKDATA  FIT FROM TABLE\nBESTFIT4 DS    F               4TH BEST  #TRKDATA  FIT FROM TABLE\n         DS    3F                  FILLER FOR BEST FIT ROUTINE\nWORKFIT  DS    4F\nSAVE     DS    9D\nPLINE    DS    CL79\nCOUNT    DS    PL2\n         DS    D                   ALIGN FOR GETMAIN\nWORKLEN  EQU   *-CPPLADDR\n         EJECT\n* THIS DSECT IS FOR A DEVICE TABLE ENTRY.......\n*\n*\nDEVENTRY DSECT\nDCISZ    DS    F    DATA CONTROL INTERVAL SIZE\nPHYBLKSZ DS    F    PHYSICAL BLOCKSIZE\n#BLKSTRK DS    F    NUMBER OF PHYSICAL BLOCKS PER TRACK\n#TRKCA   DS    F    NUMBER OF TRACK PER CONTROL AREA (DEFAULT = 1 CYL)\n#CICA    DS    F    NUMBER OF CONTROL INTERVALS PER CONTROL AREA\n#RCINFSP DS    F    NUMBER OF RECORDS PER CONTROL INTERVAL-NO FREESPACE\n#RCANFSP DS    F    NUMBER OF RECORDS PER CONTROL AREA -   NO FREESPACE\n#FRCA    DS    F    NUMBER OF FREE RECORDS NEED PER CONTROL AREA\nFRCAFSP  DS    F    NUMBER OF FREE RECORDS NEED/CA FREESPACE\nFRCIFSP  DS    F    NUMBER OF FREE RECORDS NEED/CI FREESPACE\nPERFSPCI DS    F    PERCENTAGE OF FREESPACE PER CONTROL INTERVAL\nPERFSPCA DS    F    PERCENTAGE OF FREESPACE PER CONTROL AREA\n#FCICA   DS    F    NUMBER OF FREE CONTROL INTERVALS PER CONTROL AREA\n#RCILOAD DS    F    NUMBER OF RECORDS IN A CONTROL INTERVAL AT LOADTIME\n#RCALOAD DS    F    NUMBER OF RECORDS IN A CONTROL AREA AT LOADTIME\n#TRKDATA DS    F    NUMBER OF TRACKS FOR DATA COMPONENT WITH FREESPACE\n#TRKNFSP DS    F    NUMBER OF TRACKS FOR DATA COMPONENT WITHOUT FREESPC\nDEVENLEN EQU   *-DCISZ\n         IKJCPPL DSECT\n         EJECT\n         IKJPPL DSECT\n         EJECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT294/FILE294.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT294", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}