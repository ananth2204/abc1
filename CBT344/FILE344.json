{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011814000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 705432, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE344.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 705432, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 705432, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE344.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0c\\x06'", "DS1TRBAL": "b'\\x92\\x18'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x89\\x00\\x01\\x02\\x89\\x00\\r\\x00\\r'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x08O\\x01\\x02\\x08O\\x15Y\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-25T00:00:00", "modifydate": "2002-03-25T15:59:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 444    FILE:  344\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT444.FILE344\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 21 MEMBERS COUNTED; CUMULATIVE SIZE IS 6,160 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/25/02    15:59:38    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00!\\x00\\x98%o\\x01\\x02\\x08O\\x15S\\x00a\\x00\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1998-09-13T00:00:00", "modifydate": "2002-03-25T15:53:21", "lines": 97, "newlines": 7, "modlines": 0, "user": "SBGOLOB"}, "text": " Thanks to Gilbert Saint-flour for letting me use his disclaimer:\n\n Joerg Berning neither expresses nor implies any warranty\n as to the fitness of these computer programs for any function.\n The use of these programs or the results therefrom is entirely\n at the risk of the user.  Consequently, the user may modify\n these programs in any way he/she thinks fit.\n\n These programs are Freeware and may be freely copied.  They\n may be freely distributed to any other party on condition\n that no inducement beyond reasonable handling costs is\n offered or accepted by either side for such distribution.\n\n I would be interested to hear of comments and/or proposed\n enhancements.  Please write to joerg.berning(at)gmx.net.\n\n\n\n What's new?\n\n 25.03.2002:\n 3.4Command Tracks\n   Works for: + volumes\n              + DSLevel without volume\n\n   Does not work for: - DSLevel with volume\n   Because I'm unable to get the DSLevel and volume from 3.4(panel\n   ISRUDLP)(I tried ZALVOL, ZDLDSNLV, ZDLPVL and some other 4282\n   variables) I have to grab the DSLevel or volume from the screen.\n\n TSOCommand VGet\n   Lists all variables from the member VGETTAB.\n\n EditMacro MacroRes\n   Added isredit preserve on.\n\n\n\n The fun starts here:\n\n EditMacro Add (<FromCol ToCol>)\n   Adds the numbers in the selected rows. Display at the bottom line.\n   Easily saveable with the MD(MakeData)-LineCommand.\n\n TSO-BatchCommand AWSExtra\n   Extracts all the files from a with AWSUtil-produced dataset.\n\n 3.4Command DelNoEnq\n   Frontend for the BYPASSNQ-Program(Gilbert Saint-flour).\n   Scratches the dataset under 3.4 with IEHPROGM.\n\n TSO-BatchCommand HLQInfo\n   Produces a listing containing all HLQs and some RACF-Information.\n\n TSOCommand LDDDef <dddef-entry>\n   LIST ALLZONES DDDEF(...). Says it all.\n\n TSOCommand ListVTOC <volser>\n   &\n EditMacro MacroRes\n   ISREDIT RESET\n\n   This REXX works to display the contents of a volume\n   and EDIF the result.  The resulting dataset display\n   is very handy.  Just load the 2 members into a\n   SYSPROC or SYSEXEC library and enter LISTVTOC volser.\n\n 3.4Command LZ\n   Requires Target4-PKZIP-Utility.\n   Displays the contents of a ZIP-Archive.\n\n 3.4Command LZD\n   Requires Target4-PKZIP-Utility.\n   Displays the contents of a ZIP-Archive more detailed.\n\n Job MAN\n   For those OMVS-Commands...\n\n TSOCommand OMVSSEG\n   Output is a listing of all UserIDs & groups and their OMVS-Segment-\n   information. Could take a while.\n\n TSOCommand ShowDP\n   Produces a listing of all active address spaces sortet by\n   dispatching priority. Helps if your system is in compatibility mode.\n\n TSOCommand SMPEWarn\n   Produces a listing of the |cataloged| datasets with dataset-\n   information(like how many free directory-blocks are available).\n\n TBDisp\n   Produces a formatted listing of the table. Handy for ISMF-saved\n   tables. May take some time.\n\n EditMacro Y99\n   Sets the memberstatistics to a specific date. Handy for resetting\n   Y2K-touched members.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE344": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99\\x08?\\x01\\x02\\x08O\\x15X\\x00\\x86\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2002-03-25T15:58:00", "lines": 134, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 344 is a REXX EXEC from Joerg Berning to list the VTOC    *   FILE 344\n//*           of a disk pack, and display it under ISPF EDIT.  It   *   FILE 344\n//*           is a handy dandy, quick method of displaying disk     *   FILE 344\n//*           extents.   (NEW IMPROVED VERSION AS OF V-423.)        *   FILE 344\n//*                                                                 *   FILE 344\n//*   Updated 03-25-02.  See below (what's new?) for information.   *   FILE 344\n//*                                                                 *   FILE 344\n//*   >>>>    This file has now been expanded to included    <<<<   *   FILE 344\n//*   >>>>    various other utilities from Joerg Berning,    <<<<   *   FILE 344\n//*   >>>>    which are described below.                     <<<<   *   FILE 344\n//*                                                                 *   FILE 344\n//*           Private:                                              *   FILE 344\n//*           joerg.berning@gmx.net                                 *   FILE 344\n//*           (+49)6172/941525(-6 automatic answering machine)      *   FILE 344\n//*           D-61352 Bad Homburg                                   *   FILE 344\n//*                                                                 *   FILE 344\n//*           Duty:                                                 *   FILE 344\n//*           joerg_berning@de.sonymusic.com                        *   FILE 344\n//*           (+49)69/13888-432                                     *   FILE 344\n//*           D-60313 Frankfurt am Main                             *   FILE 344\n//*                                                                 *   FILE 344\n//*       POSTAL:     JOERG BERNING                                 *   FILE 344\n//*                   IN DEN LICHGAERTEN 3                          *   FILE 344\n//*                   D-61352 BAD HOMBURG                           *   FILE 344\n//*                   GERMANY(HESSEN)                               *   FILE 344\n//*                                                                 *   FILE 344\n//*   -----------------------------------------------------------   *   FILE 344\n//*                                                                 *   FILE 344\n//*     Thanks to Gilbert Saint-flour for letting me use his        *   FILE 344\n//*     disclaimer:                                                 *   FILE 344\n//*                                                                 *   FILE 344\n//*     Joerg Berning neither expresses nor implies any             *   FILE 344\n//*     warranty as to the fitness of these computer programs       *   FILE 344\n//*     for any function.  The use of these programs or the         *   FILE 344\n//*     results therefrom is entirely at the risk of the user.      *   FILE 344\n//*     Consequently, the user may modify these programs in         *   FILE 344\n//*     any way he/she thinks fit.                                  *   FILE 344\n//*                                                                 *   FILE 344\n//*     These programs are Freeware and may be freely copied.       *   FILE 344\n//*     They may be freely distributed to any other party on        *   FILE 344\n//*     condition that no inducement beyond reasonable              *   FILE 344\n//*     handling costs is offered or accepted by either side        *   FILE 344\n//*     for such distribution.                                      *   FILE 344\n//*                                                                 *   FILE 344\n//*     I would be interested to hear of comments and/or            *   FILE 344\n//*     proposed enhancements.  Please write to                     *   FILE 344\n//*     joerg.berning(at)gmx.net.                                   *   FILE 344\n//*                                                                 *   FILE 344\n//*   -----------------------------------------------------------   *   FILE 344\n//*                                                                 *   FILE 344\n//*     What's new?                                                 *   FILE 344\n//*                                                                 *   FILE 344\n//*     25.03.2002:                                                 *   FILE 344\n//*     3.4Command Tracks                                           *   FILE 344\n//*       Works for: + volumes                                      *   FILE 344\n//*                  + DSLevel without volume                       *   FILE 344\n//*                                                                 *   FILE 344\n//*       Does not work for: - DSLevel with volume                  *   FILE 344\n//*       Because I'm unable to get the DSLevel and volume          *   FILE 344\n//*       from 3.4(panel ISRUDLP)(I tried ZALVOL, ZDLDSNLV,         *   FILE 344\n//*       ZDLPVL and some other 4282 variables) I have to grab      *   FILE 344\n//*       the DSLevel or volume from the screen.                    *   FILE 344\n//*                                                                 *   FILE 344\n//*     TSOCommand VGet                                             *   FILE 344\n//*       Lists all variables from the member VGETTAB.              *   FILE 344\n//*                                                                 *   FILE 344\n//*     EditMacro MacroRes                                          *   FILE 344\n//*       Added isredit preserve on.                                *   FILE 344\n//*                                                                 *   FILE 344\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 344\n//*                                                                 *   FILE 344\n//*     The fun starts here:                                        *   FILE 344\n//*                                                                 *   FILE 344\n//*     EditMacro Add (<FromCol ToCol>)                             *   FILE 344\n//*        Adds the numbers in the selected rows. Display at        *   FILE 344\n//*        the bottom line.  Easily saveable with the               *   FILE 344\n//*        MD(MakeData)-LineCommand.                                *   FILE 344\n//*                                                                 *   FILE 344\n//*     3.4 Command DelNoEnq                                        *   FILE 344\n//*        Frontend for the BYPASSNQ-Program (Gilbert               *   FILE 344\n//*        Saint-flour).  Scratches the dataset under 3.4 with      *   FILE 344\n//*        IEHPROGM, no uncatalog is done.                          *   FILE 344\n//*                                                                 *   FILE 344\n//*     TSO-Batch Command HLQInfo                                   *   FILE 344\n//*        Produces a listing containing all HLQs and some          *   FILE 344\n//*        RACF-Information.                                        *   FILE 344\n//*                                                                 *   FILE 344\n//*     TSO Command LDDDef <dddef-entry>                            *   FILE 344\n//*        LIST ALLZONES DDDEF(...). Says it all.                   *   FILE 344\n//*                                                                 *   FILE 344\n//*     TSO Command ListVTOC <volser>                               *   FILE 344\n//*        This REXX works to display the contents of a volume      *   FILE 344\n//*        and EDIF the result.  The resulting dataset display      *   FILE 344\n//*        is very handy.  Just load the 2 members into a           *   FILE 344\n//*        SYSPROC or SYSEXEC library and enter LISTVTOC            *   FILE 344\n//*        volser.                                                  *   FILE 344\n//*                                                                 *   FILE 344\n//*     3.4 Command LZ                                              *   FILE 344\n//*        Requires Target4-PKZIP-Utility.                          *   FILE 344\n//*        Displays the contents of a ZIP-Archive.                  *   FILE 344\n//*                                                                 *   FILE 344\n//*     3.4 Command LZD                                             *   FILE 344\n//*        Requires Target4-PKZIP-Utility.                          *   FILE 344\n//*        Displays the contents of a ZIP-Archive more              *   FILE 344\n//*        detailed.                                                *   FILE 344\n//*                                                                 *   FILE 344\n//*     Edit Macro MacroRes                                         *   FILE 344\n//*        ISREDIT RESET                                            *   FILE 344\n//*                                                                 *   FILE 344\n//*     Job MAN                                                     *   FILE 344\n//*        For those OMVS-Commands...                               *   FILE 344\n//*                                                                 *   FILE 344\n//*     TSO Command OMVSSEG                                         *   FILE 344\n//*        Output is a listing of all UserIDs & groups and          *   FILE 344\n//*        their OMVS-Segment-information. Could take a while.      *   FILE 344\n//*                                                                 *   FILE 344\n//*     TSO Command ShowDP                                          *   FILE 344\n//*        Produces a listing of all active address spaces          *   FILE 344\n//*        sortet by dispatching priority.  Helps if your system    *   FILE 344\n//*        is in compatibility mode.                                *   FILE 344\n//*                                                                 *   FILE 344\n//*     TSO Command SMPEWarn                                        *   FILE 344\n//*        Produces a listing of the (cataloged) datasets           *   FILE 344\n//*        with dataset- information (like how many free            *   FILE 344\n//*        directory-blocks are available).                         *   FILE 344\n//*                                                                 *   FILE 344\n//*     TB Disp                                                     *   FILE 344\n//*        Produces a formatted listing of the table. Handy for     *   FILE 344\n//*        ISMF-saved tables. May take some time.                   *   FILE 344\n//*                                                                 *   FILE 344\n//*     Edit Macro Y99                                              *   FILE 344\n//*        Sets the member statistics to a specific date.  Handy    *   FILE 344\n//*        for resetting Y2K-touched members.                       *   FILE 344\n//*                                                                 *   FILE 344\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADD": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x992\\x9f\\x00\\x992\\x9f\\x15&\\x00b\\x00_\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-11-25T00:00:00", "modifydate": "1999-11-25T15:26:00", "lines": 98, "newlines": 95, "modlines": 0, "user": "BERNING"}, "text": "         /* REXX Add Exec by UIS0070                                 */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         address isredit\n         \"MACRO NOPROCESS(MYINPUT)\"\n         \"PROCESS RANGE C\"\n         select\n           when rc = 0 then\n             do\n               \"(CMD) = RANGE_CMD\"\n               \"(MYFIRST) = LINENUM .ZFRANGE\"\n               \"(MYLAST) = LINENUM .ZLRANGE\"\n             end /* of do */\n           when rc = 4 then                      /* no line selected */\n             do\n               \"(MYFIRST) = LINENUM .ZFIRST\"\n               \"(MYLAST) = LINENUM .ZLAST\"\n             end /* of do */\n           otherwise\n             do\n               zErrSM = \"RC=\"rc\n               zErrLM = \"Add failed, RC:\"rc\n               zErrAlrm = \"YES\"\n               zErrHM = \"ISR2MACR\"\n               address ispexec\n               \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n               \"SETMSG MSG(ISRZ002)\"\n               exit\n             end /* of otherwise */\n         end /* of select */\n         \"RECOVERY ON\"\n         \"(CHGST) = DATA_CHANGED\"\n         if chgst = yes then\n           \"BUILTIN SAVE\"\n         select\n           when words(myInput) = 0 then\n             do\n               myFromCol = 1\n               \"(MYWIDTH) = DATA_WIDTH\"\n               myToCol = myWidth\n             end /* of do */\n           when words(myInput) = 2 then\n             do\n               myFromCol = subword(myInput,1,1)\n               myToCol = subword(myInput,2,1)\n             end /* of do */\n           otherwise\n             do\n               zErrSM = \"Syntax|\"\n               zErrLM = \"Syntax: Add (<FromCol ToCol>)\"\n               zErrAlrm = \"YES\"\n               zErrHM = \"ISR2MACR\"\n               address ispexec\n               \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n               \"SETMSG MSG(ISRZ002)\"\n               exit 12\n             end\n         end /* of select */\n         myFirst = Strip(myFirst,l,0)\n         myLast = Strip(myLast,l,0)\n         mySum = 0\n         error = 0\n         do i = myFirst to myLast\n           \"(MYCURR) = LINE \"i\n           myLength = myToCol - myFromCol +1\n           myAdd = substr(myCurr,myFromCol,myLength)\n           myPos = pos(\",\",myAdd)\n           if myPos <> 0 then\n             myAdd = substr(myAdd,1,myPos -1)||substr(myAdd,myPos +1)\n           if datatype(myAdd) <> \"NUM\" then\n             do\n               error = error + 1\n               say \"Not added:\" myAdd\n               myAdd = 0\n             end\n           mySum = mySum + myAdd\n         end\n         if error = 0 then\n           zErrSM = mySum\n         else\n           zErrSM = mySum\"(\"error\"|||)\"\n         if error = 0 then\n           zErrLM = \"Add from \"myFromCol\" to \"myToCol\" = \"mySum\n         else\n           zErrLM = \"Add from \"myFromCol\" to \"myToCol\" = \"mySum,\n             \", # of rows not selected:\"error\n         zErrAlrm = \"YES\"\n         zErrHM = \"ISR2MACR\"\n         address ispexec\n         \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n         \"SETMSG MSG(ISRZ002)\"\n         address isredit\n         myWidthOfSum = length(mySum)\n         my#OfBlanks = myToCol - myWidthOfSum\n         \"line_after \"myLast\" = INFOLINE '\"||,\n           copies(\" \",my#OfBlanks)mySum\"'\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AWSEXTRA": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x01\\x01(\\x8f\\x01\\x01(\\x8f\\x17 \\x00\\xbb\\x00\\xbb\\x00\\x00\\xd1\\xc2\\xc7@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-10-15T00:00:00", "modifydate": "2001-10-15T17:20:22", "lines": 187, "newlines": 187, "modlines": 0, "user": "JBG"}, "text": "         /*Copyright 4 Oct 2001 by JBG REXX AWSExtra                 */\n         /*----------------------------------------------------------*/\n         /* JBG 15.10.2001 BERNING Extracts all Files from a         */\n         /* JBG 15.10.2001 BERNING sequential file produced by       */\n         /* JBG 15.10.2001 BERNING AWSUTIL, File 477 of the CBT-Tape.*/\n         /* JBG 15.10.2001 BERNING Beats FTPing them to the Support  */\n         /* JBG 15.10.2001 BERNING Element, mounting them there and  */\n         /* JBG 15.10.2001 BERNING processing them via IEBGENER =>   */\n         /*----------------------------------------------------------*/\n         /* JBG 15.10.2001 BERNING And it helps if you got a lot of  */\n         /* JBG 15.10.2001 BERNING storage available. All the output-*/\n         /* JBG 15.10.2001 BERNING lines get queued before writing   */\n         /* JBG 15.10.2001 BERNING them to DASD.                     */\n         /*----------------------------------------------------------*/\n         /* JBG 15.10.2001 BERNING Before executing please have a    */\n         /* JBG 15.10.2001 BERNING look at the myOutputDSN-variable. */\n         /*----------------------------------------------------------*/\n         /* JBG 08.10.2001 BERNING Only Recfm=FB is supported.       */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         arg myDSN\n         myDSN = strip(myDSN,\"b\",\"'\")\n         say time() \"Processing \"myDSN\"...\"\n         mySaveRC = 0\n         \"alloc da('\"myDSN\"') f(in) shr reuse\"\n         \"execio * diskr in(fini stem myLine.\"\n         say time() myLine.0 \"lines read.\"\n         \"free f(in)\"\n         /*----------------------------------------------------------*/\n         /* JBG 04.10.2001 BERNING Values of Flag1: 80 begin of recor*/\n         /* JBG 04.10.2001 BERNING                  40 Tapemark      */\n         /* JBG 04.10.2001 BERNING                  20 end of record */\n         /*----------------------------------------------------------*/\n         myTapemarkFlag = x2c(\"40\")               /* it's a blank... */\n         myTapemarkCounter = 0\n         myTapeVolser = substr(myLine.2,5,6)\n         do i = 1 to myLine.0\n/*say time() \"i=\"i                                                   */\n           myLineLength = length(myLine.i)\n           if myLineLength = 6 then                        /* Header */\n             do\n               parse value myLine.i with 1 myLOB,  /* Low order byte */\n                                         2 myHOB, /* High order byte */\n                                         3 myPrevRecordLOB,\n                                         4 myPrevRecordHOB,\n                                         5 myFlag1,\n                                         6 myFlag2,\n                                         7 dummy\n               if myFlag1 = myTapemarkFlag then\n                 do\n                   myTapemarkCounter = myTapemarkCounter +1\n                   say time() \"myTapemarkCounter=\"myTapemarkCounter\n         /*----------------------------------------------------------*/\n         /* JBG 05.10.2001 BERNING Format:          Tapemark #       */\n         /* JBG 05.10.2001 BERNING VOL1                              */\n         /* JBG 05.10.2001 BERNING     HDR1                          */\n         /* JBG 05.10.2001 BERNING     HDR2                          */\n         /* JBG 05.10.2001 BERNING         TM       1                */\n         /* JBG 05.10.2001 BERNING           Dataset #1              */\n         /* JBG 05.10.2001 BERNING         TM       2                */\n         /* JBG 05.10.2001 BERNING     EOF1                          */\n         /* JBG 05.10.2001 BERNING     EOF2                          */\n         /* JBG 05.10.2001 BERNING         TM       3 -> 0           */\n         /* JBG 05.10.2001 BERNING --------------------------------- */\n         /* JBG 05.10.2001 BERNING     HDR1                          */\n         /* JBG 05.10.2001 BERNING     HDR2                          */\n         /* JBG 05.10.2001 BERNING         TM       4    1           */\n         /* JBG 05.10.2001 BERNING           Dataset #2              */\n         /* JBG 05.10.2001 BERNING         TM       5    2           */\n         /* JBG 05.10.2001 BERNING     EOF1                          */\n         /* JBG 05.10.2001 BERNING     EOF2                          */\n         /* JBG 05.10.2001 BERNING         TM       6    3           */\n         /* JBG 05.10.2001 BERNING --------------------------------- */\n         /* JBG 05.10.2001 BERNING TM               7    EOV         */\n         /*----------------------------------------------------------*/\n                   select\n                     when myTapemarkCounter = 1 then\n                       do\n                         myHDR1Line# = i -3\n                         myHDR2Line# = i -1\n                         myTapeDSN = substr(myLine.myHDR1Line#,5,17)\n                         myTapeDSN = strip(myTapeDSN,\"b\",\".\")\n                         myTapeDSN = strip(myTapeDSN,\"b\",\" \")\n                         myOutputDSN = userid()\".TAPE.\"myTapeVolser||,\n                           \".F\"time(\"S\")\".\"myTapeDSN\n                                                        /* F, V or U */\n                         myRecfm = substr(myLine.myHDR2Line#,5,1)\n                         if myRecfm <> \"F\" then\n                           do\n                             mySaveRC = 8\n                             say time() \"Recfm \"myRecfm\" of\",\n                               myTapeDSN\" is not yet supported.\"\n                             say time() myTapeDSN \"not processed,\"\n                             say time() \"setting the RC to\",\n                               mySaveRC\".\"\n                             myTapemarkCounter = 0\n                             iterate\n                           end /* of if */\n                         myBlksize = substr(myLine.myHDR2Line#,6,5)\n                         myLRecl = substr(myLine.myHDR2Line#,11,5)\n                                                 /* B, S, R or blank */\n                         myBlockAttr = substr(myLine.myHDR2Line#,39,1)\n                         myOutputRecfm = myRecfm myBlockAttr\n                         myQueueLine = \"\"\n                         \"dropbuf\"\n                         call myFormatData\n                       end /* of when */\n                     when myTapemarkCounter = 2 then\n                       do\n                         say time() \"Allocating \"myOutputDSN\"...\"\n                         \"alloc da('\"myOutputDSN\"') f(out) new reuse\",\n                           \"tracks lrecl(\"myLRecl\")\",\n                           \"recfm(\"myOutputRecfm\")\",\n                           \"space(1500,450) dsorg(ps) release\",\n                           \"storclas(scbackup) dataclas(dcextcom)\"\n                           queue \"\"\n                           \"execio * diskW out(fini\"\n                           \"free f(out)\"\n                       end /* of when */\n                     when myTapemarkCounter = 3 then\n                       do\n                         my#OfNextLine = i +1\n                         parse value myLine.my#OfNextLine with,\n                           1 myLOB,\n                           2 myHOB,\n                           3 myPrevRecordLOB,\n                           4 myPrevRecordHOB,\n                           5 myFlag1,\n                           6 myFlag2,\n                           7 dummy\n                         if myFlag1 = myTapemarkFlag then     /* EOV */\n                           do\n                             \"dropbuf\"\n                             say time() \"Processing ended.\"\n                             exit mySaveRC           /* quit program */\n                           end /* of if */\n                         else         /* get ready for the next file */\n                           myTapemarkCounter = 0\n                       end /* of when */\n                     otherwise ;\n                   end /* of select */\n                 end /* of do */\n             end /* of if myLineLength = 6 */\n         end /* of do i */\n         exit 20                                   /* emergency stop */\n\n         myFormatData:\n           j = i +1                 /* j = first line after tapemark */\n           do k = j to myLine.0\n             parse value myLine.k with 1 myLOB,    /* Low order byte */\n                                       2 myHOB,   /* High order byte */\n                                       3 myPrevRecordLOB,\n                                       4 myPrevRecordHOB,\n                                       5 myFlag1,\n                                       6 myFlag2,\n                                       7 dummy\n             myDataLength = c2d(myHOB||myLOB)\n/*say \"myDataLength=\"myDataLength                                    */\n             if myDataLength = 0 &,             /* the next tapemark */\n               myFlag1 = myTapemarkFlag then\n               do\n                 i = k -1              /* i is now the previous line */\n                 return\n               end /* of if */\n             else\n               do           /* 4096 = LRecl - RDW of AWSUtil-Dataset */\n                 myWholeBlockAsLine = \"\"\n                 if (myDataLength // 4096) <> 0 then\n                   my#OfRowsToFormat = (myDataLength % 4096) +1\n                 else\n                   my#OfRowsToFormat = myDataLength % 4096\n                 do r = (k +1) to (k +my#OfRowsToFormat)\n                   myWholeBlockAsLine = myWholeBlockAsLine||,\n                     myLine.r\n                 end /* of do */\n                 do (myBlksize / myLRecl)\n                   parse var myWholeBlockAsLine myQueueLine,\n                     +(myLRecl) myWholeBlockAsLine\n                   queue myQueueline\n/*say myQueueline                                                    */\n                 end /* of do */\n                 k = r -1\n               end /* of else */\n           end /* of do k */\n         return                                     /* is never used */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DELNOENQ": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x992\\x9f\\x00\\x992\\x9f\\x15&\\x00<\\x009\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-11-25T00:00:00", "modifydate": "1999-11-25T15:26:00", "lines": 60, "newlines": 57, "modlines": 0, "user": "BERNING"}, "text": "         /*COPYRIGHT 5 JAN 2000 BY JBG REXX DelNoEnq                 */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         address ispexec \"vget (ZDLDSN ZDLVOL ZDLDEV)\"\n         if zDLDSN = \"\" | zDLVol = \"\" | zDLDev = \"\" |,\n           myOutputVolser = \"\" then\n           do\n             zErrSM = \"SyntaxError\"\n             zErrLM = \"Syntax: via 3.4: DelNoEnq\"\n             zErrAlrm = \"YES\"\n             zErrHM = \"ISR2MACR\"\n             address ispexec\n             \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n             \"SETMSG MSG(ISRZ002)\"\n             exit 12\n           end /* of if */\n         else\n           do\n             myDSN = zDLDSN\n             myVolser = zDLVol\n             myDevice = zDLDev\n             zDLDSN = \"\"\n             zDLVol = \"\"\n             zDLDev = \"\"\n             address ispexec \"vput (ZDLDSN ZDLVOL ZDLDEV)\"\n           end /* of else */\n         myDSN = strip(myDSN,b,\"'\")\n         \"alloc f(sysprint) recfm(f b a) lrecl(121) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"alloc f(sysin) recfm(f b) lrecl(80) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         /*----------------------------------------------------------*/\n         /* For simulating the JCL-Allocation                        */\n         /* //DD1      DD  DISP=OLD,UNIT=3390,VOL=SER=<myVolser>     */\n         /* via TSO ALLOC the following alloc statement is used:     */\n         /*----------------------------------------------------------*/\n         myCheckDSN = \"SYS1.VTOCIX.\"myVolser\n         \"alloc f(DD1) da('\"myCheckDSN\"') volume(\"myVolser\") shr\",\n           \"unit(\"myDevice\") reuse\"\n         \"dropbuf\"\n         queue \" SCRATCH DSNAME=\"myDSN\",VOL=\"myDevice\"=\"myVolser\n         \"execio 1 diskw sysin(fini\"\n         \"dropbuf\"\n/*       address linkmvs \"BYPASSNQ IEHPROGM\"                         */\n         \"call 'SYS1.PROG.LINKLIB(BYPASSNQ)' 'IEHPROGM'\"\n         \"execio * diskR sysprint(fini\"\n         \"free f(sysin sysprint dd1)\"\n         myFi = \"F\"||time(s)\n         \"alloc f(\"myFi\") recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         queue \"\"\n         \"execio * diskW \"myFi\"(fini\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(\"myFi\")\"\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(\"myFi\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HLQINFO": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x03\\x9f\\x01\\x00\\x03\\x9f %\\x00N\\x00K\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-08T00:00:00", "modifydate": "2000-02-08T20:25:00", "lines": 78, "newlines": 75, "modlines": 0, "user": "BERNING"}, "text": "         /*Copyright 25 Aug 1999 by JBG REXX HLQInfo                 */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         rc = outtrap(myCatalog.)\n         queue \"CATALOG.MVSICFM.VBKP620\"\n         queue \"CATALOG.MVSICFM.VOS3CAT\"\n         queue \"CATALOG.MVSICF1.CA\"\n         queue \"CATALOG.MVSICF1.LANDMARK\"\n         queue \"CATALOG.MVSICF1.SAG\"\n         queue \"CATALOG.MVSICF1.SMEP\"\n         queue \"CATALOG.MVSICF1.TSOUSER\"\n         queue \"CATALOG.MVSICF1.VOS3SMP\"\n         queue \"CATALOG.MVSICF1.VTAPES\"\n         queue \"CATALOG.SYS\"\n         j = 0\n         say \"Processing the following catalogs:\"\n         do queued()\n           pull line\n           say line\n           queue line\n         end /* of do */\n         do queued()\n           pull line\n           j = j + 1\n           outLine.j = line\n           myUserCat = subword(line,1,1)\n           rc = outtrap(myUserCatLine.)\n           \"listc ent('\"myUserCat\"') all\"\n           do i = 1 to myUserCatLine.0\n             mySubword1 = subword(myUserCatLine.i,1,1)\n             if substr(mySubword1,1,5) = \"ALIAS\" then\n               do\n                 myAlias = substr(mySubword1,lastpos(\"-\",mySubword1) + 1)\n                 j = j + 1\n                 outLine.j = myAlias\n               end\n           end\n         end\n         \"dropbuf\"\n         say \" \"\n         say j\" HLQs found.\"\n         say \" \"\n         do i = 1 to j\n           myAlias = subword(outLine.i,1,1)\n           if pos(\".\",myAlias) <> 0 then           /* Catalog-DSName */\n             do\n               say myAlias\n               iterate\n             end /* of if */\n           rc = outtrap(myListC.)\n           \"listc lvl('\"myAlias\"')\"\n           rc = outtrap(mySR.)\n           \"sr mask(\"myAlias\".)\"\n           rc = outtrap(\"OFF\")\n           select\n             when subword(mySR.1,1,1) = \"ICH31005I\" then\n               my#OfRACFProfiles = \"no RACF-Profiles\"\n             when mySR.0 = 1 then\n               do\n                 rc = outtrap(\"myLD.\")\n                 \"ld dataset('\"subword(mySR.1,1,1)\"')\"\n                 myUACC = subword(myLD.5,3,1)\n                 rc = outtrap(\"OFF\")\n                 my#OfRACFProfiles = mySR.1 \"UACC:\"myUACC\n               end\n             otherwise\n               my#OfRACFProfiles = mySR.0\n           end /* of select */\n           if subword(myListC.1,1,1) = \"IDC3012I\" then\n             say left(myAlias,8) \"no Datasets\" my#OfRACFProfiles\n           else\n             do\n               my#OfDS = myListC.0 / 2\n               say left(myAlias,8) right(my#OfDS,11) my#OfRACFProfiles\n             end\n         end\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LDDDEF": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x992\\x9f\\x00\\x992\\x9f\\x14I\\x00E\\x00E\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-11-25T00:00:00", "modifydate": "1999-11-25T14:49:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "BERNING"}, "text": "         /*COPYRIGHT 3 NOV 1999 BY JBG REXX LDDDEF                   */\n         /*----------------------------------------------------------*/\n         /* Syntax: LDDDef <dddef-entry>                             */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         arg myDDDef myCSI\n         myCSI = strip(myCSI,,\"'\")\n         if myDDDef = \"\" then\n           myDDDef = \"\"\n         if myCSI = \"\" then\n           myCSI = \"SMPE.GLOBAL.CSI\"\n         \"alloc f(SMPCSI) da('\"myCSI\"') shr reuse\"\n         \"alloc f(SMPLIST) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         \"alloc f(SMPLOG) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         \"alloc f(SMPOUT) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         \"alloc f(SMPRPT) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         \"alloc f(SMPCNTL) recfm(f b) lrecl(80) new unit(vio)\",\n           \"delete tracks space(1) reuse dsorg(PS) \"\n         \"dropbuf\"\n         if myDDDef <> \"\" then\n           do\n             queue \"SET BOUNDARY(GLOBAL).\"\n             queue \"LIST ALLZONES DDDEF(\"myDDDef\").\"\n           end /* of if */\n         else\n           do\n             queue \"SET BOUNDARY(GLOBAL).\"\n             queue \"LIST ALLZONES DDDEF.\"\n           end /* of else */\n         \"execio 2 diskW smpcntl(fini\"\n         address linkmvs \"GIMSMP\"\n         if rc <> 0 then\n           do\n             zErrSM = \"RC:\"rc\n             zErrLM = \"GIMSMP ended with rc:\"rc\n             zErrAlrm = \"YES\"\n             zErrHM = \"ISR2MACR\"\n             address ispexec\n             \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n             \"SETMSG MSG(ISRZ002)\"\n             address tso\n           end /* of if */\n         \"dropbuf\"\n         queue \"SMPList:\"\n         \"execio * diskR SMPLIST(fini\"\n         queue \"SMPLog:\"\n         \"execio * diskR SMPLOG(fini\"\n         queue \"SMPOut:\"\n         \"execio * diskR SMPOUT(fini\"\n         queue \"SMPRpt:\"\n         \"execio * diskR SMPRPT(fini\"\n         queue \"\"\n         \"free f(SMPCSI SMPLIST SMPLOG SMPOUT SMPRPT)\"\n         myFi = \"F\"||time(s)\n         \"alloc f(\"myFi\") recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         \"execio * diskW \"myFi\"(fini\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(\"myFi\")\"\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(\"myFi\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTVTOC": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x992\\x9f\\x00\\x992\\x9f\\x137\\x01+\\x01+\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-11-25T00:00:00", "modifydate": "1999-11-25T13:37:00", "lines": 299, "newlines": 299, "modlines": 0, "user": "BERNING"}, "text": "         /*Copyright 6 Aug 1998 by AL13429 REXX ListVTOC             */\n         /*----------------------------------------------------------*/\n         /* Syntax: ListVTOC <Volser>                                */\n         /*----------------------------------------------------------*/\n         /* 31.08.1999 UNIT(VIO) for temp-DS added.                  */\n         /* 17.08.1999 Really get rid of \"SYSTEMS SUPPORT UTILITIES--*/\n         /* 17.08.1999 -IEHLIST\"-line.                               */\n         /* 15.03.1999 Fewer typos, thanks to Sam Golob =)           */\n         /* 10.03.1999 Alternate-Tracks-Support added.               */\n         /* 22.01.1999 Cyl-0-Support added.                          */\n         /* 20.01.1999 Check for VTOC-Index.                         */\n         /* 14.01.1999 List of all free extents at the bottom.       */\n         /* 14.01.1999 Support for DeviceTypes <> 3390 added.        */\n         /* 14.01.1999 I have to use INDEXDSN=SYS1.VTOCIX.<volser> to*/\n         /* 14.01.1999 get the maximum amount of cylinders on that   */\n         /* 14.01.1999 DASD. The drawback: slightly higher elapse    */\n         /* 14.01.1999 time. CPU, too ;>                             */\n         /* This Exec uses IEHLIST to produce a readable ListVTOC.   */\n         /* A similar function is in Serena's StarTools VMap-Command.*/\n         /* ... is used with OS/390 2.4, TSO 2.6, DFSMS 1.4, ISPF 4.4*/\n         /* also used with OS/390 1.3, TSO 2.5, DFSMS 1.3, ISPF 4.4  */\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         arg myVolser\n         if myVolser = \"\" then\n           do\n             zErrSM = \"Volser|\"\n             zErrLM = \"Syntax: ListVTOC <Volser>\"\n             zErrAlrm = \"YES\"\n             zErrHM = \"ISR2MACR\"\n             address ispexec\n             \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n             \"SETMSG MSG(ISRZ002)\"\n             exit 12\n           end\n         \"alloc f(sysprint) recfm(f b a) lrecl(121) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"alloc f(sysin) recfm(f b) lrecl(80) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         /*----------------------------------------------------------*/\n         /* For simulating the JCL-Allocation                        */\n         /* //MYVTOC   DD  DISP=SHR,UNIT=3390,VOL=SER=<myVolser>     */\n         /* via TSO ALLOC the following alloc statement is used:     */\n         /*----------------------------------------------------------*/\n         myCheckDSN = \"SYS1.VTOCIX.\"myVolser\n         rc = listdsi(\"'\"myCheckDSN\"' volume(\"myVolser\")\")\n         if rc <> 0 then\n           do\n             if sysreason = 22 then\n               myExplanation = \"Volume \"myVolser\" not mounted.\"\n             else\n               myExplanation = \"\"\n             zErrSM = \"Volser|\"\n             zErrLM = \"Couldn't find \"myCheckDSN\" on Volume\",\n               myVolser\".\" myExplanation\n             zErrAlrm = \"YES\"\n             zErrHM = \"ISR2MACR\"\n             address ispexec\n             \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n             \"SETMSG MSG(ISRZ002)\"\n             exit 12\n           end /* of if */\n         \"alloc f(myVTOC) da('\"myCheckDSN\"') volume(\"myVolser\") shr\",\n           \"unit(\"sysunit\")\"\n         queue \" LISTVTOC FORMAT,VOL=\"sysunit\"=\"myVolser\",\"||,\n           \"INDEXDSN=SYS1.VTOCIX.\"myVolser\n         \"execio 1 diskW sysin(fini\"\n         address linkmvs \"IEHLIST\"\n         if rc <> 0 then\n           do\n             \"execio * diskR sysprint(fini\"\n             do queued()\n               parse pull line\n               say line\n             end /* of do queued */\n             \"free f(sysprint sysin)\"\n             exit 12\n           end /* of if */\n         \"dropbuf\"\n         \"execio * diskR sysprint(fini stem myTemp.\"\n         \"free f(sysprint sysin myVTOC)\"\n         j = 0\n         do i = 1 to myTemp.0\n           if pos(\"SYSTEMS SUPPORT UTILITIES---IEHLIST\",myTemp.i) = 0 then\n             do\n               j = j +1\n               myLine.j = myTemp.i\n             end /* of do */\n         end /* of do i */\n         myLine.0 = j\n         myFirstRow = \"---------------DATA SET NAME----------------\"\n         myFirstRowLength = length(myFirstRow)\n         myExtentLineCounter = 1\n         do i = 1 to myLine.0\n           if substr(myLine.i,96,11) = \"VTOC EXTENT\" then\n             do\n               j = i +2\n               myVTOCExtent = substr(myLine.j,92,18)\n               parse value myVTOCExtent with myVTOCCylFrom,\n                 myVTOCTrackFrom myVTOCCylTo myVTOCTrackTo\n/* Insert an entry for Cyl-0/Track-0                                 */\n               myExtentLow.myExtentLineCounter = 0\n               myExtentHigh.myExtentLineCounter = 0\n               myDSN.myExtentLineCounter = \"+IPLText?+\"\n               myExtentLineCounter = myExtentLineCounter +1\n/* Insert an entry for the VTOC                                      */\n               myExtentLow.myExtentLineCounter =,\n                 myVTOCCylFrom *15 + myVTOCTrackFrom\n               myExtentHigh.myExtentLineCounter =,\n                 myVTOCCylTo *15 + myVTOCTrackTo\n               myDSN.myExtentLineCounter = \"+VTOC Extent+\"\n               myExtentLineCounter = myExtentLineCounter +1\n/* If available, insert an entry for alternate Tracks                */\n               myAltTracks = substr(myLine.j,48,20)\n               parse value myAltTracks with my#OfAltTracks,\n                 myAltCylFrom myAltTrackFrom\n               if my#OfAltTracks <> 0 then\n                 do\n                   myExtentLow.myExtentLineCounter =,\n                     myAltCylFrom *15 + myAltTrackFrom\n                   myExtentHigh.myExtentLineCounter =,\n                     myAltCylFrom *15 + myAltTrackFrom,\n                     +my#OfAltTracks -1\n                   myDSN.myExtentLineCounter = \"+Alternate Tracks+\"\n                   myExtentLineCounter = myExtentLineCounter +1\n                 end /* of if */\n             end /* of if */\n           if substr(myLine.i,2,17) = \"VTOC MAP OF DSCBS\" then\n             do\n               j = i -1\n               myMaxTracks = (substr(myLine.j,2,8) +1)\n               myMaxTracks = myMaxTracks *15\n             end /* of if */\n           if substr(myLine.i,2,myFirstRowLength) = myFirstRow then\n             do\n               myRowPointer = i +1\n               myDSN = subword(myLine.myRowPointer,1,1)\n               myRowPointer = i +5\n               do forever\n                 myCylinder = substr(myLine.myRowPointer,26,6)\n                 if myCylinder = \"\" then\n                   leave\n                 myTrack = substr(myLine.myRowPointer,33,2)\n                 myExtentLow.myExtentLineCounter =,\n                   myCylinder *15 + myTrack\n                 myCylinder = substr(myLine.myRowPointer,38,6)\n                 myTrack = substr(myLine.myRowPointer,45,2)\n                 myExtentHigh.myExtentLineCounter =,\n                   myCylinder *15 + myTrack\n                 myDSN.myExtentLineCounter = myDSN\n                 myExtentLineCounter = myExtentLineCounter +1\n                 /* */\n                 myCylinder = substr(myLine.myRowPointer,54,6)\n                 if myCylinder = \"\" then\n                   leave\n                 myTrack = substr(myLine.myRowPointer,61,2)\n                 myExtentLow.myExtentLineCounter =,\n                   myCylinder *15 + myTrack\n                 myCylinder = substr(myLine.myRowPointer,66,6)\n                 myTrack = substr(myLine.myRowPointer,73,2)\n                 myExtentHigh.myExtentLineCounter =,\n                   myCylinder *15 + myTrack\n                 myDSN.myExtentLineCounter = myDSN\n                 myExtentLineCounter = myExtentLineCounter +1\n                 /* */\n                 myCylinder = substr(myLine.myRowPointer,82,6)\n                 if myCylinder = \"\" then\n                   leave\n                 myTrack = substr(myLine.myRowPointer,89,2)\n                 myExtentLow.myExtentLineCounter =,\n                   myCylinder *15 + myTrack\n                 myCylinder = substr(myLine.myRowPointer,94,6)\n                 myTrack = substr(myLine.myRowPointer,101,2)\n                 myExtentHigh.myExtentLineCounter =,\n                   myCylinder *15 + myTrack\n                 myDSN.myExtentLineCounter = myDSN\n                 myExtentLineCounter = myExtentLineCounter +1\n                 myRowPointer = myRowPointer +1\n               end /* of do forever */\n             end /* of if */\n         end /* of do i */\n         \"dropbuf\"\n         parse value myVTOCExtent with myVTOCCylFrom,\n           myVTOCTrackFrom myVTOCCylTo myVTOCTrackTo\n         do i = 1 to myExtentLineCounter -1  /* -1 wegen inc am Ende */\n           queue right(myExtentLow.i,6) right(myExtentHigh.i,6),\n             myDSN.i\n         end /* of do i */\n         \"alloc f(sortin) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(15,15) reuse dsorg(PS)\"\n         queue \"\"\n         \"execio * diskW sortin(fini\"\n         \"alloc f(sortout) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"alloc f(sysin) recfm(f b) lrecl(80) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"alloc f(sysout) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"dropbuf\"\n         queue \" SORT FIELDS=(5,6,CH,A)\"              /* +4 wegen VB */\n         \"execio 1 diskW sysin(fini\"\n         address linkmvs \"SORT\"\n         \"execio * diskR sortout(fini stem myLine.\"\n         \"free f(sortin sortout sysin sysout)\"\n         \"dropbuf\"\n         queue \"Track  Track  Cyl    Tr Cyl    Tr Tracks  Datasetname\"\n         queue \"from   to     from   ac to     ac\"\n         myAllFreeTracks = \"\"\n         do i = 1 to myLine.0\n           parse var myLine.i myExtentLow myExtentHigh myDSN\n           myExtentLowCyl = myExtentLow % 15\n           myExtentLowTrack = myExtentLow // 15\n           myExtentHighCyl = myExtentHigh % 15\n           myExtentHighTrack = myExtentHigh // 15\n           myUsedTracks = myExtentHigh - myExtentLow +1\n           queue right(myExtentLow,6,\"0\"),\n             right(myExtentHigh,6,\"0\"),\n             right(myExtentLowCyl,6,\"0\"),\n             right(myExtentLowTrack,2,\"0\"),\n             right(myExtentHighCyl,6,\"0\"),\n             right(myExtentHighTrack,2,\"0\"),\n             right(myUsedTracks,7),\n             myDSN\n           j = i +1\n           if j <= myLine.0 then\n             parse var myLine.j myExtentLow2 myExtentHigh2 myDSN2\n           else\n             myExtentLow2 = myMaxTracks\n           if myExtentLow2 -1 <> myExtentHigh then\n             do\n               myExtentLowCyl = (myExtentHigh +1) % 15\n               myExtentLowTrack = (myExtentHigh +1) // 15\n               myExtentHighCyl = (myExtentLow2 -1) % 15\n               myExtentHighTrack = (myExtentLow2 -1) // 15\n               myFreeTracks = myExtentLow2 - myExtentHigh -1\n               myAllFreeTracks = myAllFreeTracks myFreeTracks\n               queue right(myExtentHigh +1,6,\"0\"),\n                 right(myExtentLow2 -1,6,\"0\"),\n                 right(myExtentLowCyl,6,\"0\"),\n                 right(myExtentLowTrack,2,\"0\"),\n                 right(myExtentHighCyl,6,\"0\"),\n                 right(myExtentHighTrack,2,\"0\"),\n                 \"*\"right(myExtentLow2 - myExtentHigh -1,6),\n                 \"Free\"\n             end /* of if */\n         end /* of do queued */\n         my#OfFreeExtents = words(myAllFreeTracks)\n         queue \" \"\n         if my#OfFreeExtents = 1 then\n           queue \"One free extent(in Tracks) on volume \"myVolser\":\"\n         else\n           queue my#OfFreeExtents \"free extents(in Tracks) on volume\",\n             myVolser\".\"\n         myLargestExtent = 0\n         do i = 1 to my#OfFreeExtents\n           myCurrentFreeTracks = word(myAllFreeTracks,i)\n           if myLargestExtent < myCurrentFreeTracks then\n             myLargestExtent = myCurrentFreeTracks\n           queue right(myCurrentFreeTracks,6)\n         end /* of do i */\n         myFi = \"F\"||time(\"S\")\n         \"alloc f(\"myFi\") recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         queue \"\"\n         \"execio * diskW \"myFi\"(fini\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(\"myFi\")\"\n         select\n           when my#OfFreeExtents = 0 then\n             do\n               zErrSM = \"Full\"\n               zErrLM = \"No free extents on volume \"myVolser\n             end /* of when */\n           when my#OfFreeExtents = 1 then\n             do\n               zErrSM = \"Largest Extent:\"myLargestExtent\n               zErrLM = my#OfFreeExtents \"free extent on volume \"myVolser\n             end /* of when */\n           otherwise\n             do\n               zErrSM = \"Largest Extent:\"myLargestExtent\n               zErrLM = my#OfFreeExtents \"free extents on volume \"myVolser\n             end /* of when */\n         end /* of select */\n         zErrAlrm = \"YES\"\n         zErrHM = \"ISR2MACR\"\n         address ispexec\n         \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n         \"SETMSG MSG(ISRZ002)\"\n         /*----------------------------------------------------------*/\n         /* MacroRes includes:                                       */\n         /* ISREDIT MACRO                                            */\n         /* ISREDIT RESET                                            */\n         /*----------------------------------------------------------*/\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(\"myFi\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LZ": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00\\x03\\x9f\\x01\\x00\\x03\\x9f \\x13\\x00\\x1d\\x00\\x1b\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-02-08T00:00:00", "modifydate": "2000-02-08T20:13:00", "lines": 29, "newlines": 27, "modlines": 0, "user": "BERNING"}, "text": "         /* REXX LZ Exec by UIS0070                                  */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         arg myDSN\n         if myDSN = \"\" then\n           do\n             zErrSM = \"ZIPDataSetName|\"\n             zErrLM = \"Syntax: LZ <ZIPDataSetName>\"\n             zErrAlrm = \"YES\"\n             zErrHM = \"ISR2MACR\"\n             address ispexec\n             \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n             \"SETMSG MSG(ISRZ002)\"\n             exit 4\n           end\n         myDSN = strip(myDSN,b,\"'\")\n         \"dropbuf\"\n         \"alloc f(sysprint) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         \"call 'SYS.ZIP.LOAD(PKZIP)'\",\n           \"'-archive(\"myDSN\") -view -nosysin'\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(SYSPRINT)\"\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(sysprint)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LZD": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x03\\x9f\\x01\\x00\\x03\\x9f \\x13\\x00\\x1d\\x00\\x1a\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-08T00:00:00", "modifydate": "2000-02-08T20:13:00", "lines": 29, "newlines": 26, "modlines": 0, "user": "BERNING"}, "text": "         /* REXX LZD Exec by UIS441                                  */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         arg myDSN\n         if myDSN = \"\" then\n           do\n             zErrSM = \"ZIPDataSetName|\"\n             zErrLM = \"Syntax: LZD <ZIPDataSetName>\"\n             zErrAlrm = \"YES\"\n             zErrHM = \"ISR2MACR\"\n             address ispexec\n             \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n             \"SETMSG MSG(ISRZ002)\"\n             exit 4\n           end\n         myDSN = strip(myDSN,b,\"'\")\n         \"dropbuf\"\n         \"alloc f(sysprint) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         \"call 'SYS.ZIP.LOAD(PKZIP)'\",\n           \"'-archive(\"myDSN\") -viewdetail -nosysin'\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(SYSPRINT)\"\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(sysprint)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MACRORES": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x00'\\x00\\x98%o\\x01\\x02\\x08O\\x13\\x15\\x00\\x06\\x00\\x05\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-09-13T00:00:00", "modifydate": "2002-03-25T13:15:27", "lines": 6, "newlines": 5, "modlines": 0, "user": "BERNING"}, "text": "         /*----------------------------------------------------------*/\n         /* MacroRes includes:                                       */\n            isredit macro\n            isredit reset\n            isredit preserve on\n         /*----------------------------------------------------------*/\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MAN": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x03\\x9f\\x01\\x00\\x03\\x9f @\\x00\\x1c\\x00\\x19\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-08T00:00:00", "modifydate": "2000-02-08T20:40:00", "lines": 28, "newlines": 25, "modlines": 0, "user": "BERNING"}, "text": "//JBG#MAN  JOB ,\n//         'MAN',\n//         MSGCLASS=X,\n//         CLASS=0,\n//         NOTIFY=&SYSUID\n//*--------------------------------------------------------------------\n//* The author can be reached at joerg.berning(at)gmx.net\n//*--------------------------------------------------------------------\n//STEP0010 EXEC PGM=BPXBATCH,\n// PARM=('sh man tso')\n//STDOUT   DD PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU,\n//         PATH='/tmp/jbg.bpxbatch.stdout'\n//STDERR   DD PATHOPTS=(OWRONLY,OCREAT,OTRUNC),PATHMODE=SIRWXU,\n//         PATH='/tmp/jbg.bpxbatch.stderr'\n//STEP0020 EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD PATHOPTS=ORDONLY,FILEDATA=TEXT,\n//         LRECL=32756,BLKSIZE=32760,\n//         PATH='/tmp/jbg.bpxbatch.stderr'\n//         DD *\n\n/tmp/jbg.bpxbatch.stdout:\n\n//         DD PATHOPTS=ORDONLY,FILEDATA=TEXT,\n//         LRECL=32756,BLKSIZE=32760,\n//         PATH='/tmp/jbg.bpxbatch.stdout'\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD DUMMY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OMVSSEG": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x03\\x9f\\x01\\x00\\x03\\x9f\\x19I\\x00e\\x00e\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-08T00:00:00", "modifydate": "2000-02-08T19:49:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "BERNING"}, "text": "         /*Copyright 23 Apr 2000 by JBG REXX OMVSSeg                 */\n         /*----------------------------------------------------------*/\n         /* Syntax: OMVSSEG                                          */\n         /*----------------------------------------------------------*/\n         /* Output is a listing of all UserIDs & groups and their    */\n         /* OMVS-Segment-information.                                */\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         rc = outtrap(\"myLG.\")\n         \"lg * omvs noracf\"\n         rc = outtrap(\"OFF\")\n         \"dropbuf\"\n         queue copies(\" \",19),\n           left(\"DfltGrp\",8),\n           left(\"GID\",10)\n         queue \"----+----1----+----2----+----3----+----4----+----5\",\n           \"----+----6----+----7\"\n         do i = 1 to myLG.0\n           parse var myLG.i myOMVS myInformation\n           if myInformation = \"INFORMATION\" then\n             do\n               j = i -2\n               myGroupName = subword(myLG.j,4,1)\n               j = i +2\n               myGID = subword(myLG.j,2,1)\n               queue copies(\" \",19),\n                 left(myGroupName,8),\n                 myGID\n             end /* of if */\n         end /* of do i */\n         rc = outtrap(\"myLU.\")\n         \"lu * omvs noracf\"\n         rc = outtrap(\"OFF\")\n         queue left(\"UserID\",8),\n           left(\"UID\",10),\n           left(\"DfltGrp\",8),\n           left(\"GID\",10),\n           left(\"Home\",20),\n           left(\"Program\",20)\n         queue \"----+----1----+----2----+----3----+----4----+----5\",\n           \"----+----6----+----7\"\n         do i = 1 to myLU.0\n           parse var myLU.i myRowID \"=\" myRowValue\n           select\n             when myRowID = \"USER\" then\n               do\n                 myUserID = myRowValue\n                 j = i\n/* Bl\u00a6der do-loop weil: a) die Anzahl Lines je OMVS-Information ist  */\n/* variabel und b) der do-loop nach dem letzten User mit OMVS-       */\n/* Information verlassen werden soll(ist geschickter ;>).            */\n                 do (myLU.0 - i)\n                   j = j +1\n                   parse var myLU.j myRowID \"=\" myRowValue\n                   myRowValue = strip(myRowValue)\n                   select\n                     when myRowID = \"UID\" then\n                       myUID = myRowValue\n                     when myRowID = \"HOME\" then\n                       myHomePath = myRowValue\n                     when myRowID = \"PROGRAM\" then\n                       myProgramPath = myRowValue\n                     when myRowID = \"USER\" then\n                       leave\n                     otherwise ;\n                   end /* of select */\n                 end /* of do */\n                 rc = outtrap(\"myLUSpecific.\")\n                 \"lu \"myUserID\n                 rc = outtrap(\"OFF\")\n                 myDefaultGroup = strip(substr(myLUSpecific.2,16,8))\n                 rc = outtrap(\"myLG.\")\n                 \"lg \"myDefaultGroup\" omvs noracf\"\n                 rc = outtrap(\"OFF\")\n                 if myLG.3 = \"OMVS INFORMATION\" then\n                   myGID = substr(myLG.5,6,10)\n                 else\n                   myGID = left(\"-\",10)\n                 queue left(myUserID,8),\n                   myUID,\n                   left(myDefaultGroup,8),\n                   myGID,\n                   left(myHomePath,20),\n                   left(myProgramPath,20)\n               end /* of when */\n             otherwise ;\n           end /* of select */\n         end /* of do i */\n         queue \"\"\n         myFi = \"F\"||time(s)\n         \"alloc f(\"myFi\") recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete tracks space(15,15) reuse dsorg(PS) \"\n         queue \"\"\n         \"execio * diskW \"myFi\"(fini\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(\"myFi\")\"\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(\"myFi\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWDP": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x992\\x9f\\x00\\x992\\x9f\\x15\\x03\\x00\\xbc\\x00\\xba\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-11-25T00:00:00", "modifydate": "1999-11-25T15:03:00", "lines": 188, "newlines": 186, "modlines": 0, "user": "BERNING"}, "text": "         /*Copyright 11 Oct 1999 by JBG REXX ShowDP                  */\n         /*----------------------------------------------------------*/\n         /* Syntax: ShowDP                                           */\n         /*----------------------------------------------------------*/\n         /* JBG  11.10.1999 BERNING Works under OS/390 1.3, ISPF 4.4,*/\n         /* JBG  11.10.1999 BERNING JES2 1.3 & SDSF 1.6.             */\n         /* JBG  12.10.1999 BERNING If SDSF is under RACF-Security   */\n         /* JBG  12.10.1999 BERNING Read-Access is required for      */\n         /* JBG  12.10.1999 BERNING GROUP.<Your Group>.*             */\n         /* JBG  12.10.1999 BERNING Use the SDSF-Who-Command to get  */\n         /* JBG  12.10.1999 BERNING <GRPNAME=<Your Group>>           */\n         /* JBG  12.10.1999 BERNING joerg.berning(at)gmx.net or      */\n         /* JBG  12.10.1999 BERNING joerg_berning(at)de.sonymusic.com*/\n         /*----------------------------------------------------------*/\n         trace off\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING Alter input if necessary         */\n         /*----------------------------------------------------------*/\n         myIPSInputDataset = \"SYS1.PARMLIB(IEAIPS00)\"\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING Get a list of all AddressSpaces  */\n         /*----------------------------------------------------------*/\n         \"alloc f(isfout) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"alloc f(isfin) recfm(f b) lrecl(80) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"dropbuf\"\n         queue \"PRE *\"\n         queue \"DA\"\n         queue \"SORT PGN A JOBNAME A\"\n         queue \"++ALL\"\n         queue \"\"\n         \"execio * diskW isfin(fini\"\n         address linkmvs \"SDSF\"\n         if rc <> 0 then\n           do\n             \"execio * diskR isfout(fini\"\n             do queued()\n               parse pull line\n               say line\n             end /* of do queued */\n             \"free f(isfout isfin)\"\n             exit 12\n           end /* of if */\n         \"execio * diskR isfout(fini stem myTemp.\"\n         \"free f(isfout isfin)\"\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING We're only interested in the     */\n         /* JBG  12.10.1999 BERNING sorted AddressSpaces at the end  */\n         /* JBG  12.10.1999 BERNING of the SDSF-Output starting with */\n         /* JBG  12.10.1999 BERNING *MASTER*.                        */\n         /*----------------------------------------------------------*/\n         do i = myTemp.0 to 1 by -1\n           if myTemp.i <> \"\" then\n             if pos(\"*MASTER*\",myTemp.i) <> 0 then\n               leave\n         end /* of do i */\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING Getting rid of headers...        */\n         /*----------------------------------------------------------*/\n         mySDSFWantedCounter = 0\n         do j = i to myTemp.0\n           mySubword = subword(myTemp.j,1,1)\n           if mySubword <> \"COMMAND\" & mySubword <> \"1\" &,\n               mySubword <> \"NP\" & mySubword <> copies(\"00\"x,122) then\n             do\n               mySDSFWantedCounter = mySDSFWantedCounter +1\n               mySDSFWanted.mySDSFWantedCounter = myTemp.j\n             end /* of do */\n         end /* of do i */\n         \"alloc f(in) da('\"myIPSInputDataset\"') shr reuse\"\n         \"execio * diskR in(fini stem myIPS.\"\n         \"free f(in)\"\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING Get dispatching algorithm and    */\n         /* JBG  12.10.1999 BERNING priority of all initiators and   */\n         /* JBG  12.10.1999 BERNING all other privileged jobs as     */\n         /* JBG  12.10.1999 BERNING specified in the program         */\n         /* JBG  12.10.1999 BERNING properties table and associated  */\n         /* JBG  12.10.1999 BERNING with performance group 0         */\n         /*----------------------------------------------------------*/\n         do i = 1 to myIPS.0\n           parse var myIPS.i myPVLDP \"=\" myPrivDP dummy\n           if myPVLDP = \"PVLDP\" then\n             leave\n         end /* of do i */\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING Assigning for each currently     */\n         /* JBG  12.10.1999 BERNING active address space a           */\n         /* JBG  12.10.1999 BERNING dispatching priority.            */\n         /*----------------------------------------------------------*/\n         \"dropbuf\"\n         mySDSFWanted.0 = mySDSFWantedCounter\n         do i = 1 to mySDSFWanted.0\n           parse value mySDSFWanted.i with  8 myJobName,\n                                           16 dummy,\n                                           63 myActPgn,\n                                           65 dummy,\n                                          129 myActDmn,\n                                          130 dummy\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING The master scheduler's address   */\n         /* JBG  12.10.1999 BERNING is always assigned the highest   */\n         /* JBG  12.10.1999 BERNING priority (x'FF') regardless of   */\n         /* JBG  12.10.1999 BERNING the PVLDP value. Instead of FF   */\n         /* JBG  12.10.1999 BERNING F99 is used because of sorting   */\n         /* JBG  12.10.1999 BERNING *MASTER* to the top of the list. */\n         /*----------------------------------------------------------*/\n           if myActPgn = 0 then\n             do\n               if myJobname = \"*MASTER*\" then\n                 myIPSDP = \"F99\"\n               else\n                 myIPSDP = myPrivDp\n               queue \" \"myJobName,\n                 left(myActPgn,7),\n                 left(myIPSDP,6),\n                 left(\"--(0)PvlDp\",10),\n                 myActDmn\n               iterate\n             end /* of do */\n           do j = 1 to myIPS.0\n             parse var myIPS.j myIPSPgnString \"=\" myIPSPgn,\n               \",(DMN=\" myIPSDmn \",DP=\" myIPSDP \")\" dummy\n             if myIPSPgnString = \"PGN\" &,\n                 myIPSPgn = myActPgn then\n               queue \" \"myJobName,\n                 left(myActPgn,7),\n                 left(myIPSDP,6),\n                 left(myIPSDmn,10),\n                 myActDmn\n           end /* of do j */\n         end /* of do i */\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING Dispatching priorities in        */\n         /* JBG  12.10.1999 BERNING descending order...              */\n         /*----------------------------------------------------------*/\n         queue \"\"\n         \"alloc f(sortin) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"execio * diskW sortin(fini\"\n         \"alloc f(sortout) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"alloc f(sysin) recfm(f b) lrecl(80) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"alloc f(sysout) recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS)\"\n         \"dropbuf\"\n         queue \" SORT FIELDS=(24,2,CH,D)\"\n         queue \"\"\n         \"execio * diskW sysin(fini\"\n         address linkmvs \"SORT\"\n         if rc <> 0 then\n           do\n             \"execio * diskR sysout(fini\"\n             do queued()\n               parse pull line\n               say line\n             end /* of do queued */\n             \"free f(sysout sysin sortin sortout)\"\n             exit 12\n           end /* of if */\n         \"free f(sortin sysin sysout)\"\n         /*----------------------------------------------------------*/\n         /* JBG  12.10.1999 BERNING Header & display                 */\n         /*----------------------------------------------------------*/\n         \"dropbuf\"\n         myDate = date(\"S\")\n         parse value myDate with myYY 5 myMM 7 myDD\n         myDate = myDD\".\"myMM\".\"myYY\n         queue \" Jobname \",\n           left(\"Act_PGN\",7),\n           left(\"IPS_DP\",6),\n           \"IPS_Domain\",\n           \"Act_Domain(\"myDate\",\" time()\")\"\n         \"execio * diskR sortout(fini\"\n         \"free f(sortout)\"\n         myFi = \"F\"||time(s)\n         \"alloc f(\"myFi\") recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         queue \"\"\n         \"execio * diskW \"myFi\"(fini\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(\"myFi\")\"\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(\"myFi\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMPEWARN": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x992\\x9f\\x00\\x992\\x9f\\x15(\\x00e\\x00`\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-11-25T00:00:00", "modifydate": "1999-11-25T15:28:00", "lines": 101, "newlines": 96, "modlines": 0, "user": "BERNING"}, "text": "         /*Copyright 28 Oct 1999 by JBG REXX SMPEWarn                */\n         /*----------------------------------------------------------*/\n         /* Syntax: SMPEWarn                                         */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         myVolume = \"TART01\"\n         \"alloc da('JBG.\"myVolume\".DATASETS.CATALOG') f(in) shr\"\n         \"execio * diskr in(fini stem myLine.\"\n         \"free f(in)\"\n         \"dropbuf\"\n         queue left(\"Datasetname\",44),\n           right(\"RC\",2),\n           right(\"SR\",2),\n           myVolume,\n           left(\"DSO\",3),\n           left(\"RecFM\",6),\n           right(\"LRecl\",5),\n           right(\"BlkSiz\",6),\n           right(\"Alloc\",5),\n           right(\"Used\",5),\n           right(\"Free\",5),\n           right(\"PrimE\",5),\n           right(\"SecoE\",5),\n           left(\"Units\",8),\n           right(\"Ext\",3),\n           right(\"AlDi\",4),\n           right(\"UsDi\",4),\n           right(\"FrDi\",4),\n           right(\"Membe\",5)\n         do i = 1 to myLine.0\n           myDSN = subword(myLine.i,1,1)\n           rc = listdsi(\"'\"myDSN\"' volume(\"myVolume\") directory\")\n           select\n             when sysunits = \"CYLINDER\" then\n               do\n                 mySysAlloc = sysalloc * 15\n                 mySysUsed = sysused * 15\n                 mySysPrimary = sysprimary * 15\n                 mySysSeconds = sysseconds * 15\n               end /* of when */\n             when sysunits = \"BLOCK\" then\n               do\n                 mySysAlloc = sysalloc / sysblkstrk\n                 mySysUsed = sysused / sysblkstrk\n                 mySysPrimary = sysprimary / sysblkstrk\n                 mySysSeconds = sysseconds / sysblkstrk\n               end /* of when */\n             when sysunits = \"TRACK\" then\n               do\n                 mySysAlloc = sysalloc\n                 mySysUsed = sysused\n                 mySysPrimary = sysprimary\n                 mySysSeconds = sysseconds\n               end /* of when */\n             otherwise\n               do\n                 mySysAlloc = sysalloc\n                 mySysUsed = sysused\n                 mySysPrimary = sysprimary\n                 mySysSeconds = sysseconds\n               end /* of when */\n           end /* of select */\n           mySysFree = mySysAlloc - mySysUsed\n           if sysdsorg = \"PO\" | sysdsorg = \"POU\" then\n             mySysFreeDirBlk = sysadirblk - sysudirblk\n           else\n             mySysFreeDirBlk = \"-\"\n           queue left(myDSN,44),\n             right(rc,2),\n             right(sysreason,2),\n             myVolume,\n             left(sysdsorg,3),\n             left(sysrecfm,6),\n             right(syslrecl,5),\n             right(sysblksize,6),\n             right(mySysAlloc,5),\n             right(mySysUsed,5),\n             right(mySysFree,5),\n             right(mySysPrimary,5),\n             right(mySysSeconds,5),\n             left(sysunits,8),\n             right(sysextents,3),\n             right(sysadirblk,4),\n             right(sysudirblk,4),\n             right(mySysFreeDirBlk,4),\n             right(sysmembers,5)\n         end /* of do i */\n         queue \"\"\n         myFi = \"F\"||time(s)\n         \"alloc f(\"myFi\") recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete cylinders space(1,1) reuse dsorg(PS) \"\n         queue \"\"\n         \"execio * diskW \"myFi\"(fini\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(\"myFi\")\"\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(\"myFi\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TBDISP": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x992\\x9f\\x00\\x992\\x9f\\x15&\\x00b\\x00\\\\\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-11-25T00:00:00", "modifydate": "1999-11-25T15:26:00", "lines": 98, "newlines": 92, "modlines": 0, "user": "BERNING"}, "text": "         /*Copyright 10 Mar 1998 by UIS441 REXX TBDISP               */\n         /*----------------------------------------------------------*/\n         /* Syntax: TBDisp <datasetname(member)>                     */\n         /*----------------------------------------------------------*/\n         /* May take some time.                                      */\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         arg myDSNwithMember\n         myDSNwithMember = strip(myDSNwithMember,\"B\",\"'\")\n         myDSNwithMember = translate(myDSNwithMember,,\"()\")\n         myTableDSN = subword(myDSNwithMember,1,1)\n         myDSNMember = subword(myDSNwithMember,2,1)\n         address ispexec\n         \"control errors return\"\n         \"LIBDEF IN DATASET ID('\"myTableDSN\"')\"\n         \"TBCLOSE \"myDSNMember\n/*       say \"TBCloseRC:\"rc                                          */\n         \"TBOPEN \"myDSNMember\" LIBRARY(IN) NOWRITE\"\n         \"TBQUERY \"myDSNMember\" KEYS(MYKEYS)\",\n                      \"NAMES(MYNAMES)\",\n                      \"ROWNUM(MYROWNUM)\",\n                      \"KEYNUM(MYKEYNUM)\",\n                      \"NAMENUM(MYNAMENU)\",\n                      \"POSITION(MYPOS)\"\n/*       say \"myKeys:\"myKeys                                         */\n/*       say \"myNames:\"myNames                                       */\n/*       say \"myRowNum:\"myRowNum                                     */\n/*       say \"myKeyNum:\"myKeyNum                                     */\n/*       say \"myNameNu\"myNameNu                                      */\n/*       say \"myPos:\"myPos                                           */\n         myColumnNames = substr(myNames,2,length(myNames) -2) /*() weg */\n         \"TBTOP \"myDSNMember\n         do j = 1 to words(myColumnNames)      /* max. Spaltenbreite */\n           do i = 1 to myRowNum\n             \"TBSKIP \"myDSNMember\n             myVar = word(myColumnNames,j)            /* feststellen */\n             myVarValue = value(myVar)\n             myVarLength = length(myVarValue)\n                                        /* kein Wert zum Vergleichen */\n             if i = 1 then\n               myMaxLength.j = myVarLength\n             else\n               myMaxLength.j = max(myVarLength, myMaxLength.j)\n           end /* of do i */\n/*         say myVar \"max:\"myMaxLength.j                             */\n         end /* of do j */\n         myHeadline = \"\"\n         do j = 1 to words(myColumnNames)                /* Headline */\n           myVar = word(myColumnNames,j)\n           if length(myVar) <= myMaxLength.j then\n             myColumnLength = myMaxLength.j\n           else\n             myColumnLength = length(myVar)\n           myHeadline = myHeadline left(myVar,myColumnLength)\n         end /* of do j */\n         \"TBTOP \"myDSNMember\n         do i = 1 to myRowNum\n           \"TBSKIP \"myDSNMember\n           myRow.i = \"\"\n           do j = 1 to words(myColumnNames)\n             myVar = word(myColumnNames,j)\n             if length(myVar) <= myMaxLength.j then\n               myColumnLength = myMaxLength.j\n             else\n               myColumnLength = length(myVar)\n             myRow.i = myRow.i left(value(myVar),myColumnLength)\n           end /* of do j */\n         end /* of do i */\n         \"TBCLOSE \"myDSNMember\n         queue myHeadline\n         address tso\n         if sysvar(\"SYSENV\") = \"BACK\" then\n           do\n             \"alloc f(sysprint) lrecl(1024) sysout(x) reuse\"\n             do i = 1 to myRowNum\n               queue myRow.i\n             end\n             \"execio * diskW sysprint(fini\"\n             \"free f(sysprint)\"\n           end /* of do */\n         else\n           do\n             do i = 1 to myRowNum\n               queue myRow.i\n             end\n             myFi = \"F\"||time(s)\n             \"alloc f(\"myFi\") recfm(v b) lrecl(32754) new unit(vio)\",\n               \"delete cylinders space(1,1) reuse dsorg(PS) \"\n             queue \"\"\n             \"execio * diskW \"myFi\"(fini\"\n             address ispexec\n             \"LMINIT DATAID(MYDATAID) DDNAME(\"myFi\")\"\n             \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n             \"LMFREE DATAID(\"myDataID\")\"\n             address tso\n             \"free f(\"myFi\")\"\n           end /* of do */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TRACKS": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x01\\x02\\x08O\\x01\\x02\\x08O\\x13\\x13\\x00\\xac\\x00\\xac\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-25T00:00:00", "modifydate": "2002-03-25T13:13:22", "lines": 172, "newlines": 172, "modlines": 0, "user": "BERNING"}, "text": "         /*Copyright 21 Mar 2002 by JBG REXX Tracks                  */\n         /*----------------------------------------------------------*/\n         /* JBG 25.03.2002 BERNING Use myUseLMDListForeverLoop for   */\n         /* JBG 25.03.2002 BERNING extensive LMDList-Calls ;)        */\n         /* JBG 25.03.2002 BERNING Better switch it off by specifying*/\n         /* JBG 25.03.2002 BERNING myUseLMDListForeverLoop = 0       */\n         /*----------------------------------------------------------*/\n         /* JBG 25.03.2002 BERNING Some stats:                       */\n         /* JBG 25.03.2002 BERNING IBM7060-H30, OS/390 2.9           */\n         /* JBG 25.03.2002 BERNING 5621 lines under the HLQ \"ADA\",   */\n         /* JBG 25.03.2002 BERNING 4829 lines contain Datasets which */\n         /* JBG 25.03.2002 BERNING return space information:         */\n         /* JBG 25.03.2002 BERNING                                   */\n         /* JBG 25.03.2002 BERNING myUseLMDListForeverLoop = 0:      */\n         /* JBG 25.03.2002 BERNING CPUTime used:35.55                */\n         /* JBG 25.03.2002 BERNING Service Units:10204045            */\n         /* JBG 25.03.2002 BERNING                                   */\n         /* JBG 25.03.2002 BERNING myUseLMDListForeverLoop = 1:      */\n         /* JBG 25.03.2002 BERNING CPUTime used:155.57               */\n         /* JBG 25.03.2002 BERNING Service Units:44563811            */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         myStartSysCPU = sysvar(\"SYSCPU\")\n         myStartSysSRV = sysvar(\"SYSSRV\")\n         myUseLMDListForeverLoop = 0\n         myTCB = c2x(storage(21C,4))        /* fixed by architecture */\n         myTCBOTC = c2x(storage(d2x(x2d(myTCB) + x2d(84)),4))\n         myTCBFSA = c2x(storage(d2x(x2d(myTCBOTC) + x2d(70)),4))\n         myISPTASK#R1 = c2x(storage(d2x(x2d(myTCBFSA) + x2d(18)),4))\n         myTLD = c2x(storage(myISPTASK#R1,4))\n         myTLDTLSP = c2x(storage(d2x(x2d(myTLD) + x2d(60)),4)) /* Screen */\n         myTLDCLSWD = c2d(storage(d2x(x2d(myTLD) + x2d(C0)),4)) /* width */\n         myTLDHigth = c2d(storage(d2x(x2d(myTLD) + x2d(C4)),4)) /* higth */\n         myScreenSize = myTLDCLSWD * myTLDHigth\n         myScreenAsString = storage(myTLDTLSP,myScreenSize)\n         mySearchForString = \"DSLIST - Data Sets Matching\"\n         mySearchForStringLength = length(mySearchForString)\n         mySearchForPos = pos(mySearchForString,myScreenAsString)\n         if mySearchForPos = 0 then\n           do\n             mySearchForString = \"DSLIST - Data Sets on volume\"\n             mySearchForStringLength = length(mySearchForString)\n             mySearchForPos = pos(mySearchForString,myScreenAsString)\n             if mySearchForPos = 0 then\n               do\n                 zErrSM = \"No DSLIST-String found|\"\n                 zErrLM = \"Neither '\"mySearchForString\"'\",\n                   \"nor 'DSLIST - Data Sets Matching' found on screen.\"\n                 zErrAlrm = \"YES\"\n                 zErrHM = \"ISR2MACR\"\n                 address ispexec\n                 \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n                 \"SETMSG MSG(ISRZ002)\"\n                 exit 12\n               end /* of if */\n             else\n               call myAddTracksFromDataSetsOnVolume\n           end /* of if */\n         else\n           call myAddTracksFromDataSetsMatching\n         exit\n\n         myAddTracksFromDataSetsMatching:\n           myDSNPos = mySearchForPos + mySearchForStringLength +1\n           myRowPos = pos(\"Row\",myScreenAsString,mySearchForPos) -1\n           myMaxDSNLength = myRowPos - myDSNPos\n           myLevel = strip(substr(myScreenAsString,myDSNPos,,\n             myMaxDSNLength))\n           address ispexec\n           \"lmdinit listid(myListID) level(\"myLevel\")\"\n           if RC <> 0 then\n             do\n               say \"LMDInit-RC:\"rc\n               exit\n             end\n           call myAddAllTracks\n           \"lmdfree listid(\"myListID\")\"\n           myEndSysCPU = sysvar(\"SYSCPU\")\n           myEndSysSRV = sysvar(\"SYSSRV\")\n           myUsedSysCPU = myEndSysCPU - myStartSysCPU\n           myUsedSysSRV = myEndSysSRV - myStartSysSRV\n           zErrSM = my#OfTracks \"Tracks\"\n           zErrLM = my#OfTracks \"Tracks(=\"my#OfCyls\":\"||,\n             my#OfTracksRemainder,\n             \"Cyls) under\",\n             myLevel\" for \"myRowCount,\n             \"lines.\" mySpaceReturnedCount \"lines contain\",\n             \"Datasets which return space information.\",\n             \"CPUTime used:\"myUsedSysCPU\", Service Units:\"myUsedSysSRV\n           zErrAlrm = \"YES\"\n           zErrHM = \"ISR2MACR\"\n           \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n           \"SETMSG MSG(ISRZ002)\"\n         return\n\n         myAddTracksFromDataSetsOnVolume:\n           myDSNPos = mySearchForPos + mySearchForStringLength +1\n           myRowPos = pos(\"Row\",myScreenAsString,mySearchForPos) -1\n           myMaxDSNLength = myRowPos - myDSNPos\n           myVolume = strip(substr(myScreenAsString,myDSNPos,,\n             myMaxDSNLength))\n           address ispexec\n           \"lmdinit listid(myListID) volume(\"myVolume\")\"\n           if RC <> 0 then\n             do\n               say \"LMDInit-RC:\"rc\n               exit rc\n             end\n           call myAddAllTracks\n           \"lmdfree listid(\"myListID\")\"\n           myEndSysCPU = sysvar(\"SYSCPU\")\n           myEndSysSRV = sysvar(\"SYSSRV\")\n           myUsedSysCPU = myEndSysCPU - myStartSysCPU\n           myUsedSysSRV = myEndSysSRV - myStartSysSRV\n           zErrSM = my#OfTracks \"Tracks on\" myVolume\n           zErrLM = my#OfTracks \"Tracks(=\"my#OfCyls\":\"||,\n             my#OfTracksRemainder,\n             \"Cyls) on\",\n             \"Volume \"myVolume\" for \"myRowCount,\n             \"lines.\" mySpaceReturnedCount \"lines contain\",\n             \"Datasets which return space information.\",\n             \"CPUTime used:\"myUsedSysCPU\", Service Units:\"myUsedSysSRV\n           zErrAlrm = \"YES\"\n           zErrHM = \"ISR2MACR\"\n           \"VPUT (ZERRSM ZERRLM ZERRALRM ZERRHM)\"\n           \"SETMSG MSG(ISRZ002)\"\n         return\n\n         myAddAllTracks:\n           my#OfTracks = 0\n           myRowCount = 0\n           mySpaceReturnedCount = 0\n           myCurrDS = \"\"\n           if myUseLMDListForeverLoop then              /* very slow */\n             do forever\n               \"lmdlist listid(\"myListID\") dataset(myCurrDS) stats(yes)\"\n               if rc = 8 then\n                 leave                              /* 8=end of list */\n               if zDLSize <> \"\" then\n                 do\n                   my#OfTracks = my#OfTracks +zDLSize\n                   mySpaceReturnedCount = mySpaceReturnedCount +1\n                 end /* of if */\n               myRowCount = myRowCount +1\n             end /* of do forever */\n           else                                            /* faster */\n             do\n               \"lmdlist listid(\"myListID\") option(save) stats(yes)\",\n               \"group(TRACKS)\"\n               address tso\n               \"dropbuf\"\n               \"alloc f(in) da('\"userid()\".TRACKS.DATASETS')\",\n                 \"shr reuse\"\n               \"execio * diskr in(fini\"\n               \"free f(in)\"\n               address ispexec\n               do queued()\n                 pull line\n                 parse value line with 1 dummy 76 myDSTracks 82 dummy\n                 if myDSTracks <> \"\" then\n                   do\n                     my#OfTracks = my#OfTracks +myDSTracks\n                     mySpaceReturnedCount = mySpaceReturnedCount +1\n                   end /* of if */\n                 myRowCount = myRowCount +1\n               end /* of do queued() */\n             end /* of else */\n           my#OfCyls = my#OfTracks %15\n           my#OfTracksRemainder = my#OfTracks //15\n         return\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VGET": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x02\\x08O\\x01\\x02\\x08O\\x13\\x14\\x00!\\x00!\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-25T00:00:00", "modifydate": "2002-03-25T13:14:18", "lines": 33, "newlines": 33, "modlines": 0, "user": "BERNING"}, "text": "         /* REXX VGET Exec by UIS0070                                */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         \"clear\"\n         \"alloc da('JBG.ISPF.EXEC(VGETTAB)') f(in) shr\"\n         \"execio * diskr in(fini stem myLine.\"\n         \"free f(in)\"\n         \"dropbuf\"\n         queue \"Vars to check:\"myLine.0\n         address ispexec\n         do i = 1 to myLine.0\n           mySubword1 = subword(myLine.i,1,1)\n           \"VGET (\"mySubword1\") SHARED\"\n           if rc = 0 then\n             queue \"shared \" left(mySubword1,8)\":\"value(mySubword1)\n           \"VGET (\"mySubword1\") PROFILE\"\n           if rc = 0 then\n             queue \"profile \"left(mySubword1,8)\":\"value(mySubword1)\n         end\n         address tso\n         myFi = \"F\"||time(\"S\")\n         \"alloc f(\"myFi\") recfm(v b) lrecl(255) new unit(vio)\",\n           \"delete tracks space(15,15) reuse dsorg(ps) \"\n         queue \"\"\n         \"execio * diskW \"myFi\"(fini\"\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DDNAME(\"myFi\")\"\n         \"EDIT DATAID(\"myDataID\") MACRO(MACRORES)\"\n         \"LMFREE DATAID(\"myDataID\")\"\n         address tso\n         \"free f(\"myFi\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VGETTAB": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x000\\x01\\x02\\x08O\\x01\\x02\\x08O\\x13\\x14\\x10\\xbd\\x10\\xbd\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-25T00:00:00", "modifydate": "2002-03-25T13:14:30", "lines": 4285, "newlines": 4285, "modlines": 0, "user": "BERNING"}, "text": "AC\nACMSG\nACTBAR\nACTBARV\nADARC\nADEST\nAL#VOLS\nALAVR\nALBLK\nALDC\nALDIR\nALDSNT\nALLO\nALLREC\nALMC\nALMLVL\nALMV\nALRF\nALSC\nALSPAC\nALSPC\nALTEMP\nALTSEL\nALTTR\nALTTRL\nALUNIT\nALVLNUM\nALVOL\nAL1EX\nAL2EX\nAMN\nAMT\nAPO\nAPPLID\nAPPTTL\nASMOPT\nASP\nASPECT\nASSL\nASSLS\nAUTOMSG\nAUTOSEL\nB\nBATCH\nBBLNK\nBBLNK2\nBCBVE\nBCFNAM\nBCLIB1\nBCLIB2\nBCLIB3\nBCLIB4\nBCMIX\nBCODSN\nBCPRJ1\nBCPSWD\nBCTYP1\nBCVOL\nBCWSFN\nBLANK\nBLIST\nBLKSZ\nBLUE\nBMSG\nBPACK\nBPK\nBPKED\nBPKEDV\nBROCUR\nBROPT\nBROWAMN\nBTEMP\nC\nCALGCHD\nCALGCHT\nCALGCSB\nCALGCTD\nCALGCWD\nCALGCWE\nCALJUL\nCALNPTL\nCALSTRT\nCALTIME\nCANKEY\nCC\nCD\nCEMEM\nCF\nCFMCNCL\nCHAR\nCHARCNL\nCHAREUR\nCHARLM\nCHC\nCINFO\nCK\nCLA\nCLEAN\nCM\nCMD\nCMLJUST\nCMPDSN\nCNFMEM\nCNFNAME\nCNVACCL\nCNVBWSE\nCNVCBK\nCNVCDB\nCNVCLP\nCNVCLR\nCNVCPQ\nCNVCSLF\nCNVCSQ\nCNVCSR\nCNVC327\nCNVDAB\nCNVDABF\nCNVDAD\nCNVDCBL\nCNVDCL\nCNVDCLF\nCNVDCLR\nCNVDDC\nCNVDDCF\nCNVDDW\nCNVDELM\nCNVDENK\nCNVDEP\nCNVDEPF\nCNVDJL\nCNVDJLF\nCNVDLBL\nCNVDLD\nCNVDLDF\nCNVDLLR\nCNVDLOD\nCNVDLP\nCNVDLPF\nCNVDLRB\nCNVDOBL\nCNVDOD\nCNVDODF\nCNVDOLR\nCNVDPDO\nCNVDPD1\nCNVDPD2\nCNVDPD3\nCNVDPS\nCNVDPSF\nCNVDRT\nCNVDRTF\nCNVDSM\nCNVDSMF\nCNVDSP\nCNVDSPF\nCNVDSRC\nCNVDSS\nCNVDSSF\nCNVDUK\nCNVDUKF\nCNVDVNF\nCNVDWBL\nCNVDWLR\nCNVDWNI\nCNVEABY\nCNVEAEH\nCNVEAL\nCNVEAN\nCNVEAP\nCNVEAS\nCNVECP\nCNVECRA\nCNVEDMP\nCNVEEAC\nCNVEEHL\nCNVEHC\nCNVEHD\nCNVEHF\nCNVEHI\nCNVEHIY\nCNVEHL\nCNVEHP\nCNVEHX\nCNVEIMF\nCNVEMCS\nCNVEMEC\nCNVEMEP\nCNVEMES\nCNVENC\nCNVENM\nCNVENS\nCNVENT\nCNVENU\nCNVEPK\nCNVEPKF\nCNVEPR\nCNVERBK\nCNVERC\nCNVERCF\nCNVERPQ\nCNVERSQ\nCNVERW\nCNVERWF\nCNVEST\nCNVESTF\nCNVESU\nCNVESUF\nCNVESWL\nCNVEURF\nCNVEURO\nCNVEUSS\nCNVEWOT\nCNVFAMP\nCNVFMID\nCNVFRMC\nCNVFRMI\nCNVGBKC\nCNVGCLW\nCNVGCL1\nCNVGCL2\nCNVGCL3\nCNVGCL4\nCNVGCL5\nCNVGCL6\nCNVGCL7\nCNVGHCL\nCNVGNTW\nCNVGPCL\nCNVGSWT\nCNVGWDF\nCNVHCPF\nCNVHGD1\nCNVHGD2\nCNVHGD3\nCNVHGD4\nCNVHGD5\nCNVHGD6\nCNVHGD7\nCNVHSTF\nCNVKWD\nCNVKWDM\nCNVKWD2\nCNVKWM2\nCNVLDSN\nCNVLGDP\nCNVLGKP\nCNVLGLN\nCNVLGMD\nCNVLGSF\nCNVLG1P\nCNVLG2P\nCNVLOAD\nCNVLP2F\nCNVLSDP\nCNVLSKP\nCNVLSLL\nCNVLSLN\nCNVLSSF\nCNVLS1P\nCNVLS2F\nCNVLS2P\nCNVLTYP\nCNVMBK\nCNVMDB\nCNVMEM\nCNVMEM2\nCNVMGID\nCNVMINL\nCNVMLP\nCNVMLR\nCNVMPQ\nCNVMPTH\nCNVMSQ\nCNVOBJ\nCNVOBK\nCNVOLR\nCNVOPQ\nCNVOPT\nCNVOSQ\nCNVPAAU\nCNVPABU\nCNVPADC\nCNVPBRS\nCNVPCOC\nCNVPDMD\nCNVPDML\nCNVPIVS\nCNVPLMF\nCNVPMEM\nCNVPMIR\nCNVPNID\nCNVPOSC\nCNVPPUI\nCNVPRFX\nCNVPUAP\nCNVPUN\nCNVPUSP\nCNVPVED\nCNVPVMG\nCNVPVWS\nCNVPWRG\nCNVPWUI\nCNVQALC\nCNVQALF\nCNVQALH\nCNVQALI\nCNVQAMC\nCNVQAMF\nCNVQAMH\nCNVQAMI\nCNVQASC\nCNVQASF\nCNVQASH\nCNVQASI\nCNVQAUC\nCNVQAUF\nCNVQAUH\nCNVQAUI\nCNVQCEC\nCNVQCEF\nCNVQCEH\nCNVQCEI\nCNVQCHC\nCNVQCHF\nCNVQCHH\nCNVQCHI\nCNVQCSO\nCNVQCTC\nCNVQCTF\nCNVQCTH\nCNVQCTI\nCNVQDTC\nCNVQDTF\nCNVQDTH\nCNVQDTI\nCNVQEEC\nCNVQEEF\nCNVQEEH\nCNVQEEI\nCNVQEIX\nCNVQETC\nCNVQETF\nCNVQETH\nCNVQETI\nCNVQFKC\nCNVQFKF\nCNVQFKH\nCNVQFKI\nCNVQFPC\nCNVQFPF\nCNVQFPH\nCNVQFPI\nCNVQIMC\nCNVQIMF\nCNVQIMH\nCNVQIMI\nCNVQLDC\nCNVQLDF\nCNVQLDH\nCNVQLDI\nCNVQLEC\nCNVQLEF\nCNVQLEH\nCNVQLEI\nCNVQLIC\nCNVQLIF\nCNVQLIH\nCNVQLII\nCNVQNEC\nCNVQNEF\nCNVQNEH\nCNVQNEI\nCNVQNSS\nCNVQNTC\nCNVQNTF\nCNVQNTH\nCNVQNTI\nCNVQPAC\nCNVQPAF\nCNVQPAH\nCNVQPAI\nCNVQPIC\nCNVQPIF\nCNVQPIH\nCNVQPII\nCNVQPSC\nCNVQPSF\nCNVQPSH\nCNVQPSI\nCNVQPTC\nCNVQPTF\nCNVQPTH\nCNVQPTI\nCNVQPUC\nCNVQPUF\nCNVQPUH\nCNVQPUI\nCNVQRFT\nCNVQRPC\nCNVQRPF\nCNVQRPH\nCNVQRPI\nCNVQRSS\nCNVQSAC\nCNVQSAF\nCNVQSAH\nCNVQSAI\nCNVQSCT\nCNVQSIC\nCNVQSIF\nCNVQSIH\nCNVQSII\nCNVQSPV\nCNVQSUC\nCNVQSUF\nCNVQSUH\nCNVQSUI\nCNVQUCT\nCNVQUOE\nCNVQVOC\nCNVQVOF\nCNVQVOH\nCNVQVOI\nCNVQWMC\nCNVQWMF\nCNVQWMH\nCNVQWMI\nCNVQWSC\nCNVQWSF\nCNVQWSH\nCNVQWSI\nCNVQWTC\nCNVQWTF\nCNVQWTH\nCNVQWTI\nCNVQY2R\nCNVRATI\nCNVRCFM\nCNVRECL\nCNVSCID\nCNVSLDS\nCNVSLOD\nCNVSMID\nCNVSMPE\nCNVSPDS\nCNVSRCE\nCNVSRCM\nCNVSSDS\nCNVSSRC\nCNVSUDS\nCNVSUP1\nCNVSUP2\nCNVSUP3\nCNVSUP4\nCNVSVVL\nCNVTDDF\nCNVTPUT\nCNVTRAC\nCNVUMCA\nCNVVASM\nCNVVBE\nCNVVBL\nCNVVEE\nCNVVEL\nCNVVVE\nCNVVVL\nCNVWARN\nCNVWCRE\nCNVWDLM\nCNVWDLO\nCNVWDLP\nCNVWDSF\nCNVWMXW\nCNVXACT\nCNVXCMC\nCNVXCMP\nCNVXDLL\nCNVXDNC\nCNVXDSA\nCNVXDSF\nCNVXMLC\nCNVXMLF\nCNVXMLP\nCNVXPUC\nCNVXPUP\nCNVXTRA\nCNVZFKA\nCNVZFMT\nCNVZKYS\nCNXACCL\nCNXBWSE\nCNXCSLF\nCNXC327\nCNXDENK\nCNXDVNF\nCNXDWNI\nCNXEURF\nCNXEURO\nCNXGHCL\nCNXGPCL\nCNXHCPF\nCNXHSTF\nCNXLGDP\nCNXLGKP\nCNXLGMD\nCNXLGSF\nCNXLP2F\nCNXLSDP\nCNXLSKP\nCNXLSSF\nCNXLS2F\nCNXMGID\nCNXMPTH\nCNXPNID\nCNXPRFX\nCNXRCFM\nCNXSCID\nCNXSVVL\nCNXTDDF\nCNXWARN\nCNXWCRE\nCNXWDSF\nCO\nCOLOR\nCONT\nCO1\nCO2\nCQ\nCRDSN\nCRLIB1\nCRLIB2\nCRLIB3\nCRLIB4\nCRMEM\nCRPRJ1\nCRPSWD\nCRTYP1\nCRVOL\nCS\nCSRINDEX\nCSROFF\nCSRPOS\nCSRROW\nCSTF\nCUAA\nCUAA1\nCURINX\nCURLTB\nCURPOS\nCURSOR\nCURTB\nCUSCUT\nCUSCUV\nCUSIZE\nCV\nC1\nC11\nC2\nC3\nC4\nC5\nC6\nC7\nDAECONF\nDAECONV\nDAEFORM\nDAEMAC\nDAEMACN\nDAEMIX\nDAEMIXV\nDAEPANL\nDAEPROF\nDATEF\nDATEFD\nDATEJ\nDBCS\nDEL\nDELCMD\nDELP\nDESCR\nDEST\nDEV\nDEVNAM\nDFIELDS\nDFIELD2\nDFOPT\nDFPPGM\nDFP31\nDFSMS12\nDLDIRCT\nDLDSN\nDLDSNLV\nDLIST\nDLLCMD\nDLLCM1\nDLLCM2\nDLLCM3\nDLLCM4\nDLLEXT\nDLMODE\nDLPVL\nDLSTATS\nDLVOL\nDLWSFN\nDMFLANG\nDOT1\nDOT2\nDOT3\nDQ\nDR\nDSANONE\nDSC\nDSCC\nDSCHK\nDSCKO\nDSCKOV\nDSCURLT\nDSCURT\nDSLCFG\nDSLCONF\nDSLCONV\nDSLCUR\nDSLEMPT\nDSLMEMA\nDSLMEMV\nDSLSHW\nDSLSHWV\nDSLTB\nDSN\nDSNACCT\nDSNBMAP\nDSNCC\nDSNCU\nDSNF\nDSNIM\nDSNINCL\nDSNIR\nDSNMAP\nDSNPS\nDSNSTAT\nDSNT\nDSNTCOM\nDSNUDE\nDSNXREF\nDSN1\nDSN2\nDSN3\nDSN4\nDSVOL\nDTLABAR\nDTLACTX\nDTLADDS\nDTLADDX\nDTLATRX\nDTLATTR\nDTLCAN\nDTLCMD\nDTLCMNT\nDTLCMNX\nDTLCUAS\nDTLCUAX\nDTLDBAL\nDTLDBAX\nDTLDBCS\nDTLDBCX\nDTLDCKX\nDTLDISK\nDTLDSCK\nDTLDSKX\nDTLDSPN\nDTLDSPW\nDTLDSPX\nDTLDSPY\nDTLEND\nDTLFMTL\nDTLFMTX\nDTLGCLR\nDTLGMLA\nDTLGMLB\nDTLGMLC\nDTLGML1\nDTLGML2\nDTLGML3\nDTLGML4\nDTLGML5\nDTLGML6\nDTLGML7\nDTLGML8\nDTLGML9\nDTLGRPH\nDTLGRPX\nDTLGUIO\nDTLGUIX\nDTLKANA\nDTLKANN\nDTLKANX\nDTLKEYA\nDTLKNNX\nDTLLANG\nDTLLANX\nDTLLOGF\nDTLLSTF\nDTLLSTR\nDTLLSTS\nDTLLSTV\nDTLLSTX\nDTLLSTY\nDTLLSTZ\nDTLMSGS\nDTLMSGX\nDTLMSGY\nDTLPANL\nDTLPCMD\nDTLPLEB\nDTLPLEX\nDTLPREP\nDTLPRPX\nDTLREPL\nDTLREPM\nDTLREPX\nDTLREPY\nDTLSARF\nDTLSARX\nDTLSCRF\nDTLSCRS\nDTLSCRX\nDTLSEL\nDTLSMSG\nDTLSTAT\nDTLSTAX\nDTLSUPP\nDTLSUPX\nDTLTABF\nDTLVERS\nDTLVERX\nDTLZVAR\nDTLZVRX\nDTVOPT\nDTVSTOP\nDYN\nEACT\nEACT1\nEACT2\nEACT3\nEACT4\nEADY\nEBERDSN\nECBVE\nECDSN\nECFNAM\nECIMAC\nECIMACN\nECLIB1\nECLIB2\nECLIB3\nECLIB4\nECLOCK\nECLOCKP\nECMD\nECMEM\nECMIX\nECMIXV\nECPRJ1\nECPROF\nECPSWD\nECTYP1\nECVOL\nECWSFN\nEDADSN\nEDBRS\nEDCMD\nEDHI\nEDITWS\nEDLMSG\nEDLOCK\nEDLOCKP\nEDPRES\nEDRBS\nEDSMSG\nEDTDSN\nEDTKEY1\nEDTMEM\nEDTVOL\nELIST\nEMODE\nEMSG1\nEMSG2\nEMTEMP\nENBLDMP\nENQCNT\nENQDSN\nENTKTXT\nENVIR\nEP\nEPV\nEROUT\nERRHM\nERRLM1\nERRLM2\nERRLM3\nERRLM4\nERRLM5\nERRLM6\nERRLM7\nERRMSG\nERRSM\nERSCLM\nEVMSGL1\nEVMSGL2\nEVMSGL3\nEVMSGL4\nEVMSGS1\nEVMSGS2\nEVMSGS3\nEVMSGS4\nEXI\nEXX\nFAMPRT\nFBLNK\nFBLNK2\nFBROWS\nFC\nFDDV\nFDSN\nFIRSTLN\nFKA\nFK0\nFK1\nFK2\nFK3\nFK4\nFK5\nFK6\nFK7\nFLANG\nFLMAPID\nFLMID\nFLPANL\nFMT\nFMTS\nFNAM\nFPACK\nFPKED\nFPKEDV\nFPRINT\nFRAMEC\nFRAMECV\nFRAMEV\nFTEMP\nF1\nF2\nF3\nF3ATTR\nF3MORE\nF3V\nF4\nF5\nF6\nF7\nF8\nGAPPNAM\nGCOL\nGCT\nGDDMCF\nGE\nGMAXWAT\nGREEN\nGRESTRT\nGRPL\nGSEL\nGTYPE\nGUI\nGUIACCL\nGUIAPPC\nGUIC\nGUICDPG\nGUICHST\nGUICL\nGUIDBC\nGUIDOWN\nGUIEN\nGUIEND\nGUIFR\nGUIMPTH\nGUIND\nGUINET\nGUION\nGUIPRMT\nGUISAVE\nGUISTRT\nGUITCP\nGUITIT\nGUI3270\nGWEBCON\nHC\nHD\nHDRTITL\nHDSN\nHF\nHFIELDS\nHFIELD2\nHILITE\nHINDEX\nHK\nHO\nHQ\nHS\nHTOP\nHV\nHVOL\nICFEFS\nICFNC\nICFPT\nICMD\nIDEST\nIDSP\nIDSPD\nIFIELDS\nIFIELD2\nILPROC\nIMAC\nIMACN\nIMGCOL\nIMGNAM\nIMGROW\nIND\nINSTR1\nINT\nINTCWD1\nINTCWD2\nINTCWD3\nINTCWD4\nINTDFMT\nINTDFMV\nINTEN\nINTIFMT\nINTIFMV\nINTWCWD\nINTZCMD\nIPPC01\nIPPC02\nIPPC03\nIPPC04\nIPPC05\nIPSEL\nISFAUTH\nISFBDSP\nISFBUF\nISFCIBVT\nISFCKRD\nISFCMD\nISFCOLOR\nISFCSRN\nISFCSRP\nISFDA\nISFDADR\nISFDAR\nISFDAR1\nISFDBLD\nISFDEST\nISFDEST1\nISFDEST2\nISFDEST3\nISFDEST4\nISFDISPV\nISFDSDP\nISFDSP\nISFDSPO\nISFDSRC\nISFDSRD\nISFENDD\nISFFIBVT\nISFFLD\nISFFNDLM\nISFGDDM\nISFHOLD\nISFIDFR\nISFIDRD\nISFIDWT\nISFILVL\nISFIN\nISFINITP\nISFINT\nISFJDS\nISFJREAD\nISFJRWRK\nISFLN1\nISFLN10\nISFLN2\nISFLN3\nISFLN4\nISFLN5\nISFLN6\nISFLN7\nISFLN8\nISFLN9\nISFLOG\nISFLVL\nISFMATCH\nISFNLS\nISFOD\nISFOFTB\nISFOUT\nISFOVPAN\nISFOWNR\nISFPARS\nISFPREFX\nISFPRINT\nISFPRT\nISFPRTNF\nISFRDEF\nISFRIBVT\nISFRMFI\nISFS\nISFSAF\nISFSCHRS\nISFSPALO\nISFSPRD\nISFSRTC\nISFSTAT\nISFSTOPP\nISFSUBS\nISFSWB\nISFS4DSP\nISFTDSP\nISFYMVSS\nISFZMSRT\nISPFOS\nISPOPT\nISPTOPT\nISR00003\nISTATUS\nITNAME\nIUID\nIVMODE\nJ\nJB1\nJOBSTEP\nJUMP\nKABC\nKABD\nKABF\nKABF1\nKABF2\nKEYDEF\nKEYNAME\nKEYS\nKLPRIV\nKLPRMT\nKLUSE\nLANG\nLANUNV\nLASTLN\nLCM\nLEVEL\nLIB1\nLIB2\nLIB3\nLIB4\nLISTACT\nLISTMSG\nLLVIEW\nLMFPROJ\nLMF1\nLMF2\nLMF3\nLMP\nLNKOPT\nLNT\nLOCATE\nLOCNM\nLOGA\nLOGCD\nLOGCLA\nLOGCLAP\nLOGFDDV\nLOGFDDX\nLOGFDSP\nLOGLIN\nLOGLINP\nLOGM\nLOGMDDP\nLOGMID\nLOGNAME\nLOGNME\nLOGO\nLOGOPAN\nLOGPID\nLOGPIDP\nLOGPID2\nLOG1PG\nLOG1PGP\nLOG2PG\nLOG2PGP\nLPAD\nLPLACE\nLPRTCP\nLPRTCP1\nLPRTCP2\nLPRTEX\nLPRTHP\nLPRTHP1\nLPRTHP2\nLPRTOPT\nLPRTUP\nLPRTUP1\nLPRTUP2\nLPRTUP3\nLPRTUP4\nLSTA\nLSTACT\nLSTCD\nLSTCLA\nLSTCLAP\nLSTCMD\nLSTFDDV\nLSTFDDX\nLSTFDSP\nLSTLIN\nLSTLINP\nLSTLLEN\nLSTLLEP\nLSTM\nLSTNAME\nLSTPID\nLSTPIDP\nLSTPID2\nLSTRCFM\nLSTRECL\nLSTRECP\nLST1PG\nLST1PGP\nLST2PG\nLST2PGP\nLUPC01\nLUPC02\nLUPC03\nLUPC04\nLUPC05\nLUSEL\nLVLINE\nMACRO\nMCCONT\nMCCONT2\nMCDSN\nMCFT\nMCLIB1\nMCLIB2\nMCLIB3\nMCLIB4\nMCMEM\nMCPACK\nMCPACV\nMCPRJ1\nMCPSWD\nMCREP\nMCREPV\nMCSCLM\nMCSCLM1\nMCTYP1\nMCVOL\nMDS\nMDSV\nMEM\nMEMB\nMEMBP\nMEMCONF\nMEMCONV\nMEMCOV\nMEMKEEP\nMEMKEEV\nMEML\nMEMP\nMEMVIEL\nMEMVIEW\nMI\nMIV\nMIX\nMIXV\nMLACT\nMLACTV\nMLCOLD\nMLCSR\nMLHDRV\nMLPAD\nMLPD\nMLP1\nMLP2\nMLP3\nMLSHOV\nMLSHOW\nMLTR\nMLVDATA\nMLVEXIT\nML1\nML2\nML3\nMMCDSN\nMMCLIB\nMODA\nMODB\nMODE\nMSCPOS\nMSCUR\nMSG\nMSGIND\nMVCMUL\nMVCMULT\nMVS22\nM1\nN\nNCBAMN\nNCBCMD\nNCBCO1\nNCBCO2\nNCBCSRP2\nNCBCSR2\nNCBDYNA\nNCBLNAME\nNCBLVSBL\nNCBPAG\nNCBTPL\nNCHECK\nND\nNEWRNAM\nNOGUI\nNONDSPC\nNONDSPX\nNRDS\nNRGRP1\nNRGRP2\nNRGRP3\nNRGRP4\nNRLIB\nNRMEM\nNRODSN\nNRPROJ\nNRTYPE\nNRVOL\nNRWSN\nODSN\nOFIELDS\nOFIELD2\nOLDRNAM\nOMSLNG\nOPENDF\nOPT\nORG\nP\nPADC\nPADCP\nPAG\nPARM\nPARN\nPASICON\nPASTEXT\nPCFMCN\nPCMDEDT\nPDC\nPDFREL\nPDMIX\nPDS\nPDSV\nPECFMCN\nPEDT\nPER\nPFCTL\nPFFMT\nPFSET\nPF01\nPF02\nPF03\nPF04\nPF05\nPF06\nPF07\nPF08\nPF09\nPF10\nPF11\nPF12\nPF13\nPF14\nPF15\nPF16\nPF17\nPF18\nPF19\nPF20\nPF21\nPF22\nPF23\nPF24\nPG\nPGUMP\nPGV\nPI\nPID2\nPINK\nPIV\nPL\nPLACE\nPLEXCLR\nPLIOPT\nPLVIEW\nPLXFC\nPMD\nPM4\nPOSITION\nPPRF\nPPRFX\nPREF\nPREFIX\nPRIKEYS\nPRIM\nPRJL\nPRJ1\nPROF\nPSAVE\nPSEL\nPSWD\nPT\nPURGEV\nP7\nQCOPY\nQDSNS\nQDSN1\nQDSN2\nQHDSN\nQHMAC\nQLIBR2\nQMEMB1\nQMNAME\nQMOVE\nQNAME\nQNDSN\nQNREP\nQNVDAB\nQNVDABF\nQNVDAX\nQNVDCL\nQNVDCLF\nQNVDDC\nQNVDDCF\nQNVDDW\nQNVDEP\nQNVDEPF\nQNVDJL\nQNVDJLF\nQNVDLD\nQNVDLDF\nQNVDLP\nQNVDLPF\nQNVDOD\nQNVDODF\nQNVDPS\nQNVDPSF\nQNVDRT\nQNVDRTF\nQNVDSM\nQNVDSMF\nQNVDSP\nQNVDSPF\nQNVDSS\nQNVDSSF\nQNVDUK\nQNVDUKF\nQNVEABY\nQNVEAEH\nQNVEAL\nQNVEAN\nQNVEAP\nQNVEAS\nQNVECP\nQNVECRA\nQNVEEAC\nQNVEEHL\nQNVEHC\nQNVEHD\nQNVEHF\nQNVEHI\nQNVEHIY\nQNVEHL\nQNVEHP\nQNVEHX\nQNVEIMF\nQNVENC\nQNVENM\nQNVENS\nQNVENT\nQNVENU\nQNVEPK\nQNVEPKF\nQNVEPR\nQNVERC\nQNVERCF\nQNVERW\nQNVERWF\nQNVEST\nQNVESTF\nQNVESU\nQNVESUF\nQNVESWL\nQNVEWOT\nQNVPABU\nQNVPBRS\nQNVPDML\nQNVPIVS\nQNVPMEM\nQNVPPUI\nQNVPUAP\nQNVPUSP\nQNVPVED\nQNVPVWS\nQNVPWRG\nQNVQALF\nQNVQAMF\nQNVQASF\nQNVQAUF\nQNVQCEF\nQNVQCHF\nQNVQCSO\nQNVQCTF\nQNVQDTF\nQNVQEEF\nQNVQEIX\nQNVQETF\nQNVQFKF\nQNVQFPF\nQNVQIMF\nQNVQLDF\nQNVQLEF\nQNVQLIF\nQNVQNEF\nQNVQNTF\nQNVQPAF\nQNVQPIF\nQNVQPSF\nQNVQPTF\nQNVQPUF\nQNVQRPF\nQNVQSAF\nQNVQSIF\nQNVQSUF\nQNVQUOE\nQNVQVOF\nQNVQWMF\nQNVQWSF\nQNVQWTF\nQNVUMCA\nQNVVBE\nQNVVBL\nQNVVEE\nQNVVEL\nQNVVVE\nQNVVVL\nQOPT\nQPDSN\nQPGM\nQPLI\nQPLIO\nQPMEMB\nQPROJ2\nQPSWD2\nQPSYS1\nQPSYS2\nQREP\nQREPV\nQSEL\nQSNAME\nQTYPE2\nQVOL1\nQVSVOL\nR\nRDSN\nRECFROM\nRED\nREFAMT\nREFAUTO\nREFDELN\nREFDPNL\nREFLPNL\nREFMDE\nREFNAME\nREFSMS\nREFTABC\nREFTABT\nREFTYPE\nREFUA\nREFVOLM\nREFZCMD\nREM\nREM1\nREM2\nREPL\nREPLV\nREPM\nRESMUL\nRESMULT\nRFM\nRFSAS\nRFSDV\nRFSEV\nRFSUP\nRFSVOL\nRFSVV\nRFSZC\nRLIB\nRODS\nROST\nROTO\nROWID\nROWNAME\nRPAD\nRSEL\nRSFUNC\nRSMOD\nRSUSE\nRSVER\nRVOL\nS\nSAF\nSAGRP\nSAMBR\nSAR\nSAREA\nSAREAP\nSAREA1\nSAREA2\nSAREA3\nSAREA4\nSAREA5\nSATYPE\nSAVEBLD\nSAVINP\nSAVTTL\nSCBHELP\nSCBR\nSCDDIR\nSCDOPT\nSCDPRI\nSCDSEC\nSCED\nSCEDIR\nSCEMAC\nSCEPRI\nSCESEC\nSCFMCN\nSCHDR\nSCKEY\nSCLMF\nSCLMODE\nSCLMPRJ\nSCLMX\nSCML\nSCNLIST\nSCODIR\nSCOLR\nSCOLS\nSCOPRI\nSCOSEC\nSCPDIR\nSCPGM\nSCPPRI\nSCPSEC\nSCR\nSCRCMD\nSCREEN\nSCREENW\nSCTPREF\nSCTSRCH\nSC2MODE\nSC3MODE\nSC4MODE\nSC5MODE\nSDATA\nSDEF\nSDEFO\nSDEFU\nSDEFV\nSDS\nSDSV\nSEDITWS\nSEL\nSEL2\nSEQDSP\nSEQDSPV\nSETCMD\nSF\nSFMCNCL\nSI\nSIV\nSLTR\nSM\nSMEMS\nSMNCMD\nSOMBR\nSPFCMD\nSPLAT\nSPLIT\nSPROJ\nSRLLDMB\nSRLLNAI\nSRLLNST\nSRLLODS\nSRLLPEC\nSSCDSN\nSSCLDS\nSSCLTYP\nSSCMFRZ\nSSCMIX\nSSCMIXV\nSSCMODE\nSSCMODV\nSSCNDSN\nSSCNGR1\nSSCNGR2\nSSCNGR3\nSSCNGR4\nSSCNIMB\nSSCNPRJ\nSSCNPSW\nSSCNTYP\nSSCNVOL\nSSCODSN\nSSCOGR1\nSSCOGR2\nSSCOGR3\nSSCOGR4\nSSCOIMB\nSSCOPRJ\nSSCOPSW\nSSCOTYP\nSSCOVOL\nSSCPROF\nSSCSEQN\nSSCTYP1\nSSCUDS\nSSCUDSR\nSSFLDS\nSSFMULT\nSSFMULV\nSSFNDSN\nSSFNGR1\nSSFNGR2\nSSFNGR3\nSSFNGR4\nSSFNIMB\nSSFNPRJ\nSSFNPSW\nSSFNTYP\nSSFNVOL\nSSFS1\nSSFS10\nSSFS2\nSSFS3\nSSFS4\nSSFS5\nSSFS6\nSSFS7\nSSFS8\nSSFS9\nSSHDW\nSSSEQN1\nSSSMIX\nSSSMIXV\nSSSMODE\nSSSMODV\nSTFLDS\nSTFLD2\nSTITL\nSTYLE\nSUDOPT\nSUPSPA\nSUPSPAA\nSUPSPAB\nSUPSPAC\nSUPSPAD\nSUPSPAE\nSUPSPB\nSUPSPBA\nSUPSPBB\nSUPSPBC\nSUPSPBD\nSUPSPBE\nSUPSPX\nSUPSP1\nSUPSP1A\nSUPSP1B\nSUPSP1C\nSUPSP1D\nSUPSP1E\nSUPSP2\nSUPSP2A\nSUPSP2B\nSUPSP2C\nSUPSP2D\nSUPSP2E\nSUPSP3\nSUPSP3A\nSUPSP3B\nSUPSP3C\nSUPSP3D\nSUPSP3E\nSUPSP4\nSUPSP4A\nSUPSP4B\nSUPSP4C\nSUPSP4D\nSUPSP4E\nSUPSP5\nSUPSP5A\nSUPSP5B\nSUPSP5C\nSUPSP5D\nSUPSP5E\nSUPSP6\nSUPSP6A\nSUPSP6B\nSUPSP6C\nSUPSP6D\nSUPSP6E\nSUPSP7\nSUPSP7A\nSUPSP7B\nSUPSP7C\nSUPSP7D\nSUPSP7E\nSUPSP8\nSUPSP8A\nSUPSP8B\nSUPSP8C\nSUPSP8D\nSUPSP8E\nSUPSP9\nSUPSP9A\nSUPSP9B\nSUPSP9C\nSUPSP9D\nSUPSP9E\nSUPSTA\nSUPSTB\nSUPST1\nSUPST2\nSUPST3\nSUPST4\nSUPST5\nSUPST6\nSUPST7\nSUPST8\nSUPST9\nSUSENA\nSUSENB\nSUSEN1\nSUSEN2\nSUSEN3\nSUSEN4\nSUSEN5\nSUSEN6\nSUSEN7\nSUSEN8\nSUSEN9\nSUSESA\nSUSESB\nSUSES1\nSUSES2\nSUSES3\nSUSES4\nSUSES5\nSUSES6\nSUSES7\nSUSES8\nSUSES9\nSVIEWWS\nSWAP\nSYSCUR1\nSYSCUR2\nSYSCUR3\nSYSDS1\nSYSDS2\nSYSDS3\nS0NO001\nS0NO002\nS0NO003\nS0NO004\nS0NO010\nS0NO014\nS000101\nS000201\nS000301\nS000401\nS000501\nS000801\nS000901\nS001001\nS001401\nS003001\nS1NO001\nS1NO002\nS1NO003\nS1NO004\nS100101\nS100201\nS100301\nS100401\nTA\nTAB1\nTAB2\nTAB2TXT\nTAB3\nTAB3TXT\nTAPPLID\nTCMDES1\nTCRET01\nTCRET02\nTCRET03\nTCRET04\nTCRET05\nTCRET06\nTCRET07\nTCRET08\nTCRET09\nTCRET10\nTDMARK\nTDMSG\nTDSELS\nTDSN\nTDTMP\nTDTOP\nTEMP\nTEMP1\nTEMP2\nTERM\nTERMP\nTERMST\nTERMTDD\nTERMTDP\nTERMTR\nTEST1\nTEST2\nTEST3\nTIMACNM\nTIME\nTITLE\nTK1\nTK12\nTK13\nTK24\nTM\nTMPFMT\nTMPKEY\nTMPKR\nTMPPFF\nTMPSET\nTMPTRL\nTMPZTRM\nTOP\nTP\nTPL\nTPS\nTRAIL\nTRC\nTSTR\nTTL\nTURQ\nTYPEWD\nTYPL\nTYP1\nU#\nU##\nUBO\nUBOV\nUCAT\nUCD\nUCDR\nUCDV\nUCMKEY\nUCMODE\nUCMODEV\nUCTPREF\nUD\nUDATOP\nUDT\nUEO\nUEOV\nUFLDSTR\nUHECODE\nUHOPT\nUHOPT2\nUHV\nUHVV\nUL\nULCMDX\nULV\nUM\nUMCNREP\nUMCSEL\nUMODE\nUN\nUNL\nUNV\nUOM\nUOMV\nUOPT\nUP\nUPCD\nUPCDV\nUPDKEY\nUPDLABT\nUPIV\nUPIVV\nUPK\nUPO\nUPOV\nUPXSIZT\nUR\nURECAT\nUREP\nURPL\nURPLV\nURV\nUS\nUSB\nUSC\nUSCLM\nUSCLMB\nUSCLMX\nUSD\nUSER\nUT\nUT11\nUT12\nUT13\nUT14\nUT4\nUT6\nUT7\nUUNCAT\nUVIEW\nVBROWSE\nVBUFND1\nVBUFND2\nVBUFNI1\nVBUFNI3\nVBUF1\nVBUF2\nVCATTYP\nVCNTLS1\nVCNTLS2\nVCNTLS3\nVCOPY\nVDELVOL\nVDERASE\nVDFORCE\nVDPURGE\nVDRECOV\nVDSCRAT\nVDTYPE\nVDTYPEC\nVDTYPE1\nVDTYPE2\nVDTYPE3\nVEDIT\nVEDITS\nVEMPTY1\nVERASE1\nVERASE2\nVERB\nVFILES1\nVFILES2\nVFILES3\nVFILES4\nVFORD1\nVFOR21\nVFREEA1\nVFREEA2\nVFREEI1\nVFREEI2\nVGRPTO\nVIEW\nVIEWWS\nVIMAC\nVIMBED1\nVIMBED3\nVINDEX1\nVKEYL1\nVKEYL2\nVKEYO1\nVKEYO2\nVLFIELD\nVLFIEL1\nVLFIEL4\nVLIMIT1\nVLOCK1\nVLTYPE\nVLTYPEC\nVLTYPE1\nVLTYPE2\nVLTYPE3\nVMODET\nVOL\nVORD1\nVORD2\nVORD3\nVPRIQ1\nVPRIQ2\nVPRIQ3\nVPROCN\nVPROFN\nVRECAT1\nVRECMX1\nVRECMX2\nVRECSA1\nVRECSA2\nVRECSP1\nVRECSP2\nVRELATE\nVREPL1\nVREPL3\nVREQ\nVREUSE1\nVREUSE2\nVREUSE3\nVSAMDSN\nVSAMPRO\nVSCRAT1\nVSEQQ1\nVSEQQ2\nVSEQQ3\nVSHARE1\nVSHARE2\nVSHARE3\nVSHARR1\nVSHARR2\nVSHARR3\nVSPACE1\nVSPACE2\nVSPACE3\nVSPAN1\nVSPAN2\nVSPCE1N\nVSPCE2N\nVSPCE3N\nVSTRNO1\nVSWAP1\nVTODAY1\nVTRAIL\nVTYPC\nVTYPE\nVTYPEC\nVTYPEN\nVTYPE1\nVTYPE3\nVTYPTO\nVUNIQE1\nVUNIQE2\nVUNIQE3\nVUNIQU1\nVUNIQU2\nVUPDAT1\nVUPGRA1\nVWARN\nVWARN2\nWCM\nWCMDES1\nWDSLV\nWDSLVV\nWHITE\nWIDTH\nWIN\nWINTTL\nWJUST\nWPBOX\nWPBOXV\nWPDEFA\nWPDEFC\nWPDEFD\nWPDEFM\nWPDEFO\nWPDEFS\nWPDEFWS\nWPEML\nWPEMLV\nWPEP\nWPEPV\nWPEXE\nWPEXEV\nWPT\nWRKFILE\nWSBFLAG\nWSBV\nWSBVE\nWSCON\nWSCONNT\nWSDADD\nWSDBRO\nWSDCRE\nWSDMTHD\nWSDPDS\nWSDPLAT\nWSDPWD\nWSDUSR\nWSOPSYS\nWSPATTR\nWSSVE\nWSSVEX\nXCMD\nXDSP\nXDSPD\nXLPROC\nXSB\nXSC\nXSCLM\nXSCR\nXSTATUS\nXTNAME\nXUID\nXXX\nX1\nX2\nX3\nYELLOW\nYFPFUNR\nZ\nZAC\nZACCTNUM\nZACMSG\nZACTBAR\nZACTBARV\nZADARC\nZAL#VOLS\nZALAVR\nZALBLK\nZALDC\nZALDIR\nZALDSNT\nZALLO\nZALLREC\nZALMC\nZALMLVL\nZALMV\nZALRF\nZALSC\nZALSPAC\nZALSPC\nZALTEMP\nZALTSEL\nZALTTR\nZALTTRL\nZALUNIT\nZALVLNUM\nZALVOL\nZALVOLF\nZALVOL1\nZALVOL2\nZAL1EX\nZAL2EX\nZAL2SPC\nZAMT\nZAPO\nZAPPLID\nZAPPTTL\nZASMOPT\nZASP\nZASPECT\nZASSL\nZASSLS\nZAUTOMSG\nZB\nZBADSN1\nZBADSN2\nZBADSN3\nZBADSN4\nZBBLNK\nZBBLNK2\nZBCBVE\nZBCFNAM\nZBCLIB1\nZBCLIB2\nZBCLIB3\nZBCLIB4\nZBCMIX\nZBCODSN\nZBCPRJ1\nZBCPSWD\nZBCTYP1\nZBCVOL\nZBCWSFN\nZBLANK\nZBLIST\nZBLKSZ\nZBLUE\nZBMSG\nZBPACK\nZBPK\nZBPKED\nZBPKEDV\nZBROCUR\nZBTEMP\nZC\nZCALGCHD\nZCALGCHT\nZCALGCSB\nZCALGCTD\nZCALGCWD\nZCALGCWE\nZCALJUL\nZCALM01\nZCALM02\nZCALM03\nZCALM04\nZCALM05\nZCALM06\nZCALM07\nZCALM08\nZCALM09\nZCALM10\nZCALM11\nZCALM12\nZCALNLSD\nZCALNPTL\nZCALSTRT\nZCALTIME\nZCANKEY\nZCC\nZCD\nZCEMEM\nZCF\nZCFMA\nZCFMB\nZCFMCNCL\nZCHARCNL\nZCHAREUR\nZCHARLM\nZCHC\nZCINFO\nZCK\nZCLA\nZCLEAN\nZCM\nZCMD\nZCMLJUST\nZCMPDSN\nZCNFMEM\nZCNFNAME\nZCNVACCL\nZCNVBWSE\nZCNVCBK\nZCNVCDB\nZCNVCLP\nZCNVCLR\nZCNVCPQ\nZCNVCSLF\nZCNVCSQ\nZCNVCSR\nZCNVC327\nZCNVDAB\nZCNVDABF\nZCNVDAD\nZCNVDCBL\nZCNVDCL\nZCNVDCLF\nZCNVDCLR\nZCNVDDC\nZCNVDDCF\nZCNVDDW\nZCNVDELM\nZCNVDENK\nZCNVDEP\nZCNVDEPF\nZCNVDJL\nZCNVDJLF\nZCNVDLBL\nZCNVDLD\nZCNVDLDF\nZCNVDLLR\nZCNVDLOD\nZCNVDLP\nZCNVDLPF\nZCNVDLRB\nZCNVDOBL\nZCNVDOD\nZCNVDODF\nZCNVDOLR\nZCNVDPDO\nZCNVDPD1\nZCNVDPD2\nZCNVDPD3\nZCNVDPS\nZCNVDPSF\nZCNVDRT\nZCNVDRTF\nZCNVDSM\nZCNVDSMF\nZCNVDSP\nZCNVDSPF\nZCNVDSRC\nZCNVDSS\nZCNVDSSF\nZCNVDUK\nZCNVDUKF\nZCNVDVNF\nZCNVDWBL\nZCNVDWLR\nZCNVDWNI\nZCNVEABY\nZCNVEAEH\nZCNVEAL\nZCNVEAN\nZCNVEAP\nZCNVEAS\nZCNVECP\nZCNVECRA\nZCNVEDMP\nZCNVEEAC\nZCNVEEHL\nZCNVEHC\nZCNVEHD\nZCNVEHF\nZCNVEHI\nZCNVEHIY\nZCNVEHL\nZCNVEHP\nZCNVEHX\nZCNVEIMF\nZCNVEMCS\nZCNVEMEC\nZCNVEMEP\nZCNVEMES\nZCNVENC\nZCNVENM\nZCNVENS\nZCNVENT\nZCNVENU\nZCNVEPK\nZCNVEPKF\nZCNVEPR\nZCNVERBK\nZCNVERC\nZCNVERCF\nZCNVERPQ\nZCNVERSQ\nZCNVERW\nZCNVERWF\nZCNVEST\nZCNVESTF\nZCNVESU\nZCNVESUF\nZCNVESWL\nZCNVEURF\nZCNVEURO\nZCNVEUSS\nZCNVEWOT\nZCNVFAMP\nZCNVFMID\nZCNVFRMC\nZCNVFRMI\nZCNVGBKC\nZCNVGCLW\nZCNVGCL1\nZCNVGCL2\nZCNVGCL3\nZCNVGCL4\nZCNVGCL5\nZCNVGCL6\nZCNVGCL7\nZCNVGHCL\nZCNVGNTW\nZCNVGPCL\nZCNVGSWT\nZCNVGWDF\nZCNVHCPF\nZCNVHGD1\nZCNVHGD2\nZCNVHGD3\nZCNVHGD4\nZCNVHGD5\nZCNVHGD6\nZCNVHGD7\nZCNVHSTF\nZCNVKWD\nZCNVKWDM\nZCNVKWD2\nZCNVKWM2\nZCNVLDSN\nZCNVLGDP\nZCNVLGKP\nZCNVLGLN\nZCNVLGMD\nZCNVLGSF\nZCNVLG1P\nZCNVLG2P\nZCNVLOAD\nZCNVLP2F\nZCNVLSDP\nZCNVLSKP\nZCNVLSLL\nZCNVLSLN\nZCNVLSSF\nZCNVLS1P\nZCNVLS2F\nZCNVLS2P\nZCNVLTYP\nZCNVMBK\nZCNVMDB\nZCNVMEM\nZCNVMEM2\nZCNVMGID\nZCNVMINL\nZCNVMLP\nZCNVMLR\nZCNVMPQ\nZCNVMPTH\nZCNVMSQ\nZCNVOBJ\nZCNVOBK\nZCNVOLR\nZCNVOPQ\nZCNVOPT\nZCNVOSQ\nZCNVPAAU\nZCNVPABU\nZCNVPADC\nZCNVPBRS\nZCNVPCOC\nZCNVPDMD\nZCNVPDML\nZCNVPIVS\nZCNVPLMF\nZCNVPMEM\nZCNVPMIR\nZCNVPNID\nZCNVPOSC\nZCNVPPUI\nZCNVPRFX\nZCNVPUAP\nZCNVPUN\nZCNVPUSP\nZCNVPVED\nZCNVPVMG\nZCNVPVWS\nZCNVPWRG\nZCNVPWUI\nZCNVQALC\nZCNVQALF\nZCNVQALH\nZCNVQALI\nZCNVQAMC\nZCNVQAMF\nZCNVQAMH\nZCNVQAMI\nZCNVQASC\nZCNVQASF\nZCNVQASH\nZCNVQASI\nZCNVQAUC\nZCNVQAUF\nZCNVQAUH\nZCNVQAUI\nZCNVQCEC\nZCNVQCEF\nZCNVQCEH\nZCNVQCEI\nZCNVQCHC\nZCNVQCHF\nZCNVQCHH\nZCNVQCHI\nZCNVQCSO\nZCNVQCTC\nZCNVQCTF\nZCNVQCTH\nZCNVQCTI\nZCNVQDTC\nZCNVQDTF\nZCNVQDTH\nZCNVQDTI\nZCNVQEEC\nZCNVQEEF\nZCNVQEEH\nZCNVQEEI\nZCNVQEIX\nZCNVQETC\nZCNVQETF\nZCNVQETH\nZCNVQETI\nZCNVQFKC\nZCNVQFKF\nZCNVQFKH\nZCNVQFKI\nZCNVQFPC\nZCNVQFPF\nZCNVQFPH\nZCNVQFPI\nZCNVQIMC\nZCNVQIMF\nZCNVQIMH\nZCNVQIMI\nZCNVQLDC\nZCNVQLDF\nZCNVQLDH\nZCNVQLDI\nZCNVQLEC\nZCNVQLEF\nZCNVQLEH\nZCNVQLEI\nZCNVQLIC\nZCNVQLIF\nZCNVQLIH\nZCNVQLII\nZCNVQNEC\nZCNVQNEF\nZCNVQNEH\nZCNVQNEI\nZCNVQNSS\nZCNVQNTC\nZCNVQNTF\nZCNVQNTH\nZCNVQNTI\nZCNVQPAC\nZCNVQPAF\nZCNVQPAH\nZCNVQPAI\nZCNVQPIC\nZCNVQPIF\nZCNVQPIH\nZCNVQPII\nZCNVQPSC\nZCNVQPSF\nZCNVQPSH\nZCNVQPSI\nZCNVQPTC\nZCNVQPTF\nZCNVQPTH\nZCNVQPTI\nZCNVQPUC\nZCNVQPUF\nZCNVQPUH\nZCNVQPUI\nZCNVQRFT\nZCNVQRPC\nZCNVQRPF\nZCNVQRPH\nZCNVQRPI\nZCNVQRSS\nZCNVQSAC\nZCNVQSAF\nZCNVQSAH\nZCNVQSAI\nZCNVQSCT\nZCNVQSIC\nZCNVQSIF\nZCNVQSIH\nZCNVQSII\nZCNVQSPV\nZCNVQSUC\nZCNVQSUF\nZCNVQSUH\nZCNVQSUI\nZCNVQUCT\nZCNVQUOE\nZCNVQVOC\nZCNVQVOF\nZCNVQVOH\nZCNVQVOI\nZCNVQWMC\nZCNVQWMF\nZCNVQWMH\nZCNVQWMI\nZCNVQWSC\nZCNVQWSF\nZCNVQWSH\nZCNVQWSI\nZCNVQWTC\nZCNVQWTF\nZCNVQWTH\nZCNVQWTI\nZCNVQY2R\nZCNVRATI\nZCNVRCFM\nZCNVRECL\nZCNVSCID\nZCNVSLDS\nZCNVSLOD\nZCNVSMID\nZCNVSMPE\nZCNVSPDS\nZCNVSRCE\nZCNVSRCM\nZCNVSSDS\nZCNVSSRC\nZCNVSUDS\nZCNVSUP1\nZCNVSUP2\nZCNVSUP3\nZCNVSUP4\nZCNVSVVL\nZCNVTDDF\nZCNVTPUT\nZCNVTRAC\nZCNVUMCA\nZCNVVASM\nZCNVVBE\nZCNVVBL\nZCNVVEE\nZCNVVEL\nZCNVVVE\nZCNVVVL\nZCNVWARN\nZCNVWCRE\nZCNVWDLM\nZCNVWDLO\nZCNVWDLP\nZCNVWDSF\nZCNVWMXW\nZCNVXACT\nZCNVXCMC\nZCNVXCMP\nZCNVXDLL\nZCNVXDNC\nZCNVXDSA\nZCNVXDSF\nZCNVXMLC\nZCNVXMLF\nZCNVXMLP\nZCNVXPUC\nZCNVXPUP\nZCNVXTRA\nZCNVZFKA\nZCNVZFMT\nZCNVZKYS\nZCNVZTRM\nZCNXACCL\nZCNXBWSE\nZCNXCSLF\nZCNXC327\nZCNXDENK\nZCNXDVNF\nZCNXDWNI\nZCNXEURF\nZCNXEURO\nZCNXGHCL\nZCNXGPCL\nZCNXHCPF\nZCNXHSTF\nZCNXLGDP\nZCNXLGKP\nZCNXLGMD\nZCNXLGSF\nZCNXLP2F\nZCNXLSDP\nZCNXLSKP\nZCNXLSSF\nZCNXLS2F\nZCNXMGID\nZCNXMPTH\nZCNXPNID\nZCNXPRFX\nZCNXRCFM\nZCNXSCID\nZCNXSVVL\nZCNXTDDF\nZCNXWARN\nZCNXWCRE\nZCNXWDSF\nZCO\nZCOLOR\nZCOLUMS\nZCONT\nZCQ\nZCRDSN\nZCRLIB1\nZCRLIB2\nZCRLIB3\nZCRLIB4\nZCRMEM\nZCRPRJ1\nZCRPSWD\nZCRTYP1\nZCRVOL\nZCS\nZCSR\nZCSROFF\nZCSTA\nZCSTB\nZCSTC\nZCSTD\nZCSTE\nZCSTF\nZCUAA\nZCUAA1\nZCURFLD\nZCURINX\nZCURLTB\nZCURPOS\nZCURSOR\nZCURTB\nZCUSIZE\nZCV\nZC1\nZC11\nZC2\nZC3\nZC4\nZC5\nZC6\nZC7\nZDADWD\nZDAECONF\nZDAECONV\nZDAEFORM\nZDAEMAC\nZDAEMACN\nZDAEMIX\nZDAEMIXV\nZDAEPANL\nZDAEPROF\nZDAMLN\nZDATA\nZDATEFD\nZDBCS\nZDEL\nZDELCMD\nZDELP\nZDESCR\nZDEV\nZDEVNAM\nZDFPPGM\nZDFP31\nZDFSMS12\nZDLDIRCT\nZDLDSN\nZDLDSNLV\nZDLIST\nZDLLCMD\nZDLLCM1\nZDLLCM2\nZDLLCM3\nZDLLCM4\nZDLLEXT\nZDLMODE\nZDLPVL\nZDLSTATS\nZDLTITLE\nZDLVOL\nZDLWSFN\nZDOT1\nZDOT2\nZDOT3\nZDQ\nZDR\nZDSANONE\nZDSC\nZDSCC\nZDSCHK\nZDSCKO\nZDSCKOV\nZDSCURLT\nZDSCURT\nZDSLCFG\nZDSLCONF\nZDSLCONV\nZDSLCUR\nZDSLEMPT\nZDSLMEMA\nZDSLMEMV\nZDSLSHW\nZDSLSHWV\nZDSLTB\nZDSN\nZDSNACCT\nZDSNBMAP\nZDSNCC\nZDSNCU\nZDSNF\nZDSNIM\nZDSNINCL\nZDSNIR\nZDSNMAP\nZDSNPS\nZDSNSTAT\nZDSNT\nZDSNTCOM\nZDSNUDE\nZDSNWRK\nZDSNXREF\nZDSQ\nZDSQMEM\nZDSVOL\nZDTDSOS\nZDTLA\nZDTLABAR\nZDTLACTX\nZDTLADDS\nZDTLADDX\nZDTLATRX\nZDTLATTR\nZDTLCAN\nZDTLCMD\nZDTLCMNT\nZDTLCMNX\nZDTLCUAS\nZDTLCUAX\nZDTLDBAL\nZDTLDBAX\nZDTLDBCS\nZDTLDBCX\nZDTLDCKX\nZDTLDISK\nZDTLDSCK\nZDTLDSKX\nZDTLDSPN\nZDTLDSPW\nZDTLDSPX\nZDTLDSPY\nZDTLEND\nZDTLFMTL\nZDTLFMTX\nZDTLGCLR\nZDTLGMLA\nZDTLGMLB\nZDTLGMLC\nZDTLGML1\nZDTLGML2\nZDTLGML3\nZDTLGML4\nZDTLGML5\nZDTLGML6\nZDTLGML7\nZDTLGML8\nZDTLGML9\nZDTLGRPH\nZDTLGRPX\nZDTLGUIO\nZDTLGUIX\nZDTLKANA\nZDTLKANN\nZDTLKANX\nZDTLKEYA\nZDTLKNNX\nZDTLLANG\nZDTLLANX\nZDTLLOGF\nZDTLLSTF\nZDTLLSTR\nZDTLLSTS\nZDTLLSTV\nZDTLLSTX\nZDTLLSTY\nZDTLLSTZ\nZDTLMSGS\nZDTLMSGX\nZDTLMSGY\nZDTLO\nZDTLP\nZDTLPANL\nZDTLPCMD\nZDTLPLEB\nZDTLPLEX\nZDTLPREP\nZDTLPRPX\nZDTLREPL\nZDTLREPM\nZDTLREPX\nZDTLREPY\nZDTLSARF\nZDTLSARX\nZDTLSCRF\nZDTLSCRS\nZDTLSCRX\nZDTLSEL\nZDTLSMSG\nZDTLSTAT\nZDTLSTAX\nZDTLSUPP\nZDTLSUPX\nZDTLTABF\nZDTLV\nZDTLVERS\nZDTLVERX\nZDTLZVAR\nZDTLZVRX\nZDTVOPT\nZDTVSTOP\nZDYN\nZEACT\nZEACT1\nZEACT2\nZEACT3\nZEACT4\nZEBERDSN\nZECBVE\nZECDSN\nZECFNAM\nZECIMAC\nZECIMACN\nZECLIB1\nZECLIB2\nZECLIB3\nZECLIB4\nZECLOCK\nZECLOCKP\nZECMD\nZECMEM\nZECMIX\nZECMIXV\nZECPRJ1\nZECPROF\nZECPSWD\nZECTYP1\nZECVOL\nZECWSFN\nZEDADSN\nZEDBRS\nZEDCMD\nZEDE\nZEDF\nZEDHI\nZEDITWS\nZEDLMSG\nZEDLOCK\nZEDLOCKP\nZEDPRES\nZEDRBS\nZEDSMSG\nZEDTDSN\nZEDTKEY1\nZEDTMEM\nZEDTVOL\nZEIROW\nZELIST\nZEMODE\nZEMSG1\nZEMSG2\nZEMTEMP\nZENAME\nZENBLDMP\nZENQCNT\nZENQDSN\nZENTKTXT\nZENVIR\nZENVWK1\nZENVWK2\nZEP\nZEPV\nZEROUT\nZERRHM\nZERRLM1\nZERRLM2\nZERRLM3\nZERRLM4\nZERRLM5\nZERRLM6\nZERRLM7\nZERRMSG\nZERRSM\nZERSCLM\nZEVMSGL1\nZEVMSGL2\nZEVMSGL3\nZEVMSGL4\nZEVMSGS1\nZEVMSGS2\nZEVMSGS3\nZEVMSGS4\nZEXI\nZEXX\nZFAMPRT\nZFBLNK\nZFBLNK2\nZFBROWS\nZFC\nZFDDV\nZFDSN\nZFIRSTLN\nZFKA\nZFK0\nZFK1\nZFK2\nZFK3\nZFK4\nZFK5\nZFK6\nZFK7\nZFLANG\nZFLMAPID\nZFLMID\nZFLPANL\nZFMT\nZFMTS\nZFM7\nZFNAM\nZFPACK\nZFPKED\nZFPKEDV\nZFPRINT\nZFRAMEC\nZFRAMECV\nZFRAMEV\nZFS1\nZFS10\nZFS11\nZFS2\nZFS3\nZFS4\nZFS5\nZFS6\nZFS7\nZFS8\nZFS9\nZFTEMP\nZFUNA\nZF1\nZF2\nZF3\nZF3ATTR\nZF3MORE\nZF3V\nZF4\nZF5\nZF6\nZF7\nZF8\nZGADDR\nZGAPPNAM\nZGCOL\nZGCT\nZGDDMCF\nZGE\nZGMAXWAT\nZGREEN\nZGRESTRT\nZGRPL\nZGSEL\nZGSYS\nZGTYPE\nZGUI\nZGUIACCL\nZGUIAPPC\nZGUIC\nZGUICDPG\nZGUICHST\nZGUICL\nZGUIDBC\nZGUIDOWN\nZGUIEN\nZGUIEND\nZGUIFR\nZGUIMPTH\nZGUIND\nZGUINET\nZGUION\nZGUIPRMT\nZGUISAVE\nZGUISTRT\nZGUITCP\nZGUITIT\nZGUI3270\nZGWEBCON\nZHC\nZHD\nZHDRTITL\nZHDSN\nZHF\nZHILITE\nZHINDEX\nZHK\nZHO\nZHOSTCL\nZHQ\nZHS\nZHTOP\nZHV\nZHVOL\nZICFEFS\nZICFNC\nZICFPT\nZIMAC\nZIMACN\nZIMGCOL\nZIMGNAM\nZIMGROW\nZIND\nZINSTR1\nZINT\nZINTCWD1\nZINTCWD2\nZINTCWD3\nZINTCWD4\nZINTDFMT\nZINTDFMV\nZINTEN\nZINTIFMT\nZINTIFMV\nZINTWCWD\nZINTZCMD\nZIPPC01\nZIPPC02\nZIPPC03\nZIPPC04\nZIPPC05\nZIPSEL\nZISFBUF\nZISFLN1\nZISPFOS\nZISPOPT\nZISPTOPT\nZIVMODE\nZJ\nZJB1\nZJOBSTEP\nZJUMP\nZJUNK\nZKABC\nZKABD\nZKABF\nZKABF1\nZKABF2\nZKEYDEF\nZKEYNAME\nZKEYS\nZKLPRIV\nZKLPRMT\nZKLUSE\nZLANG\nZLANUNV\nZLASTLN\nZLCM\nZLCNORC\nZLEVEL\nZLIB1\nZLIB2\nZLIB3\nZLIB4\nZLISTACT\nZLISTMSG\nZLLVIEW\nZLMFPROJ\nZLMF1\nZLMF2\nZLMF3\nZLMP\nZLNKOPT\nZLNT\nZLOCNM\nZLOGA\nZLOGCD\nZLOGCLA\nZLOGCLAP\nZLOGFDDV\nZLOGFDDX\nZLOGFDSP\nZLOGLIN\nZLOGLINP\nZLOGM\nZLOGMDDP\nZLOGMID\nZLOGNAME\nZLOGNME\nZLOGO\nZLOGOPAN\nZLOGPID\nZLOGPIDP\nZLOGPID2\nZLOG1PG\nZLOG1PGP\nZLOG2PG\nZLOG2PGP\nZLPAD\nZLPLACE\nZLPRTCP\nZLPRTCP1\nZLPRTCP2\nZLPRTEX\nZLPRTHP\nZLPRTHP1\nZLPRTHP2\nZLPRTOPT\nZLPRTUP\nZLPRTUP1\nZLPRTUP2\nZLPRTUP3\nZLPRTUP4\nZLSTA\nZLSTACT\nZLSTB\nZLSTCD\nZLSTCLA\nZLSTCLAP\nZLSTCMD\nZLSTFDDV\nZLSTFDDX\nZLSTFDSP\nZLSTLIN\nZLSTLINP\nZLSTLLEN\nZLSTLLEP\nZLSTM\nZLSTNAME\nZLSTPID\nZLSTPIDP\nZLSTPID2\nZLSTRCFM\nZLSTRECL\nZLSTRECP\nZLST1PG\nZLST1PGP\nZLST2PG\nZLST2PGP\nZLUPC01\nZLUPC02\nZLUPC03\nZLUPC04\nZLUPC05\nZLUSEL\nZLVLINE\nZMACRO\nZMCCONT\nZMCCONT2\nZMCDSN\nZMCFT\nZMCLIB1\nZMCLIB2\nZMCLIB3\nZMCLIB4\nZMCMEM\nZMCNFA\nZMCNFB\nZMCPACK\nZMCPACV\nZMCPRJ1\nZMCPSWD\nZMCREP\nZMCREPV\nZMCSCLM\nZMCSCLM1\nZMCTYP1\nZMCVOL\nZMDS\nZMDSV\nZMEM\nZMEMB\nZMEMBP\nZMEMCONF\nZMEMCONV\nZMEMCOV\nZMEMKEEP\nZMEMKEEV\nZMEML\nZMEMP\nZMEMVIEL\nZMEMVIEW\nZMI\nZMIV\nZMIX\nZMIXV\nZMLACT\nZMLACTV\nZMLCOLD\nZMLCSR\nZMLHDRV\nZMLPAD\nZMLPD\nZMLP1\nZMLP2\nZMLP3\nZMLSHOV\nZMLSHOW\nZMLTR\nZMLVDATA\nZMLVEXIT\nZML1\nZML2\nZML3\nZMMCDSN\nZMMCLIB\nZMODA\nZMODB\nZMSCPOS\nZMSCUR\nZMSG\nZMSGIND\nZMVCMUL\nZMVCMULT\nZMVS22\nZM1\nZN\nZNCBDYNA\nZNCHECK\nZNDX001\nZNDX002\nZNDX003\nZNDX004\nZNDX005\nZNDX006\nZNDX007\nZNDX008\nZNDX009\nZNDX010\nZNEWRNAM\nZNOGUI\nZNONDSPC\nZNONDSPX\nZNRDS\nZNRGRP1\nZNRGRP2\nZNRGRP3\nZNRGRP4\nZNRLIB\nZNRMEM\nZNRODSN\nZNRPROJ\nZNRTYPE\nZNRVOL\nZNRWSN\nZODSN\nZOLDRNAM\nZOPENDF\nZOPT\nZORG\nZOS390RL\nZP\nZPADC\nZPADCP\nZPAPPNAM\nZPARM\nZPARN\nZPASICON\nZPASTEXT\nZPCFMCN\nZPCMDEDT\nZPDC\nZPDFREL\nZPDMIX\nZPDS\nZPDSV\nZPECFMCN\nZPEDT\nZPER\nZPFCTL\nZPFFMT\nZPFSET\nZPF01\nZPF02\nZPF03\nZPF04\nZPF05\nZPF06\nZPF07\nZPF08\nZPF09\nZPF10\nZPF11\nZPF12\nZPF13\nZPF14\nZPF15\nZPF16\nZPF17\nZPF18\nZPF19\nZPF20\nZPF21\nZPF22\nZPF23\nZPF24\nZPG\nZPGUAC\nZPGUAPPC\nZPGUCDPG\nZPGUCHST\nZPGUCL\nZPGUDB\nZPGUDL\nZPGUEN\nZPGUFR\nZPGUMP\nZPGUNET\nZPGUON\nZPGUTCP\nZPGUTIT\nZPGU3270\nZPGV\nZPI\nZPID2\nZPINK\nZPIV\nZPL\nZPLACE\nZPLEXCLR\nZPLIOPT\nZPLVIEW\nZPLXFC\nZPMAXWAT\nZPMD\nZPM2\nZPM3\nZPM4\nZPM5\nZPPRF\nZPPRFX\nZPREFIX\nZPRESTRT\nZPRIKEYS\nZPRIM\nZPRJL\nZPRJ1\nZPROF\nZPSAVE\nZPSEL\nZPSWD\nZPT\nZPURGEV\nZPWEBON\nZPWSAPPC\nZPWSNET\nZPWSON\nZPWSTCP\nZP7\nZQCOPY\nZQDSNS\nZQDSN1\nZQDSN2\nZQHDSN\nZQHMAC\nZQLIBR2\nZQMEMB1\nZQMNAME\nZQMOVE\nZQNAME\nZQNDSN\nZQNREP\nZQNVDAB\nZQNVDABF\nZQNVDAX\nZQNVDCL\nZQNVDCLF\nZQNVDDC\nZQNVDDCF\nZQNVDDW\nZQNVDEP\nZQNVDEPF\nZQNVDJL\nZQNVDJLF\nZQNVDLD\nZQNVDLDF\nZQNVDLP\nZQNVDLPF\nZQNVDOD\nZQNVDODF\nZQNVDPS\nZQNVDPSF\nZQNVDRT\nZQNVDRTF\nZQNVDSM\nZQNVDSMF\nZQNVDSP\nZQNVDSPF\nZQNVDSS\nZQNVDSSF\nZQNVDUK\nZQNVDUKF\nZQNVEABY\nZQNVEAEH\nZQNVEAL\nZQNVEAN\nZQNVEAP\nZQNVEAS\nZQNVECP\nZQNVECRA\nZQNVEEAC\nZQNVEEHL\nZQNVEHC\nZQNVEHD\nZQNVEHF\nZQNVEHI\nZQNVEHIY\nZQNVEHL\nZQNVEHP\nZQNVEHX\nZQNVEIMF\nZQNVENC\nZQNVENM\nZQNVENS\nZQNVENT\nZQNVENU\nZQNVEPK\nZQNVEPKF\nZQNVEPR\nZQNVERC\nZQNVERCF\nZQNVERW\nZQNVERWF\nZQNVEST\nZQNVESTF\nZQNVESU\nZQNVESUF\nZQNVESWL\nZQNVEWOT\nZQNVPABU\nZQNVPBRS\nZQNVPDML\nZQNVPIVS\nZQNVPMEM\nZQNVPPUI\nZQNVPUAP\nZQNVPUSP\nZQNVPVED\nZQNVPVWS\nZQNVPWRG\nZQNVQALF\nZQNVQAMF\nZQNVQASF\nZQNVQAUF\nZQNVQCEF\nZQNVQCHF\nZQNVQCSO\nZQNVQCTF\nZQNVQDTF\nZQNVQEEF\nZQNVQEIX\nZQNVQETF\nZQNVQFKF\nZQNVQFPF\nZQNVQIMF\nZQNVQLDF\nZQNVQLEF\nZQNVQLIF\nZQNVQNEF\nZQNVQNTF\nZQNVQPAF\nZQNVQPIF\nZQNVQPSF\nZQNVQPTF\nZQNVQPUF\nZQNVQRPF\nZQNVQSAF\nZQNVQSIF\nZQNVQSUF\nZQNVQUOE\nZQNVQVOF\nZQNVQWMF\nZQNVQWSF\nZQNVQWTF\nZQNVUMCA\nZQNVVBE\nZQNVVBL\nZQNVVEE\nZQNVVEL\nZQNVVVE\nZQNVVVL\nZQOPT\nZQPDSN\nZQPGM\nZQPLI\nZQPLIO\nZQPMEMB\nZQPROJ2\nZQPSWD2\nZQPSYS1\nZQPSYS2\nZQREP\nZQREPV\nZQSEL\nZQSNAME\nZQTYPE2\nZQU1\nZQU2\nZQVOL1\nZQVSVOL\nZR\nZRDSN\nZRECFROM\nZRED\nZREFAMT\nZREFAUTO\nZREFDELN\nZREFDPNL\nZREFLPNL\nZREFMDE\nZREFNAME\nZREFSMS\nZREFTABC\nZREFTABT\nZREFTYPE\nZREFUA\nZREFVOLM\nZREFZCMD\nZREM\nZREM1\nZREM2\nZREPL\nZREPLV\nZREPM\nZRESMUL\nZRESMULT\nZRFM\nZRFSAS\nZRFSDV\nZRFSEV\nZRFSUP\nZRFSVOL\nZRFSVV\nZRFSZC\nZRLIB\nZRME1\nZRME2\nZRM1\nZRM2\nZRODS\nZROST\nZROTO\nZROWNAME\nZRPAD\nZRSEL\nZRSFUNC\nZRSMOD\nZRSUSE\nZRSVER\nZRVOL\nZS\nZSAF\nZSAGRP\nZSAMBR\nZSAR\nZSAREA\nZSAREAP\nZSAREA1\nZSAREA2\nZSAREA3\nZSAREA4\nZSAREA5\nZSATYPE\nZSAVEBLD\nZSAVINP\nZSAVTTL\nZSCBHELP\nZSCBR\nZSCDDIR\nZSCDOPT\nZSCDPRI\nZSCDSEC\nZSCED\nZSCEDIR\nZSCEMAC\nZSCEPRI\nZSCESEC\nZSCFMCN\nZSCHDR\nZSCKEY\nZSCLMF\nZSCLMODE\nZSCLMPRJ\nZSCLMX\nZSCML\nZSCNLIST\nZSCODIR\nZSCOLR\nZSCOLS\nZSCOPRI\nZSCOSEC\nZSCPDIR\nZSCPGM\nZSCPPRI\nZSCPSEC\nZSCR\nZSCRCMD\nZSCREEN\nZSCREEND\nZSCREENW\nZSCRMAXD\nZSCRMAXW\nZSCTPREF\nZSCTSRCH\nZSC2MODE\nZSC3MODE\nZSC4MODE\nZSC5MODE\nZSDATA\nZSDEF\nZSDEFO\nZSDEFU\nZSDEFV\nZSDS\nZSDSV\nZSEDITWS\nZSEL\nZSEL2\nZSEQDSP\nZSEQDSPV\nZSETCMD\nZSF\nZSFMCNCL\nZSI\nZSIV\nZSLTR\nZSM\nZSMEMS\nZSMNCMD\nZSOMBR\nZSPFCMD\nZSPLAT\nZSPLIT\nZSPROJ\nZSRLLDMB\nZSRLLNAI\nZSRLLNST\nZSRLLODS\nZSRLLPEC\nZSSCDSN\nZSSCLDS\nZSSCLTYP\nZSSCMFRZ\nZSSCMIX\nZSSCMIXV\nZSSCMODE\nZSSCMODV\nZSSCNDSN\nZSSCNGR1\nZSSCNGR2\nZSSCNGR3\nZSSCNGR4\nZSSCNIMB\nZSSCNPRJ\nZSSCNPSW\nZSSCNTYP\nZSSCNVOL\nZSSCODSN\nZSSCOGR1\nZSSCOGR2\nZSSCOGR3\nZSSCOGR4\nZSSCOIMB\nZSSCOPRJ\nZSSCOPSW\nZSSCOTYP\nZSSCOVOL\nZSSCPROF\nZSSCSEQN\nZSSCTYP1\nZSSCUDS\nZSSCUDSR\nZSSFLDS\nZSSFMULT\nZSSFMULV\nZSSFNDSN\nZSSFNGR1\nZSSFNGR2\nZSSFNGR3\nZSSFNGR4\nZSSFNIMB\nZSSFNPRJ\nZSSFNPSW\nZSSFNTYP\nZSSFNVOL\nZSSFS1\nZSSFS10\nZSSFS2\nZSSFS3\nZSSFS4\nZSSFS5\nZSSFS6\nZSSFS7\nZSSFS8\nZSSFS9\nZSSHDW\nZSSSEQN1\nZSSSMIX\nZSSSMIXV\nZSSSMODE\nZSSSMODV\nZSTITL\nZSUDOPT\nZSUPSPA\nZSUPSPAA\nZSUPSPAB\nZSUPSPAC\nZSUPSPAD\nZSUPSPAE\nZSUPSPB\nZSUPSPBA\nZSUPSPBB\nZSUPSPBC\nZSUPSPBD\nZSUPSPBE\nZSUPSPX\nZSUPSP1\nZSUPSP1A\nZSUPSP1B\nZSUPSP1C\nZSUPSP1D\nZSUPSP1E\nZSUPSP2\nZSUPSP2A\nZSUPSP2B\nZSUPSP2C\nZSUPSP2D\nZSUPSP2E\nZSUPSP3\nZSUPSP3A\nZSUPSP3B\nZSUPSP3C\nZSUPSP3D\nZSUPSP3E\nZSUPSP4\nZSUPSP4A\nZSUPSP4B\nZSUPSP4C\nZSUPSP4D\nZSUPSP4E\nZSUPSP5\nZSUPSP5A\nZSUPSP5B\nZSUPSP5C\nZSUPSP5D\nZSUPSP5E\nZSUPSP6\nZSUPSP6A\nZSUPSP6B\nZSUPSP6C\nZSUPSP6D\nZSUPSP6E\nZSUPSP7\nZSUPSP7A\nZSUPSP7B\nZSUPSP7C\nZSUPSP7D\nZSUPSP7E\nZSUPSP8\nZSUPSP8A\nZSUPSP8B\nZSUPSP8C\nZSUPSP8D\nZSUPSP8E\nZSUPSP9\nZSUPSP9A\nZSUPSP9B\nZSUPSP9C\nZSUPSP9D\nZSUPSP9E\nZSUPSTA\nZSUPSTB\nZSUPST1\nZSUPST2\nZSUPST3\nZSUPST4\nZSUPST5\nZSUPST6\nZSUPST7\nZSUPST8\nZSUPST9\nZSUSENA\nZSUSENB\nZSUSEN1\nZSUSEN2\nZSUSEN3\nZSUSEN4\nZSUSEN5\nZSUSEN6\nZSUSEN7\nZSUSEN8\nZSUSEN9\nZSUSESA\nZSUSESB\nZSUSES1\nZSUSES2\nZSUSES3\nZSUSES4\nZSUSES5\nZSUSES6\nZSUSES7\nZSUSES8\nZSUSES9\nZSVIEWWS\nZSV1\nZSV2\nZSWAP\nZSYSCUR1\nZSYSCUR2\nZSYSCUR3\nZSYSDS1\nZSYSDS2\nZSYSDS3\nZSYSNODE\nZSYSPLEX\nZS0NO001\nZS0NO002\nZS0NO003\nZS0NO004\nZS0NO010\nZS0NO014\nZS000101\nZS000201\nZS000301\nZS000401\nZS000501\nZS000801\nZS000901\nZS001001\nZS001401\nZS003001\nZS1NO001\nZS1NO002\nZS1NO003\nZS1NO004\nZS100101\nZS100201\nZS100301\nZS100401\nZTA\nZTAB1\nZTAB2\nZTAB2TXT\nZTAB3\nZTAB3TXT\nZTAPPLID\nZTCMDES1\nZTCRET01\nZTCRET02\nZTCRET03\nZTCRET04\nZTCRET05\nZTCRET06\nZTCRET07\nZTCRET08\nZTCRET09\nZTCRET10\nZTDMARK\nZTDMSG\nZTDSELS\nZTDSN\nZTDTMP\nZTDTOP\nZTEMP\nZTEMPN\nZTEMP1\nZTEMP2\nZTERM\nZTERMCID\nZTERMCP\nZTERMCS\nZTERMP\nZTERMST\nZTERMTDD\nZTERMTDP\nZTERMTR\nZTEST1\nZTEST2\nZTEST3\nZTIMACNM\nZTIME\nZTITLE\nZTK1\nZTK12\nZTK13\nZTK24\nZTM\nZTMPFMT\nZTMPKEY\nZTMPKR\nZTMPPFF\nZTMPSET\nZTMPTRL\nZTMPZTRM\nZTOP\nZTP\nZTPS\nZTRAIL\nZTRC\nZTSTR\nZTTL\nZTURQ\nZTYPEWD\nZTYPL\nZTYP1\nZU#\nZU##\nZUBO\nZUBOV\nZUCAT\nZUCD\nZUCDR\nZUCDV\nZUCMKEY\nZUCMODE\nZUCMODEV\nZUCTPREF\nZUD\nZUDATOP\nZUDT\nZUEO\nZUEOV\nZUFLDSTR\nZUHECODE\nZUHOPT\nZUHOPT2\nZUHV\nZUHVV\nZUL\nZULCMDX\nZULV\nZUM\nZUMCNREP\nZUMCSEL\nZUMODE\nZUN\nZUNL\nZUNV\nZUOM\nZUOMV\nZUOPT\nZUP\nZUPCD\nZUPCDV\nZUPDKEY\nZUPDLABT\nZUPIV\nZUPIVV\nZUPK\nZUPMEMB\nZUPO\nZUPOV\nZUPXSIZT\nZUR\nZURECAT\nZUREP\nZURPL\nZURPLV\nZURV\nZUS\nZUSB\nZUSC\nZUSCLM\nZUSCLMB\nZUSCLMX\nZUSD\nZUSER\nZUT\nZUT1\nZUT10\nZUT11\nZUT12\nZUT13\nZUT14\nZUT2\nZUT3\nZUT4\nZUT5\nZUT6\nZUT7\nZUT8\nZUT9\nZUUNCAT\nZUVIEW\nZVBROWSE\nZVBUFND1\nZVBUFND2\nZVBUFNI1\nZVBUFNI3\nZVBUF1\nZVBUF2\nZVCATTYP\nZVCNTLS1\nZVCNTLS2\nZVCNTLS3\nZVDELVOL\nZVDERASE\nZVDFORCE\nZVDPURGE\nZVDRECOV\nZVDSCRAT\nZVDTYPE\nZVDTYPEC\nZVDTYPE1\nZVDTYPE2\nZVDTYPE3\nZVEDIT\nZVEDITS\nZVEMPTY1\nZVERASE1\nZVERASE2\nZVERB\nZVFILES1\nZVFILES2\nZVFILES3\nZVFILES4\nZVFORD1\nZVFOR21\nZVFREEA1\nZVFREEA2\nZVFREEI1\nZVFREEI2\nZVGRPTO\nZVIEW\nZVIEWWS\nZVIMAC\nZVIMBED1\nZVIMBED3\nZVINDEX1\nZVKEYL1\nZVKEYL2\nZVKEYO1\nZVKEYO2\nZVLEVEL\nZVLFIELD\nZVLFIEL1\nZVLFIEL4\nZVLIMIT1\nZVLOCK1\nZVLTYPE\nZVLTYPEC\nZVLTYPE1\nZVLTYPE2\nZVLTYPE3\nZVMODET\nZVOL\nZVORD1\nZVORD2\nZVORD3\nZVPRIQ1\nZVPRIQ2\nZVPRIQ3\nZVPROCN\nZVPROFN\nZVRECAT1\nZVRECMX1\nZVRECMX2\nZVRECSA1\nZVRECSA2\nZVRECSP1\nZVRECSP2\nZVRELATE\nZVREPL1\nZVREPL3\nZVREQ\nZVREUSE1\nZVREUSE2\nZVREUSE3\nZVSAMDSN\nZVSAMPRO\nZVSCRAT1\nZVSEQQ1\nZVSEQQ2\nZVSEQQ3\nZVSHARE1\nZVSHARE2\nZVSHARE3\nZVSHARR1\nZVSHARR2\nZVSHARR3\nZVSPACE1\nZVSPACE2\nZVSPACE3\nZVSPAN1\nZVSPAN2\nZVSPCE1N\nZVSPCE2N\nZVSPCE3N\nZVSTRNO1\nZVSWAP1\nZVTODAY1\nZVTRAIL\nZVTYPC\nZVTYPE\nZVTYPEC\nZVTYPEN\nZVTYPE1\nZVTYPE3\nZVTYPTO\nZVUNIQE1\nZVUNIQE2\nZVUNIQE3\nZVUNIQU1\nZVUNIQU2\nZVUPDAT1\nZVUPGRA1\nZVWA\nZVWARN\nZVWARN2\nZVWB\nZVWC\nZVWD\nZWCM\nZWCMDES1\nZWDSLV\nZWDSLVV\nZWHITE\nZWIDTH\nZWINTTL\nZWJUST\nZWKDSN\nZWPBOX\nZWPBOXV\nZWPDEFA\nZWPDEFC\nZWPDEFD\nZWPDEFM\nZWPDEFO\nZWPDEFS\nZWPDEFWS\nZWPEML\nZWPEMLV\nZWPEP\nZWPEPV\nZWPEXE\nZWPEXEV\nZWPT\nZWRKFILE\nZWRKOSV\nZWSBAPPC\nZWSBCON\nZWSBFLAG\nZWSBNET\nZWSBTCP\nZWSBV\nZWSBVE\nZWSCON\nZWSCONNT\nZWSDADD\nZWSDBRO\nZWSDCRE\nZWSDDIR\nZWSDMTHD\nZWSDPDS\nZWSDPLAT\nZWSDPWD\nZWSDUSR\nZWSOPSYS\nZWSPATTR\nZWSSVE\nZWSSVEX\nZX\nZXSB\nZXSC\nZXSCLM\nZXSCR\nZXXX\nZX1\nZX2\nZX3\nZYELLOW\nZYFPFUNR\nZYV3F\nZYV3W\nZYV4F\nZYV4W\nZYV6F\nZYV6W\nZZUSER\nZ0\nZ1\nZ10\nZ1850\nZ2\nZ2DATEJ\nZ2PREF\nZ3\nZ3WIN\nZ313PREF\nZ33DSN1\nZ33DSN2\nZ33DSN3\nZ33DSN4\nZ4\nZ4DATEF\nZ4DATEJ\nZ4WIN\nZ49BROPT\nZ49DFOPT\nZ49STYLE\nZ5\nZ5CUSCUT\nZ5CUSCUV\nZ6\nZ6LST1\nZ6LST2\nZ6MODE\nZ6MOD1\nZ6MOD2\nZ6MOD4\nZ6MOD5\nZ6MOD6\nZ6WIN\nZ7\nZ8\nZ9\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y99": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x03\\x9f\\x01\\x00\\x03\\x9f\\x19R\\x008\\x005\\x00\\x00\\xc2\\xc5\\xd9\\xd5\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-08T00:00:00", "modifydate": "2000-02-08T19:52:00", "lines": 56, "newlines": 53, "modlines": 0, "user": "BERNING"}, "text": "         /*Copyright 7 Dec 1999 by JBG REXX Y99                      */\n         /*----------------------------------------------------------*/\n         /* The author can be reached at joerg.berning(at)gmx.net    */\n         /*----------------------------------------------------------*/\n         trace off\n         address isredit\n         \"MACRO\"\n         \"(MYDSN) = DATASET\"\n         \"(MYMEM) = MEMBER\"\n         myDSN = strip(myDSN,b,\"'\")\n         address ispexec\n         \"LMINIT DATAID(MYDATAID) DATASET('\"myDSN\"')\"\n         if RC <> 0 then\n           do\n             say zErrLM\n             exit\n           end\n         \"LMOPEN DATAID(\"myDataID\") OPTION(INPUT)\"\n         if RC <> 0 then\n           do\n             say zErrLM\n             exit\n           end\n         \"LMMFIND DATAID(\"myDataID\") MEMBER(\"myMem\") STATS(YES)\"\n         if RC <> 0 then\n           do\n             say zErrLM\n             exit\n           end\n         myZlVers = zlVers\n         myZlMod = zlMod\n         myZlCDate = zlCDate\n         myZlC4Date = zlC4Date\n         myZlMDate = \"99/01/01\"\n         myZlM4Date = \"1999/01/01\"\n         myZlMTime = \"11:11:11\"\n         myZlCNoRc = zlCNoRc\n         myZlINoRC = zlINoRC\n         myZlMNoRC = zlMNoRC\n         myZlUser = zlUser\n         \"LMMSTATS\",\n           \"MEMBER(\"myMem\")\",\n           \"DATAID(\"myDataID\")\",\n           \"VERSION(\"myZlVers\")\",\n           \"MODLEVEL(\"myZlMod\")\",\n           \"CREATED(\"myZlCDate\")\",\n           \"MODDATE(\"myZlMDate\")\",\n           \"MODTIME(\"myZlMTime\")\",\n           \"CURSIZE(\"myZlCNoRC\")\",\n           \"INITSIZE(\"myZlINoRC\")\",\n           \"MODRECS(\"myZlMNoRC\")\",\n           \"USER(\"myZlUser\")\",\n           \"CREATED4(\"myZlC4Date\")\",\n           \"MODDATE4(\"myZlM4Date\")\"\n         \"LMCLOSE DATAID(\"myDataID\")\"\n         \"LMFREE DATAID(\"myDataID\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT344/FILE344.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT344", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}