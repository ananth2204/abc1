{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013630000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 12815348, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE973.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 12815348, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 12815348, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE973.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\xc3\\r'", "DS1TRBAL": "b'\\x11\\xee'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xc0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\n%\\x00\\x01\\n2\\x00\\x01\\x00\\xc4'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x13\\x01\\x19$\\x1f\\x01\\x19$\\x1f\\x16\\x02\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-29T00:00:00", "modifydate": "2019-08-29T16:02:13", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  973\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE973\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 27 MEMBERS COUNTED; CUMULATIVE SIZE IS 121,494 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/29/19    16:02:13    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PDSLOA$": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00A\\x01\\x026_\\x01\\x19#\\x9f\\x14E\\x00.\\x00\\x08\\x00\\x00\\xe3\\xe3\\xe2\\xc4\\xe2@@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2019-08-27T14:45:41", "lines": 46, "newlines": 8, "modlines": 0, "user": "TTSDS"}, "text": "//PDSLOAD  JOB (ACCT),\n//             '                    ',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             MSGLEVEL=(1,1),\n//             REGION=0M,\n//             NOTIFY=&SYSUID\n//*\n//*    PDSLOAD JOB TO CREATE SOME WATFIV DATASETS\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('TTSDS.FILE973.PDS(PDSLOAD)')\n   DSN('TTSDS.WATFIV.LOAD')\n/*\n//*\n//PDSLOAD PROC IPDS='TTSDS.FILE973.PDS',      <=== CHANGE\n//             OPRE=TTSDS,\n//             QUAL=WATFIV,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=TTSDS.WATFIV.LOAD\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=FUNLIB\n//S002 EXEC PDSLOAD,MEMB=MACLIB\n//S003 EXEC PDSLOAD,MEMB=MESSAGE\n//S004 EXEC PDSLOAD,MEMB=PLOTLIB\n//S005 EXEC PDSLOAD,MEMB=PROCLIB\n//S006 EXEC PDSLOAD,MEMB=SOURCE\n//S007 EXEC PDSLOAD,MEMB=TESTS\n//S008 EXEC PDSLOAD,MEMB=WATLIB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PDSLOAD": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x13\\x01\\x026_\\x01\\x18\\x03\\x9f\\x14P\\x00*\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2018-02-08T14:50:13", "lines": 42, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*    PDSLOAD JOB TO CREATE SOME WATFIV DATASETS\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT496.FILE973(PDSLOAD)')\n   DSN('SBGOLOB.WATFIV.LOAD')   VOL(WORKA2)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT496.FILE973',      <=== CHANGE\n//             OPRE=IBMUSER,\n//             QUAL=WATFIV,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.WATFIV.LOAD\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=FUNLIB\n//S002 EXEC PDSLOAD,MEMB=MACLIB\n//S003 EXEC PDSLOAD,MEMB=MESSAGE\n//S004 EXEC PDSLOAD,MEMB=PLOTLIB\n//S005 EXEC PDSLOAD,MEMB=PROCLIB\n//S006 EXEC PDSLOAD,MEMB=SOURCE\n//S007 EXEC PDSLOAD,MEMB=TESTS\n//S008 EXEC PDSLOAD,MEMB=WATLIB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE973": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x05\\x01\\x19$\\x1f\\x01\\x19$\\x1f\\x16\\x02\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-29T00:00:00", "modifydate": "2019-08-29T16:02:05", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 973 is from Jay Moseley and contains the WATFIV Fortran   *   FILE 973\n//*           compiler and library from the University of Waterloo. *   FILE 973\n//*                                                                 *   FILE 973\n//*       website:                                                  *   FILE 973\n//*       http://www.jaymoseley.com/hercules/compilers/watfiv.htm   *   FILE 973\n//*                                                                 *   FILE 973\n//*       We have packaged the material from this website for use   *   FILE 973\n//*       directly on z/OS.                                         *   FILE 973\n//*                                                                 *   FILE 973\n//*       Fixes and some corrections were made by David Spiegel.    *   FILE 973\n//*                                                                 *   FILE 973\n//*       email:  dspiegelcan@hotmail.com                           *   FILE 973\n//*                                                                 *   FILE 973\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AWSTAPE": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x18\\x03\\x9f\\x01\\x18\\x03\\x9f\\x14\\x10\\xe2\\x07\\xe2\\x07\\x00\\x00\\xc1\\xe6\\xe2\\xe3\\xc1\\xd7\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-02-08T00:00:00", "modifydate": "2018-02-08T14:10:31", "lines": 57863, "newlines": 57863, "modlines": 0, "user": "AWSTAPE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "ERRTEXTS": {"ttr": 24068, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x18\\x03\\x9f\\x01\\x18\\x03\\x9f\\x13X\\x02*\\x02*\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-02-08T00:00:00", "modifydate": "2018-02-08T13:58:55", "lines": 554, "newlines": 554, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "FUNLIB": {"ttr": 24323, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00A\\x00\\x80\\x00\\x1f\\x01\\x19#\\x9f\"\\x18\\x031\\x03\\x08\\x00\\x00\\xe3\\xe3\\xe2\\xc4\\xe2@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2019-08-27T22:18:41", "lines": 817, "newlines": 776, "modlines": 0, "user": "TTSDS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FUNLIB@": {"ttr": 24582, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\\x00\\x1f\\x01\\x18\\x03\\x9f\\x132\\x03\\x08\\x03\\x08\\x00\\x00\\xe6\\xc1\\xe3\\xc6\\xc9\\xe5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2018-02-08T13:32:00", "lines": 776, "newlines": 776, "modlines": 0, "user": "WATFIV"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "JOBLIB": {"ttr": 24841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x18\\x03\\x9f\\x01\\x18\\x03\\x9f\\x13X\\x05\\x8b\\x05\\x8b\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-02-08T00:00:00", "modifydate": "2018-02-08T13:58:55", "lines": 1419, "newlines": 1419, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "MACLIB": {"ttr": 25603, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x00\\x80\\x00\\x1f\\x01\\x18\\x03\\x9f\\x13P\\x0eX\\x0eX\\x00\\x00\\xe6\\xc1\\xe3\\xc6\\xc9\\xe5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2018-02-08T13:50:26", "lines": 3672, "newlines": 3672, "modlines": 0, "user": "WATFIV"}, "text": "./ ADD NAME=$AFTLIST 0100-80001-80001-1200-00021-00021-00000-MACLIB  00\n         MACRO\n         $AFTLIST  &BEGLIST,&DUMMYNM\n         GBLC      &FUNAME(255),&FMODE(255)\n         GBLA      &NUMFUN,&HCHAIN(255),&LCHAIN(255),&HEAD\n         LCLA      &N\n         LCLC      &SPMODE                                         V1L4\n         BINTREE\n         DS        0F                  ALIGN LIST                  V1L4\n&DUMMYNM DC        CL6'*-*',AL1(FUNC+REAL4)    NAME, TYPE          V1L4\n         DC        AL1(&HEAD,&HEAD),AL3(&DUMMYNM) LOPTR,HIPTR,ADDR V1L4\n&BEGLIST EQU       *\n&N       SETA      1\n.LOOP    ANOP\n&SPMODE  SETC      'FUNC+'                                         V1L4\n         AIF       ('&FMODE(&N)' NE 'SUBR').FUNC                   V1L4\n&SPMODE  SETC      ''                                              V1L4\n.FUNC    DC        CL6'&FUNAME(&N)',AL1(&SPMODE&FMODE(&N))         V1L4\n         DC    AL1(&LCHAIN(&N)),AL1(&HCHAIN(&N)),AL3(*-*)          V1L4\n&N       SETA      &N+1\n         AIF       (&N LE &NUMFUN).LOOP\n         MEND\n./ ADD NAME=$ERROR   0100-80001-80001-1200-00073-00073-00000-MACLIB  00\n         MACRO\n&NAME    $ERROR    &ERCD,&RET,&SAVE                                V1L5\n         GBLA      &ERROR#\n         LCLC      &P4,&P5\n         LCLA      &X\n         LCLC      &Y\n&ERROR#  SETA      &ERROR#+1\n&P4      SETC      '&ERCD(4)'\n&P5      SETC      '&ERCD(5)'\n&NAME    DC        0H'0'\n         AIF       (T'&SAVE EQ 'O').NOSAV\n         AIF       ('&SYSLIST(3)'(1,4) EQ 'SAVE').SAVOK\n         MNOTE '*** INVALID SAVE PARAMETER ***'\n.SAVOK   ANOP\n.*   SAVE REGISTERS IN LINE\n.*  USE XERRENT1 IF ERRCODE IN-LINE (I.E. AT 0(R14))\n.* USE XERRENT2 IF ERRCODE OUT OF LINE (I.E. AT 0(R1))\n         STM       R0,R15,XHELPS\n         AIF       (T'&ERCD EQ 'O').NOCD\n         BAL       R14,XERRENT1\n         ERRCODE   (&ERCD(1),&ERCD(2),&ERCD(3),&P4,&P5,&ERCD(6))\n         AGO       .LDREG\n.NOCD    ANOP\n         BAL       R14,XERRENT2\n.LDREG   LM        R0,R15,XHELPS\n         AIF       ('&RET' NE 'DONE' AND '&RET' NE 'LOOP').TRYAGN\n         BR        R&RET\n         MEXIT\n.TRYAGN  ANOP\n&X       SETA      1\n.LKKX1   ANOP\n&Y       SETC      '&X'\n         AIF       ('&RET' EQ 'R&Y').LKKX2\n.AXIS14  ANOP\n&X       SETA      &X+1\n         AIF       (&X GT 15).CHKRET\n         AIF       (&X EQ 14).AXIS14\n         AGO       .LKKX1\n.LKKX2   BR        &RET\n         MEXIT\n.NOSAV   AIF       (T'&ERCD EQ 'O').NOCD1\n.*  SAVE REGISTERS AT ERROR EDITOR\n.* USE XERRENT3 IF ERRCODE IS IN-LINE (I.E. AT 0(R14))\n.* USE XERRENT4 IF ERRCODE IS OUT OF LINE (I.E. AT 0(R1))\n         AIF       ('&RET' EQ 'DONE').DONE\n&X       SETA      1\n.LKKA1   ANOP\n&Y       SETC      '&X'\n         AIF       ('&RET' EQ 'R&Y').LKKA2\n.BXIS14  ANOP\n&X       SETA      &X+1\n         AIF       (&X GT 15).NXT\n         AIF       (&X EQ 14).BXIS14\n         AGO       .LKKA1\n.NXT     ANOP\n         AIF       ('&RET' NE 'LOOP').REG14\n         LR        R14,R11\n.DONE    ANOP\n         BAL       R1,XERRENT4\n         ERRCODE   (&ERCD(1),&ERCD(2),&ERCD(3),&P4,&P5,&ERCD(6))\n         MEXIT\n.LKKA2   LR        R14,&RET\n         AGO       .DONE\n.REG14   ANOP\n         BAL       R14,XERRENT3\n         ERRCODE   (&ERCD(1),&ERCD(2),&ERCD(3),&P4,&P5,&ERCD(6))\n         AGO       .CHKRET\n.NOCD1   ANOP\n         BAL       R14,XERRENT4\n.CHKRET  AIF       (T'&RET EQ 'O').END\n         B         &RET\n.END     ANOP\n         MEND\n./ ADD NAME=$EXIT    0100-80001-80001-1200-00024-00024-00000-MACLIB  00\n         MACRO\n&NAME $EXIT &TY\n LCLA &AL1\n* SUPVR COMMN MACROS - EXIT - 5745-SC-SUP - REL. 28.0\n         AIF   (T'&TY EQ 'O').MIS\n         AIF   ('&TY' EQ 'OC').OC\n         AIF   ('&TY' EQ 'IT').IT\n         AIF   ('&TY' EQ 'PC').PC\n         AIF   ('&TY' EQ 'MR').MR\n         MNOTE 5,'TYPE INVALID - MACRO IGNORED'\n         MEXIT\n.MR      ANOP\n&AL1     SETA  &AL1+7\n.OC      ANOP\n&AL1     SETA  &AL1+2\n.IT      ANOP\n&AL1     SETA  &AL1+2\n.PC      ANOP\n&AL1     SETA  &AL1+17\n&NAME    SVC   &AL1\n         MEXIT\n.MIS     ANOP\n         MNOTE 5,'OPERAND OMITTED - MACRO IGNORED'\n         MEND\n./ ADD NAME=$FLIST1  0100-80001-80001-1200-00011-00011-00000-MACLIB  00\n         MACRO\n&NAME    $FLIST1   &FN,&MODE\n         GBLC      &STATUS,&TEST\n         LCLC      &TN\n&TN      SETC      '&FN'.'     '\n&TN      SETC      '&TN'(1,6)\n&TEST    SETC      '&TN'\n         STATUS    &FN\n         AIF       ('&STATUS'(1,4) NE 'CORE').END\n         ADDLIST   &FN,&MODE\n.END     MEND\n./ ADD NAME=$FREE    0100-80001-80001-1200-00011-00011-00000-MACLIB  00\n         MACRO\n         $FREE\n         GBLA      &FREE#\n         LCLA      &I\n&FREE#   SETA      &FREE#+1\n&I       SETA      1\n.A       ANOP\n         USING     Z&SYSLIST(&I),&SYSLIST(&I)\n&I       SETA      &I+1\n         AIF       (&I LE N'&SYSLIST).A\n         MEND\n./ ADD NAME=$PUNCH   0100-80001-80001-1200-00007-00007-00000-MACLIB  00\n         MACRO                                                     DVS2\n         $PUNCH    &NAME                                           DVS2\n         GBLB      &NDVSD                                          DVS2\n         AIF       (&NDVSD).NOPUNCH                                DVS2\n         PUNCH     '   CATALR &NAME'                               DVS2\n.NOPUNCH ANOP                                                      DVS2\n         MEND                                                      DVS2\n./ ADD NAME=$READCHK 0100-80001-80001-1200-00026-00026-00000-MACLIB  00\n         MACRO                                                     V1L5\n         $READCHK  &DUMMY                                          V1L5\n         GBLC      &RDONLY             READ ONLY FILES             V1L5\n         GBLA      &READSTR,&READEND,&PRINT,&PUNCH,&NOUTILS        V1L5\n         AIF       ('&RDONLY' EQ 'OMIT').RDONE                     V1L5\n         AIF       (&READEND NE 0).RD1                             V1L5\n&READEND SETA      &NOUTILS                                        V1L5\n.RD1     ANOP                                                      V1L5\n         AIF       ((&READSTR GT 0) AND (&READEND GT 0) AND (&READSTR  *\n               LE &NOUTILS) AND (&READEND LE &NOUTILS)).RD2        V1L5\n         MNOTE     8,'***  THE READ ONLY FILES ARE NOT IN THE RANGE 0 TX\n               O &&NOUTILS (&NOUTILS) *** '                        V1L5\n.RD2     ANOP                                                      V1L5\n         AIF       (&READSTR LE &READEND).RD3                      V1L5\n         MNOTE     8,'*** THE VALUE OF &&READSTR (&READSTR) IS GREATER X\n               THAN &&READEND (&READEND) ***'                      V1L5\n.RD3     ANOP                                                      V1L5\n         AIF   ((&PRINT LT &READSTR) OR (&PRINT GT &READEND)).RD4  V1L5\n         MNOTE     8,'***  THE VALUE OF &&PRINT (&PRINT) IS IN THE RANGX\n               E OF READ ONLY FILES ***'                           V1L5\n.RD4     ANOP                                                      V1L5\n         AIF  ((&PUNCH LT &READSTR) OR (&PUNCH GT &READEND)).RDONE V1L5\n         MNOTE     8,'***  THE VALUE OF &&PUNCH (&PUNCH) IS IN THE RANGX\n               E OF READ ONLY FILES ***'                           V1L5\n.RDONE   ANOP                                                      V1L5\n         MEND                                                      V1L5\n./ ADD NAME=ADDLIST  0100-80001-80001-1200-00008-00008-00000-MACLIB  00\n         MACRO\n         ADDLIST   &NAME,&MODE\n         GBLC      &FUNAME(255),&FMODE(255)\n         GBLA      &NUMFUN\n&NUMFUN  SETA      &NUMFUN+1\n&FUNAME(&NUMFUN)   SETC      '&NAME'\n&FMODE(&NUMFUN)    SETC      '&MODE'\n         MEND\n./ ADD NAME=AFUNCDEF 0100-80001-80001-1200-00135-00135-00000-MACLIB  00\n         MACRO\n         AFUNCDEF  &CORE=,&OMIT=\n         GBLA      &IND1,&IND2,&FJ,&FDYN(255),&NUMFUN\n         GBLC      &FSTATUS(255),&FDYA(255)\n         LCLA      &L,&J,&K\n&NUMFUN  SETA      0\n&FJ      SETA      0\n&FJ      SETA      &FJ+1\n&FDYN(&FJ)   SETA  0\n&IND1    SETA      1\n&IND2    SETA      1\n         FUNCSSET  CCOS\n         FUNCSSET  CDABS\n         FUNCSSET  CDCOS\n         FUNCSSET  CDEXP\n         FUNCSSET  CDLOG\n         FUNCSSET  CDSIN\n         FUNCSSET  CDSQRT\n         FUNCSSET  CEXP\n         FUNCSSET  CLOG\n         FUNCSSET  CMPLX\n         FUNCSSET  CONJG\n         FUNCSSET  CSIN\n         FUNCSSET  CSQRT\n         FUNCSSET  DABS\n         FUNCSSET  DARCOS\n         FUNCSSET  DARSIN\n         FUNCSSET  DATAN\n         FUNCSSET  DATAN2\n         FUNCSSET  DBLE\n         FUNCSSET  DCMPLX\n         FUNCSSET  DCONJG\n         FUNCSSET  DCOS\n         FUNCSSET  DCOSH\n         FUNCSSET  DCOTAN\n         FUNCSSET  DERF\n         FUNCSSET  DERFC\n         FUNCSSET  DEXP\n         FUNCSSET  DFLOAT\n         FUNCSSET  DGAMMA\n         FUNCSSET  DLGAMA\n         FUNCSSET  DLOG\n         FUNCSSET  DLOG10\n         FUNCSSET  DMAX1\n         FUNCSSET  DMIN1\n         FUNCSSET  DMOD\n         FUNCSSET  DSIGN\n         FUNCSSET  DSIN\n         FUNCSSET  DSINH\n         FUNCSSET  DSQRT\n         FUNCSSET  DTAN\n         FUNCSSET  DTANH\n         FUNCSSET  HFIX\n&FSTATUS(&IND1)    SETC    'CORERES'\n.*       THIS LOOP IS THE FUNCCORE SECTION\n&L       SETA      0\n.LOOPC   AIF       (&L GE N'&CORE).ENDCORE\n&L       SETA      &L+1\n.*       FIND NAME IN (OR AT END OF ) FUNCTION DEPENDENCY TABLE\n&FDYA(&FJ) SETC    '&CORE(&L)'\n&J       SETA      0\n.C1      ANOP\n&J       SETA      &J+1\n         AIF       ('&FDYA(&J)' NE '&CORE(&L)').C1\n.*     SET STATUS OF NAME AND ROUTINES WHICH IT CALLS TO 'CORE'\n&K       SETA      1\n.C2      AIF       (&FDYN(&K) LT (&J-&K)).C3\n         SETSTAT   &FDYA(&K),CORE\n.C3      ANOP\n&K       SETA      &K+1\n         AIF       (&K LE &J).C2\n         AIF       (&J NE &FJ).C1\n         AGO       .LOOPC\n.ENDCORE ANOP\n.*       THIS IS THE FUNCOMIT SECTION\n&L       SETA      0\n.LOOP    AIF       (&L GE N'&OMIT).END\n&L       SETA      &L+1\n.*       FIND NAME IN (OR AT END OF) FUNCTION DEPENDENCY TABLE\n&FDYA(&FJ) SETC    '&OMIT(&L)'\n&J       SETA      0\n.L1      ANOP\n&J       SETA      &J+1\n         AIF       ('&FDYA(&J)' NE '&OMIT(&L)').L1\n.*       NOW SET STATUS OF GROUPS DEPENDING ON NAME TO 'OMIT'\n&K       SETA      &J+&FDYN(&J)\n.L2      ANOP\n         SETSTAT   &FDYA(&J),OMIT\n&J       SETA      &J+1\n         AIF       (&J LE &K).L2\n         AGO       .LOOP\n.END     ANOP\n         $FLIST1  CCOS,COMPL8\n         $FLIST1  CDABS,REAL8\n         $FLIST1  CDCOS,COMPL16\n         $FLIST1  CDEXP,COMPL16\n         $FLIST1  CDLOG,COMPL16\n         $FLIST1  CDSIN,COMPL16\n         $FLIST1  CDSQRT,COMPL16\n         $FLIST1  CEXP,COMPL8\n         $FLIST1  CLOG,COMPL8\n         $FLIST1  CMPLX,COMPL8\n         $FLIST1  CONJG,COMPL8\n         $FLIST1  CSIN,COMPL8\n         $FLIST1  CSQRT,COMPL8\n         $FLIST1  DABS,REAL8\n         $FLIST1  DARCOS,REAL8\n         $FLIST1  DARSIN,REAL8\n         $FLIST1  DATAN,REAL8\n         $FLIST1  DATAN2,REAL8\n         $FLIST1  DBLE,REAL8\n         $FLIST1  DCMPLX,COMPL16\n         $FLIST1  DCONJG,COMPL16\n         $FLIST1  DCOS,REAL8\n         $FLIST1  DCOSH,REAL8\n         $FLIST1  DCOTAN,REAL8\n         $FLIST1  DERF,REAL8\n         $FLIST1  DERFC,REAL8\n         $FLIST1  DEXP,REAL8\n         $FLIST1  DFLOAT,REAL8\n         $FLIST1  DGAMMA,REAL8\n         $FLIST1  DLGAMA,REAL8\n         $FLIST1  DLOG,REAL8\n         $FLIST1  DLOG10,REAL8\n         $FLIST1  DMAX1,REAL8\n         $FLIST1  DMIN1,REAL8\n         $FLIST1  DMOD,REAL8\n         $FLIST1  DSIGN,REAL8\n         $FLIST1  DSIN,REAL8\n         $FLIST1  DSINH,REAL8\n         $FLIST1  DSQRT,REAL8\n         $FLIST1  DTAN,REAL8\n         $FLIST1  DTANH,REAL8\n         $FLIST1  HFIX,INTGER2\n         MEND\n./ ADD NAME=ARG      0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    ARG       &ARG,&MODE\n&NAME    DC        AL1(SIMPLVAL+&MODE),AL3(&ARG)                   V1L4\n         MEND\n./ ADD NAME=ASTATLIS 0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n         ASTATLIS\n         GBLC      &FNAME(255),&FSTATUS(255),&FMODE(255)\n         GBLA      &IND1\n         LCLA      &N\n         LCLC      &NAME                                           V1L4\n&N       SETA      1\n         MNOTE     0,'  THE STATUS OF EACH SUBPROGRAMME IS AS FOLLOWS'\n.LIST    ANOP\n&NAME    SETC      '&FNAME(&N)'.'       '                          V1L4\n&NAME    SETC      '&NAME'(1,6)                                    V1L4\n         MNOTE     *,'   &NAME    &FMODE(&N)     '                 V1L4\n&N       SETA      &N+1\n         AIF       (&N LT &IND1).LIST\n         MEND\n./ ADD NAME=BB       0100-80001-80001-1200-00012-00012-00000-MACLIB  00\n         MACRO\n&NAME    BB        &A,&B\n         AIF       ('&B'EQ'').XXX\n&NAME    DC        0H'0',AL4(&A-&B)\n         AGO       .YYY\n.XXX     ANOP\n&NAME    DC        0H'0',AL4(&A-XIOBASE)\n.YYY     ANOP\n         ORG       *-4\n         DC        X'47FF'\n         ORG       *+2\n         MEND\n./ ADD NAME=BEGOBJ   0100-80001-80001-1200-00003-00003-00000-MACLIB  00\n         MACRO\n&A       BEGOBJ    &B\n         MEND\n./ ADD NAME=BER      0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BER       &REG\n&NAME    BCR       8,&REG\n         MEND\n./ ADD NAME=BHR      0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BHR       &REG\n&NAME    BCR       2,&REG\n         MEND\n./ ADD NAME=BINTREE  0100-80001-80001-1200-00039-00039-00000-MACLIB  00\n         MACRO\n         BINTREE\n         GBLA      &NUMFUN,&HCHAIN(255),&LCHAIN(255)\n         GBLA      &HEAD\n         LCLA      &TOP,&HI,&LOW,&STACK(255)\n         LCLA &L,&NXTOP,&N,&NOTE(255)\n         LCLA      &LINK\n&LOW     SETA      1\n&TOP     SETA      &NUMFUN+1\n&STACK(&TOP)       SETA      &TOP\n&HEAD    SETA      (&LOW+&TOP)/2\n.AGAIN   ANOP\n&HI      SETA      &STACK(&TOP)\n&L       SETA      (&LOW+&HI)/2\n&TOP     SETA      &TOP-1\n&STACK(&TOP)       SETA      &L\n         AIF       (&NOTE(&L) EQ 1).POPUP\n&LINK    SETA      &TOP+1\n&LCHAIN(&STACK(&LINK))       SETA   &L\n&NOTE(&STACK(&LINK))    SETA    1\n         AIF       (&HCHAIN(&L) EQ &STACK(&LINK)).RESET1\n.TEST    AIF       (&L EQ &LOW).POPUP\n         AGO       .AGAIN\n.RESET1  ANOP\n&LCHAIN(&STACK(&LINK))  SETA      0\n         AGO       .TEST\n.POPUP   ANOP\n&TOP     SETA      &TOP+1\n         AIF       (&STACK(&TOP) EQ (&NUMFUN+1)).END\n&NXTOP   SETA      &TOP+1\n         AIF       ((&STACK(&NXTOP)-&STACK(&TOP)) EQ 1).POPUP\n&LOW     SETA      &STACK(&TOP)\n&HI      SETA      &STACK(&NXTOP)\n&N       SETA      (&LOW+&HI)/2\n&HCHAIN(&STACK(&TOP))   SETA &N\n&STACK(&TOP)       SETA      &N\n         AGO       .AGAIN\n.END     ANOP\n         MEND\n./ ADD NAME=BLR      0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BLR       &REG\n&NAME    BCR       4,&REG\n         MEND\n./ ADD NAME=BNER     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BNER      &REG\n&NAME    BCR       7,&REG\n         MEND\n./ ADD NAME=BNEW     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BNEW      &LABEL\n&NAME    BE        &LABEL\n         MEND\n./ ADD NAME=BNHR     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BNHR      &R\n&NAME    BCR       13,&R\n         MEND\n./ ADD NAME=BNLCR    0100-80001-80001-1200-00006-00006-00000-MACLIB  00\n         MACRO\n&NAME    BNLCR     &REG\n&NAME    BCR       12,&REG\n.*   BRANCH NOT LOGICAL CARRY TO &REG\n.*   CONDITION CODE SET BY PREVIOUS  LOGICAL ADD OR SUBTRACT\n         MEND\n./ ADD NAME=BNLR     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&A       BNLR      &B\n&A       BCR       11,&B\n         MEND\n./ ADD NAME=BNMR     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&A       BNMR      &B\n&A       BCR       11,&B\n         MEND\n./ ADD NAME=BNOR     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BNOR      &REG\n&NAME    BCR       14,&REG\n         MEND\n./ ADD NAME=BNPR     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BNPR      &REG\n&NAME    BCR       13,&REG\n         MEND\n./ ADD NAME=BNZR     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&A       BNZR      &B\n&A       BCR       7,&B\n         MEND\n./ ADD NAME=BOLD     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BOLD      &LABEL\n&NAME    BNE       &LABEL\n         MEND\n./ ADD NAME=BOR      0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&LABEL   BOR       &REG\n&LABEL   BCR       1,&REG\n         MEND\n./ ADD NAME=BPR      0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BPR       &REG\n&NAME    BCR       2,&REG\n         MEND\n./ ADD NAME=BZR      0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    BZR       &REG\n&NAME    BCR       8,&REG\n         MEND\n./ ADD NAME=CALLDCL  0100-80001-80001-1200-00010-00010-00000-MACLIB  00\n         MACRO\n&NAME    CALLDCL   &DNAME,&LEVEL\n         CNOP      2,4\n         USING     *,R15\n&NAME    L     R4,=V(XC@LDC)                                       V1L4\n          BALR     R15,R4\n         DROP      R15                                             V1L4\n         DC        CL8'&NAME'\n         DC    A(&DNAME)                                           V1L4\n         MEND\n./ ADD NAME=CALLDUBL 0100-80001-80001-1200-00012-00012-00000-MACLIB  00\n         MACRO\n&NAME    CALLDUBL  &DNAME\n         LCLA      &M\n&M       SETA      N'&SYSLIST-1\n         CNOP      2,4\n         USING     *,R15\n&NAME    L     R4,=V(XC@LD&M)                                      V1L4\n         BALR      R15,R4\n         DROP      R15                                             V1L4\n         DC        CL8'&NAME'\n         DC    A(&DNAME)                                           V1L4\n         MEND\n./ ADD NAME=CBALR    0100-80001-80001-1200-00005-00005-00000-MACLIB  00\n         MACRO\n&A       CBALR\n&A       BALR      RP,0\n         USING     *,RP\n         MEND\n./ ADD NAME=CCTABLE  0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n         CCTABLE\n         GBLC      &CCTAB1(255)\n         GBLA      &CCTAB2(255)\n         LCLA      &NUM,&I,&LINES\n&I       SETA      1\n&NUM     SETA      N'&SYSLIST\n.LOOP      ANOP\n&CCTAB1(&I)   SETC   '&SYSLIST(&I,1)'(2,1)\n&CCTAB2(&I)  SETA   &SYSLIST(&I,2)\n&I       SETA      &I+1\n         AIF       (&I LE &NUM).LOOP\n&CCTAB1(&I) SETC  '$'\n&CCTAB2(&I)  SETA  1\n         MEND\n./ ADD NAME=CDROP    0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&A       CDROP     &B\n         FREE      &B(2)                                           V1L4\n         MEND\n./ ADD NAME=CENT     0100-80001-80001-1200-00011-00011-00000-MACLIB  00\n         MACRO\n&LABEL   CENT      &SAVER\n         GBLA      &CENT#\n&CENT#   SETA      &CENT#+1\n         CNOP      0,4\n&LABEL   STM       R14,R11,12(R13)\n         BAL       RP,CENT\n         USING     *,RP\n         DC        A(&SAVER)                                       V1L4\n         USING     &SAVER,R13\n         MEND\n./ ADD NAME=CHCKA    0100-80001-80001-1200-00017-00017-00000-MACLIB  00\n         MACRO\n&NAME    CHCKA     &ADDR,&MODE,&VL                                 V1L4\n         LCLC      &D                                              V1L4\n&D       SETC      '&ADDR'(1,1)                                    V1L4\n&NAME    CLI       &ADDR,SIMPLVAL+&MODE                            V1L4\n         BE        *+12                                            V1L4\n         CLI       &ADDR,&MODE\n         AIF       ('&VL' NE '').VL    VARIABLE-LENGTH ARGLIST FLAG ?L4\n         AIF       ('&D' EQ '4' OR '&D' EQ '0').OK                 V1L4\n         MNOTE     8,'### INVALID USE OF CHCKA ###'                V1L4\n.OK      BNE       XBADARG+4-&D                                    V1L4\n         MEXIT                                                     V1L4\n.VL      AIF       ('&VL' NE 'VL').BADVL                           V1L4\n         AIF       ('&D' EQ '0').OKVL                              V1L4\n.BADVL   MNOTE     8,'### INVALID VL USE OF CHCKA ###'             V1L4\n.OKVL    BNE       XVLARGS                                         V1L4\n         MEND\n./ ADD NAME=CHCKA2   0100-80001-80001-1200-00007-00007-00000-MACLIB  00\n         MACRO\n&NAME    CHCKA2    &ADDR,&MODE\n&NAME    TM        &ADDR,ARRAYELM      LAST ARG WAS ARRAY ELT ?    V1L4\n         BNO       *+8\n         LA        R1,4(,R1)\n         CHCKA     &ADDR,&MODE\n         MEND\n./ ADD NAME=CHCKDEF  0100-80001-80001-1200-00005-00005-00000-MACLIB  00\n         MACRO\n&NAME    CHCKDEF   &MODE,&ADDR\n&NAME    CLC       XUNDEF(L&MODE),&ADDR\n         EX        R0,XNOPDEFZ\n         MEND\n./ ADD NAME=CHCKL    0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n&NAME    CHCKL     &ADDR,&MODE,&IFNOT                              V1L4\n         LCLC      &D\n&D       SETC      '&ADDR'(1,1)\n&NAME    TM        &ADDR,ARRAYELM      LAST ARG WAS ARRAY ELT ?    V1L4\n         BNO       *+8\n         LA        R1,4(,R1)\n         CLI       &ADDR,FNARGTRM+&MODE  PROPER MODE AND TYPE ?    V1L4\n         AIF       ('&IFNOT' NE '').IFNOT                          V1L4\n         AIF       ('&D' EQ '4' OR '&D' EQ '8' OR '&D' EQ '0').OK\n         MNOTE  ' *** INVALID USE OF CHCKL *** '\n.OK      BNE       XFENT99+8-&D\n         MEXIT                                                     V1L4\n.IFNOT   BNE       &IFNOT                                          V1L4\n         MEND                                                      V1L4\n./ ADD NAME=CHCKLF   0100-80001-80001-1200-00006-00006-00000-MACLIB  00\n         MACRO\n&NAME    CHCKLF\n&NAME    IF        (ZR1,LAST),XERRSR21\n         B         XERRSR41\n         MNOTE     8,'###CHCKLF MACRO IS TO BE RETIRED###'         V1L4\n         MEND\n./ ADD NAME=CHCKLSR  0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    CHCKLSR   &ADDR\n&NAME    CHCKL     &ADDR,SPARGTRM-FNARGTRM                         V1L4\n         MEND\n./ ADD NAME=CLABLE   0100-80001-80001-1200-00005-00005-00000-MACLIB  00\n         MACRO\n&A       CLABLE    &B\n         AIF       ('&A'EQ'').A\n&A       DC        0H'0'\n.A       MEND\n./ ADD NAME=CLINK1   0100-80001-80001-1200-00026-00026-00000-MACLIB  00\n         MACRO\n&A       CLINK1    &B,&C,&D\n         AIF       ('&D'EQ'').A1\n&A       L         &D,=A(&B)                                       V1L5\n         AGO       .A5\n.A1      ANOP\n&A       L         RW,=A(&B)                                       V1L5\n.A5      AIF       ('&C'EQ'').A2\n         AIF       ('&C'EQ'DONE').A3\n         AIF       ('&C'EQ'LOOP').A4\n         LA        RDONE,&C\n         AGO       .A3\n.A4      ANOP\n         LR        RDONE,R&C\n.A3      AIF       ('&D'EQ'').A7\n         BR        &D\n         MEXIT\n.A7      ANOP\n         BR        RW\n         MEXIT\n.A2      AIF       ('&D'EQ'').A6\n         BALR      RDONE,&D\n         MEXIT\n.A6      ANOP\n         BALR      RDONE,RW\n         MEND\n./ ADD NAME=CMENT    0100-80001-80001-1200-00008-00008-00000-MACLIB  00\n         MACRO\n&A       CMENT     &B,&C\n         CNOP      0,4\n&A       STM       R14,R11,12(R13)\n         BAL       RDONE,CMENT\n         DC        A(&B)                                           V1L4\n         DC        A(&C+CENTUSE-CENTSEQ)                           V1L4\n         MEND\n./ ADD NAME=COREGEN  0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n         COREGEN\n         GBLC      &LIBSTAK,&CORLIST(255)\n         GBLA      &CORE#\n         AIF       ('&LIBSTAK' EQ 'USE').LOOP\n         DC        0D'0'\nDMYNAME  DC        CL8' '\nDMYTTR   DC        4X'00'\nSTAKBOT  EQU       *\n.LOOP    ANOP\n         DC        CL8'&CORLIST(&CORE#)',4X'00'\n&CORE#   SETA      &CORE#-1\n         AIF       (&CORE# NE 0).LOOP\nTABLE    EQU       *-12\n         MEND\n./ ADD NAME=CRET     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&LABEL   CRET\n&LABEL   B         CRET\n         MEND\n./ ADD NAME=CSNAP    0100-80001-80001-1200-00037-00037-00000-MACLIB  00\n         MACRO\n&NAME    CSNAP     &IDENT,&ADDR,&NBYTES\n         GBLC      &SNAPS\n         GBLA      &SNAPS#\n&SNAPS#  SETA      &SNAPS#+1\n         AIF       ('&NAME'EQ'').SNAPS1\n         MNOTE     '***ERROR*** LABLE INVALID IN SNAP MACRO'\n.SNAPS1  ANOP\n         AIF       ('&SNAPS'EQ'OMIT').SNAPS2\n         STM       R14,R12,XSNAPSAV+12\n         AIF       ('&ADDR' EQ '').A\n         AIF       ('&ADDR'(1,1)EQ'(').X\n         LA        R1,&ADDR\n         AGO       .A\n.X       ANOP\n         AIF       ('&ADDR'EQ'(R1)').A\n         LR        R1,&ADDR\n.A       ANOP\n         AIF       ('&NBYTES' EQ '').B\n         AIF       ('&NBYTES'(1,1)EQ'(').Y\n         AIF       ('&NBYTES'NE'1').ZZZ\n         SR        R2,R2\n         AGO       .B\n.ZZZ     ANOP\n         LA        R2,&NBYTES\n         BAL       R104,XSNAP1\n         AGO       .Z\n.Y       ANOP\n         AIF       ('&NBYTES'EQ'(R2)').B\n         LR        R2,&NBYTES\n.B       ANOP\n         BAL       R104,XSNAP\n.Z       ANOP\n         DC        CL8'&IDENT '\n         LM        R14,R12,XSNAPSAV+12\n.SNAPS2  ANOP\n         MEND\n./ ADD NAME=DEXTRN   0100-80001-80001-1200-00006-00006-00000-MACLIB  00\n         MACRO\n         DEXTRN    &FN\n         GBLC      &FUNCMOD\n         AIF       ('&FUNCMOD' NE 'DISK').DEND\n         EXTRN     &FN\n.DEND    MEND\n./ ADD NAME=DISK     0100-80001-80001-1200-00009-00009-00000-MACLIB  00\n         MACRO                                                     V1L4\n         DISK\n         GBLB  &DVSD                                               V1L5\n         COPY  CDEFN                                               V1L4\nFUNCREFS DSECT                                                     V1L4\n         FUNCREFS                                                  V1L4\n         FUNCDEFS                                                  V1L4\n         ERRTABLE                                                  V1L4\n         MEND                                                      V1L4\n./ ADD NAME=EMESSAGE 0100-80001-80001-1200-00024-00024-00000-MACLIB  00\n         MACRO\n         EMESSAGE &A,&B,&TEXT,&D,&E\n         GBLC  &WATTYPE,&ERROPT,&ERRSTAT\n         LCLC      &C1,&C2                                         V1L3\n         AIF   ('&ERROPT' EQ 'CODE').NEXT\n         AIF   ('&ERROPT' NE 'READ').BYPASS1\n         ERRSTAT &A&B\n         AIF   ('&ERRSTAT' NE 'CORE').NEXT\n.BYPASS1 ANOP\n&C1      SETC  '&A'\n&C2      SETC  '&B'\n         AIF   ('&D' EQ '').USEW5\n&C1      SETC  '&D'\n&C2      SETC  '&E'\n.USEW5   AIF   ('&WATTYPE' EQ 'DISTR').PROPER\n         DC        AL1($C&SYSNDX-&A&B.TEXT-1) LENGTH-1 OF TEXT     V1L5\n&A&B.TEXT DC    C'&C1-&C2 ',C&TEXT\n$C&SYSNDX EQU *                                                    V1L5\n         MEXIT\n.PROPER  ANOP\n         DC        AL1($C&SYSNDX-&A&B.TEXT-1) LENGTH-1 OF TEXT     V1L5\n&A&B.TEXT DC    C&TEXT\n$C&SYSNDX EQU *                                                    V1L5\n.NEXT    MEND\n./ ADD NAME=ENDOBJ   0100-80001-80001-1200-00003-00003-00000-MACLIB  00\n         MACRO\n&A       ENDOBJ    &B\n         MEND\n./ ADD NAME=EQUREGS  0100-80001-80001-1200-00020-00020-00000-MACLIB  00\n      MACRO\n&ADDR    EQUREGS\n&ADDR    DS        0H\nR0       EQU       0\nR1       EQU       1\nR2       EQU       2\nR3       EQU       3\nR4       EQU       4\nR5       EQU       5\nR6       EQU       6\nR7       EQU       7\nR8       EQU       8\nR9       EQU       9\nR10      EQU       10\nR11      EQU       11\nR12      EQU       12\nR13      EQU       13\nR14      EQU       14\nR15      EQU       15\n         MEND\n./ ADD NAME=ERRCODE  0100-80001-80001-1200-00087-00087-00000-MACLIB  00\n         MACRO\n&NAME    ERRCODE   &LIST\n         GBLC      &AC(8),&IN(21)\n         GBLA      &EXPAND,&IACMAX,&IINMAX\n         LCLA      &IAC,&IIN,&BUFV,&FLAG\n         LCLC      &INP,&REG,&MESNO,&ERCD,&ACTN,&ACD,&NCD\n&REG     SETC      '0'\n&MESNO   SETC      '0'\n         AIF       (&EXPAND GT 0).CHKACTN\n.*  THE FOLLOWING DEFINITIONS ARE DONE ONCE PER ASSEMBLY\n&EXPAND  SETA      1\n&AC(1)   SETC      'LANG'              0\n&AC(2)   SETC      'WARN'              1\n&AC(3)   SETC      'BOOT'              2\n&AC(4)   SETC      'ZERO'              3\n&AC(5)   SETC      'NOEX'              4\n&AC(6)   SETC      'NOAC'              5\n&AC(7)   SETC      'TRAZ'              6\n&IACMAX  SETA      8\n&IN(1)   SETC      'SYM'               1\n&IN(2)   SETC      'DEL'               2\n&IN(3)   SETC      'STN'               3\n&IN(4)   SETC      'ISN'               4\n&IN(5)   SETC      'REL'               5\n&IN(6)   SETC      'NAM'               6\n&IN(7)   SETC      'CSN'               7\n&IN(8)   SETC      'USN'               8\n&IN(9)   SETC      'CHR'               9\n&IN(10)  SETC      'VM8'              10\n&IN(11)  SETC      'VM6'              11\n&IN(12)  SETC      'VAR'              12\n&IN(13)  SETC      'NAV'              13\n&IN(14)  SETC      'NSS'              14\n&IN(15)  SETC      'INT'              15\n&IN(16)  SETC      'ARR'              16\n&IN(17)  SETC      'NAL'              17\n&IN(18)  SETC      'VLS'              18\n&IN(19)  SETC      'LIN'              19\n&IN(20)  SETC      'ENT'              20\n&IINMAX  SETA      21\n.*  CHECK ACTION PARAMETER\n.CHKACTN ANOP\n&ACTN    SETC      '&LIST(1)'\n&AC(&IACMAX) SETC  '&ACTN'\n.ACLOOP  ANOP\n&IAC     SETA      &IAC+1\n         AIF       ('&ACTN' NE '&AC(&IAC)').ACLOOP\n         AIF       (&IAC NE &IACMAX).CHKCODE\n         MNOTE     '    &ACTN IS INVALID ACTION PARAMETER'\n.*    CHECK ERROR CODE PARAMETERS\n.CHKCODE ANOP\n&ACD     SETC      '&LIST(2)'\n&NCD     SETC      '&LIST(3)'\n         AIF       ('&ACD' NE 'POINTER').CHK1\n&ERCD    SETC      '&NCD'\n         AGO       .CHKINFO\n.CHK1    AIF       ('&ACD' NE 'INREG').CHK2\n&ERCD    SETC      '&NCD'.'+16'\n         AGO       .CHKINFO\n.CHK2    ANOP\n&ERCD    SETC      '&ACD'.'&NCD'\n.*     CHECK INFO PARAMETERS\n.CHKINFO AIF       (T'&LIST(4) EQ 'O' OR K'&LIST(4) EQ 0).CHKMES\n&FLAG    SETA      1\n&INP     SETC      '&LIST(4)'(1,3)\n&IN(&IINMAX) SETC  '&INP'\n.INFLOOP ANOP\n&IIN     SETA      &IIN+1\n         AIF       ('&INP' NE '&IN(&IIN)').INFLOOP\n         AIF       (&IIN NE &IINMAX).OKIN\n         MNOTE     '    &INP IS INVALID INFO KEYWORD'\n         AGO       .CHKMES\n.OKIN    ANOP\n&REG     SETC      '&LIST(4)'(4,8)\n.*    CHECK MESSAGE PARAMETER\n.CHKMES  AIF       (T'&LIST(5) EQ 'O' OR K'&LIST(5) EQ 0).CHKBUF\n&FLAG    SETA      1\n&MESNO   SETC      '&LIST(5)'\n.*    CHECK BUFFER PARAMETER\n.CHKBUF  AIF       (T'&LIST(6) EQ 'O' OR K'&LIST(6) EQ 0).OUTPUT\n&BUFV    SETA      1\n.OUTPUT  ANOP\n&NAME    DC  0H'0',AL.1(&FLAG),AL.1(&BUFV),AL.1(0),AL.4(&IAC-1),AL.9(&E*\n               RCD)\n         AIF   (&FLAG EQ 0).END\n         DC        AL.1(0),AL.6(&MESNO),AL.5(&IIN),AL.4(&REG)\n.END     MEND\n./ ADD NAME=ERRDEFN  0100-80001-80001-1200-00043-00043-00000-MACLIB  00\n         MACRO\n         ERRDEFN &ERRCD,&W4CODE\n         GBLA  &ERRNUM\n         GBLC  &ERROPT,&ERRSTAT,&MINERR,&MAXERR\n         LCLC  &LCLCODE\n&ERRNUM  SETA  &ERRNUM+1\n         AIF   ('&ERRCD' EQ 'RESERVED').IGNORE\n&ERRCD   EQU   &ERRNUM+31\n.IGNORE  AIF   ('&SYSECT' NE 'ERROR').NEXT\n         AIF   ('&ERROPT' EQ 'FULL').FULL\n         AIF   ('&ERROPT' EQ 'READ').READ\n.*ASSUME &ERROPT IS 'CODE'\n         AIF   ('&ERRCD' NE 'RESERVED').NOTRES1\n         DC    CL3'???'            RESERVED FOR FUTURE USE\n         MEXIT\n.NOTRES1 ANOP\n&LCLCODE SETC  '&ERRCD'\n         AIF   ('&W4CODE' EQ '').USEW5\n&LCLCODE SETC  '&W4CODE'\n.USEW5   ANOP\n         DC    CL3'&LCLCODE'\n         MEXIT\n.FULL    AIF   ('&ERRCD' NE 'RESERVED').NOTRES2\n         DC    AL2(0)              RESERVED FOR FUTURE USE\n         MEXIT\n.NOTRES2 ANOP\n         DC    AL2(&ERRCD.TEXT-1-ERRTEXT)\n         MEXIT\n.READ    AIF   ('&ERRCD' NE 'RESERVED').NOTRES3\n         AIF   ('&MINERR' EQ '').NEXT\n         DC    AL1(0)              RESERVED FOR FUTURE USE\n         MEXIT\n.NOTRES3 ERRSTAT &ERRCD\n         AIF   ('&ERRSTAT' EQ 'CORE').INCORE\n         AIF       ('&MINERR' EQ '').NEXT\n         DC    X'00',0C'&ERRCD'    TEXT NOT IN CORE\n         MEXIT\n.INCORE  AIF   ('&MINERR' NE '').SKIP\n&MINERR  SETC  '&ERRCD'\n.SKIP    ANOP\n&MAXERR  SETC      '&ERRCD'\n         DC    AL1((&ERRCD.TAB2-ERR2TAB)/2+1)\n.NEXT    MEND\n./ ADD NAME=ERRLOCN  0100-80001-80001-1200-00024-00024-00000-MACLIB  00\n         MACRO\n         ERRLOCN &CORE=\n         GBLC  &ERROPT,&CORERRS(255)\n         GBLA  &ERCORI\n         LCLA  &I\n         AIF   ('&ERROPT' NE 'READ').EXIT\n&ERCORI  SETA  2\n&CORERRS(1)  SETC  'KO9'\n&CORERRS(2)  SETC  'KOA'\n         AIF   ('&CORE' EQ '').EXIT\n&I       SETA  N'&CORE+2\n         AIF   (&I LE 254).OK\n         MNOTE '*** MAX OF 254 IN-CORE TEXTS ALLOWED. FIRST 254 USED'\n&I       SETA  254\n.OK      AIF   (&I GT 1).GT1\n         AIF   ('&CORE(1)' NE 'ALL').GT1\n         MNOTE '***ERROPT=FULL ASSUMED'\n&ERROPT  SETC  'FULL'\n         MEXIT\n.GT1     ANOP\n&ERCORI  SETA  &ERCORI+1\n&CORERRS(&ERCORI) SETC '&CORE(&ERCORI-2)'\n         AIF   (&ERCORI LT &I).GT1\n.EXIT    MEND\n./ ADD NAME=ERRSTAT  0100-80001-80001-1200-00017-00017-00000-MACLIB  00\n         MACRO\n         ERRSTAT &ERRCD\n         GBLC  &ERROPT,&ERRSTAT,&CORERRS(255)\n         GBLA  &ERCORI\n         LCLA  &I\n         AIF   ('&ERROPT' EQ 'CODE').EXIT\n         AIF   ('&ERROPT' EQ 'FULL').INCORE\n&ERRSTAT SETC  'DISC'\n         AIF   (&ERCORI EQ 0).EXIT\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   ('&CORERRS(&I)' EQ '&ERRCD').INCORE\n         AIF   (&I LT &ERCORI).LOOP\n         MEXIT\n.INCORE  ANOP\n&ERRSTAT SETC  'CORE'\n.EXIT    MEND\n./ ADD NAME=ERRTABLE 0100-80001-80001-1200-00353-00353-00000-MACLIB  00\n         MACRO\n         ERRTABLE\n         GBLC      &WHOSIT,&RDONLY                                 V1L5\n.*   THIS MACRO DEFINES ALL ERROR CODES. TO ADD A NEW ONE, PUT IT AT\n.*    THE END AND ADD AN APPROPRIATE MESSAGE TO DECK\n.*        WATFIV.SOURCE(ERRTEXTS). MESSAGES CAN BE PLACED ANYWHERE IN\n.*          ERRTEXTS ,I.E. , NOT NECESSARILY AT THE END.\n.*  OTHER INSTALLATIONS:PLEASE DO NOT USE THE CODES 'RESERVED' BY\n.*  WATFOR PROJECT;SINCE THESE MAY BE REQUIRED ON UPDATES\n         GBLC      &STR                                            ST1\n         ERRDEFN   AL0\n         ERRDEFN   AL1\n         ERRDEFN   BD0\n         ERRDEFN   BD1\n         ERRDEFN   CC0\n         ERRDEFN   CC1\n         ERRDEFN   CC2\n         ERRDEFN   CC3\n         ERRDEFN   CC4\n         ERRDEFN   CC5\n         ERRDEFN   CC6\n         ERRDEFN   CC7\n         ERRDEFN   CC8\n         ERRDEFN   CC9\n         ERRDEFN   CM0\n         ERRDEFN   CM1\n         ERRDEFN   CM2\n         ERRDEFN   CN0\n         ERRDEFN   CN1\n         ERRDEFN   CN2\n         ERRDEFN   CN3\n         ERRDEFN   CN4\n         ERRDEFN   CN5\n         ERRDEFN   CN6\n         ERRDEFN   CN7\n         ERRDEFN   CN8\n         ERRDEFN   CP0\n         ERRDEFN   CP1\n         ERRDEFN   FM7                                             V1L2\n         ERRDEFN   EQ2\n         ERRDEFN   CP4\n         ERRDEFN   CV0\n         ERRDEFN   CV1\n         ERRDEFN   DA0\n         ERRDEFN   DA1\n         ERRDEFN   DA2\n         ERRDEFN   DA3\n         ERRDEFN   DA4\n         ERRDEFN   DA5\n         ERRDEFN   DA6\n         ERRDEFN   DA7\n         ERRDEFN   DA8\n         ERRDEFN   DA9\n         ERRDEFN   DF0\n         ERRDEFN   DF1\n         ERRDEFN   DF2\n         ERRDEFN   DM0\n         ERRDEFN   DM1\n         ERRDEFN   DM2\n         ERRDEFN   DM3\n         ERRDEFN   DO0\n         ERRDEFN   DO1\n         ERRDEFN   DO2\n         ERRDEFN   DO3\n         ERRDEFN   DO4\n         ERRDEFN   DO5\n         ERRDEFN   DO6\n         ERRDEFN   DO7\n         ERRDEFN   DO8\n         ERRDEFN   DO9\n         ERRDEFN   DOA\n         ERRDEFN   EC0\n         ERRDEFN   EC1\n         ERRDEFN   EC2\n         ERRDEFN   EC3\n         ERRDEFN   EC4\n         ERRDEFN   EC5\n         ERRDEFN   EN0\n         ERRDEFN   EN1\n         ERRDEFN   EN3                                             V1L2\n         ERRDEFN   EQ0\n         ERRDEFN   EQ1\n         ERRDEFN   EQ3\n         ERRDEFN   EV0\n         ERRDEFN   EV2\n         ERRDEFN   EX0\n         ERRDEFN   EX1\n         ERRDEFN   EX2\n         ERRDEFN   EX3\n         ERRDEFN   EX4\n         ERRDEFN   EX5\n         ERRDEFN   EX6\n         ERRDEFN   EY0\n         ERRDEFN   EY1\n         ERRDEFN   EY2\n         ERRDEFN   EY3\n         ERRDEFN   EY4\n         ERRDEFN   EY5\n         ERRDEFN   FM0\n         ERRDEFN   FM1\n         ERRDEFN   FM2\n         ERRDEFN   FM6\n         ERRDEFN   FM4\n         ERRDEFN   FM5\n         ERRDEFN   FT0\n         ERRDEFN   FT1\n         ERRDEFN   FT2\n         ERRDEFN   FT3\n         ERRDEFN   FT4\n         ERRDEFN   FT5\n         ERRDEFN   FT6\n         ERRDEFN   FT7\n         ERRDEFN   FT8\n         ERRDEFN   FT9\n         ERRDEFN   FTA\n         ERRDEFN   FTB\n         ERRDEFN   FTC\n         ERRDEFN   FTD\n         ERRDEFN   FTE\n         ERRDEFN   FTF\n         ERRDEFN   FTG\n         ERRDEFN   FTH\n         ERRDEFN   FN1\n         ERRDEFN   FN2\n         ERRDEFN   FTI                                             V1L4\n         ERRDEFN   FN4\n         ERRDEFN   FN5\n         ERRDEFN   FN6\n         ERRDEFN   GO0\n         ERRDEFN   GO1\n         ERRDEFN   GO2\n         ERRDEFN   GO3\n         ERRDEFN   GO4\n         ERRDEFN   GO5\n         ERRDEFN   HO0\n         ERRDEFN   HO1\n         ERRDEFN   HO2\n         ERRDEFN   HO3\n         ERRDEFN   IF0\n         ERRDEFN   IF1\n         ERRDEFN   IF2\n         ERRDEFN   IM0\n         ERRDEFN   IM1\n         ERRDEFN   CCA                                             V1L4\n         ERRDEFN   IM3\n         ERRDEFN   IM4\n         ERRDEFN   IM5\n         ERRDEFN   IM6\n         ERRDEFN   IM7\n         ERRDEFN   IO0\n         ERRDEFN   IO1\n         ERRDEFN   IO2\n         ERRDEFN   IO3\n         ERRDEFN   IO4\n         ERRDEFN   IO5\n         ERRDEFN   IO6\n         ERRDEFN   IO7\n         ERRDEFN   JB0\n         ERRDEFN   JB1\n         ERRDEFN   IOA                                             V1L5\n         ERRDEFN   KO0\n         ERRDEFN   KO1\n         ERRDEFN   KO2\n         ERRDEFN   KO3\n         ERRDEFN   KO4\n         ERRDEFN   KO5\n         ERRDEFN   KO6\n         ERRDEFN   KO7\n         ERRDEFN   KO8\n         ERRDEFN   LG0\n         ERRDEFN   LI0\n         ERRDEFN   LI1\n         ERRDEFN   LI2\n         ERRDEFN   LI3\n         ERRDEFN   LI4\n         ERRDEFN   LI5\n         ERRDEFN   LI6\n         ERRDEFN   LI7\n         ERRDEFN   LI8\n         ERRDEFN   LI9\n         ERRDEFN   LIA\n         ERRDEFN   LIB\n         ERRDEFN   LIC\n         ERRDEFN   LID\n         ERRDEFN   LIE\n         ERRDEFN   LIF\n         ERRDEFN   LIG\n.*  LI-H IS DEAD; DO NOT RESURRECT.                                V1L4\n         ERRDEFN   CCB                                             V1L5\n         ERRDEFN   MD0\n         ERRDEFN   MD1\n         ERRDEFN   MD2\n         ERRDEFN   MD3\n         ERRDEFN   MO0\n         ERRDEFN   MO1\n         ERRDEFN   MO2\n         ERRDEFN   MO3\n         ERRDEFN   MO4\n         ERRDEFN   NL0\n         ERRDEFN   NL1\n         ERRDEFN   NL2\n         ERRDEFN   NL3\n         ERRDEFN   NL4\n         ERRDEFN   STB                                             V1L4\n         ERRDEFN   NL6\n         ERRDEFN   NL7\n         ERRDEFN   PC0\n         ERRDEFN   PC1\n         ERRDEFN   PS0\n         ERRDEFN   NL8                                             V1L5\n         ERRDEFN   RE1\n         ERRDEFN   RE2\n         ERRDEFN   RE3\n         ERRDEFN   RE4\n         ERRDEFN   SF1\n         ERRDEFN   SF2\n         ERRDEFN   SF3\n         ERRDEFN   SF4\n         ERRDEFN   SF5\n         ERRDEFN   SR0\n         ERRDEFN   SR1\n         ERRDEFN   SR2\n         ERRDEFN   SR3\n         ERRDEFN   SR4\n         ERRDEFN   SR5\n         ERRDEFN   SR6\n         ERRDEFN   SR7\n         ERRDEFN   SR8\n         ERRDEFN   SR9\n         ERRDEFN   SRA\n         ERRDEFN   SS0\n         ERRDEFN   SS1\n         ERRDEFN   SS2\n         ERRDEFN   SS3\n         ERRDEFN   ST0\n         ERRDEFN   ST1\n         ERRDEFN   ST2\n         ERRDEFN   ST3\n         ERRDEFN   ST4\n         ERRDEFN   ST5\n         ERRDEFN   STA                                             V1L2\n         ERRDEFN   ST7\n         ERRDEFN   ST8\n         ERRDEFN   ST9\n         ERRDEFN   SV0\n         ERRDEFN   SV1\n         ERRDEFN   SV2\n         ERRDEFN   SV3\n         ERRDEFN   SV4\n         ERRDEFN   SV5\n         ERRDEFN   SX0\n         ERRDEFN   SX1\n         ERRDEFN   SX2\n         ERRDEFN   SX3\n         ERRDEFN   SX4\n         ERRDEFN   SX5\n         ERRDEFN   SX6\n         ERRDEFN   SX7\n         ERRDEFN   SX8\n         ERRDEFN   SX9\n         ERRDEFN   SXA\n         ERRDEFN   TY0\n         ERRDEFN   TY1\n         ERRDEFN   UN0\n         ERRDEFN   UN1\n         ERRDEFN   UN2\n         ERRDEFN   UN3\n         ERRDEFN   UN4\n         ERRDEFN   UN5\n         ERRDEFN   UN6\n         ERRDEFN   UN7\n         ERRDEFN   UN8\n         ERRDEFN   UN9\n         ERRDEFN   UNA\n         ERRDEFN   UNB\n         ERRDEFN   UNC\n         ERRDEFN   UND\n         ERRDEFN   UNE\n         ERRDEFN   UNF\n         ERRDEFN   UNG\n         ERRDEFN   UNH\n         ERRDEFN   UNI\n         ERRDEFN   UNJ\n         ERRDEFN   UNK\n         ERRDEFN   UV0\n         ERRDEFN   UV3\n         ERRDEFN   UV4\n         ERRDEFN   UV5\n         ERRDEFN   UV6\n         ERRDEFN   VA0\n         ERRDEFN   VA1\n         ERRDEFN   VA2\n         ERRDEFN   VA3\n         ERRDEFN   VA4\n         ERRDEFN   VA5\n         ERRDEFN   VA6\n         ERRDEFN   VA7\n         ERRDEFN   VA8\n         ERRDEFN   VA9\n         ERRDEFN   VAA\n         ERRDEFN   SS4                                             V1L5\n         ERRDEFN   CV2                                             V1L1\n         ERRDEFN   IO8                                             V1L1\n         ERRDEFN   EN2                                             V1L1\n         ERRDEFN   UNL                                             V1L1\n         ERRDEFN   IO9                                             V1L1\n         ERRDEFN   DF3                                             V1L1\n         ERRDEFN   KO9                                             V1L2\n         ERRDEFN   KOA                                             V1L2\n         ERRDEFN   SXB                                             V1L5\n         ERRDEFN   EQ4                                             V1L5\n         ERRDEFN   UNN                                             V1L5\n         ERRDEFN   UNM                                             V1L5\n         ERRDEFN   SV6                                             V1L5\n         ERRDEFN   CP2                                             V1L5\n         ERRDEFN   SRB                                             V1L5\n         AIF       ('&RDONLY' EQ 'OMIT').OMITRO                    V1L5\n         ERRDEFN   UNP                                             V1L5\n.OMITRO  ANOP                                                      V1L6\n.*   INSTALLATIONS MAY ADD CODES HERE\n         AIF       ('&STR' NE 'USE').EDSTR1                        ST1\n         ERRDEFN   SP0                                             ST1\n         ERRDEFN   SP1                                             ST1\n         ERRDEFN   SP2                                             ST1\n         ERRDEFN   SP3                                             ST1\n         ERRDEFN   SP4                                             ST1\n         ERRDEFN   SP5                                             ST1\n         ERRDEFN   SP6                                             ST1\n         ERRDEFN   SP7                                             ST1\n         ERRDEFN   SP8                                             ST1\n         ERRDEFN   SP9                                             ST1\n         ERRDEFN   SPA                                             ST1\n         ERRDEFN   SPB                                             ST1\n         ERRDEFN   SPC                                             ST1\n         ERRDEFN   SPD                                             ST1\n         ERRDEFN   SPE                                             ST1\n         ERRDEFN   SPF                                             ST1\n         ERRDEFN   SPG                                             ST1\n         ERRDEFN   SPH                                             ST1\n         ERRDEFN   SPI                                             ST1\n         ERRDEFN   SPJ                                             ST1\n         ERRDEFN   SPK                                             ST1\n         ERRDEFN   SPL                                             ST1\n.EDSTR1  ANOP                                                      ST1\n         AIF       ('&WHOSIT' EQ 'WATFIV').ERREND                  UOW\n         ERRDEFN   AC0                                             UOW\n         ERRDEFN   AC1                                             UOW\n         ERRDEFN   AC2                                             UOW\n         ERRDEFN   AC3                                             UOW\n         ERRDEFN   AC4                                             UOW\n.ERREND  ANOP                                                      UOW\n         ERRDEFN   UNQ                                             V1L5\n         MEND\n./ ADD NAME=FCALL    0100-80001-80001-1200-00017-00017-00000-MACLIB  00\n         MACRO\n&NAME    FCALL     &FUNC,&ARG\n         LCLA      &N,&M\n&N       SETA      N'&SYSLIST-1\n&M       SETA      1\n         CNOP      2,4\n&NAME    LA        R14,*+14+&N*4\n         L         R15,=A(&FUNC(1))\n         BALR      R1,R15\n.FC1     AIF       (&N EQ 0).FC2\n&M       SETA      &M+1\n         ARG       &SYSLIST(&M,1),&SYSLIST(&M,2)\n&N       SETA      &N-1\n         AGO       .FC1\n.FC2     ANOP\n         LARG      &FUNC(1),&FUNC(2)\n         MEND\n./ ADD NAME=FENT     0100-80001-80001-1200-00027-00027-00000-MACLIB  00\n         MACRO\n&NAME    FENT      &ARGS\n         LCLA      &N,&M\n&N       SETA      N'&SYSLIST-1\n&M       SETA      1\n         CNOP      0,4\n&NAME    STM       R14,R12,12(R13)\n         BAL       R11,XENTSPEC\n         USING     *,R11\n         DC        H'0'\n         DC        CL6'&NAME'\n         DC    V(XS@VE&SYSLIST(&N+1))                              V1L4\n.FC1     AIF       (&N EQ 0).FC2\n         ARG       &SYSLIST(&M,1),&SYSLIST(&M,2)\n&M       SETA      &M+1\n&N       SETA      &N-1\n         AGO       .FC1\n.FC2     ANOP\n         LARG      &NAME,&SYSLIST(1,2)\n&N       SETA      N'&SYSLIST-1\n.FC3     AIF       (&N EQ 0).FC4\n         CLC       XUNDEF(L&SYSLIST(&N,2)),&SYSLIST(&N,1)\n         EX        R0,XNOPDEFN\n&N       SETA      &N-1\n         AGO       .FC3\n.FC4     ANOP\n         MEND\n./ ADD NAME=FENTZ    0100-80001-80001-1200-00007-00007-00000-MACLIB  00\n         MACRO\n&NAME    FENTZ\n         USING     *,R15\n&NAME    BAL   R15,*+10                                            V1L4\n         USING     *,R15\n         DC        CL6'&NAME'\n         MEND\n./ ADD NAME=FLIST    0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n&NAME    FLIST     &FN,&MODE\n         GBLC      &STATUS,&TEST\n         LCLC      &TN\n&TN      SETC      '&FN'.'     '\n&TN      SETC      '&TN'(1,6)\n         AIF       ('&TN' GT '&TEST').OK\n         MNOTE     '*** FLIST CARD OUT OF ORDER - &FN IGNORED ***'\n         AGO       .END\n.OK      ANOP\n&TEST    SETC      '&TN'\n         STATUS    &FN\n         AIF       ('&STATUS'(1,4) NE 'CORE').END\n         ADDLIST   &FN,&MODE\n.END     MEND\n./ ADD NAME=FREESYM  0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    FREESYM   &N\n&NAME    LA        R6,&N.(,R6)\n         MEND\n./ ADD NAME=FRET     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    FRET\n&NAME    B         XFRET\n         MEND\n./ ADD NAME=FUNCDEFN 0100-80001-80001-1200-00111-00111-00000-MACLIB  00\n         MACRO\n         FUNCDEFN  &CORE=,&OMIT=\n         GBLA      &IND1,&IND2,&FJ,&FDYN(255)\n         GBLC      &FSTATUS(255),&FDYA(255)\n         GBLC      &PROFILE                                        V1L5\n         LCLA      &L,&J,&K\n&FJ      SETA      0\n         FUNDEF    DSIN,2,CDEXP,0,CDSIN,0\n         FUNDEF    DATAN,1,CDLOG,0\n         FUNDEF    DSQRT,3,CDABS,0,CDSQRT,0,DARSIN,0               V1L4\n         FUNDEF    UNIT@,1,FIOCS#,0\n         FUNDEF    UNIT@,1,DIOCS#,0\n         FUNDEF    IBCOM#,1,FIOCS#,0\n         FUNDEF    IBCOM#,1,DIOCS#,0\n&FJ      SETA      &FJ+1\n&FDYN(&FJ)   SETA  0\n&IND1    SETA      1\n&IND2    SETA      1\n         FUNCSSET  ABS\n         FUNCSSET  AIMAG\n         FUNCSSET  AINT\n         FUNCSSET  AMAX0,AMIN0\n         FUNCSSET  AMIN1,AMAX1\n         FUNCSSET  AMOD\n         FUNCSSET  AND,OR,EOR,COMPL\n         FUNCSSET  CDABS,CABS\n         FUNCSSET  CDEXP,CEXP\n         FUNCSSET  CDLOG,CLOG                                      V1L4\n         FUNCSSET  CDSIN,CDCOS,CSIN,CCOS\n         FUNCSSET  CDSQRT,CSQRT\n         FUNCSSET  CMPLX\n         FUNCSSET  CONJG\n         FUNCSSET  DABS\n         FUNCSSET  DARSIN,DARCOS,ARSIN,ARCOS\n         FUNCSSET  DATAN,DATAN2,ATAN,ATAN2\n         FUNCSSET  DBLE\n         FUNCSSET  DCMPLX\n         FUNCSSET  DCONJG\n         FUNCSSET  DERF,DERFC,ERF,ERFC\n         FUNCSSET  DFLOAT\n         FUNCSSET  DGAMMA,DLGAMA,GAMMA,ALGAMA\n         FUNCSSET  DIM\n         FUNCSSET  DIOCS#                                          V1L4\n         FUNCSSET  DMAX1,DMIN1\n         FUNCSSET  DMOD\n         FUNCSSET  DSIN,DCOS,SIN,COS\n         FUNCSSET  DSINH,DCOSH,SINH,COSH\n         FUNCSSET  DSQRT,SQRT\n         FUNCSSET  DTAN,DCOTAN,TAN,COTAN\n         FUNCSSET  DTANH,TANH\n         FUNCSSET  DVCHK,OVERFL\n         FUNCSSET  EXIT\n         FUNCSSET  FIOCS#\n         FUNCSSET  FLOAT\n         FUNCSSET  IABS\n         FUNCSSET  IBCOM#,IHCER@\n         FUNCSSET  IDIM\n         FUNCSSET  IFIX,HFIX,INT,IDINT\n         FUNCSSET  ISIGN\n         FUNCSSET  MAX0,MIN0\n         FUNCSSET  MIN1,MAX1\n         FUNCSSET  MOD\n         AIF       ('&PROFILE' EQ 'OMIT').NOPFSET                  V1L5\n         FUNCSSET  PROF@                                           V1L5\n.NOPFSET ANOP                                                      V1L5\n         FUNCSSET  REAL\n         FUNCSSET  SIGN,DSIGN\n         FUNCSSET  SLITE,SLITET\n         FUNCSSET  SNGL\n         FUNCSSET  STOP#\n         FUNCSSET  TRAPS\n         FUNCSSET  UNIT@\n&FSTATUS(&IND1)    SETC    'CORERES'\n.*       THIS LOOP IS THE FUNCCORE SECTION\n&L       SETA      0\n.LOOPC   AIF       (&L GE N'&CORE).ENDCORE\n&L       SETA      &L+1\n.*       FIND NAME IN (OR AT END OF ) FUNCTION DEPENDENCY TABLE\n&FDYA(&FJ) SETC    '&CORE(&L)'\n&J       SETA      0\n.C1      ANOP\n&J       SETA      &J+1\n         AIF       ('&FDYA(&J)' NE '&CORE(&L)').C1\n.*     SET STATUS OF NAME AND ROUTINES WHICH IT CALLS TO 'CORE'\n&K       SETA      1\n.C2      AIF       (&FDYN(&K) LT (&J-&K)).C3\n         SETSTAT   &FDYA(&K),CORE\n.C3      ANOP\n&K       SETA      &K+1\n         AIF       (&K LE &J).C2\n         AIF       (&J NE &FJ).C1\n         AGO       .LOOPC\n.ENDCORE ANOP\n.*       THIS IS THE FUNCOMIT SECTION\n&L       SETA      0\n.LOOP    AIF       (&L GE N'&OMIT).END\n&L       SETA      &L+1\n.*       FIND NAME IN (OR AT END OF) FUNCTION DEPENDENCY TABLE\n&FDYA(&FJ) SETC    '&OMIT(&L)'\n&J       SETA      0\n.L1      ANOP\n&J       SETA      &J+1\n         AIF       ('&FDYA(&J)' NE '&OMIT(&L)').L1\n.*       NOW SET STATUS OF GROUPS DEPENDING ON NAME TO 'OMIT'\n&K       SETA      &J+&FDYN(&J)\n.L2      ANOP\n         SETSTAT   &FDYA(&J),OMIT\n&J       SETA      &J+1\n         AIF       (&J LE &K).L2\n         AGO       .LOOP\n.END     MEND\n./ ADD NAME=FUNCDEFS 0100-80001-80001-1200-00019-00019-00000-MACLIB  00\n         MACRO\n         FUNCDEFS\n**   THESE SYMBOLS ARE REFERRED TO BY FUNCREFS.\n**   THEY ARE DEFINED HERE TO AVOID ASSEMBLY ERRORS.\nMAXNH    EQU       X'D0'               USED BY                     V1L4\nMAXNL    EQU       X'B0'                 MAX, MIN ROUTINES         V1L4\nXAMNRST  DS        0D\nXENTFN   EQU       *\nXFLIT    EQU       *\nXATRACEB       EQU    *\nXHELPS   EQU       *\nXAXERRP  EQU       *\nXERRUV5  EQU       *\nXERRUV6  EQU       *\nXDNTRZSW EQU       *                                               V1L4\nXTRADDR  EQU       *                                               V1L4\nXISNPATC EQU       *                                               V1L4\nXISNVM   EQU       *                                               VM1\n         MEND\n./ ADD NAME=FUNCREFS 0100-80001-80001-1200-00159-00159-00000-MACLIB  00\n         MACRO\n         FUNCREFS\n         GBLC      &OPSYS,&DECK                                    DOS3\n         GBLA      &UNDEF                                          V1L2\n         GBLB      &DVSD,&NDVSD                                    DVS1\n         USING     START,RX\nSTART    DC        0D'0'\n         SPACE\n***********************************************************************\n*****    ALMOST EVERY EXECUTABLE INSTRUCTION (EXCEPTIONS:STOP,CONTINUE)\n*****    HAS OBJECT CODE WHICH BEGINS WITH:  BALR R11,R12\n*****                                        DC   AL2(ISN)\n*****    THIS SERVES THREE PURPOSES: R11 BECOMES A BASE REGISTER\n*****                                    FOR THE STATEMENT\n*****                                WE CAN READILY FIND THE ISN\n*****                                EXECUTION TIME EXCEEDED IS CAUGHT\n*****                                    FAIRLY SIMPLY\n***********************************************************************\n         SPACE\n* NOTE: IF WE GET AN INTERVAL TIMER INTERRUPT, THE BRANCH IS CHANGED\n* TO A NOP INSTRUCTION AND WE FALL THRU TO GIVE AN INTERVAL TIMER\n* OVERFLOW ERROR\n         SPACE\n* NOTE: RX MUST POINT DIRECTLY AT THIS ROUTINE IN ORDER THAT WE MAY\n* USE A BALR INSTRUCTION TO GET TO IT.\n         SPACE\n         AIF       ('&OPSYS' NE 'DOS').QUERTI                      V1L5\nXISNRTN  B         TTESTMR             TEST IF TIME EXPIRED        DOS3\n         AGO       .QUERTJ                                         V1L5\n.QUERTI  ANOP                                                      V1L5\nXISNRTN  B         XISNPATC            BRANCH TO PATCH AREA        V1L2\n.QUERTJ  ANOP                                                      V1L5\n         $ERROR    (TRAZ,KO,6)                                     V1L5\nXISNSW   EQU       XISNRTN\n***********************************************************************\n*****   THE FOLLOWING PATCH AREA IS SUPPLIED FOR THE POSSIBLE ADDITION\n*****   OF A FACILITY TO CANCEL A JOB WITHOUT CANCELLING THE BATCH.\n*****   HERE'S HOW IT MIGHT BE DONE: DO A WTOR AT BATCH INITIALIZATION.\n*****   THEN TEST IT'S ECB EACH TIME WE GET TO XISNRTN. IF THE ECB IS\n*****   POSTED, BOOT THE JOB OFF, GO TO XSTOP TO TERMINATE, THEN REDO\n*****   THE WTOR AND CONTINUE WITH THE NEXT JOB IN THE BATCH.\n*****   THUS XISNRTN WOULD LOOK AS FOLLOWS:\n*****   XISNRTN TM  ECB,X'40'          TEST COMPLETION BIT\n*****           BZ  XISNSW\n*****           L   R15,ADCON          OFF TO RESET WTOR\n*****           BR  R15\n*****           DC  H'0'  PADDING\n*****    ECB    DC  F'0'\n*****    ADCON  DC  A(KICKOFF ROUTINE)\n*****    XISNSW B   ZR11+2   THIS IS THE RETURN TO OBJECT PROGRAM\n*****           ERROR  (TRAZ,KO,6)     UNLESS THE TIMER SWITCH IS SET\n***********************************************************************\n         DS        6F\n         AIF                  (&NDVSD).JNODOS                      DVS1\n         ORG       *-24                                            DOS2\nJTIMOUT  DS        F                                               DOS2\n         ORG       ,                                               DOS2\n.JNODOS  ANOP                                                      DOS2\nXUNDEF   DC        0D'0',16X'&UNDEF'                               V1L2\nXCMT1    DC        D'0'                WORK\nXCMT2    DC        D'0'                WORK\n*./DELETE SEQ1=00490000,SEQ2=00520000                              V1L5\nXFLIT3   DC        X'4E00000000000000' UN-NORM ZERO FOR SCALING    V1L4\n*./DELETE SEQ1=00560000,SEQ2=00590000                              V1L5\nXFLTONE  DC    X'4110000000000000'           TOGETHER\nXEXPLIT  EQU      XFLTONE\nXBADARG  LA        R1,4(,R1)           CHCKA(2) MACRO ENTERS HERE  V1L4\n         USING     CALLMODE,R1                                     V1L4\n         TM        CALLMODE,B'11000000'  OR HERE                   V1L4\n         BNZ       XERRSR41            BIF INVALID ARG             V1L4\n         TM        CALLMODE,B'00110000'                            V1L4\n         BNM       XERRSR41                                        V1L4\n         $FREE     R1                                              V1L4\n         BM        XERRSR71            BIF WRONG NO. OF ARGS       V1L4\n         USING     CALLMODE,R1                                     V1L4\nXVLARGS  TM        CALLMODE,B'11000000'  SPECIAL ENTRY FOR MAX/MIN'S L4\n         BNZ       XERRSR41            BIF INVALID ARG             V1L4\n         TM        CALLMODE,B'00110000'                            V1L4\n         BNM       XERRSR41                                        V1L4\n         $FREE     R1                                              V1L4\n         BM        XERRSR21            BIF WRONG MODE/TYPE         V1L4\n         DS        H                   ./ DELETE                   V1L4\nXSTOP#   DC        H'0'                'N' OF STOP N SAVED BY STOP#V1L4\nKF4      DC        F'4'\n*****  TRAPS ASSUMES NEXT 5 FIELDS ARE STORED IN ORDER SHOWN\nXFXOFLOW DC        F'1'                1\nXEXOFLOW DC        F'1'                2\nXEXUFLOW DC        F'1'                3\nXFXDVCNT DC        F'1'                4\nXFLDVCNT DC        F'1'                5\n         SPACE 1\n*./DELETE SEQ1=00770000,SEQ2=00780000                              V1L5\nXOVRFLSW DC        H'0'\nXDVCHKSW DC        H'0'\n***********************************************************************\n*        END OF EXECUTION,GO TO MAINREST  TO DO JOB ACCOUNTING\nXSTOP    L         RP,XAMNRST\n         BR        RP\n***********************************************************************\n*          ENTRY ROUTINE FOR LIBRARY FUNCTIONS\n*                AVOIDS TURNING ON THE RECURSION BIT\n         USING     ENTRUSE,RP\nXENTSPEC LR        R15,R13\n         L         R13,ENTRSAVE\n         ST        R11,ZR13+72\n         B         XENTFN\n         $FREE     RP                                              V1L5\n* IN-CORE FUNCTIONS RETURN ROUTINE\nXFRET    L         R13,ZSVBACK\n         LM        R14,R12,ZSV14\n         BR        RDONE               RETURN;\nXFENT99  LA        R1,4(,R1)           XFENT99  ENTERED HERE\n         LA        R1,4(,R1)           OR HERE\n         USING     CALLUSE,R1\n         TM        CALLMODE,B'11000000'\n         BNZ       XERRSR71\n         TM        CALLMODE,B'00110000'\n         BNM       XERRSR71\n         $FREE     R1                                              V1L5\nXERRSR21 $ERROR    (TRAZ,SR,2,VARR15)                              V1L5\nXERRSR71 $ERROR    (TRAZ,SR,5,VARR15)                              V1L5\nXERRSR41 $ERROR    (TRAZ,SR,4,VARR15)                              V1L5\n*./DELETE SEQ1=01090000,SEQ2=01090000                              V1L5\nXFLOAT10 LPR       R2,R1               FLOATS R1 TO F0\n         N         R1,XFLIT\n         STM       R1,R2,XCMT1\n         OI        XCMT1,X'4E'\n         SDR       F0,F0\n         AD        F0,XCMT1\n         BR        R14\nXFLOAT30 LPR       R4,R3               FLOATS R3 TO F0\n         N         R3,XFLIT\n         STM       R3,R4,XCMT1\n         OI        XCMT1,X'4E'\n         SDR       F0,F0\n         AD        F0,XCMT1\n         BR        R14\n***********************************************************************\n*****    TRACEBACK ROUTINE REACHED BY THESE EXITS                 *****\nXRETRACE L         R13,ZSVBACK\nXRETR1   L         R11,ZSV11\nXTRACEBK L         R15,XATRACEB\n         BR        R15\n***********************************************************************\n*****   AN ENTRY TO ERROR EDITOR FOR IN-LINE CODE,SAVE REGISTERS HERE.\nXERRENT3 STM       R0,R15,XHELPS\n         LR        R1,R14\n         L         R11,XAXERRP\n         BALR      R14,R11\n         LM        R0,R15,XHELPS\n         TM        ZR14,B'10000000'    TEST IF 2-BYTE ERROR CODE\n         BZ        ZR14+2              2 BYTE\n         B         ZR14+4              4 BYTE\n***********************************************************************\n*****   THE NEXT TWO INSTRUCTIONS ARE 'EX'ECUTED BY LIBRARY ROUTINES. *\n*****   THEY ARE USED TO SCREEN UNDEFINED ARGUMENTS FOR RUN=CHECK.    *\nXNOPDEFZ NOP       XERRUV5\nXNOPDEFN NOP       XERRUV6\n         MEND\n./ ADD NAME=FUNCSSET 0100-80001-80001-1200-00018-00018-00000-MACLIB  00\n         MACRO\n         FUNCSSET\n         GBLC      &FNAME(255)\n         GBLC      &FSTATUS(255)\n         GBLA      &IND1,&IND2,&FNUM(255)\n         LCLA      &NUM\n         ACTR      100\n&NUM     SETA      1\n&FNUM(&IND2)       SETA   N'&SYSLIST\n&IND2    SETA      &IND2+1\n&FNUM(&IND2) SETA  0\n.LOOP    ANOP\n&FNAME(&IND1) SETC '&SYSLIST(&NUM)'\n&FSTATUS(&IND1)  SETC   'DISK'\n&NUM     SETA      &NUM+1\n&IND1    SETA      &IND1+1\n         AIF       (&NUM LE N'&SYSLIST).LOOP\n         MEND\n./ ADD NAME=FUNDEF   0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n&NAME    FUNDEF    &ARGE\n         GBLC      &FDYA(255)\n         GBLA      &FDYN(255),&FJ\n         LCLA      &I\n&I       SETA      1\n.BEGIN   AIF       (&I GT N'&SYSLIST).END\n&FJ      SETA      &FJ+1\n&FDYA(&FJ) SETC    '&SYSLIST(&I)'\n&FDYN(&FJ) SETA    &SYSLIST(&I+1)\n&I       SETA      &I+2\n         AGO       .BEGIN\n.END     ANOP\n&FDYA(&FJ+1) SETC  ' '\n         MEND\n./ ADD NAME=FVTABLE  0100-80001-80001-1200-00021-00021-00000-MACLIB  00\n         MACRO\n&ADDR    FVTABLE\n         GBLA      &CLASS1(255),&CLASS1E\n         LCLA      &I,&T(8),&J\n         LCLC      &TEMP\n&TEMP    SETC      '&ADDR'\n&I       SETA      0\n.TABLE10 ANOP\n&I       SETA      &I+1\n&J       SETA      0\n&T(8)    SETA      &CLASS1E\n.TABLE20 ANOP\n&J       SETA      &J+1\n&T(&J)   SETA      &CLASS1(&I*8-8+&J)\n         AIF       (&J LT (8-&I/32)).TABLE20\n&J       SETA      &I*8-8\n&TEMP    DC        (&J-&J)F'0',AL1(&T(1),&T(2),&T(3),&T(4),&T(5),&T(6),X\n               &T(7),&T(8))\n&TEMP    SETC      ''\n         AIF       (&I LT 32).TABLE10\n         MEND\n./ ADD NAME=GENCC    0100-80001-80001-1200-00021-00021-00000-MACLIB  00\n         MACRO\n         GENCC\n         GBLC      &CCTAB1(255)\n         GBLA      &CCTAB2(255)\n     LCLA     &I\n         LCLC      &AMP\n&AMP     SETC      '&&'\n&I       SETA      1\n.LOOP1   AIF       ('&CCTAB1(&I)' NE '&AMP'(1,1)).LOOP\n         DC        C'&&'\n         DC      C'+'\n         AGO       .LOOP2\n.LOOP    DC        C'&CCTAB1(&I)'\n         DC      C'&CCTAB1(&I)'\n.LOOP2   DC        AL1(&CCTAB2(&I))\n         AIF     ('&CCTAB1(&I+1)' EQ '$').END\n&I       SETA      &I+1\n         AGO       .LOOP1\n.END     ANOP\nENDCC    DC      C'  ',AL1(1)\n         MEND\n./ ADD NAME=GENERR2  0100-80001-80001-1200-00016-00016-00000-MACLIB  00\n         MACRO\n&LBL     GENERR2   &ORGLABL=\n         GBLC  &ERROPT,&CORERRS(255),&MAXERR,&MINERR\n         GBLA  &ERCORI\n         LCLA  &I\n         AIF   ('&ERROPT' NE 'READ').END\n         ORG   &ORGLABL+&MAXERR-&MINERR+1\n         DS        0H                  ALIGN FOLLOWING AL2'S\nEMINERR  DC    AL2(&MINERR)        LEAST IN-CORE ERROR TEXT\nEMAXERR  DC    AL2(&MAXERR)        GREATEST IN-CORE ERROR TEXT\n&LBL     DS    0H\n.LOOP    ANOP\n&I       SETA  &I+1\n&CORERRS(&I).TAB2 DC AL2(&CORERRS(&I).TEXT-1-ERRTEXT)\n         AIF   (&I LT &ERCORI).LOOP\n.END     MEND\n./ ADD NAME=GETSYM   0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n&NAME    GETSYM    &N,&CHECK\n&NAME    DC        0H'0'\n         AIF       (T'&N EQ 'O').A1\n         S         R6,KF&N\n.A1      AIF       (T'&CHECK NE 'O').A2\n         C         R6,XOBJECT\n         BL        CERRMO2\n         MEXIT\n.A2      AIF       ('&CHECK' NE 'CHECK').A3\n         BAL       R14,CGETSYM\n         MEXIT\n.A3      AIF       ('&CHECK' EQ 'NOCHECK').END\n         MNOTE     '*******  INVALID GETSYM MACRO  *******'\n.END     MEND\n./ ADD NAME=HOLTAB   0100-80001-80001-1200-00018-00018-00000-MACLIB  00\n         MACRO\n&NAME    HOLTAB\n         LCLA      &HOL1,&HOL2\n.HOL1    ANOP\n&HOL1    SETA      1\n.HOL2    ANOP\nHOL&HOL1.R&HOL2    EQU          16*R&HOL2+&HOL1\n&HOL1    SETA      &HOL1+1\n         AIF       (&HOL1 NE 17).HOL2\n&HOL2    SETA      &HOL2+1\n         AIF       (&HOL2 NE 3).HOL1\nHOL01R1  EQU       HOL1R1\nHOL05R1  EQU       HOL5R1\nUNEX     EQU       HOL16R2+1\nINVAL    EQU       UNEX+1\nNEAR     EQU       INVAL+1\nUNIT     EQU       NEAR+1\n         MEND\n./ ADD NAME=IF       0100-80001-80001-1200-00021-00021-00000-MACLIB  00\n         MACRO\n&A       IF        &B,&C\n         GBLA      &IF#\n         LCLA      &D\n&IF#     SETA      &IF#+1\n         AIF       ('&C'EQ'THEN').A1\n&A       IFXXXXXX  IF,&B,&C\n         MEXIT\n.A1      ANOP\n&A       IFXXXXXX  NOT,&B,$&SYSNDX\n&D       SETA      3\n.A6      ANOP\n         AIF       ('&SYSLIST(&D+1)'EQ'').A5\n         AIF       ('&SYSLIST(&D+1)'(1,1)NE'(').A5\n         THENXXXX  &SYSLIST(&D)\n&D       SETA      &D+1\n         AGO       .A6\n.A5      ANOP\n         THENXXXX  &SYSLIST(&D),&SYSLIST(&D+1)\n$&SYSNDX DC        0H'0'\n         MEND\n./ ADD NAME=IFALL    0100-80001-80001-1200-00032-00032-00000-MACLIB  00\n         MACRO\n&A       IFALL\n         GBLA      &IFALL#\n         LCLA      &B\n&IFALL#  SETA      &IFALL#+1\n         AIF       ('&A'EQ'').A1\n&A       DC        0H'0'\n.A1      ANOP\n&B       SETA      1\n.A3      ANOP\n         AIF       ('&SYSLIST(&B+1)'(1,1)NE'(').A2\n         IFXXXXXX  NOT,&SYSLIST(&B),$&SYSNDX\n&B       SETA      &B+1\n         AGO       .A3\n.A2      ANOP\n         AIF       ('&SYSLIST(&B+1)'EQ'THEN').A5\n         IFXXXXXX  IF,&SYSLIST(&B),&SYSLIST(&B+1)\n         AGO       .A4\n.A5      ANOP\n         IFXXXXXX  NOT,&SYSLIST(&B),$&SYSNDX\n&B       SETA      &B+2\n.A7      ANOP\n         AIF       ('&SYSLIST(&B+1)'EQ'').A6\n         AIF       ('&SYSLIST(&B+1)'(1,1)NE'(').A6\n         THENXXXX  &SYSLIST(&B)\n&B       SETA      &B+1\n         AGO       .A7\n.A6      ANOP\n         THENXXXX  &SYSLIST(&B),&SYSLIST(&B+1)\n.A4      ANOP\n$&SYSNDX DC        0H'0'\n         MEND\n./ ADD NAME=IFANY    0100-80001-80001-1200-00044-00044-00000-MACLIB  00\n         MACRO\n&A       IFANY\n         GBLA      &IFANY#\n         LCLA      &B,&C\n         ACTR      100\n&IFANY#  SETA      &IFANY#+1\n         AIF       ('&A'EQ'').A1\n&A       DC        0H'0'\n.A1      ANOP\n&C       SETA      3\n.A11     ANOP\n         AIF       ('&SYSLIST(&C)'(1,1)NE'(').A10\n&C       SETA      &C+1\n         AGO       .A11\n.A10     ANOP\n&B       SETA      1\n         AIF       ('&SYSLIST(&C)'EQ'THEN').A12\n.A14     ANOP\n         IFXXXXXX  IF,&SYSLIST(&B),&SYSLIST(&C)\n         AIF       (&B EQ &C-1).A13\n&B       SETA      &B+1\n         AGO       .A14\n.A13     ANOP\n         MEXIT\n.A12     ANOP\n         IFXXXXXX  IF,&SYSLIST(&B),$A&SYSNDX\n         AIF       (&B EQ &C-2).A15\n&B       SETA      &B+1\n         AGO       .A12\n.A15     ANOP\n&B       SETA      &B+1\n         IFXXXXXX  NOT,&SYSLIST(&B),$&SYSNDX\n$A&SYSNDX DC       0H'0'\n&B       SETA      &B+2\n.A7      ANOP\n         AIF       ('&SYSLIST(&B+1)'EQ'').A6\n         AIF       ('&SYSLIST(&B+1)'(1,1)NE'(').A6\n         THENXXXX  &SYSLIST(&B)\n&B       SETA      &B+1\n         AGO       .A7\n.A6      ANOP\n         THENXXXX  &SYSLIST(&B),&SYSLIST(&B+1)\n$&SYSNDX DC        0H'0'\n         MEND\n./ ADD NAME=IFNALL   0100-80001-80001-1200-00044-00044-00000-MACLIB  00\n         MACRO\n&A       IFNALL\n         GBLA      &IFNALL#\n         LCLA      &B,&C\n         ACTR      100\n&IFNALL# SETA      &IFNALL#+1\n         AIF       ('&A'EQ'').A1\n&A       DC        0H'0'\n.A1      ANOP\n&C       SETA      3\n.A10     ANOP\n         AIF       ('&SYSLIST(&C)'(1,1)NE'(').A11\n&C       SETA      &C+1\n         AGO       .A10\n.A11     ANOP\n&B       SETA      1\n         AIF       ('&SYSLIST(&C)'EQ'THEN').A12\n.A14     ANOP\n         IFXXXXXX  NOT,&SYSLIST(&B),&SYSLIST(&C)\n         AIF       (&B EQ &C-1).A13\n&B       SETA      &B+1\n         AGO       .A14\n.A13     ANOP\n         MEXIT\n.A12     ANOP\n         IFXXXXXX  NOT,&SYSLIST(&B),$A&SYSNDX\n         AIF       (&B EQ &C-2).A20\n&B       SETA      &B+1\n         AGO       .A12\n.A20     ANOP\n&B       SETA      &B+1\n         IFXXXXXX  IF,&SYSLIST(&B),$&SYSNDX\n$A&SYSNDX DC       0H'0'\n&B       SETA      &B+2\n.A7      ANOP\n         AIF       ('&SYSLIST(&B+1)'EQ'').A6\n         AIF       ('&SYSLIST(&B+1)'(1,1)NE'(').A6\n         THENXXXX  &SYSLIST(&B)\n&B       SETA      &B+1\n         AGO       .A7\n.A6      ANOP\n         THENXXXX  &SYSLIST(&B),&SYSLIST(&B+1)\n$&SYSNDX DC        0H'0'\n         MEND\n./ ADD NAME=IFNONE   0100-80001-80001-1200-00031-00031-00000-MACLIB  00\n         MACRO\n&A       IFNONE\n         GBLA      &IFNONE#\n         LCLA      &B\n&IFNONE# SETA      &IFNONE#+1\n         AIF       ('&A'EQ'').A1\n&A       DC        0H'0'\n.A1      ANOP\n&B       SETA      1\n.A3      ANOP\n         AIF       ('&SYSLIST(&B+1)'(1,1)NE'(').A2\n         IFXXXXXX  IF,&SYSLIST(&B),$&SYSNDX\n&B       SETA      &B+1\n         AGO       .A3\n.A2      ANOP\n         AIF       ('&SYSLIST(&B+1)'EQ'THEN').A4\n         IFXXXXXX  NOT,&SYSLIST(&B),&SYSLIST(&B+1)\n         AGO       .A5\n.A4      IFXXXXXX  IF,&SYSLIST(&B),$&SYSNDX\n&B       SETA      &B+2\n.A7      ANOP\n         AIF       ('&SYSLIST(&B+1)'EQ'').A6\n         AIF       ('&SYSLIST(&B+1)'(1,1)NE'(').A6\n         THENXXXX  &SYSLIST(&B)\n&B       SETA      &B+1\n         AGO       .A7\n.A6      ANOP\n         THENXXXX  &SYSLIST(&B),&SYSLIST(&B+1)\n.A5      ANOP\n$&SYSNDX DC        0H'0'\n         MEND\n./ ADD NAME=IFNOT    0100-80001-80001-1200-00020-00020-00000-MACLIB  00\n         MACRO\n&A       IFNOT     &B,&C\n         GBLA      &IFNOT#\n         LCLA      &D\n&IFNOT#  SETA      &IFNOT#+1\n         AIF       ('&C'EQ'THEN').A1\n&A       IFXXXXXX  NOT,&B,&C\n         MEXIT\n.A1      ANOP\n&A       IFXXXXXX  IF,&B,$&SYSNDX\n&D       SETA      3\n.A6      AIF       ('&SYSLIST(&D+1)'EQ'').A5\n         AIF       ('&SYSLIST(&D+1)'(1,1)NE'(').A5\n         THENXXXX  &SYSLIST(&D)\n&D       SETA      &D+1\n         AGO       .A6\n.A5      ANOP\n         THENXXXX  &SYSLIST(&D),&SYSLIST(&D+1)\n$&SYSNDX DC        0H'0'\n         MEND\n./ ADD NAME=IFXXXXXX 0100-80001-80001-1200-00165-00165-00000-MACLIB  00\n         MACRO\n&A       IFXXXXXX  &B,&C,&D\n         GBLA      &IFXXXX#\n         LCLA      &X\n         LCLC      &Y\n&IFXXXX# SETA      &IFXXXX#+1\n         AIF       ('&C(2)'EQ'ON').A\n         AIF       ('&C(2)'EQ'OFF').A\n         AIF       ('&C(2)'EQ'NON').A\n         AIF       ('&C(2)'EQ'NOFF').A\n         AIF       ('&C(2)'EQ'EQ').A1\n         AIF       ('&C(2)'EQ'NE').A1\n         AIF       ('&C(2)'EQ'GE').A1\n         AIF       ('&C(2)'EQ'LE').A1\n         AIF       ('&C(2)'EQ'GT').A1\n         AIF       ('&C(2)'EQ'LT').A1\n         AIF       ('&C(2)'EQ'MIX').A2\n         AIF       ('&C(2)'EQ'NMIX').A2\n         AIF       ('&C(2)'EQ'VAR').VAR\n         AIF       ('&C(2)'EQ'SVAR').SVAR\n         AIF       ('&C(2)'EQ'DVAR').DVAR\n         AIF       ('&C(2)'EQ'DIM').DIM\n         AIF       ('&C(2)'EQ'PROG').PROG\n         AIF       ('&C(2)'EQ'RTN').RTN\n         AIF       ('&C(2)'EQ'FUNC').FUNC\n         AIF       ('&C(2)'EQ'SUBR').SUBR\n         AIF       ('&C(2)'EQ'NLST').NLST\n         AIF       ('&C(2)'EQ'E').A1\n         AIF       ('&C(2)'EQ'N').A1\n         AIF       ('&C(2)'EQ'G').A1\n         AIF       ('&C(2)'EQ'L').A1\n         AIF       ('&C(2)'EQ'Z').A2\n         AIF       ('&C(2)'EQ'O').A2\n         AIF       ('&C(2)'EQ'M').A2\n         AIF       ('&C(2)'EQ'NZ').A2\n         AIF       ('&C(2)'EQ'NO').A2\n         AIF       ('&C(2)'EQ'NM').A2\n         AIF       ('&C(2)'EQ'EQU').A1\n         AIF       ('&C(2)'EQ'NEQ').A1\n         AIF       ('&C(2)'EQ'NG').A1\n         AIF       ('&C(2)'EQ'NL').A1\n         AIF       ('&C(2)'EQ'H').A1\n         AIF       ('&C(2)'EQ'NH').A1\n         AIF       ('&C(2)'EQ'LAST').LAST\n         AIF       ('&C(2)'EQ'CONS').CONS\n         AIF       ('&C(2)'EQ'NAME').NAME\n         MNOTE     '***ERROR*** ILLEGAL ''IF'' OPERATION'\n&A       DC        H'0'\n         MEXIT\n.VAR     ANOP\n&A       TM        &C(1),B'10000000'\n         AGO       .A3\n.SVAR    AIF       ('&C(3)'EQ'').SVAR2\n&A       CLI       &C(1),SIMV+&C(3)\n         AIF       ('&D'EQ'DONE').SVAR3\n         AIF       ('&D'EQ'LOOP').SVAR3\n&X       SETA      1\n.LKKA1   ANOP\n&Y       SETC      '&X'\n         AIF       ('&D' EQ 'R&Y').LKKA2\n&X       SETA      &X+1\n         AIF       ((&X LT 14) OR (&X EQ 15)).LKKA1\n         BC        Z&B.EQ,&D\n         MEXIT\n.SVAR3   ANOP\n         BCR       Z&B.EQ,R&D\n         MEXIT\n.LKKA2   BCR       Z&B.EQ,&D\n         MEXIT\nZIFSVAR  EQU       ZIFOFF\nZNOTSVAR EQU       ZNOTOFF\n.SVAR2   ANOP\n&A       TM        &C(1),B'01110000'\n         AGO       .A3\n         MEXIT\n.DVAR    AIF       ('&B' EQ 'NOT').NOTDVAR\n&A       IFXXXXXX  NOT,(&C(1),VAR),$&SYSNDX\n         IFXXXXXX  IF,(&C(1),DIM),&D\n$&SYSNDX DC        0H'0'\n         MEXIT\n.NOTDVAR ANOP\n&A       IFXXXXXX  NOT,(&C(1),VAR),&D\n         IFXXXXXX  NOT,(&C(1),DIM),&D\n         MEXIT\n.DIM     ANOP\n&A       TM        &C(1),B'01110000'\n         AGO       .A3\n.PROG    AIF       ('&B' EQ 'NOT').NOTPROG\n&A       IFXXXXXX  IF,(&C(1),VAR),$&SYSNDX\n         IFXXXXXX  IF,(&C(1),RTN),&D\n$&SYSNDX DC        0H'0'\n         MEXIT\n.NOTPROG ANOP\n&A       IFXXXXXX  IF,(&C(1),VAR),&D\n         IFXXXXXX  NOT,(&C(1),RTN),&D\n         MEXIT\n.RTN     ANOP\n&A       TM        &C(1),B'01000000'\n         AGO       .A3\n.FUNC    ANOP\n&A       TM      &C(1),B'10010000'\n         AGO       .A3\n.SUBR    ANOP\n&A       TM        &C(1),B'10100000'\n         AGO       .A3\n.LAST    AIF       ('&B' EQ 'NOT').NOTLAST\n&A       IFXXXXXX  NOT,(&C(1),OFF,B'11000000'),$&SYSNDX\n         IFXXXXXX  IF,(&C(1),MIX,B'00110000'),&D\n$&SYSNDX DC        0H'0'\n         MEXIT\n.NOTLAST ANOP\n&A       IFXXXXXX  NOT,(&C(1),OFF,B'11000000'),&D\n         IFXXXXXX  NOT,(&C(1),MIX,B'00110000'),&D\n         MEXIT\n.CONS    ANOP\n.NAME    ANOP\n&A       TM        &C(1),B'10000000'\n         AGO       .A3\n.NLST    ANOP\n&A       CLI       &C(1),B'00110001'\n         AGO       .F\n.A       AIF       ('&C(3)'NE'').A2\n&A       TM        &C(1),B'10000000'\n         AGO       .A3\n.A2      ANOP\n&A       TM        &C(1),&C(3)\n         AGO       .A3\n.A1      ANOP\n&A       CLI       &C(1),&C(3)\n.A3      ANOP\n         AIF       ('&D'EQ'DONE').A4\n         AIF       ('&D'EQ'LOOP').A4\n&X       SETA      1\n.LKKB1   ANOP\n&Y       SETC      '&X'\n         AIF       ('&D' EQ 'R&Y').LKKB2\n&X       SETA      &X+1\n         AIF       ((&X LT 14) OR (&X EQ 15)).LKKB1\n         BC        Z&B&C(2),&D\n         MEXIT\n.A4      ANOP\n         BCR       Z&B&C(2),R&D\n         MEXIT\n.LKKB2   BCR       Z&B&C(2),&D\n         MEXIT\n.F       ANOP\n         AIF       ('&D'EQ'DONE').FF\n         AIF       ('&D'EQ'LOOP').FF\n&X       SETA      1\n.LKKC1   ANOP\n&Y       SETC      '&X'\n         AIF       ('&D' EQ 'R&Y').LKKC2\n&X       SETA      &X+1\n         AIF       ((&X LT 14) OR (&X EQ 15)).LKKC1\n         BC        Z&B&C(2),&D\n$&SYSNDX DC        0H'0'\n         MEXIT\n.FF      ANOP\n         BCR       Z&B&C(2),R&D\n$&SYSNDX DC        0H'0'\n         MEXIT\n.LKKC2   ANOP\n$&SYSNDX DC        0H'0'\n         BCR       Z&B&C(2),&D\n         MEND\n./ ADD NAME=LARG     0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    LARG      &ARG,&MODE\n         DC        AL1(FNARGTRM+&MODE),AL3(&ARG)                   V1L4\n         MEND\n./ ADD NAME=LINKTCP  0100-80001-80001-1200-00030-00030-00000-MACLIB  00\n         MACRO\n&ADDR    LINKTCP  &TCPPTR,&PARM=SAVE\n         LCLA      &SAVESW,&DISP1(2),&DISP2(2)\n         LCLC      &TEMP\n&SAVESW  SETA      1\n&DISP1(1) SETA     22\n&DISP1(2) SETA     18\n&DISP2(1) SETA     20\n&DISP2(2) SETA     12\n         AIF       ('&PARM' EQ 'SAVE').ADDR100\n&SAVESW  SETA      2\n.ADDR100 ANOP\n         CNOP      2,4\n&TEMP    SETC      '&ADDR'\n         AIF       (&SAVESW EQ 2).ADDR200\n&TEMP    STM       14,15,*+34\n&TEMP    SETC      ''\n.ADDR200 ANOP\n&TEMP    LA        14,*+&DISP1(&SAVESW)\n         L         15,4(0,14)\n         MVC       0(4,15),0(14)\n         AIF       (&SAVESW EQ 2).ADDR300\n         LM        14,15,8(14)\n.ADDR300 ANOP\n         B         *+&DISP2(&SAVESW)\n         DC        A(&TCPPTR)\n         DC        V(TRTCPPTR)\n         AIF       (&SAVESW EQ 2).END\n         DS        2F\n.END     MEND\n./ ADD NAME=LOOKUP   0100-80001-80001-1200-00033-00033-00000-MACLIB  00\n         MACRO\n&LBL     LOOKUP    &RTN,&NEW,&OLD,&NAME=\n         GBLA      &LOOKUP#\n         LCLC      &RTNAM\n&LOOKUP# SETA      &LOOKUP#+1\n&RTNAM   SETC      'CLSYM'\n         AIF       ('&RTN' EQ 'VARIABLE').L1\n&RTNAM   SETC      'CLSTN'\n         AIF       ('&RTN' EQ 'STATNUM').L1\n&RTNAM   SETC      'COLCONST'\n         AIF       ('&RTN' EQ 'CONSTANT').L1\n&RTNAM   SETC      'COLINTGR'\n         AIF       ('&RTN' EQ 'INTEGER').L1\n&RTNAM   SETC      'CLLIB'\n         AIF       ('&RTN' EQ 'GLBLVAR').L1\n&RTNAM   SETC      'CONTEST'\n         AIF       ('&RTN' EQ 'TESTCON').L1\n&RTNAM   SETC      'CLPSTN'\n         AIF       ('&RTN' EQ 'PSUDSTNO').L1\n         AIF       ('&RTN' EQ 'SPCLNAME').L2\n         MNOTE     'CHANGE THIS BLOODY MACRO INSTRUCTION'\n         MEXIT\n.L2      ANOP\n&LBL     LA        R3,&NAME\n         BAL       R14,CSPCLNMS\n         AGO       .CHKOLD\n.L1      ANOP\n&LBL     BAL       R14,&RTNAM\n.CHKOLD  AIF       (T'&OLD EQ 'O').NOLD\n         BOLD      &OLD\n.NOLD    AIF       (T'&NEW EQ 'O').NONEW\n         BNEW      &NEW\n.NONEW   MEND\n./ ADD NAME=NOMACROS 0100-80001-80001-1200-00086-00086-00000-MACLIB  00\n         MACRO\n&NAME    NOMACROS  &A\n         GBLA      &#MCALL\n         GBLA      &CENT#\n         GBLA      &ERROR#\n         GBLA      &FREE#\n         GBLA      &IF#\n         GBLA      &IFANY#\n         GBLA      &IFALL#\n         GBLA      &IFNALL#\n         GBLA      &IFNONE#\n         GBLA      &IFNOT#\n         GBLA      &IFXXXX#\n         GBLA      &LINK2#\n         GBLA      &LOOKUP#\n         GBLA      &LQ#\n         GBLA      &OFFSET#\n         GBLA      &OUTPUT#\n         GBLA      &Q#\n         GBLA      &SETLNK#\n         GBLA      &SETSTK#\n         GBLA      &SNAPS#\n         GBLA      &SLINK#\n         GBLA      &SPRIN#\n         GBLA      &STQ#\n         GBLA      &THEN#\n         GBLA      &THENXX#\n         GBLA      &TVNAM#\n         MNOTE   *,'CENT               &CENT#'\n         MNOTE   *,'ERROR              &ERROR#'\n         MNOTE   *,'FREE               &FREE#'\n         MNOTE   *,'IF                 &IF#'\n         MNOTE   *,'IFALL              &IFALL#'\n         MNOTE   *,'IFANY              &IFANY#'\n         MNOTE   *,'IFNALL             &IFNALL#'\n         MNOTE   *,'IFNONE             &IFNONE#'\n         MNOTE   *,'IFNOT              &IFNOT#'\n         MNOTE   *,'IFXXXXXX           &IFXXXX#'\n         MNOTE   *,'LINK2              &LINK2#'\n         MNOTE   *,'LOOKUP             &LOOKUP#'\n         MNOTE   *,'LQ                 &LQ#'\n         MNOTE   *,'OFFSET             &OFFSET#'\n         MNOTE   *,'OUTPUT             &OUTPUT#'\n         MNOTE   *,'Q                  &Q#'\n         MNOTE   *,'SETLINK            &SETLNK#'\n         MNOTE   *,'SETSTACK           &SETSTK#'\n         MNOTE   *,'SNAPS              &SNAPS#'\n         MNOTE   *,'SLINK              &SLINK#'\n         MNOTE   *,'SPRIN              &SPRIN#'\n         MNOTE   *,'STQ                &STQ#'\n         MNOTE   *,'THEN               &THEN#'\n         MNOTE   *,'THENXXXX           &THENXX#'\n.*       MNOTE   *,'TVNAM              &TVNAM#'\n         AIF       ('&A' EQ 'STARTA').STARTA\n&#MCALL  SETA      &SYSNDX-&#MCALL\n         MNOTE     *,'THERE WERE &#MCALL MACRO CALLS IN THIS DECK'\n         AGO       .B\n.STARTA  ANOP\n&#MCALL  SETA      &SYSNDX-&#MCALL-1\n         MNOTE     *,'THERE WERE &#MCALL MACROS IN STARTA && COMMR'\n.B       ANOP\n&CENT#   SETA      0\n&ERROR#  SETA      0\n&FREE#   SETA      0\n&IF#     SETA      0\n&IFALL#  SETA      0\n&IFANY#  SETA      0\n&IFNALL# SETA      0\n&IFNONE# SETA      0\n&IFNOT#  SETA      0\n&IFXXXX# SETA      0\n&LOOKUP# SETA      0\n&LQ#     SETA      0\n&OFFSET# SETA      0\n&OUTPUT# SETA      0\n&Q#      SETA      0\n&SETLNK# SETA      0\n&SETSTK# SETA      0\n&SLINK#  SETA      0\n&SNAPS#  SETA      0\n&SPRIN#  SETA      0\n&STQ#    SETA      0\n&THEN#   SETA      0\n&THENXX# SETA      0\n&TVNAM#  SETA      0\n         MEND\n./ ADD NAME=NOT      0100-80001-80001-1200-00019-00019-00000-MACLIB  00\n         MACRO\n&A       NOT       &B,&C\n         LCLA      &D\n         AIF       ('&C'EQ'THEN').A1\n&A       IFXXXXXX  NOT,&B,&C\n         MEXIT\n.A1      ANOP\n&A       IFXXXXXX  IF,&B,$&SYSNDX\n&D       SETA      3\n.A6      ANOP\n         AIF       ('&SYSLIST(&D+1)'EQ'').A5\n         AIF       ('&SYSLIST(&D+1)'(1,1)NE'(').A5\n         THENXXXX  &SYSLIST(&D)\n&D       SETA      &D+1\n         AGO       .A6\n.A5      ANOP\n         THENXXXX  &SYSLIST(&D),&SYSLIST(&D+1)\n$&SYSNDX DC        0H'0'\n         MEND\n./ ADD NAME=OFFSET   0100-80001-80001-1200-00114-00114-00000-MACLIB  00\n         MACRO\n&A       OFFSET    &B,&C,&D,&E\n         GBLC      &OFFSET\n         GBLA      &OFFSET#\n&OFFSET# SETA      &OFFSET#+1\n         AIF       ('&B'EQ'L').L\n         AIF       ('&B'EQ'ST').ST\n         AIF       ('&B'EQ'LR').LR\n         AIF       ('&B'EQ'BR').BR\n         AIF       ('&B'EQ'LRAL').LRAL\n         AIF       ('&B'EQ'BALR').BALR\n         AIF       ('&B'EQ'LLA').LLA\n         AIF       ('&B'EQ'USING').USING\n         AIF       ('&B'EQ'DROP').DROP\n         AIF       ('&B'EQ'CNOP').CNOP\n         AIF       ('&B'EQ'DC').DC\n         AIF       ('&B'EQ'EQU').EQU\n         AIF       ('&B'EQ'BLR').BLR\n         AIF       ('&B'EQ'BER').BER\n         AIF       ('&B'EQ'BHR').BHR\n         MNOTE     '***ERROR*** ILLEGAL ''OFFSET'' OPERATION'\n&A       DC        H'0'\n         MEXIT\n.L       AIF       ('&OFFSET'EQ'YES').LST\n&A       L         &C,&D                                           V1L5\n         MEXIT\n.ST      AIF       ('&OFFSET'EQ'YES').LST\n&A       ST        &C,&D\n         MEXIT\n.LST     ANOP\n&A       &B        &C,&D.(RO)\n         MEXIT\n.LR      AIF       ('&OFFSET'EQ'YES').LR2\n         AIF       ('&C'EQ'&D').LR1\n         AGO       .COMMON\n.LR2     ANOP\n&A       LA        &C,Z&D.(RO)\n.LR1     MEXIT\n.BR      AIF       ('&OFFSET'EQ'YES').BR1\n&A       BR        &C\n         MEXIT\n.BR1     ANOP\n&A       B         Z&C.(RO)\n         MEXIT\n.BLR     AIF       ('&OFFSET'EQ'YES').BLR1\n&A       BLR       &C\n         MEXIT\n.BLR1    ANOP\n&A       BL        Z&C.(RO)\n         MEXIT\n.BER     AIF       ('&OFFSET'EQ'YES').BER1\n&A       BER       &C\n         MEXIT\n.BER1    ANOP\n&A       BE        Z&C.(RO)\n         MEXIT\n.BHR     AIF       ('&OFFSET'EQ'YES').BHR1\n&A       BHR       &C\n         MEXIT\n.BHR1    ANOP\n&A       BH        Z&C.(RO)\n         MEXIT\n.BALR    AIF       ('&OFFSET'EQ'NO').COMMON\n&A       BAL       &C,Z&D.(RO)\n         MEXIT\n.LRAL    AIF       ('&OFFSET'EQ'YES').LRAL1\n&A       L         &C,&D                                           V1L5\n         MEXIT\n.LRAL1   ANOP\n&A       LR        &C,RO\n         AL        &C,&D\n         MEXIT\n.LLA     AIF       ('&OFFSET'EQ'YES').LLA1\n&A       L         &C,&D                                           V1L5\n         MEXIT\n.LLA1    ANOP\n&A       LR        &C,RO\n         AL        &C,&D.(RO)\n         MEXIT\n.USING   AIF       ('&OFFSET'EQ'YES').USING1\n         USING     &C,&D\n         MEXIT\n.USING1  ANOP\n         USING     &C,&E\n         LA        &E,Z&D.(RO)\n         MEXIT\n.DROP    AIF       ('&OFFSET'EQ'YES').DROP1\n         USING     Z&C,&C\n         MEXIT\n.DROP1   ANOP\n         USING     Z&D,&D\n         MEXIT\n.COMMON  ANOP\n&A       &B        &C,&D\n         MEXIT\n.CNOP    AIF       ('&C'EQ'BALR').CNOP2\n         MNOTE     '***ERROR*** ILLEGAL ''OFFSET'' OPERATION'\n&A       DC        H'0'\n         MEXIT\n.CNOP2   AIF       ('&OFFSET'EQ'YES').CNOP1\n         CNOP      2,4\n         MEXIT\n.CNOP1   ANOP\n         CNOP      0,4\n         MEXIT\n.DC      ANOP\n&A       DC        &C.(&D)\n         MEXIT\n.EQU     AIF       ('&OFFSET'EQ'YES').EQU1\n&A       EQU       &C\n         MEXIT\n.EQU1    ANOP\n&A       EQU       &D\n         MEND\n./ ADD NAME=OUT      0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n         OUT       &B\n         AIF       ('&B'NE'').A\n         BALR      RDONE,RC\n         MEXIT\n.A       AIF       ('&B'EQ'DONE').B\n         AIF       ('&B'NE'LOOP').C\n         LR        RDONE,R&B\n.B       ANOP\n         BR        RC\n         MEXIT\n.C       ANOP\n         LA        RDONE,&B\n         BR        RC\n         MEND\n./ ADD NAME=OUTFLIST 0100-80001-80001-1200-00021-00021-00000-MACLIB  00\n         MACRO\n         OUTFLIST  &BEGLIST,&DUMMYNM\n         GBLC      &FUNAME(255),&FMODE(255)\n         GBLA      &NUMFUN,&HCHAIN(255),&LCHAIN(255),&HEAD\n         LCLA      &N\n         LCLC      &SPMODE                                         V1L4\n         BINTREE\n         DS        0F                  ALIGN LIST                  V1L4\n&DUMMYNM DC        CL6'*-*',AL1(FUNC+REAL4)    NAME, TYPE          V1L4\n         DC        AL1(&HEAD,&HEAD),AL3(&DUMMYNM) LOPTR,HIPTR,ADDR V1L4\n&BEGLIST EQU       *\n&N       SETA      1\n.LOOP    ANOP\n&SPMODE  SETC      'FUNC+'                                         V1L4\n         AIF       ('&FMODE(&N)' NE 'SUBR').FUNC                   V1L4\n&SPMODE  SETC      ''                                              V1L4\n.FUNC    DC        CL6'&FUNAME(&N)',AL1(&SPMODE&FMODE(&N))         V1L4\n         DC    AL1(&LCHAIN(&N)),AL1(&HCHAIN(&N)),VL3(&FUNAME(&N))  V1L4\n&N       SETA      &N+1\n         AIF       (&N LE &NUMFUN).LOOP\n         MEND\n./ ADD NAME=OUTFOUR  0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n         OUTFOUR   &B\n         AIF       ('&B'NE'').A\n         BAL       RDONE,COUT4\n         MEXIT\n.A       AIF       ('&B'EQ'DONE').B\n         AIF       ('&B'NE'LOOP').C\n         LR        RDONE,R&B\n.B       ANOP\n         B         COUT4\n         MEXIT\n.C       ANOP\n         LA        RDONE,&B\n         B         COUT4\n         MEND\n./ ADD NAME=OUTPUT   0100-80001-80001-1200-00006-00006-00000-MACLIB  00\n         MACRO\n&A       OUTPUT    &B,&C,&D\n         GBLA      &OUTPUT#\n&OUTPUT# SETA      &OUTPUT#+1\n&A       THENXXXX  (OUTPUT,&B,&C),&D\n         MEND\n./ ADD NAME=OUTR1    0100-80001-80001-1200-00010-00010-00000-MACLIB  00\n         MACRO\n         OUTR1     &B\n         AIF       ('&B'EQ'').A\n         AIF       ('&B'(1,1)NE'(').B\n         AIF       ('&B'EQ'(R1)').A\n         LR        R1,&B\n.A       MEXIT\n.B       ANOP\n         LA        R1,&B\n         MEND\n./ ADD NAME=OUTR2    0100-80001-80001-1200-00013-00013-00000-MACLIB  00\n         MACRO\n         OUTR2     &B\n         AIF       ('&B'EQ'').A\n         AIF       ('&B'NE'1').B\n         SR        R2,R2\n.A       MEXIT\n.B       AIF       ('&B'(1,1)NE'(').C\n         AIF       ('&B'EQ'(R2)').D\n         LR        R2,&B\n.D       MEXIT\n.C       ANOP\n         LA        R2,&B-1\n         MEND\n./ ADD NAME=OUTSTAR  0100-80001-80001-1200-00015-00015-00000-MACLIB  00\n         MACRO\n         OUTSTAR   &B\n         AIF       ('&B'NE'').A\n         BAL       RDONE,COUTSTAR\n         MEXIT\n.A       AIF       ('&B'EQ'DONE').B\n         AIF       ('&B'NE'LOOP').C\n         LR        RDONE,R&B\n.B       ANOP\n         BALR      R1,RC\n         MEXIT\n.C       ANOP\n         LA        RDONE,&B\n         BALR      R1,RC\n         MEND\n./ ADD NAME=PRINTOFF 0100-80001-80001-1200-00046-00046-00000-MACLIB  00\n         MACRO\n         PRINTOFF  &LOC=\n         GBLC      &ON(7)                                          V1L4\n         LCLA      &L                                              V1L4\n&L       SETA      0                                               V1L4\n.S0      ANOP                                                      V1L4\n         AIF       (&L GE 7).S1                                    V1L4\n&L       SETA      &L+1                                            V1L4\n&ON(&L)  SETC      'ON'                                            V1L4\n         AGO       .S0                                             V1L4\n.S1      ANOP                                                      V1L4\n&L       SETA      0                                               V1L4\n.S2      ANOP                                                      V1L4\n         AIF       (&L GE N'&LOC).END                              V1L4\n&L       SETA      &L+1                                            V1L4\n         AIF       ('&LOC(&L)' EQ 'CDEFN').S3                      V1L4\n         AIF       ('&LOC(&L)' EQ 'STARTA').S4                     V1L4\n         AIF       ('&LOC(&L)' EQ 'STARTB').S5                     V1L4\n         AIF       ('&LOC(&L)' EQ 'COMMR').S6                      V1L4\n         AIF       ('&LOC(&L)' EQ 'MAIN').S7                       V1L4\n         AIF       ('&LOC(&L)' EQ 'SYS').S8                        V1L4\n         AIF       ('&LOC(&L)' EQ 'ACCT').S9                       V1L4\n         AGO       .S2                                             V1L4\n.S3      ANOP                                                      V1L4\n&ON(1)   SETC      'OFF'                                           V1L4\n         AGO       .S2                                             V1L4\n.S4      ANOP                                                      V1L4\n&ON(2)   SETC      'OFF'                                           V1L4\n         AGO       .S2                                             V1L4\n.S5      ANOP                                                      V1L4\n&ON(3)   SETC      'OFF'                                           V1L4\n         AGO       .S2                                             V1L4\n.S6      ANOP                                                      V1L4\n&ON(4)   SETC      'OFF'                                           V1L4\n         AGO       .S2                                             V1L4\n.S7      ANOP                                                      V1L4\n&ON(5)   SETC      'OFF'                                           V1L4\n         AGO       .S2                                             V1L4\n.S8      ANOP                                                      V1L4\n&ON(6)   SETC      'OFF'                                           V1L4\n         AGO       .S2                                             V1L4\n.S9      ANOP                                                      V1L4\n&ON(7)   SETC      'OFF'                                           V1L4\n         AGO       .S2                                             V1L4\n.END     MEXIT                                                     V1L4\n         MEND                                                      V1L4\n./ ADD NAME=PUNCHGEN 0100-80001-80001-1200-00032-00032-00000-MACLIB  00\n         MACRO\n         PUNCHGEN\n         GBLC      &FNAME(255),&FSTATUS(255)\n         GBLA      &FNUM(255),&IND2\n         LCLA      &L,&SUM\n         PUNCH     '         GENERATE  MAXNAME=200,MAXGPS=100'\n&L       SETA      1\n&SUM     SETA      1\n         AGO       .S1\n.L1      ANOP\n         PUNCH     '  RECORD  IDENT=(3,''END'',2) '\n.LOOP    AIF       (&L GE &IND2).END\n&SUM     SETA      &SUM+&FNUM(&L)\n&L       SETA      &L+1\n.S1      AIF       ('&FSTATUS(&SUM)' NE 'DISK').LOOP\n         AIF       (&FNUM(&L) EQ 4).P4\n         AIF       (&FNUM(&L) EQ 3).P3\n         AIF       (&FNUM(&L) EQ 2).P2\n         PUNCH     '  MEMBER NAME=(&FNAME(&SUM)) '\n         AGO       .L1\n.P2       ANOP\n         PUNCH     '  MEMBER NAME=(&FNAME(&SUM),&FNAME(&SUM+1)) '\n         AGO       .L1\n.P3      ANOP\n   PUNCH '  MEMBER NAME=(&FNAME(&SUM),&FNAME(&SUM+1),&FNAME(&SUM+2)) '\n         AGO       .L1\n.P4      ANOP\n PUNCH ' MEMBER NAME=(&FNAME(&SUM),&FNAME(&SUM+1),&FNAME(&SUM+2),&FNAMEX\n               (&SUM+3))'\n         AGO       .L1\n.END       ANOP\n         MEND\n./ ADD NAME=ROMIT    0100-80001-80001-1200-00006-00006-00000-MACLIB  00\n         MACRO\n&NAME    ROMIT     &ADDR\n&NAME    DC        0H'0'\n         DC        X'AFFB'\n         DC        AL2(XBOOT-START)\n         MEND\n./ ADD NAME=SETSTACK 0100-80001-80001-1200-00018-00018-00000-MACLIB  00\n         MACRO\n&NAME    SETSTACK  &N,&RET\n         GBLA      &SETSTK#\n         LCLA      &NA\n&SETSTK# SETA      &SETSTK#+1\n         AIF       (T'&N EQ 'O').NON\n         AIF       (T'&N EQ 'U').CHAR\n&NA      SETA      &N\n         AGO       .LA\n.CHAR    ANOP\n&NA      SETA      K'&N-2\n.LA      ANOP\n&NAME    LA        R1,&NA+4(,R9)\n         THENXXXX  (DO,CSETSTAK),&RET\n         MEXIT\n.NON     ANOP\n&NAME    THENXXXX  (DO,CSETSTAK),&RET\n         MEND\n./ ADD NAME=SETSTAT  0100-80001-80001-1200-00025-00025-00000-MACLIB  00\n         MACRO\n         SETSTAT   &NAME,&COND\n         GBLC      &FNAME(255),&FSTATUS(255)\n         GBLA      &FNUM(255),&IND1\n         LCLA      &SUM,&J\n&FNAME(&IND1) SETC '&NAME'\n&SUM     SETA      1\n&J       SETA     1\n         AIF       ('&NAME' NE 'ALL').S1\n&J       SETA      &IND1\n         AGO       .S2\n.LOOP    ANOP\n&SUM     SETA      &SUM+&FNUM(&J)\n&J       SETA      &J+1\n.S1      AIF       ('&FNAME(&SUM)' NE '&NAME').LOOP\n         AIF       ('&FSTATUS(&SUM)' EQ '&COND').END\n&J       SETA      &SUM+&FNUM(&J)\n         AIF       ('&FSTATUS(&SUM)' EQ 'DISK').S2\n         MNOTE ' THE STATUS OF &FNAME(&SUM) CANNOT BE SET TO &COND'\n         MEXIT\n.S2      ANOP\n&FSTATUS(&SUM) SETC '&COND'\n&SUM     SETA      &SUM+1\n         AIF       (&SUM LT &J).S2\n.END     MEND\n./ ADD NAME=SLIST    0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n          SLIST     &NAME\n         FLIST     &NAME,SUBR                                      V1L4\n          MEND\n./ ADD NAME=SNAPS    0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&NAME    SNAPS     &IDENT,&ADDR,&NBYTES\n&NAME    CSNAP     &IDENT,&ADDR,&NBYTES\n         MEND\n./ ADD NAME=SPRIN    0100-80001-80001-1200-00011-00011-00000-MACLIB  00\n         MACRO\n&NAME    SPRIN     &ADDR,&NBYTES\n         GBLA      &SPRIN#\n&SPRIN#  SETA      &SPRIN#+1\n&NAME    STM       0,15,XPRINTS\n         LA        R1,&ADDR\n         AIF       (T'&NBYTES EQ 'O').NGIVEN\n         LA        R2,&NBYTES-1\n.NGIVEN  BAL       R14,XPRINT\n         LM        0,15,XPRINTS\n         MEND\n./ ADD NAME=STACK    0100-80001-80001-1200-00010-00010-00000-MACLIB  00\n         MACRO\n         STACK     &ENTRIES=\n         GBLA      &NUM\n         AIF       (&ENTRIES GT 21).MSG1\n&NUM     SETA      &ENTRIES\n         AGO       .EXIT\n.MSG1    ANOP\n         MNOTE     '** MAX OF 21 ENTRIES ALLOWED IN TABLE - 21 ASSUMED'\n&NUM     SETA      21\n.EXIT    MEND\n./ ADD NAME=STACKGEN 0100-80001-80001-1200-00018-00018-00000-MACLIB  00\n         MACRO\n         STACKGEN\n         GBLC      &LIBCORE\n         GBLA      &NUM\n         DC        0D'0'\nDMYNAME  DC        CL8' '\nDMYTTR   DC        4X'00'\nSTAKBOT  EQU       *\n         AIF       (&NUM EQ 1).GEN1\n&NUM     SETA      &NUM-1\n         DC        &NUM.XL12'404040404040404000000000'\n.GEN1    ANOP\nUNPROT   EQU       *\n         AIF       ('&LIBCORE' EQ 'USE').FIND12\nTABLE    EQU       *\n.FIND12  ANOP\n         DC        CL8' ',4X'00'\n         MEND\n./ ADD NAME=STACKRES 0100-80001-80001-1200-00018-00018-00000-MACLIB  00\n         MACRO\n         STACKRES  &CORE=\n         GBLC      &LIBCORE,&CORLIST(255)\n         GBLA      &CORE#\n         LCLA      &I\n&CORE#   SETA      0\n&I       SETA      N'&CORE\n         AIF       (&I LE 255).OK\n         MNOTE     '*** MAX OF 255 LIBRARY AND FUNCTION NAMES ALLOWED -X\n               FIRST 255 USED ***'\n&I       SETA      255\n.OK      AIF       (&I GT 0).GT0\n         MNOTE     '*** LIBCORE=OMIT ASSUMED ***'\n.GT0     ANOP\n&CORE#   SETA      &CORE#+1\n&CORLIST(&CORE#)  SETC   '&CORE(&CORE#)'    PUT ALL NAMES IN CORLIST\n         AIF      (&CORE# LT &I).GT0\n.EXIT    MEND\n./ ADD NAME=STATLIST 0100-80001-80001-1200-00021-00021-00000-MACLIB  00\n         MACRO\n         STATLIST\n         GBLC      &FNAME(255),&FSTATUS(255)\n         GBLA      &IND1\n         LCLA      &N\n         LCLC      &NAME                                           V1L4\n&N       SETA      1\n         MNOTE     0,'  THE STATUS OF EACH SUBPROGRAMME IS AS FOLLOWS'\n         MNOTE     *,'   EXP       CORE   '                        V1L4\n         MNOTE     *,'   DEXP      CORE   '                        V1L4\n         MNOTE     *,'   ALOG      CORE   '                        V1L4\n         MNOTE     *,'   ALOG10    CORE   '                        V1L4\n         MNOTE     *,'   DLOG      CORE   '                        V1L4\n         MNOTE     *,'   DLOG10    CORE   '                        V1L4\n.LIST    ANOP\n&NAME    SETC      '&FNAME(&N)'.'       '                          V1L4\n&NAME    SETC      '&NAME'(1,6)                                    V1L4\n         MNOTE     *,'   &NAME    &FSTATUS(&N)   '                 V1L4\n&N       SETA      &N+1\n         AIF       (&N LT &IND1).LIST\n         MEND\n./ ADD NAME=STATUS   0100-80001-80001-1200-00013-00013-00000-MACLIB  00\n         MACRO\n         STATUS    &FN\n         GBLA      &IND1\n         GBLC      &FNAME(255),&STATUS,&FSTATUS(255)\n         LCLA      &N\n         ACTR      150\n&N       SETA      0\n&FNAME(&IND1)  SETC   '&FN'\n.LOOP1   ANOP\n&N       SETA      &N+1\n         AIF       ('&FNAME(&N)' NE '&FN').LOOP1\n&STATUS  SETC      '&FSTATUS(&N)'\n         MEND\n./ ADD NAME=STAX     0100-80001-80001-1200-00189-00189-00000-MACLIB  00\n          MACRO\n&NAME   STAX  &EXADDR,&OBUF=,&IBUF=,&USADDR=,&REPLACE=,&DEFER=,&MF=I\n         LCLA  &A\n         LCLC  &GNAME,&H\n         LCLA  &REPLSW,&REPL,&DEFRSW\n&REPL    SETA  X'80'\n&GNAME   SETC  'IHB'.'&SYSNDX'\n         AIF   ('&EXADDR' EQ '' AND '&DEFER' EQ '').CANCEL\n         AIF   ('&EXADDR' NE '').DEFER4\n         AIF   ('&OBUF' NE '' OR '&IBUF' NE '').CANCEL\n         AIF   ('&REPLACE' NE '' OR '&USADDR' NE '').CANCEL\n.DEFER4  AIF   ('&REPLACE' EQ '').DEFER5\n         AIF   ('&REPLACE' EQ 'YES').DEFER5\n&REPLSW  SETA  X'40'\n.DEFER5  ANOP\n         AIF   ('&NAME' EQ '' OR '&MF' EQ 'L').CONTA\n&NAME    DS    0H\n         AGO   .CONTA\n.ERROR   MNOTE 'INVALID REGISTER SPECIFICATION'\n         MEXIT\n.ERROR1  MNOTE 'INVALID OPTION SPECIFIED'\n         MEXIT\n.CONTA   ANOP\n         AIF   ('&DEFER' EQ '').DEFER1       IS DEFER REQUESTED\n         AIF   ('&DEFER' EQ 'YES').DEFER2    SHOULD DEFER ATTN\n         AIF   ('&DEFER' EQ 'NO').DEFER3     SHOULD CANCEL DEFER ATTN\n         AGO   .ERROR1        INVALID OPERAND HAS BEEN SPECIFIED\n.DEFER2  ANOP                 SET DEFER SWITCH EQUAL TO\n&DEFRSW  SETA  X'20'          DEFER/YES OR X'20'\n         AGO   .DEFER1\n.DEFER3  ANOP                 SET DEFER SWITCH EQUAL TO\n&DEFRSW  SETA  X'10'          DEFER/NO OR X'10'\n.DEFER1  ANOP\n         AIF   ('&MF' EQ 'L').LROUT      IS THIS A LIST REQUEST\n         AIF   ('&MF' EQ 'I').IROUT\n         AIF   ('&MF(1)' EQ 'E').EROUT\n         MNOTE 'INVALID MF SPECIFICATION'\n         MEXIT\n.EROUT   ANOP\n         AIF   ('&MF'(4,1) EQ '(').ISAREG\n         LA    1,&MF(2)      ADDRESS OF PARAMETER LIST INTO REG 1\n         AGO   .CONTB\n.ISAREG  AIF   ('&MF(2)' EQ '(1)').CONTB\n&A       SETA  K'&MF-6\n&H       SETC  '&MF'(5,&A)\n         LR    1,&H          ADDRESS OF PARAMETER LIST INTO REG 1\n.CONTB   ANOP\n         AIF   ('&EXADDR' EQ '').CONTC\n         AIF   ('&EXADDR'(1,1) EQ '(').ISAREG1\n         LA    14,&EXADDR    ADDRESS OF EXIT ROUTINE\n         ST    14,0(1,0)     INTO PARAMETER LIST\n         AGO   .CONTC\n.ISAREG1 ST    &EXADDR(1),0(1,0)  ADDRESS OF EXIT ROUTINE INTO LIST\n.CONTC   AIF   ('&USADDR' EQ '').CONTD\n         AIF   ('&USADDR'(1,1) EQ '(').ISAREG2\n         LA    14,&USADDR    ADDRESS OF USER PARAMETERS\n         ST    14,16(1,0)    INTO LIST\n         AGO   .CONTD\n.ISAREG2 ST    &USADDR(1),16(1,0) ADDRESS OF USER PARAMETERS INTO\n*                                 LIST\n.CONTD   AIF   ('&OBUF(1)' EQ '').CNTSUB1\n         AIF   ('&OBUF(1)'(1,1) EQ '(').IRGSUB1\n         LA    14,&OBUF(1)   ADDRESS OF OUTPUT BUFFERS\n         ST    14,8(1,0)     INTO LIST\n         AGO   .CNTSUB1\n.IRGSUB1 ST   &OBUF(1),8(1,0)  ADDRESS OF OUTPUT BUFFERS INTO LIST\n.CNTSUB1 AIF  ('&OBUF(2)' EQ '').CONTE\n         AIF   ('&OBUF(2)'(1,1) EQ '(').IRGSUB2\n         B     &GNAME.B            AROUND CONSTANT           AJ A52533\n&GNAME.A DC    AL2(&OBUF(2))       OBUF LENGTH               AJ A52533\n&GNAME.B MVC   6(2,1),&GNAME.A     MOVE LENGTH TO PARM LIST  AJ A52533\n         AGO   .CONTE\n.IRGSUB2 STH  &OBUF(2),6(1)  LENGTH OF OUTPUT BUFFERS INTO LIST\n.CONTE   AIF   ('&IBUF(1)' EQ '').CNTSUB2\n         AIF   ('&IBUF(1)'(1,1) EQ '(').IRGSUB3\n         LA    14,&IBUF(1)    ADDRESS OF INPUT BUFFERS\n         ST    14,12(1,0)    INTO LIST\n         AGO   .CNTSUB2\n.IRGSUB3 ST   &IBUF(1),12(1,0)    ADDRESS OF INPUT BUFFERS INTO LIST\n.CNTSUB2 AIF  ('&IBUF(2)' EQ '').CONTG\n         AIF   ('&IBUF(2)'(1,1) EQ '(').IRGSUB4\n         B     &GNAME.D            GO AROUND CONSTANT        AJ A52533\n&GNAME.C DC    AL2(&IBUF(2))       IBUF LENGTH               AJ A52533\n&GNAME.D MVC   4(2,1),&GNAME.C     IBUF LENGTH TO PARM LIST  AJ A52533\n         AGO   .CONTG\n.IRGSUB4 STH  &IBUF(2),4(1)  LENGTH OF INPUT BUFFERS INTO LIST\n.CONTG   AIF   ('&REPLACE' EQ 'YES').CNTSUB5\n         AIF   ('&REPLACE' EQ 'NO').CNTSUB6\n.CNTSUB5 NI    16(1),&REPL   INDICATE REPLACE PREVIOUS STAX\n.CNTSUB6 OI    16(1),&REPLSW+&DEFRSW   REPLACE/NO REPLACE, DEFERRAL IND\n         AGO   .SVC\n.LROUT   ANOP\n&NAME    DS    0F\n.CONTL4  AIF   ('&EXADDR' EQ '').DEFER6\n         AIF   ('&EXADDR'(1,1) EQ '(').ERROR\n         DC    AL4(&EXADDR)  ADDRESS OF EXIT ROUTINE\n         AGO   .DEFER7\n.DEFER6  DC    AL4(0)         ADDRESS OF EXIT ROUTINE\n.DEFER7  ANOP\n.CNTL6   AIF   ('&IBUF(2)' EQ '').CONTL1\n         AIF   ('&IBUF(2)'(1,1) EQ '(').ERROR\n         DC    AL2(&IBUF(2)) LENGTH OF INPUT BUFFERS\n         AGO   .CONTL2\n.CONTL1  DC    AL2(0)        LENGTH OF INPUT BUFFERS\n.CONTL2  AIF   ('&OBUF(2)' EQ '').CONTL3\n         AIF   ('&OBUF(2)'(1,1) EQ '(').ERROR\n         DC    AL2(&OBUF(2)) LENGTH OF OUTPUT BUFFERS\n         AGO   .CONTLA\n.CONTL3  DC    AL2(0)        LENGTH OF OUTPUT BUFFERS\n.CONTLA  AIF   ('&OBUF(1)' EQ '').CONTLB\n         AIF   ('&OBUF(1)'(1,1) EQ '(').ERROR\n         DC    AL4(&OBUF(1))  ADDRESS OF OUTPUT BUFFERS\n         AGO   .CONTL8\n.CONTLB  DC    A(0)          ADDRESS OF OUTPUT BUFFERS\n.CONTL8  AIF   ('&IBUF(1)' EQ '').CONTL9\n         AIF   ('&IBUF(1)'(1,1) EQ '(').ERROR\n         DC    AL4(&IBUF(1))    ADDRESS OF INPUT BUFFERS\n         AGO   .CONTL0\n.CONTL9  DC    A(0)          ADDRESS OF INPUT BUFFERS\n.CONTL0  DC    AL1(&REPLSW+&DEFRSW)    REPLACE/NO REPLACE, DEFERRAL IND\n.CONTL6  AIF   ('&USADDR' EQ '').CONTL7\n         AIF   ('&USADDR'(1,1) EQ '(').ERROR\n         DC    AL3(&USADDR)   ADDRESS OF USER PARAMETERS\n         AGO   .ENDLIST\n.CONTL7  DC    AL3(0)        ADDRESS OF USER PARAMETERS\n.ENDLIST  ANOP\n         MEXIT\n.IROUT   ANOP\n         LA    1,&GNAME      ADDRESS OF PARAMETER LIST\n         AIF   ('&IBUF(2)' EQ '').IROUT1\n         AIF   ('&IBUF(2)'(1,1) NE '(').IROUT1\n         STH   &IBUF(2),4(1) LENGTH OF INPUT BUFFERS\n.IROUT1  AIF   ('&OBUF(2)' EQ '').IROUT2\n         AIF   ('&OBUF(2)'(1,1) NE '(').IROUT2\n         STH   &OBUF(2),6(1) LENGTH OF OUTPUT BUFFERS\n.IROUT2  AIF   ('&EXADDR' EQ '').IROUT3\n         AIF   ('&EXADDR'(1,1) NE '(').IROUT3\n         ST    &EXADDR(1),0(1,0)  ADDRESS OF EXIT ROUTINE INTO LIST\n.IROUT3  AIF   ('&USADDR' EQ '').IROUT4\n         AIF   ('&USADDR'(1,1) NE '(').IROUT4\n         IC    15,16(1)           GET OPTIONS BYTE\n         ST    &USADDR(1),16(1,0) ADDRESS OF USER PARAMETERS IN LIST\n         STC   15,16(1)           PRESERVE OPTIONS BYTE\n.IROUT4  AIF   ('&IBUF' EQ '').IROUT5\n         AIF   ('&IBUF(1)'(1,1) NE '(').IROUT5\n         ST    &IBUF(1),12(1,0)   ADDRESS OF INPUT BUFFERS INTO LIST\n.IROUT5  AIF   ('&OBUF' EQ '').IROUT6\n         AIF   ('&OBUF(1)'(1,1) NE '(').IROUT6\n         ST    &OBUF(1),8(1,0)    ADDRESS OF OUTPUT BUFFERS INTO LIST\n.IROUT6  ANOP\n         B     20(0,1)\n&GNAME   DS    0F\n.CNTD    AIF   ('&EXADDR' EQ '').CNTE\n         AIF   ('&EXADDR'(1,1) EQ '(').CNTE\n         DC    AL4(&EXADDR)  ADDRESS OF EXIT ROUTINE\n         AGO  .CONTF2\n.CNTE    DC    AL4(0)   ADDRESS OF EXIT ROUTINE\n.CONTF2  AIF   ('&IBUF(2)' EQ '').CNTA\n         AIF   ('&IBUF(2)'(1,1) EQ '(').CNTA\n         DC    AL2(&IBUF(2)) LENGTH OF INPUT BUFFERS\n         AGO   .CNTB\n.CNTA    DC    AL2(0)        LENGTH OF INPUT BUFFERS\n.CNTB    AIF   ('&OBUF(2)' EQ '').CNTC\n         AIF   ('&OBUF(2)'(1,1) EQ '(').CNTC\n         DC    AL2(&OBUF(2))  LENGTH OF OUTPUT BUFFERS\n         AGO   .CNTK\n.CNTC    DC    AL2(0)        LENGTH OF OUTPUT BUFFERS\n.CNTK    AIF   ('&OBUF(1)' EQ '').CNTL\n         AIF   ('&OBUF(1)'(1,1) EQ '(').CNTL\n         DC    AL4(&OBUF(1)) ADDRESS OF OUTPUT BUFFERS\n         AGO   .CNTI\n.CNTL    DC    A(0)          ADDRESS OF OUPTUT BUFFERS\n.CNTI    AIF   ('&IBUF(1)' EQ '').CNTJ\n         AIF   ('&IBUF(1)'(1,1) EQ '(').CNTJ\n         DC    AL4(&IBUF(1)) ADDRESS OF INPUT BUFFERS\n         AGO   .CNTM\n.CNTJ    DC    A(0)          ADDRESS OF INPUT BUFFERS\n.CNTM    DC    AL1(&REPLSW+&DEFRSW)    REPLACE/NO REPLACE, DEFERRAL IND\n.CNTF    AIF   ('&USADDR' EQ '').CNTH\n         AIF   ('&USADDR'(1,1) EQ '(').CNTH\n         DC    AL3(&USADDR)  ADDRESS OF USER PARAMETERS\n         AGO   .SVC\n.CNTH    DC    AL3(0)        ADDRESS OF USER PARAMETERS\n         AGO   .SVC\n.CANCEL  ANOP\n&NAME    DS    0H\n         SR    1,1           CANCEL PREVIOUS STAX\n.SVC     SVC   96\n         MEND\n./ ADD NAME=TGET     0100-80001-80001-1200-00136-00136-00000-MACLIB  00\n         MACRO\n&NAME    TGET  &BFF,&SIZE,&EDIT,&WAIT\n.*********************************************************************.\n.*                                                                    *\n.*RELEASE 23 DELETIONS                                               *.\n.*                                                                   *.\n.*RELEASE 22 DELETIONS                                               *.\n.*                                                                   *.\n.*RELEASE 21 DELETIONS                                               *.\n.*                                                                   *.\n.*STATUS - CHANGE LEVEL 000                                          *.\n.*                                                                   *.\n.*NAME - TGET                                                        *.\n.*                                                                   *.\n.*FUNCTION - THIS MACRO IS USED TO MOVE A LINE OF INPUT FROM THE TIOC*.\n.*   INPUT BUFFER TO THE USER'S BUFFER AREA.                         *.\n.*                                                                   *.\n.*********************************************************************.\n.*\n.*   TGET BUFFER AREA,BUFFER SIZE,EDIT,WAIT  (EDIT/WAIT ARE DEFAULT)\n.*          (2-12)      (2-12)    ASIS NOWAIT\n.*\n         LCLA  &OPT\n         LCLB  &SW1,&SW2\n         LCLB  &E,&W,&RET\n         LCLC  &ERROPT\n&OPT     SETA  X'80'\n         AIF   ('&BFF' EQ '' OR '&SIZE' EQ '').ERROR1  ERROR CHECK\n         AIF   ('&EDIT' EQ 'R').RF      CHECK FOR R FORM\n         AIF   ('&EDIT' EQ '').WAIT       SKIP IF NULL\n         AIF   ('&EDIT' EQ 'EDIT').EDI    SET EDIT\n         AIF   ('&EDIT' EQ 'ASIS').ASI    SET ASIS\n         AIF   ('&EDIT' EQ 'WAIT').WAI    SET WAIT\n         AIF   ('&EDIT' EQ 'NOWAIT').NOW  SET NOWAIT\n&ERROPT  SETC  '&EDIT'                  SET FOR ERROR MSG\n         AGO   .ERROR3\n.WAIT    ANOP\n&RET     SETB  1\n         AIF   ('&WAIT' EQ '').CHKREG     SKIP IF NULL\n         AIF   ('&WAIT' EQ 'EDIT').EDI    SET EDIT\n         AIF   ('&WAIT' EQ 'ASIS').ASI    SET ASIS\n         AIF   ('&WAIT' EQ 'WAIT').WAI    SET WAIT\n         AIF   ('&WAIT' EQ 'NOWAIT').NOW  SET NOWAIT\n&ERROPT  SETC  '&WAIT'                  SET FOR ERROR MSG\n         AGO   .ERROR3\n.EDI     ANOP\n         AIF   (&E).ERROR2              DUP OPTION\n&E       SETB  1                        EDIT OPTION SPECFIED\n         AGO   .RET\n.ASI     ANOP\n         AIF   (&E).ERROR2              DUP OPTION\n&E       SETB  1                        EDIT OPTION SPECFIED\n&SW1     SETB  1                        ASIS OPTION\n         AGO   .RET\n.WAI     ANOP\n         AIF   (&W).ERROR2              DUP OPTION\n&W       SETB  1                        WAIT OPTION SPECIFIED\n         AGO   .RET\n.NOW     ANOP\n         AIF   (&W).ERROR2              DUP OPTION\n&W       SETB  1                        WAIT OPTION SPECIFIED\n&SW2     SETB  1                        NOWAIT OPTION\n         AGO   .RET\n.RET     ANOP\n         AIF   (&RET).CHKREG\n         AGO   .WAIT                    NEXT POSITION\n.CHKREG  SPACE 1\n         CNOP  0,4\n&OPT     SETA  &OPT+&SW2*16+&SW1        SET OPTIONS\n         AIF   ('&BFF'(1,1) EQ '(' OR '&SIZE'(1,1) EQ '(').REGST REG.\n.*                                      NOTATION\n.*\n.*   REGULAR EXPANSION\n.*\n&NAME    B     *+12                     BRANCH AROUND CONSTANTS\n         DC    AL2(0)                   FILLER\n         DC    AL2(&SIZE)               BUFFER SIZE\n         DC    AL1(&OPT)                OPTION BITS\n         DC    AL3(&BFF)                ADDR OF BUFFER\n         LM    0,1,*-8                  LOAD PARAMETER REGISTERS\n.SVC     SVC   93                       ISSUE SVC\n         SPACE\n         MEXIT\n.*\n.*   REGISTER NOTATION\n.*\n.REGST   ANOP\n&NAME    B     *+8                      BRANCH AROUND CONSTANT\n         AIF   ('&BFF'(1,1) EQ '(' AND '&SIZE'(1,1) EQ '(').BOTH BOTH\n.*                                      PARAMETERS ARE IN REG. FORM\n         AIF   ('&SIZE'(1,1) EQ '(').SZREG   SIZE IN REG\n.*\n.*   BUFFER ADDR IN REGISTER FORM\n.*\n         DC    AL1(&OPT)                OPTION BITS\n         DC    AL3(0)                   BUFFER ADDR\n         LA    1,0(,&BFF(1))            CLR HIGH ORDR BYTE + LD BFR ADR\n         O     1,*-8                    SET OPTIONS\n         LA    0,&SIZE                  LOAD SIZE OF BUFFER\n         AGO   .SVC                     GOTO ISSUE SVC\n.*\n.*   BUFFER SIZE IN REGISTER FORM\n.*\n.SZREG   DC    AL1(&OPT)                OPTION BITS\n         DC    AL3(&BFF)                BUFFER ADDR\n         L     1,*-4                    LOAD PARAMETER REGISTER\n         AIF   ('&SIZE' EQ '(0)').SVC   SIZE IN REG. 0\n         LR    0,&SIZE(1)               LOAD BUFFER SIZE IN REG 0\n         AGO   .SVC                     GOTO ISSUE SVC\n.*\n.*   WHEN BOTH ARE IN REGISTER NOTATION\n.*\n.BOTH    DC    AL1(&OPT)                OPTION BITS\n         DC    AL3(0)                   BUFFER ADDR\n         LA    1,0(,&BFF(1))            CLR HIGH ORDR BYTE + LD BFR ADR\n         O     1,*-8                    SET OPTIONS\n         AIF   ('&SIZE' EQ '(0)').SVC   GOTO SVC IF (0) SPECIFIED\n         LR    0,&SIZE(1)               LOAD BUFFER SIZE IN REG 0\n         AGO   .SVC                     GOTO ISSUE SVC\n.RF      ANOP\n         AIF   ('&WAIT' NE '').RERR\n         AIF   ('&BFF'(1,1) NE '(' OR '&SIZE'(1,1) NE '(').RERR\n&NAME    DS    0H\n         AIF   ('&BFF' EQ '(1)').SIZE\n         LR    1,&BFF(1)                LOAD BUFFER ADDRESS IN REG 1\n.SIZE    AIF   ('&SIZE' EQ '(0)').SVC\n         LR    0,&SIZE(1)               LOAD BUFFER SIZE IN REG 0\n         AGO   .SVC\n.RERR    IHBERMAC 192\n         MEXIT\n.ERROR1  IHBERMAC 24\n         MEXIT\n.ERROR2  IHBERMAC 54,,,\n         MEXIT\n.ERROR3  IHBERMAC 49,,&ERROPT\n         MEND\n./ ADD NAME=THEN     0100-80001-80001-1200-00018-00018-00000-MACLIB  00\n         MACRO\n&A       THEN\n         GBLA      &THEN#\n         LCLA      &B\n&THEN#   SETA      &THEN#+1\n         AIF       ('&A'EQ'').A3\n&A       DC        0H'0'\n.A3      ANOP\n&B       SETA      1\n.A2      ANOP\n         AIF       ('&SYSLIST(&B+1)'EQ'').A1\n         AIF       ('&SYSLIST(&B+1)'(1,1)NE'(').A1\n         THENXXXX  &SYSLIST(&B)\n&B       SETA      &B+1\n         AGO       .A2\n.A1      ANOP\n         THENXXXX  &SYSLIST(&B),&SYSLIST(&B+1)\n         MEND\n./ ADD NAME=THENXXXX 0100-80001-80001-1200-00124-00124-00000-MACLIB  00\n         MACRO\n&A       THENXXXX  &B,&C\n         GBLA      &THENXX#\n         LCLA      &X\n         LCLC      &Y\n&THENXX# SETA      &THENXX#+1\n         AIF       ('&B'(1,1)EQ'(').A1\n         AIF       ('&B'EQ'DONE').A6\n         AIF       ('&B'EQ'LOOP').A6\n&X       SETA      1\n.LKKA1   ANOP\n&Y       SETC      '&X'\n         AIF       ('&B' EQ 'R&Y').LKKA2\n&X       SETA      &X+1\n         AIF       ((&X LT 14) OR (&X EQ 15)).LKKA1\n&A       B         &B\n         MEXIT\n.A6      ANOP\n&A       BR        R&B\n         MEXIT\n.LKKA2   BR        &B\n         MEXIT\n.A1      ANOP\n         AIF       ('&B(1)'EQ'DO').A2\n         AIF       ('&B(1)'EQ'OUTPUT').A9\n         AIF       ('&B(1)'EQ'ERROR').A10\n         AIF       ('&B(2)'EQ'E').A3\n         AIF       ('&B(2)'EQ'O').A40\n         AIF       ('&B(2)'EQ'N').A41\n         AIF       ('&B(2)'EQ'X').A42\n         AIF       ('&B(2)'EQ'EQ').A3\n         AIF       ('&B(2)'EQ'EQU').A3\n         AIF       ('&B(2)'EQ'OR').A40\n         AIF       ('&B(2)'EQ'AND').A41\n         AIF       ('&B(2)'EQ'XOR').A42\n         AIF       ('&B(2)'EQ'ON').A\n         AIF       ('&B(2)'EQ'OFF').B\n         MNOTE     '***ERROR*** ILLEGAL ''THEN'' OPERATION'\n&A       DC        H'0'\n         MEXIT\n.A2      ANOP\n         AIF       ('&C'EQ'').A4\n         AIF       ('&C'EQ'DONE').A5\n         AIF       ('&C'EQ'LOOP').A47\n&X       SETA      1\n.LKKB1   ANOP\n&Y       SETC      '&X'\n         AIF       ('&C' EQ 'R&Y').LKKB2\n&X       SETA      &X+1\n         AIF       ((&X LT 14) OR (&X EQ 15)).LKKB1\n&A       LA        RDONE,&C\n         B         &B(2)\n         MEXIT\n.A4      ANOP\n&A       BAL       RDONE,&B(2)\n         MEXIT\n.A5      ANOP\n&A       B         &B(2)\n         MEXIT\n.A47     ANOP\n&A       LR        RDONE,RLOOP\n         B         &B(2)\n         MEXIT\n.LKKB2   ANOP\n&A       LR        RDONE,&C\n         B         &B(2)\n         MEXIT\n.A       ANOP\n&A       MVI       &B(1),B'10000000'\n         AGO       .A43\n.B       ANOP\n&A       MVI       &B(1),B'00000000'\n         AGO       .A43\n.A40     ANOP\n&A       OI        &B(1),&B(3)\n         AGO       .A43\n.A41     ANOP\n&A       NI        &B(1),&B(3)\n         AGO       .A43\n.A42     ANOP\n&A       XI        &B(1),&B(3)\n         AGO       .A43\n.A3      ANOP\n&A       MVI       &B(1),&B(3)\n.A43     ANOP\n         AIF       ('&C'EQ'').A7\n         AIF       ('&C'EQ'DONE').A8\n         AIF       ('&C'EQ'LOOP').A8\n&X       SETA      1\n.LKKC1   ANOP\n&Y       SETC      '&X'\n         AIF       ('&C' EQ 'R&Y').LKKC2\n&X       SETA      &X+1\n         AIF       ((&X LT 14) OR (&X EQ 15)).LKKC1\n         B         &C\n.A7      ANOP\n         MEXIT\n.A8      ANOP\n         BR        R&C\n         MEXIT\n.LKKC2   BR        &C\n         MEXIT\n.A9      ANOP\n         AIF       ('&A'EQ'').A30\n&A       DC        0H'0'\n.A30     ANOP\n         AIF       ('&B(3)'EQ'').AAAA\n         AIF       ('&B(3)'NE'*').AAAA\n         OUTR2     &B(2)\n         OUTSTAR   &C\n         MEXIT\n.AAAA    ANOP\n         OUTR1     &B(3)\n         AIF       ('&B(2)'EQ'').BBBB\n         AIF       ('&B(2)'NE'4').BBBB\n         OUTFOUR   &C\n         MEXIT\n.BBBB    ANOP\n         OUTR2     &B(2)\n         OUT       &C\n         MEXIT\n.A10     ANOP\n&A       $ERROR    &B(2),&C                                        V1L5\n         MEND\n./ ADD NAME=TPUT     0100-80001-80001-1200-00240-00240-00000-MACLIB  00\n         MACRO\n&NAME    TPUT  &BFF,&SIZE,&EDIT,&WAIT,&HOLD,&BRKI,&PRTY,&TJID=,        *\n               &TJIDLOC=\n.*********************************************************************.\n.*                                                                   *.\n.*RELEASE 23 DELETIONS                                               *.\n.*                                                                   *.\n.*RELEASE 22 DELETIONS                                               *.\n.*                                                                   *.\n.*RELEASE 21 DELETIONS                                               *.\n.*                                                                   *.\n.*STATUS - CHANGE LEVEL 001                                     SA60002\n.*                                                                   *.\n.*NAME - TPUT                                                        *.\n.*                                                                   *.\n.*FUNCTION - THE TPUT MACRO IS USED TO MOVE A RECORD FROM THE USER'S *.\n.*   BUFFER TO A TS OUTPUT BUFFER TO BE TRANSMITTED TO A TERMINAL.   *.\n.*                                                                    *\n.*********************************************************************.\n.*\n.*  TPUT BUFFER ADDR,BUFFER SIZE,EDIT   ,WAIT  ,NOHOLD,NOBREAK,HIGHP\n.*        (2-12)      (2-12)     ASIS    NOWAIT HOLD   BREAKIN LOWP\n.*                               CONTROL\n.*                               FULLSCR                        SA60002\n.*       TJID=XX   (EDIT,WAIT,NOHOLD,NOBREAK,HIGHP ARE DEFAULTS)\n.*\n.*        TJIDLOC=ADDR\n.*\n         LCLA  &OPT\n         LCLA  &RET\n         LCLB  &E,&W,&H,&B,&P\n         LCLC  &PARM,&ID\n&ID      SETC  '0'                      SET TJID TO '0'\n         AIF   ('&BFF' EQ '' OR '&SIZE' EQ '').ERROR1  MNOTE\n         AIF   ('&TJID' NE '' AND '&TJIDLOC' NE '').ERROR2  MNOTE\n         AIF   ('&EDIT' EQ 'R').RF      CHECK FOR R FORM\n&PARM    SETC  '&EDIT'\n.CKPARM  ANOP\n&RET     SETA  &RET+1\n         AIF   ('&PARM' EQ '').RET           NULL, TRY NEXT\n         AIF   ('&PARM' EQ 'EDIT').EDI       SET EDIT\n         AIF   ('&PARM' EQ 'ASIS').ASI       SET ASIS\n         AIF   ('&PARM' EQ 'CONTROL').CON    SET CONTROL\n         AIF   ('&PARM' EQ 'FULLSCR').FULLS SET FULL SCREEN     SA60002\n         AIF   ('&PARM' EQ 'WAIT').WAI       SET WAIT\n         AIF   ('&PARM' EQ 'NOWAIT').NOW     SET NOWAIT\n         AIF   ('&PARM' EQ 'HOLD').HOL       SET HOLD\n         AIF   ('&PARM' EQ 'NOHOLD').NOH     SET NOHOLD\n         AIF   ('&PARM' EQ 'NOBREAK').NOB    SET NOBREAK\n         AIF   ('&PARM' EQ 'BREAKIN').BRE    SET BREAKIN\n         AIF   ('&PARM' EQ 'HIGHP').HPR      SET HIGHP\n         AIF   ('&PARM' EQ 'LOWP').LPR       SET LOWP\n         AGO   .ERROR3\n.*\n.*  CHECK REGISTER NOTATION IS USED\n.*\n.CHKREG  SPACE 1\n         AIF   ('&BFF'(1,1) EQ '(' OR '&SIZE'(1,1) EQ '(').REGFM  REG.\n.*                                      FORM MACRO\n         AIF   ('&TJID' EQ '').CHKLOC   GOTO CHECK TJIDLOC\n         AIF   ('&TJID'(1,1) EQ '(').REGFM   REG. FORM MACRO\n&ID      SETC  '&TJID'                  SET TJID\n         AGO   .EXPAND                  GOTO EXPANSION\n.CHKLOC  AIF   ('&TJIDLOC' EQ '').EXPAND  GO EXPAND IF NO 'TJIDLOC'\n         AIF   ('&TJIDLOC'(1,1) EQ '(').REGFM  REG. FORM MACRO\n.*\n.*   REGULAR FORMAT OF MACRO\n.*\n.EXPAND  CNOP  0,4\n         AIF   ('&TJIDLOC' NE '').LOC   TJLOC SPECIFIED\n&NAME    B     *+12                     BRANCH AROUND CONSTANTS\n         DC    AL2(&ID)                 TJID\n         DC    AL2(&SIZE)               BUFFER SIZE\n         DC    AL1(&OPT)                OPTIONS\n         DC    AL3(&BFF)                BUFFER ADDR\n         LM    0,1,*-8                  LOAD PARAMETER REGISTERS\n.SVC     SVC   93                       ISSUE TGET/TPUT SVC\n         SPACE 1\n         MEXIT\n.*\n.*   TJIDLOC IS SPECIFIED\n.*\n.LOC     ANOP\n&NAME    IC    0,&TJIDLOC               LOAD 1ST BYTE OF TJID\n         SLL   0,8                      SHIFT IT\n         IC    0,&TJIDLOC+1             LOAD 2ND BYTE OF TJID\n         SLL   0,16                     SHIFT TJID TO HI-ORDER BYTE\n         AIF   (&OPT EQ 0).ZERO         BRANCH IF OPTIONS ARE ZERO\n         O     0,*+8                    LOAD BUFFER SIZE\n         B     *+12                     BRANCH AROUND CONSTANT\n         DC    AL2(0)                   TJID\n         DC    AL2(&SIZE)               BUFFER SIZE\n         DC    AL1(&OPT)                OPTIONS\n         DC    AL3(&BFF)                BUFFER ADDR\n         L     1,*-4                    LOAD OPTIONS & BUFFER ADDR\n         AGO   .SVC                     GOTO ISSUE SVC\n.ZERO    LA    1,&SIZE                  LOAD BUFFER SIZE\n         OR    0,1                      OR IT INTO REGISTER 1\n         LA    1,&BFF                   Z HIGH ORDR BYTE & LD BFR ADDR\n         AGO   .SVC                     GOTO ISSUE SVC\n.*\n.*   REGISTER FORMAT\n.*\n.REGFM   AIF   ('&TJIDLOC' EQ '').NOLOC   SKIP IF TJIDLOC NOT SPECIFIED\n         AIF   ('&TJIDLOC'(1,1) EQ '(').REGLOC    LOC IN REG  FORM\n&NAME    IC    15,&TJIDLOC              INSERT 1ST BYTE OF TJID\n         SLL   15,8                     MOVE IT TO NEXT BYTE\n         IC    15,&TJIDLOC+1            INSERT 2ND BYTE OF TJID\n         SLL   15,16                    MOVE TJID TO HI-ORDER 2 BYTES\n         AGO   .CHKSIZE                 GOTO CHECK SIZE\n.REGLOC  ANOP\n&NAME    IC    15,0(,&TJIDLOC(1))       INSERT 1ST BYTE OF TJID\n         SLL   15,8                     MOVE IT TO NEXT BYTE\n         IC    15,1(,&TJIDLOC(1))       INSERT 2ND BYTE OF TJID\n         SLL   15,16                    MOVE TJID TO HI-ORDER 2 BYTES\n         AGO   .CHKSIZE                 GOTO CHECK SIZE\n.*\n.*   WHEN TJIDLOC IS NOT SPECIFIED\n.*\n.NOLOC   AIF   ('&TJID' NE '').TJIDYES\n&NAME    DS    0H                       TJID IS '0'\n         AGO   .CHKSIZE                 GOTO CHECK SIZE\n.TJIDYES AIF   ('&TJID'(1,1) EQ '(').IDREG   TJID IN REG FORM\n&NAME    LA    15,&TJID                 LOAD TJID\n         AGO   .SHIFT                   GOTO SHIFT REG.0\n.IDREG   ANOP\n&NAME    LR    15,&TJID(1)              LOAD TJID IN REG 0\n.SHIFT   SLL   15,16                    SHIFT TJID TO HI-ORDER BYTE\n.*\n.*   CHECK SIZE OF BUFFER (BY NOW TJID IS IN HI-ORDER 2 BYTES OF REG 0)\n.*\n.CHKSIZE AIF   ('&SIZE'(1,1) EQ '(').SZREG   SKIP IF SIZE IN REG\n         LA    0,&SIZE                  LOAD SIZE IN REG.0\n         AGO   .ORSIZE                  GOTO OR SIZE\n.SZREG   AIF   ('&SIZE' EQ '(0)').ORSIZE  GOTO SET SIZE IN REG. 0\n         LR    0,&SIZE(1)               LOAD BUFFER SIZE\n.ORSIZE  AIF   ('&TJID' EQ '' AND '&TJIDLOC' EQ '').PAST\n         OR    0,15                     LOAD TJID + BUFFER SIZE\n.PAST    AIF   (&OPT EQ 0 AND '&BFF'(1,1) EQ '(').ORONE\n         AIF   (&OPT EQ 0 AND '&BFF'(1,1) NE '(').ZOPT ZERO OPTN\n         CNOP  0,4\n         B     *+8\n         DC    AL1(&OPT)                OPTION BITS\n         AIF   ('&BFF'(1,1) EQ '(').REGGO   BFFR IN REG.\n         DC    AL3(&BFF)                BUFFER ADDR\n         L     1,*-4                    LOAD PARAMETER IN REG.1\n         AGO   .SVC                     GOTO ISSUE SVC\n.ZOPT    LA    1,&BFF                   LOAD BUFFER ADDR IN REG 1\n         AGO   .SVC                     ISSUE SVC\n.REGGO   DC    AL3(0)                   BUFFER ADDR\n         AIF   ('&BFF' EQ '(1)').ORONE  GOTO OR OPTIONS\n         L     1,*-4                    LOAD OPTIONS\n         OR    1,&BFF(1)                SET OPTIONS AND BUFFER ADDR\n         AGO   .SVC                     GOTO ISSUE SVC\n.ORONE   LA    1,0(,&BFF(1))            CLR HIGH ORDR BYTE + LD BFR ADR\n         AIF   (&OPT EQ 0).SVC          GOTO ISSUE SVC IF OPT EQ 0\n         O     1,*-8                    SET OPTIONS\n         AGO   .SVC\n.EDI     ANOP\n         AIF   (&E).ERROR2              DUP OPTION\n&E       SETB  1                        EDIT OPTION SPECFIED\n         AGO   .RET\n.ASI     ANOP\n         AIF   (&E).ERROR2              DUP OPTION\n&E       SETB  1                        EDIT OPTION SPECFIED\n&OPT     SETA  &OPT+1                   SET EDIT=ASIS\n         AGO   .RET\n.CON     ANOP\n         AIF   (&E).ERROR2              DUP OPTION\n&E       SETB  1                        EDIT OPTION SPECFIED\n&OPT     SETA  &OPT+2                   SET EDIT=CONTROL\n         AGO   .RET\n.FULLS   ANOP                                                   SA60002\n         AIF   (&E).ERROR2              DUP OPTION              SA60002\n&E       SETB  1                        EDIT OPTION SPECIFIED   SA60002\n&OPT     SETA  &OPT+3                   CNTL+ASIS FOR FULLSCR   SA60002\n         AGO   .RET                                             SA60002\n.WAI     ANOP\n         AIF   (&W).ERROR2              DUP OPTION\n&W       SETB  1                        WAIT OPTION SPECIFIED\n         AGO   .RET\n.NOW     ANOP\n         AIF   (&W).ERROR2              DUP OPTION\n&W       SETB  1                        WAIT OPTION SPECIFIED\n&OPT     SETA  &OPT+X'10'               SET WAIT=NOWAIT\n         AGO   .RET\n.HOL     ANOP\n         AIF   (&H).ERROR2              DUP OPTION\n&H       SETB  1                        HOLD OPTION SPECIFIED\n&OPT     SETA  &OPT+X'08'               SET HOLD=HOLD\n         AGO   .RET\n.NOH     ANOP\n         AIF   (&H).ERROR2              DUP OPTION\n&H       SETB  1                        HOLD OPTION SPECIFIED\n         AGO   .RET\n.BRE     ANOP\n         AIF   (&B).ERROR2              DUP OPTION\n&B       SETB  1                        BREAK OPTION SPECIFIED\n&OPT     SETA  &OPT+X'04'               SET BREAKIN\n         AGO   .RET\n.NOB     ANOP\n         AIF   (&B).ERROR2              DUP OPTION\n&B       SETB  1                        BREAK OPTION SPECIFIED\n         AGO   .RET\n.HPR     ANOP\n         AIF   (&P).ERROR2              DUP OPTION\n&P       SETB  1                        PRIORITY OPTION SPECIFIED\n         AGO   .RET\n.LPR     ANOP\n         AIF   (&P).ERROR2              DUP OPTION\n&P       SETB  1                        PRIORITY OPTION SPECIFIED\n&OPT     SETA  &OPT+X'20'               SET  LOW PRIORITY OPTION\n.RET     ANOP\n&PARM    SETC  '&WAIT'\n         AIF   ('&RET' EQ '1').CKPARM   CHECK WAIT\n&PARM    SETC  '&HOLD'\n         AIF   ('&RET' EQ '2').CKPARM   CHECK HOLD\n&PARM    SETC  '&BRKI'\n         AIF   ('&RET' EQ '3').CKPARM   CHECK BRKI\n&PARM    SETC  '&PRTY'\n         AIF   ('&RET' EQ '4').CKPARM   CHECK PRTY\n         AGO   .CHKREG                  DONE WITH OPTIONS\n.RF      ANOP\n         AIF   ('&WAIT' NE '' OR '&HOLD' NE '' OR '&BRKI' NE '' OR '&PRX\n               TY' NE '' OR '&TJID' NE '' OR '&TJIDLOC' NE '').RERR\n         AIF   ('&BFF'(1,1) NE '(' OR '&SIZE'(1,1) NE '(').RERR\n&NAME    DS    0H\n         AIF   ('&BFF' EQ '(1)').SIZE\n         LR    1,&BFF(1)                LOAD OPTIONS & BUFFER ADDR\n.SIZE    AIF   ('&SIZE' EQ '(0)').SVC\n         LR    0,&SIZE(1)               LOAD TJID & BUFFER SIZE\n         AGO   .SVC\n.RERR    IHBERMAC 192\n         MEXIT\n.ERROR1  IHBERMAC 24\n         MEXIT\n.ERROR2  IHBERMAC 54,,,\n         MEXIT\n.ERROR3  IHBERMAC 49,,&PARM\n         MEND\n./ ADD NAME=TRACEOFF 0100-80001-80001-1200-00004-00004-00000-MACLIB  00\n         MACRO\n&ADDR    TRACEOFF\n&ADDR    TM        0,6\n         MEND\n./ ADD NAME=TRACEON  0100-80001-80001-1200-00019-00019-00000-MACLIB  00\n         MACRO\n&ADDR    TRACEON   &PARM=SAVE\n         LCLA      &DISP\n         LCLC      &TEMP\n&DISP    SETA      8\n&TEMP    SETC      '&ADDR'\n         CNOP      2,4\n         AIF       ('&PARM' NE 'SAVE').ADDR100\n&TEMP    STM       14,15,*+18\n&TEMP    SETC      ''\n&DISP    SETA      16\n.ADDR100 ANOP\n         LM        14,15,*+6\n         BR        15\n         DC        A(*+&DISP)\n         DC        V(TRACE)\n         AIF       ('&PARM' NE 'SAVE').END\n         DS        2F\n.END     MEND\n./ ADD NAME=TRACERLD 0100-80001-80001-1200-00102-00102-00000-MACLIB  00\n         MACRO\n&ADDR    TRACERLD\n         LCLA      &I,&SAVESW,&MFSW,&DISP1(2),&DISP2(2)\n         LCLA      &NUMENT,&LSYM\n         LCLA      &JUMP\n         LCLC      &TEMP\n&SAVESW  SETA      1\n&MFSW    SETA      0\n&NUMENT  SETA      N'&SYSLIST\n&DISP1(1) SETA     22\n&DISP1(2) SETA     18\n&DISP2(1) SETA     16\n&DISP2(2) SETA     8\n         AIF       ('&SYSLIST(&NUMENT,1)' EQ '').ADDR40\n.ADDR10  AIF       ('&SYSLIST(&NUMENT,1)'(1,4) NE '''MF=').ADDR20\n         DC        A(1)\n&MFSW    SETA      0-1\n         AIF       ('&SYSLIST(&NUMENT,1)'(5,1) EQ 'L').ADDR30\n         DC        A(2)\n&MFSW    SETA      &NUMENT\n         AGO       .ADDR30\n.ADDR20  AIF       ('&SYSLIST(&NUMENT,1)' NE '''PARM=NOSAVE''').ADDR40\n         DC        A(3)\n&SAVESW  SETA      2\n.ADDR30  ANOP\n&NUMENT  SETA      &NUMENT-1\n         AIF       (&NUMENT GT 0).ADDR10\n.ADDR40  AIF       (&MFSW LT 0).ADDR100\n&JUMP    SETA     &DISP2(&SAVESW)+4\n         AIF       (&MFSW GT 0).ADDR50\n&JUMP    SETA      &JUMP+36+&NUMENT*20\n.ADDR50  ANOP\n         CNOP      2,4\n&TEMP    SETC      '&ADDR'\n         AIF       (&SAVESW EQ 2).ADDR60\n&TEMP    STM       14,15,*+34\n&TEMP    SETC      ''\n.ADDR60  ANOP\n&TEMP    LA        14,*+&DISP1(&SAVESW)\n         L         15,4(0,14)\n         MVC       0(4,15),0(14)\n         AIF       (&SAVESW EQ 2).ADDR70\n         LM        14,15,8(14)\n.ADDR70  ANOP\n         B         *+&JUMP\n         AIF       (&MFSW NE 0).ADDR80\n         DC        A(*+&DISP2(&SAVESW))\n.ADDR80  AIF       (&MFSW EQ 0).ADDR90\n&LSYM    SETA      K'&SYSLIST(&MFSW,1)\n&TEMP    SETC      '&SYSLIST(&MFSW,1)'(8,&LSYM-9)\n         DC        A(&TEMP)\n.ADDR90  ANOP\n         DC        V(TRPGMPTR)\n         AIF       (&SAVESW EQ 2).ADDR100\n         DS        2F\n.ADDR100 AIF       (&MFSW GE 0).ADDR110\n&ADDR    DS        0F\n.ADDR110 AIF       (&MFSW GT 0).END\n&I       SETA      0\n         DC        V(TRQEND)\n         DC        X'00000000'\n         DC        X'FFFFFFFF'\n         DC        CL8'PROGRAM'\n         DC        A(*+16)\n         DC        V(TRQEND)\n         DC        V(TRQEND)\n         DC        A(0)\n.ADDR120 ANOP\n&I       SETA      &I+1\n&TEMP    SETC      '&SYSLIST(&I,4)'\n         AIF       (&I NE &NUMENT).ADDR130\n&TEMP    DC        V(TRQEND)\n.ADDR130 AIF       (&I EQ &NUMENT).ADDR140\n&TEMP    DC        A(*+20)\n.ADDR140 AIF       ('&SYSLIST(&I,1)' NE '').ADDR150\n         DC        X'FFFFFFFF'\n.ADDR150 AIF       ('&SYSLIST(&I,1)' EQ '').ADDR160\n         DC        A(&SYSLIST(&I,1))\n.ADDR160 AIF       ('&SYSLIST(&I,2)' EQ '').ADDR170\n         DC        A(&SYSLIST(&I,2))\n.ADDR170 AIF       ('&SYSLIST(&I,2)' NE '').ADDR180\n         DC        X'FFFFFFFF'\n.ADDR180 AIF       ('&SYSLIST(&I,3)' EQ '').ADDR200\n&LSYM    SETA      K'&SYSLIST(&I,3)\n         AIF       ('&SYSLIST(&I,3)'(1,1) NE '''').ADDR190\n&LSYM    SETA      &LSYM-2\n&TEMP    SETC      ''\n         AIF       (&LSYM EQ 0).ADDR210\n&TEMP    SETC     '&SYSLIST(&I,3)'(2,&LSYM)\n         AGO       .ADDR210\n.ADDR190 ANOP\n         DC        A(&SYSLIST(&I,3)),A(0)\n         AGO       .ADDR230\n.ADDR200 ANOP\n&TEMP    SETC      '&SYSLIST(&I,1)'\n&LSYM    SETA      K'&SYSLIST(&I,1)\n.ADDR210 AIF       (&LSYM EQ 8).ADDR220\n         DC        CL7'&TEMP',AL1(&LSYM)\n.ADDR220 AIF       (&LSYM NE 8).ADDR230\n         DC        CL8'&TEMP'\n.ADDR230 AIF       (&I LT &NUMENT).ADDR120\n.END     MEND\n./ ADD NAME=XROUTA   0100-80001-80001-1200-00008-00008-00000-MACLIB  00\n         MACRO\n&NAME    XROUTA    &NUM\n         USING     ZW1,R3                                          V1L4\n&NAME    CLC       XUNDEF(&NUM),ZW1                                V1L4\n         $FREE     R3                                              V1L5\n         BNER      R14\n         B         XERRUV2\n         MEND\n./ ADD NAME=XROUTE   0100-80001-80001-1200-00008-00008-00000-MACLIB  00\n         MACRO\n&NAME    XROUTE    &NUM\n         USING     ZW1,R3                                          V1L4\n&NAME    CLC       XUNDEF(&NUM),ZW1                                V1L4\n         $FREE     R3                                              V1L5\n         BNER      R14\n         B         XERRUV1\n         MEND\n./ ADD NAME=XROUTS   0100-80001-80001-1200-00008-00008-00000-MACLIB  00\n         MACRO\n&NAME    XROUTS    &NUM\n&NAME    MVC       *+8(2),ZR14+2       SET UP NEXT LA              V1L4\n         LA        R15,*-*                                         V1L4\n         CLC       XUNDEF(&NUM),ZR15\n         BNER      R14\n         B         XERRUV0\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MESSAGE": {"ttr": 27137, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x00\\x80\\x00\\x1f\\x01\\x18\\x03\\x9f\\x13P\\x01\\xde\\x01\\xde\\x00\\x00\\xe6\\xc1\\xe3\\xc6\\xc9\\xe5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2018-02-08T13:50:26", "lines": 478, "newlines": 478, "modlines": 0, "user": "WATFIV"}, "text": "\n'ASSEMBLER LANGUAGE SUBPROGRAMMES'\nAL-0   'MISSING END CARD ON ASSEMBLY LANGUAGE OBJECT DECK'\nAL-1   'ENTRY-POINT OR CSECT NAME IN AN OBJECT DECK WAS PREVIOUSLY\n       DEFINED.FIRST DEFINITION USED'\n\n'BLOCK DATA STATEMENTS'\nBD-0   'EXECUTABLE STATEMENTS ARE ILLEGAL IN BLOCK DATA SUBPROGRAMS'\nBD-1   'IMPROPER BLOCK DATA STATEMENT'\n\n'CARD FORMAT AND CONTENTS'\nCC-0   'COLUMNS 1-5 OF CONTINUATION CARD ARE NOT BLANK.\n       PROBABLE CAUSE:STATEMENT PUNCHED TO LEFT OF COLUMN 7'\nCC-1   'LIMIT OF 5 CONTINUATION CARDS EXCEEDED'\nCC-2   'INVALID CHARACTER IN FORTRAN STATEMENT.A'$' WAS INSERTED IN THE\n       SOURCE LISTING'\nCC-3   'FIRST CARD OF A PROGRAM IS A CONTINUATION CARD.\n       PROBABLE CAUSE:STATEMENT PUNCHED TO LEFT OF COLUMN 7'\nCC-4   'STATEMENT TOO LONG TO COMPILE (SCAN-STACK OVERFLOW)'\nCC-5   'A BLANK CARD WAS ENCOUNTERED'\nCC-6   'KEYPUNCH USED DIFFERS FROM KEYPUNCH SPECIFIED ON JOB CARD'\nCC-7   'THE FIRST CHARACTER OF THE STATEMENT WAS NOT ALPHABETIC'\nCC-8   'INVALID CHARACTER(S) ARE CONCATENATED WITH THE FORTRAN KEYWORD'\nCC-9   'INVALID CHARACTERS IN COLUMNS 1-5.STATEMENT NUMBER IGNORED.\n       PROBABLE CAUSE:STATEMENT PUNCHED TO LEFT OF COLUMN 7'\nCC-A   'CONTROL CARDS MAY NOT BE CONTINUED'\nCC-B   'CONTROL CARDS MUST BE IN PROGRAM SEGMENT'\n\n'COMMON'\nCM-0   'THE VARIABLE IS ALREADY IN COMMON'\nCM-1   'OTHER COMPILERS MAY NOT ALLOW COMMONED VARIABLES TO BE INITIALIZED IN\n       OTHER THAN A BLOCK DATA SUBPROGRAM'\nCM-2   'ILLEGAL USE OF A COMMON BLOCK OR NAMELIST NAME'\n\n'FORTRAN TYPE CONSTANTS'\nCN-0   'MIXED REAL*4,REAL*8 IN COMPLEX CONSTANT;REAL*8 ASSUMED FOR BOTH'\nCN-1   'AN INTEGER CONSTANT MAY NOT BE GREATER THAN 2,147,483,647 (2**31-1)'\nCN-2   'EXPONENT ON A REAL CONSTANT IS GREATER THAN 2 DIGITS'\nCN-3   'A REAL CONSTANT HAS MORE THAN 16 DIGITS.IT WAS TRUNCATED TO 16'\nCN-4   'INVALID HEXADECIMAL CONSTANT'\nCN-5   'ILLEGAL USE OF A DECIMAL POINT'\nCN-6   'CONSTANT WITH MORE THAN 7 DIGITS BUT E-TYPE EXPONENT,ASSUMED TO BE\n       REAL*4'\nCN-7   'CONSTANT OR STATEMENT NUMBER GREATER THAN 99999'\nCN-8   'AN EXPONENT OVERFLOW OR UNDERFLOW OCCURRED WHILE CONVERTING A CONSTANT\n       IN A SOURCE STATEMENT'\n\n'COMPILER ERRORS'\nCP-0   'COMPILER ERROR - LANDR/ARITH'\nCP-1   'COMPILER ERROR.LIKELY CAUSE:MORE THAN 255 DO STATEMENTS'\nCP-2   'COMPILER ERROR'\nCP-4   'COMPILER ERROR - INTERRUPT AT COMPILE TIME,RETURN TO SYSTEM'\n\n'CHARACTER VARIABLE'\nCV-0   'A CHARACTER VARIABLE IS USED WITH A RELATIONAL OPERATOR'\nCV-1   'LENGTH OF A CHARACTER VALUE ON RIGHT OF EQUAL SIGN EXCEEDS THAT ON\n       LEFT. TRUNCATION WILL OCCUR'\nCV-2   'UNFORMATTED CORE-TO-CORE I/O NOT IMPLEMENTED'\n\n'DATA STATEMENT'\nDA-0   'REPLICATION FACTOR IS ZERO OR GREATER THAN 32767.\n       IT IS ASSUMED TO BE 32767'\nDA-1   'MORE VARIABLES THAN CONSTANTS'\nDA-2   'ATTEMPT TO INITIALIZE A SUBPROGRAM PARAMETER IN A DATA STATEMENT'\nDA-3   'OTHER COMPILERS MAY NOT ALLOW NON-CONSTANT SUBSCRIPTS IN DATA\n       STATEMENTS'\nDA-4   'TYPE OF VARIABLE AND CONSTANT DO NOT AGREE.  (MESSAGE ISSUED ONCE FOR\n       AN ARRAY)'\nDA-5   'MORE CONSTANTS THAN VARIABLES'\nDA-6   'A VARIABLE WAS PREVIOUSLY INITIALIZED.THE LATEST VALUE IS USED.\n       CHECK COMMONED AND EQUIVALENCED VARIABLES'\nDA-7   'OTHER COMPILERS MAY NOT ALLOW INITIALIZATION OF BLANK COMMON'\nDA-8   'A LITERAL CONSTANT HAS BEEN TRUNCATED'\nDA-9   'OTHER COMPILERS MAY NOT ALLOW IMPLIED DO-LOOPS IN DATA STATEMENTS'\n\n'DEFINE FILE STATEMENTS'\nDF-0   'THE UNIT NUMBER IS MISSING'\nDF-1   'INVALID FORMAT TYPE'\nDF-2   'THE ASSOCIATED VARIABLE IS NOT A SIMPLE INTEGER VARIABLE'\nDF-3   'NUMBER OF RECORDS OR RECORD SIZE IS ZERO OR GREATER THAN 32767'\n\n'DIMENSION STATEMENTS'\nDM-0   'NO DIMENSIONS ARE SPECIFIED FOR A VARIABLE IN A DIMENSION STATEMENT'\nDM-1   'THE VARIABLE HAS ALREADY BEEN DIMENSIONED'\nDM-2   'CALL-BY-LOCATION PARAMETERS MAY NOT BE DIMENSIONED'\nDM-3   'THE DECLARED SIZE OF ARRAY EXCEEDS SPACE PROVIDED BY CALLING ARGUMENT'\n\n'DO LOOPS'\nDO-0   'THIS STATEMENT CANNOT BE THE OBJECT OF A DO-LOOP'\nDO-1   'ILLEGAL TRANSFER INTO THE RANGE OF A DO-LOOP'\nDO-2   'THE OBJECT OF THIS DO-LOOP HAS ALREADY APPEARED'\nDO-3   'IMPROPERLY NESTED DO-LOOPS'\nDO-4   'ATTEMPT TO REDEFINE A DO-LOOP PARAMETER WITHIN THE RANGE OF THE LOOP'\nDO-5   'INVALID DO-LOOP PARAMETER'\nDO-6   'ILLEGAL TRANSFER TO A STATEMENT WHICH IS INSIDE THE RANGE OF A DO-LOOP'\nDO-7   'A DO-LOOP PARAMETER IS UNDEFINED OR OUT OF RANGE'\nDO-8   'BECAUSE OF ONE OF THE PARAMETERS,THIS DO-LOOP WILL TERMINATE AFTER THE\n       FIRST TIME THROUGH'\nDO-9   'A DO-LOOP PARAMETER MAY NOT BE REDEFINED IN AN INPUT LIST'\nDO-A   'OTHER COMPILERS MAY NOT ALLOW THIS STATEMENT TO END A DO-LOOP'\n\n'EQUIVALENCE AND/OR COMMON'\nEC-0   'EQUIVALENCED VARIABLE APPEARS IN A COMMON STATEMENT'\nEC-1   'A COMMON BLOCK HAS A DIFFERENT LENGTH THAN IN A PREVIOUS\n       SUBPROGRAM:GREATER LENGTH USED'\nEC-2   'COMMON AND/OR EQUIVALENCE CAUSES INVALID ALIGNMENT.\n       EXECUTION SLOWED.REMEDY:ORDER VARIABLES BY DECREASING LENGTH'\nEC-3   'EQUIVALENCE EXTENDS COMMON DOWNWARDS'\nEC-4   'A SUBPROGRAM PARAMETER APPEARS IN A COMMON OR EQUIVALENCE STATEMENT'\nEC-5   'A VARIABLE WAS USED WITH SUBSCRIPTS IN AN EQUIVALENCE STATEMENT BUT HAS\n       NOT BEEN PROPERLY DIMENSIONED'\n\n'END STATEMENTS'\nEN-0   'MISSING END STATEMENT:END STATEMENT GENERATED'\nEN-1   'AN END STATEMENT WAS USED TO TERMINATE EXECUTION'\nEN-2   'AN END STATEMENT CANNOT HAVE A STATEMENT NUMBER. STATEMENT NUMBER\n       IGNORED'\nEN-3   'END STATEMENT NOT PRECEDED BY A TRANSFER'\n\n'EQUAL SIGNS'\nEQ-0   'ILLEGAL QUANTITY ON LEFT OF EQUALS SIGN'\nEQ-1   'ILLEGAL USE OF EQUAL SIGN'\nEQ-2   'OTHER COMPILERS MAY NOT ALLOW MULTIPLE ASSIGNMENT STATEMENTS'\nEQ-3   'MULTIPLE ASSIGNMENT IS NOT IMPLEMENTED FOR CHARACTER VARIABLES'\nEQ-4   'ILLEGAL QUANTITY ON RIGHT OF EQUALS SIGN'\n\n'EQUIVALENCE STATEMENTS'\nEV-0   'ATTEMPT TO EQUIVALENCE A VARIABLE TO ITSELF'\nEV-2   'A MULTI-SUBSCRIPTED EQUIVALENCED VARIABLE HAS BEEN INCORRECTLY\n       RE-EQUIVALENCED.REMEDY:DIMENSION THE VARIABLE FIRST'\n\n'POWERS AND EXPONENTIATION'\nEX-0   'ILLEGAL COMPLEX EXPONENTIATION'\nEX-1   'I**J WHERE I=J=0'\nEX-2   'I**J WHERE I=0, J.LT.0'\nEX-3   '0.0**Y WHERE Y.LE.0.0'\nEX-4   '0.0**J WHERE J=0'\nEX-5   '0.0**J WHERE J.LT.0'\nEX-6   'X**Y WHERE X .LT. 0.0, Y IS NOT TYPE INTEGER OR .NE. 0.0'\n\n'ENTRY STATEMENT'\nEY-0   'ENTRY-POINT NAME WAS PREVIOUSLY DEFINED'\nEY-1   'PREVIOUS DEFINITION OF FUNCTION NAME IN AN ENTRY IS INCORRECT'\nEY-2   'THE USAGE OF A SUBPROGRAM PARAMETER IS INCONSISTENT WITH A PREVIOUS\n       ENTRY-POINT'\nEY-3   'A PARAMETER HAS APPEARED IN A EXECUTABLE STATEMENT BUT IS NOT A\n       SUBPROGRAM PARAMETER'\nEY-4   'ENTRY STATEMENTS ARE INVALID IN THE MAIN PROGRAM'\nEY-5   'ENTRY STATEMENT INVALID INSIDE A DO-LOOP'\n\n'FORMAT'\n   SOME FORMAT ERROR MESSAGES GIVE CHARACTERS IN WHICH ERROR WAS DETECTED\nFM-0   'IMPROPER CHARACTER SEQUENCE OR INVALID CHARACTER IN INPUT DATA'\nFM-1   'NO STATEMENT NUMBER ON A FORMAT STATEMENT'\nFM-2   'FORMAT CODE AND DATA TYPE DO NOT MATCH'\nFM-4   'FORMAT PROVIDES NO CONVERSION SPECIFICATION FOR A VALUE IN I/O LIST'\nFM-5   'AN INTEGER IN THE INPUT DATA IS TOO LARGE.\n         (MAXIMUM=2,147,483,647=2**31-1)'\nFM-6   'A REAL NUMBER IN THE INPUT DATA IS OUT OF MACHINE RANGE (1.E-78,1.E+75)'\nFM-7   'UNREFERENCED FORMAT STATEMENT'\nFT-0   'FIRST CHARACTER OF VARIABLE FORMAT IS NOT A LEFT PARENTHESIS'\nFT-1   'INVALID CHARACTER ENCOUNTERED IN FORMAT'\nFT-2   'INVALID FORM FOLLOWING A FORMAT CODE'\nFT-3   'INVALID FIELD OR GROUP COUNT'\nFT-4   'A FIELD OR GROUP COUNT GREATER THAN 255'\nFT-5   'NO CLOSING PARENTHESIS ON VARIABLE FORMAT'\nFT-6   'NO CLOSING QUOTE IN A HOLLERITH FIELD'\nFT-7   'INVALID USE OF COMMA'\nFT-8   'FORMAT STATEMENT TOO LONG TO COMPILE (SCAN-STACK OVERFLOW)'\nFT-9   'INVALID USE OF P FORMAT CODE'\nFT-A   'INVALID USE OF PERIOD(.)'\nFT-B   'MORE THAN THREE LEVELS OF PARENTHESES'\nFT-C   'INVALID CHARACTER BEFORE A RIGHT PARENTHESIS'\nFT-D   'MISSING OR ZERO LENGTH HOLLERITH ENCOUNTERED'\nFT-E   'NO CLOSING RIGHT PARENTHESIS'\nFT-F   'CHARACTERS FOLLOW CLOSING RIGHT PARENTHESIS'\nFT-G   'WRONG QUOTE USED FOR KEY-PUNCH SPECIFIED'\nFT-H   'LENGTH OF HOLLERITH EXCEEDS 255'\nFT-I   'EXPECTING COMMA BETWEEN FORMAT ITEMS'\n\n'FUNCTIONS AND SUBROUTINES'\nFN-1   'A PARAMETER APPEARS MORE THAN ONCE IN A SUBPROGRAM OR STATEMENT\n       FUNCTION DEFINITION'\nFN-2   'SUBSCRIPTS ON RIGHT-HAND SIDE OF STATEMENT FUNCTION.\n        PROBABLE CAUSE:VARIABLE TO LEFT OF EQUAL SIGN NOT DIMENSIONED'\nFN-4   'ILLEGAL LENGTH MODIFIER'\nFN-5   'INVALID PARAMETER'\nFN-6   'A PARAMETER HAS THE SAME NAME AS THE SUBPROGRAM'\n\n'GO TO STATEMENTS'\nGO-0   'THIS STATEMENT COULD TRANSFER TO ITSELF'\nGO-1   'THIS STATEMENT TRANSFERS TO A NON-EXECUTABLE STATEMENT'\nGO-2   'ATTEMPT TO DEFINE ASSIGNED GOTO INDEX IN AN ARITHMETIC STATEMENT'\nGO-3   'ASSIGNED GOTO INDEX MAY BE USED ONLY IN ASSIGNED GOTO AND ASSIGN\n       STATEMENTS'\nGO-4   'INDEX OF AN ASSIGNED GOTO IS UNDEFINED OR OUT OF RANGE,OR INDEX OF\n       COMPUTED GOTO OR CASE IS UNDEFINED'\nGO-5   'ASSIGNED GOTO INDEX MAY NOT BE AN INTEGER*2 VARIABLE'\n\n'HOLLERITH CONSTANTS'\nHO-0   'ZERO LENGTH SPECIFIED FOR H-TYPE HOLLERITH'\nHO-1   'ZERO LENGTH QUOTE-TYPE HOLLERITH'\nHO-2   'NO CLOSING QUOTE OR NEXT CARD NOT A CONTINUATION CARD'\nHO-3   'UNEXPECTED HOLLERITH OR STATEMENT NUMBER CONSTANT'\n\n'IF STATEMENTS (ARITHMETIC AND LOGICAL)'\nIF-0   'AN INVALID STATEMENT FOLLOWS THE LOGICAL IF'\nIF-1   'ARITHMETIC OR INVALID EXPRESSION IN LOGICAL IF OR WHILE'\nIF-2   'LOGICAL,COMPLEX OR INVALID EXPRESSION IN ARITHMETIC IF'\n\n'IMPLICIT STATEMENT'\nIM-0   'INVALID DATA TYPE'\nIM-1   'INVALID OPTIONAL LENGTH'\nIM-3   'IMPROPER ALPHABETIC SEQUENCE IN CHARACTER RANGE'\nIM-4   'A SPECIFICATION IS NOT A SINGLE CHARACTER.THE FIRST CHARACTER IS USED'\nIM-5   'IMPLICIT STATEMENT DOES NOT PRECEDE OTHER SPECIFICATION STATEMENTS'\nIM-6   'ATTEMPT TO DECLARE THE TYPE OF A CHARACTER MORE THAN ONCE'\nIM-7   'ONLY ONE IMPLICIT STATEMENT PER PROGRAM SEGMENT ALLOWED. THIS ONE\n       IGNORED'\n\n'INPUT/OUTPUT'\nIO-0   'I/O STATEMENT REFERENCES NON-FORMAT STATEMENT. PROBABLE CAUSE :\n       STATEMENT DEFINED AS NON-FORMAT'\nIO-1   'A VARIABLE FORMAT MUST BE AN ARRAY NAME'\nIO-2   'INVALID ELEMENT IN INPUT LIST OR DATA LIST'\nIO-3   'OTHER COMPILERS MAY NOT ALLOW EXPRESSIONS IN OUTPUT LISTS'\nIO-4   'ILLEGAL USE OF END= OR ERR= PARAMETERS'\nIO-5   'INVALID UNIT NUMBER'\nIO-6   'INVALID FORMAT'\nIO-7   'ONLY CONSTANTS,SIMPLE INTEGER*4 VARIABLES,AND CHARACTER VARIABLES ARE\n       ALLOWED AS UNIT'\nIO-8   'ATTEMPT TO PERFORM I/O IN A FUNCTION WHICH IS CALLED IN AN OUTPUT\n       STATEMENT'\nIO-9   'UNFORMATTED WRITE STATEMENT MUST HAVE A LIST'\nIO-A   'EXPECTING STATEMENT TO BE A FORMAT. PREVIOUSLY REFERENCED IN I/O\n       STATEMENT'\n\n'JOB CONTROL CARDS'\nJB-0   'CONTROL CARD ENCOUNTERED DURING COMPILATION;\n       PROBABLE CAUSE:MISSING C$ENTRY CARD'\nJB-1   'MIS-PUNCHED JOB OPTION'\n\n'JOB TERMINATION'\nKO-0   'SOURCE ERROR ENCOUNTERED WHILE EXECUTING WITH RUN=FREE'\nKO-1   'LIMIT EXCEEDED FOR FIXED-POINT DIVISION BY ZERO'\nKO-2   'LIMIT EXCEEDED FOR FLOATING-POINT DIVISION BY ZERO'\nKO-3   'EXPONENT OVERFLOW LIMIT EXCEEDED'\nKO-4   'EXPONENT UNDERFLOW LIMIT EXCEEDED'\nKO-5   'FIXED-POINT OVERFLOW LIMIT EXCEEDED'\nKO-6   'JOB-TIME EXCEEDED'\nKO-7   'COMPILER ERROR - EXECUTION TIME:RETURN TO SYSTEM'\nKO-8   'TRACEBACK ERROR. TRACEBACK TERMINATED'\nKO-9   'CANNOT OPEN WATFIV.ERRTEXTS. RUN TERMINATED'\nKO-A   'I/O ERROR ON TEXT FILE'\n\n'LOGICAL OPERATIONS'\nLG-0   '.NOT. WAS USED AS A BINARY OPERATOR'\n\n'LIBRARY ROUTINES'\nLI-0   'ARGUMENT OUT OF RANGE DGAMMA OR GAMMA. (1.382E-76 .LT. X .LT. 57.57)'\nLI-1   'ABS(X) .GE. 175.366 FOR SINH,COSH,DSINH OR DCOSH OF X'\nLI-2   'SENSE LIGHT OTHER THAN 0,1,2,3,4 FOR SLITE OR 1,2,3,4 FOR SLITET'\nLI-3   'REAL PORTION OF ARGUMENT .GT. 174.673, CEXP OR CDEXP'\nLI-4   'ABS(AIMAG(Z)) .GT. 174.673 FOR CSIN, CCOS, CDSIN OR CDCOS OF Z'\nLI-5   'ABS(REAL(Z)) .GE. 3.537E15 FOR CSIN, CCOS, CDSIN OR CDCOS OF Z'\nLI-6   'ABS(AIMAG(Z)) .GE. 3.537E15 FOR CEXP OR CDEXP OF Z'\nLI-7   'ARGUMENT .GT. 174.673, EXP OR DEXP'\nLI-8   'ARGUMENT OF CLOG OR CDLOG IS ZERO'\nLI-9   'ARGUMENT IS NEGATIVE OR ZERO, ALOG, ALOG10, DLOG OR DLOG10'\nLI-A   'ABS(X) .GE. 3.537E15 FOR SIN, COS, DSIN OR DCOS OF X'\nLI-B   'ABSOLUTE VALUE OF ARGUMENT .GT. 1, FOR ARSIN, ARCOS, DARSIN OR DARCOS'\nLI-C   'ARGUMENT IS NEGATIVE, SQRT OR DSQRT'\nLI-D   'BOTH ARGUMENTS OF DATAN2 OR ATAN2 ARE ZERO'\nLI-E   'ARGUMENT TOO CLOSE TO A SINGULARITY, TAN, COTAN, DTAN OR DCOTAN'\nLI-F   'ARGUMENT OUT OF RANGE DLGAMA OR ALGAMA. (0.0  .LT. X .LT. 4.29E73)'\nLI-G   'ABSOLUTE VALUE OF ARGUMENT .GE. 3.537E15, TAN, COTAN, DTAN, DCOTAN'\n\n'MIXED MODE'\nMD-0   'RELATIONAL OPERATOR HAS LOGICAL OPERAND'\nMD-1   'RELATIONAL OPERATOR HAS COMPLEX OPERAND'\nMD-2   'MIXED MODE - LOGICAL OR CHARACTER WITH ARITHMETIC'\nMD-3   'OTHER COMPILERS MAY NOT ALLOW SUBSCRIPTS OF TYPE COMPLEX,LOGICAL OR\n       CHARACTER'\n\n'MEMORY OVERFLOW'\nMO-0   'INSUFFICIENT MEMORY TO COMPILE THIS PROGRAM.REMAINDER WILL BE ERROR\n       CHECKED ONLY'\nMO-1   'INSUFFICIENT MEMORY TO ASSIGN ARRAY STORAGE. JOB ABANDONED'\nMO-2   'SYMBOL TABLE EXCEEDS AVAILABLE SPACE,JOB ABANDONED'\nMO-3   'DATA AREA OF SUBPROGRAM EXCEEDS 24K -- SEGMENT SUBPROGRAM'\nMO-4   'INSUFFICIENT MEMORY TO ALLOCATE COMPILER WORK AREA OR WATLIB BUFFER'\n\n'NAMELIST STATEMENTS'\nNL-0   'NAMELIST ENTRY MUST BE A VARIABLE,NOT A SUBPROGRAM PARAMETER'\nNL-1   'NAMELIST NAME PREVIOUSLY DEFINED'\nNL-2   'VARIABLE NAME TOO LONG'\nNL-3   'VARIABLE NAME NOT FOUND IN NAMELIST'\nNL-4   'INVALID SYNTAX IN NAMELIST INPUT'\nNL-6   'VARIABLE INCORRECTLY SUBSCRIPTED'\nNL-7   'SUBSCRIPT OUT OF RANGE'\nNL-8   'NESTED BLANKS ARE ILLEGAL IN NAMELIST INPUT'\n\n'PARENTHESES'\nPC-0   'UNMATCHED PARENTHESIS'\nPC-1   'INVALID PARENTHESIS NESTING IN I/O LIST'\n\n'PAUSE, STOP STATEMENTS'\nPS-0   'OPERATOR MESSAGES NOT ALLOWED:SIMPLE STOP ASSUMED FOR STOP,\n       CONTINUE ASSUMED FOR PAUSE'\n\n'RETURN STATEMENT'\nRE-1   'RETURN I, WHERE I IS OUT OF RANGE OR UNDEFINED'\nRE-2   'MULTIPLE RETURN NOT VALID IN FUNCTION SUBPROGRAM'\nRE-3   'VARIABLE IS NOT A SIMPLE INTEGER'\nRE-4   'A MULTIPLE RETURN IS NOT VALID IN THE MAIN PROGRAM'\n\n'ARITHMETIC AND LOGICAL STATEMENT FUNCTIONS'\n    PROBABLE CAUSE OF SF ERRORS - VARIABLE ON LEFT OF = WAS NOT DIMENSIONED\nSF-1   'A PREVIOUSLY REFERENCED STATEMENT NUMBER APPEARS ON A STATEMENT\n       FUNCTION DEFINITION'\nSF-2   'STATEMENT FUNCTION IS THE OBJECT OF A LOGICAL IF STATEMENT'\nSF-3   'RECURSIVE STATEMENT FUNCTION DEFINITION:NAME APPEARS ON BOTH SIDES OF\n       EQUAL SIGN.LIKELY CAUSE:VARIABLE NOT DIMENSIONED'\nSF-4   'A STATEMENT FUNCTION DEFINITION APPEARS AFTER THE FIRST EXECUTABLE\n       STATEMENT'\nSF-5   'ILLEGAL USE OF A STATEMENT FUNCTION NAME'\n\n'SUBPROGRAMS'\nSR-0   'MISSING SUBPROGRAM'\nSR-1   'SUBPROGRAM REDEFINES A CONSTANT,EXPRESSION,DO-PARAMETER OR ASSIGNED\n       GOTO INDEX'\nSR-2   'THE SUBPROGRAM WAS ASSIGNED DIFFERENT TYPES IN DIFFERENT PROGRAM\n       SEGMENTS'\nSR-3   'ATTEMPT TO USE A SUBPROGRAM RECURSIVELY'\nSR-4   'INVALID TYPE OF ARGUMENT IN REFERENCE TO A SUBPROGRAM'\nSR-5   'WRONG NUMBER OF ARGUMENTS IN A REFERENCE TO A SUBPROGRAM'\nSR-6   'A SUBPROGRAM WAS PREVIOUSLY DEFINED. THE FIRST DEFINITION IS USED'\nSR-7   'NO MAIN PROGRAM'\nSR-8   'ILLEGAL OR MISSING SUBPROGRAM NAME'\nSR-9   'LIBRARY PROGRAM WAS NOT ASSIGNED THE CORRECT TYPE'\nSR-A   'METHOD FOR ENTERING SUBPROGRAM PRODUCES UNDEFINED VALUE FOR\n       CALL-BY-LOCATION PARAMETER'\nSR-B   'MAINLINE PROGRAM NOT IN LIBRARY'\n\n'SUBSCRIPTS'\nSS-0   'ZERO SUBSCRIPT OR DIMENSION NOT ALLOWED'\nSS-1   'ARRAY SUBSCRIPT EXCEEDS DIMENSION'\nSS-2   'INVALID SUBSCRIPT FORM'\nSS-3   'SUBSCRIPT IS OUT OF RANGE'\nSS-4   'SUBSCRIPTS EXCEED BOUNDS OF ACTUAL ARRAY'\n\n'STATEMENTS AND STATEMENT NUMBERS'\nST-0   'MISSING STATEMENT NUMBER'\nST-1   'STATEMENT NUMBER GREATER THAN 99999'\nST-2   'STATEMENT NUMBER HAS ALREADY BEEN DEFINED'\nST-3   'UNDECODEABLE STATEMENT'\nST-4   'UNNUMBERED EXECUTABLE STATEMENT FOLLOWS A TRANSFER'\nST-5   'STATEMENT NUMBER IN A TRANSFER IS A NON-EXECUTABLE STATEMENT'\nST-6   'ONLY CALL STATEMENTS MAY CONTAIN STATEMENT NUMBER ARGUMENTS'\nST-7   'STATEMENT SPECIFIED IN A TRANSFER STATEMENT IS A FORMAT STATEMENT'\nST-8   'MISSING FORMAT STATEMENT'\nST-9   'SPECIFICATION STATEMENT DOES NOT PRECEDE STATEMENT FUNCTION DEFINITIONS\n       OR EXECUTABLE STATEMENTS'\nST-A   'UNREFERENCED STATEMENT FOLLOWS A TRANSFER'\nST-B   'STATEMENT NUMBER MUST END WITH COLON. STATEMENT NUMBER WAS IGNORED'\n\n'SUBSCRIPTED VARIABLES'\nSV-0   'THE WRONG NUMBER OF SUBSCRIPTS WERE SPECIFIED FOR A VARIABLE'\nSV-1   'AN ARRAY OR SUBPROGRAM NAME IS USED INCORRECTLY WITHOUT A LIST'\nSV-2   'MORE THAN 7 DIMENSIONS ARE NOT ALLOWED'\nSV-3   'DIMENSION OR SUBSCRIPT TOO LARGE (MAXIMUM 10**8-1)'\nSV-4   'A VARIABLE USED WITH VARIABLE DIMENSIONS IS NOT A SUBPROGRAM PARAMETER'\nSV-5   'A VARIABLE DIMENSION IS NOT ONE OF SIMPLE INTEGER VARIABLE,SUBPROGRAM\n       PARAMETER,IN COMMON'\nSV-6   'PSEUDO VARIABLE DIMENSIONING ASSUMED FOR ARRAY '\n\n'SYNTAX ERRORS'\nSX-0   'MISSING OPERATOR'\nSX-1   'EXPECTING OPERATOR'\nSX-2   'EXPECTING SYMBOL'\nSX-3   'EXPECTING SYMBOL OR OPERATOR'\nSX-4   'EXPECTING CONSTANT'\nSX-5   'EXPECTING SYMBOL OR CONSTANT'\nSX-6   'EXPECTING STATEMENT NUMBER'\nSX-7   'EXPECTING SIMPLE INTEGER VARIABLE'\nSX-8   'EXPECTING SIMPLE INTEGER VARIABLE OR CONSTANT'\nSX-9   'ILLEGAL SEQUENCE OF OPERATORS IN EXPRESSION'\nSX-A   'EXPECTING END-OF-STATEMENT'\nSX-B   'SYNTAX ERROR'\n\n'TYPE STATEMENTS'\nTY-0   'THE VARIABLE HAS ALREADY BEEN EXPLICITLY TYPED'\nTY-1   'THE LENGTH OF THE EQUIVALENCED VARIABLE MAY NOT BE CHANGED.\n       REMEDY: INTERCHANGE TYPE AND EQUIVALENCE STATEMENTS'\n\n'I/O OPERATIONS'\nUN-0   'CONTROL CARD ENCOUNTERED ON UNIT 5 AT EXECUTION.\n       PROBABLE CAUSE:MISSING DATA OR INCORRECT FORMAT'\nUN-1   'END OF FILE ENCOUNTERED (IBM CODE IHC217)'\nUN-2   'I/O ERROR (IBM CODE IHC218)'\nUN-3   'NO DD STATEMENT WAS SUPPLIED (IBM CODE IHC219)'\nUN-4   'REWIND,ENDFILE,BACKSPACE REFERENCES UNIT 5, 6 OR 7'\nUN-5   'ATTEMPT TO READ ON UNIT 5 AFTER IT HAS HAD END-OF-FILE'\nUN-6   'AN INVALID VARIABLE UNIT NUMBER WAS DETECTED (IBM CODE IHC220)'\nUN-7   'PAGE-LIMIT EXCEEDED'\nUN-8   'ATTEMPT TO DO DIRECT ACCESS I/O ON A SEQUENTIAL FILE OR VICE VERSA.\n       POSSIBLE MISSING DEFINE FILE STATEMENT (IBM CODE IHC231)'\nUN-9   'WRITE REFERENCES 5 OR READ REFERENCES 6 OR 7'\nUN-A   'DEFINE FILE REFERENCES A UNIT PREVIOUSLY USED FOR SEQUENTIAL I/O (IBM\n       CODE IHC235)'\nUN-B   'RECORD SIZE FOR UNIT EXCEEDS 32767,OR DIFFERS FROM DD STATEMENT\n       SPECIFICATION (IBM CODES IHC233,IHC237)'\nUN-C   'FOR DIRECT ACCESS I/O THE RELATIVE RECORD POSITION IS NEGATIVE,ZERO,OR\n       TOO LARGE (IBM CODE IHC232)'\nUN-D   'ATTEMPT TO READ MORE INFORMATION THAN LOGICAL RECORD CONTAINS (IBM CODE\n       IHC213)'\nUN-E   'FORMATTED LINE EXCEEDS BUFFER LENGTH (IBM CODE IHC212)'\nUN-F   'I/O ERROR - SEARCHING LIBRARY DIRECTORY'\nUN-G   'I/O ERROR - READING LIBRARY'\nUN-H   'ATTEMPT TO DEFINE THE OBJECT ERROR FILE AS A DIRECT ACCESS FILE\n       (IBM CODE IHC234)'\nUN-I   'RECFM IS NOT V(B)S FOR I/O WITHOUT FORMAT CONTROL (IBM CODE IHC214)'\nUN-J   'MISSING DD CARD FOR WATLIB.NO LIBRARY ASSUMED'\nUN-K   'ATTEMPT TO READ OR WRITE PAST THE END OF CHARACTER VARIABLE BUFFER'\nUN-L   'ATTEMPT TO READ ON AN UNCREATED DIRECT ACCESS FILE (IHC236)'\nUN-M   'DIRECT ACCESS SPACE EXCEEDED'\nUN-N   'UNABLE TO OPEN WATLIB DUE TO I/O ERROR; NO LIBRARY ASSUMED'\nUN-P   'ATTEMPT TO WRITE ON A READ ONLY FILE'\nUN-Q   'DIRECT ACCESS UNAVAILABLE IN DEBUG MODE'\n\n'UNDEFINED VARIABLES'\nUV-0   'VARIABLE IS UNDEFINED'\nUV-3   'SUBSCRIPT IS UNDEFINED'\nUV-4   'SUBPROGRAM IS UNDEFINED'\nUV-5   'ARGUMENT IS UNDEFINED'\nUV-6   'UNDECODABLE CHARACTERS IN VARIABLE FORMAT'\n\n'VARIABLE NAMES'\nVA-0   'A NAME IS TOO LONG.IT HAS BEEN TRUNCATED TO SIX CHARACTERS'\nVA-1   'ATTEMPT TO USE AN ASSIGNED OR INITIALIZED VARIABLE OR DO-PARAMETER IN A\n       SPECIFICATION STATEMENT'\nVA-2   'ILLEGAL USE OF A SUBROUTINE NAME'\nVA-3   'ILLEGAL USE OF A VARIABLE NAME'\nVA-4   'ATTEMPT TO USE THE PREVIOUSLY DEFINED NAME AS A FUNCTION OR AN ARRAY'\nVA-5   'ATTEMPT TO USE A PREVIOUSLY DEFINED NAME AS A SUBROUTINE'\nVA-6   'ATTEMPT TO USE A PREVIOUSLY DEFINED NAME AS A SUBPROGRAM'\nVA-7   'ATTEMPT TO USE A PREVIOUSLY DEFINED NAME AS A COMMON BLOCK'\nVA-8   'ATTEMPT TO USE A FUNCTION NAME AS A VARIABLE'\nVA-9   'ATTEMPT TO USE A PREVIOUSLY DEFINED NAME AS A VARIABLE'\nVA-A   'ILLEGAL USE OF A PREVIOUSLY DEFINED NAME'\n\n'EXTERNAL STATEMENT'\nXT-0   'A VARIABLE HAS ALREADY APPEARED IN AN EXTERNAL STATEMENT'\n\n'STRUCTURED PROGRAMMING BLOCKS'\nSP-0   'AT END STATEMENT MUST FOLLOW IMMEDIATELY AFTER A READ'\nSP-1   'AT END FOLLOWS CORE TO CORE, DIRECT ACCESS OR INVALID READ STATEMENT'\nSP-2   'AT END NOT VALID WHEN 'END=' SPECIFIED IN THE READ STATEMENT'\nSP-3   'MISSING OR INVALID DO CASE, WHILE, AT END, OR  IF-THEN STATEMENT'\nSP-4   'IMPROPER NESTING OF BLOCK OR CONSTRUCT'\nSP-5   'IMPROPER NESTING OF DO-LOOP'\nSP-6   'IMPROPER NESTING WITH DO-LOOP'\nSP-7   'MISSING END CASE, END WHILE, END AT END, OR END IF STATEMENT'\nSP-8   'OTHER COMPILERS MAY NOT ALLOW IF-THEN-ELSE, DO CASE, WHILE, EXECUTE,\n       REMOTE BLOCK OR AT END STATEMENTS'\nSP-9   'IF NONE BLOCK ALREADY DEFINED FOR CURRENT DO CASE CONSTRUCT'\nSP-A   'IF NONE BLOCK MUST FOLLOW ALL CASE BLOCKS'\nSP-B   'ATTEMPT TO TRANSFER CONTROL ACROSS REMOTE BLOCK BOUNDARIES'\nSP-C   'REMOTE BLOCK NOT PRECEDED BY A TRANSFER'\nSP-D   'REMOTE BLOCK PREVIOUSLY DEFINED'\nSP-E   'REMOTE BLOCK STATEMENT MISSING OR INVALID'\nSP-F   'LAST REMOTE BLOCK NOT COMPLETED'\nSP-G   'REMOTE BLOCK IS NOT DEFINED'\nSP-H   'REMOTE BLOCK IS NOT REFERENCED'\nSP-I   'ATTEMPT TO NEST REMOTE BLOCK DEFINITIONS'\nSP-J   'MISSING OR INVALID REMOTE BLOCK NAME'\nSP-K   'ATTEMPT TO EXECUTE A REMOTE BLOCK RECURSIVELY'\nSP-L   'NUMBER OF REMOTE BLOCKS EXCEEDS 255'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OBJLIB": {"ttr": 27145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x18\\x03\\x9f\\x01\\x18\\x03\\x9f\\x13X\\x06\\xe3\\x06\\xe3\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-02-08T00:00:00", "modifydate": "2018-02-08T13:58:55", "lines": 1763, "newlines": 1763, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PDSLOAD": {"ttr": 27912, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x08\\x01\\x17\\x05?\\x01\\x17\\x05?  \\x00}\\x00}\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-02-22T00:00:00", "modifydate": "2017-02-22T20:20:08", "lines": 125, "newlines": 125, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PDSUR": {"ttr": 27915, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00s\\x18O\\x01\\x16\\x03?\\x02\\x04\\x08P\\x08P\\x00\\x00\\xd7\\xc4\\xe2\\xe4\\xd9@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1973-07-03T00:00:00", "modifydate": "2016-02-02T02:04:00", "lines": 2128, "newlines": 2128, "modlines": 0, "user": "PDSUR"}, "text": "UR TITLE '     PDSUR -- PDS UNLOAD/RELOAD UTILITY PROGRAM'\n**  TITLE - PDS UNLOAD/RELOAD UTILITY PROGRAM                       **\n**                                                                  **\n**  NAME - PDSUR                                                    **\n**                                                                  **\n**  STATUS - VERSION 1.2,  UPDATED 03JUL73                          **\n**                                                                  **\n**  CSECTS -                                                        **\n**       PDSUR    - MAIN CSECT                                      **\n**       PDSUR1   - UNLOAD OPERATION PROGRAM CSECT                  **\n**       PDSUR2   - RELOAD OPERATION PROGRAM CSECT                  **\n**                                                                  **\n**  ENTRY POINTS -                                                  **\n**       PDSUR   (ONLY ENTRY)                                       **\n**                                                                  **\n**  DESIGNED AND WRITTEN BY -                                       **\n**       GENE CZARCINSKI,  CODE 531                                 **\n**       NASA/GODDARD SPACE FLIGHT CENTER                           **\n**       GREENBELT, MARYLAND  20771                                 **\n**                                                                  **\n**  FUNCTION/OPERATION -                                            **\n**       THIS ROUTINE IS A PARTITIONED DATA SET UTILITY PROGRAM     **\n**       DESIGNED TO PROCESS BACKUP COPIES OF A PDS.  IT CAN BE     **\n**       USED TO UNLOAD OR (RE)LOAD A PDS.  THE UNLOADED FORMAT     **\n**       IS \"IEHMOVE\" COMPATABLE ALTHOUGH IT CAN HANDLE UNLOADED    **\n**       BLKSIZES LARGER THAN 800 WHEREAS IEHMOVE CANNOT.  PDSUR    **\n**       USES JCL TO SPECIFY (AND ALLOCATE) DIRECT ACCESS SPACE     **\n**       FOR THE PDS (RATHER THAN THE DYNAMIC ALLOCATION THAT       **\n**       IEHMOVE USES).  SINCE PDSUR OPERATES AS A DATA SET UTILITY,**\n**       A SEPARATE DD STATEMENT IS REQUIRED FOR EACH PDS AND FOR   **\n**       EACH (UNLOADED) PDS (SEQUENTIAL FILE).                     **\n**                                                                  **\n**  ATTRIBUTES -                                                    **\n**       SERIALLY REUSABLE, BLOCK LOADED, PROB. PGM. STATE          **\n**                                                                  **\n**  LANGUAGE -                                                      **\n**       OS/360 ASSEMBLER LANGUAGE AS DEFINED BY ASSEMBLER(G),      **\n**       VERSION 2, LEVEL 5.                                        **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n**  NOTES -                                                         **\n**       1. THIS ROUTINE PROCESSES IBM'S IEHMOVE COMPATABLE         **\n**          UNLOADED FORMAT FOR A PDS (BUT AS A DATA SET UTILITY    **\n**          RATHER THAN A SYSTEM UTILITY).                          **\n**       2. THE DEFAULT BLKSIZE FOR UNLOADED (TAPE) OUTPUT IS 800.  **\n**       3. A PDSUR ID RECORD IS INSERTED AS THE LAST RECORD IN     **\n**          AN UNLOADED PDS TO IDENTIFY CREATOR.                    **\n**       4. REBLOCKING (FOR LOADING) IS VALID ONLY FOR RECFM=F/FB.  **\n**       5. THIS ROUTINE IS DESIGNED TO RUN AS A JOB-STEP TASK      **\n**          SINCE THE SYSPRINT & SYSIN DDNAMES CANNOT BE CHANGED    **\n**          EXCEPT BY RE-ASSEMBLY.                                  **\n**       6. THIS ROUTINE WAS DEVELOPED AND TESTED UNDER OS/360      **\n**          MVT RELEASE 20.6.  HOWEVER, IT SHOULD RUN (WITH NO      **\n**          MODIFICATIONS) UNDER EARLY OR LATER RELEASES OF MVT,    **\n**          UNDER MFT-II, OR UNDER OTHER COMPATABLE VERSIONS OF     **\n**          OS/360 OR OS/370.                                       **\n**       7. ALL OPERATIONS MUST BE SPECIFIED THRU THE SYSIN FILE.   **\n**          VALID OPERATIONS ARE: 'RELOAD' AND 'UNLOAD'.            **\n**       8. ALTHOUGH NOT STRICTLY IEHMOVE COMPATABLE, THIS          **\n**          ROUTINE WILL HANDLE BLKSIZES LARGER THAN 800 FOR THE    **\n**          UNLOADED DATA SET.                                      **\n**       9. UNLOADED DATA SETS MUST BE SEQUENTIALLY ORGANIZED.      **\n**          UNLOADED DATA SETS WILL NORMALLY RESIDE ON TAPE, BUT    **\n**          THERE IS NOTHING TO PREVENT IT FROM BEING OTHER THAN    **\n**          TAPE.                                                   **\n**      10. ALL CONTROL STATEMENTS MUST BE CONTAINED ON A SINGLE    **\n**          CARD IMAGE (NO CONTINUE CARDS).                         **\n**                                                                  **\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCAL  MACRO  DEFINITIONS                                       **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         MACRO\n&N       TAPEIN    &A,&B\n&N       BAL       R12,TAPEIN          READ IN A RECORD\n         B         &A                  EOF/ERROR RETURN\n         MEND\n**\n         MACRO\n&N       SETRC     &RC\n         LA        R15,&RC             RETURN CODE\n         BAL       R14,SETRET\n         MEND\n**\n         MACRO\n&N       CMPR      &A,&B,&TYPE=E\n&N       CLC       =C&A,0(R2)\n         B&TYPE    &B\n         MEND\n**\n         MACRO\n         NEXT      &A,&B\n         LA        R4,&A\nL&SYSNDX CLI       0(R2),C' '          LOCATE NEXT NON-BLANK\n         BNE       *+16\n         LA        R2,1(R2)\n         BCT       R4,L&SYSNDX\n         B         &B\n         MEND\n**\n         MACRO\n&N       INFOJFCB  &A,&B,&TYPE=1\n&N       LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       11(L'MSG22A,R1),MSG22A\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&A+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&A+JFCBDSNM\n         CHKTAPE   &A\n         AIF       ('&TYPE' EQ '1').ONE\n         CLI       TYPE,8              LIST?\n         BE        X&SYSNDX            YES, SKIP.\n.ONE     ANOP\n         BAL       R12,PRINT1\n         MVC       11(L'MSG22B,R1),MSG22B\n         MVC       19(L'MSG22C,R1),MSG22C\n         MVC       L'MSG22C+19(6,R1),&B+JFCBVOLS\n         MVC       40(L'MSG22D,R1),MSG22D\n         MVC       L'MSG22D+40(44,R1),&B+JFCBDSNM\n         CHKTAPE   &B\nX&SYSNDX BAL       R12,PRINT1\n         MEND\n**\n         MACRO\n         CHKTAPE   &A\n         AIF       ('&A' EQ 'JFCB2').OK\n         MEXIT\n.OK      TM        SWB,SWB4            TAPE?\n         BZ        X&SYSNDX            NO.\n         LH        R0,JFCB2+JFCBFLSQ\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         MVI       L'MSG22C+25(R1),C','\n         UNPK      L'MSG22C+26(4,R1),WORK1\nX&SYSNDX EQU       *\n         MEND\n**\n         MACRO\n&N       SEARCH    &A,&B,&C,&D,&E\n&N       LA        R14,&A\nA&SYSNDX L         R14,0(R14)\n         LTR       R14,R14\n         BZ        &E\n         LA        R1,4(R14)\n         LA        R15,32\nB&SYSNDX CLI       0(R1),&B\n         BE        &E\n         CLC       0(8,R1),0(&C)\n         BE        &D\n         LA        R1,8(R1)\n         BCT       R15,B&SYSNDX\n         B         A&SYSNDX\n         MEND\n**\n         MACRO\n&N       INFOPDS1  &A,&B,&C,&D,&E\n         LCLC      &X\n&X       SETC      'L'''\n&N       BAL       R12,PRINT1\n         MVC       11(&X&D,R1),&D\n         BAL       R12,PRINT1\n         LA        R1,5(R1)\n         MVC       11(&X&E,R1),&E\n         MVI       17(R1),C'?'\n         LA        R15,18(R1)\n         TM        &A,RECU\n         BZ        B&SYSNDX\n         MVI       17(R1),C'U'\n         BO        A&SYSNDX\n         MVI       17(R1),C'F'\n         TM        &A,RECF\n         BO        *+8\n         MVI       17(R1),C'V'\n         TM        &A,RECFB-RECF\n         BZ        *+12\n         MVI       0(R15),C'B'\n         LA        R15,1(R15)\n         TM        &A,RECS\n         BZ        *+12\n         MVI       0(R15),C'S'\n         LA        R15,1(R15)\nA&SYSNDX TM        &A,RECT\n         BZ        *+12\n         MVI       0(R15),C'T'\n         LA        R15,1(R15)\n         TM        &A,RECA\n         BZ        *+12\n         MVI       0(R15),C'A'\n         B         B&SYSNDX\n         TM        &A,RECM\n         BZ        *+8\n         MVI       0(R15),C'M'\nB&SYSNDX LH        R0,&B               LRECL\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         LH        R0,&C               BLKSIZE\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      46(5,R1),WORK1\n         MEND\n**\n         MACRO\n&N       INFOPDS2\n&N       MVC       WORK1(2),UNLDDIR    DIR BLKS\n         LH        R0,WORK1\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      68(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      68(5,R1),WORK1\n         MEND\n**\n EJECT\nPDSUR    START     0\n**\nR0       EQU       0         OS PARM REG; WORK REG\nR1       EQU       1         OS PARM REG; WORK REG\nR2       EQU       2         LOCAL WORK REG\nR3       EQU       3         LOCAL WORK REG\nR4       EQU       4         LOCAL WORK REG\nR5       EQU       5         POINTER TO PDS BUFFER\nR6       EQU       6         DIRECTORY ENTRY POINTER\nR7       EQU       7         PNTR TO DIR NL TTR'S\nR8       EQU       8\nR9       EQU       9         DATA BASE REGISTER\nR10      EQU       10        MAIN BASE REGISTER\nR11      EQU       11        SECONDARY CSECT BASE REGISTER\nR12      EQU       12        LOCAL LINK REGISTER\nR13      EQU       13        SAVE AREA PNTR\nR14      EQU       14        OS LINK REG; WORK REG\nR15      EQU       15        OS EP ADRS REG; WORK REG\n**\nOFLG     EQU       X'10'     DCB OPEN FLAGS\nRECMASK  EQU       X'F0'\nRECU     EQU       X'C0'     RECFM=U\nRECF     EQU       X'80'     RECFM=F\nRECFB    EQU       X'90'     RECFM=FB\nRECV     EQU       X'40'     RECFM=V\nRECVB    EQU       X'50'     RECFM=VB\nRECT     EQU       X'20'     TRACK OVERFLOW\nRECS     EQU       X'08'     FBS OR VBS\nRECA     EQU       X'04'     ASA CONTROL CHARACTER\nRECM     EQU       X'02'     MACHINE CONTROL CHARACTER\nALIAS    EQU       X'80'     ALIAS BIT IN PDS DIRECTORY BLOCK ENTRY\nJFCBDSNM EQU       0         OFFSET TO DSNAME\nJFCBVOLS EQU       118       OFFSET TO VOLSER\nJFCBIND2 EQU       87        OFFSET TO 'DISP=...'\nJFCBNEW  EQU       X'C0'     BITS ON IF DISP=NEW\nJFCRECFM EQU       100       OFFSET TO RECFM\nJFCBLKSI EQU       102       OFFSET TO BLKSIZE\nJFCLRECL EQU       104       OFFSET TO LRECL\nJFCBFLSQ EQU       68        OFFSET TO MAG TAPE FILE SEQ NO.\n**  IBM'S UNLOADED RECORD TYPE INDICATORS\n@TTR     EQU       X'80'     TTR\n@PDS     EQU       X'40'     UNLOADED DATA SET IS A PDS\n@MEM     EQU       X'20'     RECORD IS PART OF MEMBER\n@NL      EQU       X'10'     RECORD IS A NOTE LIST\n@DIR     EQU       X'08'     RECORD IS A DIRECTORY RECORD\n@DUM     EQU       X'04'     RECORD IS A DUMMY RECORD\n@X       EQU       X'02'     NOT USED\n@END     EQU       X'01'     \"END OF FILE\"\n**\nRC1      EQU       04        RETURN CODE - WARNING\nRC2      EQU       08        RETURN CODE - ERROR\nRC3      EQU       12        RETURN CODE - SERIOUS ERROR\nRC4      EQU       16        RETURN CODE - TERMINAL ERROR\nRC5      EQU       20        RETURN CODE - SYSPRINT OPEN ERROR\n**\nSWA1     EQU       X'80'     OPERATION TERMINATED\nSWA2     EQU       X'40'     EOF DETECTED\nSWA3     EQU       X'20'     FLAG FOR PROCESSING ALIAS\nSWA4     EQU       X'10'     FLAG FOR A NOTELIST PROCESSED\nSWA5     EQU       X'08'     STOW REPLACE TO BE USED\nSWA6     EQU       X'04'     FLAG TO LEAVE TAPE MOUNTED\nSWA7     EQU       X'02'     NOTELIST FLAG\nSWA8     EQU       X'01'     DIRECTORY ENTRY PROCESSED\nSWB1     EQU       X'80'     REBLOCKING FLAG #1\nSWB2     EQU       X'40'     REBLOCKING FLAG #2\nSWB3     EQU       X'20'     DIR UPDATE FLAG FOR REBLOCK\nSWB4     EQU       X'10'     \"1\" -> SEQUENTIAL DEVICE IS A TAPE\nSWB5     EQU       X'08'     FLUSH FLAG #1\nSWB6     EQU       X'04'     FLUSH FLAG #2\nSWB7     EQU       X'02'     SELECT OR EXCLUDE SPECIFIED\nSWB8     EQU       X'01'     \"0\"=SELECT;  \"1\"=EXCLUDE\nSWX1     EQU       X'80'     EOF DETECTED ON SYSIN READING LAST CARD\nSWX2     EQU       X'40'     RECFM=V OPEN FLAG\nSWX3     EQU       X'20'\nSWX4     EQU       X'10'\nSWX5     EQU       X'08'\nSWX6     EQU       X'04'\nSWX7     EQU       X'02'\nSWX8     EQU       X'01'\n**\n EJECT\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROGRAM INITIALIZATION                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         SAVE      (14,12),,PDSUR__VERSION-1.2_GENE-CZARCINSKI\n         BALR      R10,0               GET BASE ADRS\n         USING     *,R10               ESTABLISH ADDRESSABILITY\n         LA        R15,SAVEAREA        SET UP SAVE AREA\n         ST        R13,4(R15)\n         ST        R15,8(R13)\n         LR        R13,R15\n         LR        R9,R15\n         USING     SAVEAREA,R9         DATA BASE ADDRESSABILITY\n         SR        R15,R15\n         STH       R15,RETCOD\n         STH       R15,PNUM\n         STC       R15,SWX\n         MVC       PCNT,PLIM\n         OPEN      (SYSPRINT,(OUTPUT))\n         TM        SYSPRINT+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        STAEINIT            OPEN OK.\n         WTO       'PDSUR:  OPEN ERROR FOR DDNAME=SYSPRINT',           +\n               ROUTCDE=11,DESC=7\n         L         R13,4(R13)          ERROR ... ABORT\n         RETURN    (14,12),T,RC=RC5\nSTAEINIT STAE      STAEXIT,CT\n         OPEN      (SYSIN,(INPUT))\n         TM        SYSIN+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        CARDINIT            OPEN OK.\n         BAL       R12,PRINT2          ERROR -- PRNT MSG\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(5,R1),=C'SYSIN'\n         SETRC     RC4\n         B         ENDTASK2\nCARDINIT BAL       R12,GETCARD\n         B         ENDTASK\n         ST        R1,LASTCARD\n TITLE '           PERFORM GENERAL INITIALIZATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PERFORM  GENERAL  INITIALIZATION  (FOR REQUESTED OPERATION)     **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nBEGIN    TM        SWX,SWX1            EOF ON SYSIN?\n         BO        ENDTASK             YES, DONE.\n         MVC       FROMDD,=CL8' '\n         MVC       TODD,=CL8' '\n         GETMAIN   R,LV=0              COLLECT CORE\n         XC        SWITCHES,SWITCHES   CLEAR ALL SWITCHES\n**\n**  GET AND ANALYZE A CONTROL CARD\n**\n         BAL       R12,PRINT2          PRINT HEADER\n         MVC       0(MSG25L,R1),MSG25\n         LR        R2,R1               SAVE POINTER\n         TIME      DEC                 GET DATE/TIME\n         ST        R0,WORK1            NOW FORTMAT IT FOR HEADING\n         XC        WORK1+8(8),WORK1+8\n         ST        R1,WORK1+12\n         MVC       WORK1+5(1),WORK1+13 SAVE YEAR\n         CVB       R15,WORK1+8         CONVERT DATE TO BINARY\n         XR        R14,R14\n         D         R14,=F'1000'        TO SEPARATE YEAR & DAY\n         ST        R15,WORK1+8\n         LA        R15,MONTHS1         FOR STD YEAR\n         TM        WORK1+11,X'03'      LEAP YEAR?\n         BNZ       *+8                 NO.\n         LA        R15,MONTHS2         YES, USE TABLE 2\n         XR        R1,R1\nBEGIN10  SH        R14,0(R15)\n         BNP       BEGIN11\n         LA        R1,3(R1)\n         LA        R15,2(R15)\n         B         BEGIN10\nBEGIN11  AH        R14,0(R15)\n         MH        R14,=H'10'\n         CVD       R14,WORK1+8         FOR DAY OF MONTH\n         LA        R1,MONTHS3(R1)      FOR MONTH IN CHARS\n         MVC       L'MSG25+3(3,R2),0(R1)\n         MVC       WORK1+4(1),WORK1+14 DAY OF MONTH\n         ED        L'MSG25(8,R2),WORK1+4\n         CLI       L'MSG25+1(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+1(R2),C'0'\n         ED        L'MSG25+8(9,R2),WORK1\n         CLI       L'MSG25+9(R2),C' '\n         BNE       *+8\n         MVI       L'MSG25+9(R2),C'0'\n*\n         L         R2,LASTCARD\n         LA        R15,2               TO PRINT THE CARD IMAGE\n         BAL       R12,PRINT1\n         MVI       0(R1),C'0'\n         MVC       5(80,R1),0(R2)\n         LA        R3,71(R2)           COMPUTE END OF CARD\n         NEXT      40,CTLCRDER\n         MVI       TYPE,0\n         CMPR      'UNLOAD ',CTLCRD3\n         CMPR      'U ',CTLCRD4\n         MVI       TYPE,4\n         CMPR      'RELOAD ',CTLCRD3\n         CMPR      'R ',CTLCRD4\n         MVI       TYPE,8\n         CMPR      'LIST ',CTLCRD3A\n         CMPR      'L ',CTLCRD4\n         B         CTLCRDER            ERROR\nCTLCRD3  LA        R2,2(R2)            PROCESS CONTROL CARD OPERAND\nCTLCRD3A LA        R2,3(R2)\nCTLCRD4  LA        R2,2(R2)\n         NEXT      16,CTLCRDER\nCTLCRD4B CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\n         CMPR      'FROMDD=',CTLCRD6A\n         CMPR      'F=',CTLCRD6A+4\n         CMPR      'TODD=',CTLCRD6B\n         CMPR      'T=',CTLCRD6B+4\n         CMPR      'REPLACE',CTLCRD5A\n         CLI       0(R2),C'R'\n         BE        CTLCRD5\n         CMPR      'SELECT',CTLCRD7A\n         CMPR      'EXCLUDE',CTLCRD7B\n         CLI       0(R2),C'S'\n         BE        CTLCRD7C\n         CLI       0(R2),C'E'\n         BE        CTLCRD7D\n         CMPR      'LEAVE',CTLCRD8A\n         CLI       0(R2),C'L'\n         BE        CTLCRD8B\n         B         CTLCRDER            ERROR\nCTLCRD5A LA        R2,6(R2)\nCTLCRD5  OI        SWA,SWA5            SET \"REPLACE\" SWITCH\n         LA        R2,1(R2)\n         B         CTLCRD7G\nCTLCRD6A LA        R2,5(R2)            UPDATE POINTER . . . FROMDD\n         LA        R2,2(R2)\n         LA        R14,FROMDD\n         B         CTLCRD6C\nCTLCRD6B LA        R2,3(R2)            UPDATE POINTER . . . TODD\n         LA        R2,2(R2)\n         LA        R14,TODD\nCTLCRD6C LA        R4,8                SET LENGTH\n         CR        R2,R3               END OF CARD?\n         BNL       CTLCRDER            ERROR\nCTLCRD6D CLI       0(R2),C','          COMMA\n         BE        CTLCRD6E            YES\n         CLI       0(R2),C' '          END OF OPERAND\n         BE        CTLCRDX\n         IC        R0,0(R2)            GET CHAR\n         STC       R0,0(R14)           AND SAVE IT\n         LA        R2,1(R2)            UPDATE POINTERS\n         LA        R14,1(R14)\n         CR        R2,R3               END OF CARD\n         BNL       CTLCRDX\n         BCT       R4,CTLCRD6D\n         CLI       0(R2),C' '\n         BE        CTLCRDX\nCTLCRD6E CLI       0(R2),C','          COMMA?\n         BNE       CTLCRDER            ERROR\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD7A LA        R2,6(R2)\n         B         CTLCRD7F\nCTLCRD7B LA        R2,7(R2)\n         B         CTLCRD7E\nCTLCRD7C LA        R2,1(R2)\n         B         CTLCRD7F\nCTLCRD7D LA        R2,1(R2)\nCTLCRD7E OI        SWB,SWB7+SWB8\n         B         CTLCRD7G\nCTLCRD7F OI        SWB,SWB7\n         NI        SWB,255-SWB8\nCTLCRD7G CR        R2,R3\n         BNL       CTLCRDX\n         CLI       0(R2),C' '\n         BE        CTLCRDX\n         CLI       0(R2),C','\n         BNE       CTLCRDER\n         LA        R2,1(R2)\n         B         CTLCRD4B\nCTLCRD8A LA        R2,4(R2)\nCTLCRD8B LA        R2,1(R2)\n         OI        SWA,SWA6            FLAG LEAVE OPTION\n         B         CTLCRD7G\n**  GET NEXT CONTROL CARD\nCTLCRDX  LA        R6,PNTR9\n         XR        R8,R8\nCTLCRDX1 BAL       R12,GETCARD\n         B         CTLCRDA\n         ST        R1,LASTCARD\n         LR        R2,R1\n         LA        R3,71(R1)\n         NEXT      40,CTLCRDA\nCTLCRDX3 LA        R1,2(R2)\n         CMPR      'M ',CTLCRDX4\n         LA        R1,7(R2)\n         CMPR      'MEMBER ',CTLCRDA,TYPE=NE\nCTLCRDX4 LR        R2,R1\n         BAL       R12,PRINT1\n         L         R15,LASTCARD\n         MVC       5(80,R1),0(R15)\n         NEXT      20,CTLCRDX1\nCTLCRDX6 LTR       R8,R8\n         BNZ       CTLCRDX7\n         GETMAIN   R,LV=260\n         ST        R1,0(R6)\n         LA        R7,4(R1)\n         LR        R6,R1\n         XC        0(4,R1),0(R1)\n         LA        R8,32\nCTLCRDX7 MVC       0(8,R7),=CL8' '\n         LR        R1,R7\n         LA        R15,8\nCTLCRDX8 CLI       0(R2),C' '\n         BE        CTLCRDX9\n         CLI       0(R2),C','\n         BE        CTLCRDXA\n         LTR       R15,R15\n         BNP       *+18\n         IC        R0,0(R2)\n         STC       R0,0(R1)\n         BCTR      R15,0\n         LA        R1,1(R1)\n         LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX8\nCTLCRDX9 CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\n         B         CTLCRDX1\nCTLCRDXA CH        R15,=H'8'\n         BE        *+10\n         LA        R7,8(R7)\n         BCTR      R8,0\nCTLCRDXB LA        R2,1(R2)\n         CR        R2,R3\n         BL        CTLCRDX7\n         B         CTLCRDX1\n**\n**  GENERAL INITIALIZATION COMPLETE ... GO PROCESS THE REQUEST\n**\nCTLCRDA  CLI       FROMDD,C' '         CHECK IF PARMS SPECIFIED\n         BE        CTLCRDAA\n         CLI       TYPE,8              SKIP FOR LIST\n         BE        *+12\n         CLI       TODD,C' '\n         BE        CTLCRDAA\n         SR        R11,R11             CLEAR REG\n         IC        R11,TYPE            PICK UP TYPE\n         L         R11,TYPETBL(R11)\n         BR        R11                 GOTO PROCESSOR\n**\nCTLCRDAA BAL       R12,PRINT1\n         MVC       5(L'MSG04,R1),MSG04\n         BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         B         BEGIN\n**  CONTROL CARD FORMAT ERROR\nCTLCRDER BAL       R12,PRINT1\n         MVC       5(L'MSG01,R1),MSG01\n         SETRC     RC2\n         BAL       R12,GETCARD\n         B         BEGIN\n         ST        R1,LASTCARD\n         B         BEGIN\n**\nTYPETBL  DC        A(UNLOAD)           FOR DUMP\n         DC        A(RELOAD)           FOR LOAD\n         DC        A(RELOAD)           FOR LIST\n TITLE '           UNLOAD  OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD OPERATION INITIALIZATION                                 **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR1   CSECT\n         USING     UNLOAD,R11\nUNLOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         XC        PDSBUF1,PDSBUF1\n         XC        ALLOCM,ALLOCM\n         XC        ALLOCS,ALLOCS\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   TODD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0             WAS PDS JFCB READ IN?\n         BE        INIT1               NO\n         CLI       JFCB2,0             TAPE JFCB OK?\n         BE        INIT1CA             NO.\n         OBTAIN    PDSDSCB\n         MVC       DSNAME,JFCB1+JFCBDSNM\n         INFOJFCB  JFCB1,JFCB2\n**\n**  INIT THE PDS FILE (FOR READING THE DIRECTORY)\n**\n         NI        SWX,255-SWX2        TURN OFF RECFM=V SWITCH\n         OPEN      (PDS,(INPUT)),TYPE=J\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1A              OPEN OK\nINIT1    BAL       R12,PRINT1          PRINT ERROR MSG FOR PDS FILE\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT1A   OI        SWX,SWX2            SET FOR SECOND PASS (RECFM=V)\n         MVC       PDS+(DCBLRECL-IHADCB)(2),=H'256'\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),=H'256'\n**\n**  ALLOCATE AND BUILD THE DIRECTORY TABLE\n**\n         LA        R2,PNTR1            INIT\n         XR        R6,R6               FOR DIR BLOCK COUNTER\nINIT1AA  GETMAIN   R,LV=260            GET CORE FOR ONE BLOCK\n         XC        0(4,R1),0(R1)       INIT & LINK BLOCK\n         ST        R1,0(R2)\n         LA        R5,4(R1)\n         LR        R2,R1\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         BAL       R12,PDSIN           READ IN THE BLOCK\n         B         INIT1AD             EOF RETURN\n         LA        R6,1(R6)            UPDATE BLOCK COUNT\n         STH       R6,USEDBLKS\n         LH        R4,0(R5)            BLOCK \"USED BYTES\" COUNT\n         LA        R4,0(R5,R4)         COMPUTE END OF BLOCK ADRS\n         LA        R5,2(R5)            POINT TO BEGINNING OF BLOCK\n         SR        R15,R15             CLEAR WORK REG\nINIT1AB  CLI       0(R5),X'FF'         END OF DIRECTORY?\n         BE        INIT1AC             YES.\n         IC        R15,11(R5)          COMPUTE ADRS OF NEXT ENTRY\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4               END OF BLOCK?\n         BL        INIT1AB             NO.\n         B         INIT1AA             YES, GO GET NEXT BLOCK\nINIT1AC  GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         MVI       6(R1),X'FF'\n         MVC       4(2,R1),=H'4'\n         LA        R5,4(R1)            WAS LR R5,R1 - SOC4 TERM1B .FIX.\nINIT1AC1 BAL       R12,PDSIN\n         B         INIT1AD\n         LA        R6,1(R6)\n         B         INIT1AC1\nINIT1AD  STH       R6,WORK1\n         MVC       UNLDDIR(2),WORK1\n**  SCAN DIRECTORY AND ELEMINATE \"ALL ALIAS\" ENTRIES\nINIT1B   LA        R1,PNTR1            INIT FOR SCAN\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\nINIT1BA  BAL       R12,GETNTRY         GET A DIRECTORY ENTRY\n         B         INIT1C              END OF SCAN\n         TM        11(R1),ALIAS        IS ENTRY AN ALIAS?\n         BZ        INIT1BA             NO.\n         LR        R2,R1               SAVE PNTR TO ALIAS ENTRY\n         MVC       SAVEPNTR(16),PNTR2  YES, SAVE POSITION\n         LA        R1,PNTR1            AND INIT\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         SR        R3,R3\nINIT1BB  BAL       R12,GETNTRY         GET A BLOCK\n         B         INIT1BC             END OF DIRECTORY\n         CLC       8(3,R2),8(R1)       TTR=TTR?\n         BNE       INIT1BB             NO.\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        INIT1BD             NO, MUST BE MAIN NAME\n         LTR       R3,R3               HAS AN ALIAS BEEN FOUND\n         BNZ       INIT1BB             YES.\n         LR        R3,R1               NO, USE THIS ONE\n         B         INIT1BB\nINIT1BC  NI        0(R3),255-ALIAS     NO MAIN FOUND, DELETE ALIAS\nINIT1BD  MVC       PNTR2(16),SAVEPNTR  RESTORE TO PICK UP SCAN\n         B         INIT1BA\n**\n**  INITIALIZE THE TAPE FILE & RE-INIT THE PDS DCB\n**\nINIT1C   MVC       PDS+(DCBRECFM-IHADCB)(1),SAVRECFM\n         MVC       PDS+(DCBLRECL-IHADCB)(2),SAVLRECL\n         MVC       PDS+(DCBBLKSI-IHADCB)(2),SAVBLKSI\n         TM        SAVRECFM,RECF       RECFM=V?\n         BO        INIT1C0X            NO, RECFM=U/F\n         CLOSE     (PDS,LEAVE)         YES, RESET FOR RECFM=V\n         MVI       PDS+(DCBRECFM-IHADCB),0\n         XC        PDS+(DCBLRECL-IHADCB)(2),PDS+(DCBLRECL-IHADCB)\n         XC        PDS+(DCBBLKSI-IHADCB)(2),PDS+(DCBBLKSI-IHADCB)\n         OPEN      (PDS,(INPUT)),TYPE=J\nINIT1C0X OPEN      (TAPE,(OUTPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT1CB             OPEN OK\nINIT1CA  BAL       R12,PRINT1          OPEN ERROR -- PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         B         TERM1\n**\n**  OUTPUT THE HEADER RECORDS\n**\nINIT1CB  XC        PNTR8A,PNTR8A\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L         OUTPUT IBM'S ID RECORD\n         LA        R3,UNLREC1\n         BAL       R12,TAPEOUT\n**  FORMAT & OUTPUT THE DATA SET DESCRIPTOR RECORD\n**       DIR BLK COUNT ALREADY FILLED BY DIR READ ROUTINE\n         XC        UNLDSPAR,UNLDSPAR\n         XC        UNLDSIZE,UNLDSIZE\n         XC        UNLDSSIZ,UNLDSSIZ\n         DEVTYPE   FROMDD,WORK1+8,DEVTAB\n         MVI       UNLDFLAG,X'40'\n         MVC       UNLDDEVT,WORK1+8\n**  COMPUTE SECONDARY ALLOCATION\n         TM        DS1SCALO,X'80'      BLK OR ABS ALLOC?\n         BZ        INIT1CC             YES, SKIP\n         MVC       WORK1(4),DS1SCALO   COMPUTE SEC. ALLOC.\n         L         R1,WORK1\n         LA        R1,0(R1)            CLEAR TOP BYTE\n         TM        WORK1+25,X'02'      2321?\n         NOP       DEV2321X            YES      (WAS BO)          .FIX.\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO.\n         MH        R1,WORK1+18         YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n         B         INIT1CC\nDEV2321X XR        R2,R2               COMPUTE SEC. ALLOC. FOR 2321\n         IC        R2,WORK1+18\n         STH       R2,WORK1\n         TM        DS1SCALO,X'40'      CYL ALLOC?\n         BZ        *+8                 NO\n         MH        R1,WORK1            YES, CONVERT CYL TO TRK\n         ST        R1,ALLOCS\n         MH        R1,WORK1+20         CONVERT TRK TO BYTES\n         ST        R1,WORK1\n         MVC       UNLDSSIZ,WORK1\n** COMPUTE PRIMARY ALLOCATION\nINIT1CC  TM        WORK1+25,X'02'      2321?\n         B         INIT1CCA            NO     (WAS BNO)           .FIX.\n         XR        R1,R1               COMPUTE PRIMARY FOR 2321\n         XR        R2,R2\n         MVI       WORK1,0\n         LA        R14,2\nDEV2321A LA        R15,3\n         LA        R3,DSCB+61\nDEV2321B CLI       0(R3),0             LAST VALID EXT?\n         BE        DEV2321C            YES\n         IC        R2,4(R14,R3)\n         AR        R1,R2\n         IC        R2,0(R14,R3)\n         SR        R1,R2\n         LA        R3,10(R3)           POINT AT NEXT EXT.\n         BCT       R15,DEV2321B        AND LOOP THRU 3 EXT.\nDEV2321C CH        R14,=H'5'           DONE?\n         BNL       INIT1CE             YES\n         IC        R2,WORK1+15(R14)    GET MULT FACTOR\n         STC       R2,WORK1+1\n         MH        R1,WORK1            AND USE IT TO CONVERT\n         LA        R14,1(R14)\n         B         DEV2321A\nINIT1CCA MVC       WORK1(8),DSCB+63    PROCESS CYL\n         LH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+73\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+81,0\n         BE        INIT1CD\n         MVC       WORK1(8),DSCB+83\n         AH        R1,WORK1+4\n         SH        R1,WORK1\nINIT1CD  MH        R1,WORK1+18         CONVERT CYL TO TRK\n         MVC       WORK1(8),DSCB+65    PROCESS TRK\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         CLI       DSCB+71,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+75\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\n         CLI       DSCB+81,0\n         BE        INIT1CE\n         MVC       WORK1(8),DSCB+85\n         AH        R1,WORK1+4\n         SH        R1,WORK1\n         LA        R1,1(R1)            PLUS ONE\nINIT1CE  LA        R1,1(R1)            PLUS ONE\n         ST        R1,ALLOCM\n*        MH        R1,WORK1+20         CONVERT TRK TO BYTES      *.FIX.\n         XC        WORK1(2),WORK1      IN CASE WORK1+20 > 7FFF    .FIX.\n         MVC       WORK1+2(2),WORK1+20 IN CASE WORK1+20 > 7FFF    .FIX.\n         M         R0,WORK1            CONVERT TRK TO BYTES       .FIX.\n         ST        R1,WORK1\n         MVC       UNLDSIZE,WORK1\n         LA        R2,200              OUTPUT SECOND REC (REL 21)\n         LA        R3,UNLREC2\n         BAL       R12,TAPEOUT\n**\n**  LIST PDS CHARACTERISTICS\n**\n         INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24A,MSG24B\n         INFOPDS2\n         MVC       75(14,R1),=C'DIR-BLKS-USED='\n         LH        R0,USEDBLKS\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      89(3,R1),WORK1\n         CH        R0,=H'999'\n         BNH       *+10\n         UNPK      89(5,R1),WORK1\n         BAL       R12,PRINT1\n         LA        R1,15(R1)\n         MVC       1(L'MSG24C,R1),MSG24C\n         L         R0,ALLOCM           MAIN ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      12(5,R1),WORK1\n         L         R0,ALLOCS           SEC. ALLOC\n         CVD       R0,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      31(5,R1),WORK1\n         BAL       R12,PRINT1\n**\n**  INIT OPERATION VARIABLES & ALLOCATE THE PDS BUFFER\n**\n         LA        R1,PNTR1            INIT POINTERS\n         ST        R1,PNTR2\n         XC        PNTR3A,PNTR3A\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  LENGTH OF BUFFER\n         STH       R0,PDSBUFL\n         GETMAIN   R,LV=(0)            ALLOCATE THE CORE\n         ST        R1,PDSBUF1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UNLOAD THE PDS -- MEMBER BY MEMBER                              **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**\n**  PROCESS DIRECTORY ENTRY\n**\nDUMP00   BAL       R12,GETNTRY         GET ONE DIRECTORY ENTRY\n         B         TERM1               END OF DIRECTORY\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BO        DUMP00              YES, SKIP IT\n         LR        R6,R1               SAVE POINTER\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        DUMP05\n         SEARCH    PNTR9,C' ',R6,DUMP03,DUMP04\nDUMP03   TM        SWB,SWB8\n         BO        DUMP00              IGNORE, EXCLUDE\n         B         DUMP05              PROCESS, SELECT\nDUMP04   TM        SWB,SWB8\n         BZ        DUMP00              IGNORE, SELECT\n         B         DUMP05              PROCESS, EXCLUDE\nDUMP05   XC        LLITTR,LLITTR       OUTPUT THE DIR ENTRY\n         L         R1,PNTR3B\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R6\n         BAL       R12,TAPEOUT\n         MVC       TTR3,8(R6)          SAVE TTR TO INIT FOR DATA\n         MVI       TTR3+3,0\n**  INIT FOR NOTELISTS\n         NI        SWA,255-(SWA4+SWA7) TURN OFF DONE SWITCH\n         XR        R2,R2\n         IC        R2,11(R6)\n         SRL       R2,5\n         N         R2,=F'3'\n         LA        R7,12(R6)\n         STH       R2,NLCNT\n         LTR       R2,R2\n         BNZ       *+8\n         OI        SWA,SWA7            FLAG NO NOTELISTS\n**\n**  UNLOAD A MEMBER (PROCESSING ANY NOTELISTS)\n**\nDUMP10   TM        SWA,SWA7            ANY MORE NOTELISTS?\n         BO        DUMP10B             NO\n         CLI       3(R7),0             TTR FOR NOTELIST\n         BNE       DUMP11              YES\nDUMP10A  LA        R7,4(R7)            UPDATE TTR/NOTELIST PNTR\n         LH        R2,NLCNT\n         BCT       R2,*+8\n         OI        SWA,SWA7            NO MORE NOTELISTS\n         STH       R2,NLCNT\n         B         DUMP10\nDUMP10B  XC        LLI(6),LLI          OUTPUT DUMMY RECORD\n         TM        SWA,SWA4            WAS NOTELIST PROCESSED?\n         BZ        DUMP15              NO\n         MVC       LLI(2),=H'20'\n         MVI       LLI+2,@PDS+@TTR+@DUM\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         XC        WORK1(20),WORK1\n         LA        R2,20\n         LA        R3,WORK1\n         BAL       R12,TAPEOUT\n         B         DUMP15A\nDUMP11   MVC       TTR1,0(R7)\n         MVI       TTR1+3,0\n         POINT     PDS,TTR1            POSITION TO NOTELIST REC\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN           AND READ IN THE NOTELIST\n         B         DUMP40\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@NL\n         MVC       LLITTR(3),0(R7)\n         LA        R2,6                OUTPUT THE NOTELIST REC\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN\n         L         R3,PDSBUF1\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA4\n         BO        *+12\n         OI        SWA,SWA4\n         B         DUMP15\n         OI        SWA,SWA4\n         L         R5,PDSBUF1\n         POINT     PDS,TTR3\n         BAL       R12,PDSIN\n         B         DUMP40\n         B         DUMP15A\nDUMP15   POINT     PDS,TTR3            POSITION TO MEMBER'S DATA\nDUMP15A  L         R5,PDSBUF1\nDUMP16   XC        LLI(6),LLI          OUTPUT THE DATA\n         L         R5,PDSBUF1\n         BAL       R12,PDSIN\n         B         DUMP20\n         NOTE      PDS\n         ST        R1,TTR3\n         TM        SWA,SWA7            NOTELIST PROCESSING?\n         BO        *+14                NO\n         CLC       TTR3(3),TTR1\n         BE        DUMP10A\n         MVC       LLITTR(3),TTR3\n         LH        R1,BLKLEN\n         STH       R1,LLI\n         MVI       LLI+2,@PDS+@TTR+@MEM\n         LA        R2,6                OUTPUT LLI & TTR\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         LH        R2,BLKLEN           OUTPUT DATA\n         LR        R3,R5\n         BAL       R12,TAPEOUT\n         B         DUMP16\nDUMP20   BAL       R12,PRINT1          OUTPUT EOM MSG\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R6)\n         MVC       L'MSG07+19(L'MSG06,R1),MSG06\n**\n**  OUTPUT ANY ALIAS DIRECTORY ENTRIES FOR CURRENT MEMBER\n**\nDUMP30   MVC       SAVEPNTR(16),PNTR2  SAVE POSITION IN DIR TBL\n         LA        R1,PNTR1            INIT FOR TBL SCAN\n         XC        PNTR3A,PNTR3A\n         ST        R1,PNTR2\nDUMP31   BAL       R12,GETNTRY         GET ONE ENTRY\n         B         DUMP35              END OF SCAN; GO PROC NEXT MEMBR\n         TM        11(R1),ALIAS        IS THIS AN ALIAS?\n         BZ        DUMP31              NO.\n         CLC       8(3,R6),8(R1)       TTR=TTR?\n         BNE       DUMP31              NO.\n         LR        R4,R1               THIS IS AN ALIAS; PROCESS IT\n         TM        SWB,SWB7+SWB8       EXCLUDE IN EFFECT?\n         BNO       DUMP33              NO.\n         SEARCH    PNTR9,C' ',R4,DUMP31,DUMP33\nDUMP33   L         R2,PNTR3B\n         STH       R2,LLI\n         XC        LLITTR,LLITTR\n         MVI       LLI+2,@PDS+@TTR+@DIR\n         LA        R2,6\n         LA        R3,LLI\n         BAL       R12,TAPEOUT\n         L         R2,PNTR3B\n         LR        R3,R4\n         BAL       R12,TAPEOUT\n         BAL       R12,PRINT1          OUTPUT 'ALIAS UNLOADED' MSG\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R4)\n         MVC       L'MSG11+19(L'MSG06,R1),MSG06\n         B         DUMP31\nDUMP35   MVC       PNTR2(16),SAVEPNTR  RESTORE TABLE POSITION\n         B         DUMP00              AND CONTINUE\n**\nDUMP40   BAL       R12,PRINT1          ERROR READING NOTELIST\n         MVC       5(L'MSG21,R1),MSG21\n         MVC       L'MSG21+5(L'MSG09,R1),MSG09\n         SETRC     RC2\n         B         TERM1\n**\n**  END OF DUMP OPERATION:  TERMINATE\n**\nTERM1    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM1X\n         LA        R2,LASTRECL         OUTPUT LAST (MY ID) RECORD\n         LA        R3,LASTREC\n         BAL       R12,TAPEOUT\n         TM        SWA,SWA6            LEAVE?\n         BZ        TERM1V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM1W\nTERM1V   CLOSE     TAPE\nTERM1W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM1X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM1A              BUFF NOT ALLOCATED\n         LH        R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\nTERM1A   L         R2,PNTR1            FREE DIRECTORY TABLE\nTERM1B   LTR       R1,R2\n         BZ        TERM1C\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM1B\nTERM1C   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM1C1  LTR       R1,R2\n         BZ        TERM1D\n         L         R2,0(R2)\n         FREEMAIN R,LV=260,A=(1)\n         B         TERM1C1\nTERM1D   LA        R15,2               PRINT END MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         TM        SWA,SWA1            OPERATION ABORTED?\n         BO        TERM1Z              YES\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\nTERM1Z   MVC       5(L'MSG12,R1),MSG12\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  LOCATE THE NEXT DIRECTORY ENTRY & RETURN ADRS IN R1\n**       RETURN = 4(R12) FOR NORMAL RETURN\n**       RETURN = 0(R12) FOR END OF DIRECTORY\nGETNTRY  L         R1,PNTR3A           CHECK BYTE COUNT\n         LTR       R1,R1\n         BP        GETNTRY1            STILL SOME LEFT\n         L         R15,PNTR2           GET NEXT BLOCK\n         LTR       R15,R15             END OF TABLE?\n         BZR       R12                 YES.\n         L         R15,0(R15)\n         ST        R15,PNTR2\n         LH        R0,4(R15)           BLOCK BYTE COUNT\n         SH        R0,=H'2'\n         LA        R1,6(R15)           ADRS OF DATA\n         ST        R0,PNTR3A\n         ST        R1,PNTR3\n         B         GETNTRY2\nGETNTRY1 L         R1,PNTR3            COMPUTE ADRS OF NEXT ENTRY\n         AL        R1,PNTR3B\n         ST        R1,PNTR3\nGETNTRY2 SR        R15,R15             COMPUTE LEN & UPDATE BYTE CNT\n         IC        R15,11(R1)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R15,12(R15)\n         ST        R15,PNTR3B\n         LCR       R15,R15\n         A         R15,PNTR3A\n         ST        R15,PNTR3A\n         CLI       0(R1),X'FF'         CHECK FOR END OF DIRECTORY\n         BNE       4(R12)\n         BR        R12                 END OF DIRECTORY\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A BLOCK FROM THE PDS\n**       NORMAL RETURN - OFFSET=4\n**       EOF RETURN    - OFFSET=0\nPDSIN    XC        DECBIN,DECBIN       CLEAR THE ECB\n         READ      DECBIN,SF,PDS,(R5),'S'\n         CHECK     DECBIN\n         L         R15,DECBIN+16       COMPUTE & SAVE LENGTH\n         LH        R14,PDS+(DCBBLKSI-IHADCB)\n         SH        R14,14(R15)\n         STH       R14,BLKLEN\n         B         4(R12)              RETURN TO CALLER\nPDSEOF   BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  OUTPUT UNLOADED RECORDS TO TAPE\nTAPEOUT  LTR       R2,R2               ANY BYTES LEFT?\n         BNPR      R12                 NO, RETURN\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEOUT2            NO, GO GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEOUT1            REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         BCTR      R2,0\n         EX        R2,TAPEOUTM\n         BR        R12\nTAPEOUT1 BCTR      R15,0\n         EX        R15,TAPEOUTM\n         SR        R2,R1\n         AR        R3,R1\nTAPEOUT2 PUT       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R15,TAPECNTR\n         LA        R15,1(R15)\n         STH       R15,TAPECNTR\n         STH       R15,0(R1)\n         B         TAPEOUT             TO CONTINUE\nTAPEOUTM MVC       0(0,R14),0(R3)\n TITLE '           RELOAD OPERATION'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  RELOAD  OPERATION                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR2   CSECT\n         USING     RELOAD,R11\nRELOAD   MVC       TAPE+(DCBDDNAM-IHADCB)(L'DCBDDNAM),FROMDD\n         MVC       PDS+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         XC        PNTR1,PNTR1\n         XC        PNTR2,PNTR2\n         XC        PDSBUF1,PDSBUF1\n         XC        PNTR4,PNTR4\n         XC        PNTR5,PNTR5\n         MVI       JFCB1,0\n         MVI       JFCB2,0\n         DEVTYPE   FROMDD,WORK1+8\n         CLI       WORK1+10,X'80'\n         BNE       *+8                 NOT TAPE\n         OI        SWB,SWB4\n         CLI       TYPE,8              LIST?\n         BNE       INIT2L              NO.\n         RDJFCB    TAPE\n         B         INIT2LA\nINIT2L   RDJFCB    (PDS,,TAPE)\n         CLI       JFCB1,0\n         BE        INIT2X\nINIT2LA  CLI       JFCB2,0\n         BE        INIT2Y\n         INFOJFCB  JFCB2,JFCB1,TYPE=2\n**\n**  INIT THE TAPE FILE\n**\n         OPEN      (TAPE,(INPUT)),TYPE=J\n         TM        TAPE+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2A\nINIT2Y   BAL       R12,PRINT1          PRINT ERROR MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'FROMDD,R1),FROMDD\n         SETRC     RC3\n         B         BEGIN\nINIT2A   XC        PNTR8A,PNTR8A       INIT & GET HEADER REC\n         XC        PNTR8B,PNTR8B\n         XC        TAPECNTR,TAPECNTR\n         LA        R2,UNLREC1L\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC1(UNLREC1L),WORKAREA\n         BE        INIT2A2             ID IS OK.\nINIT2A1  BAL       R12,PRINT1          NOT HEADER--PRINT MSG\n         MVC       5(L'MSG13,R1),MSG13\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\nINIT2A2  LA        R2,3                GET LLI OF SECOND REC\n         LA        R3,WORK1\n         TAPEIN    LOAD11,LOAD11\n         CLC       UNLREC2,WORK1       LLI OK (REL 21)?\n         BE        *+10                YES.\n         CLC       =X'00C800',WORK1    NO, TRY LLI FOR PRIOR REL 21\n         BNE       INIT2A1             NO\n         LH        R2,WORK1            'LL' TO READ IN OLD DSCB\n         LA        R3,WORKAREA\n         TAPEIN    LOAD11,LOAD11\n**\n**  INIT THE PDS FILE\n**\n         CLI       TYPE,8              LIST?\n         BE        INIT2D              YES, SKIP.\n         TM        SWA,SWA5            STOW ADD OR REPLACE?\n         BO        INIT2C              REPLACE\n         MVC       PDSDIR+(DCBDDNAM-IHADCB)(L'DCBDDNAM),TODD\n         OPEN      (PDSDIR,(INPUT)),TYPE=J\n         TM        PDSDIR+(DCBOFLGS-IHADCB),OFLG\n         BZ        INIT2X\n         GETMAIN   R,LV=260            CORE FOR BUFFER BLOCK\n         ST        R1,PNTR1\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,PNTR2\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,32\nINIT2BA  XC        DIRDECB,DIRDECB\n         L         R5,PNTR1\n         READ      DIRDECB,SF,PDSDIR,(R5),'S'\n         CHECK     DIRDECB\n         LH        R4,0(R5)\n         LA        R4,0(R5,R4)\n         LA        R5,2(R5)\nINIT2BB  BCT       R6,INIT2BC\n         GETMAIN   R,LV=260\n         XC        0(4,R1),0(R1)\n         ST        R1,0(R2)\n         LA        R3,4(R1)\n         LR        R2,R1\n         MVI       4(R1),X'FF'\n         LA        R6,31\nINIT2BC  MVC       0(8,R3),0(R5)\n         LA        R3,8(R3)\n         CLI       0(R5),X'FF'\n         BE        INIT2BZ\n         IC        R15,11(R5)\n         N         R15,=F'31'\n         SLL       R15,1\n         LA        R5,12(R5,R15)\n         CR        R5,R4\n         BL        INIT2BB\n         B         INIT2BA\nDIREOF   LTR       R6,R6\n         BNP       *+8\n         MVI       0(R3),X'FF'\nINIT2BZ  L         R1,PNTR1\n         FREEMAIN  R,LV=260,A=(1)\n         XC        PNTR1,PNTR1\n         CLOSE     (PDSDIR,LEAVE)\nINIT2C   MVC       SAVRECFM,DS1RECFM\n         MVC       SAVLRECL,DS1LRECL\n         MVC       SAVBLKSI,DS1BLKL\n         OPEN      (PDS,(OUTPUT)),TYPE=J   AND OPEN THE FILE\n         TM        PDS+(DCBOFLGS-IHADCB),OFLG  CHECK OPEN\n         BO        INIT2D              OPEN OK\nINIT2X   BAL       R12,PRINT1          OPEN ERROR--PRINT MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG08,R1),MSG08\n         MVC       (L'MSG08+5)(L'TODD,R1),TODD\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  LIST PDS CHARACTERISTICS\n**\nINIT2D   INFOPDS1  DS1RECFM,DS1LRECL,DS1BLKL,MSG24D,MSG24B\n         INFOPDS2\n         CLI       TYPE,8              LIST?\n         BE        INIT2FA             YES, SKIP.\n         INFOPDS1  PDS+(DCBRECFM-IHADCB),PDS+(DCBLRECL-IHADCB),        +\n               PDS+(DCBBLKSI-IHADCB),MSG24E,MSG24F\n         BAL       R12,PRINT1\n**\n**  PROCESS/CHECK THE PDS'S DCB PARAMETERS\n**\n         MVC       WORK1(1),SAVRECFM   CHECK RECFM\n         MVC       WORK1+1(1),PDS+(DCBRECFM-IHADCB)\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNE       INIT2E              NO--ERROR\n         TM        PDS+(DCBRECFM-IHADCB),RECV\n         BO        INIT2F              NOT RECFM=F/FB\n         TM        PDS+(DCBRECFM-IHADCB),RECF\n         BNO       INIT2F              NOT RECFM=F/FB\n         TM        SAVRECFM,RECFB\n         BO        INIT2D4             OLD RECFM=FB\n         TM        PDS+(DCBRECFM-IHADCB),RECFB\n         BO        INIT2D2             NEW RECFM=FB\nINIT2D1  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  BOTH RECFM=F\n         BNE       INIT2E              BLKSIZE ERROR\n         B         INIT2F\nINIT2D2  CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)  OLD=F, NEW=FB\n         BE        *+8\n         OI        SWB,SWB1            FLAG REBLOCKING.\n         CLC       SAVBLKSI,PDS+(DCBLRECL-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D4  TM        PDS+(DCBRECFM-IHADCB),RECFB   OLD RECFM=FB\n         BO        INIT2D5             NEW RECFM=FB (ALSO)\n         OI        SWB,SWB1            FLAG REBLOCKING, NEW RECFM=F\n         CLC       SAVLRECL,PDS+(DCBBLKSI-IHADCB)\n         BNE       INIT2E              RECLEN ERROR\n         B         INIT2F\nINIT2D5  CLC       SAVLRECL,PDS+(DCBLRECL-IHADCB)    BOTH RECFM=FB\n         BNE       INIT2E              RECLEN ERROR\n         CLC       SAVBLKSI,PDS+(DCBBLKSI-IHADCB)\n         BE        INIT2F\n         OI        SWB,SWB1            BLKSIZE UNEQUAL, REBLOCK\n         B         INIT2F\nINIT2E   BAL       R12,PRINT1          DCB PARM ERR--PRINT MSG\n         MVC       5(L'MSG16,R1),MSG16\n         SETRC     RC3\n         OI        SWA,SWA1\n         B         TERM2\n**\n**  INIT OPERATION PARAMETERS & ALLOCATE THE PDS BUFFER\n**\nINIT2F   TM        SWB,SWB1            REBLOCKING?\n         BZ        INIT2FA             NO.\n         BAL       R12,PRINT1          YES, ISSUE MSG.\n         MVC       5(L'MSG23,R1),MSG23\n         BAL       R12,PRINT1\nINIT2FA  GETMAIN   R,LV=260\n         ST        R1,PNTR4\n         CLI       TYPE,8              LIST?\n         BE        LOAD00              YES, SKIP\n         LH        R0,PDS+(DCBBLKSI-IHADCB)  GET LENGTH\n         TM        SWB,SWB1            REBLOCK?\n         BZ        *+8                 NO.\n         AH        R0,SAVBLKSI         YES, INCREASE BUFFER\n         STH       R0,PDSBUFL\n         GETMAIN   R,LV=(0)\n         ST        R1,PDSBUF1\n         LR        R5,R1\n         TM        SWB,SWB1            REBLOCK?\n         BZ        INIT2FB             NO.\n         MVC       PDSBUF2B+2(2),PDS+(DCBBLKSI-IHADCB)\n         AH        R1,SAVBLKSI\n         ST        R1,PDSBUF2A\n         MVC       PDSBUF2C,PDSBUF2A\n         XC        PDSBUF2D,PDSBUF2D\n         OI        SWB,SWB2\n**  COMPUTE MAX NOTELIST LENGTH\nINIT2FB  LA        R1,1024             FOR RECFM = U OR V\n         TM        PDS+(DCBRECFM-IHADCB),RECF  RECFM=F\n         BNO       *+18                NO\n         LH        R1,PDS+(DCBLRECL-IHADCB)\n         LTR       R1,R1\n         BP        *+8\n         LH        R1,PDS+(DCBBLKSI-IHADCB)\n         STH       R1,PNTR5L\n**\n**  LOAD THE PDS\n**\nLOAD00   LA        R2,3                GET THE LLI\n         LA        R3,LLI\n         TAPEIN    LOAD11,LOAD11\n         TM        LLI+2,@TTR          TTR PRESENT?\n         BZ        LOAD01              NO\n         LA        R2,3                YES, GET IT.\n         LA        R3,LLITTR\n         TAPEIN    LOAD11,LOAD11\nLOAD01   TM        LLI+2,@END          END OF INPUT?\n         BO        LOAD20X             YES.\n         TM        LLI+2,@DIR          DIRECTORY RECORD?\n         BO        LOAD20              YES\n         CLI       TYPE,8              LIST?\n         BE        LOAD60              YES, SKIP PROCESSING (FLUSH).\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD60              YES.\n         TM        LLI+2,@MEM          MEMBER'S DATA?\n         BO        LOAD30              YES\n         TM        LLI+2,@NL           NOTE LIST?\n         BO        LOAD40              YES\n         TM        LLI+2,@DUM\n         BO        LOAD50              FOR DUMMY RECORD\n         B         LOAD11              ERROR\n**  ERROR HANDLERS\nLOAD10   LA        R15,2\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG09,R1),MSG09\n         OI        SWA,SWA1\n         B         TERM2\nLOAD11   BAL       R12,PRINT1\n         MVC       5(L'MSG05,R1),MSG05\n         SETRC     RC2\n         B         LOAD10\n**\n**  PROCESS DIRECTORY ENTRY\n**\nLOAD20   LH        R2,LLI              READ IN THE RECORD\n         L         R3,PNTR4\n         LA        R3,148(R3)\n         LR        R7,R3\n         TAPEIN    LOAD11,LOAD11\nLOAD20X  CLI       TYPE,8              LIST?\n         BE        LOAD28              YES.\n         TM        SWA,SWA8            HAS ENTRY BEEN STOWED?\n         BZ        LOAD21              YES\n         TM        SWB,SWB2            REBLOCK?\n         BZ        LOAD20Y             NO.\n         L         R1,PDSBUF2D\n         LTR       R1,R1               ANY DATA TO OUTPUT?\n         BNP       LOAD20Y             NO.\n         L         R5,PDSBUF2A         YES, OUTPUT IT.\n         BAL       R12,PDSOUT\n         XC        PDSBUF2D,PDSBUF2D\n         MVC       PDSBUF2C,PDSBUF2A\nLOAD20Y  NI        SWB,255-SWB3\n         NI        SWA,255-SWA8\n         L         R2,PNTR4\n         LA        R2,74(R2)\n         STOW      PDS,(R2),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         BAL       R12,STOWMSG\nLOAD21   TM        LLI+2,@END          END?\n         BO        TERM2               YES.\n         TM        11(R7),ALIAS        IS THIS AN ALIAS?\n         BZ        LOAD25              NO\n         TM        SWB,SWB5            FLUSH?\n         BO        LOAD00              YES, SKIP ALIAS PROCESSING\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD21V             NO.\n         SEARCH    PNTR9,C' ',R7,LOAD21S,LOAD21T\nLOAD21S  TM        SWB,SWB8            FOUND\n         BO        LOAD00              EXCLUDE...IQNORE\n         B         LOAD21V             SELECT...PROCESS\nLOAD21T  TM        SWB,SWB8            NOT FOUND\n         BZ        LOAD00              SELECT...SKIP PROCESSING\nLOAD21V  TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD21X             REPLACE.\n         SEARCH    PNTR2,X'FF',R7,LOAD21W,LOAD21X\nLOAD21W  BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         MVC       L'MSG11+19(L'MSG15B,R1),MSG15B\n         B         LOAD00\nLOAD21X  L         R2,PNTR4            YES, PROCESS IT\n         MVC       8(3,R7),82(R2)      SET MAIN TTR FOR ALIAS\n         OI        SWA,SWA3            FLAG ALIAS PROCESSING\n         LH        R1,NLCNT\n         LTR       R1,R1\n         BZ        LOAD21B             NO USER TTR'S\n         LA        R2,12(R2)\n         LA        R3,12(R7)\nLOAD21A  MVC       0(3,R3),74(R2)      UPDATE USER TTR'S\n         LA        R2,4(R2)\n         LA        R3,4(R3)\n         BCT       R1,LOAD21A\nLOAD21B  STOW      PDS,(R7),R\n         LR        R4,R15              SAVE STOW'S RC\n         BAL       R12,PRINT1\n         MVC       11(L'MSG11,R1),MSG11\n         MVC       L'MSG11+11(8,R1),0(R7)\n         BAL       R12,STOWMSG\n         NI        SWA,255-SWA3        RESET ALIAS FLAG\n         B         LOAD00\n**\nLOAD25   L         R2,PNTR4            GET NEW DIR\n         MVC       0(74,R2),148(R2)\n         MVC       74(74,R2),148(R2)\n         OI        SWA,SWA8            TURN ON DIR SWITCH\n         NI        SWB,255-(SWB5+SWB6) TURN OFF FLUSH FLAGS\n         XR        R1,R1\n         IC        R1,11(R2)\n         SRL       R1,5\n         N         R1,=F'3'\n         STH       R1,NLCNT\n         NI        SWB,255-SWB2\n         TM        SWB,SWB1            REBLOCKING?\n         BZ        *+14\n         LTR       R1,R1               ANY TTRN?\n         BNZ       *+8                 YES, NO REBLOCK.\n         OI        SWB,SWB2            SET FOR REBLOCK\n         TM        SWB,SWB7            SELECT OR EXCLUDE?\n         BZ        LOAD27              NO.\n         SEARCH    PNTR9,C' ',R2,LOAD26A,LOAD26B\nLOAD26A  TM        SWB,SWB8            FOUND\n         BO        LOAD26C             EXCLUDE...FLUSH\n         B         LOAD27\nLOAD26B  TM        SWB,SWB8            NOT FOUND\n         BO        LOAD27              EXCLUDE..PROCESS\nLOAD26C  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         B         LOAD00\nLOAD27   TM        SWA,SWA5            ADD OR REPLACE?\n         BO        LOAD00              REPLACE...CONTINUE\n         SEARCH    PNTR2,X'FF',R2,LOAD27A,LOAD00\nLOAD27A  NI        SWA,255-SWA8        FLUSH\n         OI        SWB,SWB5\n         BAL       R12,PRINT1\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R2)\n         MVC       L'MSG07+19(L'MSG15,R1),MSG15\n         B         LOAD00\n**  'LIST' PROCESSOR\nLOAD28   TM        LLI+2,@END          END OF TAPE?\n         BO        TERM2               YES, DONE.\n         BAL       R12,PRINT1          PRINT LIST MESSAGE\n         MVC       11(L'MSG07,R1),MSG07\n         MVC       L'MSG07+11(8,R1),0(R7)\n         TM        11(R7),ALIAS\n         BZ        *+10\n         MVC       11(L'MSG11,R1),MSG11\n         B         LOAD00\n**\n**  PROCESS DATA RECORD\n**\nLOAD30M  MVC       0(0,R5),0(R2)\n**\nLOAD30   LH        R2,LLI              GET THE RECORD FROM TAPE\n         L         R3,PDSBUF1\n         TAPEIN    LOAD11,LOAD11\n         TM        SWB,SWB2            REBLOCK?\n         BO        LOAD35              YES\n         LH        R1,LLI              STD. OUTPUT TO THE PDS\n         L         R5,PDSBUF1\n         BAL       R12,PDSOUT\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\n         LH        R15,PNTR5NL\n         LTR       R15,R15\n         BZ        LOAD00\n         L         R14,PNTR5A\n         CLC       LLITTR,0(R14)\n         BNE       LOAD00\n         MVC       0(3,R14),TTR2\n         LA        R14,4(R14)\n         BCTR      R15,0\n         ST        R14,PNTR5A\n         STH       R15,PNTR5NL\n         B         LOAD00\nLOAD35   L         R2,PDSBUF1\n         LH        R3,LLI\n         L         R4,PDSBUF2D\n         L         R5,PDSBUF2C\nLOAD36   LH        R15,PDS+(DCBLRECL-IHADCB)\n         SR        R3,R15\n         AR        R4,R15\nLOAD36A  CH        R15,=H'256'\n         BNH       LOAD36B\n         MVC       0(256,R5),0(R2)\n         LA        R2,256(R2)\n         LA        R5,256(R5)\n         SH        R15,=H'256'\n         B         LOAD36A\nLOAD36B  BCTR      R15,0\n         EX        R15,LOAD30M\n         LA        R2,1(R2,R15)\n         LA        R5,1(R5,R15)\n         C         R4,PDSBUF2B\n         BL        LOAD37\n         LR        R1,R4\n         L         R5,PDSBUF2A\n         ST        R5,PDSBUF2C\n         XR        R4,R4\n         BAL       R12,PDSOUT\n         TM        SWB,SWB3            FIRST TIME THRU?\n         BO        LOAD37              NO, SKIP DIR UPDATE\n         OI        SWB,SWB3\n         MVC       TTR1,LLITTR\n         BAL       R12,UPDIR\nLOAD37   LTR       R3,R3\n         BP        LOAD36\n         ST        R4,PDSBUF2D\n         ST        R5,PDSBUF2C\n         B         LOAD00\n**\n**  PROCESS NOTELIST RECORD\n**\nLOAD40   L         R4,PNTR5\n         LTR       R4,R4\n         BNZ       LOAD41\n         LH        R0,PNTR5L\n         GETMAIN   R,LV=(0)\n         ST        R1,PNTR5\n         LR        R4,R1\nLOAD41   TM        SWA,SWA7            NOTELIST TO OUTPUT?\n         BZ        LOAD42              NO\n         NI        SWA,255-SWA7        YES\n         L         R5,PNTR5\n         LH        R1,PNTR5CNT\n         BAL       R12,PDSOUT\n         MVC       TTR1(3),TTR3\n         BAL       R12,UPDIR           UPDATE DIRECTORY ENTRY\nLOAD42   TM        LLI+2,@DUM          PROCESSING DUMMY INPUT?\n         BO        LOAD00              YES, DONE.\n         LH        R2,LLI              NO, GET NEXT NOTELIST\n         L         R3,PNTR5\n         TAPEIN    LOAD11,LOAD11\n         OI        SWA,SWA7\n         MVC       PNTR5CNT,LLI\n         MVC       PNTR5A,PNTR5\n         L         R14,PNTR4\n         LH        R15,NLCNT\n         LA        R14,12(R14)\n         XR        R1,R1\nLOAD43   CLC       LLITTR,0(R14)\n         BNE       *+16\n         IC        R1,3(R14)\n         STH       R1,PNTR5NL\n         B         LOAD44\n         LA        R14,4(R14)\n         BCT       R15,LOAD43\nLOAD44   MVC       TTR3(3),LLITTR\n         B         LOAD00\n**\n**  PROCESS DUMMY INPUT RECORD\n**\nLOAD50   LH        R2,LLI\n         LA        R3,WORK1\n         LTR       R2,R2\n         BNP       LOAD51\n         TAPEIN    LOAD11,LOAD11\nLOAD51   B         LOAD41              TO PROCESS ANY NOTELISTS\n**\n**  FLUSH INPUT FOR THIS ENTRY\n**\nLOAD60   OI        SWB,SWB6            TURN ON TAPEIN'S FLAG\n         LH        R2,LLI              LENGTH OF DATA TO SKIP\n         TAPEIN    LOAD11,LOAD11\n         NI        SWB,255-SWB6        TURN FLAG OFF\n         B         LOAD00\n**\n**  END OF OPERATION:  TERMINATE\n**\nTERM2    TM        TAPE+(DCBOFLGS-IHADCB),OFLG\n         BZ        TERM2X\n         TM        SWA,SWA6            LEAVE TAPE?\n         BZ        TERM2V              NO.\n         CLOSE     (TAPE,LEAVE)\n         B         TERM2W\nTERM2V   CLOSE     TAPE\nTERM2W   LA        R1,TAPE\n         BAL       R12,FREEPOOL\nTERM2X   CLOSE     PDS\n         L         R1,PDSBUF1          FREE THE PDS BUFFER\n         LTR       R1,R1\n         BZ        TERM2A              NO BUFFER ALLOCATED\n         LH        R0,PDSBUFL\n         FREEMAIN  R,LV=(0),A=(1)\n**  FREE CORE FOR ANY ALLOCATED AREAS\nTERM2A   L         R1,PNTR4\n         LTR       R1,R1\n         BZ        TERM2B\n         FREEMAIN  R,LV=260,A=(1)\nTERM2B   L         R1,PNTR5\n         LTR       R1,R1\n         BZ        TERM2C\n         LH        R0,PNTR5L\n         FREEMAIN  R,LV=(0),A=(1)\nTERM2C   L         R1,PNTR1\n         LTR       R1,R1\n         BNP       TERM2D\n         FREEMAIN  R,LV=260,A=(1)\nTERM2D   L         R2,PNTR2\n         XC        PNTR2,PNTR2\nTERM2D1  LTR       R1,R2\n         BZ        TERM2E\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2D1\nTERM2E   L         R2,PNTR9\n         XC        PNTR9,PNTR9\nTERM2E1  LTR       R1,R2\n         BZ        TERM2Z\n         L         R2,0(R2)\n         FREEMAIN  R,LV=260,A=(1)\n         B         TERM2E1\nTERM2Z   TM        SWA,SWA1            ABORT?\n         BO        BEGIN\n         LA        R15,2               PRINT TERM MSG\n         BAL       R12,PRINTA\n         MVI       0(R1),C'0'\n         MVC       5(L'MSG03,R1),MSG03\n         B         BEGIN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PDS OUTPUT PROCESSOR\nPDSOUT   STH       R1,PDS+(DCBBLKSI-IHADCB)\n         WRITE     DECBOUT,SF,PDS,(R5),'S'\n         CHECK     DECBOUT\n         NOTE      PDS\n         ST        R1,TTR2\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STOW MESSAGE HANDLERS\nSTOWMSG  B         *+4(R4)             PROCESS STOW RETURN CODE\n         B         STOWMSGA            RC=00\n         B         STOWMSGE            RC=04\n         B         STOWMSGC            RC=08\n         B         STOWMSGD            RC=12\n         B         STOWMSGE            RC=16\nSTOWMSGA MVC       26(L'MSG14,R1),MSG14\n         BR        R12\nSTOWMSGC MVC       26(L'MSG10,R1),MSG10\n         BR        R12\nSTOWMSGD MVC       26(L'MSG17,R1),MSG17\n         SETRC     RC3\n         B         LOAD10\nSTOWMSGE MVC       26(L'MSG18,R1),MSG18\n         SETRC     RC3\n         B         LOAD10\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  UPDATE DIRECTORY TTR'S\nUPDIR    L         R14,PNTR4\n         CLC       TTR1(3),8(R14)\n         BNE       UPDIRA\n         MVC       82(3,R14),TTR1\n         BR        R12\nUPDIRA   LH        R15,NLCNT\n         LTR       R15,R15\n         BZR       R12\n         LA        R14,12(R14)\nUPDIRB   CLC       TTR1(3),0(R14)\n         BNE       UPDIRC\n         MVC       74(3,R14),TTR2\nUPDIRC   LA        R14,4(R14)\n         BCT       R15,UPDIRB\n         BR        R12\n TITLE '           END OF TASK PROCESSING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  END OF TASK PROCESSING                                          **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSUR    CSECT\nENDTASK  CLOSE     SYSIN\n         LA        R1,SYSIN\n         BAL       R12,FREEPOOL\nENDTASK2 BAL       R12,PRINT1\n         BAL       R12,PRINT1\n         MVC       5(L'MSG02,R1),MSG02\n         CLOSE     SYSPRINT\n         LA        R1,SYSPRINT         FOR FREEPOOL\n         BAL       R12,FREEPOOL\n         STAE      0                   CANCEL THE STAE\n         LH        R15,RETCOD\n         L         R13,4(R13)          RESTORE OLD SAVE AREA\n         RETURN    (14,12),T,RC=(15)\n TITLE '           SYNCHRONOUS ERROR HANDLING'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SYNCHRONOUS  ERROR  HANDLING                                    **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYNERR1  SYNADAF   ACSMETH=BPAM\n         STM       R14,R12,SYNSAV\n         LR        R2,R1               SAVE PNTR TO MSG\n         BAL       R12,PRINT1          PRINT THE MSG\n         BAL       R12,PRINT1\n         MVC       5(L'MSG19,R1),MSG19\n         BAL       R12,PRINT1\n         MVC       15(78,R1),50(R2)\n         SETRC     RC2\n         LM        R14,R12,SYNSAV      RESTORE THE REGS\n         SYNADRLS\n         OI        SWA,SWA1            SET TERM FLAG\n         XR        R15,R15\n         IC        R15,TYPE\n         L         R15,ATERM(R15)      ADRS OF APPROPRIATE TERMINATOR\n         BR        R15\nATERM    DC        A(TERM1,TERM2)\n TITLE '           SUBROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  PROCESS PAGING AND SET UP FOR PRINTING\nPRINT1   LA        R15,1               SET TO ONE LINE\n         B         PRINTA\nPRINT2   LA        R15,256             FOR PAGE EJECT\n**\nPRINTA   AH        R15,PCNT\n         STH       R15,PCNT\n         CH        R15,PLIM\n         BNH       PRINTB\n         MVC       PCNT,=H'4'\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'1'\n         MVC       2(L'HEADING,R1),HEADING\n         MVC       110(4,R1),=C'PAGE'\n         LH        R15,PNUM            UPDATE AND FORMAT PAGE NO.\n         LA        R15,1(R15)\n         STH       R15,PNUM\n         CVD       R15,WORK1\n         OI        WORK1+7,X'0F'\n         UNPK      116(4,R1),WORK1(8)\n         PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         MVI       0(R1),C'0'          DOUBLE SPACE\nPRINTB   PUT       SYSPRINT\n         BAL       R14,CLEARBUF\n         BR        R12                 RETURN TO CALLER\n**  CLEAR PRINT BUFFER\nCLEARBUF MVI       0(R1),C' '\n         MVC       1(120,R1),0(R1)\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  TAPE INPUT PROCESSOR\n**       NORMAL RETURN   - OFFSET=4\n**       ERR/EOF RETURN  - OFFSET=0\nTAPEIN   LTR       R2,R2               ANY BYTES LEFT?\n         BNP       4(R12)              NO, RETURN.\n         LM        R14,R15,PNTR8A      LOAD BUFFER PARMS\n         LTR       R1,R15              ANY SPACE AVAILABLE?\n         BNP       TAPEIN2             NO, GET NEW REC\n         CR        R2,R15              COMPARE REQUEST TO AVAILABLE\n         BH        TAPEIN1             REQUEST GREATER\n         LA        R0,0(R2,R14)        PROCESS SMALL REQUEST\n         SR        R1,R2\n         STM       R0,R1,PNTR8A\n         TM        SWB,SWB6            FLUSH?\n         BO        4(R12)              YES, SKIP MOVING DATA.\n         BCTR      R2,0\n         EX        R2,TAPEINM\n         B         4(R12)\nTAPEIN1  TM        SWB,SWB6            FLUSH?\n         BO        *+12                YES, SKIP MOVING DATA\n         BCTR      R15,0\n         EX        R15,TAPEINM\n         AR        R3,R1\n         SR        R2,R1\nTAPEIN2  GET       TAPE\n         LA        R14,2(R1)\n         LA        R15,78\n         STM       R14,R15,PNTR8A\n         LH        R1,0(R1)\n         LH        R14,TAPECNTR\n         LA        R14,1(R14)\n         STH       R14,TAPECNTR\n         LH        R14,TAPECNTR\n         CR        R14,R1\n         BE        TAPEIN\n         BR        R12                 SEQUENCE ERROR.\nTAPEINM  MVC       0(0,R3),0(R14)\n**\nTAPEEOF  BR        R12                 EOF RETURN\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  FREE BUFFER POOL\nFREEPOOL FREEPOOL  (1)\n         BR        R12\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  SET RETURN CODE\nSETRET   CH        R15,RETCOD          LESS THAN OR EQUAL?\n         BNHR      R14                 YES, RETURN\n         STH       R15,RETCOD          NO, REPLACE\n         BR        R14\n SPACE 4\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  READ IN A CONTROL CARD\nGETCARD  GET       SYSIN\n         B         4(R12)\nEOFSYSIN OI        SWX,SWX1            FLAG EOF ON SYSIN\n         BR        R12\n TITLE '           DCB  EXIT  ROUTINES'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DCB EXIT ROUTINES                                               **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     IHADCB,R1\nEXIT1    LH        R4,DCBLRECL         CHECK BLKSIZE\n         CH        R4,DCBBLKSI\n         BNH       EXIT1B              BLKSIZE HIGHER THAN LRECL\n         CH        R4,=H'121'          IS THIS SYSPRINT?\n         BNE       EXIT1A              NO.\n         LA        R4,3509             YES, DEFAULT TO HALF TRK.\n         STH       R4,DCBBLKSI\n         BR        R14\nEXIT1A   STH       R4,DCBBLKSI         DEFAULT TO BLKSIZE=LRECL\n         NI        DCBRECFM,X'EF'      AND TURN OFF BLOCKED BIT\nEXIT1B   XR        R2,R2               CHECK FOR BLKSIZE MULT OF\n         LH        R3,DCBBLKSI         LRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL         AND FORCE IT TO BE\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT2    MVI       DCBBUFNO,0          PDS DCB EXIT\n         CLI       TYPE,4              RELOAD?\n         BE        EXIT2A              YES\n         MVC       SAVRECFM,DCBRECFM\n         MVC       SAVLRECL,DCBLRECL\n         MVC       SAVBLKSI,DCBBLKSI\n         TM        SWX,SWX2            PASS #2?\n         BOR       R14                 NO.\n         TM        DCBRECFM,RECF       RECFM=V?\n         BOR       R14                 NO, RETURN\n         MVI       DCBRECFM,RECF       YES, SET TO RECFM=F FOR PASS 1\n         BR        R14\nEXIT2A   CLI       DCBRECFM,0          NEW OUTPUT PDS\n         BNE       *+10\n         MVC       DCBRECFM,SAVRECFM\n         MVC       WORK1(1),SAVRECFM\n         MVC       WORK1+1(1),DCBRECFM\n         NC        WORK1(2),=X'C0C0'\n         CLC       WORK1(1),WORK1+1\n         BNER      R14                 DIFFERENT RECFMS...ABORT\nEXIT2B   TM        DCBRECFM,RECU\n         BNO       EXIT2C              NOT RECFM=U\n         NI        DCBRECFM,255-(RECFB-RECF)\nEXIT2BA  CLC       DCBLRECL,SAVLRECL\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2C   TM        DCBRECFM,RECF\n         BO        EXIT2D              FOR RECFM=F/FB\n         CLC       DCBLRECL,SAVLRECL   RECFM=V/VB\n         BH        *+10\n         MVC       DCBLRECL,SAVLRECL\n         CLC       DCBBLKSI,SAVBLKSI\n         BH        *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         BR        R14\nEXIT2D   CLC       DCBLRECL,=H'0'      RECFM=F/FB\n         BNE       *+10\n         MVC       DCBLRECL,SAVLRECL\n         TM        DCBRECFM,RECFB      BLOCKED?\n         BO        EXIT2E              YES\n         CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVLRECL\n         BR        R14\nEXIT2E   CLC       DCBBLKSI,=H'0'\n         BNE       *+10\n         MVC       DCBBLKSI,SAVBLKSI\n         XR        R2,R2               ROUND BLKSIZE TO LRECL\n         LH        R3,DCBBLKSI\n         LH        R4,DCBLRECL\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT3    LH        R4,DCBLRECL         TAPE DCB EXIT\n         CH        R4,DCBBLKSI\n         BNE       *+10\n         NI        DCBRECFM,X'EF'      RECFM=F\n         BR        R14\n         BL        *+14\n         LA        R4,800              DEFAULT BLKSIZE=800\n         STH       R4,DCBBLKSI\n         BR        R14\n         XR        R2,R2\n         LH        R3,DCBBLKSI\n         DR        R2,R4\n         MH        R3,DCBLRECL\n         STH       R3,DCBBLKSI\n         BR        R14\n**\nEXIT4    MVI       DCBBUFNO,0\n         BR        R14\n         DROP      R1\n TITLE '           STAE  EXIT  ROUTINE'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  STAE  EXIT  ROUTINE                                             **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n         USING     STAEXIT,R15\nSTAEXIT  CLOSE     SYSPRINT\n         BR        R14\n         DROP      R15\n TITLE '           DATA CONSTANTS, STORAGE AND LITERALS'\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**  DATA CONSTANTS, STORAGE AND LITERALS                            **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSAVEAREA DC        9D'0'               OS REG SAVE AREA\nWORK1    DC        4D'0'\nSYNSAV   DC        8D'0'\nFROMDD   DC        CL8' '\nTODD     DC        CL8' '\nALLOCM   DC        F'0'\nALLOCS   DC        F'0'\nLASTCARD DC        A(0)\nPDSBUF1  DC        A(0)                PNTR TO PDS BUFFER\nPDSBUF2A DC        A(0)                REBLOCKING BUFFER\nPDSBUF2B DC        A(0)\nPDSBUF2C DC        A(0)\nPDSBUF2D DC        A(0)\nTTR1     DC        F'0'\nTTR2     DC        F'0'\nTTR3     DC        F'0'\nSAVEPNTR DC        4F'0'               FOR SAVING PNTR VALUES\nPNTR1    DC        A(0)                PNTR TO HEAD OF DIRECTORY TABLE\nPNTR2    DC        A(0)                PNTR TO CURRENT DIR TBL PSTN\nPNTR3    DC        A(0)                PNTR TO CURRENT ENTRY IN BLOCK\nPNTR3A   DC        A(0)                \"BYTE COUNT\" FOR CURRENT BLK\nPNTR3B   DC        A(0)                \"BYTE COUNT\" FOR CURRENT ENTRY\nPNTR4    DC        A(0)                PNTR TO DIR ENTRIES FOR LOAD\nPNTR4A   DC        A(0)\nPNTR5    DC        A(0)                PNTR TO LOAD-NOTELIST WORKAREA\nPNTR5A   DC        A(0)\nPNTR8A   DC        A(0)                TAPE BUFFER POINTER\nPNTR8B   DC        A(0)                TAPE BFR AVAIL SPACE\nPNTR9    DC        A(0)                PNTR TO SELECT/EXCLUDE MEMBER\n*                                      NAME TABLE\n         DS        0F                  DCB EXIT LISTS\nEXLST1   DC        X'85',AL3(EXIT1)\nEXLST2   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT2)\nEXLST3   DC        X'07',AL3(JFCB2),X'85',AL3(EXIT3)\nEXLST4   DC        X'07',AL3(JFCB1),X'85',AL3(EXIT4)\nRETCOD   DC        H'0'\nPNUM     DC        H'0'\nPCNT     DC        H'0'\nPDSBUFL  DC        H'0'\nBLKLEN   DC        H'0'                LENGTH OF CURRENT BLK\nPLIM     DC        H'60'               MAX LINES PER PAGE\nPNTR5L   DC        H'0'                LENGTH OF NOTELIST WORKAREA\nPNTR5NL  DC        H'0'                LENGTH OF NOTELIST\nPNTR5CNT DC        H'0'                LENGTH OF NOTELIST RECORD\nNLCNT    DC        H'0'                COUNT OF NL TTRS IN DIR\nTAPECNTR DC        H'0'\nUSEDBLKS DC        H'0'\nMONTHS1  DC        H'31,28,31,30,31,30,31,31,30,31,30,31'\nMONTHS2  DC        H'31,29,31,30,31,30,31,31,30,31,30,31'\nMONTHS3  DC        C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\nLLI      DC        X'000000'           FOR UNLOADED RECORDS\nLLITTR   DC        X'000000'\nSAVLRECL DC        H'0'\nSAVBLKSI DC        H'0'\nSAVRECFM DC        X'00'\nUNLREC1  DC        FL2'75',X'0E'       IBM'S ID RECORD\n         DC        C'THIS IS AN UNLOADED DATA SET PRODUCED BY'\n         DC        X'80',C'THE IBM UTILITY, SYSMOVE.OMMBRLDWB'\nUNLREC1L EQU       *-UNLREC1\nLASTREC  DC        AL1(0,0,@END),C'THIS UNLOADED PDS WAS CREATED BY THE+\n                GENE CZARCINSKI/GSFC UTILITY PROGRAM PDSUR.'\nLASTRECL EQU       *-LASTREC\nTYPE     DC        X'00'\nSWITCHES DS        0XL2\nSWA      DC        X'00'\nSWB      DC        X'00'\nSWX      DC        X'00'\n         LTORG\n TITLE '            MESSAGES'\nHEADING  DC        C'PDSUR -- 1.2/03JUL73                      PARTITIO+\n               NED DATA SET UNLOAD/RELOAD UTILITY PROGRAM'\nMSG01    DC        C'CONTROL CARD ERROR. CARD IGNORED.'\nMSG02    DC        C'END OF TASK.'\nMSG03    DC        C'END OF OPERATION.'\nMSG04    DC        C'REQUIRED CONTROL CARD OPERAND MISSING.'\nMSG05    DC        C'INVALID DUMP DATA SET FORMAT. OPERATION ABORTED.'\nMSG06    DC        C' HAS BEEN UNLOADED.'\nMSG07    DC        C'MEMBER '\nMSG08    DC        C'OPEN ERROR FOR DDNAME='\nMSG09    DC        C'OPERATION TERMINATED.'\nMSG10    DC        C' HAS BEEN RELOADED.'\nMSG11    DC        C'ALIAS  '\nMSG12    DC        C'OPERATION ABORTED.'\nMSG13    DC        C'INVALID DUMP DATA SET IDENTIFICATION.  OPERATION A+\n               BORTED.'\nMSG14    DC        C' HAS BEEN RELOADED AND REPLACED IN LIBRARY.'\nMSG15    DC        C' ALREADY EXISTS.  MEMBER NOT ADDED.'\nMSG15A   DC        C'FOR ABOVE MEMBER NOT ADDED.'\nMSG15B   DC        C'ALREADY EXITS. NOT ADDED.'\nMSG16    DC        C'INVALID DCB/DATA SET PARMS FOR PDS FILE.'\nMSG17    DC        C' NOT ADDED.  DIRECTORY ERROR. NO SPACE LEFT.'\nMSG18    DC        C' NOT ADDED.  PERMANENT I/O ERROR DETECTED ATTEMPTI+\n               NG TO UPDATE DIRECTORY.'\nMSG19    DC        C'SYNCHRONOUS  I/O  ERROR  DETECTED  --'\nMSG20    DC        C'EXECUTION  ABORTED  *****************'\nMSG21    DC        C'ERROR DETECTED READING NOTELIST.  '\nMSG22A   DC        C'FROM -'\nMSG22B   DC        C'TO   -'\nMSG22C   DC        C'VOL='\nMSG22D   DC        C'DSN='\nMSG23    DC        C'NOTICE--REBLOCKING INVOKED (VALID FOR RECFM=F/FB O+\n               NLY).'\nMSG24A   DC        C'PDS CHARACTERISTICS -'\nMSG24B   DC        C'RECFM=        LRECL=       BLKSIZE=       DIR-BLKS+\n               -ALLOC=       '\nMSG24C   DC        C'MAIN ALLOC=     ,  SEC. ALLOC=       (DASD TRACKS)+\n               '\nMSG24D   DC        C'OLD PDS CHARACTERISTICS -'\nMSG24E   DC        C'NEW PDS CHARACTERISTICS -'\nMSG24F   DC        C'RECFM=        LRECL=       BLKSIZE=      '\nMSG25    DC        C' DATE/TIME =',X'4021204B4B4B20204021204B20204B2020+\n               '\nMSG25L   EQU       *-MSG25\n TITLE '            DCB''S'\nSYSIN    DCB       DSORG=PS,MACRF=(GL),DDNAME=SYSIN,EODAD=EOFSYSIN,    +\n               RECFM=FB,LRECL=80,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nSYSPRINT DCB       DSORG=PS,MACRF=(PL),DDNAME=SYSPRINT,                +\n               RECFM=FBA,LRECL=121,EXLST=EXLST1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nTAPE     DCB       DSORG=PS,MACRF=(GL,PL),DDNAME=TAPE,EODAD=TAPEEOF,   +\n               RECFM=FB,LRECL=80,EXLST=EXLST3\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDS      DCB       DSORG=PO,MACRF=(R,W),DDNAME=PDS,EODAD=PDSEOF,       +\n               BUFNO=0,NCP=1,EXLST=EXLST2,SYNAD=SYNERR1\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\nPDSDIR   DCB       DSORG=PO,MACRF=(R),DDNAME=PDS,EXLST=EXLST4,         +\n               BUFNO=0,NCP=1,RECFM=F,LRECL=256,BLKSIZE=256,            +\n               SYNAD=SYNERR1,EODAD=DIREOF\n TITLE '           JFCB''S, THE PDS DSCB, AND A WORKAREA'\nPDSDSCB  CAMLST    SEARCH,JFCB1+JFCBDSNM,JFCB1+JFCBVOLS,DSCB\n**\n         DS        0D\n**\nJFCB1    DC        XL176'00'           FOR PDS\n**\nJFCB2    DC        XL176'00'           FOR TAPE\n**\n         DS        0D\n         DC        X'00'               FOR ALIGNMENT\nUNLREC2  DC        X'00C500'           LLI FOR REC 2 (OS REL 21)\nWORKAREA EQU       *\nDSNAME   DC        CL44' '\nDSCB     DC        XL200'00',XL150'00'\n         ORG       WORKAREA+140\nUNLDDIR  DS        XL2                 DIRECTORY QUANTITY\nUNLDFLAG DS        XL1                 UNLOAD CONTROL FLAG\nUNLDSIZE DS        XL4                 PRIMARY ALLOC (IN BYTES)\nUNLDSSIZ DS        XL4                 SECONDARY ALLOC (IN BYTES)\nUNLDSPAR DS        XL42                UNUSED\nUNLDDEVT DS        XL4                 DEVICE TYPE INFO\n         ORG\nDS1RECFM EQU       DSCB+40\nDS1BLKL  EQU       DSCB+42\nDS1LRECL EQU       DSCB+44\nDS1SCALO EQU       DSCB+50\n TITLE '           DSECTS'\n         DCBD      DSORG=(QS,PO),DEVD=(DA,TA)\n**                                                                  **\n**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**==**\n**                                                                  **\n         END       PDSUR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSUR$": {"ttr": 28933, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x08\\x01\\x01\\x05\\x1f\\x01\\x16!?\\x151\\x00\\x1d\\x00\\x1f\\x00\\x00\\xd7\\xc4\\xe2\\xe4\\xd9@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-02-20T00:00:00", "modifydate": "2016-07-31T15:31:08", "lines": 29, "newlines": 31, "modlines": 0, "user": "PDSUR"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//*        DD DISP=SHR,DSN=SBGOLOB.B.ASM\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(PDSUR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB492949\n SETCODE AC(0)\n NAME    PDSUR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSUR$$": {"ttr": 28935, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x007\\x01\\x01\\x05\\x1f\\x01\\x19#\\x9f!\\x15\\x00\\x18\\x00\\x1f\\x00\\x00\\xe3\\xe3\\xe2\\xc4\\xe2@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-02-20T00:00:00", "modifydate": "2019-08-27T21:15:37", "lines": 24, "newlines": 31, "modlines": 0, "user": "TTSDS"}, "text": "//PDSUR$$  JOB (ACCT),\n//             '                    ',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             MSGLEVEL=(1,1),\n//             REGION=0M,\n//             NOTIFY=&SYSUID\n//ASMH    EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  DISP=SHR,DSN=TTSDS.FILE973.PDS(PDSUR)\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,2)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DSN=&&TEMP\n//LKED    EXEC PGM=HEWL,PARM='NCAL,MAP,LIST,LET'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(2048,(200,20))\n//SYSLMOD  DD  DISP=SHR,DSN=TTSDS.WATFIV.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB492949\n SETCODE AC(0)\n NAME    PDSUR(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSUR@": {"ttr": 28937, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x03\\x01\\x16\\x00O\\x01\\x16\\x03?\\x03 \\x009\\x00\\n\\x00\\x00\\xd7\\xc4\\xe2\\xe4\\xd9@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-01-04T00:00:00", "modifydate": "2016-02-02T03:20:03", "lines": 57, "newlines": 10, "modlines": 0, "user": "PDSUR"}, "text": "  The PDSUR program in member PDSUR is from the unloaded PDS in file 7\n  of the Goddard tape at cbttape.org under MVT Mods.\n  http://www.cbttape.org/histmods.htm\n\n  It has been modified to work on z/OS and MVS 3.8, with each\n  changed line marked with a comment \".FIX.\".\n\n  It can restore IEHMOVE-unloaded files from tapes, or from IEHMOVE\n  -unloaded files that have been copied from tape to disk.\n\n  It can also create IEHMOVE-unloaded files on disk or tape.\n\n  //* UNLOAD A MEMBER TO AN IEHMOVE FILE\n  //STEP1    EXEC PGM=PDSUR\n  //STEPLIB  DD DSN=CBTUSER.PDSUR.LOAD,DISP=SHR\n  //SYSPRINT DD SYSOUT=*\n  //IN       DD DSN=CBTUSER.IN.PDS,DISP=SHR\n  //OUT      DD DSN=CBTUSER.IEHMOVE.DATA,DISP=SHR\n  //SYSIN    DD *\n   UNLOAD FROMDD=IN,TODD=OUT,SELECT\n   MEMBER MEMBER1,MEMBER2\n  /*\n\n  //* UNLOAD A PDS TO AN IEHMOVE FILE\n  //STEP1    EXEC PGM=PDSUR\n  //STEPLIB  DD DSN=CBTUSER.PDSUR.LOAD,DISP=SHR\n  //SYSPRINT DD SYSOUT=*\n  //IN       DD DSN=CBTUSER.IN.PDS,DISP=SHR\n  //OUT      DD DSN=CBTUSER.IEHMOVE.DATA,DISP=SHR\n  //SYSIN    DD *\n   UNLOAD FROMDD=IN,TODD=OUT\n  /*\n\n  //* LIST MEMBER NAMES IN AN IEHMOVE FILE\n  //STEP1    EXEC PGM=PDSUR\n  //STEPLIB  DD DSN=CBTUSER.PDSUR.LOAD,DISP=SHR\n  //SYSPRINT DD SYSOUT=*\n  //IN       DD DSN=CBTUSER.IEHMOVE.DATA,DISP=SHR\n  //SYSIN    DD *\n   LIST FROMDD=IN\n  /*\n\n  //* RELOAD AN IEHMOVE FILE TO A PDS\n  //STEP1    EXEC PGM=PDSUR\n  //STEPLIB  DD DSN=CBTUSER.PDSUR.LOAD,DISP=SHR\n  //SYSPRINT DD SYSOUT=*\n  //IN       DD DSN=CBTUSER.IEHMOVE.DATA,DISP=SHR\n  //OUT      DD DSN=CBTUSER.NEW.PDS,DISP=SHR\n  //SYSIN    DD *\n   RELOAD FROMDD=IN,TODD=OUT\n  /*\n\n  Existing members will not be replaced unless REPLACE\n  or R is specifed\n\n   RELOAD FROMDD=IN,TODD=OUT,REPLACE\n   RELOAD FROMDD=IN,TODD=OUT,R\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSURP1": {"ttr": 28939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x06\\x01\\x16!?\\x01\\x18\\x03\\x9f\\x14$\\x00(\\x00\\t\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-07-31T00:00:00", "modifydate": "2018-02-08T14:24:06", "lines": 40, "newlines": 9, "modlines": 0, "user": "LOADJCL"}, "text": "//SBGOLOBL  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* ------------------------------------------------- *//\n//* RELOAD THE WATFIV AWS TAPE FILES TO DISK DATASETS *//\n//* ------------------------------------------------- *//\n//GETMOVE  PROC TAPPFX=WATFIV,DATSET=XXXX,NUM=1,DSKPFX=IBMUSER\n//STEPM    EXEC PGM=PDSUR\n//STEPLIB  DD DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//IN       DD DISP=SHR,DSN=&TAPPFX..&DATSET,UNIT=562,\n//         VOL=(,RETAIN,SER=PFG001),LABEL=(&NUM,SL,EXPDT=98000)\n//OUT      DD DSN=&DSKPFX..&TAPPFX..&DATSET,DISP=(NEW,CATLG,DELETE),\n//         SPACE=(TRK,(45,135,44),RLSE),VOL=SER=WORKE2,UNIT=SYSALLDA\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.CNTL(PDSURCTL)\n//         PEND\n//*\n//GENERIT  PROC TAPPFX=WATFIV,DATSET=XXXX,NUM=1,DSKPFX=IBMUSER\n//STEPG    EXEC PGM=IEBGENER\n//SYSUT1   DD DISP=SHR,DSN=&TAPPFX..&DATSET,UNIT=562,\n//         VOL=(,RETAIN,SER=PFG001),LABEL=(&NUM,SL,EXPDT=98000)\n//SYSUT2   DD DSN=&DSKPFX..&TAPPFX..&DATSET,DISP=(NEW,CATLG,DELETE),\n//            SPACE=(TRK,(45,135),RLSE),VOL=SER=WORKE2,UNIT=SYSALLDA\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//         PEND\n//FILE01   EXEC GETMOVE,NUM=01,DATSET=PROCLIB\n//FILE02   EXEC GETMOVE,NUM=02,DATSET=JOBLIB\n//FILE03   EXEC GETMOVE,NUM=03,DATSET=FUNLIB\n//FILE04   EXEC GENERIT,NUM=04,DATSET=TESTS\n//FILE05   EXEC GETMOVE,NUM=05,DATSET=WATLIB\n//FILE06   EXEC GENERIT,NUM=06,DATSET=MESSAGE\n//FILE07   EXEC GETMOVE,NUM=07,DATSET=SOURCE\n//FILE08   EXEC GETMOVE,NUM=08,DATSET=MACLIB\n//FILE09   EXEC GETMOVE,NUM=09,DATSET=OBJLIB\n//FILE10   EXEC GENERIT,NUM=10,DATSET='USER.GUIDE'\n//FILE11   EXEC GENERIT,NUM=11,DATSET=ERRTEXTS\n//FILE12   EXEC GETMOVE,NUM=12,DATSET=PLOTLIB\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PLOTLIB": {"ttr": 28941, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x00\\x80\\x00\\x1f\\x01\\x18\\x03\\x9f\\x13P\\x01\\xbd\\x01\\xbd\\x00\\x00\\xe6\\xc1\\xe3\\xc6\\xc9\\xe5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2018-02-08T13:50:26", "lines": 445, "newlines": 445, "modlines": 0, "user": "WATFIV"}, "text": "./ ADD NAME=HDCPY    0100-80001-80001-1200-00003-00003-00000-PLOTLIB 00\n      SUBROUTINE HDCPY(A)\n      RETURN\n      END\n./ ADD NAME=NEWPAG   0100-80001-80001-1200-00003-00003-00000-PLOTLIB 00\n      SUBROUTINE NEWPAG\n      RETURN\n      END\n./ ADD NAME=NUMBER   0100-80001-80001-1200-00001-00001-00000-PLOTLIB 00\n                                                                           7.1\n./ ADD NAME=PLAXIS   0100-80001-80001-1200-00074-00074-00000-PLOTLIB 00\n      SUBROUTINE AXIS(XPAGE,YPAGE,IBCD,NCHAR,AXLEN,ANGLE,FIRSTV,DELTAV)\nC  AXIS     COPYRIGHT 1967 CALIFORNIA COMPUTER PRODUCTS         V097\nC.....     XPAGE,YPAGE  COORDINATES OF STARTING POINT OF AXIS, IN INCHES\nC.....     IBCD         AXIS TITLE.\nC.....     NCHAR        NUMBER OF CHARACTERS IN TITLE. + FOR C.C-W SIDE.\nC.....     AXLEN        FLOATING POINT AXIS LENGTH IN INCHES.\nC.....     ANGLE        ANGLE OF AXIS FROM THE X-DIRECTION, IN DEGREES.\nC.....     FIRSTV       SCALE VALUE AT THE FIRST TIC MARK.\nC.....     DELTAV       CHANGE IN SCALE BETWEEN TIC MARKS ONE INCH APART\n      DIMENSION IBCD(2)\n      KN=NCHAR\n      A=1.0\n      IF (KN) 1,2,2\n  1   A=-A\n      KN=-KN\n  2   EX=0.0\n      ADX= ABS  (DELTAV)\n      IF (ADX) 3,7,3\n  3   IF (ADX-100.0) 6,4,4\n  4   ADX=ADX/10.0\n      EX=EX+1.0\n      GO TO 3\n  5   ADX=ADX*10.0\n      EX=EX-1.0\n  6   IF (ADX-0.01) 5,7,7\n  7   XVAL=FIRSTV*10.0**(-EX)\n      ADX= DELTAV*10.0**(-EX)\n      STH=ANGLE*0.0174533\n      CTH=COS(STH)\n      STH=SIN(STH)\n      DXB=-0.1\n      DYB=0.15*A-0.05\n      XN=XPAGE+DXB*CTH-DYB*STH\n      YN=YPAGE+DYB*CTH+DXB*STH\n      NTIC=AXLEN+1.0\n      NT=NTIC/2\n      DO  20  I=1,NTIC\n        CALL NUMBER(XN,YN,0.1,XVAL,ANGLE,2)\n        XVAL=XVAL+ADX\n        XN=XN+CTH\n        YN=YN+STH\n        IF (NT) 20,11,20\n 11       Z=KN\n          IF (EX)  12,13,12\n 12       Z=Z+7.0\n 13       DXB=-.07*Z+AXLEN*0.5\n          DYB=0.325*A-0.075\n          XT=XPAGE+DXB*CTH-DYB*STH\n          YT=YPAGE+DYB*CTH+DXB*STH\n          CALL SYMBOL(XT,YT,0.14,IBCD(1),ANGLE,KN)\n          IF (EX)  14,20,14\n 14         Z=KN+2\n            XT=XT+Z*CTH*0.14\n            YT=YT+Z*STH*0.14\n            CALL SYMBOL(XT,YT,0.14,1550938112,ANGLE,3)\n            XT=XT+(3.0*CTH-0.8*STH)*0.14\n            YT=YT+(3.0*STH+0.8*CTH)*0.14\n            CALL NUMBER(XT,YT,0.07,EX,ANGLE,-1)\n 20   NT=NT-1\n      CALL PLOT(XPAGE+AXLEN*CTH,YPAGE+AXLEN*STH,3)\n      DXB=-0.07*A*STH\n      DYB=+0.07*A*CTH\n      A=NTIC-1\n      XN=XPAGE+A*CTH\n      YN=YPAGE+A*STH\n      DO  30  I=1,NTIC\n        CALL PLOT(XN,YN,2)\n        CALL PLOT(XN+DXB,YN+DYB,2)\n        CALL PLOT(XN,YN,2)\n        XN=XN-CTH\n        YN=YN-STH\n 30   CONTINUE\n      RETURN\n      END\n./ ADD NAME=PLLINE   0100-80001-80001-1200-00058-00058-00000-PLOTLIB 00\n      SUBROUTINE LINE (XARRAY,YARRAY,NPTS,INC,LINTYP,INTEQ)\nC  LINE     COPYRIGHT 1967 CALIFORNIA COMPUTER PRODUCTS         V097\nC.....     XARRAY  NAME OF ARRAY CONTAINING ABSCISSA OR X VALUES.\nC.....     YARRAY  NAME OF ARRAY CONTAINING ORDINATE OF Y VALUES.\nC.....     NPTS    NUMBER OF POINTS TO BE PLOTTED.\nC.....     INC     INCREMENT OF LOCATION OF SUCCESSIVE POINTS.\nC.....     LINTYP  CONTROL TYPE OF LINE--SYMBOLS, LINE, OR COMBINATION.\nC.....     INTEQ   INTEGER EQUIVALENT OF SYMBOL TO BE USED, IF ANY.\n      DIMENSION XARRAY(1),YARRAY(1)\n      LMIN = NPTS*INC+1\n      LDX  = LMIN+INC\n      NL   = LMIN-INC\n      FIRSTX = XARRAY(LMIN)\n      DELTAX = XARRAY(LDX)\n      FIRSTY = YARRAY(LMIN)\n      DELTAY = YARRAY(LDX)\n      CALL WHERE (XN,YN,DF)\n      XN = XN*DELTAX+FIRSTX\n      YN = YN*DELTAY+FIRSTY\n      DF = AMAX1(ABS(XARRAY( 1)-XN),ABS(YARRAY( 1)-YN))\n      DL = AMAX1(ABS(XARRAY(NL)-XN),ABS(YARRAY(NL)-YN))\n      IPEN = 3\n      ICODE = -1\n      NT =IABS(LINTYP)\n      IF (LINTYP) 7,6,7\n    6 NT = 1\n    7 IF (DF-DL) 9,9,8\n    8 NF = NL\n      NA = ((NPTS-1)/NT)*NT+NT-(NPTS-1)\n      KK = -INC\n      GO TO 10\n    9 NF = 1\n      NA = NT\n      KK = INC\n   10 IF (LINTYP) 11,12,13\n   11 IPENA = 3\n      ICODEA = -1\n      LSW = 1\n      GO TO 15\n   12 NA=LDX\n   13 IPENA = 2\n      ICODEA = -2\n      LSW=0\n   15 DO 30 I =1,NPTS\n      XN = (XARRAY(NF)-FIRSTX)/DELTAX\n      YN = (YARRAY(NF)-FIRSTY)/DELTAY\n      IF (NA-NT) 20,21,22\n   20 IF (LSW) 23,22,23\n   21 CALL SYMBOL (XN,YN,0.08,INTEQ,0.0,ICODE)\n      NA = 1\n      GO TO 25\n   22 CALL PLOT (XN,YN,IPEN)\n   23 NA = NA + 1\n   25 NF = NF+KK\n      ICODE = ICODEA\n   30 IPEN = IPENA\n      RETURN\n      END\n./ ADD NAME=PLOT     0100-80001-80001-1200-00116-00116-00000-PLOTLIB 00\n      SUBROUTINE PLPLOT(X,Y,IPEN)\n      INTEGER*2 CHAR(3)/' ','.','*'/\n      INTEGER*2 GRID(350,132)\n      COMMON/PLOTB/GRID,XVIRT,YVIRT,XPOS,YPOS,XSCALE,YSCALE,XMAX,YMAX,\n     1ITAG,IERRO,LINES,MLINES\n      IF(ITAG.EQ.0) GO TO 10\n   13 XNEW=X+XVIRT\n      YNEW=Y+YVIRT\n      IF(XNEW.GT.XMAX.OR.XNEW.LT.0.) GO TO 70\n      IF(YNEW.GT.YMAX.OR.YNEW.LT.0.) GO TO 70\n      LTEST=XNEW/XSCALE+1\n      IF(LTEST.GE.LINES) LINES=LTEST\nC\nC     PROCESS THE ALTERNATIVES\n      IF(IPEN.EQ.-4) GO TO 20\n      IF(IPEN.EQ.-3) GO TO 30\n      IF(IPEN.EQ. 3) GO TO 40\n      IF(IPEN.EQ.-2) GO TO 50\n      IF(IPEN.EQ. 2) GO TO 60\n      WRITE(6,300)\n      IERRO=IERRO+1\n      IF(IERRO.GT.20) GO TO 80\n      RETURN\nC\nC     ITAG =0 WILL INITIALIZE ALL VALUES, EXECUTE ONLY ON 1ST CALL\n   10 XVIRT=0.\n      YVIRT=0.\n      ITAG=1\n      LINES=1\n      XPOS=0.\n      YPOS=0.\n      DO 11 I=1,MLINES\n      DO 11 J=1,132\n   11 GRID(I,J)=CHAR(1)\n      XSCALE=8.68E0/5.2E1\n      YSCALE=1E-1\n      XMAX=(MLINES-1)*XSCALE\n      YMAX=131E0*YSCALE\n      WRITE(6,500) XMAX,YMAX\n      GO TO 13\nC\nC     CALL OF -4, TO DRAW THE PLOT AND REINITIALIZE\n   20 LINES=LINES+1\n      XANEW=FLOAT(LINES-2)*XSCALE\n      WRITE(6,700) XANEW,LINES\n      WRITE(6,100)\n      DO 12 I=1,LINES\n   12 WRITE(6,200)(GRID(I,J),J=1,132)\n      WRITE(6,100)\n      ITAG=0\n      RETURN\nC\nC     CALL OF -3 TO SET A NEW PLOT VIRTUAL ORIGIN\n   30 XVIRT=XNEW\n      YVIRT=YNEW\n      XPOS=XNEW\n      YPOS=YNEW\n      RETURN\nC\nC     CALL OF 3 TO GO TO THE NEW POINT, WITHOUT DRAWING LINE\n   40 XPOS=XNEW\n      YPOS=YNEW\n      RETURN\nC\nC     CALL OF -2, DARK VECTOR TO A NEW ORIGIN\n   50 XVIRT=XNEW\n      YVIRT=YNEW\nC\nC     CALL OF 2, DRAW THE DARK VECTOR\n   60 XANEW=XNEW/XSCALE\n      YANEW=YNEW/YSCALE\n      XAPOS=XPOS/XSCALE\n      YAPOS=YPOS/YSCALE\n      XAINCR=XANEW-XAPOS\n      YAINCR=YANEW-YAPOS\n      DIVID=AMAX1(ABS(XAINCR),ABS(YAINCR))\n      IF(DIVID.LT.0.3) RETURN\n      XAINCR=XAINCR/DIVID\n      YAINCR=YAINCR/DIVID\n      IXMEM=XAPOS\n      IYMEM=YAPOS\n      DO 61 I=1,3000\n          IXAPOS=XAPOS+1\n          IYAPOS=YAPOS+1\n          IF(GRID(IXAPOS,IYAPOS).NE.CHAR(1)) GOTO 63\n   64 GRID(IXAPOS,IYAPOS)=CHAR(2)\n          IXMEM=IXAPOS\n          IYMEM=IYAPOS\n          GO TO 65\n   63     IF(IXMEM.EQ.IXAPOS.AND.IYMEM.EQ.IYAPOS) GO TO 64\n          GRID(IXAPOS,IYAPOS)=CHAR(3)\n   65     IF(ABS(XANEW-XAPOS).LE.1E0.AND.ABS(YANEW-YAPOS).LE.1E0)GOTO62\n          XAPOS=XAPOS+XAINCR\n   61     YAPOS=YAPOS+YAINCR\n   62 XPOS=XNEW\n      YPOS=YNEW\n      RETURN\nC\nC     DONE. PRINT ERRORS AND FORMATS\n   70 WRITE(6,400)X,Y,XNEW,YNEW,IPEN\n      IERRO=IERRO+1\n      IF(IERRO.GT.20) GO TO 80\n      RETURN\n   80 WRITE(6,600)\n      STOP\nC\n  100 FORMAT('1')\n  200 FORMAT(1X,132A1)\n  300 FORMAT(' ***ERROR*** IMPROPER IPEN OPTION')\n  400 FORMAT(' ***ERROR*** PLOT VALUE OUT OF RANGE. X = ',F7.3,' Y = ',\n     1F7.3,' ACTUAL X = ',F7.3,' ACTUAL Y = ',F7.3,' PEN POSITION =',I3)\n  500 FORMAT(1X,'MAXIMUM X = ',F7.3,' INCHES. MAXIMUM Y = ',F7.3,\n     1' INCHES.')\n  600 FORMAT(' ***ERROR*** EXECUTION TERMINATING. TOO MANY ERRORS.')\n  700 FORMAT(' LARGEST X CALLED =',F8.3,' USING',I6,' LINES OF OUTPUT')\n      END\n./ ADD NAME=PLPLOT   0100-80001-80001-1200-00116-00116-00000-PLOTLIB 00\n      SUBROUTINE PLPLOT(X,Y,IPEN)\n      INTEGER*2 CHAR(3)/' ','.','*'/\n      INTEGER*2 GRID(350,132)\n      COMMON/PLOTB/GRID,XVIRT,YVIRT,XPOS,YPOS,XSCALE,YSCALE,XMAX,YMAX,\n     1ITAG,IERRO,LINES,MLINES\n      IF(ITAG.EQ.0) GO TO 10\n   13 XNEW=X+XVIRT\n      YNEW=Y+YVIRT\n      IF(XNEW.GT.XMAX.OR.XNEW.LT.0.) GO TO 70\n      IF(YNEW.GT.YMAX.OR.YNEW.LT.0.) GO TO 70\n      LTEST=XNEW/XSCALE+1\n      IF(LTEST.GE.LINES) LINES=LTEST\nC\nC     PROCESS THE ALTERNATIVES\n      IF(IPEN.EQ.-4) GO TO 20\n      IF(IPEN.EQ.-3) GO TO 30\n      IF(IPEN.EQ. 3) GO TO 40\n      IF(IPEN.EQ.-2) GO TO 50\n      IF(IPEN.EQ. 2) GO TO 60\n      WRITE(6,300)\n      IERRO=IERRO+1\n      IF(IERRO.GT.20) GO TO 80\n      RETURN\nC\nC     ITAG =0 WILL INITIALIZE ALL VALUES, EXECUTE ONLY ON 1ST CALL\n   10 XVIRT=0.\n      YVIRT=0.\n      ITAG=1\n      LINES=1\n      XPOS=0.\n      YPOS=0.\n      DO 11 I=1,MLINES\n      DO 11 J=1,132\n   11 GRID(I,J)=CHAR(1)\n      XSCALE=8.68E0/5.2E1\n      YSCALE=1E-1\n      XMAX=(MLINES-1)*XSCALE\n      YMAX=131E0*YSCALE\n      WRITE(6,500) XMAX,YMAX\n      GO TO 13\nC\nC     CALL OF -4, TO DRAW THE PLOT AND REINITIALIZE\n   20 LINES=LINES+1\n      XANEW=FLOAT(LINES-2)*XSCALE\n      WRITE(6,700) XANEW,LINES\n      WRITE(6,100)\n      DO 12 I=1,LINES\n   12 WRITE(6,200)(GRID(I,J),J=1,132)\n      WRITE(6,100)\n      ITAG=0\n      RETURN\nC\nC     CALL OF -3 TO SET A NEW PLOT VIRTUAL ORIGIN\n   30 XVIRT=XNEW\n      YVIRT=YNEW\n      XPOS=XNEW\n      YPOS=YNEW\n      RETURN\nC\nC     CALL OF 3 TO GO TO THE NEW POINT, WITHOUT DRAWING LINE\n   40 XPOS=XNEW\n      YPOS=YNEW\n      RETURN\nC\nC     CALL OF -2, DARK VECTOR TO A NEW ORIGIN\n   50 XVIRT=XNEW\n      YVIRT=YNEW\nC\nC     CALL OF 2, DRAW THE DARK VECTOR\n   60 XANEW=XNEW/XSCALE\n      YANEW=YNEW/YSCALE\n      XAPOS=XPOS/XSCALE\n      YAPOS=YPOS/YSCALE\n      XAINCR=XANEW-XAPOS\n      YAINCR=YANEW-YAPOS\n      DIVID=AMAX1(ABS(XAINCR),ABS(YAINCR))\n      IF(DIVID.LT.0.3) RETURN\n      XAINCR=XAINCR/DIVID\n      YAINCR=YAINCR/DIVID\n      IXMEM=XAPOS\n      IYMEM=YAPOS\n      DO 61 I=1,3000\n          IXAPOS=XAPOS+1\n          IYAPOS=YAPOS+1\n          IF(GRID(IXAPOS,IYAPOS).NE.CHAR(1)) GOTO 63\n   64 GRID(IXAPOS,IYAPOS)=CHAR(2)\n          IXMEM=IXAPOS\n          IYMEM=IYAPOS\n          GO TO 65\n   63     IF(IXMEM.EQ.IXAPOS.AND.IYMEM.EQ.IYAPOS) GO TO 64\n          GRID(IXAPOS,IYAPOS)=CHAR(3)\n   65     IF(ABS(XANEW-XAPOS).LE.1E0.AND.ABS(YANEW-YAPOS).LE.1E0)GOTO62\n          XAPOS=XAPOS+XAINCR\n   61     YAPOS=YAPOS+YAINCR\n   62 XPOS=XNEW\n      YPOS=YNEW\n      RETURN\nC\nC     DONE. PRINT ERRORS AND FORMATS\n   70 WRITE(6,400)X,Y,XNEW,YNEW,IPEN\n      IERRO=IERRO+1\n      IF(IERRO.GT.20) GO TO 80\n      RETURN\n   80 WRITE(6,600)\n      STOP\nC\n  100 FORMAT('1')\n  200 FORMAT(1X,132A1)\n  300 FORMAT(' ***ERROR*** IMPROPER IPEN OPTION')\n  400 FORMAT(' ***ERROR*** PLOT VALUE OUT OF RANGE. X = ',F7.3,' Y = ',\n     1F7.3,' ACTUAL X = ',F7.3,' ACTUAL Y = ',F7.3,' PEN POSITION =',I3)\n  500 FORMAT(1X,'MAXIMUM X = ',F7.3,' INCHES. MAXIMUM Y = ',F7.3,\n     1' INCHES.')\n  600 FORMAT(' ***ERROR*** EXECUTION TERMINATING. TOO MANY ERRORS.')\n  700 FORMAT(' LARGEST X CALLED =',F8.3,' USING',I6,' LINES OF OUTPUT')\n      END\n./ ADD NAME=PLSCALE  0100-80001-80001-1200-00060-00060-00000-PLOTLIB 00\n      SUBROUTINE  SCALE   (ARRAY,AXLEN,NPTS,INC)\nC  SCALE    COPYRIGHT 1967 CALIFORNIA COMPUTER PRODUCTS         V097\nC.....     ARRAY   NAME OF ARRAY CONTAINING VALUES TO BE SCALED.\nC.....     AXLEN   LENGTH IN INCHES OVER WHICH ARRAY IS TO BE SCALED.\nC.....     NPTS    NUMBER OF POINTS TO BE SCALED.\nC.....     INC     INCREMENT OF LOCATION OF SUCCESSIVE POINTS.\n      DIMENSION  ARRAY(1),SAVE(7)\n      SAVE(1)=1.0\n      SAVE(2)=2.0\n      SAVE(3)=4.0\n      SAVE(4)=5.0\n      SAVE(5)=8.0\n      SAVE(6)=10.0\n      SAVE(7)=20.\n      FAD=0.01\n      K=IABS(INC)\n      N=NPTS*K\n      Y0=ARRAY(1)\n      YN=Y0\n      DO  25  I=1,N,K\n      YS=ARRAY(I)\n      IF  (Y0-YS)  22,22,21\n21    Y0=YS\n      GO  TO  25\n22    IF  (YS-YN)  25,25,24\n24    YN=YS\n25    CONTINUE\n      FIRSTV=Y0\n      IF  (Y0)  34,35,35\n34    FAD=FAD-1.0\n35    DELTAV=(YN-FIRSTV)/AXLEN\n      IF (DELTAV) 70,70,40\n40    I=ALOG10(DELTAV)+1000.0\n      P=10.0**(I-1000)\n      DELTAV=DELTAV/P-0.01\n      DO  45  I=1,6\n      IS=I\n      IF  (SAVE(I)-DELTAV)  45,50,50\n45    CONTINUE\n50    DELTAV=SAVE(IS)*P\n      FIRSTV=DELTAV*AINT(Y0/DELTAV+FAD)\n      T=FIRSTV+(AXLEN+0.01)*DELTAV\n      IF (T-YN)  55,57,57\n55    IS=IS+1\n      GO  TO  50\n57    FIRSTV=FIRSTV-AINT((AXLEN+(FIRSTV-YN)/DELTAV)/2.0)*DELTAV\n      IF (Y0*FIRSTV) 58,58,59\n58    FIRSTV=0.0\n59    IF  (INC) 61,61,65\n61    FIRSTV=FIRSTV+AXLEN*DELTAV\n      DELTAV=-DELTAV\n65    N=N+1\n      ARRAY(N)=FIRSTV\n      N=N+K\n      ARRAY(N)=DELTAV\n67    RETURN\n70    DELTAV=1.0\n      FIRSTV=FIRSTV-0.5\n      GO TO 65\n      END\n./ ADD NAME=SYMBOL   0100-80001-80001-1200-00001-00001-00000-PLOTLIB 00\n                                                                           8.1\n./ ADD NAME=TSEND    0100-80001-80001-1200-00003-00003-00000-PLOTLIB 00\n      SUBROUTINE TSEND\n      RETURN\n      END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROCLIB": {"ttr": 29190, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x00\\x80\\x00\\x1f\\x01\\x18\\x03\\x9f\\x13P\\x00\\x93\\x00\\x93\\x00\\x00\\xe6\\xc1\\xe3\\xc6\\xc9\\xe5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2018-02-08T13:50:26", "lines": 147, "newlines": 147, "modlines": 0, "user": "WATFIV"}, "text": "./ ADD NAME=INCLUDES 0100-80001-80001-1200-00018-00018-00000-PROCLIB 00\n         INCLUDE   OBJLIB(MAIN)\n         INCLUDE   OBJLIB(ARITH)\n         INCLUDE   OBJLIB(DODO)\n         INCLUDE   OBJLIB(ERROR)\n         INCLUDE   OBJLIB(FORMAT)\n         INCLUDE   OBJLIB(FORMCONV)\n         INCLUDE   OBJLIB(FRIOSCAN)\n         INCLUDE   OBJLIB(FUNCTION)\n         INCLUDE   OBJLIB(INOUT)\n         INCLUDE   OBJLIB(LANDR)\n         INCLUDE   OBJLIB(NAMELIST)\n         INCLUDE   OBJLIB(SCAN)\n         INCLUDE   OBJLIB(SPEX)\n         INCLUDE   OBJLIB(STRPROG)\n         INCLUDE   OBJLIB(WATIO)\n         INCLUDE   OBJLIB(WATLOAD)\n         INCLUDE   OBJLIB(ZMONTH)\n         ENTRY     WATFIV\n./ ADD NAME=INCLUDET 0100-80001-80001-1200-00019-00019-00000-PROCLIB 00\n         INCLUDE   OBJLIB(MAIN)\n         INCLUDE   OBJLIB(ARITH)\n         INCLUDE   OBJLIB(DODO)\n         INCLUDE   OBJLIB(ERROR)\n         INCLUDE   OBJLIB(FORMAT)\n         INCLUDE   OBJLIB(FORMCONV)\n         INCLUDE   OBJLIB(FRIOSCAN)\n         INCLUDE   OBJLIB(FUNCTION)\n         INCLUDE   OBJLIB(INOUT)\n         INCLUDE   OBJLIB(LANDR)\n         INCLUDE   OBJLIB(NAMELIST)\n         INCLUDE   OBJLIB(SCAN)\n         INCLUDE   OBJLIB(SPEX)\n         INCLUDE   OBJLIB(STRPROG)\n         INCLUDE   OBJLIB(VMDEBUG)\n         INCLUDE   OBJLIB(WATIO)\n         INCLUDE   OBJLIB(WATLOAD)\n         INCLUDE   OBJLIB(ZMONTH)\n         ENTRY     WATFIV\n./ ADD NAME=LKEDSCR  0100-80001-80001-1200-00001-00001-00000-PROCLIB 00\n      SCRATCH  DSNAME=WATFIV.JOBLIB,VOL=2314=WATFIV\n./ ADD NAME=LKEDSCRT 0100-80001-80001-1200-00001-00001-00000-PROCLIB 00\n      SCRATCH  DSNAME=WATFIV.TSO.JOBLIB,VOL=2314=WATFIV\n./ ADD NAME=WASM     0100-80001-80001-1200-00036-00036-00000-PROCLIB 00\n//WASM   PROC  V='',U=SYSDA,\n//             VOL=WATFIV,SU='',SD='WATFIV.SOURCE',\n//             MU='',MD='WATFIV.MACLIB',\n//             OU='',OD='WATFIV.OBJLIB',\n//             ASM=IEUASM,\n//             LKED=LINKEDIT,\n//             NAME=XXX\n//ASM    EXEC  PGM=&ASM,PARM='LOAD,DECK',REGION=150K\n//SYSLIB DD    VOLUME=SER=&V.&VOL,UNIT=&U.&MU,DSNAME=&MD,\n//             DISP=SHR\n//       DD    VOLUME=SER=&V.&VOL,UNIT=&U.&SU,DSNAME=&SD,\n//             DISP=SHR\n//       DD    DISP=SHR,DSNAME=SYS1.MACLIB\n//SYSUT1 DD    UNIT=SYSDA,\n//             DISP=(NEW,DELETE),SPACE=(1700,(960,20),,,ROUND)\n//SYSUT2 DD    UNIT=(SYSDA,SEP=SYSUT1),\n//             DISP=(NEW,DELETE),SPACE=(1700,(880,20),,,ROUND)\n//SYSUT3 DD    UNIT=(SYSDA,SEP=(SYSUT1,SYSUT2)),\n//             DISP=(NEW,DELETE),SPACE=(1700,(560,20),,,ROUND)\n//SYSGO  DD    UNIT=SYSDA,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200),\n//             DISP=(NEW,PASS),SPACE=(80,(100,50))\n//SYSPUNCH DD  DUMMY\n//SYSUDUMP  DD DUMMY\n//SYSPRINT DD  SYSOUT=A\n//SYSIN    DD  VOLUME=SER=&V.&VOL,UNIT=&U.&SU,DSNAME=&SD.(&NAME),\n//             DISP=SHR\n//LKED    EXEC       PGM=&LKED,PARM='LIST,MAP,NCAL,LET',REGION=100K\n//SYSLIB   DD  DUMMY\n//SYSUT1   DD  UNIT=SYSDA,\n//             DISP=(NEW,DELETE),SPACE=(1024,(50,10))\n//SYSLMOD  DD  VOLUME=SER=&V.&VOL,UNIT=&U.&OU,DSNAME=&OD.(&NAME),\n//             DISP=SHR\n//SYSPRINT DD  SYSOUT=A\n//SYSLIN   DD  DSNAME=*.ASM.SYSGO,\n//             DISP=(OLD,PASS)\n./ ADD NAME=WATFIV   0100-80001-80001-1200-00014-00014-00000-PROCLIB 00\n//WATFIVE PROC  PROG=WATFIVE,LIB='WATFIV.FUNLIB',V='',VOL=WATFIV,\n//      JB='WATFIV.JOBLIB'\n//GO    EXEC   PGM=&PROG,REGION=150K\n//STEPLIB   DD  DSN=&JB,DISP=SHR,UNIT=SYSDA,VOL=SER=&V.&VOL\n//WATLIB DD DSN=&LIB,DCB=(RECFM=FB,LRECL=80,BLKSIZE=800),DISP=SHR,\n//          VOLUME=SER=&V.&VOL,UNIT=SYSDA\n//          DD  DSN=WATFIV.WATLIB,DISP=SHR,VOL=SER=&V.&VOL,UNIT=SYSDA\n//FT01F001 DD SPACE=(TRK,(20,10)),DCB=(RECFM=VS,BLKSIZE=256),UNIT=SYSDA\n//FT02F001 DD SPACE=(TRK,(20,10)),DCB=(RECFM=VS,BLKSIZE=256),UNIT=SYSDA\n//FT03F001 DD SPACE=(TRK,(20,10)),DCB=(RECFM=VS,BLKSIZE=256),UNIT=SYSDA\n//FT04F001 DD SPACE=(TRK,(20,10)),DCB=(RECFM=VS,BLKSIZE=256),UNIT=SYSDA\n//FT05F001  DD  DDNAME=SYSIN\n//FT06F001  DD  SYSOUT=A,DCB=(RECFM=FA,BLKSIZE=133)\n//FT07F001  DD  SYSOUT=B\n./ ADD NAME=WERROR   0100-80001-80001-1200-00015-00015-00000-PROCLIB 00\n//WERROR   PROC   V='',VOL=WATFIV\n//ERR    EXEC   PGM=IEUASM,PARM='LOAD,NODECK'\n//SYSLIB   DD    DSNAME=WATFIV.MACLIB,DISP=SHR,UNIT=SYSDA,\n//             VOLUME=SER=&V.&VOL\n//      DD  DSNAME=WATFIV.SOURCE,DISP=SHR,VOLUME=SER=&V.&VOL,UNIT=SYSDA\n//         DD    DSNAME=SYS1.MACLIB,DISP=OLD\n//SYSUT1   DD    UNIT=SYSSQ,SPACE=(1700,(400,50))\n//SYSUT2   DD  UNIT=(SYSSQ,SEP=SYSUT1),SPACE=(1700,(400,50))\n//SYSUT3   DD    UNIT=(SYSSQ,SEP=(SYSUT1,SYSUT2)),SPACE=(1700,(400,50))\n//SYSGO    DD   VOLUME=SER=&V.&VOL,UNIT=SYSDA,DISP=OLD,\n//             DSNAME=WATFIV.MESSAGE\n//SYSPUNCH DD DUMMY\n//SYSPRINT DD  SYSOUT=A\n//SYSIN    DD  VOLUME=SER=&V.&VOL,UNIT=SYSDA,DISP=SHR,\n//             DSNAME=WATFIV.SOURCE(MESSLIST)\n./ ADD NAME=WLKED    0100-80001-80001-1200-00022-00022-00000-PROCLIB 00\n//LINK  PROC  V='',VOL=WATFIV,\n//            OD='WATFIV.OBJLIB',\n//            JB='WATFIV.JOBLIB',\n//            LIB='WATFIV.FUNLIB',\n//            LKED=LINKEDIT,\n//            INCL=INCLUDES,\n//            SCR=LKEDSCR\n//SCRATCH  EXEC    PGM=IEHPROGM\n//SYSPRINT DD      SYSOUT=A\n//DD1      DD      VOL=SER=&V.&VOL,UNIT=SYSDA,DISP=SHR\n//SYSIN    DD      DSN=WATFIV.PROCLIB(&SCR),DISP=SHR,UNIT=SYSDA,\n//             VOLUME=SER=&V.&VOL\n//LKED     EXEC    PGM=&LKED,PARM='LIST,MAP,LET',REGION=100K\n//SYSPRINT DD      SYSOUT=A\n//SYSUT1   DD      SPACE=(CYL,(3,1)),UNIT=SYSDA\n//SYSLIB   DD  DSN=&LIB,DISP=SHR,VOL=SER=&V.&VOL,UNIT=SYSDA\n//OBJLIB   DD      DSN=&OD,DISP=OLD,VOL=SER=&V.&VOL,\n//             UNIT=SYSDA\n//SYSLMOD  DD     DSNAME=&JB.(WATFIV),VOL=SER=&V.&VOL,\n//             UNIT=SYSDA,SPACE=(CYL,(1,1,1)),DISP=(NEW,KEEP)\n//SYSLIN   DD  DSN=WATFIV.PROCLIB(&INCL),DISP=SHR,VOL=SER=&V.&VOL,\n//             UNIT=SYSDA\n./ ADD NAME=WMESSAGE 0100-80001-80001-1200-00008-00008-00000-PROCLIB 00\n//WMESS   PROC   V='',VOL=WATFIV\n//WPRT   EXEC   PGM=IEBPTPCH\n//SYSPRINT DD  SYSOUT=A\n//SYSUT1   DD  VOLUME=SER=&V.&VOL,UNIT=SYSDA,DISP=SHR,\n//             DSNAME=WATFIV.MESSAGE\n//SYSUT2   DD    SYSOUT=A\n//SYSIN    DD  DSNAME=WATFIV.PROCLIB(WPRT),VOLUME=SER=&V.&VOL,\n//             UNIT=SYSDA,DISP=SHR\n./ ADD NAME=WPRT     0100-80001-80001-1200-00003-00003-00000-PROCLIB 00\n         PRINT     TYPORG=PS,MAXFLDS=1\n         TITLE     ITEM=('WATFIV COMPILER ERROR MESSAGES',5)\n         RECORD    FIELD=(80)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RELOAD": {"ttr": 29194, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00T\\x01\\x18\\x03\\x9f\\x01\\x18\\x03\\x9f\\x14\\x13\\x00&\\x00!\\x00\\x05\\xd3\\xd6\\xc1\\xc4\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-02-08T00:00:00", "modifydate": "2018-02-08T14:13:54", "lines": 38, "newlines": 33, "modlines": 5, "user": "LOADJCL"}, "text": "//*    ---------------------------------------------------------------\n//*    THIS MEMBER IS TO BE USED WITH THE AWSTAPE, CONVERTED TO A\n//*    REAL TAPE, OR RUN UNDER HERCULES.  TO CONVERT TO A REAL TAPE,\n//*    YOU CAN USE PROGRAM VTT2TAPE FROM CBT FILE 533. WWW.CBTTAPE.ORG\n//*    ---------------------------------------------------------------\n//RELOAD  JOB (SYS),'LOAD WATFIV',CLASS=S,MSGCLASS=X\n//IEHMOVE  EXEC PGM=IEHMOVE,REGION=4096K\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=3350,VOL=SER=WORK02,DISP=OLD\n//IN1      DD  UNIT=TAPE,VOL=(PRIVATE,RETAIN,SER=PFG001),\n//             DSN='WATFIV.PROCLIB',LABEL=(1,SL),DISP=(OLD,PASS)\n//OUT      DD  UNIT=3350,VOL=SER=PUB001,DISP=OLD   <== TARGET VOLUME\n//SYSIN    DD  *\n  COPY PDS=WATFIV.PROCLIB,FROM=TAPE=(PFG001,1),                        C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.PROCLIB,CATLG\n  COPY PDS=WATFIV.JOBLIB,FROM=TAPE=(PFG001,2),                         C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.JOBLIB,CATLG\n  COPY PDS=WATFIV.FUNLIB,FROM=TAPE=(PFG001,3),                         C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.FUNLIB,CATLG\n  COPY DSNAME=WATFIV.TESTS,FROM=TAPE=(PFG001,4),                       C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.TESTS,CATLG\n  COPY PDS=WATFIV.WATLIB,FROM=TAPE=(PFG001,5),                         C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.WATLIB,CATLG\n  COPY DSNAME=WATFIV.MESSAGE,FROM=TAPE=(PFG001,6),                     C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.MESSAGE,CATLG\n  COPY PDS=WATFIV.SOURCE,FROM=TAPE=(PFG001,7),                         C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.SOURCE,CATLG\n  COPY PDS=WATFIV.MACLIB,FROM=TAPE=(PFG001,8),                         C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.MACLIB,CATLG\n  COPY PDS=WATFIV.OBJLIB,FROM=TAPE=(PFG001,9),                         C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.OBJLIB,CATLG\n  COPY DSNAME=WATFIV.USER.GUIDE,FROM=TAPE=(PFG001,10),                 C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.USER.GUIDE,CATLG\n  COPY DSNAME=WATFIV.ERRTEXTS,FROM=TAPE=(PFG001,11),                   C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.ERRTEXTS,CATLG\n  COPY PDS=WATFIV.PLOTLIB,FROM=TAPE=(PFG001,12),                       C\n               TO=3350=PUB001,RENAME=SYSO.WATFIV.PLOTLIB,CATLG\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SOURCE": {"ttr": 29196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x00\\x80\\x00\\x1f\\x01\\x18\\x03\\x9f\\x13P\\xa0\\x14\\xa0\\x14\\x00\\x00\\xe6\\xc1\\xe3\\xc6\\xc9\\xe5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2018-02-08T13:50:26", "lines": 40980, "newlines": 40980, "modlines": 0, "user": "WATFIV"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TESTS": {"ttr": 45834, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x00\\x80\\x00\\x1f\\x01\\x18\\x03\\x9f\\x13P\\x04\\xcc\\x04\\xcc\\x00\\x00\\xe6\\xc1\\xe3\\xc6\\xc9\\xe5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2018-02-08T13:50:26", "lines": 1228, "newlines": 1228, "modlines": 0, "user": "WATFIV"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "UGUIDE": {"ttr": 46346, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x01\\x14\\t\\x8f\\x01\\x18\\x03\\x9f\\x13P\\x1eK\\x1eK\\x00\\x00\\xd7\\xc4\\xc6@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-04-08T00:00:00", "modifydate": "2018-02-08T13:50:26", "lines": 7755, "newlines": 7755, "modlines": 0, "user": "PDF"}, "mimetype": "application/pdf", "datatype": "binary", "extension": ".pdf"}, "WATLIB": {"ttr": 49668, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x00\\x80\\x00\\x1f\\x01\\x18\\x03\\x9f\\x13P\\x03\\xda\\x03\\xda\\x00\\x00\\xe6\\xc1\\xe3\\xc6\\xc9\\xe5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-01-01T00:00:00", "modifydate": "2018-02-08T13:50:26", "lines": 986, "newlines": 986, "modlines": 0, "user": "WATFIV"}, "text": "./ ADD NAME=FIVPAK   0100-80001-80001-1200-00070-00070-00000-WATLIB  00\n          SUBROUTINE  F I V P A K     (JNUNIT,JUTUNT)\nCOPYRIGHT 1970     UNIVERSITY OF WATERLOO\n      IMPLICIT  INTEGER   (A-Y);  CHARACTER CARD\n     *(72),X,QUOTE/''''/,OUT(1326),IN15*5,OUT15*5,BUFF*72;CHARACTERCHAR1\n     *,DUM(4),CARDX*72;EQUIVALENCE(CARD,CARDX,IN15),(OUT,OUT15),(DUM,KK)\n     *,(DUM(4),CHAR1);COMMONCARD/IO/INUNIT,OUTUNT/BUF/OUTPTR,OUT/TOTALS/\n     *ITOTAL,JTOTAL;COMMON/ST/IX,IY,BUFF;KK=0;INUNIT=JNUNIT;OUTUNT=JUTUN\n     *T;ITOTAL=JTOTAL=0;CALLRESET;CALLFLUSH;1:CALLREAD(&999,&200,&300,&4\n     *00)\nCONTROL IS PASSED TO THE FOLLOWING LOCATIONS B/C\nC        999    EOF\nC        200    COMMENT\nC        300    NEW CARD\nC        400    SEPARATOR\n      INPTR=7;2:CONTINUE;10:X=CARD(INPTR);IF(X.NE.' ')GOTO12;11:INPTR=IN\n     *PTR+1;IF(INPTR.EQ.73)GOTO1;GOTO10;12:IF(X.EQ.QUOTE)GOTO20;IF(X.EQ.\n     *'H')GOTO30;13:OUT(OUTPTR)=X;OUTPTR=OUTPTR+1;GOTO11;20:OUT(OUTPTR)=\n     *X;OUTPTR=OUTPTR+1;INPTR=INPTR+1;IF(INPTR.NE.73)GOTO22;CALLREAD(&99\n     *9,&200,&300,&400);INPTR=7;22:X=CARD(INPTR);IF(X.NE.QUOTE)GOTO20;GO\n     *TO13\nC    HOLLERITH CONSTANT, CHECK FOR INTEGER BEFORE \"H\"\n30    OUT(OUTPTR)=X;N1=0;IF(OUTPTR.EQ.7)GOTO35;N123=OUTPTR;31:N123=N123-\n     *1;CHAR1=OUT(N123);N12=KK-240;IF(N12.LT.0)GOTO34;IF(N12.GT.9)GOTO34\n      GOTO31;34:N123=N123+1;IF(N123.EQ.OUTPTR)GOTO35;CHAR1=OUT(N123);N1=\n     *N1*10+KK-240;GOTO34;35:OUTPTR=OUTPTR+1;36:IF(N1.EQ.0)GOTO11;INPTR=\n     *INPTR+1;IF(INPTR.NE.73)GOTO37;CALLREAD(&999,&200,&300,&400);INPTR=\n     *7;37:X=CARD(INPTR);N1=N1-1;OUT(OUTPTR)=X;OUTPTR=OUTPTR+1;GOTO36;\n200   IF(OUTPTR.EQ.7)GOTO205;CALLOUTPUT;CALLFLUSH;205:CALLREPRO;GOTO1;\n300   IF(OUTPTR.NE.7)CALLOUTPUT;OUT15=IN15;OUTPTR=INPTR=7;GOTO2;400:IF(O\n     *UTPTR.EQ.7)GOTO401;CALLOUTPUT;401:CALLFLUSH;CALLRESET;GOTO1;\n999   ZPER=JTOTAL*100./ITOTAL;PRINT1000,ITOTAL,JTOTAL,ZPER;RETURN\n1000  FORMAT('- CARDS INPUT =',I13/'0CARDS OUTPUT =',I12/'-OUTPUT IS',F7\n     *.2,'% OF INPUT'//)\n      END;SUBROUTINEREAD(*,*,*,*);CHARACTERC*72,C72(72),C1,C6;COMMONC/IO\n     */NIN,NOUT/TOTALS/ITOTAL,JTOTAL;EQUIVALENCE(C,C72,C1),(C72(6),C6);R\n     *EAD(NIN,1,END=999)C;IF(C1.EQ.'*')RETURN4;ITOTAL=ITOTAL+1;IF(C1.EQ.\n     *'C')RETURN2;IF(C6.EQ.' ')RETURN3;IF(C6.EQ.'0')RETURN3;RETURN;\n999   CALLOUTPUT;CALLFLUSH;RETURN1\n1     FORMAT(A72)\n      END;SUBROUTINEOUTPUT;CHARACTERFMT*7,OUT(1326),OUT15*5,OUT6,BUF16*6\n     *,COLON/Z7A/;EQUIVALENCE(FMT,OUT(7)),(OUT,OUT15),(OUT(6),OUT6);COMM\n     *ON/BUF/IOUT,OUT/ST/IB,JSEQ,BUF16;DATALEGAL/67/;IF(FMT.EQ.'FORMAT('\n     *)CALLFLUSH;IF(IB.NE.7)CALLSEMI;IF(OUT15.EQ.'     ')GOTO20\nCHECK TO SEE IF THE STNO IN COLS 1-5 WILL FIT ENTIRELY ON THIS\nCARD.  IF NOT, START A NEW CARD TO ELIMINATE STNO CROSS-OVERS B/C\nCOMPILER WILL NOT ALLOW THEM.\n      IF(IB.LT.LEGAL)GOTO15;CALLFLUSH;BUF16=OUT15;GOTO20\nCARD-TO-CARD STNO CROSS-OVERS HAVE BEEN ELIMINATED\n15    OUT6=COLON;CALLSTNO;20:CALLPACK;IF(FMT.EQ.'FORMAT(')CALLFLUSH;RETU\n     *RN;END;SUBROUTINEPACK;CHARACTEROUT(1326),BUFFER(72),BUFF*72,BUF6,C\n     *ARD*72,BUF15*5;CHARACTEROUT15*5,OUT6,SEMICO/Z5E/;COMMON/BUF/IOUT,O\n     *UT/ST/IB,JSEQ,BUFF/IO/NIN,NOUT;COMMON/TOTALS/IT,JTOTAL//CARD;EQUIV\n     *ALENCE(BUFFER,BUFF,BUF15),(BUFFER(6),BUF6),(OUT,OUT15);EQUIVALENCE\n     *(OUT(6),OUT6);JOUT=IOUT-1;DO10I=7,JOUT;IF(IB.NE.73)GOTO5;CALLPUNCH\n      BUF6='*';5:BUFFER(IB)=OUT(I);10:IB=IB+1;RETURN;ENTRYFLUSH;IF(IB.EQ\n     *.7)GOTO12;CALLPUNCH;BUF6=' ';IB=7;12:RETURN;ENTRYSTNO;IF(IB.EQ.7)G\n     *OTO20;DO15K=1,6;IF(OUT(K).EQ.' ')GOTO15;BUFFER(IB)=OUT(K);IB=IB+1\n      IF(IB.NE.73)GOTO15;CALLPUNCH;BUF6='*';15:CONTINUE;RETURN;20:BUF15=\n     *OUT15;OUT6=' ';IB=7;RETURN;ENTRYSEMI;IF(IB.LT.72)GOTO25;CALLPUNCH\n      RETURN;25:BUFFER(IB)=SEMICO;IB=IB+1;RETURN;ENTRYRESET;BUFF=' ';IOU\n     *T=7;JSEQ=1;BUF6=' ';IB=7;PRINT50;RETURN\n50    FORMAT('1* * * * *   F I V P A K   * * * * *'/'+',12X,'F I V P A K\n     *'/)\n      END;SUBROUTINEPUNCH;CHARACTERB*72,CARD*72;COMMONCARD/ST/I,JSEQ,B/I\n     *O/N,M/TOTALS/ITOTAL,JTOTAL/BUF/J;PRINT500,B,JSEQ;WRITE(M,501)B,JSE\n     *Q;B=' ';1:JSEQ=JSEQ+1;JTOTAL=JTOTAL+1;I=7;RETURN;ENTRYREPRO;PRINT5\n     *00,CARD,JSEQ;WRITE(M,501)CARD,JSEQ;J=7;GOTO1\n500   FORMAT(' ',A72,'00000000',T74,I4)\n501   FORMAT(A72,'00000000',T73,I4)\n      END\n./ ADD NAME=TRANSL   0100-80001-80001-1200-00882-00882-00000-WATLIB  00\n      SUBROUTINE TRANSL(DECK,PUNCH)\nC***********************************************************************\nC*     THIS PROGRAM TRANSLATES WATFIV-S EXTENDED CONTROL STATEMENTS    *\nC*  TO STANDARD FORTRAN.  PROGRAMS WHICH DO NOT USE ANY OTHER WATFIV   *\nC*  EXTENSIONS TO FORTRAN, AND COMPILE CORRECTLY UNDER WATFIV-S MAY    *\nC*  BE TRANSLATED BY THIS PROGRAM TO A FORM ACCEPTABLE TO FORTRAN-G OR *\nC*  H.  THE PROGRAMS BEING TRANSLATED, HOWEVER, MUST CONFORM TO THE    *\nC*  FOLLOWING TRANSLATOR RESTRICTIONS:                                 *\nC*      1.   STATEMENT NUMBERS 90000-99999 RESERVED FOR TRANSLATOR.    *\nC*           VARIABLE NAMES BEGINNING WITH '$' RESERVED FOR TRANSLATOR.*\nC*      2.   WATFIV-S CONTROL STATEMENTS MUST BE COMPLETE ON ONE CARD, *\nC*           WITH THE EXCEPTION OF IF-THEN AND WHILE-DO HEADER STATE-  *\nC*           MENTS.  FOR THESE EXCEPTIONS 'IF(' AND 'WHILE(' MUST BE   *\nC*           COMPLETE ON THE FIRST CARD OF THE STATEMENT.              *\nC*      3.   A MAXIMUM OF 19 CONTINUATION CARDS WILL BE ALLOWED FOR    *\nC*           READ STATEMENTS.                                          *\nC*      4.   COMMENT CARDS BETWEEN CONTINUATION CARDS OF A STATEMENT   *\nC*           ARE NOT ALLOWED.                                          *\nC*      5.   ERROR CHECKING IS GENERALLY NOT PERFORMED BY THE TRANSL-  *\nC*           ATOR, BUT CERTAIN ERRORS ARE DETECTED BY THE TRANSLATION  *\nC*           ALGORITHM.  TRANSLATION IS TERMINATED WHEN SUCH ERRORS    *\nC*           OCCUR.                                                    *\nC*      6.   REMOTE BLOCK NAMES MUST BE UNIQUE IN THEIR FIRST 5 CHAR-  *\nC*           ACTERS AND REMOTE BLOCK DEFINITIONS MUST FOLLOW ALL THEIR *\nC*           REFERENCES.                                               *\nC*      7.   'EXECUTE' AS THE OBJECT OF A DO LOOP WILL NOT TRANSLATE   *\nC*           CORRECTLY.  THIS PROBLEM MAY BE CIRCUMVENTED BY USING A   *\nC*           'CONTINUE' STATEMENT FOLLOWING THE EXECUTE, AS DO-OBJECT. *\nC*      8.   THE GENERATED STATEMENT 'IMPLICIT INTEGER($)' MAY HAVE    *\nC*           TO BE RE-POSITIONED IN THE OUTPUT DECK IF SUBPROGRAMMES   *\nC*           ARE TRANSLATED SEPARATELY OR MULTIPLE MAINLINE PROGRAMMES *\nC*           ARE TRANSLATED TOGETHER.  THIS IS NOT NECESSARY FOR DECKS *\nC*           WITH MAINLINE FIRST, FOLLOWED BY SUBPROGRAMMES.           *\nC***********************************************************************\nC    INPUT AND OUTPUT UNIT NUMBERS - PASSED AS SUBROUTINE PARAMETERS,\nC       DECK AND PUNCH\n      INTEGER DECK,PUNCH\nC\nC    STACK VARIABLES TO KEEP TRACK OF NESTED BLOCKS:\nC       THE DIMENSION OF THESE VARIABLES HAS BEEN ARBITRARILY SET AT\nC       50.  IF A PROGRAM IS TOO LARGE TO TRANSLATE WITH THIS PROGRAM\nC       CHANGE THE DIMENSIONS OF THESE VARIABLES TO A SUITABLE SIZE.\n      INTEGER LABEL1(50),LABEL2(50),TYPE(50),TOP/1/\n      CHARACTER*1 CASIN1(4,50),CASIN2(4,50)\n      EQUIVALENCE (LABEL2,CASIN1),(TYPE,CASIN2)\nC     REMOTE BLOCK TABLES - ALSO DIMENSIONED ARBITRARILY AT 50 AND\nC     MAY BE  INCREASED IN SIZE IF NECESSARY\n      CHARACTER BNAME*6(50),BLKNAM*6,BLKNM1*1(6)\n      EQUIVALENCE  (BLKNAM,BLKNM1)\n      INTEGER STRTNO(2,50),RETRNS(2,150),NTOP/0/,RTOP/0/,REMBLK/0/,\n     *        LBLIST(7)\nC    OTHER VARIABLES\n      INTEGER CODE/0/,PRVCOD,RDEND,BCOL,BCARD,PCOL,CCOL,EOC,EOS,\n     *        LABEL/89999/,ERRSW/0/,FOUND,BUFFNO,RTYPE\n      CHARACTER*1 BUFFIN(80,20),PACKED(80),CARD(80),CHAR\n      CHARACTER*80 BUFIN1(20),PACK1,CARD1\n      EQUIVALENCE (BUFFIN,BUFIN1),(PACKED,PACK1),(CARD,CARD1)\n      CHARACTER CGOTO*16,CGOTO1*56,STNO*5,CARD6*75,BUF11*11,\n     *          FMT*6,FMT1*1(6),FMT2*6,CARD20*61,AGOTO1*48\n      EQUIVALENCE (CARD,CGOTO),(CARD(17),CGOTO1),(CARD,STNO),\n     *            (CARD(6),CARD6),(BUFFIN,BUF11),(FMT1,FMT2),\n     *            (FMT,CARD(14)),(CARD(20),CARD20),(CARD(25),AGOTO1)\n      CHARACTER PACK2*2,PACK4*4,PACK5*5,PACK6*6,PACK7*7,PACK8*8,\n     *          PACK11*11,PACK3*3\n      EQUIVALENCE (PACKED(7),PACK2,PACK4,PACK5,PACK6,PACK7,PACK8,\n     *             PACK11,PACK3)\n      INTEGER*2 TRAN(255)/63*0,9,9*0,3*1,2,3*1,9*0,1,8,1,3,4*1,9*0,4,\n     *                4*1,10*0,3*1,5,6,1,65*0,9*8,7*0,9*8,8*0,8*8,6*0,\n     *                10*7,1,5*0/\n      CHARACTER*30 ERROR0/'***ERROR*** INPUT DECK MISSING'/\n      CHARACTER*44 ERROR1/'***ERROR*** DEBUG THIS PROGRAM WITH WATFIVS'/\n      CHARACTER*68 ERROR2/'***ERROR*** TOO MANY CONTINUATION CARDS FOR R\n     *EAD STATEMENT (MAX. 19)'/\n      CHARACTER*84 ERROR3/'***ERROR*** TRANSLATOR WILL ONLY ACCEPT ''WHI\n     *LE(...)'' AS PART OF A WHILE-DO STATEMENT'/\n      CHARACTER*120 ERROR4/'***ERROR*** INVALID USE OF ''WHILE(...)DO'',\n     * OR CONTINUATION CARD FOLLOWING APPARENTLY COMPLETE ''IF(...)THEN\n     *DO'' STATEMENT'/\n  1   FORMAT(A80)\n  2   FORMAT('      GO TO ',I5)\n  3   FORMAT(I5,' CONTINUE')\nC\nC\n      LABEL1(1)=0\n      LABEL2(1)=0\n      TYPE(1)=0\n      READ(DECK,1) CARD1\n      AT END DO\n        PRINT, ERROR0\n        RETURN\n      END AT END\n      EOF=0\n      WRITE(PUNCH,11)\n 11   FORMAT(6X,'IMPLICIT INTEGER($)')\nC     TRANSLATE UNTIL END-OF-FILE ENCOUNTERED\n      WHILE (EOF .EQ. 0) DO\nC       SKIP COMMENT CARDS\n        WHILE (CARD(1).EQ.'C') DO\n          WRITE(PUNCH,1)CARD1\n          READ(DECK,1)CARD1\n          AT END DO\n            RETURN\n          END AT END\n        END WHILE\n        CCOL=7\n        PCOL=7\n        EOC=0\n        CHAR=CARD(7)\n        I=TRAN(CHAR)\nC       PACK ALPHABETIC CHARACTERS ON 1ST CARD OF STMT.\nC       UNTIL DIGIT OR DELIMETER\n        WHILE (I.GE.8 .AND. EOC.EQ.0) DO\n          IF (I.EQ.8) THEN DO\n            PACKED(PCOL)=CHAR\n            PCOL=PCOL+1\n          END IF\n          CCOL=CCOL+1\n          IF (CCOL.EQ.73) THEN DO\n            EOC=1\n          ELSE DO\n            CHAR=CARD(CCOL)\n            I=TRAN(CHAR)\n          END IF\n        END WHILE\n        PRVCOD=CODE\n        CODE=0\n        LENGTH=PCOL-7\n        I=LENGTH-1\nC     DECIDE IF WE HAVE A STATEMENT WHICH NEEDS TRANSLATING.\nC      IF SO, IDENTIFY WITH UNIQUE NON-ZERO CODE & PROCESS LATER:\nC              0 - NO KEYWORD MATCH\nC              1 - ELSE DO\nC              2 - END IF\nC              3 - END WHILE\nC              4 - END AT END\nC              5 - DO CASE VNAME\nC              6 - CASE ...\nC              7 - IF NONE DO\nC              8 - END CASE\nC              9 - EXECUTE BNAME\nC             10 - REMOTE BLOCK BNAME\nC             11 - END BLOCK\nC             12 - AT END DO\nC             13 - IF(\nC             14 - WHILE(\nC             15 - READ,...\nC             16 - READ(\nC             17 - READ VNAME,\nC             18 - READ NUMBER,\nC       INDEX ON LENGTH-1 TO REDUCE # OF KEYWORD COMPARISONS\n        DO CASE I\n        CASE  (LENGTH 2)\n          IF (PACK2.EQ.'IF' .AND. CHAR.EQ.'(')CODE=13\n        CASE  (LENGTH 3)\n          IF (PACK3.EQ.'END' .AND. EOC.EQ.1)CODE=-1\n        CASE  (LENGTH 4)\n          IF (PACK4.EQ.'READ') THEN DO\n            RDEND=CCOL\n            IF (CHAR.EQ.',') THEN DO\n              CODE=15\n            ELSE DO\n              IF (CHAR.EQ.'(') THEN DO\n                CODE=16\n              ELSE DO\n                IF (TRAN(CHAR).EQ.7) CODE=18\n              END IF\n            END IF\n          END IF\n        CASE  (LENGTH 5)\n          IF (PACK5.EQ.'ENDIF' .AND. EOC.EQ.1) THEN DO\n            CODE=2\n          ELSE DO\n            IF (PACK5.EQ.'WHILE' .AND. CHAR.EQ.'(') CODE=14\n          END IF\n        CASE  (LENGTH 6)\n          IF (PACK6.EQ.'ELSEDO' .AND. EOC.EQ.1) CODE=1\n        CASE  (LENGTH 7)\n          IF (EOC .EQ. 1) THEN DO\n            IF (PACK7 .EQ. 'ATENDDO') THEN DO\n              CODE=12\n            ELSE DO\n              IF (PACK7 .EQ. 'ENDCASE')CODE=8\n            END IF\n          END IF\n        CASE  (LENGTH 8)\n          IF (EOC .EQ. 1) THEN DO\n            IF (PACK8 .EQ. 'ENDWHILE') THEN DO\n              CODE=3\n            ELSE DO\n              IF (PACK8 .EQ. 'ENDATEND') THEN DO\n                CODE=4\n              ELSE DO\n                IF (PACK8 .EQ. 'IFNONEDO')CODE=7\n              END IF\n            END IF\n          END IF\n        END CASE\n        IF (CODE.EQ.0) THEN DO\n          IF (PACK6.EQ.'DOCASE' .AND. LENGTH .GT. 6) THEN DO\n            CODE=5\n          ELSE DO\n            IF (PACK4.EQ.'CASE') THEN DO\n              CODE=6\n            ELSE DO\n              IF (PACK4.EQ.'READ' .AND. CHAR.EQ.',') THEN DO\n                CODE=17\n                FMT2=' '\n                N=PCOL-11\n                RDEND=CCOL\n                DO 89 I=1,N\n 89             FMT1(I)=PACKED(I+10)\n              ELSE DO\n                IF (PACK7 .EQ. 'EXECUTE') THEN DO\n                  CODE=9\n                ELSE DO\n                  IF (PACK11 .EQ. 'REMOTEBLOCK') THEN DO\n                    CODE=10\n                  ELSE DO\n                    IF (PACK8 .EQ. 'ENDBLOCK')CODE=11\n                  END IF\n                END IF\n              END IF\n            END IF\n          END IF\n        END IF\nC       PREVIOUS STMT. A 'READ' & CURRENT STMT. NOT 'ATENDDO'?\nC         YES - DUMP BUFFER\n        IF (PRVCOD.GE.15 .AND. CODE.NE.12) THEN DO\n          DO 96 I=1,BUFFNO\n 96       WRITE(PUNCH,1)BUFIN1(I)\n        END IF\nC       NOT ONE OF OUR STMTS. ? - DUMP (CONT'N. CARDS AS WELL)\n        IF (CODE.LE.0) THEN DO\n          EXECUTE WRRD1\n          IF(PRVCOD.EQ.-1) WRITE(PUNCH,11)\n          IF (CODE.EQ.-1) THEN DO\nC         END OF PROGRAM SEGMENT - CHECK STACKS AND TABLES ARE IN ORDER\nC         AND INITIALIZE FOR NEXT SEGMENT\n            IF (TOP.GT.1) THEN DO\n              ERRSW=1\n            ELSE DO\n              WHILE (NTOP.GT.0 .AND. ERRSW.EQ.0) DO\n                IF (STRTNO(1,NTOP) .NE. 0) ERRSW=1\n                NTOP=NTOP-1\n              END WHILE\n              NTOP=RTOP=0\n              LABEL=89999\n            END IF\n          END IF\nC       ONE OF OUR STMTS. - PROCESS IT\n        ELSE DO\n          IF(PRVCOD.EQ.-1) WRITE(PUNCH,11)\nC         PROCESS SINGLE CARD STMTS. FIRST (IF,WHILE,READS LATER)\n          IF (CODE.LE.12) THEN DO\n            DO CASE CODE\n            CASE 1\nC           'ELSEDO' - TOP OF STACK MUST BE 'IF-THEN'\n              IF (TYPE(TOP).NE.13) THEN DO\n                ERRSW=1\n              ELSE DO\n                LABEL=LABEL+1\n                WRITE(PUNCH,2)LABEL\n                WRITE(PUNCH,3)LABEL1(TOP)\n                LABEL1(TOP)=LABEL\n                TYPE(TOP)=1\n              END IF\n            CASE 2\nC           'ENDIF' - PROCESS WITH REMOTE BLOCK\n              EXECUTE ENDIF\n            CASE 3\nC           'ENDWHILE' - PROCESS WITH REMOTE BLOCK\n              EXECUTE ENDWH\n            CASE 4\nC          'ENDATEND' - TOP MUST BE 'ATENDDO'\n              IF (TYPE(TOP).NE.12) THEN DO\n                ERRSW=1\n              ELSE DO\n                WRITE(PUNCH,3)LABEL1(TOP)\n                TOP=TOP-1\n              END IF\n            CASE 5\nC           'DOCASE' - PACK REST OF CARD TO PICK UP INDEX VAR.\n              EXECUTE NPACK\nC             SOMETHING NON-ALPHANUMERIC FOUND - ERROR\n              IF (EOC.EQ.0) THEN DO\n                ERRSW=1\n              ELSE DO\n                LENGTH=PCOL-13\n                IF (LENGTH.LT.6) THEN DO\n                  DO 99 I=PCOL,18\n  99              PACKED(I)=' '\n                END IF\nC               IF THERE WAS A STMT. NO. ON DOCASE, GEN. A CONTINUE\n                IF (STNO.NE.' ') THEN DO\n                  CARD6=' CONTINUE'\n                  WRITE(PUNCH,1)CARD1\n                END IF\n                TOP=TOP+1\n                LABEL=LABEL+1\n                LABEL1(TOP)=LABEL\nC               PLACE INDEX VAR. IN STACK FOR ENDDOCASE CODE\n                DO 98 I=1,4\n  98            CASIN1(I,TOP)=PACKED(12+I)\n                CASIN2(1,TOP)=PACKED(17)\n                CASIN2(2,TOP)=PACKED(18)\n                LABEL=LABEL+1\n                TOP=TOP+1\n                LABEL1(TOP)=LABEL\n                WRITE(PUNCH,2)LABEL\n                LABEL=LABEL+1\n                LABEL2(TOP)=LABEL\n                TYPE(TOP)=5\n                WRITE(PUNCH,3)LABEL\n              END IF\n            CASE 6\nC           'CASE' - TOP MUST BE 'CASE' OR 'DOCASE'\n              IF (TYPE(TOP).NE.5 .AND. TYPE(TOP).NE.6) THEN DO\n                ERRSW=1\n              ELSE DO\nC               IGNORE CASE STMT. IMMEDIATELY FOLLOWIN A DOCASE\n                IF (PRVCOD .NE. 5) THEN DO\n                  EXECUTE XITCAS\n                  LABEL=LABEL+1\n                  WRITE(PUNCH,3)LABEL\n                  TOP=TOP+1\n                  LABEL1(TOP)=LABEL\n                  TYPE(TOP)=6\n                END IF\n              END IF\n            CASE 7\nC           'IFNONEDO' - TOP MUST BE 'CASE' OR 'DOCASE'\n            IF (TYPE(TOP).NE.5 .AND. TYPE(TOP).NE.6) THEN DO\n              ERRSW=1\n            ELSE DO\n              EXECUTE XITCAS\n              EXECUTE CGOTO\n              TOP=TOP+1\n              TYPE(TOP)=7\n              LABEL1(TOP)=I\n            END IF\n            CASE 8\nC           'ENDCASE' - TOP MUST BE 'CASE' OR 'DOCASE' OR 'IFNONEDO'\n              IF (TYPE(TOP).LT.5 .OR. TYPE(TOP).GT.7) THEN DO\n                ERRSW=1\n              ELSE DO\n                EXECUTE XITCAS\n                IF (TYPE(TOP) .EQ. 7) THEN DO\n                  I=LABEL1(TOP)\n                ELSE DO\n                  EXECUTE CGOTO\n                END IF\nC               BRANCH AROUND & EXIT LABEL FOR CASES\n                WRITE(PUNCH,3)LABEL1(I)\n                TOP=I-1\n              END IF\n            CASE 9\nC           'EXECUTE' - PACK REST OF CARD TO PICK UP BLOCK NAME\n              EXECUTE NPACK\nC             PROCESS WITH REMOTE BLOCK\n              EXECUTE EXEC\n            CASE 10\nC           'REMOTE BLOCK' - PACK REST OF CARD TO PICK UP BLOCK NAME\n              EXECUTE NPACK\n              IF (EOC.EQ.0) THEN DO\n                ERRSW=1\n              ELSE DO\n                LENGTH=PCOL-18\n                IF (LENGTH.LT.5)THEN DO\n                  DO 77 I=PCOL,22\n  77              PACKED(I)=' '\n                END IF\n                BLKNM1(1)='$'\n                DO 76 I=2,6\n  76            BLKNM1(I)=PACKED(16+I)\n                EXECUTE NMSRCH\n                IF (I.GT.NTOP .OR. STRTNO(1,I).EQ.0) THEN DO\n                  ERRSW=1\n                ELSE DO\n                  REMBLK=I\n                  WRITE(PUNCH,3)STRTNO(1,I)\n                  STRTNO(1,I)=0\n                END IF\n              END IF\n            CASE 11\nC           'END BLOCK' - GENERATE ASSIGNED GOTO WITH RETURN LABELS\nC                         FROM LINKED LIST 'RETRNS'\n              IF (REMBLK.EQ.0) THEN DO\n                ERRSW=1\n              ELSE DO\n                I=STRTNO(2,REMBLK)\n                WRITE(CARD1,10)BNAME(REMBLK),RETRNS(1,I)\n  10            FORMAT(6X,'GOTO ',A6,',(',I5)\n                J=0\n                WHILE (RETRNS(2,I) .NE. 0) DO\n                  J=1\n                  WHILE(J.LE.7 .AND. RETRNS(2,I).NE.0) DO\n                    I=RETRNS(2,I)\n                    LBLIST(J)=RETRNS(1,I)\n                    J=J+1\n                  END WHILE\n                  J=J-1\n                  WRITE(AGOTO1,5)(LBLIST(K),K=1,J)\n                  IF (RETRNS(2,I) .NE. 0) THEN DO\n                    WRITE(PUNCH,1)CARD1\n                    CARD1=' '\n                    CARD(6)='*'\n                  END IF\n                END WHILE\n                CCOL=J*6+25\n                CARD(CCOL)=')'\n                WRITE(PUNCH,1)CARD1\n                REMBLK=0\n              END IF\n            CASE 12\nC           'ATENDDO' - PREVIOUS STMT. MUST BE A READ\n              IF (PRVCOD.LT.15) THEN DO\n                ERRSW=1\n              ELSE DO\n                RTYPE=PRVCOD-14\nC               DIFFERENT FORMATS OF READS HANDLED SEPERATELY FOR\nC               INSERTION OF 'END=NNNNN' - REST OF LINE FORMATTING\nC               DONE IN COMMON CODE (AFTER END DO CASE)\n                DO CASE RTYPE\n                CASE  (READ,.../AT END DO)\nC               FREE FORMAT READ ON STANDARD UNIT (5)\n                  CARD1=' '\n                  DO 95 I=1,5\n  95              CARD(I)=BUFFIN(I,1)\n                  LABEL=LABEL+1\n                  WRITE(CARD6,6)LABEL\n  6               FORMAT(' READ(5,*,END=',I5,')')\n                  BCOL=RDEND+1\n                  I=26\n                CASE  (READ(...).../AT END DO)\nC               STANDARD FORTRAN READ STMT.\n                  CARD1=' '\n                  DO 92 I=1,RDEND\n                  CARD(I)=BUFFIN(I,1)\n  92              BUFFIN(I,1)=' '\n                  LEVEL=0\n                  I=RDEND+1\nC                 SEARCH FOR LEVEL 0 RIGHT PAREN\n                  WHILE(BUFFIN(I,1).NE.')' .OR. LEVEL.NE.0) DO\n                    IF (BUFFIN(I,1).EQ.'(') THEN DO\n                      LEVEL=LEVEL+1\n                    ELSE DO\n                      IF (BUFFIN(I,1).EQ.')') LEVEL=LEVEL-1\n                    END IF\n                    CARD(I)=BUFFIN(I,1)\n                    BUFFIN(I,1)=' '\n                    I=I+1\n                  END WHILE\n                  BUFFIN(I,1)=' '\n                  I=I+1\n                  LABEL=LABEL+1\n                  WRITE(BUF11,7)LABEL\n  7               FORMAT(',END=',I5,')')\n                  BCOL=1\n                CASE  (READAAAAAA,.../AT END DO)\nC                     (READNNNNN,.../AT END DO)\nC               READ ON STANDARD UNIT WITH FORMAT SPECIFIED BY\nC               STMT. NO. OR VARIABLE\n                  DO 90 I=1,5\n  90              CARD(I)=BUFFIN(I,1)\n                  CARD6=' READ(5,'\n                  FMT=FMT2\n                  LABEL=LABEL+1\n                  WRITE(CARD20,7)LABEL\n                  BCOL=RDEND+1\n                  I=31\n                END CASE\nC               COMMON CODE FOR ALL READ FORMATS\nC               PACK AND FORMAT READ LIST FROM 1ST CARD\n                II=BCOL\n                DO 94 BCOL=II,72\n                IF (BUFFIN(BCOL,1).NE.' ') THEN DO\n                   CARD(I)=BUFFIN(BCOL,1)\n                   I=I+1\n                   IF (I.GT.72) THEN DO\n                     WRITE(PUNCH,1)CARD1\n                     CARD1=' '\n                     CARD(6)='*'\n                     I=7\n                   END IF\n                 END IF\n  94             CONTINUE\n                 IF (I.GT.7) WRITE(PUNCH,1)CARD1\nC                DUMP REMAINDER OF READ LIST FROM CONT'N. CARDS, IF ANY\n                 IF (BUFFNO.GT.1) THEN DO\n                   DO 93 I=2,BUFFNO\n  93               WRITE(PUNCH,1)BUFIN1(I)\n                 END IF\n                 LABEL=LABEL+1\n                 WRITE(PUNCH,2)LABEL\n                 WRITE(PUNCH,3)LABEL-1\n                 TOP=TOP+1\n                 LABEL1(TOP)=LABEL\n                 TYPE(TOP)=12\n               END IF\n             END CASE\nC            COMMON CODE FOR ALL ONE-LINE STATEMENTS\nC            READ NEXT CARD - ERROR IF CONTINUATION\n             EXECUTE RD2\n             IF (CARD(6).NE.' '.AND.CARD(6).NE.'0'.AND.CARD(1).NE.'C')\n     *          ERRSW=1\nC            IF ERROR SW. HAS BEEN SET, PRINT MSG. & RETURN\n             IF (ERRSW.NE.0) THEN DO\n               PRINT, ERROR1\n               RETURN\n             END IF\nC    NOW WE HANDLE CODES>12: IF & WHILE FIRST, THEN READS\n           ELSE DO\n             IF (CODE.LT.15) THEN DO\n               IF (CODE.EQ.14) THEN DO\nC                REPLACE 'WHILE' WITH 'IF' & OUTPUT LABEL FOR LOOPING\n                 LABEL=LABEL+1\n                 WRITE(PUNCH,3)LABEL\n                 N=CCOL-1\n                 CARD(7)='I'\n                 CARD(8)='F'\n                 DO 88 I=9,N\n  88             CARD(I)=' '\n               END IF\n               CCOL=CCOL+1\n               LEVEL=0\n               HOLL=0\nC              SEARCH FOR LEVEL 0 RIGHT PAREN TO END LOGICAL EXPR'N.\n               WHILE(CARD(CCOL).NE.')'.OR.LEVEL.NE.0.OR.HOLL.NE.0)DO\n                 IF (CARD(CCOL).EQ.'''') THEN DO\n                   IF (HOLL.EQ.0)THEN DO\n                     HOLL=1\n                   ELSE DO\n                     HOLL=0\n                   END IF\n                 ELSE DO\n                   IF (HOLL.EQ.0) THEN DO\n                     IF (CARD(CCOL).EQ.'(')THEN DO\n                       LEVEL=LEVEL+1\n                     ELSE DO\n                       IF (CARD(CCOL).EQ.')') LEVEL=LEVEL-1\n                     END IF\n                   END IF\n                 END IF\n                 CCOL=CCOL+1\n                 IF(CCOL.GT.72) THEN DO\n                   EXECUTE WRRD2\n                   CCOL=7\n                 END IF\n               END WHILE\nC    LEVEL 0 RIGHT PAREN FOUND - PACK REST & CHECK FOR THENDO, DO OR\nC    EXECUTE FOLLOWING\n               CARD(CCOL)=' '\n               J=CCOL\n               WHILE(CARD(CCOL).EQ.' ' .AND. CCOL.LE.72) DO\n                 CCOL=CCOL+1\n               END WHILE\n               CARD(J)=')'\n               J=J+1\n               IF (CCOL.GT.72) THEN DO\n                 EXECUTE WRRD2\n                 J=CCOL=7\n               END IF\n               PACK1=' '\n               PCOL=7\n               EOC=0\n               CHAR=CARD(CCOL)\n               EXECUTE NPACK\n               MATCH=0\n               IF (PACK7 .EQ. 'EXECUTE') THEN DO\n                 MATCH=2\n               ELSE DO\n                 IF (CODE.EQ.14) THEN DO\n                   IF (PACK2 .EQ.'DO' .AND. EOC.EQ.1) THEN DO\n                     MATCH=1\n                   ELSE DO\nC                  NO MATCH - PACK IT IN - ALREADY REPLACED 'WHILE'\n                     PRINT, ERROR3\n                     RETURN\n                   END IF\n                 ELSE DO\n                   IF (PACK6.EQ.'THENDO' .AND. EOC.EQ.1) MATCH=1\n                 END IF\n               END IF\n               IF (MATCH.EQ.0) THEN DO\n                 EXECUTE WRRD1\n               ELSE DO\nC                OUTPUT GOTO'S & CONTINUES FOR IF & WHILE\n                 LABEL=LABEL+1\n                 WRITE(FMT2,9)LABEL\n  9              FORMAT(I5)\n                 CCOL=J\n                 IF (CCOL.GT.64) THEN DO\n                   DO 87 I=CCOL,72\n  87               CARD(I)=' '\n                   WRITE(PUNCH,1)CARD1\n                   CARD1='     *GOTO'\n                   CCOL=11\n                 ELSE DO\n                   CARD(CCOL)='G'\n                   CARD(CCOL+1)='O'\n                   CARD(CCOL+2)='T'\n                   CARD(CCOL+3)='O'\n                   CCOL=CCOL+3\n                 END IF\n                 DO 86 I=1,5\n  86             CARD(CCOL+I)=FMT1(I)\n                 IF (J.LT.64) THEN DO\n                   II=CCOL+6\n                   DO 85 J=II,72\n  85               CARD(J)=' '\n                 END IF\n                 WRITE(PUNCH,1)CARD1\n                 LABEL=LABEL+1\n                 WRITE(PUNCH,2)LABEL\n                 WRITE(PUNCH,3)LABEL-1\n                 TOP=TOP+1\n                 LABEL1(TOP)=LABEL\n                 TYPE(TOP)=CODE\n                 IF (CODE.EQ.14) LABEL2(TOP)=LABEL-2\n                 IF (MATCH .EQ. 2) THEN DO\nC                  WHILE-EXECUTE OR IF-EXECUTE\n                   EXECUTE EXEC\n                   IF (CODE .EQ. 14) THEN DO\n                     EXECUTE ENDWH\n                   ELSE DO\n                     EXECUTE ENDIF\n                   END IF\n                 END IF\n                 EXECUTE RD2\n                 IF (CARD(6).NE.' ' .AND. CARD(6).NE.'0' .AND.\n     *               CARD(1).NE.'C') THEN DO\n                   PRINT,ERROR4\n                   RETURN\n                 END IF\n               END IF\n             ELSE DO\nC NOW WE HANDLE THE READS: CODES 15-18\n               IF (CODE .EQ. 18) THEN DO\nC                PICK UP FORMAT STMT. NO. & CHANGE CODE TO HANDLE\nC                LATER WITH VARIABLE FORMAT NO. READ STMT.\n                 PACK1=' '\n                 PCOL=1\n                 CODE=17\n                 CHAR=CARD(CCOL)\n                 I=TRAN(CHAR)\n                 WHILE (I.NE.4) DO\n                   IF (I.NE.9) THEN DO\n                     IF (I.NE.7) THEN DO\n                       PRINT,ERROR1\n                       RETURN\n                     ELSE DO\n                       PACKED(PCOL)=CHAR\n                       PCOL=PCOL+1\n                     END IF\n                   END IF\n                   CCOL=CCOL+1\n                   IF (CCOL.EQ.73) THEN DO\n                     PRINT,ERROR1\n                     RETURN\n                   END IF\n                   CHAR=CARD(CCOL)\n                   I=TRAN(CHAR)\n                 END WHILE\n                 IF (PCOL.GT.6) THEN DO\n                   PRINT, ERROR1\n                   RETURN\n                 END IF\n                 FMT2=PACK1\n                 RDEND=CCOL\n               END IF\n               I=1\n               EOS=0\nC              MOVE READ STMT. INTO BUFFERS TO BE MANIPULATED LATER\nC              IF 'ATENDDO' FOLLOWS\n               WHILE (EOS.EQ.0) DO\n                 BUFIN1(I)=CARD1\n                 EXECUTE RD1\n                 I=I+1\n                 IF (I.GT.21) THEN DO\n                   PRINT, ERROR2\n                   RETURN\n                 END IF\n               END WHILE\n               BUFFNO=I-1\n             END IF\n           END IF\n         END IF\nC      BEFORE WE PROCESS THE NEXT STMT., CHECK IF ERRSW HAS BEEN SET.\nC      IF SET, PRINT ERROR MSG. AND RETURN\n         IF(ERRSW.NE.0)THEN DO\n           PRINT,ERROR1\n           RETURN\n         END IF\n       END WHILE\nC      END OF TRANSLATION\nC      DUMP BUFFERS IF LAST STMT. A READ\n       IF (CODE.GE.15)THEN DO\n         DO 84 I=1,BUFFNO\n  84     WRITE(PUNCH,1)BUFIN1(I)\n       END IF\n       IF (TOP .GT. 1) THEN DO\n         PRINT, ERROR1\n       ELSE DO\n         PRINT,'*** TRANSLATION COMPLETED ***'\n       END IF\n       RETURN\nC\n       REMOTE BLOCK NPACK\n         IF (EOC.EQ.0) THEN DO\n           I=TRAN(CHAR)\n           WHILE (I.GE.7 .AND. EOC.EQ.0) DO\n             IF (I.NE.9) THEN DO\n               PACKED(PCOL)=CHAR\n               PCOL=PCOL+1\n             END IF\n             CCOL=CCOL+1\n             IF (CCOL.EQ.73) THEN DO\n               EOC=1\n             ELSE DO\n               CHAR=CARD(CCOL)\n               I=TRAN(CHAR)\n             END IF\n           END WHILE\n         END IF\n       END BLOCK NPACK\nC\n       REMOTE BLOCK WRRD1\n         EOS=0\n         WHILE (EOS.EQ.0) DO\n           WRITE(PUNCH,1)CARD1\n           EXECUTE RD1\n         END WHILE\n       END BLOCK WRRD1\nC\n       REMOTE BLOCK WRRD2\n         WRITE(PUNCH,1)CARD1\n         EXECUTE RD2\n         IF (CARD(6).EQ.' '.OR.CARD(6).EQ.'0'.OR.\n     *       CARD(1).EQ.'C') THEN DO\n           PRINT, ERROR1\n           RETURN\n         END IF\n       END BLOCK WRRD2\nC\n       REMOTE BLOCK RD1\n         READ(DECK,1)CARD1\n         AT END DO\n           EOS=1\n           EOF=1\n         END AT END\n         IF (CARD(6).EQ.' ' .OR. CARD(6).EQ.'0' .OR.\n     *       CARD(1).EQ.'C') EOS=1\n       END BLOCK RD1\nC\n       REMOTE BLOCK RD2\n         READ(DECK,1)CARD1\n         AT END DO\n           EOF=1\n           CARD(6)=' '\n         END AT END\n       END BLOCK RD2\nC\n       REMOTE BLOCK XITCAS\n         I=TOP\n         FOUND=0\nC        FIND DO CASE ENTRY\n         WHILE (FOUND.EQ.0) DO\n           IF (TYPE(I).EQ.5) FOUND=1\n           I=I-1\n         END WHILE\nC        GENERATE EXIT GOTO FOR END OF CASE BLOCK\n         WRITE(PUNCH,2)LABEL1(I)\n       END BLOCK XITCAS\nC\n       REMOTE BLOCK CGOTO\n         CARD1=' '\n         I=I+1\nC        CONSTRUCT COMPUTED GOTO WITH DOCASE INDEX VAR.\n         WRITE(CGOTO,4)LABEL1(I),LABEL2(I)\n 4       FORMAT(I5,' GOTO(',I5)\n         NOLBLS=TOP-I\n         N=0\n         J=I+1\nC        WORK THROUGH STACK GETTING END CASE ENTRY LABELS\nC        AND FILLING IN GOTO LIST\n         WHILE (NOLBLS.GT.0) DO\n           IF (NOLBLS.LE.8) THEN DO\n             N=NOLBLS\n             NOLBLS=0\n           ELSE DO\n             N=8\n             NOLBLS=NOLBLS-8\n           END IF\n           NN=J+N-1\n           WRITE(CGOTO1,5)(LABEL1(K),K=J,NN)\n 5         FORMAT(8(',',I5))\n           J=NN+1\n           IF (NOLBLS.NE.0) THEN DO\n             WRITE(PUNCH,1)CARD1\n             CARD1=' '\n             CARD(6)='*'\n           END IF\n         END WHILE\n         CCOL=N*6+17\n         CARD(CCOL)=')'\n         CARD(CCOL+1)=','\n         DO 97 K=1,4\n  97     CARD(CCOL+K+1)=CASIN1(K,I-1)\n         CARD(CCOL+6)=CASIN2(1,I-1)\n         CARD(CCOL+7)=CASIN2(2,I-1)\n         WRITE(PUNCH,1)CARD1\n         I=I-1\n       END BLOCK CGOTO\nC\n       REMOTE BLOCK ENDIF\nC        'ENDIF' - TOP MUST BE 'IF-THEN' OR 'ELSEDO'\n         IF (TYPE(TOP).NE.13 .AND. TYPE(TOP).NE.1) THEN DO\n           ERRSW=1\n         ELSE DO\n           WRITE(PUNCH,3)LABEL1(TOP)\n           TOP=TOP-1\n         END IF\n       END BLOCK ENDIF\nC\n       REMOTE BLOCK ENDWH\nC        'ENDWHILE' - TOP MUST BE 'WHILE-DO'\n         IF (TYPE(TOP).NE.14) THEN DO\n           ERRSW=1\n         ELSE DO\n           WRITE(PUNCH,2)LABEL2(TOP)\n           WRITE(PUNCH,3)LABEL1(TOP)\n           TOP=TOP-1\n         END IF\n       END BLOCK ENDWH\nC\n       REMOTE BLOCK EXEC\n         IF (EOC.EQ.0) THEN DO\n           ERRSW=1\n         ELSE DO\n           LENGTH=PCOL-14\n           IF (LENGTH.LT.5) THEN DO\n             DO 79 I=PCOL,18\n 79          PACKED(I)=' '\n           END IF\n           BLKNM1(1)='$'\n           DO 78 I=2,6\n 78        BLKNM1(I)=PACKED(12+I)\n           EXECUTE NMSRCH\n           IF (I.GT.NTOP) THEN DO\n             NTOP=I\n             LABEL=LABEL+1\n             STRTNO(1,I)=LABEL\n             STRTNO(2,I)=RTOP+1\n           END IF\n           LABEL=LABEL+1\n           RTOP=RTOP+1\n           RETRNS(1,RTOP)=LABEL\n           IF (STRTNO(2,I).EQ.RTOP) THEN DO\n             RETRNS(2,RTOP)=0\n           ELSE DO\n             RETRNS(2,RTOP)=STRTNO(2,I)\n             STRTNO(2,I)=RTOP\n           END IF\nC          IF STMT. NO. ON EXECUTE, GENERATE A CONTINUE\n           IF (CODE.EQ.9 .AND. STNO.NE.' ') WRITE(PUNCH,12)STNO\n  12       FORMAT(A5,' CONTINUE')\nC          GENERATE ASSIGN, GOTO AND RETURN STMT. NO.\n           WRITE(PUNCH,8)LABEL,BLKNAM\n           WRITE(PUNCH,2)STRTNO(1,I)\n           WRITE(PUNCH,3)LABEL\n 8         FORMAT(6X,'ASSIGN ',I5,' TO ',A6)\n         END IF\n       END BLOCK EXEC\nC\n       REMOTE BLOCK NMSRCH\n         BNAME(NTOP+1)=BLKNAM\n         I=1\n         WHILE(BLKNAM.NE.BNAME(I))DO\n           I=I+1\n         END WHILE\n       END BLOCK NMSRCH\n      END\n./ ADD NAME=UNPACK   0100-80001-80001-1200-00031-00031-00000-WATLIB  00\n      SUBROUTINE     U N P A C K   (JNUNIT,JOUT)\nCOPYRIGHT 1970   UNIVERSITY OF WATERLOO\n      IMPLICIT INTEGER (A-Z);   CHARACTER IN72*7\n     *2,OUT72*72,IN(72),OUT(72),IN15*5,OUT15*5,IN6,OUT6,SEMI/Z5E/,COLON/\n     *Z7A/,BLANK/Z40/;EQUIVALENCE(IN72,IN,IN15),(IN(6),IN6),(OUT72,OUT,O\n     *UT15),(OUT(6),OUT6);COMMON/UNPKRD/INUNIT,I,IN;COMMON/UNPKPN/NOUT,S\n     *EQNCE,O,OUT72;O=7;OUT72=BLANK;INUNIT=JNUNIT;NOUT=JOUT;SEQNCE=0;\n 1    CALLREAD(&2);2:OUT15=IN15;O=7;10:IF(IN(I).EQ.SEMI)GOTO40;IF(IN(I).\n     *EQ.BLANK.AND.O.EQ.7)GOTO11;20:OUT(O)=IN(I);I=I+1;IF(I.LT.73)GOTO25\n12    CALLREAD(&2);IF(IN6.NE.BLANK)GOTO25;CALLPUNCH;GOTO2;11:I=I+1;IF(I.\n     *LT.73)GOTO10;GOTO12;25:O=O+1;IF(O.NE.73)GOTO10;CALLPUNCH;IF(IN(I).\n     *EQ.SEMI)GOTO50;OUT6='*';30:O=7;GOTO20;40:CALLPUNCH;50:I=I+1;IF(I.E\n     *Q.73)GOTO1;IF(IN(I).EQ.BLANK)GOTO50;IF(IN(I).LT.'0')GOTO30;O=1;\n60    OUT(O)=IN(I);O=O+1;I=I+1;IF(I.EQ.73)CALLREAD(&2);IF(IN(I).NE.COLON\n     *)GOTO60;O=7;61:I=I+1;IF(I.EQ.73)CALLREAD(&2);IF(IN(I).EQ.BLANK)GOT\n     *O61;GOTO20;END;SUBROUTINEREAD(*);CHARACTERIN72*72,IN(72),IN1,OUT72\n     **72,BLANK/Z40/;COMMON/UNPKRD/INUNIT,I,IN;COMMON/UNPKPN/NOUT,JSEQ,I\n     *O,OUT72;EQUIVALENCE(IN72,IN,IN1);IND=0;1:READ(INUNIT,10,END=9)IN72\n      IF(IN1.NE.'C')GOTO5;IND=1;IF(IO.NE.7)CALLPUNCH;OUT72=IN72;CALLPUNC\n     *H;GOTO1;5:I=7;IF(IND.EQ.1)RETURN1;RETURN;9:IF(IO.NE.7)CALLPUNCH;ST\n     *OP;10:FORMAT(A72)\n      END;SUBROUTINEPUNCH;CHARACTEROUT72*72,OUT(72),BLANK/Z40/;EQUIVALEN\n     *CE(OUT72,OUT);COMMON/UNPKPN/NOUT,JSEQ,IO,OUT72\nC\n      PRINT10,OUT72,JSEQ;WRITE(NOUT,11)OUT72,JSEQ\nC\n      JSEQ=JSEQ+1;IO=7;OUT72=BLANK;RETURN;10:FORMAT(' ',A72,'00000000',T\n     *74,I4)\n11    FORMAT(A72,'00000000',T73,I4)\n      END\n$ENTRY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WATTEST": {"ttr": 49930, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x18\\x03\\x9f\\x01\\x18\\x03\\x9f\\x14\\x04\\x00\\x18\\x00\\x18\\x00\\x00\\xe3\\xc5\\xe2\\xe3\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-02-08T00:00:00", "modifydate": "2018-02-08T14:04:53", "lines": 24, "newlines": 24, "modlines": 0, "user": "TESTJCL"}, "text": "//WATTEST JOB (SYS),'TEST WATFIV',CLASS=S,MSGCLASS=X\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//* THE INSTREAM PROCEDURE FOLLOWING WAS MODIFIED FROM THE PROCEDURE\n//* SUPPLIED IN WATFIV.PROCLIB TO CONFORM TO DATASET NAMING\n//* CONVENTION USED IN THE SYSTEM WHERE WATFIV WAS LOADED\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//WATFIVE PROC  PROG=WATFIV,LIB='WATFIV.FUNLIB',V='',VOL=PUB001,\n//      JB='WATFIV.JOBLIB',PFX='SYSO'\n//GO    EXEC   PGM=&PROG,REGION=150K\n//STEPLIB   DD  DSN=&PFX..&JB,DISP=SHR,UNIT=SYSDA,VOL=SER=&V.&VOL\n//WATLIB DD DSN=&PFX..&LIB,DCB=(RECFM=FB,LRECL=80,BLKSIZE=800),\n//          DISP=SHR,VOLUME=SER=&V.&VOL,UNIT=SYSDA\n//          DD  DSN=&PFX..WATFIV.WATLIB,DISP=SHR,\n//          VOL=SER=&V.&VOL,UNIT=SYSDA\n//FT01F001 DD SPACE=(TRK,(20,10)),DCB=(RECFM=VS,BLKSIZE=256),UNIT=SYSDA\n//FT02F001 DD SPACE=(TRK,(20,10)),DCB=(RECFM=VS,BLKSIZE=256),UNIT=SYSDA\n//FT03F001 DD SPACE=(TRK,(20,10)),DCB=(RECFM=VS,BLKSIZE=256),UNIT=SYSDA\n//FT04F001 DD SPACE=(TRK,(20,10)),DCB=(RECFM=VS,BLKSIZE=256),UNIT=SYSDA\n//FT05F001  DD  DDNAME=SYSIN\n//FT06F001  DD  SYSOUT=A,DCB=(RECFM=FA,BLKSIZE=133)\n//FT07F001  DD  SYSOUT=B\n//        PEND\n// EXEC WATFIVE\n//SYSIN DD DSN=SYSO.WATFIV.TESTS,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WATTEST$": {"ttr": 49932, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x002\\x01\\x19$\\x1f\\x01\\x19$\\x1f\\x15Q\\x00!\\x00\\x1a\\x00\\x00\\xe3\\xe3\\xe2\\xc4\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-08-29T00:00:00", "modifydate": "2019-08-29T15:51:32", "lines": 33, "newlines": 26, "modlines": 0, "user": "TTSDS"}, "text": "//WATTEST  JOB (ACCT),\n//             '                    ',\n//             CLASS=A,\n//             MSGCLASS=X,\n//             MSGLEVEL=(1,1),\n//             REGION=0M,\n//             NOTIFY=&SYSUID\n//WATFIVE PROC PROG=WATFIV,\n// LIB='WATFIV.FUNLIB',\n// JB='WATFIV.JOBLIB',\n// PFX=TTSDS\n//GO      EXEC PGM=&PROG\n//STEPLIB  DD DISP=SHR,DSN=&PFX..&JB\n//WATLIB   DD DISP=SHR,DSN=&PFX..&LIB\n//         DD DISP=SHR,DSN=&PFX..WATFIV.WATLIB\n//FT01F001 DD SPACE=(TRK,(20,10)),RECFM=VS,BLKSIZE=256,UNIT=SYSALLDA\n//FT02F001 DD SPACE=(TRK,(20,10)),RECFM=VS,BLKSIZE=256,UNIT=SYSALLDA\n//FT03F001 DD SPACE=(TRK,(20,10)),RECFM=VS,BLKSIZE=256,UNIT=SYSALLDA\n//FT04F001 DD SPACE=(TRK,(20,10)),RECFM=VS,BLKSIZE=256,UNIT=SYSALLDA\n//FT05F001 DD DDNAME=SYSIN\n//FT06F001 DD SYSOUT=*,RECFM=FA,BLKSIZE=133\n//FT07F001 DD SYSOUT=*\n// PEND\n//GO      EXEC WATFIVE\n//*YSIN    DD DISP=SHR,DSN=TTSDS.WATFIV.TESTS(TESTS)\n//FT05F001 DD *\n$JOB\nC$OPTIONS LIST,LIBLIST\n       CALL UNPACK(5,7)\nSTOP\nEND\n$ENTRY\n//         DD DISP=SHR,DSN=TTSDS.WATFIV.WATLIB(FIVPAK)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT973/FILE973.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT973", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}