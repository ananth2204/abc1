{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011817000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE348.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE348.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x05'", "DS1TRBAL": "b'\\xadt'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x8b\\x00\\x01\\x02\\x8b\\x00\\x04\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x99\\x04\\x1f\\x01\\x00$_\\x12B\\x00\\x17\\x00\\x05\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-02-10T00:00:00", "modifydate": "2000-09-01T12:42:00", "lines": 23, "newlines": 5, "modlines": 0, "user": "WSBG"}, "text": "This file comes from the MVS-UTIL Internet news forum, dated 12/01/98.\n  Included are an assembler program, and a REXX exec to copy members\n  of a partitioned dataset in alphabetical order.  Member IU981201\n  lists the entire day's thread.\n\nDate:    Tue, 1 Dec 1998 10:25:00 -0500\nFrom:    Edward Strauss <Edward.Strauss@FISC.COM>\nSubject: Re: Copying a PDS in alphabetical order\n\n   This is an assembler program that is called LISTER.\n\n\nDate:    Tue, 1 Dec 1998 12:21:57 -0600\nFrom:    \"John P. Kalinich\" <jkalinic@csc.com>\nSubject: Re: Copying a PDS in alphabetical order\n\n   If anyone is interested, I have the Rexx equivalent of\n   Edward's assembly language program to deblock a PDS\n   directory.  ---\n\n   This is a REXX exec that is called PDSDIR.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IU981201": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x983o\\x01\\x00$_\\x12C\\x01\\x86\\x01\\x86\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-12-02T00:00:00", "modifydate": "2000-09-01T12:43:00", "lines": 390, "newlines": 390, "modlines": 0, "user": "WSBG"}, "text": "Subj:   MVS-UTIL Digest - 30 Nov 1998 to 1 Dec 1998\nDate: 98-12-02 00:01:40 EST\nFrom: LISTSERV@VM.MARIST.EDU (Automatic digest processor)\nSender: MVS-UTIL@VM.MARIST.EDU (MVS-UTIL MVS Utilities)\nReply-to: MVS-UTIL@VM.MARIST.EDU (MVS-UTIL MVS Utilities)\nTo: MVS-UTIL@VM.MARIST.EDU (Recipients of MVS-UTIL digests)\n\nThere are 5 messages totalling 357 lines in this issue.\n\nTopics of the day:\n\n  1. Copying a PDS in alphabetical order\n  2. Copying a PDS in alphabetica (4)\n\n----------------------------------------------------------------------\n\nDate:    Tue, 1 Dec 1998 09:26:42 -0500\nFrom:    Les von Holstein {Dallas} <LVONHOLS@SCTCORP.COM>\nSubject: Re: Copying a PDS in alphabetical order\n\nThanks to all of you who replied. I ended up using PDSMAN's utility\nPDSM20 to generate SELECT MEMBER=$$$$$$$$ statements. These control\nstatements were then used as input to IEBCOPY to re-copy my PDS to\na new one. Since the control statements were generated alphabetically\nthe new PDS could be accessed in alphabetical order.\n\n------------------------------------------------------------------------\nLes von Holstein - SCT Dallas             Internet: LVONHOLS@SCTCORP.COM\nPhone: (972)383-7611 FAX: (972)387-8991 Voice Mail: (800)541-5330 x 4742\n------------------------------------------------------------------------\n\n------------------------------\n\nDate:    Tue, 1 Dec 1998 10:25:00 -0500\nFrom:    Edward Strauss <Edward.Strauss@FISC.COM>\nSubject: Re: Copying a PDS in alphabetica\n\nFor those of you without PDSMAN, here is a program that reads a\ndirectory and writes out the member names in 80-byte records.\n\n\nLISTER   CSECT                                                          000100\n         STM   R14,R12,12(R13)                                          000140\n         LR    12,15                                                    000150\n         USING LISTER,R12                                               000160\n         ST    R13,OLD13                                                000170\n         LA    R13,SAVEAREA                                             000180\n         ST    R13,NEW13                                                000190\n*                                                                       000210\nSS0102   DS    0H                 OPEN INFILE AND OUTFILE               000300\n         OPEN  (INFILE,(INPUT))      INPUT PDS                          000400\n         OPEN  (OUTFILE,(OUTPUT))    OUTPUT SEQUENTIAL FILE             000500\n         EJECT                                                          000600\n*                                                                       000700\n**********************************************************************  000800\n*                                                                       000900\n*   SS02   (READ BLOCK)                                                 001000\n*                                                                       001100\n**********************************************************************  001200\n*                                                                       001300\nSS0201   DS    0H                 ISSUE READ AND CHECK                  001400\n         READ  DIRDECB,SF,INFILE,DIRBLK,264                             001500\n         CHECK DIRDECB                                                  001600\n*                                                                       001700\nSS0202   DS    0H                 SET END OF BLOCK ADDRESS              001800\n         SR    R1,R1                                                    001900\n         ICM   R1,3,DIRBLK+8                                            002000\n         A     R1,=AL4(DIRBLK)                                          002100\n         LA    R1,8(R1)                                                 002200\n         ST    R1,ENDIRBLK                                              002300\n*                                                                       002400\nSS0203   DS    0H                 POINT TO 1ST ENTRY                    002500\n         LA    R3,DIRBLK+10                                             002600\n         EJECT                                                          002700\n*                                                                       002800\n**********************************************************************  002900\n*                                                                       003000\n*   SS03   (PROCESS ENTRY)                                              003100\n*                                                                       003200\n**********************************************************************  003300\n*                                                                       003400\nSS0301   DS    0H                 IS MEM NAME X'FF'                     003500\n*                                 (Y) SS0501 (READ COMPLETE)            003600\n*                                 (N) SS0302                            003700\n         CLC   0(8,R3),=8X'FF'                                          003800\n         BE    SS0501             YES                                   003900\n*        B     SS0302             NO                                    003910\n*                                                                       003920\nSS0302   DS    0H                 WRITE NAME                            003930\n         MVC   OUTAREA(80),=80C' '                                      003940\n         MVC   OUTAREA(8),0(R3)                                         003960\n         PUT   OUTFILE,OUTAREA                                          003980\n         EJECT                                                          004035\n*                                                                       004036\n*********************************************************************   004037\n*                                                                       004038\n*   SS04   (EOP FOR AN ENTRY)                                           004039\n*                                                                       004040\n*********************************************************************   004050\n*                                                                       004060\nSS0401   DS    0H                 POINT TO NEXT DIR ENTRY               004070\n         IC    R1,11(R3)                                                004080\n         SLL   R1,27                                                    004090\n         SRL   R1,26                                                    004100\n         AR    R3,R1                                                    004200\n         LA    R3,12(R3)                                                004300\n*                                                                       004400\nSS0402   DS    0H                 PAST BLOCK END ?                      004500\n*                                 (Y) SS0201 (READ BLOCK)               004600\n*                                 (N) SS0403                            004700\n         C     R3,ENDIRBLK                                              004800\n         BNL   SS0201             YES                                   004900\n*        B     SS0403             NO                                    005000\n*                                                                       005100\nSS0403   DS    0H                 IS MEM NAME X'FF' ?                   005200\n*                                 (Y) SS0501 (READ COMPLETE)            005300\n*                                 (N) SS0301 (PROCESS ENTRY)            005400\n         CLC   0(8,R3),=8X'FF'                                          005500\n         BNE   SS0301             NO                                    005600\n*        B     SS0501             YES                                   005700\n         EJECT                                                          005800\n*                                                                       005900\n*********************************************************************** 006000\n*                                                                       006100\n*   SS05   (READ COMPLETE)                                              006200\n*                                                                       006300\n*********************************************************************** 006400\n*                                                                       006500\nSS0501   DS    0H                 CLOSE FILES                           006600\n         CLOSE (INFILE)                                                 006700\n         CLOSE (OUTFILE)                                                006800\n*                                                                       006900\nSS0502   DS    0H                 RETURN TO CALLER                      007000\n         L     R13,OLD13                                                007120\n         L     R14,R12(R13)                                             007130\n         LM    R0,R12,20(R13)                                           007140\n         BR    14                                                       007150\n*                                                                       007200\nINFILE   DCB   DDNAME=INFILE,MACRF=R,DSORG=PO,LRECL=256,BLKSIZE=256,   X008600\n               KEYLEN=8,EODAD=SS0501                                    008700\nOUTFILE  DCB   DDNAME=OUTFILE,MACRF=PM,DSORG=PS,LRECL=80                008900\n*                                                                       008901\n         DS    0F                                                       008902\nENDIRBLK DS    XL4                A(DIRECTORY BLOCK END)                008903\nSAVEAREA DS    F                                                        008921\nOLD13    DS    F                                                        008930\nNEW13    DS    F                                                        008940\n         DS    15F                                                      008950\nOUTAREA  DS    CL80                                                     008960\nDIRBLK   DS    CL264              DIRECTORY BLOCK READ HERE             009000\n         LTORG                                                          009300\nR0       EQU   0                                                        009330\nR1       EQU   1                                                        009340\nR2       EQU   2                                                        009350\nR3       EQU   3                                                        009360\nR4       EQU   4                                                        009370\nR5       EQU   5                                                        009380\nR6       EQU   6                                                        009390\nR7       EQU   7                                                        009391\nR8       EQU   8                                                        009392\nR9       EQU   9                                                        009393\nR10      EQU   10                                                       009394\nR11      EQU   11                                                       009395\nR12      EQU   12                                                       009396\nR13      EQU   13                                                       009397\nR14      EQU   14                                                       009398\nR15      EQU   15                                                       009399\n         END                                                            009400\n\n------------------------------\n\nDate:    Tue, 1 Dec 1998 12:21:57 -0600\nFrom:    \"John P. Kalinich\" <jkalinic@csc.com>\nSubject: Re: Copying a PDS in alphabetica\n\nIf anyone is interested, I have the Rexx equivalent of Edward's assembly\nlanguage program to deblock a PDS directory.\n---\n\nAt 10:25 AM 12/1/98 -0500, Edward Strauss wrote:\n>For those of you without PDSMAN, here is a program that reads a\n>directory and writes out the member names in 80-byte records.\n>\n\n------------------------------\n\nDate:    Tue, 1 Dec 1998 11:38:14 -0800\nFrom:    Ted Gardener <tgardener@MAIL.ARC.NASA.GOV>\nSubject: Re: Copying a PDS in alphabetica\n\nThis is a multi-part message in MIME format.\n--------------D5AFF6663CC68CD2E5372544\nContent-Type: text/plain; charset=us-ascii\nContent-Transfer-Encoding: 7bit\n\nI'm interested.\n\n\"John P. Kalinich\" wrote:\n\n> If anyone is interested, I have the Rexx equivalent of Edward's assembly\n> language program to deblock a PDS directory.\n> ---\n>\n> At 10:25 AM 12/1/98 -0500, Edward Strauss wrote:\n> >For those of you without PDSMAN, here is a program that reads a\n> >directory and writes out the member names in 80-byte records.\n> >\n\n--------------D5AFF6663CC68CD2E5372544\nContent-Type: text/x-vcard; charset=us-ascii;\n name=\"tgardener.vcf\"\nContent-Transfer-Encoding: 7bit\nContent-Description: Card for Ted Gardener\nContent-Disposition: attachment;\n filename=\"tgardener.vcf\"\n\nbegin:vcard\nn:Gardener;Ted\ntel;cell:(408)505-9123\ntel;fax:(650)965-0566\ntel;home:(650)965-7535\ntel;work:(650)604-6953\nx-mozilla-html:TRUE\norg:Recom Technologies;BSG\nversion:2.1\nemail;internet:tgardener@mail.arc.nasa.gov\ntitle:Year 2000 Programmer Analyst\nadr;quoted-printable:;;Recom Technologies=0D=0ANASA - Ames Research Center=0D=0A\nx-mozilla-cpt:;19184\nfn:Ted Gardener\nend:vcard\n\n--------------D5AFF6663CC68CD2E5372544--\n\n------------------------------\n\nDate:    Tue, 1 Dec 1998 14:49:16 -0600\nFrom:    \"John P. Kalinich\" <jkalinic@csc.com>\nSubject: Re: Copying a PDS in alphabetica\n\n--=====================_912566956==_\nContent-Type: text/plain; charset=\"us-ascii\"\n\nAt 11:38 AM 12/1/98 -0800, Ted Gardener wrote:\n>I'm interested.\n>\n>\"John P. Kalinich\" wrote:\n>\n>> If anyone is interested, I have the Rexx equivalent of Edward's assembly\n>> language program to deblock a PDS directory.\n>> ---\n>>\n>> At 10:25 AM 12/1/98 -0500, Edward Strauss wrote:\n>> >For those of you without PDSMAN, here is a program that reads a\n>> >directory and writes out the member names in 80-byte records.\n>> >\n>\n>Attachment Converted: \"c:\\eudora\\attach\\tgardener.vcf\"\n>\n--=====================_912566956==_\nContent-Type: text/plain; charset=\"us-ascii\"\nContent-Disposition: attachment; filename=\"Pdsdir.rex\"\n\n/*% NOCOMMENT REXX */\nTRACE\n/*  For batch, use the following JCL and comment out the TSO\n    ALLOCATE sequence:\n\n    //REXX     EXEC  PGM=IRXJCL,PARM='name.of.rexx.exec'\n    //SYSEXEC  DD  DSN=your.rexx.library,DISP=SHR\n    //SYSTSPRT DD  SYSOUT=*\n    //SYSTSIN  DD  DUMMY\n    //PDS      DD  DSN=your.pds.name,DISP=SHR,\n    //             DCB=(RECFM=F,DSORG=PS,LRECL=256,BLKSIZE=256)\n\n*/\n\n/*  For TSO, use the following ALLOCATE sequence:   */\n\nARG dsn\nADDRESS TSO\n\"ALLOC F(PDS) DA(\"dsn\") SHR REUSE\",    /* pds directory */\n\"  RECFM(F) DSORG(PS) LRECL(256) BLKSIZE(256)\"\n\n/*-------------------------------------------------------------------*/\n\nmainline:\nSAY ' Name                VV.MM Created   Changed    Size',\n    ' Init   Mod   ID'\n\"EXECIO * DISKR PDS (STEM DIR. FINIS\"  /* read pds directory */\nDO blk = 1 to dir.0\n  usedbytes = C2D(SUBSTR(dir.blk,1,2))\n  index = 3                            /* skip past used bytes */\n  DO WHILE index < usedbytes\n    IF SUBSTR(dir.blk,index,8) = 'FFFFFFFFFFFFFFFF'x THEN\n      LEAVE blk\n    pds2name = SUBSTR(dir.blk,index,8) /* member name */\n    index = index + 11                 /* skip past name and ttr */\n    pds2indc = SUBSTR(dir.blk,index,1)\n    len = BITAND(pds2indc,'1F'x)       /* isolate user data length */\n    userdata = C2D(len) * 2            /* halfwords to bytes */\n    IF userdata = 30 THEN              /* ISPF statistics? */\n      DO\n        vv = c2d(SUBSTR(dir.blk,index+1,1))\n        mm = c2d(SUBSTR(dir.blk,index+2,1))\n        created = p2d(SUBSTR(dir.blk,index+6,3))\n        lastmod = p2d(SUBSTR(dir.blk,index+10,3))\n        time = p2d(SUBSTR(dir.blk,index+13,3))\n        time = SUBSTR(time,1,2)||':'||SUBSTR(time,3,2)\n        size = c2d(SUBSTR(dir.blk,index+15,2))\n        init = c2d(SUBSTR(dir.blk,index+17,2))\n        mod = c2d(SUBSTR(dir.blk,index+19,2))\n        id = SUBSTR(dir.blk,index+21,8)\n        SAY pds2name,\n            '           ',\n            RIGHT(vv,2,0)||'.'||RIGHT(mm,2,0),\n            created,\n            ' ',\n            lastmod,\n            time,\n            FORMAT(size,5),\n            FORMAT(init,5),\n            FORMAT(mod,5),\n            id\n      END\n    ELSE\n      SAY pds2name\n    index = index + userdata + 1       /* skip past user data */\n  END\nEND\nEXIT\n\np2d: procedure\n/* rexx      convert packed decimal to number */\n/* Michael Pollak, c/o RWG, Raepplenstr. 17, D-70191 Stuttgart */\n/* Tel: +49-711-2012-387                                       */\n/* Fax: +49-711-2012-502        e-mail: daapm@rwg.de           */\nparse arg number_p\nerg = c2x(number_p)\nsign = right(erg,1)\nnumber = left(erg,length(erg)-1)\nif sign = 'D' then\n   return '-'||number\nelse\n   return number\n\nd2p: procedure\n/* rexx   convert number to packed decimal  */\n/* Michael Pollak, c/o RWG, Raepplenstr. 17, D-70191 Stuttgart */\n/* Tel: +49-711-2012-387                                       */\n/* Fax: +49-711-2012-502        e-mail: daapm@rwg.de           */\narg number\nif datatype(number) \u00ac= 'NUM' then\n   return ''\nif number < 0 then\n   interpret \"number_p = '\"abs(number)\"D'x\"\nelse\n   interpret \"number_p = '\"number\"C'x\"\nreturn number_p\n\n/* J. KALINICH, X4521 */\n/* EXEC TO DEBLOCK PDS DIRECTORY                                      */\n\n--=====================_912566956==_--\n\n------------------------------\n\nEnd of MVS-UTIL Digest - 30 Nov 1998 to 1 Dec 1998\n**************************************************\n<FONT COLOR=\"#0f0f0f\" BACK=\"#fffffe\" SIZE=3>\n\n----------------------- Headers --------------------------------\nReturn-Path: <owner-MVS-UTIL@VM.MARIST.EDU>\nReceived: from  rly-za03.mx.aol.com (rly-za03.mail.aol.com \u00dd172.31.36.99\u00a8) by ai\nReceived: from VM.MARIST.EDU (vm.marist.edu \u00dd148.100.1.2\u00a8)\n   by rly-za03.mx.aol.com (8.8.8/8.8.5/AOL-4.0.0)\n   with SMTP id AAA07349 for <SBGOLOB@AOL.COM>;\n   Wed, 2 Dec 1998 00:01:36 -0500 (EST)\nMessage-Id: <199812020501.AAA07349@rly-za03.mx.aol.com>\nReceived: from VM.MARIST.EDU by VM.MARIST.EDU (IBM VM SMTP V2R3)\n   with BSMTP id 3796; Wed, 02 Dec 98 00:02:21 EST\nReceived: from VM.MARIST.EDU (NJE origin LISTSERV@MARIST) by VM.MARIST.EDU (LMai\nDate:     Wed, 2 Dec 1998 00:02:17 -0500\nReply-To: MVS-UTIL MVS Utilities <MVS-UTIL@VM.MARIST.EDU>\nSender: MVS-UTIL MVS Utilities <MVS-UTIL@VM.MARIST.EDU>\nFrom: Automatic digest processor <LISTSERV@VM.MARIST.EDU>\nSubject:  MVS-UTIL Digest - 30 Nov 1998 to 1 Dec 1998\nTo: Recipients of MVS-UTIL digests <MVS-UTIL@VM.MARIST.EDU>\n\n</PRE></HTML>\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTER": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x983o\\x00\\x983o\\x11@\\x00\\x7f\\x00\\x88\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-12-02T00:00:00", "modifydate": "1998-12-02T11:40:00", "lines": 127, "newlines": 136, "modlines": 0, "user": "SBGOLOB"}, "text": "LISTER   CSECT\n         STM   R14,R12,12(R13)\n         LR    12,15\n         USING LISTER,R12\n         ST    R13,OLD13\n         LA    R13,SAVEAREA\n         ST    R13,NEW13\n*\nSS0102   DS    0H                 OPEN INFILE AND OUTFILE\n         OPEN  (INFILE,(INPUT))      INPUT PDS\n         OPEN  (OUTFILE,(OUTPUT))    OUTPUT SEQUENTIAL FILE\n         EJECT\n*\n**********************************************************************\n*\n*   SS02   (READ BLOCK)\n*\n**********************************************************************\n*\nSS0201   DS    0H                 ISSUE READ AND CHECK\n         READ  DIRDECB,SF,INFILE,DIRBLK,264\n         CHECK DIRDECB\n*\nSS0202   DS    0H                 SET END OF BLOCK ADDRESS\n         SR    R1,R1\n         ICM   R1,3,DIRBLK+8\n         A     R1,=AL4(DIRBLK)\n         LA    R1,8(R1)\n         ST    R1,ENDIRBLK\n*\nSS0203   DS    0H                 POINT TO 1ST ENTRY\n         LA    R3,DIRBLK+10\n         EJECT\n*\n**********************************************************************\n*\n*   SS03   (PROCESS ENTRY)\n*\n**********************************************************************\n*\nSS0301   DS    0H                 IS MEM NAME X'FF'\n*                                 (Y) SS0501 (READ COMPLETE)\n*                                 (N) SS0302\n         CLC   0(8,R3),=8X'FF'\n         BE    SS0501             YES\n*        B     SS0302             NO\n*\nSS0302   DS    0H                 WRITE NAME\n         MVC   OUTAREA(80),=80C' '\n         MVC   OUTAREA(8),0(R3)\n         PUT   OUTFILE,OUTAREA\n         EJECT\n*\n*********************************************************************\n*\n*   SS04   (EOP FOR AN ENTRY)\n*\n*********************************************************************\n*\nSS0401   DS    0H                 POINT TO NEXT DIR ENTRY\n         IC    R1,11(R3)\n         SLL   R1,27\n         SRL   R1,26\n         AR    R3,R1\n         LA    R3,12(R3)\n*\nSS0402   DS    0H                 PAST BLOCK END ?\n*                                 (Y) SS0201 (READ BLOCK)\n*                                 (N) SS0403\n         C     R3,ENDIRBLK\n         BNL   SS0201             YES\n*        B     SS0403             NO\n*\nSS0403   DS    0H                 IS MEM NAME X'FF' ?\n*                                 (Y) SS0501 (READ COMPLETE)\n*                                 (N) SS0301 (PROCESS ENTRY)\n         CLC   0(8,R3),=8X'FF'\n         BNE   SS0301             NO\n*        B     SS0501             YES\n         EJECT\n*\n***********************************************************************\n*\n*   SS05   (READ COMPLETE)\n*\n***********************************************************************\n*\nSS0501   DS    0H                 CLOSE FILES\n         CLOSE (INFILE)\n         CLOSE (OUTFILE)\n*\nSS0502   DS    0H                 RETURN TO CALLER\n         L     R13,OLD13\n         L     R14,R12(R13)\n         LM    R0,R12,20(R13)\n         BR    14\n*\nINFILE   DCB   DDNAME=INFILE,MACRF=R,DSORG=PO,LRECL=256,BLKSIZE=256,   X\n               KEYLEN=8,EODAD=SS0501\nOUTFILE  DCB   DDNAME=OUTFILE,MACRF=PM,DSORG=PS,LRECL=80\n*\n         DS    0F\nENDIRBLK DS    XL4                A(DIRECTORY BLOCK END)\nSAVEAREA DS    F\nOLD13    DS    F\nNEW13    DS    F\n         DS    15F\nOUTAREA  DS    CL80\nDIRBLK   DS    CL264              DIRECTORY BLOCK READ HERE\n         LTORG\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTER#": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x983o\\x00\\x983o\\x11@\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-12-02T00:00:00", "modifydate": "1998-12-02T11:40:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "\nDate:    Tue, 1 Dec 1998 10:25:00 -0500\nFrom:    Edward Strauss <Edward.Strauss@FISC.COM>\nSubject: Re: Copying a PDS in alphabetica\n\nFor those of you without PDSMAN, here is a program that reads a\ndirectory and writes out the member names in 80-byte records.\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDSDIR": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x00\\x00\\x96(?\\x00\\x992o\\t\\x02\\x00j\\x00V\\x00\\x00\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1996-10-09T00:00:00", "modifydate": "1999-11-22T09:02:00", "lines": 106, "newlines": 86, "modlines": 0, "user": "TRIDJK"}, "text": "/*% NOCOMMENT REXX */\nTRACE\n/*  For batch, use the following JCL and comment out the TSO\n    ALLOCATE sequence:\n\n    //REXX     EXEC  PGM=IRXJCL,PARM='name.of.rexx.exec'\n    //SYSEXEC  DD  DSN=your.rexx.library,DISP=SHR\n    //SYSTSPRT DD  SYSOUT=*\n    //SYSTSIN  DD  DUMMY\n    //PDS      DD  DSN=your.pds.name,DISP=SHR,\n    //             DCB=(RECFM=F,DSORG=PS,LRECL=256,BLKSIZE=256)\n\n*/\n\n/*  For TSO, use the following ALLOCATE sequence:   */\n\nARG dsn\nADDRESS TSO\n\"ALLOC F(PDS) DA(\"dsn\") SHR REUSE\",    /* pds directory */\n\"  RECFM(F) DSORG(PS) LRECL(256) BLKSIZE(256)\"\n\n/*-------------------------------------------------------------------*/\n\nmainline:\nSAY ' Name                VV MM  Created     Changed     Size',\n    ' Init   Mod   ID'\n\"EXECIO * DISKR PDS (STEM DIR. FINIS\"  /* read pds directory */\nDO blk = 1 to dir.0\n  usedbytes = C2D(SUBSTR(dir.blk,1,2))\n  index = 3                            /* skip past used bytes */\n  DO WHILE index < usedbytes\n    IF SUBSTR(dir.blk,index,8) = 'FFFFFFFFFFFFFFFF'x THEN\n      LEAVE blk\n    pds2name = SUBSTR(dir.blk,index,8) /* member name */\n    index = index + 11                 /* skip past name and ttr */\n    pds2indc = SUBSTR(dir.blk,index,1)\n    len = BITAND(pds2indc,'1F'x)       /* isolate user data length */\n    userdata = C2D(len) * 2            /* halfwords to bytes */\n    IF userdata = 30 &,                /* ISPF statistics? */\n       BITAND(pds2indc,'80'x) /= '80'x THEN  /* no alias */\n      DO\n        vv = c2d(SUBSTR(dir.blk,index+1,1))\n        mm = c2d(SUBSTR(dir.blk,index+2,1))\n        crdate = DATE('O',p2d(SUBSTR(dir.blk,index+6,3)),'J')\n        lmdate = DATE('O',p2d(SUBSTR(dir.blk,index+10,3)),'J')\n        time = p2d(SUBSTR(dir.blk,index+13,3))\n        time = SUBSTR(time,1,2)||':'||SUBSTR(time,3,2)\n        size = c2d(SUBSTR(dir.blk,index+15,2))\n        init = c2d(SUBSTR(dir.blk,index+17,2))\n        mod = c2d(SUBSTR(dir.blk,index+19,2))\n        id = SUBSTR(dir.blk,index+21,8)\n        SAY pds2name,\n            '           ',\n            RIGHT(vv,2,0)||'.'||RIGHT(mm,2,0),\n            crdate,\n            lmdate,\n            time,\n            FORMAT(size,5),\n            FORMAT(init,5),\n            FORMAT(mod,5),\n            id\n      END\n    ELSE\n      DO\n        IF BITAND(pds2indc,'80'x) = '80'x THEN\n          SAY pds2name,\n              '           ',\n              'ALIAS'\n        ELSE\n          SAY pds2name\n      END\n    index = index + userdata + 1       /* skip past user data */\n  END\nEND\nEXIT\n\np2d: procedure\n/* rexx      convert packed decimal to number */\n/* Michael Pollak, c/o RWG, Raepplenstr. 17, D-70191 Stuttgart */\n/* Tel: +49-711-2012-387                                       */\n/* Fax: +49-711-2012-502        e-mail: daapm@rwg.de           */\nparse arg number_p\nerg = c2x(number_p)\nsign = right(erg,1)\nnumber = left(erg,length(erg)-1)\nif sign = 'D' then\n   return '-'||number\nelse\n   return number\n\nd2p: procedure\n/* rexx   convert number to packed decimal  */\n/* Michael Pollak, c/o RWG, Raepplenstr. 17, D-70191 Stuttgart */\n/* Tel: +49-711-2012-387                                       */\n/* Fax: +49-711-2012-502        e-mail: daapm@rwg.de           */\narg number\nif datatype(number) \u00ac= 'NUM' then\n   return ''\nif number < 0 then\n   interpret \"number_p = '\"abs(number)\"D'x\"\nelse\n   interpret \"number_p = '\"number\"C'x\"\nreturn number_p\n\n/* J. KALINICH, X4521 */\n/* EXEC TO DEBLOCK PDS DIRECTORY                                      */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSDIR#": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x983o\\x01\\x00$_\\x12D\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-12-02T00:00:00", "modifydate": "2000-09-01T12:44:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "WSBG"}, "text": "\nDate:    Tue, 1 Dec 1998 14:49:16 -0600\nFrom:    \"John P. Kalinich\" <jkalinic@csc.com>\nSubject: Re: Copying a PDS in alphabetica\n\n--=====================_912566956==_\nContent-Type: text/plain; charset=\"us-ascii\"\n\nAt 11:38 AM 12/1/98 -0800, Ted Gardener wrote:\n>I'm interested.\n>\n>\"John P. Kalinich\" wrote:\n>\n>> If anyone is interested, I have the Rexx equivalent of Edward's assembly\n>> language program to deblock a PDS directory.\n>> ---\n>>\n>> At 10:25 AM 12/1/98 -0500, Edward Strauss wrote:\n>> >For those of you without PDSMAN, here is a program that reads a\n>> >directory and writes out the member names in 80-byte records.\n>> >\n>\n>Attachment Converted: \"c:\\eudora\\attach\\tgardener.vcf\"\n>\n--=====================_912566956==_\nContent-Type: text/plain; charset=\"us-ascii\"\nContent-Disposition: attachment; filename=\"Pdsdir.rex\"\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT348/FILE348.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT348", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}