{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013132000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 529074, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE864.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE864.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x05'", "DS1TRBAL": "b'\\x87\\x9a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07[\\x00\\t\\x07\\\\\\x00\\x03\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\\x16\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\x13E\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T13:45:16", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-486"}, "text": "REGULAR CBT TAPE - VERSION 486    FILE:  864\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT486.FILE864\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,528 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/01/13    13:45:16    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00U\\x01\\x12\\x06O\\x01\\x13\\x00\\x1f\\x13D\\x00\\x19\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-03-04T00:00:00", "modifydate": "2013-01-01T13:44:55", "lines": 25, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Alpha version of my UNIX code\nFrom:     \"McKown, John\" <John.McKown@healthmarkets.com>\nDate:     Fri, 2 Mar 2012 13:45:49 -0600\nTo:       <sbgolob@cbttape.org>\nLatest email:  \"McKown, John\" <john.archie.mckown@GMAIL.com>\n\nHere it is, such as it is.  I included a $$README which I hope\nexplains what to do, and a brief overview of what is usable at\npresent.  There is also a UNPAX member to \"unwind\" the PAX archive\nto a UNIX subdirectory.  The MAKEALL member is a job to compile\nall the programs, using the UNIX \"make\" facility.  UTILPAXZ is the\nactual PAX archive information.\n\nJohn McKown\n\nSystems Engineer IV\nIT\nAdministrative Services Group\nHealthMarkets\u00ae\n9151 Boulevard 26\nN. Richland Hills, TX 76010\n(817) 255-3225 phone\njohn.mckown@healthmarkets.com\nwww.HealthMarkets.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE2": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x12\\x13_\\x01\\x13\\x00\\x1f\\x13D\\x00\\x1f\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-05-14T00:00:00", "modifydate": "2013-01-01T13:44:35", "lines": 31, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Refresh of File 864 in Updates\nFrom:     \"McKown, John\" <John.McKown@healthmarkets.com>\nDate:     5/7/2012 2:59 PM\nTo:       \"'sbgolob@cbttape.org'\" <sbgolob@cbttape.org>\nLatest email:  \"McKown, John\" <john.archie.mckown@GMAIL.com>\n\nSam,\n\nThis is an update for my UNIX utilities.  There are some fairly\n\"hefty\" changes to \"lsdasd\" in that I've added some options and\nhave split the main UCB scan logic into a separate program,\nfinducb, which is a DLL.  This allows it to act more like a z/OS\ndynamic subroutine instead of being statically linked into the\nprogram object.  I have also split the LSPACE subroutine out of\nthe lsdasd.s source file into a separate lspace.s source file\nwhich allowed me to make LSPACE a DLL also.  I have also made the\ndocumentation for lsdasd and the new finducbs DLL in what I hope\nis a better UNIX man format. I have included the \"troff\" source\nas well as the \"troff\" formatted output.  Both are in the proper\nfile structure to be processed by the z/OS man command.\n\nJohn McKown\nSystems Engineer IV\nIT\nAdministrative Services Group\nHealthMarkets\n9151 Boulevard 26\nN. Richland Hills, TX 76010\n(817) 255-3225 phone\njohn.mckown@healthmarkets.com   www.HealthMarkets.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$README": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\"\\x01\\x12\\x06/\\x01\\x12\\x12_\\x10P\\x01\\x02\\x00`\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2012-03-02T00:00:00", "modifydate": "2012-05-04T10:50:22", "lines": 258, "newlines": 96, "modlines": 0, "user": "TSH009"}, "text": "Notice! This code __requires__ and will only run on a z9 or above.  It uses\nRelative, Immediate, and Long Displacement instructions.  Use on a lower level\nmachine will result in a S0C1 abend.\n\nThis is an alpha version of my UNIX tools. Many of the files are simply\nskeletons at present. Only a few work completely. The man pages\n(documentation) are definitely a work in progress.\n\nNote that the assembler source is not formatted properly to be read using only\nASMA90. It requires that you have FLOWASM installed in either a library in the\nlink list, or in a library assigned to the UNIX STEPLIB environment variable.\nThe system is set up to do compiles in a UNIX shell by using the make command,\nwhich references the makefile file.\n\nYou start by changing the UNPAX job to point to an existant UNIX subdirectory\nin which a new subdirectory called utilities-1 will be created. The files in\nthe pax archive, member UTILPAXZ, will be extracted into this directory.\n\nOnce you have extracted the files, you may run the job in the member MAKEALL\nto compile and link all the programs. You need to change this job to point to\nthe same subdirectory as in the UNPAX job.  The output will be placed in this\nsame subdirectory.  This is not really necessary because the executable\nprograms are already in the subdirectory.\n\nThere are many extraneous files in this subdirectory because I haven't cleaned\nit up yet. The ones which actually work are:\n\nams -\n      Invokes the IDCAMS batch program, redirecting SYSIN from the\n      UNIX \"stdin\" and the SYSPRINT to \"stdout\". The source is in ams.s.\n\nisgquery -\n      is a DLL used by lsenq which does the ISGQUERY macro. The source is in\n      isgquery.s.\n\nlsdasd -\n      Lists the volume serials for on-line DASD volumes.  The command\n      will accept parameters. It will accept any number of patterns\n      for the volume serials upon which to report. If a volume matches\n      more than one pattern, it will only be reported on once.  The\n      program accepts only two wild cards. This is very similar to\n      standard UNIX shell file name expansion called \"globbing\".  The\n      * matches zero or more characters.  The ?  matches any single\n      character. Since a volume serial is exactly 6 characters in\n      length; (1) any volume parameter greater than 6 characters will\n      be reported as an error; (2) any volume parameter less than 6\n      characters will be assumed to have a trailing asterisk, unless\n      it already has a trailing asterisk.\n\n      CRITICAL!! Please realize that the shell uses these same\n      characters for its wild card expansion as well. This means that\n      you really should either \"escape\" any wild cards in the pattern\n      by prefixing all * and ? characters with a backslash \\.  Or,\n      more easily, stop shell expansion by surrounding any pattern\n      with a wild card with a single or double quote character: ' or\n      \". E.g lsdasd tx\\?5 or lsdasd 'tx?5'.\n\n      The -d option will enable a line for each on-line volume about\n      the result results of each of the specified patterns tested.\n      This means that the debugging for the pattern matching for a\n      volume serial stops on the first successful pattern match for\n      that volume seria.\n\n      The -n option causes the program to output two fields per line.\n      The first is the volume serial. The second is the device number.\n      They are separated by a tab character.\n\n      The -l option does an LSPACE (List Space) on each of the\n      matching volumes and writes that information on the same line as\n      the volume serial number and device number. The first line is a\n      header line which labels what the value in each field is.\n\n      The -c option returns a single line of output. This contains two\n      numbers, separated with a tab.  The first number is the number\n      of on line volumes whose serial matches the given pattern(s). The second\n      number is the total number of online DASD volumes.\n\n      I hope, some day, to include the storage group name for SMS managed\n      volumes in the output.\n\n      Syntax: lsdasd \u00ddOPTION\u00a8... \u00ddVOLUME\u00a8...\n\nfinducbs -\n      This is a subroutine, which is packaged as a z/OS UNIX DLL.  It\n      is named finducbs.dll. I made it a DLL so that it can be called\n      dynamically. There is also a finducbs.o which can be statically\n      bound into the application.\n\n      The on-line DASD volumes are found by using the UCBSCAN macro.\n\n      If the program encounters no critical errors, it will return\n      with a return code of zero in the 32 bit GPR15 and two unsigned\n      halfwords concatenated into the 32 bit GPR0. The code in the 32\n      bit GPR0 has the number of DASD volumes which matched the given\n      pattern(s) in the high order halfword (bits 32..47 of the 64 bit\n      register) and the total number of online DASD volumes in the low\n      order halfword (bits 48..63 of the 64 bit register).  The high\n      word of the 64 bit GPR0 (bits 0..31) are not disturbed.  The\n      program calls a user-supplied address of an LE enable subroutine\n      for each UCB which matches any of the supplied volsers or volser\n      pattern. This subroutine is passed three parameters. The first is\n      the address of the UCB. The second is the address of the DCE.\n      The third is a 32 bit fullword which was passed to the finducbs\n      function as the second fullword in the input parameter list.\n      This is invoked using the CALL macro using standard z/OS linkage\n      conventions.\n\n      However, if the exit address is zero (which it will be unless\n      specifically set to some other value as shown below) , it is a\n      special case and the code will not attempt to do the CALL.\n\n      If the program does encounter some error, the value in the 32\n      bit GPR15 will conain a return code and the contents of GPR0 as\n      described above will contain information as of the time of the\n      error.\n\n      Return Codes:\n      0 means that one or more DASD volumes matched the pattern(s)\n      given to the routine.\n      1 means that no volumes matched the pattern(s) given.\n\n      The parameter list is very unusual, mainly due to my laziness.\n      The first two fullwords are: (1) the address of a subroutine\n      which is given control for each matching UCB and (2) a fullword\n      containing an arbitrary value which is simply passed to the\n      subroutine. The remainder is similar to the parameter list\n      format which z/OS UNIX uses when it gives control to z/OS UNIX\n      command.  The actual values, addressed via the @ARGV array,\n      below, contain either volser or volser patterns.  The volser\n      patterns will have one or more \"wild card\" characters. The\n      asterisk (*) indicates zero or more characters.  The question\n      mark (?) indicates any one character.  The mattern matching is\n      done by the ASAXWC macro. This macro is not formally\n      documentated.  It resides in SYS1.MODGEN.  The only place that I\n      have found information on it is in the macro itself and in a\n      article from Xephon in file mvs0305.pdf from\n      www.cbttape.org/xephon/xephonm/mvs0305.pdf The pattern matching\n      is only done until the first match.\n\n      It looks like:\n\nFINDUCBP DSECT\n@CALLBACK DS   A                  ADDRESS OF SUBROUTINE\nUSERWORD DS    F                  ARBITRARY FULLWORD PASSED TO\n*                                 THE SUBROUTINE AS ITS 3RD PARAMETER\n@ARGC    DS    A                  ADDRESS OF NUMBER OF ARGUMENTS\n@ARGVL   DS    A                  ADDRESS OF VECTOR OF LENGTH OF ARGS\n@ARGV    DS    A                  ADDRESS OF VECTOR OF ARGS\n\n      Please look at the source code to lsdasd for an example. Or use\n      the z/OS UNIX man command: man 3 finducbs to see an example.\n\nlsenq -\n      Lists enqueue information. You can specify a resource name, with\n      wildcarding. You may also specify an queue name. If a queue name\n      is not specified, it defaults to SYSDSN. The queue name can also\n      be wild carded.  Also, if (and only if) the queue name is\n      defaulted, the resource name is assumed to be a dataset name and\n      is upper cased. The program uses the ISGQUERY routine in the\n      isgquery.dll to scan the ENQ chain for the given parameter(s). If\n      no parameters are given, or an invalid parameter is given, a\n      message is written to stderr and a non-zero status code is\n      returned.\n\n      Syntax: lsenq \u00dd\u00ddqname\u00a8 rname\u00a8.\n\n      You may specify 0, 1, or 2 parameters. If you specify no\n      parameters, a short help is written. If you specify a single\n      parameter, it is assumed to be the rname with an implied qname\n      of SYSDSN. Also, in this case, the name is automatically upper\n      cased. If you specify 2 parameters, they are assumed to be the\n      qname and the rname, in that order. They are not upper cased.\n\nmkjcl -\n      is a shell script, not a compiled program. It reads a \"template\"\n      file, which is specified on the command line, and modifies it by\n      replacing embedded UNIX-style variables with their values. It\n      writes its output to \"stdout\" so that it may be piped to a\n      subsequent command, such as \"submit\". The variables are passed\n      to the command as shell environment variables, via the export\n      command, or on the command line itself. This is the normal way\n      that named variables are done in UNIX.  An example of a template\n      jcl is supplied in the \"iefbr14.jcl\" file.\n\nAll files which have file name of SKELETON are just that, my SKELETON which I\nfiles use as the basis for the actual program code. The suffix specifies\nes the language.\n\n\".a\" for \"library archive\" files (which contain object code for subroutines\nwhich are \"statically linked\").\n\n\".awk\" for awk source files.\n\n\".cat?\" for \"compiled\" man files. These files are actually symlinks to the\nactual files in the man/cat? subdirectory. The files in the man/cat?\nsubdirectory have a \".?\" extention instead of \".cat?\". The \"?\" is a number from\n1 to 9. These files are created from the corresponding \".man?\" file, which is\nkept in the man/man? subdirectory. Unfortunately, this cannot be done on z/OS\nusing any integrated command(s). You would need to get a version of groff from\nthe \"z/OS Tools and Toys\" web site.\n\n\".dll\" for Dynamic Link Libraries. These are like DLLs in MS-Windows, or .so\nfiles in Linux and some UNIX system. They are files which contain 1 or more\nsubroutines and/or data areas, which are \"shared\" and dynamically loaded.  Each\n\".dll\" should have a corresponding \".x\" file.\n\n\".man?\" for man source files. These files are actually symlinks to the actual\nfiles in the man/man? subdirectory. The files in the man/man? subdirectory have\na \".?\" extention instead of \".man?\". The \"?\" is a number from 1 to 9.\n\n\".o\" for compiled object files.\n\n\".pl\" for Perl source files.\n\n\".rexx\" for rexx programs.\n\n\".s\" for HLASM source files.\n\n\".sh\" for shell script files\n\n\".x\" are DLL side files. They contain binder control information which tell the\nbinder the name of the DLL to use and the exported names in that DLL. They are\nused like a \".o\" file by the binder.\n\nSome of the other \".s\" files are for things I am still planning for.\n\n\"ftee\" will be like the UNIX \"tee\" command, but will support sending\noutput to a z/OS dataset or a UNIX file, unlike the \"tee\" command which\ncan only write to a UNIX file.\n\n\"lsvtoc\" will display the VTOC of the specified volume(s) in a format\nsimilar to the ISPF 3.4 display.\n\n\"mcsoper\" will create a \"line mode\" z/OS operator console, reminiscent\nof the old \"3215\" type printer/keyboard consoles. This will be based on\nthe \"mcsoper\" macro. This is low priority since I use SMCS consoles for\nremote operations. The main use of this would be for primitive automated\noperations. Since this command will write the console traffic to the\n\"stdout\", that would allow it to be piped to another command, such as a\nPerl or awk program, which would use the mgcre command to issue z/OS\noperator commands. Given the existance of TSSO, and System REXX, this\nis likely unneeded.\n\n\"mgcre\" will be a way to issue z/OS operator commands, using the \"mgcre\"\nmacro.\n\n\"rmjes\" will be a way to purge entries from the SPOOL. This command is\nactually to complete the facilities available from Dovetailed\nTechnologies in their Data Set Pipes set of utilities, which can list\nSPOOL entries and read data from the SPOOL (such as job output) and send\nit to \"stdout\".\n\n\"s0c1\" is simply a program which generates an S0C1 abend so that I could\nlook at an LE dump for learning purposes.\n\n\"uaudit\" is a terror command to turn the UAUDIT bit in the user's ACEE\non and off. I am not really likely to implement this.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE864": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\\x11\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\x13E\\x00c\\x00c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T13:45:11", "lines": 99, "newlines": 99, "modlines": 0, "user": "CBT-486"}, "text": "//***FILE 864 is from John McKown and contains UNIX shell commands  *   FILE 864\n//*           for z/OS which he wrote, to run under z/OS UNIX.      *   FILE 864\n//*           The commands are as described below, and are meant    *   FILE 864\n//*           to be compiled (using make) under z/OS UNIX only.     *   FILE 864\n//*                                                                 *   FILE 864\n//*       This package is in alpha status, currently.  Folks        *   FILE 864\n//*       are encouraged to try it out and write to the author      *   FILE 864\n//*       about fixes and improvement suggestions.                  *   FILE 864\n//*                                                                 *   FILE 864\n//*       email:  \"McKown, John\" <john.archie.mckown@GMAIL.com>     *   FILE 864\n//*                                                                 *   FILE 864\n//*    Below is a description of the contents and idea of this      *   FILE 864\n//*    file.  See the pds member called $$README for further        *   FILE 864\n//*    detail.                                                      *   FILE 864\n//*                                                                 *   FILE 864\n//*    This is an alpha version of my UNIX tools. Many of the       *   FILE 864\n//*    files are simply skeletons at present. Only a few work       *   FILE 864\n//*    completely. The man pages (documentation) are                *   FILE 864\n//*    definitely a work in progress.                               *   FILE 864\n//*                                                                 *   FILE 864\n//*    Note that the assembler source is not formatted properly     *   FILE 864\n//*    to be read using only ASMA90.  It requires that you have     *   FILE 864\n//*    FLOWASM installed in either a library in the link list,      *   FILE 864\n//*    or in a library assigned to the UNIX STEPLIB environment     *   FILE 864\n//*    variable.  The system is set up to do compiles in a UNIX     *   FILE 864\n//*    shell by using the make command, which references the        *   FILE 864\n//*    makefile file.                                               *   FILE 864\n//*                                                                 *   FILE 864\n//*    FLOWASM is on CBT Tape File 724.                             *   FILE 864\n//*                                                                 *   FILE 864\n//*    You start by changing the UNPAX job to point to an           *   FILE 864\n//*    existent UNIX subdirectory in which a new subdirectory       *   FILE 864\n//*    called utilities-1 will be created. The files in the pax     *   FILE 864\n//*    archive, member UTILPAXZ, will be extracted into this        *   FILE 864\n//*    directory.                                                   *   FILE 864\n//*                                                                 *   FILE 864\n//*    Once you have extracted the files, you may run the job       *   FILE 864\n//*    in the member MAKEALL to compile and link all the            *   FILE 864\n//*    programs. You need to change this job to point to the        *   FILE 864\n//*    same subdirectory as in the UNPAX job.  The output will      *   FILE 864\n//*    be placed in this same subdirectory.  This is not really     *   FILE 864\n//*    necessary because the executable programs are already in     *   FILE 864\n//*    the subdirectory.                                            *   FILE 864\n//*                                                                 *   FILE 864\n//*    There are many extraneous files in this subdirectory         *   FILE 864\n//*    because I haven't cleaned it up yet. The ones which          *   FILE 864\n//*    actually work are:                                           *   FILE 864\n//*                                                                 *   FILE 864\n//*    ams - Invokes the IDCAMS batch program, redirecting          *   FILE 864\n//*          SYSIN from the UNIX \"stdin\" and the SYSPRINT to        *   FILE 864\n//*          \"stdout\". The source is in ams.s.                      *   FILE 864\n//*                                                                 *   FILE 864\n//*    isgquery.o - is a subroutine (object code) used by lsenq     *   FILE 864\n//*          which does the ISGQUERY macro. The source is in        *   FILE 864\n//*          isgquery.s.                                            *   FILE 864\n//*                                                                 *   FILE 864\n//*    lsdasd - Lists the space on all on-line DASD volumes. I      *   FILE 864\n//*             plan, some day, to include the storage group        *   FILE 864\n//*             name for SMS managed volumes in the output, and     *   FILE 864\n//*             to allow specification of volume series, with       *   FILE 864\n//*             \"wildcarding\" to subset the list. The source is     *   FILE 864\n//*             in lsdasd.s.                                        *   FILE 864\n//*                                                                 *   FILE 864\n//*    lsenq - Lists enqueue information. You can specify a         *   FILE 864\n//*            resource name, with wildcarding. You may also        *   FILE 864\n//*            specify an queue name. If a queue name is not        *   FILE 864\n//*            specified, it defaults to SYSDSN. The queue name     *   FILE 864\n//*            can also be wild carded. Also, if (and only if)      *   FILE 864\n//*            the queue name is defaulted, the resource name       *   FILE 864\n//*            is assumed to be a dataset name and is upper         *   FILE 864\n//*            cased.  Syntax: lsenq \u00dd\u00ddqname\u00a8 \u00ddrname\u00a8\u00a8.             *   FILE 864\n//*                                                                 *   FILE 864\n//*    mkjcl - is a shell script, not a compiled program. It        *   FILE 864\n//*            reads a \"template\" file, which is specified on       *   FILE 864\n//*            the command line, and modifies it by replacing       *   FILE 864\n//*            embedded UNIX-style variables with their values.     *   FILE 864\n//*            It writes its output to \"stdout\" so that it may      *   FILE 864\n//*            be piped to a subsequent command, such as            *   FILE 864\n//*            \"submit\". The variables are passed to the            *   FILE 864\n//*            command as shell environment variables, via the      *   FILE 864\n//*            export command, or on the command line itself.       *   FILE 864\n//*            This is the normal way that named variables are      *   FILE 864\n//*            done in UNIX.  An example of a template jcl is       *   FILE 864\n//*            supplied in the \"iefbr14.jcl\" file.                  *   FILE 864\n//*                                                                 *   FILE 864\n//*    All files which have file name of SKELETON are just          *   FILE 864\n//*    that, my SKELETON files which I use as the basis for the     *   FILE 864\n//*    actual program code. The suffix specifies the language.      *   FILE 864\n//*    \".1\" for man source files. \".cat1\" for \"compiled\" man        *   FILE 864\n//*    source files. \".a\" for \"library archive\" files (which        *   FILE 864\n//*    contain object code for subroutines which are                *   FILE 864\n//*    \"statically linked\").  \".awk\" for awk source files. \".o\"     *   FILE 864\n//*    for compiled object files. \".pl\" for Perl source files.      *   FILE 864\n//*    \".rexx\" for rexx programs. \".sh\" for shell script files.     *   FILE 864\n//*    \".s\" for HLASM source files.                                 *   FILE 864\n//*                                                                 *   FILE 864\n//*    Some of the other \".s\" files are for things I am still       *   FILE 864\n//*    planning for.                                                *   FILE 864\n//*                                                                 *   FILE 864\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MAKEALL": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x16\\x01\\x12\\x06/\\x01\\x12\\x11\\x1f\\x10Y\\x00\\x1f\\x00\\x10\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-03-02T00:00:00", "modifydate": "2012-04-20T10:59:16", "lines": 31, "newlines": 16, "modlines": 0, "user": "TSH009"}, "text": "//MAKEALL  JOB (H00000I),'MAKE ALL',\n//         CLASS=Z,\n//         MSGCLASS=X,\n//         NOTIFY=&SYSUID\n//*\n//* Replace /u/<myid>/utilities-1 with the\n//* same subdirectory used in the UNPAX job.\n//*\n//STEP1    EXEC PGM=IKJEFT01,REGION=0M\n//SYSEXEC  DD   DISP=SHR,DSN=SYS1.SBPXEXEC\n//SYSTSPRT DD   SYSOUT=*\n//SYSTSIN  DD   *\nOCOPY INDD(COMMANDS) OUTDD(UNIXFILE)\nOSHELL sh -L </tmp/utilities-1.unpax.txt\nOSHELL rm /tmp/utilities-1.unpax.txt\n//STDERR   DD   SYSOUT=*\n//STDOUT   DD   SYSOUT=*\n//UNIXFILE DD   PATH='/tmp/utilities-1.unpax.txt',\n//         FILEDATA=TEXT,\n//         PATHOPTS=(OCREAT,OWRONLY,OTRUNC)\n//COMMANDS DD   *\nset -x\ncd /u/<myid>/utilities-1\nmake all\n# You can \"install\" these program and man files into\n# a given bin, man/man1, and man/cat1 set of subdirectories\n# by changing the path referenced in the following make\n# command to the subdirector under which exists the\n# bin, man, man/man1, and man/cat1 subdirectories.\n#make install PREFIX=/usr/local\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UNPAX": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x12\\x06/\\x01\\x12\\x11o\\x14U\\x00(\\x00\\x11\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-03-02T00:00:00", "modifydate": "2012-04-25T14:55:00", "lines": 40, "newlines": 17, "modlines": 0, "user": "TSH009"}, "text": "//UNPAX    JOB (H00000I),'UNPAX',\n//         CLASS=Z,\n//         MSGCLASS=X,\n//         NOTIFY=&SYSUID\n//*\n//* Replace $TMP with the z/OS UNIX subdirectory with the\n//* subdirectory into which you want the pax file unwound.\n//* Change \"utilities-1\" if you want to.\n//* Note and change these entries in the MAKEALL\n//* job also, if you use it.\n//*\n//STEP1    EXEC PGM=IKJEFT01,REGION=0M\n//SYSEXEC  DD   DISP=SHR,DSN=SYS1.SBPXEXEC\n//SYSTSPRT DD   SYSOUT=*\n//SYSTSIN  DD   *\nOCOPY INDD(COMMANDS) OUTDD(UNIXFILE)\nOSHELL sh -L </tmp/utilities-1.unpax.txt\nOSHELL rm /tmp/utilities-1.unpax.txt\n//STDERR   DD   SYSOUT=*\n//STDOUT   DD   SYSOUT=*\n//UNIXFILE DD   PATH='/tmp/utilities-1.unpax.txt',\n//         FILEDATA=TEXT,\n//         PATHOPTS=(OCREAT,OWRONLY,OTRUNC)\n//COMMANDS DD   *\nset -x\ncd $TMP\nrm -rf utilities-1\nmkdir utilities-1\ncd utilities-1\npax -v  -rf \"//UNIX.SOURCE(UTILPAXZ)\"\n#extattr -a ams #Uncomment if you want the ams command\n                #to be APF authorized.\n                #This is generally not needed.\nextattr -a mgcre #Requires appropriate RACF authority to issue.\n                 #Must be issued or the program will abend with an S047\nextattr -a mcsoper #Requires appropriate RACF authority to issue.\n                   #Must be issued or the program will abend with an S047\nextattr -a uaudit #Requires appropriate RACF authority to issue.\n                  #Must be issued or the program will abend with an S047\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UTILPAXZ": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x13_\\x01\\x12\\x13_\\x17V\\x0f\\xc0\\x0f\\xc0\\x00\\x00\\xe3\\xe2\\xc8\\xf0\\xf0\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-05-14T00:00:00", "modifydate": "2012-05-14T17:56:00", "lines": 4032, "newlines": 4032, "modlines": 0, "user": "TSH009"}, "mimetype": "application/x-compress", "datatype": "binary", "extension": ".x-compress"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT864/FILE864.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT864", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}