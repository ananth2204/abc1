{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012330000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE553.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE553.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\n'", "DS1TRBAL": "b'u\\x8a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x11\\x00\\t\\x04\\x11\\x00\\x0e\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x05\\x0f\\x01\\x02\\x05\\x0f\\tV\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-02-19T00:00:00", "modifydate": "2002-02-19T09:56:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 443    FILE:  553\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT443.FILE553\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 11 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,010 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/19/02    09:56:17    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00V\\x01\\x02\\x04o\\x01\\x02\\x04o\\x15(\\x00a\\x00_\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-02-15T00:00:00", "modifydate": "2002-02-15T15:28:56", "lines": 97, "newlines": 95, "modlines": 0, "user": "IBMUSER"}, "text": "Information on the SUBMITC ISPF edit macro - 2002-02-15\n-------------------------------------------------------\n\nSUBMITC is an ISPF edit macro that submits the file (or selected lines)\nto the JES2/JES3 internal reader.\n\nOh big deal you say, but wait there's more:\n\nPasswords:\n---------\nWhen reading the input, it looks for certain password locations in the\njobsteam and prompts you for them so you don't have keep passwords in\ndatasets (bad) and don't have to remember to cancel out or change the\npassword before saving.\n\nPasswords are specifed as \"?\" and are only looked for in specific\nlocations. See Process_Line for more details.\n\nPasswords are put into the jobstream asis (mixed case)\nexcept for jobcard passwords which are folded to uppercase.\n\nFor passwords on the jobcard, USER= and PASSWORD= must\nbe on the same line and in that order.  In this case, I\nwill append a comma after the password if found in the\ninput stream otherwise I just overlay password beginning\nat the question mark.\n\nYou must leave enough room after the \"?\" where the password\nis to go because it is *assumed* the jobstream was prepped\nfor SUBMITC usage.\n\nUsually you will need to put an exclamation point before\nSUBMITC so ISPF will find it.  For example:\n\nEDIT       IBMUSER.IN.CNTL(TCPFTP)\nCommand ===> !SUBMITC\n****** ********************************\n000001 //IBMUSERF  JOB  (ACCT#),'MY NAM\n\nAn allocation to the JES INTRDR is dynamically allocated\nand SUBMITC writes directly from the ISPF line variables\nto the JES input queue.  We do NOT write any data to a\nDASD dataset (unlike IBM's ISPF submit). WHO HA!\n\nSample jobstream showing the passwords we try to detect and change:\n\n  //IBMUSERF  JOB  (ACCT#),'MY NAME HERE',\n  //          USER=IBMUSER,PASSWORD=?,                        (1)\n  //          MSGCLASS=X,CLASS=U\n  //*\n  //PS0130  EXEC PGM=FTP,PARM='FIREWALL (EXIT TI 720'\n  //NETRC     DD *\n  MACHINE FIREWALL LOGIN ibmuser PASSWORD ?                   (2)\n  //SYSPRINT  DD SYSOUT=*\n  //OUTPUT    DD SYSOUT=*\n  //INPUT     DD *\n  user bozo@clown.net                                         (3)\n  ?                                                           (3)\n  dir\n  quit\n\n  (1) USER=user,PASSWORD=?  on the jobcard\n  (2) Instream machine statements in //NETRC file\n  (3) Instream user statements followed by ? in //INPUT file\n\n\nNote: SUBMITC is NOT robust.  It was designed for specific\n      types of jobstreams, not every possibility is supported.\n      Your mileage may vary.\n\nSymbols\n-------\nIBM currently does support system symbolics in batch jobs.  You can\noptionally use SUBMITC to translate system symbolics in your instream\njobstream using two methods:\n\n   1) Use the parm SYM when invoke SUBMITC to translate all lines (or\n      until a SUBMITC::NOSYM control card is reached).\n\n   2) Use the special control cards in the jobstream to turn on and\n      off translation.  Use the SYM or NOSYM on one of the 3 types\n      of control card formats:\n\n      //*SUBMITC::SYM\n      /* SUBMITC::SYM\n      *SUBMITC::SYM\n\n      Line(s) to translate with symbolics here\n\n      *SUBMITC::SYM\n      /* SUBMITC::SYM\n      //*SUBMITC::SYM\n\nSee member $SAMPSYM for a job that has symbolics.\n\nBTW: SUBMITC calls the IBM system symbolic routine ASASYMBM to do the\ntranslation.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$FAQ": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00)\\x01\\x02\\x04o\\x01\\x02\\x04o\\x153\\x00.\\x00\\x1a\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-02-15T00:00:00", "modifydate": "2002-02-15T15:33:29", "lines": 46, "newlines": 26, "modlines": 0, "user": "IBMUSER"}, "text": "Frequently Asked Questions about the SUBMITC ISPF edit macro\n------------------------------------------------------------\n\nQ. Why does it say \"command not found\" when I invoke as \"SUBMITC\"?\nA. You need to let ISPF know it's a load module, put a \"!\" before\n   the command is in \"Command ===> !SUBMITC\"\n\nQ. Why does it say \"command not found\" when I invoke as \"!SUBMITC\"?\nA. The load module SUBMITC needs to be in the normal search order.\n\nQ. Why did I get a S0C4 and/or S66D ABEND?\nA. You probably typed in \"!SUBMIT\" and not \"!SUBMITC\".  !SUBMIT would\n   invoke IBM's SUBMIT command and it goes bonkers if invoked as an\n   ISPF edit macro.\n\nQ. Why did SUBMITC not prompt me for a password every time it finds\n   \"?\" on a line?\nA. Please read the $$README file, SUBMITC only handles passwords in\n   certian situations.\n\nQ. Why did SUBMITC not translate my symbolic as expected?\nA. Two reasons off hand:\n   1) Symbol process was not active for the line.  See the $$README\n      for how to get it turned on\n   2) Maybe the symbolic isn't defined to the system. Issue the\n      \"D SYMBOLS\" command in SDSF or on the console to see the list.\n\nQ. Is there a way to use it outside of an edit macro so I can replace\n   SUBMIT?\nA. I've created an exec called SUBMITCE that will invoke VIEW (like\n   EDIT but no update) on a given dataset and it specifies !SUBMITC as\n   the intial edit macro.  Sample usage:\n\n   TSO SUBMITCE 'IBMUSER.DAVE.CNTL(IEBGENER)'\n\nQ. Why does SUBMITCE leave me in VIEW/EDIT on the dataset?\nA. I can't give SUBMITC a parm like \"END\" and I don't want to write\n   a special SUBMITC that does an END.  Here's how to get around that:\n\n   TSO SUBMITCE 'IBMUSER.DAVE.CNTL(IEBGENER)';END\n\nQ. How can I avoid having to put the silly SUBMITC::SYM control card\n   in the jobstream?\nA. You can invoke SUBMITC with parm SYM to do the substitution on all\n   lines of the jobstream as in \"!SUBMITC SYM\".  This is not supported\n   with the SUBMITCE exec.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INSTALL": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\t\\x01\\x02\\x04o\\x01\\x02\\x04o\\x156\\x00\\x07\\x00\\x07\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-02-15T00:00:00", "modifydate": "2002-02-15T15:36:09", "lines": 7, "newlines": 7, "modlines": 0, "user": "IBMUSER"}, "text": "1) Put panel SUBMITCP into your normal ISPF ISPPLIB concatenation.\n2) Put program SUBMITC into your normal module search order via one of\n   the following:\n\n   a) Assemble and link member SUBMITC of this PDS\n   b) RECEIVE DA(this.pds(ZXMIT)) to avoid an assembly/link\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$SAMPPAS": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x06\\x01\\x02\\x04o\\x01\\x02\\x04o\\x150\\x00\\x0e\\x00\\x0f\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-02-15T00:00:00", "modifydate": "2002-02-15T15:30:06", "lines": 14, "newlines": 15, "modlines": 0, "user": "IBMUSER"}, "text": "//IBMUSERF  JOB  (ACCT#),'MY NAME HERE',\n//          USER=IBMUSER,PASSWORD=?,\n//          MSGCLASS=X,CLASS=U\n//*\n//PS0130  EXEC PGM=FTP,PARM='INTERNET (EXIT TI 720'\n//NETRC     DD *\nMACHINE INTERNET LOGIN ibmuser PASSWORD ?\n//SYSPRINT  DD SYSOUT=*\n//OUTPUT    DD SYSOUT=*\n//INPUT     DD *\nuser anonymous@ftp.netscape.com\nyourname@yourcompany.com\ndir\nquit\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$SAMPSYM": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x13\\x01\\x02\\x04o\\x01\\x02\\x04o\\x151\\x001\\x00-\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-02-15T00:00:00", "modifydate": "2002-02-15T15:31:13", "lines": 49, "newlines": 45, "modlines": 0, "user": "IBMUSER"}, "text": "//IBMUSERF  JOB  (ACCT#),'MY NAME HERE',\n//          MSGCLASS=X,CLASS=U\n//*\n//* This is a sample member that you can use to test system\n//* symbol substition using the SUBMITC edit macro\n//*\n//*SUBMITC::SYM                      <- turn on  symbol translate\n//      SET RES1='&SYSR1'\n//*SUBMITC::NOSYM                    <- turn off symbol translate\n//*\n//COPYIT   EXEC PGM=IEBGENER\n//SYSIN    DD DUMMY\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD *\n /* SUBMITC::SYM - turn on translation */\nThe sysplex name is &SYSPLEX\nThe sysclone is &SYSCLONE\nThe sysname is &SYSNAME\nThe first SYSRES is &SYSR1\n\nDAY........&LDAY.\nHHMMSS.....&LHHMMSS.\nHR.........&LHR.\nJDAY.......&LJDAY.\nMIN........&LMIN.\nMON........&LMON\nSEC........&LSEC.\nWDAY.......&LWDAY.\nYR2........&LYR2.\nYR4........&LYR4.\nYYMMDD.....&LYYMMDD.\n /* SUBMITC::NOSYM - turn off translation */\nJOBNAME....&JOBNAME.\n /* SUBMITC::SYM - turn on translation */\nJOBNAME....&JOBNAME.\n//SYSUT2   DD SYSOUT=*\n//*\n//* Run TSO in batch to show the translations of symbolics\n//*\n//JUSTDOIT EXEC PGM=IKJEFT01,TIME=1439,DYNAMNBR=100,REGION=8M,\n// PARM='SEND ''Primary SYSRES is &RES1'',USER(&SYSUID)'\n//SYSUDUMP DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n//TEMPFILE DD SPACE=(CYL,(1,1),RLSE),\n//         DSNAME=&SYSUID..D&LJDAY..T&LHHMMSS,\n//         DISP=(NEW,DELETE,DELETE),\n//         DCB=(BLKSIZE=13030,LRECL=137,BUFL=13030,BUFNO=2,RECFM=VBM)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE553": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x08\\x01\\x01\\x02_\\x01\\x02\\x05\\x0f\\tU\\x00v\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-02-19T09:55:08", "lines": 118, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 553 is from David Alcock and contains a sophisticated     *   FILE 553\n//*           edit macro, written in Assembler, for submitting      *   FILE 553\n//*           jobs from TSO.  There are many bells and whistles     *   FILE 553\n//*           in this program, and especially if you need to enter  *   FILE 553\n//*           passwords from within a jobstream, this program is    *   FILE 553\n//*           worth looking into.                                   *   FILE 553\n//*                                                                 *   FILE 553\n//*           email:   dave@planetmvs.com                           *   FILE 553\n//*                                                                 *   FILE 553\n//*     Edit macro that submits the member (or selected lines).     *   FILE 553\n//*     and does inserts of passwords and translates of system      *   FILE 553\n//*     symbolics.                                                  *   FILE 553\n//*                                                                 *   FILE 553\n//*     SUBMITC is NOT robust.  It was designed for specific        *   FILE 553\n//*     types of jobstreams, not every possibility is supported.    *   FILE 553\n//*     Your mileage may vary.                                      *   FILE 553\n//*                                                                 *   FILE 553\n//*     - - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 553\n//*                                                                 *   FILE 553\n//*     Information on the SUBMITC ISPF edit macro - 2002-02-15     *   FILE 553\n//*     -------------------------------------------------------     *   FILE 553\n//*                                                                 *   FILE 553\n//*     SUBMITC is an ISPF edit macro that submits the file (or     *   FILE 553\n//*     selected lines) to the JES2/JES3 internal reader.           *   FILE 553\n//*                                                                 *   FILE 553\n//*     Oh big deal you say, but wait there's more:                 *   FILE 553\n//*                                                                 *   FILE 553\n//*     Passwords:                                                  *   FILE 553\n//*     ---------                                                   *   FILE 553\n//*     When reading the input, it looks for certain password       *   FILE 553\n//*     locations in the jobsteam and prompts you for them so       *   FILE 553\n//*     you don't have keep passwords in datasets (bad) and         *   FILE 553\n//*     don't have to remember to cancel out or change the          *   FILE 553\n//*     password before saving.                                     *   FILE 553\n//*                                                                 *   FILE 553\n//*     Passwords are specifed as \"?\" and are only looked for in    *   FILE 553\n//*     specific locations. See Process_Line for more details.      *   FILE 553\n//*                                                                 *   FILE 553\n//*     Passwords are put into the jobstream asis (mixed case)      *   FILE 553\n//*     except for jobcard passwords which are folded to            *   FILE 553\n//*     uppercase.                                                  *   FILE 553\n//*                                                                 *   FILE 553\n//*     For passwords on the jobcard, USER= and PASSWORD= must      *   FILE 553\n//*     be on the same line and in that order.  In this case, I     *   FILE 553\n//*     will append a comma after the password if found in the      *   FILE 553\n//*     input stream otherwise I just overlay password beginning    *   FILE 553\n//*     at the question mark.                                       *   FILE 553\n//*                                                                 *   FILE 553\n//*     You must leave enough room after the \"?\" where the          *   FILE 553\n//*     password is to go because it is *assumed* the jobstream     *   FILE 553\n//*     was prepped for SUBMITC usage.                              *   FILE 553\n//*                                                                 *   FILE 553\n//*     Usually you will need to put an exclamation point before    *   FILE 553\n//*     SUBMITC so ISPF will find it.  For example:                 *   FILE 553\n//*                                                                 *   FILE 553\n//*     EDIT       IBMUSER.IN.CNTL(TCPFTP)                          *   FILE 553\n//*     Command ===> !SUBMITC                                       *   FILE 553\n//*     ****** ********************************                     *   FILE 553\n//*     000001 //IBMUSERF  JOB  (ACCT#),'MY NAM                     *   FILE 553\n//*                                                                 *   FILE 553\n//*     An allocation to the JES INTRDR is dynamically allocated    *   FILE 553\n//*     and SUBMITC writes directly from the ISPF line variables    *   FILE 553\n//*     to the JES input queue.  We do NOT write any data to a      *   FILE 553\n//*     DASD dataset (unlike IBM's ISPF submit). WHO HA!            *   FILE 553\n//*                                                                 *   FILE 553\n//*     Sample jobstream showing the passwords we try to detect     *   FILE 553\n//*     and change:                                                 *   FILE 553\n//*                                                                 *   FILE 553\n//*       //IBMUSERF  JOB  (ACCT#),'MY NAME HERE',                  *   FILE 553\n//*       //          USER=IBMUSER,PASSWORD=?,                 (1)  *   FILE 553\n//*       //          MSGCLASS=X,CLASS=U                            *   FILE 553\n//*       //*                                                       *   FILE 553\n//*       //PS0130  EXEC PGM=FTP,PARM='FIREWALL (EXIT TI 720'       *   FILE 553\n//*       //NETRC     DD *                                          *   FILE 553\n//*       MACHINE FIREWALL LOGIN ibmuser PASSWORD ?            (2)  *   FILE 553\n//*       //SYSPRINT  DD SYSOUT=*                                   *   FILE 553\n//*       //OUTPUT    DD SYSOUT=*                                   *   FILE 553\n//*       //INPUT     DD *                                          *   FILE 553\n//*       user bozo@clown.net                                  (3)  *   FILE 553\n//*       ?                                                    (3)  *   FILE 553\n//*       dir                                                       *   FILE 553\n//*       quit                                                      *   FILE 553\n//*                                                                 *   FILE 553\n//*       (1) USER=user,PASSWORD=?  on the jobcard                  *   FILE 553\n//*       (2) Instream machine statements in //NETRC file           *   FILE 553\n//*       (3) Instream user statements followed by ? in //INPUT     *   FILE 553\n//*           file                                                  *   FILE 553\n//*                                                                 *   FILE 553\n//*     Symbols                                                     *   FILE 553\n//*     -------                                                     *   FILE 553\n//*     IBM currently does support system symbolics in batch        *   FILE 553\n//*     jobs.  You can optionally use SUBMITC to translate          *   FILE 553\n//*     system symbolics in your instream jobstream using two       *   FILE 553\n//*     methods:                                                    *   FILE 553\n//*                                                                 *   FILE 553\n//*        1) Use the parm SYM when invoke SUBMITC to translate     *   FILE 553\n//*           all lines (or until a SUBMITC::NOSYM control card     *   FILE 553\n//*           is reached).                                          *   FILE 553\n//*                                                                 *   FILE 553\n//*        2) Use the special control cards in the jobstream to     *   FILE 553\n//*           turn on and off translation.  Use the SYM or NOSYM    *   FILE 553\n//*           on one of the 3 types of control card formats:        *   FILE 553\n//*                                                                 *   FILE 553\n//*           //*SUBMITC::SYM                                       *   FILE 553\n//*           /* SUBMITC::SYM                                       *   FILE 553\n//*           *SUBMITC::SYM                                         *   FILE 553\n//*                                                                 *   FILE 553\n//*           Line(s) to translate with symbolics here              *   FILE 553\n//*                                                                 *   FILE 553\n//*           *SUBMITC::SYM                                         *   FILE 553\n//*           /* SUBMITC::SYM                                       *   FILE 553\n//*           //*SUBMITC::SYM                                       *   FILE 553\n//*                                                                 *   FILE 553\n//*     See member $SAMPSYM for a job that has symbolics.           *   FILE 553\n//*                                                                 *   FILE 553\n//*     BTW: SUBMITC calls the IBM system symbolic routine          *   FILE 553\n//*     ASASYMBM to do the translation.                             *   FILE 553\n//*                                                                 *   FILE 553\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUBMITC": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x11\\x01\\x02\\x03_\\x01\\x02\\x04o\\x15(\\x05\\xd3\\x02J\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2002-02-04T00:00:00", "modifydate": "2002-02-15T15:28:11", "lines": 1491, "newlines": 586, "modlines": 0, "user": "IBMUSER"}, "text": "SUBMITC  TITLE 'Submit (with Class!) ISPF edit Macro'\n*======================================================================\n*\n* Name: SUBMITC\n*\n* Author: David Alcock :: dave@planetmvs.com\n*\n* Purpose: Edit macro that submits the member (or selected lines).\n*          and does inserts of passwords and translates of system\n*          symbolics.  See $README member for more info.\n*\n*   Note: SUBMITC is NOT robust.  It was designed for specific\n*         types of jobstreams, not every possibility is supported.\n*         Your mileage may vary.\n*\n*\n* Attributes: Reentrant, Reusable, Non-Authorized.\n*\n* Restrictions:\n* o Assembler: HLASM R1 or higher\n* o Program SUBMITC needs to be in the normal module search order\n* o Panel SUBMITCP needs to be in the normal panel search order\n* o Job streams of the format we support\n* o Job streams currently must be in LRECL=F datasets.\n*\n*\n* Disclaimer: This program is FREEWARE.  Use at your own risk.  It\n*             is provided for your enjoyment and neither David\n*             Alcock or his employer provides any warranty for it's\n*             use.  I'd like to hear how it works on your system.\n*\n*             This software is not in the public domain but is\n*             available free of charge and with source code provided.\n*             It is copyright 2002+ by David Alcock.\n*             All rights reserved.\n*\n*======================================================================\n\n*======================================================================\n*\n*             M o d i f i c a t i o n   H i s t o r y\n*\n* Person     Date       Ver Description\n* ---------- ---------- --- -------------------------------------------\n* DGAlcock   2002-02-15 1.1 Added System Symbol processing;\n* DGAlcock   2002-02-06 1.0 Initial program completed;\n*\n*======================================================================\n\n* IBM macros\n\n PRINT NOGEN\n IHAPDS PDSBLDL=NO                      PDS Directory entry (for bldl)\n IFGRPL ,                               Request Parameter List\n IFGACB ,                               Access Control Block\n YREGS ,                                Equate Registers\n IEFZB4D0 ,                             SVC 99 - RB\n IEFZB4D2 ,                             SVC 99 - Text Equates\n IHAPSA ,                               Prefixed Save Area\n IHAASCB ,                              Address Space Control Block\n IHAASSB ,                              Address Space Secondary Block\n IAZJSAB ,                              Job Schedular Addr Spc CB\n IHASDWA ,                              System Diagnostic Work Area\n ASASYMBP ,                             Mapping of SYMBP area\n PRINT GEN\n\n* Change assembly date format ccyymmdd to ccyy-mm-dd\n\n LCLC  &ASMDATE\n&ASMDATE SETC  '&SYSDATC'(1,4).'-'.'&SYSDATC'(5,2).'-'.'&SYSDATC'(7,2)\n\n***********************************************************************\n***\n**       Module initialization\n***\n***********************************************************************\n\nSUBMITC CSECT ,\nSUBMITC AMODE 31\nSUBMITC RMODE ANY\n\n* Standard O/S eyecatcher\n\nMain_EC  b    Main_ECL(0,R15)           Bump past EyeCatcher\n         dc   AL1(Main_ECE-Main_ECV)    Length of eyecatcher\nMain_ECV dc   C'SUBMITC &ASMDATE &SYSTIME - '\n         dc   C'Submit (with Class!) ISPF edit macro'\nMain_ECE equ  *\n         ds   0h\nMain_ECL equ  *-Main_EC\n\n* Standard ESA entry housekeeping code\n\n bakr  R14,0                    Save registers\n lae   R12,0(R15,0)             Get base register\n lae   R11,2048(,R12)           Set up for second base reg\n la    R11,2048(,R11)           Locate 4096 past R12\n lae   R10,2048(,R11)           Set up for third base reg\n la    R10,2048(,R10)           Locate 4096 past R11\n USING SUBMITC,R12,R11,R10      Set module base\n\n* Obtain Dynamic Save Area (so we can be reentrant)\n\n STORAGE OBTAIN,LENGTH=WORKDSL,LOC=BELOW Obtain storage\n lr    R13,R1                           Point to Save Area\n\n LR    R14,R13                          To: Address\n L     R15,=A(WORKDSL)                  To: Length\n SLR   R1,R1                            From: Set length and pad\n MVCL  R14,R0                           Zero out area\n\n mvc   4(4,R13),=C'F1SA'                Indicate stack SA\n USING WORKDS,R13                       Get addressibility to area\n mvc   pl_jobname(8),=8c'?'             Jobname not found yet...\n mvc   FLAG_LIT(4),=c'FLGS'             Initialize eyecatcher\n\n***********************************************************************\n***\n** Establish our ESTAE routine.  The last thing we want to do is\n** to have someone lose work because of a programming problem here.\n***\n***********************************************************************\n\n MVC   PARMLIST(c_ESTAEl),c_ESTAE       Initlialize parameter list\n MVC   EWA_ID(4),=CL4'EWA'              Eyecatcher\n STM   R10,R13,EWA_Regs                 Save important registers\n LA    R1,E$Retry                       Locate retry recovery routine\n ST    R1,EWA_RetryA                    Save it\n L     R7,=V(SUBMITCE)                  Locate ESTAE routine\n LA    R8,EWA                           Locate EWA\n ESTAE (7),CT,                          Create ESTAE environment       @\n               PARAM=((8)),             ..Parameter passed to ESTAE    @\n               MF=(E,PARMLIST)\n oi    flag1,$f1_ESTAE                  We be set\n\n***********************************************************************\n***\n**       Ensure we are in a proper ISPF environment\n***\n***********************************************************************\n\n* Are ISPF services available?\n\n LINK  EP=ISPQRY,ERRET=E$IQRYE          Query ISPF environment\n ltr   r15,r15                          ISPF environment okay?\n bnz   E$NISPF                          Nope...\n\n* Obtain the ISPF interface module\n\n la    r1,=CL8'ISPLINK'                 Locate module name\n bas   r14,Find_LPA_Module              See if in the JPA/LPA\n ltr   r15,r15                          Found?\n bnz   I$ILINKB                         No, need BLDL\n oi    flag1,$f1_isplinkl               Yes, set \"Found in LPA\" flag\n b     I$ILINKS                         Continue with EPA in R0\nI$ILINKB ds 0h\n la    r1,=CL8'ISPLINK'                 Locate module name\n bas   r14,ISSUE_BLDL                   Issue the BLDL\n ltr   r15,r15                          Is it available\n bnz   E$ILINKB                         No, gripe about it\n LOAD  DE=BLDLA_ENTRY,ERRET=E$ILINKL    Load into storage\nI$ILINKS DS    0H\n st    r0,EP_ISPLINK                    Save entry point\n\n***********************************************************************\n***\n**       Start off the edit macro\n***\n***********************************************************************\n\n* Define the fields to get the edit macro parms\n\n mvi   eparm,c' '\n mvc   eparm+1(l'eparm-1),eparm\n\n LA    R14,L'EPARM\n ST    R14,DOUBLE2\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',                                            @\n               =C'(EPARM)',                                            @\n               EPARM,                                                  @\n               =CL8'CHAR',                                             @\n               DOUBLE2),                                               @\n               VL,MF=(E,PARMLIST)\n\n* Let ISPF know we are an Edit Macro\n\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'ISREDIT',                                            @\n               =F'0',                                                  @\n               =C'% MACRO (EPARM) NOPROCESS %'),                       @\n               VL,MF=(E,PARMLIST)\n ltr   r15,r15\n bz    I$MACX\n lr    r3,r15                     Save return code\n\n bas   R9,Initialize_ISPF_Message       Init msgs R14=short R15=long\n mvc   0(MSG4SL,R14),MSG4S\n mvc   0(MSG4LL,R15),MSG4L\n la    R15,MSG4LL(R15)\n lr    R1,R3\n bas   R9,EDITFWF\n la    R8,MSG4SL                        Short message length\n bas   R9,Set_ISPF_Message              Set the message up\n b     Exit\nI$MACX ds 0h\n\n* Here we could do something with EPARM\n\n mvi   lineval,c' '\n mvc   lineval+1(l'eparm-1),lineval\n oc    eparm(l'eparm),lineval           Fold to uppercase\n CLC   EPARM(3),=C'SYM'\n BNE   I$PARMX\n oi    flag2,$f2_Symbols                turn on symbols\nI$PARMX ds 0h\n\n* Tell ISPF to return errors to us\n\n l     r15,EP_ISPLINK                   -> EPA ISPLINK\n CALL  (15),(=CL8'CONTROL',               Service: CONTROL             @\n               =CL8'ERRORS',              ..errors                     @\n               =CL8'RETURN'),             ..return to us               @\n               VL,MF=(E,PARMLIST)         ..Execute from here\n\n***********************************************************************\n***\n**       Get the line start and end range\n***\n***********************************************************************\n\n\n* Define the line current, start, end and value variables\n\n LA    R1,L'LINEC\n ST    R1,DOUBLE\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',=C'(LINEC)',                                @\n               LINEC,=CL8'FIXED',DOUBLE),VL,MF=(E,PARMLIST)\n*\n LA    R1,L'LINES\n ST    R1,DOUBLE\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',=C'(LINES)',                                @\n               LINES,=CL8'FIXED',DOUBLE),VL,MF=(E,PARMLIST)\n*\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',=C'(LINEE)',                                @\n               LINEE,=CL8'FIXED',DOUBLE),VL,MF=(E,PARMLIST)\n*\n LA    R1,L'LINEVAL\n ST    R1,DOUBLE\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',=C'(LINEVAL)',                              @\n               LINEVAL,=CL8'CHAR',DOUBLE),VL,MF=(E,PARMLIST)\n MVI   LINEVAL,C' '\n MVC   LINEVAL+1(L'LINEVAL-1),LINEVAL\n\n* Save current line location\n\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'ISREDIT',=F'0',                                      @\n               =C'% (LINEC) = LINENUM .ZCSR %'),                       @\n               VL,MF=(E,PARMLIST)\n\n* Process range S\n\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'ISREDIT',=F'0',                                      @\n               =C'% PROCESS RANGE S %'),                               @\n               VL,MF=(E,PARMLIST)\n LTR   R15,R15\n BZ    I$LINESS\n CH    R15,=H'4'                        RC Higher than 4?\n BH    EXIT                             Yes, let ISPF issue err msg\n\n* SS-SS range was not given - use whole edit file (.ZFIRST - .ZLAST)\n\n*-> OI    flag1,$f1_wholefile      May need this later...\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'ISREDIT',=F'0',                                      @\n               =C'% (LINES) = LINENUM .ZFIRST %'),                     @\n               VL,MF=(E,PARMLIST)\n*\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'ISREDIT',=F'0',                                      @\n               =C'% (LINEE) = LINENUM .ZLAST %'),                      @\n               VL,MF=(E,PARMLIST)\n*\n LM    R0,R1,LINES                      Get line start and end\n AR    R0,R1                            Add 'em together\n BNZ   I$LINEX                          Okay: not zero\n BAS   R9,Initialize_ISPF_Message       Init msgs R14=short R15=long\n MVC   0(MSG5LL,R15),MSG5L\n LA    R15,MSG5LL(R15)                  Locate to end of long message\n LA    R8,0                             Short message length\n BAS   R9,Set_ISPF_Message              Set the message up\n B     EXIT                             Give up\n\n* Grab the starting and ending lines of the ones selected\n\nI$LINESS DS    0H\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'ISREDIT',=F'0',                                      @\n               =C'% (LINES) = LINENUM .ZFRANGE %'),                    @\n               VL,MF=(E,PARMLIST)\n*\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'ISREDIT',=F'0',                                      @\n               =C'% (LINEE) = LINENUM .ZLRANGE %'),                    @\n               VL,MF=(E,PARMLIST)\nI$LINEX  DS    0H\n\n***********************************************************************\n***\n**  Dynamically allocate the INTRDR\n***\n***********************************************************************\n\n* Format the SVC 99 Request Block\n\n         LA    R4,da_s99rb                Get address of work area\n         xc    0(l'da_s99rb,r4),0(r4)     initialize to binary zeros\n         ST    R4,DOUBLE                  Save address\n         OI    DOUBLE,S99RBPND            Indicate last one\n*        XC    0(S99RBEND-S99RB,R4),0(R4) Clear Request Block area\n         MVI   S99RBLN-S99RB(R4),S99RBEND-S99RB Length of REQUEST BLK\n         LA    R5,S99RBEND-S99RB(R4)      Locate Text Units Pointers\n         ST    R5,S99TXTPP-S99RB(R4)      STORE ADDR OF Text Unit PTRs\n         LA    R6,20(R5)    5*4=20        Bump past Text pointers\n         MVI   S99VERB-S99RB(R4),S99VRBAL    Verb = ALLOCATE\n\n* The address of each of the text Units will be stored in the\n* request block text PTR area as they are being defined,\n* Active registers are: R5 - Address in text unit pointers\n*                       R6 - Address in text unit define area\n\n***-(1)---------------------------------- DDNAME=\n         ST    R6,0(R5)                     Save Address of Text Unit\n         LA    R5,L'S99TUPTR(R5)            Bump to next entry\n*\n         LA    R14,DALRTDDN                 Generate Key Value\n         STH   R14,S99TUKEY-S99TUNIT(R6)    Store Key\n         LA    R14,1                        Number of entries\n         STH   R14,S99TUNUM-S99TUNIT(R6)    Store Number\n         LA    R14,8                        Length of First Entry\n         STH   R14,S99TULNG-S99TUNIT(R6)    Store Length\n         LA    R1,S99TUPAR-S99TUNIT(R6)     Locate DDNAME\n         ST    R1,da_ddname                 Save Addr: Returned DDNAME\n*\n         LA    R6,S99TUPAR-S99TUNIT+8(R6)   Bump past this Text Unit\n***-(2)---------------------------------- SYSOUT=A\n         ST    R6,0(R5)                     Save Address of Text Unit\n         LA    R5,L'S99TUPTR(R5)            Bump to next entry\n*\n         LA    R14,DALSYSOU                 Generate Key Value\n         STH   R14,S99TUKEY-S99TUNIT(R6)    Store Key\n         LA    R14,1                        Number of entries\n         STH   R14,S99TUNUM-S99TUNIT(R6)    Store Number\n         LA    R14,1                        Length of First Entry\n         STH   R14,S99TULNG-S99TUNIT(R6)    Store Length\n         MVI   S99TUPAR-S99TUNIT(R6),C'A'   SYSOUT=A\n*\n         LA    R6,S99TUPAR-S99TUNIT+2(R6)   Bump past this Text Unit\n***-(3)---------------------------------- Program name\n         ST    R6,0(R5)                     Save Address of Text Unit\n         LA    R5,L'S99TUPTR(R5)            Bump to next entry\n*\n         LA    R14,DALSPGNM                 Generate Key Value\n         STH   R14,S99TUKEY-S99TUNIT(R6)    Store Key\n         LA    R14,1                        Number of entries\n         STH   R14,S99TUNUM-S99TUNIT(R6)    Store Number\n         LA    R14,6                        Length of First Entry\n         STH   R14,S99TULNG-S99TUNIT(R6)    Store Length\n         MVC   S99TUPAR-S99TUNIT(8,R6),=C'INTRDR  '\n*\n         LA    R6,S99TUPAR-S99TUNIT+8(R6)   Bump past this Text Unit\n***-(4,LAST) ---------------------------- Free=close\n         ST    R6,0(R5)                     Save Address of Text Unit\n         OI    S99TUPTR-S99TUPL(R5),S99TUPLN End of parm indication\n         LA    R5,L'S99TUPTR(R5)            Bump to next entry\n*\n         LA    R14,DALCLOSE                 Generate Key Value\n         STH   R14,S99TUKEY-S99TUNIT(R6)    Store Key\n         LA    R14,0                        Number of entries\n         STH   R14,S99TUNUM-S99TUNIT(R6)    Store Number\n         LA    R14,0                        Length of First Entry\n         STH   R14,S99TULNG-S99TUNIT(R6)    Store Length\n*\n         LA    R6,S99TUPAR-S99TUNIT+2(R6)   Bump past this Text Unit\n***-------------------------------------- Complete and make request\n LA    R1,DOUBLE                        Get address of Request BLK\n DYNALLOC ,                             Invoke SVC 99\n LTR   R15,R15\n BZ    DA$X\n\n LR    R4,R15                           Save DYNALLOC RC\n bas   R9,Initialize_ISPF_Message       Init msgs R14=short R15=long\n mvc   0(MSG11LL,R15),MSG11L\n la    R15,MSG11LL(R15)\n lr    R1,R4\n bas   R9,EDITFWF\n MVC   0(11,R15),=C', S99ERROR='\n LA    R15,11(R15)\n LA    R14,da_s99rb                     Get address of work area\n UNPK  0(5,R15),S99ERROR-S99RB(3,R14)\n MVZ   0(4,R15),=8X'00'\n TR    0(4,R15),=C'0123456789ABCDEF'\n LA    R15,4(R15)\n MVC   0(10,R15),=C', S99INFO='\n LA    R15,10(R15)\n UNPK  0(5,R15),S99INFO-S99RB(3,R14)\n MVZ   0(4,R15),=8X'00'\n TR    0(4,R15),=C'0123456789ABCDEF'\n LA    R15,4(R15)\n la    R8,0                             Short message length = 0\n bas   R9,Set_ISPF_Message              Set the message up\n b     exit\n\nDA$X DS 0h\n\n*la r15,parmlist                               BOZO\n*mvc 0(23,r15),=c'INTRDR allocated to dd='     BOZO\n*l  r1,da_ddname                               BOZO\n*mvc 23(8,r15),0(r1)                           BOZO\n*TPUT parmlist,23+8                            BOZO\n\n***********************************************************************\n***\n**       Open the ACB and ready the RPL\n***\n***********************************************************************\n\nOpen_ACB ds 0h\n\n la    R3,rr_ACB                        Locate ACB in Dynamic Save Area\n mvc   0(c_acbl,R3),c_acb               Initialize ACB\n l     r1,da_ddname                     Locate ddname from dynalloc\n mvc   acbddnm-ifgacb(8,r3),0(r1)       Get ddname from dynamic alloc\n\n mvc   PARMLIST(c_openol),c_openo       Get open parameter list\n OPEN  ((3),(OUTPUT)),MF=(E,PARMLIST)   Open the ACB\n ltr   R15,R15                          Okay?\n bz    oa$openx                         Yep, continue\n lr    r4,r15                           Save open return code\n\n bas   R9,Initialize_ISPF_Message       Init msgs R14=short R15=long\n mvc   0(MSG10SL,R14),MSG10S\n mvc   0(MSG10LL,R15),MSG10L\n la    R15,MSG10LL(R15)\n lr    R1,R4\n bas   R9,EDITFWF\n la    R8,MSG4SL                        Short message length\n bas   R9,Set_ISPF_Message              Set the message up\n b     exit\n\noa$openx ds    0h\n\n LA    R4,rr_RPL                        Locate RPL in Dynamic Save Area\n MVC   0(c_rpll,r4),c_rpl               Initialize RPL\n st    r3,RPLDACB-IFGRPL(R4)            Save address of ACB\n la    R1,LINEVAL                       Locate record area\n st    r1,RPLAREA-IFGRPL(R4)            Save address of record\n\n***********************************************************************\n***\n**  Read all lines selected via \" (LINEVAL) = LINE # \" ISREDIT calls\n***\n***********************************************************************\n\nRead_Records ds 0h\n\n MVC   ISREDITC(19),=C'% (LINEVAL) = LINE ' Initialize line\n L     R4,LINES                         Get starting line to process\n LA    R5,1                             On relative line 1 to start\n\nRR$L ds 0h\n\n lr    r1,r4                            Get line number into good reg\n LA    R15,ISREDITC+19                  Locate place in string for num\n BAS   R9,EDITNCF                       Edit number without commas\n MVC   0(2,R15),=C' %'                  Set trailing stuff\n\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'ISREDIT',                                            @\n               =F'0',                                                  @\n               ISREDITC),               \"(LINEVAL) = LINE #\"           @\n               VL,MF=(E,PARMLIST)\n ltr   R15,R15\n bz    RR$glx\n lr    r8,r15\n LA    R15,ZEDLMSG\n mvi   0(r15),c' '\n mvc   1(l'zedlmsg-1,r15),0(r15)\n mvc   0(27,r15),=c'Line obtain failed with RC='\n la    r15,27(r15)\n lr    r1,r8\n bas   r9,editfwf\n mvc   0(23,r15),=c', Hit enter to continue'\n TPUT  zedlmsg,79\n TGET  double,1\n b     RR$LX\nrr$glx ds 0h\n\n CLC   LINEVAL(71),=CL71'// '           End of the line\n BE    RR$LX\n\n BAS   R14,Process_Line                 Process the line\n\n PUT   RPL=RR_RPL                       Write the record\n LTR   R15,R15                          Any errors?\n BZ    RR$LB                            Yes, goto error routine\n\n lr    r8,r15\n LA    R15,ZEDLMSG\n mvi   0(r15),c' '\n mvc   1(l'zedlmsg-1,r15),0(r15)\n mvc   0(20,r15),=c'PUT RPL suffered RC='\n la    r15,20(r15)\n lr    r1,r8\n bas   r9,editfwf\n mvc   0(11,r15),=c', feedback='\n la    r15,11(r15)\n unpk  0(9,r15),rr_RPL+(RPLFDBWD-IFGRPL)(5)\n mvz   0(8,r15),=8x'00'\n tr    0(8,r15),=c'0123456789ABCDEF'\n la    r15,8(r15)\n la    r1,zedlmsg\n lr    r15,r1\n lr    r0,r15\n TPUT  (1),(0)\n mvc   parmlist(21),=c'Hit Enter to continue'\n TPUT  PARMLIST,21\n TGET  double,1\n b     RR$LX\n\nRR$LB ds 0h\n la    r5,1(r5)                         Increment the relative line\n la    r4,1(r4)                         Increment the selected line\n c     r4,LINEE                         Still in line range?\n BNH   RR$L                             Yeppers!\n\n* Read of lines is complete\n\nRR$LX  DS 0h\n\n***********************************************************************\n***\n**   All good things must come to an end\n***\n***********************************************************************\n\nBring_It_On_Home ds 0h\n\n* Ensure that we wrote at least one record out\n\n c     r5,=f'1'                         Did we write one record out\n bh    bioh$ok                          Yep, continue\n\n bas   R9,Initialize_ISPF_Message       Init msgs R14=short R15=long\n mvc   0(MSG13LL,R15),MSG13L\n la    R15,MSG13LL(R15)\n la    R8,0                             Short message length = 0\n bas   R9,Set_ISPF_Message              Set the message up\n b     bioh$x\nbioh$ok ds 0h\n\n* Write out the traditional End Of File statement\n\n mvc   LINEVAL(80),=CL80'/*EOF'\n PUT   RPL=RR_RPL\n\n* Try to obtain the JOB ID (will go to RPLRBAR if successful)\n\n ENDREQ RPL=RR_RPL                      Try to get the job number\n ltr   r15,r15                          Well?\n bz    bioh$erx                         no, just continue\n MVC   RR_RPL+(RPLRBAR-IFGRPL)(8),=8c'?' Things got out of hand\nbioh$erx ds 0h\n\n* Boast of our success\n\n bas   R9,Initialize_ISPF_Message       Init msgs R14=short R15=long\n mvc   0(MSG12LL,R15),MSG12L\n mvc   MSG12ln-msg12l(l'msg12ln,r15),pl_jobname Insert jobname\n MVC   msg12li-msg12l(l'msg12li,r15),RR_RPL+(RPLRBAR-IFGRPL) Jobid\n l     r1,PSAAOLD-PSA                   -> ASCB\n l     r1,ASCBASSB-ASCB(,r1)            -> ASSB\n icm   r14,b'1111',ASSBJSAB-ASSB(r1)    -> JSAB\n bz    bioh$jesx                        I'll be a monkey's uncle\n mvc   msg12lj-msg12l(l'msg12lj,r15),JSABSCID-JSAB(R14) JES2/JES3\nbioh$jesx ds 0h\n la    R15,MSG12LL+1(R15)               Bump past the fixed msg area\n l     r1,pfp_updated                   Get updated line count\n bas   r9,editfwf                       Edit it\n clc   pfp_updated(4),=f'1'             Let's use gooder english...\n be    bioh$l1\n mvc   1(5,r15),=c'lines'               Complete the message\n la    r15,6(r15)                       Bump past it\n b     bioh$l1x\nbioh$l1 ds 0h\n mvc   1(4,r15),=c'lines'               Complete the message\n la    r15,5(r15)                       Bump past it\nbioh$l1x ds 0h\n la    R8,0                             Short message length = 0\n bas   R9,Set_ISPF_Message              Set the message up\n\nbioh$x ds 0h\n\n***********************************************************************\n***\n**       Termination\n***\n***********************************************************************\n         SPACE 2\nExit ds 0h\n\n* Turn off ESTAE if on\n\n tm    flag1,$f1_ESTAE                  Estae on?\n bno   x$ESTAEx                         Nope...\n ESTAE 0                                Turn off ESTAE processing\nx$ESTAEx ds 0h\n\n* Delete ASASYMBM from storage if loaded\n\n icm   r0,b'1111',ep_ASASYMBM\n bz    x$DSx\n DELETE EPLOC==CL8'ASASYMBM'\nx$DSx ds 0h\n\n* Close file (if open)\n\n la    r3,rr_ACB                        Locate the ACB\n tm    ACBOFLGS-IFGACB(R3),ACBOPEN      ACB is open?\n bno   x$CLOSEx\n mvc   PARMLIST(c_closel),c_close       Initialize parameter list\n CLOSE ((3)),MODE=31,MF=(E,PARMLIST)    Close the file\nx$CLOSEx ds 0h\n\n* Delete module ISPLINK from storage if loaded\n\n tm    flag1,$f1_isplinkl               Found in LPA?\n bo    x$ILINKx                         Yes, no DELETE needed\n DELETE EPLOC==CL8'ISPLINK'             No, delete it\nx$ILINKx ds 0h\n\n* Free resources and terminate\n\n lr    R2,R13                           Get storage address\n slr   R3,R3                            Get ready for IC\n ic    R3,MaxCC                         Save return code\n STORAGE RELEASE,LENGTH=WORKDSL,ADDR=(R2) Release storage\n lr    R15,R3                           Set return code\n PR    ,                                Return to caller\n\n* Error routines for ISPF enviornmental issues\n\nE$IQRYE ds 0h\n MVC   ZEDLMSG(L'MSG0),MSG0\n TPUT  ZEDLMSG,L'MSG0\n B     Exit\nE$NISPF ds 0h\n MVC   ZEDLMSG(L'MSG1),MSG1\n TPUT  ZEDLMSG,L'MSG1\n B     Exit\nE$ILINKB ds 0h\n MVC   ZEDLMSG(L'MSG2),MSG2\n TPUT  ZEDLMSG,L'MSG2\n B     Exit\nE$ILINKL ds 0h\n MVC   ZEDLMSG(L'MSG3),MSG3\n TPUT  ZEDLMSG,L'MSG3\n B     Exit\n\n* Error routine if we ABEND\n\nE$Retry ds 0h\n xc    EWA_RetryA(4),EWA_RetryA         No more Mr. Nice guy\n la    r15,zedlmsg  ....+....1....+....2....+....3..\n mvc   0(32,R15),=c'Oops, SUBMITC suffered an ABEND.'\n TPUT  zedlmsg,32\n la    r15,zedlmsg  ....+....1....+....2....+....3....+....4\n mvc   0(40,R15),=c'You will have to use edit/submit method.'\n TPUT  zedlmsg,40\n b     Exit\n\n***********************************************************************\n***\n**   Process the lines (in field LINEVAL) as they drift by\n**\n**   Hint: Here's where we try to detect passwords.\n***\n***********************************************************************\n\nProcess_Line ds 0h\n st    r14,pl_ra\n\n* The first line of a valid job should contain a jobname (duh!)\n* so save it...\n\n c     r5,=F'1'                         First time through?\n bne   pl$job1x                         Nope continue\n la    r8,LINEVAL+2                     Locate jobname in \"//jobname\"\n trt   0(71-2,r8),c_space               look for first space\n bz    pl$x                             Doesn't look valid...\n st    r1,double                        Save address of first space\n bctr  r1,0                             Back to last character of job\n sr    r1,r8                            Get length\n ltr   r1,r1                            Have a length?\n bz    pl$x                             Nope, ???\n mvc   pl_jobname(8),=8c' '             Yes, pad spaces\n ex    r1,pl$job1m                      Get jobname\n\n l     r1,double                        Retreive addr of first space\n la    r14,lineval+65                   Max to consider\n sr    r14,r1\n ex    r14,pl$job1j\n bz    pl$x\n clc   0(3,R1),=c'JOB'                  Found the job card\n bne   pl$x\n oi    flag1,$f1_IN_JOBCARD             In Job card\n b     pl$x\npl$job1j trt 0(*-*,r1),c_job            Look for a J\npl$job1m mvc pl_jobname(*-*),0(r8)      Get jobname\npl$job1x ds 0h\n\n tm    flag2,$f2_Symbols\n bno   pl$symbolx\n bas   r14,Invoke_Symbol_Routine        Call IBM routine for LINEVAL\npl$symbolx ds 0h\n\n tm    flag1,$f1_IN_JOBCARD             In Job card?\n bo    pl$jobcard\n tm    flag1,$f1_IN_NETRCDD             In //NETRC?\n bo    pl$netrc\n tm    flag1,$f1_IN_INPUTDD             In //INPUT?\n bo    pl$input\n\n* We are now processing until we see a new thing to worry about\n\npl$jcl ds 0h\n\n clc   LINEVAL(8),=C'//NETRC '\n be    pl$set_netrc\n clc   LINEVAL(8),=C'//INPUT '\n be    pl$set_input\n clc   LINEVAL(12),=C'//*SUBMITC::'\n be    pl$our_ccjcl\n clc   LINEVAL(13),=C' /* SUBMITC::'\n be    pl$our_ccin1\n clc   LINEVAL(10),=C'*SUBMITC::'\n be    pl$our_ccin2\n b     pl$x\n\n* Set NETRC for next record.  If we wanted to be robust, we would\n* ensure that this is a DD statement and not a EXEC or OUTPUT.\n\npl$set_netrc ds 0h\n oi    flag1,$f1_IN_NETRCDD             Turn on flag\n b     pl$x\n\n* Set INPUT for next record.  If we wanted to be robust, we would\n* ensure that this is a DD statement and not a EXEC or OUTPUT.\n\npl$set_input ds 0h\n oi    flag1,$f1_IN_INPUTDD             Turn on flag\n b     pl$x\n\n* Now process JOB card lines until we hit something that doesn't look\n* like a job card.  Comment cards in the job card are not supported\n* currently by my simple parsing.\n\npl$jobcard ds 0h\n clc   lineval(2),=c'/*'\n be    pl$jobcarde\n clc   lineval(3),=c'// '\n bne   pl$jobcarde\n trt   lineval(71),c_user                Look for start of \"USER=\"\n bz    pl$x\n clc   0(5,r1),=C'USER='                 Found it?\n bne   pl$x\n la    r14,LINEVAL+70                    Locate to end of line\n sr    r14,r1                            Length to consider\n ex    r14,pl$jobcardq                   Found question mark?\n bz    pl$x                              Nope...\n cli   1(r1),c','                        Followed by a comma?\n bne   pl$jobcardc\n oi    flag1,$f1_appendc                 Need to append comma\npl$jobcardc ds 0h\n oi    flag1,$f1_pupper                  Ensure password is uppercase\n mvc   submitcu(l'submitcu),lineval      Yes, grab line\n bas   r14,Prompt_For_Password                and run with it\n b     pl$x\npl$jobcardq trt 0(*-*,r1),c_question\npl$jobcarde ds 0h\n ni    flag1,255-$f1_IN_JOBCARD\n b     pl$x\n\n* Process //NETRC instream statements\n\npl$netrc ds 0h\n clc   lineval(2),=c'/*'                Found end?\n be    pl$netrce\n clc   lineval(2),=c'//'                Found end?\n be    pl$netrce\n mvc   submitcu(l'submitcu),lineval     Save for panel\n bas   r14,Prompt_For_Password          Prompt for password\n b     pl$x\npl$netrce ds 0h\n ni    flag1,255-$f1_IN_NETRCDD\n b     pl$jcl\n\n* Process //INPUT instream statements\n\npl$input ds 0h\n clc   lineval(2),=c'/*'                Found end?\n be    pl$inpute\n clc   lineval(2),=c'//'                Found end?\n be    pl$inpute\n tm    flag1,$f1_nextpswd               Password on this line?\n bo    pl$inputp                        Yep\n\n mvc   double(5),lineval                get first 8 chars\n oc    double(5),=8c' '                 Ensure uppercase\n clc   double(5),=c'USER '              User?\n bne   pl$x\n mvc   submitcu(l'submitcu),lineval     Save for next record\n oi    flag1,$f1_nextpswd               Consider next line for pswd\n b     pl$x\npl$inputp ds 0h\n cli   lineval,c'?'                     Question mark on first byte?\n be    pl$inputpp                       Yes, Cool we found one\n ni    flag1,255-$f1_nextpswd           No, Well skip it\n b     pl$x\npl$inputpp ds 0h\n bas   r14,Prompt_For_Password          Prompt for password\n ni    flag1,255-$f1_nextpswd\n b     pl$x\npl$inpute ds 0h\n ni    flag1,255-$f1_IN_INPUTDD\n ni    flag1,255-$f1_nextpswd\n b     pl$jcl\n\n* We found some type of special SUBMITC:: card\n\npl$our_ccjcl ds 0h                      \"//*SUBMITC::\"\n la    r3,LINEVAL+12                    Locate start of parameter\n b     pl$ourcc\npl$our_ccin1 ds 0h                      \" /* SUBMITC::\"\n la    r3,LINEVAL+13                    Locate start of parameter\n b     pl$ourcc\npl$our_ccin2 ds 0h                      \"*SUBMITC::\"\n la    r3,LINEVAL+10                    Locate start of parameter\npl$ourcc ds 0h\n clc   0(3,r3),=c'SYM'\n be    pl$ourcc_SymbolsOn\n clc   0(5,r3),=c'NOSYM'\n be    pl$ourcc_SymbolsOff\n clc   0(5,r3),=c'HELLO'\n be    pl$ourcc_Hello\n*Here we could gripe about a parm we don't recognize\n b     pl$x\npl$ourcc_SymbolsOn ds 0h\n oi    flag2,$f2_Symbols\n b     pl$x\npl$ourcc_SymbolsOff ds 0h\n ni    flag2,255-$f2_Symbols\n b     pl$x\npl$ourcc_Hello ds 0h\n mvc   zedlmsg(12),=c'Hello World!'\n TPUT  zedlmsg,12\n b     pl$x\n\n* Common exit from Process_Lines processing\n\npl$X ds 0h\n l     r14,pl_ra\n bsm   0,r14\n\n***********************************************************************\n***\n**   Prompt the user for the password\n***\n***********************************************************************\n\nPrompt_For_Password ds 0h\n st    r14,pfp_ra                         Save return address\n\n mvi   submitci,c' '\n mvc   submitci+1(l'submitci+1),submitci\n\n* Define the panel's output variable (userid)\n\n la    r0,l'submitcu\n st    r0,double\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',                                            @\n               =C'(SUBMITCU)',                                         @\n               SUBMITCU,                                               @\n               =CL8'CHAR',                                             @\n               DOUBLE),                                                @\n               VL,MF=(E,PARMLIST)\n\n* Define the panel's input variable (password)\n\n la    r0,l'submitci\n st    r0,double\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',                                            @\n               =C'(SUBMITCI)',                                         @\n               SUBMITCI,                                               @\n               =CL8'CHAR',                                             @\n               DOUBLE),                                                @\n               VL,MF=(E,PARMLIST)\n\n* Output the variable so the panel has it\n\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'VPUT',                                               @\n               =C'(SUBMITCU)',                                         @\n               =CL8'SHARED'),                                          @\n               VL,MF=(E,PARMLIST)\n\n* Display the panel to get the password\n\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'ADDPOP'),                                            @\n               VL,MF=(E,PARMLIST)\n\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'DISPLAY',                                            @\n               =CL8'SUBMITCP'),                                        @\n               VL,MF=(E,PARMLIST)\n lr    r2,r15\n\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'REMPOP'),                                            @\n               VL,MF=(E,PARMLIST)\n\n ltr   r2,r2\n bnz   pfp$rubout\n\n* Retrieve the password from the panel\n\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'VGET',                                               @\n               =C'(SUBMITCI)',                                         @\n               =CL8'SHARED'),                                          @\n               VL,MF=(E,PARMLIST)\n ltr   r15,r15\n bnz   pfp$rubout\n cli   submitci,c' '\n be    pfp$rubout\n\n*mvc   parmlist(9),=c'Password:'    BOZO\n*tput  parmlist,9                   BOZO\n*tput  submitci,l'submitci          BOZO\n\n* Okay, it looks like we got a password, copy to LINEVAL\n\n trt   lineval(71),c_question             Look for question mark\n bz    pfp$rubout                         Oops, not found\n\n l     r15,pfp_updated                    Get updated count\n la    r15,1(r15)                         Increment by one\n st    r15,pfp_updated                    Save updated count\n\n tm    flag1,$f1_pupper                   Ensure password uppercase?\n bno   pfp$ux                             No, continue\n mvi   parmlist,c' '                      Yes, get space\n mvc   parmlist+1(l'submitci-1),parmlist       get bunchs more\n la    r14,lineval+70                          Maximum byte\n sr    r14,r1                                  Len = end - start\n ch    r14,=al2(l'submitci-1)                  In range?\n bnh   pfp$us                                  Yes, use it\n la    r14,l'submitci-1                        No, set to good length\npfp$us ds 0h\n ex    r14,pfp$uo                              Fold to uppercase\n b     pfp$ux\npfp$uo oc submitci(*-*),parmlist          Make uppercase\npfp$ux ds 0h\n\n la    r14,lineval+70                     Look for maximum last byte\n sr    r14,r1                             Max length = end - start\n la    r15,submitci                       Locate start of password\npfp$l ds 0h\n mvc   0(1,r1),0(r15)                     Move byte in of password\n la    r15,1(r15)                         Bump to next password byte\n la    r1,1(r1)                           Bump to next output byte\n cli   0(r15),c' '                        Found space in password?\n be    pfp$lx                             Yes, leave\n bct   r14,pfp$l                          No, get next byte\npfp$lx ds 0h\n\n tm    flag1,$f1_appendc                  Need to append comma?\n bno   pfp$cx\n mvi   0(r1),c','                         Oh how thoughtful!\npfp$cx ds 0h\n\n* \"Only the paranoid survive\" -- Andy Grove\n\npfp$rubout ds 0h\n xc    submitci(l'submitci),submitci      Set password to binary zeros\n\n l     R15,EP_ISPLINK\n CALL  (15),(=CL8'VERASE',                                             @\n               =C'(SUBMITCI)',                                         @\n               =CL8'SHARED'),                                          @\n               VL,MF=(E,PARMLIST)\n\n* Common exit from Prompt_For_Password processing\n\npfp$x  ds 0h\n ni    flag1,255-$f1_appendc             Ensure flag is now off\n ni    flag1,255-$f1_pupper              Ensure flag is now off\n\n l     r14,pfp_ra                        Get return address\n bsm   0,r14\n\n***********************************************************************\n***\n**       Misc subroutines\n***\n***********************************************************************\n\nInvoke_Symbol_Routine ds 0h\n st    r14,isr_ra                        Save return address\n\n*  Load in the routine if first time\n\n icm  r0,b'1111',EP_ASASYMBM             Get entry point\n LOAD EPLOC==CL8'ASASYMBM',ERRET=ISR$Error Load routine\n st   r0,EP_ASASYMBM                     Save entry point\nISR$LX   DS   0h\n\n* Setup parameter list and call ASASYMBM\n\n la    R1,parmlist                       Locate data area\n USING SYMBP,R1\n xc    SYMBP(SYMBP_LEN),SYMBP            Initialize to zero\n la    r14,LINEVAL                       Address of pattern\n st    r14,SYMBPPATTERN@                 Save in SYMBP area\n la    r14,L'LINEVAL                     Length of pattern\n st    r14,SYMBPPATTERNLENGTH            Save in SYMBP area\n la    r14,isr_target                    Address of target\n st    r14,SYMBPTARGET@                  Save in SYMBP area\n la    r14,double                        Address of target length\n mvc   0(4,r14),=al4(L'isr_target)       Set length of target\n st    r14,SYMBPTARGETLENGTH@            Save in SYMBP area\n la    r14,double+4                      Address of return code\n xc    0(4,r14),0(r14)\n st    r14,SYMBPRETURNCODE@              Save in SYMBP area\n DROP  R1\n l     R15,EP_ASASYMBM                   Get EPA of routine\n basr  R14,R15                           Call it\n\n icm   r1,B'1111',double+4               Get ASASYMBM return code\n bnz   ISR$X                             No good, continue\n clc   LINEVAL(80),isr_target            Same as it ever was?\n be    isr$x                             Yes...\n mvc   LINEVAL(80),isr_target            No, get updated line\n l     r15,pfp_updated                   Get updated count\n la    r15,1(r15)                        Increment by one\n st    r15,pfp_updated                   Save updated count\n b     isr$x\n\n* Error: ASASYMBM module could not be loaded\n\nISR$Error ds 0h\n ni    flag2,255-$f2_Symbols             Turn off symbol processing\n\n* Common exit from Invoke_Symbol_Routine processing\n\nISR$X  ds 0h\n l     r14,isr_ra                        Get return address\n bsm   0,r14\n\n***********************************************************************\n***\n**       Misc subroutines\n***\n***********************************************************************\n\n* Search JPALPA for module\n*\n* Input: R1 has address of 8 byte module to look for\n* Output: R15 has return code from CSVQUERY\n\nFind_LPA_Module DS 0H\n ST    R14,DOUBLE                         Save return address\n ST    R2,DOUBLE+4                        Save work register\n LR    R2,R1\n CSVQUERY INEPNAME=(2),                   Search for module            @\n               OUTEPA=DOUBLE2,            ..Output of EPA              @\n               OUTVALID=DOUBLE2+4,        ..Output of validation byte  @\n               MF=(E,W_CSVQRY)            ..Execution\n SLR   R0,R0                              No module...\n LTR   R15,R15                            Found?\n BNZ   FLM$X                              No, Leave\n L     R0,DOUBLE2                         Get EPA of module\n TM    DOUBLE2+4,X'40'                    Was OUTEPA valid?\n BO    FLM$X                              Yes, continue\n LA    R15,8                              No, can't vouch for EPA\nFLM$X ds 0h\n L     R2,DOUBLE+4                        Restore work register\n L     R14,DOUBLE                         Restore return address\n BSM   0,R14                              Return to caller\n\n* Issue BLDL (no DCB)\n*\n* Input: R1 has address of 8 byte module to look for\n* Output: R15 has return code from BLDL\n\nIssue_BLDL ds 0h\n st    r14,DOUBLE                       Save return address\n xc    BLDLA(BLDLAL),BLDLA              Clear to zeros\n mvc   BLDLA_FF(2),=AL2(1)              Set number of members\n mvc   BLDLA_LL(2),=AL2(BLDLA_ENTRYL)   Move in entry length\n mvc   BLDLA_ENTRY+(PDS2NAME-PDS2)(8),0(R1)\n BLDL  0,BLDLA                          Perform BLDL\n l     r14,DOUBLE                       Get return address\n bsm   0,R14                            Return to caller\n\n* Edit R1 flush\n* R1 ... Value to edit\n* R15 ... Output address\n\nEDITFWF ds 0h\n LTR   R1,R1                            CHECK FOR 0\n BZ    EDITFWF0                         YES, PUT ZERO\n CVD   R1,DOUBLE                        NO, CONVERT TO PACKEC\n LA    R1,DOUBLE2+14                    LOCATE SIG DIGIT\n MVC   DOUBLE2(15),EDITFWF15\n EDMK  DOUBLE2(15),DOUBLE+2             EDIT AND SAVE PLACE\n LA    R14,DOUBLE2+16                   LOCATE LAST POSSIBLE BYTE + 1\n SR    R14,R1                           LENGTH = END - START\n BCTR  R14,0                            DECREMENT FOR EX\n EX    R14,EDITFWFM                     MOVE EDIT NUMBER TO OUTPUT\n LA    R15,0(R14,R15)                   BUMP POINTER PAST NUMBER\n MVI   0(R15),C' '\n BSM   0,R9                             RETURN TO CALLER\nEDITFWFM  MVC 0(0,R15),0(R1)\nEDITFWF15 DC  X'40,20,20,6B,20,20,20,6B,20,20,20,6B,20,20,20'\nEDITFWF0 ds 0h\n MVI   0(R15),C'0'                      PUT IN ZERO\n LA    R15,1(R15)                       BUMP POINTER PAST ZERO\n BSM   0,R9                             RETURN TO CALLER\n\n* Edit full word in Register 1 flush at location in Register 15\n* with no commas\n*\n* INPUT: R1 - Register to print\n*        R15 - Address to put number\n\nEDITNCF ds 0h\n LTR   R1,R1                            CHECK FOR 0\n BZ    EDITNCF0                         YES, PUT ZERO\n CVD   R1,DOUBLE                        NO, CONVERT TO PACKEC\n LA    R1,DOUBLE2+7                     LOCATE SIG DIGIT\n MVC   DOUBLE2(8),EDITNCFP\n EDMK  DOUBLE2(8),DOUBLE+4              EDIT AND SAVE PLACE\n LA    R14,DOUBLE2+9                    LOCATE LAST POSSIBLE BYTE + 1\n SR    R14,R1                           LENGTH = END - START\n BCTR  R14,0                            DECREMENT FOR EX\n EX    R14,EDITNCFM                     MOVE EDIT NUMBER TO OUTPUT\n LA    R15,0(R14,R15)                   BUMP POINTER PAST NUMBER\n MVI   0(R15),C' '\n BSM   0,R9                             RETURN TO CALLER\nEDITNCFM MVC   0(0,R15),0(R1)\nEDITNCFP DC    X'40,20,20,20,20,20,20,20,20,20,20,20,20,20,20'\nEDITNCF0 DS    0H\n MVI   0(R15),C'0'                      PUT IN ZERO\n LA    R15,1(R15)                       BUMP POINTER PAST ZERO\n BSM   0,R9                             RETURN TO CALLER\n\n* POINT REGISTER 15 TO FIRST BLANK IN STRING\n* INPUT:  R0  - MAXIMUM LENGTH OF STRING\n*         R15 - STRING\n* OUTPUT: R15 - FIRST SPACE IN STRING\n\nLocate_First_Space EQU *\n CLI   0(R15),C' '\n BE    LFS$X\n LA    R15,1(R15)\n BCT   R0,Locate_First_Space\nLFS$X ds 0h\n BSM   0,R14\n\n* Blank out the ISPF messages\n\nInitialize_ISPF_Message ds 0h\n LA    R14,ZEDSMSG\n MVI   0(R14),C' '\n MVC   1(L'ZEDSMSG-1,R14),0(R14)\n\n LA    R15,ZEDLMSG\n MVI   0(R15),C' '\n MVC   1(L'ZEDLMSG-1,R15),0(R15)\n BSM   0,R9\n\n* Set message ISRZ001 which uses ZEDSMSG and ZEDLMSG\n\nSet_ISPF_Message ds 0h\n ST    R8,ZEDSMSGL                Set short message length\n\n LA    R1,ZEDLMSG                 Get start of long message\n SR    R15,R1                     Length = end - start\n ST    R15,ZEDLMSGL               Save length\n\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',                                            @\n               =C'(ZEDSMSG)',                                          @\n               ZEDSMSG,                                                @\n               =CL8'CHAR',                                             @\n               ZEDSMSGL),                                              @\n               VL,MF=(E,PARMLIST)\n\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'VDEFINE',                                            @\n               =C'(ZEDLMSG)',                                          @\n               ZEDLMSG,                                                @\n               =CL8'CHAR',                                             @\n               ZEDLMSGL),                                              @\n               VL,MF=(E,PARMLIST)\n\n L     R15,EP_ISPLINK\n CALL  (15),(=CL8'SETMSG',                                             @\n               =CL8'ISRZ001'),                                         @\n               VL,MF=(E,PARMLIST)\n\n BSM   0,R9\n\n***********************************************************************\n***\n**       Constants and literals\n***\n***********************************************************************\n\nMSG0     DC    C'Link to ISPQRY module failed'\nMSG1     DC    C'ISPF services are not available'\nMSG2     DC    C'BLDL to ISPLINK module failed'\nMSG3     DC    C'LOAD of ISPLINK module failed'\nMSG4S    DC    C'Initialization error'\nMSG4SL   EQU   *-MSG4S\nMSG4L    DC    C'MACRO call for ISREDIT RC='\nMSG4LL   EQU   *-MSG4L\nMSG5L    DC    C'Empty dataset/member, terminating'\nMSG5LL   EQU   *-MSG5L\nMSG10S   DC    C'Open failed'\nMSG10SL  EQU   *-MSG10S\nMSG10L   DC    C'Open to INTRDR ACB failed, RC='\nMSG10LL  EQU   *-MSG10L\nMSG11L   DC    C'Dynamic allocation to INTRDR failed, RC='\nMSG11LL  EQU   *-MSG11L\n\nMSG12L   dc    c'JOB '\nMSG12LN  dc    c'xxxxxxxx'\n         dc    c' ('\nMSG12LI  dc    c'xxxxxxxx'\n         dc    c') submitted to '\nMSG12LJ  dc    c'JES '\n         dc    c'. Updated'\nMSG12LL  EQU   *-MSG12L\n\nMSG13L   DC    C'Submit failed: didn''t write out any records'\nMSG13LL  EQU   *-MSG13L\n\nc_close  CLOSE (*-*),MODE=31,MF=L\nc_closel equ   *-c_close\n\nc_openo  OPEN  (*-*,(OUTPUT)),MODE=31,MF=L\nc_openol equ   *-c_openo\n\nc_acb    ACB   DDNAME=C_ACB,MACRF=(ADR,SEQ,OUT)\nc_acbl   equ   *-c_acb\n\nc_rpl    RPL   ACB=C_ACB,AREALEN=80,RECLEN=80,                         @\n               OPTCD=(ADR,SYN,SEQ,NUP,MVE)\nc_rpll   equ   *-c_rpl\n\nc_ESTAE  ESTAE *-*,CT,TERM=NO,MF=L\nc_ESTAEl EQU   *-c_ESTAE\n\n\nc_space  dc    256x'00'\n         org   c_space+c' '\n         dc    c' '\n         org   ,\n\nc_question dc  256x'00'\n         org   c_question+c'?'\n         dc    c'?'\n         org   ,\n\nc_job    dc  256x'00'\n         org   c_job+c'J'\n         dc    c'J'\n         org   ,\n\nc_user   dc  256x'00'\n         org   c_user+c'U'\n         dc    c'U'\n         org   ,\n\n* Literals\n\n         LTORG ,\n\n* Trivia: Length of main csect and bytes left addressible\n\n                    ds  0d\nSUBMITC_Length      equ *-SUBMITC                Length of program\nSUBMITC_Bytes_Left  equ (3*4096)-SUBMITC_Length  Bytes left addressable\n DROP  R12,R11,R10\n\n***********************************************************************\n***\n**     E S T A E   E X I T  - Gets control for ABENDs\n**\n**     \\\\//////      ________________\n**     \\\\    |      /                \\\n**     \\(_  x|     /  Bloooeeahhh!!! |\n**     \\    __)  _/__________________/\n**   __/   _\\ ,. .\n**  /     /  .%:. * .\n** |  |   |   . ;>, $  '                 \"Castles made of sand,\n** |  |   |    .=.~@ .  &                fall into the sea,\n** UUUU---|   :?. ;. .\u00ac#  .   \u00ac          eventually\" -- Jimi Hendrix\n** |      |    < * '   .   ,  *\n**\n***\n***********************************************************************\n\nSUBMITCE CSECT ,\nSUBMITCE AMODE 31\nSUBMITCE RMODE ANY\n\n* Standard O/S eyecatcher\n\nER_EC    B     ER_ECL(0,R15)            Bump past EyeCatcher\n         DC    AL1(ER_ECE-ER_ECV)       Length of Eyecatcher\nER_ECV   DC    C'SUBMITCE - ESTAE error routine'\nER_ECE   EQU   *\n         DS    0H\nER_ECL   EQU   *-ER_EC\n\n* Standard ESA entry housekeeping\n\n bakr  r14,0                            Save regs\n lae   r12,0(r15,0)                     Get base register\n USING SUBMITCE,R12                     Get addressibility\n SAC   0\n SYSSTATE ASCENV=P\n\n* Register input parameters\n* R0 - Code:\n*      - 0  ... Active I/O has be Quiesced and is restorable\n*      - 4  ... Active I/O has been halted and is not restorable\n*      - 8  ... No active I/O at ABEND Time\n*      - 12 ... an SDWA was not obtained\n*      - 16 ... No I/O processing was performed\n* R1 - IF R0 <> 12 THEN it has SDWA ELSE ABEND code\n\n ch    r0,=H'12'                        SDWA present?\n be    er$x                             No, just leave\n lr    r2,r1                            Save SDWA address\n USING SDWA,r2\n l     r4,SDWAPARM                      Locate EWA\n\n* Get set for return address\n\n ICM   R3,B'1111',EWA_RetryA-EWA(R4)    Get retry addr\n BZ    ER$X                             Not there, give up\n MVC   SDWASR13(4),EWA_R13-EWA(R4)\n MVC   SDWASR12(4),EWA_R12-EWA(R4)\n MVC   SDWASR11(4),EWA_R11-EWA(R4)\n MVC   SDWASR10(4),EWA_R10-EWA(R4)\n\n         SETRP WKAREA=(2),              Set Return Parameters          @\n               RETADDR=(3),             ..Return Address               @\n               RETREGS=YES,             ..Reset regs using SDWASRSV    @\n               DUMP=YES,                ..Take the dump, pleeze        @\n               RC=4                     ..Retry using RETADDR\n         DROP  R2\n\n* Return with no attempt to retry\n\ner$x ds 0h\n pr    ,                                Return to caller\n\n* constants\n\n LTORG ,                                Literals\n ds    0d                               End on doubleword boundry\nSUBMITCEL equ   *-SUBMITCE\n drop  R12\n\n***********************************************************************\n***\n**       Dynamic Save Area\n***\n***********************************************************************\n\nWORKDS         DSECT ,\n               DS    18F               Register Save Area\n               DS    0D\nDOUBLE         DS    D\nDOUBLE2        DS    2D\nPARMLIST       DS    20F\n\nEP_ISPLINK     ds    xl4                Entry point of ISPLINK\n\npfp_updated    ds    xl4                Number of updated lines\npfp_ra         ds    xl4                Return address for routine\n\n\nLINEC          ds    xl4                .ZCSR\nLINES          ds    xl4                Starting Line or .ZFIRST\nLINEE          ds    xl4                Ending line or .ZLAST\nLINEVAL        ds    cl80               Line value\nISREDITC       DS    cl64'% (LINEVAL) = LINE xxxxxxxxxx %'\n\nFLAG_LIT       DS    C'FLGS'            Flag literal for dumps\nflag1          DS    B'00000000'        Flag 1:\n$f1_isplinkl   EQU   B'10000000'        ..ISPLINK in LPA?\n$f1_IN_NETRCDD EQU   B'01000000'        ..In //NETRC?\n$f1_IN_INPUTDD EQU   B'00100000'        ..In //INPUT?\n$f1_IN_JOBCARD EQU   B'00010000'        ..In job card?\n$f1_NextPswd   EQU   B'00001000'        ..Next line has password?\n$f1_appendc    EQU   B'00000100'        ..Need to append comma?\n$f1_pupper     EQU   B'00000010'        ..Ensure password is uppercase?\n$f1_ESTAE      EQU   B'00000001'        ..ESTAE active?\nflag2          DS    B'00000000'        Flag 1:\n$f2_Symbols    EQU   B'10000000'        ..Call IBM routine for Symbols?\nMaxCC          DS    X                  Exit condition code\n\nBLDLA          DS    0F                 BLDL area\nBLDLA_FF       DS    X'00,00'           ..Total number of entries\nBLDLA_LL       DS    X'00,00'           ..Length of the area\nBLDLA_ENTRY    DS    XL(PDS2USRD-PDS2)  ..Start of user data\nBLDLA_USERD    DS    CL62               ..User data (enough for ISPF)\nBLDLA_ENTRYL   EQU   *-BLDLA_ENTRY      ..Length of PDS entry\nBLDLAL         EQU   *-BLDLA            ..Length of PDS area\n\n               ds    0d                 Read_Records:\nrr_ACB         ds    xl(c_acbl)         ..Access Control Block\nrr_RPL         ds    xl(c_rpll)         ..Request Parameter List\n\nEWA            ds    0f                 ESTAE Work Area\nEWA_ID         ds    cl4'EWA'           ..ID for dumps\nEWA_RetryA     ds    xl4                ..Retry address\nEWA_Regs       equ   *                  ..Important registers\nEWA_R10        ds    f\nEWA_R11        ds    f\nEWA_R12        ds    f\nEWA_R13        ds    f\nEWAL           equ   *-EWA\n\n* Symbol processing areas\n\nEP_ASASYMBM    ds    xl4                Entry point of ASASYMBM module\nisr_ra         ds    xl4                Return address for routine\nisr_target     ds    CL80               Target area to modify\n\n               ds    0f                 Dynamic_Allocation:\nda_ddname      ds    xl4                ..Address of returned DDNAME\nda_s99rb       ds    xl256              ..SVC 99 RB area and text units\n\n               ds    0f                 Process_Line:\npl_ra          ds    xl4                ..Return Address\npl_jobname     ds    cl8                ..Jobname found\n\n               CSVQUERY MF=(L,W_CSVQRY),PLISTVER=2\n\n* Misc ISPF variables\n\n               DS    0F\nZEDSMSGL       DS    F                  Short error message length\nZEDLMSGL       DS    F                  Long error message length\nZEDSMSG        DS    CL24               Short error message\nZEDLMSG        DS    CL128              Long error message\n\nsubmitcu       ds    cl70               Shown on password prompt panel\nsubmitci       ds    cl32               Password is returned here\nEPARM          DS    CL50               Edit macro parm\n               DS    0D\nWORKDSL        EQU   *-WORKDS\n\n* End of SUBMITC source ...............................................\n END ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUBMITCE": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x02\\x04o\\x01\\x02\\x04o\\x15&\\x00\"\\x00\"\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-02-15T00:00:00", "modifydate": "2002-02-15T15:26:18", "lines": 34, "newlines": 34, "modlines": 0, "user": "IBMUSER"}, "text": "/* REXX\n |\n | Name: SUBMITCE\n |\n | Author: David Alcock\n |         dave@planetmvs.com\n |\n | Purpose: Invoke the SUBMITC edit macro to submit a jobstream.\n |\n | Disclaimer: This REXX exec is FREEWARE.  Use at your own risk.  It\n |             is provided for your enjoyment and neither David\n |             Alcock or his employer provides any warranty for it's\n |             use.  I'd like to hear how it works on your system.\n |\n |             This software is not in the public domain but is\n |             available free of charge and with source code provided.\n |             It is copyright 2002+ by David Alcock.  All rights\n |             reserved.\n */\n arg dsn\n if sysvar('SYSISPF') <> \"ACTIVE\" then do\n    say \"%SUBMITCE can only be used in ISPF\"\n    exit 12\n    end\n if dsn == \"\" then do\n    say \"%SUBMITCE: Missing dataset to submit\"\n    exit 12\n    end\n address ISPEXEC\n /* If you are on an older system, use EDIT instead of VIEW */\n \"VIEW DATASET(\"dsn\") MACRO(!SUBMITC)\"\n emrc = rc\n /* Note: RC=4 means no update was made to dataset */\n exit emrc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUBMITCP": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x004\\x01\\x02\\x03o\\x01\\x02\\x03\\x7f\\x14Y\\x00$\\x00!\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-02-05T00:00:00", "modifydate": "2002-02-06T14:59:34", "lines": 36, "newlines": 33, "modlines": 0, "user": "IBMUSER"}, "text": ")attr default(%+_)\n /********************************************************************/\n /* Name: SUBMITCP                                                   */\n /* Author: David Alcock :: dave@planetmvs.com                       */\n /* Application: SUBMITC                                             */\n /* Purpose: Prompt user for password                                */\n /*                                                                  */\n /* Disclaimer: This ISPF panel is FREEWARE.  Use at your own risk.  */\n /*             It is provided for your enjoyment and neither David  */\n /*             Alcock or his employer provides any warranty for     */\n /*             it's use.  I'd like to hear how it works on your     */\n /*             system.                                              */\n /*                                                                  */\n /*             This software is not in the public domain but is     */\n /*             available free of charge and with source code.       */\n /*             It is copyright 2002+ by David Alcock.               */\n /*             All rights reserved.                                 */\n /********************************************************************/\n # type(text) intens(high) color(yellow)\n ` type(text) intens(low)  color(green)\n \u00ac type(text) intens(low)  color(turq)\n \u00a6 type(input) intens(non) color(green) caps(off)\n)body window(68,9) expand(!!)\n%Command ===>_ZCMD\n\n#The SUBMITC edit macro has detected a line in the jobstream that\n#requires a password.\n+\n`&SUBMITCU\n+\n\u00acPlease enter the password on the next line (it will NOT display):\n\u00a6SUBMITCI\n)init\n)proc\n VPUT (SUBMITCI) ASIS\n)end\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZXMIT": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x003\\x01\\x02\\x04o\\x01\\x02\\x04o\\x157\\x00j\\x00j\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-02-15T00:00:00", "modifydate": "2002-02-15T15:37:33", "lines": 106, "newlines": 106, "modlines": 0, "user": "IBMUSER"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT553/FILE553.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT553", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}