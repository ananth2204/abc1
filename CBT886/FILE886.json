{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013227000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE886.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE886.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\r'", "DS1TRBAL": "b'\\x0eX'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07\\xd9\\x00\\x0e\\x07\\xda\\x00\\x02\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x000\\x01\\x13\\x03\\x0f\\x01\\x13\\x03\\x0f\\x12\\x03\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-30T00:00:00", "modifydate": "2013-01-30T12:03:30", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-486"}, "text": "REGULAR CBT TAPE - VERSION 486    FILE:  886\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT486.FILE886\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 11 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,059 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/30/13    12:03:30    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x004\\x01\\x13\\x02\\x8f\\x01\\x13\\x02\\x8f\\x15U\\x00\\x1c\\x00\\x12\\x00\\x00\\xc5\\xc4\\xd7\\xc5\\xe3\\xd2\\xc1@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2013-01-28T00:00:00", "modifydate": "2013-01-28T15:55:34", "lines": 28, "newlines": 18, "modlines": 0, "user": "EDPETKA"}, "text": "INDEX FOR THIS PDS\n=======================================================================\n##INTNEW - jcl used to build init jobs for a new subsystem.\n         - updates required. instructions in member.\n         - jobs are created in the outfile.\n##INTVOL - jcl used to build init jobs for existing subsystem.\n         - updates required. instructions in member.\n         - update the location of UCBSCAN.\nINTNEWRX - rexx used for ##INTNEW jcl.\n         - one time update:\n            jobcard information on line 33+\n            VTOC sizes on lines 50 - 59. supports upto Mod27 DASD.\nINTVOLRX - rexx used for ##INTVOL jcl.\n         - one time update:\n           * jobcard information on line 18+\n           * update MBWAIT parm with your time to wait on lnes 79 & 204\n           * VTOC sizes on lines 112 - 121. supports upto Mod27 DASD.\n           * VTOC sizes on lines 136 - 145. supports upto Mod27 DASD.\n           * VVDS sizes on lines 236 - 245. supports upto Mod27 DASD.\nMBWAIT   - This is a standalone utility meant to be executed in a\n           batch job as a way of delaying the execution of subsequent\n           steps.\n         - pgm specified in rexx (INTVOLRX) so wait for VARY commands\n           to complete.\nUCBSCAN - identifies all online device ucbs and chpids.\n         - it will identify DASD types through MOD27's.\n         - it will need to be updated for MOD54 and EAV devices.\n         - pgm specified in JCL (##INTVOL)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE01": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01\\x13\\x02\\x9f\\x01\\x13\\x02\\x9f\\tA\\x005\\x005\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-01-29T00:00:00", "modifydate": "2013-01-29T09:41:21", "lines": 53, "newlines": 53, "modlines": 0, "user": "SBGOLOB"}, "text": "From: Petka, Edward \u00ddmailto:Edward.Petka@fiserv.com\u00a8\nSent: Friday, January 25, 2013 11:04 AM\nTo: Bill J. Smith\nSubject: RE: Request for San Francisco 2013 SHARE Session Chairs.\n\nHello Bill,\n\nBETTER LATE THAN NEVER!   I apologize for not getting these REXX\njobs to you sooner; I've been swamped with so much other work.  I\nrewrote many of my REXX execs late last year so that they all\nfollow a similar format.  Attached are 2 JOBLIBS including each\nREXX.\n\n* Init new installed subsystem.txt :  Job used to initialize a\nnewly installed subsystem.\n\nContains 1st , the JCL used to execute the REXX. It contains\nfairly detailed description for manipulating the REXX.\n\nThe second half is the actual REXX.  You will want to update the\nJOBCARD and possibly the VTOC and INDEX sizes to your liking.\n\n* Init existing volumes.txt : Job used to initialize existing\nvolumes.\n\nContains 1st , the JCL used to execute the REXX. It contains\nfairly detailed description for manipulating the REXX.\n\n*   It utilizes PGM UCBSCAN to build your input library.\n\nThe second half is the actual REXX.  You will want to update the\nJOBCARD and possibly the VTOC and INDEX sizes to your liking.\n\n*   PGM=MBWAIT is a utility we use to wait for X seconds before\n    completing step and continuing to the next step.  I place\n    this program after my VARY commands.  Replace this with your\n    personal wait pgm.\n\nI'll see you at SHARE!!!\n\nRegards,\nEd\n\nEdward J. Petka, Jr.\nSr. Storage & BRS Engineer\nEnterprise Technology Group\nFiserv\nOffice: (215) 413-4845\nFax: (215) 413-4816\nBB: (215) 756-3225\nwww.fiserv.com\nEdward.Petka@fiserv.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE02": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00%\\x01\\x13\\x02\\x9f\\x01\\x13\\x02\\x9f\\x14\\x06\\x00(\\x002\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-01-29T00:00:00", "modifydate": "2013-01-29T14:06:25", "lines": 40, "newlines": 50, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  REXX EXECs to ICKDSF INIT Massive Numbers of Volumes\nFrom:     \"Bill J. Smith\" <bill.smith@hds.com>\nDate:     1/25/2013 7:16 PM\nTo:       \"Petka, Edward\" <Edward.Petka@fiserv.com>\nCC:       \"Sam Golob (sbgolob@cbttape.org)\" <sbgolob@cbttape.org>\n\nHello, Ed!\n\nThank you very much for the REXX EXECs.   My team now uses PC SAS\n9.3 on Windows to generate ICKDSF jobs to initialize tens of\nthousands of volumes.  The team needed to initialize 30,000+\nvolumes for some performance testing on our z/196 with HDS VPS\nstorage last summer.  Hence necessity being the mother of\ninvention.\n\nNonetheless, I like the fact that with your code there is no\ndependency on an OEM product to drive the build process, and it\nwill run  anywhere  with little to no modification.  I'll have to\ncheck into Mod-54s and EAVs, which I assume you do not have/use\nbased upon the hard-coded literals?  I'm going to copy Sam Golob,\nthe keeper of the CBT tape to see if he has interest in the\nEXECs.  I assume he does not have them.\n\nI noticed your reference to 'MBWAIT'.   We use a similar program,\nwhich was written at a former employer in the late 1970s.  See\nthe comments for details on using it.  You are free to\nredistribute it as you see fit as it's on the CBT tape, too.\n\nI look forward to seeing you in my home town of San Francisco\nnext month.  I believe this will be a very good SHARE given that\nit s in The City, will have strong IBM executive presence, and\nJohn Eells will disclose z/OS 2.1 content on Monday afternoon.\n\nKind regards and thanks again,\n\nBill Smith\n(408) 327-4287\n\nBTW  Were you affected by Hurricane Sandy?\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "##INTNEW": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x003\\x01\\x12)o\\x01\\x13\\x02\\x8f\\x15\\x15\\x00\\x1f\\x00&\\x00\\x00\\xc5\\xc4\\xd7\\xc5\\xe3\\xd2\\xc1@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2013-01-28T15:15:33", "lines": 31, "newlines": 38, "modlines": 0, "user": "EDPETKA"}, "text": "//B1EPPINT JOB (45251,45251),'INIT REXX ',MSGCLASS=Q,\n//         CLASS=M,NOTIFY=&SYSUID\n/*JOBPARM S=*\n//*==================================================================*\n//*                       INTNEWRX                                   *\n//*------------------------------------------------------------------*\n//*       BUILD INITS FOR NEW DASD INSTALL                           *\n//*       ================================                           *\n//* PARM => INTNEWRX.  Stays constant. DO NOT CHANGE.                *\n//*       i. This is the SYSPROC member being executed.              *\n//* TYPE = DEVICE TYPE. Ex - 1 = 3390-1 , 3 = 3390-3 , 9 = 3390-9 ,  *\n//*        27 = 3390-27 , X = CLIP NO INDEX                          *\n//* VCT  => How many volumes do you what to initialize?              *\n//*       i. Specify BASE UCB Count for the ARRAY/LCU                *\n//* JCT  => How many jobs do you what to create in outfile member?   *\n//*       i. ONE JOB per LCU being initialized.                      *\n//* VPFX => Volume Prefix.   ex = XX                                 *\n//*       i. Each volume will be initialized as XXucb.               *\n//* FUCB => 1ST UCB being initialized. (ie - 2000)                   *\n//*       i. Job will build inits from 1st UCB for a count of VCT    *\n//*          and then start a new job with the 1st UCB in the next   *\n//*          LCU and will continue until JCT is met. (ie - 2100)     *\n//* SMS  => leave blank for NONSMS or specify STG for SMS volume.    *\n//*==================================================================*\n//REXX1    EXEC PGM=IKJEFT01,\n// PARM='INTNEWRX TYPE=X VCT=128 JCT=16 VPFX=XX FUCB=2000 SMS=STG'\n//SYSPROC  DD DISP=SHR,DSN=SYS3.DASD.REXX\n//OUTFILE  DD DISP=SHR,DSN=SYS3.DASD.JLIB(INTNEW01)\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD *\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "##INTVOL": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01 \\x00$\\x01\\x12$\\x0f\\x01\\x13\\x02\\x8f\\x15B\\x00'\\x00\\x1d\\x00\\x00\\xc5\\xc4\\xd7\\xc5\\xe3\\xd2\\xc1@@@\"", "ispf": {"version": "01.32", "flags": 0, "createdate": "2012-08-27T00:00:00", "modifydate": "2013-01-28T15:42:24", "lines": 39, "newlines": 29, "modlines": 0, "user": "EDPETKA"}, "text": "//B1EPPINT JOB (45251,45251),'INIT REXX ',MSGCLASS=Q,                   JOB07133\n//         CLASS=M,NOTIFY=&SYSUID\n/*JOBPARM S=*\n//***************************************************************\n//* THIS JCL WILL BUILD DASD INIT JOB from the \"EM\" spare pool.\n//***************************************************************\n//DELTE     EXEC PGM=IDCAMS\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  *\n   DEL SYS3.DASD.INPUT.SPARES SCR PRG\n    SET MAXCC EQ 0\n//*\n//UCBSCAN1 EXEC PGM=UCBSCAN\n//STEPLIB  DD DISP=SHR,DSN=SYS3.DASD.LINKLIB\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//OUTUCB   DD UNIT=TEMP,DISP=(NEW,CATLG,DELETE),SPACE=(CYL,(1,1)),\n//            DCB=(LRECL=132,RECFM=FB,BLKSIZE=1320),\n//            DSN=SYS3.DASD.INPUT.SPARES\n//*-----------------------------------------------------------------*\n//*       BUILD INITS FROM SPARE DASD POOL                          *\n//*       ================================                          *\n//* PARM = INTVOLRX.  STAYS CONSTANT. DO NOT CHANGE.                *\n//* TYPE = DEVICE TYPE. Ex - 1 = 3390-1 , 3 = 3390-3 , 9 = 3390-9 , *\n//*        27 = 3390-27 , R = Reclaim                               *\n//* CNT  = How many volumes do you what to initialize?              *\n//* VPFX = Volume Prefix.          (ex = PMS)                       *\n//* VLNO = Starting volume number. (ex = 003 for PMS003)            *\n//* SPR  = Spare volume mask to select from.                        *\n//* SMS  = leave blank for NONSMS or specify STG for SMS volume.    *\n//*-----------------------------------------------------------------*\n//REXX1    EXEC PGM=IKJEFT01,\n// PARM='INTVOLRX TYPE=27 CNT=10 VPFX=PSY VLNO=99 SPR=EM3D SMS=STGR'\n//*PARM='INTVOLRX TYPE=R CNT=99 VPFX=EM VLNO= SPR=PSB1 SMS='\n//SYSPROC  DD DISP=SHR,DSN=SYS3.DASD.REXX\n//INFILE   DD DISP=SHR,DSN=SYS3.DASD.INPUT.SPARES\n//OUTFILE  DD DISP=SHR,DSN=SYS3.DASD.JLIB(INITJOBS)\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE886": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\\x18\\x01\\x13\\x03\\x0f\\x01\\x13\\x03\\x0f\\x12\\x03\\x00\\x06\\x00\\x06\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-30T00:00:00", "modifydate": "2013-01-30T12:03:18", "lines": 6, "newlines": 6, "modlines": 0, "user": "CBT-486"}, "text": "//***FILE 886 is from Ed Petka, with thanks to Bill Smith.  This    *   FILE 886\n//*           file contains a system to init thousands of DASD      *   FILE 886\n//*           volumes in a short time.                              *   FILE 886\n//*                                                                 *   FILE 886\n//*       email:  Edward.Petka@Fiserv.com                           *   FILE 886\n//*                                                                 *   FILE 886\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INTNEWRX": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x07\\x01\\x12)o\\x01\\x120?\\x13\\x02\\x00L\\x00?\\x00\\x00\\xc5\\xc4\\xd7\\xc5\\xe3\\xd2\\xc1@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2012-10-22T00:00:00", "modifydate": "2012-10-29T13:02:07", "lines": 76, "newlines": 63, "modlines": 0, "user": "EDPETKA"}, "text": "/* REXX EXEC */\nTRACE E\n/*-----------------------------------------------------------------*/\n/* WRITTEN BY:  ED PETKA 12/08/27                                  */\n/* LAST UPDATE: ED PETKA 12/10/22                                  */\n/* TESTED BY:   ED PETKA 12/10/22                                  */\n/*-----------------------------------------------------------------*/\n/* --------------------------------------------------------------- */\n/*                           << INIT REXX >>                       */\n/*     PURPOSE:  BUILD INIT JOBS FOR NEW DASD PLACED ON FLOOR      */\n/*                                                                 */\n/*     CALLED BY: SUBMITTED THRU BATCH JOB - INTNEWBD              */\n/* ----------------------------------------------------------------*/\nSTART:\n PARSE ARG 'TYPE='TYPE 'VCT='VCT 'JCT='JCT 'VPFX='VPFX ,\n           'FUCB='FUCB 'SMS='SMS\n JOBCNT = 0                                 /* STARTING JOB COUNT # */\n VOLCNT = 0                                 /* STARTING VOL COUNT # */\n TYPE   = ('3390-'||TYPE)                   /* SET 3390 TYPE        */\n TYPE   = STRIP(TYPE)                       /* STRIP SPACES         */\n DEVTYP = STRIP(TYPE)                       /* DEVICE TYPE          */\n VCT    = STRIP(VCT)                        /* VOLCT IN JOB PARM    */\n JCT    = STRIP(JCT)                        /* JOBCT IN JOB PARM    */\n VPFX   = STRIP(VPFX)                       /* VOL PFX IN JOB PARM  */\n FUCB   = STRIP(FUCB)                       /* 1ST UCB IN JOB PARM  */\n UCBSCN = SUBSTR(FUCB,1,2)                  /* GRAB 1ST 2 OF 1ST UCB*/\n HEXCNT = SUBSTR(FUCB,3,2)                  /* GRAB LAST 2 OF UCB   */\n HEXCNT = RIGHT(HEXCNT,2,0)                 /* KEEP LENGTH 2        */\n SMS    = STRIP(SMS)                        /* SMS IN JOB PARM      */\n FUCB1 = INSERT(UCBSCN,HEXCNT)              /* MERGE UCBSCN & HEXCNT*/\nDO UNTIL JOBCNT = JCT                    /* START OF JOB LOOP         */\n JOBCNT = RIGHT(JOBCNT,2,0)\n  INT.1 = \"//SYPGEP\"JOBCNT\" JOB (660),'INIT VOLS ',CLASS=M,\"\n  INT.2 = \"//      TYPRUN=HOLD,\"\n  INT.3 = \"//      MSGCLASS=Q,NOTIFY=&SYSUID\"\n  INT.4 = \"/*JOBPARM S=*\"\n  INT.5 = \"//DSFINIT EXEC PGM=ICKDSF,REGION=4M,\"\n  INT.6 = \"//        PARM='NOREPLYU'\"\n  INT.7 = \"//SYSPRINT DD SYSOUT=*\"\n  INT.8 = \"//SYSIN    DD *\"\n'EXECIO 8 DISKW OUTFILE (STEM INT.'        /* WRITE OUT JOBCARD       */\nINT. = ''\n DO UNTIL VOLCNT = VCT                    /* START OF INIT CARD LOOP  */\n   NEWVL = INSERT(VPFX,FUCB1)\n      INT.1=\" INIT NOVERIFY UNITADDRESS(\"FUCB1\") VOLID(\"NEWVL\") -\"\n     IF DEVTYP = '3390-X' THEN DO\n      INT.2=\"    NOINDEX                      \"\n     END\n     IF DEVTYP = '3390-1' THEN DO\n      INT.2=\"    MAP VTOC(0,1,1) INDEX(0,2,1) NOCHECK PURGE\" SMS\n     END\n     IF DEVTYP = '3390-3' THEN DO\n      INT.2=\"    MAP VTOC(0,1,209) INDEX(14,0,70) NOCHECK PURGE\" SMS\n     END\n     IF DEVTYP = '3390-9' THEN DO\n      INT.2=\"    MAP VTOC(0,1,300) INDEX(20,1,150) NOCHECK PURGE\" SMS\n     END\n     IF DEVTYP = '3390-27' THEN DO\n      INT.2=\"    MAP VTOC(0,1,300) INDEX(20,1,150) NOCHECK PURGE\" SMS\n     END\n       INT.3=\" \"\n  'EXECIO 3 DISKW OUTFILE (STEM INT. '    /* WRITE OUT INIT CARDS     */\n   FUCB1 = X2D(FUCB1)                       /* CONVERT HEX TO DEC   */\n   FUCB1 = FUCB1 + 1                        /* BUMP BY 1            */\n   VOLCNT = VOLCNT + 1                      /* BUMP BY 1            */\n   FUCB1 = D2X(FUCB1)                       /* CONVERT DEC TO HEX   */\n END                                     /*  END OF INIT CARD LOOP    */\n  JOBCNT = JOBCNT + 1                       /* BUMP BY 1            */\n  UCBSCN = X2D(UCBSCN)                      /* CONVERT HEX TO DEC   */\n  UCBSCN = UCBSCN + 1                       /* BUMP BY 1            */\n  UCBSCN = D2X(UCBSCN)                      /* CONVERT DEC TO HEX   */\n  HEXCNT = SUBSTR(FUCB,3,2)                 /* GRAB HEXCNT          */\n  HEXCNT = RIGHT(HEXCNT,2,0)                /* RIGHT JUSTIFY, LENGHT2 */\n  FUCB1  = INSERT(UCBSCN,HEXCNT)            /* MERGE                */\n  VOLCNT = 0                                /* RESET COUNT          */\nEND                                      /*  END OF JOB LOOP          */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INTVOLRX": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00R\\x01\\x122/\\x01\\x122O\\x15P\\x01$\\x00\\xfb\\x00\\x00\\xc5\\xc4\\xd7\\xc5\\xe3\\xd2\\xc1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-11-17T00:00:00", "modifydate": "2012-11-19T15:50:52", "lines": 292, "newlines": 251, "modlines": 0, "user": "EDPETKA"}, "text": "/* REXX EXEC */\nTRACE E\n/*-----------------------------------------------------------------*/\n/* WRITTEN BY:  ED PETKA 12/08/27                                  */\n/* LAST UPDATE: ED PETKA 12/11/19                                  */\n/* TESTED BY:   ED PETKA 12/11/19                                  */\n/* --------------------------------------------------------------- */\n/*-----------------------------------------------------------------*/\n/*                           << INIT REXX >>                       */\n/*                                                                 */\n/*     PURPOSE:  TAKE INPUT FROM DLM REPORT JOB AND CREATE         */\n/*               JCL OUTPUT TO EXPIRE THE TAPES                    */\n/*     CALLED BY: SUBMITTED THRU BATCH JOB                         */\n/*-----------------------------------------------------------------*/\nSTART:\nPARSE ARG 'TYPE='TYPE 'CNT='CNT 'VPFX='VPFX 'VLNO='VLNO ,\n          'SPR='SPR 'SMS='SMS\nINT.1 = \"//B1EPPH3G JOB (660),'INIT VOLS ',CLASS=M,\"\nINT.2 = \"//      TYPRUN=HOLD,\"\nINT.3 = \"//      MSGCLASS=Q,NOTIFY=&SYSUID\"\nINT.4 = \"/*JOBPARM S=*\"\nINT.5 = \"//VARYOFF EXEC PGM=IEBGENER,REGION=4M \"\nINT.6 = \"//SYSPRINT DD SYSOUT=*                \"\nINT.7 = \"//SYSIN    DD DUMMY                   \"\nINT.8 = \"//SYSUT2   DD SYSOUT=(A,INTRDR)       \"\nINT.9 = \"//SYSUT1   DD DATA,DLM='##'           \"\n'EXECIO 9 DISKW OUTFILE (STEM INT.'\nINT. = ''\n COUNT = 0                                 /* NUMBER OF VOLS FOUND */\n VLSR  = VPFX                              /* VOLUME PREFIX-IE: PMS*/\n VLSR  = STRIP(VLSR)                       /* STRIP SPACES         */\n VLNO  = RIGHT(VLNO,6-LENGTH(VLSR),0)      /* MAINTAIN NEWVL LENGTH*/\n DEVNO = VLNO                              /* VOLUME NUMBER-IE: 001*/\n TYPE  = ('3390-'||TYPE)                   /* SET 3390 TYPE        */\n TYPE  = STRIP(TYPE)                       /* STRIP SPACES         */\n SPR   = STRIP(SPR)                        /* STRIP SPACES         */\n'EXECIO * DISKR INFILE (FINIS'             /* READ INFILE > STACK  */\n DO QUEUED( )                              /* DO FOR ALL RECS      */\n  PULL MSG\n  UCB    = SUBSTR(MSG,1,4)           /* UCB ---- OFFSET AND LENGTH */\n  DEVTYP = SUBSTR(MSG,6,7)           /* DEVTYP - OFFSET AND LENGTH */\n  VOLSER = SUBSTR(MSG,14,6)          /* VOLSER - OFFSET AND LENGTH */\n  L      = SUBSTR(VOLSER,1,LENGTH(SPR)) /* SET LENGTH OF VOLSER MASK */\n  IF DEVTYP = TYPE & L = SPR & COUNT < CNT THEN\n   DO\n   COUNT = COUNT + 1\n   DEVNO = DEVNO + 0\n   DEVNO = RIGHT(DEVNO,6-LENGTH(VLSR),0) /* MAINTAIN NEWVL LENGTH */\n   NEWVL = (VLSR||DEVNO)\n   NEWVL = STRIP(NEWVL)\n   IF SMS <> 'STGR' THEN DO\n    INT.1=\"/*$VS,'RO T=0,*ALL,V \"UCB\",OFFLINE'\"\n   DEVNO = DEVNO + 1\n   'EXECIO 1 DISKW OUTFILE (STEM INT. '\n   END /* IF SMS */\n   IF SMS = 'STGR' THEN DO\n    INT.1=\"/*$VS,'RO T=0,*ALL,V \"UCB\",OFFLINE'\"\n    INT.2=\"/*$VS,'V SMS,VOL(\"NEWVL\",ALL),D,N'\"\n   DEVNO = DEVNO + 1\n   'EXECIO 2 DISKW OUTFILE (STEM INT. '\n   END /* IF SMS */\n  END /* IF DEVTYP */\n  IF TYPE = '3390-R' & L = SPR THEN\n   DO\n   COUNT = COUNT + 1\n   DEVNO = DEVNO + 0\n   DEVNO = RIGHT(DEVNO,6-LENGTH(VLSR),0) /* MAINTAIN NEWVL LENGTH */\n   NEWVL = (VLSR||DEVNO)\n   NEWVL = STRIP(NEWVL)\n    INT.1=\"/*$VS,'RO T=0,*ALL,V \"UCB\",OFFLINE'\"\n   DEVNO = DEVNO + 1\n   'EXECIO 1 DISKW OUTFILE (STEM INT. '\n  END /* IF TYPE   */\n END  /* DO QUEUED */\nPARSE ARG 'TYPE='TYPE 'CNT='CNT 'VPFX='VPFX 'VLNO='VLNO ,\n          'SPR='SPR 'SMS='SMS\nINT.1 = \"##                                  \"\nINT.2 = \"//*                                 \"\nINT.3 = \"//WAITOFF EXEC PGM=MBWAIT,PARM=':25'\"\nINT.4 = \"//STEPLIB  DD DISP=SHR,DSN=DRSP01.LINKLIB\"\nINT.5 = \"//*                                 \"\nINT.6 = \"//DSFINIT EXEC PGM=ICKDSF,REGION=4M,\"\nINT.7 = \"//        PARM='NOREPLYU'\"\nINT.8 = \"//SYSPRINT DD SYSOUT=*\"\nINT.9 = \"//SYSIN    DD *\"\n'EXECIO 9 DISKW OUTFILE (STEM INT.'\nINT. = ''\n COUNT = 0                                 /* NUMBER OF VOLS FOUND */\n VLSR  = VPFX                              /* VOLUME PREFIX-IE: PMS*/\n VLSR  = STRIP(VLSR)                       /* STRIP SPACES         */\n VLNO  = RIGHT(VLNO,6-LENGTH(VLSR),0)      /* MAINTAIN NEWVL LENGTH*/\n DEVNO = VLNO                              /* VOLUME NUMBER-IE: 001*/\n TYPE  = ('3390-'||TYPE)                   /* SET 3390 TYPE        */\n TYPE  = STRIP(TYPE)                       /* STRIP SPACES         */\n SPR   = STRIP(SPR)                        /* STRIP SPACES         */\n'EXECIO * DISKR INFILE (FINIS'             /* READ INFILE > STACK  */\n DO QUEUED( )                              /* DO FOR ALL RECS      */\n  PULL MSG\n  UCB    = SUBSTR(MSG,1,4)           /* UCB ---- OFFSET AND LENGTH */\n  DEVTYP = SUBSTR(MSG,6,7)           /* DEVTYP - OFFSET AND LENGTH */\n  VOLSER = SUBSTR(MSG,14,6)          /* VOLSER - OFFSET AND LENGTH */\n  L      = SUBSTR(VOLSER,1,LENGTH(SPR)) /* SET LENGTH OF VOLSER MASK */\n  IF DEVTYP = TYPE  & L = SPR & COUNT < CNT THEN\n   DO\n   COUNT = COUNT + 1\n   DEVNO = DEVNO + 0\n   DEVNO = RIGHT(DEVNO,6-LENGTH(VLSR),0) /* MAINTAIN NEWVL LENGTH */\n   NEWVL = (VLSR||DEVNO)\n   NEWVL = STRIP(NEWVL)\n    INT.1=\" INIT VERIFY(\"VOLSER\") UNITADDRESS(\"UCB\") VOLID(\"NEWVL\") -\"\n   IF DEVTYP = '3390-1 ' THEN DO\n    INT.2=\"   MAP VTOC(0,1,1) INDEX(0,2,1) NOCHECK PURGE\" SMS\n   END\n   IF DEVTYP = '3390-3 ' THEN DO\n    INT.2=\"   MAP VTOC(0,1,209) INDEX(14,0,70) NOCHECK PURGE\" SMS\n   END\n   IF DEVTYP = '3390-9 ' THEN DO\n    INT.2=\"   MAP VTOC(0,1,300) INDEX(20,1,150) NOCHECK PURGE\" SMS\n   END\n   IF DEVTYP = '3390-27' THEN DO\n    INT.2=\"   MAP VTOC(0,1,300) INDEX(20,1,150) NOCHECK PURGE\" SMS\n   END\n     INT.3=\" \"\n   DEVNO = DEVNO + 1\n  'EXECIO 3 DISKW OUTFILE (STEM INT. '\n  END /* IF DEVTYP */\n  IF TYPE = '3390-R' & L = SPR THEN\n   DO\n   COUNT = COUNT + 1\n   DEVNO = DEVNO + 0\n   DEVNO = RIGHT(DEVNO,6-LENGTH(VLSR),0) /* MAINTAIN NEWVL LENGTH */\n   NEWVL = (VLSR||UCB)\n   NEWVL = STRIP(NEWVL)\n    INT.1=\" INIT VERIFY(\"VOLSER\") UNITADDRESS(\"UCB\") VOLID(\"NEWVL\") -\"\n   IF DEVTYP = '3390-1 ' THEN DO\n    INT.2=\"   MAP VTOC(0,1,1) INDEX(0,2,1) NOCHECK PURGE\" SMS\n   END\n   IF DEVTYP = '3390-3 ' THEN DO\n    INT.2=\"   MAP VTOC(0,1,209) INDEX(14,0,70) NOCHECK PURGE\" SMS\n   END\n   IF DEVTYP = '3390-9 ' THEN DO\n    INT.2=\"   MAP VTOC(0,1,300) INDEX(20,1,150) NOCHECK PURGE\" SMS\n   END\n   IF DEVTYP = '3390-27' THEN DO\n    INT.2=\"   MAP VTOC(0,1,300) INDEX(20,1,150) NOCHECK PURGE\" SMS\n   END\n     INT.3=\" \"\n   DEVNO = DEVNO + 1\n  'EXECIO 3 DISKW OUTFILE (STEM INT. '\n  END /* IF DEVTYP */\n END  /* DO QUEUED */\nPARSE ARG 'TYPE='TYPE 'CNT='CNT 'VPFX='VPFX 'VLNO='VLNO ,\n          'SPR='SPR 'SMS='SMS\nINT.1 = \"//*                                   \"\nINT.2 = \"//VARYON  EXEC PGM=IEBGENER,REGION=4M \"\nINT.3 = \"//SYSPRINT DD SYSOUT=*                \"\nINT.4 = \"//SYSIN    DD DUMMY                   \"\nINT.5 = \"//SYSUT2   DD SYSOUT=(A,INTRDR)       \"\nINT.6 = \"//SYSUT1   DD DATA,DLM='##'           \"\n'EXECIO 6 DISKW OUTFILE (STEM INT.'\nINT. = ''\n COUNT = 0                                 /* NUMBER OF VOLS FOUND */\n VLSR  = VPFX                              /* VOLUME PREFIX-IE: PMS*/\n VLSR  = STRIP(VLSR)                       /* STRIP SPACES         */\n VLNO  = RIGHT(VLNO,6-LENGTH(VLSR),0)      /* MAINTAIN NEWVL LENGTH*/\n DEVNO = VLNO                              /* VOLUME NUMBER-IE: 001*/\n TYPE  = ('3390-'||TYPE)                   /* SET 3390 TYPE        */\n TYPE  = STRIP(TYPE)                       /* STRIP SPACES         */\n SPR   = STRIP(SPR)                        /* STRIP SPACES         */\n'EXECIO * DISKR INFILE (FINIS'             /* READ INFILE > STACK  */\n DO QUEUED( )                              /* DO FOR ALL RECS      */\n  PULL MSG\n  UCB    = SUBSTR(MSG,1,4)           /* UCB ---- OFFSET AND LENGTH */\n  DEVTYP = SUBSTR(MSG,6,7)           /* DEVTYP - OFFSET AND LENGTH */\n  VOLSER = SUBSTR(MSG,14,6)          /* VOLSER - OFFSET AND LENGTH */\n  L      = SUBSTR(VOLSER,1,LENGTH(SPR)) /* SET LENGTH OF VOLSER MASK */\n  IF DEVTYP = TYPE  & L = SPR & COUNT < CNT THEN\n   DO\n   COUNT = COUNT + 1\n   DEVNO = DEVNO + 0\n   DEVNO = RIGHT(DEVNO,6-LENGTH(VLSR),0) /* MAINTAIN NEWVL LENGTH */\n   NEWVL = (VLSR||DEVNO)\n   NEWVL = STRIP(NEWVL)\n    INT.1=\"/*$VS,'RO T=0,*ALL,V \"UCB\",ONLINE'\"\n   DEVNO = DEVNO + 1\n  'EXECIO 1 DISKW OUTFILE (STEM INT. '\n  END /* IF DEVTYP */\n  IF TYPE = '3390-R' & L = SPR THEN\n   DO\n   COUNT = COUNT + 1\n   DEVNO = DEVNO + 0\n   DEVNO = RIGHT(DEVNO,6-LENGTH(VLSR),0) /* MAINTAIN NEWVL LENGTH */\n   NEWVL = (VLSR||DEVNO)\n   NEWVL = STRIP(NEWVL)\n    INT.1=\"/*$VS,'RO T=0,*ALL,V \"UCB\",ONLINE'\"\n   DEVNO = DEVNO + 1\n  'EXECIO 1 DISKW OUTFILE (STEM INT. '\n  END /* IF DEVTYP */\n END  /* DO QUEUED */\nPARSE ARG 'TYPE='TYPE 'CNT='CNT 'VPFX='VPFX 'VLNO='VLNO ,\n          'SPR='SPR 'SMS='SMS\nINT.1 = \"##                                  \"\nINT.2 = \"//*                                 \"\nINT.3 = \"//WAITON  EXEC PGM=MBWAIT,PARM=':25'\"\nINT.4 = \"//STEPLIB  DD DISP=SHR,DSN=DRSP01.LINKLIB\"\nINT.5 = \"//*                                 \"\nINT.6 = \"//DEFVVDS EXEC PGM=IDCAMS,REGION=4M \"\nINT.7 = \"//SYSPRINT DD SYSOUT=*\"\nINT.8 = \"//SYSIN    DD *\"\n'EXECIO 8 DISKW OUTFILE (STEM INT.'\nINT. = ''\n COUNT = 0                                 /* NUMBER OF VOLS FOUND */\n VLSR  = VPFX                              /* VOLUME PREFIX-IE: PMS*/\n VLSR  = STRIP(VLSR)                       /* STRIP SPACES         */\n VLNO  = RIGHT(VLNO,6-LENGTH(VLSR),0)      /* MAINTAIN NEWVL LENGTH*/\n DEVNO = VLNO                              /* VOLUME NUMBER-IE: 001*/\n TYPE  = ('3390-'||TYPE)                   /* SET 3390 TYPE        */\n TYPE  = STRIP(TYPE)                       /* STRIP SPACES         */\n SPR   = STRIP(SPR)                        /* STRIP SPACES         */\n'EXECIO * DISKR INFILE (FINIS'             /* READ INFILE > STACK  */\n DO QUEUED( )                              /* DO FOR ALL RECS      */\n  PULL MSG\n  UCB    = SUBSTR(MSG,1,4)           /* UCB ---- OFFSET AND LENGTH */\n  DEVTYP = SUBSTR(MSG,6,7)           /* DEVTYP - OFFSET AND LENGTH */\n  VOLSER = SUBSTR(MSG,14,6)          /* VOLSER - OFFSET AND LENGTH */\n  L      = SUBSTR(VOLSER,1,LENGTH(SPR)) /* SET LENGTH OF VOLSER MASK */\n  IF DEVTYP = TYPE  & L = SPR & COUNT < CNT THEN\n   DO\n   COUNT = COUNT + 1\n   DEVNO = DEVNO + 0\n   DEVNO = RIGHT(DEVNO,6-LENGTH(VLSR),0) /* MAINTAIN NEWVL LENGTH */\n   NEWVL = (VLSR||DEVNO)\n   NEWVL = STRIP(NEWVL)\n    INT.1=\" DEFINE CLUSTER(NAME(SYS1.VVDS.V\"NEWVL\") VOL(\"NEWVL\") -\"\n   IF DEVTYP = '3390-1 ' THEN DO\n    INT.2=\"        TRK(1,1) NIXD)                                 \"\n   END\n   IF DEVTYP = '3390-3 ' THEN DO\n    INT.2=\"        TRK(10,1) NIXD)                                \"\n   END\n   IF DEVTYP = '3390-9 ' THEN DO\n    INT.2=\"        CYL(10,1) NIXD)                                \"\n   END\n   IF DEVTYP = '3390-27' THEN DO\n    INT.2=\"        CYL(10,1) NIXD)                                \"\n   END\n     INT.3=\" \"\n   DEVNO = DEVNO + 1\n  'EXECIO 3 DISKW OUTFILE (STEM INT. '\n  END /* IF DEVTYP */\nEND /* END QUEUED */\nPARSE ARG 'TYPE='TYPE 'CNT='CNT 'VPFX='VPFX 'VLNO='VLNO ,\n          'SPR='SPR 'SMS='SMS\nINT.1 = \"//*                                   \"\nINT.2 = \"//VARYSMS EXEC PGM=IEBGENER,REGION=4M \"\nINT.3 = \"//SYSPRINT DD SYSOUT=*                \"\nINT.4 = \"//SYSIN    DD DUMMY                   \"\nINT.5 = \"//SYSUT2   DD SYSOUT=(A,INTRDR)       \"\nINT.6 = \"//SYSUT1   DD DATA,DLM='##'           \"\n'EXECIO 6 DISKW OUTFILE (STEM INT.'\nINT. = ''\n COUNT = 0                                 /* NUMBER OF VOLS FOUND */\n VLSR  = VPFX                              /* VOLUME PREFIX-IE: PMS*/\n VLSR  = STRIP(VLSR)                       /* STRIP SPACES         */\n VLNO  = RIGHT(VLNO,6-LENGTH(VLSR),0)      /* MAINTAIN NEWVL LENGTH*/\n DEVNO = VLNO                              /* VOLUME NUMBER-IE: 001*/\n TYPE  = ('3390-'||TYPE)                   /* SET 3390 TYPE        */\n TYPE  = STRIP(TYPE)                       /* STRIP SPACES         */\n SPR   = STRIP(SPR)                        /* STRIP SPACES         */\n'EXECIO * DISKR INFILE (FINIS'             /* READ INFILE > STACK  */\n DO QUEUED( )                              /* DO FOR ALL RECS      */\n  PULL MSG\n  UCB    = SUBSTR(MSG,1,4)           /* UCB ---- OFFSET AND LENGTH */\n  DEVTYP = SUBSTR(MSG,6,7)           /* DEVTYP - OFFSET AND LENGTH */\n  VOLSER = SUBSTR(MSG,14,6)          /* VOLSER - OFFSET AND LENGTH */\n  L      = SUBSTR(VOLSER,1,LENGTH(SPR)) /* SET LENGTH OF VOLSER MASK */\n  IF SMS = 'STGR' & L = SPR & COUNT < CNT THEN\n   DO\n   COUNT = COUNT + 1\n   DEVNO = DEVNO + 0\n   DEVNO = RIGHT(DEVNO,6-LENGTH(VLSR),0) /* MAINTAIN NEWVL LENGTH */\n   NEWVL = (VLSR||DEVNO)\n   NEWVL = STRIP(NEWVL)\n    INT.1=\"/*$VS,'V SMS,VOL(\"NEWVL\",ALL),E'\"\n   DEVNO = DEVNO + 1\n  'EXECIO 1 DISKW OUTFILE (STEM INT. '\n  END /* IF DEVTYP */\nEND /* END QUEUED */\nPARSE ARG 'TYPE='TYPE 'CNT='CNT 'VPFX='VPFX 'VLNO='VLNO ,\n          'SPR='SPR 'SMS='SMS\nINT.1 = \"##                                  \"\n'EXECIO 1 DISKW OUTFILE (STEM INT.'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MBWAIT": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x01\\t\\x05_\\x01\\t\\x05_\\x16\"\\x00\\xad\\x00\\xad\\x00\\x00\\xc5\\xc4\\xd7\\xc5\\xe3\\xd2\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-02-24T00:00:00", "modifydate": "2009-02-24T16:22:17", "lines": 173, "newlines": 173, "modlines": 0, "user": "EDPETKA"}, "text": "MBWAIT   AMODE 31              ADDRESSABILITY MODE\nMBWAIT   RMODE 24              RESIDENCY MODE\n* HELLO\n*****************************************************************\n*                                                               *\n*     *     *   ******   *     *    ***    *******  *******     *\n*     **   **   *     *  *     *   *   *      *        *        *\n*     * * * *   *     *  *     *  *     *     *        *        *\n*     *  *  *   ******   *     *  *******     *        *        *\n*     *     *   *     *  *  *  *  *     *     *        *        *\n*     *     *   *     *  * * * *  *     *     *        *        *\n*     *     *   ******    *   *   *     *  *******     *        *\n*                                                               *\n*****************************************************************\n*                                                               *\n*  THIS IS A STANDALONE UTILITY MEANT TO BE EXECUTED IN A       *\n*  BATCH JOB AS A WAY OF DELAYING THE EXECUTION OF SUBSEQUENT   *\n*  STEPS.  THE FOLLOWING STATEMENT WILL CAUSE A FIVE-MINUTE     *\n*  WAIT:                                                        *\n*                                                               *\n*   //    EXEC PGM=MBWAIT,PARM='05'    FOR MINUTES              *\n*                                                               *\n*   //    EXEC PGM=MBWAIT,PARM=':05'   FOR SECONDS              *\n*                                                               *\n*  NOTE: THIS PROGRAM SHOULD NOT BE EXECUTED WITH ANY VALUE     *\n*  LESS THAN '01' OR BE USED IN AN ONLINE ENVIRONMENT.          *\n*                                                               *\n*****************************************************************\n*           C H A N G E   H I S T O R Y                         *\n*****************************************************************\n* 10/29/87  ORIGINAL VERSION FOR GENE BROWN.         SCHUETZ    *\n*****************************************************************\n* MB01   8/03/90   CHANGE TO SUPPORT SECONDS FOR TRUST IMPAC.   *\n*                                                    SCHUETZ    *\n*****************************************************************\n* MB02   4/04/91   ADD WTO TO DISPLAY THE AMOUNT OF TIME THE    *\n*                  CALLING JOB WILL BE WAITING.   TEGETHOFF     *\n*****************************************************************\n* MB03   4/04/91   ADD CHECK FOR MAX NUMBER OF MINUTES TO BE 09.*\n*                                                 TEGETHOFF     *\n*****************************************************************\n* MB04   4/08/91   MAKE 31 BIT ADDRESSABLE        TEGETHOFF     *\n*****************************************************************\n*                                                                 MB04\nMBWAIT   TITLE 'WAIT AWHILE'\nMBWAIT   CSECT                           SET UP ADDRESSABILITY    MB04\n         STM   R14,R12,12(R13)        SAVE CALLER'S REGISTERS     MB04\n         LA    R14,0(,R14)            CLEAR R14                   MB04\n         BSM   R14,0                  GET CALLER'S AMODE          MB04\n         ST    R14,12(,R13)           SAVE AMODE\n         LR    R11,R15\n         USING MBWAIT,R11                                         MB04\n         ST    R13,SAVEAREA+4                                     MB04\n         LA    R2,SAVEAREA                                        MB04\n         ST    R2,8(R13)                                          MB04\n         LR    R13,R2                                             MB04\n         XC    MODEWORD,MODEWORD      ZERO OUT MODEWORD           MB04\n         ST    R14,SAVE14                                         MB04\n         TM    SAVE14,128             CHECK CALLER'S AMODE        MB04\n         BNO   SETMODE                IT IT 31 BIT?               MB04\n         MVC   MODEWORD,=X'80000000'  YES, SET THE MODE BIT TO 31 MB04\nSETMODE  LA    R15,GETJOBN                                        MB04\n         O     R15,MODEWORD                                       MB04\n         BSM   0,R15                                              MB04\n*    GET JOBNAME FROM TIOT FOR THE WTO MESSAGES\nGETJOBN  L     R3,16                   R3 ---> CVT            MB02\n         L     R3,0(,R3)               R3 ---> NEW/OLD TCB    MB02\n         L     R3,4(,R3)               R3 ---> MY TCB         MB02\n         L     R3,12(,R3)              R3 ---> MY TIOT        MB02\n         MVC   JOBNAME,0(R3)           MOVE JOBNAME           MB02\n*\n*    THESE CHECKS ARE NEEDED DUE TO THE DIFFERENT WAYS THAT PARMS ARE\n*      PASSED INTO REG1 FROM COBOL2, COBOL VS AND JCL PASSING PARMS.\nCHCKPARM LTR   R1,R1                   CHECK IF PARM PASSED-COBOL2 PGM\n         BZ    RETURN16                NO PARM -> BRANCH TO RETURN16\n         L     R8,0(R1)                LOAD NEXT TO GET PARM FOR COB VS\n         LTR   R8,R8                   CHECK IF PARM PASSED COBOL VS\n         BZ    RETURN16                NO PARM -> BRANCH TO RETURN16\n         L     R8,0(R8)                LOAD NEXT TO GET PARM FOR JCL\n         LTR   R8,R8                   CHECK IF PARM PASSED JCL PARM\n         BZ    RETURN16                NO PARM -> BRANCH TO RETURN16\n         SPACE\n*\n         L     R5,0(R1)                 LOAD PARM INTO R5\n*\n         CLI   2(R5),C':'                CHECK IF SECONDS         MB01\n         BNE   MOVEMINS                  IF NOT -> MOVEMINS       MB01\n         MVC   INTIME,3(R5)             MOVE # SECONDS TO INTIME  MB01\n         MVC   BINTVL,=F'0100'           CHANGE STIMER INTVL->01  MB01\n         MVC   UNITS,=C'SECONDS.'        FOR WTO MESSAGE          MB02\n         B     PACK                                               MB01\nMOVEMINS MVC   INTIME,2(R5)             MOVE # MINUTES TO INTIME  MB01\n         MVC   UNITS,=C'MINUTES.'        FOR WTO MESSAGE          MB02\n         CLC   INTIME,=C'09'             CHECK IF > 09 MINUTES    MB03\n         BH    SETMAX                    IF > 09, -> SETMAX       MB03\n         B     PACK                      BRANCH AROUND SETMAX     MB03\nSETMAX   MVC   MSG04JOB,JOBNAME        MOVE JOBNAME FOR WTO04     MB02\n         MVC   MSG04TME,INTIME         MOVE # OF UNITS - WTO04    MB02\n         MVC   MSG04UNT,UNITS          MOVE MINS OR SECS-WTO04    MB02\n         WTO   MF=(E,MSG04)             ISSUE MESSAGE TO WTO      MB02\n         MVC   INTIME,=C'09'            MOVE VALUE '09' TO INTIME MB03\n         MVC   RCODE,=F'4'              SET RC = 04 FOR WARNING   MB03\nPACK     PACK  DOUBLE,INTIME             PACK INTIME TO DOUBLE FOR\n         CVB   R4,DOUBLE                 CONVERSION TO BINARY\n*\n         MVC   MSGJOB,JOBNAME          MOVE JOBNAME FOR WTO       MB02\n         MVC   MSGTIME,INTIME          MOVE # OF UNITS  - WTO     MB02\n         MVC   MSGUNITS,UNITS          MOVE MINS OR SECS -WTO     MB02\n*                                                                 MB02\nWTO      WTO   MF=(E,MSG)               ISSUE MESSAGE TO WTO      MB02\nSTIMER   STIMER WAIT,BINTVL=BINTVL\n         BCT   R4,STIMER\n         B     CLOSE\nRETURN16 MVC   RCODE,=F'16'          MOVE 16 INTO RETURN CODE AREA MB02\n         MVC   MSG16JOB,JOBNAME        MOVE JOBNAME FOR WTO        MB02\n         WTO   MF=(E,MSG16)             ISSUE MESSAGE TO WTO       MB02\n         B     CLOSE\n         SPACE\nCLOSE    DS    0H\n         L     R15,RCODE           LOAD R15 W/RETURN CODE AREA SAVED\n         L     R13,SAVEAREA+4      R13 ---> CALLERS SAVEAREA       MB04\n         ST    R15,16(R13)         STORE R15\n         LM    R14,R12,12(R13)     RELOAD REGISTERS                MB04\n         BSM   0,R14               BR BACK TO CALLER IN ORIG AMODE MB04\n*\n         LTORG\nMODEWORD DC    F'0'\n         SPACE\n         DS    0F                  INSURE FULL WORD ALIGNMENT\nDOUBLE   DS    D\nRCODE    DS    F'0'\nJOBNAME  DS    CL8                                            MB02\nUNITS    DS    CL8                                            MB02\nINTIME   DS    CL2                                            MB02\nBINTVL   DC    F'6000'\n         SPACE\nMSG      WTO   'MBWAIT00 - JOB 19....26 - ISSUED MBWAIT FOR 48 51......*\n               ',ROUTCDE=(11),DESC=(7),MF=L\nMSGJOB   EQU   MSG+19,8\nMSGTIME  EQU   MSG+48,2\nMSGUNITS EQU   MSG+51,8\n         SPACE\nMSG04    WTO   'MBWAIT04 - JOB 19....26 - PASSED MBWAIT A PARM OF 54 55*\n               ...    CHANGED TO MAX OF 9 MINUTES.',ROUTCDE=(11),      *\n               DESC=(7),MF=L\nMSG04JOB EQU   MSG04+19,8\nMSG04TME EQU   MSG04+54,2\nMSG04UNT EQU   MSG04+57,8\n         SPACE\nMSG16    WTO   'MBWAIT16 - JOB 19....26 - NO PARM PASSED.',            *\n               ROUTCDE=(11),DESC=(7),MF=L\nMSG16JOB EQU   MSG16+19,8\n         SPACE\n*\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\nSAVEAREA DS   18F\nSAVE14   DS   F\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBSCAN": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00G\\x01\\x08\\x03\\x0f\\x01\\x13\\x02\\x8f\\x15\"\\x015\\x01,\\x00\\x00\\xc5\\xc4\\xd7\\xc5\\xe3\\xd2\\xc1@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2008-01-30T00:00:00", "modifydate": "2013-01-28T15:22:47", "lines": 309, "newlines": 300, "modlines": 0, "user": "EDPETKA"}, "text": "*****************************************************************\n* MODIFIED FOR OSA & OSAD DEVICES                   08/15/01 HFS.\n* MODIFIED FOR PHYSICAL & LOGICAL CHANNEL PATHS.    08/22/01 HFS.\n* ADD DASD27 STATEMENTS                             02/07/10 EJP.\n*     DASD54 STATEMENTS - NOT VERIFIED AND MAY NEED ADJUSTING.\n* ADD \"AMODE\" AND \"RMODE\" STATEMENTS                10/22/11 JVD.\n*****************************************************************\nUCBSCAN  CSECT ,\nUCBSCAN  AMODE 31\nUCBSCAN  RMODE 24\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12)             SAVE CALLERS REGS\n         BALR  R12,0\n         USING *,R12\n         LA    R2,SAVEAREA\n         ST    R2,8(,R13)\n         ST    R13,SAVEAREA+4\n         LR    R13,R2\n         B     AROUND\nOUTUCB   DCB DSORG=PS,MACRF=PM,DDNAME=OUTUCB,LRECL=132,RECFM=FB\nAROUND   DS    0H\n         OPEN  (OUTUCB,OUTPUT)\nUCBRTN   EQU   *\n         LA    R8,COMMEXT\n         LA    R9,UCBWORK\n         LA    R10,DCEWORK\n         USING UCBCMEXT,R8         UCB COMMON EXT ADDRESSABILITY\n         USING UCBOB,R9            UCB ADDRESSABILITY\n         USING DCE,R10             DCE ADDRESSABILITY\n         L     R3,CVTPTR                     POINT TO CVT\n         USING CVTMAP,R3\n         MVC   SYSNAME,CVTSNAME              PULL SYSNAME\n         L     R4,CVTPCCAT                   POINT TO PCCA\n         USING PCCA,R4\n         LA    R5,16                         SET UP COUNT\n         SR    R7,R7\nNXTCPU   ICM   R6,B'1111',0(R4)              TEST\n         BZ    NOCPU                         NOTHING, GO BUMP\n         DROP  R4\n         USING PCCA,R6                       SOMETHING THERE\n         MVC   CPUID,PCCACPID+2              MOVE CPUID\n         LA    R7,1(R7)\nNOCPU    LA    R4,4(R4)                      BUMP\n         BCT   R5,NXTCPU                     GO BACK\n         MVI   CPUID,C'0'                    MAKE IT MATCH THE TAP\n         CVD   R7,DBW                        COVERT IT TO DECIMAL\n         UNPK  NUMCPS,DBW+6(2)               UNPACK IT\n         OI    NUMCPS+2,X'F0'                CHANGE THE SIGN\n         IOCINFO IOCTOKEN=TOKEN              GET CURRENT TOKEN\n         XC    SCANWORK,SCANWORK             CLEAR WORKAREA\nSEARCH   EQU   *\n         MVC   ADDR,BLANKS                   CLEAR AREA AND GO ON\n         MVC   TYPEMOD,BLANKS                CLEAR AREA AND GO ON\n         MVC   VOLID,BLANKS                  CLEAR AREA AND GO ON\n         MVC   CHPIDS,BLANKS                 CLEAR AREA AND GO ON\n         UCBSCAN UCBAREA=UCBWORK,WORKAREA=SCANWORK,DCEAREA=DCEWORK,    *\n               DCELEN=255,CMXTAREA=COMMEXT,DEVCLASS=ALL,DEVNCHAR=ADDR, *\n               COPY,IOCTOKEN=TOKEN,DYNAMIC=YES,RANGE=ALL\n         LTR   R15,R15                  RETURN CODE 0 ?\n         BNZ   TIMETOGO                 NO, MUST BE END\n         CLI   UCBID,X'CC'              RC=0, IS IT A COPY ?\n         BNE   TIMETOGO                 NO, GET OUT\nCHKONL   TM    UCBSTAT,X'80'            ONLINE?\n         BNO   SEARCH                   NO, GET ANOTHER ONE\nGETCHP   UCBINFO PATHINFO,PATHAREA=INFOAREA,DEVN=UCBCHAN,              *\n               RETCODE=INFORTCD\n         LA    R11,INFOAREA\n         USING PATH,R11\n         L     R2,PATH#CHPIDS\n         LA    R11,PATHCHPIDARRAY\n         DROP  R11\n         USING PATHCHPID,R11\n         LA    R3,CHPCHP1\nCHPLOOP  DS    0H                       GET THE CHPIDS\n         TM    PATHBITS,PATHLPM+PATHPAM            IS PATH ONLINE ?\n         BC    14,NEXTCHP              NO, GET NEXT CHPID\n         LH    R15,PATHCHPID            ASSOCIATED WITH THIS UCB\n         SR    R14,R14\n         SLDL  R14,28\n         IC    R14,BTX(R14)\n         STC   R14,0(,R3)\n         SR    R14,R14\n         SLDL  R14,4\n         IC    R14,BTX(R14)\n         STC   R14,1(,R3)\n         LA    R3,3(,R3)\nNEXTCHP  EQU   *\n         LA    R11,28(,R11)\n         BCT   R2,CHPLOOP\n         TM    UCBDVCLS,X'20'           DASD ?\n         BO    DASD                     GO TO DASD\n         TM    UCBDVCLS,X'80'           TAPE ?\n         BO    TAPE                     GO TO TAPE\n         TM    UCBDVCLS,X'41'           CTC  ?\n         BO    CTC                      GO TO CTC\n         TM    UCBDVCLS,X'40'           COMM ?\n         BO    COMM                     GO TO COMM\n         TM    UCBDVCLS,X'10'           DISP ?\n         BO    DISP                     GO TO DISP\n         TM    UCBDVCLS,X'08'           UR   ?\n         BO    UR                       GO TO UR\n         B     SEARCH                   DON'T KNOW, GO BACK\n*\n*   DASD PROCESSING\n*\nDASD     DS    0H\n         LA    R2,DASDTAB               POINT TO TABLE\n         MVC   VOLID,UCBVOLI            MOVE VOLID\nDASDLOOP DS    0H\n         CLC   0(1,R2),DCEOBRDT         FOUND DEVTYPE MATCH?\n         BE    DASDMOD                  YES, CHECK FURTHER\n         LA    R2,ENTRYLEN(,R2)         NO MATCH, BUMP TABLE\n         CLI   0(R2),0                  END OF TABLE ?\n         BE    PRINTIT                  YES, GO PRINT\n         B     DASDLOOP                 NO, GET NEXT\nDASDMOD  DS    0H\n         CLI   0(R2),X'32'              IS IT 3390-9?\n         BNE   PRINTIT                  NO, CONTINUE\n         CLI   DCEUDCYL,X'27'           3390-9? APPROX 10,000\n         BE    PRINTIT                  YES, CONTINUE\nDASD27   EQU   *\n         LA    R2,ENTRYLEN(,R2)         BUMP TO MOD27 ENTRY\n         CLI   DCEUDCYL,X'7F'           3390-27? APPROX 32000\n         BE    PRINTIT                  YES, CONTINUE\nDASD54   EQU   *\n         LA    R2,ENTRYLEN(,R2)         BUMP TO MOD54 ENTRY\n         CLI   DCEUDCYL,X'FF'           3390-54? APPROX 65000\n         BE    PRINTIT                  YES, CONTINUE\nDASDUNK  EQU   *\n         LA    R2,ENTRYLEN(,R2)         BUMP TO LAST ENTRY\n         BE    PRINTIT                  YES, CONTINUE\n*\n*   TAPE PROCESSING\n*\nTAPE     DS    0H\n         LA    R2,TAPETAB               POINT TO TABLE\nTAPLOOP  DS    0H\n         CLC   0(1,R2),UCBUNTYP         LOOK UP TABLE\n         BE    PRINTIT                  MATCH\n         LA    R2,ENTRYLEN(,R2)         NO MATCH, BUMP TABLE\n         CLI   0(R2),0                  END OF TABLE ?\n         BE    PRINTIT                  YES, GO PRINT\n         B     TAPLOOP                  NO, GET NEXT\n*\n*   CTC PROCESSING\n*\nCTC      DS    0H\n         LA    R2,CTCTAB                POINT TO TABLE\nCTCLOOP  DS    0H\n         CLC   0(1,R2),UCBUNTYP         LOOK UP TABLE\n         BE    PRINTIT                  MATCH\n         LA    R2,ENTRYLEN(,R2)         NO MATCH, BUMP TABLE\n         CLI   0(R2),0                  END OF TABLE ?\n         BE    PRINTIT                  YES, GO PRINT\n         B     CTCLOOP                  NO, GET NEXT\n*\n*   UR PROCESSING\n*\nUR       DS    0H\n         LA    R2,URTAB                 POINT TO TABLE\nURLOOP   DS    0H\n         CLC   0(1,R2),UCBUNTYP         LOOK UP TABLE\n         BE    PRINTIT                  MATCH ?\n         LA    R2,ENTRYLEN(,R2)         NO MATCH, BUMP TABLE\n         CLI   0(R2),0                  END OF TABLE ?\n         BE    PRINTIT                  YES, GO PRINT\n         B     URLOOP                   NO, GET NEXT\n*\n*   COMM PROCESSING\n*\nCOMM     DS    0H\n         LA    R2,COMMTAB               POINT TO TABLE\nCOMMLOOP DS    0H\n         CLC   0(1,R2),UCBUNTYP         LOOK UP TABLE\n         BE    PRINTIT                  MATCH\n         LA    R2,ENTRYLEN(,R2)         NO MATCH, BUMP TABLE\n         CLI   0(R2),0                  END OF TABLE\n         BE    PRINTIT                  YES, GO PRINT\n         B     COMMLOOP                 NO, GET NEXT\n*\n*   DISPLAY PROCESSING\n*\nDISP     DS    0H\n         MVC   TYPEMOD,=C'3270   '      FORCE DEVICE TYPE\n         PUT   OUTUCB,PRINTLN           PRINT IT\n         B     SEARCH                   GO GET NEXT UCB\n*\n*   PRINT RESULTS\n*\nPRINTIT  DS    0H\n         MVC   TYPEMOD,1(R2)            MOVE DEVICE TYPE\n         PUT   OUTUCB,PRINTLN           PRINT\n         B     SEARCH                   GO BACK\nTIMETOGO DS    0H\n         L     R13,SAVEAREA+4           RESTORE\n         RETURN (14,12),RC=0            REGISTERS\n         SPACE\nBTX      DC    C'0123456789ABCDEF'\nSAVEAREA DC    18F'0'\nSCANWORK DS    CL100\nUCBWORK  DS    CL48' '\nTOKEN    DS    CL48' '\nCOMMEXT  DS    CL32' '\nDCEWORK  DS    CL256' '\nPRINTLN  DS    0CL132\nADDR     DC    CL4' '\nFILL1    DC    CL1' '\nTYPEMOD  DC    CL7' '\nFILL2    DC    CL1' '\nVOLID    DC    CL6' '\nFILL3    DC    CL8' CHPIDS '\nCHPIDS   DS    CL27'XX XX XX XX XX XX XX XX'\nCHPCHP1  EQU   CHPIDS\nCHPCHP2  EQU   CHPIDS+3\nCHPCHP3  EQU   CHPIDS+6\nCHPCHP4  EQU   CHPIDS+9\nCHPCHP5  EQU   CHPIDS+12\nCHPCHP6  EQU   CHPIDS+15\nCHPCHP7  EQU   CHPIDS+18\nCHPCHP8  EQU   CHPIDS+21\nFILL5    DC    CL1' '\nSYSNAME  DC    CL8' '\nFILL6    DC    CL1' '\nCPUID    DC    CL6' '\nFILL7    DC    CL1' '\nNUMCPS   DC    CL3' '\nFILL8    DC    CL59' '\nBLANKS   DC    CL132' '\nINFOAREA DS    CL256\nINFORTCD DS    F\nDBW      DS    D\nDASDTAB  DS    0H\n         DC    X'0E',CL7'3380'\nENTRYLEN EQU *-DASDTAB\n         DC    X'1E',CL7'3380-D'\n         DC    X'21',CL7'3380-J'\n         DC    X'23',CL7'3380-K'\n         DC    X'2E',CL7'3380-E'\n         DC    X'26',CL7'3390-1'\n         DC    X'27',CL7'3390-2'\n         DC    X'24',CL7'3390-3'\n         DC    X'32',CL7'3390-9'\n         DC    X'FF',CL7'3390-27'\n         DC    X'FF',CL7'3390-54'\n         DC    X'00',CL7'DASD'\nTAPETAB  DS    0H\n         DC    X'03',CL7'3400'\n         DC    X'80',CL7'3480'\n         DC    X'81',CL7'3490'\n         DC    X'83',CL7'3590'\n         DC    X'00',CL7'3390TAP'\nCTCTAB   DS    0H\n         DC    X'00',CL7'3088'\n         DC    X'01',CL7'SCTC'\n         DC    X'02',CL7'BCTC'\n         DC    X'03',CL7'RS6K'\n         DC    X'04',CL7'3172'\n         DC    X'05',CL7'OSA'\n         DC    X'06',CL7'OSA-D'\n         DC    X'0F',CL7'OSA-R'\n         DC    X'00',CL7'CTC'\nURTAB    DS    0H\n         DC    X'0F',CL7'AFP1'\n         DC    X'09',CL7'3211'\n         DC    X'0E',CL7'3800'\n         DC    X'4C',CL7'3838'\n         DC    X'19',CL7'3895'\n         DC    X'11',CL7'4245'\n         DC    X'13',CL7'4248'\n         DC    X'0C',CL7'3525'\n         DC    X'00',CL7'DUMMY'\nCOMMTAB  DS    0H\n         DC    X'11',CL7'2701'\n         DC    X'15',CL7'3745'\n         DC    X'25',CL7'3705'\n         DC    X'91',CL7'2702'\n         DC    X'92',CL7'2701'\n         DC    X'93',CL7'2703'\n         DC    X'F1',CL7'3791'\n         DC    X'00',CL7'COMM'\n         PRINT OFF\nPATH     DSECT\n         IOSDPATH\n         IOSDMAP\nUCB      DSECT\n         IEFUCBOB\nDCE      DSECT\n         IECDDCE\nPATH2    DSECT\n         IOSDUPFX\n         CVT   DSECT=YES\n         IHAPCCA\n         PRINT ON\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT886/FILE886.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT886", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}