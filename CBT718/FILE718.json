{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012647000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE718.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE718.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\r'", "DS1TRBAL": "b'#\\xdc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xf5\\x00\\x07\\x04\\xf5\\x00\\n\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x14?\\x01\\x06\\x14?#\\t\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-05-23T00:00:00", "modifydate": "2006-05-23T23:09:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-472"}, "text": "REGULAR CBT TAPE - VERSION 472    FILE:  718\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT472.FILE718\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 7 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,032 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/23/06    23:09:34    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x19\\x01\\x05\\x15\\x0f\\x01\\x05\\x15\\x0f\\x04W\\x00\\xf1\\x00\\xb9\\x00\\x00\\xc7\\xc7\\xc7\\xd9\\xc5\\xc5\\xd5@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2005-05-30T00:00:00", "modifydate": "2005-05-30T04:57:19", "lines": 241, "newlines": 185, "modlines": 0, "user": "GGGREEN"}, "text": "                   WHAT DOES THIS SOFTWARE DO\n\n\nThis file contains a TSO Logon Pre-Prompt exit (IKJEFLD1) and a\ncorresponding TSO Logoff exit (IKJEFLD2).\n\nThe TSO Logon exit permits logging on to TSO using any JES subsystem,\nincluding the Master subsystem (MSTR), since it too is a JES subsystem.\n\nThis provides the capability of logging onto secondary JES2's, for\nexample.  Unfortunately, to my knowledge, such a capability is beyond\nJES3 - as the commercial goes, \"if JES3 could do it, we'd support it.\n\nAs well, it provides the ability to logon under the MSTR Subsystem,\nwhich is a life saver if JES2/JES3 will not start (e.g. JCL Error).\n\nThere have been various flavors of this modification in distribution.\nSome did not support specifying the target subsystem; some required\nadding special TSO userids to the IEFSSN member of parmlib; some\nrequired zapping a module of MVS (MVS's STC component).\n\nBut I always prefer that if there is going to be any \"zapping\" going on,\nthat it be done in memory rather than on dasd.  The elimination of SMPE\nmaintenance issues, and ease of installation and backout should make\nthis obvious.\n\n<======================================================================>\n\n                  CHANGES YOU SHOULD MAKE\n\n\nThese exits support logging on to TSO, but the requirement still remains\nthat VTAM and TCAS can start.  These too can start under the MSTR\nsubsystem, by:\n\n  1) Eliminating SYSOUT datasets in their JCL Procs (the MSTR subsystem\n     does not support the SYSOUT SSI interface)\n\n  2) Putting their JCL procs in a proclib @ by the IEFPDSI DD statement\n     in your Master JCL (Parmlib member MSTJCLnn); note that it is NOT\n     sufficient to put their JCL in a proclib specified to your Primary\n     JES (i.e. in its JCL Proc, or dynamically); remember, we want these\n     tasks to start EVEN if the primary JES does not.\n\n     e.g.\n\n     //MSTJCL00 JOB MSGLEVEL=(1,1),TIME=1440\n     //         EXEC PGM=IEEMB860,DPRTY=(15,15)\n     //STCINRDR DD SYSOUT=(A,INTRDR)\n     //TSOINRDR DD SYSOUT=(A,INTRDR)\n     //IEFPDSI  DD DSN=SYS2.PROCLIB,DISP=SHR\n     //         DD DSN=SYS1.PROCLIB,DISP=SHR\n     //         DD DSN=SYS1.IBM.PROCLIB,DISP=SHR\n     //SYSUADS  DD DSN=SYS1.UADS,DISP=SHR\n     //SYSLBC   DD DSN=SYS1.BRODCAST,DISP=SHR\n     //SYSRACF  DD DSN=SYS1.RACF,DISP=SHR\n     //VARYOFF  DD DSN=SYS2.VARYOFF,DISP=SHR\n\n  3) Changing the command used to start them\n\n     From:  S  NET\n            S  TSO\n\n     To  :  S  NET,SUB=MSTR,TIME=1440\n            S  TSO,SUB=MSTR,TIME=1440\n\n     Adding the TIME=1440 is a good idea, since the default time limit\n     for jobs executing under the MSTR Subsystem is 0!!!\n\nYou can choose to have the capability of running VTAM and TCAS and TCP\nunder the Primary JES, for normal circumstances, with the ability to run\nthem under the MSTR subsystem in emergencies; this can be accomplished\nby removing the SYSOUT datasets, then either placing their JCL Procs in\na single Proclib that is on both the MSTJCL's IEFPDSI DD statement AND\non your regular JES Proclib concatenation, or placing a copy of their\nprocs in two proclibs - one defined to the Master Subsystem, and one to\nyour Primary JES Subsystem.\n\nIf you do this, then your regular IPL Start commands would remain\nunchanged.  If your Primary JES fails to start, you can manually issue\nthe MSTR versions of the START command for them, as shown above.\n\nI can remember the response when I asked a staff member of mine who\nhandled VTAM if he had any issues with running VTAM under the MSTR\nSubsystem.  His comment was that if VTAM all of a sudden had a great\nurge to start submitting jobs via the internal reader (something that\nsince it uses a SYSOUT interface, cannot be done from a job executing\nunder MSTR), he'd want to know about it!!!\n\nMy point is that it really should be no issue eliminating SYSOUT\ndatasets from VTAM and TCAS (and TCP/Telnet) JCL Procs.\n\n<======================================================================>\n\n                  AUDITORS and the MASTER SUBSYSTEM\n\n\nFor your auditors, there are no security issues created by running\ncritical STC's under the Master Subsystem; in fact, it adds to your\nsystem's reliability, so they should fully endorse it.\n\n<======================================================================>\n\n                           MISCALLANEOUS\n\n\nI don't believe in adding unnecesary code that really doesn't add\nanything, other than maintenance and debugging, therefore the LOGON exit\ndoes not check to see if the subsystem entered is a valid and active\nsubsystem that supports running jobs (i.e. the Job Select SSI function).\n\n<======================================================================>\n\n                   TSO LOGON EXIT IKJEFLD1\n\n\nIf a TSO LOGON is perfomed, this exit gets control and if its special\nformat is not present, passes thru to regular logon (with one small\ntransparent exception).\n\nIf the logon exit encounters a LOGON command, followed by exactly one\nblank, then a question mark, it invokes its extended logic.\n\n1) Blank out the ?\n2) Prompt the user to enter the subsystem they want to logon under; if\nthe user just presses enter, or enters the name of the Primary JES, then\nthe exit just passes thru.\n\nUse something similar to the following command:\n\n  LOGON ? \u00ddany data usual at your installation\u00a8\n\nNote the following changes:\n\n1) Any SYSOUT requests from your TSO job will be directed to the\nsubsystem that your TSO job is executing under.  SDSF, the TSO Status,\nOutput and Submit commands, to name a few.\n\nFor example, if you submit a job while logged on under a secondary\nJES2, the job will be submitted to the same secondary JES2.  Since MSTR\ndoes not support SYSOUT, you cannot submit jobs from it - they would be\nsent to the MSTR subsystem, which would tell you in no uncertain terms\nthat it is not the least bit interested (no system damage - just some\nerror messages).\n\n2) If you are executing under a subsystem other than the Primary JES,\ndue to a technical limitation, you must LOGOFF when finished - you\ncannot use the TSO LOGON command to re-logon.  The TSO LOGOFF exit\ncatches this and informs you of this limitation, should you be devious\nand try.\n\n<======================================================================>\n\n                     TSO LOGOFF EXIT IKJEFLD2\n\n\nThe 2nd exit is a TSO Logoff exit.  It handles 2 conditions:\n\n1) If an attempt is made to (re)LOGON using the TSO LOGON command, while\nlogged on to other than the Primary JES, you will receive a message\nindicating that this is not possible - it will then force a LOGOFF.  The\nlogoff exit does not have access to the name of the subsystem used by\nthe TSO job that is logging off, so the LOGON exit passes its name in\nthe TSO Exit to Exit Communications Word.  If a vanilla (i.e. no \"?\")\nlogon is being performed, this is the only change that is performed -\nthe Primary JES' name will be passed from the logon exit to the logoff\nexit.\n\n2) If you are logging off of the MSTR subsystem, the Master Subsystem\nsets a non-zero return code, which is expected and normal, however, the\nTSO logon/logoff routines interpret any non-zero return code as an error\nand issue an error message; the logoff exit resets the error code to 0\nso that everyone is happy.  This is purely cosmetic.\n\n<======================================================================>\n\n                         INSTALLATION\n\n\nThis XMI file contains the following members:\n\n  $README   - The member that you are reading\n  IKJEFLD1  - The source code for the TSO Logon Exit\n  IKJEFLD2  - The source code for the TSO Logoff Exit\n  LOADLIB   - The already assembled source code in load module format\n  ENTER     - A macro required to assemble the exits\n\nIf you want to use the already compiled binaries, issue the following\ncommand:\n\n  RECEIVE INDSN(this.pds(LOADLIB)) - enter\n\n  At the prompt, specify the chosen LPA or Linklist library\n\nWhether you choose to use the precompiled binaries, or to assemble from\nsource, the exits must reside in one of two locations:\n\nLPA (recommended):\n\nCopy these exits to a library that is on your LPA concatenation, then\ndo:\n  SETPROG LPA,ADD,MOD=IKJEFLD1,DSN=lpalib-where-you-copied-it\n  SETPROG LPA,ADD,MOD=IKJEFLD2,DSN=lpalib-where-you-copied-it\n\nNote that if you IPL, you must do a CLPA; if not, then you will need to\nre-issue the two SETPROG commands to again load the exits.\n\nLINKLIST:\n\nCopy these exits to an APF authorized, Linklist library (don't forget\nto do an LLA Refesh (F LLA,REFRESH)\n\nIf you choose to recompile the source, the Link Edit attributes for both\nmodules are:\n\n    AC(0), REFR, AMODE(24), RMODE(24)\n\nThey are entered in Key 8, Supervisor State (per IBM Documentation).\n\n<======================================================================>\n\n                        LEGAL INFORMATION\n\n\nThese programs are copyright 2005 Futurity Software International Inc.\n\nThey are hereby released to the public on the sole condition that the\nprogram commentary header remain intact, displaying the copyright\ninformation and the author's name, including any derivative works.\n\nFuturity Software does not accept responsibility for any damage\nresulting from the use of the supplied software.\n\nThe software is supplied \"As Is\".\n\nAny use of this software implies acceptance of these conditions.\n\n\nGarry G. Green\nFuturity Software International Inc.\ngarry@futuritysoftware.com\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE718": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x14?\\x01\\x06\\x14?#\\t\\x01\\x1a\\x01\\x1a\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-05-23T00:00:00", "modifydate": "2006-05-23T23:09:00", "lines": 282, "newlines": 282, "modlines": 0, "user": "CBT-472"}, "text": "//***FILE 718 contains two TSO LOGON exits from Gary Green.         *   FILE 718\n//*           A detailed description of the file follows:           *   FILE 718\n//*                                                                 *   FILE 718\n//*     Garry G. Green                                              *   FILE 718\n//*     Futurity Software International Inc.                        *   FILE 718\n//*     garry@futuritysoftware.com                                  *   FILE 718\n//*                                                                 *   FILE 718\n//*     <=====================================================>     *   FILE 718\n//*                                                                 *   FILE 718\n//*     File Description:                                           *   FILE 718\n//*                                                                 *   FILE 718\n//*     This file contains a TSO Logon Pre-Prompt exit              *   FILE 718\n//*     (IKJEFLD1) and a corresponding TSO Logoff exit              *   FILE 718\n//*     (IKJEFLD2).                                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     The TSO Logon exit permits logging on to TSO using any      *   FILE 718\n//*     JES subsystem, including the Master subsystem (MSTR),       *   FILE 718\n//*     since it too is a JES subsystem.                            *   FILE 718\n//*                                                                 *   FILE 718\n//*     This provides the capability of logging onto secondary      *   FILE 718\n//*     JES2's, for example.  Unfortunately, to my knowledge,       *   FILE 718\n//*     such a capability is beyond JES3 - as the commercial        *   FILE 718\n//*     goes, \"if JES3 could do it, we'd support it.                *   FILE 718\n//*                                                                 *   FILE 718\n//*     As well, it provides the ability to logon under the         *   FILE 718\n//*     MSTR Subsystem, which is a life saver if JES2/JES3 will     *   FILE 718\n//*     not start (e.g. JCL Error).                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     There have been various flavors of this modification in     *   FILE 718\n//*     distribution.  Some did not support specifying the          *   FILE 718\n//*     target subsystem; some required adding special TSO          *   FILE 718\n//*     userids to the IEFSSN member of parmlib; some required      *   FILE 718\n//*     zapping a module of MVS (MVS's STC component).              *   FILE 718\n//*                                                                 *   FILE 718\n//*     But I always prefer that if there is going to be any        *   FILE 718\n//*     \"zapping\" going on, that it be done in memory rather        *   FILE 718\n//*     than on dasd.  The elimination of SMPE maintenance          *   FILE 718\n//*     issues, and ease of installation and backout should         *   FILE 718\n//*     make this obvious.                                          *   FILE 718\n//*                                                                 *   FILE 718\n//*     <=====================================================>     *   FILE 718\n//*                                                                 *   FILE 718\n//*                     CHANGES YOU SHOULD MAKE                     *   FILE 718\n//*                                                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     These exits support logging on to TSO, but the              *   FILE 718\n//*     requirement still remains that VTAM and TCAS can start.     *   FILE 718\n//*     These too can start under the MSTR subsystem, by:           *   FILE 718\n//*                                                                 *   FILE 718\n//*       1) Eliminating SYSOUT datasets in their JCL Procs         *   FILE 718\n//*          (the MSTR subsystem does not support the SYSOUT        *   FILE 718\n//*          SSI interface)                                         *   FILE 718\n//*                                                                 *   FILE 718\n//*       2) Putting their JCL procs in a proclib @ by the          *   FILE 718\n//*          IEFPDSI DD statement in your Master JCL (Parmlib       *   FILE 718\n//*          member MSTJCLnn); note that it is NOT sufficient       *   FILE 718\n//*          to put their JCL in a proclib specified to your        *   FILE 718\n//*          Primary JES (i.e. in its JCL Proc, or                  *   FILE 718\n//*          dynamically); remember, we want these tasks to         *   FILE 718\n//*          start EVEN if the primary JES does not.                *   FILE 718\n//*                                                                 *   FILE 718\n//*          e.g.                                                   *   FILE 718\n//*                                                                 *   FILE 718\n//*          //MSTJCL00 JOB MSGLEVEL=(1,1),TIME=1440                *   FILE 718\n//*          //         EXEC PGM=IEEMB860,DPRTY=(15,15)             *   FILE 718\n//*          //STCINRDR DD SYSOUT=(A,INTRDR)                        *   FILE 718\n//*          //TSOINRDR DD SYSOUT=(A,INTRDR)                        *   FILE 718\n//*          //IEFPDSI  DD DSN=SYS2.PROCLIB,DISP=SHR                *   FILE 718\n//*          //         DD DSN=SYS1.PROCLIB,DISP=SHR                *   FILE 718\n//*          //         DD DSN=SYS1.IBM.PROCLIB,DISP=SHR            *   FILE 718\n//*          //SYSUADS  DD DSN=SYS1.UADS,DISP=SHR                   *   FILE 718\n//*          //SYSLBC   DD DSN=SYS1.BRODCAST,DISP=SHR               *   FILE 718\n//*          //SYSRACF  DD DSN=SYS1.RACF,DISP=SHR                   *   FILE 718\n//*          //VARYOFF  DD DSN=SYS2.VARYOFF,DISP=SHR                *   FILE 718\n//*                                                                 *   FILE 718\n//*       3) Changing the command used to start them                *   FILE 718\n//*                                                                 *   FILE 718\n//*          From:  S  NET                                          *   FILE 718\n//*                 S  TSO                                          *   FILE 718\n//*                                                                 *   FILE 718\n//*          To  :  S  NET,SUB=MSTR,TIME=1440                       *   FILE 718\n//*                 S  TSO,SUB=MSTR,TIME=1440                       *   FILE 718\n//*                                                                 *   FILE 718\n//*          Adding the TIME=1440 is a good idea, since the         *   FILE 718\n//*          default time limit for jobs executing under the        *   FILE 718\n//*          MSTR Subsystem is 0!!!                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     You can choose to have the capability of running VTAM       *   FILE 718\n//*     and TCAS and TCP under the Primary JES, for normal          *   FILE 718\n//*     circumstances, with the ability to run them under the       *   FILE 718\n//*     MSTR subsystem in emergencies; this can be accomplished     *   FILE 718\n//*     by removing the SYSOUT datasets, then either placing        *   FILE 718\n//*     their JCL Procs in a single Proclib that is on both the     *   FILE 718\n//*     MSTJCL's IEFPDSI DD statement AND on your regular JES       *   FILE 718\n//*     Proclib concatenation, or placing a copy of their procs     *   FILE 718\n//*     in two proclibs - one defined to the Master Subsystem,      *   FILE 718\n//*     and one to your Primary JES Subsystem.                      *   FILE 718\n//*                                                                 *   FILE 718\n//*     If you do this, then your regular IPL Start commands        *   FILE 718\n//*     would remain unchanged.  If your Primary JES fails to       *   FILE 718\n//*     start, you can manually issue the MSTR versions of the      *   FILE 718\n//*     START command for them, as shown above.                     *   FILE 718\n//*                                                                 *   FILE 718\n//*     I can remember the response when I asked a staff member     *   FILE 718\n//*     of mine who handled VTAM if he had any issues with          *   FILE 718\n//*     running VTAM under the MSTR Subsystem.  His comment was     *   FILE 718\n//*     that if VTAM all of a sudden had a great urge to start      *   FILE 718\n//*     submitting jobs via the internal reader (something that     *   FILE 718\n//*     since it uses a SYSOUT interface, cannot be done from a     *   FILE 718\n//*     job executing under MSTR), he'd want to know about          *   FILE 718\n//*     it!!!                                                       *   FILE 718\n//*                                                                 *   FILE 718\n//*     My point is that it really should be no issue               *   FILE 718\n//*     eliminating SYSOUT datasets from VTAM and TCAS (and         *   FILE 718\n//*     TCP/Telnet) JCL Procs.                                      *   FILE 718\n//*                                                                 *   FILE 718\n//*     <=====================================================>     *   FILE 718\n//*                                                                 *   FILE 718\n//*                AUDITORS and the MASTER SUBSYSTEM                *   FILE 718\n//*                                                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     For your auditors, there are no security issues created     *   FILE 718\n//*     by running critical STC's under the Master Subsystem;       *   FILE 718\n//*     in fact, it adds to your system's reliability, so they      *   FILE 718\n//*     should fully endorse it.                                    *   FILE 718\n//*                                                                 *   FILE 718\n//*     <=====================================================>     *   FILE 718\n//*                                                                 *   FILE 718\n//*                         MISCELLANEOUS                           *   FILE 718\n//*                                                                 *   FILE 718\n//*     I don't believe in adding unnecesary code that really       *   FILE 718\n//*     doesn't add anything, other than maintenance and            *   FILE 718\n//*     debugging, therefore the LOGON exit does not check to       *   FILE 718\n//*     see if the subsystem entered is a valid and active          *   FILE 718\n//*     subsystem that supports running jobs (i.e. the Job          *   FILE 718\n//*     Select SSI function).                                       *   FILE 718\n//*                                                                 *   FILE 718\n//*     <=====================================================>     *   FILE 718\n//*                                                                 *   FILE 718\n//*                     TSO LOGON EXIT IKJEFLD1                     *   FILE 718\n//*                                                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     If a TSO LOGON is perfomed, this exit gets control and      *   FILE 718\n//*     if its special format is not present, passes thru to        *   FILE 718\n//*     regular logon (with one small transparent exception).       *   FILE 718\n//*                                                                 *   FILE 718\n//*     If the logon exit encounters a LOGON command, followed      *   FILE 718\n//*     by exactly one blank, then a question mark, it invokes      *   FILE 718\n//*     its extended logic.                                         *   FILE 718\n//*                                                                 *   FILE 718\n//*     1) Blank out the ?                                          *   FILE 718\n//*     2) Prompt the user to enter the subsystem they want to      *   FILE 718\n//*     logon under; if the user just presses enter, or enters      *   FILE 718\n//*     the name of the Primary JES, then the exit just passes      *   FILE 718\n//*     thru.                                                       *   FILE 718\n//*                                                                 *   FILE 718\n//*     Use something similar to the following command:             *   FILE 718\n//*                                                                 *   FILE 718\n//*       LOGON ? \u00ddany data usual at your installation\u00a8             *   FILE 718\n//*                                                                 *   FILE 718\n//*     Note the following changes:                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     1) Any SYSOUT requests from your TSO job will be            *   FILE 718\n//*     directed to the subsystem that your TSO job is              *   FILE 718\n//*     executing under.  SDSF, the TSO Status, Output and          *   FILE 718\n//*     Submit commands, to name a few.                             *   FILE 718\n//*                                                                 *   FILE 718\n//*     For example, if you submit a job while logged on under      *   FILE 718\n//*     a secondary JES2, the job will be submitted to the same     *   FILE 718\n//*     secondary JES2.  Since MSTR does not support SYSOUT,        *   FILE 718\n//*     you cannot submit jobs from it - they would be sent to      *   FILE 718\n//*     the MSTR subsystem, which would tell you in no              *   FILE 718\n//*     uncertain terms that it is not the least bit interested     *   FILE 718\n//*     (no system damage - just some error messages).              *   FILE 718\n//*                                                                 *   FILE 718\n//*     2) If you are executing under a subsystem other than        *   FILE 718\n//*     the Primary JES, due to a technical limitation, you         *   FILE 718\n//*     must LOGOFF when finished - you cannot use the TSO          *   FILE 718\n//*     LOGON command to re-logon.  The TSO LOGOFF exit catches     *   FILE 718\n//*     this and informs you of this limitation, should you be      *   FILE 718\n//*     devious and try.                                            *   FILE 718\n//*                                                                 *   FILE 718\n//*     <=====================================================>     *   FILE 718\n//*                                                                 *   FILE 718\n//*                    TSO LOGOFF EXIT IKJEFLD2                     *   FILE 718\n//*                                                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     The 2nd exit is a TSO Logoff exit.  It handles 2            *   FILE 718\n//*     conditions:                                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     1) If an attempt is made to (re)LOGON using the TSO         *   FILE 718\n//*     LOGON command, while logged on to other than the            *   FILE 718\n//*     Primary JES, you will receive a message indicating that     *   FILE 718\n//*     this is not possible - it will then force a LOGOFF.         *   FILE 718\n//*     The logoff exit does not have access to the name of the     *   FILE 718\n//*     subsystem used by the TSO job that is logging off, so       *   FILE 718\n//*     the LOGON exit passes its name in the TSO Exit to Exit      *   FILE 718\n//*     Communications Word.  If a vanilla (i.e. no \"?\") logon      *   FILE 718\n//*     is being performed, this is the only change that is         *   FILE 718\n//*     performed - the Primary JES' name will be passed from       *   FILE 718\n//*     the logon exit to the logoff exit.                          *   FILE 718\n//*                                                                 *   FILE 718\n//*     2) If you are logging off of the MSTR subsystem, the        *   FILE 718\n//*     Master Subsystem sets a non-zero return code, which is      *   FILE 718\n//*     expected and normal, however, the TSO logon/logoff          *   FILE 718\n//*     routines interpret any non-zero return code as an error     *   FILE 718\n//*     and issue an error message; the logoff exit resets the      *   FILE 718\n//*     error code to 0 so that everyone is happy.  This is         *   FILE 718\n//*     purely cosmetic.                                            *   FILE 718\n//*                                                                 *   FILE 718\n//*     <=====================================================>     *   FILE 718\n//*                                                                 *   FILE 718\n//*                        INSTALLATION                             *   FILE 718\n//*                                                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     This XMI file contains the following members:               *   FILE 718\n//*                                                                 *   FILE 718\n//*       $README   - The member that you are reading               *   FILE 718\n//*       IKJEFLD1  - The source code for the TSO Logon Exit        *   FILE 718\n//*       IKJEFLD2  - The source code for the TSO Logoff Exit       *   FILE 718\n//*       LOADLIB   - The already assembled source code in load     *   FILE 718\n//*                   module format                                 *   FILE 718\n//*       ENTER     - A macro required to assemble the exits        *   FILE 718\n//*                                                                 *   FILE 718\n//*     If you want to use the already compiled binaries, issue     *   FILE 718\n//*     the following command:                                      *   FILE 718\n//*                                                                 *   FILE 718\n//*       RECEIVE INDSN(this.pds(LOADLIB)) - enter                  *   FILE 718\n//*                                                                 *   FILE 718\n//*       At the prompt, specify the chosen LPA or Linklist         *   FILE 718\n//*       library                                                   *   FILE 718\n//*                                                                 *   FILE 718\n//*     Whether you choose to use the precompiled binaries, or      *   FILE 718\n//*     to assemble from source, the exits must reside in one       *   FILE 718\n//*     of two locations:                                           *   FILE 718\n//*                                                                 *   FILE 718\n//*     LPA (recommended):                                          *   FILE 718\n//*                                                                 *   FILE 718\n//*     Copy these exits to a library that is on your LPA           *   FILE 718\n//*     concatenation, then do:                                     *   FILE 718\n//*       SETPROG LPA,ADD,MOD=IKJEFLD1,DSN=lpalib-copied-to         *   FILE 718\n//*       SETPROG LPA,ADD,MOD=IKJEFLD2,DSN=lpalib-copied-to         *   FILE 718\n//*                                                                 *   FILE 718\n//*     Note that if you IPL, you must do a CLPA; if not, then      *   FILE 718\n//*     you will need to re-issue the two SETPROG commands to       *   FILE 718\n//*     again load the exits.                                       *   FILE 718\n//*                                                                 *   FILE 718\n//*     LINKLIST:                                                   *   FILE 718\n//*                                                                 *   FILE 718\n//*     Copy these exits to an APF authorized, Linklist library     *   FILE 718\n//*     (don't forget to do an LLA Refesh (F LLA,REFRESH)           *   FILE 718\n//*                                                                 *   FILE 718\n//*     If you choose to recompile the source, the Link Edit        *   FILE 718\n//*     attributes for both modules are:                            *   FILE 718\n//*                                                                 *   FILE 718\n//*         AC(0), REFR, AMODE(24), RMODE(24)                       *   FILE 718\n//*                                                                 *   FILE 718\n//*     They are entered in Key 8, Supervisor State (per IBM        *   FILE 718\n//*     Documentation).                                             *   FILE 718\n//*                                                                 *   FILE 718\n//*     <=====================================================>     *   FILE 718\n//*                                                                 *   FILE 718\n//*                      LEGAL INFORMATION                          *   FILE 718\n//*                                                                 *   FILE 718\n//*                                                                 *   FILE 718\n//*     These programs are copyright 2005 Futurity Software         *   FILE 718\n//*     International Inc.                                          *   FILE 718\n//*                                                                 *   FILE 718\n//*     They are hereby released to the public on the sole          *   FILE 718\n//*     condition that the program commentary header remain         *   FILE 718\n//*     intact, displaying the copyright information and the        *   FILE 718\n//*     author's name, including any derivative works.              *   FILE 718\n//*                                                                 *   FILE 718\n//*     Futurity Software does not accept responsibility for        *   FILE 718\n//*     any damage resulting from the use of the supplied           *   FILE 718\n//*     software.                                                   *   FILE 718\n//*                                                                 *   FILE 718\n//*     The software is supplied \"As Is\".                           *   FILE 718\n//*                                                                 *   FILE 718\n//*     Any use of this software implies acceptance of these        *   FILE 718\n//*     conditions.                                                 *   FILE 718\n//*                                                                 *   FILE 718\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ENTER": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x043o\\x01\\x05\\x15\\x0f\\x04H\\x00!\\x00\\x03\\x00\\x00\\xc7\\xc7\\xc7\\xd9\\xc5\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-12-01T00:00:00", "modifydate": "2005-05-30T04:48:14", "lines": 33, "newlines": 3, "modlines": 0, "user": "GGGREEN"}, "text": "         MACRO\n&LABEL   ENTER     &AMODE=31,&RMODE=ANY,&WSLEN=,&SP=0,&LOC=RES\n.* SET UP MODULE ENTRY PROLOG; FOLLOWING MACRO, REGISTER CONTENTS ARE\n.* AS AT ENTRY WITH TWO EXCEPTIONS:\n.*    1) R12 @ BASE OF MODULE (BASE REGISTER)\n.*    2) IF WSLEN SPECIFIED, STORAGE IS OBTAINED FOR A LENGTH OF WSLEN\n.*       IN THE SUBPOOL SPECIFIED BY SP; FOLLOWING MACRO, R11@ STORAGE\n         PUSH      PRINT                     SAVE PRINTING STATUS\n         PRINT     OFF,NOPRINT               SUPRESS PRINTING REG EQ\n         YREGS     ,                         REGISTER EQUATES\n         POP       PRINT                     RESTORE PRINTING STATUS\n&LABEL   CSECT     ,                         NAME OF PROGRAM\n&LABEL   AMODE     &AMODE                    SPECIFY AMODE\n&LABEL   RMODE     &RMODE                    SPECIFY RMODE\n         B         @&SYSNDX-&LABEL.(R15)     BRANCH AROUND HEADER\n         DC        C'*CSECT:'                EYECATCHER\n         DC        C'&LABEL'                 MODULE NAME\n         DC        C'*COMPILED:'             EYECATCHER\n         DC        CL19'&SYSCLOCK'           DATE AND TIME STAMP\n         ORG       *-9                       OVERLAY BLANK IN SYSCLOCK\n         DC        C'*'                      CHANGE TO AN *\n         ORG       ,                         STOP OVERLAYING\n@&SYSNDX DS        0H                        BRANCH AROUND HEADER\n         BAKR      R14,R0                    SAVE STATE\n         LR        R12,R15                   LOAD CODE PAGE REGISTER\n         USING     &LABEL,R12                MAP CODE PAGE REGISTER\n         AIF       ('&WSLEN' EQ '').NOREFR   NO WORKING STORAGE REQ\n         STORAGE   OBTAIN,LENGTH=&WSLEN,SP=&SP,LOC=(&LOC)\n*                                            ... IN REQUESTED SUBPOOL\n         LR        R11,R1                    COPY @ WORKING STORAGE\n         EREG      R13,R10                   RESTORE REGS EXCL R11-12\n.NOREFR  ANOP                                REFR NOT REQUIRED\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEFLD1": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x01\\x05\\x15\\x0f\\x01\\x05\\x15\\x0f\\x02(\\x01+\\x01+\\x00\\x00\\xc7\\xc7\\xc7\\xd9\\xc5\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-05-30T00:00:00", "modifydate": "2005-05-30T02:28:34", "lines": 299, "newlines": 299, "modlines": 0, "user": "GGGREEN"}, "text": "         ICTL      1,71,20\n\n***********************************************************************\n*                                                                     *\n*                           I K J E F L D 1                           *\n*                                                                     *\n*                                                                     *\n*F U T U R I T Y   S O F T W A R E   I N T E R N A T I O N A L   I N C*\n*                                                                     *\n*                                                                     *\n*                   CHIEF ARCHITECT: Garry G. Green                   *\n*                  ARCHITECT EN CHEF: Garry G. Green                  *\n*                                                                     *\n*                       COPYRIGHT MAY 2005 FSI                        *\n*                                                                     *\n***********************************************************************\n\n***********************************************************************\n*                                                                     *\n*   FUNCTION                                                          *\n*                                                                     *\n*     TSO Logon Pre-prompt exit that permits user to specify the name *\n*     of the JES to be used for the about to be started TSO session.  *\n*     The default is to use the PJES (Primary JES).                   *\n*                                                                     *\n***********************************************************************\n\n***********************************************************************\n*                                                                     *\n*   CHANGE ACTIVITY                                                   *\n*   $G00=050527 VERSION 1.0 BASE                                      *\n*                                                                     *\n***********************************************************************\n\n***********************************************************************\n*                                                                     *\n*   ATTRIBUTES:                                                       *\n*     Refreshable, Amode(24), Rmode(24), Plpa or Linklist resident    *\n*     Entered Key8, Supervisor state                                  *\n*                                                                     *\n***********************************************************************\n\n***********************************************************************\n*                                                                     *\n*                     R E C O R D   L A Y O U T S                     *\n*                                                                     *\n***********************************************************************\n\n         PRINT     ON,NOGEN                  SUPPRESS EXPANSION\n         IHAPSA    ,                         MAP PSA\n         CVT       DSECT=YES                 MAP CVT\n         IEFJESCT  ,                         MAP JESCT\n         IHAASCB   ,                         MAP ASCB\nCSCB     DSECT     ,                         CSCB DOES NOT HAVE ITS OWN\n         IEECHAIN  ,                         MAP CSCB\nCIB      DSECT     ,                         CIB  DOES NOT HAVE ITS OWN\n         IEZCIB    ,                         MAP CIB\n         IKJTCB    ,                         MAP TCB\n\nWS       DSECT     ,                         MAP OUR WORKING STORAGE\nENQW     ENQ       (CSCBMAJ,                 W/S copy of ENQ plist     *\n                   CSCBMIN,                  (cont'd)                  *\n                   E,                        (cont'd)                  *\n                   3,                        (cont'd)                  *\n                   SYSTEM),                  (cont'd)                  *\n                   RET=HAVE,                 (cont'd)                  *\n                   MF=L                      (cont'd)\n\nDEQW     DEQ       (CSCBMAJ,                 W/S copy of DEQ plist     *\n                   CSCBMIN,                  (cont'd)                  *\n                   3,                        (cont'd)                  *\n                   SYSTEM),                  (cont'd)                  *\n                   RET=HAVE,                 (cont'd)                  *\n                   MF=L                      (cont'd)\n\nSSNAME   DS        CL4                       Subsystem name\nKEYSAVE  DS        XL1                       PSW key save\nPJESN    DS        CL4                       Primary JES Name\nWSLEN    EQU       *-WS                      Length of working storage\n         PRINT     ON,GEN\n\n***********************************************************************\n*                                                                     *\n*                     P R O G R A M   P R O L O G                     *\n*                                                                     *\n***********************************************************************\n\nIKJEFLD1 ENTER     AMODE=24,RMODE=24\n         B         START                     BRANCH AROUND CONSTANTS\n*STATS\n***********************************************************************\n*                                                                     *\n*                          C O N S T A N T S                          *\n*                                                                     *\n***********************************************************************\n\n@CIBLEN  EQU       CIBDATA-CIB+L'CIBDATA     Len of STC Comm CIB =\n*                                            fixed len + data len\nPROMPT   DC        C'Enter subsystem name; pressing enter will use the *\n                   Primary JES'\n\nENQM     ENQ       (CSCBMAJ,                 Model copy of ENQ plist   *\n                   CSCBMIN,                  (cont'd)                  *\n                   E,                        (cont'd)                  *\n                   3,                        (cont'd)                  *\n                   SYSTEM),                  (cont'd)                  *\n                   RET=HAVE,                 (cont'd)                  *\n                   MF=L                      (cont'd)\nENQLEN   EQU       *-ENQM                    (cont'd)\n\nDEQM     DEQ       (CSCBMAJ,                 Model copy of DEQ plist   *\n                   CSCBMIN,                  (cont'd)                  *\n                   3,                        (cont'd)                  *\n                   SYSTEM),                  (cont'd)                  *\n                   RET=HAVE,                 (cont'd)                  *\n                   MF=L                      (cont'd)\nDEQLEN   EQU       *-DEQM                    (cont'd)\n\nCSCBMAJ  DC        C'SYSIEFSD'               CSCB major ENQ name\nCSCBMIN  DC        C'Q10'                    CSCB minor ENQ name\n\n***********************************************************************\n*                                                                     *\n*            L O G I C A L   S T A R T   O F   P R O G R A M          *\n*                                                                     *\n***********************************************************************\n\nSTART    DS        0H                        Logical start of program\n         LR        R3,R1                     Save parmlist addr\n         STORAGE   OBTAIN,                   Get w/s                   *\n                   LENGTH=WSLEN              (cont'd)\n         LR        R13,R1                    Load W/S @ into R13\n         USING     WS,R13                    Map w/s\n\n***********************************************************************\n*                                                                     *\n*      Obtain Primary JES Subsystem Name and save for later use       *\n*                                                                     *\n***********************************************************************\n\n         L         R1,FLCCVT-PSA(0)          Get @ CVT\n         L         R1,CVTJESCT-CVTMAP(R1)    Get @ JESCT\n         MVC       PJESN,JESPJESN-JESCT(R1)  Save Primary JES Name\n\n***********************************************************************\n*                                                                     *\n*  Look for 'LOGON ?' (i.e. LOGON followed by exactly one blank, a    *\n*  question mark, then optionally any other data normally entered on  *\n*  the LOGON command line                                             *\n*                                                                     *\n***********************************************************************\n\n         L         R1,0(R3)                  Get @ Exit parm 1\n         L         R2,4(R1)                  Get logon command length\n         C         R2,=F'7'                  Q. Command length >= 7\n         BL        PJES                      A. No, can't be \"LOGON ?\"\n*                                               Branch to use PJES\n         L         R1,8(R1)                  Get @ logon buffer\n         CLC       =CL7'LOGON ?',0(R1)       Q. LOGON command with ?\n         BNE       PJES                      A. No - branch to use PJES\n         MVI       6(R1),C' '                Blank out question mark\n\n***********************************************************************\n*                                                                     *\n*                   Prompt User for Subsystem Name                    *\n*                                                                     *\n***********************************************************************\n\n         MVC       SSNAME,=CL4' '            Init subsys name to blanks\n         TPUT      PROMPT,                   Prompt user for subsystem *\n                   L'PROMPT                  (cont'd)\n         TGET      SSNAME,                   Get user's answer         *\n                   L'SSNAME                  (cont'd)\n         OC        SSNAME,=CL4' '            Upper case the answer\n         CLC       SSNAME,=CL4' '            Q. User entered nothing\n         BE        PJES                      A. Yes - branch - use PJES\n         CLC       SSNAME,PJESN              Q. Answer is name of PJES\n         BE        PJES                      A. Yes - branch - use PJES\n\n***********************************************************************\n*                                                                     *\n*                  Obtain storage for and format CIB                  *\n*                                                                     *\n***********************************************************************\n\n         IPK       ,                         Save current PSW key\n         STC       R2,KEYSAVE                (cont'd)\n         SPKA      X'00'                     Switch to PSW key zero\n         STORAGE   OBTAIN,                   Get CIB storage from SQA  *\n                   LENGTH=@CIBLEN,           (cont'd)                  *\n                   SP=245                    (cont'd)\n         LR        R10,R1                    Save CIB address\n         USING     CIB,R10                   Map our CIB\n         LA        R1,*+4+4+2                Switch to 31-bit mode\n         O         R1,=XL4'80000000'         (cont'd)\n         BSM       0,R1                      (cont'd)\n         XC        CIB(@CIBLEN),CIB          Zero out our CIB\n         MVI       CIBLEN,@CIBLEN/8          Set CIB len in DWords\n         MVI       CIBVERB,CIBSTCOM          Set STC communication code\n         MVI       CIBCONID,X'00'            Set console ID to internal\n         MVC       CIBDATLN,=AL2(L'CIBDATA)  Set data length in bytes\n         MVC       CIBDATA(4),=CL4'SUB='     Put SUB= into CIB data\n         MVC       CIBDATA+4(4),SSNAME       Add S/S name after SUB=\n\n***********************************************************************\n*                                                                     *\n*              Chain our CIB onto CIB chain as first CIB              *\n*                                                                     *\n* CHCIBP  -->  1st CIB --> 2nd CIB --> etc          (Before)          *\n*   +                                                                 *\n*   + changed to following                                            *\n*   +                                                                 *\n*   +------->  our CIB --> 1st CIB --> 2nd CIB etc  (After)           *\n*                                                                     *\n***********************************************************************\n\n         MVC       ENQW(ENQLEN),ENQM         Copy model ENQ parm list\n         ENQ       ,MF=(E,ENQW)              ENQ CIB chain\n         L         R2,PSAAOLD-PSA(0)         Get @ ASCB\n         L         R11,ASCBCSCB-ASCB(R2)     Get @ CSCB\n         L         R1,CHCSCXP-CHAIN(R11)     Get @ CSCX\n         LA        R1,CHCIBP-CSCX(R1)        @ to CHCIBP (see diagram)\n         L         R0,0(R1)                  Get 1st CIB @ from CHCIBP\n         ST        R0,CIBNEXT-CIB(R10)       And store it into our CIB\n         ST        R10,0(R1)                 Store @ to our CIB into\n*                                            CHCIBP field (see diagram)\n         LA        R1,*+4+2                  Switch to 24-bit mode\n         BSM       0,R1                      (cont'd)\n         MVC       DEQW(DEQLEN),DEQM         Copy model DEQ parm list\n         DEQ       ,MF=(E,DEQW)              DEQ CIB chain\n         DROP      R10                       Finished with CIB mapping\n\n***********************************************************************\n*                                                                     *\n*                  Eliminate zap to IKJEFLA1/IKJEFLB                  *\n*                                                                     *\n***********************************************************************\n\n         CLC       SSNAME,=CL4'MSTR'         Q. MSTR S/S specified\n         BNE       NOJOBST                   A. No - branch\n         L         R2,PSATOLD-PSA(0)         Get @ our TCB\n         ST        R2,TCBJSTCB-TCB(R2)       Make our TCB a JobStep TCB\nNOJOBST  DS        0H                        Bypass making our TCB a\n*                                            JobStep TCB\n\n***********************************************************************\n*                                                                     *\n*                      Back to original PSW Key                       *\n*                                                                     *\n***********************************************************************\n\n         IC        R2,KEYSAVE                Restore original PSW key\n         SPKA      0(R2)                     (cont'd)\n         B         END                       Goto common end\n\n***********************************************************************\n*                                                                     *\n*                           Use Primary JES                           *\n*                                                                     *\n***********************************************************************\n\nPJES     DS        0H                        Set SSNAME to PJES name\n         MVC       SSNAME,PJESN              (cont'd)\n\n***********************************************************************\n*                                                                     *\n*    Indicate which S/S was used - store name into TSO Exit to Exit   *\n*    communication word; logoff exit IKJEFLD2 has special processing  *\n*    to perform if selected subsystem was not the PJES                *\n*                                                                     *\n***********************************************************************\n\nEND      DS        0H                        Common end\n         L         R4,20(R3)                 Get @ to TSO Exit to Exit\n*                                            Communication Word\n         MVC       0(8,R4),=XL8'0000000000000004'  Init key and len\n         MVC       8(4,R4),SSNAME            Indicate to IKJEFLD2 the\n*                                            Subsystem Name used\n\n***********************************************************************\n*                                                                     *\n*                            Module Epilog                            *\n*                                                                     *\n***********************************************************************\n\n         STORAGE   RELEASE,                  Release working storage   *\n                   LENGTH=WSLEN,             (cont'd)                  *\n                   ADDR=(R13)                (cont'd)\n         XR        R15,R15                   Set return code = 0\n         PR        ,                         Return to caller\n\n***********************************************************************\n*                                                                     *\n*                          WIND UP ASSEMBLY                           *\n*                                                                     *\n***********************************************************************\n\n         LTORG     ,                         Assemble literals here\n         END       IKJEFLD1                  Specify Entry Point\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IKJEFLD2": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x01\\x05\\x15\\x0f\\x01\\x05\\x15\\x0f\\x01\\x00\\x00|\\x00|\\x00\\x00\\xc7\\xc7\\xc7\\xd9\\xc5\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-05-30T00:00:00", "modifydate": "2005-05-30T01:00:22", "lines": 124, "newlines": 124, "modlines": 0, "user": "GGGREEN"}, "text": "         ICTL      1,71,20\n\n***********************************************************************\n*                                                                     *\n*                           I K J E F L D 2                           *\n*                                                                     *\n*                                                                     *\n*F U T U R I T Y   S O F T W A R E   I N T E R N A T I O N A L   I N C*\n*                                                                     *\n*                                                                     *\n*                   CHIEF ARCHITECT: Garry G. Green                   *\n*                  ARCHITECT EN CHEF: Garry G. Green                  *\n*                                                                     *\n*                       COPYRIGHT MAY 2005 FSI                        *\n*                                                                     *\n***********************************************************************\n\n***********************************************************************\n*   CHANGE ACTIVITY                                                   *\n*   $G00=050527 VERSION 1.0 BASE                                      *\n***********************************************************************\n\n***********************************************************************\n*   ATTRIBUTES:                                                       *\n*     REFRESHABLE, AMODE(24), RMODE(24), PLPA OR LINKLIST RESIDENT    *\n*     ENTERED KEY8, SUPERVISOR STATE                                  *\n*                                                                     *\n*   OPERATION                                                         *\n*                                                                     *\n*     1) MSTR SUBSYSTEM DOES NOT SUPPORT RUNNING A SECOND JOB WHEN THE*\n*        FIRST ONE ENDS (DESIGNED TO RUN STC'S ONLY); THE TSO LOGON   *\n*        COMMAND LOGS OFF THE CURRENT JOB AND STARTS A SECOND TSO JOB *\n*        IN THE SAME ADDESS SPACE, CAUSING ERRORS.                    *\n*                                                                     *\n*        THIS EXIT CHECKS IF THE TSO JOB BEING LOGGED OFF WAS EXEC.   *\n*        UNDER THE MSTR SUBSYSTEM; IF SO, IT ISSUES AN ERROR MESSAGE  *\n*        TO USER AND SET RETURN CODE 16 FORCING LOGOFF                *\n*                                                                     *\n*     2) IF TSO EXEC. UNDER MSTR S/S, DURING LOGOFF, MESSAGE IKJ56457I*\n*        PROGRAM ERROR MESSAGE IS ISSUED DUE TO A NON-ZERO TERMINATION*\n*        CODE WHICH IS NORMAL FOR THE MSTR SUBSYSTEM; WE ZERO THE     *\n*        ONE BYTE FIELD AT OFFSET +2 INTO THE JSXL TO SUPPRESS MESSAGE*\n***********************************************************************\n\n\n***********************************************************************\n*                     R E C O R D   L A Y O U T S                     *\n***********************************************************************\n\n         PRINT     ON,NOGEN                  SUPRESS EXPANSION\n         IHAPSA    ,                         MAP PSA\n         CVT       DSECT=YES                 MAP CVT\n         IEFJESCT  ,                         MAP JESCT\n         IKJTCB    ,                         MAP TCB\n         IHAASCB   ,                         MAP ASCB\n         IHAASXB   ,                         MAP ASXB\n         IKJEFLWA  ,                         MAP LWA\n         IEFVJSEL  ,                         MAP JSEL AND JSXL\n         PRINT     ON,GEN                    GENERATE OUTPUT\n\n***********************************************************************\n*                     P R O G R A M   P R O L O G                     *\n***********************************************************************\n\nIKJEFLD2 ENTER     AMODE=24,RMODE=24         ESTABLISH STD ENTRY PROLOG\n         B         START                     BRANCH AROUND CONSTANTS\n*STATS\n***********************************************************************\n*                         C O N S T A N T S                           *\n***********************************************************************\n\nNOLOGON1 DC        C'TSO LOGON command (i.e. LOGON command executed fro*\n                   m a logged on TSO terminal)'\nNOLOGON2 DC        C'only supported for TSO jobs executing under the Pr*\n                   imary JES Subsystem.  TSO'\nNOLOGON3 DC        C'Exit IKJEFLD2 is forcing a LOGOFF.  Please press e*\n                   nter to complete LOGOFF.'\n***********************************************************************\n*              L O G I C A L   P R O G R A M   S T A R T              *\n***********************************************************************\n\nSTART    DS        0H                        Logical program start\n         LR        R3,R1                     Save parm @\n         L         R4,20(R3)                 Get Exit to Exit Comm Word\n         L         R5,FLCCVT-PSA(0)          Get @ CVT\n         L         R6,CVTJESCT-CVTMAP(R5)    Get @ JESCT\n         CLC       8(4,R4),JESPJESN-JESCT(R6) Q. User exec. under PJES\n         BE        RC0                       A. Yes - branch\n         L         R7,0(R3)                  Get 1st parm @\n         L         R8,8(R7)                  Get @ Command Buffer\n         CLC       0(5,R8),=CL5'LOGON'       Q. LOGON command entered\n         BNE       LOGOFF                    A. No - branch\n         TPUT      NOLOGON1,L'NOLOGON1       Issue error msg 1\n         TPUT      NOLOGON2,L'NOLOGON2       Issue error msg 2\n         TPUT      NOLOGON3,L'NOLOGON3       Issue error msg 3\n         L         R9,PSATOLD-PSA(0)         Get @ current TCB\n         IPK       ,                         Save PSW Key\n         SPKA      X'00'                     Into PSW Key 0\n         TGET      TCBUSER-TCB(R9),1         Issue TGET to ensure user\n*                                            user sees message\n         SPKA      0(R2)                     Restore PSW Key\nLOGOFF   DS        0H                        LOGOFF command entered\n         L         R4,PSAAOLD-PSA(0)         Get @ ASCB\n         L         R5,ASCBASXB-ASCB(R4)      Get @ ASXB\n         L         R6,ASXBLWA-ASXB(R5)       Get @ LWA\n         L         R7,LWAJSEL-LWA(R6)        Get @ JSEL\n         L         R8,JSELJSXL-JSEL(R7)      Get @ JSXL\n         CLI       2(R8),36                  Q. Is Job Scheduling\n*                                               error code = 36\n         BNE       JSCODEOK                  A. No - branch\n         IPK       ,                         Save PSW Key\n         SPKA      X'00'                     Into Key 0 to update JSXL\n         MVI       2(R8),0                   Set JSXL code to 0\n         SPKA      0(R2)                     Restore PSW Key\nJSCODEOK DS        0H                        Job scheduling code is ok\n         LA        R15,16                    Set RC 16 to force logoff\n         B         END                       Go to common end\nRC0      DS        0H                        User executed under PJES\n         XR        R15,R15                   Set RC 0 to perform\n*                                            normal processing\nEND      DS        0H                        Common end\n         PR        ,                         Return to caller\n         LTORG     ,                         Assemble literals here\n         END       IKJEFLD2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOADLIB": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x05\\x15\\x0f\\x01\\x05\\x15\\x0f\\x03\\x10\\x00)\\x00)\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-05-30T00:00:00", "modifydate": "2005-05-30T03:10:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT718/FILE718.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT718", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}