{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011951000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE413.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE413.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x0f'", "DS1TRBAL": "b'D\\xcc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xf9\\x00\\x02\\x02\\xf9\\x00\\x07\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x13\\x0f\\x01\\x01\\x13\\x0f\\x14!\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-05-10T00:00:00", "modifydate": "2001-05-10T14:21:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 435    FILE:  413\n\n    ORIGINAL DSNAME:  WSBG.CBT435.FILE413\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    3200    PO\n\n   19 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,078 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/10/01    14:21:26    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$FADHHIS": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\"\\x00*\\x00*\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:22:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "SBGOLOB"}, "text": "FAD-H Software history\n\nFAD-H Software  -  What MVS software should be like\n\nA brief history by Ashley Street - Chief Product Developer/Tea boy\n\nThe name FAD-H is actually an acronym for \"Flogging A Dead Horse\".\nWhilst working on a particularly unfulfilling project many years\nago, with my good friend and erstwhile work colleague Peter\nPhillips, I exclaimed \"doing this is like flogging a dead horse\".\nThe name immediately stuck. Anything written since then, that seemed\nuseful to us and potentially to other people, was labeled as FAD-H\n(pronounced Fad H) software.\n\nMuch of the software you will find here is based on VM/CMS utilities.\nThis is because it was written as part of a VM/CMS to TSO conversion\nproject we were involved in. Being long time VMers, we were\nfrustrated by the TSO/ISPF environment and so began trying to make it\nmore to our liking. Both the PDSFLIST and GLOBALV Rexx functions are\nunashamedly rip off's of FLIST (DTRYLST) and GLOBALV respectively.\nHowever, I did write the code from scratch, it is just they have the\n'look and feel' of their CMS counterparts. The PDSFLIST program\nactually started as a spare time project for me but it ended up\nenabling the development staff to migrate their source code and JCL\netc. to TSO and still manage it as a VM/CMS minidisk structure.\n\nWith the growth of the Internet I felt that a Web site was a good\nvehicle to distribute some of the utilities as freeware.\n\nI have many other utilities and programs/exits that I have written\nover the years, so please E-Mail me, mailto:a.street@btinternet.com\na.street@btinternet.com with any requests. Given a bit more time, I\nhope to increase the freeware available on this site.\n\nThe responsibility of maintaining this Web site, ALL the assembler\ncode and the Rexx exec's distributed from this site is mine. If you\nhave any comments to make or bugs to report, please E-Mail me\nmailto:a.street@btinternet.com\n\nFAD-H software is only a humorous acronym and IS NOT a proper\nsoftware company.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$README": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99)O\\x01\\x01\\x13\\x0f\\t\\x19\\x00*\\x00$\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-10-21T00:00:00", "modifydate": "2001-05-10T09:19:00", "lines": 42, "newlines": 36, "modlines": 0, "user": "ARS"}, "text": "FadH Software - TSO/Rexx utilities library.\n\nThis library contains OBJECT code for various utilties, installation\nJCL and sample execs.\n\nThe software distributed here is free.\nFor advice/help or enhancement requests, please E-Mail me at\na.street@btinternet.com\n\nFor the latest updates and further information please visit my Website.\nURL - http://www.ashleys.btinternet.co.uk/fadh_software.htm\n\n\nTSO/REXX functions\n==================\nPDSFLIST - *THE* alternative to ISPF 3.4 etc.\nGLOBALV  - Rexx Global variable function for TSO\nSVC99DSN - A fast and easy alternative to TSO ALLOC\n\n\nMVS/TSO commands and utilities\n==============================\nTSGQUERY - TSO Query device command\nTSGDEVCK - Device status checker for IPL's\nTSGTSCAN - TSO based TAPE scan function\nDENQ     - TSO based ENQ display program\nWHOSGOT  - TSO based dataset allocation status utility\n\n\nSample EXECS\n============\nFLIST    - Using the PDSFLIST rexx function\nQUERY    - using the TSGQUERY command\nTAPESCAN - Ysing the TSGTSCAN command\n\n\nJCL/HELP files\n==============\nASSREXX  - JCL to assemble/Link-edit Rexx function package (IRXFUSER)\nFLISTHLP - Help file for PDSFLIST rexx function\nIRXFUSER - Source for IRXFUSER\nLKEDJCL  - JCL to link-edit MVS/TSO utilties\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE413": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x99\\x08?\\x01\\x01\\x13\\x0f\\t \\x002\\x00\\x02\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2001-05-10T09:20:00", "lines": 50, "newlines": 2, "modlines": 0, "user": "ARS"}, "text": "//***FILE 413 is from Ashley Street and contains a collection       *   FILE 413\n//*           of TSO and REXX utilities whose flavor is largely     *   FILE 413\n//*           borrowed from VM.  So if you're a former VM'er who    *   FILE 413\n//*           has to work on TSO, this stuff is for you.  It may    *   FILE 413\n//*           even be very useful, if you're not a former VM'er.    *   FILE 413\n//*           Very much worth a try....                             *   FILE 413\n//*                                                                 *   FILE 413\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 413\n//*                                                                 *   FILE 413\n//*     FadH Software - TSO/Rexx utilities library.                 *   FILE 413\n//*                                                                 *   FILE 413\n//*     This library contains OBJECT code for various utilties,     *   FILE 413\n//*     installation JCL and sample execs.                          *   FILE 413\n//*                                                                 *   FILE 413\n//*     For advice/help or enhancement requests, please E-Mail      *   FILE 413\n//*     me at:    a.street@btinternet.com                           *   FILE 413\n//*                                                                 *   FILE 413\n//*     For the latest updates and further information please       *   FILE 413\n//*     visit my Website.                                           *   FILE 413\n//*                                                                 *   FILE 413\n//*     URL: http://www.ashleys.btinternet.co.uk/fadh_software.htm  *   FILE 413\n//*                                                                 *   FILE 413\n//*     TSO/REXX functions                                          *   FILE 413\n//*     ==================                                          *   FILE 413\n//*     PDSFLIST - *THE* alternative to ISPF 3.4 etc.               *   FILE 413\n//*     GLOBALV  - Rexx Global variable function for TSO            *   FILE 413\n//*     SVC99DSN - A fast and easy alternative to TSO ALLOC         *   FILE 413\n//*                                                                 *   FILE 413\n//*     MVS/TSO commands and utilities                              *   FILE 413\n//*     ==============================                              *   FILE 413\n//*     TSGQUERY - TSO Query device command                         *   FILE 413\n//*     TSGDEVCK - Device status checker for IPL's                  *   FILE 413\n//*     TSGTSCAN - TSO based TAPE scan function                     *   FILE 413\n//*     DENQ     - TSO based ENQ display program                    *   FILE 413\n//*     WHOSGOT  - TSO based dataset allocation status utility      *   FILE 413\n//*                                                                 *   FILE 413\n//*     Sample EXECS                                                *   FILE 413\n//*     ============                                                *   FILE 413\n//*     FLIST    - Using the PDSFLIST rexx function                 *   FILE 413\n//*     QUERY    - using the TSGQUERY command                       *   FILE 413\n//*     TAPESCAN - Ysing the TSGTSCAN command                       *   FILE 413\n//*                                                                 *   FILE 413\n//*     JCL/HELP files                                              *   FILE 413\n//*     ==============                                              *   FILE 413\n//*     ASSREXX  - JCL to assemble/Link-edit Rexx function          *   FILE 413\n//*                package (IRXFUSER)                               *   FILE 413\n//*     FLISTHLP - Help file for PDSFLIST rexx function             *   FILE 413\n//*     IRXFUSER - Source for IRXFUSER                              *   FILE 413\n//*     LKEDJCL  - JCL to link-edit MVS/TSO utilties                *   FILE 413\n//*                                                                 *   FILE 413\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASSREXX": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)O\\x00\\x99)O\\x123\\x000\\x000\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-21T00:00:00", "modifydate": "1999-10-21T12:33:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "ARS"}, "text": "The following sample JCL\n\n1) Assembles the IRXFUSER module\n2) Link-edits the module into your target library (usually SYS1.LINKLIB)\n   Note : The SYSLIB dataset should be the object library where the Rexx\n          routines (PDSFLIST, GLOBALV and SVC99DSN) were loaded to.\n\nIf you have made no previous amendments to IRXFUSER you will find the\nthe IBM shipped (dummy) version on SYS1.LINKLIB.\nYou should replace that version with your new version. Your new version\ncould, of course, be on another library within the Linklist (so as to\navoid updating SYS1.LINKLIB). In addition, the PDSFLIST Rexx function\ncan run from a 'Private' library. All its required parameters are in\nthe form of rexx variables, so it can be invoked from a Rexx exec via\nthe CALL TSO command (see the sample FL exec for an example).\nIf you wish to use this method, just linkedit the PDSFLIST module\ndirectly into a library (AMODE 31 RMODE 24).\n\nWhen installing the IRXFUSER module for the first time, ensure that\nyou have loaded ALL THREE text decks (PDSFLIST, GLOBALV and SVC99DSN)\ninto your object library referenced by SYSLIB. Failure to do so will\nresult in Linkage errors.\n\n\n//ASMREXX  EXEC PGM=ASMA90,PARM='DECK,NOOBJ,ALIGN,LINECOUNT(55)'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,DSN=&&SYSUT1,SPACE=(3000,(600,100))\n//SYSUT2   DD UNIT=SYSDA,DSN=&&SYSUT2,SPACE=(3000,(600,100))\n//SYSUT3   DD UNIT=SYSDA,DSN=&&SYSUT3,SPACE=(3000,(600,100))\n//SYSPUNCH DD DSN=&&OBJECT(IRXFUSER),DISP=(NEW,PASS),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),\n//         UNIT=SYSDA,SPACE=(80,(600,100,1))\n//SYSPRINT DD SYSOUT=R\n//SYSIN    DD DSN=YOUR.SOURCE.LIBRARY(IRXFUSER),DISP=SHR\n//*\n//LKED     EXEC PGM=IEWL,\n//         PARM='AMODE=31,RMODE=24,XREF,LIST,LET'\n//SYSUT1   DD UNIT=SYSDA,DSN=&&SYSUT1,SPACE=(1024,(200,20))\n//SYSPRINT DD SYSOUT=R\n//SYSPUNCH DD DSN=&&OBJECT(IRXFUSER),DISP=(OLD,DELETE)\n//SYSLMOD  DD DSN=SYS1.LINKLIB,DISP=SHR          <<<=== TARGET LIBRARY\n//SYSLIB   DD DSN=YOUR.OBJECT.LIBRARY,DISP=SHR   <<<=== OBJECT LIBRARY\n//SYSLIN   DD *\n     INCLUDE SYSPUNCH(IRXFUSER)\n     ENTRY IRXFUSER\n     NAME IRXFUSER(R)\n/*\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DENQ": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x008\\x008\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "ARS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FLIST": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00%\\x00%\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "ARS"}, "text": "/* REXX Flist */\nTrace\narg mems dsn\nif mems='' then ,          /* Might have been invoked from ISPF/Edit */\n   address isredit \"MACRO (mems dsn) PROCESS\"    /* if so grab parms */\nupper mems dsn\n\nif pos(\".\",mems)\u00ac=0 then do       /* parameters round the wrong way? */\n  note=dsn ; dsn=mems ; mems=note                 /* then switch 'em */\nend\n\n if dsn=\"\" then do\n   dsn=mems ; mems=\"*\"\n end\n\nvollist=\"\"\nif pos(\"'\",dsn)\u00ac=0 then do                    /* opt3.4 dsn */\n address ISPEXEC \"VGET (zdlvol)\" ; vollist=zdlvol\nend\n\ndsn=strip(dsn,,\"'\")\n\npdslist=dsn\nmemlist=mems  /* member filter list */\n\n/* Note : The following commented out line shows how to invoke PDSFLIST from */\n/*        a private Library                                                  */\n/* \"CALL 'S00Z99.USER.LOAD(PDSFLIST)'\"  */\n\nhelpdsn=\"ARS.PDSFLIST.HELP\"            /* Help file DSN */\nopclass=\"T\"           /* Output class for Print function*/\n\n/* safcheck=\"Y\" */\n\ncall pdsflist     /* Display desired members from pdslist datasets */\nexit\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FLISTHLP": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x13\\x0f\\x01\\x01\\x13\\x0f\\t\\x17\\x02Y\\x02Y\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-05-10T00:00:00", "modifydate": "2001-05-10T09:17:00", "lines": 601, "newlines": 601, "modlines": 0, "user": "ARS"}, "text": "PDSFLIST :- Rexx Fullscreen PDS list function.   Version 4.3\n==============================================   ===========\nCopyright : FadH Software 1989,1999\n\nFadH Software website\nhttp://www.ashleys.btinternet.co.uk/fadh_software.htm\n\n\nThis Rexx function enables you to display the directories of multiple\nPDS's at the same time.\nMembers within the listed libraries can then be edited, browsed, renamed\ncopied, moved and deleted all from the same screen.\nVarious subcommands are available to modify the order and details of the\nmembers displayed.\nRexx execs, TSO Clists and TSO commands can be executed from the\nPDSFLIST command area.\n\nAs PDSFLIST is a Rexx function it can be invoked from a Rexx exec by\neither :-\n\n1) Call PDSFLIST\nor\n2) rc=pdsflist()\n\n\nPDSFLIST Variables\n------------------\n\nVariable : pdslist\n\nPrior to invoking the function, the exec must set up a variable called\nPDSLIST. This variable is a list of Datasets to be processed. Each\nDataset in this list must be separated by a blank. For example,\nPDSLIST=\"X99999.PRIVATE.JCL X99999.EXEC\" would display members from\nboth those PDS's. There is no limit to the number of datasets that can\nbe included in the list. However, there is a display limit of 50,000\nmembers.\n\nThe dataset requested can be a fully qualified name, a partially qualified\nname, eg SYS1.USER.* or a DDNAME. If a DDNAME is being specified, it must\nbe specified as DD=. For example, DD=ISPPLIB would request a display of\nthe datasets allocated to ISPPLIB. When using the DD= parameter, you can\nalso specify the 'virtual DD' names of APFLIST and LINKLST. This will cause\nthose system lists to be displayed/searched.\n\nIf you specify a dataset starting with a . (dot), your TSO userid will be\nprefixed to the DSN.\n\nIf a requested dataset is uncataloged, the volume it resides on should\nbe indicated by the VOL= parameter,\nie PDSLIST=\"X99999.PRIVATE.CNTL,VOL=TEST01\" (Note : the VOL= parameter can\nbe abbreviated to V=).\n\nAll of the DSN specifications may be specified in the same list, eg\n\npdslist=\"DD=ISPPLIB TSG.SYS1.* TSG.TEST.LINKLIB,V=TEST01\"\n\nIf you wish to display multiple uncataloged DSNs from the same volume,\nyou should use the VOLLIST variable. This indicates the volume on which\nall the requested datasets reside. If this method is used, you do not\nneed the VOL= parameter on each DSN.\n\n\nVariable : memlist\n\nAdditionally, the exec may initialise a 'member search option' variable\ncalled MEMLIST. This contains a search pattern for the members to be\ndisplayed. An example of search patterns and their meaning are listed\nbelow.\n\n Memlist Parameter           Meaning\n -----------------           -------\n        *                    All members\n      ABC                    Member called ABC\n     ABC*                    Members starting with ABC\n    *ABC*                    Members with ABC somewhere within the name\n\n     ++++                    All member names of four bytes\n    +BCD+                    All member names of five bytes with B,C and\n                             D in positions 2,3 and 4 respectively.\n\nNote : To provide compatibility with UNIX, the member search pattern can\nuse a question mark (?) instead of a plus sign.\n\n\nVariable : helpdsn\n\nThis variable should be set to indicate the location of the PDSFLIST help\nfile (used by the PF1 Help function).\n\n\nVariable : opclass\n\nThis variable specified the output class that will be used for Print requests.\n\n\nVariable : dsninfo\n\nThe can be used to invoke the PDSFLIST Dataset Information screen directly.\nIt is useful in execs to display various details about a DSN without going\nthrough the PDSFLIST member list display.\n\nThe following values may be used,\nD - Display the Dataset Information screen\nA - Display the Dataset allocation summary\nV - Display the volume details\nC - Display the Catalog details\n\n\nVariable - safcheck\n\nWhen using the Generic Filtered List (GFL) function (ie requesting a group\nof DSNs by partial qualifier), it is useful to avoid any security allocation\nfailure messages. If you wish a \"pre allocation\" authorisation check to be\nmade, set this variable to Y\n\n\n\nBelow is a sample Exec using PDSFLIST. A similar method is used by   ,\nan exec called 'FL' that provides a generalised tool for invoking this\nREXX function.\n\n/* REXX */\nTrace\n\npdslist=userid()\".PRIVATE.JCL\" , /* word list of datasets to display */\n        userid()\".EXEC\"\nmemlist=\"TEST*\"                  /* Show only members prefixed TEST */\n\n   call pdsflist\n\nexit\n/* End of exec */\n\nBelow is a list of the alternatives when invoking the exec as a TSO\ncommand and the action taken.\n\n    Command Entered         Action\n    ---------------         ------\n    FL                      List all members in userid.PRIVATE.JCL and\n                            userid.EXEC (where userid is your TSO ID)\n\n    FL ABC*                 List all members starting with ABC from\n                            userid.PRIVATE.JCL and userid.EXEC\n\n    FL *ABC*                List all members with the string ABC in them\n                            from userid.PRIVATE.JCL and userid.EXEC\n\n    FL TEST.PDS.EXEC        List all members in TEST.PDS.EXEC\n\n    FL ABC* TEST.PDS.JCL    List all members starting with ABC from\n                            TEST.PDS.JCL\n\n    FL *ABC* TEST.PDS.JCL   List all members with the string ABC in them\n                            from TEST.PDS.JCL\n\n    FL XYZ* .EXEC           List all members starting with XYZ in\n                            Partitioned dataset 'userid.EXEC'.\n\n    FL XYZ* DD=SYSEXEC      List all members starting with XYZ in the\n                            datasets allocated to DDNAME SYSEXEC.\n\n    FL ?                    Display FL command format and examples.\n\n\nPDSFLIST Subcommands\n--------------------\nThe following subcommands are available to help you once you enter\nPDSFLIST.\nIf the command area is not large enough to contain a subcommand and it's\nparameters, use PF11 to extend the command area.\n\n\nSubcommand  : TOP\nFormat      : /T\nDescription : Display the first page of the current PDSFLIST level.\n\n\nSubcommand  : BOTTOM\nFormat      : /B\nDescription : Display the last page of the current PDSFLIST level.\n\n\nSubcommand  : CURRENT\nFormat      : /\nDescription : Display the list of members starting from this entry.\n              i.e Position this member at top of screen.\n\n\nSubcommand  : EDIT\nFormat      : X <member> <dsn>\n              E <member> <dsn>\n              EDIT <member> <dsn>\nDescription : Edit the selected member.\n              It should be noted that the ISPF editor will produce a\n              return code of 4 when no data has been changed during\n              an edit session.\n\n\nSubcommand  : BROWSE\nFormat      : B <member> <dsn>\n              CAT <member> <dsn>\n              MORE <member> <dsn>\n              TYPE <member> <dsn>\nDescription : Browse the selected member.\n\n\nSubcommand  : VIEW\nFormat      : V <member> <dsn>\nDescription : View the selected member.\n\nNotes for EDIT/VIEW/BROWSE : Both the member and dsn parameters are\noptional. By default, the member selected is the one on the line where\nthe subcommand is executed. However, using the member and DSN\nparameters, you can EDIT/VIEW/BROWSE any specific member directly.\nNeither the member or dsn parameters have to be within the currently\ndisplayed list.\nIf you specify a member but omit the dsn, the dsn used will be that\nfrom the entry on the line where the subcommand is executed.\n\n\nSubcommand  : ERASE\nFormat      : ER\n              ERASE\n              DEL\n              KIL\n              KILL\n              RM\nDescription : Delete the selected member.\n              The name of the deleted member will continue to show in\n              the displayed level, however, the line is protected and\n              *Deleted is shown next to the member name.\n\n\nSubcommand  : DELDSN\nFormat      : DELDSN\n              DSNDEL\nDescription : Delete the selected DSN.\n              The DSN which contains the selected member is deleted.\n              Once deleted, all entries for that DSN will show as\n              *DSN deleted*\n\n\nSubcommand  : RENAME\nFormat      : R newmem\n              RE newmem\n              REN newmem\nDescription : Rename the selected member to a new name.\n              The new member name is immediately reflected in the\n              displayed list of members.\n\n\nSubcommand  : COPY\nFormat      : C newmem newdsn\n              COPY newmem newdsn\n              CP newmem newdsn\nDescription : Copy the selected member to the same dataset or another\n              Dataset. The new member name can be specified as an\n              equals sign '='. In this case, the new member name will\n              be the same as the member that is being copied.\n              The copy operation will not replace any like named\n              members. Use the COPYR (replace) subcommand if need be.\n              A copy command with a new member name of '=' and no new\n              dataset name specified will fail. This is because two\n              members with the same name cannot exist within the\n              same PDS.\n              The dataset that the member is being copied to does not\n              have to be currently being displayed via PDSFLIST. If you\n              are copying to an uncataloged DSN you should include the\n              VOL= (or V=) parameter.\n\n\nSubcommand  : COPYR\nFormat      : COPYR newmem newdsn\n              CR newmem newdsn\n              CPR newmem newdsn\n              REPLACE newmem newdsn\nDescription : Copy the selected member to a another dataset. If the\n              member name already exists in the target PDS then it will\n              will be overwritten.\n              The dataset that the member is being copied to does not\n              have to be currently being displayed via PDSFLIST. If you\n              are copying to an uncataloged DSN you should include the\n              VOL= (or V=) parameter.\n\n\nSubcommand  : MOVE\nFormat      : MOVE newmem newdsn\n              M newmem newdsn\n              MV newmem newdsn\nDescription : Moves the selected member to another Dataset.\n              The new member name can be specified as an equals sign '='.\n              In this case, the new member name will be the same as the\n              member that is being moved. The dataset name that the\n              member is being moved to must be specified.\n              The dataset that the member is being moved to does not\n              have to be currently being displayed via PDSFLIST. If you\n              are moving a member to an uncataloged DSN you should\n              include the VOL= (or V=) parameter.\n              Once the member has been moved, it is deleted from the\n              original dataset. The member will only be moved if it\n              does not already exist in the target cataloged dataset.\n              Use the MOVER command if you wish to replace an existing\n              member.\n\n\nSubcommand  : MOVER\nFormat      : MOVER newmem newdsn\n              MR newmem newdsn\n              MVR newmem newdsn\nDescription : Moves the selected member to a another dataset. If the\n              member name already exists in the target PDS then it will\n              will be overwritten.\n              The dataset that the member is being moved to does not\n              have to be currently being displayed via PDSFLIST. If you\n              are moving a member to an uncataloged DSN you should\n              include the VOL= (or V=) parameter.\n\n\nSubcommand  : COMPRESS\nFormat      : Z dsn\n              COMPRESS dsn\nDescription : Compresses the requested PDS. If no target DSN is given,\n              then the PDS of the member selected is compressed.\n\n\nSubcommand  : LOCATE\nFormat      : L member\n              F member\nDescription : Locate the requested member within the list. This member\n              will then be moved to the top of the display.\n              The RFIND PF Key, PF5, can then be used to find subsequent\n              occurrences within the list.\n\n\nSubcommand  : SORT\nFormat      : /SD<all>\n              /SN<all>\n              /SR<all>\nDescription : Sort the members in the order indicated. The subcommands\n              and their meanings are listed below :-\n\n              /SD - Sort by Date     (Most recent file first)\n              /SN - Sort by Name\n              /SR - Sort by Records  (Largest record count first)\n\nBy default, the sort commands will operate within the dataset that the\nsubcommand was issued against. This enables you to sort the members within\na single dataset of a multiple dataset list. However, if you wish to sort\nacross all the displayed DSNs, you should suffix the subcommand with ALL\n\n\nSubcommand  : LEVEL\nFormat      : FL <memlist> <pdslist>\n              /L <memlist> <pdslist>\n              /E <memlist> <pdslist>\n              /EN <memlist> <pdslist>\n              LS <memlist> <pdslist>\n              CD <memlist> <pdslist>\n              DIR <memlist> <pdslist>\n              TREE <memlist> <pdslist>\nDescription : Invoke another level of PDSFLIST with the members from the\n              requested dataset. If the dataset requested is uncataloged\n              you should use the VOL= (or V=) parameter.\n              If no dataset is requested, the dataset(s) currently being\n              displayed is/are used.\n              Examples of the Level subcommand are shown below,\n\n              Subcommand            Action\n              ----------            ------\n              /L * X99999.EXEC      List all members in X99999.EXEC\n              /L X99999.EXEC        List all members in X99999.EXEC\n              /L ABC*               List all members starting with ABC\n                                    from the already displayed Dataset\n                                    list.\n              LS XYZ* >             List all members starting with XYZ\n                                    from the dataset this subcommand was\n                                    entered against.\n              FL *XYZ* .EXEC        List all members with XYZ in their\n                                    name from the dataset userid.exec\n                                    (Note : As the DSN starts with a DOT\n                                     the TSO userid is automatically\n                                     inserted).\n\n\nSubcommand  : INFO\nFormat      : I\n              S\nDescription : Display dataset information regarding the member selected.\n\n\nSubcommand  : OMIT\nFormat      : /O\nDescription : Prevents member information being included in the\n              command being processed. This should be used to Edit a\n              new member within a PDS that is currently empty.\n              For example, /O E NEWMEM would edit a member called NEWMEM\n              within a PDS that has no members in it.\n\n\nSubcommand  : Jump function\nFormat      : =n\nDescription : Jumps to the requested ISPF panel.\n\n\nSubcommand  : Repeat Function\nFormat      : =\nDescription : Repeat the last function issued. This can be useful when\n              wishing to invoke multiple edit, browse or copy functions.\n\n\nSubcommand  : Retrieve function\nFormat      : ?\nDescription : Retrieves the last typed command issued and places it in\n              the command area. PF keys are not retained by this\n              feature.\n\n\nSubcommand  : Quit function\nFormat      : /Q\nDescription : Quits the current level of PDSFLIST.\n\n\nSubcommand  : Cancel function\nFormat      : /C\n              /CANCEL\nDescription : Cancels ALL active levels of PDSFLIST.\n\n\nSubcommand  : Help function\nFormat      : /H\n              /HELP\nDescription : Invokes the Help function.\n\n\nSubcommand  : SDSF\nFormat      : SDSF\nDescription : Invokes TSO SDSF.\n\n\nPF Key functions\n----------------\n\nThe PF Keys for PDSFLIST are set as follows :-\n\n              PF Key        Action\n              ------        ------\n                1           Flip the PF Key display.\n                2           Browse the file to the left of the cursor.\n                3           End current level of PDSFLIST display.\n                4           Edit the file to the left of the cursor.\n                5           Repeat Find of a Located member.\n                6           Sort by name.\n                7           Scroll list backwards.\n                8           Scroll list forwards.\n                9           Sort by Date.\n                10          Switch to Dataset or Member Statistics.\n                11          Increase input area to end of line.\n                12          Refresh the current list.\n                13          Help facility.\n                14          Display list from Top.\n                15          Display list from Bottom.\n                16          Invoke DLIB facility.\n                17          Invoke SUBJOB facility.\n                18          Invoke TSO SDSF.\n                19          Move display to previous DSN.\n                20          Move display to next DSN.\n                21          Print current member list.\n                22          Invoke another level of ISPF/PDF.\n                23          Unused.\n                24          Display version details of PDSFLIST.\n\n\n\nUsage notes\n-----------\n\n1. As this facility is invoked via a Rexx exec, it may be useful to\n   set a PF Key, for example PF24, to TSO. This means that rather\n   than having to prefix all Rexx execs or TSO commands with TSO, you\n   just enter the command name and press the PF Key.\n\n2. Nested executions of PDSFLIST are allowed. Therefore, if you are\n   editing a member from a PDSFLIST display, you can invoke PDSFLIST\n   again from within that Edit session to get further displays.\n   The Level number on the Title line gives an indication of the\n   nested level you are currently displaying.\n\n3. When in nested PDSFLIST displays, PF3 will end the current display\n   and return you to the previous PDSFLIST display level.\n\n4. The 'Type' information is obtained from the Low-Level-Qualifier of\n   the relevant Dataset.\n\n5. Following the execution of a command, the return code it produces is\n   placed in the command area. A return code of zero will result in\n   an asterisk.\n\n6. Flat files are supported and can be browsed and edited. The Fname\n   entry for them is left as blank and the Type entry has DSORG=PS.\n   Other dataset organisations, such as VSAM, BDAM etc. are listed in\n   the same manner (DSORG=VS, DSORG=DA etc.) but you cannot use ISPF\n   functions on them. However, the PDSFLIST information subcommand can\n   be used to obtain dataset details.\n\n7. A PDS that has no members is displayed as a one line entry with the\n   Fname and type left blank. Using either the /O subcommand or the\n   member name parameter of the edit subcommand, new members can be\n   be added to the PDS.\n\n8. The subcommand 'newdsn' (target) dataset can have the HLQ\n   (High Level Qualifier) omitted when it matches your TSO userid.\n   Simply prefix the target dataset with '.' and your userid will\n   be inserted in front.\n   e.g '.TEST.DATA' would be treated as 'userid.TEST.DATA'.\n\n9. Unrecognised PDSFLIST commands are passed to the TSO command search\n   routine, along with a Datasetname(member) parameter list. This\n   allows REXX execs/clists to be invoked from PDSFLIST. The format\n   of the parameter list is compatible with that passed by ISPF from the\n   member list screen. If you wish to execute TSO commands, Rexx execs\n   or TSO Clists and need to pass different parameters, use the /O\n   feature.\n\n10.When displaying uncataloged DSNs, the title line will show\n   'Uncataloged DSN' and the volume on which the dataset resides.\n   If you request to display a dataset as uncataloged from a particular\n   volume but it is in fact cataloged on that volume, it will be\n   treated as a Cataloged dataset. This is especially relevant when a\n   display exec is invoked from the ISPF 3.4 (DSLIST) panel.\n   It is possible to display both cataloged and uncataloged datasets\n   in the same list. This may be useful to compare members in both\n   production and test parmlib files. Due to the high risk of confusion,\n   you should only do this if the dataset names are different ie,\n   PROD.PRODUCT.PARMLIB and TEST.PRODUCT.PARMLIB.\n\n   Specifying an uncataloged dataset is supported via the VOL= (or V=)\n   parameter on :-\n\n   * PDSLIST variable\n   * /L target dsn\n   * COPY and COPYR target dsn\n   * MOVE and MOVER target dsn\n   * EDIT/BROWSE/VIEW target dsn\n\n\n11.If you request to display a single dataset that has been migrated by\n   HSM, it is treated as a cataloged dataset. However, on a generic\n   request, datasets that are migrated will be shown as \"Not recalled\".\n   Dataset ALIAS's are also supported. The dataset name shown on the\n   initial PDSFLIST screen will be the ALIAS name, however, when using\n   option I (to display dataset information), the dataset name will be\n   the actual DSN obtained from the VTOC.\n\n12.The Help facility (PF13) requires the helpdsn variable to be set by\n   an exec using PDSFLIST. Once set by one exec, the value is saved\n   across further PDSFLIST executions, until explicitly overriden by\n   another exec.\n   The helpdsn can be either a flat file or a member of a PDS.\n   Note : When defining the variable, you DO NOT have to enclose the\n   dataset name within quotes.\n\n13.The Sysout class (default is R) for the PF21 Print function, can\n   be changed via the opclass variable. Once set by one exec, the\n   value is saved across further PDSFLIST executions, until explicitly\n   overriden by another exec.\n\n14.The CANCEL function results in ALL active levels of PDSFLIST being\n   cancelled. Nesting may occur as a result of a PDSFLIST subcommand or\n   execution from an invoked ISPF environment, eg ISPF edit.\n   If a nested level was entered from an invoked ISPF environment, the\n   CANCEL will return there. However, once that environment is left, the\n   CANCEL is propagated to any outstanding active levels.\n\n15.Most file manipulation functions have UNIX and PC-DOS command\n   compatibility. For example you can use CP to copy a member or CAT\n   to browse a member. Two notable exceptions are COPY with Replace and\n   MOVE with Replace. In UNIX, the copy and move commands default to\n   replace. To provide a degree of safety in the MVS environment, if\n   you use either CP or MV to replace members, you must use CPR or MVR\n   to indicate replacement.\n\n16. When using the member parameter on EDIT/VIEW/BROWSE, you can\n    specify and equals sign (=). This will cause the member name from\n    from the line you are on, to be the member name.\n\n17. All subcommands can use the > (greater than) character to indicate\n    \"this line DSN\". For example, if you have done a specific member search\n    across multiple datasets but then, wish to display ALL members from\n    one of the datasets in the list, you could use LS >\n\n18. The Generic Filtered List support will only work if the Catalog Search\n    Interface is available. This catalog function is shipped as standard\n    in DFSMS/MVS 1.4 and above. If PDSFLIST finds the CSI support missing,\n    any generic request will be ignored and the dataset will show as\n    \"Not allocated\". Furthermore, the Catalog details display of the\n    dataset information screen is only available with CSI support.\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GLOBALV": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00T\\x00T\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "ARS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "IRXFUSER": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "ARS"}, "text": "IRXFUSER CSECT\n         DC    CL8'IRXFPACK'            String indentifying directory\n         DC    FL4'24'                  Length of header\n         DC    FL4'3'                   Number of rows in directory\n         DC    F'0'                     Word of zeros\n         DC    F'32'                    Length of directory entry\n*\n         DC    CL8'PDSFLIST'            Name used in exec\n         DC    V(PDSFLIST)              Address of preloaded code\n         DC    FL4'0'                   Reserved field\n         DC    CL8'PDSFLIST'            Name of Entry Point\n         DC    CL8'        '            DD from which to load EP\n*\n         DC    CL8'SVC99DSN'            Name used in exec\n         DC    V(SVC99DSN)              Address of preloaded code\n         DC    FL4'0'                   Reserved field\n         DC    CL8'SVC99DSN'            Name of Entry Point\n         DC    CL8'        '            DD from which to load EP\n*\n         DC    CL8'GLOBALV '            Name used in exec\n         DC    V(GLOBALV)               Address of preloaded code\n         DC    FL4'0'                   Reserved field\n         DC    CL8'GLOBALV '            Name of Entry Point\n         DC    CL8'        '            DD from which to load EP\n*\n         END\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LKEDJCL": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "ARS"}, "text": "The following sample JCL should be used to Link-edit the\nutility modules TSGQUERY, TSGTSCAN and TSGDEVCK.\n\n\n//LKED     EXEC PGM=IEWL,\n//         PARM='AMODE=31,RMODE=24,XREF,LIST,LET'\n//SYSUT1   DD UNIT=SYSDA,DSN=&&SYSUT1,SPACE=(1024,(200,20))\n//SYSPRINT DD SYSOUT=R\n//SYSPUNCH DD DSN=YOUR.OBJECT.LIBRARY(MODNAME),DISP=SHR\n//SYSLMOD  DD DSN=YOUR.TARGET.LIBRARY,DISP=SHR\n//SYSLIN   DD *\n     INCLUDE SYSPUNCH(MODNAME)\n     SETCODE AC(1)\n     ENTRY MODNAME\n     NAME MODNAME(R)\n/*\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDSFLIST": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x13\\x0f\\x01\\x01\\x13\\x0f\\x14 \\x02K\\x02K\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-05-10T00:00:00", "modifydate": "2001-05-10T14:20:00", "lines": 587, "newlines": 587, "modlines": 0, "user": "ARS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "QUERY": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "ARS"}, "text": "/* Rexx */\n/* TSO Query device command.                    Ashley - TSG    02/94 */\nTrace\naddress isredit \"MACRO (qryarg) PROCESS\"\nif rc=20 then ,           /* not running as a edit macro */\n   arg qryarg             /* therefore get tso parms     */\n    upper qryarg\n\n if qryarg=\"\" | qryarg=\"?\" then do\n  address TSO \"CLRSCRN\"\n   say \"MVS Query facility. Provides TSO command to query device status\"\n   say \"Format :\"\n   say \" \"\n   say \"Q <device number>\"\n   say \"Q <device number-device number>\"\n   say \"Q <device type>\"\n   say \"Q <device type> <volser>\"\n   say \"Q CHPID <channel path id>\"\n   say \"Q CACHE <device number>\"\n   say \"Q CACHE <device number-device number>\"\n   say \"Q STORG <SMS Storage Group>\"\n   exit\n end\n\n\"TSGQUERY\" qryarg\nexit rc\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SVC99DSN": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00W\\x00W\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "ARS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TAPESCAN": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "ARS"}, "text": "/* Rexx */\nTrace\naddress isredit \"MACRO (devtype volser) PROCESS\"\nif rc=20 then ,           /* not running as a edit macro */\n   arg devtype volser .   /* therefore get tso parms     */\n    upper devtype volser\n\nif devtype=\"\" then devtype=\"3480\"\nif volser=\"\" then volser=\"EXTERN\" ; volser=right(volser,6,\"0\")\n\"TSGTSCAN\" devtype volser\naddress ISPEXEC \"CONTROL DISPLAY REFRESH\"\nexit\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSGDEVCK": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00+\\x00+\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "ARS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSGQUERY": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00\\x94\\x00\\x94\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 148, "newlines": 148, "modlines": 0, "user": "ARS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSGTSCAN": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00\\x82\\x00\\x82\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 130, "newlines": 130, "modlines": 0, "user": "ARS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "WHOSGOT": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99)\\x9f\\x00\\x99)\\x9f\\x11\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc1\\xd9\\xe2@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-10-26T00:00:00", "modifydate": "1999-10-26T11:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "ARS"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT413/FILE413.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT413", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}