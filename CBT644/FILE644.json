{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012522000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE644.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE644.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x03'", "DS1TRBAL": "b'\\xb9\\x8a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x96\\x00\\x05\\x04\\x96\\x00\\x0e\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04@\\x00\\x00\\x01\\x036?\\x01\\x036?\\x08'\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf4@@@\"", "ispf": {"version": "04.64", "flags": 0, "createdate": "2003-12-29T00:00:00", "modifydate": "2003-12-29T08:27:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-464"}, "text": "REGULAR CBT TAPE - VERSION 464    FILE:  644\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT464.FILE644\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 16 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,230 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/29/03    08:27:13    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DEFDOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x002\\x01\\x03&\\x8f\\x01\\x03&\\x8f\\x00\\t\\x00a\\x00a\\x00\\x00\\xc6\\xe4\\xe2\\xc9\\xd6\\xd5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-09-25T00:00:00", "modifydate": "2003-09-25T00:09:32", "lines": 97, "newlines": 97, "modlines": 0, "user": "FUSION"}, "text": "\n     Documentation and Definitions Connected with FUSION\n     ------------- --- ----------- --------- ---- ------\n\nBASE DSN is the data set containing production source.\n\nUPDATED DSN is the data set containing the 3rd party vendor\nsoftware or the data set that holds tested changes.\n\nDESTINATION DSN is the data set that will hold the result of the\nFUSION operation.\n\nMODULE NAME is the name of the module to be updated.   If the\nname of the BASE and UPDATED modules are different then the name\nof the BASE module and TIB module can be specified in MODULE\nNAME, separated by a space.   The DESTINATION module name is then\nreferred to by the BASE module name. An alternate DESTINATION\nname can be specified by adding a 3rd name to the MODULE NAME.\n\nAPPLICATION FUNCTION specifies the type of merge operation to be\nperformed.  Normally, it is MIGRATE.\n\nThere are four migration options available which control how code\nis moved from one program version to another.  They are MIGRATE,\nMOVE, MASSMIG,  and MANSEL.  They are user selected in the\nAPPLICATION FUNCTION field of the main FUSION screen.   See\nfigure\n\nMIGRATE is used when 3rd party vendor software needs to be applied\nto the base system or when a program fix involving concurrent\ndevelopment needs to be moved to production.   When code is\napplied to a module, the code should always be identified by a fix\nnumber in columns 1 through 6 of a Cobol program and the first and\nlast fields of an ASSEMBLER program.  Obsolete code should be\ncommented out and identified with the fix number in columns 1-6 of\nthe Cobol module.  This provides FUSION a reference when updating\nthe Destination.  So, code that is intended to be deleted from the\ncustomer copy is commented out and replaced with the new code.\n\nMOVE will migrate program code without performing associated\ndeletes on obsolete code.   This is a true 'cut and paste'\noperation.  The programmer is responsible for deleting the code.\nThis mode is useful when migrating code to a highly modified\nmember.\n\nMASSMIG will merge all code changes from the old source to the\nnew source.  The function is similar to MOVE except that all code\nfound in the old version will be moved to the new version.  This\nis useful when a customer needs to update their base system to\nthe latest release of the vendor system.  Once again, the user is\nresponsible for performing the associated deletes on obsolete\ncode\n\nMANSEL allows user selected migration of code from one program\nversion to another.  The UPDATED copy is edited in an 82 byte\nformat, allowing the user to select lines of code by entering an\nS in the first column.  This is useful when only a portion of a\nprogram needs to be updated or if the desired code is not\nidentified by a fix number.\n\nThere are 5 PROCESS OPTIONS that control how Fusion handles the\nmerge results.  They are DISPLAY, COMPAREA, COMPAREB, PCOMPAREA,\nand NORMALIZE.  The commands can be entered in PROCESS OPTIONS in\nany order.\n\nDISPLAY - Displays the destination module with the merge results.\nIt is recommended that this feature always be set.\n\nCOMPAREA - Performs a comparison between the updated DESTINATION\nsource and the BASE source and displays the results.   It is\nrecommended that this feature always be set.\n\nCOMPAREB - Performs a comparison between the updated DESTINATION\nsource and the UPDATED source.  The results of the compare are\ndisplayed.  This feature is useful to verify if all selected\nlines of code were merged into the DESTINATION source.  Ideally,\nthe selected lines should not appear in this comparison.\n\nPCOMPAREA - Prints the results of the COMPRA comparison.\n\nNORMALIZE - Normalizes numeric data when attempting to update a\nhighly modified source member.  This helps to prevent merge\nproblems that may occur in Working Storage.  This option should\nnormally not be used.\n\nFUSION automatically determines the language of the program being\nupdated.   The current supported languages are COBOL and ASSEMBLER\nformats.  The ASSEMBLER formats include macro and command level,\nincluding online maps, Genedits and AIDS languages.\n\nFor result integrity, a two level comparison process is performed\nafter a Fusion merge request, if it is requested by the COMPAREA\ncommand.  This compares the DESTINATION, or updated program, to\nthe BASE source program.  This allows inspection of the compare\nprocess to insure that the lines of code were applied correctly.\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE1": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\"\\x7f\\x01\\x03\"\\x8f\"S\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-08-15T00:00:00", "modifydate": "2003-08-16T22:53:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "\n              About the FUSION package\n\nChange management is an important aspect of any Information\nSystem environment, as it is necessary to provide a method of\nmigrating test code to the production system and a method of\napplying 3rd party vendor code to the production system.  Many\ntest systems involve concurrent development, meaning that more\nthan one programmer may have code applied to a test program.\nWhen a programmer needs to apply the code to the production\nsystem, he or she will have to  cut and paste  the code to\nproduction.  The  cut and paste  method can be complicated and\ntime consuming if many lines of code are involved or if many\nmodules need to be updated.  Commercial code migration systems\nare available to assist in migrating code.  But due to cost\nconstraints of purchasing such a system, I developed the FUSION\ncode management system that provides the basis for managing the\nmigration of complicated coding changes.\n\nFUSION takes advantage of the existing components of the MVS\nsystem, mainly REXX/ISPF and the SUPERC comparison utility.\nSUPERC is an accurate comparison tool that summarizes program\ncomparisons in terms of code inserts and deletes.  FUSION,\ntherefore, is a post-processor that utilizes this information to\nrebuild the updated file.  The result is a versatile code\nmigration tool that eliminates much of the time ordinarily spent\ncutting and pasting  code from one module version to another, and\nprovides a two tier comparison routine to allow the programmer to\nverify the results of the compare.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$README": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\x033\\x7f\\x01\\x033\\x7f\\x16V\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc1\\xd7\\xd9\\xc7\\xd1\\xc6\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-12-03T00:00:00", "modifydate": "2003-12-03T16:56:29", "lines": 138, "newlines": 138, "modlines": 0, "user": "APRGJFC"}, "text": "Installation Guide\n\nFUSION is available on the CBT tape.  It is file 644 and can be\nreferenced with the following URL:\nftp://ftp.cbttape.org/pub/cbt/CBT644.zip\nOnce the Zip file is downloaded, unzip it to a known PC directory.  To\nupload the XMI file to the mainframe, first use =6 on the TSO command\nline to go to the TSO Command Shell screen.  Then select the ACTIONS tab\nof the session and select SEND FILE TO HOST.   This is assuming that you\nare using a Windows 3270 emulator.   Other emulators may differ from the\none used in my environment.  Enter the PC FILE name that holds the\nunzipped XMI file, such as\n\\\\wbmpfil01\\data$\\jfcaugh\\download\\cbt644.xmi.  This was the data set\nused when I downloaded file 644.   Click on ADD TO LIST to add the\nrequest to the transfer list.\n\nUnder OPTIONS, select the MVS/TSO tab.  Select TRANSFER TYPE as Binary,\nRECORD FORMAT as Fixed, and enter 80 as LOGICAL RECORD LENGTH. This\nformat is needed to unload an XMI file.  Enter 1 for primary cylinder\nallocation and 1 for secondary cylinder allocation.   Click on SAVE to\nsave the new binary protocol.   Click on OK to return to the transfer\npanel.   Click on SEND to start the transfer.  This creates a TSO data\nset that uses your TSO account id as the high level qualifier followed\nby CBT644.XMIBIN.  In my case, it is APRGJFC.CBT644.XMIBIN.   Next use\nthe TSO RECEIVE command to create the FUSION files.  The command is as\nfollows:\nRECEIVE INDS('dataset') where 'dataset' is the name of the sequential\nfile, such as RECEIVE INDS('APRGJFC.CBT644.XMIBIN').   This will create\npartitioned data set named APRGJFC.CBT462.FILE644.PDS.   The high level\nqualifier depends on the TSO account id.  If there is any question about\nthe data set name, check it when running the RECEIVE command.   It\nappears in a text screen as 'Dataset CBT.CBT462.FILE644.PDS from CSSJK\non JES2MVS'.  The CBT qualifier will be replaced with your TSO account\nid.  The installation JCL is called $PDSLOAD.  Edit the JCL.   Change\nthe account information to your shop standards.   Change all occurrences\nof USERID to your primary TSO user account id.  USERID will be in lower\ncase.  Your account id must be in upper case.   This affects the SYSUT1\nallocations.  Be sure that the PDS name follows the one created when the\nRECEIVE command was run.  The SYSUT2 file allocations begin with FUSION.\nIt is important to have RACF allow the allocation to occur.  If other\nnames must be used, then be sure that the LIBDEF references in the CNTL\nfile are changed, too.  Also, change the REGDSN line in the Fusion exec\nto point to the data set name used for the CNTL file.  This should\nreflect the SYSUT2 name used in $PDSLOAD for CNTL.  The allocation for\nthe SYSEXEC needs to follow the shop standard for the installation of\nREXX Execs.  Change the SYSUT2 to point to the library where the Execs\nreside.   If this is not possible due to restrictions, then utilize the\nfollowing TSO command.  It can be stored as a PF key command:\nALTLIB ACTIVATE APPLICATION(CLIST) DATASET ('FUSION.SYSEXEC')\nModify FUSION.SYSEXEC to the alternative SYSEXEC if it was modified.\nType TSO FUSION to start the utility.\n\nUser Guide\nBASE DSN is the data set containing production source.\nUPDATED DSN is the data set containing the third-party vendor software\nor the data set that holds tested changes.\nDESTINATION DSN is the data set that will hold the result of the FUSION\noperation.\nMODULE NAME is the name of the module to be updated.   If the name of\nthe BASE and UPDATED modules are different, then the name of the BASE\nmodule and UPDATED module can be specified in MODULE NAME, separated by\na space.   The DESTINATION module name is then referred to by the BASE\nmodule name. An alternate DESTINATION name can be specified by adding a\nthird name to the MODULE NAME.\nAPPLICATION FUNCTION specifies the type of merge operation to be\nperformed.  Normally, it is MIGRATE.  There are four migration options\navailable which control how code is moved from one program version to\nanother.  They are MIGRATE, MOVE, MASSMIG and MANSEL.  They are user\nselected in the APPLICATION FUNCTION field of the main FUSION screen.\n\nMIGRATE is used when third-party vendor software needs to be applied to\nthe base system or when a program fix involving concurrent development\nneeds to be moved to production.   When code is applied to a module, the\ncode should always be identified by a fix identifier in columns 1-6 of a\nCOBOL program and the first and last fields of an Assembler program.\nObsolete code should be commented out and identified with the fix\nidentifier in columns 1-6 of the COBOL module.  This provides FUSION a\nreference when updating the DESTINATION.\nMOVE will migrate program code without performing associated deletes on\nobsolete code.   This is a true 'cut and paste' operation.  The\nprogrammer is responsible for deleting the code.    This mode is useful\nwhen migrating code to a highly modified member.\nMASSMIG will merge all code changes from the old source to the new\nsource.  The function is similar to MOVE, except that all code found in\nthe old version will be moved to the new version.  This is useful when a\ncustomer needs to update their base system to the latest release of the\nvendor system.  Once again, the user is responsible for performing the\nassociated deletes on obsolete code.\n\nMANSEL allows user-selected migration of code from one program version\nto another.  The UPDATED copy is edited in an 82-byte format, allowing\nthe user to select lines of code by entering an S in the first column.\nThis is useful when only a portion of a program needs to be updated or\nif the desired code is not identified by a fix identifier.\nThere are 5 PROCESS OPTIONS that control how FUSION handles the merge\nresults.  They are DISPLAY, COMPAREA, COMPAREB, PCOMPAREA, and\nNORMALIZE. The commands can be entered in PROCESS OPTIONS in any order.\nDISPLAY--Displays the DESTINATION module with the merge results.  It is\nrecommended that this feature always be set.\n\nCOMPAREA--Performs a comparison between the updated DESTINATION source\nand the BASE source and displays the results.   It is recommended that\nthis feature always be set.\nCOMPAREB--Performs a comparison between the updated DESTINATION source\nand the UPDATED source.  The results of the compare are displayed.\nThis feature is useful to verify if all selected lines of code were\nmerged into the DESTINATION source.  Ideally, the selected lines should\nnot appear in this comparison.\nPCOMPAREA--Prints the results of the COMPAREA comparison.\nNORMALIZE--Normalizes numeric data when attempting to update a highly\nmodified source member.  This helps to prevent merge problems that may\noccur in Working Storage.  This option should normally not be used.\n\nFUSION automatically determines the language of the program being\nupdated.   The current supported languages are COBOL and Assembler\nformats.  The Assembler formats include macro and command level,\nincluding online maps.\nFor result integrity, a two-level comparison process is performed after\na FUSION merge request, if it is requested by the COMPAREA command.\nThis compares the DESTINATION, or updated program, to the BASE source\nprogram.  This allows inspection of the compare process to ensure that\nthe lines of code were applied correctly.\nConsidering that program updates are identified by a fix identifier in\ncolumns 1-6 of a COBOL program and the rightmost field of an Assembler\nprogram, FUSION can selectively migrate code by this identifier.  If the\nnumber is inaccurate or missing then FUSION will not be able to apply\nthat line of code.  The MANSEL option will allow the programmer to\nmanually select the desired lines of code if the documentation is\ninaccurate or missing.  The effectiveness of FUSION depends in a large\npart on the accuracy of the documentation of the changes.  Since FUSION\nis not a code analyzer, it is up to the programmer to resolve conflicts\nand collisions.  But, there is a high probability that the code will be\nmerged correctly.  The comparison between the production and DESTINATION\nversion of the module allows the programmer to verify the merge results.\nAnother consideration is with code dependencies.  Before applying a\nprogram fix, it is necessary to determine if there are other program\nfixes that it is dependent on.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$ART": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x034\\x0f\\x01\\x034\\x0f\\x19U\\x013\\x013\\x00\\x00\\xc3\\xc1\\xe4\\xc7\\xc8\\xd4\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-12-06T00:00:00", "modifydate": "2003-12-06T19:55:00", "lines": 307, "newlines": 307, "modlines": 0, "user": "CAUGHMN"}, "text": "Managing Code Changes\nBy Joseph Caughman\n\nFUSION Overview\n\nChange management is an important aspect of any Information System\nenvironment, as it is necessary to provide a method of migrating test\ncode to the production system and a method of applying third-party\nvendor code to the production system.  Many test systems involve\nconcurrent development, meaning that more than one programmer may have\ncode applied to a test program.  When a programmer needs to apply the\ncode to the production system, he or she will have to 'cut and paste'\nthe code to production.  The 'cut and paste' method can be complicated\nand time-consuming if many lines of code are involved or if many modules\nneed to be updated.  Commercial code migration systems are available to\nassist in migrating code.   But due to cost constraints of purchasing\nsuch a system, I developed the FUSION code management system that\nprovides the basis for managing the migration of complicated coding\nchanges.\n\nFUSION takes advantage of the existing components of the MVS system,\nmainly REXX/ISPF and the SUPERC comparison utility.  SUPERC is an\naccurate comparison tool that summarizes program comparisons in terms of\ncode inserts and deletes.  FUSION, therefore, is a post-processor that\nutilizes this information to rebuild the updated file.  The result is a\nversatile code migration tool that eliminates much of the time\nordinarily spent 'cutting and pasting' code fro m one module version to\nanother, and provides a two-tier comparison routine to allow the\nprogrammer to verify the results of the compare.\n\n\nHow It Works\n\nFUSION initiates a comparison between the UPDATED copy and the BASE copy\nof a program.  UPDATED is the copy with the coding changes, and BASE is\nthe unmodified copy.   For COBOL programs, it is assumed that new lines\nof code are identified with a fix identifier in columns 1-6.  It is also\nassumed that deleted, or obsolete, lines are commented out with the fix\nidentifier in columns 1-6.  The merge results will be placed in the\nDESTINATION library.  The compare is performed using the UPDLDEL option\nof SUPERC, which provides a SUPERC update file that lists the inserts,\ndeletions and replacements.  The resulting list file contains all of the\ninformation needed to rebuild the BASE copy with the selected updates\nfro m the UPDATED copy.  Based on the program logic, FUSION looks for\nany inserts, deletes or replacements that correspond to the fix\nidentifier of the code to be moved.  The inserts and replacements are\norganized into code blocks, with each block marked accordingly.  FUSION\nbuffers each code block into the main stem variable called OUTREC.\nLines of code that are not different between UPDATED and BASE are stored\nin the first level of the stem variable.  This includes lines that are\nmarked as old replacement.  The structure of OUTREC is as follows.\nThere are three stem levels used in OUTREC.  The first level is numeric\nand holds the corresponding Match, absolute Insert and absolute Delete\nlines.  Only absolute insert lines that have the fix identifier will be\ninserted.  All absolute delete lines are reinserted in the first level.\nInsert Replace, or I-RP, lines are inserted into the second stem level,\nwhich uses a numeric stem.  The Delete Replace, or D-RP, lines are\nsequentially compressed and matched against the inserted lines in the\nsecond-level stem.  These lines are also compressed.  If an exact match\noccurs, the I-RP line is discarded.  If no match occurs, that line is\nreinsert ed into the third-level stem at the same relative offset in the\nsecond-level stem where the mismatch occurred.   See figure 1.\n\nThe unspool process will read the following sequence:  OUTREC.1,\nOUTREC.2, OUTREC.2.1, OUTREC.2.2, OUTREC.2.2.1 , OUTREC.3.\n\nThere are six control commands that are generated by the SUPERC process\nthat are of interest to the FUSION process.  They are  I-, for Insert,\nD-, for Delete, M-, for Merge, I-RP, for Insert Replace, D-RP,  for\nDelete Replace, and D-RF, for Delete Reformat.   The commands are\nfollowed by the corresponding text that relates to the function.\n\nTo elaborate on the SUPERC comparis on process and the FUSION stem\nstructure, consider the compare sample below.   The control lines have\nbeen truncated for this illustration to make it easier to understand.\nThe SI, or fix number, of interest is WB8485.   The lines that are\nmarked with M- indicate a match between the new and old source.  In\nother words, these lines are similar between the two source members.\nThese lines are stored in the first stem level of OUTREC.  The line that\nis marked with I- is stored in the first stem level of OUTREC.  If the\nSI number was not equal to WB8485, then the line would be discarded.\nThis allows only the desired lines to be inserted into the rebuilt file.\nThe lines that are marked with I-RP show lines that were inserted into\nthe updated copy.  The corresponding D-RP shows the line that was\ndeleted from the updated copy.  The inserted lines are stored in the\nsecond-level stem of OUTREC.  The lines are stored whether or not they\ncontain the desi red fix identifier.  If a line contains the fix\nidentifier, then that line is marked as active in the stem variable.\nThe block variable is also set to active.  For the deleted, or D-RP,\nlines, each line is compressed and compared to each compressed line on\nthe insert stem.  The compression process omits the fix identifier part\nof the line, as it is not part of the desired comparison process.  The\ndeleted, D-RP, line below found an exact match for the insert block.\nSo, the deleted line is discarded.  If a match was not found for the\ndeleted line, it will be reinserted into the stem variable on the level\nthree stem.   If no active line was found in the I-RP block, then the\nblock is discarded and the subsequent D-RP block is written to the first\nlevel stem of OUTREC.  All D-, or absolute deletes, are always\nreinserted into the main stem of OUTREC.\n\nAny inserts are stored in the second stem level of OUTREC.  See\nfigure 2.\n\nFor this example, let us assume that the stem starts at 1.  So, the\nstem variable looks like that shown in figure 3.\n\nAfter the stem variable has been built for the updated program, the last\nstep is to 'unspool' the variable into a single-level stem variable,\nsuitable for the EXECIO write function.  This unspooling process scans\nthe first level of the variable and any underlying second and third\nlevel stems.  Any second-level stem that is marked as active is spooled\nout to the output variable.\n\n\nScreen Interface Overview\n\nBASE DSN is the data set containing production source.\n\nUPDATED DSN is the data set containing the third-party vendor software\nor the data set that holds tested changes.\n\nDESTINATION DSN is the data set that will hold the result of the FUSION\noperation.\n\nMODULE NAME is the name of the module to be updated.  If the name of the\nBASE and UPDATED modules are different, then the name of the BASE module\nand UPDATED module can be specified in MODULE NAME, separated by a\nspace.  The DESTINATION module name is then referred to by the BASE\nmodule name.  An alternate DESTINATION name can be specified by adding a\nthird name to the MODULE NAME.\n\nAPPLICATION FUNCTION specifies the type of merge operation to be\nperformed.  Normally, it is MIGRATE.  There are four migration options\navailable which control how code is moved from one program version to\nanother.  They are MIGRATE, MOVE, MASSMIG and MANSEL.  They are user\nselected in the APPLICATION FUNCTION field of the main FUSION screen.\nSee figure 4.\n\nMIGRATE is used when third-party vendor software needs to be applied to\nthe base system or when a program fix involving concurrent development\nneeds to be moved to production.   When code is applied to a module, the\ncode should always be identified by a fix identifier in columns 1-6 of a\nCOBOL program and the first and last fields of an Assembler program.\nObsolete code should be commented out and identified with the fix\nidentifier in columns 1-6 of the COBOL module.  This provides FUSION a\nreference when updating the DESTINATION.\n\nMOVE will migrate program code without performing associated deletes on\nobsolete code.  This is a true 'cut and paste' operation.  The\nprogrammer is responsible for deleting the code.  This mode is useful\nwhen migrating code to a highly modified member.\n\nMASSMIG will merge all code changes from the old source to the new\nsource.  The function is similar to MOVE, except that all code found in\nthe old version will be moved to the new version.  This is useful when\na customer needs to update their base system to the latest release of\nthe vendor system.  Once again, the user is responsible for performing\nthe associated deletes on obsolete code.\n\nMANSEL allows user-selected migration of code from one program version\nto another.  The UPDATED copy is edited in an 82-byte format, allowing\nthe user to select lines of code by entering an S in the first column.\nThis is useful when only a portion of a program needs to be updated or\nif the desired code is not identified by a fix identifier.\n\nThere are 5 PROCESS OPTIONS that control how FUSION handles the merge\nresults.  They are DISPLAY, COMPAREA, COMPAREB, PCOMPAREA, and\nNORMALIZE. The commands can be entered in PROCESS OPTIONS in any order.\n\nDISPLAY--Displays the DESTINATION module with the merge results.  It is\nrecommended that this feature always be set.\n\nCOMPAREA--Performs a comparison between the updated DESTINATION source\nand the BASE source and displays the results.   It is recommended that\nthis feature always be set.\n\nCOMPAREB--Performs a comparison between the updated DESTINATION source\nand the UPDATED source.  The results of the compare are displayed.  This\nfeature is useful to verify if all selected lines of code were merged\ninto the DESTINATION source.  Ideally, the selected lines should not\nappear in this comparison.\n\nPCOMPAREA--Prints the results of the COMPAREA comparison.\n\nNORMALIZE--Normalizes numeric data when at tempting to update a highly\nmodified source member.  This helps to prevent merge problems that may\noccur in Working Storage.  This option should normally not be used.\n\nFUSION automatically determines the language of the program being\nupdated.  The current supported languages are COBOL and Assembler\nformats.  The Assembler formats include macro and command level,\nincluding online maps.\n\nFor result integrity, a two-level comparison process is performed after\na FUSION merge request, if it is requested by the COMPAREA command.\nThis compares the DESTINATION, or updated program, to the BASE source\nprogram.  This allows inspection of the compare process to ensure that\nthe lines of code were applied correctly.\n\n\nTechnical Considerations\n\nConsidering that program updates are identified by a fix identifier in\ncolumns 1-6 of a COBOL program and the rightmost field of an Assembler\nprogram, FUSION can selectively migrate code by this identifier.  If the\nnumber is inaccurate or missing then FUSION will not be able to apply\nthat line of code.  The MANSEL option will allow the programmer to\nmanually select the desired lines of code if the documentation is\ninaccurate or missing.  The effectiveness of FUSION depends in a large\npart on the accuracy of the documentation of the changes.  Since FUSION\nis not a code analyzer, it is up to the programmer to resolve conflicts\nand collisions.  But, there is a high probability that the code will be\nmerged correctly.  The comparison between the production and DESTINATION\nversion of the module allows the programmer to verify the merge results.\nAnother consideration is with code dependencies.  Before applying a\nprogram fix, it is necessary to determine if there are other program\nfixes that it is dependent on.\n\n\nInstallation Guide\n\nFUSION is available on the CBT tape.  It is file 644 and can be\nreferenced with the following URL:\n\nftp://ftp.cbttape.org/pub/cbt/CBT644.zip\n\nOnce the Zip file is downloaded, unzip it to a known PC directory.  To\nupload the XMI file to the mainframe, first use =6 on the TSO command\nline to go to the TSO Command Shell screen.  Then select the ACTIONS tab\nof the session and select SEND FILE TO HOST.   This is assuming that you\nare using a Windows 3270 emulator.  Other emulators may differ from\nthe one used in my environment.  Enter the PC FILE name that holds the\nunzipped XMI file, such as\n\n\\\\wbmpfil01\\data$\\jfcaugh\\download\\cbt644.xmi.\n\nThis was the data set used when I downloaded file 644.  Click on ADD TO\nLIST to add the request to the transfer list.  Under OPTIONS, select\nthe MVS/TSO tab.  Select TRANSFER TYPE as Binary, RECORD FORMAT as\nFixed, and enter 80 as LOGICAL RECORD LENGTH.  This format is needed to\nunload an XMI file.  Enter 1 for primary cylinder allocation and 1 for\nsecondary cylinder allocation.  Click on SAVE to save the new binary\nprotocol.  Click on OK to return to the transfer panel.  Click on SEND\nto start the transfer.  This creates a TSO data set that uses your TSO\naccount id as the high level qualifier followed by CBT644.XMIBIN.  For\nexample, it is MYUSRID.CBT644.XMIBIN .\n\nNext use the TSO RECEIVE command to create the FUSION files.  The\ncommand is as follows:  RECEIVE INDS('dataset') where 'dataset' is the\nname of the sequential file, such as:\nRECEIVE INDS('MYUSRID.CBT644.XMIBIN').   This will create a partitioned\ndata set named MYUSRID.CBT462.FILE644.PDS.   The high level qualifier\ndepends on the TSO account id.  If there is any question about the data\nset name, check it when running the RECEIVE command.  It appears in a\ntext screen as 'Data set CBT.CBT462.FILE644.PDS from CSSJK on JES2MVS'.\nThe CBT qualifier will be replaced with your TSO account id.  The\ninstallation JCL is called $PDSLOAD.  Edit the JCL.  Change the account\ninformation to your shop standards.  Change all occurrences of USERID to\nyour primary TSO user account id.  USERID will be in lower case.  Your\naccount id must be in upper case.  The SYSUT2 file allocations begin\nwith FUSION.  It is important to have RACF allow the allocation to\noccur.  If other names must be used, then be sure that the LIBDEF\nreferences in the CNTL file are changed, too.  Also, change the REGDSN\nline in the Fusion exec to point to the data set name used for the CNTL\nfile.  This should reflect the SYSUT2 name used in $PDSLOAD for CNTL.\nThe allocation for the SYSEXEC needs to follow the shop standard for the\ninstallation of REXX Execs.  Change the SYSUT2 to point to the library\nwhere the Execs reside.  If this is not possible due to restrictions,\nthen utilize the following TSO command.  It can be stored as a PF key\ncommand:\n\nALTLIB ACTIVATE APPLICATION(CLIST) DATASET ('FUSION.SYSEXEC')\n\nModify FUSION.SYSEXEC to the alternative SYSEXEC if it was modified.\n\nType TSO FUSION to start the utility.\n\n\nSummary\n\nFUSION was developed over a period of eight years.  It has evolved from\nits initial form as a series of Eztrieve jobs to its current form as a\nREXX/ISPF application.  I developed the tool as an aid to assist me and\nmy fellow associates with the task of applying new code releases to our\nvendor-supplied and in-house written programs.  The tool is a\nrecognized production tool at West Bend Mutual and provides the change\nmanagement capability needed to manage our code changes on the\nmainframe system.  A series of other tools that interact with FUSION\ncomprise the actual change management system.\n\nFusion will perform with a high degree of accuracy.  However, it is\nimportant to compare the result file with the base file to avoid\npotential file corruption.  As with any application, use Fusion at your\nown risk and discretion.  Neither the author nor West Bend Mutual\nInsurance Company assumes any liability from the use of Fusion.\n\nJoseph Caughman is an applications program with 16 years experience\nworking with COBOL and Assembler on the MVS (now OS/390) system.  This\nalso includes CLIST, REXX and ISPF applications.  A graduate of the\nUniversity of South Carolina, he spent the first five years of his\ncareer with Policy Management Systems Corporation (PMSC), a major\nproducer of insurance applications software.  He currently works for\nthe West Bend Mutual Insurance Company, in West Bend, WI. He can be\ncontacted via e-mail at jcaughman@wbmi.com or jcaughman@charter.net.\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$MSWORD": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x033_\\x01\\x033_\\x15I\\x02m\\x02m\\x00\\x00\\xd4\\xe2\\xe6\\xd6\\xd9\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-12-01T00:00:00", "modifydate": "2003-12-01T15:49:00", "lines": 621, "newlines": 621, "modlines": 0, "user": "MSWORD"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "$PDSLOAD": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00A\\x01\\x01\\x15\\x7f\\x01\\x036\\x0f\\x19U\\x00M\\x00\\x1b\\x00\\x00\\xc1\\xd7\\xd9\\xc7\\xd1\\xc6\\xc3@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2003-12-26T19:55:41", "lines": 77, "newlines": 27, "modlines": 0, "user": "APRGJFC"}, "text": "//APRGJFCB  JOB 'PDSLOAD',\n// CLASS=F,MSGCLASS=X\n//*\n//*   PDSLOAD COMES FROM FILE 093 OF THE CBT TAPE COLLECTION\n//*\n//*   YOU CAN USE IEBUPDTE INSTEAD OF PDSLOAD, BUT YOU LOSE THE\n//*   EMBEDDED ISPF STATISTICS.\n//*\n//*   THE PDSLOAD LOAD MODULE IS INCLUDED IN XMIT FORMAT.\n//*   TO GET THE LOAD LIBRARY CONTAINING IT, ISSUE (UNDER TSO):\n//*\n//*   TSO RECEIVE INDS(&SYSUID..CBT462.FILE644.PDS(PDSLOAD))\n//*\n//*\n//* installation notes\n//* change APRGJFC to your tso account id. verify that the sysut1\n//* cards are using the right cbt cut number.  It was CBT462 when\n//* this job was transmitted.  it may change when sam cuts a new\n//* cbt tape.\n//*\n//* It is suggested to use the SYSUT2 cards as designed.  if you\n//* cannot allocate the dsn's due to racf restrictions, then change\n//* them to the names that follow your shop standard.  If they are\n//* modified then you must modify the cards found in the CNTL file\n//* to their new libdef names.  The CNTL file will be created when\n//* you submit this jcl.  Also, the FUSION exec file will have to be\n//* modified to change the REGDSN card to point to the new CNTL\n//* dsn.  Once again, the fusion file will be created when you submit\n//* this jcl.\n//*\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n RECEIVE INDS('APRGJFC.CBT462.FILE644.PDS(PDSLOAD)')\n DSN('APRGJFC.LOAD')\n/*\n//*\n//CNTL     EXEC  PGM=PDSLOAD,PARM='UPDTE(><)',COND=EVEN\n//STEPLIB  DD  DISP=SHR,DSN=&SYSUID..LOAD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=&SYSUID..CBT462.FILE644.PDS(CNTL),DISP=SHR\n//SYSUT2   DD  DSN=FUSION.CNTL,DISP=(NEW,CATLG,DELETE),\n//         SPACE=(TRK,(5,15,44),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=8880)\n//*\n//ISPMLIB  EXEC  PGM=PDSLOAD,PARM='UPDTE(><)',COND=EVEN\n//STEPLIB  DD  DISP=SHR,DSN=&SYSUID..LOAD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=&SYSUID..CBT462.FILE644.PDS(ISPMLIB),DISP=SHR\n//SYSUT2   DD  DSN=FUSION.ISPMLIB,DISP=(NEW,CATLG,DELETE),\n//         SPACE=(TRK,(5,15,44),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=8880)\n//*\n//ISPPLIB  EXEC  PGM=PDSLOAD,PARM='UPDTE(><)',COND=EVEN\n//STEPLIB  DD  DISP=SHR,DSN=&SYSUID..LOAD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=&SYSUID..CBT462.FILE644.PDS(ISPPLIB),DISP=SHR\n//SYSUT2   DD  DSN=FUSION.ISPPLIB,DISP=(NEW,CATLG,DELETE),\n//         SPACE=(TRK,(15,15,44),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=8880)\n//*\n//ISPSLIB  EXEC  PGM=PDSLOAD,PARM='UPDTE(><)',COND=EVEN\n//STEPLIB  DD  DISP=SHR,DSN=&SYSUID..LOAD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=&SYSUID..CBT462.FILE644.PDS(ISPSLIB),DISP=SHR\n//SYSUT2   DD  DSN=FUSION.ISPSLIB,DISP=(NEW,CATLG,DELETE),\n//         SPACE=(TRK,(5,15,44),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=8880)\n//*\n//SYSEXEC EXEC   PGM=PDSLOAD,PARM='UPDTE(><)',COND=EVEN\n//STEPLIB  DD  DISP=SHR,DSN=&SYSUID..LOAD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=&SYSUID..CBT462.FILE644.PDS(SYSEXEC),DISP=SHR\n//SYSUT2   DD  DSN=FUSION.SYSEXEC,DISP=(NEW,CATLG,DELETE),\n//         SPACE=(TRK,(15,15,44),RLSE),\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=8880)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE644": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04@\\x00\\x00\\x01\\x036?\\x01\\x036?\\x08'\\x00\\n\\x00\\n\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf4@@@\"", "ispf": {"version": "04.64", "flags": 0, "createdate": "2003-12-29T00:00:00", "modifydate": "2003-12-29T08:27:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "CBT-464"}, "text": "//***FILE 644 is from Joseph Caughman and contains his FUSION       *   FILE 644\n//*           package to aid in change management for application   *   FILE 644\n//*           and systems source code in both Assembler and COBOL.  *   FILE 644\n//*           FUSION harnesses the power of SUPERC to mark the      *   FILE 644\n//*           differences between several versions of source code.  *   FILE 644\n//*           For more information, see member $$NOTE1 in this pds, *   FILE 644\n//*           and also member $$DEFDOC and member $ART.             *   FILE 644\n//*                                                                 *   FILE 644\n//*           email:  \"Caughman, Joe\" <JCaughman@WBMI.com>          *   FILE 644\n//*                                                                 *   FILE 644\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CNTL": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x004\\x01\\x03\"?\\x01\\x033\\x9f\\x10\\x14\\x00\\x08\\x00\\x07\\x00\\x00\\xc1\\xd7\\xd9\\xc7\\xd1\\xc6\\xc3@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-08-11T00:00:00", "modifydate": "2003-12-05T10:14:34", "lines": 8, "newlines": 7, "modlines": 0, "user": "APRGJFC"}, "text": "./ ADD NAME=FUSNCONF 0100-03223-03223-0032-00006-00006-00000-FUSION\n /*                  INSTALLATION NOTE                           */\n /*IF THE LIBDEFS SPECIFIED IN $PDSLOAD WERE MODIFIED THEN THE   */\n /*LIBDEFS SPECIFIED HERE WILL HAVE TO MATCH THE ONES IN $PDSLOAD*/\n\nISPMLIB = 'FUSION.ISPMLIB'\nISPPLIB = 'FUSION.ISPPLIB'\nISPSLIB = 'FUSION.ISPSLIB'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INSTALL": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x14\\x01\\x03\"\\x0f\\x01\\x03\"?\\x00(\\x03\\xcd\\x03\\xcd\\x00\\x17\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-08-08T00:00:00", "modifydate": "2003-08-11T00:28:14", "lines": 973, "newlines": 973, "modlines": 23, "user": "SBGOLOB"}, "text": "//SBGOLOBA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* THIS STEP CREATES THE FUSION CONTROL LIBRARY WHICH RESOLVES\n//* LIBRARY DEFINITIONS.  IF YOU MODIFY THE SYSUT2 DEFINITIONS OF\n//* THESE LIBDEFS, THEN YOU MUST MODIFY THESE NAMES TO RESOLVE THE NEW\n//* DSN'S.  YOU CAN MODIFY THEM HERE OR LATER WHEN THE CNTL LIBRARY\n//* HAS BEEN CREATED.\n//*\n//* IF YOU MODIFY THE FOLLOWING SYSUT2 DSN TO ANOTHER NAME THEN YOU\n//* MUST ALSO MODIFY THE REGDSN NAME IN THE MAIN FUSION EXEC.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.CNTL,DISP=(NEW,CATLG,DELETE),\n//SYSUT2   DD DSN=SBGOLOB.FUSION.CNTL,DISP=(NEW,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,1)),UNIT=SYSALLDA,VOL=SER=DATA01\n//SYSIN    DD DATA\n./ ADD NAME=FUSNCONF,LIST=ALL\n /*ISPMLIB = 'WRK1.PACK.FUSION.ISPMLIB'*/\n /*ISPPLIB = 'WRK1.PACK.FUSION.PLIB' */\n /*ISPSLIB = 'WRK1.PACK.FUSION.SKELS'*/\nISPMLIB = 'SBGOLOB.FUSION.ISPMLIB'\nISPPLIB = 'SBGOLOB.FUSION.PLIB'\nISPSLIB = 'SBGOLOB.FUSION.SKELS'\n./ ENDUP\n/*\n//SBGOLOBA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* THIS STEP INSTALLS THE FUSION EXEC INTO THE PDS SPECIFIED BY THE\n//* SYSUT2 DSN.  YOU SHOULD MODIFY THE NAME TO THE ONE USED FOR\n//* SYSEXEC'S IN YOUR ENVIRONMENT.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.SYSEXEC,DISP=(NEW,CATLG,DELETE),\n//SYSUT2   DD DSN=SBGOLOB.FUSION.SYSEXEC,DISP=(NEW,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,1)),UNIT=SYSALLDA,VOL=SER=DATA01\n//SYSIN    DD DATA\n./ ADD NAME=FUSION,LIST=ALL\n /*REXX*/\nCALL FUSIONSTART\nRETURN\n\nFUSIONSTART: PROCEDURE\nSTATUS = MSG('OFF')\n\"FREE DD (OUTDD, NEWDD, OLDDD, DELDD)\"\nPROCLIST = 'DISPLAY COMPAREA COMPAREB PCOMPAREA DELCOM'\nREGDSN = 'WRK1.FUSION.CNTL'\nCALL CONFIGURATION\nTIBAPPX = ''\nTIBAPPY = ''\nZTITLE = 'FUSION USER SELECT SCREEN'\nCURPOS = 'PROGNAME'\nUSER = USERID()\nTIBPROG = ''\nENDKEY = 0\nRC = 0\nSP = '                                                               '\nMSGPOS = ''\nPCOMPAREA = 0\n\"ISPEXEC LIBDEF ISPMLIB DATASET ID('\"ISPMLIB\"') STACK\"\n\"ISPEXEC LIBDEF ISPPLIB DATASET ID('\"ISPPLIB\"') STACK\"\n\"ISPEXEC LIBDEF ISPSLIB DATASET ID('\"ISPSLIB\"') STACK\"\n\"ISPEXEC VGET (PROCOPT) profile\"\n\"ISPEXEC VGET (BASEDSN) profile\"\n\"ISPEXEC VGET (TIBDSN) profile\"\n\"ISPEXEC VGET (DESTDSN) profile\"\n\"ISPEXEC VGET (APPFUNC) profile\"\nIF pos(appfunc, 'MIGRATE MOVE MANSEL MASSMIG') = 0 THEN\n   APPFUNC = 'MIGRATE'\nCALL FLEX_SCREEN\nCALL PANEL_CONTROL\nDO WHILE \\ ENDKEY\n   ZEDLMSG = ''\n   GLOBAL_ERROR = ' '\n   CALL VERIFY\n   CALL LANGUAGE_TYPE\n   IF GLOBAL_ERROR = '' & \\ ENDKEY THEN do\n      IF APPFUNC = 'MANSEL' THEN DO\n         CALL MANUAL_SELECT\n         HOLDTIB = TIBDSN\n         TIBDSN = \"\"USER\".TEMP80\"\n         HOLDPROG = TIBPROG\n         TIBPROG = 'TEMPFILE'\n         \"FREE DD(NEWDD)\"\n         \"ALLOCATE DD(NEWDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n         END\n      CALL INITIATEC\n      CALL ALERT FUSIO013\n      IF POS('DISPLAY', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC EDIT DATASET,\n         ('\"DESTDSN\"(\"DESTPROG\")')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      IF POS('COMPAREA', PROCOPT) > 0 THEN DO\n         CALL ALERT FUSIO014\n         CALL COMPAREA\n         IF POS('PCOMPAREA', PROCOPT) > 0 THEN\n            CALL PRINTCOMP\n         END\n      IF POS('COMPAREB', PROCOPT) > 0 THEN DO\n         CALL ALERT FUSIO016\n         CALL COMPAREB\n         END\n      IF POS('COMPAREA', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC BROWSE DATASET ('\"USER\".SUPERC.LISTA')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      IF POS('COMPAREB', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC BROWSE DATASET,\n         ('\"USER\".SUPERC.LISTB')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      END\n   \"FREE DD (REPDD, NEWDD, OLDDD, OUTDD, DELDD)\"\n   IF APPFUNC = 'MANSEL' THEN DO\n      TIBDSN = HOLDTIB\n      TIBPROG = HOLDPROG\n      END\n   CALL PANEL_CONTROLA\n   END\n\"ISPEXEC VPUT (PROCOPT) profile\"\n\"ISPEXEC VPUT (BASEDSN) profile\"\n\"ISPEXEC VPUT (TIBDSN) profile\"\n\"ISPEXEC VPUT (DESTDSN) profile\"\n\"ISPEXEC VPUT (APPFUNC) profile\"\n\"ISPEXEC LIBDEF ISPMLIB\"\n\"ISPEXEC LIBDEF ISPPLIB\"\n\"ISPEXEC LIBDEF ISPSLIB\"\nRETURN\n\nFLEX_SCREEN:\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\nTFUNC = '                  FUSION - Module Version Integration System'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = 'Quick Help - Use PF7 and PF8 to navigate.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o BASE DSN - Dataset that has production source.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o UPDATED DSN - Dataset that has updated source such as'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   vendor fixes or programmer test code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o DESTINATION DSN - Dataset that will contain the FUSION'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   program merges.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o MODULE NAME - Name of the module to be updated.  If the'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   BASE module name is different from the UPDATED module name,'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   enter the BASE name followed by the TIB name.  The '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   DESTINATION name will be the BASE name. '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o APPLICATION FUNCTION - Valid functions include '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MANSEL - Allows manual selection of lines to migrate.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MASSMIG - Moves company modified code to base code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MIGRATE - Moves user selected code to base code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MOVE - Moves user selected code to base without ',\n        'performing associated deletes.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o PROCESS OPTIONS - Valid functions include '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC =  '     DISPLAY, COMPAREA, COMPAREAB, PCOMPAREA, and DELCOM'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o Enter one or more SI numbers to be migrated on the '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   2 available free format entry lines.'\n\"ISPEXEC TBADD EZLIST\"\n\"ISPEXEC TBTOP EZLIST\"\nRETURN\n\nMANUAL_SELECT:\nDROP TIBFILE.\nDROP OUT80.\nLOWVALUE = ' '\n\"ALLOCATE DD(MANSCAN) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n\"ALLOCATE DD(ALLOCDD) DSN('\"USER\".TEMP82') SPACE (9 9) CYLINDERS,\n   DSORG(PO) DIR(5) LRECL(82) BLKSIZE(3280) RECFM(F,B) MOD REUSE\"\n  \"FREE DD(ALLOCDD)\"\n\"ALLOCATE DD(ALLOCDD) DSN('\"USER\".TEMP80') SPACE (5 5) CYLINDERS,\n   DSORG(PO) DIR(5) LRECL(80) BLKSIZE(3200) RECFM(F,B) MOD REUSE\"\n  \"FREE DD(ALLOCDD)\"\n\"ALLOCATE DD(OUTSCAN) DSN('\"USER\".TEMP82(TEMPFILE)') SHR\"\n\"EXECIO * DISKR MANSCAN (STEM TIBFILE. FINIS\"\nDO MM = 1 TO TIBFILE.0\n   OUTFILE.MM = ' ' || LOWVALUE || TIBFILE.MM\n   END\n\"EXECIO * DISKW OUTSCAN (STEM OUTFILE. FINIS\"\n\"ISPEXEC CONTROL DISPLAY SAVE\"\nZSHADOW = '$$$$$$$$$$$$$$$$  '\n\"ISPEXEC EDIT DATASET,\n   ('\"USER\".TEMP82(TEMPFILE)')\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nDROP OUTFILE.\n\"EXECIO * DISKR OUTSCAN (STEM OUTFILE. FINIS\"\n\"FREE DD(OUTSCAN)\"\n\"ALLOCATE DD(OUTSCAN) DSN('\"USER\".TEMP80(TEMPFILE)') SHR\"\nDO MM = 1 TO TIBFILE.0\n   OUTLINE = SUBSTR(OUTFILE.MM,3,72)\n   IF SUBSTR(OUTFILE.MM,1,1) = 'S' THEN\n      OUTLINE = OVERLAY('EZSEL   ',OUTLINE,73,8)\n   OUT80.MM = OUTLINE\n   END\n\"EXECIO * DISKW OUTSCAN (STEM OUT80. FINIS\"\n\"FREE DD(OUTSCAN)\"\n\"FREE DD(MANSCAN)\"\nRETURN\n\nVERIFY:\nIF WORDS(PROGNAME) = 1 THEN DO\n   BASEPROG = PROGNAME\n   TIBPROG = PROGNAME\n   DESTPROG = PROGNAME\n   END\nELSE\n   IF WORDS(PROGNAME) = 2 THEN DO\n      BASEPROG = WORD(PROGNAME,1)\n      TIBPROG = WORD(PROGNAME,2)\n      DESTPROG = BASEPROG\n      END\n   ELSE\n      IF WORDS(PROGNAME) = 3 THEN DO\n         BASEPROG = WORD(PROGNAME,1)\n         TIBPROG = WORD(PROGNAME,2)\n         DESTPROG = WORD(PROGNAME,3)\n         END\nTIBLINE = TIBAPPX || ' ' || TIBAPPY\nMAXSI = WORDS(TIBLINE)\nIF XRC = 8,\n& GLOBAL_ERROR = ' ' THEN DO\n   ENDKEY = 1\n   RETURN\n   END\nDO SI = 1 TO MAXSI\n   IF LENGTH(WORD(TIBLINE,SI)) > 6 THEN DO\n     \"ISPEXEC SETMSG MSG(FUSIO009)\"\n      GLOBAL_ERROR = 'A'\n      LEAVE\n      END\n   END\nIF SYSDSN(\"'\"BASEDSN\"'\") <> \"OK\" THEN DO\n   \"ISPEXEC SETMSG MSG(FUSIO002)\"\n   GLOBAL_ERROR = 'A'\n   END\nELSE\n   IF SYSDSN(\"'\"TIBDSN\"'\") <> \"OK\" THEN DO\n      \"ISPEXEC SETMSG MSG(FUSIO003)\"\n      GLOBAL_ERROR = 'A'\n      END\n   ELSE\n      IF SYSDSN(\"'\"DESTDSN\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO004)\"\n         GLOBAL_ERROR = 'A'\n         END\n\nIF GLOBAL_ERROR = ' ' THEN DO\n   IF TIBPROG <> '' THEN DO\n      CHECK_MOD = \"\"BASEDSN\"(\"BASEPROG\")\"\n      IF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO005)\"\n         GLOBAL_ERROR = 'A'\n         END\n      ELSE NOP\n      CHECK_MOD = \"\"TIBDSN\"(\"TIBPROG\")\"\n      IF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO006)\"\n         GLOBAL_ERROR = 'A'\n         END\n      ELSE NOP\n      END\n   ELSE DO\n      \"ISPEXEC SETMSG MSG(FUSIO007)\"\n      GLOBAL_ERROR = 'A'\n      END\n   END\n\nIF APPFUNC \\ = '' THEN\n   IF POS(APPFUNC, 'MASSMIG MIGRATE MOVE MANSEL') = 0 THEN DO\n      \"ISPEXEC SETMSG MSG(FUSIO028)\"\n      GLOBAL_ERROR = 'A'\n      END\n\nIF PROCOPT \\ = '' THEN\n   DO KK = 1 TO WORDS(PROCOPT)\n      IF POS(WORD(PROCOPT,KK), PROCLIST) = 0 THEN DO\n         \"ISPEXEC SETMSG MSG(FUSIO029)\"\n         GLOBAL_ERROR = 'A'\n         END\n      END\n\nIF GLOBAL_ERROR = ' ' THEN DO\n   \"ALLOCATE DD(REPDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n   \"ALLOCATE DD(NEWDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n   \"ALLOCATE DD(OLDDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR\"\n   END\nRETURN\n\nINITIATEC:\nACTIVE_REPLACE = 0\nACTIVE = 'ACTIVE'\nCHGFILE. = ''\nOUTFILE. = ''\nDROP OUTREC.\nCALL ALERT FUSIO021\nCALL COMPAREI\nCALL ALERT FUSIO022\n\"EXECIO * DISKR DELDD (STEM CHGFILE. FINIS\"\nCNT = CHGFILE.0\nDO SI = 1 TO MAXSI\n   SINUM.SI = WORD(TIBLINE,SI)\n   END\nCALL ALERT FUSIO023\nOUTCOUNT = 1\nSPACES = '                                                            '\nDO II = 3 TO CNT\n   CHGFILE = CHGFILE.II\n   HIT_FIND = ''\n   IF substr(CHGFILE,1,1) = '*',\n   & pos('N-REF#', chgfile) > 0 then do\n      select\n         when substr(chgfile,2,4) = 'D-RF' then DO\n            ffunction = 'DELETE'\n            END\n         when substr(chgfile,2,4) = 'I-  ' then do\n            ffunction = 'INSERT'\n            active_replace = 0\n            end\n         when substr(chgfile,2,4) = 'I-RP' then DO\n            ffunction = 'INSERT-REPLACE'\n            IP = 1\n            j1 = 1\n            active_replace = 0\n            END\n         when substr(chgfile,2,4) = 'M-  ' then\n            ffunction = 'MERGE'\n         when substr(chgfile,2,4) = 'D-  ' then\n            ffunction = 'DELETE'\n         when substr(chgfile,2,4) = 'D-RP' then DO\n            if active_replace then\n               ffunction = 'DELETE-REPLACE'\n            else\n               ffunction = 'DELETE'\n            IP = 1\n            j1 = 1\n            END\n         otherwise ffunction = 'NONE'\n         end\n      end\n   else DO\n      select\n         when ffunction = 'INSERT' THEN\n            IF APPFUNC = 'MANSEL' THEN\n               IF SINUMP(SUBSTR(CHGFILE,1,77)) THEN DO\n                  OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n                  outcount = outcount + 1\n                  end\n               else nop\n            ELSE\n               IF SINUMP(SUBSTR(CHGFILE,1,72)) THEN do\n                  OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n                  outcount = outcount + 1\n                  end\n         when ffunction = 'INSERT-REPLACE' THEN do\n            IF APPFUNC = 'MANSEL' THEN\n               IF SINUMP(SUBSTR(CHGFILE,1,77)) THEN DO\n                  ACTIVE_REPLACE = 1\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '1'\n                  END\n               ELSE\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '0'\n            ELSE\n               IF SINUMP(SUBSTR(CHGFILE,1,72)) THEN DO\n                  ACTIVE_REPLACE = 1\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '1'\n                  END\n               else\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '0'\n               OUTREC.OUTCOUNT.ip = SUBSTR(CHGFILE,1,72)\n               LASTINSERT = IP\n               ip = ip + 1\n               END\n         when ffunction = 'DELETE-REPLACE' THEN\n            call delete_process\n         when ffunction = 'DELETE' THEN do\n            OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n            outcount = outcount + 1\n            end\n         when ffunction = 'MERGE' THEN DO\n            OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n            OUTCOUNT = OUTCOUNT + 1\n            END\n         otherwise nop\n         end\n      end\n   end\nCALL ALERT FUSIO024\nCALL ALERT FUSIO025\nCALL UNSPOOL\n\"EXECIO * DISKW REPDD (STEM OUTFILE. FINIS\"\nRETURN\n\nunspool:\nI1 = 1\nDO I = 1 TO OUTCOUNT - 1\n   X = 1\n   DO while SUBSTR(OUTREC.I.X,1,6) \\ = 'OUTREC'\n      ACTIVE_LINE = OUTREC.I.X.ACTIVE\n      IF ACTIVE_LINE <> '1' THEN ACTIVE_LINE = 0\n      IF ACTIVE_LINE THEN DO\n         OUTFILE.I1 = OUTREC.I.X\n         I1 = I1 + 1\n         CALL DEL_STEM\n         END\n      else\n         CALL DEL_STEM\n      X = X + 1\n      END\n      OUTFILE.I1 = OUTREC.I\n      I1 = I1 + 1\n   END\nRETURN\n\ndel_stem:\nLASTa = OUTREC.I.X.1\nIF DATATYPE(LASTa) <> 'NUM' THEN LASTa = 1\nDO LL = 2 TO LASTa\n   OUTFILE.I1 = OUTREC.I.X.LL\n   I1 = I1 + 1\n   END\nreturn\n\ndelete_process:\nIF ACTIVE_REPLACE,\n&  APPFUNC \\ = 'MOVE' THEN do\n   NR = SUBSTR(CHGFILE,7,72)\n   NR = PROCESS_LISTA(NR)\n   OCOMMENT = COMMENT\n   IF SUBSTR(CHGFILE,8,64) = '' THEN NOP\n   ELSE DO\n      HOLDPENDING = J1\n      FOUNDINSERT = 0\n      DO J1 = HOLDPENDING TO LASTINSERT\n         NEWREC = OUTREC.OUTCOUNT.J1\n         ACTIVE_LINE = OUTREC.OUTCOUNT.J1.ACTIVE\n         IF ACTIVE_LINE <> '1' THEN ACTIVE_LINE = 0\n         COMPREC = PROCESS_LISTA(NEWREC)\n         NCOMMENT = COMMENT\n         IF FOUND_LINE(),\n         & ((NCOMMENT & \\ OCOMMENT),\n         | (NCOMMENT & OCOMMENT)) THEN DO\n            FOUNDINSERT = 1\n            LEAVE\n            END\n         ELSE\n            IF FOUND_LINE() THEN DO\n               HIT_FIND = 'PROBABLE'\n               FOUNDINSERT = 1\n               END\n         END\n      IF FOUNDINSERT THEN\n         IF HIT_FIND = 'EXACT' THEN NOP\n         ELSE\n            IF HIT_FIND = 'PROBABLE' THEN\n               IF POS('DELCOM',PROCOPT) > 0 THEN NOP\n               ELSE\n                  CALL PROCESS_INSERT\n            ELSE nop\n      ELSE DO\n         J1 = LASTINSERT\n         HIT_FIND = 'ABSOLUTE'\n         CALL PROCESS_INSERT\n         J1 = HOLDPENDING\n         END\n      END\n   END\nELSE DO\n   J1 = 1\n   CALL PROCESS_INSERT\n   END\nreturn\n\nPROCESS_INSERT:\nHJ1 = J1\nIF TIBTYPE = 'COBOL' THEN CSTART = 7\nELSE CSTART = 1\nLAST = OUTREC.OUTCOUNT.J1.1\nIF DATATYPE(LAST) <> 'NUM' THEN LAST = 2\nELSE LAST = LAST + 1\nOUTREC.OUTCOUNT.J1.1 = LAST\nOUTREC.OUTCOUNT.J1.LAST = SUBSTR(CHGFILE,1,72)\nJ1 = HJ1\nRETURN\n\nFOUND_LINE:\nFOUND = 0\nhIT_FIND = ''\nIF pos(nr, COMPREC) > 0,\n& nr <> '',\n&  ACTIVE_LINE then do\n   INDEX_D = pos(nr, COMPREC)\n   ABBREV_LINE = SUBSTR(COMPREC,INDEX_D,LENGTH(NR))\n   IF ABBREV_LINE = NR THEN FOUND = 1\n   HIT_FIND = 'EXACT'\n   END\nRETURN FOUND\n\nPROCESS_LISTA:\nARG NEWREC\nCOMMENT = 0\nIF TIBTYPE = 'COBOL' THEN\n   COMPREC = SUBSTR(NEWREC,7,66)\nELSE\n   COMPREC = SUBSTR(NEWREC,1,72)\nIF SUBSTR(COMPREC,1,1) = '*' THEN DO\n   COMMENT = 1\n   COMPREC = COMPRESS(COMPREC)\n   END\nELSE\n   COMPREC = COMPRESS(COMPREC)\nCOMPREC = STRIP(COMPREC,'B')\nRETURN COMPREC\n\nSINUMP:\nARG REC\nFOUND = 0\nINITIAL = 0\nIF APPFUNC = 'MASSMIG' THEN DO\n   FOUND = 1\n   RETURN FOUND\n   END\nIF APPFUNC <> 'MANSEL' THEN\n   IF TIBTYPE = 'COBOL' THEN DO\n      DO I = 1 TO MAXSI\n         IF pos(sinum.i, SUBSTR(REC,1,12)) > 0 THEN DO\n            FOUND = 1\n            LEAVE\n            END\n         END\n      IF \\ FOUND & ACTIVE_REPLACE & REC = '' THEN FOUND = 1\n      END\n   ELSE\n      DO I = 1 TO MAXSI\n         IF pos(SINUM.I, rec) > 0 THEN DO\n            FOUND = 1\n            LEAVE\n            END\n         END\nELSE\n   IF SUBSTR(REC,73,5) = 'EZSEL' THEN FOUND = 1\nRETURN FOUND\n\nCOMPAREI:\nDELETE \"'\"USER\".SUPERC.UPDATE'\"\nDELETE \"'\"USER\".SUPERC.LIST'\"\n\"ALLOCATE DD(DELDD) DSN('\"USER\".SUPERC.UPDATE') SPACE (5000 1000)\",\n          \"BLKSIZE(1600) RECFM(V,B) MOD\"\nINFILE. = ''\nCHANGE_FILE. = ''\nCHECK_MOD = USER || '.EZTOOLS.CNTL' || '(' || 'SYSIN' || ')'\nIF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN\n   CALL SYSIN_CARD\n\"ALLOCATE DD(OUTDD) DUMMY\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(LONGL LINECMP \",\n                  \"UPDLDEL,,' ')\"\n\"FREE DD(SYSIN)\"\nRETURN\n\nCOMPAREA:\nDELETE \"'\"USER\".SUPERC.LISTA'\"\n\"FREE DD (OUTDD, NEWDD, OLDDD, DELDD)\"\n\"ALLOCATE DD(NEWDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n\"ALLOCATE DD(OLDDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR\"\n\"ALLOCATE DD(OUTDD) DSN('\"USER\".SUPERC.LISTA') SPACE (900 900),\n    BLKSIZE(3325) MOD RECFM(F,B) LRECL(133) MOD REUSE\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(CHNGL,LINECMP)\"\n\"FREE DD (SYSIN)\"\nRETURN\n\nCOMPAREB:\nADDRESS TSO\nDELETE \"'\"USER\".SUPERC.LISTB'\"\n\"FREE DD (OUTDD, DELDD, SYSIN, NEWDD, OLDDD)\"\n\"ALLOCATE DD(NEWDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n\"ALLOCATE DD(OLDDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n\"ALLOCATE DD(OUTDD) DSN('\"USER\".SUPERC.LISTB') SPACE (900 90),\n          BLKSIZE(1600) MOD\"\n\"ALLOCATE DD(DELDD) DUMMY\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(DELTAL,CHNGL,LINECMP)\"\nRETURN\n\nCOMPRESS: PROCEDURE\nARG REC, OPTION\nNR = ''\nREC = TRANSLATE(REC,' ','().')\nNWORD = WORDS(REC)\nSTART = 1\nDO NREP = START TO NWORD\n   IF WORD(REC,NREP) = 'F' THEN NR = NR || 'FILLER'\n   ELSE\n      NR = NR || WORD(REC,NREP)\n   END\nRETURN NR\n\nALERT:\nARG SHOWMSG\n\"ISPEXEC SETMSG MSG(\"SHOWMSG\")\"\n\"ISPEXEC CONTROL DISPLAY LOCK\"\nCALL MESSAGE\n\"ISPEXEC TBADD EZLIST\"\n\"ISPEXEC TBTOP EZLIST\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nRETURN\n\nMESSAGE:\nTFUNC = ''\nIF ZEDLMSG <> '' THEN TFUNC = ZEDLMSG\nELSE\n   SELECT\n      WHEN SHOWMSG = 'FUSIO013' THEN\n         TFUNC = ' o EDITING FILE'\n      WHEN SHOWMSG = 'FUSIO014' THEN\n         TFUNC = ' o INITIATING COMPARISON A'\n      WHEN SHOWMSG = 'FUSIO016' THEN\n         TFUNC = ' o INITIATING COMPARISON B'\n      WHEN SHOWMSG = 'FUSIO021' THEN\n         TFUNC = ' o FUSION COMPARE'\n      WHEN SHOWMSG = 'FUSIO022' THEN\n         TFUNC = ' o READING DIFFERENCES FILE'\n      WHEN SHOWMSG = 'FUSIO023' THEN\n         TFUNC = ' o COMPARISON ANALYSIS'\n      WHEN SHOWMSG = 'FUSIO024' THEN\n         TFUNC = ' o MERGING RESULTS'\n      WHEN SHOWMSG = 'FUSIO025' THEN\n         TFUNC = ' o REWRITING FILE'\n      OTHERWISE NOP\n      END\nRETURN\n\nINDICATOR:\n\"ISPEXEC SETMSG MSG(\"SHOWMSG\")\"\n\"ISPEXEC CONTROL DISPLAY LOCK\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nRETURN\n\nPRINTCOMP:\nUSERDSN = \"\"USER\".SUPERC.LISTA\"\nCALL PRINTPAGE\nRETURN\n\nSYSIN_CARD:\n\"ALLOCATE DD(JOB6) DSN('\"USER\".EZTOOLS.CNTL(\"SYSIN\")') SHR REUSE\"\nL. = \"\"\nL.1 = \"CMPCOLMN 1:72\"\nL.2 = \"CMPCOLMO 1:72\"\nL.3 = \"\"\n\"EXECIO * DISKW \"JOB6\" (STEM L. FINIS\"\n\"FREE DD(JOB6)\"\nRETURN\n\nPRINTPAGE: PROCEDURE EXPOSE USER\nARG TNARR\nUSERX = USER || 'X'\n\"ISPEXEC VGET ZTEMPF\"\n\"ISPEXEC FTOPEN TEMP\"\n\"ISPEXEC FTINCL F2PRINT\"\n\"ISPEXEC FTCLOSE\"\n\"SUBMIT '\"ZTEMPF\"'\"\nRETURN\n\nPANEL_CONTROL:\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nXRC = RC\nIF RC = 8 THEN ENDKEY = 1\n\"ISPEXEC TBCLOSE EZLIST\"\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\nRETURN\n\nPANEL_CONTROLA:\n\"ISPEXEC TBCLOSE EZLIST\"\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nXRC = RC\nIF RC = 8 THEN ENDKEY = 1\nRETURN\n\nCONFIGURATION:\nIF SYSDSN(\"'\"REGDSN\"(FUSNCONf)'\") \\ = 'OK' THEN DO\n   SAY 'CONFIGURATION NOT NOT FOUND'\n   RETURN\n   END\n\"ALLOCATE DD(SYSDD) DSN('\"REGDSN\"(FUSNCONf)') SHR REUSE\"\n\"EXECIO * DISKR SYSDD (STEM CONFIGURE. FINIS\"\n\"FREE DD(SYSDD)\"\nDO RR = 1 TO CONFIGURE.0\n   INTERPRET \"\"CONFIGURE.RR\"\"\n   END\nRETURN\n\nLANGUAGE_TYPE:\nIF GLOBAL_ERROR = '' & \\ ENDKEY THEN DO\n   CALL ALERT FUSIO012\n   \"ALLOCATE DD(TYPEDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR REUSE\"\n   EOF = 0\n   \"EXECIO 1 DISKR TYPEDD (FIFO\"\n   IF RC = 2 THEN EOF = 1\n   ELSE PULL VER_RECORD\n   TYPE_VERIFIED = 0\n   DO WHILE \\ (TYPE_VERIFIED | EOF)\n      IF SUBSTR(VER_RECORD,7,1) <> '*',\n      &  SUBSTR(VER_RECORD,1,1) <> '*' THEN\n         IF (INDEX(VER_RECORD,'IDENTIFICATION') > 0,\n         &  INDEX(VER_RECORD,'DIVISION') > 0),\n         |  INDEX(VER_RECORD,' PIC ') > 0,\n         |  INDEX(VER_RECORD,'MOVE') > 0,\n         |  INDEX(VER_RECORD,'PERFORM') > 0,\n         |  INDEX(VER_RECORD,'REDEFINES') > 0 THEN DO\n            TIBTYPE = 'COBOL'\n            TYPE_VERIFIED = 1\n            END\n         ELSE\n            IF INDEX(VER_RECORD,'DFHMDF') > 0 THEN DO\n               TIBTYPE = 'MAPS'\n               TYPE_VERIFIED = 1\n               END\n            ELSE\n               IF WORDPOS('PROC',VER_RECORD) > 0,\n               |  INDEX(VER_RECORD,'MSGCLASS') > 0 THEN DO\n                  TIBTYPE = 'JCL'\n                  TYPE_VERIFIED = 1\n                  END\n               ELSE\n                  IF INDEX(VER_RECORD,'CSECT') > 0,\n                  |  INDEX(VER_RECORD,'DSECT') > 0,\n                  |  INDEX(VER_RECORD,'PMSREGS') > 0,\n                  |  INDEX(VER_RECORD,'NOGEN') > 0,\n                  |  INDEX(VER_RECORD,'ORG') > 0 THEN DO\n                     TIBTYPE = 'ASSEMBLER'\n                     TYPE_VERIFIED = 1\n                     END\n                  ELSE\n                     IF INDEX(VER_RECORD,'GENIF') > 0,\n                     |  (INDEX(VER_RECORD,'HERE') > 0,\n                     &  INDEX(VER_RECORD,'CALLED') > 0) THEN DO\n                        TIBTYPE = 'GENEDIT'\n                        TYPE_VERIFIED = 1\n                        END\n                     ELSE\n                        IF INDEX(VER_RECORD,'AIDS') > 0 THEN DO\n                           TIBTYPE = 'AIDS'\n                           TYPE_VERIFIED = 1\n                           END\n         \"EXECIO 1 DISKR TYPEDD (FIFO\"\n         IF RC = 2 THEN EOF = 1\n         ELSE PULL VER_RECORD\n         END\n      IF \\ TYPE_VERIFIED THEN TIBTYPE = 'UNKNOWN'\n      \"EXECIO 0 DISKR TYPEDD (FIFO FINIS\"\n      \"FREE DD(TYPEDD)\"\n      ZEDLMSG = \"DETECTED \"TIBTYPE\" LANGUAGE\"\n      CALL ALERT FUSIO010\n      ZEDLMSG = ''\n      END\nRETURN\n./ ENDUP\n/*\n//SBGOLOBA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* MODIFY THE SYSUT2 DSN TO THE ONE USED FOR ISPF PANELS IN YOUR\n//* ENVIRONMENT.\n//*\n//* IF RACF WILL ALLOW YOU TO ALLOCATE THE DEFAULT SYSUT2 DSN, THEN\n//* IT IS RECOMMENDED THAT YOU KEEP THE DEFAULT VALUE.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.ISPPLIB,DISP=(NEW,CATLG,DELETE),\n//SYSUT2   DD DSN=SBGOLOB.FUSION.ISPPLIB,DISP=(NEW,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,5)),UNIT=SYSALLDA,VOL=SER=DATA01\n//SYSIN    DD DATA\n./ ADD NAME=FUSIONP,LIST=ALL\n)ATTR\n#  TYPE(TEXT) INTENS(LOW) COLOR(BLUE) SKIP(ON)\n%  TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n\\  TYPE(TEXT) INTENS(HIGH) COLOR(RED)\n@  TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n(  TYPE(TEXT) INTENS(HIGH) COLOR(TURQUOISE)\n$  TYPE(INPUT) INTENS(HIGH) COLOR(GREEN)\n)  TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n_  TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) HILITE(USCORE)\n+  TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(BLUE)\n!  TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(RED)\n)BODY EXPAND(//) LMSG(MSGPOS)\n+COMMAND%===!>$ZCMD\n%\n! / / \\F%U S I O N / /\n+\n+BASE DSN%=============!>_BASEDSN                      #\n+UPDATED DSN%==========!>_TIBDSN                       #\n+DESTINATION DSN%======!>_DESTDSN                      #\n+MODULE NAME%==========!>_PROGNAME                     #\n+APPLICATION FUNCTION%=!>_APPFUNC                      #\n+PROCESS OPTIONS%======!>_PROCOPT\n+SYSTEM INQUIRY LIST%==!>_TIBAPPX\n_TIBAPPY\n@DIAG                          # @MSGPOS#\n)MODEL\n%)TFUNC\n)INIT\n.CURSOR = &CURPOS\n&SCRO = DATA\n&ZTDMARK = ' '\n)REINIT\n&S = ' '\n)PROC\n)END\n./ ENDUP\n/*\n//SBGOLOBA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* MODIFY THE SYSUT2 DSN TO THE ONE USED FOR SKELETAL JCL IN YOUR\n//* ENVIRONMENT.\n//*\n//* IF RACF WILL ALLOW YOU TO ALLOCATE THE DEFAULT SYSUT2 DSN, THEN\n//* IT IS RECOMMENDED THAT YOU KEEP THE DEFAULT VALUE.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.ISPSLIB,DISP=(NEW,CATLG,DELETE),\n//SYSUT2   DD DSN=SBGOLOB.FUSION.ISPSLIB,DISP=(NEW,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,5)),UNIT=SYSALLDA,VOL=SER=DATA01\n//SYSIN    DD DATA\n./ ADD NAME=F2PRINT,LIST=ALL\n//&USERX  JOB 'PRINT',MSGLEVEL=(1,1),MSGCLASS=X,CLASS=F\n//GENER    EXEC PGM=IEBGENER\n//SYSUT1   DD   DSN=&USERDSN,DISP=SHR\n//NH42     OUTPUT FORMDEF=A10112,PAGEDEF=W240F3,CHARS=GT24\n//NV22     OUTPUT FORMDEF=A10111,PAGEDEF=W120C2,CHARS=GT20\n//LLTR  OUTPUT FORMDEF=A10110,PAGEDEF=A06462,CHARS=GT10,FORMS=STD\n//SYSUT2   DD SYSOUT=A,OUTPUT=*.LLTR,COPIES=1,\n//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n./ ENDUP\n/*\n//SBGOLOBA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* MODIFY THE SYSUT2 DSN TO THE ONE USED FOR MESSAGES IN YOUR\n//* ENVIRONMENT.\n//*\n//* IF RACF WILL ALLOW YOU TO ALLOCATE THE DEFAULT SYSUT2 DSN, THEN\n//* IT IS RECOMMENDED THAT YOU KEEP THE DEFAULT VALUE.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.ISPMLIB,DISP=(NEW,CATLG,DELETE),\n//SYSUT2   DD DSN=SBGOLOB.FUSION.ISPMLIB,DISP=(NEW,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,5)),UNIT=SYSALLDA,VOL=SER=DATA01\n//SYSIN    DD DATA\n./ ADD NAME=FUSIO00,LIST=ALL\nFUSIO000     .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'&ZEDLMSG'\n\nFUSIO001      .HELP=*  .ALARM=NO .TYPE=CRITICAL\n'THE LANGUAGE TYPE COULD NOT BE DETERMINED FOR THE DOCUMENT.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO002      .HELP=*  .ALARM=NO .TYPE=CRITICAL\n'ENTER A VALID BASE DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO003      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A VALID TIB DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO004      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A VALID DESTINATION DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO005      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE BASE MODULE NAME DOES NOT EXIST.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO006      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE TIB MODULE NAME DOES NOT EXIST.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO007      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A MODULE NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO009      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'1 OR MORE SYSTEM INQUIRY NUMBERS EXCEEDS 6 CHARACTERS.  ' +\n'PRESS PF3 TO CONTINUE.'\n\n./ ADD NAME=FUSIO01,LIST=ALL\nFUSIO010     .HELP=*  .ALARM=NO .TYPE=NOTIFY\n'&ZEDLMSG'\n\nFUSIO011      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE LANGUAGE TYPE COULD NOT BE DETERMINED.  '\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO012      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING LANGUAGE DETECT'\n\nFUSIO013      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'EDITING FILE'\n\nFUSIO014      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING COMPARISON A'\n\nFUSIO016      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING COMPARISON B'\n\n./ ADD NAME=FUSIO02,LIST=ALL\nFUSIO020     .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'MOVEPROD COMPARE'\n\nFUSIO021      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'FUSION COMPARE'\n\nFUSIO022      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'READING DIFFERENCES FILE'\n\nFUSIO023      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'COMPARISON ANALYSIS'\n\nFUSIO024      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'MERGING RESULTS'\n\nFUSIO025      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'REWRITING FILE'\n\nFUSIO026      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'UNDOCUMENTED CODE WAS DETECTED AT &LINE' +\n'&ERRLIST..  EITHER CORRECT THE DOCUMENTATION OR ADD IT TO USELIB ' +\n'WITH CHECKOUT.  PRESS PF3 TO CONTINUE.'\n\nFUSIO027      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'PERFORMING USAGE LIBRARY VERIFICATION'\n\nFUSIO028      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'THE VALID APPFUNC FUNCTIONS ARE MANSEL, MASSMIG, MIGRATE, AND MOVE'\n\nFUSIO029      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'THE VALID PROCOPT FUNCTIONS ARE DISPLAY, COMPAREA, COMPAREB, ' +\n'PCOMPAREA, AND DELCOM'\n./ ENDUP\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INSTAL03": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x003\\x01\\x03\"\\x0f\\x01\\x03\"\\x0f!%\\x03\\xcd\\x03\\xcd\\x00\\x00\\xc1\\xd7\\xd9\\xc7\\xd1\\xc6\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-08-08T00:00:00", "modifydate": "2003-08-08T21:25:33", "lines": 973, "newlines": 973, "modlines": 0, "user": "APRGJF2"}, "text": "//FUSIONA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* THIS STEP CREATES THE FUSION CONTROL LIBRARY WHICH RESOLVES\n//* LIBRARY DEFINITIONS.  IF YOU MODIFY THE SYSUT2 DEFINITIONS OF\n//* THESE LIBDEFS, THEN YOU MUST MODIFY THESE NAMES TO RESOLVE THE NEW\n//* DSN'S.  YOU CAN MODIFY THEM HERE OR LATER WHEN THE CNTL LIBRARY\n//* HAS BEEN CREATED.\n//*\n//* IF YOU MODIFY THE FOLLOWING SYSUT2 DSN TO ANOTHER NAME THEN YOU\n//* MUST ALSO MODIFY THE REGDSN NAME IN THE MAIN FUSION EXEC.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.CNTL,DISP=(MOD,CATLG,DELETE),\n//SYSUT2   DD DSN=WRK1.INSTALL.FUSION.CNTL,DISP=(MOD,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,1))\n//SYSIN    DD DATA\n./ ADD NAME=FUSNCONF,LIST=ALL\n /*ISPMLIB = 'WRK1.PACK.FUSION.ISPMLIB'*/\n /*ISPPLIB = 'WRK1.PACK.FUSION.PLIB' */\n /*ISPSLIB = 'WRK1.PACK.FUSION.SKELS'*/\nISPMLIB = 'WRK1.INSTALL.FUSION.ISPMLIB'\nISPPLIB = 'WRK1.INSTALL.FUSION.PLIB'\nISPSLIB = 'WRK1.INSTALL.FUSION.SKELS'\n./ ENDUP\n/*\n//FUSIONA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* THIS STEP INSTALLS THE FUSION EXEC INTO THE PDS SPECIFIED BY THE\n//* SYSUT2 DSN.  YOU SHOULD MODIFY THE NAME TO THE ONE USED FOR\n//* SYSEXEC'S IN YOUR ENVIRONMENT.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.SYSEXEC,DISP=(MOD,CATLG,DELETE),\n//SYSUT2   DD DSN=WRK1.INSTALL.FUSION.SYSEXEC,DISP=(MOD,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,1))\n//SYSIN    DD DATA\n./ ADD NAME=FUSION,LIST=ALL\n /*REXX*/\nCALL FUSIONSTART\nRETURN\n\nFUSIONSTART: PROCEDURE\nSTATUS = MSG('OFF')\n\"FREE DD (OUTDD, NEWDD, OLDDD, DELDD)\"\nPROCLIST = 'DISPLAY COMPAREA COMPAREB PCOMPAREA DELCOM'\nREGDSN = 'WRK1.FUSION.CNTL'\nCALL CONFIGURATION\nTIBAPPX = ''\nTIBAPPY = ''\nZTITLE = 'FUSION USER SELECT SCREEN'\nCURPOS = 'PROGNAME'\nUSER = USERID()\nTIBPROG = ''\nENDKEY = 0\nRC = 0\nSP = '                                                               '\nMSGPOS = ''\nPCOMPAREA = 0\n\"ISPEXEC LIBDEF ISPMLIB DATASET ID('\"ISPMLIB\"') STACK\"\n\"ISPEXEC LIBDEF ISPPLIB DATASET ID('\"ISPPLIB\"') STACK\"\n\"ISPEXEC LIBDEF ISPSLIB DATASET ID('\"ISPSLIB\"') STACK\"\n\"ISPEXEC VGET (PROCOPT) profile\"\n\"ISPEXEC VGET (BASEDSN) profile\"\n\"ISPEXEC VGET (TIBDSN) profile\"\n\"ISPEXEC VGET (DESTDSN) profile\"\n\"ISPEXEC VGET (APPFUNC) profile\"\nIF pos(appfunc, 'MIGRATE MOVE MANSEL MASSMIG') = 0 THEN\n   APPFUNC = 'MIGRATE'\nCALL FLEX_SCREEN\nCALL PANEL_CONTROL\nDO WHILE \\ ENDKEY\n   ZEDLMSG = ''\n   GLOBAL_ERROR = ' '\n   CALL VERIFY\n   CALL LANGUAGE_TYPE\n   IF GLOBAL_ERROR = '' & \\ ENDKEY THEN do\n      IF APPFUNC = 'MANSEL' THEN DO\n         CALL MANUAL_SELECT\n         HOLDTIB = TIBDSN\n         TIBDSN = \"\"USER\".TEMP80\"\n         HOLDPROG = TIBPROG\n         TIBPROG = 'TEMPFILE'\n         \"FREE DD(NEWDD)\"\n         \"ALLOCATE DD(NEWDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n         END\n      CALL INITIATEC\n      CALL ALERT FUSIO013\n      IF POS('DISPLAY', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC EDIT DATASET,\n         ('\"DESTDSN\"(\"DESTPROG\")')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      IF POS('COMPAREA', PROCOPT) > 0 THEN DO\n         CALL ALERT FUSIO014\n         CALL COMPAREA\n         IF POS('PCOMPAREA', PROCOPT) > 0 THEN\n            CALL PRINTCOMP\n         END\n      IF POS('COMPAREB', PROCOPT) > 0 THEN DO\n         CALL ALERT FUSIO016\n         CALL COMPAREB\n         END\n      IF POS('COMPAREA', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC BROWSE DATASET ('\"USER\".SUPERC.LISTA')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      IF POS('COMPAREB', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC BROWSE DATASET,\n         ('\"USER\".SUPERC.LISTB')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      END\n   \"FREE DD (REPDD, NEWDD, OLDDD, OUTDD, DELDD)\"\n   IF APPFUNC = 'MANSEL' THEN DO\n      TIBDSN = HOLDTIB\n      TIBPROG = HOLDPROG\n      END\n   CALL PANEL_CONTROLA\n   END\n\"ISPEXEC VPUT (PROCOPT) profile\"\n\"ISPEXEC VPUT (BASEDSN) profile\"\n\"ISPEXEC VPUT (TIBDSN) profile\"\n\"ISPEXEC VPUT (DESTDSN) profile\"\n\"ISPEXEC VPUT (APPFUNC) profile\"\n\"ISPEXEC LIBDEF ISPMLIB\"\n\"ISPEXEC LIBDEF ISPPLIB\"\n\"ISPEXEC LIBDEF ISPSLIB\"\nRETURN\n\nFLEX_SCREEN:\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\nTFUNC = '                  FUSION - Module Version Integration System'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = 'Quick Help - Use PF7 and PF8 to navigate.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o BASE DSN - Dataset that has production source.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o UPDATED DSN - Dataset that has updated source such as'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   vendor fixes or programmer test code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o DESTINATION DSN - Dataset that will contain the FUSION'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   program merges.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o MODULE NAME - Name of the module to be updated.  If the'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   BASE module name is different from the UPDATED module name,'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   enter the BASE name followed by the TIB name.  The '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   DESTINATION name will be the BASE name. '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o APPLICATION FUNCTION - Valid functions include '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MANSEL - Allows manual selection of lines to migrate.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MASSMIG - Moves company modified code to base code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MIGRATE - Moves user selected code to base code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MOVE - Moves user selected code to base without ',\n        'performing associated deletes.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o PROCESS OPTIONS - Valid functions include '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC =  '     DISPLAY, COMPAREA, COMPAREAB, PCOMPAREA, and DELCOM'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o Enter one or more SI numbers to be migrated on the '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   2 available free format entry lines.'\n\"ISPEXEC TBADD EZLIST\"\n\"ISPEXEC TBTOP EZLIST\"\nRETURN\n\nMANUAL_SELECT:\nDROP TIBFILE.\nDROP OUT80.\nLOWVALUE = ' '\n\"ALLOCATE DD(MANSCAN) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n\"ALLOCATE DD(ALLOCDD) DSN('\"USER\".TEMP82') SPACE (9 9) CYLINDERS,\n   DSORG(PO) DIR(5) LRECL(82) BLKSIZE(3280) RECFM(F,B) MOD REUSE\"\n  \"FREE DD(ALLOCDD)\"\n\"ALLOCATE DD(ALLOCDD) DSN('\"USER\".TEMP80') SPACE (5 5) CYLINDERS,\n   DSORG(PO) DIR(5) LRECL(80) BLKSIZE(3200) RECFM(F,B) MOD REUSE\"\n  \"FREE DD(ALLOCDD)\"\n\"ALLOCATE DD(OUTSCAN) DSN('\"USER\".TEMP82(TEMPFILE)') SHR\"\n\"EXECIO * DISKR MANSCAN (STEM TIBFILE. FINIS\"\nDO MM = 1 TO TIBFILE.0\n   OUTFILE.MM = ' ' || LOWVALUE || TIBFILE.MM\n   END\n\"EXECIO * DISKW OUTSCAN (STEM OUTFILE. FINIS\"\n\"ISPEXEC CONTROL DISPLAY SAVE\"\nZSHADOW = '$$$$$$$$$$$$$$$$  '\n\"ISPEXEC EDIT DATASET,\n   ('\"USER\".TEMP82(TEMPFILE)')\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nDROP OUTFILE.\n\"EXECIO * DISKR OUTSCAN (STEM OUTFILE. FINIS\"\n\"FREE DD(OUTSCAN)\"\n\"ALLOCATE DD(OUTSCAN) DSN('\"USER\".TEMP80(TEMPFILE)') SHR\"\nDO MM = 1 TO TIBFILE.0\n   OUTLINE = SUBSTR(OUTFILE.MM,3,72)\n   IF SUBSTR(OUTFILE.MM,1,1) = 'S' THEN\n      OUTLINE = OVERLAY('EZSEL   ',OUTLINE,73,8)\n   OUT80.MM = OUTLINE\n   END\n\"EXECIO * DISKW OUTSCAN (STEM OUT80. FINIS\"\n\"FREE DD(OUTSCAN)\"\n\"FREE DD(MANSCAN)\"\nRETURN\n\nVERIFY:\nIF WORDS(PROGNAME) = 1 THEN DO\n   BASEPROG = PROGNAME\n   TIBPROG = PROGNAME\n   DESTPROG = PROGNAME\n   END\nELSE\n   IF WORDS(PROGNAME) = 2 THEN DO\n      BASEPROG = WORD(PROGNAME,1)\n      TIBPROG = WORD(PROGNAME,2)\n      DESTPROG = BASEPROG\n      END\n   ELSE\n      IF WORDS(PROGNAME) = 3 THEN DO\n         BASEPROG = WORD(PROGNAME,1)\n         TIBPROG = WORD(PROGNAME,2)\n         DESTPROG = WORD(PROGNAME,3)\n         END\nTIBLINE = TIBAPPX || ' ' || TIBAPPY\nMAXSI = WORDS(TIBLINE)\nIF XRC = 8,\n& GLOBAL_ERROR = ' ' THEN DO\n   ENDKEY = 1\n   RETURN\n   END\nDO SI = 1 TO MAXSI\n   IF LENGTH(WORD(TIBLINE,SI)) > 6 THEN DO\n     \"ISPEXEC SETMSG MSG(FUSIO009)\"\n      GLOBAL_ERROR = 'A'\n      LEAVE\n      END\n   END\nIF SYSDSN(\"'\"BASEDSN\"'\") <> \"OK\" THEN DO\n   \"ISPEXEC SETMSG MSG(FUSIO002)\"\n   GLOBAL_ERROR = 'A'\n   END\nELSE\n   IF SYSDSN(\"'\"TIBDSN\"'\") <> \"OK\" THEN DO\n      \"ISPEXEC SETMSG MSG(FUSIO003)\"\n      GLOBAL_ERROR = 'A'\n      END\n   ELSE\n      IF SYSDSN(\"'\"DESTDSN\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO004)\"\n         GLOBAL_ERROR = 'A'\n         END\n\nIF GLOBAL_ERROR = ' ' THEN DO\n   IF TIBPROG <> '' THEN DO\n      CHECK_MOD = \"\"BASEDSN\"(\"BASEPROG\")\"\n      IF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO005)\"\n         GLOBAL_ERROR = 'A'\n         END\n      ELSE NOP\n      CHECK_MOD = \"\"TIBDSN\"(\"TIBPROG\")\"\n      IF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO006)\"\n         GLOBAL_ERROR = 'A'\n         END\n      ELSE NOP\n      END\n   ELSE DO\n      \"ISPEXEC SETMSG MSG(FUSIO007)\"\n      GLOBAL_ERROR = 'A'\n      END\n   END\n\nIF APPFUNC \\ = '' THEN\n   IF POS(APPFUNC, 'MASSMIG MIGRATE MOVE MANSEL') = 0 THEN DO\n      \"ISPEXEC SETMSG MSG(FUSIO028)\"\n      GLOBAL_ERROR = 'A'\n      END\n\nIF PROCOPT \\ = '' THEN\n   DO KK = 1 TO WORDS(PROCOPT)\n      IF POS(WORD(PROCOPT,KK), PROCLIST) = 0 THEN DO\n         \"ISPEXEC SETMSG MSG(FUSIO029)\"\n         GLOBAL_ERROR = 'A'\n         END\n      END\n\nIF GLOBAL_ERROR = ' ' THEN DO\n   \"ALLOCATE DD(REPDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n   \"ALLOCATE DD(NEWDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n   \"ALLOCATE DD(OLDDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR\"\n   END\nRETURN\n\nINITIATEC:\nACTIVE_REPLACE = 0\nACTIVE = 'ACTIVE'\nCHGFILE. = ''\nOUTFILE. = ''\nDROP OUTREC.\nCALL ALERT FUSIO021\nCALL COMPAREI\nCALL ALERT FUSIO022\n\"EXECIO * DISKR DELDD (STEM CHGFILE. FINIS\"\nCNT = CHGFILE.0\nDO SI = 1 TO MAXSI\n   SINUM.SI = WORD(TIBLINE,SI)\n   END\nCALL ALERT FUSIO023\nOUTCOUNT = 1\nSPACES = '                                                            '\nDO II = 3 TO CNT\n   CHGFILE = CHGFILE.II\n   HIT_FIND = ''\n   IF substr(CHGFILE,1,1) = '*',\n   & pos('N-REF#', chgfile) > 0 then do\n      select\n         when substr(chgfile,2,4) = 'D-RF' then DO\n            ffunction = 'DELETE'\n            END\n         when substr(chgfile,2,4) = 'I-  ' then do\n            ffunction = 'INSERT'\n            active_replace = 0\n            end\n         when substr(chgfile,2,4) = 'I-RP' then DO\n            ffunction = 'INSERT-REPLACE'\n            IP = 1\n            j1 = 1\n            active_replace = 0\n            END\n         when substr(chgfile,2,4) = 'M-  ' then\n            ffunction = 'MERGE'\n         when substr(chgfile,2,4) = 'D-  ' then\n            ffunction = 'DELETE'\n         when substr(chgfile,2,4) = 'D-RP' then DO\n            if active_replace then\n               ffunction = 'DELETE-REPLACE'\n            else\n               ffunction = 'DELETE'\n            IP = 1\n            j1 = 1\n            END\n         otherwise ffunction = 'NONE'\n         end\n      end\n   else DO\n      select\n         when ffunction = 'INSERT' THEN\n            IF APPFUNC = 'MANSEL' THEN\n               IF SINUMP(SUBSTR(CHGFILE,1,77)) THEN DO\n                  OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n                  outcount = outcount + 1\n                  end\n               else nop\n            ELSE\n               IF SINUMP(SUBSTR(CHGFILE,1,72)) THEN do\n                  OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n                  outcount = outcount + 1\n                  end\n         when ffunction = 'INSERT-REPLACE' THEN do\n            IF APPFUNC = 'MANSEL' THEN\n               IF SINUMP(SUBSTR(CHGFILE,1,77)) THEN DO\n                  ACTIVE_REPLACE = 1\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '1'\n                  END\n               ELSE\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '0'\n            ELSE\n               IF SINUMP(SUBSTR(CHGFILE,1,72)) THEN DO\n                  ACTIVE_REPLACE = 1\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '1'\n                  END\n               else\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '0'\n               OUTREC.OUTCOUNT.ip = SUBSTR(CHGFILE,1,72)\n               LASTINSERT = IP\n               ip = ip + 1\n               END\n         when ffunction = 'DELETE-REPLACE' THEN\n            call delete_process\n         when ffunction = 'DELETE' THEN do\n            OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n            outcount = outcount + 1\n            end\n         when ffunction = 'MERGE' THEN DO\n            OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n            OUTCOUNT = OUTCOUNT + 1\n            END\n         otherwise nop\n         end\n      end\n   end\nCALL ALERT FUSIO024\nCALL ALERT FUSIO025\nCALL UNSPOOL\n\"EXECIO * DISKW REPDD (STEM OUTFILE. FINIS\"\nRETURN\n\nunspool:\nI1 = 1\nDO I = 1 TO OUTCOUNT - 1\n   X = 1\n   DO while SUBSTR(OUTREC.I.X,1,6) \\ = 'OUTREC'\n      ACTIVE_LINE = OUTREC.I.X.ACTIVE\n      IF ACTIVE_LINE <> '1' THEN ACTIVE_LINE = 0\n      IF ACTIVE_LINE THEN DO\n         OUTFILE.I1 = OUTREC.I.X\n         I1 = I1 + 1\n         CALL DEL_STEM\n         END\n      else\n         CALL DEL_STEM\n      X = X + 1\n      END\n      OUTFILE.I1 = OUTREC.I\n      I1 = I1 + 1\n   END\nRETURN\n\ndel_stem:\nLASTa = OUTREC.I.X.1\nIF DATATYPE(LASTa) <> 'NUM' THEN LASTa = 1\nDO LL = 2 TO LASTa\n   OUTFILE.I1 = OUTREC.I.X.LL\n   I1 = I1 + 1\n   END\nreturn\n\ndelete_process:\nIF ACTIVE_REPLACE,\n&  APPFUNC \\ = 'MOVE' THEN do\n   NR = SUBSTR(CHGFILE,7,72)\n   NR = PROCESS_LISTA(NR)\n   OCOMMENT = COMMENT\n   IF SUBSTR(CHGFILE,8,64) = '' THEN NOP\n   ELSE DO\n      HOLDPENDING = J1\n      FOUNDINSERT = 0\n      DO J1 = HOLDPENDING TO LASTINSERT\n         NEWREC = OUTREC.OUTCOUNT.J1\n         ACTIVE_LINE = OUTREC.OUTCOUNT.J1.ACTIVE\n         IF ACTIVE_LINE <> '1' THEN ACTIVE_LINE = 0\n         COMPREC = PROCESS_LISTA(NEWREC)\n         NCOMMENT = COMMENT\n         IF FOUND_LINE(),\n         & ((NCOMMENT & \\ OCOMMENT),\n         | (NCOMMENT & OCOMMENT)) THEN DO\n            FOUNDINSERT = 1\n            LEAVE\n            END\n         ELSE\n            IF FOUND_LINE() THEN DO\n               HIT_FIND = 'PROBABLE'\n               FOUNDINSERT = 1\n               END\n         END\n      IF FOUNDINSERT THEN\n         IF HIT_FIND = 'EXACT' THEN NOP\n         ELSE\n            IF HIT_FIND = 'PROBABLE' THEN\n               IF POS('DELCOM',PROCOPT) > 0 THEN NOP\n               ELSE\n                  CALL PROCESS_INSERT\n            ELSE nop\n      ELSE DO\n         J1 = LASTINSERT\n         HIT_FIND = 'ABSOLUTE'\n         CALL PROCESS_INSERT\n         J1 = HOLDPENDING\n         END\n      END\n   END\nELSE DO\n   J1 = 1\n   CALL PROCESS_INSERT\n   END\nreturn\n\nPROCESS_INSERT:\nHJ1 = J1\nIF TIBTYPE = 'COBOL' THEN CSTART = 7\nELSE CSTART = 1\nLAST = OUTREC.OUTCOUNT.J1.1\nIF DATATYPE(LAST) <> 'NUM' THEN LAST = 2\nELSE LAST = LAST + 1\nOUTREC.OUTCOUNT.J1.1 = LAST\nOUTREC.OUTCOUNT.J1.LAST = SUBSTR(CHGFILE,1,72)\nJ1 = HJ1\nRETURN\n\nFOUND_LINE:\nFOUND = 0\nhIT_FIND = ''\nIF pos(nr, COMPREC) > 0,\n& nr <> '',\n&  ACTIVE_LINE then do\n   INDEX_D = pos(nr, COMPREC)\n   ABBREV_LINE = SUBSTR(COMPREC,INDEX_D,LENGTH(NR))\n   IF ABBREV_LINE = NR THEN FOUND = 1\n   HIT_FIND = 'EXACT'\n   END\nRETURN FOUND\n\nPROCESS_LISTA:\nARG NEWREC\nCOMMENT = 0\nIF TIBTYPE = 'COBOL' THEN\n   COMPREC = SUBSTR(NEWREC,7,66)\nELSE\n   COMPREC = SUBSTR(NEWREC,1,72)\nIF SUBSTR(COMPREC,1,1) = '*' THEN DO\n   COMMENT = 1\n   COMPREC = COMPRESS(COMPREC)\n   END\nELSE\n   COMPREC = COMPRESS(COMPREC)\nCOMPREC = STRIP(COMPREC,'B')\nRETURN COMPREC\n\nSINUMP:\nARG REC\nFOUND = 0\nINITIAL = 0\nIF APPFUNC = 'MASSMIG' THEN DO\n   FOUND = 1\n   RETURN FOUND\n   END\nIF APPFUNC <> 'MANSEL' THEN\n   IF TIBTYPE = 'COBOL' THEN DO\n      DO I = 1 TO MAXSI\n         IF pos(sinum.i, SUBSTR(REC,1,12)) > 0 THEN DO\n            FOUND = 1\n            LEAVE\n            END\n         END\n      IF \\ FOUND & ACTIVE_REPLACE & REC = '' THEN FOUND = 1\n      END\n   ELSE\n      DO I = 1 TO MAXSI\n         IF pos(SINUM.I, rec) > 0 THEN DO\n            FOUND = 1\n            LEAVE\n            END\n         END\nELSE\n   IF SUBSTR(REC,73,5) = 'EZSEL' THEN FOUND = 1\nRETURN FOUND\n\nCOMPAREI:\nDELETE \"'\"USER\".SUPERC.UPDATE'\"\nDELETE \"'\"USER\".SUPERC.LIST'\"\n\"ALLOCATE DD(DELDD) DSN('\"USER\".SUPERC.UPDATE') SPACE (5000 1000)\",\n          \"BLKSIZE(1600) RECFM(V,B) MOD\"\nINFILE. = ''\nCHANGE_FILE. = ''\nCHECK_MOD = USER || '.EZTOOLS.CNTL' || '(' || 'SYSIN' || ')'\nIF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN\n   CALL SYSIN_CARD\n\"ALLOCATE DD(OUTDD) DUMMY\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(LONGL LINECMP \",\n                  \"UPDLDEL,,' ')\"\n\"FREE DD(SYSIN)\"\nRETURN\n\nCOMPAREA:\nDELETE \"'\"USER\".SUPERC.LISTA'\"\n\"FREE DD (OUTDD, NEWDD, OLDDD, DELDD)\"\n\"ALLOCATE DD(NEWDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n\"ALLOCATE DD(OLDDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR\"\n\"ALLOCATE DD(OUTDD) DSN('\"USER\".SUPERC.LISTA') SPACE (900 900),\n    BLKSIZE(3325) MOD RECFM(F,B) LRECL(133) MOD REUSE\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(CHNGL,LINECMP)\"\n\"FREE DD (SYSIN)\"\nRETURN\n\nCOMPAREB:\nADDRESS TSO\nDELETE \"'\"USER\".SUPERC.LISTB'\"\n\"FREE DD (OUTDD, DELDD, SYSIN, NEWDD, OLDDD)\"\n\"ALLOCATE DD(NEWDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n\"ALLOCATE DD(OLDDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n\"ALLOCATE DD(OUTDD) DSN('\"USER\".SUPERC.LISTB') SPACE (900 90),\n          BLKSIZE(1600) MOD\"\n\"ALLOCATE DD(DELDD) DUMMY\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(DELTAL,CHNGL,LINECMP)\"\nRETURN\n\nCOMPRESS: PROCEDURE\nARG REC, OPTION\nNR = ''\nREC = TRANSLATE(REC,' ','().')\nNWORD = WORDS(REC)\nSTART = 1\nDO NREP = START TO NWORD\n   IF WORD(REC,NREP) = 'F' THEN NR = NR || 'FILLER'\n   ELSE\n      NR = NR || WORD(REC,NREP)\n   END\nRETURN NR\n\nALERT:\nARG SHOWMSG\n\"ISPEXEC SETMSG MSG(\"SHOWMSG\")\"\n\"ISPEXEC CONTROL DISPLAY LOCK\"\nCALL MESSAGE\n\"ISPEXEC TBADD EZLIST\"\n\"ISPEXEC TBTOP EZLIST\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nRETURN\n\nMESSAGE:\nTFUNC = ''\nIF ZEDLMSG <> '' THEN TFUNC = ZEDLMSG\nELSE\n   SELECT\n      WHEN SHOWMSG = 'FUSIO013' THEN\n         TFUNC = ' o EDITING FILE'\n      WHEN SHOWMSG = 'FUSIO014' THEN\n         TFUNC = ' o INITIATING COMPARISON A'\n      WHEN SHOWMSG = 'FUSIO016' THEN\n         TFUNC = ' o INITIATING COMPARISON B'\n      WHEN SHOWMSG = 'FUSIO021' THEN\n         TFUNC = ' o FUSION COMPARE'\n      WHEN SHOWMSG = 'FUSIO022' THEN\n         TFUNC = ' o READING DIFFERENCES FILE'\n      WHEN SHOWMSG = 'FUSIO023' THEN\n         TFUNC = ' o COMPARISON ANALYSIS'\n      WHEN SHOWMSG = 'FUSIO024' THEN\n         TFUNC = ' o MERGING RESULTS'\n      WHEN SHOWMSG = 'FUSIO025' THEN\n         TFUNC = ' o REWRITING FILE'\n      OTHERWISE NOP\n      END\nRETURN\n\nINDICATOR:\n\"ISPEXEC SETMSG MSG(\"SHOWMSG\")\"\n\"ISPEXEC CONTROL DISPLAY LOCK\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nRETURN\n\nPRINTCOMP:\nUSERDSN = \"\"USER\".SUPERC.LISTA\"\nCALL PRINTPAGE\nRETURN\n\nSYSIN_CARD:\n\"ALLOCATE DD(JOB6) DSN('\"USER\".EZTOOLS.CNTL(\"SYSIN\")') SHR REUSE\"\nL. = \"\"\nL.1 = \"CMPCOLMN 1:72\"\nL.2 = \"CMPCOLMO 1:72\"\nL.3 = \"\"\n\"EXECIO * DISKW \"JOB6\" (STEM L. FINIS\"\n\"FREE DD(JOB6)\"\nRETURN\n\nPRINTPAGE: PROCEDURE EXPOSE USER\nARG TNARR\nUSERX = USER || 'X'\n\"ISPEXEC VGET ZTEMPF\"\n\"ISPEXEC FTOPEN TEMP\"\n\"ISPEXEC FTINCL F2PRINT\"\n\"ISPEXEC FTCLOSE\"\n\"SUBMIT '\"ZTEMPF\"'\"\nRETURN\n\nPANEL_CONTROL:\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nXRC = RC\nIF RC = 8 THEN ENDKEY = 1\n\"ISPEXEC TBCLOSE EZLIST\"\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\nRETURN\n\nPANEL_CONTROLA:\n\"ISPEXEC TBCLOSE EZLIST\"\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nXRC = RC\nIF RC = 8 THEN ENDKEY = 1\nRETURN\n\nCONFIGURATION:\nIF SYSDSN(\"'\"REGDSN\"(FUSNCONf)'\") \\ = 'OK' THEN DO\n   SAY 'CONFIGURATION NOT NOT FOUND'\n   RETURN\n   END\n\"ALLOCATE DD(SYSDD) DSN('\"REGDSN\"(FUSNCONf)') SHR REUSE\"\n\"EXECIO * DISKR SYSDD (STEM CONFIGURE. FINIS\"\n\"FREE DD(SYSDD)\"\nDO RR = 1 TO CONFIGURE.0\n   INTERPRET \"\"CONFIGURE.RR\"\"\n   END\nRETURN\n\nLANGUAGE_TYPE:\nIF GLOBAL_ERROR = '' & \\ ENDKEY THEN DO\n   CALL ALERT FUSIO012\n   \"ALLOCATE DD(TYPEDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR REUSE\"\n   EOF = 0\n   \"EXECIO 1 DISKR TYPEDD (FIFO\"\n   IF RC = 2 THEN EOF = 1\n   ELSE PULL VER_RECORD\n   TYPE_VERIFIED = 0\n   DO WHILE \\ (TYPE_VERIFIED | EOF)\n      IF SUBSTR(VER_RECORD,7,1) <> '*',\n      &  SUBSTR(VER_RECORD,1,1) <> '*' THEN\n         IF (INDEX(VER_RECORD,'IDENTIFICATION') > 0,\n         &  INDEX(VER_RECORD,'DIVISION') > 0),\n         |  INDEX(VER_RECORD,' PIC ') > 0,\n         |  INDEX(VER_RECORD,'MOVE') > 0,\n         |  INDEX(VER_RECORD,'PERFORM') > 0,\n         |  INDEX(VER_RECORD,'REDEFINES') > 0 THEN DO\n            TIBTYPE = 'COBOL'\n            TYPE_VERIFIED = 1\n            END\n         ELSE\n            IF INDEX(VER_RECORD,'DFHMDF') > 0 THEN DO\n               TIBTYPE = 'MAPS'\n               TYPE_VERIFIED = 1\n               END\n            ELSE\n               IF WORDPOS('PROC',VER_RECORD) > 0,\n               |  INDEX(VER_RECORD,'MSGCLASS') > 0 THEN DO\n                  TIBTYPE = 'JCL'\n                  TYPE_VERIFIED = 1\n                  END\n               ELSE\n                  IF INDEX(VER_RECORD,'CSECT') > 0,\n                  |  INDEX(VER_RECORD,'DSECT') > 0,\n                  |  INDEX(VER_RECORD,'PMSREGS') > 0,\n                  |  INDEX(VER_RECORD,'NOGEN') > 0,\n                  |  INDEX(VER_RECORD,'ORG') > 0 THEN DO\n                     TIBTYPE = 'ASSEMBLER'\n                     TYPE_VERIFIED = 1\n                     END\n                  ELSE\n                     IF INDEX(VER_RECORD,'GENIF') > 0,\n                     |  (INDEX(VER_RECORD,'HERE') > 0,\n                     &  INDEX(VER_RECORD,'CALLED') > 0) THEN DO\n                        TIBTYPE = 'GENEDIT'\n                        TYPE_VERIFIED = 1\n                        END\n                     ELSE\n                        IF INDEX(VER_RECORD,'AIDS') > 0 THEN DO\n                           TIBTYPE = 'AIDS'\n                           TYPE_VERIFIED = 1\n                           END\n         \"EXECIO 1 DISKR TYPEDD (FIFO\"\n         IF RC = 2 THEN EOF = 1\n         ELSE PULL VER_RECORD\n         END\n      IF \\ TYPE_VERIFIED THEN TIBTYPE = 'UNKNOWN'\n      \"EXECIO 0 DISKR TYPEDD (FIFO FINIS\"\n      \"FREE DD(TYPEDD)\"\n      ZEDLMSG = \"DETECTED \"TIBTYPE\" LANGUAGE\"\n      CALL ALERT FUSIO010\n      ZEDLMSG = ''\n      END\nRETURN\n./ ENDUP\n/*\n//FUSIONA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* MODIFY THE SYSUT2 DSN TO THE ONE USED FOR ISPF PANELS IN YOUR\n//* ENVIRONMENT.\n//*\n//* IF RACF WILL ALLOW YOU TO ALLOCATE THE DEFAULT SYSUT2 DSN, THEN\n//* IT IS RECOMMENDED THAT YOU KEEP THE DEFAULT VALUE.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.ISPPLIB,DISP=(MOD,CATLG,DELETE),\n//SYSUT2   DD DSN=WRK1.INSTALL.FUSION.ISPPLIB,DISP=(MOD,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,5))\n//SYSIN    DD DATA\n./ ADD NAME=FUSIONP,LIST=ALL\n)ATTR\n#  TYPE(TEXT) INTENS(LOW) COLOR(BLUE) SKIP(ON)\n%  TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n\\  TYPE(TEXT) INTENS(HIGH) COLOR(RED)\n@  TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n(  TYPE(TEXT) INTENS(HIGH) COLOR(TURQUOISE)\n$  TYPE(INPUT) INTENS(HIGH) COLOR(GREEN)\n)  TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n_  TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) HILITE(USCORE)\n+  TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(BLUE)\n!  TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(RED)\n)BODY EXPAND(//) LMSG(MSGPOS)\n+COMMAND%===!>$ZCMD\n%\n! / / \\F%U S I O N / /\n+\n+BASE DSN%=============!>_BASEDSN                      #\n+UPDATED DSN%==========!>_TIBDSN                       #\n+DESTINATION DSN%======!>_DESTDSN                      #\n+MODULE NAME%==========!>_PROGNAME                     #\n+APPLICATION FUNCTION%=!>_APPFUNC                      #\n+PROCESS OPTIONS%======!>_PROCOPT\n+SYSTEM INQUIRY LIST%==!>_TIBAPPX\n_TIBAPPY\n@DIAG                          # @MSGPOS#\n)MODEL\n%)TFUNC\n)INIT\n.CURSOR = &CURPOS\n&SCRO = DATA\n&ZTDMARK = ' '\n)REINIT\n&S = ' '\n)PROC\n)END\n./ ENDUP\n/*\n//FUSIONA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* MODIFY THE SYSUT2 DSN TO THE ONE USED FOR SKELETAL JCL IN YOUR\n//* ENVIRONMENT.\n//*\n//* IF RACF WILL ALLOW YOU TO ALLOCATE THE DEFAULT SYSUT2 DSN, THEN\n//* IT IS RECOMMENDED THAT YOU KEEP THE DEFAULT VALUE.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.ISPSLIB,DISP=(MOD,CATLG,DELETE),\n//SYSUT2   DD DSN=WRK1.INSTALL.FUSION.ISPSLIB,DISP=(MOD,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,5))\n//SYSIN    DD DATA\n./ ADD NAME=F2PRINT,LIST=ALL\n//&USERX  JOB 'PRINT',MSGLEVEL=(1,1),MSGCLASS=X,CLASS=F\n//GENER    EXEC PGM=IEBGENER\n//SYSUT1   DD   DSN=&USERDSN,DISP=SHR\n//NH42     OUTPUT FORMDEF=A10112,PAGEDEF=W240F3,CHARS=GT24\n//NV22     OUTPUT FORMDEF=A10111,PAGEDEF=W120C2,CHARS=GT20\n//LLTR  OUTPUT FORMDEF=A10110,PAGEDEF=A06462,CHARS=GT10,FORMS=STD\n//SYSUT2   DD SYSOUT=A,OUTPUT=*.LLTR,COPIES=1,\n//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n./ ENDUP\n/*\n//FUSIONA JOB 'INIT',MSGLEVEL=(0,0),MSGCLASS=X,REGION=2048K,CLASS=A\n//* START JCL\n//INIT    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=X\n//*\n//* MODIFY THE SYSUT2 DSN TO THE ONE USED FOR MESSAGES IN YOUR\n//* ENVIRONMENT.\n//*\n//* IF RACF WILL ALLOW YOU TO ALLOCATE THE DEFAULT SYSUT2 DSN, THEN\n//* IT IS RECOMMENDED THAT YOU KEEP THE DEFAULT VALUE.\n//*\n//*SYSUT2   DD DSN=WRK1.FUSION.ISPMLIB,DISP=(MOD,CATLG,DELETE),\n//SYSUT2   DD DSN=WRK1.INSTALL.FUSION.ISPMLIB,DISP=(MOD,CATLG,DELETE),\n//         DCB=(RECFM=FB,BLKSIZE=3200,LRECL=80,DSORG=PO),\n//         SPACE=(CYL,(1,1,5))\n//SYSIN    DD DATA\n./ ADD NAME=FUSIO00,LIST=ALL\nFUSIO000     .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'&ZEDLMSG'\n\nFUSIO001      .HELP=*  .ALARM=NO .TYPE=CRITICAL\n'THE LANGUAGE TYPE COULD NOT BE DETERMINED FOR THE DOCUMENT.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO002      .HELP=*  .ALARM=NO .TYPE=CRITICAL\n'ENTER A VALID BASE DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO003      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A VALID TIB DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO004      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A VALID DESTINATION DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO005      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE BASE MODULE NAME DOES NOT EXIST.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO006      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE TIB MODULE NAME DOES NOT EXIST.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO007      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A MODULE NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO009      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'1 OR MORE SYSTEM INQUIRY NUMBERS EXCEEDS 6 CHARACTERS.  ' +\n'PRESS PF3 TO CONTINUE.'\n\n./ ADD NAME=FUSIO01,LIST=ALL\nFUSIO010     .HELP=*  .ALARM=NO .TYPE=NOTIFY\n'&ZEDLMSG'\n\nFUSIO011      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE LANGUAGE TYPE COULD NOT BE DETERMINED.  '\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO012      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING LANGUAGE DETECT'\n\nFUSIO013      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'EDITING FILE'\n\nFUSIO014      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING COMPARISON A'\n\nFUSIO016      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING COMPARISON B'\n\n./ ADD NAME=FUSIO02,LIST=ALL\nFUSIO020     .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'MOVEPROD COMPARE'\n\nFUSIO021      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'FUSION COMPARE'\n\nFUSIO022      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'READING DIFFERENCES FILE'\n\nFUSIO023      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'COMPARISON ANALYSIS'\n\nFUSIO024      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'MERGING RESULTS'\n\nFUSIO025      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'REWRITING FILE'\n\nFUSIO026      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'UNDOCUMENTED CODE WAS DETECTED AT &LINE' +\n'&ERRLIST..  EITHER CORRECT THE DOCUMENTATION OR ADD IT TO USELIB ' +\n'WITH CHECKOUT.  PRESS PF3 TO CONTINUE.'\n\nFUSIO027      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'PERFORMING USAGE LIBRARY VERIFICATION'\n\nFUSIO028      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'THE VALID APPFUNC FUNCTIONS ARE MANSEL, MASSMIG, MIGRATE, AND MOVE'\n\nFUSIO029      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'THE VALID PROCOPT FUNCTIONS ARE DISPLAY, COMPAREA, COMPAREB, ' +\n'PCOMPAREA, AND DELCOM'\n./ ENDUP\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPMLIB": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x003\\x01\\x03\"?\\x01\\x033\\x9f\\x10 \\x00Y\\x00Y\\x00\\x00\\xc1\\xd7\\xd9\\xc7\\xd1\\xc6\\xc3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-08-11T00:00:00", "modifydate": "2003-12-05T10:20:33", "lines": 89, "newlines": 89, "modlines": 0, "user": "APRGJFC"}, "text": "./ ADD NAME=FUSIO00  0100-03223-03223-0030-00035-00035-00000-FUSION\nFUSIO000     .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'&ZEDLMSG'\n\nFUSIO001      .HELP=*  .ALARM=NO .TYPE=CRITICAL\n'THE LANGUAGE TYPE COULD NOT BE DETERMINED FOR THE DOCUMENT.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO002      .HELP=*  .ALARM=NO .TYPE=CRITICAL\n'ENTER A VALID BASE DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO003      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A VALID UPDATED DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO004      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A VALID DESTINATION DATA SET NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO005      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE BASE MODULE NAME DOES NOT EXIST.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO006      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE UPDATED MODULE NAME DOES NOT EXIST.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO007      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'ENTER A MODULE NAME.  ' +\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO009      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'1 OR MORE SYSTEM INQUIRY NUMBERS EXCEEDS 6 CHARACTERS.  ' +\n'PRESS PF3 TO CONTINUE.'\n\n./ ADD NAME=FUSIO01  0100-03223-03223-0030-00019-00019-00000-FUSION\nFUSIO010     .HELP=*  .ALARM=NO .TYPE=NOTIFY\n'&ZEDLMSG'\n\nFUSIO011      .HELP=*  .ALARM=YES .TYPE=CRITICAL\n'THE LANGUAGE TYPE COULD NOT BE DETERMINED.  '\n'PRESS PF3 TO CONTINUE.'\n\nFUSIO012      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING LANGUAGE DETECT'\n\nFUSIO013      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'EDITING FILE'\n\nFUSIO014      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING COMPARISON A'\n\nFUSIO016      .HELP=*  .ALARM=NO  .TYPE=NOTIFY\n'INITIATING COMPARISON B'\n\n./ ADD NAME=FUSIO02  0100-03223-03223-0030-00032-00032-00000-FUSION\nFUSIO020     .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'MOVEPROD COMPARE'\n\nFUSIO021      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'FUSION COMPARE'\n\nFUSIO022      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'READING DIFFERENCES FILE'\n\nFUSIO023      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'COMPARISON ANALYSIS'\n\nFUSIO024      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'MERGING RESULTS'\n\nFUSIO025      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'REWRITING FILE'\n\nFUSIO026      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'UNDOCUMENTED CODE WAS DETECTED AT &LINE' +\n'&ERRLIST..  EITHER CORRECT THE DOCUMENTATION OR ADD IT TO USELIB ' +\n'WITH CHECKOUT.  PRESS PF3 TO CONTINUE.'\n\nFUSIO027      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'PERFORMING USAGE LIBRARY VERIFICATION'\n\nFUSIO028      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'THE VALID APPFUNC FUNCTIONS ARE MANSEL, MASSMIG, MIGRATE, AND MOVE'\n\nFUSIO029      .HELP=*  .ALARM=YES .TYPE=NOTIFY\n'THE VALID PROCOPT FUNCTIONS ARE DISPLAY, COMPAREA, COMPAREB, ' +\n'PCOMPAREA, AND DELCOM'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPPLIB": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x005\\x01\\x03\"?\\x01\\x034\\x0f\\x00A\\x00$\\x00$\\x00\\x00\\xc1\\xd7\\xd9\\xc7\\xd1\\xc6\\xc3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-08-11T00:00:00", "modifydate": "2003-12-06T00:41:35", "lines": 36, "newlines": 36, "modlines": 0, "user": "APRGJFC"}, "text": "./ ADD NAME=FUSIONP  0100-03223-03223-0031-00035-00035-00000-FUSION\n)ATTR\n#  TYPE(TEXT) INTENS(LOW) COLOR(BLUE) SKIP(ON)\n%  TYPE(TEXT) INTENS(HIGH) COLOR(WHITE)\n\\  TYPE(TEXT) INTENS(HIGH) COLOR(RED)\n@  TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n(  TYPE(TEXT) INTENS(HIGH) COLOR(TURQUOISE)\n$  TYPE(INPUT) INTENS(HIGH) COLOR(GREEN)\n)  TYPE(OUTPUT) INTENS(HIGH) COLOR(RED)\n_  TYPE(INPUT) INTENS(HIGH) COLOR(GREEN) HILITE(USCORE)\n+  TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(BLUE)\n!  TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(RED)\n)BODY EXPAND(//) LMSG(MSGPOS)\n+COMMAND%===!>$ZCMD\n%\n! / / \\F%u s i o n / /\n+\n+Base DSN%=============!>_BASEDSN                      #\n+Updated DSN%==========!>_TIBDSN                       #\n+Destination DSN%======!>_DESTDSN                      #\n+Module Name%==========!>_PROGNAME                     #\n+Application Function%=!>_APPFUNC                      #\n+Process Options%======!>_PROCOPT\n+System Inquiry List%==!>_TIBAPPX\n_TIBAPPY\n@DIAG                          # @MSGPOS#\n)MODEL\n%)TFUNC\n)INIT\n.CURSOR = &CURPOS\n&SCRO = DATA\n&ZTDMARK = ' '\n)REINIT\n&S = ' '\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISPSLIB": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x02\\x01\\x03\"?\\x01\\x033\\x9f\\x10\\x05\\x00\\x0f\\x00\\x0b\\x00\\x00\\xc1\\xd7\\xd9\\xc7\\xd1\\xc6\\xc3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-08-11T00:00:00", "modifydate": "2003-12-05T10:05:02", "lines": 15, "newlines": 11, "modlines": 0, "user": "APRGJFC"}, "text": "./ ADD NAME=F2PRINT  0100-03223-03223-0031-00010-00010-00000-FUSION\n//*                 INSTALLATION NOTE\n//* CHANGE THE JOB CARD TO YOUR SHOP STANDARDS.  LEAVE &USERX\n//* AS IT.  LEAVE &USERDSN AS IS.  THE FORMDEFS MAY DIFFER IN YOU\n//* SHOP.  CHANGE THE CLASS TO YOUR STANDARD.\n//&USERX  JOB 'PRINT',MSGLEVEL=(1,1),MSGCLASS=X,CLASS=F\n//GENER    EXEC PGM=IEBGENER\n//SYSUT1   DD   DSN=&USERDSN,DISP=SHR\n//NH42     OUTPUT FORMDEF=A10112,PAGEDEF=W240F3,CHARS=GT24\n//NV22     OUTPUT FORMDEF=A10111,PAGEDEF=W120C2,CHARS=GT20\n//LLTR  OUTPUT FORMDEF=A10110,PAGEDEF=A06462,CHARS=GT10,FORMS=STD\n//SYSUT2   DD SYSOUT=A,OUTPUT=*.LLTR,COPIES=1,\n//           DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200)\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSLOAD": {"ttr": 1805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x7f\\x01\\x01\\x15\\x7f\\x156\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2001-06-06T15:36:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SYSEXEC": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00!\\x01\\x03\"?\\x01\\x036/\"\\x07\\x02\\xe7\\x02\\xe3\\x00\\x00\\xc1\\xd7\\xd9\\xc7\\xd1\\xc6\\xc3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-08-11T00:00:00", "modifydate": "2003-12-28T22:07:21", "lines": 743, "newlines": 739, "modlines": 0, "user": "APRGJFC"}, "text": "./ ADD NAME=FUSION   0100-03223-03223-0031-00738-00738-00000-FUSION\n /*REXX*/\nCALL FUSIONSTART\nRETURN\n\nFUSIONSTART: PROCEDURE\nSTATUS = MSG('OFF')\n\"FREE DD (OUTDD, NEWDD, OLDDD, DELDD)\"\nPROCLIST = 'DISPLAY COMPAREA COMPAREB PCOMPAREA DELCOM'\n\n /*                  CONFIGURATION NOTE\n    IF PDSLOAD WAS CONFIGURED TO USE A HIGH LEVEL QUALIFIER OTHER\n    THAN FUSION THEN CHANGE REGDSN TO POINT TO THE DSN SPECIFIED.*/\nREGDSN = 'FUSION.CNTL'\nCALL CONFIGURATION\nTIBAPPX = ''\nTIBAPPY = ''\nZTITLE = 'FUSION USER SELECT SCREEN'\nCURPOS = 'PROGNAME'\nUSER = USERID()\nTIBPROG = ''\nENDKEY = 0\nRC = 0\nSP = '                                                               '\nMSGPOS = ''\nPCOMPAREA = 0\n\"ISPEXEC LIBDEF ISPMLIB DATASET ID('\"ISPMLIB\"') STACK\"\n\"ISPEXEC LIBDEF ISPPLIB DATASET ID('\"ISPPLIB\"') STACK\"\n\"ISPEXEC LIBDEF ISPSLIB DATASET ID('\"ISPSLIB\"') STACK\"\n\"ISPEXEC VGET (PROCOPT) profile\"\n\"ISPEXEC VGET (BASEDSN) profile\"\n\"ISPEXEC VGET (TIBDSN) profile\"\n\"ISPEXEC VGET (DESTDSN) profile\"\n\"ISPEXEC VGET (APPFUNC) profile\"\nIF pos(appfunc, 'MIGRATE MOVE MANSEL MASSMIG') = 0 THEN\n   APPFUNC = 'MIGRATE'\nCALL FLEX_SCREEN\nCALL PANEL_CONTROL\nDO WHILE \\ ENDKEY\n   ZEDLMSG = ''\n   GLOBAL_ERROR = ' '\n   CALL VERIFY\n   CALL LANGUAGE_TYPE\n   IF GLOBAL_ERROR = '' & \\ ENDKEY THEN do\n      IF APPFUNC = 'MANSEL' THEN DO\n         CALL MANUAL_SELECT\n         HOLDTIB = TIBDSN\n         TIBDSN = \"\"USER\".TEMP80\"\n         HOLDPROG = TIBPROG\n         TIBPROG = 'TEMPFILE'\n         \"FREE DD(NEWDD)\"\n         \"ALLOCATE DD(NEWDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n         END\n      CALL INITIATEC\n      CALL ALERT FUSIO013\n      IF POS('DISPLAY', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC EDIT DATASET,\n         ('\"DESTDSN\"(\"DESTPROG\")')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      IF POS('COMPAREA', PROCOPT) > 0 THEN DO\n         CALL ALERT FUSIO014\n         CALL COMPAREA\n         IF POS('PCOMPAREA', PROCOPT) > 0 THEN\n            CALL PRINTCOMP\n         END\n      IF POS('COMPAREB', PROCOPT) > 0 THEN DO\n         CALL ALERT FUSIO016\n         CALL COMPAREB\n         END\n      IF POS('COMPAREA', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC BROWSE DATASET ('\"USER\".SUPERC.LISTA')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      IF POS('COMPAREB', PROCOPT) > 0 THEN DO\n         \"ISPEXEC CONTROL DISPLAY SAVE\"\n         \"ISPEXEC BROWSE DATASET,\n         ('\"USER\".SUPERC.LISTB')\"\n         \"ISPEXEC CONTROL DISPLAY RESTORE\"\n         END\n      END\n   \"FREE DD (REPDD, NEWDD, OLDDD, OUTDD, DELDD)\"\n   IF APPFUNC = 'MANSEL' THEN DO\n      TIBDSN = HOLDTIB\n      TIBPROG = HOLDPROG\n      END\n   CALL PANEL_CONTROLA\n   END\n\"ISPEXEC VPUT (PROCOPT) profile\"\n\"ISPEXEC VPUT (BASEDSN) profile\"\n\"ISPEXEC VPUT (TIBDSN) profile\"\n\"ISPEXEC VPUT (DESTDSN) profile\"\n\"ISPEXEC VPUT (APPFUNC) profile\"\n\"ISPEXEC LIBDEF ISPMLIB\"\n\"ISPEXEC LIBDEF ISPPLIB\"\n\"ISPEXEC LIBDEF ISPSLIB\"\nRETURN\n\nFLEX_SCREEN:\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\nTFUNC = '                  FUSION - Module Version Integration System'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = 'Quick Help - Use PF7 and PF8 to navigate.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o BASE DSN - Dataset that has production source.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o UPDATED DSN - Dataset that has updated source such as'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   vendor fixes or programmer test code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o DESTINATION DSN - Dataset that will contain the FUSION'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   program merges.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o MODULE NAME - Name of the module to be updated.  If the'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   BASE module name is different from the UPDATED module name,'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   enter the BASE name followed by the TIB name.  The '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   DESTINATION name will be the BASE name. '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o APPLICATION FUNCTION - Valid functions include '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MANSEL - Allows manual selection of lines to migrate.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MASSMIG - Moves company modified code to base code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MIGRATE - Moves user selected code to base code.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '     MOVE - Moves user selected code to base without ',\n        'performing associated deletes.'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o PROCESS OPTIONS - Valid functions include '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC =  '     DISPLAY, COMPAREA, COMPAREAB, PCOMPAREA, and DELCOM'\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = ' o Enter one or more SI numbers to be migrated on the '\n\"ISPEXEC TBADD EZLIST\"\nTFUNC = '   2 available free format entry lines.'\n\"ISPEXEC TBADD EZLIST\"\n\"ISPEXEC TBTOP EZLIST\"\nRETURN\n\nMANUAL_SELECT:\nDROP TIBFILE.\nDROP OUT80.\nLOWVALUE = ' '\n\"ALLOCATE DD(MANSCAN) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n\"ALLOCATE DD(ALLOCDD) DSN('\"USER\".TEMP82') SPACE (9 9) CYLINDERS,\n   DSORG(PO) DIR(5) LRECL(82) BLKSIZE(3280) RECFM(F,B) MOD REUSE\"\n  \"FREE DD(ALLOCDD)\"\n\"ALLOCATE DD(ALLOCDD) DSN('\"USER\".TEMP80') SPACE (5 5) CYLINDERS,\n   DSORG(PO) DIR(5) LRECL(80) BLKSIZE(3200) RECFM(F,B) MOD REUSE\"\n  \"FREE DD(ALLOCDD)\"\n\"ALLOCATE DD(OUTSCAN) DSN('\"USER\".TEMP82(TEMPFILE)') SHR\"\n\"EXECIO * DISKR MANSCAN (STEM TIBFILE. FINIS\"\nDO MM = 1 TO TIBFILE.0\n   OUTFILE.MM = ' ' || LOWVALUE || TIBFILE.MM\n   END\n\"EXECIO * DISKW OUTSCAN (STEM OUTFILE. FINIS\"\n\"ISPEXEC CONTROL DISPLAY SAVE\"\nZSHADOW = '$$$$$$$$$$$$$$$$  '\n\"ISPEXEC EDIT DATASET,\n   ('\"USER\".TEMP82(TEMPFILE)')\"\n\"ISPEXEC CONTROL DISPLAY RESTORE\"\nDROP OUTFILE.\n\"EXECIO * DISKR OUTSCAN (STEM OUTFILE. FINIS\"\n\"FREE DD(OUTSCAN)\"\n\"ALLOCATE DD(OUTSCAN) DSN('\"USER\".TEMP80(TEMPFILE)') SHR\"\nDO MM = 1 TO TIBFILE.0\n   OUTLINE = SUBSTR(OUTFILE.MM,3,72)\n   IF SUBSTR(OUTFILE.MM,1,1) = 'S' THEN\n      OUTLINE = OVERLAY('EZSEL   ',OUTLINE,73,8)\n   OUT80.MM = OUTLINE\n   END\n\"EXECIO * DISKW OUTSCAN (STEM OUT80. FINIS\"\n\"FREE DD(OUTSCAN)\"\n\"FREE DD(MANSCAN)\"\nRETURN\n\nVERIFY:\nIF WORDS(PROGNAME) = 1 THEN DO\n   BASEPROG = PROGNAME\n   TIBPROG = PROGNAME\n   DESTPROG = PROGNAME\n   END\nELSE\n   IF WORDS(PROGNAME) = 2 THEN DO\n      BASEPROG = WORD(PROGNAME,1)\n      TIBPROG = WORD(PROGNAME,2)\n      DESTPROG = BASEPROG\n      END\n   ELSE\n      IF WORDS(PROGNAME) = 3 THEN DO\n         BASEPROG = WORD(PROGNAME,1)\n         TIBPROG = WORD(PROGNAME,2)\n         DESTPROG = WORD(PROGNAME,3)\n         END\nTIBLINE = TIBAPPX || ' ' || TIBAPPY\nMAXSI = WORDS(TIBLINE)\nIF XRC = 8,\n& GLOBAL_ERROR = ' ' THEN DO\n   ENDKEY = 1\n   RETURN\n   END\nDO SI = 1 TO MAXSI\n   IF LENGTH(WORD(TIBLINE,SI)) > 6 THEN DO\n     \"ISPEXEC SETMSG MSG(FUSIO009)\"\n      GLOBAL_ERROR = 'A'\n      LEAVE\n      END\n   END\nIF SYSDSN(\"'\"BASEDSN\"'\") <> \"OK\" THEN DO\n   \"ISPEXEC SETMSG MSG(FUSIO002)\"\n   GLOBAL_ERROR = 'A'\n   END\nELSE\n   IF SYSDSN(\"'\"TIBDSN\"'\") <> \"OK\" THEN DO\n      \"ISPEXEC SETMSG MSG(FUSIO003)\"\n      GLOBAL_ERROR = 'A'\n      END\n   ELSE\n      IF SYSDSN(\"'\"DESTDSN\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO004)\"\n         GLOBAL_ERROR = 'A'\n         END\n\nIF GLOBAL_ERROR = ' ' THEN DO\n   IF TIBPROG <> '' THEN DO\n      CHECK_MOD = \"\"BASEDSN\"(\"BASEPROG\")\"\n      IF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO005)\"\n         GLOBAL_ERROR = 'A'\n         END\n      ELSE NOP\n      CHECK_MOD = \"\"TIBDSN\"(\"TIBPROG\")\"\n      IF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN DO\n        \"ISPEXEC SETMSG MSG(FUSIO006)\"\n         GLOBAL_ERROR = 'A'\n         END\n      ELSE NOP\n      END\n   ELSE DO\n      \"ISPEXEC SETMSG MSG(FUSIO007)\"\n      GLOBAL_ERROR = 'A'\n      END\n   END\n\nIF APPFUNC \\ = '' THEN\n   IF POS(APPFUNC, 'MASSMIG MIGRATE MOVE MANSEL') = 0 THEN DO\n      \"ISPEXEC SETMSG MSG(FUSIO028)\"\n      GLOBAL_ERROR = 'A'\n      END\n\nIF PROCOPT \\ = '' THEN\n   DO KK = 1 TO WORDS(PROCOPT)\n      IF POS(WORD(PROCOPT,KK), PROCLIST) = 0 THEN DO\n         \"ISPEXEC SETMSG MSG(FUSIO029)\"\n         GLOBAL_ERROR = 'A'\n         END\n      END\n\nIF GLOBAL_ERROR = ' ' THEN DO\n   \"ALLOCATE DD(REPDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n   \"ALLOCATE DD(NEWDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n   \"ALLOCATE DD(OLDDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR\"\n   END\nRETURN\n\nINITIATEC:\nACTIVE_REPLACE = 0\nACTIVE = 'ACTIVE'\nCHGFILE. = ''\nOUTFILE. = ''\nDROP OUTREC.\nCALL ALERT FUSIO021\nCALL COMPAREI\nCALL ALERT FUSIO022\n\"EXECIO * DISKR DELDD (STEM CHGFILE. FINIS\"\nCNT = CHGFILE.0\nDO SI = 1 TO MAXSI\n   SINUM.SI = WORD(TIBLINE,SI)\n   END\nCALL ALERT FUSIO023\nOUTCOUNT = 1\nSPACES = '                                                            '\nDO II = 3 TO CNT\n   CHGFILE = CHGFILE.II\n   HIT_FIND = ''\n   IF substr(CHGFILE,1,1) = '*',\n   & pos('N-REF#', chgfile) > 0 then do\n      select\n         when substr(chgfile,2,4) = 'D-RF' then DO\n            ffunction = 'DELETE'\n            END\n         when substr(chgfile,2,4) = 'I-  ' then do\n            ffunction = 'INSERT'\n            active_replace = 0\n            end\n         when substr(chgfile,2,4) = 'I-RP' then DO\n            ffunction = 'INSERT-REPLACE'\n            IP = 1\n            j1 = 1\n            active_replace = 0\n            END\n         when substr(chgfile,2,4) = 'M-  ' then\n            ffunction = 'MERGE'\n         when substr(chgfile,2,4) = 'D-  ' then\n            ffunction = 'DELETE'\n         when substr(chgfile,2,4) = 'D-RP' then DO\n            if active_replace then\n               ffunction = 'DELETE-REPLACE'\n            else\n               ffunction = 'DELETE'\n            IP = 1\n            j1 = 1\n            END\n         otherwise ffunction = 'NONE'\n         end\n      end\n   else DO\n      select\n         when ffunction = 'INSERT' THEN\n            IF APPFUNC = 'MANSEL' THEN\n               IF SINUMP(SUBSTR(CHGFILE,1,77)) THEN DO\n                  OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n                  outcount = outcount + 1\n                  end\n               else nop\n            ELSE\n               IF SINUMP(SUBSTR(CHGFILE,1,72)) THEN do\n                  OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n                  outcount = outcount + 1\n                  end\n         when ffunction = 'INSERT-REPLACE' THEN do\n            IF APPFUNC = 'MANSEL' THEN\n               IF SINUMP(SUBSTR(CHGFILE,1,77)) THEN DO\n                  ACTIVE_REPLACE = 1\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '1'\n                  END\n               ELSE\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '0'\n            ELSE\n               IF SINUMP(SUBSTR(CHGFILE,1,72)) THEN DO\n                  ACTIVE_REPLACE = 1\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '1'\n                  END\n               else\n                  OUTREC.OUTCOUNT.IP.ACTIVE = '0'\n               OUTREC.OUTCOUNT.ip = SUBSTR(CHGFILE,1,72)\n               LASTINSERT = IP\n               ip = ip + 1\n               END\n         when ffunction = 'DELETE-REPLACE' THEN\n            call delete_process\n         when ffunction = 'DELETE' THEN do\n            OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n            outcount = outcount + 1\n            end\n         when ffunction = 'MERGE' THEN DO\n            OUTREC.OUTCOUNT = SUBSTR(CHGFILE,1,72)\n            OUTCOUNT = OUTCOUNT + 1\n            END\n         otherwise nop\n         end\n      end\n   end\nCALL ALERT FUSIO024\nCALL ALERT FUSIO025\nCALL UNSPOOL\n\"EXECIO * DISKW REPDD (STEM OUTFILE. FINIS\"\nRETURN\n\nunspool:\nI1 = 1\nDO I = 1 TO OUTCOUNT - 1\n   X = 1\n   DO while SUBSTR(OUTREC.I.X,1,6) \\ = 'OUTREC'\n      ACTIVE_LINE = OUTREC.I.X.ACTIVE\n      IF ACTIVE_LINE <> '1' THEN ACTIVE_LINE = 0\n      IF ACTIVE_LINE THEN DO\n         OUTFILE.I1 = OUTREC.I.X\n         I1 = I1 + 1\n         CALL DEL_STEM\n         END\n      else\n         CALL DEL_STEM\n      X = X + 1\n      END\n      OUTFILE.I1 = OUTREC.I\n      I1 = I1 + 1\n   END\nRETURN\n\ndel_stem:\nLASTa = OUTREC.I.X.1\nIF DATATYPE(LASTa) <> 'NUM' THEN LASTa = 1\nDO LL = 2 TO LASTa\n   OUTFILE.I1 = OUTREC.I.X.LL\n   I1 = I1 + 1\n   END\nreturn\n\ndelete_process:\nIF ACTIVE_REPLACE,\n&  APPFUNC \\ = 'MOVE' THEN do\n   NR = SUBSTR(CHGFILE,1,72)\n   NR = PROCESS_LISTA(NR)\n   OCOMMENT = COMMENT\n   DO\n      HOLDPENDING = J1\n      FOUNDINSERT = 0\n      DO J1 = HOLDPENDING TO LASTINSERT\n         NEWREC = OUTREC.OUTCOUNT.J1\n         ACTIVE_LINE = OUTREC.OUTCOUNT.J1.ACTIVE\n         IF ACTIVE_LINE <> '1' THEN ACTIVE_LINE = 0\n         COMPREC = PROCESS_LISTA(NEWREC)\n         NCOMMENT = COMMENT\n         IF FOUND_LINE(),\n         & ((NCOMMENT & \\ OCOMMENT),\n         | (NCOMMENT & OCOMMENT)) THEN DO\n            FOUNDINSERT = 1\n            LEAVE\n            END\n         ELSE\n            IF FOUND_LINE() THEN DO\n               HIT_FIND = 'PROBABLE'\n               FOUNDINSERT = 1\n               END\n         END\n      IF FOUNDINSERT THEN\n         IF HIT_FIND = 'EXACT' THEN NOP\n         ELSE\n            IF HIT_FIND = 'PROBABLE' THEN\n               IF POS('DELCOM',PROCOPT) > 0 THEN NOP\n               ELSE\n                  CALL PROCESS_INSERT\n            ELSE nop\n      ELSE DO\n         J1 = LASTINSERT\n         HIT_FIND = 'ABSOLUTE'\n         CALL PROCESS_INSERT\n         J1 = HOLDPENDING\n         END\n      END\n   END\nELSE DO\n   J1 = 1\n   CALL PROCESS_INSERT\n   END\nreturn\n\nPROCESS_INSERT:\nHJ1 = J1\nIF TIBTYPE = 'COBOL' THEN CSTART = 7\nELSE CSTART = 1\nLAST = OUTREC.OUTCOUNT.J1.1\nIF DATATYPE(LAST) <> 'NUM' THEN LAST = 2\nELSE LAST = LAST + 1\nOUTREC.OUTCOUNT.J1.1 = LAST\nOUTREC.OUTCOUNT.J1.LAST = SUBSTR(CHGFILE,1,72)\nJ1 = HJ1\nRETURN\n\nFOUND_LINE:\nFOUND = 0\nhIT_FIND = ''\nIF pos(nr, COMPREC) > 0,\n& nr <> '',\n&  ACTIVE_LINE then do\n   INDEX_D = pos(nr, COMPREC)\n   IF NR <> '*' THEN\n      ABBREV_LINE = SUBSTR(COMPREC,INDEX_D,LENGTH(NR))\n   IF ABBREV_LINE = NR THEN FOUND = 1\n   HIT_FIND = 'EXACT'\n   END\nRETURN FOUND\n\nPROCESS_LISTA:\nARG NEWREC\nCOMMENT = 0\nIF TIBTYPE = 'COBOL' THEN\n   COMPREC = SUBSTR(NEWREC,7,66)\nELSE\n   COMPREC = SUBSTR(NEWREC,1,72)\nIF SUBSTR(COMPREC,1,1) = '*' THEN DO\n   COMMENT = 1\n   COMPREC = COMPRESS(COMPREC)\n   END\nELSE\n   COMPREC = COMPRESS(COMPREC)\nCOMPREC = STRIP(COMPREC,'B')\nRETURN COMPREC\n\nSINUMP:\nARG REC\nFOUND = 0\nINITIAL = 0\nIF APPFUNC = 'MASSMIG' THEN DO\n   FOUND = 1\n   RETURN FOUND\n   END\nIF APPFUNC <> 'MANSEL' THEN\n   IF TIBTYPE = 'COBOL' THEN DO\n      DO I = 1 TO MAXSI\n         IF pos(sinum.i, SUBSTR(REC,1,12)) > 0 THEN DO\n            FOUND = 1\n            LEAVE\n            END\n         END\n      IF \\ FOUND & ACTIVE_REPLACE & REC = '' THEN FOUND = 1\n      END\n   ELSE\n      DO I = 1 TO MAXSI\n         IF pos(SINUM.I, rec) > 0 THEN DO\n            FOUND = 1\n            LEAVE\n            END\n         END\nELSE\n   IF SUBSTR(REC,73,5) = 'EZSEL' THEN FOUND = 1\nRETURN FOUND\n\nCOMPAREI:\nDELETE \"'\"USER\".SUPERC.UPDATE'\"\nDELETE \"'\"USER\".SUPERC.LIST'\"\n\"ALLOCATE DD(DELDD) DSN('\"USER\".SUPERC.UPDATE') SPACE (5000 1000)\",\n          \"BLKSIZE(1600) RECFM(V,B) MOD\"\nINFILE. = ''\nCHANGE_FILE. = ''\nCHECK_MOD = USER || '.EZTOOLS.CNTL' || '(' || 'SYSIN' || ')'\nIF SYSDSN(\"'\"CHECK_MOD\"'\") <> \"OK\" THEN\n   CALL SYSIN_CARD\n\"ALLOCATE DD(OUTDD) DUMMY\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(LONGL LINECMP \",\n                  \"UPDLDEL,,' ')\"\n\"FREE DD(SYSIN)\"\nRETURN\n\nCOMPAREA:\nDELETE \"'\"USER\".SUPERC.LISTA'\"\n\"FREE DD (OUTDD, NEWDD, OLDDD, DELDD)\"\n\"ALLOCATE DD(NEWDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n\"ALLOCATE DD(OLDDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR\"\n\"ALLOCATE DD(OUTDD) DSN('\"USER\".SUPERC.LISTA') SPACE (900 900),\n    BLKSIZE(3325) MOD RECFM(F,B) LRECL(133) MOD REUSE\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(CHNGL,LINECMP)\"\n\"FREE DD (SYSIN)\"\nRETURN\n\nCOMPAREB:\nADDRESS TSO\nDELETE \"'\"USER\".SUPERC.LISTB'\"\n\"FREE DD (OUTDD, DELDD, SYSIN, NEWDD, OLDDD)\"\n\"ALLOCATE DD(NEWDD) DSN('\"DESTDSN\"(\"DESTPROG\")') SHR\"\n\"ALLOCATE DD(OLDDD) DSN('\"TIBDSN\"(\"TIBPROG\")') SHR\"\n\"ALLOCATE DD(OUTDD) DSN('\"USER\".SUPERC.LISTB') SPACE (900 90),\n          BLKSIZE(1600) MOD\"\n\"ALLOCATE DD(DELDD) DUMMY\"\n\"ALLOCATE DD(SYSIN) DSN('\"USER\".EZTOOLS.CNTL(SYSIN)') SHR REUSE\"\n\"ISPEXEC SELECT PGM(ISRSUPC) PARM(DELTAL,CHNGL,LINECMP)\"\nRETURN\n\nCOMPRESS: PROCEDURE\nARG REC, OPTION\nNR = ''\nREC = TRANSLATE(REC,' ','().')\nNWORD = WORDS(REC)\nSTART = 1\nDO NREP = START TO NWORD\n   IF WORD(REC,NREP) = 'F' THEN NR = NR || 'FILLER'\n   ELSE\n      NR = NR || WORD(REC,NREP)\n   END\nRETURN NR\n\nALERT:\nARG SHOWMSG\n\"ISPEXEC SETMSG MSG(\"SHOWMSG\")\"\n\"ISPEXEC CONTROL DISPLAY LOCK\"\nCALL MESSAGE\n\"ISPEXEC TBADD EZLIST\"\n\"ISPEXEC TBTOP EZLIST\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nRETURN\n\nMESSAGE:\nTFUNC = ''\nIF ZEDLMSG <> '' THEN TFUNC = ZEDLMSG\nELSE\n   SELECT\n      WHEN SHOWMSG = 'FUSIO013' THEN\n         TFUNC = ' o EDITING FILE'\n      WHEN SHOWMSG = 'FUSIO014' THEN\n         TFUNC = ' o INITIATING COMPARISON A'\n      WHEN SHOWMSG = 'FUSIO016' THEN\n         TFUNC = ' o INITIATING COMPARISON B'\n      WHEN SHOWMSG = 'FUSIO021' THEN\n         TFUNC = ' o FUSION COMPARE'\n      WHEN SHOWMSG = 'FUSIO022' THEN\n         TFUNC = ' o READING DIFFERENCES FILE'\n      WHEN SHOWMSG = 'FUSIO023' THEN\n         TFUNC = ' o COMPARISON ANALYSIS'\n      WHEN SHOWMSG = 'FUSIO024' THEN\n         TFUNC = ' o MERGING RESULTS'\n      WHEN SHOWMSG = 'FUSIO025' THEN\n         TFUNC = ' o REWRITING FILE'\n      OTHERWISE NOP\n      END\nRETURN\n\nINDICATOR:\n\"ISPEXEC SETMSG MSG(\"SHOWMSG\")\"\n\"ISPEXEC CONTROL DISPLAY LOCK\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nRETURN\n\nPRINTCOMP:\nUSERDSN = \"\"USER\".SUPERC.LISTA\"\nCALL PRINTPAGE\nRETURN\n\nSYSIN_CARD:\n\"ALLOCATE DD(JOB6) DSN('\"USER\".EZTOOLS.CNTL(\"SYSIN\")') SHR REUSE\"\nL. = \"\"\nL.1 = \"CMPCOLMN 1:72\"\nL.2 = \"CMPCOLMO 1:72\"\nL.3 = \"\"\n\"EXECIO * DISKW \"JOB6\" (STEM L. FINIS\"\n\"FREE DD(JOB6)\"\nRETURN\n\nPRINTPAGE: PROCEDURE EXPOSE USER\nARG TNARR\nUSERX = USER || 'X'\n\"ISPEXEC VGET ZTEMPF\"\n\"ISPEXEC FTOPEN TEMP\"\n\"ISPEXEC FTINCL F2PRINT\"\n\"ISPEXEC FTCLOSE\"\n\"SUBMIT '\"ZTEMPF\"'\"\nRETURN\n\nPANEL_CONTROL:\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nXRC = RC\nIF RC = 8 THEN ENDKEY = 1\n\"ISPEXEC TBCLOSE EZLIST\"\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\nRETURN\n\nPANEL_CONTROLA:\n\"ISPEXEC TBCLOSE EZLIST\"\n\"ISPEXEC TBCREATE EZLIST NAMES(TFUNC) NOWRITE\"\n\"ISPEXEC TBDISPL EZLIST PANEL(FUSIONP)\"\nXRC = RC\nIF RC = 8 THEN ENDKEY = 1\nRETURN\n\nCONFIGURATION:\nIF SYSDSN(\"'\"REGDSN\"(FUSNCONf)'\") \\ = 'OK' THEN DO\n   SAY 'CONFIGURATION NOT NOT FOUND'\n   RETURN\n   END\n\"ALLOCATE DD(SYSDD) DSN('\"REGDSN\"(FUSNCONf)') SHR REUSE\"\n\"EXECIO * DISKR SYSDD (STEM CONFIGURE. FINIS\"\n\"FREE DD(SYSDD)\"\nDO RR = 1 TO CONFIGURE.0\n   INTERPRET \"\"CONFIGURE.RR\"\"\n   END\nRETURN\n\nLANGUAGE_TYPE:\nIF GLOBAL_ERROR = '' & \\ ENDKEY THEN DO\n   CALL ALERT FUSIO012\n   \"ALLOCATE DD(TYPEDD) DSN('\"BASEDSN\"(\"BASEPROG\")') SHR REUSE\"\n   EOF = 0\n   \"EXECIO 1 DISKR TYPEDD (FIFO\"\n   IF RC = 2 THEN EOF = 1\n   ELSE PULL VER_RECORD\n   TYPE_VERIFIED = 0\n   DO WHILE \\ (TYPE_VERIFIED | EOF)\n      IF SUBSTR(VER_RECORD,7,1) <> '*',\n      &  SUBSTR(VER_RECORD,1,1) <> '*' THEN\n         IF (INDEX(VER_RECORD,'IDENTIFICATION') > 0,\n         &  INDEX(VER_RECORD,'DIVISION') > 0),\n         |  INDEX(VER_RECORD,' PIC ') > 0,\n         |  INDEX(VER_RECORD,'MOVE') > 0,\n         |  INDEX(VER_RECORD,'PERFORM') > 0,\n         |  INDEX(VER_RECORD,'REDEFINES') > 0 THEN DO\n            TIBTYPE = 'COBOL'\n            TYPE_VERIFIED = 1\n            END\n         ELSE\n            IF INDEX(VER_RECORD,'DFHMDF') > 0 THEN DO\n               TIBTYPE = 'MAPS'\n               TYPE_VERIFIED = 1\n               END\n            ELSE\n               IF WORDPOS('PROC',VER_RECORD) > 0,\n               |  INDEX(VER_RECORD,'MSGCLASS') > 0 THEN DO\n                  TIBTYPE = 'JCL'\n                  TYPE_VERIFIED = 1\n                  END\n               ELSE\n                  IF INDEX(VER_RECORD,'CSECT') > 0,\n                  |  INDEX(VER_RECORD,'DSECT') > 0,\n                  |  INDEX(VER_RECORD,'PMSREGS') > 0,\n                  |  INDEX(VER_RECORD,'NOGEN') > 0,\n                  |  INDEX(VER_RECORD,'ORG') > 0 THEN DO\n                     TIBTYPE = 'ASSEMBLER'\n                     TYPE_VERIFIED = 1\n                     END\n                  ELSE\n                     IF INDEX(VER_RECORD,'GENIF') > 0,\n                     |  (INDEX(VER_RECORD,'HERE') > 0,\n                     &  INDEX(VER_RECORD,'CALLED') > 0) THEN DO\n                        TIBTYPE = 'GENEDIT'\n                        TYPE_VERIFIED = 1\n                        END\n                     ELSE\n                        IF INDEX(VER_RECORD,'AIDS') > 0 THEN DO\n                           TIBTYPE = 'AIDS'\n                           TYPE_VERIFIED = 1\n                           END\n         \"EXECIO 1 DISKR TYPEDD (FIFO\"\n         IF RC = 2 THEN EOF = 1\n         ELSE PULL VER_RECORD\n         END\n      IF \\ TYPE_VERIFIED THEN TIBTYPE = 'UNKNOWN'\n      \"EXECIO 0 DISKR TYPEDD (FIFO FINIS\"\n      \"FREE DD(TYPEDD)\"\n      ZEDLMSG = \"DETECTED \"TIBTYPE\" LANGUAGE\"\n      CALL ALERT FUSIO010\n      ZEDLMSG = ''\n      END\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT644/FILE644.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT644", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}