{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012532000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE652.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE652.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x11'", "DS1TRBAL": "b':\\xd6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x9e\\x00\\x06\\x04\\x9e\\x00\\t\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\tE\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:45:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-463"}, "text": "REGULAR CBT TAPE - VERSION 463    FILE:  652\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT463.FILE652\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 899 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/24/03    09:45:16    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00!\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t1\\x00\\x12\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:31:21", "lines": 18, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "INSTALLATION INSTRUCTIONS\n\n 1) Edit the ASMFIND member of this PDS\n      a) Update the JOBCARD\n      b) Change the data set name(S) in the ASM PROC in the JCL\n         The data set name should be the name of this PDS.\n         Leave the '(&name)' as is\n      c) Change the data set name on the link edit SYSLMOD DD statement.\n 2) Edit member FIND03 to define the \"types\" and DDNAMEs and data set\n    names you want FIND to search.\n 3) Submit member ASMFIND.\n 4) copy FIND, FIND2, UPDATE, and UPDATE2 to a CLIST/REXX library\n    available to your (or your user's) TSO session.\n 5) You should be ready to go.\n\n\nOTHER NOTES\n The programs DO NOT need to be APF authorized\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE1": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t5\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:35:17", "lines": 26, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "I have been back in the MVS area for a couple of months.  While I\nwas \"away\" working on unix systems,  Phillips Petroleum and\nCONOCO merged.  We are running \"our\" systems and \"their\" system\nin different LPARs.  We used different data set names for PROCs,\nCLISTS, REXX execs,etc.  I found myself having to look at which\ndata sets were allocated to my TSO logon, or PROCLIBs were being\nused by JES, etc.\n\nI wrote a utility that makes finding thing a lot easier.  CSECT\nFIND03 needs to be customized for each system.  After FIND03 has\nbeen customized and the utility has been assembled and\nlink-edited, the FIND, FIND2, UPDATE, and UPDATE2 REXX execs need\nto be made available to anyone who would need to use them.\n\nNow all I have to do is enter \"find proc someproc\".  The program\nsearches the correct libraries for the system I am using and when\n(and if) it finds the member, it takes me directly into SPF\nbrowse.  I don't have to remember which data sets to search.  You\ncan define any kind of \"type\" that makes sense for you.  Since\nyou are taken directly to SPF browse or SPF edit, the data sets\nneed to be a form that are browse-able or edit-able.\n\nThe source code, macros, ASSEMBLY JCL, and same REXX execs are\nabout 800 lines.  Would you or anyone else be interested in this?\n\nRichard\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE652": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\tD\\x00\\n\\x00\\n\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:44:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "CBT-463"}, "text": "//***FILE 652 is from Richard Rice and contains a system to find    *   FILE 652\n//*           members in the correct libraries, when you have       *   FILE 652\n//*           multiple MVS systems accessible to TSO.  You want     *   FILE 652\n//*           to be able to customize the search libraries for      *   FILE 652\n//*           each MVS system, so you find whichever member is      *   FILE 652\n//*           appropriate for the system you are on (and not for    *   FILE 652\n//*           some other MVS system that is in your shop).          *   FILE 652\n//*                                                                 *   FILE 652\n//*           email:  Richard.L.Rice@conocophillips.com             *   FILE 652\n//*                                                                 *   FILE 652\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMFIND": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x007\\x007\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "RLRICE"}, "text": "//............. YOUR JOBCARD ..............................\n//ASM      PROC NAME=,\n//             AP=,\n//             LIST='SYSOUT=*,FCB=2'\n//ASM      EXEC PGM=IEV90,COND=(4,LT),\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   &LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPUNCH DD   DSN=&&OBJ(&NAME),DISP=(OLD,PASS)\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=.... THIS PDS.......,DISP=SHR\n//SYSIN    DD   DSN=.... THIS PDS(&NAME),DISP=SHR\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ALLOCATE TEMP OBJECT LIBRARY                            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ALLOC    EXEC PGM=IEFBR14\n//OBJ      DD DSN=&&OBJ,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//FIND01   EXEC ASM,NAME=FIND01\n//FIND02   EXEC ASM,NAME=FIND02\n//FIND03   EXEC ASM,NAME=FIND03\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK                                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINK     EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,MAP',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=&&OBJ,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DSN=.... YOUR LINKLIB ....,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(FIND01)\n  ALIAS UPDATE\n  NAME FIND(R)\n  INCLUDE SYSLIB(FIND03)\n  ENTRY FIND03\n  NAME FIND03(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIND": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "RLRICE"}, "text": "/* REXX ------------------------------------------------------------ */\n/*  find                                                             */\n/* ----------------------------------------------------------------- */\n\nIF SYSVAR('SYSISPF') \u00ac= 'ACTIVE'  THEN DO\n/*  MAKE A RECURSIVE CALL TO THIS EXEC TO INVOKE THE SPF ENVIRONMENT */\n   \"SPF CMD(%FIND\" OPT \")\"\n   RETURN 0\nEND\n\nADDRESS TSO ISPEXEC \"CONTROL ERRORS RETURN\"\nADDRESS TSO ISPEXEC \"SELECT  CMD(FIND2 \" OPT\")  NEWAPPL(FIND)\"\n\nRETURN 4\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINDREQ": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x00\\x15\\x00\\x15\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "RLRICE"}, "text": "         MACRO\n         FINDREQ  &DSECT='YES'\n         AIF   (T'&DSECT EQ 'O').DSECT\n         AIF   ('&DSECT' EQ 'YES').DSECT\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n         MNOTE 12,'DSECT MUST BE YES OR NO'\n         MEXIT\n.DSECT   ANOP\nFINDREQ  DSECT\n         AGO   .COMM\n.NODSECT ANOP\nFINDREQ  DS    0H\n.COMM    ANOP\nFINDNBR  DS    H                     MAX # TO RETURN/# RETURNED\nFINDSTAT DS    X\n$FINDOK  EQU   X'01'\n$FINDNF  EQU   X'02'                 DDNAME NOT FOUND IN TIOT\n$FINDOVF EQU   X'03'                 OUTPUT AREA OVERFLOWED\nFINDDDNM DS    CL8                   DDNAME\nFINDDSNM DS    0CL44                 RETURNED DATASET NAME(S)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIND01": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x01\\xfd\\x01\\xfd\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 509, "newlines": 509, "modlines": 0, "user": "RLRICE"}, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*     This utility is to aid in finding \"things\".                    *\n*                                                                    *\n*     Usage is: FIND|UPDATE  type   name                             *\n*       Valid \"type\"s are defined in CSECT FIND03.                   *\n*       \"types\" should be limited to PDSs with members that can      *\n*       be viewed or updated via SPF (SPF options 1 and 2).          *\n*                                                                    *\n*       name is the member name                                      *\n*                                                                    *\n*                                                                    *\n*     The idea here is to allow a user to enter a command like:      *\n*        \"FIND PROC XYZJCL\" or \"FIND MACRO OPEN\".                    *\n*                                                                    *\n*     CSECT FIND03 defines the valid \"types\".                        *\n*     For each \"type\", you may define DDnames and/or data set names. *\n*     The program will search the data sets allocated to any DDnames *\n*     then the specific data sets.                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nFIND     CSECT\n         ENTRY FIND\n         ENTRY UPDATE\n         USING DSNCDSCT,R6         DEFINE BASE\n         USING S99RB,R5            DEFINE BASE\n         USING FIND,R15\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LA    R10,(FIND-FIND)     OFFSET OF ENTRY POINT\n         B     INIT0010            SKIP EYECATHER, DATE, AND TIME\nUPDATE   DS    0H\n         USING UPDATE,R15\n         STM   R14,R12,12(R13)\n         LA    R10,(UPDATE-FIND)   OFFSET OF ENTRY POINT\n         B     INIT0010\nINIT0000 DS    0H\n         DC    CL8'FIND  '         MODULE'S NAME\n         DC    C'&SYSDATE'         DATE OF ASSEMBLY\n         DC    C'&SYSTIME'         TIME OF ASSEMBLY\nINIT0010 DS    0H\n         LR    R12,R15             COPY BASE\n         SR    R12,R10             MINUS ENTRY POINT OFFSET\n         DROP  R15\n         USING FIND,R12            DEFINE BASE\n         LR    R11,R1              COPY CPPL ADDRESS\n         USING CPPL,R11            DEFINE CPPL BASE\n*--------------------------------------------------------------------*\n*       ACQUIRE STORAGE FOR WORK AREA                                *\n*--------------------------------------------------------------------*\n         GETMAIN R,LV=SPFWORKL\n         LR    R2,R1               CLEAR WORK AREA - SET ADDRESS 1\n         LA    R3,SPFWORKL                         - SET LENGTH 1\n         SR    R4,R4                               - SET ADDRESS 2\n         SR    R5,R5                               - SET LENGTH 2\n         MVCL  R2,R4               INITIALIZE WORK AREA\n         USING SPFWORK,R1          DEFINE BASE\n         ST    R13,SPFSAVE+4       SAVE CALLER'S REGISTER 13\n         ST    R1,8(R13)           CHAIN OUR WORK AREA TO CALLER'S\n         LR    R13,R1              SET WORK AREA BASE\n         DROP  R1\n         USING SPFWORK,R13         RE-DEFINE WORK AREA BASE\n         LTR   R10,R10             COMMAND 'FIND'?\n         BZ    INIT0020            YES\n         MVC   SPFCMD,=CL8'EDIT'   SET SPF COMMAND TO 'EDIT'\n         B     INIT0030\nINIT0020 DS    0H\n         MVC   SPFCMD,=CL8'BROWSE' SET COMMAND TO BROWSE\n*--------------------------------------------------------------------*\n*        PARSE OUT THE TYPE AND MEMBER NAME                          *\n*--------------------------------------------------------------------*\nINIT0030 DS    0H\n         XC    WORKEP,WORKEP       CLEAR THE TYPE TABLE EP ADDR\n         XC    WORKDSNC,WORKDSNC   CLEAR THE DATASET NAME CHAIN\n         MVC   WORKDCB(PDSDCBL),PDSDCBI\n         MVC   WORKOPEN(OPENL),OPENI\n         MVC   WORKTYPE,BLANKS     INITIALIZE MEMBER TYPE\n         MVC   WORKMEM,BLANKS      INITIALIZE MEMBER NAME\n         L     R9,CPPLCBUF         COMMAND BUFFER ADDRESS\n         LH    R1,0(R9)            LENGTH\n         BCTR  R1,0\n         EX    R1,UPPRTR           TRANSLATE TO UPPERCASE\n         LH    R7,0(R9)            DATA LENGTH\n         CLI   2(R9),X'00'         TWO LENGTHS PRESENT?\n         BE    INIT0040            YES\n         LA    R8,2(R9)            DATA ADDRESS IN BUFFER\n         B     PROC0000\nINIT0040 DS    0H\n         LA    R8,4(R9)            DATA ADDRESS\n         SH    R7,H4               MINUS 4\nPROC0000 DS    0H\n         CLI   0(R8),C' '          BLANK?\n         BNE   PROC0010            NO\n         LA    R8,1(R8)            NEXT\n         BCT   R7,PROC0000         LOOP\n         LM    R0,R1,MSG01PRM      SET REGS FOR TPUT\n         BAL   R10,TPUT0000        ISSUE TPUT\n         B     EXIT0000            AND EXIT\nPROC0010 DS    0H\n         MVC   WORKTYPE,BLANKS     SET TO BLANKS\n         LA    R1,WORKTYPE         OUTPUT AREA ADDRESS\n         SR    R2,R2               USE R2 TO CALCULATE LENGTH OF TYPE\nPROC0020 DS    0H\n         CLI   0(R8),C' '          BLANK?\n         BE    PROC0040            YES\n         CH    R2,H8               TYPE TOO LONG?\n         BE    ERR0040             YES\n         MVC   0(1,R1),0(R8)       COPY TO OUTPUT\n         LA    R1,1(R1)            NEXT IN OUTPUT\n         LA    R8,1(R8)            NEXT IN BUFFER\n         LA    R2,1(R2)            PLUS 1\n         BCT   R7,PROC0020         LOOP\n         LM    R0,R1,MSG03PRM      SET REGS FOR MESSAGE\n         BAL   R10,TPUT0000        ISSUE MESSAGE\n         B     EXIT0000\nPROC0040 DS    0H\n         CLC   =C'FIND',WORKTYPE   COMMAND?\n         BE    PROC0000            SKIP\n         CLC   =C'UPDATE',WORKTYPE COMMAND?\n         BE    PROC0000            SKIP\nPROC0050 DS    0H\n         CLI   0(R8),C' '          BLANK?\n         BNE   PROC0060            NO\n         LA    R8,1(R8)            NEXT\n         BCT   R7,PROC0050         LOOP\n         LM    R0,R1,MSG03PRM      SET REGS FOR MESSAGE\n         BAL   R10,TPUT0000        ISSUE MESSAGE\n         B     EXIT0000            NO MEMBER NAME\nPROC0060 DS    0H\n         LA    R1,WORKMEM          OUTPUT AREA ADDRESS\n         SR    R2,R2               USE TO COUNT NAME LENGTH\nPROC0070 DS    0H\n         CLI   0(R8),C' '          BLANK?\n         BE    PROC0080            YES\n         CH    R2,H8               TOO LONG?\n         BE    ERR0050             YES\n         MVC   0(R1,R1),0(R8)      COPY TO OUTPUT\n         LA    R1,1(R1)            NEXT IN OUTPUT\n         LA    R8,1(R8)            NEXT IN BUFFER\n         LA    R2,1(R2)            ADD 1 TO LENGTH\n         BCT   R7,PROC0070\n*--------------------------------------------------------------------*\n*        FIND THE TYPE IN THE TYPETBLE (FIND03)                      *\n*--------------------------------------------------------------------*\nPROC0080 DS    0H\n         LOAD  EP=FIND03           LOAD THE TYPE DEFINITIONS\n         LR    R9,R0               SAVE THE ENTRY POINT\n         ST    R9,WORKEP           SAVE TABLE ENTRY POINT\n         USING TYPETBLE,R9         DEFINE BASE\n         SR    R1,R1               CLEAR REGISTER\nPROC0090 DS    0H\n         CLI   TYPELEN,X'FF'       END OF TABLE?\n         BE    ERR0010             YES.. BAD TYPE\n         CLC   WORKTYPE,TYPETYPE   FOUND THE TYPE?\n         BE    PROC0100            YES\n         ICM   R1,3,TYPELEN        LENGTH OF THIS ENTRY\n         AR    R9,R1               NEXT ENTRY\n         B     PROC0090            LOOP\nPROC0100 DS    0H\n         LA    R7,TYPEDDS          FIRST DD NAME\n         SR    R8,R8               CLEAR REGISTER\n         ICM   R8,3,TYPE#DDS       NUMBER OF DD NAMES\n         BZ    PROC0140            NONE\nPROC0110 DS    0H\n         MVC   FINDDDNM,0(R7)      COPY DDNAME\n         LA    R1,FIND#            MAX DSN'S TO RETURN\n         STCM  R1,3,FINDNBR        SET MAXIMUM NBR TO RETURN\n         LA    R1,FINDREQ          REQUEST BLOCK ADDRESS\n         L     R15,VFIND02         FIND02 ENTRY POINT\n         BALR  R14,R15             FIND DSN'S ALLOCATED TO THE DD\n         CLI   FINDSTAT,$FINDOK    LOCATED?\n         BNE   PROC0130            NO\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,FINDNBR        NUMBER OF DSN'S RETURNED\n         BZ    CHAIN120            NONE\n         LA    R3,FINDDSNM         FIRST DSN RETURNED\nPROC0120 DS    0H\n         BAL   R10,CHAIN000        ADD DSN TO CHAIN\n         LA    R3,L'FINDDSNM(,R3)  NEXT DATASET\n         BCT   R2,PROC0120         ADD ALL FOUND TO CHAIN\nPROC0130 DS    0H\n         LA    R7,L'TYPEDDS(,R7)   NEXT DD NAME\n         BCT   R8,PROC0110         PROCESS ALL DDNAMES\n*---------------------------------------------------------------------*\n*                                                                     *\n*    All DD's in the \"TYPE\" definition have been processed.           *\n*    Now add any \"standard\" dataset names.                            *\n*                                                                     *\n*    R7 will already be pointing to the first dataset name.           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC0140 DS    0H\n         ICM   R8,3,TYPEDSNS       NUMBER OF DATASETS FROM 'TYPE' TBLE\n         BZ    PROC0160            NONE.. GO LIST THE CHAIN\nPROC0150 DS    0H\n         LR    R3,R7               COPY ADDRESS\n         BAL   R10,CHAIN000        ADD IT TO THE CHAIN\n         LA    R7,44(,R7)          NEXT DATASET NAME\n         BCT   R8,PROC0150         PROCESS THEM ALL\nPROC0160 DS    0H\n         ICM   R6,15,WORKDSNC      FIRST DATASET BLOCK\n         BZ    ERR0020             NOTHING ON THE CHAIN\nPROC0170 DS    0H\n         MVC   DAIRDSN,DSNCDSN     COPY DATASET NAME\n         MVC   DAIRMEM,WORKMEM     COPY MEMBER NAME\n         BAL   R10,DAIR0000        ALLOCATE THE DATASET\n         OC    S99ERROR,S99ERROR   SUCCESSFUL?\n         BNZ   PROC0220            NO\n         OPEN  (WORKDCB,INPUT),MF=(E,WORKOPEN)\n         FIND  WORKDCB,WORKMEM,D\n         LR    R2,R15              SAVE THE RETURN CODE\n         CLOSE WORKDCB,MF=(E,WORKCLS)\n         BAL   R10,DAIR1000        DE-ALLOCATE THE PDS\n         OC    S99ERROR,S99ERROR   DE-ALLOCATE SUCCESSFUL?\n         BNZ   ERR0030             NO\n         LTR   R2,R2               MEMBER LOCATED?\n         BNZ   PROC0220            NO, CHECK NEXT DATASET\n         MVI   WORKDSM,C' '\n         MVC   WORKDSM+1(L'WORKDSM-1),WORKDSM\n         MVI   WORKDSM,C''''       INSERT QUOTE\n         MVC   WORKDSM+1(L'DAIRDSN),DAIRDSN\n         LA    R1,WORKDSM          FIRST BYTE OF DSN\n         LA    R2,L'WORKDSM        MAXIMUM LENGTH\nPROC0180 DS    0H\n         CLI   0(R1),C' '          BLANK?\n         BE    PROC0190            YES\n         LA    R1,1(R1)            NEXT\n         BCT   R2,PROC0180         LOOP\n         ABEND 2,DUMP,,USER\nPROC0190 DS    0H\n         MVI   0(R1),C'('          INSERT OPEN PARENTHESIS\n         MVC   1(8,R1),WORKMEM     INSERT MEMBER NAME\nPROC0200 DS    0H\n         CLI   0(R1),C' '          BLANK?\n         BE    PROC0210            YES\n         LA    R1,1(R1)            NEXT\n         BCT   R2,PROC0200\n         ABEND 3,DUMP,,USER\nPROC0210 DS    0H\n         MVI   0(R1),C')'          CLOSING PARENTHESIS\n         mvi   1(r1),c''''         set closing quote\n         LA    R1,SPFCMD           ADDRESS OF SPF SERVICE NAME\n         ST    R1,SPFPRM1          SET ADDRESS\n         LA    R1,WORKDSM          DATASET NAME\n         ST    R1,SPFPRM2          SET SET ADDRESS\n         OI    SPFPRM2,X'80'       FLAG END-OF-LIST\n         LOAD  EP=ISPLINK          LOAD SPF INTERFACE\n         LR    R15,R0              COPY ENTRY POINT\n         LA    R1,SPFPRM1          ADDRESS OF PARM LIST\n         BALR  R14,R15             LINK TO SPF\n         DELETE EP=ISPLINK\n         B     EXIT0000\nPROC0220 DS    0H\n         ICM   R6,15,DSNCNEXT      NEXT ON CHAIN\n         BNZ   PROC0170            DISPLAY ALL OF 'EM\n         LM    R0,R1,MSG08PRM\n         BAL   R10,TPUT0000\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*        R3  is the address of the new DSN to add                     *\n*        R5  is used as a work register                               *\n*        R6  is the base for the DSNCDSCT DSECT                       *\n*        R10 is the return address                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCHAIN000 DS    0H\n         LA    R5,WORKDSNC\nCHAIN110 DS    0H\n         ICM   R6,15,0(R5)\n         BZ    CHAIN130            NOTHING ON CHAIN\nCHAIN120 DS    0H\n         CLC   DSNCDSN,0(R3)       DATASET NAME ALREADY PRESENT?\n         BE    CHAIN140            YES\n         LA    R5,DSNCNEXT\n         B     CHAIN110            CHECK ENTIRE CHAIN\nCHAIN130 DS    0H\n         GETMAIN R,LV=DSNCL\n         ST    R1,0(R5)            CHAIN TO PREVIOUS BLOCK\n         LR    R6,R1               COPY LAST BLOCK'S ADDRESS\n         XC    DSNCNEXT,DSNCNEXT   ZERO POINTER\n         MVC   DSNCDSN,0(R3)       COPY DATASET NAME\nCHAIN140 DS    0H\n         BR    R10\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDAIR0000 DS    0H\n         LA    R5,DAIRRB\n         ST    R5,DAIRRBA          SET ADDRESS\n         OI    DAIRRBA,X'80'       SET HIGH BIT (REQUIRED BY SVC 99)\n         MVI   S99RBLN,S99RBEND-S99RB\n         MVI   S99VERB,S99VRBAL    SET VERB (ALLOCATE)\n         MVC   DAIRDDNP(6),DDNTXTP SET DDNAME TEXT NAMES/LENGTH\n         MVC   DAIRDSNP(6),DSNTXTP SET DSN TEXT NAMES/LENGTH\n         MVC   DAIRMEMP(6),MEMTXTP    SET MEMBER NAME TEXT NAMES/LEN\n         MVC   DAIRIDSP(6),IDSPTXTP   SET INITIAL DISP TEXT NAMES/LEN\n         MVC   DAIRNDSP(6),NDSPTXTP   SET NORMAL DISP TEXT NAMES/LEN\n         MVC   DAIRDDN,=CL8'FIND'  SET DDNAME\n         MVI   DAIRIDP,X'08'       INITIAL DISP (SHR)\n         MVI   DAIRNDP,X'08'       NORMAL DISP STATUS (SHR)\n         LA    R1,DAIRDDNP         ADDRESS OF DDNAME TEXT UNIT INFO\n         ST    R1,DAIRTXT1         SET TEXT UNIT 1 ADDRESS\n         LA    R1,DAIRDSNP         ADDRESS OF DDNAME TEXT UNIT INFO\n         ST    R1,DAIRTXT2         SET TEXT UNIT 2 ADDRESS\n         LA    R1,DAIRIDSP         ADDRESS OF INITIAL DISP TEXT UNIT\n         ST    R1,DAIRTXT3         SET TEXT UNIT 4 ADDRESS\n         LA    R1,DAIRNDSP         ADDRESS OF NORMAL DISP TEXT UNIT\n         ST    R1,DAIRTXT4         SET TEXT UNIT 5 ADDRESS\n         OI    DAIRTXT4,X'80'      FLAG END OF LIST\n         LA    R1,DAIRTXT1         TEXT UNIT 1 ADDRESS\n         ST    R1,S99TXTPP         SET TEXT UNIT LIST ADDRESS\n         OI    S99TXTPP,X'80'\n         LA    R1,DAIRRBA          SET POINTER-TO-POINTER\n         DYNALLOC                  ISSUE SVC\n         BR    R10\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDAIR1000 DS    0H\n         LA    R5,DAIRRB\n         ST    R5,DAIRRBA          SET ADDRESS\n         OI    DAIRRBA,X'80'       SET HIGH BIT (REQUIRED BY SVC 99)\n         MVI   S99RBLN,S99RBEND-S99RB\n         MVI   S99VERB,S99VRBUN    SET VERB (DE-ALLOCATE)\n         MVC   DAIRDDNP(6),DDNTXTP SET DDNAME TEXT NAMES/LENGTH\n         MVC   DAIRDDN,=CL8'FIND'  SET DDNAME\n         LA    R1,DAIRDDNP         ADDRESS OF DDNAME TEXT UNIT INFO\n         ST    R1,DAIRTXT1         SET TEXT UNIT 1 ADDRESS\n         OI    DAIRTXT1,X'80'      FLAG END OF LIST\n         LA    R1,DAIRTXT1         ADDRESS OF DDNAME TEXT UNIT INFO\n         ST    R1,S99TXTPP         SET TEXT UNIT LIST ADDRESS\n         OI    S99TXTPP,X'80'\n         LA    R1,DAIRRBA          SET POINTER-TO-POINTER\n         DYNALLOC                  ISSUE SVC\n         BR    R10\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nTPUT0000 DS    0H\n         TPUT  (1),(0)             ISSUE TPUT\n         BR    R10                 RETURN\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nERR0010  DS    0H\n         LM    R0,R1,MSG06PRM      INVALID TYPE\n         BAL   R10,TPUT0000        ISSUE MESSAGE\n         TPUT  WORKTYPE,8\n         B     EXIT0000\nERR0020  DS    0H\n         LM    R0,R1,MSG07PRM      NO DATASETS FOUND\n         BAL   R10,TPUT0000        ISSUE MESSAGE\n         B     EXIT0000\nERR0030  DS    0H\n         ABEND 1,DUMP,,USER\nERR0040  DS    0H\n         LM    R0,R1,MSG02PRM      SET REGS FOR MESSAGE\n         BAL   R10,TPUT0000        ISSUE TPUT\n         B     EXIT0000\nERR0050  DS    0H\n         LM    R0,R1,MSG05PRM      MEMBER NAME TOO LONG\n         BAL   R10,TPUT0000        ISSUE MESSAGE\n         B     EXIT0000            EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         LR    R1,R13\n         L     R13,SPFSAVE+4\n         LA    R0,SPFWORKL\n         FREEMAIN R,A=(R1),LV=(R0)\n         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS\n         SR    R15,R15             SET RETURN CODE\n         BR    R14                 GET THE 'ELL OUTTA HERE\n*---------------------------------------------------------------------*\nUPPRTR   TR    0(0,R9),UPPRTAB\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n*             CONSTANTS/LITERALS                                      *\n*---------------------------------------------------------------------*\nVFIND02  DC    V(FIND02)\nPDSDCBI  DCB   DSORG=PO,                                               +\n               DDNAME=FIND,                                            +\n               MACRF=R\nPDSDCBL  EQU   *-PDSDCBI\nOPENI    OPEN  (PDSDCBI,INPUT),MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE PDSDCBI,MF=L\nCLOSEL   EQU   *-CLOSEI\nMSG01PRM DC    A(MSG01L),A(MSG01)\nMSG02PRM DC    A(MSG02L),A(MSG02)\nMSG03PRM DC    A(MSG03L),A(MSG03)\nMSG05PRM DC    A(MSG05L),A(MSG05)\nMSG06PRM DC    A(MSG06L),A(MSG06)\nMSG07PRM DC    A(MSG07L),A(MSG07)\nMSG08PRM DC    A(MSG08L),A(MSG08)\nH4       DC    H'4'\nH8       DC    H'8'\nMSG01    DC    C'FIND0101E No library type or member given'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'FIND0102E Library type too long (8 characters max)'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C'FIND0103E No member name given'\nMSG03L   EQU   *-MSG03\nMSG05    DC    C'FIND0105E Member name too long'\nMSG05L   EQU   *-MSG05\nMSG06    DC    C'FIND0106E Invalid library type'\nMSG06L   EQU   *-MSG06\nMSG07    DC    C'FIND0107E Could not determine any data sets to search'\nMSG07L   EQU   *-MSG07\nMSG08    DC    C'FIND0108I Member not found'\nMSG08L   EQU   *-MSG08\n*---------------------------------------------------------------------*\nDDNTXTP  DC    AL2(DALDDNAM),AL2(1),AL2(8)\nDSNTXTP  DC    AL2(DALDSNAM),AL2(1),AL2(44)\nMEMTXTP  DC    AL2(DALMEMBR),AL2(1),AL2(8)\nIDSPTXTP DC    AL2(DALSTATS),AL2(1),AL2(1)\nNDSPTXTP DC    AL2(DALNDISP),AL2(1),AL2(1)\nBLANKS   DC    CL8' '\n         SPACE 1\nUPPRTAB  DS    0C\n         DC    X'000102030405060708090A0B0C0D0E0F'\n         DC    X'101112131415161718191A1B1C1D1E1F'\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'\n         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         LTORG\n*---------------------------------------------------------------------*\n*        GETMAINED WORKAREA                                           *\n*---------------------------------------------------------------------*\nSPFWORK  DSECT\nSPFSAVE  DS    18F                 REGISTER SAVE AREA\n*---------------------------------------------------------------------*\nWORKEP   DS    F                   ENTRY POINT ADDRESS OF FIND03\nWORKDSNC DS    F                   DATA SET NAME CHAIN ANCHOR\n*---------------------------------------------------------------------*\nWORKDCB  DS    (PDSDCBL)X\nWORKOPEN DS    (OPENL)X\nWORKCLS  DS    (CLOSEL)X\n*---------------------------------------------------------------------*\nSPFPRM1  DS    A\nSPFPRM2  DS    A\nSPFPRM3  DS    A\nSPFCMD   DS    CL8\n*---------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION PARAMETERS                                *\n*---------------------------------------------------------------------*\nDAIRRBA  DS    A                   SVC 99 REQUEST BLOCK ADDRESS\nDAIRRB   DS    (S99RBEND-S99RB)X   SVC 99 REQUEST BLOCK\nDAIRTXT1 DS    A                   SVC 99 TEXT UNIT 1 ADDRESS\nDAIRTXT2 DS    A                   SVC 99 TEXT UNIT 2 ADDRESS\nDAIRTXT3 DS    A                   SVC 99 TEXT UNIT 3 ADDRESS\nDAIRTXT4 DS    A                   SVC 99 TEXT UNIT 4 ADDRESS\nDAIRTXT5 DS    A                   SVC 99 TEXT UNIT 5 ADDRESS\nDAIRDDNP DS    AL2,AL2,AL2         DDNAME TEXT UNIT INFO\nDAIRDDN  DS    CL8                 DDNAME\nDAIRDSNP DS    AL2,AL2,AL2         DATASET NAME TEXT UNIT INFO\nDAIRDSN  DS    CL44                DATASET NAME\nDAIRMEMP DS    AL2,AL2,AL2         MEMBER NAME TEXT UNIT INFO\nDAIRMEM  DS    CL8                 MEMBER NAME\nDAIRIDSP DS    AL2,AL2,AL2         INITIAL DISP TEXT UNIT INFO\nDAIRIDP  DS    X                   INITIAL DISP\nDAIRNDSP DS    AL2,AL2,AL2         NORMAL DISP TEXT UNIT INFO\nDAIRNDP  DS    X                   NORMAL DISP\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nWORKTYPE DS    CL8                 TYPE OF LIBRARY TO SEARCH\n         DS    CL2                 .. OVERFLOW\nWORKMEM  DS    CL8                 MEMBER TO SEARCH FOR\n         DS    CL2                 .. OVERFLOW\nWORKDSM  DS    CL80\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         FINDREQ DSECT=NO\n         DS    20CL44\nFIND#    EQU   (*-FINDDSNM)/(L'FINDDSNM)\nSPFWORKL EQU   *-SPFWORK\n*---------------------------------------------------------------------*\nTYPETBLE DSECT\nTYPELEN  DS    AL2                 LENGTH OF THIS ENTRY\nTYPE#DDS DS    AL2                 NUMBER OF DD NAMES\nTYPEDSNS DS    AL2                 NUMBER OF DATASET NAMES\nTYPETYPE DS    CL8                 TYPE\nTYPEDDS  DS    0CL8                FIRST DD\n*---------------------------------------------------------------------*\nDSNCDSCT DSECT\nDSNCNEXT DS    A                   NEXT BLOCK ON THE CHAIN\nDSNCDSN  DS    CL44                DATASET NAME\nDSNCL    EQU   *-DSNCDSCT\n*---------------------------------------------------------------------*\n         EJECT\n         IKJCPPL\n         IEFZB4D0\n         IEFZB4D2\n         COPY  REGEQU\n         END   FIND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FIND02": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x00q\\x00q\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 113, "newlines": 113, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*     This program searchs the TIOT for a given DDname.               *\n*                                                                     *\n*     If the DDname is found in the TIOT, the data set name(s)        *\n*     allocated to the DD (up to 20) will be returned.                *\n*                                                                     *\n*     The parameters are passed via an area mapped by FINDREQ.        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFIND02   CSECT\nFIND02   AMODE 24\nFIND02   RMODE 24\n         USING FIND02,R12\n         USING FIND02,R11\n         STM   R14,R12,12(R13)       SAVE REGS\n         LR    R12,R15               SET BASE REG\n         B     FIND0000              SKIP EYECATCHER\n         DC    CL8'FIND02'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nFIND0000 DS    0H\n         LR    R11,R1                SAVE PARM ADDRESS\n         USING FINDREQ,R11           DEFINE BASE\n         GETMAIN RU,LV=WORKL         OBTAIN WORK AREA\n         ST    R13,4(R1)             CHAIN CALLER'S SAVE AREA TO OURS\n         ST    R1,8(R13)             CHAIN OUR SAVE AREA TO CALLER'S\n         LR    R13,R1                SET SAVE AREA ADDRESS\n         USING WORK,R13              DEFINE BASE\n* ------------------------------------------------------------------- *\n*         SCAN TIOT                                                   *\n* ------------------------------------------------------------------- *\n         MVI   FINDSTAT,X'00'        SET RETURN CODE\n         LA    R10,FINDDSNM          DATASET NAME(S)\n         LH    R9,FINDNBR            MAXIMUM DD'S TO RETURN\n         LTR   R9,R9                 NUMBER TO RETURN ZERO?\n         BZ    ERR0010               YES\n         XC    FINDNBR,FINDNBR       SET RETURNED TO ZERO\n         USING PSA,R0                DEFINE BASE\n         L     R1,PSATNEW            MY TCB'S ADDRESS\n         USING TCB,R1                DEFINE TCB BASE\n         L     R2,TCBTIO             TIOT ADDRESS\n         USING TIOT1,R2              DEFINE BASE\n         LA    R3,TIOENTRY           FIRST TIOT ENTRY\n         USING TIOENTRY,R3           DEFINE BASE\n         SR    R4,R4                 CLEAR FOR LENGTHS\nFIND0010 DS    0H\n         ICM   R4,1,TIOELNGH         LENGTH OF THIS ENTRY\n         BZ    ERR0020               END OF TABLE\n         CLC   TIOEDDNM,FINDDDNM     CORRECT DDNAME?\n         BE    FIND0030              YES\n         AR    R3,R4                 NEXT\n         B     FIND0010              LOOP\nFIND0020 DS    0H\n         ICM   R4,1,TIOELNGH         LENGTH OF THIS ENTRY\n         BZ    EXIT0000              END OF TABLE\n         CLC   TIOEDDNM,BLANKS       BLANK DD NAME?\n         BNE   EXIT0000              NO\nFIND0030 DS    0H\n         MVI   FINDSTAT,$FINDOK      THINGS ARE LOOKING GOOD\n         BCT   R9,FIND0040           ONE LESS SLOT AVAILABLE\n         MVI   FINDSTAT,$FINDOVF     OUTPUT AREA OVERFLOWED\n         B     EXIT0000\nFIND0040 DS    0H\n         SR    R1,R1                 CLEAR REGISTER\n         ICM   R1,7,TIOEJFCB         JFCB ADDRESS\n         LA    R1,16(,R1)            ADJUST THE ADDRESS\n         USING INFMJFCB,R1           DEFINE BASE\n         MVC   0(L'FINDDSNM,R10),0(R1) COPY DATASET NAME\n         LA    R10,L'FINDDSNM(,R10)  NEXT IN OUTPUT\n         LH    R1,FINDNBR            NUMBER RETURNED\n         LA    R1,1(,R1)             PLUS 1\n         STH   R1,FINDNBR            UPDATE THE NUMBER\n         AR    R3,R4                 NEXT TIOT ENTRY\n         B     FIND0020              LOOP\nERR0010  DS    0H\n         MVI   FINDSTAT,X'FF'        ERROR IN PARAMETERS\n         B     EXIT0000              EXIT\nERR0020  DS    0H\n         MVI   FINDSTAT,$FINDNF      DDNAME NOT FOUND\nEXIT0000 DS    0H\n         LR    R1,R13\n         L     R13,4(R13)            RESTORE REGISTER 13                ASE01670\n         FREEMAIN RU,A=(1),LV=WORKL\n         LM    R14,R12,12(R13)       RESTORE ALL OTHER REGISTERS        ASE01680\n         SR    R15,R15               GIVE GOOD RETURN CODE              ASE01690\n         BR    R14                   RETURN TO CALLER                   ASE01700\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nBLANKS   DC    CL8' '\n*---------------------------------------------------------------------*\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nWORK     DSECT\nWORKSAVE DS    18F\nWORKL    EQU   *-WORK\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         FINDREQ DSECT=YES\n*---------------------------------------------------------------------*\n*              EQUATES                                                *\n*---------------------------------------------------------------------*\n         COPY REGEQU\n         IHAPSA LIST=NO\n         IKJTCB LIST=NO\n         IEFTIOT1\nJFCB     DSECT\n         IEFJFCBN LIST=YES\n         END  FIND02\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FIND03": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x00;\\x00;\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "RLRICE"}, "text": "         MACRO\n         MYMAC &TYPE=,&DD=,&DSN=\n         LCLA  &I1,&I2\n         AIF   (T'&TYPE EQ 'O').NOTYPE\nS&SYSNDX DS    0C\n         DC    AL2(E&SYSNDX-S&SYSNDX)  LENGTH OF THIS ENTRY\n&I1      SETA  N'&DD\n&I2      SETA  N'&DSN\n         DC    AL2(&I1)                NUMBER OF DD'S\n         DC    AL2(&I2)                NUMBER OF DSN'S\n         DC    CL8'&TYPE'              TYPE NAME\nDDS&SYSNDX DS  0C\n         AIF   (T'&DD EQ 'O').LBL0020\n&I1      SETA  1\n.LBL0010 ANOP\n         DC    CL8'&DD(&I1)'\n         AIF   (&I1 EQ N'&DD).LBL0020\n&I1      SETA  &I1+1\n         AGO   .LBL0010\n.LBL0020 ANOP\nDDE&SYSNDX  DS 0C\nDSNS&SYSNDX DS 0C\n         AIF   (T'&DSN EQ 'O').LBL0040\n&I2      SETA  1\n.LBL0030 ANOP\n         DC    CL44'&DSN(&I2)'\n         AIF   (&I2 EQ N'&DSN).LBL0040\n&I2      SETA  &I2+1\n         AGO   .LBL0030\n.LBL0040 ANOP\nDSNE&SYSNDX DS 0C\nE&SYSNDX    DS 0C\n         MEXIT\n.NOTYPE  MNOTE 12,'TYPE IS REQUIRED'\n         MEND\n*---------------------------------------------------------------------*\n*                                                                     *\n*      Define \"types\" searchable by the FIND|EDIT utility             *\n*                                                                     *\n*---------------------------------------------------------------------*\nFIND03   CSECT\n\n*        DEFINE  'CLIST'\n         MYMAC TYPE=CLIST,                                             +\n               DD=(SYSPROC,ISPCLIB),                                   +\n               DSN=(SYS1.MVSCMD)\n\n\n*        DEFINE  'PROC'\n         MYMAC TYPE=PROC,                                              +\n               DSN=(SYS1.IPROCLIB,SYS1.PROCLIB)\n\n\n*        DEFINE  'MACRO'\n         MYMAC TYPE=MACRO,                                             +\n               DSN=(SYS1.MACLIB,SYS1.MODGEN)\n*---------------------------------------------------------------------*\n         DC    X'FF'\n         END   FIND03\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FIND2": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x00\\x0f\\x00\\x0f\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "RLRICE"}, "text": "/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* This assumes TSOPLUS is running                                   */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n ADDRESS TSO ALLOC \"FI(STEPLIBX) DA('YOUR LINKLIB'  ***) SHR REUSE\"\n SAVELIBX=TSOPEXT\n\n ADDRESS TSO ISPEXEC \"SELECT PGM(FIND) PARM(\" OPT \")\"\n\n IF SAVELIBX = ' ' THEN\n   ADDRESS TSO FREE \"FI(STEPLIBX)\"\n ELSE\n   ADDRESS TSO ALLOC \"FI(STEPLIBX) DA(\" SAVELIBX \") SHR RUSE\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEQU": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x00\\x10\\x00\\x10\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "RLRICE"}, "text": "R0        EQU   0\nR1        EQU   1\nR2        EQU   2\nR3        EQU   3\nR4        EQU   4\nR5        EQU   5\nR6        EQU   6\nR7        EQU   7\nr8        equ   8\nR9        EQU   9\nR10       EQU   10\nR11       EQU   11\nR12       EQU   12\nR13       EQU   13\nR14       EQU   14\nR15       EQU   15\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UPDATE": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "RLRICE"}, "text": "/* REXX ------------------------------------------------------------ */\n/*  find                                                             */\n/* ----------------------------------------------------------------- */\n\nIF SYSVAR('SYSISPF') \u00ac= 'ACTIVE'  THEN DO\n/*  MAKE A RECURSIVE CALL TO THIS EXEC TO INVOKE THE SPF ENVIRONMENT */\n   \"SPF CMD(%FIND\" OPT \")\"\n   RETURN 0\nEND\n\nADDRESS TSO ISPEXEC \"CONTROL ERRORS RETURN\"\nADDRESS TSO ISPEXEC \"SELECT  CMD(UPDATE2 \" OPT\")  NEWAPPL(FIND)\"\n\nRETURN 4\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UPDDATE2": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03)\\x7f\\x01\\x03)\\x7f\\t0\\x00\\x11\\x00\\x11\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-24T00:00:00", "modifydate": "2003-10-24T09:30:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "RLRICE"}, "text": "/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* THIS EXPECTS TSOPLUS TO BE ACTIVE                                 */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n TRACE R\n\n ADDRESS TSO ALLOC \"FI(STEPLIBX) DA('RLRICE.TESTLINK' ***) SHR REUSE\"\n SAVELIBX=TSOPEXT\n\n ADDRESS TSO ISPEXEC \"SELECT PGM(UPDATE) PARM(\" OPT \")\"\n\n IF SAVELIBX = ' ' THEN\n   ADDRESS TSO FREE \"FI(STEPLIBX)\"\n ELSE\n   ADDRESS TSO ALLOC \"FI(STEPLIBX) DA(\" SAVELIBX \") SHR RUSE\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT652/FILE652.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT652", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}