{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011125000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 529074, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE044.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE044.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x07'", "DS1TRBAL": "b'r\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00T\\x00\\x03\\x00T\\x00\\x0c\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04X\\x00U\\x01\\x14\\x15/\\x01\\x14\\x15/\\x13#\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf8@@@'", "ispf": {"version": "04.88", "flags": 0, "createdate": "2014-06-01T00:00:00", "modifydate": "2014-06-01T13:23:55", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-488"}, "text": "REGULAR CBT TAPE - VERSION 488    FILE:  044\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT488.FILE044\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 16 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,513 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/01/14    13:23:54    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x94\\x08\\x1f\\x00\\x94\\x08\\x1f\\x12\\x08\\x00\\n\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1994-03-22T00:00:00", "modifydate": "1994-03-22T12:08:00", "lines": 10, "newlines": 6, "modlines": 0, "user": "SBGCSC"}, "text": "$$INDEX     THIS MEMBER\n$$NOTES     RANDOM REMARKS CONCERNING ASMTOZAP\n$ASMHJCL    SAMPLE JCL--ASSEMBLE SOURCE IN ASMTOZAP FORMAT, GET SYSPRINT\n$ASMTJCL    SAMPLE JCL--RUN ASMTOZAP FROM MACHINE READABLE ASM SYSPRINT\n$DOC        ASMTOZAP DOCUMENTATION\nASMTOZAF    UTILITY TO BUILD ZAPS FROM ASSEMBLER LISTING - FOR PL1/F\nASMTOZAP    UTILITY TO BUILD ZAPS FROM ASSEMBLER LISTING - FOR OPTIMIZER\nHG00102     ASMTOZAP OUTPUT ZAP FOR TIMERZAP BELOW\nPL1LFCL     PL1/F COMPILE AND LINKEDIT JCL FOR ASMTOZAF\nTIMERZAP    OPTIONAL LOCAL MOD IN ASMTOZAP FORMAT (SEE MPOPTION)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTES": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x004\\x00\\x94\\x08\\x1f\\x01\\x13!o\\x17G\\x00\\x0f\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1994-03-22T00:00:00", "modifydate": "2013-08-04T17:47:34", "lines": 15, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "03/22/94 - LOAD MODULE ON FILE 035 WAS COMPILED WITH PL/1 OPTIMIZER\n           VERSION 1.3.  THEREFORE IT WILL RUN WITH THAT TRANSIENT\n           LIBRARY AND ANYTHING HIGHER.  IT IS TO OUR ADVANTAGE TO\n           HAVE THIS OLD ASMTOZAP LOAD MODULE, FOR SHOPS WHICH HAVEN'T\n           BOUGHT NEWER VERSIONS OF THE PL/1 TRANSIENT LIBRARY.\n\n08/04/13 - GERHARD POSTPISCHIL MADE A REWORK OF ASMTOZAP IN ASSEMBLER.\n           I HAVE CALLED IT ASMTOZAG IN THIS PDS.  ASMTOZAG NEEDS THE\n           MEMBER SUBLPALK TO BE ASSEMBLED ALONG WITH IT, AND IT NEEDS\n           33 MACROS (MEMBER ASMTOMAC) TO ASSEMBLE CLEANLY.  THE ENTIRE\n           JOB HAS BEEN PACKAGED AS MEMBER ASMTOZA$ (ASSEMBLY-LINKEDIT\n           JCL).  I MYSELF HAVEN'T TESTED IT, SO I CAN'T VOUCH FOR IT.\n           BUT IT'S PRESENTED HERE FOR YOU TO TRY.  ORIGINAL MATERIALS\n           CAME FROM CBT FILES 860 AND 861.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ASMHJCL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00F\\x00\\x94\\x08\\x0f\\x01\\x13!o\\x18\\x07\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1994-03-21T00:00:00", "modifydate": "2013-08-04T18:07:46", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGCSCH JOB (A006,SYTM,99,99),S-GOLOB,\n//        CLASS=Q,MSGCLASS=V,NOTIFY=&SYSUID\n/*DIST ROOM-25\n//ASMHC    PROC  MAC='SYS1.MODGEN',                                     ASMHC\n//         MAC1='SYS1.MACLIB',                                          ASMHC\n//         MAC2='SYS1.AMODGEN',                                         ASMHC\n//         MAC3='SYS1.ATSOMAC',                                         ASMHC\n//         OUT='*',                                                     ASMHC\n//         REG=4M                                                       ASMHC\n//*                                                                     ASMHC\n//*        ASSEMBLER H PROC - ASSEMBLE (COMPILE) ONLY                   ASMHC\n//*                                                                     ASMHC\n//ASM      EXEC  PGM=IEV90,                                             ASMHC\n//*        PARM='OBJECT,NODECK',                                        ASMHC\n//         REGION=&REG                                                  ASMHC\n//SYSLIB   DD  DSN=&MAC,DISP=SHR                                        ASMHC\n//         DD  DSN=&MAC1,DISP=SHR                                       ASMHC\n//         DD  DSN=&MAC2,DISP=SHR                                       ASMHC\n//         DD  DSN=&MAC3,DISP=SHR                                       ASMHC\n//SYSPUNCH DD  DUMMY                                                    ASMHC\n//SYSUT1   DD  DSN=&&SYSUT1,                                            ASMHC\n//             UNIT=VIO,                                                ASMHC\n//             SPACE=(CYL,(05,01))                                      ASMHC\n//SYSPRINT DD  SYSOUT=&OUT                                              ASMHC\n//*                                                                     ASMHC\n//   PEND\n//S01ASM EXEC ASMHC\n//SYSIN  DD DISP=SHR,DSN=SBGOLOB.FILE369.PDS(LM01603)\n//SYSPRINT DD DISP=SHR,DSN=SBGOLOB.ASMOUT(ZAPINO)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ASMTJCL": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x854\\x7f\\x00\\x94\\x08\\x1f\\x11D\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1985-12-13T00:00:00", "modifydate": "1994-03-22T11:44:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SBGCSC"}, "text": "//SBGCSCZ JOB (A006,SYTM,99,99),S-GOLOB,REGION=8M,\n//        CLASS=S,MSGCLASS=V,NOTIFY=&SYSUID\n/*DIST ROOM-25\n//******************************************************************//\n//*   ASMTOZAP EXECUTION - FILE 044 OF CBT367 TAPE                 *//\n//******************************************************************//\n//*\n//COPY1   EXEC PGM=ASMTOZAP\n//STEPLIB  DD  DISP=SHR,DSN=SBGCSC.A.LOAD\n//*        DD  DISP=SHR,DSN=SBGCSC.PPILIB   <== PL/1 LIB IF NECESSARY\n//SYSPRINT DD  SYSOUT=*\n//PL1DUMP  DD  SYSOUT=*\n//IN       DD  DISP=SHR,DSN=SBGCSC.ASMOUT(ZAPINO)   <== LRECL=121\n//OUT      DD  DISP=SHR,DSN=SBGCSC.ZAPOUT(ZAPOUTF)  <== LRECL=80\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x87)\\x0f\\x00\\x94\\x08\\x9f\\x15\\x05\\x00N\\x00I\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1987-10-17T00:00:00", "modifydate": "1994-03-30T15:05:00", "lines": 78, "newlines": 73, "modlines": 0, "user": "SBGCSC"}, "text": "                          ASMTOZAP\n\n*  TESTED WITH IBM HIGH-LEVEL ASSEMBLER - 03/30/94 - (S.GOLOB)\n*  TESTED WITH ASSEMBLER H VERS 2\n*  TESTED WITH ASSEMBLER H VERS 2 + SLAC MODS @8908 PUT LEVEL\n*  PL1/F VERSION TESTED WITH THE ABOVE.\n\n   ASMTOZAP IS A UTILITY WHICH READS AN ASSEMBLER LISTING AND PRODUCES\nAMASPZAP CONTROL CARDS.  THIS ALLOWS NON-TRIVIAL PATCHES TO BE WRITTEN\nIN ASSEMBLER LANGUAGE WITH FULL USE OF SYMBOLIC REFERENCES, DSECTS, AND\nMACROS.  CODE IS POSITIONED AT THE CORRECT OFFSETS BY USE OF ORG.\nSYMBOLIC ADDRESSES CAN BE GENERATED BY ORG, OR FAKED BY EQU, OR COPYED,\nETC.  THERE IS LESS ROOM FOR ERROR, IMPROVED LEGIBILITY, AND CONVERSION\nFROM ONE RELEASE TO ANOTHER USUALLY INVOLVES ONLY CHANGING A FEW ORG'S\nTO REFLECT THE NEW ADDRESSES OF THE PATCH AREA OR ZAPPED INSTRUCTIONS.\n\n   THERE ARE FOUR CONTROL CARDS WHICH ARE INCLUDED IN THE ASSEMBLER\nSOURCE AS COMMENTS WITH '*ZAP' IN COLUMNS 1-4.\n\n*ZAP CARD ZAP STATEMENTS\n     EVERYTHING AFTER THE WORD 'CARD' IS REPRODUCED IN THE\n     OUTPUT DATASET.  THIS IS USED TO PRODUCE NAME, DUMP,\n     DUMPT, ++PTF, ++VER, ++ZAP, OR EXPAND CARDS.\n     EXAMPLE:\n     *ZAP CARD NAME IGG0003B IGG0003B\n     *ZAP CARD DUMP IGG0003B\n\n*ZAP START VER | REP    <SELECT EITHER VER OR REP>\n     THIS MARKS THE BEGINNING OF A SECTION OF ASSEMBLER\n     LANGUAGE WHICH IS TO BE PROCESSED BY ASMTOZAP.\n     ASSEMBLER COMMENT CARDS, ASSEMBLER CONTROL CARDS\n     (PRINT, ORG, ETC.), MACRO REFERENCES, AND OTHER LINES\n     WHICH DO NOT GENERATE DATA WILL GENERATE ZAP COMMENT\n     CARDS.  IF NEITHER VER NOR REP IS SPECIFIED, THE\n     DEFAULT IS THE OPTION SPECIFIED ON THE PREVIOUS *ZAP\n     START CARD.  VER OR REP MUST BE SPECIFIED BEFORE THE\n     FIRST DATA GENERATING LINE IS ENCOUNTERED.  MACHINE\n     INSTRUCTIONS OR DC INSTRUCTIONS IN MAINLINE CODE OR IN\n     MACRO EXPANSIONS ARE DATA GENERATING.\n\n*ZAP PAUSE\n     THIS INHIBITS PROCESSING OF ASSEMBLER STATEMENTS UNTIL\n     THE NEXT *ZAP START CARD IS ENCOUNTERED.  INITIALLY\n     PROCESSING IS IN THE PAUSE'D STATE.\n\n*ZAP STOP\n     THIS TERMINATES ASMTOZAP PROCESSING.  THIS CARD IS\n     NECESSARY.  AN END-OF-FILE ON INPUT IS REGARDED AS AN\n     ERROR.\n\n   THE FOLLOWING HELPFUL HINTS ARE PROVIDED FOR POTENTIAL\nUSERS:\n\n     1) SPECIFY 'PRINT DATA'.  ANY OTHER SETTING OF PRINT IS\n         PROBABLY WRONG.\n     2) WHEN POSSIBLE, WRITE THE ASSEMBLER CODE AS A REAL\n         PROGRAM WHICH CAN ACTUALLY RUN.  THIS HELPS YOU TO\n         DEBUG THE ZAP BEFORE IT IS APPLIED.  IF THIS IS NOT\n         POSSIBLE, TRY TO INCLUDE SUGGESTIONS FOR EXECUTING\n         SECTIONS OF THE CODE UNDER TSO TEST.  REMEMBER TO\n         PAUSE PROCESSING BEFORE SECTIONS OF CODE INTENDED\n         ONLY FOR DEBUGGING.\n     3) PUT ALL THE VER SECTIONS FIRST - NOTE THAT THE\n         ASSEMBLER WILL OVERWRITE CODE IF ORG SETS THE\n         LOCATION COUNTER BACK, SO THIS SCHEME FOR VER AND\n         THEN REP CODE WILL LEAVE THE NEW INSTRUCTIONS WHERE\n         THEY ARE SUPPOSED TO BE DURING ASSEMBLER DEBUGGING.\n     4) GATHER ALL SENSITIVE MODULE OFFSETS TOGETHER AS A\n         SEQUENCE OF EQU STATEMENTS AT THE BEGINNING OF THE\n         ASSEMBLER SOURCE.  THESE OFFSETS ARE THE MOST\n         LIKELY TARGET OF SUBSEQUENT MAINTENANCE, AND\n         PUTTING THEM ALL TOGETHER MAKES IT VERY EASY TO\n         RECOVER FROM SUBSEQUENT IBM PTF'S.\n\n   FOR AN EXAMPLE OF THE USE OF ASMTOZAP, EXAMINE THE MEMBER\nTIMERZAP IN THE SOURCE LIB. THIS WOULD BE RUN THROUGH THE ASSEMBLER\nAND THE SYSPRINT OUTPUT USED AS INPUT TO ASMTOZAP TO REPRODUCE\nTHE HG00102 PTF.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE044": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04X\\x00H\\x01\\x14\\x15/\\x01\\x14\\x15/\\x13#\\x008\\x008\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf8@@@'", "ispf": {"version": "04.88", "flags": 0, "createdate": "2014-06-01T00:00:00", "modifydate": "2014-06-01T13:23:48", "lines": 56, "newlines": 56, "modlines": 0, "user": "CBT-488"}, "text": "//***FILE 044 is from Yale University and contains a copy of        *   FILE 044\n//*           ASMTOZAP. This file is in IEBUPDTE SYSIN format.  For *   FILE 044\n//*           additional information see the member called $DOC.    *   FILE 044\n//*           Author:  Howard Gilbert                               *   FILE 044\n//*                                                                 *   FILE 044\n//*           A designation of GILBERT here, refers to Howard       *   FILE 044\n//*           Gilbert of Yale University, and not to anyone else.   *   FILE 044\n//*                                                                 *   FILE 044\n//*           ASMTOZAP IS A UTILITY WHICH READS AN ASSEMBLER        *   FILE 044\n//*           LISTING AND PRODUCES AMASPZAP CONTROL CARDS.  THIS    *   FILE 044\n//*           ALLOWS NON-TRIVIAL PATCHES TO BE WRITTEN IN           *   FILE 044\n//*           ASSEMBLER LANGUAGE WITH FULL USE OF SYMBOLIC          *   FILE 044\n//*           REFERENCES, DSECTS, AND MACROS.  CODE IS              *   FILE 044\n//*           POSITIONED AT THE CORRECT OFFSETS BY USE OF ORG.      *   FILE 044\n//*           SYMBOLIC ADDRESSES CAN BE GENERATED BY ORG, OR        *   FILE 044\n//*           FAKED BY EQU, OR COPYED, ETC.  THERE IS LESS ROOM     *   FILE 044\n//*           FOR ERROR, IMPROVED LEGIBILITY, AND CONVERSION        *   FILE 044\n//*           FROM ONE RELEASE TO ANOTHER USUALLY INVOLVES ONLY     *   FILE 044\n//*           CHANGING A FEW ORG'S TO REFLECT THE NEW ADDRESSES     *   FILE 044\n//*           OF THE PATCH AREA OR ZAPPED INSTRUCTIONS.             *   FILE 044\n//*                                                                 *   FILE 044\n//*           ASMTOZAP HAS BEEN TESTED USING ASSEMBLER H VERS 2     *   FILE 044\n//*           AND THE IBM HIGH-LEVEL ASSEMBLER (HLASM).             *   FILE 044\n//*                                                                 *   FILE 044\n//*  NOTE.    THIS PROGRAM IS WRITTEN IN PL/1.  HOWEVER, WE HAVE    *   FILE 044\n//*           TRIED TO MAKE IT POSSIBLE FOR ALL MVS SHOPS TO USE    *   FILE 044\n//*           ASMTOZAP.  FIRST, THERE IS A VERSION THAT RUNS        *   FILE 044\n//*           UNDER PL1/F - THE FREE VERSION OF PL/1 WHOSE          *   FILE 044\n//*           COMPILER AND LIBRARY IS ON THIS TAPE - FILE 092.      *   FILE 044\n//*           SECOND, THE LOAD MODULE FOR ASMTOZAP THAT IS ON       *   FILE 044\n//*           FILE 035 IS AN OLD LOAD MODULE THAT WAS COMPILED      *   FILE 044\n//*           USING THE PL/1 OPTIMIZER VERSION 1.3.0.  THEREFORE    *   FILE 044\n//*           YOU CAN RUN THAT MODULE, EVEN ON A VERY OLD VERSION   *   FILE 044\n//*           OF THE PL/1 OPTIMIZER TRANSIENT LIBRARY.  (AND OF     *   FILE 044\n//*           COURSE YOU CAN RUN IT ON THE NEWER VERSIONS           *   FILE 044\n//*           OF PL/1.)                 SG - 03/22/94               *   FILE 044\n//*                                                                 *   FILE 044\n//*           PL1/F RETURN CODE PROCESSING PUT IN (AS WITH PL/1     *   FILE 044\n//*           OPTIMIZER).  THANKS TO JIM MARSHALL WHO SENT ME A     *   FILE 044\n//*           SET OF PL1/F MANUALS.  SEE ALSO ASMTOZAF LOAD         *   FILE 044\n//*           MODULE ON FILE 035.       SG - 04/11/94               *   FILE 044\n//*                                                                 *   FILE 044\n//*        -----------------------------------------------------    *   FILE 044\n//*                                                                 *   FILE 044\n//*           Gerhard Postpischil made a rework of ASMTOZAP in      *   FILE 044\n//*           Assembler.  I have called it ASMTOZAG in this pds.    *   FILE 044\n//*           ASMTOZAG needs the member SUBLPALK to be assembled    *   FILE 044\n//*           along with it, and it needs 33 macros (member         *   FILE 044\n//*           ASMTOMAC) to assemble cleanly.  The entire job has    *   FILE 044\n//*           been packaged as member ASMTOZA$ (Assembly-Linkedit   *   FILE 044\n//*           JCL).  I myself haven't tested it, so I can't vouch   *   FILE 044\n//*           for it.  But it's presented here for you to try.      *   FILE 044\n//*           Original materials came from CBT files 860 and 861.   *   FILE 044\n//*                                                                 *   FILE 044\n//*           email:  gerhard@postpischil.com                       *   FILE 044\n//*                                                                 *   FILE 044\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMTOMAC": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x13!o\\x01\\x13!o\\x17\\x00\\x0b\\xd9\\x0b\\xd9\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-08-04T00:00:00", "modifydate": "2013-08-04T17:00:00", "lines": 3033, "newlines": 3033, "modlines": 0, "user": "GERHARD"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "ASMTOZA$": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00V\\x01\\x126?\\x01\\x13!o\\x17\\x01\\x00\\x1f\\x00\\x1c\\x00\\x00\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2012-12-28T00:00:00", "modifydate": "2013-08-04T17:01:56", "lines": 31, "newlines": 28, "modlines": 0, "user": "GERHARD"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.GERHARD.SOMEMACS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT487.FILE044(ASMTOZAG)\n//         DD DISP=SHR,DSN=SBGOLOB.CBT487.FILE044(SUBLPALK)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//*      PARM='MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.GERHARD.LOAD\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   ASMTOZAP\n SETSSI  CB487044\n SETCODE AC(0)\n ENTRY   ASMTOZAP\n NAME    ASMTOZAP(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMTOZAF": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x94\\x08\\x0f\\x00\\x94\\x10\\x1f\\x169\\x00\\xcb\\x00\\xc8\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1994-03-21T00:00:00", "modifydate": "1994-04-11T16:39:00", "lines": 203, "newlines": 200, "modlines": 0, "user": "SBGCSC"}, "text": "        /* DATA SET ASMTOZAP   AT LEVEL 001 AS OF 10/11/78    */\n        /* DATA SET ASMTOZAP. SOURCE MODIFIED FOR PL1/F. 4/94 */\n        /*  (PL1/F - RETURN CODE PROCESSING RESTORED - SBG)   */\n ASZAP: PROC OPTIONS(MAIN) REORDER;                                     00001\n  /* THIS IS A UTILITY WHICH CONVERTS AN ASSEMBLER LISTING              00002\n     DATASET INTO A FORMATTED IMASPZAP INPUT DECK OR SMP PTF. IT        00003\n     IS USEFUL IN PREPARING, MAINTAINING, AND DOCUMENTING THOSE         00004\n     INSTALLATION MODIFICATIONS WHICH CANNOT BE INSTALLED EXECPT        00005\n     BY MODIFING IBM CODE. ONE CAN MAKE FREE USE OF MACROS,             00006\n     LITERALS, AND OTHER CONVENIENCE FEATURES IN PREPARING THE          00007\n     DECK. CONTROL CARDS IN SPECIAL ASSEMBLER COMMENT FORM              00008\n     PROVIDE FLEXABILITY IN MODIFICATION DESIGN AND CONTROL             00009\n     OVER OUTPUT.                                                       00010\n        ALL CONTROL CARDS ARE INCLUDED IN THE ASSEMBLER DECK            00011\n     BEGINNING WITH THE CHARACTERS '*ZAP'. THE PURPOSE OF THE           00012\n     CONTROL CARDS IS TO INTERRUPT AND RESUME GENERATION OF             00013\n     ZAP OUTPUT. STATEMENTS WHICH DO NOT GENERATE OBJECT CODE           00014\n     (COMMENTS,ORG,DS,EQU,ETC.) ARE TRANSFERRED TO THE OUTPUT AS        00015\n     ZAP COMMENT CARDS, UNLESS OUTPUT GENERATION IS CURRENTLY           00016\n     PAUSED. OTHER STATEMENTS (INSTRUCTIONS,DC,CCW,ETC.) ARE            00017\n     TRANSFERRED TO THE OUTPUT AS 'VER' OR 'REP' CARDS IF               00018\n     OUTPUT GENERATION HAS BEEN (RE)STARTED IN ONE OF THESE             00019\n     TWO MODES. THE CARDS GOVERNING THIS ARE                            00020\n          *ZAP START REP                                                00021\n          *ZAP START VER                                                00022\n          *ZAP PAUSE                                                    00023\n     ZAP GENERATION IS INITIALLY PAUSED. A '*ZAP START' CARD IS         00024\n     VALID AND (RE)STARTS GENERATION IN REP OR VER MODE, WHICHEVER      00025\n     WAS LAST ACTIVE, BUT IF IT IS THE FIRST START CARD IN THE          00026\n     DECK, IT CANNOT BE FOLLOWED BY OBJECT GENERATING STATEMENTS        00027\n     UNTIL MODE IS SPECIFIED ON A SUBSEQUENT '*ZAP START (VER/REP)'     00028\n     CARD.                                                              00029\n        WHEN THE ZAP IS DONE, A '*ZAP END' CARD WILL TERMINATE          00030\n     A SCAN OF THE LISTING AND CLOSE THE OUTPUT FILE. THIS NOT          00031\n     ONLY SAVES A FEW EXTRA MICROSECONDS OF CPU WHICH WOULD BE          00032\n     SPENT SCANNING THE MAPPING MACROS AND CROSS REFRENCE, BUT          00033\n     HELPS THE HUMAN READING THE ASSEMBLER TO KNOW WHERE THE            00034\n     ESSENTIAL CODE HAS STOPPED AND THE SUPPORT DEFINITIONS             00035\n     HAVE BEGUN. IT TAKES A LOT OF ZAP COMMENT CARDS TO DEFINE          00036\n     THE CVT DSECT.                                                     00037\n        THE '*ZAP CARD' CONTROL CARD ALLOWS ARBITRARY TEXT TO           00038\n     BE REPRODUCED INT THE OUTPUT. THE CHARACTERS UP TO THE             00039\n     SPACE AFTER 'CARD' ARE STRIPPED OFF AND THE REMAINDER OF           00040\n     THE CARD TO COLUMN 72 IS REPRODUCED IN THE OUTPUT DECK.            00041\n     THIS IS PRIMARILY FOR NAME,DUMP, AND SMP CONTROL CARDS.            00042\n          *ZAP CARD ++PTF(YU00001) /* TYPICAL PTF DECK * /.             00043\n          *ZAP CARD ++ZAP(IEXAMPLE).                                    00044\n          *ZAP CARD   EXPAND IEXAMPLE(50)                               00045\n          *ZAP CARD   NAME IEXAMPLE                                     00046\n          *ZAP START VER                                                00047\n     RESTRICTIONS:                                                      00048\n          YOU MUST SPECIFY 'PRINT DATA' IN THE ASSEMBLY IF YOU          00049\n             GENERATE CONSTANTS OR LITERAL IN EXCESS OF 8 BYTES         00050\n             LENGTH.                                                    00051\n          REMEMBER TO PUT THE 'LTORG' STATEMENT BEFORE THE              00052\n            '*ZAP END' CARD IF LITERALS ARE GENERATED.                  00053\n          NO RELOCATABLE ADDRESS CONSTANTS CAN BE CODED IN THE          00054\n            ZAP CARD.                                                   00055\n     IT IS NOT POSSIBLE AT THIS TIME TO DETECT VIOLATIONS OF THE        00056\n      RESTRICTIONS LISTED ABOVE. BE CAREFUL.                            00057\n     GOOD TECHNIQUE:                                                    00058\n        PUT ALL SENSITIVE ADDRESSES AT THE BEGINNING OF THE DECK AS     00059\n           EQU INSTRUCTIONS. THEY CAN BE EASILY MODIFIED WHEN HIT BY    00060\n           PTFS OR WHEN THE NEXT RELEASE IS DISTRIBUTED. CANDIDATES     00061\n           INCLUDE THE ZAPPED OVER INSTRUCTION, THE PATCH AREA, AND     00062\n           TARGETS OF CONDITIONAL BRANCH INSTRUCTIONS OTHER THAN THE    00063\n           NATURAL RETURN.                                              00064\n        IT IS SOMETIMES POSSIBLE TO IMBED THE ZAP INSTRUCTIONS IN       00065\n           ENOUGH SUPPORT CODE TO MAKE THE OBJECT DECK OUTPUT OF        00066\n           THE ASSEMBLY AN INDEPENDENTLY EXECUTABLE PROGRAM WHICH       00067\n           YOU CAN TSO TEST BEFORE INCORPORATING INTO THE SYSTEM.       00068\n           THIS SAVES A LITTLE SYSTEM TEST TIME TRACKING DOWN DATA      00069\n           EXCEPTIONS AND THE LIKE.                                     00070\n                                                                        00071\n     COMMENTS AND SUGGESTIONS SHOULD BE ADDRESSED TO                    00072\n          HOWARD GILBERT                                                00073\n          YALE COMPUTER CENTER                                          00074\n          175 WHITNEY AVE                                               00075\n          NEW HAVEN, CONN. 06520                                        00076\n                                                                        00077\n     DDNAMES USED: IN,OUT,SYSPRINT                                      00078\n  */                                                                    00079\n  DCL IN INPUT FILE RECORD /* DS CONTAINING SYSPRINT FROM ASSEMBLY */;  00080\n  DCL OUT OUTPUT FILE STREAM;                                           00081\n     /* RECEIVES ZAP CARDS */                                           00082\n  DCL LINE CHAR(133) VAR; /* ONE LINE OF ASSEMBLER */                   00083\n  DCL LINE2 CHAR(133);                                                  00084\n  DCL ADDR CHAR(4) DEF LINE2 POS(4); /* OFFSET OR ADDRESS PART */       00085\n  DCL DATA CHAR(16) DEF LINE2 POS(9); /* HEX INSTRUCTION CODE OR DATA */00086\n          /* NOTE THAT SUBSTR(DATA,1,1) OVERLAPS LAST DIGIT OF          00087\n             HEX REPRESENTATION OF ADDRESS GENERATED BY EQU             00088\n             STATEMENT, SO TEST IS ON SUBSTR(DATA,2,1) FOR              00089\n             PRESENCE OF ANY REAL DATA */                               00090\n  DCL CARD CHAR(72) DEF LINE2 POS(42); /* ASM SOURCE PART */            00091\n  DCL (DATE,TIME,INDEX,VERIFY,SUBSTR) BUILTIN;                          00092\n  DCL WHAT CHAR(3) INIT(' '); /* BECOMES 'VER' OR 'REP' */              00093\n  DCL SKP BIT(1) INIT('1'B);                                            00094\n  DCL IHESARC ENTRY(FIXED BINARY(31,0));\n  ON ERROR BEGIN;                                                       00095\n     ON ERROR SYSTEM;                                                   00096\n     PUT EDIT(' ERROR PROCESSING:',LINE)(SKIP,A);                       00097\n     END;                                                               00098\n  /* LOGIC:                                                             00100\n     EACH LINE IS HANDLED SEPARATELY. THE ONLY INFORMATION WHICH        00101\n       EXTENDS ACROSS LINES IS THE MODE OF GENERATION IN 'WHAT'         00102\n       AND THE GENERATION (0) OR PAUSE (1) STATUS IN 'SKP'.             00103\n       FIRST ONE DETECTS AND PROCESSES CONTROL CARDS.                   00104\n       THEN ONE CHECKS FOR PAGE HEADER LINES AND BLANK LINES.           00105\n       ASSEMBLER COMMENT CARDS ARE REPRODUCED.                          00106\n       A COMMENT CARD IS PRODUCED FOR LABELS OR NON-OBJECT              00107\n         GENERATING STATEMENTS.                                         00108\n       A VER OR REP CARD IS CREATED FOR OBJECT GENERATING STATEMENTS.   00109\n    */                                                                  00110\n  GETLINE:                                                              00111\n     READ FILE(IN) INTO(LINE);                                          00112\n     LINE2=LINE;                                                        00113\n                                                                        00114\n                                                                        00115\n                                                                        00116\n     IF SUBSTR(CARD,1,4)='*ZAP' THEN                                    00117\n          DO /* ASMTOZAP CONTROL CARD PROCESSING */;                    00118\n          I=VERIFY(SUBSTR(CARD,5),' ') +4;                              00119\n          IF SUBSTR(CARD,I,5)='START' THEN                              00120\n               DO;                                                      00121\n               SKP='0'B;                                                00122\n               IF INDEX(CARD,'VER')>0 THEN WHAT='VER';                  00123\n               IF INDEX(CARD,'REP')>0 THEN WHAT='REP';                  00124\n               GO TO GETLINE;                                           00125\n               END;                                                     00126\n          IF SUBSTR(CARD,I,5)='PAUSE' THEN                              00127\n               DO;                                                      00128\n               SKP='1'B;                                                00129\n               GO TO GETLINE;                                           00130\n               END;                                                     00131\n          IF SUBSTR(CARD,I,4)='STOP'|SUBSTR(CARD,I,4)='END'             00132\n             THEN GO TO FINN;                                           00133\n          IF SUBSTR(CARD,I,4)='CARD' THEN                               00134\n               DO;                                                      00135\n               PUT FILE(OUT) EDIT(SUBSTR(CARD,I+5))(COL(1),A(72));      00136\n               GO TO GETLINE;                                           00137\n               END;                                                     00138\n          PUT EDIT ('***** UNRECOGNIZED CONTROL CARD ****',CARD)        00139\n               (SKIP(2),2 A);                                           00140\n          CALL IHESARC(16);                                             00141\n          GO TO GETLINE;                                                00142\n          END /* OF CONTROL CARD PROCESSING */;                         00143\n     IF SKP THEN GO TO GETLINE;                                         00144\n  /* NO PROCESSING IS DONE IF GENERATION IS PAUSED */                   00145\n     IF VERIFY(SUBSTR(LINE2,2,23),' 0123456789ABCDEF')>0                00146\n        THEN GO TO GETLINE;                                             00147\n   /* IF THERE ARE NON HEX CHARACTERS IN THE ADDRESS AND DATA FIELDS    00148\n      THEN WE ARE PROBABLY LOOKING AT A PAGE TITLE LINE */              00149\n     IF CARD=' ' & DATA=' ' THEN GO TO GETLINE;                         00150\n          /* IF THESE FIELDS ARE BLANK, THEN WE ARE LOOKING AT BLANK    00151\n             LINES PRODUCED BY SPACE OR UNDER PAGE HEADER. */           00152\n     IF SUBSTR(CARD,1,1)='*' THEN                                       00153\n          DO /* REPRODUCE ASSEMBLER COMMENT CARD */;                    00154\n          PUT FILE(OUT) EDIT(CARD)(COL(1),A(72));                       00155\n          GO TO GETLINE;                                                00156\n          END;                                                          00157\n     IF SUBSTR(CARD,1,1)\u00ac=' ' & SUBSTR(DATA,2,1)\u00ac=' ' THEN              00158\n          DO /* WE HAVE A LABELLED OBJECT GENERATING STATEMENT.         00159\n            BREAK IT UP INTO TWO LINE, A COMMENTED 'LABEL EQU *' AND    00160\n            A VER OR REP LINE THIS ALLOWS LESS TRUNCATION OF THE        00161\n            COMMENT FIELD OF THE ASSEMBLER SOURCE, SINCE COLS 1-9 ARE   00162\n            NEVER REPRODUCED AS BLANKS. */;                             00163\n          PUT FILE(OUT) EDIT('*',SUBSTR(CARD,1,8),'EQU   *')            00164\n               (COL(1),A(1),COL(21),A(8),COL(30), A);                   00165\n          END;                                                          00166\n     IF SUBSTR(DATA,2,1)=' ' THEN                                       00167\n          DO /* NON-OBJECT-GENERATING STATEMENT */;                     00168\n          PUT FILE(OUT) EDIT('*',CARD)                                  00169\n               (COL(1),A(1),COL(21),A(60));                             00170\n          GO TO GETLINE;                                                00171\n          END /* IT IS PASSED AS A COMMENT */;                          00172\n     IF WHAT=' ' THEN                                                   00173\n          DO /* OBJECT GENERATOR HIT AFTER ONLY '*ZAP START' CARD */;   00174\n          PUT EDIT('**** NEITHER VER NOR REP HAS BEEN SPECIFIED ****',  00175\n               CARD)(SKIP, A);                                          00176\n          CALL IHESARC(16);                                             00177\n          END;                                                          00178\n     /* ZAP IS WRITTEN IN TWO PIECES. FIRST VER OR REP AND OFFSET,      00179\n        NEXT DATA AND COLUMNS 10- ON ASSEMBLER SOURCE. */               00180\n     PUT FILE(OUT) EDIT(WHAT,ADDR,' ')(COL(1),A(3),X(1),A(4),A(1));     00181\n     I=1;                                                               00182\n               /* DATA GENERATING STATEMENTS ARE OF TWO KINDS:          00183\n                  MACHINE OPS GENERATE '0000 0000 0000' WITH            00184\n                  THE SECOND AND THIRD GROUP OPTIONAL.                  00185\n                  DC GENERATES A VARIABLE LENGTH                        00186\n                  '0000000000000000' WITH AN EVEN # DIGITS<17 */        00187\n          DO J=1 TO 4 WHILE(I<14);                                      00188\n          PUT FILE(OUT) EDIT(SUBSTR(DATA,I,4))(A(4));                   00189\n          IF SUBSTR(DATA,I+4,1)=' ' THEN I=I+1;                         00190\n          IF SUBSTR(DATA,I+4,1)\u00ac=' ' & I<10 THEN                        00191\n               PUT FILE(OUT) EDIT(',')(A(1));                           00192\n          I=I+4;                                                        00193\n          END;                                                          00194\n     PUT FILE(OUT) EDIT(SUBSTR(CARD,10))(COL(30),A(51));                00195\n     GO TO GETLINE;                                                     00196\n  FINN:                                                                 00197\n     PUT FILE(OUT) EDIT('* DECK PRODUCED BY THE ASMTOZAP UTILITY'       00198\n          ,DATE,TIME)(COL(1),A,X(1),P'99/99/99',X(1),A(6));             00199\n     END;                                                               00200\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMTOZAG": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00&\\x00\\x985\\x1f\\x01\\x14\\x03O\\x15\\x00\\x01\\x8d\\x01\\x91\\x00\\x01\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1998-12-17T00:00:00", "modifydate": "2014-02-03T15:00:26", "lines": 397, "newlines": 401, "modlines": 1, "user": "GERHARD"}, "text": "ATOZ     TITLE 'A S M T O Z A P  ***  MAKE ZAP CARDS FROM ASM LISTING'\n*ASZAP: PROC OPTIONS(MAIN) REORDER;\n* /* THIS IS A UTILITY THAT CONVERTS AN ASSEMBLER LISTING\n*    DATASET INTO A FORMATTED IMASPZAP INPUT DECK OR SMP PTF. IT\n*    IS USEFUL IN PREPARING, MAINTAINING, AND DOCUMENTING THOSE\n*    INSTALLATION MODIFICATIONS WHICH CANNOT BE INSTALLED EXCEPT\n*    BY MODIFING IBM CODE. ONE CAN MAKE FREE USE OF MACROS,\n*    LITERALS, AND OTHER CONVENIENCE FEATURES IN PREPARING THE\n*    DECK. CONTROL CARDS IN SPECIAL ASSEMBLER COMMENT FORM\n*    PROVIDE FLEXIBILITY IN MODIFICATION DESIGN AND CONTROL\n*    OVER OUTPUT.\n*       ALL CONTROL CARDS ARE INCLUDED IN THE ASSEMBLER DECK\n*    BEGINNING WITH THE CHARACTERS '*ZAP'. THE PURPOSE OF THE\n*    CONTROL CARDS IS TO INTERRUPT AND RESUME GENERATION OF\n*    ZAP OUTPUT. STATEMENTS WHICH DO NOT GENERATE OBJECT CODE\n*    (COMMENTS,ORG,DS,EQU,ETC.) ARE TRANSFERRED TO THE OUTPUT AS\n*    ZAP COMMENT CARDS, UNLESS OUTPUT GENERATION IS CURRENTLY\n*    PAUSED. OTHER STATEMENTS (INSTRUCTIONS,DC,CCW,ETC.) ARE\n*    TRANSFERRED TO THE OUTPUT AS 'VER' OR 'REP' CARDS IF\n*    OUTPUT GENERATION HAS BEEN (RE)STARTED IN ONE OF THESE\n*    TWO MODES. THE CARDS GOVERNING THIS ARE\n*         *ZAP START REP\n*         *ZAP START VER\n*         *ZAP PAUSE\n*    ZAP GENERATION IS INITIALLY PAUSED. A '*ZAP START' CARD IS\n*    VALID AND (RE)STARTS GENERATION IN REP OR VER MODE, WHICHEVER\n*    WAS LAST ACTIVE, BUT IF IT IS THE FIRST START CARD IN THE\n*    DECK, IT CANNOT BE FOLLOWED BY OBJECT GENERATING STATEMENTS\n*    UNTIL MODE IS SPECIFIED ON A SUBSEQUENT '*ZAP START (VER/REP)'\n*    CARD.\n*       WHEN THE ZAP IS DONE, A '*ZAP END' CARD WILL TERMINATE\n*    A SCAN OF THE LISTING AND CLOSE THE OUTPUT FILE. THIS NOT\n*    ONLY SAVES A FEW EXTRA MICROSECONDS OF CPU WHICH WOULD BE\n*    SPENT SCANNING THE MAPPING MACROS AND CROSS REFRENCE, BUT\n*    HELPS THE HUMAN READING THE ASSEMBLER TO KNOW WHERE THE\n*    ESSENTIAL CODE HAS STOPPED AND THE SUPPORT DEFINITIONS\n*    HAVE BEGUN. IT TAKES A LOT OF ZAP COMMENT CARDS TO DEFINE\n*    THE CVT DSECT.\n*       THE '*ZAP CARD' CONTROL CARD ALLOWS ARBITRARY TEXT TO\n*    BE REPRODUCED INT THE OUTPUT. THE CHARACTERS UP TO THE\n*    SPACE AFTER 'CARD' ARE STRIPPED OFF AND THE REMAINDER OF\n*    THE CARD TO COLUMN 72 IS REPRODUCED IN THE OUTPUT DECK.\n*    THIS IS PRIMARILY FOR NAME,DUMP, AND SMP CONTROL CARDS.\n*         *ZAP CARD ++PTF(YU00001) /* TYPICAL PTF DECK * /.\n*         *ZAP CARD ++ZAP(IEXAMPLE).\n*         *ZAP CARD   EXPAND IEXAMPLE(50)\n*         *ZAP CARD   NAME IEXAMPLE\n*         *ZAP START VER\n*    RESTRICTIONS :\n*         YOU MUST SPECIFY 'PRINT DATA' IN THE ASSEMBLY IF YOU\n*            GENERATE CONSTANTS OR LITERAL IN EXCESS OF 8 BYTES\n*            LENGTH.\n*         REMEMBER TO PUT THE 'LTORG' STATEMENT BEFORE THE\n*           '*ZAP END' CARD IF LITERALS ARE GENERATED.\n*         NO RELOCATABLE ADDRESS CONSTANTS CAN BE CODED IN THE\n*           ZAP CARD.\n*    IT IS NOT POSSIBLE AT THIS TIME TO DETECT VIOLATIONS OF THE\n*     RESTRICTIONS LISTED ABOVE. BE CAREFUL.\n*    GOOD TECHNIQUE:\n*       PUT ALL SENSITIVE ADDRESSES AT THE BEGINNING OF THE DECK AS\n*          EQU INSTRUCTIONS. THEY CAN BE EASILY MODIFIED WHEN HIT BY\n*          PTFS OR WHEN THE NEXT RELEASE IS DISTRIBUTED. CANDIDATES\n*          INCLUDE THE ZAPPED OVER INSTRUCTION, THE PATCH AREA, AND\n*          TARGETS OF CONDITIONAL BRANCH INSTRUCTIONS OTHER THAN THE\n*          NATURAL RETURN.\n*       IT IS SOMETIMES POSSIBLE TO IMBED THE ZAP INSTRUCTIONS IN\n*          ENOUGH SUPPORT CODE TO MAKE THE OBJECT DECK OUTPUT OF\n*          THE ASSEMBLY AN INDEPENDENTLY EXECUTABLE PROGRAM WHICH\n*          YOU CAN TSO TEST BEFORE INCORPORATING INTO THE SYSTEM.\n*          THIS SAVES A LITTLE SYSTEM TEST TIME TRACKING DOWN DATA\n*          EXCEPTIONS AND THE LIKE.\n*\n*    PL/I VERSION COMMENTS AND SUGGESTIONS SHOULD BE ADDRESSED TO\n*         HOWARD GILBERT\n*         YALE COMPUTER CENTER\n*         175 WHITNEY AVE\n*         NEW HAVEN, CONN. 06520\n*\n*    DDNAMES USED: ASMIN, SYSPRINT, SYSPUNCH                     93060\n         SPACE 1                                                 93060\n***********************************************************************\n*   PL/I MAY BE NICE, BUT NOT ALL INSTALLATIONS HAVE IT OR WANT IT.   *\n*     QUICK AND DIRTY REWRITE FOR ASM WITH LOCAL CONVENTIONS - GYP    *\n*   GERHARD POSTPISCHIL                                               *\n*   EXPERT SYSTEM PROGRAMMING                                         *\n*   176 OLD STAGE COACH ROAD                                          *\n*   BRADFORD, VT 05033-8844                                           *\n*     gerhard@postpischil.com                                         *\n***********************************************************************\n         SPACE 1                                                 93060\n         COPY  OPTIONGB      DEFINE GLOBAL OPTIONS               93060\n         SPACE 1                                                 93060\n         SYSPARM LIST=YES    SET GLOBAL OPTIONS                  93060\n         EJECT ,                                                 93060\n         PRINT &PRTSOR                                           93060\nASMTOZAP PGMHEAD ZERO12,BASE=(R12),AM=24 (FIX AM LATER)          93060\n         MVI   LINE2,C' '                                        93060\n         MVC   LINE2+1(L'LINE2-1),LINE2  ALL BLANK               93060\n* /*\n* ON ERROR BEGIN;\n*    ON ERROR SYSTEM;\n*    PUT EDIT(' ERROR PROCESSING:',LINE)(SKIP,A);\n*    END;\n* %PAGE;\n* /* LOGIC:\n*    EACH LINE IS HANDLED SEPARATELY. THE ONLY INFORMATION WHICH\n*      EXTENDS ACROSS LINES IS THE MODE OF GENERATION IN 'WHAT'\n*      AND THE GENERATION (0) OR PAUSE (1) STATUS IN 'SKP'.\n*      FIRST ONE DETECTS AND PROCESSES CONTROL CARDS.\n*      THEN ONE CHECKS FOR PAGE HEADER LINES AND BLANK LINES.\n*      ASSEMBLER COMMENT CARDS ARE REPRODUCED.\n*      A COMMENT CARD IS PRODUCED FOR LABELS OR NON-OBJECT\n*        GENERATING STATEMENTS.\n*      A VER OR REP CARD IS CREATED FOR OBJECT GENERATING STATEMENTS.\n*   */\n         SERVINIT ,          LOAD AND STASH THE SERVICE ROUTINE ADDRESS\n         SERVLOAD @INPREAD,@PRINTER  LOAD INPUT/OUTPUT SERVICES GP05258\n         INPOPEN ASMIN,OPT=ABEND   GET INPUT OR LOST             93060\n         PRTOPEN SYSPRINT,OPT=(NOWTO)                            93060\n         PRTL  '#       A S M T O Z A P',DEV=1,TITLE=1           93060\n         PRTOPEN SYSPUNCH,OPT=ABEND,DEV=2    OPEN PUNCH          93060\n* GETLINE:\n*    READ FILE(IN) INTO(LINE);\nGETLINE  INPGET ,            GET THE INPUT LINE                  93060\n*    LINE2=LINE;\n         LR    R14,R1        COPY INPUT ADDRESS                 GP05258\n         LR    R15,R0          AND LENGTH                       GP05258\n         LA    R0,LINE2      GET WORK LINE                      GP05258\n         LA    R1,L'LINE2    AND MAX LENGTH                     GP05258\n         ICM   R15,8,BLANKS  REQUEST BLANK FILL                 GP05258\n         MVCL  R0,R14        MOVE AND BLANK FILL                GP05258\n*\n*    IF SUBSTR(CARD,1,4)='*ZAP' THEN\n         CLC   =C'*ZAP',CARD  POSSIBLE CONTROL CARD ?            93060\n         BNE   NOTCARD        NO; TRY FOR DATA                   93060\n*         DO /* ASMTOZAP CONTROL CARD PROCESSING */;\n*         I=VERIFY(SUBSTR(CARD,5),' ') +4;\n         LA    R2,CARD+4      POINT TO POSSIBLE BLANK            93060\n         LA    R15,8          NOT TOO FAR                        93060\nFNONBLK  CLI   0(R2),C' '     STILL BLANK ?                      93060\n         BNE   HNONBLK        NO                                 93060\n         LA    R2,1(,R2)                                         93060\n         BCT   R15,FNONBLK                                       93060\n*         IF SUBSTR(CARD,I,5)='START' THEN\nHNONBLK  CLC   =C'START',0(R2)  START ?                          93060\n         BNE   NOTSTART       NO                                 93060\n*              DO;\n*              SKP='0'B;\n         NI    MODEFG,255-FGSKIP                                 93060\n*              IF INDEX(CARD,'VER')>0 THEN WHAT='VER';\n*              IF INDEX(CARD,'REP')>0 THEN WHAT='REP';\n         LA    R15,CARD+72-3                                     93060\n         SR    R15,R2        COLUMNS LEFT ON CARD                93060\nREPSCAN  CLC   =C'VER',0(R2)   VERIFY REQUEST ?                  93060\n         BE    REPHAVE                                           93060\n         CLC   =C'REP',0(R2)   REPLACE ?                         93060\n         BE    REPHAVE                                           93060\n         LA    R2,1(,R2)                                         93060\n         BCT   R15,REPSCAN                                       93060\n         B     GETLINE       NOTHING IF NO MATCH                 93060\nREPHAVE  MVC   WHAT,0(R2)    SAVE VER OR REP                     93060\n*              GO TO GETLINE;\n         B     GETLINE                                           93060\n*              END;\n*         IF SUBSTR(CARD,I,5)='PAUSE' THEN\nNOTSTART CLC   =C'PAUSE',0(R2)  IS IT PAUSE ?                    93060\n         BNE   NOTPAUSE                                          93060\n         OI    MODEFG,FGSKIP  SET PAUSE                          93060\n         B     GETLINE                                           93060\n*              DO;\n*              SKP='1'B;\n*              GO TO GETLINE;\n*              END;\n*         IF SUBSTR(CARD,I,4)='STOP'|SUBSTR(CARD,I,4)='END'\n*            THEN GO TO FINN;\nNOTPAUSE CLC   =C'STOP',0(R2)                                    93060\n         BE    FINN           LOGICAL END                        93060\n         CLC   =C'END ',0(R2)                                    93060\n         BE    FINN                                              93060\n*         IF SUBSTR(CARD,I,4)='CARD' THEN\n*              DO;\n         CLC   =C'CARD',0(R2)                                    93060\n         BNE   NOTCONT                                           93060\n*              PUT FILE(OUT) EDIT(SUBSTR(CARD,I+5))(COL(1),A(72));\n         PRTF  4(R2),72,CC=NO,DEV=(1,2)  PUT CARD IMAGE          93060\n*              GO TO GETLINE;\n         B     GETLINE                                           93060\n*              END;\n         SPACE 1                                                 93060\n*         PUT EDIT ('***** UNRECOGNIZED CONTROL CARD ****',CARD)\n*              (SKIP(2),2 A);\nNOTCONT  PRTLIST BADCONCD,DEV=(1,2)                              93060\n*         CALL PLIRETC(16);\n         OICC  8             SET ERROR CODE                     GP05258\n*         GO TO GETLINE;\n         B     GETLINE                                           93060\n*         END /* OF CONTROL CARD PROCESSING */;\n         SPACE 2                                                 93060\n*    IF SKP THEN GO TO GETLINE;\n* /* NO PROCESSING IS DONE IF GENERATION IS PAUSED */\nNOTCARD  TM    MODEFG,FGSKIP  ARE WE HOPPING AND SKIPPING ?      93060\n         BNZ   GETLINE       YES; JUMP RIGHT OUT OF HERE         93060\n*    IF VERIFY(SUBSTR(LINE2,2,23),' 0123456789ABCDEF')>0\n         TRT   LINE2+1(23),NONHEXTB  LOOK FOR NON-HEX DATA       93060\n*       THEN GO TO GETLINE;\n         BNZ   GETLINE                                           93060\n*  /* IF THERE ARE NON HEX CHARACTERS IN THE ADDRESS AND DATA FIELDS\n*     THEN WE ARE PROBABLY LOOKING AT A PAGE TITLE LINE */\n*    IF CARD=' ' & DATA=' ' THEN GO TO GETLINE;\n         CLC   CARD,BLANKS  ALL BLANK ?                          93060\n         BNE   NOTBCD       NO                                   93060\n         CLC   DATA,BLANKS  COMPLETELY BLANK ?                   93060\n         BE    GETLINE      YES; SKIP                            93060\n*         /* IF THESE FIELDS ARE BLANK, THEN WE ARE LOOKING AT BLANK\n*            LINES PRODUCED BY SPACE OR UNDER PAGE HEADER. */\n*    IF SUBSTR(CARD,1,1)='*' THEN\nNOTBCD   CLI   CARD,C'*'     COMMENT CARD ?                      93060\n         BNE   NOTCOMNT      NO                                  93060\n*         DO /* REPRODUCE ASSEMBLER COMMENT CARD */;\n*         PUT FILE(OUT) EDIT(CARD)(COL(1),A(72));\n         PRTF  CARD,72,CC=NO,DEV=(1,2)                           93060\n*         GO TO GETLINE;\n         B     GETLINE                                           93060\n*         END;\n*    IF SUBSTR(CARD,1,1)\u00ac=' ' & SUBSTR(DATA,2,1)\u00ac=' ' THEN\nNOTCOMNT CLI   CARD,C' '     LABEL ?                             93060\n         BNH   NOTLABEL                                          93060\n         CLI   DATA+1,C' '   AND DATA ?                          93060\n         BNH   NOTDATA                                           93060\n*         DO /* WE HAVE A LABELLED OBJECT GENERATING STATEMENT.\n*           BREAK IT UP INTO TWO LINE, A COMMENTED 'LABEL EQU *' AND\n*           A VER OR REP LINE THIS ALLOWS LESS TRUNCATION OF THE\n*           COMMENT FIELD OF THE ASSEMBLER SOURCE, SINCE COLS 1-9 ARE\n*           NEVER REPRODUCED AS BLANKS. */;\n*         PUT FILE(OUT) EDIT('*',SUBSTR(CARD,1,8),'EQU   *')\n*              (COL(1),A(1),COL(21),A(8),COL(30), A);\n         PRTLIST FDEQU,DEV=(1,2)  WRITE LABEL EQU                93060\n*         END;\n*NEXT*   B     NOTLABEL                                          93060\n*    IF SUBSTR(DATA,2,1)=' ' THEN\nNOTLABEL CLI   DATA+1,C' '   ANY DATA ?                          93060\n         BH    HAVDATA                                           93060\n*         DO /* NON-OBJECT-GENERATING STATEMENT */;\n*         PUT FILE(OUT) EDIT('*',CARD)\n*              (COL(1),A(1),COL(21),A(60));\nNOTDATA  LA    R1,CARD       POINT TO THE CARD IMAGE            GP98351\n         LA    R0,L'CARD-10                                     GP98351\nNOTDATAL CLI   0(R1),C' '    NON-BLANK ?                        GP98351\n         BH    NOTDATAC                                         GP98351\n         LA    R1,1(,R1)                                        GP98351\n         BCT   R0,NOTDATAL   TRY AGAIN                          GP98351\nNOTDATAC CLC   =C'High Level',0(R1)  HIGH-LEVEL ASSEMBLER ?     GP98351\n         BE    GETLINE       YES; IGNORE IT                     GP98351\n         CLC   =C'HLASM R',0(R1)  other way?                    GP98351\n         BE    GETLINE       YES; IGNORE IT                     GP98351\n         CLC   =C'HIGH LEVEL',0(R1)  HIGH-LEVEL ASSEMBLER ?     GP98351\n         BE    GETLINE       YES; IGNORE IT                     GP98351\n         PRTLIST FDCCARD,DEV=1                                   93060\n         PRTLIST FDCPUN,DEV=2                                    93060\n*         GO TO GETLINE;\n         B     GETLINE                                           93060\n*         END /* IT IS PASSED AS A COMMENT */;\n*    IF WHAT=' ' THEN\nHAVDATA  CLI   WHAT,C' '     INITIALIZED YET ?                   93060\n         BH    MAKEZAP       YES                                 93060\n*         DO /* OBJECT GENERATOR HIT AFTER ONLY '*ZAP START' CARD */;\n*         PUT EDIT('**** NEITHER VER NOR REP HAS BEEN SPECIFIED ****',\n*              CARD)(SKIP, A);\n         PRTL  '**** NEITHER VER NOR REP HAS BEEN SPECIFIED ****',     *\n               CC=NO,DEV=(1,2)                                   93060\n*         CALL PLIRETC(16);\n         OICC  8             MAKE ERROR                         GP05258\n*         END;\n         B     GETLINE       ?????                               93060\n*    /* ZAP IS WRITTEN IN TWO PIECES. FIRST VER OR REP AND OFFSET,\n*       NEXT DATA AND COLUMNS 10- ON ASSEMBLER SOURCE. */\n*    PUT FILE(OUT) EDIT(WHAT,ADDR,' ')(COL(1),A(3),X(1),A(4),A(1));\nMAKEZAP  PRTLIST ZAP1,DEV=(1,2)                                  93060\n*    I=1;\n         LA    R2,DATA                                           93060\n*              /* DATA GENERATING STATEMENTS ARE OF TWO KINDS:\n*                 MACHINE OPS GENERATE '0000 0000 0000' WITH\n*                 THE SECOND AND THIRD GROUP OPTIONAL.\n*                 DC GENERATES A VARIABLE LENGTH\n*                 '0000000000000000' WITH AN EVEN # DIGITS<17 */\n*         DO J=1 TO 4 WHILE(I<14);\n*         PUT FILE(OUT) EDIT(SUBSTR(DATA,I,4))(A(4));\nNEXTZAP  PRTLIST ZAP2,DEV=(1,2)                                  93060\n*         IF SUBSTR(DATA,I+4,1)=' ' THEN I=I+1;\n         CLI   4(R2),C' '    DATA OR INSTRUCTION ?               93060\n         BH    *+8           PROBABLY DATA; DON'T SKIP           93060\n         LA    R2,1(,R2)     ADVANCE POINTER                     93060\n*         IF SUBSTR(DATA,I+4,1)\u00ac=' ' & I<10 THEN\n         CLI   4(R2),C' '    MORE FOLLOWING ?                    93060\n         BNH   DONEZAP       NO                                  93060\n         LA    R0,DATA+10    AFTER EIGHT ?                       93060\n         CR    R2,R0         NEED A COMA ?                       93060\n         BH    BUMPZAP       NO                                  93060\n*              PUT FILE(OUT) EDIT(',')(A(1));\n         PRTLIST ZAP3,DEV=(1,2)                                  93060\n*         I=I+4;\nBUMPZAP  LA    R2,4(,R2)     TRY NEXT FIELD                      93060\n         LA    R14,DATA+13                                       93060\n         CR    R2,R14        PAST LAST ?                         93060\n         BNH   NEXTZAP       NOT YET                             93060\n*         END;\n*    PUT FILE(OUT) EDIT(SUBSTR(CARD,10))(COL(30),A(51));\nDONEZAP  PRTLIST ZAP4,DEV=1                                      93060\n         PRTLIST ZAP4P,DEV=2                                     93060\n*    GO TO GETLINE;\n         B     GETLINE                                           93060\n         SPACE 2                                                 93060\n* FINN:\n*    PUT FILE(OUT) EDIT('* DECK PRODUCED BY THE ASMTOZAP UTILITY'\n*         ,DATE,TIME)(COL(1),A,X(1),P'99/99/99',X(1),A(6));\n*    END;\nFINN     PRTLIST FINAL,DEV=(1,2)                                 93060\n         SERVTERM ,          CLOSE AND FREE                      93060\n         PGMEXIT COPYRET=(RETCODE,8)  RETURN WITH CODE          GP05258\n         SPACE 1                                                 93060\nBADCONCD FDPRT '**** UNRECOGNIZED CONTROL CARD ****',NL          93060\n         FDPRT CARD,72,PAD                                       93060\n         FDPRT *END                                              93060\n         SPACE 1                                                 93060\nFDCCARD  FDPRT '*',NL,LEN=20                                     93060\n         FDPRT CARD,72,PAD                                       93060\n         FDPRT *END                                              93060\n         SPACE 1                                                 93060\nFDCPUN   FDPRT '*',NL,LEN=6                                      93060\n         FDPRT CARD,72,PAD                                       93060\n         FDPRT *END                                              93060\n         SPACE 1                                                 93060\nFDEQU    FDPRT '*',NL,LEN=21                                     93060\n         FDPRT CARD,8                                            93060\n         FDPRT 'EQU   *',PADL                                    93060\n         FDPRT *END                                              93060\n         SPACE 1                                                 93060\nFINAL    FDPRT ' CHECKSUM ',NL                                  GP98351\nFINAL2   FDPRT '* DECK PRODUCED BY THE ASMTOZAP UTILITY',NL      93060\n         FDPRT DB,1,DATE,PAD                                     93060\n         FDPRT DB,1,TIME,PAD                                     93060\n         FDPRT *END                                              93060\n         SPACE 1                                                 93060\nZAP1     FDPRT ' ',NL                                            93060\n         FDPRT WHAT                                              93060\n         FDPRT ADDR,PAD                                          93060\n         FDPRT *END                                              93060\nZAP2     FDPRT 0(R2),4                                           93060\n         FDPRT *END                                              93060\nZAP3     FDPRT ','                                               93060\n         FDPRT *END                                              93060\nZAP4     FDOPT SBA=(*,31)                                        93060\n         FDPRT CARD+09,51                                        93060\n         FDPRT *END                                              93060\n         SPACE 1                                                 93060\nZAP4P    FDOPT SBA=(*,31)                                        93060\n         FDPRT CARD+09,48                                        93060\n         FDPRT *END                                              93060\n         SPACE 1                                                 93060\nNONHEXTB DC    256AL1(4)     NON-HEX CHARACTERS                  93060\n         TRENT NONHEXTB,0,C' '  ALLOW BLANK AS VALID HEX BYTE    93060\n         TRENT ,0,(C'0',10),(C'A',6)  HEX DIGITS                 93060\n         SPACE 1                                                 93060\nBLANKS   DC    CL133' '      LARGE NUMBER OF BLANKS              93060\n         EJECT ,                                                 93060\n* DCL IN INPUT FILE RECORD /* DS CONTAINING SYSPRINT FROM ASSEMBLY */;\nASMIN    INPWORK ASMIN,IN,EDIT=128,EODAD=FINN                    93060\n* DCL OUT OUTPUT FILE STREAM ENV(FB RECSIZE(80) BLKSIZE(800));\n*    /* RECEIVES ZAP CARDS */\nSYSPRINT PRTWORK SYSPRINT,SYSTERM,TITLE=3                        93060\nSYSPUNCH PUNWORK SYSPUNCH,OUT                                    93060\n         SPACE 1                                                 93060\nSAVE     DSECT ,             SAVE AND WORK AREA                  93060\nDB       DS    D                                                 93060\n         SERVDEFS ,          SERVICE ADDRESSES & STUFF          GP05258\n         SPACE 1                                                 93060\n* DCL LINE CHAR(133) VAR; /* ONE LINE OF ASSEMBLER */\n* DCL LINE2 CHAR(133);       SAVE AND WORK AREA\nLINE2    DS    CL133         OTHER INPUT LINE                    93060\n* DCL ADDR CHAR(4) DEF LINE2 POS(4); /* OFFSET OR ADDRESS PART */\nADDR     EQU   LINE2+3,4,C' '  ADDRESS FIELD (LOW FOUR)          93060\n* DCL DATA CHAR(16) DEF LINE2 POS(9); /* HEX INSTRUCTION COD OR DATA */\nDATA     EQU   LINE2+8,16,C' '   DATA, HEX OPCODE/DATA           93060\n*         /* NOTE THAT SUBSTR(DATA,1,1) OVERLAPS LAST DIGIT OF\n*            HEX REPRESENTATION OF ADDRESS GENERATED BY EQU\n*            STATEMENT, SO TEST IS ON SUBSTR(DATA,2,1) FOR\n*            PRESENCE OF ANY REAL DATA */\n* DCL CARD CHAR(72) DEF LINE2 POS(42); /* ASM SOURCE PART */\nCARD     EQU   LINE2+41,72,C'C'                                  93060\n* DCL (DATE,TIME,INDEX,VERIFY,SUBSTR) BUILTIN;\n* DCL WHAT CHAR(3) INIT(' '); /* BECOMES 'VER' OR 'REP' */\nWHAT     DS    CL3                                               93060\n* DCL SKP BIT INIT('1'B); /* CONTROLS SKIPPING UNDER *ZAP PAUSE, ETC */\nMODEFG   DS    X             PROCESSING FLAG                     93060\nFGSKIP   EQU   X'80'           SKIP MODE                         93060\nSAVEEND  EQU   *             END OF DYNAMIC AREA                 93060\n         END   ,                                                 93060\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMTOZAP": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x87)\\x0f\\x00\\x94\\x08\\x1f\\x12\\x02\\x00\\xc8\\x00\\xc8\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1987-10-17T00:00:00", "modifydate": "1994-03-22T12:02:00", "lines": 200, "newlines": 200, "modlines": 0, "user": "SBGCSC"}, "text": " ASZAP: PROC OPTIONS(MAIN) REORDER;\n  /* THIS IS A UTILITY WHICH CONVERTS AN ASSEMBLER LISTING\n     DATASET INTO A FORMATTED IMASPZAP INPUT DECK OR SMP PTF. IT\n     IS USEFUL IN PREPARING, MAINTAINING, AND DOCUMENTING THOSE\n     INSTALLATION MODIFICATIONS WHICH CANNOT BE INSTALLED EXECPT\n     BY MODIFING IBM CODE. ONE CAN MAKE FREE USE OF MACROS,\n     LITERALS, AND OTHER CONVENIENCE FEATURES IN PREPARING THE\n     DECK. CONTROL CARDS IN SPECIAL ASSEMBLER COMMENT FORM\n     PROVIDE FLEXABILITY IN MODIFICATION DESIGN AND CONTROL\n     OVER OUTPUT.\n        ALL CONTROL CARDS ARE INCLUDED IN THE ASSEMBLER DECK\n     BEGINNING WITH THE CHARACTERS '*ZAP'. THE PURPOSE OF THE\n     CONTROL CARDS IS TO INTERRUPT AND RESUME GENERATION OF\n     ZAP OUTPUT. STATEMENTS WHICH DO NOT GENERATE OBJECT CODE\n     (COMMENTS,ORG,DS,EQU,ETC.) ARE TRANSFERRED TO THE OUTPUT AS\n     ZAP COMMENT CARDS, UNLESS OUTPUT GENERATION IS CURRENTLY\n     PAUSED. OTHER STATEMENTS (INSTRUCTIONS,DC,CCW,ETC.) ARE\n     TRANSFERRED TO THE OUTPUT AS 'VER' OR 'REP' CARDS IF\n     OUTPUT GENERATION HAS BEEN (RE)STARTED IN ONE OF THESE\n     TWO MODES. THE CARDS GOVERNING THIS ARE\n          *ZAP START REP\n          *ZAP START VER\n          *ZAP PAUSE\n     ZAP GENERATION IS INITIALLY PAUSED. A '*ZAP START' CARD IS\n     VALID AND (RE)STARTS GENERATION IN REP OR VER MODE, WHICHEVER\n     WAS LAST ACTIVE, BUT IF IT IS THE FIRST START CARD IN THE\n     DECK, IT CANNOT BE FOLLOWED BY OBJECT GENERATING STATEMENTS\n     UNTIL MODE IS SPECIFIED ON A SUBSEQUENT '*ZAP START (VER/REP)'\n     CARD.\n        WHEN THE ZAP IS DONE, A '*ZAP END' CARD WILL TERMINATE\n     A SCAN OF THE LISTING AND CLOSE THE OUTPUT FILE. THIS NOT\n     ONLY SAVES A FEW EXTRA MICROSECONDS OF CPU WHICH WOULD BE\n     SPENT SCANNING THE MAPPING MACROS AND CROSS REFRENCE, BUT\n     HELPS THE HUMAN READING THE ASSEMBLER TO KNOW WHERE THE\n     ESSENTIAL CODE HAS STOPPED AND THE SUPPORT DEFINITIONS\n     HAVE BEGUN. IT TAKES A LOT OF ZAP COMMENT CARDS TO DEFINE\n     THE CVT DSECT.\n        THE '*ZAP CARD' CONTROL CARD ALLOWS ARBITRARY TEXT TO\n     BE REPRODUCED INT THE OUTPUT. THE CHARACTERS UP TO THE\n     SPACE AFTER 'CARD' ARE STRIPPED OFF AND THE REMAINDER OF\n     THE CARD TO COLUMN 72 IS REPRODUCED IN THE OUTPUT DECK.\n     THIS IS PRIMARILY FOR NAME,DUMP, AND SMP CONTROL CARDS.\n          *ZAP CARD ++PTF(YU00001) /* TYPICAL PTF DECK * /.\n          *ZAP CARD ++ZAP(IEXAMPLE).\n          *ZAP CARD   EXPAND IEXAMPLE(50)\n          *ZAP CARD   NAME IEXAMPLE\n          *ZAP START VER\n     RESTRICTIONS :\n          YOU MUST SPECIFY 'PRINT DATA' IN THE ASSEMBLY IF YOU\n             GENERATE CONSTANTS OR LITERAL IN EXCESS OF 8 BYTES\n             LENGTH.\n          REMEMBER TO PUT THE 'LTORG' STATEMENT BEFORE THE\n            '*ZAP END' CARD IF LITERALS ARE GENERATED.\n          NO RELOCATABLE ADDRESS CONSTANTS CAN BE CODED IN THE\n            ZAP CARD.\n     IT IS NOT POSSIBLE AT THIS TIME TO DETECT VIOLATIONS OF THE\n      RESTRICTIONS LISTED ABOVE. BE CAREFUL.\n     GOOD TECHNIQUE:\n        PUT ALL SENSITIVE ADDRESSES AT THE BEGINNING OF THE DECK AS\n           EQU INSTRUCTIONS. THEY CAN BE EASILY MODIFIED WHEN HIT BY\n           PTFS OR WHEN THE NEXT RELEASE IS DISTRIBUTED. CANDIDATES\n           INCLUDE THE ZAPPED OVER INSTRUCTION, THE PATCH AREA, AND\n           TARGETS OF CONDITIONAL BRANCH INSTRUCTIONS OTHER THAN THE\n           NATURAL RETURN.\n        IT IS SOMETIMES POSSIBLE TO IMBED THE ZAP INSTRUCTIONS IN\n           ENOUGH SUPPORT CODE TO MAKE THE OBJECT DECK OUTPUT OF\n           THE ASSEMBLY AN INDEPENDENTLY EXECUTABLE PROGRAM WHICH\n           YOU CAN TSO TEST BEFORE INCORPORATING INTO THE SYSTEM.\n           THIS SAVES A LITTLE SYSTEM TEST TIME TRACKING DOWN DATA\n           EXCEPTIONS AND THE LIKE.\n\n     COMMENTS AND SUGGESTIONS SHOULD BE ADDRESSED TO\n          HOWARD GILBERT\n          YALE COMPUTER CENTER\n          175 WHITNEY AVE\n          NEW HAVEN, CONN. 06520\n\n     DDNAMES USED: IN,OUT,SYSPRINT\n  */\n  DCL IN INPUT FILE RECORD /* DS CONTAINING SYSPRINT FROM ASSEMBLY */;\n  DCL OUT OUTPUT FILE STREAM ENV(FB RECSIZE(80) BLKSIZE(800));\n     /* RECEIVES ZAP CARDS */\n  DCL LINE CHAR(133) VAR; /* ONE LINE OF ASSEMBLER */\n  DCL LINE2 CHAR(133);\n  DCL ADDR CHAR(4) DEF LINE2 POS(4); /* OFFSET OR ADDRESS PART */\n  DCL DATA CHAR(16) DEF LINE2 POS(9); /* HEX INSTRUCTION CODE OR DATA */\n          /* NOTE THAT SUBSTR(DATA,1,1) OVERLAPS LAST DIGIT OF\n             HEX REPRESENTATION OF ADDRESS GENERATED BY EQU\n             STATEMENT, SO TEST IS ON SUBSTR(DATA,2,1) FOR\n             PRESENCE OF ANY REAL DATA */\n  DCL CARD CHAR(72) DEF LINE2 POS(42); /* ASM SOURCE PART */\n  DCL (DATE,TIME,INDEX,VERIFY,SUBSTR) BUILTIN;\n  DCL WHAT CHAR(3) INIT(' '); /* BECOMES 'VER' OR 'REP' */\n  DCL SKP BIT(1) INIT('1'B); /* CONTROLS SKIPNG UNDER *ZAP PAUSE ETC */\n  ON ERROR BEGIN;\n     ON ERROR SYSTEM;\n     PUT EDIT(' ERROR PROCESSING:',LINE)(SKIP,A);\n     END;\n  %PAGE;\n  /* LOGIC:\n     EACH LINE IS HANDLED SEPARATELY. THE ONLY INFORMATION WHICH\n       EXTENDS ACROSS LINES IS THE MODE OF GENERATION IN 'WHAT'\n       AND THE GENERATION (0) OR PAUSE (1) STATUS IN 'SKP'.\n       FIRST ONE DETECTS AND PROCESSES CONTROL CARDS.\n       THEN ONE CHECKS FOR PAGE HEADER LINES AND BLANK LINES.\n       ASSEMBLER COMMENT CARDS ARE REPRODUCED.\n       A COMMENT CARD IS PRODUCED FOR LABELS OR NON-OBJECT\n         GENERATING STATEMENTS.\n       A VER OR REP CARD IS CREATED FOR OBJECT GENERATING STATEMENTS.\n    */\n  GETLINE:\n     READ FILE(IN) INTO(LINE);\n     LINE2=LINE;\n\n\n\n     IF SUBSTR(CARD,1,4)='*ZAP' THEN\n          DO /* ASMTOZAP CONTROL CARD PROCESSING */;\n          I=VERIFY(SUBSTR(CARD,5),' ') +4;\n          IF SUBSTR(CARD,I,5)='START' THEN\n               DO;\n               SKP='0'B;\n               IF INDEX(CARD,'VER')>0 THEN WHAT='VER';\n               IF INDEX(CARD,'REP')>0 THEN WHAT='REP';\n               GO TO GETLINE;\n               END;\n          IF SUBSTR(CARD,I,5)='PAUSE' THEN\n               DO;\n               SKP='1'B;\n               GO TO GETLINE;\n               END;\n          IF SUBSTR(CARD,I,4)='STOP'|SUBSTR(CARD,I,4)='END'\n             THEN GO TO FINN;\n          IF SUBSTR(CARD,I,4)='CARD' THEN\n               DO;\n               PUT FILE(OUT) EDIT(SUBSTR(CARD,I+5))(COL(1),A(72));\n               GO TO GETLINE;\n               END;\n          PUT EDIT ('***** UNRECOGNIZED CONTROL CARD ****',CARD)\n               (SKIP(2),2 A);\n          CALL PLIRETC(16);\n          GO TO GETLINE;\n          END /* OF CONTROL CARD PROCESSING */;\n     IF SKP THEN GO TO GETLINE;\n  /* NO PROCESSING IS DONE IF GENERATION IS PAUSED */\n     IF VERIFY(SUBSTR(LINE2,2,23),' 0123456789ABCDEF')>0\n        THEN GO TO GETLINE;\n   /* IF THERE ARE NON HEX CHARACTERS IN THE ADDRESS AND DATA FIELDS\n      THEN WE ARE PROBABLY LOOKING AT A PAGE TITLE LINE */\n     IF CARD=' ' & DATA=' ' THEN GO TO GETLINE;\n          /* IF THESE FIELDS ARE BLANK, THEN WE ARE LOOKING AT BLANK\n             LINES PRODUCED BY SPACE OR UNDER PAGE HEADER. */\n     IF SUBSTR(CARD,1,1)='*' THEN\n          DO /* REPRODUCE ASSEMBLER COMMENT CARD */;\n          PUT FILE(OUT) EDIT(CARD)(COL(1),A(72));\n          GO TO GETLINE;\n          END;\n     IF SUBSTR(CARD,1,1)\u00ac=' ' & SUBSTR(DATA,2,1)\u00ac=' ' THEN\n          DO /* WE HAVE A LABELLED OBJECT GENERATING STATEMENT.\n            BREAK IT UP INTO TWO LINE, A COMMENTED 'LABEL EQU *' AND\n            A VER OR REP LINE THIS ALLOWS LESS TRUNCATION OF THE\n            COMMENT FIELD OF THE ASSEMBLER SOURCE, SINCE COLS 1-9 ARE\n            NEVER REPRODUCED AS BLANKS. */;\n          PUT FILE(OUT) EDIT('*',SUBSTR(CARD,1,8),'EQU   *')\n               (COL(1),A(1),COL(21),A(8),COL(30), A);\n          END;\n     IF SUBSTR(DATA,2,1)=' ' THEN\n          DO /* NON-OBJECT-GENERATING STATEMENT */;\n          PUT FILE(OUT) EDIT('*',CARD)\n               (COL(1),A(1),COL(21),A(60));\n          GO TO GETLINE;\n          END /* IT IS PASSED AS A COMMENT */;\n     IF WHAT=' ' THEN\n          DO /* OBJECT GENERATOR HIT AFTER ONLY '*ZAP START' CARD */;\n          PUT EDIT('**** NEITHER VER NOR REP HAS BEEN SPECIFIED ****',\n               CARD)(SKIP, A);\n          CALL PLIRETC(16);\n          END;\n     /* ZAP IS WRITTEN IN TWO PIECES. FIRST VER OR REP AND OFFSET,\n        NEXT DATA AND COLUMNS 10- ON ASSEMBLER SOURCE. */\n     PUT FILE(OUT) EDIT(WHAT,ADDR,' ')(COL(1),A(3),X(1),A(4),A(1));\n     I=1;\n               /* DATA GENERATING STATEMENTS ARE OF TWO KINDS:\n                  MACHINE OPS GENERATE '0000 0000 0000' WITH\n                  THE SECOND AND THIRD GROUP OPTIONAL.\n                  DC GENERATES A VARIABLE LENGTH\n                  '0000000000000000' WITH AN EVEN # DIGITS<17 */\n          DO J=1 TO 4 WHILE(I<14);\n          PUT FILE(OUT) EDIT(SUBSTR(DATA,I,4))(A(4));\n          IF SUBSTR(DATA,I+4,1)=' ' THEN I=I+1;\n          IF SUBSTR(DATA,I+4,1)\u00ac=' ' & I<10 THEN\n               PUT FILE(OUT) EDIT(',')(A(1));\n          I=I+4;\n          END;\n     PUT FILE(OUT) EDIT(SUBSTR(CARD,10))(COL(30),A(51));\n     GO TO GETLINE;\n  FINN:\n     PUT FILE(OUT) EDIT('* DECK PRODUCED BY THE ASMTOZAP UTILITY'\n          ,DATE,TIME)(COL(1),A,X(1),P'99/99/99',X(1),A(6));\n     END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HG00102": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87)\\x0f\\x00\\x87)\\x0f\\t\\x00\\x00b\\x00b\\x00\\x00\\xc7\\xc9\\xd3\\xc2\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-10-17T00:00:00", "modifydate": "1987-10-17T09:00:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "GILBERT"}, "text": "++PTF(HG00102)\n  /* MODIFY 'SET CLOCK COMPARATOR' TO ESTABLISH AN\n     OPTIONAL CPU AFFINITY FOR TQES ASSOCIATED WITH\n     DIE ROUTINES */.\n++VER(Z037) PRE(UZ80700 UZ08819).\n++ZAP(IEAVRTI0).\n NAME IEA0TI00\n EXPAND IEA0TI00(256)\n*                            USING IEA0TI00+X'6A',R9\n*                            USING PSA,R0\n*                            USING TQE,R11\n*                            ORG   ZAPPED\nVER 0AA4 4770,9B0E           BNZ   NOQUE\n*                   QUE      EQU   *\nVER 0AA8 58C0,0208           L     R12,PSAPCCAV\n*                   RET      EQU   *\n*                            ORG   PATCH\nVER 0EF0 0000,0000,0000,0000 DC    XL12'00'\n*                            ORG   QUE\nREP 0AA8 47F0,9E86           B     PATCH\n*                            ORG   PATCH\n* THE 'SET CLOCK COMPARATOR' ENTRY POINT OF THE\n* TIMER SUPERVISOR MODULE IS INVOKED BY TQE ENQUE AND DEQUE\n* SERVICES WHEN A TQE IS ADDED OR REMOVED FROM THE REAL TIME\n* QUEUE. THIS ZAP IS ENTERED WHEN THAT ROUTINE HAS DETERMINED\n* THAT THE FIRST TQE IS NOT BEING TIMED OR THAT\n* THE CURRENT CPU IS NOT TIMING ANYTHING.\n* UNDER THIS APPROACH, A TQE CAN BE SIMULTANEOUSLY TIMED ON\n* BOTH CPUS IN AN MP OR AP CONFIGURATION, BUT IT IS NOT\n* ALWAYS DOUBLY TIMED. THE GUARANTEE THAT CPUS ARE\n* EACH TIMING SOMETHING APPEARS TO BE A RELIABILITY FEATURE\n* TO RECOVER TIMING SHOULD ONE CLOCK COMPARATOR SUDDENLY STOP\n* GENERATING INTERRUPTS.\n* THERE ARE TWO POSSIBLE\n* DISPOSITIONS OF THE TQE:\n*   1) A BRANCH TO 'RET' WILL RETURN TO THE NORMAL LOGIC AND\n*      WILL CAUSE THE CLOCK COMPARATOR ON THIS CPU TO BE SET\n*      TO THE TQEVAL VALUE IN THE TQE POINTED TO BY R11.\n*   2) A BRANCH TO NOQUE WILL BYPASS PROCESSING FOR ANY TQE\n*      CAUSING THE CLOCK COMPARATOR FOR THIS CPU TO REMAIN\n*      UNCHANGED.\n* THIS IDENTICAL CODE CAN BE INVOKED ON THE OTHER CPU IN AN MP\n* OR AP ENVIRONMENT BY ISSUING A RPSGNL MACRO AS IS DONE BELOW.\n* HENSE, OPTION 2) DOES NOT NECESSARILY LEAVE THE TQE 'HANGING'\n* AS LONG AS THE OTHER CPU IS NOTIFIED TO PICK IT UP.\n* THERE IS A LITTLE KLUGE IN THIS CODE FOR WHICH APOLOGIES ARE\n* DUE. TO AVOID USING RESERVED BITS IN THE TQE, WE USE THE LOW\n* ORDER 8 BITS OF THE TOD TIME STAMP IN 'TQEVAL'. SINCE THE\n* STCK INSTRUCTION ON ALL 370 COMPUTERS LEAVE THE LOW ORDER 12\n* BITS ZERO, THESE BITS ARE ALL USUALLY OFF. IF THEY ARE ALMOST\n* ALL ON (SEE BELOW), THEN THIS IS TREATED AS AN INDICATION OF\n* CPU AFFINITY. NOTE THAT NO JOB IS IMPACTED ADVERSLY BY\n* INADVERTENTLY BEING CAUGHT BY THIS TRAP.\nREP 0EF0 58C0,0208           L     R12,PSAPCCAV       PERFORM ZAPPED INSTRUCTION\nREP 0EF4 9180,B058           TM    TQEFLGS3,TQEDIE    IS THIS A DIE\nREP 0EF8 4780,9A42           BZ    RET                NO, THEN NO CHANGE\nREP 0EFC 91FE,B017           TM    TQETOD8,X'FE'      KLUGE: TEST UNUSUAL TIME S\nREP 0F00 47E0,9A42           BNO   RET                IF NOT FUNNY, THEN NO CHAN\nREP 0F04 1BEE                SR    R14,R14            R14=0 PROVISIONALLY\nREP 0F06 9101,B017           TM    TQETOD8,X'01'      CHECK CPU0/CPU1 AFFINITY\nREP 0F0A 4780,9EA8           BZ    *+8                IF CPU0 AFFINITY, R14 STAY\nREP 0F0E 41E0,0001           LA    R14,1              ELSE R14=1\nREP 0F12 49E0,0204           CH    R14,PSACPUPA       IS CURRENT CPU THE CHOSEN\nREP 0F16 4780,9A42           BE    RET                YES, RETURN\nREP 0F1A 9180,B00F           TM    TQEFLGS2,TQECOMP   IS IT BEING TIMED ON THAT\nREP 0F1E 4780,9EC0           BZ    SIGNAL             NO, GOT TO WAKE IT UP\n*                                 GET HERE CAUSE THE COMPARATOR\n*                                 ON THIS CPU IS IDLE, BUT THE\n*                                 TOP TQE HAS AFFINITY TO THE\n*                                 OTHER FELLOW. CANT JUST QUIT\n*                                 CAUSE RECOVERY DEPENDS ON\n*                                 US TIMING SOMETHING, SO GO TO\n*                                 THE NEXT TQE IN THE QUEUE AND\n*                                 PROCESS IT.\nREP 0F22 58B0,B004           L     R11,TQEFLNK        TRY NEXT TQE\nREP 0F26 47F0,9E86           B     PATCH              GO BACK AND TEST\n*                   SIGNAL   EQU   *\nREP 0F2A 5810,0010           L     R1,CVTPTR\nREP 0F2E 5811,02FC           L     R1,CVTPCCAT-CVT(R1)\n*                            USING PCCAVT,R1\nREP 0F32 89E0,0002           SLL   R14,2              SHIFT CPU ID\nREP 0F36 581E,1000           L     R1,PCCAT00P(R14)   FIND TARGET PCCA\n*                            USING PCCA,R1\nREP 0F3A 1211                LTR   R1,R1              DOES THE CPU EXIST?\nREP 0F3C 4780,9A42           BZ    RET                NO, THEN CAN'T USE IT\nREP 0F40 9180,1082           TM    PCCACCE,PCCANUCC   IS THE CLOCK GOOD ON THAT\nREP 0F44 4710,9A42           BO    RET                NO, THEN TIME ON THIS ONE\n*                            DROP  R1\n*                            RPSGNL RQCHECK,CPU=(1)   SIGNAL OTHER CPU TO QUE TC\nREP 0F48 4100,0020           LA    0,32(0,0)                X'20' - RQCHECK FUNC\nREP 0F4C 8900,0018           SLL   0,24(0)                  SHIFTED INTO HIGH OR\nREP 0F50 58E0,0010           L     14,CVTPTR(0,0)           CVT ADDRESS\nREP 0F54 58F0,E2F8           L     15,CVTIPCRP-CVT(0,14)    IEAVERP ENTRY POINT\nREP 0F58 05EF                BALR  14,15                    ENTER IEAVERP AND ES\nREP 0F5A 12FF                LTR   R15,R15            SIGNAL SUCCESSFUL?\nREP 0F5C 4770,9A42           BNZ   RET                NO  BETTER QUE IT ON THIS\nREP 0F60 47F0,9B0E           B     NOQUE\n* DECK PRODUCED BY THE ASMTOZAP UTILITY 78/01/04 093723\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PL1LFCL": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x94\\x07\\x9f\\x00\\x94\\x08\\x1f\\x112\\x00#\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1994-03-20T00:00:00", "modifydate": "1994-03-22T11:32:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "SBGCSC"}, "text": "//SBGCSCP JOB (A006,SYTM,99,99),S-GOLOB,REGION=8M,\n//        CLASS=S,MSGCLASS=V,NOTIFY=&SYSUID\n/*DIST ROOM-25\n//PL1LFCL  PROC CR=800K,LR=1500K\n//*********************************************************************\n//PL1L     EXEC  PGM=IEMAA,PARM='LOAD,NODECK',REGION=&CR\n//STEPLIB  DD DSN=SBGCSC.FILE092.PDS,DISP=SHR  <== PL1/F COMPILER/LIBR\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DSN=&&LOADSET,UNIT=SYSDA,DISP=(MOD,PASS),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3200),\n//            SPACE=(CYL,(4,1),RLSE)\n//SYSUT3   DD DSN=&&SYSUT3,UNIT=(SYSDA,SEP=(SYSLIN)),SPACE=(CYL,(4,1))\n//SYSUT1   DD DSN=&&SYSUT1,UNIT=(SYSDA,SEP=(SYSUT3,SYSLIN)),\n//            SPACE=(1024,(60,60),,CONTIG),DCB=BLKSIZE=1024\n//SYSPUNCH DD DUMMY\n//*********************************************************************\n//LKED     EXEC  PGM=IEWL,PARM='XREF,LIST',COND=(9,LT,PL1L),\n//         REGION=&LR\n//SYSLIB   DD DSN=SBGCSC.FILE092.PDS,DISP=SHR  <== PL1/F COMPILER/LIBR\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSNAME=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSLMOD  DD DSN=&&GOSET(GO),DISP=(MOD,PASS),UNIT=SYSDA,\n//            SPACE=(CYL,(2,,16))\n//SYSLIN   DD DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD DDNAME=SYSIN\n//  PEND\n//COMPILE EXEC PL1LFCL\n//PL1L.SYSIN DD DISP=SHR,DSN=SBGCSC.FILE044.PDS(ASMTOZAF)\n//LKED.SYSLMOD DD DISP=SHR,DSN=SBGCSC.A.LOAD\n//SYSIN DD *\n SETCODE AC(0)\n SETSSI CB367044\n NAME ASMTOZAP(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBLPALK": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x01\\x03&\\x1f\\x01\\x050?\\x12@\\x00\\xc3\\x00\\xa9\\x00\\x16\\xc7\\xc5\\xd9\\xc8\\xc1\\xd9\\xc4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2003-09-18T00:00:00", "modifydate": "2005-10-30T12:40:00", "lines": 195, "newlines": 169, "modlines": 22, "user": "GERHARD"}, "text": "SUBLPALK TITLE 'S U B L P A L K  ***  LOCATE LPA RESIDENT CODE'\n         COPY  OPTIONGB\n         SPACE 1\n         SYSPARM LIST=YES\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*        COPYRIGHT 2003  EXPERT SYSTEM PROGRAMMING                    *\n*                        176 OLD STAGE COACH ROAD                     *\n*                        BRADFORD, VT 05033-8844                      *\n*                                                                     *\n*                    ALL RIGHTS RESERVED                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n**                                                                   **\n**  SUBLPALK  LOCATES A MODULE RESIDING IN AN LPA AREA               **\n**                                                                   **\n**  PARAMETER:  R1 POINTING TO A CL8 AREA CONTAINING THE DESIRED     **\n**    MODULE NAME.                                                   **\n**                                                                   **\n**  WHEN USED WITH THE LOADLPA MACRO, R0 IS EITHER 0 OR A DCB        **\n**    ADDRESS. WHEN THE DCB ADDRESS IS SUPPLIED, AND THE MODULE IS   **\n**    NOT IN LPA, A LOAD WILL BE ISSUED.                             **\n**                                                                   **\n***********************************************************************\n**                                                                   **\n**  NORMAL RETURN:                                                   **\n**    R0 : MODULE ENTRY POINT (WITH X'80' ON IF AM31)                **\n**    R1 : LENGTH                                                    **\n**    R15: 0 (MAIN MODULE)   4 (ALIAS)                               **\n**   AR0 : MODULE LOAD POINT (IF AVAILABLE), ELSE SAME AS R0         **\n**                                                                   **\n**  ERROR RETURNS IN R15:                                            **\n**                                                                   **\n**  16 - ERROR PROCESSING PARAMETER LIST, OR OTHER SEVERE PROBLEM    **\n**   8 - ERROR CSVQUERY OR LOAD                                      **\n**                                                                   **\n***********************************************************************\n         SPACE 1\n         PRINT &PRTSOR\nSUBLPALK PGMHEAD ZERO31,BASE=R12,PARM=R1,AM=ANY,RM=24,LOC=BELOW\n         STM   R0,R1,CALLR0  SAVE CALLER'S PARMS\n         SPACE 1\n         OICC  16,RESULT=RETCODE  PROVISIONAL RETURN CODE\n         LA    R5,0(,R1)     DID USER PASS A PARM AREA ?\n         LTR   R5,R5\n         BZ    PGMEXIT       NO; FATAL BOO-BOO\n         SPACE 1\n         L     R3,CVTPTR     GET CVT IN R3 FOR IEAVVMSR\n         USING CVTMAP,R3\n         SPACE 1\n         AIF   (NOT &MVSESA).NOCSVQ                             GP04234\n         CSVQUERY INEPNAME=(R5),OUTLENGTH=@LENGTH,OUTEPA=@ENTRY,       *\n               OUTLOADPT=@LOAD,OUTATTR1=DB,OUTATTR2=DB+1,OUTATTR3=DB+2,*\n               RETCODE=RETCODE,MF=(E,MYQUERY)\n         CH    R15,=H'8'     SUCCESSFUL ?\n         BNL   TESTOLD       NO\n         TM    DB,X'02'      ALIAS ENTRY ?\n         BZ    NOTALIAS      NO\n         MVICC 4             SET WARNING FLAG\nNOTALIAS TM    DB+1,X'30'    ATTR2 AM31 OR AMANY ?\n         BZ    LOADTWO       NO; RETURN                         GP03330\n         OI    @ENTRY,X'80'  SET FOR AM31 PREFERRED\n*---------------------------------------------------------------------*\n*  NOTE THAT CSVQUERY (AS ISSUED) WILL FIND A MODULE IN LPA, ETC. AS  *\n*  WELL AS IN JPA.                                                    *\n*  WHEN THE USER PASSES A NON-ZERO DCB PARAMETER AND THE MODULE IS IN *\n*  JPA, WE MUST ISSUE A LOAD FOR IT BECAUSE CALLER WILL EVENTUALLY    *\n*  ISSUE A DELETE FOR IT.                                             *\n*---------------------------------------------------------------------*\nLOADTWO  TM    DB+2,X'40'    FOUND IN JPA ?                     GP03330\n         BZ    SETLOAD       NO; RETURN LPA, ETC. ADDRESS       GP03330\n         ICM   R4,15,CALLR0  DID USER SUPPLY A DCB PARAMETER ?  GP03330\n         BZ    SETLOAD       NO; JUST RETURN                    GP03330\n         B     TESTLOAD      YES; DO EXTRA LOAD                 GP03330\n         SPACE 1\nTESTOLD  CH    R15,=H'20'    UNAVAILABLE ON THIS SYSTEM ?\n         BNE   TESTLOAD      NO; SEE WHETHER USER WANTS LOAD\n.NOCSVQ  SPACE 1                                                GP04234\n*---------------------------------------------------------------------*\n*   SCAN THE MLPA FOR THE REQUESTED MODULE                            *\n*---------------------------------------------------------------------*\n         PUSH  USING\nMLPALOOK ICM   R0,15,0(R5)\n         ICM   R1,15,4(R5)\n         L     R15,CVTQLPAQ  GET MLPA CDE CHAIN\n         USING CDENTRY,R15\nMLPALOOP ICM   R15,15,CDCHAIN   GET NEXT CDE; ELSE TRY PLPA\n         BZ    PLPALOOK\n         C     R1,CDNAME+4   MATCH ?\n         BNE   MLPALOOP      NO; TRY NEXT\n         C     R0,CDNAME     FULL MATCH ?\n         BNE   MLPALOOP      NO; TRY NEXT\n         B     FOUNDLP2      JOIN COMMON\n         POP   USING\n         SPACE 1\n*---------------------------------------------------------------------*\n*   SCAN THE PLPA FOR THE REQUESTED MODULE                            *\n*---------------------------------------------------------------------*\n         PUSH  USING\nPLPALOOK L     R7,CVTLPDSR   IEAVVMSR\n         ICM   R0,15,0(R5)\n         ICM   R1,15,4(R5)\n         BASR  R14,R7    NOTE THAT R7-R9 ARE CLOBBERED\n           B   FOUNDLPA      MODULE FOUND\n         XC    @ENTRY(8),@ENTRY    SHOW NOT FOUND\n         MVICC 8,RESULT=RETCODE  SET LEVEL 8 ERROR\n         B     TESTLOAD\n         SPACE 1\n*---------------------------------------------------------------------*\n*   HAVE A CDE OR LPDE - EXTRACT LOAD ADDRESS AND SIZE                *\n*---------------------------------------------------------------------*\n         USING CDENTRY,R15\nFOUNDLPA LR    R15,R0        COPY CDE ADDRESS\nFOUNDLP2 MVICC 0             RESET THE RETURN CODE              GP04234\n         ICM   R0,15,CDENTPT  LOAD ENTRY ADDRESS\n         ST    R0,@ENTRY     RETURN ENTRY ADDRESS\n         ST    R0,@LOAD      SET AS LOAD ADDRESS, ALSO\n         AIF   (NOT &MVSESA).NOAMF                              GP04234\n         TM    CDATTR2,CDEANYM  AM ANY ?\n         BZ    LOOKMIN       NO\n         OI    @ENTRY,X'80'  SET AM31 PREFERRED\n.NOAMF   ANOP  ,                                                GP04234\nLOOKMIN  TM    CDATTR,CDMIN  MINOR ?\n         BZ    GETXTLST      NO; GET EXTENT LIST\n         OICC  4             INDICATE ALIAS ENTRY\n         TM    CDATTR2,CDXLE  EXTENT LIST PRESENT ?             GP05303\n         BNZ   GETXTLST      YES; DON'T NEED MAJOR              GP05303\n         ICM   R15,15,CDXLMJP  GET POINTER TO MAJOR\n         BNZ   LOOKMIN\n         B     SETLOAD       RESTORE REGS\nGETXTLST L     R14,CDXLMJP   GET EXTENT LIST ADDRESS\n         USING XTLST,R14\n         MVC   @LOAD,XTLMSBAD LOAD ADDRESS\n         MVC   @LENGTH,XTLMSBLA  LENGTH\n         NI    @LENGTH,255-X'80'  RESET END OF LIST BIT\n         B     SETLOAD       JOIN COMMON\n         POP   USING         RESTORE ASSIGNMENTS\n         SPACE 1\n*---------------------------------------------------------------------*\n*   USER WANTS A LOAD ISSUED WHEN DCB IS NON-ZERO.                    *\n*     WHEN DCB (R0)<256, THEN USE DCB=0 ON LOAD                       *\n*---------------------------------------------------------------------*\nTESTLOAD ICM   R4,15,CALLR0  DID USER SUPPLY A DCB PARAMETER ?\n         BZ    SETLOAD       NO; JUST RETURN ERROR CODE\n         CH    R4,=H'256'    VALID DCB ?\n         BNL   *+4+2         PERHAPS\n         SR    R4,R4         ELSE FLAG TO REQUEST LOAD\n         LOAD  DCB=(R4),EPLOC=(R5),ERRET=SETLOAD\n         STM   R0,R1,@ENTRY   RETURN ENTRY / LENGTH\n         XC    RETCODE,RETCODE    CLEAR RETURN\n         ICM   R14,15,@LOAD  IS LOAD ADDRESS SET ?              GP03330\n         BNZ   SETLOAD       YES; RETURN IT                     GP03330\n         LR    R14,R0        COPY ENTRY ADDRESS                 GP03330\n         LA    R14,0(,R14)   CLEAN AM BIT                       GP03330\n         ST    R14,@LOAD     SET TO RETURN ENTRY AS LOAD        GP03330\n         SPACE 1\n*---------------------------------------------------------------------*\n*   RETURN LOAD ADDRESS IN AR0                                        *\n*---------------------------------------------------------------------*\nSETLOAD  DS    0H                                               GP04234\n         AIF   (NOT &MVSESA).NOLAM                              GP04234\n         LAM   R0,R0,@LOAD   GET LOAD POINT\n.NOLAM   SPACE 1                                                GP04234\n*---------------------------------------------------------------------*\n*   EXIT: WHEN R15=0, ENTRY ADD IN R0, LENGTH IN R1, LOAD ADDR IN AR0 *\n*     R15=8 MODULE NOT FOUND; R15=16 INVALID NAME ADDRESS             *\n*---------------------------------------------------------------------*\nPGMEXIT  PGMEXIT COPYRET=(RETCODE,12)   RETURN R15, R0, R1\n         SPACE 1\n         LTORG ,\n         SPACE 2\nSAVE     DSECT ,             SAVE & WORK AREA\nDB       DS    D\nCALLR0   DS    A     1/2\nCALLR1   DS    A     2/2\n         SERVDEFS ,          EXPAND COMMON STUFF\n         ORG   RETCODE+4     RETURN CODE\n@ENTRY   DS    A     2/3     RETURN ENTRY POINT ADDRESS\n@LENGTH  DS    F     3/3     RETURN LENGTH\n@LOAD    DS    A             RETURN LOAD POINT ADDRESS\n         SPACE 1\n         AIF   (NOT &MVSESA).SKPCVSQ                            GP04234\n         CSVQUERY MF=(L,MYQUERY)\n.SKPCVSQ SPACE 1                                                GP04234\nSAVEEND  EQU   *             END OF DYNAMIC AREA\n         SPACE 2\n         PRINT &PRTSYS\n         CVT   DSECT=YES\n         IHACDE ,\n         IHAXTLST ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIMERZAP": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87)\\x0f\\x00\\x87)\\x0f\\t\\x00\\x00j\\x00j\\x00\\x00\\xc7\\xc9\\xd3\\xc2\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-10-17T00:00:00", "modifydate": "1987-10-17T09:00:00", "lines": 106, "newlines": 106, "modlines": 0, "user": "GILBERT"}, "text": "*ZAP CARD ++PTF(HG00102)\n*ZAP CARD   /* MODIFY 'SET CLOCK COMPARATOR' TO ESTABLISH  AN\n*ZAP CARD      OPTIONAL CPU AFFINITY FOR TQES ASSOCIATED WITH\n*ZAP CARD      DIE ROUTINES */.\n*ZAP CARD ++VER(Z037) PRE(UZ80700 UZ08819).\n*ZAP CARD ++ZAP(IEAVRTI0).\n*ZAP CARD  NAME IEA0TI00\n*ZAP CARD  EXPAND IEA0TI00(256)\nIEA0TI00 CSECT\nZAPPED   EQU   IEA0TI00+X'AA4'\nNOQUE    EQU   IEA0TI00+X'B78'\nPATCH    EQU   IEA0TI00+X'EF0'\n*ZAP START VER\n         USING IEA0TI00+X'6A',R9\n         USING PSA,R0\n         USING TQE,R11\n         ORG   ZAPPED\n         BNZ   NOQUE\nQUE      L     R12,PSAPCCAV\nRET      EQU   *\n         ORG   PATCH\n         DC    XL12'00'\n*ZAP START REP\n         ORG   QUE\n         B     PATCH\n         ORG   PATCH\n* THE 'SET CLOCK COMPARATOR' ENTRY POINT OF THE\n* TIMER SUPERVISOR MODULE IS INVOKED BY TQE ENQUE AND DEQUE\n* SERVICES WHEN A TQE IS ADDED OR REMOVED FROM THE REAL TIME\n* QUEUE. THIS ZAP IS ENTERED WHEN THAT ROUTINE HAS DETERMINED\n* THAT THE FIRST TQE IS NOT BEING TIMED OR THAT\n* THE CURRENT CPU IS NOT TIMING ANYTHING.\n* UNDER THIS APPROACH, A TQE CAN BE SIMULTANEOUSLY TIMED ON\n* BOTH CPUS IN AN MP OR AP CONFIGURATION, BUT IT IS NOT\n* ALWAYS DOUBLY TIMED. THE GUARANTEE THAT CPUS ARE\n* EACH TIMING SOMETHING APPEARS TO BE A RELIABILITY FEATURE\n* TO RECOVER TIMING SHOULD ONE CLOCK COMPARATOR SUDDENLY STOP\n* GENERATING INTERRUPTS.\n* THERE ARE TWO POSSIBLE\n* DISPOSITIONS OF THE TQE:\n*   1) A BRANCH TO 'RET' WILL RETURN TO THE NORMAL LOGIC AND\n*      WILL CAUSE THE CLOCK COMPARATOR ON THIS CPU TO BE SET\n*      TO THE TQEVAL VALUE IN THE TQE POINTED TO BY R11.\n*   2) A BRANCH TO NOQUE WILL BYPASS PROCESSING FOR ANY TQE\n*      CAUSING THE CLOCK COMPARATOR FOR THIS CPU TO REMAIN\n*      UNCHANGED.\n* THIS IDENTICAL CODE CAN BE INVOKED ON THE OTHER CPU IN AN MP\n* OR AP ENVIRONMENT BY ISSUING A RPSGNL MACRO AS IS DONE BELOW.\n* HENSE, OPTION 2) DOES NOT NECESSARILY LEAVE THE TQE 'HANGING'\n* AS LONG AS THE OTHER CPU IS NOTIFIED TO PICK IT UP.\n* THERE IS A LITTLE KLUGE IN THIS CODE FOR WHICH APOLOGIES ARE\n* DUE. TO AVOID USING RESERVED BITS IN THE TQE, WE USE THE LOW\n* ORDER 8 BITS OF THE TOD TIME STAMP IN 'TQEVAL'. SINCE THE\n* STCK INSTRUCTION ON ALL 370 COMPUTERS LEAVE THE LOW ORDER 12\n* BITS ZERO, THESE BITS ARE ALL USUALLY OFF. IF THEY ARE ALMOST\n* ALL ON (SEE BELOW), THEN THIS IS TREATED AS AN INDICATION OF\n* CPU AFFINITY. NOTE THAT NO JOB IS IMPACTED ADVERSLY BY\n* INADVERTENTLY BEING CAUGHT BY THIS TRAP.\n         L     R12,PSAPCCAV       PERFORM ZAPPED INSTRUCTION\n         TM    TQEFLGS3,TQEDIE    IS THIS A DIE\n         BZ    RET                NO, THEN NO CHANGE\n         TM    TQETOD8,X'FE'      KLUGE: TEST UNUSUAL TIME STAMP\n         BNO   RET                IF NOT FUNNY, THEN NO CHANGE\n         SR    R14,R14            R14=0 PROVISIONALLY\n         TM    TQETOD8,X'01'      CHECK CPU0/CPU1 AFFINITY\n         BZ    *+8                IF CPU0 AFFINITY, R14 STAYS 0\n         LA    R14,1              ELSE R14=1\n         CH    R14,PSACPUPA       IS CURRENT CPU THE CHOSEN ONE?\n         BE    RET                YES, RETURN\n         TM    TQEFLGS2,TQECOMP   IS IT BEING TIMED ON THAT CPU\n         BZ    SIGNAL             NO, GOT TO WAKE IT UP\n*                                 GET HERE CAUSE THE COMPARATOR\n*                                 ON THIS CPU IS IDLE, BUT THE\n*                                 TOP TQE HAS AFFINITY TO THE\n*                                 OTHER FELLOW. CANT JUST QUIT\n*                                 CAUSE RECOVERY DEPENDS ON\n*                                 US TIMING SOMETHING, SO GO TO\n*                                 THE NEXT TQE IN THE QUEUE AND\n*                                 PROCESS IT.\n         L     R11,TQEFLNK        TRY NEXT TQE\n         B     PATCH              GO BACK AND TEST\nSIGNAL   L     R1,CVTPTR\n         L     R1,CVTPCCAT-CVT(R1)\n         USING PCCAVT,R1\n         SLL   R14,2              SHIFT CPU ID\n         L     R1,PCCAT00P(R14)   FIND TARGET PCCA\n         USING PCCA,R1\n         LTR   R1,R1              DOES THE CPU EXIST?\n         BZ    RET                NO, THEN CAN'T USE IT\n         TM    PCCACCE,PCCANUCC   IS THE CLOCK GOOD ON THAT CPU?\n         BO    RET                NO, THEN TIME ON THIS ONE\n         DROP  R1\n         RPSGNL RQCHECK,CPU=(1)   SIGNAL OTHER CPU TO QUE TCB\n         LTR   R15,R15            SIGNAL SUCCESSFUL?\n         BNZ   RET                NO, BETTER QUE IT ON THIS CPU\n         B     NOQUE\n*ZAP STOP\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAPSA\n         IHATQE\n         IHAPCCAT\n         IHAPCCA\n         EQUREGS\nTQETOD8  EQU   TQEVAL+7\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT044/FILE044.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT044", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}