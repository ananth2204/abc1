         PUNCH ' SETOPT PARM(AMODE=24,RMODE=24,AC=1,REUS=REFR) '
          MACRO
**********************************************************************
*        Macro Name:     $EXIT                                       *
*        Operation:      Standard Linkage - Exit                     *
*        Usage:                                                      *
**********************************************************************
*                                                                    *
* Syntax:                                                            *
* Name     #EXIT     Keywords...                                     *
*                                                                    *
* Name     Module name                                               *
*          Values:   Any valid module name                           *
*          Default:  NULL                                            *
*                                                                    *
* Keywords:                                                          *
* LTORG    Literal pool at end of module                             *
*          Values:   YES/NO                                          *
*          Default:  YES                                             *
*                                                                    *
* RC       A literal value for a return code - or - if unspecified   *
*          it will default to use the value in R15 - or - a          *
*          register value in parenthesis is also accepted.           *
*                                                                    *
*           rc=7   sets rc=7                                         *
*           rc=(7) sets rc= value in r7                              *
*           rc=null defaults to rc= value in r15                     *
* ** note **                                                         *
*   r2 is used as a work reg, and may not be used to specify the     *
*   return code value.                                               *
*                                                                    *
**********************************************************************
**********************************************************************
* #EXIT        Standard Linkage - Exit                               *
**********************************************************************
&LABEL   #EXIT &LTORG=YES,&RC=     LITERAL POOL
         GBLC  &EXRC               RETURN CODE
         AIF   ('&RC' NE '').LABEL1
&EXRC    SETC  '(R15)'
         AGO   .SHOWLST
.LABEL1  ANOP
&EXRC    SETC  '&RC'
.SHOWLST ANOP
         MNOTE *,'#EXIT  Utilizing the following parameters:'
         MNOTE *,'       LTORG=&LTORG'
         MNOTE *,'       RC=&EXRC    '
         GBLC  &GDWAL              Dynamic workarea length
         GBLC  &GDWAR              Dynamic workarea register
         GBLC  &GSAVE              Save registers
         GBLC  &GSAVEAREA          Savearea
.**********************************************************************
.*       Return Code                                                  *
.**********************************************************************
         AIF   ('&LABEL' EQ '').NOLABL
&LABEL   EQU   *                   EXIT
.NOLABL  ANOP
.**********************************************************************
.*       TEST FOR INVALID RC REGISTER VALUES.                         *
.**********************************************************************
         AIF   ('&EXRC'(1,1) NE '(').NORCREG
&REGRC   SETC  '&EXRC'(2,K'&EXRC-2)
         AIF   ('&REGRC' EQ '2').BADRC
         AIF   ('&REGRC' EQ 'R2').BADRC
         AIF   ('&REGRC' EQ '1').BADRC
         AIF   ('&REGRC' EQ 'R1').BADRC
         AIF   ('&REGRC' EQ '0').BADRC
         AIF   ('&REGRC' EQ 'R0').BADRC
         AIF   ('&REGRC' EQ '13').BADRC
         AIF   ('&REGRC' EQ 'R13').BADRC
         AGO   .NORCREG
.BADRC   MNOTE 12,' INVALID REGISTER &REGRC USED FOR RETURN CODE '
         MONTE 12,' SPECIFY R3 THROUGH R12, OR R14, OR R15 INSTEAD.'
         MEXIT
.NORCREG ANOP
.**********************************************************************
.*       Dynamic Workarea                                             *
.**********************************************************************
         AIF   ('&GDWAL' EQ '').DWANO
         PUSH  PRINT
.*       PRINT OFF
         MNOTE *,'  STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL (WORK AX
               REA).'
         LR    R2,R15             SAVE ORIGINAL RETURN CODE VALUE
         STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL  RELEASE WORKAREA
         LR    R15,R2             RESTORE ORIGINAL RETURN CODE VALUE
         POP   PRINT
         AGO   .DWAEND
.DWANO   ANOP
         AGO   .DWAEND
.DWAEND  ANOP
.**********************************************************************
.*       SAVEAREA                                                     *
.**********************************************************************
         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X
               ('&GSAVEAREA' EQ 'YES').SAYES
         MNOTE 8,'#ENTRY INVALID SAVEAREA=&GSAVEAREA - YES/NO'
         MEXIT
.SAYES   ANOP
         LR    R1,R13              SAVEAREA ADDRESS
         L     R13,4(R13)          RESTORE PREVIOUS SAVEAREA
         MNOTE *,'  STORAGE RELEASE,ADDR=(R1),LENGTH=72 (SAVE AREA).'
         PUSH  PRINT
         PRINT OFF
         LR    R2,R15             SAVE ORIGINAL RETURN CODE VALUE
         STORAGE RELEASE,ADDR=(R1),LENGTH=72  RELEASE SAVEAREA
         LR    R15,R2             RESTORE ORIGINAL RETURN CODE VALUE
         POP   PRINT
         AGO   .SAEND
.SANO    ANOP
         XC    0(72,R13),0(R13)    Clear current savearea
         SH    R13,=H'72'          Adjust savearea
         AGO   .SAEND
.SAEND   ANOP
.**********************************************************************
.*       Save Registers                                               *
.**********************************************************************
         AIF   ('&GSAVE' EQ 'YES').SAVEYES,                            X
               ('&GSAVE' EQ 'NO').SAVENO
         MNOTE 8,'#EXIT Invalid SAVE=&GSAVE - YES/NO'
         MEXIT


.SAVEYES ANOP
         AIF   ('&EXRC'(1,1) NE '(').LABELC
&REG     SETC  '&EXRC'(2,K'&EXRC-2)
         LR    R15,&REG                  SET RETURN CODE
         AGO   .LABELA
.LABELC  AIF   ('&EXRC' EQ '').LABELA
         LA    R15,&EXRC.(0,0)    SET RETURN CODE
.LABELA  ANOP
         RETURN (14,12),RC=(15)    RETURN CONTROL
         AGO   .SAVEEND


.SAVENO  ANOP
         AIF   ('&EXRC'(1,1) NE '(').LABELD
&REG     SETC  '&EXRC'(2,K'&EXRC-2)
         LR    R15,&REG              SET RETURN CODE
         AGO   .RCASIS1
.LABELD  AIF   ('&EXRC' EQ '').LABELS
         AGO   .RCASIS1
.LABELS  ANOP
         LA    R15,&EXRC.(0,0)       SET RETURN CODE
.RCASIS1 ANOP
         BR    R14                 Return Control


.SAVEEND ANOP
.**********************************************************************
.*       LTORG                                                        *
.**********************************************************************
         AIF   ('&LTORG' EQ 'YES').LTORGYES,                           X
               ('&LTORG' EQ 'NO').LTORGNO
         MNOTE 8,'#EXIT Invalid LTORG=&LTORG - YES/NO'
         MEXIT
.LTORGYES ANOP
         LTORG                     Literal pool
.LTORGNO ANOP
         MEND
          MACRO
**********************************************************************
*                                                                    *
* Usage:                                                             *
* Name     #ENTRY    Keywords...                                     *
*                                                                    *
* Name     Module name                                               *
*          Values:   Any valid module name                           *
*          Default:  NULL                                            *
*                                                                    *
* Keywords:                                                          *
* AMODE    Addressing mode                                           *
*          Values:   24/31/ANY                                       *
*          Default:  24                                              *
*                                                                    *
* BASE     Base registers                                            *
*          Values:   (Rxx,Ryy,Rzz...) - Any valid registers          *
*          Default:  (R12)                                           *
*                                                                    *
* DWA      Dynamic Workarea                                          *
*          Values:   (ddd,lll,rrr,pp)                                *
*                    ddd  - Dynamic workarea dummy section (DSECT)   *
*                    lll  - Dynamic workarea size                    *
*                    rrr  - Dynamic workarea base register           *
*                    pp   - Dynamic workarea padding value in hex    *
*          Default:  NULL - Dynamic workarea not used                *
*                                                                    *
* LOC      Location of getmained savearea/workarea                   *
*          Values:   BELOW/ANY/RES                                   *
*          Default:  RES                                             *
*                                                                    *
* MODID    Module identification                                     *
*          Values:   YES/NO                                          *
*          Default:  YES                                             *
*                                                                    *
* RMODE    Residence mode                                            *
*          Values:   24/ANY                                          *
*          Default:  24                                              *
*                                                                    *
* SAVE     Save/restore registers at entry/exit                      *
*          Values:   YES/NO                                          *
*          Default:  YES                                             *
*                                                                    *
* SAVEAREA Acquire savearea                                          *
*          Values:   YES/NO                                          *
*          Default:  YES                                             *
*                                                                    *
* SPLEVEL  Macro level                                               *
*          Values:   0/1/2/3/4/5/6                                   *
*          Default:  0 - Use default macro level                     *
*                                                                    *
* SWA      Static Workarea                                           *
*          Values:   (ccc,rrr)                                       *
*                    ccc  - Static workarea control section (CSECT)  *
*                    rrr  - Static workarea base register            *
*          Default:  NULL - Static workarea not used                 *
*                                                                    *
**********************************************************************
* #ENTRY       Standard Linkage - Entry                              *
**********************************************************************
&LABEL   #ENTRY &AMODE=31,         Addressing mode                     X
               &RMODE=ANY,         Residence mode                      X
               &BASE=(R12),        Base Registers                      X
               &DWA=,              Dynamic workarea                    X
               &LOC=RES,           LOCATION OF SAVEAREA/WORKAREA       X
               &MODID=YES,         Module identification               X
               &PARMS=0,           Parameters                          X
               &SAVE=YES,          Save/restore regs at entry/exit     X
               &SAVEAREA=YES,      Savearea                            X
               &SPLEVEL=0,         Macro level                         X
               &SUBPOOL=0,         Subpool of savearea/workarea        X
               &SWA=               Static workarea
         GBLA  &COMMON             Common Macros Level
&COMMON  SETA  1                   Common Macros Level
         MNOTE *,'#ENTRY Utilizing the following parameters:'
         MNOTE *,'       AMODE=&AMODE'
         MNOTE *,'       BASE=&BASE'
         MNOTE *,'       DWA=&DWA'
         MNOTE *,'       LOC=&LOC'
         MNOTE *,'       MODID=&MODID'
         MNOTE *,'       PARMS=&PARMS'
         MNOTE *,'       RMODE=&RMODE'
         MNOTE *,'       SAVE=&SAVE'
         MNOTE *,'       SAVEAREA=&SAVEAREA'
         MNOTE *,'       SPLEVEL=&SPLEVEL'
         MNOTE *,'       SUBPOOL=&SUBPOOL'
         MNOTE *,'       SWA=&SWA'
         GBLC  &GAMODE             Addressing Mode
         GBLC  &GCSECT             Control Section
         GBLC  &GDWAL              Dynamic workarea length
         GBLC  &GSAVE              Save registers
         GBLC  &GSAVEAREA          Savearea
         GBLC  &GDWAN              Dynamic workarea name
         GBLC  &GDWAR              Dynamic workarea register
         GBLC  &GSPLEVEL           Macro level
         GBLC  &SYSSPLV            Macro level
         GBLC  &GSUBPOOL           Subpool of savearea/workarea
         GBLC  &GRMODE             Residence Mode
         GBLC  &GSWAN              Static workarea name
         GBLC  &GSWAR              Static workarea register
         LCLA  &BRC                Base register count
         LCLC  &BC                 Base register current
         LCLC  &BP                 Base register Caller's
         LCLC  &BRU                Base register using
         LCLC  &DWALBL             Dynamic workarea label
&GAMODE  SETC  '&AMODE'            Addressing Mode
&GCSECT  SETC  '&LABEL'            Control Section
&GRMODE  SETC  '&RMODE'            Residence Mode
&GSAVE   SETC  '&SAVE'             Save registers
&GSAVEAREA SETC '&SAVEAREA'        Savearea
&GSPLEVEL SETC '&SPLEVEL'          Macro level
&GSUBPOOL SETC  '&SUBPOOL'         Subpool of savearea/workarea
         AIF   ('&LOC' EQ 'BELOW').LOCOK,                              X
               ('&LOC' EQ 'ANY').LOCOK,                                X
               ('&LOC' EQ 'RES').LOCOK
         MNOTE 8,'#ENTRY Invalid LOC=&LOC - BELOW/ANY/RES/EXPLICIT'
         MEXIT
.LOCOK   ANOP
&GCSECT  CSECT                     Control Section
.**********************************************************************
.*       AMODE                                                        *
.**********************************************************************
         AIF   ('&AMODE' EQ '24').AMODEOK,                             X
               ('&AMODE' EQ '31').AMODEOK,                             X
               ('&AMODE' EQ 'ANY').AMODEOK
         MNOTE 8,'#ENTRY Invalid AMODE=&AMODE - 24/31/ANY'
         MEXIT
.AMODEOK ANOP
&GCSECT  AMODE &GAMODE             Addressing Mode
         AGO   .AMODEEND
.AMODENO ANOP
         AGO   .AMODEEND
.AMODEEND ANOP
.**********************************************************************
.*       RMODE                                                        *
.**********************************************************************
         AIF   ('&RMODE' EQ '24').RMODEOK,                             X
               ('&RMODE' EQ 'ANY').RMODEOK
         MNOTE 8,'#ENTRY Invalid RMODE=&RMODE - 24/ANY'
         MEXIT
.RMODEOK ANOP
&GCSECT  RMODE &GRMODE             Residence Mode
         AGO   .RMODEEND
.RMODENO ANOP
         AGO   .RMODEEND
.RMODEEND ANOP
.**********************************************************************
.*       SPLEVEL                                                      *
.**********************************************************************
         AIF   ('&SPLEVEL' EQ '0').SPLVLNO,                            X
               ('&SPLEVEL' EQ '1').SPLVLYES,                           X
               ('&SPLEVEL' EQ '2').SPLVLYES,                           X
               ('&SPLEVEL' EQ '3').SPLVLYES,                           X
               ('&SPLEVEL' EQ '4').SPLVLYES,                           X
               ('&SPLEVEL' EQ '5').SPLVLYES,                           X
               ('&SPLEVEL' EQ '6').SPLVLYES
         MNOTE 8,'#ENTRY Invalid SPLEVEL=&SPLEVEL - 0/1/2/3/4/5/6'
         MEXIT
.SPLVLYES ANOP
         SPLEVEL SET=&SPLEVEL      Set macro level
         AGO   .SPLVLEND
.SPLVLNO ANOP
         SPLEVEL SET               Use default macro level
         AGO   .SPLVLEND
.SPLVLEND ANOP
.**********************************************************************
.*       Module identification                                        *
.**********************************************************************
         AIF   ('&MODID' EQ 'NO').MODIDNO,                             X
               ('&MODID' EQ 'YES').MODIDYES
         MNOTE 8,'#ENTRY Invalid MODID=&MODID - YES/NO'
         MEXIT
.MODIDYES ANOP
         J     OVRIDENT            BRANCH AROUND MODULE IDENTIFICATION
.*       B     4+1+24+3(0,R15)     BRANCH AROUND MODULE IDENTIFICATION
         DC    AL1(24)             Module identification length
         DC    CL8'&GCSECT'        CSECT name
         DC    CL8'&SYSDATE'       Assembly date
         DC    CL8'&SYSTIME'       Assembly time
         DC    AL3(0)              Filler
OVRIDENT DS    0H
         AGO   .MODIDEND
.MODIDNO ANOP
         AGO   .MODIDEND
.MODIDEND ANOP
.**********************************************************************
.*       Register / Savearea Equates                                  *
.**********************************************************************
         AIF   (D'R0).REGEQUNO
A0       EQU    0                  Access register
A1       EQU    1                  Access register
A2       EQU    2                  Access register
A3       EQU    3                  Access register
A4       EQU    4                  Access register
A5       EQU    5                  Access register
A6       EQU    6                  Access register
A7       EQU    7                  Access register
A8       EQU    8                  Access register
A9       EQU    9                  Access register
A10      EQU   10                  Access register
A11      EQU   11                  Access register
A12      EQU   12                  Access register
A13      EQU   13                  Access register
A14      EQU   14                  Access register
A15      EQU   15                  Access register
C0       EQU    0                  Control register
C1       EQU    1                  Control register
C2       EQU    2                  Control register
C3       EQU    3                  Control register
C4       EQU    4                  Control register
C5       EQU    5                  Control register
C6       EQU    6                  Control register
C7       EQU    7                  Control register
C8       EQU    8                  Control register
C9       EQU    9                  Control register
C10      EQU   10                  Control register
C11      EQU   11                  Control register
C12      EQU   12                  Control register
C13      EQU   13                  Control register
C14      EQU   14                  Control register
C15      EQU   15                  Control register
F0       EQU    0                  Floating point register
F1       EQU    2                  Floating point register
F2       EQU    4                  Floating point register
F3       EQU    6                  Floating point register
R0       EQU    0                  General register - System
R1       EQU    1                  General register - System
R2       EQU    2                  General register - System
R3       EQU    3                  General register
R4       EQU    4                  General register
R5       EQU    5                  General register
R6       EQU    6                  General register
R7       EQU    7                  General register
R8       EQU    8                  General register
R9       EQU    9                  General register
R10      EQU   10                  General register
R11      EQU   11                  General register
R12      EQU   12                  General register
R13      EQU   13                  General register - Savearea
R14      EQU   14                  General register - System
R15      EQU   15                  General register - System
SAVEPL1  EQU    0                  Savearea PL1
SAVEPREV EQU    4                  Savearea Previous (from caller)
SAVENEXT EQU    8                  Savearea Next (from target)
SAVER14  EQU   12                  Savearea R14 (Return address)
SAVER15  EQU   16                  Savearea R15 (Entry address)
SAVER0   EQU   20                  Savearea R0
SAVER1   EQU   24                  Savearea R1
SAVER2   EQU   28                  Savearea R2
SAVER3   EQU   32                  Savearea R3
SAVER4   EQU   36                  Savearea R4
SAVER5   EQU   40                  Savearea R5
SAVER6   EQU   44                  Savearea R6
SAVER7   EQU   48                  Savearea R7
SAVER8   EQU   52                  Savearea R8
SAVER9   EQU   56                  Savearea R9
SAVER10  EQU   60                  Savearea R10
SAVER11  EQU   64                  Savearea R11
SAVER12  EQU   68                  Savearea R12
&GREGEQU SETA  1
.REGEQUNO ANOP
.**********************************************************************
.*       Save Registers                                               *
.**********************************************************************
         AIF   ('&GSAVE' EQ 'YES').SAVEYES,                            X
               ('&GSAVE' EQ 'NO').SAVENO
         MNOTE 8,'#ENTRY Invalid SAVE=&GSAVE - YES/NO'
         MEXIT
.SAVEYES ANOP
         SAVE  (14,12)             Save caller's registers
         AGO   .SAVEEND
.SAVENO  ANOP
.SAVEEND ANOP
.**********************************************************************
.*       Base Register(s)                                             *
.**********************************************************************
         AIF   ('&BASE' EQ 'NOBASE').NOBASE
         AIF   (T'&BASE NE 'O').BASEOK
         MNOTE 8,'#ENTRY Missing Required Keyword BASE'
         MEXIT
.**** ELSE BASE=0 = NOBASE
         AGO   .NOBASE
.BASEOK  ANOP
         LR    &BASE(1),R15        Load base register
&BRC     SETA 1
.BASENXT ANOP
         AIF   (&BRC EQ N'&BASE).BASEEND
&BRC     SETA  &BRC+1              Increment base register count
&BC      SETC  '&BASE(&BRC)'       Current base register
&BP      SETC  '&BASE(&BRC-1)'     Caller's base register
         LA    &BC,4095(,&BP)      Load base register
         LA    &BC,1(,&BC)         Load base register
         AGO   .BASENXT
.BASEEND ANOP
&BRU     SETC  '&BASE'
         AIF   ('&BASE'(1,1) NE '(').USING1
&BRU     SETC  '&BASE'(2,K'&BASE-2)
.USING1  ANOP
         USING &LABEL,&BRU         Reference control section
.NOBASE  ANOP
.**********************************************************************
.*       Savearea                                                     *
.**********************************************************************
         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X
               ('&GSAVEAREA' EQ 'YES').SAYES
         MNOTE 8,'#ENTRY Invalid SAVEAREA=&GSAVEAREA - YES/NO'
         MEXIT
.SAYES   ANOP
         LR    R3,R0               Caller's R0
         LR    R4,R1               Caller's R1
         MNOTE *,'  STORAGE OBTAIN,LENGTH=72,LOC=&LOC    GETMAIN'
         PUSH  PRINT
         PRINT OFF
         STORAGE OBTAIN,LENGTH=72,LOC=&LOC OBTAIN SAVEAREA
         POP   PRINT
         ST    R13,SAVEPREV(,R1)   Savearea previous
         ST    R1,SAVENEXT(,R13)   Savearea next
         LR    R13,R1              Reference savearea
         LR    R0,R3               Caller's R0
         LR    R1,R4               Caller's R1
         AGO   .SAEND
.SANO    ANOP
         LA    R15,72(,R13)        Acquire savearea
         ST    R13,SAVEPREV(,R15)  Savearea previous
         ST    R15,SAVENEXT(,R13)  Savearea next
         LR    R13,R15             Reference savearea
         AGO   .SAEND
.SAEND   ANOP
.**********************************************************************
.*       Dynamic Workarea                                             *
.**********************************************************************
         AIF   (N'&DWA EQ 0).DWANO
         AIF   (N'&DWA EQ 3).PADDFLT
         AIF   (N'&DWA EQ 4).DWAOK
         MNOTE 8,'#ENTRY Invalid DWA=&DWA'
         MNOTE 8,'Syntax: DWA=(DSECT_NAME,LENGTH,REG)'
         MEXIT
.DWAOK   ANOP
&GDWAP   SETC  '&DWA(4)'           DYNAMIC WORKAREA PAD VALUE
         AGO   .PADSET
.PADDFLT ANOP
&GDWAP   SETC  '00'                DEFAULT PAD VALUE IS HEX 00
.PADSET  ANOP
&GDWAN   SETC  '&DWA(1)'           DYNAMIC WORKAREA NAME
&GDWAL   SETC  '&DWA(2)'           Dynamic workarea length
&GDWAR   SETC  '&DWA(3)'           Dynamic workarea register
&DWALBL  SETC  'DWA'.'&SYSNDX'     Dynamic workarea label
&DWALBL2 SETC  'DW2'.'&SYSNDX'     Dynamic workarea label
         LR    R3,R0               Caller's R0
         LR    R4,R1               Caller's R1
         MNOTE *,'  STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&LOC  GETMAIN'
         PUSH  PRINT
         PRINT OFF
         STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&LOC OBTAIN WORKAREA
         POP   PRINT
         LR    &GDWAR,R1           Set Dynamic workarea base
         USING &GDWAN,&GDWAR       Reference Dynamic workarea
         LR    R14,&GDWAR          Dynamic workare address
         LRL   R15,&DWALBL2        DYNAMIC WORKAREA LENGTH
         J     &DWALBL
&DWALBL2 DC    A(&GDWAL)
&DWALBL  EQU   *
GDWCLR   EQU   *
         SR    R0,R0               ZERO THE FROM LENGTH
         LA    R1,(X'&GDWAP')(R0,R0) SET FILL CHAR
*        IC    R1,=X'00'           SET FILL CHAR
         SLL   R1,24               SHIFT LEFT (0 LENGTH)
*        ICM   R14,B'1000',=X'&GDWAP'
         MVCL  R14,R0              CLEAR WITH MVCL
         LR    R14,&GDWAR          RESTORE DYNAM WORKAREA ADDR
         LR    R0,R3               CALLER'S R0
         LR    R1,R4               CALLER'S R1
         AGO   .DWAEND
.DWANO   ANOP
&GDWAN   SETC  ''                  DYNAMIC WORKAREA NAME
&GDWAL   SETC  ''                  DYNAMIC WORKAREA LENGTH
&GDWAR   SETC  ''                  Dynamic workarea register
         AGO   .DWAEND
.DWAEND  ANOP
.**********************************************************************
.*       Static Workarea                                              *
.**********************************************************************
         AIF   (N'&SWA EQ 0).SWANO
         AIF   (N'&SWA EQ 2).SWAOK
         MNOTE 8,'#ENTRY Invalid SWA=&SWA'
         MNOTE 8,'Syntax: SWA=(CSECT_NAME,REG)'
         MEXIT
.SWAOK   ANOP
&GSWAN   SETC  '&SWA(1)'           Static workarea name
&GSWAR   SETC  '&SWA(2)'           Static workarea register
.*       L     &GSWAR,=A(&GSWAN)   SET STATIC WORKAREA BASE
         LARL  &GSWAR,&GSWAN       SET STATIC WORKAREA BASE
         USING &GSWAN,&GSWAR       Reference static workarea
         AGO   .SWAEND
.SWANO   ANOP
&GSWAN   SETC  ''                  Static workarea name
&GSWAR   SETC  ''                  Static workarea register
         AGO   .SWAEND
.SWAEND  ANOP
         AGO   .MEND
.MEND    ANOP
         COPY  ASMMSP * SUPPORT FOR HLASM STRUCTURED MACROS
         MEND
         TITLE 'STUCBSCN - TSO LIST SPACE COMMAND'
STUCBSCN CSECT
*
** * ------------------------------------------------------------- * **
** * --  SCAN UCBS - RETURN THE UCB ADDRESSES ONE AT A TIME,    -- * **
** * --  WHEN DONE SET AN RC=04.  THE CALLER MUST PROVIDE A     -- * **
** * --  DEDICATED WORK AREA THAT THE UCBSCAN MACRO WILL USE.   -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * --  PARMS - ON ENTRY - R1 POINTS TO AN ADCON LIST THAT     -- * **
** * --  POINTS TO THE FOLLOWING;                               -- * **
** * --                                                         -- * **
** * --  R1 ^  LIST OF FULLWORDS                                -- * **
** * --       WORD 1 POINTS TO THE UCBSCAN RESUABLE WORK AREA.  -- * **
** * --       WORD 2 WILL HOLD THE RESULTANT UCB ADDRESS OR 0'S.-- * **
** * --       WORD 3 WILL HOLD A RETURN CODE -                  -- * **
** * --           F'0' = ALL IS GOOD UCB ^ RETURNED.            -- * **
** * --           F'4' = NO MORE UCBS TO BE RETURNED.           -- * **
** * --           F'8' = BAD STUFF HAPPENED - NO PLANNED FOR.   -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * --  ON RETURN EITHER ZEROS OR A UCB ADDR IS PROVIDED.      -- * **
** * --  R15 = 0 FOR A GOOD CALL WITH THE NEXT UCB ADDR GIVEN.  -- * **
** * --  R15 = 4 NO MORE UCBS EXIST TO BE PASSED.               -- * **
** * --  R15 > 4 SOME KIND OF ERROR OCCURED.                    -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * --  THE PROGRAM IS REENT, AND SHOULD BE LINKED AC=1.       -- * **
** * --  SINCE IT IS INTENDED TO BE CALLED FROM TSO CMDS, IT    -- * **
** * --  SHOULD BE ADDED TO IKJTSOXX AS AN AUTH PGM.            -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * --  REG. USAGE                                             -- * **
** * --                                                         -- * **
** * --  R0                  R8  -                              -- * **
** * --  R1 -                R9  - BAS LVL1                     -- * **
** * --  R2                  R10 -                              -- * **
** * --  R3 -                R11 - DYNAM WORK AREA (BASE)       -- * **
** * --  R4 -                R12 - BASE REG 1                   -- * **
** * --  R5                  R13 - S/A                          -- * **
** * --  R6                  R14 - LINKAGE                      -- * **
** * --  R7                  R15 - RC                           -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
*
STUCBSCN #ENTRY DWA=(WORKA1,@DYNSIZE,R11),                             X
               BASE=(12),MODID=YES,                                    X
               AMODE=24,RMODE=24

*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*.~                                                                   ¦
*.~         M   M  AAA   III  N   N L      III  N   N EEEEE           ¦
*.~         MM MM A   A   I   NN  N L       I   NN  N E               ¦
*.~         M M M AAAAA   I   N N N L       I   N N N EEEE            ¦
*.~         M   M A   A   I   N  NN L       I   N  NN E               ¦
*.~         M   M A   A  III  N   N LLLLL  III  N   N EEEEE           ¦
*.~                                                                   ¦
*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         L     R8,0(R1)           GET THE ADDRESS OF THE WORK AREA
         LH    R2,0(R8)           R2 HAS THE LENGTH OF THE PASSED PARM
         CH    R2,=H'12'          WAS IT TWELVE BYTES LONG?
         BNE   MAJERROR           IF NOT QUIT NOW
*
         L     R5,2(R8)           GET THE WORK AREA ADDR.
         L     R6,6(0,R8)         GET THE ADDR OF THE RESULT FIELD
         LA    R7,10(0,R8)        GET THE ADDR OF THE RC VALUE
*
         SAM31
*
         MODESET MODE=SUP          (BECAUSE OF OPTIONS BELOW)
*
*  R5=^ UCB SCAN WORK AREA ; R6 = RETURNED UCB ADDR OR ZERO ; R7 = RC
*
         ST    R6,BLKADDR         SAVE BLOCK PTR
         L     R8,4(R0,R6)        GET THE # OF SLOTS FROM GIVEN TABLE
         XC    4(4,R6),4(R6)      CLEAR THE WORD - FOR POSSIBLE FWD PTR
         BCTR  R8,R0              REDUCE # WORDS BY TWO FOR SIGNAL
         BCTR  R8,R0                WORD, AND ZEROS(END) OR FWD PTR.
         LA    R6,4(R0,R6)        BUMP POINTER JUST BEFORE FIRST UCB
* R8 = # OF SLOTS WE CAN POSSIBLY FILL WITH UCB ADDRESSES.
SCANLOP  LA    R6,4(R0,R6)         = POINTER TO CURRENT UCB IN TABLE
*                                  GET 1ST (OR NEXT) UCB (COPY)
*
         UCBSCAN ADDRESS,          NEED ACTUAL UCB ADDRESS.            *
               WORKAREA=(5),       REUSABLE FUNCTION WORK AREA         *
               UCBPTR=(6),         RECEIVES POINTER TO THE UCB         *
               NOPIN,                                                  *
               NOTFIND=YES,                                            *
               DYNAMIC=YES,        GET STATIC AND DYNAMIC CHANGES      *
               RANGE=ALL,          RECEIVE 3 AND 4 DIGIT ADDR.         *
               DEVCLASS=DASD,      RECEIVE ONLY DASD DEVICES           *
               LOC=ANY,            GET 24 AND 31 BIT RESIDENT UCBS     *
               MF=(E,UCBSDS)
*


         LTR   R15,R15            DID WE GET ONE?
         BNE   RC04               IF NOT THEN WE ARE DONE..
         BCT   R8,SCANLOP         DID WE FILL THE TABLE YET?
RC00     MODESET MODE=PROB
         MVC   0(4,R7),=F'0'      SET AN INTERNAL RETURN CODE OF 0
RC00X    #EXIT LTORG=NO,RC=00
*
*
RC04     MODESET MODE=PROB
         MVC   0(4,R7),=F'4'      SET AN INTERNAL RETURN CODE OF 4
MAJERROR #EXIT LTORG=NO,RC=04


*--------------------------
* CONSTANTS
*--------------------------
         LTORG

WORKA1   DSECT                    TOP OF THE VARIABLE AREA
*
*-------------------------*
* VARIABLES IN WORK AREA  *
*------- ----- -----------*
*
         UCBSCAN MF=(L,UCBSDS)
*
BLKADDR  DS    F
*
@DYN1    DS    0X
@DYNSIZE EQU   ((@DYN1-WORKA1+7)/8)*8 WORK AREA SIZE (DBL WORD BDY)
*
*
*
         CVT   DSECT=YES
         IEFUCBOB LIST=NO,PREFIX=NO MAP THE UCB FIELDS
         END
