         PUNCH ' ENTRY STLSPACE '
         PUNCH ' ALIAS LSPACE '
         PUNCH ' INCLUDE SYSLMOD(STUCBSCN)                      '
         PUNCH ' SETOPT PARM(AMODE=24,RMODE=24,AC=1,REUS=REFR) '
         MACRO
**********************************************************************
* VDELETE      Remove a definition of function variables             *
**********************************************************************
&LABEL   VDELETE &NAMES=()         NAME-LIST
         AIF   ('&NAMES'(1,1) EQ '(').NAMES
         MNOTE 8,'VDELETE NAMES=&NAMES - MUST BE IN PARENTHESIS'
.NAMES   ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'VDELETE ',                                          X
               =C'&NAMES'),                                            X
               VL,MF=(E,W_CL512)
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* VDEFINE      Define function variables                             *
**********************************************************************
&LABEL   VDEFINE &NAMES=(),        NAME-LIST                           X
               &VARIABLE=,         VARIABLE                            X
               &FORMAT=CHAR,       FORMAT                              X
               &LENGTH=8,          LENGTH                              X
               &OPTIONS=,          OPTIONS                             X
               &USERDATA=          USER-DATA
         LCLC  &LEN
         AIF   ('&LENGTH'(1,1) EQ '(').INDIR
&LEN     SETC  '=F''&LENGTH.'' '
         AGO   .INDIRX
.INDIR   ANOP
&LEN     SETC '&LENGTH'
.INDIRX  ANOP
         LCLC  &VAR
         AIF   ('&NAMES'(1,1) EQ '(').NAMES
         MNOTE 8,'VDEFINE NAMES=&NAMES - MUST BE IN PARENTHESIS'
.NAMES   ANOP
         AIF   ('&VARIABLE' EQ '').NOVAR
&VAR     SETC  '&VARIABLE'
         AGO   .ENDVAR
.NOVAR   ANOP
&VAR     SETC  '&NAMES'(2,K'&NAMES-2)
.ENDVAR  ANOP
         AIF   ('&OPTIONS' EQ '').NOOPT
         L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'VDEFINE ',                                          X
               =C'&NAMES',                                             X
               &VAR,                                                   X
               =C'&FORMAT ',                                           X
               &LEN,                                                   X
               =C'(&OPTIONS)'),                                        X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.NOOPT   ANOP
         L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'VDEFINE ',                                          X
               =C'&NAMES',                                             X
               &VAR,                                                   X
               =C'&FORMAT ',                                           X
               &LEN.),                                                 X
               VL,MF=(E,W_CL512)
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* TBTOP        Set the row pointer to the top                        *
**********************************************************************
&LABEL   TBTOP &TABLE=             TABLE-NAME
         LCLC  &ITABLE
         AIF   ('&TABLE'(1,1) NE '@').TABLE
&ITABLE  SETC  '&TABLE'(2,K'&FIELDS-1)
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBTOP ',                                            X
               &ITABLE),                                               X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.TABLE   ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBTOP ',                                            X
               =C'&TABLE '),                                           X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* TBTOP        Set the row pointer to the top                        *
**********************************************************************
&LABEL   TBTOP &TABLE=             TABLE-NAME
         LCLC  &ITABLE
         AIF   ('&TABLE'(1,1) NE '@').TABLE
&ITABLE  SETC  '&TABLE'(2,K'&FIELDS-1)
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBTOP ',                                            X
               &ITABLE),                                               X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.TABLE   ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBTOP ',                                            X
               =C'&TABLE '),                                           X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* TBSORT       Sort a table                                          *
**********************************************************************
&LABEL   TBSORT &TABLE=,           TABLE-NAME                          X
               &FIELDS=()          SORT-LIST - FIELD,B|C|N,A|D
         LCLC  &IFIELDS,&ITABLE
         AIF   ('&TABLE'(1,1) NE '@').TABLE
&ITABLE  SETC  '&TABLE'(2,K'&TABLE-1)
         AIF   ('&FIELDS'(1,1) NE '@').TIFD
&IFIELDS SETC  '&FIELDS'(2,K'&FIELDS-1)
.TIFI    ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBSORT ',                                           X
               &ITABLE,                                                X
               &IFIELDS),                                              X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.TIFD    ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBSORT ',                                           X
               &ITABLE,                                                X
               =C'&FIELDS'),                                           X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.TABLE   ANOP
         AIF   ('&FIELDS'(1,1) NE '@').TDFD
&IFIELDS SETC  '&FIELDS'(2,K'&FIELDS-1)
.TDFI    ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBSORT ',                                           X
               =C'&TABLE ',                                            X
               &IFIELDS),                                              X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.TDFD    ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBSORT ',                                           X
               =C'&TABLE ',                                            X
               =C'&FIELDS'),                                           X
               VL,MF=(E,W_CL512)
         AGO   .MEND
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* TBDISPL      Display table information                             *
**********************************************************************
&LABEL   TBDISPL &TABLE=,          TABLE-NAME                          X
               &PANEL=,            PANEL-NAME                          X
               &MESSAGE=,          MESSAGE-ID                          X
               &CURSOR=,           FIELD-NAME                          X
               &CSRROW=,           TABLE-ROW-NUMBER                    X
               &CSRPOS=,           CURSOR-POSITION                     X
               &AUTOSEL=NO,        AUTOSEL                             X
               &POSITION=,         CRP-NAME                            X
               &ROWID=,            ROWID-NAME                          X
               &MSGLOC=,           MESSAGE-FIELD-NAME                  X
               &LC=()              LINE-COMMAND
         AIF   ('&LC'(1,1) EQ '(').OKLC
         MNOTE 8,'TBDISPLM LC=&LC - MUST BE IN PARENTHESIS'
.OKLC    ANOP
         LCLA  &CNT
         LCLC  &NLLBL
         LCLC  &ENDLBL,&DSP1LBL,&DSP2LBL,&NPLBL,&PRCLBL,&LCLBL
         LCLC  &CMP,&LBL,&ID,&SEL
         AIF   ('&POSITION' NE '').POSITION
&POSTION SETC  '&TABLE'.'CRP'
.POSITION ANOP
&DSP1LBL SETC  'DSP1'.'&SYSNDX'
&DSP2LBL SETC  'DSP2'.'&SYSNDX'
&ENDLBL  SETC  'END'.'&SYSNDX'
&PRCLBL  SETC  'PRC'.'&SYSNDX'
&LCLBL   SETC  'LC'.'&SYSNDX'
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBDISPL ',                                          X
               =C'&TABLE ',                                            X
               =C'&PANEL ',                                            X
               =C'&MESSAGE ',                                          X
               =C'&CURSOR ',                                           X
               =C'&CSRROW ',                                           X
               =C'&CSRPOS ',                                           X
               =C'&AUTOSEL ',                                          X
               =C'&POSITION ',                                         X
               =C'&ROWID ',                                            X
               =C'&MSGLOC '),                                          X
               VL,MF=(E,W_CL512)
         C     R15,=F'8'           End ?
         BNL   &ENDLBL             . Yes
&PRCLBL  EQU *
         AIF   ('&LC' NE '()').LC
         B     &LABEL              Redisplay
         AGO   .ENDLBL
.LC      ANOP
         MVC   &TABLE.SELS,ZTDSELS
&LCLBL   EQU   *
&CNT     SETA  0
&CNT     SETA  &CNT+1
&SEL     SETC  '&LC(&CNT)'
.NEXTLC  ANOP
&CNT     SETA  &CNT+1
         AIF   (&CNT GT N'&LC).ENDLC
&CMP     SETC  '&LC(&CNT)'
&NLLBL   SETC  'N'.'&CMP'.'&SYSNDX'
&CNT     SETA  &CNT+1
&LBL     SETC  '&LC(&CNT)'
         CLC   &SEL,=C'&CMP'       Match ?
         BNE   &NLLBL              . No
         CONTROL DISPLAY,SAVE      Save display environment
         CALL  &LBL                &LBL
         CONTROL DISPLAY,RESTORE   Restore display environment
         B     &DSP1LBL
&NLLBL   EQU *
         AGO   .NEXTLC
.ENDLC   ANOP
         CLI   &SEL,C' '           Blank ?
         BE    &DSP2LBL            . Yes
&DSP1LBL MVI   &SEL,C' '           Clear line command
         CLC   &TABLE.SELS,=CL4'0001'
         BNH   &LABEL
&DSP2LBL L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBDISPL ',                                          X
               =C'&TABLE ',                                            X
               =C' ',                                                  X
               =C' ',                                                  X
               =C' ',                                                  X
               =C' ',                                                  X
               =C' ',                                                  X
               =C' ',                                                  X
               =C'&POSITION ',                                         X
               =C' ',                                                  X
               =C' '),                                                 X
               VL,MF=(E,W_CL512)
         C     R15,=F'8'           End ?
         BNL   &ENDLBL             . Yes
         B     &PRCLBL             Reprocess selections
.ENDLBL  ANOP
&ENDLBL  EQU   *                   End/Return
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* TBCREATE     Create a new table                                    *
**********************************************************************
&LABEL   TBCREATE &TABLE=,         TABLE-NAME                          X
               &KEYS=(),           KEY-NAME-LIST                       X
               &NAMES=(),          NAME-LIST                           X
               &WRITE=NOWRITE,     WRITE/NOWRITE                       X
               &REPLACE=REPLACE,   REPLACE                             X
               &LIBRARY=,          LIBRARY                             X
               &SHARE=             SHARE
         AIF   ('&KEYS'(1,1) EQ '(').OKKEYS
         MNOTE 8,'TBCREATE KEYS=&KEYS - MUST BE IN PARENTHESIS'
.OKKEYS  ANOP
         AIF   ('&NAMES'(1,1) EQ '(').NAMES
         MNOTE 8,'TBCREATE NAMES=&NAMES - MUST BE IN PARENTHESIS'
.NAMES   ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBCREATE ',                                         X
               =C'&TABLE ',                                            X
               =C'&KEYS',                                              X
               =C'&NAMES',                                             X
               =C'&WRITE ',                                            X
               =C'&REPLACE ',                                          X
               =C'&LIBRARY ',                                          X
               =C'&SHARE '),                                           X
               VL,MF=(E,W_CL512)
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* TBCLOSE      Close and save a table                                *
**********************************************************************
&LABEL   TBCLOSE &TABLE=           TABLE-NAME
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBCLOSE ',                                          X
               =C'&TABLE '),                                           X
               VL,MF=(E,W_CL512)
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* TBADD        Add a row to a table                                  *
**********************************************************************
&LABEL   TBADD &TABLE=,            TABLE-NAME                          X
               &SAVE=(),           SAVE-NAME-LIST                      X
               &ORDER=,            ORDER                               X
               &MULT=1             NUMBER OF ROWS
         AIF   ('&SAVE'(1,1) EQ '(').OKSAVE
         MNOTE 8,'TBADD SAVE=&SAVE - MUST BE IN PARENTHESIS'
         ISPFHELP TBADD
         AGO   .MEND
.OKSAVE ANOP
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'TBADD ',                                            X
               =C'&TABLE ',                                            X
               =C'&SAVE',                                              X
               =C'&ORDER ',                                            X
               =F'&MULT.'),                                            X
               VL,MF=(E,W_CL512)
.MEND    ANOP
         MEND
         MACRO
**********************************************************************
* ISPFVARS     Define ISPF Variables                                 *
**********************************************************************
         ISPFVARS
*
**       Define ISPF System Variables
*
         CNOP  0,4                 Fullword alignment
W_D      DS    D                   Doubleword workarea
W_F      DS    F                   Fullword workarea
W_CL512  DS    CL512               512 byte general workarea
W_H      DS    H                   Halfword workarea
ISPLINK@ DS    F                   ISPLINK address
ZAPPLID  DS    CL008               ISPF Application Identifier
ZDATE    DS    CL008               ISPF Date
ZDATEF   DS    CL008               ISPF Date
ZDATEFD  DS    CL008               ISPF Date
ZDAY     DS    CL002               ISPF Day (dd)
ZJDATE   DS    CL006               ISPF Julian Date (yy.ddd)
ZLANG    DS    CL008               ISPF Session Language
ZLOGO    DS    CL003               ISPF Logo (YES/NO)
ZMONTH   DS    CL002               ISPF Month (mm)
ZPLACE   DS    CL007               ISPF Command Line Placement
ZPREFIX  DS    CL008               ISPF Prefix
ZSTDYEAR DS    CL004               ISPF Year (yyyy)
ZSYSID   DS    CL008               ISPF System Name
ZTDSELS  DS    CL004               ISPF Selections
ZTDTOP   DS    CL006               ISPF CRP of most recent display
ZTIME    DS    CL005               ISPF Time (hh:mm)
ZUSER    DS    CL008               ISPF User Identification
ZYEAR    DS    CL002               ISPF Year (yy)
         MEND
         MACRO
**********************************************************************
* ISPFTERM     Terminate ISPF Environment                            *
**********************************************************************
&LABEL   ISPFTERM
&LABEL   VDELETE NAMES=(*)         Delete all ISPF variables
         DELETE EP=ISPLINK         Delete current ISPLINK module
         MEND
         MACRO
**********************************************************************
* ISPFINIT     Initialize ISPF Environment                           *
**********************************************************************
&LABEL   ISPFINIT
*
**       Validate ISPF Environment
*
&LABEL   LOAD  EP=ISPQRY,ERRET=IIEXIT Load current ISPQRY module
         LR    R15,R0              ISPQRY address
         BALR  R14,R15             Invoke ISPQRY
         LTR   15,15               ISPF environment ?
         BNZ   IIEXIT              . No
         DELETE EP=ISPQRY          Delete current ISPQRY module
*
**       Load ISPF Interface Module (ISPLINK)
*
         LOAD  EP=ISPLINK,ERRET=IIEXIT Load current ISPLINK module
         ST    R0,ISPLINK@         Save ISPLINK address
*
**       Define ISPF System Variables
*
         VDEFINE NAMES=(ZAPPLID),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(ZDATE),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(ZDATEF),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(ZDATEFD),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(ZDAY),FORMAT=CHAR,LENGTH=2
         VDEFINE NAMES=(ZJDATE),FORMAT=CHAR,LENGTH=6
         VDEFINE NAMES=(ZLANG),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(ZLOGO),FORMAT=CHAR,LENGTH=3
         VDEFINE NAMES=(ZMONTH),FORMAT=CHAR,LENGTH=2
         VDEFINE NAMES=(ZPLACE),FORMAT=CHAR,LENGTH=7
         VDEFINE NAMES=(ZPREFIX),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(ZSTDYEAR),FORMAT=CHAR,LENGTH=4
         VDEFINE NAMES=(ZSYSID),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(ZTDSELS),FORMAT=CHAR,LENGTH=4
         VDEFINE NAMES=(ZTDTOP),FORMAT=CHAR,LENGTH=6
         VDEFINE NAMES=(ZTIME),FORMAT=CHAR,LENGTH=5
         VDEFINE NAMES=(ZUSER),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(ZYEAR),FORMAT=CHAR,LENGTH=2
IIEXIT   EQU   *
         MEND
         MACRO
**********************************************************************
* CONTROL      Set processing modes                                  *
**********************************************************************
&LABEL   CONTROL &CTL1,&CTL2,&CTL3,&CTL4
&LABEL   L     R15,ISPLINK@        ISPLINK address
         CALL  (15),                                                   X
               (=C'CONTROL ',                                          X
               =C'&CTL1 ',                                             X
               =C'&CTL2 ',                                             X
               =C'&CTL3 ',                                             X
               =C'&CTL4 '),                                            X
               VL,MF=(E,W_CL512)
.MEND    ANOP
         MEND
         MACRO
&NAME1   #ZERO &A1
&NAME1   XC     &A1,&A1
         MEND
         MACRO
&NAME1   #BLANK &A1
&NAME1   MVI    &A1,C' '
         MVC    &A1+1(L'&A1-1),&A1
         MEND
          MACRO
**********************************************************************
*        Macro Name:     $EXIT                                       *
*        Operation:      Standard Linkage - Exit                     *
*        Usage:                                                      *
**********************************************************************
*                                                                    *
* Syntax:                                                            *
* Name     #EXIT     Keywords...                                     *
*                                                                    *
* Name     Module name                                               *
*          Values:   Any valid module name                           *
*          Default:  NULL                                            *
*                                                                    *
* Keywords:                                                          *
* LTORG    Literal pool at end of module                             *
*          Values:   YES/NO                                          *
*          Default:  YES                                             *
*                                                                    *
* RC       A literal value for a return code - or - if unspecified   *
*          it will default to use the value in R15 - or - a          *
*          register value in parenthesis is also accepted.           *
*                                                                    *
*           rc=7   sets rc=7                                         *
*           rc=(7) sets rc= value in r7                              *
*           rc=null defaults to rc= value in r15                     *
* ** note **                                                         *
*   r2 is used as a work reg, and may not be used to specify the     *
*   return code value.                                               *
*                                                                    *
**********************************************************************
**********************************************************************
* #EXIT        Standard Linkage - Exit                               *
**********************************************************************
&LABEL   #EXIT &LTORG=YES,&RC=     LITERAL POOL
         GBLC  &EXRC               RETURN CODE
         AIF   ('&RC' NE '').LABEL1
&EXRC    SETC  '(R15)'
         AGO   .SHOWLST
.LABEL1  ANOP
&EXRC    SETC  '&RC'
.SHOWLST ANOP
         MNOTE *,'#EXIT  Utilizing the following parameters:'
         MNOTE *,'       LTORG=&LTORG'
         MNOTE *,'       RC=&EXRC    '
         GBLC  &GDWAL              Dynamic workarea length
         GBLC  &GDWAR              Dynamic workarea register
         GBLC  &GSAVE              Save registers
         GBLC  &GSAVEAREA          Savearea
.**********************************************************************
.*       Return Code                                                  *
.**********************************************************************
         AIF   ('&LABEL' EQ '').NOLABL
&LABEL   EQU   *                   EXIT
.NOLABL  ANOP
.**********************************************************************
.*       TEST FOR INVALID RC REGISTER VALUES.                         *
.**********************************************************************
         AIF   ('&EXRC'(1,1) NE '(').NORCREG
&REGRC   SETC  '&EXRC'(2,K'&EXRC-2)
         AIF   ('&REGRC' EQ '2').BADRC
         AIF   ('&REGRC' EQ 'R2').BADRC
         AIF   ('&REGRC' EQ '1').BADRC
         AIF   ('&REGRC' EQ 'R1').BADRC
         AIF   ('&REGRC' EQ '0').BADRC
         AIF   ('&REGRC' EQ 'R0').BADRC
         AIF   ('&REGRC' EQ '13').BADRC
         AIF   ('&REGRC' EQ 'R13').BADRC
         AGO   .NORCREG
.BADRC   MNOTE 12,' INVALID REGISTER &REGRC USED FOR RETURN CODE '
         MONTE 12,' SPECIFY R3 THROUGH R12, OR R14, OR R15 INSTEAD.'
         MEXIT
.NORCREG ANOP
.**********************************************************************
.*       Dynamic Workarea                                             *
.**********************************************************************
         AIF   ('&GDWAL' EQ '').DWANO
         PUSH  PRINT
.*       PRINT OFF
         MNOTE *,'  STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL (WORK AX
               REA).'
         LR    R2,R15             SAVE ORIGINAL RETURN CODE VALUE
         STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL  RELEASE WORKAREA
         LR    R15,R2             RESTORE ORIGINAL RETURN CODE VALUE
         POP   PRINT
         AGO   .DWAEND
.DWANO   ANOP
         AGO   .DWAEND
.DWAEND  ANOP
.**********************************************************************
.*       SAVEAREA                                                     *
.**********************************************************************
         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X
               ('&GSAVEAREA' EQ 'YES').SAYES
         MNOTE 8,'#ENTRY INVALID SAVEAREA=&GSAVEAREA - YES/NO'
         MEXIT
.SAYES   ANOP
         LR    R1,R13              SAVEAREA ADDRESS
         L     R13,4(R13)          RESTORE PREVIOUS SAVEAREA
         MNOTE *,'  STORAGE RELEASE,ADDR=(R1),LENGTH=72 (SAVE AREA).'
         PUSH  PRINT
         PRINT OFF
         LR    R2,R15             SAVE ORIGINAL RETURN CODE VALUE
         STORAGE RELEASE,ADDR=(R1),LENGTH=72  RELEASE SAVEAREA
         LR    R15,R2             RESTORE ORIGINAL RETURN CODE VALUE
         POP   PRINT
         AGO   .SAEND
.SANO    ANOP
         XC    0(72,R13),0(R13)    Clear current savearea
         SH    R13,=H'72'          Adjust savearea
         AGO   .SAEND
.SAEND   ANOP
.**********************************************************************
.*       Save Registers                                               *
.**********************************************************************
         AIF   ('&GSAVE' EQ 'YES').SAVEYES,                            X
               ('&GSAVE' EQ 'NO').SAVENO
         MNOTE 8,'#EXIT Invalid SAVE=&GSAVE - YES/NO'
         MEXIT


.SAVEYES ANOP
         AIF   ('&EXRC'(1,1) NE '(').LABELC
&REG     SETC  '&EXRC'(2,K'&EXRC-2)
         LR    R15,&REG                  SET RETURN CODE
         AGO   .LABELA
.LABELC  AIF   ('&EXRC' EQ '').LABELA
         LA    R15,&EXRC.(0,0)    SET RETURN CODE
.LABELA  ANOP
         RETURN (14,12),RC=(15)    RETURN CONTROL
         AGO   .SAVEEND


.SAVENO  ANOP
         AIF   ('&EXRC'(1,1) NE '(').LABELD
&REG     SETC  '&EXRC'(2,K'&EXRC-2)
         LR    R15,&REG              SET RETURN CODE
         AGO   .RCASIS1
.LABELD  AIF   ('&EXRC' EQ '').LABELS
         AGO   .RCASIS1
.LABELS  ANOP
         LA    R15,&EXRC.(0,0)       SET RETURN CODE
.RCASIS1 ANOP
         BR    R14                 Return Control


.SAVEEND ANOP
.**********************************************************************
.*       LTORG                                                        *
.**********************************************************************
         AIF   ('&LTORG' EQ 'YES').LTORGYES,                           X
               ('&LTORG' EQ 'NO').LTORGNO
         MNOTE 8,'#EXIT Invalid LTORG=&LTORG - YES/NO'
         MEXIT
.LTORGYES ANOP
         LTORG                     Literal pool
.LTORGNO ANOP
         MEND
          MACRO
**********************************************************************
*                                                                    *
* Usage:                                                             *
* Name     #ENTRY    Keywords...                                     *
*                                                                    *
* Name     Module name                                               *
*          Values:   Any valid module name                           *
*          Default:  NULL                                            *
*                                                                    *
* Keywords:                                                          *
* AMODE    Addressing mode                                           *
*          Values:   24/31/ANY                                       *
*          Default:  24                                              *
*                                                                    *
* BASE     Base registers                                            *
*          Values:   (Rxx,Ryy,Rzz...) - Any valid registers          *
*          Default:  (R12)                                           *
*                                                                    *
* DWA      Dynamic Workarea                                          *
*          Values:   (ddd,lll,rrr,pp)                                *
*                    ddd  - Dynamic workarea dummy section (DSECT)   *
*                    lll  - Dynamic workarea size                    *
*                    rrr  - Dynamic workarea base register           *
*                    pp   - Dynamic workarea padding value in hex    *
*          Default:  NULL - Dynamic workarea not used                *
*                                                                    *
* LOC      Location of getmained savearea/workarea                   *
*          Values:   BELOW/ANY/RES                                   *
*          Default:  RES                                             *
*                                                                    *
* MODID    Module identification                                     *
*          Values:   YES/NO                                          *
*          Default:  YES                                             *
*                                                                    *
* RMODE    Residence mode                                            *
*          Values:   24/ANY                                          *
*          Default:  24                                              *
*                                                                    *
* SAVE     Save/restore registers at entry/exit                      *
*          Values:   YES/NO                                          *
*          Default:  YES                                             *
*                                                                    *
* SAVEAREA Acquire savearea                                          *
*          Values:   YES/NO                                          *
*          Default:  YES                                             *
*                                                                    *
* SPLEVEL  Macro level                                               *
*          Values:   0/1/2/3/4/5/6                                   *
*          Default:  0 - Use default macro level                     *
*                                                                    *
* SWA      Static Workarea                                           *
*          Values:   (ccc,rrr)                                       *
*                    ccc  - Static workarea control section (CSECT)  *
*                    rrr  - Static workarea base register            *
*          Default:  NULL - Static workarea not used                 *
*                                                                    *
**********************************************************************
* #ENTRY       Standard Linkage - Entry                              *
**********************************************************************
&LABEL   #ENTRY &AMODE=31,         Addressing mode                     X
               &RMODE=ANY,         Residence mode                      X
               &BASE=(R12),        Base Registers                      X
               &DWA=,              Dynamic workarea                    X
               &LOC=RES,           LOCATION OF SAVEAREA/WORKAREA       X
               &MODID=YES,         Module identification               X
               &PARMS=0,           Parameters                          X
               &SAVE=YES,          Save/restore regs at entry/exit     X
               &SAVEAREA=YES,      Savearea                            X
               &SPLEVEL=0,         Macro level                         X
               &SUBPOOL=0,         Subpool of savearea/workarea        X
               &SWA=               Static workarea
         GBLA  &COMMON             Common Macros Level
&COMMON  SETA  1                   Common Macros Level
         MNOTE *,'#ENTRY Utilizing the following parameters:'
         MNOTE *,'       AMODE=&AMODE'
         MNOTE *,'       BASE=&BASE'
         MNOTE *,'       DWA=&DWA'
         MNOTE *,'       LOC=&LOC'
         MNOTE *,'       MODID=&MODID'
         MNOTE *,'       PARMS=&PARMS'
         MNOTE *,'       RMODE=&RMODE'
         MNOTE *,'       SAVE=&SAVE'
         MNOTE *,'       SAVEAREA=&SAVEAREA'
         MNOTE *,'       SPLEVEL=&SPLEVEL'
         MNOTE *,'       SUBPOOL=&SUBPOOL'
         MNOTE *,'       SWA=&SWA'
         GBLC  &GAMODE             Addressing Mode
         GBLC  &GCSECT             Control Section
         GBLC  &GDWAL              Dynamic workarea length
         GBLC  &GSAVE              Save registers
         GBLC  &GSAVEAREA          Savearea
         GBLC  &GDWAN              Dynamic workarea name
         GBLC  &GDWAR              Dynamic workarea register
         GBLC  &GSPLEVEL           Macro level
         GBLC  &SYSSPLV            Macro level
         GBLC  &GSUBPOOL           Subpool of savearea/workarea
         GBLC  &GRMODE             Residence Mode
         GBLC  &GSWAN              Static workarea name
         GBLC  &GSWAR              Static workarea register
         LCLA  &BRC                Base register count
         LCLC  &BC                 Base register current
         LCLC  &BP                 Base register Caller's
         LCLC  &BRU                Base register using
         LCLC  &DWALBL             Dynamic workarea label
&GAMODE  SETC  '&AMODE'            Addressing Mode
&GCSECT  SETC  '&LABEL'            Control Section
&GRMODE  SETC  '&RMODE'            Residence Mode
&GSAVE   SETC  '&SAVE'             Save registers
&GSAVEAREA SETC '&SAVEAREA'        Savearea
&GSPLEVEL SETC '&SPLEVEL'          Macro level
&GSUBPOOL SETC  '&SUBPOOL'         Subpool of savearea/workarea
         AIF   ('&LOC' EQ 'BELOW').LOCOK,                              X
               ('&LOC' EQ 'ANY').LOCOK,                                X
               ('&LOC' EQ 'RES').LOCOK
         MNOTE 8,'#ENTRY Invalid LOC=&LOC - BELOW/ANY/RES/EXPLICIT'
         MEXIT
.LOCOK   ANOP
&GCSECT  CSECT                     Control Section
.**********************************************************************
.*       AMODE                                                        *
.**********************************************************************
         AIF   ('&AMODE' EQ '24').AMODEOK,                             X
               ('&AMODE' EQ '31').AMODEOK,                             X
               ('&AMODE' EQ 'ANY').AMODEOK
         MNOTE 8,'#ENTRY Invalid AMODE=&AMODE - 24/31/ANY'
         MEXIT
.AMODEOK ANOP
&GCSECT  AMODE &GAMODE             Addressing Mode
         AGO   .AMODEEND
.AMODENO ANOP
         AGO   .AMODEEND
.AMODEEND ANOP
.**********************************************************************
.*       RMODE                                                        *
.**********************************************************************
         AIF   ('&RMODE' EQ '24').RMODEOK,                             X
               ('&RMODE' EQ 'ANY').RMODEOK
         MNOTE 8,'#ENTRY Invalid RMODE=&RMODE - 24/ANY'
         MEXIT
.RMODEOK ANOP
&GCSECT  RMODE &GRMODE             Residence Mode
         AGO   .RMODEEND
.RMODENO ANOP
         AGO   .RMODEEND
.RMODEEND ANOP
.**********************************************************************
.*       SPLEVEL                                                      *
.**********************************************************************
         AIF   ('&SPLEVEL' EQ '0').SPLVLNO,                            X
               ('&SPLEVEL' EQ '1').SPLVLYES,                           X
               ('&SPLEVEL' EQ '2').SPLVLYES,                           X
               ('&SPLEVEL' EQ '3').SPLVLYES,                           X
               ('&SPLEVEL' EQ '4').SPLVLYES,                           X
               ('&SPLEVEL' EQ '5').SPLVLYES,                           X
               ('&SPLEVEL' EQ '6').SPLVLYES
         MNOTE 8,'#ENTRY Invalid SPLEVEL=&SPLEVEL - 0/1/2/3/4/5/6'
         MEXIT
.SPLVLYES ANOP
         SPLEVEL SET=&SPLEVEL      Set macro level
         AGO   .SPLVLEND
.SPLVLNO ANOP
         SPLEVEL SET               Use default macro level
         AGO   .SPLVLEND
.SPLVLEND ANOP
.**********************************************************************
.*       Module identification                                        *
.**********************************************************************
         AIF   ('&MODID' EQ 'NO').MODIDNO,                             X
               ('&MODID' EQ 'YES').MODIDYES
         MNOTE 8,'#ENTRY Invalid MODID=&MODID - YES/NO'
         MEXIT
.MODIDYES ANOP
         J     OVRIDENT            BRANCH AROUND MODULE IDENTIFICATION
.*       B     4+1+24+3(0,R15)     BRANCH AROUND MODULE IDENTIFICATION
         DC    AL1(24)             Module identification length
         DC    CL8'&GCSECT'        CSECT name
         DC    CL8'&SYSDATE'       Assembly date
         DC    CL8'&SYSTIME'       Assembly time
         DC    AL3(0)              Filler
OVRIDENT DS    0H
         AGO   .MODIDEND
.MODIDNO ANOP
         AGO   .MODIDEND
.MODIDEND ANOP
.**********************************************************************
.*       Register / Savearea Equates                                  *
.**********************************************************************
         AIF   (D'R0).REGEQUNO
A0       EQU    0                  Access register
A1       EQU    1                  Access register
A2       EQU    2                  Access register
A3       EQU    3                  Access register
A4       EQU    4                  Access register
A5       EQU    5                  Access register
A6       EQU    6                  Access register
A7       EQU    7                  Access register
A8       EQU    8                  Access register
A9       EQU    9                  Access register
A10      EQU   10                  Access register
A11      EQU   11                  Access register
A12      EQU   12                  Access register
A13      EQU   13                  Access register
A14      EQU   14                  Access register
A15      EQU   15                  Access register
C0       EQU    0                  Control register
C1       EQU    1                  Control register
C2       EQU    2                  Control register
C3       EQU    3                  Control register
C4       EQU    4                  Control register
C5       EQU    5                  Control register
C6       EQU    6                  Control register
C7       EQU    7                  Control register
C8       EQU    8                  Control register
C9       EQU    9                  Control register
C10      EQU   10                  Control register
C11      EQU   11                  Control register
C12      EQU   12                  Control register
C13      EQU   13                  Control register
C14      EQU   14                  Control register
C15      EQU   15                  Control register
F0       EQU    0                  Floating point register
F1       EQU    2                  Floating point register
F2       EQU    4                  Floating point register
F3       EQU    6                  Floating point register
R0       EQU    0                  General register - System
R1       EQU    1                  General register - System
R2       EQU    2                  General register - System
R3       EQU    3                  General register
R4       EQU    4                  General register
R5       EQU    5                  General register
R6       EQU    6                  General register
R7       EQU    7                  General register
R8       EQU    8                  General register
R9       EQU    9                  General register
R10      EQU   10                  General register
R11      EQU   11                  General register
R12      EQU   12                  General register
R13      EQU   13                  General register - Savearea
R14      EQU   14                  General register - System
R15      EQU   15                  General register - System
SAVEPL1  EQU    0                  Savearea PL1
SAVEPREV EQU    4                  Savearea Previous (from caller)
SAVENEXT EQU    8                  Savearea Next (from target)
SAVER14  EQU   12                  Savearea R14 (Return address)
SAVER15  EQU   16                  Savearea R15 (Entry address)
SAVER0   EQU   20                  Savearea R0
SAVER1   EQU   24                  Savearea R1
SAVER2   EQU   28                  Savearea R2
SAVER3   EQU   32                  Savearea R3
SAVER4   EQU   36                  Savearea R4
SAVER5   EQU   40                  Savearea R5
SAVER6   EQU   44                  Savearea R6
SAVER7   EQU   48                  Savearea R7
SAVER8   EQU   52                  Savearea R8
SAVER9   EQU   56                  Savearea R9
SAVER10  EQU   60                  Savearea R10
SAVER11  EQU   64                  Savearea R11
SAVER12  EQU   68                  Savearea R12
&GREGEQU SETA  1
.REGEQUNO ANOP
.**********************************************************************
.*       Save Registers                                               *
.**********************************************************************
         AIF   ('&GSAVE' EQ 'YES').SAVEYES,                            X
               ('&GSAVE' EQ 'NO').SAVENO
         MNOTE 8,'#ENTRY Invalid SAVE=&GSAVE - YES/NO'
         MEXIT
.SAVEYES ANOP
         SAVE  (14,12)             Save caller's registers
         AGO   .SAVEEND
.SAVENO  ANOP
.SAVEEND ANOP
.**********************************************************************
.*       Base Register(s)                                             *
.**********************************************************************
         AIF   ('&BASE' EQ 'NOBASE').NOBASE
         AIF   (T'&BASE NE 'O').BASEOK
         MNOTE 8,'#ENTRY Missing Required Keyword BASE'
         MEXIT
.**** ELSE BASE=0 = NOBASE
         AGO   .NOBASE
.BASEOK  ANOP
         LR    &BASE(1),R15        Load base register
&BRC     SETA 1
.BASENXT ANOP
         AIF   (&BRC EQ N'&BASE).BASEEND
&BRC     SETA  &BRC+1              Increment base register count
&BC      SETC  '&BASE(&BRC)'       Current base register
&BP      SETC  '&BASE(&BRC-1)'     Caller's base register
         LA    &BC,4095(,&BP)      Load base register
         LA    &BC,1(,&BC)         Load base register
         AGO   .BASENXT
.BASEEND ANOP
&BRU     SETC  '&BASE'
         AIF   ('&BASE'(1,1) NE '(').USING1
&BRU     SETC  '&BASE'(2,K'&BASE-2)
.USING1  ANOP
         USING &LABEL,&BRU         Reference control section
.NOBASE  ANOP
.**********************************************************************
.*       Savearea                                                     *
.**********************************************************************
         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X
               ('&GSAVEAREA' EQ 'YES').SAYES
         MNOTE 8,'#ENTRY Invalid SAVEAREA=&GSAVEAREA - YES/NO'
         MEXIT
.SAYES   ANOP
         LR    R3,R0               Caller's R0
         LR    R4,R1               Caller's R1
         MNOTE *,'  STORAGE OBTAIN,LENGTH=72,LOC=&LOC    GETMAIN'
         PUSH  PRINT
         PRINT OFF
         STORAGE OBTAIN,LENGTH=72,LOC=&LOC OBTAIN SAVEAREA
         POP   PRINT
         ST    R13,SAVEPREV(,R1)   Savearea previous
         ST    R1,SAVENEXT(,R13)   Savearea next
         LR    R13,R1              Reference savearea
         LR    R0,R3               Caller's R0
         LR    R1,R4               Caller's R1
         AGO   .SAEND
.SANO    ANOP
         LA    R15,72(,R13)        Acquire savearea
         ST    R13,SAVEPREV(,R15)  Savearea previous
         ST    R15,SAVENEXT(,R13)  Savearea next
         LR    R13,R15             Reference savearea
         AGO   .SAEND
.SAEND   ANOP
.**********************************************************************
.*       Dynamic Workarea                                             *
.**********************************************************************
         AIF   (N'&DWA EQ 0).DWANO
         AIF   (N'&DWA EQ 3).PADDFLT
         AIF   (N'&DWA EQ 4).DWAOK
         MNOTE 8,'#ENTRY Invalid DWA=&DWA'
         MNOTE 8,'Syntax: DWA=(DSECT_NAME,LENGTH,REG)'
         MEXIT
.DWAOK   ANOP
&GDWAP   SETC  '&DWA(4)'           DYNAMIC WORKAREA PAD VALUE
         AGO   .PADSET
.PADDFLT ANOP
&GDWAP   SETC  '00'                DEFAULT PAD VALUE IS HEX 00
.PADSET  ANOP
&GDWAN   SETC  '&DWA(1)'           DYNAMIC WORKAREA NAME
&GDWAL   SETC  '&DWA(2)'           Dynamic workarea length
&GDWAR   SETC  '&DWA(3)'           Dynamic workarea register
&DWALBL  SETC  'DWA'.'&SYSNDX'     Dynamic workarea label
&DWALBL2 SETC  'DW2'.'&SYSNDX'     Dynamic workarea label
         LR    R3,R0               Caller's R0
         LR    R4,R1               Caller's R1
         MNOTE *,'  STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&LOC  GETMAIN'
         PUSH  PRINT
         PRINT OFF
         STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&LOC OBTAIN WORKAREA
         POP   PRINT
         LR    &GDWAR,R1           Set Dynamic workarea base
         USING &GDWAN,&GDWAR       Reference Dynamic workarea
         LR    R14,&GDWAR          Dynamic workare address
         LRL   R15,&DWALBL2        DYNAMIC WORKAREA LENGTH
         J     &DWALBL
&DWALBL2 DC    A(&GDWAL)
&DWALBL  EQU   *
GDWCLR   EQU   *
         SR    R0,R0               ZERO THE FROM LENGTH
         LA    R1,(X'&GDWAP')(R0,R0) SET FILL CHAR
*        IC    R1,=X'00'           SET FILL CHAR
         SLL   R1,24               SHIFT LEFT (0 LENGTH)
*        ICM   R14,B'1000',=X'&GDWAP'
         MVCL  R14,R0              CLEAR WITH MVCL
         LR    R14,&GDWAR          RESTORE DYNAM WORKAREA ADDR
         LR    R0,R3               CALLER'S R0
         LR    R1,R4               CALLER'S R1
         AGO   .DWAEND
.DWANO   ANOP
&GDWAN   SETC  ''                  DYNAMIC WORKAREA NAME
&GDWAL   SETC  ''                  DYNAMIC WORKAREA LENGTH
&GDWAR   SETC  ''                  Dynamic workarea register
         AGO   .DWAEND
.DWAEND  ANOP
.**********************************************************************
.*       Static Workarea                                              *
.**********************************************************************
         AIF   (N'&SWA EQ 0).SWANO
         AIF   (N'&SWA EQ 2).SWAOK
         MNOTE 8,'#ENTRY Invalid SWA=&SWA'
         MNOTE 8,'Syntax: SWA=(CSECT_NAME,REG)'
         MEXIT
.SWAOK   ANOP
&GSWAN   SETC  '&SWA(1)'           Static workarea name
&GSWAR   SETC  '&SWA(2)'           Static workarea register
.*       L     &GSWAR,=A(&GSWAN)   SET STATIC WORKAREA BASE
         LARL  &GSWAR,&GSWAN       SET STATIC WORKAREA BASE
         USING &GSWAN,&GSWAR       Reference static workarea
         AGO   .SWAEND
.SWANO   ANOP
&GSWAN   SETC  ''                  Static workarea name
&GSWAR   SETC  ''                  Static workarea register
         AGO   .SWAEND
.SWAEND  ANOP
         AGO   .MEND
.MEND    ANOP
         COPY  ASMMSP * SUPPORT FOR HLASM STRUCTURED MACROS
         MEND
         MACRO
&LBL    #CLCL &A,&B,&ANY=C'*',&PAD=C' '
         GBLC &CLCLOPS(64),&CLCLNAM(64)
         LCLC &Z,&Y
         LCLA &I
         AIF  ('&CLCLOPS(1)' NE '').NOTEXT
***********************************************************************
* $CLCL MACRO ACTS JUST LIKE CLCL WITH THE FOLLOWING DIFFERENCES:     *
*  1-PADDING CHARACTER OF C' ' WILL BE FORCED. (MAY BE OVERRIDDEN BY  *
*        SPECIFYING PAD=C'X' OR PAD=NO.)                              *
*  2-'*' IN THE SECOND OPERAND MATCHES ANY (POSSIBLY NULL) STRING.    *
*        (IT MAY BE OVERRIDDEN BY SPECIFYING ANY=C'X')                *
*  3-REGISTER 0 MAY NOT BE SPECIFIED FOR EITHER OPERAND.              *
*  4-USES THE SAVE AREA POINTED TO BY REGISTER 13                     *
*  5-GENERATES A LOT OF CODE FOR EACH UNIQUE COMBINATION OF OPERANDS. *
*      TRY TO USE THE SAME OPERANDS EACH TIME YOU ISSUE THE MACRO.    *
***********************************************************************
.NOTEXT  AIF   ('&A' NE '0' AND '&A' NE 'R0' AND                       X
               '&B' NE '0' AND '&B' NE 'R0').OK
         MNOTE 8,'REGISTER 0 MAY NOT BE USED IN $CLCL MACRO'
.OK      ANOP
&Y       SETC  'Z&SYSNDX'
&LBL     MVC   36(4,13),&Y.RET  SET RETURN FROM $CLCL ROUTINE
.DEFLOOP ANOP
&Z       SETC  '&CLCLNAM(&I+1)'
    AIF ('&CLCLOPS(&I+1)' EQ '&A,&B,&ANY,&PAD').SKIPSUB
         AIF   ('&CLCLOPS(&I+1)' EQ '').GENSUB
&I       SETA  &I+1
         AGO   .DEFLOOP
.GENSUB  ANOP  ,
&CLCLOPS(&I+1) SETC '&A,&B,&ANY,&PAD'
&CLCLNAM(&I+1) SETC '&Y'
&Z       SETC  '&Y'
&Z.ENT   XC    40(32,13),40(13)  CLEAR ONE ELEMENT STACK
         AIF   ('&PAD  '(1,2) EQ 'NO').NOPAD
         ICM   &B+1,8,=AL1(&PAD) SET PADDING CHARACTER
.NOPAD   ANOP
&Z.CMP   ST    &B,32(13)         SAVE STARTING ADDR OF PATTERN
         CLCL  &A,&B             COMPARE OPERANDS
         BE    &Z.END            BR IF EQUAL
         CLM   &A+1,3,&Z.ONE     IS DATA EXHAUSTED
         BL    &Z.NOB            YES
         CLI   0(&A),C' '        STOP ON BLANK IN DATA?
         BNE   &Z.NOB            NO
         CLM   &B,7,33(13)       OK TO BACK UP THE PATTERN REG?
         BNH   &Z.NOB            NO
         BCTR  &B,0              YES, BACK IT UP
         CLI   0(&B),C' '        PREV BLANK IN PATTERN?
         BNE   &Z.FXB            NO
         AH    &B+1,&Z.ONE       YES, FINISH BACKING UP
         B     &Z.CMP            AND RESUME COMPARE
&Z.FXB   LA    &B,1(&B)          SET PATTERN REG BACK
&Z.NOB   CLM   &B,7,49(13)       DID WE GET FURTHER IN PATTERN?
         BNH   &Z.SKP            NO
         STM   &A,&A+1,40(13)    YES, SAVE THIS MATCH WITH CC
         STM   &B,&B+1,48(13)    ..
&Z.SKP   CLM   &B+1,3,&Z.ONE     IS PATTERN EXHAUSTED?
         BL    &Z.NEQ            YES, NOT EQUAL
         CLI   0(&B),&ANY        WAS THIS AN *?
         BNE   &Z.NEQ            NO, TRY NEXT
         LA    &B,1(&B)          PASS OVER
         BCTR  &B+1,0            ... THE '*'
         CLM   &B+1,3,&Z.ONE     WAS * THE LAST CHAR OF PATTERN
         BNL   &Z.STK            NO, GOT TO STACK POINTERS
         AR    &A,&A+1           YES, SKIP OVER REST OF STRING
         ICM   &A+1,7,=XL3'0'    ..
         B     &Z.SET            BR TO SETCC AND CLEAR HI BYTE
&Z.NEQ   CLM   &A+1,3,&Z.ONE     IS DATA EXHAUSTED?
         BL    &Z.LOD            YES, THEN NO POINT IN RESTART
         LM    &A,&A+1,56(13)    ..
         LM    &B,&B+1,64(13)    RELOAD POINTERS
         SH    &A+1,&Z.ONE       DECR LENGTH BY ONE
         BM    &Z.LOD            AND EXIT IF NOTHING LEFT
         LA    &A,1(&A)          BUMP ADDRESS BY ONE
&Z.ONE   EQU   *-2,2             (DEFINE HALF WORD "ONE" FOR ELSEWHERE)
&Z.STK   STM   &A,&A+1,56(13)    SAVE REGS IN STACK
         STM   &B,&B+1,64(13)    ... FOR LATER RESTART
         B     &Z.CMP            RESTART THE COMPARE
&Z.LOD   LM    &A,&A+1,40(13)    LOAD REGS AS OF "BEST" MATCH
         LM    &B,&B+1,48(13)    ..
&Z.SET   CLCL  &A,&B             SETS CC, CLEARS HIGH BYTES OF A AND B
&Z.END   B     36(13)            RETURN
         AGO   .SKIPBR
.SKIPSUB B     &Z.ENT
.SKIPBR  ANOP
&Y.RET   B     *+4
         MEND
         TITLE 'STLSPACE - TSO LIST SPACE COMMAND'
STLSPACE CSECT
*
** * ------------------------------------------------------------- * **
** * --  LSPACE - LOCATE AND DISPLAY DASD SPACE INFORMATION,    -- * **
** * --   BASED ON AN INPUT MASK FOR VOLSER OR UCB NUMBER.      -- * **
** * --                                                         -- * **
** * --  THIS PROGRAM WORKS AS A TSO COMMAND PROCESSOR - THE    -- * **
** * -- PARM VALUE IS ACCEPTED IN TSO/E CMD PROCESSOR FORMAT.   -- * **
** * --                                                         -- * **
** * --  IF THE CALLING ENVIRONMENT IS TSO, THE OUTPUT IS IN    -- * **
** * --  STANDARD TPUT (LINE OUTPUT) FORMAT.  IF THE CALLING    -- * **
** * --  ENVIRONMENT IS ISPF, AN ISPF TABLE WITH THE INFO. IS   -- * **
** * --  DISPLAYED, THAT CAN BE SCROLLED AND SORTED.            -- * **
** * --                                                         -- * **
** * --  THE PASSED PARM VALUE MAY HAVE A COMMA DELIMITED       -- * **
** * -- TRAILING PARM OF C'TSO', WHICH INDICATES THAT THE       -- * **
** * -- PROGRAM OUTPUT IS TO BE IN TPUT FORMAT, REGUARLESS      -- * **
** * -- OF THE ENVIRONMENT IT IS RUN IN.                        -- * **
** * --                                                         -- * **
** * --  THE FIRST AND ONLY PARM MAY BE ONE OF THE FOLLOWING    -- * **
** * -- SPECIAL MEANING PARMS;                                  -- * **
** * --   CL1'*' - LIST ALL UCB ADDRESSES.                      -- * **
** * --   CL0'' - NO PARM - DISPLAY HELP INFORMATION.           -- * **
** * --   CL2'/?' OR CL2'/H' - DISPLAY HELP INFORMATION.        -- * **
** * --   CL4'HELP' - DISPLAY HELP INFORMATION.                 -- * **
** * --                                                         -- * **
** * --  OTHERWISE THE PARM DATA SHOULD TAKE THE FORM OF;       -- * **
** * --                                                         -- * **
** * --    A SINGLE VOLSER MASK - IE. VVVVVV OR VVV*V* OR V*    -- * **
** * --    MULTIPLE VOLSER MASKS (VVVVVV,VVVVV*) AND SO ON..    -- * **
** * --                                                         -- * **
** * --    BY PREFIXING A MASK WITH C"U=" A UCB CAN BE FORMATTED-- * **
** * --    A SINGLE UCB NUMBER - IE.U=####, OR MASK U=###*      -- * **
** * --    MULTIPLE UCB NUMBERS/MASKS CAN BE ENCLOSED IN        -- * **
** * --      PARENTHESIS - IE. U=(####,####,##*#,*###)          -- * **
** * --                                                         -- * **
** * --    A MIX OF UCB AND VOLSER MASKS IS NOT ALLOWED.        -- * **
** * --                                                         -- * **
** * -- SAMPLE INVOCATIONS:                                     -- * **
** * -- LSPACE U=(5234,5235,530*,54**)                          -- * **
** * --   DISPLAY INFO FOR UCBS 5234,5235 530(ANYTHING) AND     -- * **
** * --   UCB 54(ANYTHING,ANYTHING).                            -- * **
** * --                                                         -- * **
** * -- LSPACE VOLUME                                           -- * **
** * --   DISPLAY INFO FOR VOLSER=VOLUME ONLY                   -- * **
** * --                                                         -- * **
** * -- LSPACE *                                                -- * **
** * --   DISPLAY INFO FOR ALL ONLINE DASD UNITS.               -- * **
** * --                                                         -- * **
** * -- LSPACE \                                                -- * **
** * --   DISPLAY INFO FOR ALL ONLINE DASD UNITS (AN OLD CARYOVER) * **
** * --                                                         -- * **
** * -- LSPACE (VOL***,SER***),TSO                              -- * **
** * --   DISPLAY ANY VOLSER THAT BEGINS WITH VOL OR SER, AND   -- * **
** * --   WRITE THE OUTPUT IN LINE OUTPUT MODE REGUARLESS OF    -- * **
** * --   THE ENVIRONMENT.                                      -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * -- MAINLINE LOGIC -                                        -- * **
** * --                                                         -- * **
** * --   HOUSEKEEPING (GET STORAGE ETC.)                       -- * **
** * --                                                         -- * **
** * --   PARSE PARMS -                                         -- * **
** * --     IF HELP REQUESTED - GO PRINT (PUTLINE) HELP ONLY.   -- * **
** * --   TABLE ALL MASKS FOR LATER COMPARISON AGAINST UCBS OR  -- * **
** * --   VOLSERS.                                              -- * **
** * --                                                         -- * **
** * --   PREPUCBS - PREPARE TO SCAN UCB'S, AND PRINT HEADINGS  -- * **
** * --   IF THIS WILL BE TSO (PUTLINE) STYLE OUTPUT.           -- * **
** * --   WE ALSO CALL APF AUTH MODULE STUCBSCN TO FILL UP A    -- * **
** * --   UCB ADDRESS TABLE - THAT WE LATER USE FOR CHECKING    -- * **
** * --   UCB'S AND VOLSERS AGAINST OUR MASKS.                  -- * **
** * --                                                         -- * **
** * --   UCBSCAN - GET 1 UCB.                                  -- * **
** * --    IF NO MORE UCBS IN THE TABLE - GO TO CLEANUP.        -- * **
** * --                                                         -- * **
** * --   TSTMASKS - PREFORMAT VOLSER AND DEVICE (UCB) NUMBER.  -- * **
** * --   SEE IF THIS UCB MATCHES ANY OF OUR MASKS - IF SO,     -- * **
** * --   FLAG THE MASK, (AT LEAST ONE UNIT MATCHED).  IF NO    -- * **
** * --   MASKS MATCH THIS UCB - GET THE NEXT ONE TILL ALL DONE.-- * **
** * --                                                         -- * **
** * --   LSPACE - CALL SERVICE FOR EXTENDED INFORMATION.       -- * **
** * --                                                         -- * **
** * --   POSTFORM - DO FINAL FORMATTING OF OUTPUT DATA.        -- * **
** * --                                                         -- * **
** * --   PUTLINE - WRITE A LINE OF DATA (OR ADD A TABLE ENTRY).-- * **
** * --     BRANCH BACK TO UCBSCAN FOR THE NEXT POSSIBLE UCB.   -- * **
** * --                                                         -- * **
** * --   CLEANUP - ENTERED WHEN NO MORE UCBS ARE RETURNED FROM -- * **
** * --   UCBSCAN, IF IN TSO MODE - RELEASE STORAGE AND END.    -- * **
** * --   IF ISPF MODE - DISPLAY TABLE, THEN RELEASE STORAGE    -- * **
** * --   AND END.                                              -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * --  THE PROGRAM IS REENT, AND SHOULD BE LINKED AC=0.       -- * **
** * --                                                         -- * **
** * --  REG. USAGE                                             -- * **
** * --                                                         -- * **
** * --  R0                  R8  - BAS LVL2                     -- * **
** * --  R1 - CPPL           R9  - BAS LVL1                     -- * **
** * --  R2                  R10 - DYNAM WORK AREA (BASE)       -- * **
** * --  R3 - UCBOB          R11 - BASE REG 1                   -- * **
** * --  R4 - LSPACE INFO    R12 - BASE REG 2                   -- * **
** * --  R5                  R13 - S/A                          -- * **
** * --  R6                  R14 - LINKAGE                      -- * **
** * --  R7                  R15 - RC                           -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
*
STLSPACE #ENTRY DWA=(WORKA1,@DYNSIZE,R10),                             X
               BASE=(11,12),MODID=YES,                                 X
               AMODE=24,RMODE=24

*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*.~                                                                   ¦
*.~         M   M  AAA   III  N   N L      III  N   N EEEEE           ¦
*.~         MM MM A   A   I   NN  N L       I   NN  N E               ¦
*.~         M M M AAAAA   I   N N N L       I   N N N EEEE            ¦
*.~         M   M A   A   I   N  NN L       I   N  NN E               ¦
*.~         M   M A   A  III  N   N LLLLL  III  N   N EEEEE           ¦
*.~                                                                   ¦
*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         USING CPPL,R1
MAINLINE ST    R1,PARMA           HOLD THE PASSED PARM POINTER.....
         BAS   R9,SETSTORA        PRESET STORAGE AREA

         BAS   R9,PARSE           GO PARSE THE INPUT PARMS.
*
         BAS   R9,ISINIT          CHECK FOR ISPF AND INIT THAT ENVIR.
*
         TM    FLAG,FLAGHELP      DID THEY JUST ASK FOR, OR NEED HELP?
         BO    HELPEM

         BAS   R9,PREPUCBS        TABLE ALL UCB ADDRESSES & PRNT TITLE

NXTUCB   BAS   R9,UCBSCAN          AND GO DO THE SCAN

         LTR   R15,R15              DID WE GET ONE
         BZ    TESTUCB               IF NOT WE ARE DONE, GO HOME
         CH    R15,=H'4'          IF THEY GAVE US AN RC=4, THEN...
         BE    RC00               THE LAST UCB HAS BEEN PROCESSED.
TESTUCB  L     R3,UCBADDR          POINT TO THE REAL UCB FROM UCBSCAN
         USING UCBOB,R3            ADDRESS THE UCB FIELDS

         BAS   R9,TSTMASKS        TEST THIS UCB AND VOLSER VS. MASKS

         LTR   R15,R15            IF IT MATCHED A MASK, GET FULL
         BZ    DOLSP                SPACE INFO ABOUT UNIT
         CH    R15,=H'8'          IF ERROR, THEN PRINT PRESET MESSAGE
         BE    PUTLN
         CH    R15,=H'16'         16 MEANS IT SHOULD BE SKIPPED.
         B     NXTUCB

DOLSP    BAS   R9,LSPACE          LSPACE GETS TOTAL SPACE INFO.

         LTR   R15,R15              DID IT GO OK?
         BZ    ENDF                 IF SO GO FORMAT A DETAIL LINE
         CH    R15,=H'4'            IF 4, THEN SKIP THIS UCB
         BE    NXTUCB
         CH    R15,=H'8'            IF 8, THEN PRINT PRESET ERROR MSG
         BE    PUTLN
*                                 ANYTHING ELSE FALLS THROUGH
ENDF     BAS   R9,POSTFORM          TO THE FINAL FORMATTING ROUTINE.
*
PUTLN    LA    R1,SPACEMSG        POINT TO THE MESSAGE WE BUILT

         BAS   R8,PUTLINE         GO WRITE THE LINE OF DATA WE FORMATED

         B     NXTUCB
*
RC00     BAS   R9,CLEANUP         RELEASE STORAGE AREAS ETC. NOW

BYEBYE   #EXIT RC=0,LTORG=NO       AND RETURN TO CALLER.
*
HELPEM   BAS   R9,DOHELP          WRITE HELP INFORMATION -
         B     RC00                 AND THEN END NORMALLY.
*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*.~         M   M  AAA   III  N   N L      III  N   N EEEEE           ¦
*.~         MM MM A   A   I   NN  N L       I   NN  N E               ¦
*.~         M M M AAAAA   I   N N N L       I   N N N EEEE            ¦
*.~         M   M A   A   I   N  NN L       I   N  NN E               ¦
*.~         M   M A   A  III  N   N LLLLL  III  N   N EEEEE           ¦
*.~                                                                   ¦
*.~                        EEEEE N   N DDDD                           ¦
*.~                        E     NN  N D   D                          ¦
*.~                        EEEE  N N N D   D                          ¦
*.~                        E     N  NN D   D                          ¦
*.~                        EEEEE N   N DDDD                           ¦
*.~                                                                   ¦
*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~









CLEANUP  EQU   *
** * ------------------------------------------------------------- * **
** * -- CLEANUP - FINAL PROCESSING BEFORE WE DIE... WE NEED TO  -- * **
** * --  CHECK TO SEE IF ANY MASKS WERE NEVER USED, IF SO PRINT -- * **
** * --  ERRORS FOR THEM.  NEXT IF WE ARE ISPF MODE, HANDLE THE -- * **
** * --  TABLE DISPLAYS.  FINALLY RELEAS STORAGE, RESOURCES ETC.-- * **
** * ------------------------------------------------------------- * **
         LA    R7,OUTTABL         POINT TO OUR TABLE OF MASKS
CLNLOOP  SR    R5,R5              CLEAR WORK REG
         ICM   R5,B'0001',1(R7)   DID THIS ENTRY HAVE A LENGTH?
         BZ    CLEANED            IF AT END OF TABLE, WE ARE DONE HERE
         CLI   0(R7),X'00'        IS IT STILL A ZERO? (ZERO MEANS THAT
*                                  NO UNITS MATCHED THIS MASK.)
         BE    NOMATCH             IF NOT THEN PRODUCE A NO MATCH MSG
*                                 ELSE LOOP TILL ENTIRE TABLE IS DONE.
NDXTABLE SR    R6,R6              CLEAR AN INDEX REG.
         IC    R6,1(R7)           GET THE LENGTH OF THE ENTRY
         LA    R7,2(R6,R7)        LENGTH+2BYTE PREFIX + DATA = NEXT
         B     CLNLOOP
*
*-- HERE WE HAVE A NON-MATCHED MASK - PRODUCE AN ERROR MSG FOR IT.
*-- R7 POINTS TO THE MASK TABLE ENTRY...
*
NOMATCH  EQU   *                  NO MATCH WAS PRODUCED FOR THIS MASK
         SR    R6,R6
         IC    R6,1(R7)           GET THE LENGTH IN R6
         BCTR  R6,R0              REDUCE BY ONE FOR EXECUTE INST.

         TM    FLAG,CHKUCBS       WAS IT A UCB OR VOLSER MASK?
         BNO   NOUCBS              - U = NO UCBS
*
NOVOLS   EQU   *                 ISSUE VOLSER WARN. MSG.
         MVC   SPACEMSG(LENMSG_1),BADMSG_1
         EX    R6,MOVEMASK        MOVE THE MASK TO THE MSG AREA.
         LA    R1,SPACEMSG
         B     WARNMSG

NOUCBS   EQU   *                 ISSUE UNIT= WARN. MSG.
         MVC   SPACEMSG(LENMSG_2),BADMSG_2
         EX    R6,MOVEMASK        MOVE THE MASK TO THE MSG AREA.
         LA    R1,SPACEMSG
         B     WARNMSG
WARNMSG  EQU   *                 ISSUE UNIT= WARN. MSG.
         OI    FLAG,TSOTMP        TURN ON THE TEMP TSO FLAG.
         BAS   R8,PUTLINE
         B     NDXTABLE             THEN CHECK THE REMAINDER OF TABLE
*
* CHECK FOR AND HANDLE NO UCB / NO VOLSER FOUND MESSAGES HERE *
CLEANED  EQU   *
* THE NEXT FEW LINES OF CODE FREE THE UCB TABLES WE BUILT IN PREPUCBS
         L     R4,UCBTOP          GET THE ADDRESS OF THE FIRST BLOCK
         LTR   R4,R4              WAS THERE A FIRST BLOCK?
         BZ    FREDUCBS
FREUCSTR L     R5,0(R4)           GET THE LENGTH OF THE BLOCK
         L     R6,4(R4)           GET THE FWD POINTER IF ONE EXISTS
         STORAGE RELEASE,ADDR=(4),LENGTH=(5)
         LTR   R6,R6              IS THERE A FWD POINTER?
         BZ    FREDUCBS
         LR    R4,R6              LOAD ADDRESS OF NEXT BLOCK IN FIRST
         B     FREUCSTR           AND RELEASE IT AS WELL...

FREDUCBS TM    FLAG,ISPFFL        ARE WE IN ISPF MODE?
         BZ    CLRC00             IF NOT JUST END
         TM    FLAG,TSOFL         WAS IT SPECIFICALLY A TSO CALL?
         BO    CLRC00
         TM    FLAG,FLAGHELP      HELP REQUESTS NEVER GET ISPF SERVICE
         BO    CLRC00
         BAS   R8,TBDISPL         ELSE GO DISPLAY THE TABLE WE BUILT.
         ISPFTERM
         DELETE EP=IKJEFTSR       BASIC HOUSEKEEPING
CLRC00   B     0(0,R9)            AND FINALLY RETURN HOME TO MAINLINE.
* EXECUTED INSTRUCTION BELOW...
MOVEMASK MVC   SPACEMSG+04(0),2(R7)   MOVE THE MASK TO THE MESSAGE AREA





SETSTORA EQU   *                  PRESET STORAGE AREA
** * ------------------------------------------------------------- * **
** * -- SETUP THE STORAGE AREA - IT IS ABOUT HALF ZEROS, AND    -- * **
** * -- ABOUT HALF BLANKS, I COULD GO EITHER WAY, BUT I STILL   -- * **
** * -- HAVE A LOT OF INDIVIDUAL DATA TO FILL IN - START WITH 0'S  * **
** * ------------------------------------------------------------- * **
         MVC   IOPLECT,CPPLECT           POINTERS NOW
         MVC   IOPLUPT,CPPLUPT
         MVC   IOPB(MODELLEN),IOPBDUM  MOVE MODEL TO WORK AREA
         DROP  R1                  CPPL
* A FEW MORE FIELDS NEED TO BE FIXED NOW...
         #BLANK WORK5
         #BLANK WORK9
         LA    R1,ECB
         STCM  R1,B'1111',IOPLECT+4     SAVE THE ECB ADDR IN STRUCT.
         LA    R1,IOPB
         STCM  R1,B'1111',IOPLECT+8     SAVE THE IOPB ^ IN STRUCT.
*
         BAS   R7,CLNDET          GO CLEAR OUT THE DETAIL AREA NOW.
*
* PREP PARMS FOR IKJEFTSR AND STUCBSCN CALL
*
         XC    FLAGS(2),FLAGS     CLEAR FIRST TWO BYTES
         MVC   FLAGS+2(2),=X'0102'  SET A PAIR OF FLAGS
         MVC   PGM(8),=C'STUCBSCN' SET UP THE PROGRAM NAME
         MVC   PGMLEN,=F'8'       THE LENGTH OF THE PROGRAM NAME
         #ZERO RETCODE            ZERO THE RETURN
         #ZERO REASONC                 CODE, THE REASON
         #ZERO ABENDCD                     CODE, AND THE ABEND CODE
         MVC   PGMPARM1(2),=H'12' LEN = THREE FULLWORDS = 12
* DO A LATE BINDING FOR IKJEFTSR - LOAD AND SAVE ADDRESS
         LOAD  EP=IKJEFTSR
         LTR   15,15
         BZ    LDEDOK             IF IT LOADED OK
         LA    R5,PUTNOTSR
         WTO   TEXT=(5),MF=(E,WTOT)
         B     BYEBYE
LDEDOK   ST    R0,JEFTSR
         B     0(R0,R9)           RETURN TO MAINLINE






CLNDET   EQU   *
** * ------------------------------------------------------------- * **
** * -- CLNDET - CLEAN THE DETAIL PRINT / TABLE AREA            -- * **
** * --           LEVEL 3 ROUTINE RETURN VIA BR R7              -- * **
** * ------------------------------------------------------------- * **
*
         MVC   SPACEMSG(4),=AL2(LEND,0)  FIX UP SPACEMSG WITH A HEADER
         MVI   IVOLSER,X'40'             CLEAR THE
         MVC   IVOLSER+1(DETLNL-1),IVOLSER    DETAIL AREA NOW
         B     0(0,R7)            RETURN TO CALLER



PARSE    EQU   *                  PARSE INPUT PARMS
** * ------------------------------------------------------------- * **
** * -- PARSE -                                                 -- * **
** * --  PARSE THE INPUT PARMS OURSELVES - SO WE HAVE THEM ALL  -- * **
** * --  UPFRONT, INSTEAD OF ONE AT A TIME.
** * --                                                         -- * **
** * --  THE ROUTINE WILL PARSE INPUT, SET HELP & TSO FLAGS,    -- * **
** * --  AND BUILD A TABLE OF MASKS TO CHECK AGAINST THE UCBS.  -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
*
*
* - FIRST SAVE BASIC INFO
*
         L     R1,PARMA           RESTORE THE PASSED PARM POINTER..
         L     R1,0(R1)           GET THE POINTER TO PARMS FIELDS
         LH    R3,0(R1)           TOTAL LENGTH OF PASSED DATA
         LH    R4,2(R1)           DISP. TO PARMS IN PASSED DATA
         LA    R5,4(R4,R1)        R5 POINTS TO PARMS, IF ANY
         LA    R0,4(R4)           DISP. TO PARMS + 4 BYTE HDRS.
         SR    R3,R0              R3 = LENGTH OF PARMS
         LTR   R3,R3              IS IT ZERO OR DO WE HAVE PARMS
         BZ    FH                 IF 0, FLAG THE HELP OPTION AND END
*
* - TEST SPECIAL CASES - CRIES FOR HELP, OR REQUESTS FOR EVERYTHIN.
*
         STH   R3,PARML           SAVE PARM LENGTH NOW
         ST    R5,PARMA             & PARM ADDR.
         CH    R3,=H'1'           IF ONLY 1 BYTE
         BE    TSTSTAR              CHECK FOR AN '*' OR '\'
         BCTR  R3,R0              REDUCE FOR AN EX INSTRUCTION
         EX    R3,ORBLANKS
         CH    R3,=H'2'           IF ONLY 2 BYTES
         BE    TSTHLP2              CHECK FOR '/H' OR '/?'
         CH    R3,=H'4'           IF 4 BYTES
         BE    TSTHLP4              CHECK FOR 'HELP'
*
** * ------------------------------------------------------------- * **
** * -- ANY CHARACTER VALUES ARE VALID A-Z, 0-9 AND '*'.        -- * **
** * --                                                         -- * **
** * -- A SINGLE COMMA DELIMITED -TRAILING- PARM OF ',TSO' WILL -- * **
** * -- FORCE THE OUTPUT TO TPUT (TSO) STYLE OUTPUT.            -- * **
** * --                                                         -- * **
** * -- HELP IS REQUESTED (ABOVE) WITH -NO PARMS, OR '/?' OR    -- * **
** * -- '/H' OR 'HELP', AND IS TESTED FOR FIRST.                -- * **
** * --                                                         -- * **
** * -- THE REMAINING INPUT MAY EITHER BE VOLSER MASKS OR UCB   -- * **
** * -- MASKS, BUT NOT BOTH.  ONE MASK WILL STAND ALONE OR A    -- * **
** * -- GROUP OF MASKS IS ENCLOSED IN PARENS AND COMMA DELIMITED.- * **
** * -- A VOLUME MASK IS THE DEFAULT TYPE AND UCB MASKS ARE     -- * **
** * -- SPECIFIED BY PROCEEDING A  MASK OR GROUP OF MASKS WITH  -- * **
** * --  THE LITERAL 'U='.                                      -- * **
** * --                                                         -- * **
** * -- THE MASK(S) ARE TABLED, WITH A BYTE OF LEADING FLAGS,   -- * **
** * -- A SINGLE BYTE LENGTH, AND THE MASK ITSELF.   THERE IS   -- * **
** * -- NO SPECIAL CONSIDERATION FOR ALIGNMENT, ONE FIELD       -- * **
** * -- FOLLOWS THE NEXT TILL A ZERO LENGTH GROUP IS FOUND.     -- * **
** * --                                                         -- * **
** * -- THE LEADING BYTE (THE FLAG BYTE), IS CURRENTLY ONLY     -- * **
** * -- USED TO TRACK WHETHER OR NOT A UNIT FITS A MASK AND     -- * **
** * -- THEREFORE PRODUCED A DETAIL - NO FLAGED MASKS, PRODUCED -- * **
** * -- NO DETAILS.                                             -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * -- EXAMPLES ARE:                                           -- * **
** * --  FOR HELP - LSPACE ;  LSPACE /? ; LSPACE /H ; LSPACE HELP  * **
** * --                                                         -- * **
** * --  FOR VOLS - LSPACE *  ; LSPACE (VOLM**,VOLX*1,*7345X)   -- * **
** * --             LSPACE MYVOL*,TSO  ; LSPACE (MYVOL*,YOURS*) -- * **
** * --                                                         -- * **
** * --  FOR UCBS - LSPACE U=1234 ; LSPACE U=(1234,5678)        -- * **
** * --             LSPACE U=55*3 ; LSPACE U=(123*,567*,*4*2)   -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * -- REMEMBER - VOLSER AND UNIT MASKS CAN NOT BE MIXED.      -- * **
** * --*NOTE* - EVEN IF A UNIT MATCHES MORE THAN ONE MASK VALUE -- * **
** * --         IT'S DETAILS WILL STILL ONLY BE DISPLAYED ONCE. -- * **
** * ------------------------------------------------------------- * **
NOTHELP  EQU   *
TST_TSO  EQU   *                  TEST FOR TRAILING TSO KEYWORD.
         L     R5,PARMA           PARMS FOR PTR
         LH    R3,PARML           PARMS LENGTH
         SH    R3,=H'4'
         AR    R5,R3              POINT TO LAST FOUR BYTES
         CLC   0(4,R5),=C',TSO'   ARE THEY ASKING FOR "TSO OUTPUT"?
         BNE   NOT_TSO            IF NOT COUNTINUE
         OI    FLAG,TSOFL         FLAG TPUT OUTPUT ONLY
         STH   R3,PARML           RESTORE ADJUSTED LENGTH BACK IN PARML
*                                  SO WE DONT USE ",TSO" AS A MASK
NOT_TSO  EQU   *
         L     R5,PARMA           GET THE PARM PTR (AGAIN)
         LH    R3,PARML           GET THE PARM LENGTH
         CLC   0(2,R5),=C'U='     IS IT A UCB THING?
         BNE   DOVOLT               IF NOT BUILD VOLSERS
         SH    R3,=H'2'           LESS LEN OF U=
         LA    R5,2(R0,R5)        BUMP PTR PAST "U=" IN PARM
         OI    FLAG,CHKUCBS       FLAG THIS RUN AS A TEST OF UCBS
DOVOLT   EQU   *
         LA    R6,OUTTABL
         CLI   0(R5),C'('         OPEN PAREN? ONLY VALID IN POS.1
         BNE   PRSLOOP
         LA    R5,1(R5)           BUMP PAST THE '('
         BCTR  R3,R0              REDUCE TOTAL LENGTH BY 1 FOR THE (
         LTR   R3,R3              TEST IF WE ARE DONE
         BZ    RC0PRSE
*
*
PRSLOOP  BCTR  R3,R0              REDUCE FOR EX INSTRUCTIONS
         LTR   R3,R3              IF NO MORE TO PARSE?
         BZ    RC0PRSE                IF NO MORE, THEN WE ARE DONE.
*
* THE "EX FNDCOMA" WILL SCAN THE PARM LOOKING FOR A COMMA, OR A ) -
*  IF NOTHING FOUND, B TO LASTTAB, IF SOMETHING WAS FOND, BUT IN THE
*  LAST BYTE OF THE PARM, B TO ENDTAB, IF SOMETHING WAS FOUND BEFORE
*  WE GOT TO THE END OF THE PARM BRANCH TO COMAFND.  EACH ROUTINE
*  WILL DEAL WITH THE CIRCUSTANCES OF WHERE A "," OR AN ")" WAS FOUND.
*
* BEFORE WE 'EX', CHECK FOR AND CLEAR LEADING (OR ALL) BLANKS
*
         CLI   0(R5),C' '         IS IT A LEADING BLANK?
         BNE   DOEX               IF NO BLANKS - DO THE SCAN.
         LA    R5,1(R0,R5)        ELSE BUMP PAST THE BLANK
         BCTR  R3,R0              REDUCE THE TOTAL LENGTH BY ONE
         LTR   R3,R3              AND SEE IF WE HAVE ANYTHING
         BZ    RC0PRSE              LEFT TO SCAN.
*
DOEX     EX    R3,FNDCOMMA        FIND COMMA OR TRAILING ')'
         BC    8,LASTTAB          NO HIT, MOVE ALL LEFT TO TABLE
         BC    4,COMAFND          HIT IN MIDDLE OF STRING
         BC    2,ENDTAB           LAST BYTE WAS IN TABLE
*
*
*
LASTTAB  EQU   *                  JUST ONE BIG PARM WAS LEFT, WE JUST
*                                 MOVE IT, AS IS, TO THE TABLE...
         EX    R3,MOVTBL          MOVE THE MASK TO OUR TABLE
         LA    R3,1(R3)           RESTORE THE LENGTH VALUE
         STCM  R3,B'0011',0(R6)   SAVE THE LENGTH BACK IN THE TABLE.
* WE DONT NEED TO ADJUST OR TEST POINTERS - WE KNOW WE ARE THROUGH.
         B     RC0PRSE            RETURN WE ARE DONE.
*
* THIS ROUTINE IS HIT WHEN WE WE FIND A COMMA OR ')' (MIDDLE OR END)
* EITHER WAY WE TREAT IT THE SAME, MOVE AND TABLE DATA, ADJUST LENGTHS.
*
ENDTAB   EQU   *
COMAFND  EQU   *                  R1 = ^ TO DELIM VALUE, R2 = 10 OR FF
         SR    R1,R5              ENDSCAN MINUS START O'SCAN
         BNZ   NOTNULL            IF START=END, THEN=C','
NULLPARM LA    R5,1(R0,R5)        BUMP TO THE NEXT CHAR
         B     PRSLOOP
NOTNULL  EQU   *                  R1 = LENGTH TO MOVE TO STRING
         STCM  R1,B'0011',0(R6)   SAVE THE LENGTH BACK IN THE TABLE.
         BCTR  R1,R0              REDUCE FOR THE EX WE WILL DO...NOW..
         EX    R1,MOVTBL           (SEE EARLIER EX OF MOVTBL)
         AR    R6,R1              BUMP OUTPUT POINTER
         LA    R6,3(R0,R6)        +1 FOR EX, +2 FOR LEN.
         AR    R5,R1              BUMP FROM LOCATION
         LA    R5,2(R5)           +1 FOR EX, +1 FOR DELIM
         SR    R3,R1              REDUCE LENGTH LEFT IN INPUT VARIABLE
         BCTR  R3,R0              LESS ONE FOR THE DELIMITER ITSELF
         LTR   R3,R3              IF NOTHING LEFT
         BZ    RC0PRSE            WE ARE DONE WITH THIS ONE...
         B     PRSLOOP            GO LOOK FOR MORE PARMS
*
RC0PRSE  EQU   *                  WE ARE DONE
         B     0(R0,R9)           JUST RETURN
*
TSTSTAR  EQU   *                  ONE BYTE PARM WAS PASSED
         CLI   0(R5),C'*'         WAS IT AN ASTERISK THEY PASSED?
         BE    DOSTAR
         CLI   0(R5),C'/'         WAS IT A BACKSLASH?
         BE    DOSTAR             IF SO TREAT IT LIKE AN ASTERISK
ZEROTAB  MVC   OUTTABL(4),=F'0'   FORCE ALL ZEROS
         B     RC0PRSE
*
DOSTAR   MVC   OUTTABL(2),=X'0001' FORCE PARM LENGTH OF 1
         MVI   OUTTABL+2,C'*'     AND MAKE IT AN ASTERISK
         MVC   OUTTABL+3(4),=F'0' DELIM OUT STAR
         B     RC0PRSE
*
TSTHLP2  EQU   *                  TWO CHARACTER PARM PASSED
         CLC   0(2,R5),=C'/?'     UNIX STYLE HELP REQUEST?
         BNE   TSTHC
FH       OI    FLAG,FLAGHELP      FLAG THIS FOR HELP
         B     ZEROTAB            GO CLEAR OUT THE TABLE
TSTHC    CLC   0(2,R5),=C'/H'     PC STYLE HELP REQUEST?
         BE    FH
         B     NOTHELP
TSTHLP4  EQU   *                  TWO CHARACTER PARM PASSED
         CLC   0(4,R5),=C'HELP'   DID THEY SHOUT FOR HELP?
         BE    FH                 IF SO, FLAG IT AND RETURN
         B     NOTHELP            OTHERWISE, DON'T HELP
*
* EXECUTED INSTRUCTIONS AND THE TRANSLATE TABLE GO HERE
*
MOVTBL   MVC   2(0,R6),0(R5)      MOVE THE MASK TO OUR TABLE
FNDCOMMA TRT   0(0,R5),COMTAB1    EXEC'D ONLY FIND "," OR TRAILING ")"
ORBLANKS OC    0(0,R5),=CL80' '






ISINIT   EQU   *                  RTN VIA B 0(R9) - A 1ST LEVEL CALL
** * ------------------------------------------------------------- * **
** * -- ISINIT - ISPF ENVIRONMENT ADDITIONAL INITIALIZATION RTNS-- * **
** * --  INITIALIZES ISPF ENVIRONMENT (LOADS ISPLINK, & VDEF'S) -- * **
** * -- WE NEXT VDEFINE 'OUR' VARIABLES                         -- * **
** * --                                                         -- * **
** * -- RETURN IS VIA B 0(R9)                                   -- * **
** * ------------------------------------------------------------- * **
*
         TM    FLAG,TSOFL         DID THEY REQUEST TSO ONLY?
         BO    ISINISPF            IF SO, THEN DON'T DO ISPF !
         TM    FLAG,FLAGHELP      HELP REQUESTS NEVER GET ISPF SERVICE
         BO    ISINISPF            IF SO,  THEN DON'T DO ISPF !
         LOAD  EP=ISPQRY,ERRET=ISINISPF
         SLR   R1,R1               NO PARAMETERS
         LINK  EP=ISPQRY           QUERY, IS ISPF ACTIVE  Q.
         LR    R2,R15              SAVE R/C
         DELETE EP=ISPQRY
*
         LTR   R2,R2               IS ISFP ACTIVE  Q.
         BNZ   ISINISPF            NO
         ISPFINIT                 BASIC ISPF FUNCTION RTNS
* NOW VDEFINE OUR VARIABLES
         VDEFINE NAMES=(IVOLSER),FORMAT=CHAR,LENGTH=6
         VDEFINE NAMES=(IUNITADD),FORMAT=CHAR,LENGTH=4
         VDEFINE NAMES=(XUNITADD),FORMAT=BIT,LENGTH=4
         VDEFINE NAMES=(IMOUNTA),FORMAT=CHAR,LENGTH=4
         VDEFINE NAMES=(IRESV),FORMAT=CHAR,LENGTH=4
         VDEFINE NAMES=(IFREEXT),FORMAT=CHAR,LENGTH=5
         VDEFINE NAMES=(IFRETRK),FORMAT=CHAR,LENGTH=7
         VDEFINE NAMES=(IFRECYL),FORMAT=CHAR,LENGTH=6
         VDEFINE NAMES=(ILGTRK),FORMAT=CHAR,LENGTH=7
         VDEFINE NAMES=(ILGCYL),FORMAT=CHAR,LENGTH=7
         VDEFINE NAMES=(IVTOC),FORMAT=CHAR,LENGTH=5
         VDEFINE NAMES=(ISMSIND),FORMAT=CHAR,LENGTH=3
         VDEFINE NAMES=(IUCBAD),FORMAT=CHAR,LENGTH=8
         VDEFINE NAMES=(XUCBAD),FORMAT=BIT,LENGTH=8
* - - OTHERS AS NEEDED CAN BE VDEF'ED HERE
         VDEFINE NAMES=(ZTDMARK),FORMAT=CHAR,LENGTH=55
         VDEFINE NAMES=(MYCMDS),FORMAT=CHAR,LENGTH=60
* - BLANK THE NEW DETAIL LINE NOW
         MVC   ZTDMARK+19(35),=C' ********** END OF DATA ********** '
         #BLANK MYCMDS
* NOW CREATE A TABLE
         TBCREATE  TABLE=TB01,WRITE=NOWRITE,                           X
               NAMES=(IVOLSER,IUNITADD,IMOUNTA,IRESV,IFREEXT,IFRETRK,  X
               IFRECYL,ILGTRK,ILGCYL,IVTOC,ISMSIND,IUCBAD,             X
               XUNITADD,XUCBAD)
         OI    FLAG,ISPFFL        FLAG IT AS AN ISPF RUN
         NI    FLAG,X'FF'-TSOFL   TURN OFF TSO FLAG
         XR    R15,R15
         B     0(R9)              RETURN FROM WHERE WE WERE CALLED.
ISINISPF EQU   *                  NOT ISPF - FORCE BACK TO TSO FORMAT
         NI    FLAG,X'FF'-ISPFFL  TURN OFF ISPF FLAG, IT ITS NOT ISPF
         OI    FLAG,TSOFL         TURN OFF TSO FLAG
         LA    R15,16(R0,R0)      SET A BAD RC
         B     0(R9)              AND RETURN







DOHELP   EQU   *
*
** * ------------------------------------------------------------- * **
** * -- DOHELP                                                  -- * **
** * --   THIS ROUTINE JUST PRINTS A SET OF HELP LINES...       -- * **
** * --   AND THEN ENDS...                                      -- * **
** * ------------------------------------------------------------- * **
         LA    R1,HELPSP
         BAS   R8,PUTLINE
         LA    R1,HELP_1
         BAS   R8,PUTLINE
         LA    R1,HELP_2
         BAS   R8,PUTLINE
         LA    R1,HELP_3
         BAS   R8,PUTLINE
         LA    R1,HELPSP
         BAS   R8,PUTLINE
*
         LA    R1,HELP_4
         BAS   R8,PUTLINE
         LA    R1,HELPSP
         BAS   R8,PUTLINE
*
         LA    R1,HELP_5
         BAS   R8,PUTLINE
         LA    R1,HELP_6
         BAS   R8,PUTLINE
         LA    R1,HELP_13
         BAS   R8,PUTLINE
         LA    R1,HELP_7
         BAS   R8,PUTLINE
         LA    R1,HELP_10
         BAS   R8,PUTLINE
         LA    R1,HELP_14
         BAS   R8,PUTLINE
         LA    R1,HELPSP
         BAS   R8,PUTLINE
*
         LA    R1,HELP_8
         BAS   R8,PUTLINE
         LA    R1,HELP_9
         BAS   R8,PUTLINE
         LA    R1,HELPSP
         BAS   R8,PUTLINE
*
         LA    R1,HELP_11
         BAS   R8,PUTLINE
         LA    R1,HELP_12
         BAS   R8,PUTLINE
         LA    R1,HELPSP
         BAS   R8,PUTLINE
*
         B     0(R0,R9)           RETURN TO THE MAINLINE






PREPUCBS EQU   *
*
** * ------------------------------------------------------------- * **
** * -- PREPUCBS - BUILD A TABLE OF ALL UCBS FOR LATER COMPARES -- * **
** * -- AGAINST THE MASKS THE USER SPECIFIED. - ALSO, THIS IS A -- * **
** * -- GOOD PLACE TO PRINT HEADING LINES FOR TSO STYLE OUTPUT. -- * **
** * --                                                         -- * **
** * -- WE WILL USE IKJEFTSR TO CALL THE UCBSCAN ROUTINE STUCBSCN  * **
** * -- BECAUSE WE NEED TO INVOKE IT AS AUTHORIZED, FROM AN     -- * **
** * -- UNAUTHORIZED ENVIORNMENT, OTHERWISE WE WOULD JUST CALL  -- * **
** * -- IT DIRECTLY.                                            -- * **
** * --                                                         -- * **
** * -- THE UCB TABLE(S) THAT ARE BUILT BY STUCBSCN ARE GETMAIN'ED * **
** * -- HERE BEFORE THE CALL TO STUCBSCN.                       -- * **
** * --                                                         -- * **
** * -- IF THE TABLE WE PASS IS NOT BIG ENOUGH FOR ALL UCBS,    -- * **
** * -- WE WILL GETMAIN EXTRA AREAS AND CHAIN THEM TOGETHER.    -- * **
** * --                                                         -- * **
** * --  TABLE FORMAT:                                          -- * **
** * --    WORD1 - TOTAL BLOCK LENGTH                           -- * **
** * --    WORD2 - FWD BLOCK POINTER OR ZERO IF LAST BLOCK      -- * **
** * --    WORD2 - WHEN STUCBSCN IS CALLED - # OF SLOTS IN TABLE-- * **
** * --    WORD3 THROUGH WORDX = UCB ADDRESSES                  -- * **
** * --                                                         -- * **
** * --    THE UCB ADDRESSES ARE ENDED BY A SIGNAL WORD OF 0'S. -- * **
** * --    THE SIGNAL WORD CAN BE FOLLOWED BY A FWD PTR TO THE  -- * **
** * --    NEXT UCB ADDRESS IN A NEW BLOCK, OR BY ANOTHER WORD  -- * **
** * --    OF ZERO'S INDICATING AN END TO THE LOGICAL TABLE.    -- * **
** * --                                                         -- * **
** * --  I.E.                                                   -- * **
** * --                                                         -- * **
** * --  F'BLKLEN';                                             -- * **
** * --  F'FWD BLK PTR' OR ZEROS IF LAST BLOCK                  -- * **
** * --  F'UCB',F'UCB',F'UCB'... AD NAUSEUM                     -- * **
** * --  F'0' = SIGNAL WORD - MUST BE FOLLOWED BY               -- * **
** * --  F'0' = END OF ALL UCBS,                                -- * **
** * --   - OR -                                                -- * **
** * --  F'PTR TO NEXT UCB IN A NEW BLOCK'                      -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         TM    FLAG,TSOLGND
         BO    NOLGND
         OI    FLAG,TSOLGND       SET FLAG TO TAKE BRANCH NEXT TIME.
         TM    FLAG,ISPFFL
         BO    NOLGND             NO LEGENDS FOR ISPF SESSIONS.
         LA    R1,LEGEND1
         BAS   R8,PUTLINE
         LA    R1,LEGEND2
         BAS   R8,PUTLINE
NOLGND   XC    UCBWORK,UCBWORK     1ST TIME THROUGH
NXTBLK   L     R2,=A(@TABSIZ)     ROOM FOR 65K WORDS
         STORAGE OBTAIN,SP=0,LENGTH=(2)
         ST    R2,0(R0,R1)        SAVE LENGTH BACK INTO THE BLOCK
         SRL   R2,2               LENGTH / 4 = # WORDS IN BLOCK
         BCTR  R2,R0              LESS TWO FOR THE LEADING LENGTH,
         BCTR  R2,R0               AND POSSIBLE FWD POINTER WORDS.
         ST    R2,4(R0,R1)        SAVE # ENTRIES IN TABLE - THIS IS
*                                  A TEMP HOLD AREA THAT WILL BE 0'ED
*                                  WHEN STUCBSCN FIRST SEES THE TABLE.
         CLC   UCBTOP,=F'0'       IS THERE A TABLE TOP YET?
         BNE   CHAINBLK           IF THERE IS THIS - CHAIN THIS NEX BLK
         ST    R1,UCBTOP           ELSE SAVE AS THE VERY TOP BLOCK
         B     DOCALL             AND GO CALL THE STUCBSCN RTN.
*
CHAINBLK EQU   *                  CHAIN OLD BLK TO NEW & SET FWD PTR
*                                   TO NEXT UCB @ END OF OLD BLK.
         L     R2,CURBLK          GET THE OLD BLOCK ADDR FIRST.
* R1 = PTR NEW BLK  ; R2 = PTR OLD BLK
         ST    R1,4(0,R2)         SAVE THE NEW BLK ADDR IN OLD BLK.
         ST    R1,CURBLK          AND MAKE THIS NEW ONE THE CURRENT 1
* NEXT FIND THE END OF THE OLD TABLE - SO IT CAN BE CHAINED TO NEXT UCB
         L     R3,=A(@TABSIZ)     THE ORIGINAL TABLE LENGTH
         AR    R3,R2              R3 ==> PAST END OF OLD BLOCK
         S     R3,=F'4'           R3 ==> LAST WORD OF OLD BLOCK
         LA    R1,8(R0,R1)        BUMP NEW BLK PTR TO FIRST UCB SLOT
         ST    R1,0(R0,R3)        AND SAVE FWED UCB POINTER AT END
         L     R1,CURBLK          RESTORE R1 TO TOP OF NEW BLOCK
*
DOCALL   ST    R1,CURBLK          SAVE THE BLK POINTER AS CURRENT PTR
         ST    R1,PGMPARM1+6      SAVE TABLE ADDR IN PASSED PARMS
         LA    R1,UCBWORK         GET OUR WORK AREA ADDR
         ST    R1,PGMPARM1+2      SAVE WORK AREA PTR IN PARMS
         XC    PGMPARM1+10(4),PGMPARM1+10  - CLEAR THE RETURN CODE AREA
         LA    R15,PGMPARM1
         ST    R15,PARMLIST
         OI    PARMLIST,X'80'     END OF LIST JUST THE SINGLE PARM.
         L     R15,JEFTSR         GET THE TSO SERVICE FACILITY PGM ^
*        CALL  (15),(FLAGS,PGMLEN,RETCODE,REASONC,ABENDCD,PARMLIST),VL
         LA    R1,FLAGS
         ST    R1,CALL01          SET UP
         LA    R1,PGM               AND SAVE
         ST    R1,CALL02              ALL OF THE PARMS
         LA    R1,PGMLEN               FOR THE CALL -
         ST    R1,CALL03
         LA    R1,RETCODE                JUST LIKE THE
         ST    R1,CALL04                   COMMENTED
         LA    R1,REASONC                    CALL ABOVE...
         ST    R1,CALL05
         LA    R1,ABENDCD
         ST    R1,CALL06
         LA    R1,PARMLIST
         ST    R1,CALL07
         OI    CALL07,X'80'       INDICATE LAST IN LIST
         LA    R1,CALL01
         BALR  R14,R15            GO CALL OUR APF AUTH STUCBSCN ROUTINE
*
         LTR   R15,R15
         BZ    GOODTSR            TEST RC FROM IKJEFTSR
GOODTSR  L     R15,PGMPARM1+10    GET THE REAL RETURN CODE.
         CH    R15,=H'4'          ARE THERE MORE UCB'S TO DO?
         BE    RETEND              IF NOT THEN END THIS ROUTINE
         B     NXTBLK             - OTHERWISE DO MORE, TILL DONE.
RETEND   XR    R15,R15            CLEAR OUR RETURN CODE
         B     0(R0,R9)           RETURN TO CALLER.





UCBSCAN  DS    0H                 SCAN THE LIST OF UCB'S AND
*
** * ------------------------------------------------------------- * **
** * -- UCBSCAN - RETURN UCB ADDRS ONE AT A TIME - TILL DONE.   -- * **
** * -- PUT UCB ADDRESSES IN AREA UCBADDR - SET RC=4 WHEN NO    -- * **
** * -- MORE UCBS ARE AVAILABLE TO BE RETURNED.                 -- * **
** * -- (THE TABLE OF UCB ADDR WAS BUILT IN ROUTINE PREPUCBS)   -- * **
** * ------------------------------------------------------------- * **
*                                  GET 1ST (OR NEXT) UCB (COPY)
*
         CLC   RUCBP,=F'0'        IS RETURN UCB POINTER IN USE?
         BNE   BOUNCE              IF SO, GET NEXT UCB ADDR IN TABLE
         L     R2,UCBTOP          ELSE LOAD THE FIRST UCB TABLE BLOCK
*
NEWBLKU  EQU   *
         LA    R2,4(R0,R2)        PAST BLK LEN...
         ST    R2,RUCBP           SAVE AS THE CURRENT POINTER
*
BOUNCE   L     R2,RUCBP           GET THE RETURN UCB PTR
         LA    R2,4(R0,R2)        BUMP FWD TO NEXT SLOT.
TSTNBLK  CLC   0(4,R2),=F'0'      IS THIS A SIGNAL WORD?
         BNE   GIVEIT             IF NOT JUST RETURN THE UCB ADDR.
         CLC   4(4,R2),=F'0'      DID IT SIGNAL THE END OF THE TABLE?
         BE    ENDUCBS            IF SO TELL THE CALLER
*                                  - OTHERWISE, IT IS A FWD BLK PTR.
         L     R2,4(R0,R2)        GET THE BLK POINTER
         B     TSTNBLK            SAVE CURRENT BLOCK PTR
*
GIVEIT   ST    R2,RUCBP           SAVE THE NEW CURRENT RETURN UCB PTR
         MVC   UCBADDR,0(R2)      MOVE THE NEW UCB ADDR FOR THEM.
         XR    R15,R15
         B     0(R0,R9)           RETURN TO CALLER WITH NEW UCB ADDR.
ENDUCBS  LA    R15,4(R0,R0)       SET A RETURN CODE OF FOUR
         B     0(R0,R9)           AND RETURN TO CALLER.





TSTMASKS DS    0H
*
** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * --TSTMASKS - FORMAT WHAT IS NEEDED BEFORE WE CALL LSPACE   -- * **
** * --           AND CHECK IF THIS VOL/UCB MATCHES OUR MASKS.  -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
*
         SAM31
*
* GET THIS UCB'S "VOLSER" IT IS PART OF THE DETAIL FORMATTING - BUT -
*  WE NEED IT FOR VOLSER MASK COMPARISONS.
         MVC   IVOLSER,UCBVOLI
*
*   FORMAT THIS UCB'S "CUU"
*     THE CUU MIGHT ALSO BE NEEDED FOR THE $CLCL COMPARISONS.
*
         MVI   IUNITADD,C'0'          FOR OLD STYLE 3 CHAR CUU
OLD_CUU  MVC   IUNITADD+1(3),UCBNAME    PRESUME OLD STYLE FIRST
         CLC   IUNITADD+1(3),=C'UCB'    OLD STYLE 3 CHAR CUU  Q.
         BNE   USE_CUU                  YES, USE "AS IS"
NEW_CUU  UNPK  WORK5,UCBCHAN(3)         UNPACK (PNZ) 4 CHAR CUU
         TR    WORK5(4),TRTAB-240       CONVERT TO DISPLAY FORM
         MVC   IUNITADD,WORK5           NEW STYLE 4 CHAR CUU
USE_CUU  EQU   *                        USE CUU FIELD.
         MVC   WORK5(4),IUNITADD
         TR    WORK5(4),TRHEX
         MVC   XUNITADD(4),WORK5
*
* PRETEST A MASK OF STAR ONLY ! - DON'T EVEN COMPARE - STAR ALWAYS WINS
*
         CLI   OUTTABL+1,X'01'     A ONE BYTE MASK ?
         BNE   NOTSTAR             IF NOT IT CAN'T BE A STAR
         CLI   OUTTABL+2,C'*'      IS IT A MASK OF ASTERISK?
         BNE   NOTSTAR
         MVI   OUTTABL,X'FF'       FLAG THAT WE FOUND A MATCH FOR MASK
         B     TMRC000            DON'T DO ANYTHING - JUST SAY YES.
NOTSTAR  EQU   *
*
*
* HERE IS WHERE WE SEE IF ANY OF OUR MASKS MATCH THIS UCB/VOLSER
*
         LA    R7,OUTTABL         POINT TO OUR TABLE OF MASKS
*   LOAD MASK INFO
NXTMASK  XR    R5,R5              CLEAR LENGTH REG.
         IC    R5,1(R7)           GET THE MASK LENGTH
         LTR   R5,R5              CHECK FOR A ZERO LENGTH MASK
         BZ    TMRC16             NO MORE TO CHECK SET BAD RC & RTN
         LR    R6,R5              SAVE LENGTH ACROSS $CLCL ROUTINE
         LA    R4,2(R7)           POINT TO DATA (THE MASK ITSELF)
*
* LOAD DEVICE TO COMPARE INFO - UCB OR VOLSER
*
         TM    FLAG,CHKUCBS       UCBS OR VOLSERS?
         BO    CHKUCB              - B - IF UCBS
CHKVOLS  LA    R14,UCBVOLI        POINT TO VOLSER
         LA    R15,L'UCBVOLI       LENGTH OF A VOLSER
         B     DOCLCL             GO DO THE FANCY COMPARE

CHKUCB   LA    R14,IUNITADD       POINT TO THE FORMATTED UCB
         LA    R15,4(R0)          UCB'S ARE ALWAYS FOUR DIGITS LONG
DOCLCL   EQU   *
         #CLCL R14,R4             DO THE COMPARISON.
         BE    TMRC00             IF A MATCH FORMAT AND PRINT IT
         LA    R7,2(R6,R7)          ELSE CHECK THE
         B     NXTMASK                 OTHER MASKS FOR A MATCH

TMRC00   EQU   *
         MVI   0(R7),X'FF'        FLAG - MATCH FOUND FOR THIS MASK
         LA    R7,2(R6,R7)         BUMP POINTER TO NEXT MASK
TMRC000  SR    R15,R15               RC=00 TELLS MAINLINE TO PRINT IT.
         B     0(R9)              NOW RETURN

TMRC16   EQU   *
         LA    R15,16(0)          NO MATCHING MASK FOUND - SKIP UCB
         B     0(R9)

LSPACE   DS    0H
*
** * ------------------------------------------------------------- * **
** * -- LSPACE - GET EXTENDED INFORMATION FOR THE UCB ADDRESS.  -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
DOLSPACE EQU   *                 CONTINUE
*   DETERMINE IF WE CAN INTERROGATE ("LSPACE") THIS UCB
         TM    FLAG,CHKUCBS       IS IT A UCB SEARCH?
         BO    BYUNITEQ             IF SO CHECK UCB LIMITATIONS.

*   FALL THROUGH
BYVOLSER EQU   *                 ELSE CHECK VOLSER LIMITATIONS...
         TM    UCBSTAT,UCBONLI   UCB ONLINE  Q.
         BZ    LSRC04             SKIP THIS UCB IT'S NOT ONLINE
*
         CLI   UCBVOLI,C' '      VOL SER PRESENT  Q.
         BE    LSRC04             NO VOLSER - (NOT MOUNTED) SKIP IT.
*                                OTHERWISE -
         B     DOLS              CONTINUE AND GET DETAIL INFORMATION.
*
BYUNITEQ EQU   *                 SEARCH BY UNIT=
         TM    UCBSTAT,UCBONLI   UCB ONLINE  Q.
         BZ    NOT_ONLI          NO
*
         CLI   UCBVOLI,C' '      VOL SER PRESENT  Q.
         BNH   NOVOLSER          NO, NOT MOUNTED


*   CLEAR WORK FIELDS
DOLS     MVI   LSDATA,X'00'        CLEAR RETURN MSG AREA.
         MVC   LSDATA+1(L'LSDATA-1),LSDATA
*
         LA    R4,LSDATA          GET ADDR OF RESULT IN REG. SO THAT
*                                    THE LSPACE IS REENT.
         MVC   LSD(20),LSL           MOVE THE MODEL TO LSD FIRST
         LSPACE UCB=(3),DATA=(4),MF=(E,LSD)
*
LSRC00   XR    R15,R15            CLEAR R15 - RC=0
         B     0(R0,R9)           RETURN TO CALLER
*
LSRC04   LA    R15,4(R0,R0)       R15 =4 - RC=4
         B     0(R0,R9)           RETURN TO CALLER
*
LSRC08   LA    R15,8(R0,R0)       R15 =8 - RC=8
         B     0(R0,R9)           RETURN TO CALLER
*
* BELOW ARE THE SUB CALLS FROM WITHIN LSPACE
*
*   UCB NOT ONLINE
NOT_ONLI EQU   *                   UCB IS NOT ONLINE.
         OI    FLAG,TSOTMP        FLAG THIS AS A TSO TYPE MESSAGE
         MVC   IMOUNTA+0(L'N_ONLINE),N_ONLINE
         B     LSRC08             RETURN AND PRINT LINE
*
*   NO VOLUME SERIAL FOR THIS UCB
NOVOLSER EQU   *                   NO VOLSER FOR THIS UCB
         OI    FLAG,TSOTMP        FLAG THIS AS A TSO TYPE MESSAGE
         MVC   IMOUNTA+0(L'NVOLSMSG),NVOLSMSG
         B     LSRC08             RETURN AND PRINT LINE







POSTFORM DS    0H                 FINAL FORMATTING OF THE DETAILS
*
** * ------------------------------------------------------------- * **
** * -- POSTFORM -                                              -- * **
** * --   FINAL POST PROCESSING FORMATTING ROUTINE.             -- * **
** * ------------------------------------------------------------- * **
*
         LA    R4,LSDATA          GET ADDR OF RESULT OF LSPACE CALL
         USING LSDSECT,R4
         ZAP   FACTOR,=PL2'15'    MAKE THE FACTOR 15 FOR NOW...
* -
* - MOUNT ATTRIBUTES
         TM    UCBSTAB,UCBBPRV    IS IS A PRIVATE MOUNT?
         BNO   NOTPRIV
         MVC   IMOUNTA(4),=C'PRVT' PRIVATE !
         B     RESV               CHECK THE RESIDENCY STATUS
NOTPRIV  TM    UCBSTAB,UCBBPUB    IS IS PUBLIC ?
         BNO   NOTPUB
         MVC   IMOUNTA(4),=C'PUBL' PUBLIC !
         B     RESV               CHECK THE RESIDENCY STATUS
NOTPUB   TM    UCBSTAB,UCBBSTR    IS IS A STORAGE VOLUME
         BNO   NOTSTOR
         MVC   IMOUNTA(4),=C'STOR' STORAGE!
         B     RESV
NOTSTOR  MVC   IMOUNTA(4),=C'????' I JUST KNOW KNOW ABOUT THIS.
* -
* - RESIDENCY STATUS
RESV     EQU   *                  DEV STATUS-PERM RES,RSVD,REMOVABLE
         MVC   IRESV(4),=C'REMV'  DEFAULT IS REMOVABLE
         TM    UCBSTAT,UCBRESV    IS IT RESERVED?
         BNO   NOTRESV
         MVC   IRESV(4),=C'RSVD'  RESERVED!
NOTRESV  TM    UCBSTAT,UCBPRES    IS IT PERM RESIDENT?
         BNO   NOTPRES
         MVC   IRESV(4),=C'PRES'  PERM/RES!
NOTPRES  TM    UCBSTAT,UCBSYSR    IS IT A SYSRES?
         BNO   NOTSYSR
         MVC   IRESV(4),=C'SYSR'  SYSRES !
NOTSYSR  EQU   *
* -
* - 31-BIT UCB ADDRESS
FORMUCB  EQU   *                  FORMAT 31-BIT UCB NOW
         UNPK  WORK9,UCBADDR(5)
         TR    WORK9(8),TRTAB-240
         MVC   IUCBAD,WORK9
         MVC   WORK8,IUCBAD       GET THE 31-BIT ADDRESS VALUE
         TR    WORK8,TRHEX         MAKE IT SORTABLE
         MVC   XUCBAD,WORK8         AND SAVE IS AN NON-DISPLAYABLE
* - DO FREE EXTENTS NOW -
         L     R15,LSPDNEXT       GET # OF EXTENTS
         CVD   R15,PACK8          BIN --> PACKED
         MVC   IFREEXT(5),=X'2020202120'
         ED    IFREEXT-1(6),PACK8+5
* - DO FREE CYLINDERS FIRST -
         L     R15,LSPDTCYL       GET # OF CYLINDERS
         CVD   R15,PACK8
         MVC   CL8,MASK8          MOVE AN EDIT MASK IN
         ED    CL8,PACK8+4        FORMAT THE RESULTS
         MVC   IFRECYL,CL8+2      IFRECYL IS ONLY SIX BYTES LONG
         MP    PACK8,FACTOR       NOW CONVERT CYLS TO TRACKS
* - DO FREE TRACKS NOW -
         L     R15,LSPDTTRK       GET # OF TRACKS
         CVD   R15,PACK82         RESULTS INTO A DIFFERENT PACK8 FIELD
         AP    PACK8,PACK82       CYLS * FACTOR + TRKS = TOTAL TRKS
         MVC   CL8,MASK8          GET AN EDIT MASK
         ED    CL8,PACK8+4        FORMAT THE RESULT
         MVC   IFRETRK(7),CL8+1   AND MOVE THE RESULT
* - DO LARGEST CYLS NOW -
         L     R15,LSPDLCYL       GET LARGEST # OF TRACKS
         CVD   R15,PACK8
         MVC   CL8,MASK8
         ED    CL8,PACK8+4
         MVC   ILGCYL,CL8+1       MOVE THE RESULT
         MP    PACK8,FACTOR       TURN CYLS INTO TRKS
* - DO LARGEST TRACKS NOW -
         L     R15,LSPDLTRK       GET LARGEST # OF TRACKS
         CVD   R15,PACK82           INTO A DIFFERENT PACKED FIELD
         MVC   CL8,MASK8
         AP    PACK8,PACK82       TRKS + (CYLS * TRKS/CYL) =TOT.TRKS.
         ED    CL8,PACK8+4
         MVC   ILGTRK,CL8+1
* - DO INDEXED VTOC INFORMATION - *
         MVC   IVTOC,=CL5' '      CLEAR IT TO START
         TM    LSPDSTAT,LSPDIXDS IS IT INDEXED
         BNO   NINDX              IF NOT SKIP  COMPLETELY
         MVC   IVTOC,=C'EXIST'    MARK IT - AS EXISTS.
         TM    LSPDSTAT,LSPDIXAC
         BNO   NINDX              IF NOT SKIP OVER
         MVC   IVTOC,=C'ACTIV'    ELSE MARK IT AS ACTIVE AS WELL.
NINDX    EQU   *
* - NOW DO SMS INDICATOR
         TM    UCBFL5,UCBSMS      CHECK THE SMS MANAGED FLAG IN UCB
         BNO   NOTSMS
         MVC   ISMSIND,=C'SMS'      AND MARK IT ONE WAY
         B     POSTDONE
NOTSMS   MVC   ISMSIND,=C'NOT'        OR THE OTHER.
POSTDONE XR    R15,R15
         B     0(R0,R9)           RETURN TO CALLER





PUTLINE  EQU   *
*
** * ------------------------------------------------------------- * **
** * -- PUTLINE - WRITE A LINE OF OUTPUT WITH PUTLINE           -- * **
** * --   OR ADD A LINE OF DATA TO THE TABLE FOR ISPF OUTPUT.   -- * **
** * --   THIS IS A SECOND LEVEL SUB RTN - RETURN VIA B 0(R8)   -- * **
** * ------------------------------------------------------------- * **
*--------------------------
* - IF WE ARE IN HELP, OR THE THE TSO FLAG IS SET, USE PUTLINE -
* - OTHERWISE, USE TBADD.
         TM    FLAG,TSOTMP        IS IT A 1TIME ONLY TSO PUTLINE?
         BO    DOPUTL
         TM    FLAG,TSOFL         IS IT TSO
         BO    DOPUTL             IF SO, JUST DO PUTLINE
         TM    FLAG,FLAGHELP      IS IT A CALL FOR HELP?
         BO    DOPUTL             IF SO, JSUT DO PUTLINE
* - A FINAL TEST, WE MUST BE ISPF IF WE GOT HERE, BUT DOUBLE CHECK.
         TM    FLAG,ISPFFL
         BNO   PLERR              DO PUTLINE IF NOT ISPF - LOGIC ERROR
ISPFPUT  TBADD TABLE=TB01
         BAL   R7,CLNDET          CLEAR OUT THE DETAILS FOR NEXT TIME.
         B     0(R8)
*
* - DO A PUTLINE HERE
*
DOPUTL   ST    R1,IOPB+4          SAVE THE BUFFER ADDR IN CB STRUCT.
         NI    FLAG,X'FF'-TSOTMP  TURN OFF ONE TIME FLAG, IF IT'S ON.
         PUTLINE MF=(E,IOPL)        WRITE BUFFER
         ST    R15,UCBR15SA       SAVE THE RETURN CODE FOR A SEC.
         BAL   R7,CLNDET          GO CLEAR THE DETAIL AREA -
         L     R15,UCBR15SA       RESTORE RC
         LTR   R15,R15
         BZR   R8                 RETURN IF PUT LINE WORKED.
PLERR    LA    R5,PUTLINEE        GET THE ADDR OF THE STD ERR MSG.
         WTO   TEXT=(5),MF=(E,WTOT)  WRITE A MSG TO SYSLOG ONLY.
         LA    R15,16(0,0)        SET RC=16 TO INDICATE ERROR
         B     0(R8)              AND RETURN TO CALLER
         EJECT





** * ------------------------------------------------------------- * **
** * -- TBDISPL RTN - CALLED FROM CLEANUP - 2ND LEVEL RTN.      -- * **
** * --  THE TBDISPL MACRO WILL CALL STLSSRT WHEN THE LITERAL   -- * **
** * --  "SORT" IS ENTERED INTO THE FIRST 4 BYTES OF CMD LINE.  -- * **
** * ------------------------------------------------------------- * **
TBDISPL  EQU   *
         TBTOP TABLE=TB01
* NOTES ABOUT THE TBDISPL MACRO - IT IS INTENDED FOR USE WITH A
* "SELECTABLE" TABLE - THE LC OPERAND DATA IS (OP1,VAL1,RTN1), WHERE
* OP1 IS THE TABLE VARIABLE TO BE CHECKED FOR VALUE VAL1, AND IF IT IS
* FOUND TO MATCH A CALL TO RTN1 IS MADE.
*
* THE OP1 VALUES ARE INTENDED TO BE SINGLE BYTE COLUMN SELECTION CMDS,
* BUT IT WILL WORK WITH OUR FOUR BYTE COMPARISON, AS LONG AS WE CLEAR
* THE COMMAND FIELD OURSELVES.
*
*
* NOW FOR THE THE DISPLAY - REDISPLAY - SORT - ETC.
TBD01    TBDISPL TABLE=TB01,PANEL=STLSTB01,                            X
               LC=(SORTC,SORT,STLSSRT)
* WHEN IT GETS BACK WE ARE DONE. - JUST END.
         TBCLOSE TABLE=TB01
         B     0(R8)







*--------------------------
* CONSTANTS
*--------------------------
VCONSCAN DC    V(STUCBSCN)        ADDR OF ROUTINE TO SCAN FOR UCB ADDRS
LEGEND1  DC    0F'0',AL2(LENA,0)
         DC C'        UNIT MNT  RES. FREE   FREE    FREE  LARGEST LARGEX
               ST VTOC  SMS  31-BIT'
LENA     EQU   *-LEGEND1
*
LEGEND2  DC    0F'0',AL2(LENB,0)
         DC C' VOLSER ADDR ATR  STAT EXTNT  TRACKS  CYLS  TRACKS    CYLX
               S  IND   IND UCB ADDR'
LENB     EQU   *-LEGEND2
*
*
BADMSG_1 DC    0F'0',AL2(LENMSG_1,0)
NO_HITS  DC    CL12' ',C'NO MATCHING VOLUME SERIAL(S).'
LENMSG_1 EQU   *-BADMSG_1
*
BADMSG_2 DC    0F'0',AL2(LENMSG_2,0)
NO_UNITS DC    CL12' ',C'NO MATCHING UCB= VOLUME(S).'
LENMSG_2 EQU   *-BADMSG_2
*
TRTAB    DC    C'0123456789ABCDEF'
N_ONLINE DC    C' UCB IS NOT ONLINE'
NVOLSMSG DC    C' UCB HAS NO VOLSER'
*
*
HELPSP   DC    0F'0',AL2(HELPSPL,0)
         DC    C' '                      SPACER LINE
HELPSPL  EQU   *-HELPSP
*
HELP_1   DC    0F'0',AL2(HELP_1L,0)
         DC    C'HELP FOR "LSPACE" COMMAND...'
HELP_1L  EQU   *-HELP_1
*
HELP_2   DC    0F'0',AL2(HELP_2L,0)
         DC    C'YOU MAY INVOKE HELP VIA "LSPACE HELP", "LSPACE /H", OR*
                "LSPACE" WITH NO OPERANDS.'
HELP_2L  EQU   *-HELP_2
*
HELP_3   DC    0F'0',AL2(HELP_3L,0)
         DC    C'LSPACE WILL "LIST SPACE" INFO. ABOUT SELECTED DASD VOL*
               UMES.'
HELP_3L  EQU   *-HELP_3
*
HELP_4   DC    0F'0',AL2(HELP_4L,0)
         DC    C'  COMMAND FORMAT:'
HELP_4L  EQU   *-HELP_4
*
HELP_5   DC    0F'0',AL2(HELP_5L,0)
         DC    C'    LSPACE  VOLSER    <-- A SINGLE VOLUME'
HELP_5L  EQU   *-HELP_5
*
HELP_6   DC    0F'0',AL2(HELP_6L,0)
         DC    C'    LSPACE  (VOLSER)  <-- A SINGLE VOLUME'
HELP_6L  EQU   *-HELP_6
*
HELP_7   DC    0F'0',AL2(HELP_7L,0)
         DC    C'    LSPACE  *         <-- TO DISPLAY ALL DASD VOLUMES'
HELP_7L  EQU   *-HELP_7
*
HELP_8   DC    0F'0',AL2(HELP_8L,0)
         DC    C' (WHERE VOLSER MAY BE FULLY QUALIFIED 6 CHARACTER VOLU*
               ME SERIALS,'
HELP_8L  EQU   *-HELP_8
*
HELP_9   DC    0F'0',AL2(HELP_9L,0)
         DC    C'  OR MAY BE A PARTIAL VOLSER SUFFIXED BY THE "*" WILDC*
               ARD.)'
HELP_9L  EQU   *-HELP_9
*
HELP_10  DC    0F'0',AL2(HELP_10L,0)
         DC    C'    LSPACE  U=XXXX    <-- TO DISPLAY A UCB BY 4 DIGIT *
               UCB NUMBER'
HELP_10L EQU   *-HELP_10
*
HELP_11  DC    0F'0',AL2(HELP_11L,0)
         DC    C' (WHERE XXXX IS THE FULL 4 CHARACTER UCB NUMBER, OR MA*
               Y BE'
HELP_11L EQU   *-HELP_11
*
HELP_12  DC    0F'0',AL2(HELP_12L,0)
         DC    C'  A PARTIAL UCB NUMBER SUFFIXED BY THE "*" WILDCARD.)'
HELP_12L EQU   *-HELP_12
*
HELP_13  DC    0F'0',AL2(HELP_13L,0)
         DC    C'    LSPACE  (VOLSER,VOLSER,VOLSER)  <-- A LIST OF VOLU*
               MES.'
HELP_13L EQU   *-HELP_13
*
HELP_14  DC    0F'0',AL2(HELP_14L,0)
         DC    C'    LSPACE  U=(XXXX,XXXX,XXXX)      <-- A LIST OF UNIT*
                NUMBERS.'
HELP_14L EQU   *-HELP_14
*
PUTNOTSR DC    AL2(L'PUTNTSR)
PUTNTSR  DC    C'STLSPACE - BASIC TSO SERVICE IKJEFTSR IS UNAVAILABLE -X
               WE CANNONT CONTINUE - PGM IS ENDING.'
PUTLINEE DC    AL2(L'PUTLERR)
PUTLERR  DC    C'STLSPACE - ERROR WHILE TRYING TO USE PUTLINE TSOE SERVX
               ICE - PGM IS ENDING.'
COMTAB1  DC    XL256'00'
         ORG   COMTAB1+C','
         DC    X'10'              SET A X'10' FOR A COMMA
         ORG   COMTAB1+C')'
         DC    X'FF'              SET A X'FF' FOR A " ) ".
         ORG   COMTAB1+256        RESET COUNTER TO HERE AND NOW.

IOPBDUM  PUTLINE OUTPUT=(LEGEND1,,,DATA),MF=L
WTOM     WTO   TEXT=(5),ROUTCDE=(11),MF=L
LSL      LSPACE MF=L

MODELLEN EQU   *-IOPBDUM          LENGTH OF AREA TO COPY INTO WORKAREA

MASK8    DC    X'4020202020202120' TO EDIT OUTPUT NUMERICS
         LTORG
TRHEX    DC    CL256'00'
         ORG   TRHEX+C'0'
         DC    X'00010203040506070809'   TRANSLATE 0-9
         ORG   TRHEX+C'A'
         DC    X'101112131415'           TRANSLATE A-F
         ORG   TRHEX+256           RETURN TO NORMAL COUNT




STLSSRT  #ENTRY MODID=NO,AMODE=24,RMODE=24,SAVE=YES,SAVEAREA=YES
** * ------------------------------------------------------------- * **
** * -- STLSSRT RTN - CALLED FROM TBDISPL MACRO.                -- * **
** * ------------------------------------------------------------- * **
         #BLANK SORTFLDS          CLEAR THIS BEFORE WE DO ANYTHING.

* FIRST  SEE IF WE SORT UP OR DOWN
** * ------------------------------------------------------------- * **
** * -- AORDSRT RTN - FIND A TRAILING SINGLE A OR D IF PRESENT  -- * **
** * --                                                         -- * **
** * --  THIS ROUTINE WILL CHECK TO SEE IF THERE IS A SINGLE    -- * **
** * -- TRAILING CHARACTER - AND IF IT IS EITHER AN "A" OR      -- * **
** * -- A "D", FOR ASCENDING OR DECENDING                       -- * **
** * -- RC=0=NOT FOUND;RC=4=A;RC=8=D                            -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **

         LA    R6,SORTD           GET THE FIELD TO CHECK THEN ADD IT'S
         LA    R6,L'SORTD(R6)       LENGTH TO GET TO THE END
*                                 A(SORTD) + LENGTH OF SORTD -1
         LA    R7,L'SORTD-3(0,0)  HOW FAR TO SCAN BACK (LENGTH - 4)
CHKBLNK  BCTR  R6,R0              REDUCE POINTER (BACKUP IN CMD LINE)
         CLI   0(R6),C' '         IS IT STILL A BLANK? - PROBABLY
         BE    BMPAORD             - IF SO CHECK LIMIT, AND BACK UP 1
*                                 ELSE WE HAVE SOMETHING
ISITAORD EQU   *                  SEE IF IT IS AN 'A' OR A 'D' OR NOT
         BCTR  R6,R0              BACK UP ONE MORE ( TEST IF WE HAVE
         CLC   0(2,R6),=C' A'     A BLANK, THEN AN "A"..
         BE    SORTASC            IF SO THEN SET ASCENDING SORT
         CLC   0(2,R6),=C' D'     MAYBE A DESCENDING SORT?
         BE    SORTDES            IF SO SET SORT DESCENDING
         B     SORTIT              ELSE JUST SORT - DEFAULT PREFRENCE
BMPAORD  BCT   R7,CHKBLNK         REDUCE AND TEST THE SEARCH LIMIT...
*                                 IF WE FALL THRU - WE DIDN'T FIND IT
SORTIT   EQU   *                  DEFAULT SORT PREFRENCE SET HERE
         MVC   SORTDIR,=C'D)'     SET A DEFAULT OF D
         B     AORDONE
SORTASC  EQU   *                  SORT ASCENDING IS SET HERE
         MVC   SORTDIR,=C'A)'     SET A SORT DIRECTION OF "A"
         B     AORDONE
SORTDES  EQU   *                  SORT DESCENDING IS SET HERE
         MVC   SORTDIR,=C'D)'     SET A SORT DIRECTION OF "D"
AORDONE  EQU   *                  WE HAVE AN "A" OR A "D" IN SORTDIR
*
* NOW WHAT DID THEY WANT TO SORT BY?
*
         CLC   SORTD(6),=C' MOUNT' IS IT THE MOUNT STATUS?
         BE    SRMNT
         CLC   SORTD(4),=C' MNT'   IS IT THE MOUNT STATUS?
         BE    SRMNT
         CLC   SORTD(7),=C' MNTATR' S IT THE MOUNT STATUS?
         BE    SRMNT
         CLC   SORTD(4),=C' RES'   IS IT THE RESIDENCY STATUS
         BE    SRRES
         CLC   SORTD(5),=C' RES.'  IS IT THE RESIDENCY STATUS
         BE    SRRES
         CLC   SORTD(5),=C' STAT'  IS IT THE MOUNT STATUS?
         BE    SRRES
         CLC   SORTD(12),=C' FREE TRACKS'   FREE TRACKS?
         BE    SRFTK
         CLC   SORTD(10),=C' FREE CYLS'   FREE TRACKS?
         BE    SRFCY
         CLC   SORTD(11),=C' LARGEST TR'   LARGETS TRACKS?
         BE    SRLTK
         CLC   SORTD(12),=C' LARGEST CYL'   FREE TRACKS?
         BE    SRLCY
         CLC   SORTD(4),=C' SMS' IS IS A SORT VOLUME REQUEST?
         BE    SRSMS
         CLC   SORTD(4),=C' VOL' IS IS A SORT VOLUME REQUEST?
         BE    SRVOL
         CLC   SORTD(5),=C' UNIT' IS IT A UNIT ADDR REQUEST?
         BE    SRUCB
         CLC   SORTD(4),=C' UCB'  IS IT A SORT UCB ADDR REQUEST?
         BE    SR31BIT
         CLC   SORTD(7),=C' 31-BIT' IS IT A 31-IT UCB ADDR REQUEST?
         BE    SR31BIT
         CLC   SORTD(10),=C' FREE CYLS'   IS IT A SORT FREE CYLS?
         BE    SRFCYL
         CLC   SORTD(13),=C' LARGEST FREE' SS IT A SORT FREE CYLS?
         BE    SRLCYL
         CLC   SORTD(08),=C' LARGEST' SS IT A SORT FREE CYLS?
         BE    SRLCYL
         CLC   SORTD(9),=C' VTOC IND' IS IT A 31-IT UCB ADDR REQUEST?
         BE    SRVTIND
         CLC   SORTD(5),=C' VTOC' IS IT A VTOC INIDCATOR SORT?
         BE    SRVTIND
         CLC   SORTD(9),=C' FREE EXTNT'   FREE EXTENTS?
         BE    SREXT
         CLC   SORTD(6),=C' EXTNT'        FREE EXTENTS?
         BE    SREXT
         B     STLSRC00           ELSE JUST RETURN - WE ARE DONE.
***
*** SORT SETUPS HAPPEN HERE
***
SRMNT    EQU   *                  SORT BY MOUNT ATTRIBUTE
         MVC   SORTFLDS(11),=C'(IMOUNTA,C,'
         MVC   SORTFLDS+11(2),SORTDIR
         B     GENSRT
SRRES    EQU   *                  SORT BY RESIDENT STATUS
         MVC   SORTFLDS(09),=C'(IRESV,C,'
         MVC   SORTFLDS+09(2),SORTDIR
         B     GENSRT
SRFTK    EQU   *                  SORT BY FREE TRACKS
         MVC   SORTFLDS(11),=C'(IFRETRK,C,'
         MVC   SORTFLDS+11(2),SORTDIR
         B     GENSRT
SRFCY    EQU   *                  SORT BY FREE CYLINDERS
         MVC   SORTFLDS(11),=C'(IFRECYL,C,'
         MVC   SORTFLDS+11(2),SORTDIR
         B     GENSRT
SRLTK    EQU   *                  SORT BY LARGEST TRACKS
         MVC   SORTFLDS(10),=C'(ILGTRK,C,'
         MVC   SORTFLDS+10(2),SORTDIR
         B     GENSRT
SRLCY    EQU   *                  SORT BY LARGEST CYLINDER
         MVC   SORTFLDS(10),=C'(ILGCYL,C,'
         MVC   SORTFLDS+10(2),SORTDIR
         B     GENSRT
SRSMS    EQU   *                  SORT BY SMS INDICATOR
         MVC   SORTFLDS(11),=C'(ISMSIND,C,'
         MVC   SORTFLDS+11(2),SORTDIR
         B     GENSRT
SRVOL    EQU   *                  SORT BY VOLSER
         MVC   SORTFLDS(11),=C'(IVOLSER,C,'
         MVC   SORTFLDS+11(2),SORTDIR
         B     GENSRT
SRFCYL   MVC   SORTFLDS(11),=C'(IFRECYL,C,'
         MVC   SORTFLDS+11(2),SORTDIR
         B     GENSRT
SRLCYL   MVC   SORTFLDS(10),=C'(ILGCYL,C,'
         MVC   SORTFLDS+10(2),SORTDIR
         B     GENSRT
SRUCB    MVC   SORTFLDS(12),=C'(XUNITADD,C,'
         MVC   SORTFLDS+12(2),SORTDIR
         B     GENSRT
SR31BIT  MVC   SORTFLDS(10),=C'(XUCBAD,C,'
         MVC   SORTFLDS+10(2),SORTDIR
         B     GENSRT
SRVTIND  MVC   SORTFLDS(09),=C'(IVTOC,C,'
         MVC   SORTFLDS+09(2),SORTDIR
         B     GENSRT
SRUNIT   MVC   SORTFLDS(12),=C'(IUNITADD,C,'
         MVC   SORTFLDS+12(2),SORTDIR
         B     GENSRT
SREXT    MVC   SORTFLDS(11),=C'(IFREEXT,C,'
         MVC   SORTFLDS+11(2),SORTDIR
         B     GENSRT
GENSRT   TBSORT TABLE=TB01,FIELDS=@SORTFLDS
STLSSTOP EQU   *
         TBTOP TABLE=TB01
STLSRC00 EQU   *
         #BLANK MYCMDS            THIS CLEARS THE COMMAND LINE.
BACKONE  #EXIT                    RETURN TO CALLER






WORKA1   DSECT                    TOP OF THE VARIABLE AREA
*-------------------------*
* VARIABLES IN WORK AREA  *
*------- ----- -----------*
SAVEAREA DS    18F
*
*
* ! !  KEEP THE PUTLINE,WTO AND LSPACE MACROS TOGETHER, THEY ARE COPIED
*      FROM MODEL STATEMENTS IN THE CONSTANT AREA - MOVE THEM AND DIE!
*
IOPB     PUTLINE OUTPUT=(SPACEMSG,,,DATA),MF=L   GEN PUTLINE BLOCKS
WTOT     WTO   TEXT=(5),ROUTCDE=(11),MF=L
LSD      LSPACE MF=L
*
* ! ! KEEP THE PUTLINE, WTO AND LSPACE MACROS TOGETHER, THEY ARE COPIED
*
*
         UCBSCAN MF=(L,UCBSDS)
*
*
JEFTSR   DS    F                  ADDRESS OF IKJEFTSR ROUTINE
CALL01   DS    F                    PASSED PARM ADDR 1
CALL02   DS    F                    PASSED PARM ADDR 2
CALL03   DS    F                                 AND SO ON....
CALL04   DS    F
CALL05   DS    F
CALL06   DS    F
CALL07   DS    F
*
         DS    0F
FLAGS    DS    XL1'00'            ALLWAYS ZERO
         DS    XL1'01'            INVOKED FROM AN UNAUTH ENVIR.
         DS    XL1'01'            SPECIFY DUMP - IF NEEDED
         DS    XL1'02'            SPECIFIY A PROGRAM IS TO BE EXECED
PGM      DS    C'STUCBSCN'        THE PROGRAM TO BE CALLED
PGMLEN   DS    F'8'               THE LENGTH OF THE PGM TO BE CALLED
RETCODE  DS    F                  PGM RETURN CODE
REASONC  DS    F
ABENDCD  DS    F
         DS    0F
PARMLIST CALL  ,(PGMPARM1),VL,MF=L
         DS    0F                 ALIGNMENT IS TO THE FULLWORD
         DS    H                    AND A PAIR OF HALFWORDS
PGMPARM1 DS    H'12'                 PUTS US BACK ON A WORD BOUNDARY
         DS    F                   THE A(UCBWORK) WORK AREA FOR UCBSCAN
         DS    F                   THE UCB ADDR ( NOT A POINTER )
         DS    F                   THE RESULTANT RETURN CODE.
*
*
*
CMDLENF  DS    H                   FULL LENGTH OF COMMAND DATA
CMDLEN1  DS    H                   LENGTH OF COMMAND DATA AREA 1
CMDDATA1 DS    F                   ADDRESS OF COMMAND DATA AREA 1
*
UCBTOP   DS    F                  FIRST UCB ADDRESS BLOCK
CURBLK   DS    F                  THE CURRENTLY USED UCB ADDRESS BLK
RUCBP    DS    F                  THE RETURN UCB POINTER.
*
UCBR15SA DS    F                   SAVE R/C IN UCB31BIT
UCBADDR  DS    A(0)                ADDRESS OF 31-BIT UCB
WORK5    DS    CL5' '
WORK8    DS    CL8' '
WORK9    DS    CL9' '
SORTFLDS DS    CL20               (FIELDNAME,C,A)
FLAG     DS    X'00'              FLAG FOR HDR & UCB VS VOLS
TSOLGND  EQU   B'10000000'        ONE TIME LEGEND PRINTING FLAG.
ISPFFL   EQU   B'01000000'        FLAG FOR ISPF VS TSO - THIS IS ISPF
TSOFL    EQU   B'00100000'        FLAG FOR ISPF VS TSO - THIS IS TSO
FLAGHELP EQU   B'00010000'        FLAG FOR HELP
CHKUCBS  EQU   B'00001000'        CHK UCBS NOT VOLSERS IF FLAG IS SET
*              B'XXXX X1XX'
*              B'XXXX XX1X'
TSOTMP   EQU   B'00000001'        TEMPORARY TSO PRINT FLAG - 1 MSG ONLY
PARML    DS    H                  WORKING LEN OF PARMS
PARMA    DS    F                  ^ TO THE PARM FIELD
*
*
ECB      DS    F'0'
*
         DS    0F                  ALIGN (IF NEEDED)
UCBWORK  DS    100X                REQUIRED WORK AREA
*
IOPL     DS    0F                 OBJECT OF "PUTLINE"
IOPLUPT  DC    F'0'
IOPLECT  DC    F'0',A(ECB),A(IOPB)
*
** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * -- THE DETAIL PRINT LINE USED BY PUTLINE AND FOR ISPF      -- * **
** * -- TABLE DISPLAYS ARE BELOW.                               -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         DS    0F
SPACEMSG DS    AL2(DETLNL,0)      DETAIL LINE.. HERE TO IUCBAD BELOW
NULSPC0  DS    CL1                JUST A SPACER
IVOLSER  DS    CL6                VOLSER
NULSPC1  DS    CL1                JUST A SPACER
IUNITADD DS    CL4                UNIT ADDRESS
NULSPC2  DS    CL1                JUST A SPACER
IMOUNTA  DS    CL4 XX-----.       MOUNT ATTRIBUTES
NULSPC3  DS    CL1        ¦       JUST A SPACER
IRESV    DS    CL4  ERR   ¦       RESIDENT STATUS
NULSPC4  DS    CL1  MSG   ¦       JUST A SPACER
IFREEXT  DS    CL5  AREA  ¦       FREE EXTENTS
NULSPC5  DS    CL1        ¦       JUST A SPACER
IFRETRK  DS    CL7 XX-----'       FREE TRACKS
NULSPC6  DS    CL1                JUST A SPACER
IFRECYL  DS    CL6                FREE CYLINDERS
NULSPC7  DS    CL1                JUST A SPACER
ILGTRK   DS    CL7                LARGEST FREE TRACKS
NULSPC8  DS    CL1                JUST A SPACER
ILGCYL   DS    CL7                LARGEST FREE CYLINDERS
NULSPC9  DS    CL1                JUST A SPACER
IVTOC    DS    CL5                INDEXED VTOC INDICATOR STATUS
NULSPCA  DS    CL1                JUST A SPACER
ISMSIND  DS    CL3                SMS INDICATOR
NULSPCB  DS    CL1                JUST A SPACER
IUCBAD   DS    CL8                THE 31-BIT UCB ADDRESS
DETLNL   EQU   *-IVOLSER
LEND     EQU   *-SPACEMSG
XUNITADD DS    CL4                UNIT ADDRESS (NON-DISPL)
XUCBAD   DS    CL8                31-BIT ADDRESS (NON-DISPL)
ZTDMARK  DS    CL55               END OF TABLE DATA MARKER
         ISPFVARS                 ISPF VARIABLES
PACK8    DS    PL8                WORK AREA TO UNPACK DATA TO.
PACK82   DS    PL8                WORK AREA TO UNPACK DATA (SECOND ONE)
CL8      DS    CL8                WORK AREA FOR FORMATTED RESULTS FIELD
FACTOR   DS    PL2
*                                 IF NEEDED LSDATA OVFLWS INTO MYCMDS
MYCMDS   DS    0CL60              COMMAND AREA ON TBDISPL PANEL
SORTC    DS    CL4                CHECK THIS FIELD FOR "SORT"
SORTD    DS    CL56               CHECK THIS FIELD FOR SORT DATA


TB01SELS DS    CL4                 REQUIRED BY TBDISPL MACRO

SORTDIR  DS    CL2                SORT DIRECTION =C'A)' OR =C'D)'
*
         DS    0F                 FULLWORD ALIGN THE LSDATA AREA
LSDATA   DS    CL36               LSPACE DATA RETURN AREA
*
*
OUTTABL  DS    20CL8              AREA TO BUILD A LIST OF MASKS -
*                                   XL2 LEN, FOLLOWED BY DATA IE.
*                                   X'0006',C'VOLSER' OR H'4',C'1234'
@DYN1    DS    0X
@DYNSIZE EQU   ((@DYN1-WORKA1+7)/8)*8 WORK AREA SIZE (DBL WORD BDY)
@TABSIZ  EQU   ((1024*4)*128)    SIZE OF UCB TABLE 128K WORDS & DEVICES
*TABSIZ  EQU   ((1024*8))         MINIMUM OF 8K FOR AUTOMATIC CLEARING!
*
*
*              W   W  AAA  RRRR  N   N  III  N   N  GGGG
*              W   W A   A R   R NN  N   I   NN  N G
*              W W W AAAAA RRRR  N N N   I   N N N G  GG
*              WW WW A   A R  R  N  NN   I   N  NN G   G
*              W   W A   A R   R N   N  III  N   N  GGGG
*
* REDUCING THE @TABSIZ TO ANYTHING BELOW 8192 - WILL RESULT IN ERRORS
*  8192 OR > GIVES US AUTOMATIC CLEARING TO ZEROS - OTHERWISE WE ARE
*  GOING TO HAVE PROBLEMS.
*
*
         IKJCPPL
LSDSECT  LSPACE MF=(D,DATA)
         CVT   DSECT=YES
         IEFUCBOB LIST=NO,PREFIX=NO MAP THE UCB FIELDS
         END
