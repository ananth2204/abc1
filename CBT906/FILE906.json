{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013359000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE906.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE906.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x06'", "DS1TRBAL": "b'ff'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x08\\xde\\x00\\t\\x08\\xdf\\x00\\x02\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04X\\x00@\\x01\\x14\\x02O\\x01\\x14\\x02O\\x14\"\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf8@@@'", "ispf": {"version": "04.88", "flags": 0, "createdate": "2014-01-24T00:00:00", "modifydate": "2014-01-24T14:22:40", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-488"}, "text": "REGULAR CBT TAPE - VERSION 488    FILE:  906\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT488.FILE906\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 13 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,941 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/24/14    14:22:40    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "###BIO": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x17\\x01\\x14\\x02\\x1f\\x01\\x14\\x02/\\x121\\x002\\x00,\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2014-01-21T00:00:00", "modifydate": "2014-01-22T12:31:17", "lines": 50, "newlines": 44, "modlines": 0, "user": "SBGOLOB"}, "text": "Background for Steve McColley.  (by Sam Golob)\n---------- --- ----- --------\n\nSteve McColley is one of the VERY FEW JES2 EXPERTS in the United\nStates, who does NOT work for IBM.  This makes him an extremely\nprecious commodity.  Steve has supported the famous Mellon Mods\nto JES2 for many years, and they are currently maintained on the\nCBT Tape collection.\n\nThe Mellon Mods to JES2 can be found on CBT Tape files:\n\nFile 856  -  For z/OS 1.10 thru 1.13\nFile 766  -  For z/OS 1.7  thru 1.9\nFile 702  -  For z/OS 1.4  thru 1.6\n\nThe Mellon Mods have been a shop standard for a number of MVS\nshops over many years, because they provide a level of job\ncontrol and job dependency control (with one job not starting\nuntil requisite jobs have completed) that is not possible with\nnative JES2 from IBM.  As one can imagine, it takes an extremely\nthorough knowledge of JES2 internals, to maintain and enhance\nthese types of job control facilities under JES2.\n\n     The ESSM Product  -  JES3 functionality under JES2\n     --- ---- -------     ---- ------------- ----- ----\n\nIn addition to maintaining the Mellon Mods for the benefit of the\npublic, Steve has undertaken a massive effort, and has developed\na vendor product (priced and supported) called ESSM, which is a\nlarge extension of the Mellon Mods, and which ALSO supplies very\nmuch JES3 functionality from within JES2.  This makes ESSM a\nfantastic conversion tool for JES3 shops wishing to convert to\nJES2, because you can run much of your JES3 JCL under JES2 with\nno changes, using ESSM.\n\nMany shops stand to benefit greatly from using the ESSM product.\nPlease write to Steve at\n\n     email:     Stephen.McColley@MVSProgrammer.com\n\n     address:   McColley Systems Software Inc.\n                2288 Marietta Hwy.\n                Suite #62\n                Canton GA 30144\n                770-704-8123\n\nThanks much.\n\nSincerely,    Sam\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@@MEMBER": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x000\\x01\\x136_\\x01\\x14\\x02O\\x14!\\x00\\x14\\x00\\x10\\x00\\x06\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2013-12-31T00:00:00", "modifydate": "2014-01-24T14:21:30", "lines": 20, "newlines": 16, "modlines": 6, "user": "T0SM0"}, "text": "###BIO   - BACKGROUND ABOUT THE AUTHOR, BY SAM GOLOB.\n\n@@MEMBER - LIST OF MEMBERS AND THEIR FUNCTIONS FOR STLSPACE.\n           THIS IS WHAT YOU ARE LOOKING AT RIGHT NOW!\n\n@@README - OVERVIEW AND INSTRUCTIONS FOR INSTALLING STLSPACE.\n           READ THIS INFORMATION BEFORE STARTING THE ACTUAL INSTALL.\n\n@INST01  - INSTALL STEP 1 - ASSEMBLE & BIND JCL FOR STUCBSCN.\n@INST02  - INSTALL STEP 2 - ASSEMBLE & BIND JCL FOR STLSPACE.\n@INST03  - INSTALL STEP 3 - INSTRUCTIONS FOR UPDATING IKJTSOXX.\n@INST04  - INSTALL STEP 4 - INSTRUCTIONS TO COPY STLSTB01 TO A PANEL\n                            LIBRARY IN THE ISPPLIB CONCATENATION.\nSTLSPACE - SOURCE STATEMENTS FOR BASIC LSPACE / STLSPACE PGM.\nSTLSTB0X - BACKUP (SPARE) PANEL DEFINITION IN CASE STLSTB01 IS\n           MESSED UP\nSTLSTB01 - PANEL DEFINITION TO BE COPIED TO AN ISPPLIB DATASET.\nSTUCBSCN - SOURCE STATEMENTS FOR STUCBSCN ROUTINE- (CALLED BY\n           STLSPACE).\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@@README": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x16\\x01\\x136O\\x01\\x14\\x02O\\x14 \\x01\\x07\\x00\\xc7\\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2013-12-30T00:00:00", "modifydate": "2014-01-24T14:20:16", "lines": 263, "newlines": 199, "modlines": 0, "user": "T0SM0"}, "text": "\n OVERVIEW:\n  PLEASE READ THIS ENTIRE MEMBER FIRST, AND THEN BEGIN THE INSTALL -\n  MEMBERS INST01 - INST04 ARE PROVIDED AS A STEP BY STEP GUIDE.\n\n\n  THE STLSPACE OR SIMPLY LSPACE COMMAND CONSISTS OF;\n      TWO MEMBERS TO BE ASSEMBLED\n\n          STUCBSCN  AND STLSPACE\n\n\n      AND ONE PANEL MEMBER TO BE ADDED TO THE ISPPLIB CONCATENATION.\n\n          STLSTB01\n\n===========================================================================\n\n  THE ASSEMBLER MODULES SHOULD BOTH BE ASSEMBLED AS\n       \"AMODE=24,RMODE=24,AC=1,REUS=REFR\"\n  THERE ARE PUNCH STATEMENTS IN EACH MODULE TO SET THE PROPER OPTIONS,\n  JUST MAKE SURE THEY ARE NOT OVERRIDEN, OR CHANGED, YOU WILL STILL NEED TO\n  PROVIDE AN ENTRY AND NAME STATEMENT FOR EACH MODULE IN YOUR ASMLNK JCL:\n\n    SAMPLE JCL TO ASSEMBLE STUCBSCN IS IN MEMBER @INST01.\n    MAKE JCL CHANGES AS NEEDED, INCLUDING REPLACING THE JOBCARD.\n\n    SAMPLE JCL TO ASSEMBLE STLSPACE IS IN MEMBER @INST02.\n    MAKE JCL CHANGES AS NEEDED, INCLUDING REPLACING THE JOBCARD.\n\n\n  MEMBER STUCBSCN SHOULD BE ASSEMBLED FIRST - IT IS INCLUDED BY STLSPACE.\n\n\n  THE MODULES SHOULD BE ASSEMBLED INTO AN APF AUTHORIZED LIBRARY\n  THAT IS ACCESSABLE FROM WITHIN THE ISPF ENVIRONMENT - YOU CAN PUT\n  THEM IN THE ISPPLIB CONCATENATION OR ANY LINKLISTED LIBRARY.\n\n  WHEN YOU ASSEMBLE YOU WILL NEED TO REFERENCE YOUR SYSTEM LIBRARIES,\n  SPECIFICALLY MAKE SURE THE FOLLOWING ARE IN THE SYSLIB CONCATENATION -\n      MACLIB,  MODGEN,  AND SASMMAC2 - CHECK WITH YOUR SYSPROG TO WEE WHAT\n  THE ACTUAL NAMES OF THE LIBRARIES ARE IN YOUR SHOP.  THEY MAY NOT MATCH\n  WHAT WAS USED WHEN MY SYSTEM WAS BUILT.\n\n\n\n** MACRO DEFINITIONS ARE ALL EMBEDDED WITHIN THE SOURCE SO YOU DON'T NEED\n   A SPECIAL MACLIB (OTHER THAN THE SYSTEM LIBRARIES) WHEN THE PROGRAMS ARE\n   ASSEMBLED AND BOUND.\n\n   MEMBER STLSTB01 NEEDS TO BE COPIED TO A 'PANEL' LIBRARY, ONE OF THE DATASETS\n   IN YOUR ISPPLIB CONCATENATION.  BE CAREFUL NOT TO ADD LINE NUMBERS TO THE\n   MEMBER WHEN YOU COPY IT.  IF THE PANEL MEMBER IS DESTROYED BY AN ACCIDENTAL\n   EDIT, THERE IS ANOTHER COPY IN MEMBER STLSTB0X, OR JUST RELOAD THIS DATASET\n   FROM WHEREVER YOU GOT IT TO BEGIN WITH.\n\n\n  BEFORE YOU CAN USE THE COMMAND, YOU NEED TO UPDATE IKJTSOXX MEMBER OF PARMLIB.\n  JUST ADD STUCBSCN AND STLSPACE AND LSPACE\n\n  TO THE AUTHTSF SECTION OF IKJTSOXX, AND ADD STUCBSCN TO THE AUTHPGM SECTION\n  OF YOUR IKJTSOXX MEMBER.  NEXT APPLY THE PARMLIB CHANGES IN IKJTSOXX BY\n  EITHER IPLING, OR USING THE PARMLIB UPDATE(XX) COMMAND.\n\n\n  AFTER YOU HAVE ASSEMBLED AND LINKED THE TWO ASM SOURCE MODULES INTO AN\n  APF AUTHORIZED LIBRARY THAT IS INCLUDED IN THE ISPLLIB CONCATENATION OR\n  OR IS IN THE LINKLIST (OR EVEN IN LPA ALTHOUGH THAT IS NOT RECOMMENDED),\n  AND AFTER THE IJKTSOXX MEMBER HAS BEEN UPDATED, AND AFTER YOU HAVE COPEID\n  MEMBER STLSTB01 TO A LIBRARY IN THE ISPPLIB CONCATENATION - YOU SHOULD BE\n  DONE WITH THE INSTALL.\n\n  LOGOFF AND LOG BACK ONTO TSO AND GET INTO ISPF IF NEEDED.  THEN\n  FROM A TSO PROMPT ISSUE - 'TSO LSPACE ' OR 'TSO STLSPACE ' AND HIT ENTER.\n   (LSPACE IS AN ALIAS OF STLSPACE)\n  YOU SHOULD GET THE HELP RESPONSE - IT SHOULD LOOK SOMETHING LIKE...\n\n\n\nHELP FOR \"LSPACE\" COMMAND...\nYOU MAY INVOKE HELP VIA \"LSPACE HELP\", \"LSPACE /H\", OR \"LSPACE\" WITH NO OPERAND\nLSPACE WILL \"LIST SPACE\" INFO. ABOUT SELECTED DASD VOLUMES.\n\n  COMMAND FORMAT:\n\n    LSPACE  VOLSER    <-- A SINGLE VOLUME\n    LSPACE  (VOLSER)  <-- A SINGLE VOLUME\n    LSPACE  (VOLSER,VOLSER,VOLSER)  <-- A LIST OF VOLUMES.\n    LSPACE  *         <-- TO DISPLAY ALL DASD VOLUMES\n    LSPACE  U=XXXX    <-- TO DISPLAY A UCB BY 4 DIGIT UCB NUMBER\n    LSPACE  U=(XXXX,XXXX,XXXX)      <-- A LIST OF UNIT NUMBERS.\n\n\n\n\n\n\n NEXT YOU SHOULD PROBABLY TRY -\n   TSO LSPACE *\n\n  THIS SHOULD RESULT IN A SIMILAR SCROLLABLE LIST OF VOLUMES -\n==============================================================================\nADCD                                                         ROW 1 TO 27 OF 27\n\n                       - MVS GROUP STLSPACE COMMAND -\n                 RETURN SPACE INFORMATION FOR SELECTED UNITS\n\nUSE    PF3/END TO EXIT\nSELECT OPTION ===>                                           SCROLL ===> CSR\n\n       UNIT MNT  RES. FREE   FREE    FREE  LARGEST LARGEST VTOC  SMS  31-BIT\nVOLSER ADDR ATR  STAT EXTNT  TRACKS  CYLS  TRACKS    CYLS  IND.  IND UCB ADDR\n=============================================================================\nZCRES1 0A80 PRVT SYSR     7    1712    112    1181      78 ACTIV NOT 00F501D0\nZCRES2 0A81 PRVT PRES     2   12253    816   12215     814 ACTIV NOT 00F50268\nZCSYS1 0A82 STOR PRES    20    2100    132    1854     123 ACTIV NOT 00F50300\nZCSYS2 0A83 STOR PRES     7     850     55     810      54 ACTIV NOT 00F50398\nZCSYS3 0A84 STOR PRES    10    1902    124    1140      76 ACTIV NOT 00F50430\nZCPRD1 0A85 PRVT PRES     6   27361   1823   27349    1823 ACTIV NOT 00F504C8\nZCPRD2 0A86 PRVT PRES     4   16831   1121   16815    1121 ACTIV NOT 00F50560\nZCPRD3 0A87 PRVT PRES     1   17336   1155   17336    1155 ACTIV NOT 00F505F8\nZCDIS1 0A88 PRVT PRES     2   12814    853   12805     853 ACTIV NOT 00F50690\nZCDIS2 0A89 PRVT PRES     1   19043   1269   19043    1269 ACTIV NOT 00F50728\nZCDIS3 0A8A PRVT PRES     3   14981    998   14974     998 ACTIV NOT 00F507C0\nZCDIS4 0A8B PRVT PRES     3   16420   1094   16410    1094 ACTIV NOT 00F50858\nZCDIS5 0A8C PRVT PRES     2    5169    344    5160     344 ACTIV NOT 00F508F0\nZCDIS6 0A8D PRVT PRES     1   22884   1525   22884    1525 ACTIV NOT 00F50988\nTSTA8E 0A8E STOR PRES     2   39310   2620   39300    2620 ACTIV NOT 00F50A20\nTSTA8F 0A8F STOR PRES     2   37303   2486   37290    2486 ACTIV NOT 00F50AB8\nUSER01 0A90 PRVT PRES     1       2      0       2       0 ACTIV NOT 00F50B50\nUSER02 0A91 PRVT PRES     2    6976    465    6975     465 ACTIV NOT 00F50BE8\nWORK01 0A92 STOR PRES    17    7008    462    1654     110 EXIST NOT 00F50C80\nWORK02 0A93 STOR PRES    10   36974   2463   14880     992 ACTIV NOT 00F50D18\nZCUSS1 0A94 PRVT PRES     2     112      7     107       7 ACTIV NOT 00F50DB0\nSCCI31 0A95 PRVT PRES     3   28105   1873   28095    1873 ACTIV NOT 00F50E48\nSPOOL1 0A96 STOR PRES     5   48362   3223   48276    3218 ACTIV NOT 00F50EE0\nHFS001 0A97 STOR PRES     2   14628    975   14625     975 ACTIV NOT 00F50F78\nUCAT01 0A98 STOR PRES     4   48988   3265   48975    3265 ACTIV NOT 00F51010\nCF0001 0A9E STOR PRES    10    9021    599    8973     598 ACTIV NOT 00F513A0\n                    ********** END OF DATA **********\n================================================================================\n\nUSE PF3 OR THE END COMMAND TO END AND RETURN - YOU MAY ALSO RESORT THE LIST\nBY USING THE SORT COMMAND - \"SORT (ANY COLUMN HEADING NAME) A|D\"\nFOR EXAMPLE ' SORT LARGEST TRACKS ' WILL RESORT THE DISPLAY BASED ON # TRACKS.\n            ' SORT VOLSER D' WILL SORT BY VOLSER IN DECENDING SEQUENCE.\n            ' SORT VOLSER A' WILL SORT BY VOLSER IN ASCENDING SEQUENCE.\n\nSCROLL UP AND DOWN AS YOU WOULD WITH ANY OTHER ISPF TABLE DISPLAY.\n\nWHEN INVOKING STLSPACE YOU CAN MASK THE VOLSER USING AN '*' TO INDICATE ANY\nCHARACTER OR CHARACTERS.  FOR INSTANCE USING THE SYSTEM DISPLAYED ABOVE THE\nRESULT FOR \"TSO LSPACE ZC*1\" RESULTS IN -\n\nADCD                                                           ROW 1 TO 5 OF 5\n\n                       - MVS GROUP STLSPACE COMMAND -\n                 RETURN SPACE INFORMATION FOR SELECTED UNITS\n\nUSE    PF3/END TO EXIT\nSELECT OPTION ===>                                           SCROLL ===> CSR\n\n       UNIT MNT  RES. FREE   FREE    FREE  LARGEST LARGEST VTOC  SMS  31-BIT\nVOLSER ADDR ATR  STAT EXTNT  TRACKS  CYLS  TRACKS    CYLS  IND.  IND UCB ADDR\n=============================================================================\nZCRES1 0A80 PRVT SYSR     7    1712    112    1181      78 ACTIV NOT 00F501D0\nZCSYS1 0A82 STOR PRES    20    2100    132    1854     123 ACTIV NOT 00F50300\nZCPRD1 0A85 PRVT PRES     6   27361   1823   27349    1823 ACTIV NOT 00F504C8\nZCDIS1 0A88 PRVT PRES     2   12814    853   12805     853 ACTIV NOT 00F50690\nZCUSS1 0A94 PRVT PRES     2     112      7     107       7 ACTIV NOT 00F50DB0\n                    ********** END OF DATA **********\n\nIF YOU INVOKE LSPACE FROM TSO READY  (OUTSIDE OF ISPF) YOU WILL GET A RESPONSE\nTHAT IS CREATED USING TPUT.  YOU CAN 'FORCE' A TSO STYLE RESPONSE FROM WITHIN\nISPF BY USING THE TSO OPTION - FOR EXAMPLE; \"TSO LSPACE Z*2,TSO\" GIVES YOU\nBACK THE FOLLOWING;\n\n\n\n\n       UNIT MNT  RES. FREE   FREE    FREE  LARGEST LARGEST VTOC  SMS  31-BIT\nVOLSER ADDR ATR  STAT EXTNT  TRACKS  CYLS  TRACKS    CYLS  IND   IND UCB ADDR\nZCRES2 0A81 PRVT PRES     2   12253    816   12215     814 ACTIV NOT 00F50268\nZCSYS2 0A83 STOR PRES     7     850     55     810      54 ACTIV NOT 00F50398\nZCPRD2 0A86 PRVT PRES     4   16831   1121   16815    1121 ACTIV NOT 00F50560\nZCDIS2 0A89 PRVT PRES     1   19043   1269   19043    1269 ACTIV NOT 00F50728\n***\n\n\nOBVIOUSLY YOU CAN NOT SCROLL IT, UNLESS YOU ARE USING SESSION MANAGER, BUT\nTHE SAME THING IN TPUT FORMAT IS OCCASIONALLY USEFUL.\n       \u00a8R\n\n  THIS IS A SIMPLE UTILITY THAT I USE IN MY OWN SHOP;\n        MCCOLLEY SYSTEMS SOFTWARE INC.\n        WWW.MVSPROGRAMMER.COM\n        EMAIL - STEPHEN.MCCOLLEY@MVSPROGRAMMER.COM OR CALL - 770-704-8123.\n\n\n\n\n\nADDITIONAL NOTE:\n\n  WHO AM I?\n\n  I AM STEPHEN MCCOLLEY FROM\n  MCCOLLEY SYSTEMS SOFTWARE INC.\n  SUITE #62\n  2288 MARIETTA HWY. CANTON GA 30114\n  770-704-8123 OR EMAIL - STEPHEN.MCCOLLEY@MVSPROGRAMMER.COM\n\n  I PROVIDED LSPACE BECAUSE I I THOUGHT IT MIGHT HELP SOMEONE - IT IS FREE!\n\n  BUT I REALLY WANTED TO TELL YOU ABOUT ESSM AN ADD ON PRODUCT FOR JES2.\n\n\n  I CREATED THE ESSM PRODUCT FOR JES2 -\n\n ==> \"BECAUSE YOU DESRVE MORE CONTROL FROM YOUR JOB CONTROL LANGUAGE\" <==\n\n\n  ESSM FOR JES2 CAN BE USED TO BETTER CONTROL WHEN AND WHERE BATCH JOBS RUN\n RELATIVE TO:\n                OTHER BATCH JOBS,\n                STARTED TASKS,\n                THE CLOCK,  (TIME OF DAY RELEASE & DELAY FOR A FIXED TIME)\n                AD-HOC RESOURCE AVAIALBILITY,\n                'INTELLIGENT' RESOURCES.\n OUR ESSM RESOURCES CAN BE DEFINED ANYWHERE IN A JES2 MAS WITHOUT INVOLVING WLM\n SCHEDULING ENVIRONMENTS.  ANY OR ALL OR MULTIPLES OF THESE CONTRAINTS CAN BE\n USED WITH ANY JES2 JOB.\n\n\n  ESSM CAN ALSO HANDLE ALLMOST ALL JES3 / JOBNET CONSTRUCTS, WITHOUT ANY JCL\n CHANGES AND SO IT WOULD BE A GREAT AID TO ANYONE MIGRATING FROM JES3 TO JES2 OR\n ANYONE NEEDING THE FEATURE RICH SCHEDULING CAPABILITIES OF JES3 IN A JES2\n ENVIRONMENT.\n\n\n ESSM WILL ALSO REPLACE THE MELLON SHARED SPL MODS WITHOUT CHANGES TO YOUR JCL.\n  (THERE ARE CURRENTLY KNOWN PROBLEMS WITH THE MELLON SHARES SPOOL MODS!)\n\n\n  ALL OF THE FEATURES OF ESSM, EXCEPT FOR CREATING SYSTEM LEVEL RESOURCES, ARE\n IMPLEMENTED AND MANAGED BY THE END USER THROUGH SIMPLE JCL STATMENTS - NO\n CENTRALIZED CONTROL DEPARTMENT (OR PERSON) IS NEEDED TO USE THESE FEATURES.\n\n\n  SO, IF YOU RUN JES2 AND JES3 - OR YOU NEED TO ELIMINATE THE MELLON SHARED\n SPOOL MODS, OR YOU NEED TO HAVE MORE FLEXIBLE JOB ROUTING RESOURCES - OR IF\n YOU JUST WANT MORE CONTROL OVER YOUR BATCH WORKLOAD - YOU OWE IT TO YOUR SHOP\n TO GIVE ME A CALL FOR A FREE EVALUATION LICENSE AND HELP SETTING UP ESSM IN\n YOUR SHOP TODAY!\n\n                                                      THANKS,\n                                                      STEPHEN MCCOLLEY\n                                                      770-704-8123\n\n\n\n\n      - END OF FILE -\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE906": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04X\\x000\\x01\\x14\\x02O\\x01\\x14\\x02O\\x14\"\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf8@@@'", "ispf": {"version": "04.88", "flags": 0, "createdate": "2014-01-24T00:00:00", "modifydate": "2014-01-24T14:22:30", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT-488"}, "text": "//***FILE 906 is from Stephen McColley, and contains a TSO command  *   FILE 906\n//*           and ISPF panel, to list space characteristics of      *   FILE 906\n//*           mounted DASD volumes.  This is a variant of the TSO   *   FILE 906\n//*           LSPACE command.  It is quite robust and helpful, so   *   FILE 906\n//*           you might like to try it.                             *   FILE 906\n//*                                                                 *   FILE 906\n//*           If you are already running an LSPACE command, and     *   FILE 906\n//*           you want to additionally run this command under its   *   FILE 906\n//*           original name of STLSPACE, then edit the STLSPACE     *   FILE 906\n//*           source code and delete the                            *   FILE 906\n//*                                                                 *   FILE 906\n//*           PUNCH ' ALIAS LSPACE '                                *   FILE 906\n//*                                                                 *   FILE 906\n//*           line.                                                 *   FILE 906\n//*                                                                 *   FILE 906\n//*       email:     Stephen.McColley@MVSProgrammer.com             *   FILE 906\n//*                                                                 *   FILE 906\n//*       address:   McColley Systems Software Inc.                 *   FILE 906\n//*                  2288 Marietta Hwy.                             *   FILE 906\n//*                  Suite #62                                      *   FILE 906\n//*                  Canton GA 30144                                *   FILE 906\n//*                  770-704-8123                                   *   FILE 906\n//*                                                                 *   FILE 906\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@INST01": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x07\\x01\\x136_\\x01\\x136_\\x13\\x00\\x00(\\x00'\\x00\\x04\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-12-31T00:00:00", "modifydate": "2013-12-31T13:00:07", "lines": 40, "newlines": 39, "modlines": 4, "user": "T0SM0"}, "text": "//T0SM0A  JOB (4030,37),'ASM  LNK',CLASS=A,MSGCLASS=A,\n//        NOTIFY=&SYSUID,REGION=6M\n//** ----------------------------------------------------------- * **\n//** --   SAMPLE JCL TO ASSEMBLE AND BIND STUCBSCN            -- * **\n//** --   1- CHANGE SYSIN TO POINT TO 'THIS' INSTALL LIBRARY. -- * **\n//** --   2- CHANGE SYSLIB DD'S IF NEEDED THEY MAY BE NAMED   -- * **\n//** --        DIFFERENTLY AT YOUR INSTALLATION.              -- * **\n//** --   3- CHANGE SYSLMOD DD TO POINT TO 'YOUR' APF AUTHORIZED * **\n//** --        DATASET THAT IS IN LINKLIST OR IN ISPLLIB CONCAT. * **\n//** --   4- ENSURE YOU GET AN RC=00 FOR BOTH STEPS.          -- * **\n//** --                                                       -- * **\n//** --         CONTINUE TO @INST02                           -- * **\n//** --                                                       -- * **\n//** ----------------------------------------------------------- * **\n//STEPASM  EXEC PGM=ASMA90,PARM='OBJECT,NODECK,ALIGN'\n//SYSIN    DD   DSN=T0SM0.TSO.STLSPACE(STUCBSCN),  <== SOURCE LIB\n//         DISP=SHR\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB   <== CHANGE AS NEEDED\n//         DD   DISP=SHR,DSN=SYS1.MODGEN   <== CHANGE AS NEEDED\n//         DD   DISP=SHR,DSN=HLA.SASMMAC2  <== CHANGE AS NEEDED\n//*\n//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),\n//         DCB=BUFNO=1,UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DUMMY\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//*\n//STEPLNK  EXEC PGM=IEWBLINK,\n//         COND=(8,LT,STEPASM),\n//         PARM='LIST,XREF,LET,MAP,AMODE=24,RMODE=24,AC=1'\n//SYSLIN   DD   DSN=&&OBJ,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=USER.LINKLIB  <<== OUTPUT LOAD LIBRARY\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD    *\n ENTRY STUCBSCN\n NAME STUCBSCN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@INST02": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x01\\x136_\\x01\\x136_\\x13\\x02\\x00-\\x00'\\x00-\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2013-12-31T00:00:00", "modifydate": "2013-12-31T13:02:00", "lines": 45, "newlines": 39, "modlines": 45, "user": "T0SM0"}, "text": "//T0SM0A  JOB (4030,37),'ASM  LNK',CLASS=A,MSGCLASS=A,\n//        NOTIFY=&SYSUID,REGION=6M\n//** ----------------------------------------------------------- * **\n//** --   SAMPLE JCL TO ASSEMBLE AND BIND STLSPACE            -- * **\n//** --   1- CHANGE SYSIN TO POINT TO 'THIS' INSTALL LIBRARY. -- * **\n//** --   2- CHANGE SYSLIB DD'S IF NEEDED THEY MAY BE NAMED   -- * **\n//** --        DIFFERENTLY AT YOUR INSTALLATION.              -- * **\n//** --   3- CHANGE SYSLMOD DD TO POINT TO 'YOUR' APF AUTHORIZED * **\n//** --        DATASET THAT IS IN LINKLIST OR IN ISPLLIB CONCAT. * **\n//** --        DATASET THAT IS ALSO IN LINKLIST OR IN THE     -- * **\n//** --        ISPLLIB DATASET CONCATENATION.                 -- * **\n//** --   *NOTE* YOU MUST PUT STLSPACE INTO THE SAME LIBRARY  -- * **\n//** --        YOU PUT STUCBSCN INTO (@INST01)                -- * **\n//** --                                                       -- * **\n//** --   4- ENSURE YOU GET AN RC=00 FOR BOTH STEPS.          -- * **\n//** --                                                       -- * **\n//** --         CONTINUE TO @INST03                           -- * **\n//** --                                                       -- * **\n//** ----------------------------------------------------------- * **\n//STEPASM  EXEC PGM=ASMA90,PARM='OBJECT,NODECK,ALIGN'\n//SYSIN    DD   DSN=T0SM0.TSO.STLSPACE(STLSPACE),  <== SOURCE LIB\n//         DISP=SHR\n//SYSLIB   DD   DISP=SHR,DSN=SYS1.MACLIB   <== CHANGE AS NEEDED\n//         DD   DISP=SHR,DSN=SYS1.MODGEN   <== CHANGE AS NEEDED\n//         DD   DISP=SHR,DSN=HLA.SASMMAC2  <== CHANGE AS NEEDED\n//*\n//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(120,120),,,ROUND),\n//         DCB=BUFNO=1,UNIT=VIO\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DUMMY\n//SYSLIN   DD   DSN=&&OBJ,\n//         DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),\n//         DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)\n//*\n//STEPLNK  EXEC PGM=IEWBLINK,\n//         COND=(8,LT,STEPASM),\n//         PARM='LIST,XREF,LET,MAP,AMODE=24,RMODE=24,AC=1'\n//SYSLIN   DD   DSN=&&OBJ,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=USER.LINKLIB   <<== OUTPUT LOAD LIBRARY\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD    *\n ENTRY STLSPACE\n NAME STLSPACE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@INST03": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x002\\x01\\x136_\\x01\\x136_\\x13\\x03\\x00\\x12\\x00\\x12\\x00\\x02\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-12-31T00:00:00", "modifydate": "2013-12-31T13:03:32", "lines": 18, "newlines": 18, "modlines": 2, "user": "T0SM0"}, "text": "\n* ** ----------------------------------------------------------- * **\n* ** --  @INST03 - INSTALL STEP03 - UPDATE IKJTSOXX IN PARMLIB - * **\n* ** --                                                       -- * **\n* ** --                                                       -- * **\n* ** --1- ADD STUCBSCN                                        -- * **\n* ** --      TO THE \"AUTHPGM NAMES( \" LIST IN IKJTSOXX        -- * **\n* ** --                                                       -- * **\n* ** --2- ADD STUCBSCN AND STLSPACE AND LSPACE                -- * **\n* ** --      TO THE \"AUTHTSF NAMES( \" LIST IN IKJTSOXX        -- * **\n* ** --                                                       -- * **\n* ** --3- EITHER IPL, OR USE THE 'PARMLIB CHECK(XX)' AND      -- * **\n* ** --                          'PARMLIB UPDATE(XX)' CMDS    -- * **\n* ** --                          TO APPLY PARMLIB CHANGES.    -- * **\n* ** --                                                       -- * **\n* ** --                                                       -- * **\n* ** --4- CONTINUE WITH @INST04                               -- * **\n* ** ----------------------------------------------------------- * **\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@INST04": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00$\\x01\\x136_\\x01\\x136_\\x13\\x06\\x00!\\x00!\\x00\\x02\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-12-31T00:00:00", "modifydate": "2013-12-31T13:06:24", "lines": 33, "newlines": 33, "modlines": 2, "user": "T0SM0"}, "text": "* ** ----------------------------------------------------------- * **\n* ** --  @INST04  COPY MEMBER STLSTB01 TO A LIBRARY IN YOUR   -- * **\n* ** --           ISPPLIB CONCATENATION.                      -- * **\n* ** --                                                       -- * **\n* ** --  ** BE CAREFULL NOT TO ADD LINE NUMBERS TO THE PANEL, -- * **\n* ** --  ** IN CASE NUMBERS ARE ADDED THERE IS A BACKUP COPY  -- * **\n* ** --  ** IN MEMBER STLSTB0X THAT YOU CAN USE - JUST RENAME -- * **\n* ** --  ** IT TO STLSTB01 WHEN IT IS COPIED.                 -- * **\n* ** --                                                       -- * **\n* ** --                                                       -- * **\n* ** --                                                       -- * **\n* ** --  LOG OFF AND BACK ON AGAIN - THEN TRY OUT             -- * **\n* ** --  USING THE FOLLOWING COMMAND FROM ANY ISPF COMMAND    -- * **\n* ** --  LINE -                                               -- * **\n* ** --                                                       -- * **\n* ** --     \" TSO LSPACE * \"                                  -- * **\n* ** --                                                       -- * **\n* ** --  THIS SHOULD PRODUCE AN ISPF TABLE DISPLAY WITH INFO  -- * **\n* ** --  FOR ALL OF YOUR ONLINE DASD VOLUMES.                 -- * **\n* ** --                                                       -- * **\n* ** --  YOU CAN USE SORT COMMANDS FROM THE PANEL DISPLAY,    -- * **\n* ** --  USING ANY COLUMN HEADING AND AND 'A' FOR ASCENDING   -- * **\n* ** --  OR A 'D' FOR DESCENDING SEQUENCE.                    -- * **\n* ** --                                                       -- * **\n* ** --  TRY USING THIS COMMAND \"SORT LARGEST TRACKS D\"       -- * **\n* ** --  TRY USING THIS COMMAND \"SORT MNT ATR\"                -- * **\n* ** --  TRY USING THIS COMMAND \"SORT VOLSER A\"               -- * **\n* ** --                                                       -- * **\n* ** --                                                       -- * **\n* ** --                                                       -- * **\n* ** --   YOU ARE NOW DONE - ENJOY ! !                        -- * **\n* ** --                                                       -- * **\n* ** ----------------------------------------------------------- * **\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STLSPACE": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x03\\x01\\x136O\\x01\\x136_\\t \\nt\\x06\\x97\\x03\\xdd\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2013-12-30T00:00:00", "modifydate": "2013-12-31T09:20:03", "lines": 2676, "newlines": 1687, "modlines": 989, "user": "T0SM0"}, "text": "         PUNCH ' ENTRY STLSPACE '\n         PUNCH ' ALIAS LSPACE '\n         PUNCH ' INCLUDE SYSLMOD(STUCBSCN)                      '\n         PUNCH ' SETOPT PARM(AMODE=24,RMODE=24,AC=1,REUS=REFR) '\n         MACRO\n**********************************************************************\n* VDELETE      Remove a definition of function variables             *\n**********************************************************************\n&LABEL   VDELETE &NAMES=()         NAME-LIST\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VDELETE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDELETE ',                                          X\n               =C'&NAMES'),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VDEFINE      Define function variables                             *\n**********************************************************************\n&LABEL   VDEFINE &NAMES=(),        NAME-LIST                           X\n               &VARIABLE=,         VARIABLE                            X\n               &FORMAT=CHAR,       FORMAT                              X\n               &LENGTH=8,          LENGTH                              X\n               &OPTIONS=,          OPTIONS                             X\n               &USERDATA=          USER-DATA\n         LCLC  &LEN\n         AIF   ('&LENGTH'(1,1) EQ '(').INDIR\n&LEN     SETC  '=F''&LENGTH.'' '\n         AGO   .INDIRX\n.INDIR   ANOP\n&LEN     SETC '&LENGTH'\n.INDIRX  ANOP\n         LCLC  &VAR\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VDEFINE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n         AIF   ('&VARIABLE' EQ '').NOVAR\n&VAR     SETC  '&VARIABLE'\n         AGO   .ENDVAR\n.NOVAR   ANOP\n&VAR     SETC  '&NAMES'(2,K'&NAMES-2)\n.ENDVAR  ANOP\n         AIF   ('&OPTIONS' EQ '').NOOPT\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDEFINE ',                                          X\n               =C'&NAMES',                                             X\n               &VAR,                                                   X\n               =C'&FORMAT ',                                           X\n               &LEN,                                                   X\n               =C'(&OPTIONS)'),                                        X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.NOOPT   ANOP\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDEFINE ',                                          X\n               =C'&NAMES',                                             X\n               &VAR,                                                   X\n               =C'&FORMAT ',                                           X\n               &LEN.),                                                 X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBTOP        Set the row pointer to the top                        *\n**********************************************************************\n&LABEL   TBTOP &TABLE=             TABLE-NAME\n         LCLC  &ITABLE\n         AIF   ('&TABLE'(1,1) NE '@').TABLE\n&ITABLE  SETC  '&TABLE'(2,K'&FIELDS-1)\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBTOP ',                                            X\n               &ITABLE),                                               X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TABLE   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBTOP ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBTOP        Set the row pointer to the top                        *\n**********************************************************************\n&LABEL   TBTOP &TABLE=             TABLE-NAME\n         LCLC  &ITABLE\n         AIF   ('&TABLE'(1,1) NE '@').TABLE\n&ITABLE  SETC  '&TABLE'(2,K'&FIELDS-1)\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBTOP ',                                            X\n               &ITABLE),                                               X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TABLE   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBTOP ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSORT       Sort a table                                          *\n**********************************************************************\n&LABEL   TBSORT &TABLE=,           TABLE-NAME                          X\n               &FIELDS=()          SORT-LIST - FIELD,B|C|N,A|D\n         LCLC  &IFIELDS,&ITABLE\n         AIF   ('&TABLE'(1,1) NE '@').TABLE\n&ITABLE  SETC  '&TABLE'(2,K'&TABLE-1)\n         AIF   ('&FIELDS'(1,1) NE '@').TIFD\n&IFIELDS SETC  '&FIELDS'(2,K'&FIELDS-1)\n.TIFI    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               &ITABLE,                                                X\n               &IFIELDS),                                              X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TIFD    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               &ITABLE,                                                X\n               =C'&FIELDS'),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TABLE   ANOP\n         AIF   ('&FIELDS'(1,1) NE '@').TDFD\n&IFIELDS SETC  '&FIELDS'(2,K'&FIELDS-1)\n.TDFI    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               =C'&TABLE ',                                            X\n               &IFIELDS),                                              X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TDFD    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&FIELDS'),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBDISPL      Display table information                             *\n**********************************************************************\n&LABEL   TBDISPL &TABLE=,          TABLE-NAME                          X\n               &PANEL=,            PANEL-NAME                          X\n               &MESSAGE=,          MESSAGE-ID                          X\n               &CURSOR=,           FIELD-NAME                          X\n               &CSRROW=,           TABLE-ROW-NUMBER                    X\n               &CSRPOS=,           CURSOR-POSITION                     X\n               &AUTOSEL=NO,        AUTOSEL                             X\n               &POSITION=,         CRP-NAME                            X\n               &ROWID=,            ROWID-NAME                          X\n               &MSGLOC=,           MESSAGE-FIELD-NAME                  X\n               &LC=()              LINE-COMMAND\n         AIF   ('&LC'(1,1) EQ '(').OKLC\n         MNOTE 8,'TBDISPLM LC=&LC - MUST BE IN PARENTHESIS'\n.OKLC    ANOP\n         LCLA  &CNT\n         LCLC  &NLLBL\n         LCLC  &ENDLBL,&DSP1LBL,&DSP2LBL,&NPLBL,&PRCLBL,&LCLBL\n         LCLC  &CMP,&LBL,&ID,&SEL\n         AIF   ('&POSITION' NE '').POSITION\n&POSTION SETC  '&TABLE'.'CRP'\n.POSITION ANOP\n&DSP1LBL SETC  'DSP1'.'&SYSNDX'\n&DSP2LBL SETC  'DSP2'.'&SYSNDX'\n&ENDLBL  SETC  'END'.'&SYSNDX'\n&PRCLBL  SETC  'PRC'.'&SYSNDX'\n&LCLBL   SETC  'LC'.'&SYSNDX'\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBDISPL ',                                          X\n               =C'&TABLE ',                                            X\n               =C'&PANEL ',                                            X\n               =C'&MESSAGE ',                                          X\n               =C'&CURSOR ',                                           X\n               =C'&CSRROW ',                                           X\n               =C'&CSRPOS ',                                           X\n               =C'&AUTOSEL ',                                          X\n               =C'&POSITION ',                                         X\n               =C'&ROWID ',                                            X\n               =C'&MSGLOC '),                                          X\n               VL,MF=(E,W_CL512)\n         C     R15,=F'8'           End ?\n         BNL   &ENDLBL             . Yes\n&PRCLBL  EQU *\n         AIF   ('&LC' NE '()').LC\n         B     &LABEL              Redisplay\n         AGO   .ENDLBL\n.LC      ANOP\n         MVC   &TABLE.SELS,ZTDSELS\n&LCLBL   EQU   *\n&CNT     SETA  0\n&CNT     SETA  &CNT+1\n&SEL     SETC  '&LC(&CNT)'\n.NEXTLC  ANOP\n&CNT     SETA  &CNT+1\n         AIF   (&CNT GT N'&LC).ENDLC\n&CMP     SETC  '&LC(&CNT)'\n&NLLBL   SETC  'N'.'&CMP'.'&SYSNDX'\n&CNT     SETA  &CNT+1\n&LBL     SETC  '&LC(&CNT)'\n         CLC   &SEL,=C'&CMP'       Match ?\n         BNE   &NLLBL              . No\n         CONTROL DISPLAY,SAVE      Save display environment\n         CALL  &LBL                &LBL\n         CONTROL DISPLAY,RESTORE   Restore display environment\n         B     &DSP1LBL\n&NLLBL   EQU *\n         AGO   .NEXTLC\n.ENDLC   ANOP\n         CLI   &SEL,C' '           Blank ?\n         BE    &DSP2LBL            . Yes\n&DSP1LBL MVI   &SEL,C' '           Clear line command\n         CLC   &TABLE.SELS,=CL4'0001'\n         BNH   &LABEL\n&DSP2LBL L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBDISPL ',                                          X\n               =C'&TABLE ',                                            X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C'&POSITION ',                                         X\n               =C' ',                                                  X\n               =C' '),                                                 X\n               VL,MF=(E,W_CL512)\n         C     R15,=F'8'           End ?\n         BNL   &ENDLBL             . Yes\n         B     &PRCLBL             Reprocess selections\n.ENDLBL  ANOP\n&ENDLBL  EQU   *                   End/Return\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBCREATE     Create a new table                                    *\n**********************************************************************\n&LABEL   TBCREATE &TABLE=,         TABLE-NAME                          X\n               &KEYS=(),           KEY-NAME-LIST                       X\n               &NAMES=(),          NAME-LIST                           X\n               &WRITE=NOWRITE,     WRITE/NOWRITE                       X\n               &REPLACE=REPLACE,   REPLACE                             X\n               &LIBRARY=,          LIBRARY                             X\n               &SHARE=             SHARE\n         AIF   ('&KEYS'(1,1) EQ '(').OKKEYS\n         MNOTE 8,'TBCREATE KEYS=&KEYS - MUST BE IN PARENTHESIS'\n.OKKEYS  ANOP\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'TBCREATE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBCREATE ',                                         X\n               =C'&TABLE ',                                            X\n               =C'&KEYS',                                              X\n               =C'&NAMES',                                             X\n               =C'&WRITE ',                                            X\n               =C'&REPLACE ',                                          X\n               =C'&LIBRARY ',                                          X\n               =C'&SHARE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBCLOSE      Close and save a table                                *\n**********************************************************************\n&LABEL   TBCLOSE &TABLE=           TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBCLOSE ',                                          X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBADD        Add a row to a table                                  *\n**********************************************************************\n&LABEL   TBADD &TABLE=,            TABLE-NAME                          X\n               &SAVE=(),           SAVE-NAME-LIST                      X\n               &ORDER=,            ORDER                               X\n               &MULT=1             NUMBER OF ROWS\n         AIF   ('&SAVE'(1,1) EQ '(').OKSAVE\n         MNOTE 8,'TBADD SAVE=&SAVE - MUST BE IN PARENTHESIS'\n         ISPFHELP TBADD\n         AGO   .MEND\n.OKSAVE ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBADD ',                                            X\n               =C'&TABLE ',                                            X\n               =C'&SAVE',                                              X\n               =C'&ORDER ',                                            X\n               =F'&MULT.'),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* ISPFVARS     Define ISPF Variables                                 *\n**********************************************************************\n         ISPFVARS\n*\n**       Define ISPF System Variables\n*\n         CNOP  0,4                 Fullword alignment\nW_D      DS    D                   Doubleword workarea\nW_F      DS    F                   Fullword workarea\nW_CL512  DS    CL512               512 byte general workarea\nW_H      DS    H                   Halfword workarea\nISPLINK@ DS    F                   ISPLINK address\nZAPPLID  DS    CL008               ISPF Application Identifier\nZDATE    DS    CL008               ISPF Date\nZDATEF   DS    CL008               ISPF Date\nZDATEFD  DS    CL008               ISPF Date\nZDAY     DS    CL002               ISPF Day (dd)\nZJDATE   DS    CL006               ISPF Julian Date (yy.ddd)\nZLANG    DS    CL008               ISPF Session Language\nZLOGO    DS    CL003               ISPF Logo (YES/NO)\nZMONTH   DS    CL002               ISPF Month (mm)\nZPLACE   DS    CL007               ISPF Command Line Placement\nZPREFIX  DS    CL008               ISPF Prefix\nZSTDYEAR DS    CL004               ISPF Year (yyyy)\nZSYSID   DS    CL008               ISPF System Name\nZTDSELS  DS    CL004               ISPF Selections\nZTDTOP   DS    CL006               ISPF CRP of most recent display\nZTIME    DS    CL005               ISPF Time (hh:mm)\nZUSER    DS    CL008               ISPF User Identification\nZYEAR    DS    CL002               ISPF Year (yy)\n         MEND\n         MACRO\n**********************************************************************\n* ISPFTERM     Terminate ISPF Environment                            *\n**********************************************************************\n&LABEL   ISPFTERM\n&LABEL   VDELETE NAMES=(*)         Delete all ISPF variables\n         DELETE EP=ISPLINK         Delete current ISPLINK module\n         MEND\n         MACRO\n**********************************************************************\n* ISPFINIT     Initialize ISPF Environment                           *\n**********************************************************************\n&LABEL   ISPFINIT\n*\n**       Validate ISPF Environment\n*\n&LABEL   LOAD  EP=ISPQRY,ERRET=IIEXIT Load current ISPQRY module\n         LR    R15,R0              ISPQRY address\n         BALR  R14,R15             Invoke ISPQRY\n         LTR   15,15               ISPF environment ?\n         BNZ   IIEXIT              . No\n         DELETE EP=ISPQRY          Delete current ISPQRY module\n*\n**       Load ISPF Interface Module (ISPLINK)\n*\n         LOAD  EP=ISPLINK,ERRET=IIEXIT Load current ISPLINK module\n         ST    R0,ISPLINK@         Save ISPLINK address\n*\n**       Define ISPF System Variables\n*\n         VDEFINE NAMES=(ZAPPLID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDATE),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDATEF),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDATEFD),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDAY),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(ZJDATE),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZLANG),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZLOGO),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZMONTH),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(ZPLACE),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(ZPREFIX),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZSTDYEAR),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZSYSID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZTDSELS),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZTDTOP),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZTIME),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZUSER),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZYEAR),FORMAT=CHAR,LENGTH=2\nIIEXIT   EQU   *\n         MEND\n         MACRO\n**********************************************************************\n* CONTROL      Set processing modes                                  *\n**********************************************************************\n&LABEL   CONTROL &CTL1,&CTL2,&CTL3,&CTL4\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'CONTROL ',                                          X\n               =C'&CTL1 ',                                             X\n               =C'&CTL2 ',                                             X\n               =C'&CTL3 ',                                             X\n               =C'&CTL4 '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n&NAME1   #ZERO &A1\n&NAME1   XC     &A1,&A1\n         MEND\n         MACRO\n&NAME1   #BLANK &A1\n&NAME1   MVI    &A1,C' '\n         MVC    &A1+1(L'&A1-1),&A1\n         MEND\n          MACRO\n**********************************************************************\n*        Macro Name:     $EXIT                                       *\n*        Operation:      Standard Linkage - Exit                     *\n*        Usage:                                                      *\n**********************************************************************\n*                                                                    *\n* Syntax:                                                            *\n* Name     #EXIT     Keywords...                                     *\n*                                                                    *\n* Name     Module name                                               *\n*          Values:   Any valid module name                           *\n*          Default:  NULL                                            *\n*                                                                    *\n* Keywords:                                                          *\n* LTORG    Literal pool at end of module                             *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* RC       A literal value for a return code - or - if unspecified   *\n*          it will default to use the value in R15 - or - a          *\n*          register value in parenthesis is also accepted.           *\n*                                                                    *\n*           rc=7   sets rc=7                                         *\n*           rc=(7) sets rc= value in r7                              *\n*           rc=null defaults to rc= value in r15                     *\n* ** note **                                                         *\n*   r2 is used as a work reg, and may not be used to specify the     *\n*   return code value.                                               *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n* #EXIT        Standard Linkage - Exit                               *\n**********************************************************************\n&LABEL   #EXIT &LTORG=YES,&RC=     LITERAL POOL\n         GBLC  &EXRC               RETURN CODE\n         AIF   ('&RC' NE '').LABEL1\n&EXRC    SETC  '(R15)'\n         AGO   .SHOWLST\n.LABEL1  ANOP\n&EXRC    SETC  '&RC'\n.SHOWLST ANOP\n         MNOTE *,'#EXIT  Utilizing the following parameters:'\n         MNOTE *,'       LTORG=&LTORG'\n         MNOTE *,'       RC=&EXRC    '\n         GBLC  &GDWAL              Dynamic workarea length\n         GBLC  &GDWAR              Dynamic workarea register\n         GBLC  &GSAVE              Save registers\n         GBLC  &GSAVEAREA          Savearea\n.**********************************************************************\n.*       Return Code                                                  *\n.**********************************************************************\n         AIF   ('&LABEL' EQ '').NOLABL\n&LABEL   EQU   *                   EXIT\n.NOLABL  ANOP\n.**********************************************************************\n.*       TEST FOR INVALID RC REGISTER VALUES.                         *\n.**********************************************************************\n         AIF   ('&EXRC'(1,1) NE '(').NORCREG\n&REGRC   SETC  '&EXRC'(2,K'&EXRC-2)\n         AIF   ('&REGRC' EQ '2').BADRC\n         AIF   ('&REGRC' EQ 'R2').BADRC\n         AIF   ('&REGRC' EQ '1').BADRC\n         AIF   ('&REGRC' EQ 'R1').BADRC\n         AIF   ('&REGRC' EQ '0').BADRC\n         AIF   ('&REGRC' EQ 'R0').BADRC\n         AIF   ('&REGRC' EQ '13').BADRC\n         AIF   ('&REGRC' EQ 'R13').BADRC\n         AGO   .NORCREG\n.BADRC   MNOTE 12,' INVALID REGISTER &REGRC USED FOR RETURN CODE '\n         MONTE 12,' SPECIFY R3 THROUGH R12, OR R14, OR R15 INSTEAD.'\n         MEXIT\n.NORCREG ANOP\n.**********************************************************************\n.*       Dynamic Workarea                                             *\n.**********************************************************************\n         AIF   ('&GDWAL' EQ '').DWANO\n         PUSH  PRINT\n.*       PRINT OFF\n         MNOTE *,'  STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL (WORK AX\n               REA).'\n         LR    R2,R15             SAVE ORIGINAL RETURN CODE VALUE\n         STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL  RELEASE WORKAREA\n         LR    R15,R2             RESTORE ORIGINAL RETURN CODE VALUE\n         POP   PRINT\n         AGO   .DWAEND\n.DWANO   ANOP\n         AGO   .DWAEND\n.DWAEND  ANOP\n.**********************************************************************\n.*       SAVEAREA                                                     *\n.**********************************************************************\n         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X\n               ('&GSAVEAREA' EQ 'YES').SAYES\n         MNOTE 8,'#ENTRY INVALID SAVEAREA=&GSAVEAREA - YES/NO'\n         MEXIT\n.SAYES   ANOP\n         LR    R1,R13              SAVEAREA ADDRESS\n         L     R13,4(R13)          RESTORE PREVIOUS SAVEAREA\n         MNOTE *,'  STORAGE RELEASE,ADDR=(R1),LENGTH=72 (SAVE AREA).'\n         PUSH  PRINT\n         PRINT OFF\n         LR    R2,R15             SAVE ORIGINAL RETURN CODE VALUE\n         STORAGE RELEASE,ADDR=(R1),LENGTH=72  RELEASE SAVEAREA\n         LR    R15,R2             RESTORE ORIGINAL RETURN CODE VALUE\n         POP   PRINT\n         AGO   .SAEND\n.SANO    ANOP\n         XC    0(72,R13),0(R13)    Clear current savearea\n         SH    R13,=H'72'          Adjust savearea\n         AGO   .SAEND\n.SAEND   ANOP\n.**********************************************************************\n.*       Save Registers                                               *\n.**********************************************************************\n         AIF   ('&GSAVE' EQ 'YES').SAVEYES,                            X\n               ('&GSAVE' EQ 'NO').SAVENO\n         MNOTE 8,'#EXIT Invalid SAVE=&GSAVE - YES/NO'\n         MEXIT\n\n\n.SAVEYES ANOP\n         AIF   ('&EXRC'(1,1) NE '(').LABELC\n&REG     SETC  '&EXRC'(2,K'&EXRC-2)\n         LR    R15,&REG                  SET RETURN CODE\n         AGO   .LABELA\n.LABELC  AIF   ('&EXRC' EQ '').LABELA\n         LA    R15,&EXRC.(0,0)    SET RETURN CODE\n.LABELA  ANOP\n         RETURN (14,12),RC=(15)    RETURN CONTROL\n         AGO   .SAVEEND\n\n\n.SAVENO  ANOP\n         AIF   ('&EXRC'(1,1) NE '(').LABELD\n&REG     SETC  '&EXRC'(2,K'&EXRC-2)\n         LR    R15,&REG              SET RETURN CODE\n         AGO   .RCASIS1\n.LABELD  AIF   ('&EXRC' EQ '').LABELS\n         AGO   .RCASIS1\n.LABELS  ANOP\n         LA    R15,&EXRC.(0,0)       SET RETURN CODE\n.RCASIS1 ANOP\n         BR    R14                 Return Control\n\n\n.SAVEEND ANOP\n.**********************************************************************\n.*       LTORG                                                        *\n.**********************************************************************\n         AIF   ('&LTORG' EQ 'YES').LTORGYES,                           X\n               ('&LTORG' EQ 'NO').LTORGNO\n         MNOTE 8,'#EXIT Invalid LTORG=&LTORG - YES/NO'\n         MEXIT\n.LTORGYES ANOP\n         LTORG                     Literal pool\n.LTORGNO ANOP\n         MEND\n          MACRO\n**********************************************************************\n*                                                                    *\n* Usage:                                                             *\n* Name     #ENTRY    Keywords...                                     *\n*                                                                    *\n* Name     Module name                                               *\n*          Values:   Any valid module name                           *\n*          Default:  NULL                                            *\n*                                                                    *\n* Keywords:                                                          *\n* AMODE    Addressing mode                                           *\n*          Values:   24/31/ANY                                       *\n*          Default:  24                                              *\n*                                                                    *\n* BASE     Base registers                                            *\n*          Values:   (Rxx,Ryy,Rzz...) - Any valid registers          *\n*          Default:  (R12)                                           *\n*                                                                    *\n* DWA      Dynamic Workarea                                          *\n*          Values:   (ddd,lll,rrr,pp)                                *\n*                    ddd  - Dynamic workarea dummy section (DSECT)   *\n*                    lll  - Dynamic workarea size                    *\n*                    rrr  - Dynamic workarea base register           *\n*                    pp   - Dynamic workarea padding value in hex    *\n*          Default:  NULL - Dynamic workarea not used                *\n*                                                                    *\n* LOC      Location of getmained savearea/workarea                   *\n*          Values:   BELOW/ANY/RES                                   *\n*          Default:  RES                                             *\n*                                                                    *\n* MODID    Module identification                                     *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* RMODE    Residence mode                                            *\n*          Values:   24/ANY                                          *\n*          Default:  24                                              *\n*                                                                    *\n* SAVE     Save/restore registers at entry/exit                      *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* SAVEAREA Acquire savearea                                          *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* SPLEVEL  Macro level                                               *\n*          Values:   0/1/2/3/4/5/6                                   *\n*          Default:  0 - Use default macro level                     *\n*                                                                    *\n* SWA      Static Workarea                                           *\n*          Values:   (ccc,rrr)                                       *\n*                    ccc  - Static workarea control section (CSECT)  *\n*                    rrr  - Static workarea base register            *\n*          Default:  NULL - Static workarea not used                 *\n*                                                                    *\n**********************************************************************\n* #ENTRY       Standard Linkage - Entry                              *\n**********************************************************************\n&LABEL   #ENTRY &AMODE=31,         Addressing mode                     X\n               &RMODE=ANY,         Residence mode                      X\n               &BASE=(R12),        Base Registers                      X\n               &DWA=,              Dynamic workarea                    X\n               &LOC=RES,           LOCATION OF SAVEAREA/WORKAREA       X\n               &MODID=YES,         Module identification               X\n               &PARMS=0,           Parameters                          X\n               &SAVE=YES,          Save/restore regs at entry/exit     X\n               &SAVEAREA=YES,      Savearea                            X\n               &SPLEVEL=0,         Macro level                         X\n               &SUBPOOL=0,         Subpool of savearea/workarea        X\n               &SWA=               Static workarea\n         GBLA  &COMMON             Common Macros Level\n&COMMON  SETA  1                   Common Macros Level\n         MNOTE *,'#ENTRY Utilizing the following parameters:'\n         MNOTE *,'       AMODE=&AMODE'\n         MNOTE *,'       BASE=&BASE'\n         MNOTE *,'       DWA=&DWA'\n         MNOTE *,'       LOC=&LOC'\n         MNOTE *,'       MODID=&MODID'\n         MNOTE *,'       PARMS=&PARMS'\n         MNOTE *,'       RMODE=&RMODE'\n         MNOTE *,'       SAVE=&SAVE'\n         MNOTE *,'       SAVEAREA=&SAVEAREA'\n         MNOTE *,'       SPLEVEL=&SPLEVEL'\n         MNOTE *,'       SUBPOOL=&SUBPOOL'\n         MNOTE *,'       SWA=&SWA'\n         GBLC  &GAMODE             Addressing Mode\n         GBLC  &GCSECT             Control Section\n         GBLC  &GDWAL              Dynamic workarea length\n         GBLC  &GSAVE              Save registers\n         GBLC  &GSAVEAREA          Savearea\n         GBLC  &GDWAN              Dynamic workarea name\n         GBLC  &GDWAR              Dynamic workarea register\n         GBLC  &GSPLEVEL           Macro level\n         GBLC  &SYSSPLV            Macro level\n         GBLC  &GSUBPOOL           Subpool of savearea/workarea\n         GBLC  &GRMODE             Residence Mode\n         GBLC  &GSWAN              Static workarea name\n         GBLC  &GSWAR              Static workarea register\n         LCLA  &BRC                Base register count\n         LCLC  &BC                 Base register current\n         LCLC  &BP                 Base register Caller's\n         LCLC  &BRU                Base register using\n         LCLC  &DWALBL             Dynamic workarea label\n&GAMODE  SETC  '&AMODE'            Addressing Mode\n&GCSECT  SETC  '&LABEL'            Control Section\n&GRMODE  SETC  '&RMODE'            Residence Mode\n&GSAVE   SETC  '&SAVE'             Save registers\n&GSAVEAREA SETC '&SAVEAREA'        Savearea\n&GSPLEVEL SETC '&SPLEVEL'          Macro level\n&GSUBPOOL SETC  '&SUBPOOL'         Subpool of savearea/workarea\n         AIF   ('&LOC' EQ 'BELOW').LOCOK,                              X\n               ('&LOC' EQ 'ANY').LOCOK,                                X\n               ('&LOC' EQ 'RES').LOCOK\n         MNOTE 8,'#ENTRY Invalid LOC=&LOC - BELOW/ANY/RES/EXPLICIT'\n         MEXIT\n.LOCOK   ANOP\n&GCSECT  CSECT                     Control Section\n.**********************************************************************\n.*       AMODE                                                        *\n.**********************************************************************\n         AIF   ('&AMODE' EQ '24').AMODEOK,                             X\n               ('&AMODE' EQ '31').AMODEOK,                             X\n               ('&AMODE' EQ 'ANY').AMODEOK\n         MNOTE 8,'#ENTRY Invalid AMODE=&AMODE - 24/31/ANY'\n         MEXIT\n.AMODEOK ANOP\n&GCSECT  AMODE &GAMODE             Addressing Mode\n         AGO   .AMODEEND\n.AMODENO ANOP\n         AGO   .AMODEEND\n.AMODEEND ANOP\n.**********************************************************************\n.*       RMODE                                                        *\n.**********************************************************************\n         AIF   ('&RMODE' EQ '24').RMODEOK,                             X\n               ('&RMODE' EQ 'ANY').RMODEOK\n         MNOTE 8,'#ENTRY Invalid RMODE=&RMODE - 24/ANY'\n         MEXIT\n.RMODEOK ANOP\n&GCSECT  RMODE &GRMODE             Residence Mode\n         AGO   .RMODEEND\n.RMODENO ANOP\n         AGO   .RMODEEND\n.RMODEEND ANOP\n.**********************************************************************\n.*       SPLEVEL                                                      *\n.**********************************************************************\n         AIF   ('&SPLEVEL' EQ '0').SPLVLNO,                            X\n               ('&SPLEVEL' EQ '1').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '2').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '3').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '4').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '5').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '6').SPLVLYES\n         MNOTE 8,'#ENTRY Invalid SPLEVEL=&SPLEVEL - 0/1/2/3/4/5/6'\n         MEXIT\n.SPLVLYES ANOP\n         SPLEVEL SET=&SPLEVEL      Set macro level\n         AGO   .SPLVLEND\n.SPLVLNO ANOP\n         SPLEVEL SET               Use default macro level\n         AGO   .SPLVLEND\n.SPLVLEND ANOP\n.**********************************************************************\n.*       Module identification                                        *\n.**********************************************************************\n         AIF   ('&MODID' EQ 'NO').MODIDNO,                             X\n               ('&MODID' EQ 'YES').MODIDYES\n         MNOTE 8,'#ENTRY Invalid MODID=&MODID - YES/NO'\n         MEXIT\n.MODIDYES ANOP\n         J     OVRIDENT            BRANCH AROUND MODULE IDENTIFICATION\n.*       B     4+1+24+3(0,R15)     BRANCH AROUND MODULE IDENTIFICATION\n         DC    AL1(24)             Module identification length\n         DC    CL8'&GCSECT'        CSECT name\n         DC    CL8'&SYSDATE'       Assembly date\n         DC    CL8'&SYSTIME'       Assembly time\n         DC    AL3(0)              Filler\nOVRIDENT DS    0H\n         AGO   .MODIDEND\n.MODIDNO ANOP\n         AGO   .MODIDEND\n.MODIDEND ANOP\n.**********************************************************************\n.*       Register / Savearea Equates                                  *\n.**********************************************************************\n         AIF   (D'R0).REGEQUNO\nA0       EQU    0                  Access register\nA1       EQU    1                  Access register\nA2       EQU    2                  Access register\nA3       EQU    3                  Access register\nA4       EQU    4                  Access register\nA5       EQU    5                  Access register\nA6       EQU    6                  Access register\nA7       EQU    7                  Access register\nA8       EQU    8                  Access register\nA9       EQU    9                  Access register\nA10      EQU   10                  Access register\nA11      EQU   11                  Access register\nA12      EQU   12                  Access register\nA13      EQU   13                  Access register\nA14      EQU   14                  Access register\nA15      EQU   15                  Access register\nC0       EQU    0                  Control register\nC1       EQU    1                  Control register\nC2       EQU    2                  Control register\nC3       EQU    3                  Control register\nC4       EQU    4                  Control register\nC5       EQU    5                  Control register\nC6       EQU    6                  Control register\nC7       EQU    7                  Control register\nC8       EQU    8                  Control register\nC9       EQU    9                  Control register\nC10      EQU   10                  Control register\nC11      EQU   11                  Control register\nC12      EQU   12                  Control register\nC13      EQU   13                  Control register\nC14      EQU   14                  Control register\nC15      EQU   15                  Control register\nF0       EQU    0                  Floating point register\nF1       EQU    2                  Floating point register\nF2       EQU    4                  Floating point register\nF3       EQU    6                  Floating point register\nR0       EQU    0                  General register - System\nR1       EQU    1                  General register - System\nR2       EQU    2                  General register - System\nR3       EQU    3                  General register\nR4       EQU    4                  General register\nR5       EQU    5                  General register\nR6       EQU    6                  General register\nR7       EQU    7                  General register\nR8       EQU    8                  General register\nR9       EQU    9                  General register\nR10      EQU   10                  General register\nR11      EQU   11                  General register\nR12      EQU   12                  General register\nR13      EQU   13                  General register - Savearea\nR14      EQU   14                  General register - System\nR15      EQU   15                  General register - System\nSAVEPL1  EQU    0                  Savearea PL1\nSAVEPREV EQU    4                  Savearea Previous (from caller)\nSAVENEXT EQU    8                  Savearea Next (from target)\nSAVER14  EQU   12                  Savearea R14 (Return address)\nSAVER15  EQU   16                  Savearea R15 (Entry address)\nSAVER0   EQU   20                  Savearea R0\nSAVER1   EQU   24                  Savearea R1\nSAVER2   EQU   28                  Savearea R2\nSAVER3   EQU   32                  Savearea R3\nSAVER4   EQU   36                  Savearea R4\nSAVER5   EQU   40                  Savearea R5\nSAVER6   EQU   44                  Savearea R6\nSAVER7   EQU   48                  Savearea R7\nSAVER8   EQU   52                  Savearea R8\nSAVER9   EQU   56                  Savearea R9\nSAVER10  EQU   60                  Savearea R10\nSAVER11  EQU   64                  Savearea R11\nSAVER12  EQU   68                  Savearea R12\n&GREGEQU SETA  1\n.REGEQUNO ANOP\n.**********************************************************************\n.*       Save Registers                                               *\n.**********************************************************************\n         AIF   ('&GSAVE' EQ 'YES').SAVEYES,                            X\n               ('&GSAVE' EQ 'NO').SAVENO\n         MNOTE 8,'#ENTRY Invalid SAVE=&GSAVE - YES/NO'\n         MEXIT\n.SAVEYES ANOP\n         SAVE  (14,12)             Save caller's registers\n         AGO   .SAVEEND\n.SAVENO  ANOP\n.SAVEEND ANOP\n.**********************************************************************\n.*       Base Register(s)                                             *\n.**********************************************************************\n         AIF   ('&BASE' EQ 'NOBASE').NOBASE\n         AIF   (T'&BASE NE 'O').BASEOK\n         MNOTE 8,'#ENTRY Missing Required Keyword BASE'\n         MEXIT\n.**** ELSE BASE=0 = NOBASE\n         AGO   .NOBASE\n.BASEOK  ANOP\n         LR    &BASE(1),R15        Load base register\n&BRC     SETA 1\n.BASENXT ANOP\n         AIF   (&BRC EQ N'&BASE).BASEEND\n&BRC     SETA  &BRC+1              Increment base register count\n&BC      SETC  '&BASE(&BRC)'       Current base register\n&BP      SETC  '&BASE(&BRC-1)'     Caller's base register\n         LA    &BC,4095(,&BP)      Load base register\n         LA    &BC,1(,&BC)         Load base register\n         AGO   .BASENXT\n.BASEEND ANOP\n&BRU     SETC  '&BASE'\n         AIF   ('&BASE'(1,1) NE '(').USING1\n&BRU     SETC  '&BASE'(2,K'&BASE-2)\n.USING1  ANOP\n         USING &LABEL,&BRU         Reference control section\n.NOBASE  ANOP\n.**********************************************************************\n.*       Savearea                                                     *\n.**********************************************************************\n         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X\n               ('&GSAVEAREA' EQ 'YES').SAYES\n         MNOTE 8,'#ENTRY Invalid SAVEAREA=&GSAVEAREA - YES/NO'\n         MEXIT\n.SAYES   ANOP\n         LR    R3,R0               Caller's R0\n         LR    R4,R1               Caller's R1\n         MNOTE *,'  STORAGE OBTAIN,LENGTH=72,LOC=&LOC    GETMAIN'\n         PUSH  PRINT\n         PRINT OFF\n         STORAGE OBTAIN,LENGTH=72,LOC=&LOC OBTAIN SAVEAREA\n         POP   PRINT\n         ST    R13,SAVEPREV(,R1)   Savearea previous\n         ST    R1,SAVENEXT(,R13)   Savearea next\n         LR    R13,R1              Reference savearea\n         LR    R0,R3               Caller's R0\n         LR    R1,R4               Caller's R1\n         AGO   .SAEND\n.SANO    ANOP\n         LA    R15,72(,R13)        Acquire savearea\n         ST    R13,SAVEPREV(,R15)  Savearea previous\n         ST    R15,SAVENEXT(,R13)  Savearea next\n         LR    R13,R15             Reference savearea\n         AGO   .SAEND\n.SAEND   ANOP\n.**********************************************************************\n.*       Dynamic Workarea                                             *\n.**********************************************************************\n         AIF   (N'&DWA EQ 0).DWANO\n         AIF   (N'&DWA EQ 3).PADDFLT\n         AIF   (N'&DWA EQ 4).DWAOK\n         MNOTE 8,'#ENTRY Invalid DWA=&DWA'\n         MNOTE 8,'Syntax: DWA=(DSECT_NAME,LENGTH,REG)'\n         MEXIT\n.DWAOK   ANOP\n&GDWAP   SETC  '&DWA(4)'           DYNAMIC WORKAREA PAD VALUE\n         AGO   .PADSET\n.PADDFLT ANOP\n&GDWAP   SETC  '00'                DEFAULT PAD VALUE IS HEX 00\n.PADSET  ANOP\n&GDWAN   SETC  '&DWA(1)'           DYNAMIC WORKAREA NAME\n&GDWAL   SETC  '&DWA(2)'           Dynamic workarea length\n&GDWAR   SETC  '&DWA(3)'           Dynamic workarea register\n&DWALBL  SETC  'DWA'.'&SYSNDX'     Dynamic workarea label\n&DWALBL2 SETC  'DW2'.'&SYSNDX'     Dynamic workarea label\n         LR    R3,R0               Caller's R0\n         LR    R4,R1               Caller's R1\n         MNOTE *,'  STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&LOC  GETMAIN'\n         PUSH  PRINT\n         PRINT OFF\n         STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&LOC OBTAIN WORKAREA\n         POP   PRINT\n         LR    &GDWAR,R1           Set Dynamic workarea base\n         USING &GDWAN,&GDWAR       Reference Dynamic workarea\n         LR    R14,&GDWAR          Dynamic workare address\n         LRL   R15,&DWALBL2        DYNAMIC WORKAREA LENGTH\n         J     &DWALBL\n&DWALBL2 DC    A(&GDWAL)\n&DWALBL  EQU   *\nGDWCLR   EQU   *\n         SR    R0,R0               ZERO THE FROM LENGTH\n         LA    R1,(X'&GDWAP')(R0,R0) SET FILL CHAR\n*        IC    R1,=X'00'           SET FILL CHAR\n         SLL   R1,24               SHIFT LEFT (0 LENGTH)\n*        ICM   R14,B'1000',=X'&GDWAP'\n         MVCL  R14,R0              CLEAR WITH MVCL\n         LR    R14,&GDWAR          RESTORE DYNAM WORKAREA ADDR\n         LR    R0,R3               CALLER'S R0\n         LR    R1,R4               CALLER'S R1\n         AGO   .DWAEND\n.DWANO   ANOP\n&GDWAN   SETC  ''                  DYNAMIC WORKAREA NAME\n&GDWAL   SETC  ''                  DYNAMIC WORKAREA LENGTH\n&GDWAR   SETC  ''                  Dynamic workarea register\n         AGO   .DWAEND\n.DWAEND  ANOP\n.**********************************************************************\n.*       Static Workarea                                              *\n.**********************************************************************\n         AIF   (N'&SWA EQ 0).SWANO\n         AIF   (N'&SWA EQ 2).SWAOK\n         MNOTE 8,'#ENTRY Invalid SWA=&SWA'\n         MNOTE 8,'Syntax: SWA=(CSECT_NAME,REG)'\n         MEXIT\n.SWAOK   ANOP\n&GSWAN   SETC  '&SWA(1)'           Static workarea name\n&GSWAR   SETC  '&SWA(2)'           Static workarea register\n.*       L     &GSWAR,=A(&GSWAN)   SET STATIC WORKAREA BASE\n         LARL  &GSWAR,&GSWAN       SET STATIC WORKAREA BASE\n         USING &GSWAN,&GSWAR       Reference static workarea\n         AGO   .SWAEND\n.SWANO   ANOP\n&GSWAN   SETC  ''                  Static workarea name\n&GSWAR   SETC  ''                  Static workarea register\n         AGO   .SWAEND\n.SWAEND  ANOP\n         AGO   .MEND\n.MEND    ANOP\n         COPY  ASMMSP * SUPPORT FOR HLASM STRUCTURED MACROS\n         MEND\n         MACRO\n&LBL    #CLCL &A,&B,&ANY=C'*',&PAD=C' '\n         GBLC &CLCLOPS(64),&CLCLNAM(64)\n         LCLC &Z,&Y\n         LCLA &I\n         AIF  ('&CLCLOPS(1)' NE '').NOTEXT\n***********************************************************************\n* $CLCL MACRO ACTS JUST LIKE CLCL WITH THE FOLLOWING DIFFERENCES:     *\n*  1-PADDING CHARACTER OF C' ' WILL BE FORCED. (MAY BE OVERRIDDEN BY  *\n*        SPECIFYING PAD=C'X' OR PAD=NO.)                              *\n*  2-'*' IN THE SECOND OPERAND MATCHES ANY (POSSIBLY NULL) STRING.    *\n*        (IT MAY BE OVERRIDDEN BY SPECIFYING ANY=C'X')                *\n*  3-REGISTER 0 MAY NOT BE SPECIFIED FOR EITHER OPERAND.              *\n*  4-USES THE SAVE AREA POINTED TO BY REGISTER 13                     *\n*  5-GENERATES A LOT OF CODE FOR EACH UNIQUE COMBINATION OF OPERANDS. *\n*      TRY TO USE THE SAME OPERANDS EACH TIME YOU ISSUE THE MACRO.    *\n***********************************************************************\n.NOTEXT  AIF   ('&A' NE '0' AND '&A' NE 'R0' AND                       X\n               '&B' NE '0' AND '&B' NE 'R0').OK\n         MNOTE 8,'REGISTER 0 MAY NOT BE USED IN $CLCL MACRO'\n.OK      ANOP\n&Y       SETC  'Z&SYSNDX'\n&LBL     MVC   36(4,13),&Y.RET  SET RETURN FROM $CLCL ROUTINE\n.DEFLOOP ANOP\n&Z       SETC  '&CLCLNAM(&I+1)'\n    AIF ('&CLCLOPS(&I+1)' EQ '&A,&B,&ANY,&PAD').SKIPSUB\n         AIF   ('&CLCLOPS(&I+1)' EQ '').GENSUB\n&I       SETA  &I+1\n         AGO   .DEFLOOP\n.GENSUB  ANOP  ,\n&CLCLOPS(&I+1) SETC '&A,&B,&ANY,&PAD'\n&CLCLNAM(&I+1) SETC '&Y'\n&Z       SETC  '&Y'\n&Z.ENT   XC    40(32,13),40(13)  CLEAR ONE ELEMENT STACK\n         AIF   ('&PAD  '(1,2) EQ 'NO').NOPAD\n         ICM   &B+1,8,=AL1(&PAD) SET PADDING CHARACTER\n.NOPAD   ANOP\n&Z.CMP   ST    &B,32(13)         SAVE STARTING ADDR OF PATTERN\n         CLCL  &A,&B             COMPARE OPERANDS\n         BE    &Z.END            BR IF EQUAL\n         CLM   &A+1,3,&Z.ONE     IS DATA EXHAUSTED\n         BL    &Z.NOB            YES\n         CLI   0(&A),C' '        STOP ON BLANK IN DATA?\n         BNE   &Z.NOB            NO\n         CLM   &B,7,33(13)       OK TO BACK UP THE PATTERN REG?\n         BNH   &Z.NOB            NO\n         BCTR  &B,0              YES, BACK IT UP\n         CLI   0(&B),C' '        PREV BLANK IN PATTERN?\n         BNE   &Z.FXB            NO\n         AH    &B+1,&Z.ONE       YES, FINISH BACKING UP\n         B     &Z.CMP            AND RESUME COMPARE\n&Z.FXB   LA    &B,1(&B)          SET PATTERN REG BACK\n&Z.NOB   CLM   &B,7,49(13)       DID WE GET FURTHER IN PATTERN?\n         BNH   &Z.SKP            NO\n         STM   &A,&A+1,40(13)    YES, SAVE THIS MATCH WITH CC\n         STM   &B,&B+1,48(13)    ..\n&Z.SKP   CLM   &B+1,3,&Z.ONE     IS PATTERN EXHAUSTED?\n         BL    &Z.NEQ            YES, NOT EQUAL\n         CLI   0(&B),&ANY        WAS THIS AN *?\n         BNE   &Z.NEQ            NO, TRY NEXT\n         LA    &B,1(&B)          PASS OVER\n         BCTR  &B+1,0            ... THE '*'\n         CLM   &B+1,3,&Z.ONE     WAS * THE LAST CHAR OF PATTERN\n         BNL   &Z.STK            NO, GOT TO STACK POINTERS\n         AR    &A,&A+1           YES, SKIP OVER REST OF STRING\n         ICM   &A+1,7,=XL3'0'    ..\n         B     &Z.SET            BR TO SETCC AND CLEAR HI BYTE\n&Z.NEQ   CLM   &A+1,3,&Z.ONE     IS DATA EXHAUSTED?\n         BL    &Z.LOD            YES, THEN NO POINT IN RESTART\n         LM    &A,&A+1,56(13)    ..\n         LM    &B,&B+1,64(13)    RELOAD POINTERS\n         SH    &A+1,&Z.ONE       DECR LENGTH BY ONE\n         BM    &Z.LOD            AND EXIT IF NOTHING LEFT\n         LA    &A,1(&A)          BUMP ADDRESS BY ONE\n&Z.ONE   EQU   *-2,2             (DEFINE HALF WORD \"ONE\" FOR ELSEWHERE)\n&Z.STK   STM   &A,&A+1,56(13)    SAVE REGS IN STACK\n         STM   &B,&B+1,64(13)    ... FOR LATER RESTART\n         B     &Z.CMP            RESTART THE COMPARE\n&Z.LOD   LM    &A,&A+1,40(13)    LOAD REGS AS OF \"BEST\" MATCH\n         LM    &B,&B+1,48(13)    ..\n&Z.SET   CLCL  &A,&B             SETS CC, CLEARS HIGH BYTES OF A AND B\n&Z.END   B     36(13)            RETURN\n         AGO   .SKIPBR\n.SKIPSUB B     &Z.ENT\n.SKIPBR  ANOP\n&Y.RET   B     *+4\n         MEND\n         TITLE 'STLSPACE - TSO LIST SPACE COMMAND'\nSTLSPACE CSECT\n*\n** * ------------------------------------------------------------- * **\n** * --  LSPACE - LOCATE AND DISPLAY DASD SPACE INFORMATION,    -- * **\n** * --   BASED ON AN INPUT MASK FOR VOLSER OR UCB NUMBER.      -- * **\n** * --                                                         -- * **\n** * --  THIS PROGRAM WORKS AS A TSO COMMAND PROCESSOR - THE    -- * **\n** * -- PARM VALUE IS ACCEPTED IN TSO/E CMD PROCESSOR FORMAT.   -- * **\n** * --                                                         -- * **\n** * --  IF THE CALLING ENVIRONMENT IS TSO, THE OUTPUT IS IN    -- * **\n** * --  STANDARD TPUT (LINE OUTPUT) FORMAT.  IF THE CALLING    -- * **\n** * --  ENVIRONMENT IS ISPF, AN ISPF TABLE WITH THE INFO. IS   -- * **\n** * --  DISPLAYED, THAT CAN BE SCROLLED AND SORTED.            -- * **\n** * --                                                         -- * **\n** * --  THE PASSED PARM VALUE MAY HAVE A COMMA DELIMITED       -- * **\n** * -- TRAILING PARM OF C'TSO', WHICH INDICATES THAT THE       -- * **\n** * -- PROGRAM OUTPUT IS TO BE IN TPUT FORMAT, REGUARLESS      -- * **\n** * -- OF THE ENVIRONMENT IT IS RUN IN.                        -- * **\n** * --                                                         -- * **\n** * --  THE FIRST AND ONLY PARM MAY BE ONE OF THE FOLLOWING    -- * **\n** * -- SPECIAL MEANING PARMS;                                  -- * **\n** * --   CL1'*' - LIST ALL UCB ADDRESSES.                      -- * **\n** * --   CL0'' - NO PARM - DISPLAY HELP INFORMATION.           -- * **\n** * --   CL2'/?' OR CL2'/H' - DISPLAY HELP INFORMATION.        -- * **\n** * --   CL4'HELP' - DISPLAY HELP INFORMATION.                 -- * **\n** * --                                                         -- * **\n** * --  OTHERWISE THE PARM DATA SHOULD TAKE THE FORM OF;       -- * **\n** * --                                                         -- * **\n** * --    A SINGLE VOLSER MASK - IE. VVVVVV OR VVV*V* OR V*    -- * **\n** * --    MULTIPLE VOLSER MASKS (VVVVVV,VVVVV*) AND SO ON..    -- * **\n** * --                                                         -- * **\n** * --    BY PREFIXING A MASK WITH C\"U=\" A UCB CAN BE FORMATTED-- * **\n** * --    A SINGLE UCB NUMBER - IE.U=####, OR MASK U=###*      -- * **\n** * --    MULTIPLE UCB NUMBERS/MASKS CAN BE ENCLOSED IN        -- * **\n** * --      PARENTHESIS - IE. U=(####,####,##*#,*###)          -- * **\n** * --                                                         -- * **\n** * --    A MIX OF UCB AND VOLSER MASKS IS NOT ALLOWED.        -- * **\n** * --                                                         -- * **\n** * -- SAMPLE INVOCATIONS:                                     -- * **\n** * -- LSPACE U=(5234,5235,530*,54**)                          -- * **\n** * --   DISPLAY INFO FOR UCBS 5234,5235 530(ANYTHING) AND     -- * **\n** * --   UCB 54(ANYTHING,ANYTHING).                            -- * **\n** * --                                                         -- * **\n** * -- LSPACE VOLUME                                           -- * **\n** * --   DISPLAY INFO FOR VOLSER=VOLUME ONLY                   -- * **\n** * --                                                         -- * **\n** * -- LSPACE *                                                -- * **\n** * --   DISPLAY INFO FOR ALL ONLINE DASD UNITS.               -- * **\n** * --                                                         -- * **\n** * -- LSPACE \\                                                -- * **\n** * --   DISPLAY INFO FOR ALL ONLINE DASD UNITS (AN OLD CARYOVER) * **\n** * --                                                         -- * **\n** * -- LSPACE (VOL***,SER***),TSO                              -- * **\n** * --   DISPLAY ANY VOLSER THAT BEGINS WITH VOL OR SER, AND   -- * **\n** * --   WRITE THE OUTPUT IN LINE OUTPUT MODE REGUARLESS OF    -- * **\n** * --   THE ENVIRONMENT.                                      -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * -- MAINLINE LOGIC -                                        -- * **\n** * --                                                         -- * **\n** * --   HOUSEKEEPING (GET STORAGE ETC.)                       -- * **\n** * --                                                         -- * **\n** * --   PARSE PARMS -                                         -- * **\n** * --     IF HELP REQUESTED - GO PRINT (PUTLINE) HELP ONLY.   -- * **\n** * --   TABLE ALL MASKS FOR LATER COMPARISON AGAINST UCBS OR  -- * **\n** * --   VOLSERS.                                              -- * **\n** * --                                                         -- * **\n** * --   PREPUCBS - PREPARE TO SCAN UCB'S, AND PRINT HEADINGS  -- * **\n** * --   IF THIS WILL BE TSO (PUTLINE) STYLE OUTPUT.           -- * **\n** * --   WE ALSO CALL APF AUTH MODULE STUCBSCN TO FILL UP A    -- * **\n** * --   UCB ADDRESS TABLE - THAT WE LATER USE FOR CHECKING    -- * **\n** * --   UCB'S AND VOLSERS AGAINST OUR MASKS.                  -- * **\n** * --                                                         -- * **\n** * --   UCBSCAN - GET 1 UCB.                                  -- * **\n** * --    IF NO MORE UCBS IN THE TABLE - GO TO CLEANUP.        -- * **\n** * --                                                         -- * **\n** * --   TSTMASKS - PREFORMAT VOLSER AND DEVICE (UCB) NUMBER.  -- * **\n** * --   SEE IF THIS UCB MATCHES ANY OF OUR MASKS - IF SO,     -- * **\n** * --   FLAG THE MASK, (AT LEAST ONE UNIT MATCHED).  IF NO    -- * **\n** * --   MASKS MATCH THIS UCB - GET THE NEXT ONE TILL ALL DONE.-- * **\n** * --                                                         -- * **\n** * --   LSPACE - CALL SERVICE FOR EXTENDED INFORMATION.       -- * **\n** * --                                                         -- * **\n** * --   POSTFORM - DO FINAL FORMATTING OF OUTPUT DATA.        -- * **\n** * --                                                         -- * **\n** * --   PUTLINE - WRITE A LINE OF DATA (OR ADD A TABLE ENTRY).-- * **\n** * --     BRANCH BACK TO UCBSCAN FOR THE NEXT POSSIBLE UCB.   -- * **\n** * --                                                         -- * **\n** * --   CLEANUP - ENTERED WHEN NO MORE UCBS ARE RETURNED FROM -- * **\n** * --   UCBSCAN, IF IN TSO MODE - RELEASE STORAGE AND END.    -- * **\n** * --   IF ISPF MODE - DISPLAY TABLE, THEN RELEASE STORAGE    -- * **\n** * --   AND END.                                              -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * --  THE PROGRAM IS REENT, AND SHOULD BE LINKED AC=0.       -- * **\n** * --                                                         -- * **\n** * --  REG. USAGE                                             -- * **\n** * --                                                         -- * **\n** * --  R0                  R8  - BAS LVL2                     -- * **\n** * --  R1 - CPPL           R9  - BAS LVL1                     -- * **\n** * --  R2                  R10 - DYNAM WORK AREA (BASE)       -- * **\n** * --  R3 - UCBOB          R11 - BASE REG 1                   -- * **\n** * --  R4 - LSPACE INFO    R12 - BASE REG 2                   -- * **\n** * --  R5                  R13 - S/A                          -- * **\n** * --  R6                  R14 - LINKAGE                      -- * **\n** * --  R7                  R15 - RC                           -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n*\nSTLSPACE #ENTRY DWA=(WORKA1,@DYNSIZE,R10),                             X\n               BASE=(11,12),MODID=YES,                                 X\n               AMODE=24,RMODE=24\n\n*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*.~                                                                   \u00a6\n*.~         M   M  AAA   III  N   N L      III  N   N EEEEE           \u00a6\n*.~         MM MM A   A   I   NN  N L       I   NN  N E               \u00a6\n*.~         M M M AAAAA   I   N N N L       I   N N N EEEE            \u00a6\n*.~         M   M A   A   I   N  NN L       I   N  NN E               \u00a6\n*.~         M   M A   A  III  N   N LLLLL  III  N   N EEEEE           \u00a6\n*.~                                                                   \u00a6\n*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n         USING CPPL,R1\nMAINLINE ST    R1,PARMA           HOLD THE PASSED PARM POINTER.....\n         BAS   R9,SETSTORA        PRESET STORAGE AREA\n\n         BAS   R9,PARSE           GO PARSE THE INPUT PARMS.\n*\n         BAS   R9,ISINIT          CHECK FOR ISPF AND INIT THAT ENVIR.\n*\n         TM    FLAG,FLAGHELP      DID THEY JUST ASK FOR, OR NEED HELP?\n         BO    HELPEM\n\n         BAS   R9,PREPUCBS        TABLE ALL UCB ADDRESSES & PRNT TITLE\n\nNXTUCB   BAS   R9,UCBSCAN          AND GO DO THE SCAN\n\n         LTR   R15,R15              DID WE GET ONE\n         BZ    TESTUCB               IF NOT WE ARE DONE, GO HOME\n         CH    R15,=H'4'          IF THEY GAVE US AN RC=4, THEN...\n         BE    RC00               THE LAST UCB HAS BEEN PROCESSED.\nTESTUCB  L     R3,UCBADDR          POINT TO THE REAL UCB FROM UCBSCAN\n         USING UCBOB,R3            ADDRESS THE UCB FIELDS\n\n         BAS   R9,TSTMASKS        TEST THIS UCB AND VOLSER VS. MASKS\n\n         LTR   R15,R15            IF IT MATCHED A MASK, GET FULL\n         BZ    DOLSP                SPACE INFO ABOUT UNIT\n         CH    R15,=H'8'          IF ERROR, THEN PRINT PRESET MESSAGE\n         BE    PUTLN\n         CH    R15,=H'16'         16 MEANS IT SHOULD BE SKIPPED.\n         B     NXTUCB\n\nDOLSP    BAS   R9,LSPACE          LSPACE GETS TOTAL SPACE INFO.\n\n         LTR   R15,R15              DID IT GO OK?\n         BZ    ENDF                 IF SO GO FORMAT A DETAIL LINE\n         CH    R15,=H'4'            IF 4, THEN SKIP THIS UCB\n         BE    NXTUCB\n         CH    R15,=H'8'            IF 8, THEN PRINT PRESET ERROR MSG\n         BE    PUTLN\n*                                 ANYTHING ELSE FALLS THROUGH\nENDF     BAS   R9,POSTFORM          TO THE FINAL FORMATTING ROUTINE.\n*\nPUTLN    LA    R1,SPACEMSG        POINT TO THE MESSAGE WE BUILT\n\n         BAS   R8,PUTLINE         GO WRITE THE LINE OF DATA WE FORMATED\n\n         B     NXTUCB\n*\nRC00     BAS   R9,CLEANUP         RELEASE STORAGE AREAS ETC. NOW\n\nBYEBYE   #EXIT RC=0,LTORG=NO       AND RETURN TO CALLER.\n*\nHELPEM   BAS   R9,DOHELP          WRITE HELP INFORMATION -\n         B     RC00                 AND THEN END NORMALLY.\n*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*.~         M   M  AAA   III  N   N L      III  N   N EEEEE           \u00a6\n*.~         MM MM A   A   I   NN  N L       I   NN  N E               \u00a6\n*.~         M M M AAAAA   I   N N N L       I   N N N EEEE            \u00a6\n*.~         M   M A   A   I   N  NN L       I   N  NN E               \u00a6\n*.~         M   M A   A  III  N   N LLLLL  III  N   N EEEEE           \u00a6\n*.~                                                                   \u00a6\n*.~                        EEEEE N   N DDDD                           \u00a6\n*.~                        E     NN  N D   D                          \u00a6\n*.~                        EEEE  N N N D   D                          \u00a6\n*.~                        E     N  NN D   D                          \u00a6\n*.~                        EEEEE N   N DDDD                           \u00a6\n*.~                                                                   \u00a6\n*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\n\n\nCLEANUP  EQU   *\n** * ------------------------------------------------------------- * **\n** * -- CLEANUP - FINAL PROCESSING BEFORE WE DIE... WE NEED TO  -- * **\n** * --  CHECK TO SEE IF ANY MASKS WERE NEVER USED, IF SO PRINT -- * **\n** * --  ERRORS FOR THEM.  NEXT IF WE ARE ISPF MODE, HANDLE THE -- * **\n** * --  TABLE DISPLAYS.  FINALLY RELEAS STORAGE, RESOURCES ETC.-- * **\n** * ------------------------------------------------------------- * **\n         LA    R7,OUTTABL         POINT TO OUR TABLE OF MASKS\nCLNLOOP  SR    R5,R5              CLEAR WORK REG\n         ICM   R5,B'0001',1(R7)   DID THIS ENTRY HAVE A LENGTH?\n         BZ    CLEANED            IF AT END OF TABLE, WE ARE DONE HERE\n         CLI   0(R7),X'00'        IS IT STILL A ZERO? (ZERO MEANS THAT\n*                                  NO UNITS MATCHED THIS MASK.)\n         BE    NOMATCH             IF NOT THEN PRODUCE A NO MATCH MSG\n*                                 ELSE LOOP TILL ENTIRE TABLE IS DONE.\nNDXTABLE SR    R6,R6              CLEAR AN INDEX REG.\n         IC    R6,1(R7)           GET THE LENGTH OF THE ENTRY\n         LA    R7,2(R6,R7)        LENGTH+2BYTE PREFIX + DATA = NEXT\n         B     CLNLOOP\n*\n*-- HERE WE HAVE A NON-MATCHED MASK - PRODUCE AN ERROR MSG FOR IT.\n*-- R7 POINTS TO THE MASK TABLE ENTRY...\n*\nNOMATCH  EQU   *                  NO MATCH WAS PRODUCED FOR THIS MASK\n         SR    R6,R6\n         IC    R6,1(R7)           GET THE LENGTH IN R6\n         BCTR  R6,R0              REDUCE BY ONE FOR EXECUTE INST.\n\n         TM    FLAG,CHKUCBS       WAS IT A UCB OR VOLSER MASK?\n         BNO   NOUCBS              - U = NO UCBS\n*\nNOVOLS   EQU   *                 ISSUE VOLSER WARN. MSG.\n         MVC   SPACEMSG(LENMSG_1),BADMSG_1\n         EX    R6,MOVEMASK        MOVE THE MASK TO THE MSG AREA.\n         LA    R1,SPACEMSG\n         B     WARNMSG\n\nNOUCBS   EQU   *                 ISSUE UNIT= WARN. MSG.\n         MVC   SPACEMSG(LENMSG_2),BADMSG_2\n         EX    R6,MOVEMASK        MOVE THE MASK TO THE MSG AREA.\n         LA    R1,SPACEMSG\n         B     WARNMSG\nWARNMSG  EQU   *                 ISSUE UNIT= WARN. MSG.\n         OI    FLAG,TSOTMP        TURN ON THE TEMP TSO FLAG.\n         BAS   R8,PUTLINE\n         B     NDXTABLE             THEN CHECK THE REMAINDER OF TABLE\n*\n* CHECK FOR AND HANDLE NO UCB / NO VOLSER FOUND MESSAGES HERE *\nCLEANED  EQU   *\n* THE NEXT FEW LINES OF CODE FREE THE UCB TABLES WE BUILT IN PREPUCBS\n         L     R4,UCBTOP          GET THE ADDRESS OF THE FIRST BLOCK\n         LTR   R4,R4              WAS THERE A FIRST BLOCK?\n         BZ    FREDUCBS\nFREUCSTR L     R5,0(R4)           GET THE LENGTH OF THE BLOCK\n         L     R6,4(R4)           GET THE FWD POINTER IF ONE EXISTS\n         STORAGE RELEASE,ADDR=(4),LENGTH=(5)\n         LTR   R6,R6              IS THERE A FWD POINTER?\n         BZ    FREDUCBS\n         LR    R4,R6              LOAD ADDRESS OF NEXT BLOCK IN FIRST\n         B     FREUCSTR           AND RELEASE IT AS WELL...\n\nFREDUCBS TM    FLAG,ISPFFL        ARE WE IN ISPF MODE?\n         BZ    CLRC00             IF NOT JUST END\n         TM    FLAG,TSOFL         WAS IT SPECIFICALLY A TSO CALL?\n         BO    CLRC00\n         TM    FLAG,FLAGHELP      HELP REQUESTS NEVER GET ISPF SERVICE\n         BO    CLRC00\n         BAS   R8,TBDISPL         ELSE GO DISPLAY THE TABLE WE BUILT.\n         ISPFTERM\n         DELETE EP=IKJEFTSR       BASIC HOUSEKEEPING\nCLRC00   B     0(0,R9)            AND FINALLY RETURN HOME TO MAINLINE.\n* EXECUTED INSTRUCTION BELOW...\nMOVEMASK MVC   SPACEMSG+04(0),2(R7)   MOVE THE MASK TO THE MESSAGE AREA\n\n\n\n\n\nSETSTORA EQU   *                  PRESET STORAGE AREA\n** * ------------------------------------------------------------- * **\n** * -- SETUP THE STORAGE AREA - IT IS ABOUT HALF ZEROS, AND    -- * **\n** * -- ABOUT HALF BLANKS, I COULD GO EITHER WAY, BUT I STILL   -- * **\n** * -- HAVE A LOT OF INDIVIDUAL DATA TO FILL IN - START WITH 0'S  * **\n** * ------------------------------------------------------------- * **\n         MVC   IOPLECT,CPPLECT           POINTERS NOW\n         MVC   IOPLUPT,CPPLUPT\n         MVC   IOPB(MODELLEN),IOPBDUM  MOVE MODEL TO WORK AREA\n         DROP  R1                  CPPL\n* A FEW MORE FIELDS NEED TO BE FIXED NOW...\n         #BLANK WORK5\n         #BLANK WORK9\n         LA    R1,ECB\n         STCM  R1,B'1111',IOPLECT+4     SAVE THE ECB ADDR IN STRUCT.\n         LA    R1,IOPB\n         STCM  R1,B'1111',IOPLECT+8     SAVE THE IOPB ^ IN STRUCT.\n*\n         BAS   R7,CLNDET          GO CLEAR OUT THE DETAIL AREA NOW.\n*\n* PREP PARMS FOR IKJEFTSR AND STUCBSCN CALL\n*\n         XC    FLAGS(2),FLAGS     CLEAR FIRST TWO BYTES\n         MVC   FLAGS+2(2),=X'0102'  SET A PAIR OF FLAGS\n         MVC   PGM(8),=C'STUCBSCN' SET UP THE PROGRAM NAME\n         MVC   PGMLEN,=F'8'       THE LENGTH OF THE PROGRAM NAME\n         #ZERO RETCODE            ZERO THE RETURN\n         #ZERO REASONC                 CODE, THE REASON\n         #ZERO ABENDCD                     CODE, AND THE ABEND CODE\n         MVC   PGMPARM1(2),=H'12' LEN = THREE FULLWORDS = 12\n* DO A LATE BINDING FOR IKJEFTSR - LOAD AND SAVE ADDRESS\n         LOAD  EP=IKJEFTSR\n         LTR   15,15\n         BZ    LDEDOK             IF IT LOADED OK\n         LA    R5,PUTNOTSR\n         WTO   TEXT=(5),MF=(E,WTOT)\n         B     BYEBYE\nLDEDOK   ST    R0,JEFTSR\n         B     0(R0,R9)           RETURN TO MAINLINE\n\n\n\n\n\n\nCLNDET   EQU   *\n** * ------------------------------------------------------------- * **\n** * -- CLNDET - CLEAN THE DETAIL PRINT / TABLE AREA            -- * **\n** * --           LEVEL 3 ROUTINE RETURN VIA BR R7              -- * **\n** * ------------------------------------------------------------- * **\n*\n         MVC   SPACEMSG(4),=AL2(LEND,0)  FIX UP SPACEMSG WITH A HEADER\n         MVI   IVOLSER,X'40'             CLEAR THE\n         MVC   IVOLSER+1(DETLNL-1),IVOLSER    DETAIL AREA NOW\n         B     0(0,R7)            RETURN TO CALLER\n\n\n\nPARSE    EQU   *                  PARSE INPUT PARMS\n** * ------------------------------------------------------------- * **\n** * -- PARSE -                                                 -- * **\n** * --  PARSE THE INPUT PARMS OURSELVES - SO WE HAVE THEM ALL  -- * **\n** * --  UPFRONT, INSTEAD OF ONE AT A TIME.\n** * --                                                         -- * **\n** * --  THE ROUTINE WILL PARSE INPUT, SET HELP & TSO FLAGS,    -- * **\n** * --  AND BUILD A TABLE OF MASKS TO CHECK AGAINST THE UCBS.  -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n*\n*\n* - FIRST SAVE BASIC INFO\n*\n         L     R1,PARMA           RESTORE THE PASSED PARM POINTER..\n         L     R1,0(R1)           GET THE POINTER TO PARMS FIELDS\n         LH    R3,0(R1)           TOTAL LENGTH OF PASSED DATA\n         LH    R4,2(R1)           DISP. TO PARMS IN PASSED DATA\n         LA    R5,4(R4,R1)        R5 POINTS TO PARMS, IF ANY\n         LA    R0,4(R4)           DISP. TO PARMS + 4 BYTE HDRS.\n         SR    R3,R0              R3 = LENGTH OF PARMS\n         LTR   R3,R3              IS IT ZERO OR DO WE HAVE PARMS\n         BZ    FH                 IF 0, FLAG THE HELP OPTION AND END\n*\n* - TEST SPECIAL CASES - CRIES FOR HELP, OR REQUESTS FOR EVERYTHIN.\n*\n         STH   R3,PARML           SAVE PARM LENGTH NOW\n         ST    R5,PARMA             & PARM ADDR.\n         CH    R3,=H'1'           IF ONLY 1 BYTE\n         BE    TSTSTAR              CHECK FOR AN '*' OR '\\'\n         BCTR  R3,R0              REDUCE FOR AN EX INSTRUCTION\n         EX    R3,ORBLANKS\n         CH    R3,=H'2'           IF ONLY 2 BYTES\n         BE    TSTHLP2              CHECK FOR '/H' OR '/?'\n         CH    R3,=H'4'           IF 4 BYTES\n         BE    TSTHLP4              CHECK FOR 'HELP'\n*\n** * ------------------------------------------------------------- * **\n** * -- ANY CHARACTER VALUES ARE VALID A-Z, 0-9 AND '*'.        -- * **\n** * --                                                         -- * **\n** * -- A SINGLE COMMA DELIMITED -TRAILING- PARM OF ',TSO' WILL -- * **\n** * -- FORCE THE OUTPUT TO TPUT (TSO) STYLE OUTPUT.            -- * **\n** * --                                                         -- * **\n** * -- HELP IS REQUESTED (ABOVE) WITH -NO PARMS, OR '/?' OR    -- * **\n** * -- '/H' OR 'HELP', AND IS TESTED FOR FIRST.                -- * **\n** * --                                                         -- * **\n** * -- THE REMAINING INPUT MAY EITHER BE VOLSER MASKS OR UCB   -- * **\n** * -- MASKS, BUT NOT BOTH.  ONE MASK WILL STAND ALONE OR A    -- * **\n** * -- GROUP OF MASKS IS ENCLOSED IN PARENS AND COMMA DELIMITED.- * **\n** * -- A VOLUME MASK IS THE DEFAULT TYPE AND UCB MASKS ARE     -- * **\n** * -- SPECIFIED BY PROCEEDING A  MASK OR GROUP OF MASKS WITH  -- * **\n** * --  THE LITERAL 'U='.                                      -- * **\n** * --                                                         -- * **\n** * -- THE MASK(S) ARE TABLED, WITH A BYTE OF LEADING FLAGS,   -- * **\n** * -- A SINGLE BYTE LENGTH, AND THE MASK ITSELF.   THERE IS   -- * **\n** * -- NO SPECIAL CONSIDERATION FOR ALIGNMENT, ONE FIELD       -- * **\n** * -- FOLLOWS THE NEXT TILL A ZERO LENGTH GROUP IS FOUND.     -- * **\n** * --                                                         -- * **\n** * -- THE LEADING BYTE (THE FLAG BYTE), IS CURRENTLY ONLY     -- * **\n** * -- USED TO TRACK WHETHER OR NOT A UNIT FITS A MASK AND     -- * **\n** * -- THEREFORE PRODUCED A DETAIL - NO FLAGED MASKS, PRODUCED -- * **\n** * -- NO DETAILS.                                             -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * -- EXAMPLES ARE:                                           -- * **\n** * --  FOR HELP - LSPACE ;  LSPACE /? ; LSPACE /H ; LSPACE HELP  * **\n** * --                                                         -- * **\n** * --  FOR VOLS - LSPACE *  ; LSPACE (VOLM**,VOLX*1,*7345X)   -- * **\n** * --             LSPACE MYVOL*,TSO  ; LSPACE (MYVOL*,YOURS*) -- * **\n** * --                                                         -- * **\n** * --  FOR UCBS - LSPACE U=1234 ; LSPACE U=(1234,5678)        -- * **\n** * --             LSPACE U=55*3 ; LSPACE U=(123*,567*,*4*2)   -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * -- REMEMBER - VOLSER AND UNIT MASKS CAN NOT BE MIXED.      -- * **\n** * --*NOTE* - EVEN IF A UNIT MATCHES MORE THAN ONE MASK VALUE -- * **\n** * --         IT'S DETAILS WILL STILL ONLY BE DISPLAYED ONCE. -- * **\n** * ------------------------------------------------------------- * **\nNOTHELP  EQU   *\nTST_TSO  EQU   *                  TEST FOR TRAILING TSO KEYWORD.\n         L     R5,PARMA           PARMS FOR PTR\n         LH    R3,PARML           PARMS LENGTH\n         SH    R3,=H'4'\n         AR    R5,R3              POINT TO LAST FOUR BYTES\n         CLC   0(4,R5),=C',TSO'   ARE THEY ASKING FOR \"TSO OUTPUT\"?\n         BNE   NOT_TSO            IF NOT COUNTINUE\n         OI    FLAG,TSOFL         FLAG TPUT OUTPUT ONLY\n         STH   R3,PARML           RESTORE ADJUSTED LENGTH BACK IN PARML\n*                                  SO WE DONT USE \",TSO\" AS A MASK\nNOT_TSO  EQU   *\n         L     R5,PARMA           GET THE PARM PTR (AGAIN)\n         LH    R3,PARML           GET THE PARM LENGTH\n         CLC   0(2,R5),=C'U='     IS IT A UCB THING?\n         BNE   DOVOLT               IF NOT BUILD VOLSERS\n         SH    R3,=H'2'           LESS LEN OF U=\n         LA    R5,2(R0,R5)        BUMP PTR PAST \"U=\" IN PARM\n         OI    FLAG,CHKUCBS       FLAG THIS RUN AS A TEST OF UCBS\nDOVOLT   EQU   *\n         LA    R6,OUTTABL\n         CLI   0(R5),C'('         OPEN PAREN? ONLY VALID IN POS.1\n         BNE   PRSLOOP\n         LA    R5,1(R5)           BUMP PAST THE '('\n         BCTR  R3,R0              REDUCE TOTAL LENGTH BY 1 FOR THE (\n         LTR   R3,R3              TEST IF WE ARE DONE\n         BZ    RC0PRSE\n*\n*\nPRSLOOP  BCTR  R3,R0              REDUCE FOR EX INSTRUCTIONS\n         LTR   R3,R3              IF NO MORE TO PARSE?\n         BZ    RC0PRSE                IF NO MORE, THEN WE ARE DONE.\n*\n* THE \"EX FNDCOMA\" WILL SCAN THE PARM LOOKING FOR A COMMA, OR A ) -\n*  IF NOTHING FOUND, B TO LASTTAB, IF SOMETHING WAS FOND, BUT IN THE\n*  LAST BYTE OF THE PARM, B TO ENDTAB, IF SOMETHING WAS FOUND BEFORE\n*  WE GOT TO THE END OF THE PARM BRANCH TO COMAFND.  EACH ROUTINE\n*  WILL DEAL WITH THE CIRCUSTANCES OF WHERE A \",\" OR AN \")\" WAS FOUND.\n*\n* BEFORE WE 'EX', CHECK FOR AND CLEAR LEADING (OR ALL) BLANKS\n*\n         CLI   0(R5),C' '         IS IT A LEADING BLANK?\n         BNE   DOEX               IF NO BLANKS - DO THE SCAN.\n         LA    R5,1(R0,R5)        ELSE BUMP PAST THE BLANK\n         BCTR  R3,R0              REDUCE THE TOTAL LENGTH BY ONE\n         LTR   R3,R3              AND SEE IF WE HAVE ANYTHING\n         BZ    RC0PRSE              LEFT TO SCAN.\n*\nDOEX     EX    R3,FNDCOMMA        FIND COMMA OR TRAILING ')'\n         BC    8,LASTTAB          NO HIT, MOVE ALL LEFT TO TABLE\n         BC    4,COMAFND          HIT IN MIDDLE OF STRING\n         BC    2,ENDTAB           LAST BYTE WAS IN TABLE\n*\n*\n*\nLASTTAB  EQU   *                  JUST ONE BIG PARM WAS LEFT, WE JUST\n*                                 MOVE IT, AS IS, TO THE TABLE...\n         EX    R3,MOVTBL          MOVE THE MASK TO OUR TABLE\n         LA    R3,1(R3)           RESTORE THE LENGTH VALUE\n         STCM  R3,B'0011',0(R6)   SAVE THE LENGTH BACK IN THE TABLE.\n* WE DONT NEED TO ADJUST OR TEST POINTERS - WE KNOW WE ARE THROUGH.\n         B     RC0PRSE            RETURN WE ARE DONE.\n*\n* THIS ROUTINE IS HIT WHEN WE WE FIND A COMMA OR ')' (MIDDLE OR END)\n* EITHER WAY WE TREAT IT THE SAME, MOVE AND TABLE DATA, ADJUST LENGTHS.\n*\nENDTAB   EQU   *\nCOMAFND  EQU   *                  R1 = ^ TO DELIM VALUE, R2 = 10 OR FF\n         SR    R1,R5              ENDSCAN MINUS START O'SCAN\n         BNZ   NOTNULL            IF START=END, THEN=C','\nNULLPARM LA    R5,1(R0,R5)        BUMP TO THE NEXT CHAR\n         B     PRSLOOP\nNOTNULL  EQU   *                  R1 = LENGTH TO MOVE TO STRING\n         STCM  R1,B'0011',0(R6)   SAVE THE LENGTH BACK IN THE TABLE.\n         BCTR  R1,R0              REDUCE FOR THE EX WE WILL DO...NOW..\n         EX    R1,MOVTBL           (SEE EARLIER EX OF MOVTBL)\n         AR    R6,R1              BUMP OUTPUT POINTER\n         LA    R6,3(R0,R6)        +1 FOR EX, +2 FOR LEN.\n         AR    R5,R1              BUMP FROM LOCATION\n         LA    R5,2(R5)           +1 FOR EX, +1 FOR DELIM\n         SR    R3,R1              REDUCE LENGTH LEFT IN INPUT VARIABLE\n         BCTR  R3,R0              LESS ONE FOR THE DELIMITER ITSELF\n         LTR   R3,R3              IF NOTHING LEFT\n         BZ    RC0PRSE            WE ARE DONE WITH THIS ONE...\n         B     PRSLOOP            GO LOOK FOR MORE PARMS\n*\nRC0PRSE  EQU   *                  WE ARE DONE\n         B     0(R0,R9)           JUST RETURN\n*\nTSTSTAR  EQU   *                  ONE BYTE PARM WAS PASSED\n         CLI   0(R5),C'*'         WAS IT AN ASTERISK THEY PASSED?\n         BE    DOSTAR\n         CLI   0(R5),C'/'         WAS IT A BACKSLASH?\n         BE    DOSTAR             IF SO TREAT IT LIKE AN ASTERISK\nZEROTAB  MVC   OUTTABL(4),=F'0'   FORCE ALL ZEROS\n         B     RC0PRSE\n*\nDOSTAR   MVC   OUTTABL(2),=X'0001' FORCE PARM LENGTH OF 1\n         MVI   OUTTABL+2,C'*'     AND MAKE IT AN ASTERISK\n         MVC   OUTTABL+3(4),=F'0' DELIM OUT STAR\n         B     RC0PRSE\n*\nTSTHLP2  EQU   *                  TWO CHARACTER PARM PASSED\n         CLC   0(2,R5),=C'/?'     UNIX STYLE HELP REQUEST?\n         BNE   TSTHC\nFH       OI    FLAG,FLAGHELP      FLAG THIS FOR HELP\n         B     ZEROTAB            GO CLEAR OUT THE TABLE\nTSTHC    CLC   0(2,R5),=C'/H'     PC STYLE HELP REQUEST?\n         BE    FH\n         B     NOTHELP\nTSTHLP4  EQU   *                  TWO CHARACTER PARM PASSED\n         CLC   0(4,R5),=C'HELP'   DID THEY SHOUT FOR HELP?\n         BE    FH                 IF SO, FLAG IT AND RETURN\n         B     NOTHELP            OTHERWISE, DON'T HELP\n*\n* EXECUTED INSTRUCTIONS AND THE TRANSLATE TABLE GO HERE\n*\nMOVTBL   MVC   2(0,R6),0(R5)      MOVE THE MASK TO OUR TABLE\nFNDCOMMA TRT   0(0,R5),COMTAB1    EXEC'D ONLY FIND \",\" OR TRAILING \")\"\nORBLANKS OC    0(0,R5),=CL80' '\n\n\n\n\n\n\nISINIT   EQU   *                  RTN VIA B 0(R9) - A 1ST LEVEL CALL\n** * ------------------------------------------------------------- * **\n** * -- ISINIT - ISPF ENVIRONMENT ADDITIONAL INITIALIZATION RTNS-- * **\n** * --  INITIALIZES ISPF ENVIRONMENT (LOADS ISPLINK, & VDEF'S) -- * **\n** * -- WE NEXT VDEFINE 'OUR' VARIABLES                         -- * **\n** * --                                                         -- * **\n** * -- RETURN IS VIA B 0(R9)                                   -- * **\n** * ------------------------------------------------------------- * **\n*\n         TM    FLAG,TSOFL         DID THEY REQUEST TSO ONLY?\n         BO    ISINISPF            IF SO, THEN DON'T DO ISPF !\n         TM    FLAG,FLAGHELP      HELP REQUESTS NEVER GET ISPF SERVICE\n         BO    ISINISPF            IF SO,  THEN DON'T DO ISPF !\n         LOAD  EP=ISPQRY,ERRET=ISINISPF\n         SLR   R1,R1               NO PARAMETERS\n         LINK  EP=ISPQRY           QUERY, IS ISPF ACTIVE  Q.\n         LR    R2,R15              SAVE R/C\n         DELETE EP=ISPQRY\n*\n         LTR   R2,R2               IS ISFP ACTIVE  Q.\n         BNZ   ISINISPF            NO\n         ISPFINIT                 BASIC ISPF FUNCTION RTNS\n* NOW VDEFINE OUR VARIABLES\n         VDEFINE NAMES=(IVOLSER),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(IUNITADD),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(XUNITADD),FORMAT=BIT,LENGTH=4\n         VDEFINE NAMES=(IMOUNTA),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(IRESV),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(IFREEXT),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(IFRETRK),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(IFRECYL),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ILGTRK),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(ILGCYL),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(IVTOC),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ISMSIND),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(IUCBAD),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(XUCBAD),FORMAT=BIT,LENGTH=8\n* - - OTHERS AS NEEDED CAN BE VDEF'ED HERE\n         VDEFINE NAMES=(ZTDMARK),FORMAT=CHAR,LENGTH=55\n         VDEFINE NAMES=(MYCMDS),FORMAT=CHAR,LENGTH=60\n* - BLANK THE NEW DETAIL LINE NOW\n         MVC   ZTDMARK+19(35),=C' ********** END OF DATA ********** '\n         #BLANK MYCMDS\n* NOW CREATE A TABLE\n         TBCREATE  TABLE=TB01,WRITE=NOWRITE,                           X\n               NAMES=(IVOLSER,IUNITADD,IMOUNTA,IRESV,IFREEXT,IFRETRK,  X\n               IFRECYL,ILGTRK,ILGCYL,IVTOC,ISMSIND,IUCBAD,             X\n               XUNITADD,XUCBAD)\n         OI    FLAG,ISPFFL        FLAG IT AS AN ISPF RUN\n         NI    FLAG,X'FF'-TSOFL   TURN OFF TSO FLAG\n         XR    R15,R15\n         B     0(R9)              RETURN FROM WHERE WE WERE CALLED.\nISINISPF EQU   *                  NOT ISPF - FORCE BACK TO TSO FORMAT\n         NI    FLAG,X'FF'-ISPFFL  TURN OFF ISPF FLAG, IT ITS NOT ISPF\n         OI    FLAG,TSOFL         TURN OFF TSO FLAG\n         LA    R15,16(R0,R0)      SET A BAD RC\n         B     0(R9)              AND RETURN\n\n\n\n\n\n\n\nDOHELP   EQU   *\n*\n** * ------------------------------------------------------------- * **\n** * -- DOHELP                                                  -- * **\n** * --   THIS ROUTINE JUST PRINTS A SET OF HELP LINES...       -- * **\n** * --   AND THEN ENDS...                                      -- * **\n** * ------------------------------------------------------------- * **\n         LA    R1,HELPSP\n         BAS   R8,PUTLINE\n         LA    R1,HELP_1\n         BAS   R8,PUTLINE\n         LA    R1,HELP_2\n         BAS   R8,PUTLINE\n         LA    R1,HELP_3\n         BAS   R8,PUTLINE\n         LA    R1,HELPSP\n         BAS   R8,PUTLINE\n*\n         LA    R1,HELP_4\n         BAS   R8,PUTLINE\n         LA    R1,HELPSP\n         BAS   R8,PUTLINE\n*\n         LA    R1,HELP_5\n         BAS   R8,PUTLINE\n         LA    R1,HELP_6\n         BAS   R8,PUTLINE\n         LA    R1,HELP_13\n         BAS   R8,PUTLINE\n         LA    R1,HELP_7\n         BAS   R8,PUTLINE\n         LA    R1,HELP_10\n         BAS   R8,PUTLINE\n         LA    R1,HELP_14\n         BAS   R8,PUTLINE\n         LA    R1,HELPSP\n         BAS   R8,PUTLINE\n*\n         LA    R1,HELP_8\n         BAS   R8,PUTLINE\n         LA    R1,HELP_9\n         BAS   R8,PUTLINE\n         LA    R1,HELPSP\n         BAS   R8,PUTLINE\n*\n         LA    R1,HELP_11\n         BAS   R8,PUTLINE\n         LA    R1,HELP_12\n         BAS   R8,PUTLINE\n         LA    R1,HELPSP\n         BAS   R8,PUTLINE\n*\n         B     0(R0,R9)           RETURN TO THE MAINLINE\n\n\n\n\n\n\nPREPUCBS EQU   *\n*\n** * ------------------------------------------------------------- * **\n** * -- PREPUCBS - BUILD A TABLE OF ALL UCBS FOR LATER COMPARES -- * **\n** * -- AGAINST THE MASKS THE USER SPECIFIED. - ALSO, THIS IS A -- * **\n** * -- GOOD PLACE TO PRINT HEADING LINES FOR TSO STYLE OUTPUT. -- * **\n** * --                                                         -- * **\n** * -- WE WILL USE IKJEFTSR TO CALL THE UCBSCAN ROUTINE STUCBSCN  * **\n** * -- BECAUSE WE NEED TO INVOKE IT AS AUTHORIZED, FROM AN     -- * **\n** * -- UNAUTHORIZED ENVIORNMENT, OTHERWISE WE WOULD JUST CALL  -- * **\n** * -- IT DIRECTLY.                                            -- * **\n** * --                                                         -- * **\n** * -- THE UCB TABLE(S) THAT ARE BUILT BY STUCBSCN ARE GETMAIN'ED * **\n** * -- HERE BEFORE THE CALL TO STUCBSCN.                       -- * **\n** * --                                                         -- * **\n** * -- IF THE TABLE WE PASS IS NOT BIG ENOUGH FOR ALL UCBS,    -- * **\n** * -- WE WILL GETMAIN EXTRA AREAS AND CHAIN THEM TOGETHER.    -- * **\n** * --                                                         -- * **\n** * --  TABLE FORMAT:                                          -- * **\n** * --    WORD1 - TOTAL BLOCK LENGTH                           -- * **\n** * --    WORD2 - FWD BLOCK POINTER OR ZERO IF LAST BLOCK      -- * **\n** * --    WORD2 - WHEN STUCBSCN IS CALLED - # OF SLOTS IN TABLE-- * **\n** * --    WORD3 THROUGH WORDX = UCB ADDRESSES                  -- * **\n** * --                                                         -- * **\n** * --    THE UCB ADDRESSES ARE ENDED BY A SIGNAL WORD OF 0'S. -- * **\n** * --    THE SIGNAL WORD CAN BE FOLLOWED BY A FWD PTR TO THE  -- * **\n** * --    NEXT UCB ADDRESS IN A NEW BLOCK, OR BY ANOTHER WORD  -- * **\n** * --    OF ZERO'S INDICATING AN END TO THE LOGICAL TABLE.    -- * **\n** * --                                                         -- * **\n** * --  I.E.                                                   -- * **\n** * --                                                         -- * **\n** * --  F'BLKLEN';                                             -- * **\n** * --  F'FWD BLK PTR' OR ZEROS IF LAST BLOCK                  -- * **\n** * --  F'UCB',F'UCB',F'UCB'... AD NAUSEUM                     -- * **\n** * --  F'0' = SIGNAL WORD - MUST BE FOLLOWED BY               -- * **\n** * --  F'0' = END OF ALL UCBS,                                -- * **\n** * --   - OR -                                                -- * **\n** * --  F'PTR TO NEXT UCB IN A NEW BLOCK'                      -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         TM    FLAG,TSOLGND\n         BO    NOLGND\n         OI    FLAG,TSOLGND       SET FLAG TO TAKE BRANCH NEXT TIME.\n         TM    FLAG,ISPFFL\n         BO    NOLGND             NO LEGENDS FOR ISPF SESSIONS.\n         LA    R1,LEGEND1\n         BAS   R8,PUTLINE\n         LA    R1,LEGEND2\n         BAS   R8,PUTLINE\nNOLGND   XC    UCBWORK,UCBWORK     1ST TIME THROUGH\nNXTBLK   L     R2,=A(@TABSIZ)     ROOM FOR 65K WORDS\n         STORAGE OBTAIN,SP=0,LENGTH=(2)\n         ST    R2,0(R0,R1)        SAVE LENGTH BACK INTO THE BLOCK\n         SRL   R2,2               LENGTH / 4 = # WORDS IN BLOCK\n         BCTR  R2,R0              LESS TWO FOR THE LEADING LENGTH,\n         BCTR  R2,R0               AND POSSIBLE FWD POINTER WORDS.\n         ST    R2,4(R0,R1)        SAVE # ENTRIES IN TABLE - THIS IS\n*                                  A TEMP HOLD AREA THAT WILL BE 0'ED\n*                                  WHEN STUCBSCN FIRST SEES THE TABLE.\n         CLC   UCBTOP,=F'0'       IS THERE A TABLE TOP YET?\n         BNE   CHAINBLK           IF THERE IS THIS - CHAIN THIS NEX BLK\n         ST    R1,UCBTOP           ELSE SAVE AS THE VERY TOP BLOCK\n         B     DOCALL             AND GO CALL THE STUCBSCN RTN.\n*\nCHAINBLK EQU   *                  CHAIN OLD BLK TO NEW & SET FWD PTR\n*                                   TO NEXT UCB @ END OF OLD BLK.\n         L     R2,CURBLK          GET THE OLD BLOCK ADDR FIRST.\n* R1 = PTR NEW BLK  ; R2 = PTR OLD BLK\n         ST    R1,4(0,R2)         SAVE THE NEW BLK ADDR IN OLD BLK.\n         ST    R1,CURBLK          AND MAKE THIS NEW ONE THE CURRENT 1\n* NEXT FIND THE END OF THE OLD TABLE - SO IT CAN BE CHAINED TO NEXT UCB\n         L     R3,=A(@TABSIZ)     THE ORIGINAL TABLE LENGTH\n         AR    R3,R2              R3 ==> PAST END OF OLD BLOCK\n         S     R3,=F'4'           R3 ==> LAST WORD OF OLD BLOCK\n         LA    R1,8(R0,R1)        BUMP NEW BLK PTR TO FIRST UCB SLOT\n         ST    R1,0(R0,R3)        AND SAVE FWED UCB POINTER AT END\n         L     R1,CURBLK          RESTORE R1 TO TOP OF NEW BLOCK\n*\nDOCALL   ST    R1,CURBLK          SAVE THE BLK POINTER AS CURRENT PTR\n         ST    R1,PGMPARM1+6      SAVE TABLE ADDR IN PASSED PARMS\n         LA    R1,UCBWORK         GET OUR WORK AREA ADDR\n         ST    R1,PGMPARM1+2      SAVE WORK AREA PTR IN PARMS\n         XC    PGMPARM1+10(4),PGMPARM1+10  - CLEAR THE RETURN CODE AREA\n         LA    R15,PGMPARM1\n         ST    R15,PARMLIST\n         OI    PARMLIST,X'80'     END OF LIST JUST THE SINGLE PARM.\n         L     R15,JEFTSR         GET THE TSO SERVICE FACILITY PGM ^\n*        CALL  (15),(FLAGS,PGMLEN,RETCODE,REASONC,ABENDCD,PARMLIST),VL\n         LA    R1,FLAGS\n         ST    R1,CALL01          SET UP\n         LA    R1,PGM               AND SAVE\n         ST    R1,CALL02              ALL OF THE PARMS\n         LA    R1,PGMLEN               FOR THE CALL -\n         ST    R1,CALL03\n         LA    R1,RETCODE                JUST LIKE THE\n         ST    R1,CALL04                   COMMENTED\n         LA    R1,REASONC                    CALL ABOVE...\n         ST    R1,CALL05\n         LA    R1,ABENDCD\n         ST    R1,CALL06\n         LA    R1,PARMLIST\n         ST    R1,CALL07\n         OI    CALL07,X'80'       INDICATE LAST IN LIST\n         LA    R1,CALL01\n         BALR  R14,R15            GO CALL OUR APF AUTH STUCBSCN ROUTINE\n*\n         LTR   R15,R15\n         BZ    GOODTSR            TEST RC FROM IKJEFTSR\nGOODTSR  L     R15,PGMPARM1+10    GET THE REAL RETURN CODE.\n         CH    R15,=H'4'          ARE THERE MORE UCB'S TO DO?\n         BE    RETEND              IF NOT THEN END THIS ROUTINE\n         B     NXTBLK             - OTHERWISE DO MORE, TILL DONE.\nRETEND   XR    R15,R15            CLEAR OUR RETURN CODE\n         B     0(R0,R9)           RETURN TO CALLER.\n\n\n\n\n\nUCBSCAN  DS    0H                 SCAN THE LIST OF UCB'S AND\n*\n** * ------------------------------------------------------------- * **\n** * -- UCBSCAN - RETURN UCB ADDRS ONE AT A TIME - TILL DONE.   -- * **\n** * -- PUT UCB ADDRESSES IN AREA UCBADDR - SET RC=4 WHEN NO    -- * **\n** * -- MORE UCBS ARE AVAILABLE TO BE RETURNED.                 -- * **\n** * -- (THE TABLE OF UCB ADDR WAS BUILT IN ROUTINE PREPUCBS)   -- * **\n** * ------------------------------------------------------------- * **\n*                                  GET 1ST (OR NEXT) UCB (COPY)\n*\n         CLC   RUCBP,=F'0'        IS RETURN UCB POINTER IN USE?\n         BNE   BOUNCE              IF SO, GET NEXT UCB ADDR IN TABLE\n         L     R2,UCBTOP          ELSE LOAD THE FIRST UCB TABLE BLOCK\n*\nNEWBLKU  EQU   *\n         LA    R2,4(R0,R2)        PAST BLK LEN...\n         ST    R2,RUCBP           SAVE AS THE CURRENT POINTER\n*\nBOUNCE   L     R2,RUCBP           GET THE RETURN UCB PTR\n         LA    R2,4(R0,R2)        BUMP FWD TO NEXT SLOT.\nTSTNBLK  CLC   0(4,R2),=F'0'      IS THIS A SIGNAL WORD?\n         BNE   GIVEIT             IF NOT JUST RETURN THE UCB ADDR.\n         CLC   4(4,R2),=F'0'      DID IT SIGNAL THE END OF THE TABLE?\n         BE    ENDUCBS            IF SO TELL THE CALLER\n*                                  - OTHERWISE, IT IS A FWD BLK PTR.\n         L     R2,4(R0,R2)        GET THE BLK POINTER\n         B     TSTNBLK            SAVE CURRENT BLOCK PTR\n*\nGIVEIT   ST    R2,RUCBP           SAVE THE NEW CURRENT RETURN UCB PTR\n         MVC   UCBADDR,0(R2)      MOVE THE NEW UCB ADDR FOR THEM.\n         XR    R15,R15\n         B     0(R0,R9)           RETURN TO CALLER WITH NEW UCB ADDR.\nENDUCBS  LA    R15,4(R0,R0)       SET A RETURN CODE OF FOUR\n         B     0(R0,R9)           AND RETURN TO CALLER.\n\n\n\n\n\nTSTMASKS DS    0H\n*\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * --TSTMASKS - FORMAT WHAT IS NEEDED BEFORE WE CALL LSPACE   -- * **\n** * --           AND CHECK IF THIS VOL/UCB MATCHES OUR MASKS.  -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n*\n         SAM31\n*\n* GET THIS UCB'S \"VOLSER\" IT IS PART OF THE DETAIL FORMATTING - BUT -\n*  WE NEED IT FOR VOLSER MASK COMPARISONS.\n         MVC   IVOLSER,UCBVOLI\n*\n*   FORMAT THIS UCB'S \"CUU\"\n*     THE CUU MIGHT ALSO BE NEEDED FOR THE $CLCL COMPARISONS.\n*\n         MVI   IUNITADD,C'0'          FOR OLD STYLE 3 CHAR CUU\nOLD_CUU  MVC   IUNITADD+1(3),UCBNAME    PRESUME OLD STYLE FIRST\n         CLC   IUNITADD+1(3),=C'UCB'    OLD STYLE 3 CHAR CUU  Q.\n         BNE   USE_CUU                  YES, USE \"AS IS\"\nNEW_CUU  UNPK  WORK5,UCBCHAN(3)         UNPACK (PNZ) 4 CHAR CUU\n         TR    WORK5(4),TRTAB-240       CONVERT TO DISPLAY FORM\n         MVC   IUNITADD,WORK5           NEW STYLE 4 CHAR CUU\nUSE_CUU  EQU   *                        USE CUU FIELD.\n         MVC   WORK5(4),IUNITADD\n         TR    WORK5(4),TRHEX\n         MVC   XUNITADD(4),WORK5\n*\n* PRETEST A MASK OF STAR ONLY ! - DON'T EVEN COMPARE - STAR ALWAYS WINS\n*\n         CLI   OUTTABL+1,X'01'     A ONE BYTE MASK ?\n         BNE   NOTSTAR             IF NOT IT CAN'T BE A STAR\n         CLI   OUTTABL+2,C'*'      IS IT A MASK OF ASTERISK?\n         BNE   NOTSTAR\n         MVI   OUTTABL,X'FF'       FLAG THAT WE FOUND A MATCH FOR MASK\n         B     TMRC000            DON'T DO ANYTHING - JUST SAY YES.\nNOTSTAR  EQU   *\n*\n*\n* HERE IS WHERE WE SEE IF ANY OF OUR MASKS MATCH THIS UCB/VOLSER\n*\n         LA    R7,OUTTABL         POINT TO OUR TABLE OF MASKS\n*   LOAD MASK INFO\nNXTMASK  XR    R5,R5              CLEAR LENGTH REG.\n         IC    R5,1(R7)           GET THE MASK LENGTH\n         LTR   R5,R5              CHECK FOR A ZERO LENGTH MASK\n         BZ    TMRC16             NO MORE TO CHECK SET BAD RC & RTN\n         LR    R6,R5              SAVE LENGTH ACROSS $CLCL ROUTINE\n         LA    R4,2(R7)           POINT TO DATA (THE MASK ITSELF)\n*\n* LOAD DEVICE TO COMPARE INFO - UCB OR VOLSER\n*\n         TM    FLAG,CHKUCBS       UCBS OR VOLSERS?\n         BO    CHKUCB              - B - IF UCBS\nCHKVOLS  LA    R14,UCBVOLI        POINT TO VOLSER\n         LA    R15,L'UCBVOLI       LENGTH OF A VOLSER\n         B     DOCLCL             GO DO THE FANCY COMPARE\n\nCHKUCB   LA    R14,IUNITADD       POINT TO THE FORMATTED UCB\n         LA    R15,4(R0)          UCB'S ARE ALWAYS FOUR DIGITS LONG\nDOCLCL   EQU   *\n         #CLCL R14,R4             DO THE COMPARISON.\n         BE    TMRC00             IF A MATCH FORMAT AND PRINT IT\n         LA    R7,2(R6,R7)          ELSE CHECK THE\n         B     NXTMASK                 OTHER MASKS FOR A MATCH\n\nTMRC00   EQU   *\n         MVI   0(R7),X'FF'        FLAG - MATCH FOUND FOR THIS MASK\n         LA    R7,2(R6,R7)         BUMP POINTER TO NEXT MASK\nTMRC000  SR    R15,R15               RC=00 TELLS MAINLINE TO PRINT IT.\n         B     0(R9)              NOW RETURN\n\nTMRC16   EQU   *\n         LA    R15,16(0)          NO MATCHING MASK FOUND - SKIP UCB\n         B     0(R9)\n\nLSPACE   DS    0H\n*\n** * ------------------------------------------------------------- * **\n** * -- LSPACE - GET EXTENDED INFORMATION FOR THE UCB ADDRESS.  -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\nDOLSPACE EQU   *                 CONTINUE\n*   DETERMINE IF WE CAN INTERROGATE (\"LSPACE\") THIS UCB\n         TM    FLAG,CHKUCBS       IS IT A UCB SEARCH?\n         BO    BYUNITEQ             IF SO CHECK UCB LIMITATIONS.\n\n*   FALL THROUGH\nBYVOLSER EQU   *                 ELSE CHECK VOLSER LIMITATIONS...\n         TM    UCBSTAT,UCBONLI   UCB ONLINE  Q.\n         BZ    LSRC04             SKIP THIS UCB IT'S NOT ONLINE\n*\n         CLI   UCBVOLI,C' '      VOL SER PRESENT  Q.\n         BE    LSRC04             NO VOLSER - (NOT MOUNTED) SKIP IT.\n*                                OTHERWISE -\n         B     DOLS              CONTINUE AND GET DETAIL INFORMATION.\n*\nBYUNITEQ EQU   *                 SEARCH BY UNIT=\n         TM    UCBSTAT,UCBONLI   UCB ONLINE  Q.\n         BZ    NOT_ONLI          NO\n*\n         CLI   UCBVOLI,C' '      VOL SER PRESENT  Q.\n         BNH   NOVOLSER          NO, NOT MOUNTED\n\n\n*   CLEAR WORK FIELDS\nDOLS     MVI   LSDATA,X'00'        CLEAR RETURN MSG AREA.\n         MVC   LSDATA+1(L'LSDATA-1),LSDATA\n*\n         LA    R4,LSDATA          GET ADDR OF RESULT IN REG. SO THAT\n*                                    THE LSPACE IS REENT.\n         MVC   LSD(20),LSL           MOVE THE MODEL TO LSD FIRST\n         LSPACE UCB=(3),DATA=(4),MF=(E,LSD)\n*\nLSRC00   XR    R15,R15            CLEAR R15 - RC=0\n         B     0(R0,R9)           RETURN TO CALLER\n*\nLSRC04   LA    R15,4(R0,R0)       R15 =4 - RC=4\n         B     0(R0,R9)           RETURN TO CALLER\n*\nLSRC08   LA    R15,8(R0,R0)       R15 =8 - RC=8\n         B     0(R0,R9)           RETURN TO CALLER\n*\n* BELOW ARE THE SUB CALLS FROM WITHIN LSPACE\n*\n*   UCB NOT ONLINE\nNOT_ONLI EQU   *                   UCB IS NOT ONLINE.\n         OI    FLAG,TSOTMP        FLAG THIS AS A TSO TYPE MESSAGE\n         MVC   IMOUNTA+0(L'N_ONLINE),N_ONLINE\n         B     LSRC08             RETURN AND PRINT LINE\n*\n*   NO VOLUME SERIAL FOR THIS UCB\nNOVOLSER EQU   *                   NO VOLSER FOR THIS UCB\n         OI    FLAG,TSOTMP        FLAG THIS AS A TSO TYPE MESSAGE\n         MVC   IMOUNTA+0(L'NVOLSMSG),NVOLSMSG\n         B     LSRC08             RETURN AND PRINT LINE\n\n\n\n\n\n\n\nPOSTFORM DS    0H                 FINAL FORMATTING OF THE DETAILS\n*\n** * ------------------------------------------------------------- * **\n** * -- POSTFORM -                                              -- * **\n** * --   FINAL POST PROCESSING FORMATTING ROUTINE.             -- * **\n** * ------------------------------------------------------------- * **\n*\n         LA    R4,LSDATA          GET ADDR OF RESULT OF LSPACE CALL\n         USING LSDSECT,R4\n         ZAP   FACTOR,=PL2'15'    MAKE THE FACTOR 15 FOR NOW...\n* -\n* - MOUNT ATTRIBUTES\n         TM    UCBSTAB,UCBBPRV    IS IS A PRIVATE MOUNT?\n         BNO   NOTPRIV\n         MVC   IMOUNTA(4),=C'PRVT' PRIVATE !\n         B     RESV               CHECK THE RESIDENCY STATUS\nNOTPRIV  TM    UCBSTAB,UCBBPUB    IS IS PUBLIC ?\n         BNO   NOTPUB\n         MVC   IMOUNTA(4),=C'PUBL' PUBLIC !\n         B     RESV               CHECK THE RESIDENCY STATUS\nNOTPUB   TM    UCBSTAB,UCBBSTR    IS IS A STORAGE VOLUME\n         BNO   NOTSTOR\n         MVC   IMOUNTA(4),=C'STOR' STORAGE!\n         B     RESV\nNOTSTOR  MVC   IMOUNTA(4),=C'????' I JUST KNOW KNOW ABOUT THIS.\n* -\n* - RESIDENCY STATUS\nRESV     EQU   *                  DEV STATUS-PERM RES,RSVD,REMOVABLE\n         MVC   IRESV(4),=C'REMV'  DEFAULT IS REMOVABLE\n         TM    UCBSTAT,UCBRESV    IS IT RESERVED?\n         BNO   NOTRESV\n         MVC   IRESV(4),=C'RSVD'  RESERVED!\nNOTRESV  TM    UCBSTAT,UCBPRES    IS IT PERM RESIDENT?\n         BNO   NOTPRES\n         MVC   IRESV(4),=C'PRES'  PERM/RES!\nNOTPRES  TM    UCBSTAT,UCBSYSR    IS IT A SYSRES?\n         BNO   NOTSYSR\n         MVC   IRESV(4),=C'SYSR'  SYSRES !\nNOTSYSR  EQU   *\n* -\n* - 31-BIT UCB ADDRESS\nFORMUCB  EQU   *                  FORMAT 31-BIT UCB NOW\n         UNPK  WORK9,UCBADDR(5)\n         TR    WORK9(8),TRTAB-240\n         MVC   IUCBAD,WORK9\n         MVC   WORK8,IUCBAD       GET THE 31-BIT ADDRESS VALUE\n         TR    WORK8,TRHEX         MAKE IT SORTABLE\n         MVC   XUCBAD,WORK8         AND SAVE IS AN NON-DISPLAYABLE\n* - DO FREE EXTENTS NOW -\n         L     R15,LSPDNEXT       GET # OF EXTENTS\n         CVD   R15,PACK8          BIN --> PACKED\n         MVC   IFREEXT(5),=X'2020202120'\n         ED    IFREEXT-1(6),PACK8+5\n* - DO FREE CYLINDERS FIRST -\n         L     R15,LSPDTCYL       GET # OF CYLINDERS\n         CVD   R15,PACK8\n         MVC   CL8,MASK8          MOVE AN EDIT MASK IN\n         ED    CL8,PACK8+4        FORMAT THE RESULTS\n         MVC   IFRECYL,CL8+2      IFRECYL IS ONLY SIX BYTES LONG\n         MP    PACK8,FACTOR       NOW CONVERT CYLS TO TRACKS\n* - DO FREE TRACKS NOW -\n         L     R15,LSPDTTRK       GET # OF TRACKS\n         CVD   R15,PACK82         RESULTS INTO A DIFFERENT PACK8 FIELD\n         AP    PACK8,PACK82       CYLS * FACTOR + TRKS = TOTAL TRKS\n         MVC   CL8,MASK8          GET AN EDIT MASK\n         ED    CL8,PACK8+4        FORMAT THE RESULT\n         MVC   IFRETRK(7),CL8+1   AND MOVE THE RESULT\n* - DO LARGEST CYLS NOW -\n         L     R15,LSPDLCYL       GET LARGEST # OF TRACKS\n         CVD   R15,PACK8\n         MVC   CL8,MASK8\n         ED    CL8,PACK8+4\n         MVC   ILGCYL,CL8+1       MOVE THE RESULT\n         MP    PACK8,FACTOR       TURN CYLS INTO TRKS\n* - DO LARGEST TRACKS NOW -\n         L     R15,LSPDLTRK       GET LARGEST # OF TRACKS\n         CVD   R15,PACK82           INTO A DIFFERENT PACKED FIELD\n         MVC   CL8,MASK8\n         AP    PACK8,PACK82       TRKS + (CYLS * TRKS/CYL) =TOT.TRKS.\n         ED    CL8,PACK8+4\n         MVC   ILGTRK,CL8+1\n* - DO INDEXED VTOC INFORMATION - *\n         MVC   IVTOC,=CL5' '      CLEAR IT TO START\n         TM    LSPDSTAT,LSPDIXDS IS IT INDEXED\n         BNO   NINDX              IF NOT SKIP  COMPLETELY\n         MVC   IVTOC,=C'EXIST'    MARK IT - AS EXISTS.\n         TM    LSPDSTAT,LSPDIXAC\n         BNO   NINDX              IF NOT SKIP OVER\n         MVC   IVTOC,=C'ACTIV'    ELSE MARK IT AS ACTIVE AS WELL.\nNINDX    EQU   *\n* - NOW DO SMS INDICATOR\n         TM    UCBFL5,UCBSMS      CHECK THE SMS MANAGED FLAG IN UCB\n         BNO   NOTSMS\n         MVC   ISMSIND,=C'SMS'      AND MARK IT ONE WAY\n         B     POSTDONE\nNOTSMS   MVC   ISMSIND,=C'NOT'        OR THE OTHER.\nPOSTDONE XR    R15,R15\n         B     0(R0,R9)           RETURN TO CALLER\n\n\n\n\n\nPUTLINE  EQU   *\n*\n** * ------------------------------------------------------------- * **\n** * -- PUTLINE - WRITE A LINE OF OUTPUT WITH PUTLINE           -- * **\n** * --   OR ADD A LINE OF DATA TO THE TABLE FOR ISPF OUTPUT.   -- * **\n** * --   THIS IS A SECOND LEVEL SUB RTN - RETURN VIA B 0(R8)   -- * **\n** * ------------------------------------------------------------- * **\n*--------------------------\n* - IF WE ARE IN HELP, OR THE THE TSO FLAG IS SET, USE PUTLINE -\n* - OTHERWISE, USE TBADD.\n         TM    FLAG,TSOTMP        IS IT A 1TIME ONLY TSO PUTLINE?\n         BO    DOPUTL\n         TM    FLAG,TSOFL         IS IT TSO\n         BO    DOPUTL             IF SO, JUST DO PUTLINE\n         TM    FLAG,FLAGHELP      IS IT A CALL FOR HELP?\n         BO    DOPUTL             IF SO, JSUT DO PUTLINE\n* - A FINAL TEST, WE MUST BE ISPF IF WE GOT HERE, BUT DOUBLE CHECK.\n         TM    FLAG,ISPFFL\n         BNO   PLERR              DO PUTLINE IF NOT ISPF - LOGIC ERROR\nISPFPUT  TBADD TABLE=TB01\n         BAL   R7,CLNDET          CLEAR OUT THE DETAILS FOR NEXT TIME.\n         B     0(R8)\n*\n* - DO A PUTLINE HERE\n*\nDOPUTL   ST    R1,IOPB+4          SAVE THE BUFFER ADDR IN CB STRUCT.\n         NI    FLAG,X'FF'-TSOTMP  TURN OFF ONE TIME FLAG, IF IT'S ON.\n         PUTLINE MF=(E,IOPL)        WRITE BUFFER\n         ST    R15,UCBR15SA       SAVE THE RETURN CODE FOR A SEC.\n         BAL   R7,CLNDET          GO CLEAR THE DETAIL AREA -\n         L     R15,UCBR15SA       RESTORE RC\n         LTR   R15,R15\n         BZR   R8                 RETURN IF PUT LINE WORKED.\nPLERR    LA    R5,PUTLINEE        GET THE ADDR OF THE STD ERR MSG.\n         WTO   TEXT=(5),MF=(E,WTOT)  WRITE A MSG TO SYSLOG ONLY.\n         LA    R15,16(0,0)        SET RC=16 TO INDICATE ERROR\n         B     0(R8)              AND RETURN TO CALLER\n         EJECT\n\n\n\n\n\n** * ------------------------------------------------------------- * **\n** * -- TBDISPL RTN - CALLED FROM CLEANUP - 2ND LEVEL RTN.      -- * **\n** * --  THE TBDISPL MACRO WILL CALL STLSSRT WHEN THE LITERAL   -- * **\n** * --  \"SORT\" IS ENTERED INTO THE FIRST 4 BYTES OF CMD LINE.  -- * **\n** * ------------------------------------------------------------- * **\nTBDISPL  EQU   *\n         TBTOP TABLE=TB01\n* NOTES ABOUT THE TBDISPL MACRO - IT IS INTENDED FOR USE WITH A\n* \"SELECTABLE\" TABLE - THE LC OPERAND DATA IS (OP1,VAL1,RTN1), WHERE\n* OP1 IS THE TABLE VARIABLE TO BE CHECKED FOR VALUE VAL1, AND IF IT IS\n* FOUND TO MATCH A CALL TO RTN1 IS MADE.\n*\n* THE OP1 VALUES ARE INTENDED TO BE SINGLE BYTE COLUMN SELECTION CMDS,\n* BUT IT WILL WORK WITH OUR FOUR BYTE COMPARISON, AS LONG AS WE CLEAR\n* THE COMMAND FIELD OURSELVES.\n*\n*\n* NOW FOR THE THE DISPLAY - REDISPLAY - SORT - ETC.\nTBD01    TBDISPL TABLE=TB01,PANEL=STLSTB01,                            X\n               LC=(SORTC,SORT,STLSSRT)\n* WHEN IT GETS BACK WE ARE DONE. - JUST END.\n         TBCLOSE TABLE=TB01\n         B     0(R8)\n\n\n\n\n\n\n\n*--------------------------\n* CONSTANTS\n*--------------------------\nVCONSCAN DC    V(STUCBSCN)        ADDR OF ROUTINE TO SCAN FOR UCB ADDRS\nLEGEND1  DC    0F'0',AL2(LENA,0)\n         DC C'        UNIT MNT  RES. FREE   FREE    FREE  LARGEST LARGEX\n               ST VTOC  SMS  31-BIT'\nLENA     EQU   *-LEGEND1\n*\nLEGEND2  DC    0F'0',AL2(LENB,0)\n         DC C' VOLSER ADDR ATR  STAT EXTNT  TRACKS  CYLS  TRACKS    CYLX\n               S  IND   IND UCB ADDR'\nLENB     EQU   *-LEGEND2\n*\n*\nBADMSG_1 DC    0F'0',AL2(LENMSG_1,0)\nNO_HITS  DC    CL12' ',C'NO MATCHING VOLUME SERIAL(S).'\nLENMSG_1 EQU   *-BADMSG_1\n*\nBADMSG_2 DC    0F'0',AL2(LENMSG_2,0)\nNO_UNITS DC    CL12' ',C'NO MATCHING UCB= VOLUME(S).'\nLENMSG_2 EQU   *-BADMSG_2\n*\nTRTAB    DC    C'0123456789ABCDEF'\nN_ONLINE DC    C' UCB IS NOT ONLINE'\nNVOLSMSG DC    C' UCB HAS NO VOLSER'\n*\n*\nHELPSP   DC    0F'0',AL2(HELPSPL,0)\n         DC    C' '                      SPACER LINE\nHELPSPL  EQU   *-HELPSP\n*\nHELP_1   DC    0F'0',AL2(HELP_1L,0)\n         DC    C'HELP FOR \"LSPACE\" COMMAND...'\nHELP_1L  EQU   *-HELP_1\n*\nHELP_2   DC    0F'0',AL2(HELP_2L,0)\n         DC    C'YOU MAY INVOKE HELP VIA \"LSPACE HELP\", \"LSPACE /H\", OR*\n                \"LSPACE\" WITH NO OPERANDS.'\nHELP_2L  EQU   *-HELP_2\n*\nHELP_3   DC    0F'0',AL2(HELP_3L,0)\n         DC    C'LSPACE WILL \"LIST SPACE\" INFO. ABOUT SELECTED DASD VOL*\n               UMES.'\nHELP_3L  EQU   *-HELP_3\n*\nHELP_4   DC    0F'0',AL2(HELP_4L,0)\n         DC    C'  COMMAND FORMAT:'\nHELP_4L  EQU   *-HELP_4\n*\nHELP_5   DC    0F'0',AL2(HELP_5L,0)\n         DC    C'    LSPACE  VOLSER    <-- A SINGLE VOLUME'\nHELP_5L  EQU   *-HELP_5\n*\nHELP_6   DC    0F'0',AL2(HELP_6L,0)\n         DC    C'    LSPACE  (VOLSER)  <-- A SINGLE VOLUME'\nHELP_6L  EQU   *-HELP_6\n*\nHELP_7   DC    0F'0',AL2(HELP_7L,0)\n         DC    C'    LSPACE  *         <-- TO DISPLAY ALL DASD VOLUMES'\nHELP_7L  EQU   *-HELP_7\n*\nHELP_8   DC    0F'0',AL2(HELP_8L,0)\n         DC    C' (WHERE VOLSER MAY BE FULLY QUALIFIED 6 CHARACTER VOLU*\n               ME SERIALS,'\nHELP_8L  EQU   *-HELP_8\n*\nHELP_9   DC    0F'0',AL2(HELP_9L,0)\n         DC    C'  OR MAY BE A PARTIAL VOLSER SUFFIXED BY THE \"*\" WILDC*\n               ARD.)'\nHELP_9L  EQU   *-HELP_9\n*\nHELP_10  DC    0F'0',AL2(HELP_10L,0)\n         DC    C'    LSPACE  U=XXXX    <-- TO DISPLAY A UCB BY 4 DIGIT *\n               UCB NUMBER'\nHELP_10L EQU   *-HELP_10\n*\nHELP_11  DC    0F'0',AL2(HELP_11L,0)\n         DC    C' (WHERE XXXX IS THE FULL 4 CHARACTER UCB NUMBER, OR MA*\n               Y BE'\nHELP_11L EQU   *-HELP_11\n*\nHELP_12  DC    0F'0',AL2(HELP_12L,0)\n         DC    C'  A PARTIAL UCB NUMBER SUFFIXED BY THE \"*\" WILDCARD.)'\nHELP_12L EQU   *-HELP_12\n*\nHELP_13  DC    0F'0',AL2(HELP_13L,0)\n         DC    C'    LSPACE  (VOLSER,VOLSER,VOLSER)  <-- A LIST OF VOLU*\n               MES.'\nHELP_13L EQU   *-HELP_13\n*\nHELP_14  DC    0F'0',AL2(HELP_14L,0)\n         DC    C'    LSPACE  U=(XXXX,XXXX,XXXX)      <-- A LIST OF UNIT*\n                NUMBERS.'\nHELP_14L EQU   *-HELP_14\n*\nPUTNOTSR DC    AL2(L'PUTNTSR)\nPUTNTSR  DC    C'STLSPACE - BASIC TSO SERVICE IKJEFTSR IS UNAVAILABLE -X\n               WE CANNONT CONTINUE - PGM IS ENDING.'\nPUTLINEE DC    AL2(L'PUTLERR)\nPUTLERR  DC    C'STLSPACE - ERROR WHILE TRYING TO USE PUTLINE TSOE SERVX\n               ICE - PGM IS ENDING.'\nCOMTAB1  DC    XL256'00'\n         ORG   COMTAB1+C','\n         DC    X'10'              SET A X'10' FOR A COMMA\n         ORG   COMTAB1+C')'\n         DC    X'FF'              SET A X'FF' FOR A \" ) \".\n         ORG   COMTAB1+256        RESET COUNTER TO HERE AND NOW.\n\nIOPBDUM  PUTLINE OUTPUT=(LEGEND1,,,DATA),MF=L\nWTOM     WTO   TEXT=(5),ROUTCDE=(11),MF=L\nLSL      LSPACE MF=L\n\nMODELLEN EQU   *-IOPBDUM          LENGTH OF AREA TO COPY INTO WORKAREA\n\nMASK8    DC    X'4020202020202120' TO EDIT OUTPUT NUMERICS\n         LTORG\nTRHEX    DC    CL256'00'\n         ORG   TRHEX+C'0'\n         DC    X'00010203040506070809'   TRANSLATE 0-9\n         ORG   TRHEX+C'A'\n         DC    X'101112131415'           TRANSLATE A-F\n         ORG   TRHEX+256           RETURN TO NORMAL COUNT\n\n\n\n\nSTLSSRT  #ENTRY MODID=NO,AMODE=24,RMODE=24,SAVE=YES,SAVEAREA=YES\n** * ------------------------------------------------------------- * **\n** * -- STLSSRT RTN - CALLED FROM TBDISPL MACRO.                -- * **\n** * ------------------------------------------------------------- * **\n         #BLANK SORTFLDS          CLEAR THIS BEFORE WE DO ANYTHING.\n\n* FIRST  SEE IF WE SORT UP OR DOWN\n** * ------------------------------------------------------------- * **\n** * -- AORDSRT RTN - FIND A TRAILING SINGLE A OR D IF PRESENT  -- * **\n** * --                                                         -- * **\n** * --  THIS ROUTINE WILL CHECK TO SEE IF THERE IS A SINGLE    -- * **\n** * -- TRAILING CHARACTER - AND IF IT IS EITHER AN \"A\" OR      -- * **\n** * -- A \"D\", FOR ASCENDING OR DECENDING                       -- * **\n** * -- RC=0=NOT FOUND;RC=4=A;RC=8=D                            -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n\n         LA    R6,SORTD           GET THE FIELD TO CHECK THEN ADD IT'S\n         LA    R6,L'SORTD(R6)       LENGTH TO GET TO THE END\n*                                 A(SORTD) + LENGTH OF SORTD -1\n         LA    R7,L'SORTD-3(0,0)  HOW FAR TO SCAN BACK (LENGTH - 4)\nCHKBLNK  BCTR  R6,R0              REDUCE POINTER (BACKUP IN CMD LINE)\n         CLI   0(R6),C' '         IS IT STILL A BLANK? - PROBABLY\n         BE    BMPAORD             - IF SO CHECK LIMIT, AND BACK UP 1\n*                                 ELSE WE HAVE SOMETHING\nISITAORD EQU   *                  SEE IF IT IS AN 'A' OR A 'D' OR NOT\n         BCTR  R6,R0              BACK UP ONE MORE ( TEST IF WE HAVE\n         CLC   0(2,R6),=C' A'     A BLANK, THEN AN \"A\"..\n         BE    SORTASC            IF SO THEN SET ASCENDING SORT\n         CLC   0(2,R6),=C' D'     MAYBE A DESCENDING SORT?\n         BE    SORTDES            IF SO SET SORT DESCENDING\n         B     SORTIT              ELSE JUST SORT - DEFAULT PREFRENCE\nBMPAORD  BCT   R7,CHKBLNK         REDUCE AND TEST THE SEARCH LIMIT...\n*                                 IF WE FALL THRU - WE DIDN'T FIND IT\nSORTIT   EQU   *                  DEFAULT SORT PREFRENCE SET HERE\n         MVC   SORTDIR,=C'D)'     SET A DEFAULT OF D\n         B     AORDONE\nSORTASC  EQU   *                  SORT ASCENDING IS SET HERE\n         MVC   SORTDIR,=C'A)'     SET A SORT DIRECTION OF \"A\"\n         B     AORDONE\nSORTDES  EQU   *                  SORT DESCENDING IS SET HERE\n         MVC   SORTDIR,=C'D)'     SET A SORT DIRECTION OF \"D\"\nAORDONE  EQU   *                  WE HAVE AN \"A\" OR A \"D\" IN SORTDIR\n*\n* NOW WHAT DID THEY WANT TO SORT BY?\n*\n         CLC   SORTD(6),=C' MOUNT' IS IT THE MOUNT STATUS?\n         BE    SRMNT\n         CLC   SORTD(4),=C' MNT'   IS IT THE MOUNT STATUS?\n         BE    SRMNT\n         CLC   SORTD(7),=C' MNTATR' S IT THE MOUNT STATUS?\n         BE    SRMNT\n         CLC   SORTD(4),=C' RES'   IS IT THE RESIDENCY STATUS\n         BE    SRRES\n         CLC   SORTD(5),=C' RES.'  IS IT THE RESIDENCY STATUS\n         BE    SRRES\n         CLC   SORTD(5),=C' STAT'  IS IT THE MOUNT STATUS?\n         BE    SRRES\n         CLC   SORTD(12),=C' FREE TRACKS'   FREE TRACKS?\n         BE    SRFTK\n         CLC   SORTD(10),=C' FREE CYLS'   FREE TRACKS?\n         BE    SRFCY\n         CLC   SORTD(11),=C' LARGEST TR'   LARGETS TRACKS?\n         BE    SRLTK\n         CLC   SORTD(12),=C' LARGEST CYL'   FREE TRACKS?\n         BE    SRLCY\n         CLC   SORTD(4),=C' SMS' IS IS A SORT VOLUME REQUEST?\n         BE    SRSMS\n         CLC   SORTD(4),=C' VOL' IS IS A SORT VOLUME REQUEST?\n         BE    SRVOL\n         CLC   SORTD(5),=C' UNIT' IS IT A UNIT ADDR REQUEST?\n         BE    SRUCB\n         CLC   SORTD(4),=C' UCB'  IS IT A SORT UCB ADDR REQUEST?\n         BE    SR31BIT\n         CLC   SORTD(7),=C' 31-BIT' IS IT A 31-IT UCB ADDR REQUEST?\n         BE    SR31BIT\n         CLC   SORTD(10),=C' FREE CYLS'   IS IT A SORT FREE CYLS?\n         BE    SRFCYL\n         CLC   SORTD(13),=C' LARGEST FREE' SS IT A SORT FREE CYLS?\n         BE    SRLCYL\n         CLC   SORTD(08),=C' LARGEST' SS IT A SORT FREE CYLS?\n         BE    SRLCYL\n         CLC   SORTD(9),=C' VTOC IND' IS IT A 31-IT UCB ADDR REQUEST?\n         BE    SRVTIND\n         CLC   SORTD(5),=C' VTOC' IS IT A VTOC INIDCATOR SORT?\n         BE    SRVTIND\n         CLC   SORTD(9),=C' FREE EXTNT'   FREE EXTENTS?\n         BE    SREXT\n         CLC   SORTD(6),=C' EXTNT'        FREE EXTENTS?\n         BE    SREXT\n         B     STLSRC00           ELSE JUST RETURN - WE ARE DONE.\n***\n*** SORT SETUPS HAPPEN HERE\n***\nSRMNT    EQU   *                  SORT BY MOUNT ATTRIBUTE\n         MVC   SORTFLDS(11),=C'(IMOUNTA,C,'\n         MVC   SORTFLDS+11(2),SORTDIR\n         B     GENSRT\nSRRES    EQU   *                  SORT BY RESIDENT STATUS\n         MVC   SORTFLDS(09),=C'(IRESV,C,'\n         MVC   SORTFLDS+09(2),SORTDIR\n         B     GENSRT\nSRFTK    EQU   *                  SORT BY FREE TRACKS\n         MVC   SORTFLDS(11),=C'(IFRETRK,C,'\n         MVC   SORTFLDS+11(2),SORTDIR\n         B     GENSRT\nSRFCY    EQU   *                  SORT BY FREE CYLINDERS\n         MVC   SORTFLDS(11),=C'(IFRECYL,C,'\n         MVC   SORTFLDS+11(2),SORTDIR\n         B     GENSRT\nSRLTK    EQU   *                  SORT BY LARGEST TRACKS\n         MVC   SORTFLDS(10),=C'(ILGTRK,C,'\n         MVC   SORTFLDS+10(2),SORTDIR\n         B     GENSRT\nSRLCY    EQU   *                  SORT BY LARGEST CYLINDER\n         MVC   SORTFLDS(10),=C'(ILGCYL,C,'\n         MVC   SORTFLDS+10(2),SORTDIR\n         B     GENSRT\nSRSMS    EQU   *                  SORT BY SMS INDICATOR\n         MVC   SORTFLDS(11),=C'(ISMSIND,C,'\n         MVC   SORTFLDS+11(2),SORTDIR\n         B     GENSRT\nSRVOL    EQU   *                  SORT BY VOLSER\n         MVC   SORTFLDS(11),=C'(IVOLSER,C,'\n         MVC   SORTFLDS+11(2),SORTDIR\n         B     GENSRT\nSRFCYL   MVC   SORTFLDS(11),=C'(IFRECYL,C,'\n         MVC   SORTFLDS+11(2),SORTDIR\n         B     GENSRT\nSRLCYL   MVC   SORTFLDS(10),=C'(ILGCYL,C,'\n         MVC   SORTFLDS+10(2),SORTDIR\n         B     GENSRT\nSRUCB    MVC   SORTFLDS(12),=C'(XUNITADD,C,'\n         MVC   SORTFLDS+12(2),SORTDIR\n         B     GENSRT\nSR31BIT  MVC   SORTFLDS(10),=C'(XUCBAD,C,'\n         MVC   SORTFLDS+10(2),SORTDIR\n         B     GENSRT\nSRVTIND  MVC   SORTFLDS(09),=C'(IVTOC,C,'\n         MVC   SORTFLDS+09(2),SORTDIR\n         B     GENSRT\nSRUNIT   MVC   SORTFLDS(12),=C'(IUNITADD,C,'\n         MVC   SORTFLDS+12(2),SORTDIR\n         B     GENSRT\nSREXT    MVC   SORTFLDS(11),=C'(IFREEXT,C,'\n         MVC   SORTFLDS+11(2),SORTDIR\n         B     GENSRT\nGENSRT   TBSORT TABLE=TB01,FIELDS=@SORTFLDS\nSTLSSTOP EQU   *\n         TBTOP TABLE=TB01\nSTLSRC00 EQU   *\n         #BLANK MYCMDS            THIS CLEARS THE COMMAND LINE.\nBACKONE  #EXIT                    RETURN TO CALLER\n\n\n\n\n\n\nWORKA1   DSECT                    TOP OF THE VARIABLE AREA\n*-------------------------*\n* VARIABLES IN WORK AREA  *\n*------- ----- -----------*\nSAVEAREA DS    18F\n*\n*\n* ! !  KEEP THE PUTLINE,WTO AND LSPACE MACROS TOGETHER, THEY ARE COPIED\n*      FROM MODEL STATEMENTS IN THE CONSTANT AREA - MOVE THEM AND DIE!\n*\nIOPB     PUTLINE OUTPUT=(SPACEMSG,,,DATA),MF=L   GEN PUTLINE BLOCKS\nWTOT     WTO   TEXT=(5),ROUTCDE=(11),MF=L\nLSD      LSPACE MF=L\n*\n* ! ! KEEP THE PUTLINE, WTO AND LSPACE MACROS TOGETHER, THEY ARE COPIED\n*\n*\n         UCBSCAN MF=(L,UCBSDS)\n*\n*\nJEFTSR   DS    F                  ADDRESS OF IKJEFTSR ROUTINE\nCALL01   DS    F                    PASSED PARM ADDR 1\nCALL02   DS    F                    PASSED PARM ADDR 2\nCALL03   DS    F                                 AND SO ON....\nCALL04   DS    F\nCALL05   DS    F\nCALL06   DS    F\nCALL07   DS    F\n*\n         DS    0F\nFLAGS    DS    XL1'00'            ALLWAYS ZERO\n         DS    XL1'01'            INVOKED FROM AN UNAUTH ENVIR.\n         DS    XL1'01'            SPECIFY DUMP - IF NEEDED\n         DS    XL1'02'            SPECIFIY A PROGRAM IS TO BE EXECED\nPGM      DS    C'STUCBSCN'        THE PROGRAM TO BE CALLED\nPGMLEN   DS    F'8'               THE LENGTH OF THE PGM TO BE CALLED\nRETCODE  DS    F                  PGM RETURN CODE\nREASONC  DS    F\nABENDCD  DS    F\n         DS    0F\nPARMLIST CALL  ,(PGMPARM1),VL,MF=L\n         DS    0F                 ALIGNMENT IS TO THE FULLWORD\n         DS    H                    AND A PAIR OF HALFWORDS\nPGMPARM1 DS    H'12'                 PUTS US BACK ON A WORD BOUNDARY\n         DS    F                   THE A(UCBWORK) WORK AREA FOR UCBSCAN\n         DS    F                   THE UCB ADDR ( NOT A POINTER )\n         DS    F                   THE RESULTANT RETURN CODE.\n*\n*\n*\nCMDLENF  DS    H                   FULL LENGTH OF COMMAND DATA\nCMDLEN1  DS    H                   LENGTH OF COMMAND DATA AREA 1\nCMDDATA1 DS    F                   ADDRESS OF COMMAND DATA AREA 1\n*\nUCBTOP   DS    F                  FIRST UCB ADDRESS BLOCK\nCURBLK   DS    F                  THE CURRENTLY USED UCB ADDRESS BLK\nRUCBP    DS    F                  THE RETURN UCB POINTER.\n*\nUCBR15SA DS    F                   SAVE R/C IN UCB31BIT\nUCBADDR  DS    A(0)                ADDRESS OF 31-BIT UCB\nWORK5    DS    CL5' '\nWORK8    DS    CL8' '\nWORK9    DS    CL9' '\nSORTFLDS DS    CL20               (FIELDNAME,C,A)\nFLAG     DS    X'00'              FLAG FOR HDR & UCB VS VOLS\nTSOLGND  EQU   B'10000000'        ONE TIME LEGEND PRINTING FLAG.\nISPFFL   EQU   B'01000000'        FLAG FOR ISPF VS TSO - THIS IS ISPF\nTSOFL    EQU   B'00100000'        FLAG FOR ISPF VS TSO - THIS IS TSO\nFLAGHELP EQU   B'00010000'        FLAG FOR HELP\nCHKUCBS  EQU   B'00001000'        CHK UCBS NOT VOLSERS IF FLAG IS SET\n*              B'XXXX X1XX'\n*              B'XXXX XX1X'\nTSOTMP   EQU   B'00000001'        TEMPORARY TSO PRINT FLAG - 1 MSG ONLY\nPARML    DS    H                  WORKING LEN OF PARMS\nPARMA    DS    F                  ^ TO THE PARM FIELD\n*\n*\nECB      DS    F'0'\n*\n         DS    0F                  ALIGN (IF NEEDED)\nUCBWORK  DS    100X                REQUIRED WORK AREA\n*\nIOPL     DS    0F                 OBJECT OF \"PUTLINE\"\nIOPLUPT  DC    F'0'\nIOPLECT  DC    F'0',A(ECB),A(IOPB)\n*\n** * ------------------------------------------------------------- * **\n** * --                                                         -- * **\n** * -- THE DETAIL PRINT LINE USED BY PUTLINE AND FOR ISPF      -- * **\n** * -- TABLE DISPLAYS ARE BELOW.                               -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n         DS    0F\nSPACEMSG DS    AL2(DETLNL,0)      DETAIL LINE.. HERE TO IUCBAD BELOW\nNULSPC0  DS    CL1                JUST A SPACER\nIVOLSER  DS    CL6                VOLSER\nNULSPC1  DS    CL1                JUST A SPACER\nIUNITADD DS    CL4                UNIT ADDRESS\nNULSPC2  DS    CL1                JUST A SPACER\nIMOUNTA  DS    CL4 XX-----.       MOUNT ATTRIBUTES\nNULSPC3  DS    CL1        \u00a6       JUST A SPACER\nIRESV    DS    CL4  ERR   \u00a6       RESIDENT STATUS\nNULSPC4  DS    CL1  MSG   \u00a6       JUST A SPACER\nIFREEXT  DS    CL5  AREA  \u00a6       FREE EXTENTS\nNULSPC5  DS    CL1        \u00a6       JUST A SPACER\nIFRETRK  DS    CL7 XX-----'       FREE TRACKS\nNULSPC6  DS    CL1                JUST A SPACER\nIFRECYL  DS    CL6                FREE CYLINDERS\nNULSPC7  DS    CL1                JUST A SPACER\nILGTRK   DS    CL7                LARGEST FREE TRACKS\nNULSPC8  DS    CL1                JUST A SPACER\nILGCYL   DS    CL7                LARGEST FREE CYLINDERS\nNULSPC9  DS    CL1                JUST A SPACER\nIVTOC    DS    CL5                INDEXED VTOC INDICATOR STATUS\nNULSPCA  DS    CL1                JUST A SPACER\nISMSIND  DS    CL3                SMS INDICATOR\nNULSPCB  DS    CL1                JUST A SPACER\nIUCBAD   DS    CL8                THE 31-BIT UCB ADDRESS\nDETLNL   EQU   *-IVOLSER\nLEND     EQU   *-SPACEMSG\nXUNITADD DS    CL4                UNIT ADDRESS (NON-DISPL)\nXUCBAD   DS    CL8                31-BIT ADDRESS (NON-DISPL)\nZTDMARK  DS    CL55               END OF TABLE DATA MARKER\n         ISPFVARS                 ISPF VARIABLES\nPACK8    DS    PL8                WORK AREA TO UNPACK DATA TO.\nPACK82   DS    PL8                WORK AREA TO UNPACK DATA (SECOND ONE)\nCL8      DS    CL8                WORK AREA FOR FORMATTED RESULTS FIELD\nFACTOR   DS    PL2\n*                                 IF NEEDED LSDATA OVFLWS INTO MYCMDS\nMYCMDS   DS    0CL60              COMMAND AREA ON TBDISPL PANEL\nSORTC    DS    CL4                CHECK THIS FIELD FOR \"SORT\"\nSORTD    DS    CL56               CHECK THIS FIELD FOR SORT DATA\n\n\nTB01SELS DS    CL4                 REQUIRED BY TBDISPL MACRO\n\nSORTDIR  DS    CL2                SORT DIRECTION =C'A)' OR =C'D)'\n*\n         DS    0F                 FULLWORD ALIGN THE LSDATA AREA\nLSDATA   DS    CL36               LSPACE DATA RETURN AREA\n*\n*\nOUTTABL  DS    20CL8              AREA TO BUILD A LIST OF MASKS -\n*                                   XL2 LEN, FOLLOWED BY DATA IE.\n*                                   X'0006',C'VOLSER' OR H'4',C'1234'\n@DYN1    DS    0X\n@DYNSIZE EQU   ((@DYN1-WORKA1+7)/8)*8 WORK AREA SIZE (DBL WORD BDY)\n@TABSIZ  EQU   ((1024*4)*128)    SIZE OF UCB TABLE 128K WORDS & DEVICES\n*TABSIZ  EQU   ((1024*8))         MINIMUM OF 8K FOR AUTOMATIC CLEARING!\n*\n*\n*              W   W  AAA  RRRR  N   N  III  N   N  GGGG\n*              W   W A   A R   R NN  N   I   NN  N G\n*              W W W AAAAA RRRR  N N N   I   N N N G  GG\n*              WW WW A   A R  R  N  NN   I   N  NN G   G\n*              W   W A   A R   R N   N  III  N   N  GGGG\n*\n* REDUCING THE @TABSIZ TO ANYTHING BELOW 8192 - WILL RESULT IN ERRORS\n*  8192 OR > GIVES US AUTOMATIC CLEARING TO ZEROS - OTHERWISE WE ARE\n*  GOING TO HAVE PROBLEMS.\n*\n*\n         IKJCPPL\nLSDSECT  LSPACE MF=(D,DATA)\n         CVT   DSECT=YES\n         IEFUCBOB LIST=NO,PREFIX=NO MAP THE UCB FIELDS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STLSTB0X": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x136O\\x01\\x136O\\x162\\x00 \\x00 \\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-12-30T00:00:00", "modifydate": "2013-12-30T16:32:03", "lines": 32, "newlines": 32, "modlines": 0, "user": "T0SM0"}, "text": ")ATTR\n  # TYPE(INPUT) PAD(_) CAPS(ON)\n  @ TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) COLOR(Green)\n  ~ TYPE(TEXT) INTENS(HIGH) CAPS(OFF) COLOR(Blue)\n  ^ TYPE(TEXT) INTENS(HIGH) CAPS(OFF) COLOR(Yellow)\n  \u00ac TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) COLOR(RED)\n)BODY\n\n\n                        - MVS Group STLSPACE Command -\n                  Return space information for selected Units\n+\u00acS1MSG              \u00acL1MSG\n+Use   %PF3/END+to exit\n%SELECT OPTION ===>_mycmds                                   %Scroll ===>_Z   +\n\n^       Unit MNT  res. free   free    free  largest largest vtoc  sms  31-bit\n^VOLSER Addr Atr  stat extnt  tracks  cyls  tracks    cyls  ind.  ind UCB Addr\n~=============================================================================\n)MODEL\n@Z     @Z   @z   @z   @z    @ifretrk@z     @ilgtrk @ilgcyl @ivtoc@z  @iucbad\n)INIT\n .ZVARS = '(ZSCED IVOLSER IUNITADD IMOUNTA IRESV IFREEXT IFRECYL ISMSIND)'\nVGET(ZSCED) PROFILE /*FILL SCROLL VARS */\n .CURSOR = MYCMDS\n   IF (&S1MSG \u00ac= '                    ') .ALARM = YES\n)REINIT\n   &S1MSG = '        '\n   &L1MSG = '        '\n   REFRESH(S1MSG,L1MSG)\n   .ALARM = NO\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STLSTB01": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x136O\\x01\\x136O\\x16\\x01\\x00 \\x00 \\x00\\x00\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-12-30T00:00:00", "modifydate": "2013-12-30T16:01:27", "lines": 32, "newlines": 32, "modlines": 0, "user": "T0SM0"}, "text": ")ATTR\n  # TYPE(INPUT) PAD(_) CAPS(ON)\n  @ TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) COLOR(Green)\n  ~ TYPE(TEXT) INTENS(HIGH) CAPS(OFF) COLOR(Blue)\n  ^ TYPE(TEXT) INTENS(HIGH) CAPS(OFF) COLOR(Yellow)\n  \u00ac TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) COLOR(RED)\n)BODY\n\n\n                        - MVS Group STLSPACE Command -\n                  Return space information for selected Units\n+\u00acS1MSG              \u00acL1MSG\n+Use   %PF3/END+to exit\n%SELECT OPTION ===>_mycmds                                   %Scroll ===>_Z   +\n\n^       Unit MNT  res. free   free    free  largest largest vtoc  sms  31-bit\n^VOLSER Addr Atr  stat extnt  tracks  cyls  tracks    cyls  ind.  ind UCB Addr\n~=============================================================================\n)MODEL\n@Z     @Z   @z   @z   @z    @ifretrk@z     @ilgtrk @ilgcyl @ivtoc@z  @iucbad\n)INIT\n .ZVARS = '(ZSCED IVOLSER IUNITADD IMOUNTA IRESV IFREEXT IFRECYL ISMSIND)'\nVGET(ZSCED) PROFILE /*FILL SCROLL VARS */\n .CURSOR = MYCMDS\n   IF (&S1MSG \u00ac= '                    ') .ALARM = YES\n)REINIT\n   &S1MSG = '        '\n   &L1MSG = '        '\n   REFRESH(S1MSG,L1MSG)\n   .ALARM = NO\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STUCBSCN": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00H\\x01\\x136O\\x01\\x136_\\t\"\\x02\\xb9\\x00\\x88\\x021\\xe3\\xf0\\xe2\\xd4\\xf0@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-12-30T00:00:00", "modifydate": "2013-12-31T09:22:48", "lines": 697, "newlines": 136, "modlines": 561, "user": "T0SM0"}, "text": "         PUNCH ' SETOPT PARM(AMODE=24,RMODE=24,AC=1,REUS=REFR) '\n          MACRO\n**********************************************************************\n*        Macro Name:     $EXIT                                       *\n*        Operation:      Standard Linkage - Exit                     *\n*        Usage:                                                      *\n**********************************************************************\n*                                                                    *\n* Syntax:                                                            *\n* Name     #EXIT     Keywords...                                     *\n*                                                                    *\n* Name     Module name                                               *\n*          Values:   Any valid module name                           *\n*          Default:  NULL                                            *\n*                                                                    *\n* Keywords:                                                          *\n* LTORG    Literal pool at end of module                             *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* RC       A literal value for a return code - or - if unspecified   *\n*          it will default to use the value in R15 - or - a          *\n*          register value in parenthesis is also accepted.           *\n*                                                                    *\n*           rc=7   sets rc=7                                         *\n*           rc=(7) sets rc= value in r7                              *\n*           rc=null defaults to rc= value in r15                     *\n* ** note **                                                         *\n*   r2 is used as a work reg, and may not be used to specify the     *\n*   return code value.                                               *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n* #EXIT        Standard Linkage - Exit                               *\n**********************************************************************\n&LABEL   #EXIT &LTORG=YES,&RC=     LITERAL POOL\n         GBLC  &EXRC               RETURN CODE\n         AIF   ('&RC' NE '').LABEL1\n&EXRC    SETC  '(R15)'\n         AGO   .SHOWLST\n.LABEL1  ANOP\n&EXRC    SETC  '&RC'\n.SHOWLST ANOP\n         MNOTE *,'#EXIT  Utilizing the following parameters:'\n         MNOTE *,'       LTORG=&LTORG'\n         MNOTE *,'       RC=&EXRC    '\n         GBLC  &GDWAL              Dynamic workarea length\n         GBLC  &GDWAR              Dynamic workarea register\n         GBLC  &GSAVE              Save registers\n         GBLC  &GSAVEAREA          Savearea\n.**********************************************************************\n.*       Return Code                                                  *\n.**********************************************************************\n         AIF   ('&LABEL' EQ '').NOLABL\n&LABEL   EQU   *                   EXIT\n.NOLABL  ANOP\n.**********************************************************************\n.*       TEST FOR INVALID RC REGISTER VALUES.                         *\n.**********************************************************************\n         AIF   ('&EXRC'(1,1) NE '(').NORCREG\n&REGRC   SETC  '&EXRC'(2,K'&EXRC-2)\n         AIF   ('&REGRC' EQ '2').BADRC\n         AIF   ('&REGRC' EQ 'R2').BADRC\n         AIF   ('&REGRC' EQ '1').BADRC\n         AIF   ('&REGRC' EQ 'R1').BADRC\n         AIF   ('&REGRC' EQ '0').BADRC\n         AIF   ('&REGRC' EQ 'R0').BADRC\n         AIF   ('&REGRC' EQ '13').BADRC\n         AIF   ('&REGRC' EQ 'R13').BADRC\n         AGO   .NORCREG\n.BADRC   MNOTE 12,' INVALID REGISTER &REGRC USED FOR RETURN CODE '\n         MONTE 12,' SPECIFY R3 THROUGH R12, OR R14, OR R15 INSTEAD.'\n         MEXIT\n.NORCREG ANOP\n.**********************************************************************\n.*       Dynamic Workarea                                             *\n.**********************************************************************\n         AIF   ('&GDWAL' EQ '').DWANO\n         PUSH  PRINT\n.*       PRINT OFF\n         MNOTE *,'  STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL (WORK AX\n               REA).'\n         LR    R2,R15             SAVE ORIGINAL RETURN CODE VALUE\n         STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL  RELEASE WORKAREA\n         LR    R15,R2             RESTORE ORIGINAL RETURN CODE VALUE\n         POP   PRINT\n         AGO   .DWAEND\n.DWANO   ANOP\n         AGO   .DWAEND\n.DWAEND  ANOP\n.**********************************************************************\n.*       SAVEAREA                                                     *\n.**********************************************************************\n         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X\n               ('&GSAVEAREA' EQ 'YES').SAYES\n         MNOTE 8,'#ENTRY INVALID SAVEAREA=&GSAVEAREA - YES/NO'\n         MEXIT\n.SAYES   ANOP\n         LR    R1,R13              SAVEAREA ADDRESS\n         L     R13,4(R13)          RESTORE PREVIOUS SAVEAREA\n         MNOTE *,'  STORAGE RELEASE,ADDR=(R1),LENGTH=72 (SAVE AREA).'\n         PUSH  PRINT\n         PRINT OFF\n         LR    R2,R15             SAVE ORIGINAL RETURN CODE VALUE\n         STORAGE RELEASE,ADDR=(R1),LENGTH=72  RELEASE SAVEAREA\n         LR    R15,R2             RESTORE ORIGINAL RETURN CODE VALUE\n         POP   PRINT\n         AGO   .SAEND\n.SANO    ANOP\n         XC    0(72,R13),0(R13)    Clear current savearea\n         SH    R13,=H'72'          Adjust savearea\n         AGO   .SAEND\n.SAEND   ANOP\n.**********************************************************************\n.*       Save Registers                                               *\n.**********************************************************************\n         AIF   ('&GSAVE' EQ 'YES').SAVEYES,                            X\n               ('&GSAVE' EQ 'NO').SAVENO\n         MNOTE 8,'#EXIT Invalid SAVE=&GSAVE - YES/NO'\n         MEXIT\n\n\n.SAVEYES ANOP\n         AIF   ('&EXRC'(1,1) NE '(').LABELC\n&REG     SETC  '&EXRC'(2,K'&EXRC-2)\n         LR    R15,&REG                  SET RETURN CODE\n         AGO   .LABELA\n.LABELC  AIF   ('&EXRC' EQ '').LABELA\n         LA    R15,&EXRC.(0,0)    SET RETURN CODE\n.LABELA  ANOP\n         RETURN (14,12),RC=(15)    RETURN CONTROL\n         AGO   .SAVEEND\n\n\n.SAVENO  ANOP\n         AIF   ('&EXRC'(1,1) NE '(').LABELD\n&REG     SETC  '&EXRC'(2,K'&EXRC-2)\n         LR    R15,&REG              SET RETURN CODE\n         AGO   .RCASIS1\n.LABELD  AIF   ('&EXRC' EQ '').LABELS\n         AGO   .RCASIS1\n.LABELS  ANOP\n         LA    R15,&EXRC.(0,0)       SET RETURN CODE\n.RCASIS1 ANOP\n         BR    R14                 Return Control\n\n\n.SAVEEND ANOP\n.**********************************************************************\n.*       LTORG                                                        *\n.**********************************************************************\n         AIF   ('&LTORG' EQ 'YES').LTORGYES,                           X\n               ('&LTORG' EQ 'NO').LTORGNO\n         MNOTE 8,'#EXIT Invalid LTORG=&LTORG - YES/NO'\n         MEXIT\n.LTORGYES ANOP\n         LTORG                     Literal pool\n.LTORGNO ANOP\n         MEND\n          MACRO\n**********************************************************************\n*                                                                    *\n* Usage:                                                             *\n* Name     #ENTRY    Keywords...                                     *\n*                                                                    *\n* Name     Module name                                               *\n*          Values:   Any valid module name                           *\n*          Default:  NULL                                            *\n*                                                                    *\n* Keywords:                                                          *\n* AMODE    Addressing mode                                           *\n*          Values:   24/31/ANY                                       *\n*          Default:  24                                              *\n*                                                                    *\n* BASE     Base registers                                            *\n*          Values:   (Rxx,Ryy,Rzz...) - Any valid registers          *\n*          Default:  (R12)                                           *\n*                                                                    *\n* DWA      Dynamic Workarea                                          *\n*          Values:   (ddd,lll,rrr,pp)                                *\n*                    ddd  - Dynamic workarea dummy section (DSECT)   *\n*                    lll  - Dynamic workarea size                    *\n*                    rrr  - Dynamic workarea base register           *\n*                    pp   - Dynamic workarea padding value in hex    *\n*          Default:  NULL - Dynamic workarea not used                *\n*                                                                    *\n* LOC      Location of getmained savearea/workarea                   *\n*          Values:   BELOW/ANY/RES                                   *\n*          Default:  RES                                             *\n*                                                                    *\n* MODID    Module identification                                     *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* RMODE    Residence mode                                            *\n*          Values:   24/ANY                                          *\n*          Default:  24                                              *\n*                                                                    *\n* SAVE     Save/restore registers at entry/exit                      *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* SAVEAREA Acquire savearea                                          *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* SPLEVEL  Macro level                                               *\n*          Values:   0/1/2/3/4/5/6                                   *\n*          Default:  0 - Use default macro level                     *\n*                                                                    *\n* SWA      Static Workarea                                           *\n*          Values:   (ccc,rrr)                                       *\n*                    ccc  - Static workarea control section (CSECT)  *\n*                    rrr  - Static workarea base register            *\n*          Default:  NULL - Static workarea not used                 *\n*                                                                    *\n**********************************************************************\n* #ENTRY       Standard Linkage - Entry                              *\n**********************************************************************\n&LABEL   #ENTRY &AMODE=31,         Addressing mode                     X\n               &RMODE=ANY,         Residence mode                      X\n               &BASE=(R12),        Base Registers                      X\n               &DWA=,              Dynamic workarea                    X\n               &LOC=RES,           LOCATION OF SAVEAREA/WORKAREA       X\n               &MODID=YES,         Module identification               X\n               &PARMS=0,           Parameters                          X\n               &SAVE=YES,          Save/restore regs at entry/exit     X\n               &SAVEAREA=YES,      Savearea                            X\n               &SPLEVEL=0,         Macro level                         X\n               &SUBPOOL=0,         Subpool of savearea/workarea        X\n               &SWA=               Static workarea\n         GBLA  &COMMON             Common Macros Level\n&COMMON  SETA  1                   Common Macros Level\n         MNOTE *,'#ENTRY Utilizing the following parameters:'\n         MNOTE *,'       AMODE=&AMODE'\n         MNOTE *,'       BASE=&BASE'\n         MNOTE *,'       DWA=&DWA'\n         MNOTE *,'       LOC=&LOC'\n         MNOTE *,'       MODID=&MODID'\n         MNOTE *,'       PARMS=&PARMS'\n         MNOTE *,'       RMODE=&RMODE'\n         MNOTE *,'       SAVE=&SAVE'\n         MNOTE *,'       SAVEAREA=&SAVEAREA'\n         MNOTE *,'       SPLEVEL=&SPLEVEL'\n         MNOTE *,'       SUBPOOL=&SUBPOOL'\n         MNOTE *,'       SWA=&SWA'\n         GBLC  &GAMODE             Addressing Mode\n         GBLC  &GCSECT             Control Section\n         GBLC  &GDWAL              Dynamic workarea length\n         GBLC  &GSAVE              Save registers\n         GBLC  &GSAVEAREA          Savearea\n         GBLC  &GDWAN              Dynamic workarea name\n         GBLC  &GDWAR              Dynamic workarea register\n         GBLC  &GSPLEVEL           Macro level\n         GBLC  &SYSSPLV            Macro level\n         GBLC  &GSUBPOOL           Subpool of savearea/workarea\n         GBLC  &GRMODE             Residence Mode\n         GBLC  &GSWAN              Static workarea name\n         GBLC  &GSWAR              Static workarea register\n         LCLA  &BRC                Base register count\n         LCLC  &BC                 Base register current\n         LCLC  &BP                 Base register Caller's\n         LCLC  &BRU                Base register using\n         LCLC  &DWALBL             Dynamic workarea label\n&GAMODE  SETC  '&AMODE'            Addressing Mode\n&GCSECT  SETC  '&LABEL'            Control Section\n&GRMODE  SETC  '&RMODE'            Residence Mode\n&GSAVE   SETC  '&SAVE'             Save registers\n&GSAVEAREA SETC '&SAVEAREA'        Savearea\n&GSPLEVEL SETC '&SPLEVEL'          Macro level\n&GSUBPOOL SETC  '&SUBPOOL'         Subpool of savearea/workarea\n         AIF   ('&LOC' EQ 'BELOW').LOCOK,                              X\n               ('&LOC' EQ 'ANY').LOCOK,                                X\n               ('&LOC' EQ 'RES').LOCOK\n         MNOTE 8,'#ENTRY Invalid LOC=&LOC - BELOW/ANY/RES/EXPLICIT'\n         MEXIT\n.LOCOK   ANOP\n&GCSECT  CSECT                     Control Section\n.**********************************************************************\n.*       AMODE                                                        *\n.**********************************************************************\n         AIF   ('&AMODE' EQ '24').AMODEOK,                             X\n               ('&AMODE' EQ '31').AMODEOK,                             X\n               ('&AMODE' EQ 'ANY').AMODEOK\n         MNOTE 8,'#ENTRY Invalid AMODE=&AMODE - 24/31/ANY'\n         MEXIT\n.AMODEOK ANOP\n&GCSECT  AMODE &GAMODE             Addressing Mode\n         AGO   .AMODEEND\n.AMODENO ANOP\n         AGO   .AMODEEND\n.AMODEEND ANOP\n.**********************************************************************\n.*       RMODE                                                        *\n.**********************************************************************\n         AIF   ('&RMODE' EQ '24').RMODEOK,                             X\n               ('&RMODE' EQ 'ANY').RMODEOK\n         MNOTE 8,'#ENTRY Invalid RMODE=&RMODE - 24/ANY'\n         MEXIT\n.RMODEOK ANOP\n&GCSECT  RMODE &GRMODE             Residence Mode\n         AGO   .RMODEEND\n.RMODENO ANOP\n         AGO   .RMODEEND\n.RMODEEND ANOP\n.**********************************************************************\n.*       SPLEVEL                                                      *\n.**********************************************************************\n         AIF   ('&SPLEVEL' EQ '0').SPLVLNO,                            X\n               ('&SPLEVEL' EQ '1').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '2').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '3').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '4').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '5').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '6').SPLVLYES\n         MNOTE 8,'#ENTRY Invalid SPLEVEL=&SPLEVEL - 0/1/2/3/4/5/6'\n         MEXIT\n.SPLVLYES ANOP\n         SPLEVEL SET=&SPLEVEL      Set macro level\n         AGO   .SPLVLEND\n.SPLVLNO ANOP\n         SPLEVEL SET               Use default macro level\n         AGO   .SPLVLEND\n.SPLVLEND ANOP\n.**********************************************************************\n.*       Module identification                                        *\n.**********************************************************************\n         AIF   ('&MODID' EQ 'NO').MODIDNO,                             X\n               ('&MODID' EQ 'YES').MODIDYES\n         MNOTE 8,'#ENTRY Invalid MODID=&MODID - YES/NO'\n         MEXIT\n.MODIDYES ANOP\n         J     OVRIDENT            BRANCH AROUND MODULE IDENTIFICATION\n.*       B     4+1+24+3(0,R15)     BRANCH AROUND MODULE IDENTIFICATION\n         DC    AL1(24)             Module identification length\n         DC    CL8'&GCSECT'        CSECT name\n         DC    CL8'&SYSDATE'       Assembly date\n         DC    CL8'&SYSTIME'       Assembly time\n         DC    AL3(0)              Filler\nOVRIDENT DS    0H\n         AGO   .MODIDEND\n.MODIDNO ANOP\n         AGO   .MODIDEND\n.MODIDEND ANOP\n.**********************************************************************\n.*       Register / Savearea Equates                                  *\n.**********************************************************************\n         AIF   (D'R0).REGEQUNO\nA0       EQU    0                  Access register\nA1       EQU    1                  Access register\nA2       EQU    2                  Access register\nA3       EQU    3                  Access register\nA4       EQU    4                  Access register\nA5       EQU    5                  Access register\nA6       EQU    6                  Access register\nA7       EQU    7                  Access register\nA8       EQU    8                  Access register\nA9       EQU    9                  Access register\nA10      EQU   10                  Access register\nA11      EQU   11                  Access register\nA12      EQU   12                  Access register\nA13      EQU   13                  Access register\nA14      EQU   14                  Access register\nA15      EQU   15                  Access register\nC0       EQU    0                  Control register\nC1       EQU    1                  Control register\nC2       EQU    2                  Control register\nC3       EQU    3                  Control register\nC4       EQU    4                  Control register\nC5       EQU    5                  Control register\nC6       EQU    6                  Control register\nC7       EQU    7                  Control register\nC8       EQU    8                  Control register\nC9       EQU    9                  Control register\nC10      EQU   10                  Control register\nC11      EQU   11                  Control register\nC12      EQU   12                  Control register\nC13      EQU   13                  Control register\nC14      EQU   14                  Control register\nC15      EQU   15                  Control register\nF0       EQU    0                  Floating point register\nF1       EQU    2                  Floating point register\nF2       EQU    4                  Floating point register\nF3       EQU    6                  Floating point register\nR0       EQU    0                  General register - System\nR1       EQU    1                  General register - System\nR2       EQU    2                  General register - System\nR3       EQU    3                  General register\nR4       EQU    4                  General register\nR5       EQU    5                  General register\nR6       EQU    6                  General register\nR7       EQU    7                  General register\nR8       EQU    8                  General register\nR9       EQU    9                  General register\nR10      EQU   10                  General register\nR11      EQU   11                  General register\nR12      EQU   12                  General register\nR13      EQU   13                  General register - Savearea\nR14      EQU   14                  General register - System\nR15      EQU   15                  General register - System\nSAVEPL1  EQU    0                  Savearea PL1\nSAVEPREV EQU    4                  Savearea Previous (from caller)\nSAVENEXT EQU    8                  Savearea Next (from target)\nSAVER14  EQU   12                  Savearea R14 (Return address)\nSAVER15  EQU   16                  Savearea R15 (Entry address)\nSAVER0   EQU   20                  Savearea R0\nSAVER1   EQU   24                  Savearea R1\nSAVER2   EQU   28                  Savearea R2\nSAVER3   EQU   32                  Savearea R3\nSAVER4   EQU   36                  Savearea R4\nSAVER5   EQU   40                  Savearea R5\nSAVER6   EQU   44                  Savearea R6\nSAVER7   EQU   48                  Savearea R7\nSAVER8   EQU   52                  Savearea R8\nSAVER9   EQU   56                  Savearea R9\nSAVER10  EQU   60                  Savearea R10\nSAVER11  EQU   64                  Savearea R11\nSAVER12  EQU   68                  Savearea R12\n&GREGEQU SETA  1\n.REGEQUNO ANOP\n.**********************************************************************\n.*       Save Registers                                               *\n.**********************************************************************\n         AIF   ('&GSAVE' EQ 'YES').SAVEYES,                            X\n               ('&GSAVE' EQ 'NO').SAVENO\n         MNOTE 8,'#ENTRY Invalid SAVE=&GSAVE - YES/NO'\n         MEXIT\n.SAVEYES ANOP\n         SAVE  (14,12)             Save caller's registers\n         AGO   .SAVEEND\n.SAVENO  ANOP\n.SAVEEND ANOP\n.**********************************************************************\n.*       Base Register(s)                                             *\n.**********************************************************************\n         AIF   ('&BASE' EQ 'NOBASE').NOBASE\n         AIF   (T'&BASE NE 'O').BASEOK\n         MNOTE 8,'#ENTRY Missing Required Keyword BASE'\n         MEXIT\n.**** ELSE BASE=0 = NOBASE\n         AGO   .NOBASE\n.BASEOK  ANOP\n         LR    &BASE(1),R15        Load base register\n&BRC     SETA 1\n.BASENXT ANOP\n         AIF   (&BRC EQ N'&BASE).BASEEND\n&BRC     SETA  &BRC+1              Increment base register count\n&BC      SETC  '&BASE(&BRC)'       Current base register\n&BP      SETC  '&BASE(&BRC-1)'     Caller's base register\n         LA    &BC,4095(,&BP)      Load base register\n         LA    &BC,1(,&BC)         Load base register\n         AGO   .BASENXT\n.BASEEND ANOP\n&BRU     SETC  '&BASE'\n         AIF   ('&BASE'(1,1) NE '(').USING1\n&BRU     SETC  '&BASE'(2,K'&BASE-2)\n.USING1  ANOP\n         USING &LABEL,&BRU         Reference control section\n.NOBASE  ANOP\n.**********************************************************************\n.*       Savearea                                                     *\n.**********************************************************************\n         AIF   ('&GSAVEAREA' EQ 'NO').SANO,                            X\n               ('&GSAVEAREA' EQ 'YES').SAYES\n         MNOTE 8,'#ENTRY Invalid SAVEAREA=&GSAVEAREA - YES/NO'\n         MEXIT\n.SAYES   ANOP\n         LR    R3,R0               Caller's R0\n         LR    R4,R1               Caller's R1\n         MNOTE *,'  STORAGE OBTAIN,LENGTH=72,LOC=&LOC    GETMAIN'\n         PUSH  PRINT\n         PRINT OFF\n         STORAGE OBTAIN,LENGTH=72,LOC=&LOC OBTAIN SAVEAREA\n         POP   PRINT\n         ST    R13,SAVEPREV(,R1)   Savearea previous\n         ST    R1,SAVENEXT(,R13)   Savearea next\n         LR    R13,R1              Reference savearea\n         LR    R0,R3               Caller's R0\n         LR    R1,R4               Caller's R1\n         AGO   .SAEND\n.SANO    ANOP\n         LA    R15,72(,R13)        Acquire savearea\n         ST    R13,SAVEPREV(,R15)  Savearea previous\n         ST    R15,SAVENEXT(,R13)  Savearea next\n         LR    R13,R15             Reference savearea\n         AGO   .SAEND\n.SAEND   ANOP\n.**********************************************************************\n.*       Dynamic Workarea                                             *\n.**********************************************************************\n         AIF   (N'&DWA EQ 0).DWANO\n         AIF   (N'&DWA EQ 3).PADDFLT\n         AIF   (N'&DWA EQ 4).DWAOK\n         MNOTE 8,'#ENTRY Invalid DWA=&DWA'\n         MNOTE 8,'Syntax: DWA=(DSECT_NAME,LENGTH,REG)'\n         MEXIT\n.DWAOK   ANOP\n&GDWAP   SETC  '&DWA(4)'           DYNAMIC WORKAREA PAD VALUE\n         AGO   .PADSET\n.PADDFLT ANOP\n&GDWAP   SETC  '00'                DEFAULT PAD VALUE IS HEX 00\n.PADSET  ANOP\n&GDWAN   SETC  '&DWA(1)'           DYNAMIC WORKAREA NAME\n&GDWAL   SETC  '&DWA(2)'           Dynamic workarea length\n&GDWAR   SETC  '&DWA(3)'           Dynamic workarea register\n&DWALBL  SETC  'DWA'.'&SYSNDX'     Dynamic workarea label\n&DWALBL2 SETC  'DW2'.'&SYSNDX'     Dynamic workarea label\n         LR    R3,R0               Caller's R0\n         LR    R4,R1               Caller's R1\n         MNOTE *,'  STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&LOC  GETMAIN'\n         PUSH  PRINT\n         PRINT OFF\n         STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&LOC OBTAIN WORKAREA\n         POP   PRINT\n         LR    &GDWAR,R1           Set Dynamic workarea base\n         USING &GDWAN,&GDWAR       Reference Dynamic workarea\n         LR    R14,&GDWAR          Dynamic workare address\n         LRL   R15,&DWALBL2        DYNAMIC WORKAREA LENGTH\n         J     &DWALBL\n&DWALBL2 DC    A(&GDWAL)\n&DWALBL  EQU   *\nGDWCLR   EQU   *\n         SR    R0,R0               ZERO THE FROM LENGTH\n         LA    R1,(X'&GDWAP')(R0,R0) SET FILL CHAR\n*        IC    R1,=X'00'           SET FILL CHAR\n         SLL   R1,24               SHIFT LEFT (0 LENGTH)\n*        ICM   R14,B'1000',=X'&GDWAP'\n         MVCL  R14,R0              CLEAR WITH MVCL\n         LR    R14,&GDWAR          RESTORE DYNAM WORKAREA ADDR\n         LR    R0,R3               CALLER'S R0\n         LR    R1,R4               CALLER'S R1\n         AGO   .DWAEND\n.DWANO   ANOP\n&GDWAN   SETC  ''                  DYNAMIC WORKAREA NAME\n&GDWAL   SETC  ''                  DYNAMIC WORKAREA LENGTH\n&GDWAR   SETC  ''                  Dynamic workarea register\n         AGO   .DWAEND\n.DWAEND  ANOP\n.**********************************************************************\n.*       Static Workarea                                              *\n.**********************************************************************\n         AIF   (N'&SWA EQ 0).SWANO\n         AIF   (N'&SWA EQ 2).SWAOK\n         MNOTE 8,'#ENTRY Invalid SWA=&SWA'\n         MNOTE 8,'Syntax: SWA=(CSECT_NAME,REG)'\n         MEXIT\n.SWAOK   ANOP\n&GSWAN   SETC  '&SWA(1)'           Static workarea name\n&GSWAR   SETC  '&SWA(2)'           Static workarea register\n.*       L     &GSWAR,=A(&GSWAN)   SET STATIC WORKAREA BASE\n         LARL  &GSWAR,&GSWAN       SET STATIC WORKAREA BASE\n         USING &GSWAN,&GSWAR       Reference static workarea\n         AGO   .SWAEND\n.SWANO   ANOP\n&GSWAN   SETC  ''                  Static workarea name\n&GSWAR   SETC  ''                  Static workarea register\n         AGO   .SWAEND\n.SWAEND  ANOP\n         AGO   .MEND\n.MEND    ANOP\n         COPY  ASMMSP * SUPPORT FOR HLASM STRUCTURED MACROS\n         MEND\n         TITLE 'STUCBSCN - TSO LIST SPACE COMMAND'\nSTUCBSCN CSECT\n*\n** * ------------------------------------------------------------- * **\n** * --  SCAN UCBS - RETURN THE UCB ADDRESSES ONE AT A TIME,    -- * **\n** * --  WHEN DONE SET AN RC=04.  THE CALLER MUST PROVIDE A     -- * **\n** * --  DEDICATED WORK AREA THAT THE UCBSCAN MACRO WILL USE.   -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * --  PARMS - ON ENTRY - R1 POINTS TO AN ADCON LIST THAT     -- * **\n** * --  POINTS TO THE FOLLOWING;                               -- * **\n** * --                                                         -- * **\n** * --  R1 ^  LIST OF FULLWORDS                                -- * **\n** * --       WORD 1 POINTS TO THE UCBSCAN RESUABLE WORK AREA.  -- * **\n** * --       WORD 2 WILL HOLD THE RESULTANT UCB ADDRESS OR 0'S.-- * **\n** * --       WORD 3 WILL HOLD A RETURN CODE -                  -- * **\n** * --           F'0' = ALL IS GOOD UCB ^ RETURNED.            -- * **\n** * --           F'4' = NO MORE UCBS TO BE RETURNED.           -- * **\n** * --           F'8' = BAD STUFF HAPPENED - NO PLANNED FOR.   -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * --  ON RETURN EITHER ZEROS OR A UCB ADDR IS PROVIDED.      -- * **\n** * --  R15 = 0 FOR A GOOD CALL WITH THE NEXT UCB ADDR GIVEN.  -- * **\n** * --  R15 = 4 NO MORE UCBS EXIST TO BE PASSED.               -- * **\n** * --  R15 > 4 SOME KIND OF ERROR OCCURED.                    -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * --  THE PROGRAM IS REENT, AND SHOULD BE LINKED AC=1.       -- * **\n** * --  SINCE IT IS INTENDED TO BE CALLED FROM TSO CMDS, IT    -- * **\n** * --  SHOULD BE ADDED TO IKJTSOXX AS AN AUTH PGM.            -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * --  REG. USAGE                                             -- * **\n** * --                                                         -- * **\n** * --  R0                  R8  -                              -- * **\n** * --  R1 -                R9  - BAS LVL1                     -- * **\n** * --  R2                  R10 -                              -- * **\n** * --  R3 -                R11 - DYNAM WORK AREA (BASE)       -- * **\n** * --  R4 -                R12 - BASE REG 1                   -- * **\n** * --  R5                  R13 - S/A                          -- * **\n** * --  R6                  R14 - LINKAGE                      -- * **\n** * --  R7                  R15 - RC                           -- * **\n** * --                                                         -- * **\n** * --                                                         -- * **\n** * ------------------------------------------------------------- * **\n*\nSTUCBSCN #ENTRY DWA=(WORKA1,@DYNSIZE,R11),                             X\n               BASE=(12),MODID=YES,                                    X\n               AMODE=24,RMODE=24\n\n*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*.~                                                                   \u00a6\n*.~         M   M  AAA   III  N   N L      III  N   N EEEEE           \u00a6\n*.~         MM MM A   A   I   NN  N L       I   NN  N E               \u00a6\n*.~         M M M AAAAA   I   N N N L       I   N N N EEEE            \u00a6\n*.~         M   M A   A   I   N  NN L       I   N  NN E               \u00a6\n*.~         M   M A   A  III  N   N LLLLL  III  N   N EEEEE           \u00a6\n*.~                                                                   \u00a6\n*.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n         L     R8,0(R1)           GET THE ADDRESS OF THE WORK AREA\n         LH    R2,0(R8)           R2 HAS THE LENGTH OF THE PASSED PARM\n         CH    R2,=H'12'          WAS IT TWELVE BYTES LONG?\n         BNE   MAJERROR           IF NOT QUIT NOW\n*\n         L     R5,2(R8)           GET THE WORK AREA ADDR.\n         L     R6,6(0,R8)         GET THE ADDR OF THE RESULT FIELD\n         LA    R7,10(0,R8)        GET THE ADDR OF THE RC VALUE\n*\n         SAM31\n*\n         MODESET MODE=SUP          (BECAUSE OF OPTIONS BELOW)\n*\n*  R5=^ UCB SCAN WORK AREA ; R6 = RETURNED UCB ADDR OR ZERO ; R7 = RC\n*\n         ST    R6,BLKADDR         SAVE BLOCK PTR\n         L     R8,4(R0,R6)        GET THE # OF SLOTS FROM GIVEN TABLE\n         XC    4(4,R6),4(R6)      CLEAR THE WORD - FOR POSSIBLE FWD PTR\n         BCTR  R8,R0              REDUCE # WORDS BY TWO FOR SIGNAL\n         BCTR  R8,R0                WORD, AND ZEROS(END) OR FWD PTR.\n         LA    R6,4(R0,R6)        BUMP POINTER JUST BEFORE FIRST UCB\n* R8 = # OF SLOTS WE CAN POSSIBLY FILL WITH UCB ADDRESSES.\nSCANLOP  LA    R6,4(R0,R6)         = POINTER TO CURRENT UCB IN TABLE\n*                                  GET 1ST (OR NEXT) UCB (COPY)\n*\n         UCBSCAN ADDRESS,          NEED ACTUAL UCB ADDRESS.            *\n               WORKAREA=(5),       REUSABLE FUNCTION WORK AREA         *\n               UCBPTR=(6),         RECEIVES POINTER TO THE UCB         *\n               NOPIN,                                                  *\n               NOTFIND=YES,                                            *\n               DYNAMIC=YES,        GET STATIC AND DYNAMIC CHANGES      *\n               RANGE=ALL,          RECEIVE 3 AND 4 DIGIT ADDR.         *\n               DEVCLASS=DASD,      RECEIVE ONLY DASD DEVICES           *\n               LOC=ANY,            GET 24 AND 31 BIT RESIDENT UCBS     *\n               MF=(E,UCBSDS)\n*\n\n\n         LTR   R15,R15            DID WE GET ONE?\n         BNE   RC04               IF NOT THEN WE ARE DONE..\n         BCT   R8,SCANLOP         DID WE FILL THE TABLE YET?\nRC00     MODESET MODE=PROB\n         MVC   0(4,R7),=F'0'      SET AN INTERNAL RETURN CODE OF 0\nRC00X    #EXIT LTORG=NO,RC=00\n*\n*\nRC04     MODESET MODE=PROB\n         MVC   0(4,R7),=F'4'      SET AN INTERNAL RETURN CODE OF 4\nMAJERROR #EXIT LTORG=NO,RC=04\n\n\n*--------------------------\n* CONSTANTS\n*--------------------------\n         LTORG\n\nWORKA1   DSECT                    TOP OF THE VARIABLE AREA\n*\n*-------------------------*\n* VARIABLES IN WORK AREA  *\n*------- ----- -----------*\n*\n         UCBSCAN MF=(L,UCBSDS)\n*\nBLKADDR  DS    F\n*\n@DYN1    DS    0X\n@DYNSIZE EQU   ((@DYN1-WORKA1+7)/8)*8 WORK AREA SIZE (DBL WORD BDY)\n*\n*\n*\n         CVT   DSECT=YES\n         IEFUCBOB LIST=NO,PREFIX=NO MAP THE UCB FIELDS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT906/FILE906.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT906", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}