{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011816000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE346.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE346.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x07'", "DS1TRBAL": "b'^\\xb2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x8a\\x00\\x03\\x02\\x8a\\x00\\x07\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x16\\x1f\\x01\\x02\\x16\\x1f\\x11(\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-06-10T00:00:00", "modifydate": "2002-06-10T11:28:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 448    FILE:  346\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT448.FILE346\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,475 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/10/02    11:28:02    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x19\\x00\\x98&?\\x01\\x02\\x16\\x1f\\x11$\\x00\\x19\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1998-09-20T00:00:00", "modifydate": "2002-06-10T11:24:19", "lines": 25, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "Bob Break's JES2 exits.\n\n\n    Here are some examples of Bob Break's JES2 exits.\n\n    The following exits are for JES2 6.0.4 (OS/390 Release 2.5):\n\n       HASPEX20,  HASPEX44,  HASP2604 -  Exits 20, 44, 2 respectively\n\n       HASP2520 is Exit 2 for JES2 5.2.0, and is provided, so you\n                can see how to convert an exit from JES2 5.2.0 to\n                JES2 6.0.4\n\n    Note $$EXIT44 points out a change that has to be made for\n       OS/390 Release 2.10.\n\n\n\nBob Break                            Sam Golob\nSt. Louis, Mo.                       P.O. Box 906\ncb7485@momail.sbc.com                Tallman, NY 10982-0906\nbbreak@swbell.net                    845-362-0190\n314-340-9301                         sbgolob@attglobal.net\n314-845-2018                         sbgolob@aol.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$EXIT44": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x02\\x16\\x1f\\x01\\x02\\x16\\x1f\\x11#\\x00\"\\x00\"\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-06-10T00:00:00", "modifydate": "2002-06-10T11:23:05", "lines": 34, "newlines": 34, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: CBT file 346 JES2 Exit44 Change needed.\nDate: Mon, 10 Jun 2002 11:08:11 -0400\nFrom: Bill.Ruff@carefirst.com\nTo: mzelden@flash.net\nCC: sbgolob@attglobal.net,\n     \"Jack Schudel\" <schudel@ufl.edu>\n\nMark,\nI implemented the suggestions containd in $SNGLTSO.txt under\nMVSUTIL.html on your Website.  (On File 434 of the CBT Tape.)\n\nI had make make a modification to JES exit44 in order to get it\nto work correctly in an OS390 R10 environment.\n\nThe source statement:\n\n      MVI   JCTCNVRC,0          Set Converter JCL OK flag\n\nhad to be changed to:\n\n      XC    JCTCNVRC,JCTCNVRC   Set Converter JCL OK flag\n\nJCTCNVRC is a fullword field in OS390R10.  It may have been a\n1-byte filed in earlier release.\n\nI'm passing this along as an aid to others who may want to use\nit.\n\nLooks like lots of good stuff on your site.  I'll be checking it\nout more closely.\n\nThanks,\nBill\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE346": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x13\\x00\\x99\\x08?\\x01\\x02\\x16\\x1f\\x11'\\x00\\x19\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2002-06-10T11:27:13", "lines": 25, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 346 IS FROM BOB BREAK OF ST. LOUIS, MISSOURI AND CONTAINS *   FILE 346\n//*           JES2 EXITS WHICH WORK AT HIS SITE, BUT WHICH CAN BE   *   FILE 346\n//*           USED AS CODING EXAMPLES.  THREE EXITS ARE FOR JES2    *   FILE 346\n//*           RELEASE 6.0.4 (OS/390 RELEASE 2.5), AND ONE IS AT     *   FILE 346\n//*           THE JES2 5.2.0 LEVEL TO SHOW HOW IT WAS CONVERTED     *   FILE 346\n//*           TO THE OS/390 JES2.                                   *   FILE 346\n//*                                                                 *   FILE 346\n//*       HASP2604  -  EXIT 2  AT THE JES2 6.0.4 LEVEL              *   FILE 346\n//*                                                                 *   FILE 346\n//*       HASPEX20  -  EXIT 20 AT THE JES2 6.0.4 LEVEL              *   FILE 346\n//*                                                                 *   FILE 346\n//*       HASPEX44  -  EXIT 44 AT THE JES2 6.0.4 LEVEL              *   FILE 346\n//*                                                                 *   FILE 346\n//*       HASP2520  -  EXIT 2  AT THE JES2 5.2.0 LEVEL WHICH WAS    *   FILE 346\n//*                      CONVERTED TO HASP2604.                     *   FILE 346\n//*                                                                 *   FILE 346\n//*       $$EXIT44  -  Small change to Exit 44, for OS/390 2.10     *   FILE 346\n//*                                                                 *   FILE 346\n//*       Bob Break                                                 *   FILE 346\n//*       St. Louis, Mo.                                            *   FILE 346\n//*       cb7485@momail.sbc.com                                     *   FILE 346\n//*       bbreak@swbell.net                                         *   FILE 346\n//*       314-340-9301                                              *   FILE 346\n//*       314-845-2018                                              *   FILE 346\n//*                                                                 *   FILE 346\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HASPEX20": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x971\\x1f\\x00\\x98%\\x9f\\x08I\\x00\\xf3\\x00\\xf3\\x00\\x00\\xc3\\xc2\\xf7\\xf4\\xf8\\xf5@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1997-11-07T00:00:00", "modifydate": "1998-09-16T08:49:00", "lines": 243, "newlines": 243, "modlines": 0, "user": "CB7485"}, "text": "*********************************************************************\n*                                                                   *\n*                        HASP EXIT 20                               *\n*                                                                   *\n*     This exit gets control at end of job input and performs       *\n*     the following functions:                                      *\n*                                                                   *\n*     > Sets the JES2 reader time and date in the JQE and           *\n*       checkpoints the JQE.                                        *\n*     > Forces batch jobs to output class \"E\".                      *\n*                                                                   *\n*     Entry point: EXIT20                                           *\n*                                                                   *\n*     Input registers:                                              *\n*        R0     Code indicating                                     *\n*         - 0 = Normal end of input                                 *\n*         - 4 = Job has JECL error                                  *\n*        R1-9   N/A                                                 *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    PCE address                                         *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0-14  Unchanged                                           *\n*        R15:   Return code                                         *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-8   Work registers                                      *\n*        R9     EXIT20 workarea address                             *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    PCE address                                         *\n*        R14-15 Work and linkage registers                          *\n*                                                                   *\n*     Note: This module is for use with JES2 Version 6.0.4          *\n*                                                                   *\n*     Author: Bob Break                                             *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL                  Copy HASP global symbols\n\nHASPEX20 $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               PSA,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JQE,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $RDRWORK,                                               X\n               $SQD,                                                   X\n               $TRE,                                                   X\n               $USERCBS,                                               X\n               $XECB\n\nEXIT20  $ENTRY BASE=R12            Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\n         USING JCT,R10\nEXIT000 $SAVE  NAME=EXIT20         Save caller's registers\n         LR    R12,R15             Set base register\n         LA    R1,EXIT20WL         Get workarea length\n         LA    R1,3(,R1)           Round up to word boundary\n         SRL   R1,2                Convert to number of words\n         LA    R1,1(,R1)           Add one for identifier\n        $GETWORK WORDS=(R1),USE=EX20\n         LA    R1,4(,R1)           Point past identifier\n         LR    R9,R1               Set workarea address\n         LA    R15,EXIT20WL        Set move to length\n         XR    R1,R1               Set move from length and pad\n         MVCL  R14,R0              Clear workarea\n         USING EXIT20W,R9\n\n*********************************************************************\n*                                                                   *\n*        Obtain the current time of day and date, and then set      *\n*        the values into the JQE.                                   *\n*                                                                   *\n*********************************************************************\n\nEXIT100 $DOGJQE ACTION=(FETCH,READ),JQE=PCEJQE\n         LR    R1,R0               Get JQA address\n         USING JQE,R1\n         CLC   JQERDRON,$ZEROS     Time previously set in JQE?\n         BNE   EXIT199             Yes - branch, continue\n         DROP  R1                  JQE\n         L     R2,RDWSQD           Get SQD address\n         USING SQD,R2\n         XC    SQDLEVEL+1(SQDEND-(SQDLEVEL+1)),SQDLEVEL+1  Clear SQD\n         DROP  R2                  SQD\n         LR    R0,R9               Set EXIT20 workarea as parm\n        $SUBIT RDRTIME,SQDADDR=(R2),PARM0=(R0)\n         LTR   R15,R15             $SUBIT successful?\n         BNZ   EXIT199             No - branch, bypass ckpt update\n\n*********************************************************************\n*                                                                   *\n*        Obtain access to the ckpt queues and checkpoint the JQE.   *\n*                                                                   *\n*********************************************************************\n\n        $QSUSE                     Request access to checkpoint queues\n        $DOGJQE ACTION=(FETCH,UPDATE),JQE=PCEJQE\n         LR    R1,R0               Get JQA address\n         USING JQE,R1\n         MVC   JQERDRON,EX20TIME   Set reader time in JQE\n         MVC   JQERDTON,EX20DATE   Set reader date in JQE\n        $DOGJQE ACTION=RETURN,CBADDR=JQE\n         DROP  R1                  JQE\nEXIT199  DS    0H\n\n*********************************************************************\n*                                                                   *\n*        Force batch jobs to msgclass \"E\".                          *\n*                                                                   *\n*********************************************************************\n\nEXIT200  CLI   JCTJOBID,C'J'       Batch job?\n         BNE   EXIT299             No - branch, continue\n         MVI   JCTMCLAS,C'E'       Reset to msgclass 'E'\nEXIT299  DS    0H\n\n*********************************************************************\n*                                                                   *\n*        Return to caller.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   S     R9,$F4               Point to EXIT20 workarea\n        $RETWORK (R9)               Return workarea\n         XR     R15,R15             Set routine return code\n        $RETURN RC=(R15)            Return to caller\n\n         DROP  R9,R10               EXIT20W, JCT\n\n         LTORG\n\n\n***************************************************************\n*                                                             *\n*        RDRTIME - Obtain time of day and date.               *\n*                                                             *\n*   Function: This routine is called by $SUBIT.  It issues    *\n*             the MVS TIME macro to obtain the current time   *\n*             of day and date.                                *\n*                                                             *\n*   Linkage: Via $CALL from the general subtask facility      *\n*                                                             *\n*   Environment: Subtask                                      *\n*                                                             *\n*   Recovery: General purpose subtask recovery only.          *\n*                                                             *\n*   Register usage (entry/exit):                              *\n*                                                             *\n*    Reg       Value on entry             Value on exit       *\n*    ---       --------------             -------------       *\n*    R0        EXIT20 workarea address    Unchanged           *\n*    R1-9      N/A                        Unchanged           *\n*    R10       JCT address                Unchanged           *\n*    R11       HCT address                Unchanged           *\n*    R12       HASPEX20 base register     Unchanged           *\n*    R13       PCE address                Unchanged           *\n*    R14       Return address             Unchanged           *\n*    R15       Entry address              Unchanged           *\n*                                                             *\n*   Register usage (internal):                                *\n*                                                             *\n*    R0-8      Work                                           *\n*    R9        RDRTIME workarea address                       *\n*    R10       JCT                                            *\n*    R11       HCT                                            *\n*    R12       RDRTIME base register                          *\n*    R13       Save area for MVS services                     *\n*    R14-15    Work and linkage                               *\n*                                                             *\n*   Output from RDRTIME subtask:                              *\n*        EX20TIME - Current time of day (hhmmssht)            *\n*        EX20DATE - Current date (mmddyyyy)                   *\n*                                                             *\n***************************************************************\n\n&ANVIRON SETC  'SUBTASK'          Indicate subtask environment\n         USING RDRTIME,R12        Set RDRTIME addressability\nRDRTIME  BAKR  R14,0              Stack caller's psw/registers\n         LR    R12,R15            Set RDRTIME base register\n         LR    R3,R0              Set EXIT20 workarea address\n        $GETHP TYPE=GET,VERSIZE=RDRTIMWL  Obtain workarea\n         LR    R9,R1              Save workarea address\n         USING RDRTIMW,R9\n         LR    R14,R1             Get address into work reg\n         LA    R15,RDRTIMWL       Set move to length\n         XR    R1,R1              Set move from length and pad\n         MVCL  R14,R0             Clear workarea\n         ST    R13,RDRTR13        Save PCE address\n         LA    R13,RDRTSAVE       Set save area address for TIME\n         TIME  DEC,RDRTIMWT,DATETYPE=MMDDYYYY,LINKAGE=SYSTEM,          X\n               MF=(E,TIMELIST)\n         L     R13,RDRTR13        Restore PCE address\n         USING EXIT20W,R3\n         MVC   EX20TIME,RDRTIMWT  Set time in return area\n         MVC   EX20DATE,RDRTIMWT+8  Set date in return area\n         DROP  R3                 EXIT20W\n        $GETHP TYPE=FREE,CELL=(R9)  Free RDRTIME workarea\n         PR                       Restore environment/return\n         DROP  R9,R12             RDRTIMW, RDRTIME base\n&ANVIRON SETC  'JES2'             Cancel subtask environment\n\n         LTORG\n\n        $MODEND\n\nRDRTIMW  DSECT                    RDRTIME subtask workarea\nRDRTR13  DS    A                  R13 save area\nRDRTSAVE DS    18F                RDRTIME register save area\nRDRTIMWT DS    CL16               Return area for time and date\nTIMELIST TIME  LINKAGE=SYSTEM,MF=L  Parm list for TIME macro\nRDRTIMWL EQU   *-RDRTIMW          RDRTIME workarea length\n\nEXIT20W  DSECT                    EXIT20 workarea\nEX20TIME DS    CL8                Reader time\nEX20DATE DS    CL8                Reader date\nEXIT20WL EQU   *-EXIT20W          EXIT20 workarea length\n\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HASPEX44": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x971\\x1f\\x00\\x98%\\x9f\\x08I\\x00g\\x00h\\x00\\x00\\xc3\\xc2\\xf7\\xf4\\xf8\\xf5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-11-07T00:00:00", "modifydate": "1998-09-16T08:49:00", "lines": 103, "newlines": 104, "modlines": 0, "user": "CB7485"}, "text": "*********************************************************************\n*                                                                   *\n*                        HASP EXIT 44                               *\n*                                                                   *\n*     This exit gets control at end of jcl conversion and performs  *\n*     the following functions:                                      *\n*     > Allows a TSO user to concurrently logon to more than one    *\n*       system in a JES2 MAS complex.                               *\n*                                                                   *\n*     Entry point: EXIT44                                           *\n*                                                                   *\n*     Input registers:                                              *\n*        R0     N/A                                                 *\n*        R1     XPL parameter list address                          *\n*        R2-10  N/A                                                 *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    PCE address                                         *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0-14  Unchanged                                           *\n*        R15:   Return code                                         *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-1   Work registers                                      *\n*        R2     XPL address                                         *\n*        R3-9   Work registers                                      *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    PCE address                                         *\n*        R14-15 Work and linkage registers                          *\n*                                                                   *\n*     Note: This module is for use with JES2 Version 6.0.4          *\n*                                                                   *\n*     Author: Bob Break                                             *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL                  Copy HASP global symbols\n\nHASPEX44 $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               PSA,                                                    X\n               $CADDR,                                                 X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $JCT,                                                   X\n               $JQE,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $XIT,                                                   X\n               $XPL\n\nEXIT44  $ENTRY BASE=R12            Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\n         USING JCT,R10\nEXIT000 $SAVE  NAME=EXIT44         Save caller's registers\n         LR    R12,R15             Set base register\n         LR    R2,R1               Set XPL address\n         USING XPL,R2\n\n*********************************************************************\n*                                                                   *\n*        Check if the job being converted is for a duplicate TSO    *\n*        logon.  If so, allow the logon to proceed.                 *\n*                                                                   *\n*********************************************************************\n\nEXIT100  TM    X044COND,X044DLGN   Duplicate TSO logon?\n         BZ    EXIT199             No - branch, continue\n         MVI   JCTCNVRC,0          Set converter jcl ok flag\nEXIT199  DS    0H\n\n*********************************************************************\n*                                                                   *\n*        Return to caller.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   XR     R15,R15            Set routine return code\n        $RETURN RC=(R15)           Return to caller\n\n         DROP   R2,R10             XPL, JCT\n\n         LTORG\n\n        $MODEND\n\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HASP2520": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98%\\x9f\\x00\\x98%\\x9f\\x08H\\x01\\xcc\\x01\\xcc\\x00\\x00\\xc3\\xc2\\xf7\\xf4\\xf8\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-09-16T00:00:00", "modifydate": "1998-09-16T08:48:00", "lines": 460, "newlines": 460, "modlines": 0, "user": "CB7485"}, "text": "*********************************************************************\n*                                                                   *\n*                        HASP EXIT 2                                *\n*                                                                   *\n*     Functions:                                                    *\n*                                                                   *\n*     1. To scan a jcl job card for a symbolic jobclass on the      *\n*        CLASS= keyword and to convert this symbolic designation to *\n*        a standard jobclass (A-Z, or 0-9).  An installation        *\n*        defined table (HASP2TAB) is used to equate the symbolic    *\n*        designations with the standard classes.  A symbolic        *\n*        jobclass may be composed of one to eight alphanumeric      *\n*        characters.                                                *\n*                                                                   *\n*     2. To scan a jcl job card for a symbolic msgclass on the      *\n*        MSGCLASS= keyword and to convert this symbolic designation *\n*        to a standard msgclass (A-Z, or 0-9).  An installation     *\n*        defined table (HASP2TAB) is used to equate the symbolic    *\n*        designations with the standard classes.  A symbolic        *\n*        msgclass may be composed of one to eight alphanumeric      *\n*        characters.                                                *\n*                                                                   *\n*     Entry point: EXIT02                                           *\n*                                                                   *\n*     Input registers:                                              *\n*        R0     Code indicating type of job statement being scanned *\n*               0  - initial JOB statement image                    *\n*               4  - subsequent JOB statement continuation image    *\n*        R1     Address of 3-word parameter list                    *\n*        R2-9   N/A                                                 *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    PCE address                                         *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0-13  N/A                                                 *\n*        R14    Return address                                      *\n*        R15    Return code                                         *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-1   Work                                                *\n*        R2     Job statement image buffer                          *\n*        R3-R9  Work                                                *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    PCE address                                         *\n*        R14-15 Work and linkage                                    *\n*                                                                   *\n*     NOTES: This exit uses the JCTUSER3 and JCTUSER4 fields.       *\n*            HASP2TAB is built by started task HASP2BLD, which      *\n*            reads entries from the SUPT.HASP2TAB dataset.          *\n*            This module is for use with JES2 Version 5.2.0         *\n*                                                                   *\n*                                                                   *\n*     Author: Bob Break                                             *\n*                                                                   *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL                  Copy HASP globals\n\nHASPEX02 $MODULE ENVIRON=JES2,                                         X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $JCT,                                                   X\n               $JQE,                                                   X\n               $KIT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               RPL,                                                    X\n               $USERCBS,                                               X\n               $XECB\n\nEXIT02  $ENTRY BASE=R12            EXIT02 routine entry point\n\n*********************************************************************\n*        Save caller's registers and establish addressabilities.    *\n*********************************************************************\n\n        $SAVE                      Save caller's registers\n         LR    R12,R15             Load base register\n         ST    R0,PCEUSER1         Save entry register 0\n\n         USING JCT,R10             Establish JCT addressability\n         L     R2,0(,R1)           Load job statement image buffer\n         LA    R1,WRKSIZE          Get workarea size\n         LA    R1,3(,R1)           Round up to word boundary\n         SRL   R1,2                Convert to number of words\n         LA    R1,1(,R1)           Add one for identifier\n        $GETWORK WORDS=(R1),USE=EX02\n         LA    R1,4(,R1)           Point past identifier\n         ST    R1,PCEUSER0         Save storage address\n         LR    R9,R1               Set workarea address\n         USING EXIT02W,R9\n         XC    RETCODE,RETCODE     Clear EXIT02 return code\n         L     R0,PCEUSER1         Restore entry register 0\n         LTR   R0,R0               Continuation job statement?\n         BZ    EXIT010             No - branch, continue\n         CLC   JCTUSER3(8),$BLANKS  Symbolic jobclass already found?\n         BNE   EXIT400             Yes - branch, check msgclass\nEXIT010  MVI   JCLASS,C' '         Clear actual jobclass\n         MVC   JOBCLASS,$BLANKS    Clear symbolic jobclass\n         ICM   R1,15,PCEJQE        Get JQE address\n         BZ    EXIT050             Branch - no JQE\n         USING JQE,R1\n         MVC   JQESYMJC(8),$BLANKS  Clear symbolic jobclass in JQE\n         DROP  R1                  JQE\nEXIT050  MVI   MCLASS,C' '         Clear actual msgclass\n         MVC   MSGCLASS,$BLANKS    Clear symbolic msgclass\n\n*********************************************************************\n*        Find and save the pointer to HASP2TAB.                     *\n*********************************************************************\n\n         L     R15,CVTPTR          Get pointer to CVT\n         ICM   R15,15,CVTUSER-CVT(R15)  Get USERCVT pointer\n         BZ    RETURN1             Branch - no USERCVT\n         ICM   R15,15,UCVTJES2-UCVT(R15)  Get JES2UVT pointer\n         BZ    RETURN1             Branch - no JES2UVT\n         ICM   R15,15,JES2SYMT-JES2UVT(R15)  Get HASP2TAB pointer\n         BZ    RETURN1             Branch - no HASP2TAB\n         ST    R15,H2TAB           Save HASP2TAB pointer\n\n*********************************************************************\n*        Search the job statement image for the CLASS= keyword      *\n*********************************************************************\n\nEXIT100  LA    R3,64               Set maximum search length\n         LR    R4,R2               Preserve buffer pointer in R2\nEXIT150  CLC   0(7,R4),=C',CLASS=' CLASS= keyword?\n         BE    EXIT200             Yes\n         CLC   0(7,R4),=C' CLASS=' CLASS= Keyword?\n         BE    EXIT200             Yes\n         LA    R4,1(,R4)           Bump to next buffer position\n         BCT   R3,EXIT150          Branch - check next position\n         B     EXIT400             No CLASS= - branch, check MSGCLASS\n\n*********************************************************************\n*        The CLASS= keyword has been found.  Now see if a symbolic  *\n*        jobclass has been specified.                               *\n*********************************************************************\n\nEXIT200  LA    R4,7(,R4)           Point to actual jobclass\n         LA    R5,1(,R4)           Past possible length 1 jobclass\n         CLI   0(R5),C' '          Length 1 jobclass followed by blank?\n         BE    EXIT390             Yes - do not translate symbolic\n         CLI   0(R5),C','          Length 1 jobclass followed by comma?\n         BE    EXIT390             Yes - do not translate symbolic\n\n*********************************************************************\n*        Isolate the symbolic jobclass and length.                  *\n*********************************************************************\n\n         LA    R5,1(,R5)           Point to next position\n         LA    R3,6                Set loop control\nEXIT210  CLI   0(R5),C' '          Blank after symbolic jobclass?\n         BE    EXIT220             Yes - branch, get symbolic length\n         CLI   0(R5),C','          Comma after symbolic jobclass?\n         BE    EXIT220             Yes - branch, get symbolic length\n         LA    R5,1(,R5)           Point to next position\n         BCT   R3,EXIT210          Branch - check next position\nEXIT220  SR    R5,R4               Get symbolic jobclass length\n         STH   R5,JCLASSL          Save symbolic jobclass length\n         BCTR  R5,0                Minus 1 for execute\n         MVC   JOBCLASS(0),0(R4)   Executed instruction\n         EX    R5,*-6              Save symbolic jobclass\n         ICM   R1,15,PCEJQE        Get JQE address\n         BZ    EXIT230             Branch - no JQE\n         LH    R5,JCLASSL          Get symbolic jobclass length back\n         BCTR  R5,0                Minus 1 for execute\n         USING JQE,R1\n         MVC   JQESYMJC(8),$BLANKS  Preset symbolic class to blanks\n         MVC   JQESYMJC(0),0(R4)   Executed instruction\n         EX    R5,*-6              Set symbolic class in JQE\n         DROP  R1                  JQE\n\n*********************************************************************\n*        Issue the WTO with the symbolic jobclass information.      *\n*        Save the symbolic jobclass in JCTUSER3/JCTUSER4 for        *\n*        insertion into the JSABUVT in later processing.            *\n*********************************************************************\n\nEXIT230  MVC   MSGAREA(MSGLEN),MSGSKEL  Set message skeleton\n         MVC   MSGJOBID,JCTJOBID   Set jobid in message area\n         MVC   MSGJNAM,JCTJNAME    Set jobname in message area\n         MVC   MSGSYMJ,JOBCLASS    Set jobclass in message area\n         LA    R1,MSGAREA          Point to WTO message area\n         LA    R0,MSGLEN           Set WTO message length\n        $WTO   (R1),(R0),JOB=NO    Issue the WTO\n         MVC   JCTUSER3(8),JOBCLASS  Set symbolic jobclass in JCT\n\n*********************************************************************\n*        Search HASP2TAB for a match for the symbolic jobclass.     *\n*********************************************************************\n\n         ICM   R6,15,H2TAB         Point to the HASP2TAB module\n         BZ    RETURN1             No HASP2TAB - return to caller\n         USING HASP2TAB,R6\n         LH    R3,HASP2CNT         Get number of HASP2TAB entries\n         MVC   JCLASS,HASP2JER     Save error jobclass\n         L     R6,HASP2SCP         Point to symbolic class entries\n         DROP  R6                  HASP2TAB\n         USING H2SYMCLS,R6\nEXIT240  CLI   H2SYMTYP,C'J'       Symbolic jobclass entry?\n         BNE   EXIT250             No - branch, check next entry\n         CLC   JOBCLASS,H2SYMNAM   Jobclass match?\n         BE    EXIT260             Yes - convert to actual jobclass\nEXIT250  LA    R6,H2ENTLEN(,R6)    Point to next table entry\n         BCT   R3,EXIT240          Branch - check next table entry\n\n*********************************************************************\n*        The specified symbolic jobclass has not been found in      *\n*        HASP2TAB.  Check if a error jobclass has been supplied     *\n*        in HASP2TAB.  If so, use it.  Otherwise, return to the     *\n*        caller and let the job get a jcl error.                    *\n*********************************************************************\n\n         CLI   JCLASS,C' '         Error jobclass supplied?\n         BNE   EXIT300             Yes - replace symbolic jobclass\n         MVC   RETCODE,$F8         Tell JES to cancel job w/output\n         NI    JCTXMASK,B'11011111'    Turn off job's EXIT2 mask\n*                         ||||||||       so this exit is not entered\n*                 EXITS = 01234567         again for continuation\n*                                            statements\n         B     RETURN1             Branch - return to caller\n\n*********************************************************************\n*        The symbolic jobclass has been found in HASP2TAB.          *\n*        Translate it to an actual jobclass and put it in the JCT.  *\n*********************************************************************\n\nEXIT260  MVC   JCLASS,H2SYMMAP     Save mapped jobclass\nEXIT300  MVC   JCTJCLAS,JCLASS     Set execution jobclass\n         MVC   JCTCLASS,JCLASS     Set execution jobclass\n         MVC   JCTAXCLS,JCLASS     Set execution jobclass\n         DROP  R6                  H2SYMCLS\n\n*********************************************************************\n*        Replace the symbolic jobclass with the actual jobclass in  *\n*        the buffer.  This must be done to make the change          *\n*        effective and also to prevent a jcl error.                 *\n*        At this point, R4 points to the symbolic jobclass.         *\n*********************************************************************\n\n         MVC   0(1,R4),JCLASS      Set actual jobclass\n         LR    R5,R2               Set R5 to buffer start\n         LA    R5,72(,R5)          Set R5 to last buffer position\n         SR    R5,R4               Text length past CLASS=\n         LH    R3,JCLASSL          Get length of symbolic jobclass\n         SR    R5,R3               Length of text to adjust backwards\n         LA    R7,0(R4,R3)         From position for compress\n         LA    R6,1(,R4)           Receive position for compress\n         BCTR  R5,0                Minus 1 for execute\n         MVC   0(0,R6),0(R7)       Executed instruction\n         EX    R5,*-6              Compress the text\n         LA    R5,1(,R5)           Get adjust length back\n         LA    R6,1(R4,R5)         Receive position for blank pad\n         MVI   0(R6),C' '          Blank pad first position\n         CH    R3,$H2              Symbolic length > 2?\n         BNH   EXIT390             No - blank pad finished\n         LA    R7,1(,R6)           Get next position for blank pad\n         SH    R3,$H2              Adjust pad lenght to CLASSLEN-1\n*                                  less the 1st byte already padded\n         BCTR  R3,0                Minus 1 for execute\n         MVC   0(0,R7),0(R6)       Executed instruction\n         EX    R3,*-6              Blank pad remainder of text buffer\nEXIT390  ICM   R1,15,PCEJQE        Get JQE address\n         BZ    EXIT400             Branch - no JQE\n        $QSUSE                     Obtain queue access\n        $CKPT  ID=JQE,ADDR=(R1)    Checkpoint the JQE\n\n*********************************************************************\n*        Search the job statement image for the MSGCLASS= keyword   *\n*********************************************************************\n\nEXIT400  LA    R3,61               Set maximum search length\n         LR    R4,R2               Preserve buffer pointerinN R2\nEXIT450  CLC   0(10,R4),=C',MSGCLASS='   MSGCLASS= keyword?\n         BE    EXIT500             Yes\n         CLC   0(10,R4),=C' MSGCLASS='   MSGCLASS= keyword?\n         BE    EXIT500             Yes\n         LA    R4,1(,R4)           Bump to next buffer position\n         BCT   R3,EXIT450          Branch - check next position\n         B     RETURN1             Retrun to caller - no MSGCLASS=\n\n*********************************************************************\n*        The MSGCLASS= keyword has been found.  Now see if a        *\n*        symbolic msgclass has been specified.                      *\n*********************************************************************\n\nEXIT500  LA    R4,10(,R4)          Point to actual msgclass\n         LA    R5,1(,R4)           Past possible length 1 msgclass\n         CLI   0(R5),C' '          Length 1 msgclass followed by blank?\n         BE    RETURN1             Yes - do not translate symbolic\n         CLI   0(R5),C','          length 1 msgclass followed by comma?\n         BE    RETURN1             Yes - do not translate symbolic\n\n*********************************************************************\n*        Isolate the symbolic msgclass and length.                  *\n*********************************************************************\n\n         LA    R5,1(,R5)           Point to next position\n         LA    R3,6                Set loop control\nEXIT510  CLI   0(R5),C' '          Blank after symbolic msgclass?\n         BE    EXIT520             Yes - branch, get symbolic length\n         CLI   0(R5),C','          Comma after symbolic msgclass?\n         BE    EXIT520             Yes - branch, get symbolic length\n         LA    R5,1(,R5)           Point to next position\n         BCT   R3,EXIT510          Branch - check next position\nEXIT520  SR    R5,R4               Get symbolic msgclass length\n         STH   R5,MCLASSL          Save symbolic msgclass length\n         BCTR  R5,0                Minus 1 for execute\n         MVC   MSGCLASS(0),0(R4)   Executed instruction\n         EX    R5,*-6              Save symbolic msgclass\n\n*********************************************************************\n*        Search HASP2TAB for a match for the symbolic msgclass.     *\n*********************************************************************\n\n         ICM   R6,15,H2TAB         Point to the HASP2TAB module\n         BZ    RETURN1             No HASP2TAB - return to caller\n         USING HASP2TAB,R6\n         LH    R3,HASP2CNT         Get number of HASP2TAB entries\n         MVC   MCLASS,HASP2MER     Save error msgclass\n         L     R6,HASP2SCP         Point to symbolic class entries\n         DROP  R6                  HASP2TAB\n         USING H2SYMCLS,R6\nEXIT530  CLI   H2SYMTYP,C'M'       Symbolic msgclass entry?\n         BNE   EXIT540             No - branch, check next entry\n         CLC   MSGCLASS,H2SYMNAM   Msgclass match?\n         BE    EXIT600             Yes - convert to actual msgclass\nEXIT540  LA    R6,H2ENTLEN(,R6)    Point to next table entry\n         BCT   R3,EXIT530          Branch - check next table entry\n\n*********************************************************************\n*        The specified symbolic msgclass has not been found in      *\n*        HASP2TAB.  Check if a error msgclass has been supplied     *\n*        in HASP2TAB.  If so, use it.  Otherwise, return to the     *\n*        caller and let the job get a jcl error.                    *\n*********************************************************************\n\n         CLI   MCLASS,C' '         Error msgclass supplied?\n         BNE   EXIT650             Yes - replace symbolic msgclass\n         MVC   RETCODE,$F8         Tell JES to cancel job w/output\n         NI    JCTXMASK,B'11011111'    Turn off job's EXIT2 mask\n*                         ||||||||       so this exit is not entered\n*                 EXITS = 01234567         again for continuation\n*                                            statements\n         B     RETURN1             Branch - return to caller\n\n*********************************************************************\n*        The symbolic msgclass has been found in HASP2TAB.          *\n*        Translate it to an actual msgclass and put it in the JCT.  *\n*********************************************************************\n\nEXIT600  MVC   MCLASS,H2SYMMAP     Save mapped msgclass\nEXIT650  MVC   JCTMCLAS,MCLASS     Set actual msgclass\n         DROP  R6                  H2SYMCLS\n\n*********************************************************************\n*        Replace the symbolic msgclass with the actual msgclass in  *\n*        the buffer.  This must be done to make the change          *\n*        effective and also to prevent a jcl error.                 *\n*        At this point, R4 points to the symbolic msgclass.         *\n*********************************************************************\n\n         MVC   0(1,R4),MCLASS      Set actual msgclass\n         LR    R5,R2               Set R5 to buffer start\n         LA    R5,72(,R5)          Set R5 to last buffer position\n         SR    R5,R4               Text length past CLASS=\n         LH    R3,MCLASSL          Get length of symbolic msgclass\n         SR    R5,R3               Length of text to adjust backwards\n         LA    R7,0(R4,R3)         From position for compress\n         LA    R6,1(,R4)           Receive position for compress\n         BCTR  R5,0                Minus 1 for execute\n         MVC   0(0,R6),0(R7)       Executed instruction\n         EX    R5,*-6              Compress the text\n         LA    R5,1(,R5)           Get adjust length back\n         LA    R6,1(R4,R5)         Receive position for blank pad\n         MVI   0(R6),C' '          Blank pad first position\n         CH    R3,$H2              Symbolic length > 2?\n         BNH   RETURN1             No - blank pad finished\n         LA    R7,1(,R6)           Get next position for blank pad\n         SH    R3,$H2              Adjust pad length to CLASSLEN-1\n*                                  less the 1st byte already padded\n         BCTR  R3,0                Minus 1 for execute\n         MVC   0(0,R7),0(R6)       Executed instruction\n         EX    R3,*-6              Blank pad remainder of text buffer\n\n*********************************************************************\n*        Check if JCTUSER3/JCTUSER4 have been set with a symbolic   *\n*        jobclass or if they have been blanked out by a previous    *\n*        pass thru this exit.  If not zeros (original content),     *\n*        set return code, restore caller's registers and return.    *\n*********************************************************************\n\nRETURN1  CLC   JCTUSER3(8),$ZEROS  JCTUSER3/JCTUSER4 modified?\n         BNE   RETURN2             Yes - branch, return to caller\n         MVC   JCTUSER3(8),$BLANKS  Blank out JCTUSER3/JCTUSER4\nRETURN2  L     R2,RETCODE          Get routine return code\n         L     R15,PCEUSER0        Get workarea address\n         S     R15,$F4             Subtract four for identifier\n        $RETWORK (R15)             Return workarea\n         LR    R15,R2              Set routine return code\n         $RETURN RC=(R15)          Return to caller\n\n         DROP  R9                  EXIT02W\n\n         LTORG\n\nMSGSKEL  EQU   *                   WTO message skeleton\n         DC    X'900F'             Message id\n         DC    CL8' '              Jobid from JCTJOBID\n         DC    C' '\n         DC    CL8' '              Jobname from JCTJNAME\n         DC    C' '\n         DC    CL8' '              Symbolic jobclass from jobcard\nMSGLEN   EQU   *-MSGSKEL           Total length of WTO message\n\n\n         $MODEND\n\nEXIT02W  DSECT                     EXIT02 workarea\nRETCODE  DS    F                   EXIT02 return code\nH2TAB    DS    A                   HASP2TAB pointer\nJCLASS   DS    CL1                 Actual jobclass\nJOBCLASS DS    CL8                 Symbolic jobclass\nJCLASSL  DS    H                   Symbolic jobclass length\nMCLASS   DS    CL1                 Actual msgclass\nMSGCLASS DS    CL8                 Symbolic msgclass\nMCLASSL  DS    H                   Symbolic msgclass length\nMSGAREA  DS    0C                  WTO message area\nMSGIDENT DS    XL2                 Message identifier\nMSGJOBID DS    CL8                 Jobid from JCTJOBID\n         DS    C\nMSGJNAM  DS    CL8                 Jobname from JCTJNAME\n         DS    C\nMSGSYMJ  DS    CL8                 Symbolic jobclass from jobcard\nWRKSIZE  EQU   *-EXIT02W           Length of EXIT02 workarea\n\n\n         PRINT NOGEN\n         CVT DSECT=YES\n         HASP2TAB\n         IEFJESCT\n         IEFJSCVT\n         IHAPSA\n         JES2UVT\n         UCVT\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HASP2604": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98%\\x9f\\x00\\x98%\\x9f\\x08G\\x02=\\x02=\\x00\\x00\\xc3\\xc2\\xf7\\xf4\\xf8\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-09-16T00:00:00", "modifydate": "1998-09-16T08:47:00", "lines": 573, "newlines": 573, "modlines": 0, "user": "CB7485"}, "text": "*********************************************************************\n*                                                                   *\n*                        HASP EXIT 2                                *\n*                                                                   *\n*     This exit gets control when each JOB statement or JOB         *\n*     JOB continuation statement is processed and performs the      *\n*     following functions:                                          *\n*                                                                   *\n*     >  Obtain storage for and initialize the SWBTJCT control      *\n*        block, as an extension to the IBM JCT (JCTX).              *\n*     >  Scan a jcl job card for a symbolic jobclass on the         *\n*        CLASS= keyword and convert the symbolic designation to     *\n*        a standard jobclass (A-Z, or 0-9).  An installation        *\n*        defined table (HASP2TAB) is used to equate the symbolic    *\n*        designations with the standard classes.  A symbolic        *\n*        jobclass may be composed of one to eight alphanumeric      *\n*        characters.                                                *\n*     >  Scan a jcl job card for a symbolic msgclass on the         *\n*        MSGCLASS= keyword and convert the symbolic designation     *\n*        to a standard msgclass (A-Z, or 0-9).  An installation     *\n*        defined table (HASP2TAB) is used to equate the symbolic    *\n*        designations with the standard classes.  A symbolic        *\n*        msgclass may be composed of one to eight alphanumeric      *\n*        characters.                                                *\n*                                                                   *\n*     Entry point: EXIT02                                           *\n*                                                                   *\n*     Input registers:                                              *\n*        R0     Code indicating type of job statement being scanned *\n*               0  - initial JOB statement image                    *\n*               4  - subsequent JOB statement continuation image    *\n*        R1     Address of 3-word parameter list                    *\n*        R2-9   N/A                                                 *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    PCE address                                         *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0-14  Unchanged                                           *\n*        R15    Return code                                         *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-8   Work                                                *\n*        R9     EXIT02 workarea address                             *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    PCE address                                         *\n*        R14-15 Work and linkage                                    *\n*                                                                   *\n*     NOTE:  HASP2TAB is built by started task HASP2BLD, which      *\n*            reads entries from the SUPT.HASP2TAB dataset.          *\n*                                                                   *\n*            This module is for use with JES2 Version 6.0.4         *\n*                                                                   *\n*     Author: Bob Break                                             *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nHASPEX02 $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               JESCT,                                                  X\n               PSA,                                                    X\n               RPL,                                                    X\n               SSCT,                                                   X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $HASPEQU,                                               X\n               $HCCT,                                                  X\n               $HCT,                                                   X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $JQE,                                                   X\n               $KIT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $TRE,                                                   X\n               $USERCBS,                                               X\n               $XECB\n\nEXIT02  $ENTRY BASE=R12            EXIT02 routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\nEXIT000 $SAVE  NAME=EXIT02         Save caller's registers\n         LR    R12,R15             Set base register\n         ST    R0,PCEUSER0         Save entry R0\n         L     R2,0(,R1)           Get job statement buffer pointer\n         USING JCT,R10\n\n*********************************************************************\n*                                                                   *\n*        Obtain a module workarea.                                  *\n*                                                                   *\n*********************************************************************\n\n         LA    R1,EXIT02WL         Get workarea length\n         LA    R1,3(,R1)           Round up to word boundary\n         SRL   R1,2                Convert to number of words\n         LA    R1,1(,R1)           Add one for identifier\n        $GETWORK WORDS=(R1),USE=EX02\n         LA    R1,4(,R1)           Point past identifier\n         LR    R9,R1               Set workarea address\n         LR    R14,R1              Set move to address\n         LA    R15,EXIT02WL        Set move to length\n         XR    R1,R1               Set move from length and pad\n         MVCL  R14,R0              Clear workarea\n         USING EXIT02W,R9\n         ST    R2,JOBBUFP          Save job statement image buffer ptr\n         L     R0,PCEUSER0         Restore entry register 0\n         LTR   R0,R0               Continuation job statement?\n         BNZ   EXIT020             Yes - branch, continue\n\n*********************************************************************\n*                                                                   *\n*        Obtain storage for the SWBTJCT control block and           *\n*        initialize it.                                             *\n*                                                                   *\n*********************************************************************\n\nEXIT010 $JCTXADD JCT=JCT,TYPE='SWBT',MOD=1,LENGTH=JCTXTLEN,            X\n               OKRET=EXIT011,FOUND=EXIT019,ERRET=EXIT019\nEXIT011  LTR   R15,R15             Extension added?\n         BNZ   EXIT019             No - branch, continue\n         IPK   0(0)                Get current psw key\n         SPKA  0(0)                Set psw key zero\n         LA    R3,JCXBASLN(,R1)    Point to SWBTJCT\n         LR    R14,R3              Get SWBTJCT addr in work register\n         USING SWBTJCT,R3\n         LA    R15,SWBTJCTL        Set move to length\n         XR    R1,R1               Set move from length and pad\n         MVCL  R14,R0              Clear SWBTJCT\n         MVC   SWBJCTID,=C'SJCT'   Set identifier\n         MVI   SWBJCTVR,SWBJCTV#   Set version number\n         LA    R15,SWBTJCTL        Get SWBTJCT length\n         STCM  R15,7,SWBJCTLN      Set length\n         MVC   SWBJSYMJ,$BLANKS    Blank init symbolic jobclass\n         SPKA  0(R2)               Reset psw key\nEXIT019  DS    0H\nJCTXTLEN EQU   JCXBASLN+SWBTJCTL   JCTX total length\n         DROP  R3                  SWBTJCT\n\n*********************************************************************\n*                                                                   *\n*        Find and set the pointer to symbolic jobclass/msgclass     *\n*        table (HASP2TAB).                                          *\n*                                                                   *\n*********************************************************************\n\nEXIT020  L     R15,CVTPTR          Get pointer to CVT\n         L     R15,CVTUSER-CVT(,R15)  Get USERCVT pointer\n         L     R15,UCVTJES2-UCVT(,R15)  Get JES2UVT pointer\n         L     R15,JES2SYMT-JES2UVT(,R15)  Get HASP2TAB pointer\n         ST    R15,H2TAB           Set HASP2TAB pointer\n\n*********************************************************************\n*                                                                   *\n*        Read the SWBTJCT.                                          *\n*                                                                   *\n*********************************************************************\n\nEXIT030 $JCTXGET JCT=JCT,TYPE='SWBT',MOD=1,OKRET=EXIT031,ERRET=RETURN\nEXIT031  LTR   R15,R15             JCTXGET successful?\n         BNZ   RETURN              No - branch, return\n         LA    R1,JCXBASLN(,R1)    Point to SWBTJCT\n         ST    R1,SWBTJCTP         Save SWBJCT pointer\n\n*********************************************************************\n*                                                                   *\n*        Determine if a symbolic jobclass has already been set.     *\n*                                                                   *\n*********************************************************************\n\nEXIT100  L     R1,SWBTJCTP         Get SWBTJCT pointer\n         USING SWBTJCT,R1\n         CLC   SWBJSYMJ,$BLANKS    Symbolic jobclass previously set?\n         BNE   EXIT399             Yes - branch, continue\n         MVI   JCLASS,C' '         Blank init actual jobclass\n         CLC   JCTNONDE,$NDENAME   Input node = local node?\n         BE    EXIT101             Yes - branch, continue\n         CLI   JCTXWRK,0           Symbolic class set on input node?\n         BE    EXIT399             No - branch, continue\n         MVC   JOBCLASS,JCTXWRK    Set symbolic class from input node\n         XC    JCTXWRK,JCTXWRK     Clear JCTXWRK\n         B     EXIT221             Branch - continue\nEXIT101  MVC   JOBCLASS,$BLANKS    Blank init symbolic jobclass\n         DROP  R1                  SWBTJCT\n\n*********************************************************************\n*                                                                   *\n*        Search the job statement image for the CLASS= keyword.     *\n*                                                                   *\n*********************************************************************\n\n         LA    R3,64               Set maximum search length\n         L     R4,JOBBUFP          Get job statement buffer pointer\nEXIT150  CLC   0(7,R4),=C',CLASS='  CLASS= keyword?\n         BE    EXIT200             Yes - branch, continue\n         CLC   0(7,R4),=C' CLASS='  CLASS= Keyword?\n         BE    EXIT200             Yes - branch, continue\n         LA    R4,1(,R4)           Bump to next buffer position\n         BCT   R3,EXIT150          Loop back to check next position\n         B     EXIT399             Branch - no CLASS= keyword found\n\n*********************************************************************\n*                                                                   *\n*        The CLASS= keyword has been found, so check if a symbolic  *\n*        jobclass has been specified.                               *\n*                                                                   *\n*********************************************************************\n\nEXIT200  LA    R4,7(,R4)           Point to actual jobclass\n         LA    R5,1(,R4)           Point past possible length 1 class\n         CLI   0(R5),C' '          Length 1 class followed by blank?\n         BE    EXIT399             Yes - branch, continue\n         CLI   0(R5),C','          Length 1 class followed by comma?\n         BE    EXIT399             Yes - branch, continue\n\n*********************************************************************\n*                                                                   *\n*        Isolate the symbolic jobclass and length.                  *\n*                                                                   *\n*********************************************************************\n\n         LA    R5,1(,R5)           Point to next position\n         LA    R3,6                Set loop control\nEXIT210  CLI   0(R5),C' '          Blank after symbolic jobclass?\n         BE    EXIT220             Yes - branch, get symbolic length\n         CLI   0(R5),C','          Comma after symbolic jobclass?\n         BE    EXIT220             Yes - branch, get symbolic length\n         LA    R5,1(,R5)           Point to next position\n         BCT   R3,EXIT210          Branch - check next position\nEXIT220  SR    R5,R4               Get symbolic jobclass length\n         STH   R5,JCLASSL          Set symbolic jobclass length\n         BCTR  R5,0                Minus 1 for execute\n         MVC   JOBCLASS(0),0(R4)   Executed instruction\n         EX    R5,*-6              Set symbolic jobclass\n\n*********************************************************************\n*                                                                   *\n*        Issue the WTO with the symbolic jobclass information.      *\n*        Set the symbolic jobclass in the SWBTJCT for insertion     *\n*        into the JSABUVT at execution time.                        *\n*                                                                   *\n*********************************************************************\n\nEXIT221  MVC   MSGAREA(MSGLEN),MSGSKEL  Set message skeleton\n         MVC   MSGJOBID,JCTJOBID   Set jobid in message area\n         MVC   MSGJNAM,JCTJNAME    Set jobname in message area\n         MVC   MSGSYMJ,JOBCLASS    Set jobclass in message area\n         LA    R1,MSGAREA          Point to WTO message area\n         LA    R0,MSGLEN           Set WTO message length\n        $WTO   (R1),(R0),JOB=NO    Issue the WTO\n         L     R1,SWBTJCTP         Get SWBTJCT pointer\n         USING SWBTJCT,R1\n         IPK   0(0)                Get current psw key\n         SPKA  0(0)                Set psw key zero\n         MVC   SWBJSYMJ,JOBCLASS   Set symbolic jobclass in SWBTJCT\n         SPKA  0(R2)               Reset psw key\n         DROP  R1                  SWBTJCT\n\n*********************************************************************\n*                                                                   *\n*        Search HASP2TAB for a match for the symbolic jobclass.     *\n*                                                                   *\n*********************************************************************\n\n         ICM   R6,15,H2TAB         Point to the HASP2TAB\n         BZ    EXIT399             No HASP2TAB - branch, continue\n         USING HASP2TAB,R6\n         LH    R3,HASP2CNT         Get number of HASP2TAB entries\n         MVC   JCLASS,HASP2JER     Save error jobclass\n         L     R6,HASP2SCP         Point to symbolic class entries\n         DROP  R6                  HASP2TAB\n         USING H2SYMCLS,R6\nEXIT230  CLI   H2SYMTYP,C'J'       Symbolic jobclass entry?\n         BNE   EXIT240             No - branch, check next entry\n         CLC   JOBCLASS,H2SYMNAM   Jobclass match?\n         BE    EXIT250             Yes - translate to actual jobclass\nEXIT240  LA    R6,H2ENTLEN(,R6)    Point to next table entry\n         BCT   R3,EXIT230          Loop back to check next table entry\n\n*********************************************************************\n*                                                                   *\n*        The specified symbolic jobclass has not been found in the  *\n*        HASP2TAB.  Check if a error jobclass has been supplied     *\n*        in HASP2TAB.  If so, use it.  Otherwise, return to the     *\n*        caller and fail the job with a jcl error.                  *\n*                                                                   *\n*********************************************************************\n\n         CLI   JCLASS,C' '         Error jobclass supplied?\n         BNE   EXIT300             Yes - branch, continue\n         MVC   RETCODE,$F8         Set cancel job w/output return code\n         NI    JCTXMASK,B'11011111'    Turn off job's EXIT2 mask\n*                         ||||||||       so this exit is not entered\n*                 EXITS = 01234567         again for continuation\n*                                            statements\n         B     RETURN              Branch - return\n\n*********************************************************************\n*                                                                   *\n*        The symbolic jobclass has been found in HASP2TAB.          *\n*        Translate it to an actual jobclass and set it in the JCT.  *\n*                                                                   *\n*********************************************************************\n\nEXIT250  MVC   JCLASS,H2SYMMAP     Save mapped jobclass\nEXIT300  MVC   JCTJCLAS,JCLASS     Set execution jobclass in JCT\n         MVC   JCTCLASS,JCLASS     Set execution jobclass in JCT\n         MVC   JCTAXCLS,JCLASS     Set execution jobclass in JCT\n         DROP  R6                  H2SYMCLS\n\n*********************************************************************\n*                                                                   *\n*        Replace the symbolic jobclass with the actual jobclass in  *\n*        the buffer.  This must be done to make the change          *\n*        effective and also to prevent a jcl error.                 *\n*        At this point, R4 points to the symbolic jobclass.         *\n*                                                                   *\n*********************************************************************\n\n         CLC   JCTNONDE,$NDENAME   Input node = local node?\n         BNE   EXIT390             No - branch, continue\n         MVC   0(1,R4),JCLASS      Set actual jobclass\n         L     R5,JOBBUFP          Point to buffer start\n         LA    R5,72(,R5)          Point to last buffer position\n         SR    R5,R4               Get text length past CLASS=\n         LH    R3,JCLASSL          Get length of symbolic jobclass\n         SR    R5,R3               Get text length to adjust backwards\n         LA    R7,0(R4,R3)         Get from position for compress\n         LA    R6,1(,R4)           Get receive position for compress\n         BCTR  R5,0                Minus 1 for execute\n         MVC   0(0,R6),0(R7)       Executed instruction\n         EX    R5,*-6              Compress the text\n         LA    R5,1(,R5)           Get adjust length back\n         LA    R6,1(R4,R5)         Get receive position for blank pad\n         MVI   0(R6),C' '          Blank pad first position\n         CH    R3,$H2              Symbolic length > 2?\n         BNH   EXIT390             No - branch, blank pad complete\n         LA    R7,1(,R6)           Get next position for blank pad\n         SH    R3,$H2              Adjust pad length to CLASSLEN-1\n*                                    less the 1st byte already padded\n         BCTR  R3,0                Minus 1 for execute\n         MVC   0(0,R7),0(R6)       Executed instruction\n         EX    R3,*-6              Blank pad remainder of text buffer\nEXIT390  DS    0H\n        $QSUSE                     Request access to checkpoint queues\n        $DOGJQE ACTION=(FETCH,UPDATE),JQE=PCEJQE,                      X\n               ERRET=EXIT399,OKRET=EXIT391\nEXIT391  LR    R1,R0               Get JQA address\n         USING JQE,R1\n         MVC   JQESYMJC,JOBCLASS   Set symbolic jobclass in JQE\n        $DOGJQE ACTION=RETURN,CBADDR=JQE\n         DROP  R1                  JQE\nEXIT399  DS    0H\n\n*********************************************************************\n*                                                                   *\n*        Determine if \"MSGCLASS=\" has been previously found.        *\n*                                                                   *\n*********************************************************************\n\nEXIT400  L     R1,SWBTJCTP         Get SWBTJCT pointer\n         USING SWBTJCT,R1\n         TM    SWBJFLAG,SWBJMSGC   \"MSGCLASS=\" previously found?\n         BO    EXIT699             Yes - branch, continue\n         MVI   MCLASS,C' '         Blank init actual msgclass\n         MVC   MSGCLASS,$BLANKS    Blank init symbolic msgclass\n\n*********************************************************************\n*                                                                   *\n*        Search the job statement image for the MSGCLASS= keyword.  *\n*                                                                   *\n*********************************************************************\n\n         LA    R3,61               Set maximum search length\n         L     R4,JOBBUFP          Get job statement buffer pointer\nEXIT450  CLC   0(10,R4),=C',MSGCLASS='  MSGCLASS= keyword?\n         BE    EXIT500             Yes - branch, continue\n         CLC   0(10,R4),=C' MSGCLASS='  MSGCLASS= keyword?\n         BE    EXIT500             Yes - branch, continue\n         LA    R4,1(,R4)           Bump to next buffer position\n         BCT   R3,EXIT450          Loop back to check next position\n         B     EXIT699             Branch - no MSGCLASS= keyword found\n\n*********************************************************************\n*                                                                   *\n*        The MSGCLASS= keyword has been found, so check if a        *\n*        symbolic msgclass has been specified.                      *\n*                                                                   *\n*********************************************************************\n\nEXIT500  OI    SWBJFLAG,SWBJMSGC   Set \"MSGCLASS=\" keyword found flag\n         DROP  R1                  SWBTJCT\n         LA    R4,10(,R4)          Point to actual msgclass\n         LA    R5,1(,R4)           Point past possible length 1 class\n         CLI   0(R5),C' '          Length 1 msgclass followed by blank?\n         BE    EXIT699             Yes - branch, continue\n         CLI   0(R5),C','          Length 1 msgclass followed by comma?\n         BE    EXIT699             Yes - branch, continue\n\n*********************************************************************\n*                                                                   *\n*        Isolate the symbolic msgclass and length.                  *\n*                                                                   *\n*********************************************************************\n\n         LA    R5,1(,R5)           Point to next position\n         LA    R3,6                Set loop control\nEXIT510  CLI   0(R5),C' '          Blank after symbolic msgclass?\n         BE    EXIT520             Yes - branch, get symbolic length\n         CLI   0(R5),C','          Comma after symbolic msgclass?\n         BE    EXIT520             Yes - branch, get symbolic length\n         LA    R5,1(,R5)           Point to next position\n         BCT   R3,EXIT510          Branch - check next position\nEXIT520  SR    R5,R4               Get symbolic msgclass length\n         STH   R5,MCLASSL          Set symbolic msgclass length\n         BCTR  R5,0                Minus 1 for execute\n         MVC   MSGCLASS(0),0(R4)   Executed instruction\n         EX    R5,*-6              Set symbolic msgclass\n\n*********************************************************************\n*                                                                   *\n*        Search HASP2TAB for a match for the symbolic msgclass.     *\n*                                                                   *\n*********************************************************************\n\n         ICM   R6,15,H2TAB         Point to the HASP2TAB\n         BZ    EXIT699             No HASP2TAB - branch, continue\n         USING HASP2TAB,R6\n         LH    R3,HASP2CNT         Get number of HASP2TAB entries\n         MVC   MCLASS,HASP2MER     Save error msgclass\n         L     R6,HASP2SCP         Point to symbolic class entries\n         DROP  R6                  HASP2TAB\n         USING H2SYMCLS,R6\nEXIT530  CLI   H2SYMTYP,C'M'       Symbolic msgclass entry?\n         BNE   EXIT540             No - branch, check next entry\n         CLC   MSGCLASS,H2SYMNAM   Msgclass match?\n         BE    EXIT600             Yes - translate to actual msgclass\nEXIT540  LA    R6,H2ENTLEN(,R6)    Point to next table entry\n         BCT   R3,EXIT530          Loop back to check next table entry\n\n*********************************************************************\n*                                                                   *\n*        The specified symbolic msgclass has not been found in      *\n*        HASP2TAB.  Check if a error msgclass has been supplied     *\n*        in HASP2TAB.  If so, use it.  Otherwise, return to the     *\n*        caller and let the job get a jcl error.                    *\n*                                                                   *\n*********************************************************************\n\n         CLI   MCLASS,C' '         Error msgclass supplied?\n         BNE   EXIT650             Yes - replace symbolic msgclass\n         MVC   RETCODE,$F8         Set cancel job w/output return code\n         NI    JCTXMASK,B'11011111'    Turn off job's EXIT2 mask\n*                         ||||||||       so this exit is not entered\n*                 EXITS = 01234567         again for continuation\n*                                            statements\n         B     RETURN              Branch - return\n\n*********************************************************************\n*                                                                   *\n*        The symbolic msgclass has been found in HASP2TAB.          *\n*        Translate it to an actual msgclass and put it in the JCT.  *\n*                                                                   *\n*********************************************************************\n\nEXIT600  MVC   MCLASS,H2SYMMAP     Save mapped msgclass\nEXIT650  MVC   JCTMCLAS,MCLASS     Set actual msgclass in JCT\n         DROP  R6                  H2SYMCLS\n\n*********************************************************************\n*                                                                   *\n*        Replace the symbolic msgclass with the actual msgclass in  *\n*        the buffer.  This must be done to make the change          *\n*        effective and also to prevent a jcl error.                 *\n*        At this point, R4 points to the symbolic msgclass.         *\n*                                                                   *\n*********************************************************************\n\n         MVC   0(1,R4),MCLASS      Set actual msgclass\n         L     R5,JOBBUFP          Point to job buffer start\n         LA    R5,72(,R5)          Point to last buffer position\n         SR    R5,R4               Get text length past CLASS=\n         LH    R3,MCLASSL          Get length of symbolic msgclass\n         SR    R5,R3               Get text lengtht to adjust backwards\n         LA    R7,0(R4,R3)         Get from position for compress\n         LA    R6,1(,R4)           Get receive position for compress\n         BCTR  R5,0                Minus 1 for execute\n         MVC   0(0,R6),0(R7)       Executed instruction\n         EX    R5,*-6              Compress the text\n         LA    R5,1(,R5)           Get adjust length back\n         LA    R6,1(R4,R5)         Get receive position for blank pad\n         MVI   0(R6),C' '          Blank pad first position\n         CH    R3,$H2              Symbolic length > 2?\n         BNH   RETURN              No - blank pad complete\n         LA    R7,1(,R6)           Get next position for blank pad\n         SH    R3,$H2              Adjust pad length to CLASSLEN-1\n*                                    less the 1st byte already padded\n         BCTR  R3,0                Minus 1 for execute\n         MVC   0(0,R7),0(R6)       Executed instruction\n         EX    R3,*-6              Blank pad remainder of text buffer\nEXIT699  DS    0H\n\n*********************************************************************\n*                                                                   *\n*        Set return code, restore caller's registers and return.    *\n*                                                                   *\n*********************************************************************\n\nRETURN   L     R2,RETCODE          Get routine return code\n         S     R9,$F4              Get EXIT02 workarea address\n        $RETWORK (R9)              Return workarea\n         LR    R15,R2              Set routine return code\n        $RETURN RC=(R15)           Return to caller\n\n         DROP  R9,R10              EXIT02W, JCT\n\n         LTORG\n\nMSGSKEL  EQU   *                   WTO message skeleton\n         DC    X'900F'             Message id\n         DC    CL8' '              Jobid from JCTJOBID\n         DC    C' '\n         DC    CL8' '              Jobname from JCTJNAME\n         DC    C' '\n         DC    CL8' '              Symbolic jobclass from jobcard\nMSGLEN   EQU   *-MSGSKEL           Total length of WTO message\n\n        $MODEND\n\nEXIT02W  DSECT                     EXIT02 workarea\nRETCODE  DS    F                   EXIT02 return code\nJOBBUFP  DS    A                   Job statement image buffer pointer\nSWBTJCTP DS    A                   SWBTJCT pointer\nH2TAB    DS    A                   HASP2TAB pointer\nJCLASS   DS    CL1                 Actual jobclass\nMCLASS   DS    CL1                 Actual msgclass\nJOBCLASS DS    CL8                 Symbolic jobclass\nMSGCLASS DS    CL8                 Symbolic msgclass\nJCLASSL  DS    H                   Symbolic jobclass length\nMCLASSL  DS    H                   Symbolic msgclass length\nMSGAREA  DS    0C                  WTO message area\nMSGIDENT DS    XL2                 Message identifier\nMSGJOBID DS    CL8                 Jobid from JCTJOBID\n         DS    C\nMSGJNAM  DS    CL8                 Jobname from JCTJNAME\n         DS    C\nMSGSYMJ  DS    CL8                 Symbolic jobclass from jobcard\nEXIT02WL EQU   *-EXIT02W           EXIT02 workarea length\n\n        $SWBTJCT\n         HASP2TAB\n         JES2UVT\n         UCVT\n\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT346/FILE346.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT346", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}