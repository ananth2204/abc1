{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011654000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 7583394, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 13, "INMDSNAM": "CBT.V500.FILE296.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 7583394, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 7583394, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE296.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00u\\x08'", "DS1TRBAL": "b'4\\x98'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xfe\\x00\\x01\\x02\\x05\\x00\\r\\x00v'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$$NOT": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x001\\x00\\x980\\x0f\\x01\\x175?\\x01V\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1998-10-27T00:00:00", "modifydate": "2017-12-19T01:56:31", "lines": 9, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "  This is to note that the COMPAREB CSECT in the COMPARE member\n  of this dataset has been replaced with Greg Price's latest\n  version from 1996.  I've included the COMPAREB member with this\n  program source listed separately, as well\n\n                                           Sam Golob  10/98\n                                           sbgolob@cbttape.org\n                                           sbgolob@att.net\n    Take a look at www.cbttape.org .\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$$SAM": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x94\"\\x1f\\x00\\x94#\\x1f\\x08%\\x00\"\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1994-08-09T00:00:00", "modifydate": "1994-08-19T08:25:00", "lines": 34, "newlines": 35, "modlines": 0, "user": "SBGCSC"}, "text": "*\n*    1.  THE FILES ON THIS TAPE SHOULD REPLACE FILES 112 AND 296 ON\n*        THE CBT TAPE.  I HAVE RETIRED HEL NOW.\n*\n*    2.  THE FOLLOWING CAN BE USED IN YOUR DOCUMENTATION OF\n*        CHANGES FOR THIS TAPE VERSION:\n*\n//*        XX  UPDATE TO FILE 296 FROM BRUCE LELAND OF SERENA IN    *\n//*            BURLINGAME, CALIFORNIA.  THE FOLLOWING MEMBERS       *\n//*            WERE UPDATED:                                        *\n//*              DSAT    - WAS UPDATED AS FOLLOWS:                  *\n//*                   1.  ADDED THE \"FULL\" KEYWORD TO PROVIDE       *\n//*                       MULTIPLE DEFAULTS FOR MORE COMPLETE       *\n//*                       INFORMATION ON EACH DATA SET.             *\n//*                   2.  ADDED THE \"EXTENTS\" KEYWORD TO FORMAT     *\n//*                       DISK EXTENTS AS PROGRAMMED BY LEONARD     *\n//*                       WOREN AT THE UNIVERISITY OF SOUTHERN      *\n//*                       CALIFORNIA FROM DSAT IN CBT FILE 180.     *\n//*              DVOL - WAS MODIFIED TO SUPPORT 3390 MODEL 9 DISKS. *\n//*                   THIS INVOLVED CHANGING THE IXTOFMT5 ROUTINE   *\n//*                   TO CONVERT FREE SPACE TO THE NEW FORMAT 7     *\n//*                   FREE SPACE RECORDS.  THE &MODEL9 VARIABLE     *\n//*                   CAN BE MODIFIED TO REVERT TO FORMAT 5         *\n//*                   RECORDS FOR OLDER SYSTEM LEVEL, HOWEVER.      *\n//*                                                                 *\n//*        XX  UPDATE TO FILE 112 (VTOC) FROM BRUCE LELAND OF       *\n//*            SERENA IN BURLINGAME, CALIFORNIA TO CHANGE THE VTOC  *\n//*            COMMAND TO SUPPORT THE PRINT(ADD (CCHH)) PARAMETER.  *\n//*            THIS PARAMETER WILL DISPLAY THE EXTENT BOUNDARIES    *\n//*            OF A DISPLAYED DATA SET.  IF LIM/AND/OR ARE USED     *\n//*            TO SELECT BY CCHH ADDRESS, THE LAST EXTENT WHICH     *\n//*            SATISFIED THE CONDITION IS DISPLAYED; OTHERWISE,     *\n//*            THE FIRST EXTENT OF THE DATA SET WILL BE DISPLAYED.  *\n//*                                                                 *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$$SAM1": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x964_\\x00\\x98\\x11/\"U\\x00\\x03\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-12-10T00:00:00", "modifydate": "1998-04-22T22:55:00", "lines": 3, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "UPDATED DVOL TO ACCOMMODATE MVS/ESA 4.1 UCB SCANS.\nUPDATED DVOL TO ACCOMMODATE 4-DIGIT UCB'S AND SYSTEMS WITH ONLY\n             3-DIGIT UCB'S.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$#DATE": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00E\\x01\\x18\\x11\\x9f\\x01\\x18\\x11\\x9f\\x15\\x12\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-04-29T00:00:00", "modifydate": "2018-04-29T15:12:45", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-496"}, "text": "REGULAR CBT TAPE - VERSION 496    FILE:  296\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT496.FILE296\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 46 MEMBERS COUNTED; CUMULATIVE SIZE IS 71,886 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/29/18    15:12:45    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$CGARR": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x05\\x05\\x9f\\x01\\x05\\x05\\x9f#D\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-02-28T00:00:00", "modifydate": "2005-02-28T23:44:02", "lines": 23, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "Hello Sam,\nAfter installing DVOL from file 296 of V468 in z/OS V1R6, I\nstarted experiencing S0C1 abends when I used DVOL.  I discovered\nthat the CVAFDSM parameter list length has changed from 64 to 100\nbytes somewhere between V1R4 and V1R6.  This caused a mismatch\nwith the ICVAFPL macro unless CVPLX=YES is added to the macro\n(ICVAFPL DSECT=NO,CVPLX=YES).  In my case, this extra 34 bytes\ncaused IXTOFMT5 to overlay the 1st savearea whenever the CVAFDSM\nparameter list was moved to the workarea in preparation of a\nCVAFDSM request.  Thus, the S0C1 everytime DVOL terminated.  I\nhave attached my version of DVOL to correct this and try to keep\nit from happening again in case CVAFDSM is modified in the\nfuture.\n\nAs a side note, I have doing this job for 30 years and will be\nretiring soon.  I want to thank you for the great work with CBT\nand the helpful articles.  You and the contributors to CBT have\nbeen a immense help during my career.\n\nThanks,\nCary Garrett\nCity of Birmingham\ncogarre@ci.birmingham.al.us\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE1": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x01\\x08\\x08?\\x01\\x08\\x08?\\x07W\\x00\\x12\\x00\\x12\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-03-23T00:00:00", "modifydate": "2008-03-23T07:57:40", "lines": 18, "newlines": 18, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    Re: S0C4 Abend in RELEASE Command\nFrom:       John P Kalinich <jkalinic@csc.com>\nDate:       Fri, 21 Mar 2008 09:06:01 -0500\nTo:         sbgolob@attglobal.net\n\nSam,\n\nCan You Update RELEASE on File 296 and 035?  I have a working\nversion of RELEASE in UTILXMIT member of file 182.\n\nRegards,\nJohn K\n\nNote from Sam G.: There are assembly options in the RELEASE command\n                  that are needed if SWA was above the 16M line, or\n                  not.  These are what were changed in the source code\n                  for the RELEASE command.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE2": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x15\\x01\\t'\\x9f\\x01\\t'\\x9f\\x11%\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-10-06T00:00:00", "modifydate": "2009-10-06T11:25:15", "lines": 31, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:   File 296 - COMPARE\nFrom:      \"Greg Price\" <greg.price@optusnet.com.au>\nDate:      Fri, 02 Oct 2009 00:36:19 +1000\nTo:        \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nAttached is a new version of the COMPARE member of CBT file 296.\n\nThis version has a small change to the COMPARE command processor\nsuch that it will pass a control statement of\n COMPARE TYPORG=PO\ninstead of the usual\n COMPARE TYPORG=PS\nto IEBCOMPR/ZEBCOMPR if the DSORG is PO and no member name is\nspecified.\n\nThis change will stop IEBCOMPR getting I/O errors when trying to\nprocess PDS directories as sequential files using the DCB\nattributes from the VTOC entry, and will allow it to perform\ncomparisons of the actual data of each member as well as the user\ndata of the directory entries.\n\nNote that the COMPARE command processor (but not the COMPAREB\nprogram) is reentrant, so I have also changed the assemble and\nlink edit parameters accordingly.\n\nCheers,\nGreg\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE3": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x01\\t)_\\x01\\t)_\\x14 \\x00\\xd8\\x00\\xd8\\x00\\x00\\xc4\\xe2\\xc1\\xe3\\xc3\\xc8\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-10-22T00:00:00", "modifydate": "2009-10-22T14:20:40", "lines": 216, "newlines": 216, "modlines": 0, "user": "DSATCHG"}, "text": "Here is a sequence of emails concerning changes to DSAT.\n\nThe email reporting is backwards:  from solution to problem.\n\nWhat's going on here?  Explanation:\n\nJohn Loch wanted to incorporate SMS changes from EDS/HP into the\n CBT-distributed version of DSAT.  John L also noticed that DSAT\n does not assemble cleanly under z/OS 1.11 (also 1.10) and that\n the CAMLST BLOCK code is the culprit.  What to do?\n\nDan Dalby was brought in as the \"knowledgeable consultant\" and\n Dan pointed out that if you don't have CVOLs, you don't need the\n CAMLST BLOCK code.  Dan suggested that you dummy out the expansion\n of the CAMLST BLOCK macros by substituting DC  4F'0' instead.\n\nSam Golob pointed out that it doesn't hurt to include the expanded\n CAMLST BLOCK code in the load module, instead of Dan's dummy\n DC  4F'0' suggestion to substitute for it.  This is because if a\n CVOL might happen to exist, and if the level of the system still\n actually supports them, then DSAT won't blow up, and DSAT might\n actually still work.  Dan agreed with that.  It is a safety net.\n\nSam Golob took the assembly/link JCL out of the DSAT source code.\n Assembly of DSAT is now in member DSAT$.\n\nThe \"real emails\" follow.\n\n  - - - - - - - - - - -\n\n\nSubject:   Re: Which DSAT to use\nFrom:      \"Dan Dalby\" <DDalby@Sympatico.ca>\nDate:      Thu, 22 Oct 2009 12:43:31 -0400\nTo:        \"Sam Golob\" <sbgolob@cbttape.org>, <john.loch@hp.com>\nCC:        \"John P Kalinich\" <jkalinic@csc.com>\n\nYes, Sam's method certainly is a better choice for those that\nmight want to TRY to use CVOLs.  It's not an MVS level problem.\nCVOLs only contain dates up to 99.365.\n\nThe MVS 3.8 enthusiasts may always run with a system date prior\nto 2000 as other MVS 3.8 code would break as well.\n\nGood luck.\nDan Dalby\n\n  - - - - - - - - - - -\n\nSam Golob wrote:\n\n Hi John et al,\n\n Dan Dalby came up with the idea of substituting DC  4F'0' for\n the CAMLST BLOCK lines where the macro was actually coded.\n\n The reason why IBM eliminated the BLOCK parameter from the\n CAMLST macro in z/OS 1.10 is that it is for CVOLs and CVOLs are\n no longer supported.\n\n I don't think that the MVS 3.8 enthusiasts will use your\n version of DSAT anyway, because they don't have SMS.\n\n Dan's change is at the bottom.\n\n However, since CVOLs might still be there (although not\n supported), maybe my change is better to put in, rather than\n Dan's:  My change came from a z/OS 1.9 assembly of DSAT, where\n the expanded CAMLST BLOCK code lines are substituted for the\n macro call.\n\n *TTRLOC  CAMLST BLOCK,0,0,0\n TTRLOC   DS    0F                                ALIGN ON FULL WORD\n          DC    AL1(194)                          THREE BYTES OF FLAGS\n          DC    AL1(0)                            INDICATING THE FUNC-\n          DC    AL1(0)                            TION TO BE PERFORMED\n          DC    AL1(0)                            NO OPTION THREE\n          DC    A(0)                              PARAMETER TWO\n          DC    A(0)                              PARAMETER THREE\n          DC    A(0)                              PARAMETER FOUR\n\n and\n\n *LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR\n LOCBYTTR DS    0F                                ALIGN ON FULL WORD\n          DC    AL1(194)                          THREE BYTES OF FLAGS\n          DC    AL1(0)                            INDICATING THE FUNC-\n          DC    AL1(0)                            TION TO BE PERFORMED\n          DC    AL1(0)                            NO OPTION THREE\n          DC    A(0)                              PARAMETER TWO\n\n    All the best.........\n\n Sam\n\n  - - - - - - - - - - -\n\n Here are the changes that Dan himself made...\n\n *TTRLOC  CAMLST BLOCK,0,0,0\n TTRLOC   DC    4F'0'                                               #DD\n\n *LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR\n LOCBYTTR DC    4F'0'                   LOCATE BY TTR               #DD\n\n Also, as I hate any type of warning or error message, I added\n \"NOUSING\" to the PARM= for ASMA90.  Now I get RC=0 for this job.\n\n When I call DSAT it works perfectly.  As my catalog is not\n SYSCTLG....  the BLOCK code never gets called.\n\n Dan\n\n  - - - - - - - - - - -\n\nFrom:      \"LOCH, JOHN\" <john.loch@hp.com>\nTo:        John P Kalinich/DEF/CSC@CSC\nDate:      10/12/2009 03:45 PM\nSubject:   DSAT command\n\nWe shared a few emails discussing DSAT and was wondering if you\ncould help.\n\nI attached a copy of DSAT that included a new NOSMS/SMS option\nand asked if you would be willing to incorporate our changes into\nthe base DSAT module and then supply that to Sam Golob for\ninclusion to the CBT tape.  I ask because as DSAT has changed\nover the years, I'm not sure if all the changes for DSAT have\nbeen incorporated into the EDS version of DSAT.  I'm not a strong\nassembler programmer so if the fate of the world relied on me\nmaking that determination, re-writing it and sending it to Sam;\nwe may be waiting a long time.\n\nI also have another issue I need help with.  DSAT will not\nre-assemble under z/OS 1.11 because of some functionality being\ndropped in the CAMLST macro.\n\nIn the comments of CAMLST macro for z/OS 1.11 it states:\n\n*/*     - The first parameter indicates the function requested and   */\n*/*       is required for all CAMLST invocations. For Catalog, the   */\n*/*       supported functions are NAME, CAT, CATBX, UNCAT, UCATDX    */\n*/*       and RECAT. For DADSM, the supported functions are SEARCH,  */\n*/*       SEEK, SCRATCH and RENAME. Functions no longer supported    */\n*/*       are BLDA, BLDG, BLDX, BLOCK, DLTA, DLTX, DRPX, and LNKX.   */\n\nDSAT is currently using the BLOCK function, which is generating\nthe errors.  I attached a copy of the output, if you would like\nto see.\n\nSo I guess, my real question is.  \"Would you be willing to\nincorporate the SMS code into DSAT and fix DSAT so that it\nassembles under z/OS 1.11?\"  If not, would you be able to\nrecommend a contact.\n\nRegards,\nJohn Loch\nHP Enterprise Service\nInfrastructure Service Line / Mainframe Technical Services\nOffice: (704) 532-2875 Mobile: (980) 230-1352\nE-Mail: john.loch@hp.com\n\n  - - - - - - - - - - -\n\nSubject:   Re: DSAT command\nFrom:      John P Kalinich <jkalinic@csc.com>\nDate:      Fri, 16 Oct 2009 08:58:04 -0400\nTo:        \"LOCH, JOHN\" <john.loch@hp.com>\nCC:        sbgolob@attglobal.net\n\nJohn,\n\nAndreas Freybier was the last person to change DSAT in April\n2003, so he may be able to help out.  I think the CAMLST BLOCK\nand LOCBYTTR code can be removed.  My DFP 1.9 manual says the\nCAMLIST BLOCK format is no longer supported and will result in an\nerror, but it assembles OK.\n\n  Andreas.Freybier@Beiersdorf.com\n\nRegards,\nJohn K\n\n  - - - - - - - - - - -\n\nSubject:  AW: DSAT command\nFrom:     \"Freybier, Andreas /BSS HAM\" <Andreas.Freybier@Beiersdorf.com>\nDate:     Tue, 20 Oct 2009 09:57:04 +0200\nTo:       \"LOCH, JOHN\" <john.loch@hp.com>\nCC:       \"sbgolob@attglobal.net\" <sbgolob@attglobal.net>\n\nHello John,\n\nYes, some years ago I did some small enhancements to the DSAT\nlistlines.  Now I tried an assembly with z/OS 1.10 and have the\nsame assembly errors.\n\nBut our old load module is still working with 1.10.\n\nI think we should discuss with Sam, if the DSAT can/should be\nadapted for the new CAMLST and for future EAV etc.\n\nBest Regards,\nAndreas\n\n-----Urspruengliche Nachricht-----\nVon: LOCH, JOHN \u00ddmailto:john.loch@hp.com\u00a8\nGesendet: Freitag, 16. Oktober 2009 15:01\nAn: Freybier, Andreas /BSS HAM\nBetreff: FW: DSAT command\n\nWould you be willing to help us?\n\nRegards,\nJohn\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE4": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x10 \\x9f\\x01\\x10 \\x9f\\t\\x11\\x00\\x1a\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-07-28T00:00:00", "modifydate": "2010-07-28T09:11:26", "lines": 26, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  CBTV478 FILE296 DSAT\nFrom:     \"Sharpe, Ken\" <Ken.Sharpe@okdhs.org>\nDate:     Tue, 27 Jul 2010 14:48:16 -0500\nTo:       <sknutson@cbttape.org>, <sbgolob@cbttape.org>\n\nI added a small test to see if a file is an HFS dataset. Of\ncourse there is a question of whether an HFS dataset is a\npartitioned dataset or not so you can adjust the code accordingly\nto the answer to that question (i.e. how you want the flags set).\nThis change does avoid the S213-8C abend if one attempts to do a\nDSAT dsname FULL  against an HFS dataset. I marked the change\nlines with @KLS0710. I did not add DS1PDSEX to the FORMAT 1 DSCB\nDSECT you have in program so you might want to make that\nadditional change.  (Note from SBG - I did make the change, but\nthat code is not used.  The real code is from macro IECSDSL1 (1)\nto describe a Format 1 DSCB.  So the current version of that macro\n- in SYS1.MODGEN - is where the Format 1 fields are generated from.)\n\n<<dsat#2.txt>>\n\nKen Sharpe\nInformation Systems Operating System Specialist IV\nOklahoma Department of Human Services\nInfrastructure and Platform SW Services\nPhone: 405-522-1304\nCell: 405-208-3661\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE5": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01\\x10!\\x1f\\x01\\x10!\\x1f\\x11\\x07\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-07-30T00:00:00", "modifydate": "2010-07-30T11:07:01", "lines": 21, "newlines": 21, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Re: New DSAT for UTILXMIT\nFrom:     \"John P Kalinich\" <jkalinic@csc.com>\nDate:     Thu, 29 Jul 2010 11:06:21 -0400\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nSam,\n\nI added a mod to add an \"X\" for extended VSAM files in the DSORG\ncolumn.\n\n\n>>dsat 'S2K.VSAM.C0410.LBRM1' generic\n\nSERIAL ALLOC FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\nS2K005               C-AM           0     0 02/25/2009 S2K.VSAM.C0410.LBRM1\nS2K005    15       1 D-AMX U     4096     0 02/25/2009 S2K.VSAM.C0410.LBRM1.DATA\n          15    0                                           2 DATA SETS\n\nRegards,\nJohn K\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE6": {"ttr": 539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x11#\\x7f\\x01\\x11#\\x7f\\x01P\\x00\\x9f\\x00\\x9f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-08-25T00:00:00", "modifydate": "2011-08-25T01:50:50", "lines": 159, "newlines": 159, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: DSAT and Volumes with more than 65520 Cyls (EAV)\nFrom:    \"John P Kalinich\" <jkalinic@csc.com>\nDate:    Wed, 24 Aug 2011 08:58:26 -0500\nTo:      \"Freybier, Andreas /BSS HAM\" <Andreas.Freybier@beiersdorf.com>\nCC:      \"Sam Golob\" <sbgolob@attglobal.net>\n\nHi Andreas,\n\nAfter a day in the debugger, I discovered that the loop (when no\nname-list index is used, so DSAT uses the prefix or userid) was caused\nby R10 not being restored because of the 2 jumps to GETLEN and MOVEREST\nbelow.\n\nTo fix the problem, I added the base register code again after the\nLOCATE label.  And I added a missing \"L R10,BASER3\" in the \"GET\nALLOCATION\" section.\n\nAttached is updated source.\n\nRegards,\nJohn K\n\n(See attached file: dsatfix.xmi)\n\n*bdf11*  use R10 with CPPL                                        bdf11\n         DROP  R10                                                bdf11\n         USING CPPL,R10                 DEFINE CPPL BASE REGISTER bdf11\n         L     R10,SAVER10                                        bdf11\n*--------APEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN        <--- branches around base reg code\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST      <--- branches around base reg code\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n*bdf11*  from now use R10 as BaseReg again                        bdf11\n         ST    R10,SAVER10                                        bdf11\n         DROP  R10                                                bdf11\n         USING DSAT+4096+4096,R10                                 bdf11\n         L     R10,BASER3                                         bdf11\n*bdf11\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\n*\nGETLEN   SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n*\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n*\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\nLOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n\n\n  From: \"Freybier, Andreas  /BSS HAM\" <Andreas.Freybier@beiersdorf.com>\n  To:      Sam Golob <sbgolob@attglobal.net>\n  Cc:      John P Kalinich/USA/CSC@CSC\n  Date:    08/24/2011 02:27 AM\n  Subject: AW: AW: DSAT  and Volumes with more than 65520 Cyls (EAV)\n\nHello Sam\n\n>>>>>> wait in updating the CBT Tape ... until everything is fixed to\neveryone's satisfaction <<<\nYes, I think that will be good.\nI'll keep you in cc:\n\nSincerely,    Andreas\n\nBest regards / Mit freundlichen Gruessen,\nAndreas Freybier\nDatabase Platform\nBeiersdorf Shared Services GmbH\nBF 97\nQuickbornstrasse 24   D-20253 Hamburg\nTelephone:      +49 (0)40 4909 4937\nAndreas.Freybier@Beiersdorf.com\n\n-----Urspruengliche Nachricht-----\nVon: Sam Golob \u00ddmailto:sbgolob@attglobal.net\u00a8\nGesendet: Dienstag, 23. August 2011 07:50\nAn: Freybier, Andreas /BSS HAM\nCc: John P Kalinich\nBetreff: Re: AW: DSAT and Volumes with more than 65520 Cyls (EAV)\n\nHi Andreas,\n\n     It is always a pleasure to talk to you, and it is nice for me to\nhave an excuse to write.  (Keep fixing things.  Then we can talk a lot.\nLike I do to John.)\n\n     I guess from John's feedback that I should wait in updating the CBT\nTape, until both John and you are satisfied that this code works\nproperly.  The world was doing without this until now, and they can wait\na couple of days more, until everything is fixed to everyone's\nsatisfaction.  Of course, please let me know how things are going.\n\n     All the best of everything to you and your family.\n\nSincerely,    Sam\n\nOn 8/22/2011 10:34 AM, Freybier, Andreas /BSS HAM wrote:\n\n>> Hello John,\n>> many thanks for your feedback. I am glad to get your help.\n>> I think, the loop problem is fixed. It was with the R10 for BaseReg /\nCPPL.\n\n>> This time you find the new source in a TSO xmit file binary. That\nshould eliminate the conversion trouble with \"@\" and other special\ncharacters.\n\n>> The mentioned assembler warnings are also in previous versions of\nDSAT.  I didn't want to touch them. Could you please help me with\nthis, then I will include it.\n\n>> Regards,  Andreas\n>>\n>> Best regards / Mit freundlichen Gru\"?en,\n>> Andreas Freybier\n>> Database Platform\n>> Beiersdorf Shared Services GmbH\n>> BF 97\n>> Quickbornstrasse 24   D-20253 Hamburg\n>> Telephone:      +49 (0)40 4909 4937\n>> Andreas.Freybier@Beiersdorf.com\n>>\n>> -----Urspruengliche Nachricht-----\n>> Von: John P Kalinich \u00ddmailto:jkalinic@csc.com\u00a8\n>> Gesendet: Freitag, 19. August 2011 17:01\n>> An: Freybier, Andreas /BSS HAM\n>> Cc: sbgolob@attglobal.net\n>> Betreff: Re: DSAT and Volumes with more than 65520 Cyls (EAV)\n>>\n>> Andreas,\n>>\n>> I got a clean assembly with a few warnings which probably can be\n>> eliminated with some DROPs.  So far, the only issue I found is is\n>> when I issue just the TSO command without the name-list (expecting to\n>> default to my userid), it displays the header (and the first dataset\n>> for one of my userids) and then goes into a loop.  The other thing\n>> was that your download to the PC translated the \"@\" to a x'B5' which\n   was easily fixed.\n>>\n>> Regards,\n>> John K\n>>\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INDEX": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x00\\x00\\x82\\x15_\\x00\\x99\\x02_\\x12@\\x00\\x14\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1982-06-04T00:00:00", "modifydate": "1999-01-25T12:40:00", "lines": 20, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "*\n*  THIS IS AN INDEX TO THE MEMBERS IN THIS DATA SET:\n*\n*\n*\n*                      ORIGINAL\n* MEMBER    MODIFIED   SOURCE           DESCRIPTION (CP IS COMMAND PROCESSOR)\n* --------|----------|----------------|----------------------------------------\n* BLKDISK |  2/02/93 |                | DISK BLOCK SIZE OPTIMIZING CP\n* COMPARE | 10/27/98 | (CBT FILE 300) | COMPARE (BASED ON YALE PROGRAM) CP\n* DSAT    | 01/25/99 | (CBT FILE 058) | DISK DATA SET ATTRIBUTES DISPLAY CP\n* DVOL    | 09/09/97 | (CBT FILE 058) | DISK FREE SPACE DISPLAY CP\n* RELEASE | 08/25/88 | (CBT FILE 300) | DASD SPACE RELEASE CP\n* XEQ     | 06/04/82 | (CBT FILE 300) | TASKLIB/LINKLIST ATTACH CP (DOPROG)\n*\n* RESET   USED TO BE ON THIS FILE; DROPPED DUE TO LACK OF INTEREST\n* REVIEW  USED TO BE ON THIS FILE; DROPPED IN FAVOR OF REVIEW ON FILE 134\n* REVSMF  USED TO BE ON THIS FILE; DROPPED IN FAVOR OF REVSMF ON FILE 134\n* HEL     USED TO BE ON THIS FILE; DROPPED IN FAVOR OF HEL AND REVIEW\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE296": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x008\\x01\\x18\\x11\\x9f\\x01\\x18\\x11\\x9f\\x15\\x12\\x00\\xf1\\x00\\xf1\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-04-29T00:00:00", "modifydate": "2018-04-29T15:12:38", "lines": 241, "newlines": 241, "modlines": 0, "user": "CBT-496"}, "text": "//***FILE 296 IS A SERIES OF UTILITIES FROM MR BRUCE LELAND.        *   FILE 296\n//*           THIS FILE IS IN IEBUPDTE SYSIN FORMAT AND CONTAINS:   *   FILE 296\n//*                                                                 *   FILE 296\n//*     DSAT and DSATNEW fixed for 8-character TSO prefixes.        *   FILE 296\n//*          (z/OS 2.3)                                             *   FILE 296\n//*                                                                 *   FILE 296\n//*     DSAT modified further by Andreas Freybier.  Bugs fixed.     *   FILE 296\n//*          All branch instructions replaced by Jump instructions. *   FILE 296\n//*          Detailed changes are commented in the source code.     *   FILE 296\n//*                                                                 *   FILE 296\n//*     DSATNEW renamed by Sam Golob, because of incompatibility    *   FILE 296\n//*          with older versions of PDS 8.6.  Newest version        *   FILE 296\n//*          PDS86 -- VERSION 8.6.12.13  SEPTEMBER 15, 2011         *   FILE 296\n//*          fixes the incompatibility, but if you have an older    *   FILE 296\n//*          PDS, this DSAT would cause problems in formatting LC   *   FILE 296\n//*          or LISTC or LISTF.  Therefore to keep it separate,     *   FILE 296\n//*          I have renamed it to DSATNEW.                          *   FILE 296\n//*                                                                 *   FILE 296\n//*     DSAT modified by Andreas Freybier, bug fixed by             *   FILE 296\n//*          John Kalinich (08/24/2011).  (called DSATNEW)          *   FILE 296\n//*                                                                 *   FILE 296\n//*     DSAT fixed by Andreas Freybier to support EAV volumes.      *   FILE 296\n//*          (this version is in member DSATNEW, and it needs       *   FILE 296\n//*          system macros at the z/OS 1.10 level or higher,        *   FILE 296\n//*          to assemble.)  (called DSATNEW)                        *   FILE 296\n//*                                                                 *   FILE 296\n//*     DSAT additional change by John Kalinich to recognize        *   FILE 296\n//*          extended format VSAM datasets.  See member $$NOTE5.    *   FILE 296\n//*     email:  \"John P Kalinich\" <jkalinic@csc.com>                *   FILE 296\n//*                                                                 *   FILE 296\n//*     DSAT fixed by Ken Sharpe (see $$NOTE4 in the pds            *   FILE 296\n//*             for CBT File 296) to recognize HFS datasets.        *   FILE 296\n//*     email:  \"Sharpe,Ken\"<Ken.Sharpe@okdhs.org>                  *   FILE 296\n//*                                                                 *   FILE 296\n//*     DSAT enhanced by Andreas Freybier, Apr 2003.                *   FILE 296\n//*     email:  Andreas.Freybier@Beiersdorf.com                     *   FILE 296\n//*                                                                 *   FILE 296\n//*     DVOL fixed by Cary Garrett to account for the length        *   FILE 296\n//*     change of the CVAFDSM parameter list.                       *   FILE 296\n//*     email:  cogarre@ci.birmingham.al.us                         *   FILE 296\n//*                                                                 *   FILE 296\n//*     Contents of this file:                                      *   FILE 296\n//*                                                                 *   FILE 296\n//*        NAME      VER.MOD   LAST MODIFIED    SIZE   ID           *   FILE 296\n//*        $$$$$NOT   01.00  1998/10/27 10:04      9  SBGOLOB       *   FILE 296\n//*        $$$$SAM    01.01  1994/08/19  8:25     34  SBGCSC        *   FILE 296\n//*        $$$$SAM1   01.01  1998/04/22 22:55      3  SBGOLOB       *   FILE 296\n//*        $$$CGARR   01.00  2005/02/28 23:44     23  SBGOLOB       *   FILE 296\n//*        $$NOTE1    01.00  2008/03/23  7:57     18  SBGOLOB       *   FILE 296\n//*        $$NOTE2    01.00  2009/10/06 11:25     31  SBGOLOB       *   FILE 296\n//*        $$NOTE3    01.00  2009/10/22 14:20    216  DSATCHG       *   FILE 296\n//*        $$NOTE4    01.01  2010/07/28  9:11     26  SBGOLOB       *   FILE 296\n//*        $INDEX     01.18  1999/01/25 12:40     20  SBGOLOB       *   FILE 296\n//*        @FILE296   04.79  2010/07/28  9:28    211  CBT-479       *   FILE 296\n//*        BLKDISK    01.21  1993/02/02 12:56   1758  WSER07        *   FILE 296\n//*        COMPARE    01.45  2009/10/02  1:32   3704  GREG          *   FILE 296\n//*        COMPAREB   01.00  2000/01/11 15:20   1851  SBGOLOB       *   FILE 296\n//*        DSAT       01.03  2010/07/28  9:05   4462  KSHARPE       *   FILE 296\n//*        DSAT$      01.24  2009/10/27 11:42    289  JLOCH         *   FILE 296\n//*        DSATO      01.41  1999/01/25 12:34   4947  WSER07        *   FILE 296\n//*        DSATOLD    01.32  1994/08/05 13:15   4258  WSER07        *   FILE 296\n//*        DSAT1      01.09  2003/04/30 13:13   4959  FREYBIE       *   FILE 296\n//*        DSAT2      01.07  2009/10/22 13:23   4443  SBGOLOB       *   FILE 296\n//*        DVOL       01.00  2005/02/28 23:44   3560  CGARRET       *   FILE 296\n//*        DVOLO      01.28  1998/04/21 17:29   3548  WSER07        *   FILE 296\n//*        HEL        01.01  1993/09/03  6:41      1  SBGCSC        *   FILE 296\n//*        RELEASE    01.05  2008/03/21 13:08   1283  TRIDJK        *   FILE 296\n//*        RESET      01.00  1990/01/01 12:00    217  FILE296       *   FILE 296\n//*        REVIEW     01.00  1992/12/18  7:37      1  SBGCSC        *   FILE 296\n//*        REVSMF     01.01  1992/12/18  7:38      1  SBGCSC        *   FILE 296\n//*        XEQ        01.01  1982/06/04 12:58   1326  WSER07        *   FILE 296\n//*                                                                 *   FILE 296\n//*     Description of Utilities:                                   *   FILE 296\n//*                                                                 *   FILE 296\n//*         01. DSAT- THE DSAT COMMAND IS USED TO DISPLAY           *   FILE 296\n//*                    ALLOCATION INFORMATION FOR DATA SETS         *   FILE 296\n//*                    ON A DIRECT ACCESS DEVICE.                   *   FILE 296\n//*                                                                 *   FILE 296\n//*                    DSAT WILL SEARCH THE OS CATALOG AND          *   FILE 296\n//*                    CVOLS FOR THE ENTRIES FOR THE DATA           *   FILE 296\n//*                    SETS SPECIFIED.  ALLOCATION                  *   FILE 296\n//*                    INFORMATION WILL BE OBTAINED FROM THE        *   FILE 296\n//*                    VOLUME TABLE OF CONTENTS, FORMATTED          *   FILE 296\n//*                    AND DISPLAYED.  IF A NAME IS AN INDEX        *   FILE 296\n//*                    NAME, ALL DATA SETS BELOW THE INDEX          *   FILE 296\n//*                    WILL BE DISPLAYED.                           *   FILE 296\n//*                                                                 *   FILE 296\n//*                    THE USER MAY BYPASS THE CATALOG              *   FILE 296\n//*                    SEARCH BY SUPPLYING THE VOLUME SERIAL        *   FILE 296\n//*                    ON WHICH THE DATA SET RESIDES.  THIS         *   FILE 296\n//*                    OPTION PERMITS DISPLAYING INFORMATION        *   FILE 296\n//*                    FOR UNCATALOGED DATA SETS.                   *   FILE 296\n//*                                                                 *   FILE 296\n//*                    THE ATTRIBUTES TO BE DISPLAYED MAY BE        *   FILE 296\n//*                    SELECTED BY THE USER WHEN HE ENTERS          *   FILE 296\n//*                    THE DSAT COMMAND BY SPECIFYING               *   FILE 296\n//*                    KEYWORD OPERANDS.                            *   FILE 296\n//*                                                                 *   FILE 296\n//*                    THE DSAT COMMAND MAY BE USED IN              *   FILE 296\n//*                    COMMAND PROCEDURES TO FIND THE               *   FILE 296\n//*                    ALLOCATION OF A DATA SET OR A GROUP          *   FILE 296\n//*                    OF DATA SETS AND SET THE RETURN CODE         *   FILE 296\n//*                    TO THE SPECIFIED VALUE.  THE RETURN          *   FILE 296\n//*                    CODE MAY THEN BE TESTED WITH THE WHEN        *   FILE 296\n//*                    COMMAND.  OUTPUT MAY BE SUPPRESSED BY        *   FILE 296\n//*                    SPECIFYING NOPRINT.                          *   FILE 296\n//*                                                                 *   FILE 296\n//*                    THE USER MAY CHOOSE WHAT INFORMATION         *   FILE 296\n//*                    WILL BE DISPLAYED BY ENTERING                *   FILE 296\n//*                    KEYWORDS.                                    *   FILE 296\n//*                                                                 *   FILE 296\n//*         THE INFORMATION THAT MAY BE DISPLAYED IS:               *   FILE 296\n//*                                                                 *   FILE 296\n//*           1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED.    *   FILE 296\n//*           2. FILE SEQUENCE NUMBER.                              *   FILE 296\n//*           3. DEVICE TYPE CODE FROM CATALOG ENTRY.               *   FILE 296\n//*           4. ALLOCATION  (ALLOCATED, USED, AND EXTENTS).        *   FILE 296\n//*           5. SECONDARY ALLOCATION (AMOUNT AND UNITS).           *   FILE 296\n//*           6. DATA SET ORGANIZATION.                             *   FILE 296\n//*           7. DCB (RECFM, BLKSIZE, AND LRECL).                   *   FILE 296\n//*           8. CREATION DATE.                                     *   FILE 296\n//*           9. EXPIRATION DATE.                                   *   FILE 296\n//*          10. FULLY QUALIFIED DATA SET NAME.                     *   FILE 296\n//*          11. CCHHR OF THE FORMAT 1 DSCB.                        *   FILE 296\n//*          12. GENERATION DATA GROUP DATA.                        *   FILE 296\n//*          13. PDS DIRECTORY INFORMATION.                         *   FILE 296\n//*                                                                 *   FILE 296\n//*          02. DVOL- THE DVOL COMMAND IS USED TO DISPLAY          *   FILE 296\n//*                    THE AMOUNT OF FREE SPACE ON A DIRECT         *   FILE 296\n//*                    ACCESS DEVICE.                               *   FILE 296\n//*                                                                 *   FILE 296\n//*                    DVOL WILL READ THE FORMAT 4 AND              *   FILE 296\n//*                    FORMAT 5 DSCB'S FROM THE VTOC OF A           *   FILE 296\n//*                    DIRECT ACCESS VOLUME AND DISPLAY:            *   FILE 296\n//*                                                                 *   FILE 296\n//*                    DVOL UPDATED 09/97 TO RECOGNIZE DYNAMIC      *   FILE 296\n//*                    UCB'S.                                       *   FILE 296\n//*                                                                 *   FILE 296\n//*               1.  VOLUME SERIAL                                 *   FILE 296\n//*               2.  UNIT ADDRESS                                  *   FILE 296\n//*               3.  MOUNT STATUS                                  *   FILE 296\n//*               4.  USE STATUS                                    *   FILE 296\n//*               5.  NUMBER OF BLANK DSCB'S IN THE VTOC            *   FILE 296\n//*               6.  CONDITION OF THE VTOC INDICATORS BYTE         *   FILE 296\n//*               7.  VSAM DATA FIELDS                              *   FILE 296\n//*               8.  TOTAL FREE SPACE IN TRACKS                    *   FILE 296\n//*               9.  NUMBER OF FREE EXTENTS                        *   FILE 296\n//*              10.  NUMBER OF FREE CYLINDERS                      *   FILE 296\n//*              11.  SIZE OF LARGEST EXTENTS (UP TO 5) IN          *   FILE 296\n//*                   CYLINDERS + TRACKS                            *   FILE 296\n//*              12.  SIZE OF LARGEST EXTENTS (UP TO 5) IN TRACKS   *   FILE 296\n//*                                                                 *   FILE 296\n//*                    THE RETURN CODE IS SET TO THE TOTAL          *   FILE 296\n//*                    NUMBER OF TRACKS IN THE LARGEST              *   FILE 296\n//*                    EXTENTS (UP TO 5) UP TO A MAXIMUM OF         *   FILE 296\n//*                    4095.  IF THE NUMBER OF FREE TRACKS          *   FILE 296\n//*                    EXCEEDS 4095, THE RETURN CODE WILL           *   FILE 296\n//*                    BE SET TO 4095.  IF MORE THAN ONE            *   FILE 296\n//*                    VOLUME IS DISPLAYED, THE RETURN CODE         *   FILE 296\n//*                    WILL BE REFER TO THE SPACE ON THE            *   FILE 296\n//*                    LAST VOLUME.  IF AN ERROR CONDITION          *   FILE 296\n//*                    EXISTS ON THE VOLUME, THE RETURN             *   FILE 296\n//*                    CODE WILL BE SET TO 0.                       *   FILE 296\n//*                                                                 *   FILE 296\n//*                    NOTE - IF AN ERROR CONDITION EXISTS          *   FILE 296\n//*                           ON THE VOLUME, THE RETURN             *   FILE 296\n//*                           CODE WILL BE SET TO 0.                *   FILE 296\n//*                                                                 *   FILE 296\n//*          03. RESET    -  PERFORMS THE EQUIVALENT OF A DATASET   *   FILE 296\n//*                          SCRATCH FOLLOWED BY A REALLOCATION     *   FILE 296\n//*                          IN THE SAME SPACE FOR A PDS. THE       *   FILE 296\n//*                          NUMBER OF DIRECTORY BLOCKS CAN BE      *   FILE 296\n//*                          CHANGED VIA THE PROGRAM PARM.          *   FILE 296\n//*                                                                 *   FILE 296\n//*          04. BLKDISK   - SEE BELOW FOR A COMPLETE DESCRIPTION:  *   FILE 296\n//*                                                                 *   FILE 296\n//*       DESCRIPTION:  THIS PROGRAM COMPUTES AN \"OPTIMAL\"          *   FILE 296\n//*           BLOCKSIZE FOR A DISK OR DRUM DATA SET GIVEN THE       *   FILE 296\n//*           LOGICAL RECORD LENGTH.  INPUTS INCLUDE THE LRECL      *   FILE 296\n//*           AND OPTIONALLY ANY OF THE FOLLOWING:                  *   FILE 296\n//*                                                                 *   FILE 296\n//*           A.  A KEY LENGTH (ZERO, FOR NO KEY, IS THE            *   FILE 296\n//*               DEFAULT)                                          *   FILE 296\n//*           B.  THE NUMBER OF RECORDS IN THE DATA SET (USED       *   FILE 296\n//*               FOR AN ALLOCATION COMPUTATION -- 100,000 IS       *   FILE 296\n//*               THE DEFAULT)                                      *   FILE 296\n//*           C.  THE BLOCKSIZE TO USE FOR THE ALLOCATION           *   FILE 296\n//*               COMPUTATION (THE RECOMMENDED BLOCKSIZE VALUE      *   FILE 296\n//*               IS THE DEFAULT)                                   *   FILE 296\n//*           D.  WHETHER OR NOT TO PROVIDE A TRACK CAPACITY        *   FILE 296\n//*               REPORT                                            *   FILE 296\n//*           E.  WHETHER OR NOT TO VERIFY RESULTS AGAINST          *   FILE 296\n//*               \"TRKCALC\"                                         *   FILE 296\n//*                                                                 *   FILE 296\n//*       SUPPORTED DEVICES:  THE NAME BY WHICH THIS COMMAND        *   FILE 296\n//*           PROCESSOR IS INVOKED DETERMINES THE DEVICE TYPE       *   FILE 296\n//*           TO BE USED.                                           *   FILE 296\n//*                                                                 *   FILE 296\n//*           THE FIRST THREE CHARACTERS OF THE COMMAND NAME        *   FILE 296\n//*           (USUALLY \"BLK\") ARE IGNORED; THE REMAINING FOUR       *   FILE 296\n//*           OR FIVE CHARACTERS ARE COMPARED AGAINST A TABLE       *   FILE 296\n//*           OF SUPPORTED DEVICES IN THE PROGRAM.  THE VALID       *   FILE 296\n//*           ALIAS NAMES FOR THE PROGRAM INCLUDE THE               *   FILE 296\n//*           FOLLOWING:                                            *   FILE 296\n//*                                                                 *   FILE 296\n//*           A.  BLK23051  (FOR 2305-1 DRUMS)                      *   FILE 296\n//*           B.  BLK23052  (FOR 2305-2 DRUMS)                      *   FILE 296\n//*           C.  BLK2314   (FOR 2314 DISKS)                        *   FILE 296\n//*           D.  BLK3330   (FOR 3330 DISKS)                        *   FILE 296\n//*           E.  BLK33301  (FOR 3330 MODEL 11 DISKS)               *   FILE 296\n//*           F.  BLK3340   (FOR 3340 DISKS)                        *   FILE 296\n//*           G.  BLK3350   (FOR 3350 DISKS)                        *   FILE 296\n//*           H.  BLK3375   (FOR 3375 DISKS)                        *   FILE 296\n//*           I.  BLK3380   (FOR 3380 DISKS)                        *   FILE 296\n//*           J.  BLK3390   (FOR 3390 DISKS)                        *   FILE 296\n//*           K.  BLK9345   (FOR 9345 DISKS)                        *   FILE 296\n//*                                                                 *   FILE 296\n//*          05.  REVIEW - SEE FILE 134 FOR THE LATEST VERSION OF   *   FILE 296\n//*               THIS PROGRAM.                                     *   FILE 296\n//*                                                                 *   FILE 296\n//*          06.  HEL - SEE FILE 134 FOR THE LATEST VERSION OF      *   FILE 296\n//*               THIS PROGRAM.  ON FILE 134, HEL IS NOW AN         *   FILE 296\n//*               ALIAS OF REVIEW.                                  *   FILE 296\n//*                                                                 *   FILE 296\n//*          07.  XEQ - A COMMAND PROCESSOR THAT IS DESIGNED TO     *   FILE 296\n//*               LOAD AND EXECUTE (ATTACH) A PROGRAM IN ONE OF THE *   FILE 296\n//*               SYSTEM LINK LIBRARIES OR A USER LIBRARY (TASKLIB) *   FILE 296\n//*               (Fixed for 8-character prefixes, and support      *   FILE 296\n//*               info.)                                            *   FILE 296\n//*                                                                 *   FILE 296\n//*          08   COMPARE - A SOMEWHAT MODIFIED VERSION OF THE      *   FILE 296\n//*               YALE COMPARE PROGRAM - fixed by Greg Price        *   FILE 296\n//*               to handle pds'es better.                          *   FILE 296\n//*                                                                 *   FILE 296\n//*          09   RELEASE - A TSO COMMAND TO RELEASE EXCESS SPACE   *   FILE 296\n//*               OCCUPIED BY A DATASET.  Load Module for SWA above *   FILE 296\n//*               the 16M line, assembled on 04/04/2007 by John     *   FILE 296\n//*               Kalinich.  File 035 updated on 03/23/2008 by Sam  *   FILE 296\n//*               Golob).  See member $$NOTE1.                      *   FILE 296\n//*               (Fixed for 8-character TSO prefixes-z/OS 2.3)     *   FILE 296\n//*                                                                 *   FILE 296\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLKDISK": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x00\\x00\\x90\\x07\\x9f\\x00\\x93\\x03?\\x12V\\x06\\xde\\x06\\x00\\x05\\xa5\\xe6\\xe2\\xc5\\xd9\\xf0\\xf7@@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1990-03-20T00:00:00", "modifydate": "1993-02-02T12:56:00", "lines": 1758, "newlines": 1536, "modlines": 1445, "user": "WSER07"}, "text": "//*\n//*\n//*  STEP  |  COMMENTS\n//*  ------|------------------------------------------------------\n//* (INSTALL)\n//*  ASM   | ASSEMBLES BLKDISK (IEV90 OR IFOX00 MAY BE USED)\n//*  LINK  | LINKS BLKDISK INTO 'SYS1.CMDLIB(BLKDISK)'\n//*        | WITH ALIASES:  BLK23051, BLK23052, BLK2314,\n//*        |                BLK3330,  BLK33301, BLK3340,\n//*        |                BLK3350,  BLK3375,  BLK3380,\n//*        |                BLK3390,  BLK9345.\n//* (BCOPY)\n//*  COPY  | COPIES BLKDISK HELP TO 'SYSE.HELP(BLKDISK)'\n//*        | USING IEBGENER AND SHARED ALLOCATION\n//*        | NOTE: SEE HELP INSTRUCTIONS BEFORE  //COPY.SYSUT1\n//* (BXEQ)\n//*  XEQ   | EXECUTES THE ALIASES OF BLKDISK IN THE BACKGROUND\n//*\n//*\n//*   BLKDISK VERSION 2.0:\n//*               THE NAME BY WHICH THIS COMMAND PROCESSOR IS\n//*               INVOKED DETERMINES THE DEVICE TYPE TO BE USED.\n//*\n//*               THIS COMMAND PROCESSOR USES PUTLINE OUTPUT --\n//*               IT CAN BE USED AS A TSO COMMAND PROCESSOR OR\n//*               IN BATCH MODE (SEE STEP XEQ).\n//*\n//*               THIS COMMAND PROCESSOR WILL USUALLY RECOMMEND A\n//*               BLOCKSIZE NEAR A HALF-TRACK FIGURE FOR A GIVEN\n//*               DEVICE.  IF THIS VIOLATES LOCAL GUIDELINES OR\n//*               STANDARDS, THE PROGRAM (AND THE HELP TEXT) COULD\n//*               BE CHANGED TO RECOMMEND THE LARGEST BLOCKSIZE\n//*               FOR A LRECL BELOW A CERTAIN FIGURE (FOR EXAMPLE,\n//*               6233 BYTES IS A COMMONLY USED MAXIMUM BLOCKSIZE).\n//*\n//INSTALL PROC\n//ASM     EXEC PGM=IEV90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,'XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//LINK    EXEC PGM=IEWL,PARM='MAP',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.CMDLIB            <=== MODIFY\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=VIO,SPACE=(TRK,(5,5))\n//         PEND\n//**\n//BCOPY   PROC  MEMBER='YOU.FORGOT.THE.MEMBER'\n//COPY   EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD  DISP=SHR,DSN=SYSE.HELP(&MEMBER)      <=== MODIFY\n//SYSIN    DD  DUMMY\n//         PEND\n//**\n//BXEQ   PROC\n//XEQ   EXEC  PGM=IKJEFT01,DYNAMNBR=30\n//STEPLIB DD  DSN=SYS1.LOADLIB,DISP=SHR\n//SYSTSPRT DD SYSOUT=*\n//        PEND\n//*\n//*\n//A       EXEC INSTALL       MEMBER=BLKDISK, ALIAS=(BLK3380,BLK3390)\n//ASM.SYSIN DD *\nBLKDISK TITLE ' DISK BLOCKSIZE PROGRAM VERSION 2.0   --   BRUCE LELAND'\n*  DATA SET BLKDISK AT LEVEL 2.0 AS OF 8/18/82 (ASSEMBLER SOURCE)     *\n*  DATA SET BLK3330 AT LEVEL 1.0 AS OF 1/03/78 (PL/I SOURCE)          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  PROGRAMMER:  A. BRUCE LELAND                                       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  DESCRIPTION:  THIS PROGRAM COMPUTES AN \"OPTIMAL\" BLOCKSIZE FOR     *\n*      A DISK OR DRUM DATA SET GIVEN THE LOGICAL RECORD LENGTH.       *\n*      INPUTS INCLUDE THE LRECL AND OPTIONALLY ANY OF THE             *\n*      FOLLOWING:                                                     *\n*      A.  A KEY LENGTH (ZERO, FOR NO KEY, IS THE DEFAULT)            *\n*      B.  THE NUMBER OF RECORDS IN THE DATA SET (USED FOR AN         *\n*          ALLOCATION COMPUTATION -- 100,000 IS THE DEFAULT)          *\n*      C.  THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION        *\n*          (THE RECOMMENDED BLOCKSIZE VALUE IS THE DEFAULT)           *\n*      D.  WHETHER OR NOT TO PROVIDE A TRACK CAPACITY REPORT          *\n*      E.  WHETHER OR NOT TO VERIFY RESULTS AGAINST \"TRKCALC\"         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  SUPPORTED DEVICES:  THE NAME BY WHICH THIS COMMAND PROCESSOR       *\n*      IS INVOKED DETERMINES THE DEVICE TYPE TO BE USED.              *\n*                                                                     *\n*      THE FIRST THREE CHARACTERS OF THE COMMAND NAME (USUALLY        *\n*      \"BLK\") ARE IGNORED; THE REMAINING FOUR OR FIVE CHARACTERS      *\n*      ARE COMPARED AGAINST A TABLE OF SUPPORTED DEVICES IN THE       *\n*      PROGRAM.  THE VALID ALIAS NAMES FOR THE PROGRAM INCLUDE        *\n*      THE FOLLOWING:                                                 *\n*      A.  BLK23051  (FOR 2305-1 DRUMS)                               *\n*      B.  BLK23052  (FOR 2305-2 DRUMS)                               *\n*      C.  BLK2314   (FOR 2314 DISKS)                                 *\n*      D.  BLK3330   (FOR 3330 DISKS)                                 *\n*      E.  BLK33301  (FOR 3330 MODEL 11 DISKS)                        *\n*      F.  BLK3340   (FOR 3340 DISKS)                                 *\n*      G.  BLK3350   (FOR 3350 DISKS)                                 *\n*      H.  BLK3375   (FOR 3375 DISKS)                                 *\n*      I.  BLK3380   (FOR 3380 DISKS)                                 *\n*      J.  BLK3390   (FOR 3390 DISKS)  (SEE BELOW - 12 MAR 90)        *\n*      K.  BLK9345   (FOR 9345 DISKS)  (SEE BELOW - 6 JULY 93)        *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n*     BURLINGAME, CA  94010                                           *\n*     (415) 696-1800                       HOME (408) 997-2366        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* CHANGES: (12 MARCH 1990)                                            *\n*     ADDED CODE TO SUPPORT 3390 DISKS. (DAVE GREENE, KWASHA LIPTON,  *\n*      2100 NORTH CENTRAL ROAD, FORT LEE, NJ 07024)                   *\n*                                                                     *\n*     SUMMARY OF CHANGES:                                             *\n*        A.  CODE IN 'MAXTRIAL' USES A TABLE FOR MAXIMUM BLOCKSIZES,  *\n*            SINCE OVERHEAD IS NOT LINEAR.  NOT ELEGANT, BUT IT WORKS.*\n*           (OUR 3390 MANUALS AT THIS TIME ARE SPARSE AND INCOMPLETE.)*\n*            'DEVOKEY' AND 'DEVNOKEY' ARE '0' FOR 3390 IN             *\n*            'UNITTBL' FOR 3390 (THEY ARE NOT USED IN THE CALCULATIONS*\n*            IN THIS PROGRAM).                                        *\n*        B.  'MAXBLOCK' USES THE VALUE OF 56,664 (MAXIMUM BLOCKSIZE   *\n*            WITHOUT KEYS) REGARDLESS OF KEYLENGTH VALUE.  THIS IS    *\n*            THE VALUE IBM SEEMS TO USE IN SC26-4574-0, 'USING IBM    *\n*            3390 DIRECT ACCESS STORAGE IN AN MVS ENVIRONMENT',       *\n*            APPENDIX B, FOR CALCULATING 'PERCENT SPACE USED'.        *\n*        C.  THE 'TRKSUMM NOCYLS' WAS INCREASED BY 2 BYTES (BECAUSE   *\n*            3390 HAS OVER 999 CYLINDERS PER VOLUME).                 *\n*        D.  'TRKCALC' (VERIFY) ERROR MESSAGE IF DEVICE IS NOT        *\n*            GENNED ON YOUR SYSTEM.  'VERIFY' IS THEN TURNED OFF FOR  *\n*            REMAINDER OF COMMAND PROCESSING.                         *\n*                                                                     *\n* CHANGES: (10 MAY 1991)                                              *\n*     FOR SOME LARGE LRECL VALUES (SAY IN THE 8000-10000 RANGE),      *\n*      THE RECOMMENDED VALUE WOULD BE A BLOCKING FACTOR GREATER THAN  *\n*      ONE (1), WHEN IN FACT A BLOCKING FACTOR OF ONE (1), I.E.       *\n*      UNBLOCKED, WOULD MORE EFFICIENTLY UTILIZE THE TRACK.           *\n*                                                                     *\n* CHANGES: (04 NOV 1991)                                              *\n*     FOR 3390S, THE DEFAULT 'KEYLEN' IS 0.  HOWEVER, IF 'KEYLEN(0)'  *\n*      WAS SPECIFIED, IT WAS NOT PROCESSED CORRECTLY.  FIX WAS MADE   *\n*      TO HANDLE CORRECTLY.                                           *\n*                                                                     *\n* CHANGES: (18 DEC 1992)                                              *\n*     GLOBALIZE THE INITIAL CLEAR SCREEN - GP@FT                      *\n*                                                                     *\n* CHANGES: (6 JULY 1993)                                              *\n*     ADDED CODE SIMILAR TO 3390 SUPPORT FOR 9345 DISKS - ABL)        *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         EJECT\n         MACRO\n&NAME    MSG   &TEXT\n&NAME    LA    R1,&TEXT\n         LA    R15,L'&TEXT+4\n         BAL   R14,$PUTLINE\n         MEND\n         SPACE 3\n         MACRO\n&NAME    EDIT  &REG,&LENGTH,&OUT,&DIGITS,&EQUAL=NO\n&NAME    CVD   &REG,DOUBLE\n         MVC   &OUT.(&LENGTH),EDITPIC+15-&LENGTH\n         ED    &OUT-1(&LENGTH+1),DOUBLE+8-(&DIGITS+1)/2\n         AIF   ('&EQUAL' EQ 'NO').MEND\n         MVI   &OUT-1,C'='\n         SPACE 1\nBND&SYSNDX CLI &OUT,X'40'            BLANK?\n         BNE   BCP&SYSNDX              NO, DONE\n         MVC   &OUT.(&LENGTH),&OUT+1   YES, SLIDE CHARACTERS DOWN 1\n         B     BND&SYSNDX              LOOP UNTIL FIRST NON-BLANK\nBCP&SYSNDX DS  0H\n.MEND    MEND\n         SPACE 3\n         MACRO\n&NAME    PCENT &OUT\n&NAME    M     R0,=F'1000'\n         A     R1,MAXROUND\n         D     R0,MAXBLOCK\n         CVD   R1,DOUBLE\n         MVC   &OUT+0(7),=X'202021204B206C'\n         ED    &OUT-1(7),DOUBLE+5\n         MEND\n         EJECT\nBLKDISK  CSECT\n         PRINT NOGEN\n         SAVE  (14,12),,*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         LR    R11,R15\n         LA    R12,2048\n         LA    R12,2048(R11,R12)\n         USING BLKDISK,R11,R12\n         ST    R13,SAVE+4\n         LR    R9,R13\n         LA    R13,SAVE\n         ST    R13,8(,R9)\n         LR    R10,R1\n         USING CPPL,R10\n         SPACE 2\n         L     R1,CPPLECT            ECT ADDRESS\n         USING ECT,R1\n         SPACE 2\n***\n***      FIND THE DEVICE TYPE FOR THIS INVOCATION\n***\n         SPACE 1\n         LA    R15,UNITTBL-DEVENTL\nNEXTUNIT LA    R15,DEVENTL(,R15)\n         CLI   0(R15),X'FF'          END OF TABLE?\n         BE    NOUNIT                YES, BRANCH\n         CLC   0(5,R15),ECTPCMD+3    THIS UNIT NAME?\n         BNE   NEXTUNIT              NO, BRANCH\n         B     FOUNDUNI              YES, BRANCH\n         SPACE 1\nNOUNIT   MSG   ERRUNIT               UNIT NOT SUPPORTED\n         B     RC12                  TERMINATE\n         DROP  R1\n         SPACE 1\nFOUNDUNI MVC   DEVNAME(DEVENTL),0(R15)\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         MVC   PUTLCALL,=F'128'      NULLIFY SPACING BETWEEN SCREENS\nNOPDSCAL EQU   *\n         SPACE 3\n***\n***      INVOKE PARSE\n***\n         SPACE 1\n         LA    R1,MYPPL\n         USING PPL,R1\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         L     R0,=A(BLKPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         DROP  R1\n         SPACE 2\n         L     R15,16              CVTPTR\n         L     R15,X'20C'(,R15)    CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         LTR   R15,R15\n         BNZ   RC12\n         SPACE 2\n         L     R9,MYANS\n         USING IKJPARMD,R9\n         EJECT\n***\n***      PROCESS PARSE RESULTS\n***\n         SPACE 1\n         LH    R15,LRE+4\n         S     R15,=F'1'\n         L     R1,LRE\nPACKNUM  PACK  DOUBLE(8),0(*-*,R1)  <<EXECUTED>>\n         EX    R15,PACKNUM\n         CVB   R1,DOUBLE\n         ST    R1,LRECL\n         LTR   R1,R1               ANY BYTES IN THE RECORD?\n         BP    NOLRE               YES, BRANCH\n         CLI   TRACKKW+1,1         TRACK CAPACITY REPORT REQUESTED?\n         BE    NOLRE               YES, BRANCH\n         MSG   ERRNULL             NO, ERROR MESSAGE\n         B     RC12                    AND QUIT\n         SPACE 1\nNOLRE    DS    0H\n         XC    KEY3390,KEY3390     ZERO THIS\n         LH    R15,KEY+4\n         S     R15,=F'1'\n         BM    NOKEY\n         L     R1,KEY\n         EX    R15,PACKNUM\n         CVB   R1,DOUBLE\n         ST    R1,KEYLEN\n         C     R1,=F'255'          KEY LENGTH<256\n         BNH   KEYINDX             YES, BRANCH\n         MSG   ERRKEY              NO, ERROR\n         B     RC12\n         SPACE 1\nCHKINDX  CLI   0(R15),*-*\nKEYINDX  DS    0H\n         CLC   DEVTYPE,TYPE9345    CHECK IF 9345\n         BE    KEYIN00             YES, BRANCH\n         CLC   DEVTYPE,TYPE3390    CHECK IF 3390\n         BNE   NOKEY               BR IF NOT\n* CALCULATE TBL3390 COLUMN INDEX FOR 3390 KEYLENGTH\n* NOTE - FROM ABOVE TEST, KEY LENGTH < 256\n* (WE COULD USE A TRANSLATE TABLE TO ACCOMPLISH THIS)\nKEYIN00  LTR   R1,R1               CHECK FOR KEYLEN=0\n         BNP   NOKEY               BR IF YES\n         L     R0,=F'1'            INITIALIZE INDEX VALUE\n         LA    R15,KDX3390         ADDRESS THE TABLE\nKEYIN10  DS    0H\n         EX    R1,CHKINDX          COMPARE R1 W/ HIGH RANGE KEY VALUE\n         BNL   KEYIN20             BR IF RANGE FOUND\n         LA    R15,1(,R15)         BUMP TO NEXT TABLE ENTRY\n         A     R0,=F'1'            INCREMENT INDEX VALUE\n         B     KEYIN10             CONTINUE\nKEYIN20  DS    0H\n         STH   R0,KEY3390          STORE THE INDEX VALUE\nNOKEY    LH    R15,REC+4\n         S     R15,=F'1'\n         BM    NOREC\n         L     R1,REC\n         EX    R15,PACKNUM\n         CVB   R1,DOUBLE\n         ST    R1,RECNUM\n         SPACE 1\nNOREC    LH    R15,BLK+4\n         S     R15,=F'1'\n         BM    NOBLK\n         L     R1,BLK\n         EX    R15,PACKNUM\n         CVB   R1,DOUBLE\n         ST    R1,USEBLK\n         SPACE 3\n***\n***      CLEAR THE SCREEN (IF IT IS 24X80 OR 27X132)\n***                       (OR ANYTHING ELSE - GP@FT)\n***                       (AND NOT CALLED BY PDSTOOLS - ABL)\n         SPACE 1\nNOBLK    DS    0H\n         ICM   R15,15,PDSMSGA   DO NOT ISSUE A TPUT\n         BNZ   MAXTRACK         IF INVOKED VIA PDSCALL(NN) KEYWORD\n         STLINENO LINE=1        CLEAR ANY 3270 SCREEN          GP@FT\n         EJECT\n***\n***      CALCULATE MAXIMUM TRACK CAPACITY FOR THIS KEYLENGTH\n***\n         SPACE 1\n***   NOTE: THE TRACK CAPACITY TABLE IS COMPUTED BY GUESSING AT THE\n***         MAXIMUM BLOCKSIZE FOR EACH OF THE 17 BLOCKING FACTORS\n***         (IN TURN) AND CALLING DEVCALC UNTIL THE BLOCKSIZE IS\n***         DECREMENTED TO THE CORRECT VALUE FOR THE BLOCKING FACTOR.\n***\n*     NOTE: FOR 3390 AND 9345, MAX. TRACK CAPACITY IS DERIVED FROM A\n*             TABLE.  IT IS NOT ELEGANT.  THE OVERHEAD FOR VARIOUS\n*             KEYLENGTHS AND BLOCKING FACTORS IS NOT LINEAR.  WHEN\n*             THERE IS TIME (AND WE HAVE SOME ADDITIONAL 3390 MANUALS),\n*             A CALCULATION COULD BE USED, PERHAPS, INSTEAD OF A TABLE\n*             LOOKUP.\n         SPACE 1\nMAXTRACK LA    R3,18                  CALCULATE TRACK CAPACITY\n         LA    R6,SAVEMAX-4           MAXIMUM BLOCKSIZE ARRAY -4\nMAXLOOP  S     R3,=F'1'               BLOCKS/TRACK -- ZERO REACHED?\n         BNP   MAXDONE                YES, BRANCH\n         A     R6,=F'4'               NEXT MAX CELL\n         CLC   DEVTYPE,TYPE3390       CHECK IF 3390\n         BE    MAX3390                BR IF YES\n         CLC   DEVTYPE,TYPE9345       CHECK IF 9345\n         BE    MAX3390                BR IF YES\n         LH    R1,DEVOKEY             ASSUME KEYED FILE\n         CLI   KEYLEN+3,0             CORRECT?\n         BH    MAXLOOPA               YES, BRANCH\n         SH    R1,DEVNOKEY            NO, LESS KEY OVERHEAD AMOUNT\nMAXLOOPA A     R1,KEYLEN              PLUS THE KEY LENGTH\n         MR    R0,R3                  ACCUMULATED OVERHEAD\n         SR    R5,R5\n         ICM   R5,3,DEVTRACK          MAXIMUM TRACK SIZE\n         SR    R5,R1                  ESTIMATED BYTES LEFT FOR RECORDS\n         SR    R4,R4\n         DR    R4,R3                  ESTIMATED MAXIMUM BLOCKSIZE\n         CLI   VERIFYKW+1,1           VERIFY?\n         BNE   MAXTRIAL               NO, BRANCH\n         A     R5,=F'1'               YES, USE ONE HIGHER\n         B     MAXTRIAL               CONTINUE\n         SPACE 2\nMAX3390  DS    0H\n         LR    R15,R3                 FETCH BLOCKING FACTOR\n         SH    R15,=H'1'              REDUCE BY 1\n         SLR   R14,R14                CLEAR\n         M     R14,TB3390RL           MULTIPLY BY ROW LENGTH\n         LH    R14,KEY3390            FETCH KEYLENGTH INDEX\n         SLL   R14,TB3390IT/2         MULTIPLY BY LENGTH OF ITEM\n         ALR   R15,R14                COMPUTE INDEX TO MAX BLKSIZE\n         L     R14,=A(TBL3390)        ADDRESS THE TABLE\n         CLC   DEVTYPE,TYPE9345       9345?\n         BNE   MX3390AA               NO, BRANCH\n         L     R14,=A(TBL9345)        ADDRESS THE TABLE\nMX3390AA ALR   R14,R15                ADDRESS THE BLKSIZE\n         SLR   R5,R5                  CLEAR R5\n         ICM   R5,TB3390IC,0(R14)     FETCH MAX. BLKSIZE\n         CLI   VERIFYKW+1,1           CHECK FOR VERIFY\n         BNE   MAXTRL50               BR IF NOT\n         LR    R1,R5                  MOVE VALUE TO R1\n         OI    FLG3390,MXT3390        INDICATE CALLER\nMX3390TA DS    0H\n         A     R1,=F'1'               BUMP BLKSIZE BY 1\n         ST    R1,0(,R6)              SAVE OVER CALL\n         BAL   R14,DEVTRKCX           DO TRKCALC\n         TM    FLG3390,NODEVG         MAYBE DEVICE NOT GENNED\n         BNZ   MAXTRL50               EXIT IF NOT\n         L     R1,TRKCALCN\n         A     R1,=F'1'               COUNT CALLS TO TRKCALC\n         ST    R1,TRKCALCN\n         L     R1,0(,R6)              RESTORE BLKSIZE\n*  FOR BLOCKING FACTOR = 1, R15 \u00ac= 0 CAN BE EXPECTED.\n         LTR   R15,R15                CHECK RETURN CODE\n         BNZ   MX3390TC               BR IF NOT ZERO\n         CR    R0,R3                  CHECK BLOCKING FACTOR\n         BE    MX3390TA               SAME, BUMP IT UP\n         BL    MX3390TC               BR IF LOW\n*  BLOCKING FACTOR HIGH, SHOULD NOT HAPPEN.\n*  TABLE MUST REALLY BE OFF, BETTER CHECK IT.\n         MSG   ER3390CK               ISSUE ERROR MESSAGE\n         LR    R2,R0                  FETCH R0\n         ABEND 25,DUMP                QUIT\nMX3390TC DS    0H\n         S     R1,=F'1'               REDUCE BLKSIZE BY 1\n         ST    R1,0(,R6)              SAVE OVER CALL\n         BAL   R14,DEVTRKCX           DO TRKCALC\n         L     R1,TRKCALCN\n         A     R1,=F'1'               COUNT CALLS TO TRKCALC\n         ST    R1,TRKCALCN\n         L     R1,0(,R6)              RESTORE BLKSIZE\n         LTR   R15,R15                CHECK RETURN CODE\n         BNZ   MX3390TF               BR IF NOT ZERO\n         CR    R0,R3                  CHECK BLOCKING FACTOR\n         BL    MX3390TC               BR IF LOW, TRY AGAIN\n         BE    MX3390TM               SAME, LET'S SAVE IT\n*  BLOCKING FACTOR TOO HIGH, SHOULD NOT HAPPEN\n         MSG   ER3390CK               ISSUE ERROR MESSAGE\n         LR    R2,R0                  FETCH R0\n         ABEND 26,DUMP                INDICATE ERROR, CHECK TABLE\n*  ERROR FROM TRKCALC,  BETTER CHECK OUR TABLE.\nMX3390TF DS    0H\n         MSG   ER3390CK               ISSUE ERROR MESSAGE\n         LR    R2,R0                  FETCH R0\n         ABEND 27,DUMP\nMX3390TM DS    0H\n         LR    R5,R1                  FETCH BLKSIZE\n         B     MAXTRL50               BR TO SAVE IT\n         SPACE 2\nMAXTRIAL LR    R0,R5\n         BAL   R14,DEVCALC            CALCULATE TRACK CAPACITY\n         L     R1,TRKCALCN\n         A     R1,=F'1'               COUNT CALLS TO TRKCALC\n         ST    R1,TRKCALCN\n         S     R5,=F'1'               ASSUME IT FAILED\n         LTR   R15,R15                CORRECT?\n         BNZ   MAXTRIAL               YES, BRANCH\n         SPACE 1\n         CR    R0,R3                  CORRECT BLOCKING FACTOR?\n         BL    MAXTRIAL               NO, NOT YET\n         BH    CAPERROR               NO, BLOCKED HIGHER THAN ESTIMATED\n         A     R5,=F'1'\nMAXTRL50 DS    0H\n         NI    FLG3390,255-MXT3390    INDICATE CALLER\n         ST    R5,0(,R6)              SAVE MAXIMUM BLOCKSIZE\n         B     MAXLOOP\n         SPACE 3\nCAPERROR LR    R2,R0\n         MSG   ERRPROG\n         ABEND 10,DUMP\n         EJECT\n***\n***      CALCULATE OPTIMAL BLOCKSIZES USING THE PROVIDED LRECL\n***\n*  3390 PERCENT-SPACE-USED CALCULATIONS USE THE MAXIMUM BLKSIZE\n*  PER TRACK, W/O KEYS, AS THE BASE.  THIS MAY NOT BE CORRECT, BUT IT\n*  IS CONSISTENT WITH THE CALCULATIONS IN SC26-4574-0, 'USING IBM\n*  3390 DIRECT ACCESS STORAGE IN AN MVS ENVIRONMENT', APPENDIX B.\n         SPACE 1\nMAXDONE  DS    0H\n         CLC   DEVTYPE,TYPE3390 IS THIS FOR 3390?\n         BNE   MAXD0100         BR IF NOT\n         SLR   R5,R5            CLEAR REG.\n         ICM   R5,TB3390IC,TBL3390    FETCH MAX. BLKSIZE\nMAXD0100 DS    0H\n         CLC   DEVTYPE,TYPE9345 IS THIS FOR 9345?\n         BNE   MAXD0200         BR IF NOT\n         SLR   R5,R5            CLEAR REG.\n         ICM   R5,TB3390IC,TBL9345    FETCH MAX. BLKSIZE\nMAXD0200 DS    0H\n         ST    R5,MAXBLOCK      MAXIMUM BLOCKSIZE\n         SRL   R5,1             1/2 MAXBLOCK FOR ROUNDING TO 1/10\n         ST    R5,MAXROUND      SAVE FOR LATER\n         ICM   R0,15,LRECL      ANY BYTES IN THE RECORD?\n         BP    UNBLOCK          YES, BRANCH\n         MSG   ERRNULL          NO, ERROR MESSAGE\n         B     TRKCHECK\n         SPACE 2\nUNBLOCK  SR    R1,R1\n         ICM   R1,3,DEVTRACK    MAXIMUM TRACK SIZE\n         CR    R0,R1            LRECL>DEVICE TRACK CAPACITY?\n         BH    TRKLRECL         YES, BRANCH\n         C     R0,=F'32760'     LRECL>32760?\n         BH    TRKERR           YES, BRANCH\n         BAL   R14,DEVCALC      COMPUTE NUMBER PER TRACK\n*\n         LTR   R15,R15          DO ANY FIT ON A TRACK?\n         BNZ   TRKLRECL         NO, BRANCH\n         LR    R2,R0            YES, SAVE THE UNBLOCKED NUMBER\n         SPACE 3\n         L     R3,=F'1'         BLOCKING FACTOR\n         L     R4,LRECL         TRIAL BLOCKSIZE\n         LA    R5,17*4          BLOCKS PER TRACK *4\n         LA    R6,SAVEMAX-4     BLOCKSIZE RANGE ARRAY START -4\n         SPACE 2\nNEWBLK   S     R5,=F'4'         DONE ALL ELEMENTS?\n         BNP   DONEBLK          YES, BRANCH\n         A     R6,=F'4'         CURRENT BLOCKSIZE RANGE\n         B     OLDLRECL\n         SPACE 1\nNEWLRECL A     R3,=F'1'         BLOCKING FACTOR\n         A     R4,LRECL         TRIAL BLOCKSIZE\n         SPACE 1\nOLDLRECL C     R4,=F'32760'     ABOVE MAXIMUM BLOCKSIZE?\n         BH    DONEBLK          YES, BRANCH\n         C     R4,0(,R6)        IN THE LOWER RANGE?\n         BNH   NEWLRECL         NO, BRANCH -- NEXT LRECL\n         C     R4,4(,R6)        INSIDE THE UPPER RANGE?\n         BH    NEWBLK           NO, BRANCH -- NEXT RANGE\n         ST    R3,SAVEBLOK(R5)  SAVE THIS BLOCKING FACTOR\n         B     NEWLRECL         GET THE NEXT LRECL\n         EJECT\n***\n***      OUTPUT THE SUMMARY BLOCKSIZE HEADERS AND FIRST OUTPUT LINE\n***\n         SPACE 1\nDONEBLK  MVC   BLOCKHED(6),DEVCHAR   DEVICE TYPE\n         L     R1,LRECL              LRECL\n         EDIT  R1,6,BLOCKHED+35,5,EQUAL=YES\n         L     R1,KEYLEN             KEY LENGTH\n         EDIT  R1,3,BLOCKHED+56,3,EQUAL=YES\n         MSG   BLOCKHED\n         MSG   BLOCKLIN\n         MSG   BLOCKUNL\n         SPACE 2\n         C     R2,=F'16'             MORE THAN 16 BLOCKS?\n         BNH   OPTSKIP               NO, BRANCH\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE\n         L     R1,LRECL              BLOCKSIZE\n         EDIT  R1,6,OUTLINE+15,5     BLKSIZE\n         EDIT  R2,6,OUTLINE+31,5     BLOCKS/TRACK\n         EDIT  R2,6,OUTLINE+47,5     RECORDS/TRACK\n         LR    R1,R2                 RECORDS/TRACK\n         MH    R1,LRECL+2            BYTES/TRACK\n         PCENT OUTLINE+61            CONVERT TO % UTILIZED\n*  MVI OUTLINE+31,C'$'\n         MSG   OUTLINE\n***\n***\n***  NOTE: THE FOLLOWING STATEMENTS BIAS THE ORDER OF CHOICE FOR\n***        \"OPTIMAL\" BLOCKING.  CURRENTLY, THESE STATEMENTS ARE\n***        BIASED FOR A 1/2 TRACK BLOCK, FOLLOWED BY 1/3, 1/4,\n***        1/5, ... 1/16 (WITH NO FULL-TRACKING RECOMMENDED).\n***\n         SPACE 1\nOPTSKIP  L     R4,=F'1'\n         LR    R5,R4\n         SR    R1,R1\nOPT      LH    R2,BLKPREF(R1)        NEXT INDEX\n         A     R1,=F'2'              ADVANCE POINTER\n         LTR   R2,R2                 POSITIVE?\n         BNP   OPTDONE               NO, BRANCH\n         LR    R3,R2\n         SLL   R3,2                  TIMES FOUR\n         L     R3,SAVEBLOK(R3)       SAVEBLOK ELEMENT\n         C     R3,=F'1'              ANY BLOCKED QUANITITY?\n         BNH   OPTA                  NO, BRANCH\n         LR    R4,R2                 RECOMMENDS BLOCKED RECORDS\nOPTA     C     R3,=F'0'              ANY UNBLOCKED QUANITITY?\n         BNH   OPTB                  NO, BRANCH\n         LR    R5,R2                 RECOMMENDS UNBLOCKED RECORDS\nOPTB     B     OPT\n         EJECT\n***\n***      OUTPUT THE REMAINDER OF THE SUMMARY BLOCKSIZE TABLE\n***\n         SPACE 1\nOPTDONE  C     R4,=F'1'              ANY BLOCKED QUANTITY?\n         BNE   OPTDA                 YES, BRANCH\n         LR    R4,R5                 NO, USE THE UNBLOCKED QUANTITY\nOPTDA    LR    R1,R4\n         SLL   R1,2                  INDEX TO SAVEBLOK ENTRY\n         L     R1,SAVEBLOK(R1)       BLOCKING FACTOR\n         LR    R2,R1                 SAVE BLOCKING FACTOR\n         MH    R1,LRECL+2            RECOMMENDED BLOCKSIZE\n         ST    R1,RECOMEND           SAVE FOR LATER\n         LR    R1,R2                 FETCH BLOCKING FACTOR\n         MR    R0,R4                 CALC LRECL/TRACK\n         MH    R1,LRECL+2            BYTES/TRACK\n         ST    R1,RECBPT             SAVE THIS VALUE\n         SPACE 1\n         LA    R2,17                 LOOP CONTROL\nOUTNEXT  S     R2,=F'1'\n         BNP   ALLOC\n         LR    R1,R2\n         SLL   R1,2\n         L     R3,SAVEBLOK(R1)\n         LTR   R3,R3\n         BNP   OUTNEXT\n         SPACE 1\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE\n         SPACE 1\n         C     R3,=F'1'              BLOCKING FACTOR = 1 ?\n         BNE   OUTNB                 BR IF NOT\n         LR    R1,R3                 FETCH B.F.\n         MR    R0,R2                 LRECLS/TRACK\n         MH    R1,LRECL+2            BYTES/TRACK\n         C     R1,RECBPT             COMP. W/REC.BLK. BYTES/TRACK\n         BNH   OUTNB                 BR IF NOT GREATER\n         LR    R4,R2                 CHANGE RECOMMENDED VALUE\n         LR    R1,R3                 FETCH BLOCKING FACTOR\n         MH    R1,LRECL+2            CALCULATE BLOCKSIZE\n         ST    R1,RECOMEND           STORE NEW RECOMMENDED VALUE\nOUTNB    DS    0H\n         LR    R1,R3\n         MH    R1,LRECL+2            BLOCKSIZE\n         EDIT  R1,6,OUTLINE+15,5\n         CR    R2,R4                 RECOMMENDED VALUE?\n         BNE   OUTNC                 NO, BRANCH\n         MVC   OUTLINE(15),=C' RECOMMENDED-->'\nOUTNC    EDIT  R2,6,OUTLINE+31,5\n         LR    R1,R3\n         MR    R0,R2                 LRECLS/TRACK\n         EDIT  R1,6,OUTLINE+47,5\n         MH    R1,LRECL+2            BYTES/TRACK\n         PCENT OUTLINE+61            CONVERT TO % UTILIZED\n         MSG   OUTLINE\n         B     OUTNEXT\n         EJECT\n***\n***      CALCULATE ALLOCATION QUANTITIES\n***\n         SPACE 1\nALLOC    ICM   R5,15,RECNUM            ANY RECORDS?\n         BZ    TRKCHECK                NO, BRANCH\n         MSG   BLANKLNE\n         ICM   R4,15,USEBLK            ANY BLOCKSIZE?\n         BP    ALLOCBA                 YES, BRANCH\n         L     R4,RECOMEND             NO, USE RECOMMENDED VALUE\nALLOCBA  SR    R1,R1\n         ICM   R1,3,DEVTRACK\n         CR    R4,R1                   BLOCKSIZE>TRACK CAPACITY?\n         BH    TRKCAPTY                YES, BRANCH\n         C     R4,=F'32760'            BLOCKSIZE>32760?\n         BH    TRKERR                  YES, BRANCH\n         LR    R3,R4\n         SR    R2,R2\n         D     R2,LRECL\n         LTR   R2,R2                   BLOCKSIZE EVENLY DIVISIBLE?\n         BZ    ALLOC2                  YES, BRANCH\n         MSG   ERRBLOCK                BLOCKSIZE NOT EVENLY DIVISIBLE\n         B     TRKCHECK\n         SPACE 1\nALLOC2   LR    R0,R4                   DD OF RKDD\n         BAL   R14,DEVCALC             COMPUTE THE NUMBER PER TRACK\n         LTR   R15,R15                 DID IT FIT?\n         BNZ   TRKCAPTY                NO, BRANCH\n         LR    R2,R0                   BLOCKS/TRACK\n         EDIT  R4,6,ALLOCH+12,5\n         EDIT  R5,9,ALLOCH+24,7\n         MSG   ALLOCH\n         SR    R4,R4\n         DR    R4,R3\n         LTR   R4,R4\n         BZ    ALLOC2A\n         A     R5,=F'1'                BLOCKS\nALLOC2A  EDIT  R5,9,ALLOCL+1,7\n         SR    R4,R4\n         DR    R4,R2\n         LTR   R4,R4\n         BZ    ALLOC2B\n         A     R5,=F'1'                TRACKS\nALLOC2B  EDIT  R5,9,ALLOCL+19,7\n         LH    R2,DEVTRKCL             TRACKS PER CYLINDER\n         SR    R4,R4\n         DR    R4,R2\n         LTR   R4,R4\n         BZ    ALLOC2C\n         A     R5,=F'1'\nALLOC2C  EDIT  R5,9,ALLOCL+40,7\n         MSG   ALLOCL\n         EJECT\n***\n***      OUTPUT THE TRACK CAPACITY TABLE IF NEEDED\n***\n         SPACE 1\nTRKCHECK CLI   TRACKKW+1,1            TRACK CAPACITY REPORT REQUESTED?\n         BNE   TRKCALLS               NO, BRANCH\n         B     TRKCAP\n         SPACE 1\nTRKERR   MSG   ERR32760               BLOCKSIZE EXCEEDS 32,760 BYTES\n         B     TRKNOCAP\n         SPACE 1\nTRKLRECL MVC   USEBLK,LRECL           LRECL EXCEEDS DEVICE MAXIMUM\nTRKCAPTY L     R1,USEBLK              BLKSIZE EXCEEDS DEVICE MAXIMUM\n         EDIT  R1,6,ERRSIZE+16,5\n         MSG   ERRSIZE\n         SPACE 1\nTRKNOCAP CLI   TRACKKW+1,2            TRACK CAPACITY REPORT DISALLOWED?\n         BE    TRKCALLS               YES, BRANCH\n         SPACE 2\nTRKCAP   CLC   PUTLCALL,=F'1'         JUST ONE LINE SO FAR?\n         BE    TRKCAP4                YES, BRANCH\nTRKCAP2  MSG   BLANKLNE\n         CLC   PUTLCALL,LINES         FILLED THE SCREEN?\n         BL    TRKCAP2                NO, BRANCH\n         SPACE 1\nTRKCAP4  MVC   TRKCAPH(6),DEVCHAR     DEVICE TYPE\n         L     R1,KEYLEN              KEY LENGTH\n         EDIT  R1,3,TRKCAPH+37,3,EQUAL=YES\n         MSG   TRKCAPH\n         MSG   TRKCAPM\n         MSG   TRKCAPU\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE\n         SPACE 1\n         SR    R3,R3\n         LA    R6,SAVEMAX+16*4        MAXIMUM BLOCKSIZE POSITITION\nNEXTMAX  A     R3,=F'1'               NEXT BLOCK/TRACK MULTIPLE\n         EDIT  R3,6,OUTLINE+13,5      BLOCKS/TRACK\n         L     R5,0(,R6)              BLOCKSIZE\n         EDIT  R5,6,OUTLINE+25,5\n         MR    R4,R3                  BYTES/TRACK\n         EDIT  R5,6,OUTLINE+41,5\n         LR    R1,R5                  BYTES/TRACK\n         PCENT OUTLINE+56             CONVERT TO % UTILIZED\n         MSG   OUTLINE\n         S     R6,=F'4'               NEXT MAXIMUM BLOCKSIZE POSTITION\n         C     R3,=F'16'\n         BL    NEXTMAX\n         EJECT\n***\n***      OUTPUT DEVICE SUMMARY LINE ONE\n***\n         SPACE 1\n         MSG   BLANKLNE\n         SR    R0,R0\n         ICM   R0,3,DEVTRACK          MAXIMUM TRACK LENGTH\n         SH    R0,DEVOKEY             LESS RECORD AND KEY OVERHEAD\n         AH    R0,DEVNOKEY            PLUS KEY OVERHEAD AMOUNT\n         CLI   DEVTYPE,X'0E'          3380 DEVICE?\n         BE    SUM3380                YES, BRANCH\n         CLI   DEVTYPE,X'0F'          3390 DEVICE?\n         BE    SUM3390                YES, BRANCH\n         CLI   DEVTYPE,X'04'          9345 DEVICE?\n         BE    SUM9345                YES, BRANCH\n         CLI   DEVTYPE,X'0C'          3375 DEVICE?\n         BNE   SUMDONE                NO, BRANCH\n         SPACE 1\nSUM3375  L     R0,=F'35616'           3375 DISK\n         B     SUMDONE\n         SPACE 1\nSUM3380  L     R0,=F'47476'           3380 DISK\n         B     SUMDONE\n         SPACE 1\nSUM3390  L     R0,=F'56664'           3390 DISK\n         B     SUMDONE\n         SPACE 1\nSUM9345  L     R0,=F'46456'           9345 DISK\n         B     SUMDONE\n         SPACE 2\nSUMDONE  EDIT  R0,6,TRKDEVS+30,5,EQUAL=YES\n         SPACE 1\n         LH    R1,DEVCYL              TOTAL CYLINDERS\n         MH    R1,DEVTRKCL            TOTAL TRACKS\n         EDIT  R1,6,TRKDEVS+46,5,EQUAL=YES\n         SPACE 1\n         MR    R0,R0                  TOTAL BYTES\n         EDIT  R1,14,TRKDEVS+61,11,EQUAL=YES\n         SPACE 1\n         MSG   TRKDEVS\n         EJECT\n***\n***      OUTPUT DEVICE SUMMARY LINE TWO\n***\n         SPACE 1\n         LH    R1,DEVCYL\n         EDIT  R1,6,TRKSUMM+07,6,EQUAL=YES\n         LH    R1,DEVTRKCL\n         EDIT  R1,3,OUTLINE+1,3\n         MVC   TRKSUMM+24(1),OUTLINE+3\n         CLI   OUTLINE+2,X'40'\n         BE    SUMDA\n         MVC   TRKSUMM+24(2),OUTLINE+2\nSUMDA    ICM   R1,3,DEVTRACK\n         EDIT  R1,6,TRKSUMM+37,5,EQUAL=YES\n         SPACE 1\n         LA    R0,96                  DD OF RKDD\n         MVI   KEYLEN+3,44            K  OF RKDD\n         BAL   R14,DEVCALC            COMPUTE THE NUMBER THAT FIT\n         EDIT  R0,3,OUTLINE+1,3\n         MVC   TRKSUMM+55(1),OUTLINE+3\n         CLI   OUTLINE+2,X'40'\n         BE    SUMDB\n         MVC   TRKSUMM+55(2),OUTLINE+2\n         SPACE 1\nSUMDB    LA    R0,256                 DD OF RKDD\n         MVI   KEYLEN+3,8             K  OF RKDD\n         BAL   R14,DEVCALC            COMPUTE THE NUMBER THAT FIT\n         EDIT  R0,3,OUTLINE+1,3\n         MVC   TRKSUMM+68(1),OUTLINE+3\n         CLI   OUTLINE+2,X'40'\n         BE    SUMDC\n         MVC   TRKSUMM+68(2),OUTLINE+2\nSUMDC    MSG   TRKSUMM\n         SPACE 3\nTRKCALLS CLI   VERIFYKW+1,1           VERIFY?\n         BNE   RC0                    NO, BRANCH\n         L     R3,TRKCALCN            TOTAL NUMBER OF TRKCALC CALLS\n         EDIT  R3,9,TOTCALLS+1,7\n         SPACE 1\n         MSG   BLANKLNE\n         MSG   TOTCALLS\n         B     RC0\n         EJECT\n***\n***      DEVCALC COMPUTATIONS\n***\n         SPACE 1\nDEVCALC  STM   R14,R0,DEVREGS         SAVE INITIAL REGISTERS\n         SR    R15,R15\n         IC    R15,DEVTYPE            DEVTYPE CHARACTER\n         MH    R15,=H'4'              ADJUST TO BRANCH INDEX\n         SPACE 1\n         B     DEVBRCH(R15)           BRANCH TO PROCESSING ROUTINE\nDEVBRCH  EX    R0,*            X'00'  INVALID\n         EX    R0,*            X'01'  INVALID\n         EX    R0,*            X'02'  INVALID\n         EX    R0,*            X'03'  INVALID\n         B     DEV9345         X'04'  9345\n         EX    R0,*            X'05'  INVALID\n         B     DEV23051        X'06'  2305-1\n         B     DEV23052        X'07'  2305-2\n         B     DEV2314         X'08'  2314\n         B     DEV3330         X'09'  3330\n         B     DEV3340         X'0A'  3340\n         B     DEV3350         X'0B'  3350\n         B     DEV3375         X'0C'  3375\n         B     DEV33301        X'0D'  3330-1\n         B     DEV3380         X'0E'  3380\n         B     DEV3390         X'0F'  3390\n         SPACE 1\nDEV23051 DS    0H\nDEV23052 DS    0H\nDEV3330  DS    0H\nDEV3340  DS    0H\nDEV3350  DS    0H\nDEV33301 LH    R15,DEVOKEY            NORMAL DEVICE CALCULATIONS\n         CLI   KEYLEN+3,0             ANY KEY?\n         BH    DEV33A                 YES, BRANCH\n         SH    R15,DEVNOKEY           NO, LESS KEYED PORTION\nDEV33A   A     R15,KEYLEN             ADD KEY LENGTH\n         AR    R15,R0                 KEY AND RECORD OVERHEAD\n         B     DEVDIVID\n         SPACE 1\nDEV2314  L     R15,KEYLEN             KEY LENGTH\n         AR    R15,R0                 KEY AND RECORD LENGTH\n         LH    R1,DEVTRACK            TRACK CAPACITY\n         SR    R1,R15                 BYTES REMAINING LESS KEY OVERHEAD\n         CLI   KEYLEN+3,0             ANY KEY?\n         BNH   DEV2314A               NO, BRANCH\n         S     R1,=F'45'              BYTES REMAINING ON TRACK\nDEV2314A LTR   R1,R1                  ANY RECORD FIT ON THE TRACK?\n         BM    DEVDONE2               NO, BRANCH\n         M     R14,=F'534'\n         D     R14,=F'512'\n         A     R15,=F'146'            NORMAL KEY AND RECORD OVERHEAD\n         CLI   KEYLEN+3,0             ANY KEY?\n         BH    DEV2314B               YES, BRANCH\n         S     R15,=F'45'             NO, LESS KEYED PORTION\nDEV2314B SR    R0,R0\n         DR    R0,R15                 NUMBER OF RECORDS THAT FIT -1\n         A     R1,=F'1'               NUMBER OF RECORDS THAT FIT\n         B     DEVDONE\n         EJECT\nDEV3375  ICM   R15,15,KEYLEN          ANY KEY?\n         BZ    DEV3375R               NO, BRANCH\n         A     R15,=F'191'\n         SR    R14,R14\n         D     R14,=F'32'\n         M     R14,=F'32'\nDEV3375R LR    R1,R15                 SAVE KEY AND OVERHEAD LENGTH\n         LR    R15,R0                 RECORD LENGTH\n         A     R15,=F'191'\n         SR    R14,R14\n         D     R14,=F'32'\n         M     R14,=F'32'\n         AR    R15,R1                 RECORD AND KEY LENGTH\n         A     R15,=F'224'            BASIC OVERHEAD AMOUNT\n         B     DEVDIVID\n         SPACE 2\nDEV3380  ICM   R15,15,KEYLEN          ANY KEY?\n         BZ    DEV3380R               NO, BRANCH\n         A     R15,=F'267'\n         SR    R14,R14\n         D     R14,=F'32'\n         M     R14,=F'32'\nDEV3380R LR    R1,R15                 SAVE KEY AND OVERHEAD LENGTH\n         LR    R15,R0                 RECORD LENGTH\n         A     R15,=F'267'\n         SR    R14,R14\n         D     R14,=F'32'\n         M     R14,=F'32'\n         AR    R15,R1                 RECORD AND KEY LENGTH\n         A     R15,=F'256'            BASIC OVERHEAD AMOUNT\n         B     DEVDIVID\n*\n*  3390 CALCULATIONS\nDEV3390  DS    0H\n         STM   R4,R7,DEVREGX          SAVE ADDITIONAL REGISTERS\n*  CALCULATE 'K' VALUE\n         ICM   R1,15,KEYLEN           FETCH KEYLEN\n         BZ    DEV3390G               BR IF NONE\n         LR    R6,R1                  SAVE KEYLENGTH\n         BAL   R14,DEV3390T           CALCULATE 'K'\n         LR    R1,R5                  MOVE IT TO REG. 1\n*  CALCULATE 'D' VALUE\nDEV3390G DS    0H\n         LR    R6,R0                  FETCH LRECL ('DL')\n         BAL   R14,DEV3390T\n         ALR   R5,R1                  CALCULATE 'D' + 'K'\n         AH    R5,=H'10'              ADD THE CONSTANT '10'\n         SLR   R4,R4                  CLEAR R4\n         M     R4,=F'34'              CONVERT RECORDS TO BYTES\n         LR    R15,R5                 MOVE TO REG. 15\n         LM    R4,R7,DEVREGX          RESTORE REGS.\n         B     DEVDIVID\n*\n*  PERFORM ACTUAL 'D' OR 'K' CALCULATION\n*  VALUE OF 'KL' OR 'DL' IS IN REG. 6 (INPUT)\n*  VALUE OF 'K' OR 'D' IS IN REG. 5 (OUTPUT)\n*  RETURN ADDRESS IS IN R14\n*\nDEV3390T DS    0H\n         LR    R5,R6                  FETCH VALUE\n         A     R5,=F'6'               ADD 6\n         SLR   R4,R4                  ZERO REG.\n         D     R4,=F'232'             DIVIDE\n         LTR   R4,R4                  CHECK IF ANY REMAINDER\n         BZ    DEV3390U               BR IF NONE\n         AH    R5,=H'1'               ELSE ROUND UP TO NEXT INTEGER\nDEV3390U DS    0H\n         SLR   R4,R4                  CLEAR REG\n         M     R4,=F'6'               KN * 6   (OR DN * 6)\n         ALR   R5,R6                  ADD 'KL' (OR 'DL')\n         A     R5,=F'6'               ADD 6\n         SLR   R4,R4                  CLEAR REG\n         D     R4,=F'34'              DIVIDE\n         LTR   R4,R4                  CHECK IF REMAINDER IS 0\n         BZ    DEV3390W               BR IF YES\n         AH    R5,=H'1'               ELSE ROUND UP TO NEXT INTEGER\nDEV3390W DS    0H\n         AH    R5,=H'9'               CALCULATE 'K' (OR 'D')\n         BR    R14                    RETURN TO CALLER\n*\n*\n*  9345 CALCULATIONS\nDEV9345  DS    0H\n         STM   R4,R7,DEVREGX          SAVE ADDITIONAL REGISTERS\n*  CALCULATE 'K' VALUE\n         ICM   R1,15,KEYLEN           FETCH KEYLEN\n         BZ    DEV9345G               BR IF NONE\n         LR    R6,R1                  SAVE KEYLENGTH\n         BAL   R14,DEV9345T           CALCULATE 'K'\n         LR    R1,R5                  MOVE IT TO REG. 1\n         AH    R1,=H'7'               ADD 7\n*  CALCULATE 'D' VALUE\nDEV9345G DS    0H\n         LR    R6,R0                  FETCH LRECL ('DL')\n         BAL   R14,DEV9345T\n         ALR   R5,R1                  CALCULATE 'D' + 'K'\n         AH    R5,=H'18'              ADD THE CONSTANT '18'\n         SLR   R4,R4                  CLEAR R4\n         M     R4,=F'34'              CONVERT RECORDS TO BYTES\n         LR    R15,R5                 MOVE TO REG. 15\n         LM    R4,R7,DEVREGX          RESTORE REGS.\n         B     DEVDIVID\n*\n*  PERFORM ACTUAL 'D' OR 'K' CALCULATION\n*  VALUE OF 'KL' OR 'DL' IS IN REG. 6 (INPUT)\n*  VALUE OF 'K' OR 'D' IS IN REG. 5 (OUTPUT)\n*  RETURN ADDRESS IS IN R14\n*\nDEV9345T DS    0H\n         LR    R5,R6                  FETCH VALUE\n         A     R5,=F'6'               ADD 6\n         SLR   R4,R4                  ZERO REG.\n         D     R4,=F'232'             DIVIDE\n         LTR   R4,R4                  CHECK IF ANY REMAINDER\n         BZ    DEV9345U               BR IF NONE\n         AH    R5,=H'1'               ELSE ROUND UP TO NEXT INTEGER\nDEV9345U DS    0H\n         SLR   R4,R4                  CLEAR REG\n         M     R4,=F'6'               KN * 6   (OR DN * 6)\n         ALR   R5,R6                  ADD 'KL' (OR 'DL')\n         A     R5,=F'6'               ADD 6\n         SLR   R4,R4                  CLEAR REG\n         D     R4,=F'34'              DIVIDE\n         LTR   R4,R4                  CHECK IF REMAINDER IS 0\n         BZ    DEV9345W               BR IF YES\n         AH    R5,=H'1'               ELSE ROUND UP TO NEXT INTEGER\nDEV9345W DS    0H\n         BR    R14                    RETURN TO CALLER\n*\n         EJECT\nDEVDIVID SR    R0,R0\n         SR    R1,R1\n         ICM   R1,3,DEVTRACK          MAXIMUM TRACK SIZE\n         DR    R0,R15                 NUMBER OF RECORDS THAT FIT\n         SPACE 2\nDEVDONE  SR    R15,R15                RETURN CODE ZERO\n         LTR   R0,R1                  ANY RECORDS FIT?\n         BNZ   DEVNDN                 YES, BRANCH\nDEVDONE2 LA    R15,4                  NO, RETURN CODE FOUR\n         SPACE 1\nDEVNDN   L     R14,DEVREGS            RELOAD REGISTER 14\n         CLI   VERIFYKW+1,1           VERIFY WITH TRKCALC?\n         BNER  R14                    NO, RETURN\n         SPACE 2\n         L     R1,DEVREGS+8           RESTORE RECORD LENGTH\nDEVTRKCX DS    0H\n         STM   R14,R0,DEVREGS         SAVE RESULTS FOR NOW\n         SPACE 3\n         LR    R0,R1                  DD OF RKDD\n         ICM   R0,B'0100',KEYLEN+3    K  OF RKDD\n         ICM   R0,B'1000',=X'01'      R  OF RKDD\n         TRKCALC FUNCTN=TRKCAP,TYPE=DEVTYPE,REGSAVE=YES,RKDD=(0)\n         L     R14,DEVREGS            RELOAD REGISTER 14\n         LTR   R15,R15                FIT?\n         BNZ   DEVNOFIT               NO, BRANCH\n         TM    FLG3390,MXT3390        CHECK IF MAXTRIAL 3390 CALL\n         BNZR  R14                    RETURN IF YES\n         C     R15,DEVREGS+4          YES -- OTHER RETURN CODE ZERO?\n         BNE   DEVERROR               NO, BRANCH\n         C     R0,DEVREGS+8           SAME NUMBER OF RECORDS?\n         BNE   DEVERROR               NO, ERROR\n         BR    R14\n         SPACE 1\nDEVNOFIT DS    0H\n         CH    R15,TRKNODEV           CHECK IF DEVICE GENNED\n         BNE   DEVNO100               BR IF NOT 'DEVICE NOT GENNED'\n         MSG   ERRNODEV               TELL USER DEVICE NOT GENNED\n         MVI   VERIFYKW+1,0           TURN OFF VERIFY\n         OI    FLG3390,NODEVG         FLAG NO DEVICE GENNED.\n         LM    R14,R0,DEVREGS         RESTORE REGS\n         BR    R14                    RETURN TO CALLER\nDEVNO100 DS    0H\n         TM    FLG3390,MXT3390        MAXTRIAL 3390 CALL?\n         BNZR  R14                    YES, RETURN\n         ICM   R1,15,DEVREGS+4        OTHER RETURN CODE ZERO?\n         BNZR  R14                    NO, RETURN\n         SPACE 2\nDEVERROR LM    R2,R3,DEVREGS+4        FIRST RETURN CODE; # OF RECORDS\n         LR    R4,R15                 SECOND RETURN CODE\n         LR    R5,R0                  SECOND NUMBER OF RECORDS\n         MSG   ERRVERFY               VERIFY ERROR\n         ABEND 20,DUMP\n         EJECT\n***\n***      PUTLINE OUTPUT ROUTINE\n***\n         SPACE 1\n$PUTLINE ST    R14,R14SAVE\n         SPACE\n         MVC   PUTLINE+4(80),=CL80' '  CLEAR INPUT LINE\n         LR    R0,R15\n         SLL   R0,16\n         STCM  R0,B'1111',PUTLINE      SAVE LENGTH\n         S     R15,=F'5'               MACHINE LENGTH\n         MVC   PUTLINE+4(*-*),0(R1)    <<EXECUTED>>\n         EX    R15,*-6                 MOVE IN THE TEXT\n*\n         L     R1,PUTLCALL\n         A     R1,=F'1'\n         ST    R1,PUTLCALL\n         ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,PUTLINE+4-1          START OF MESSAGE\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RC0                     NO, **ATTENTION** EXIT\n         B     EXITPUT                 YES, BRANCH\nNOTPDS   DS    0H\n         LA    R1,PUTLPARM\n         USING IOPL,R1\n         L     R14,CPPLUPT\n         L     R15,CPPLECT\n         LA    R0,MYECB\n         STM   R14,R0,IOPLUPT         INITIALIZE IOPLUPT, IOPLECT\n*                                                AND IOPLECB\n         SPACE\n         LA    R0,PUTLINE             DATA LINE POINTER\n         L     R15,16                 CVT ADDRESS\n         L     R15,X'1BC'(,R15)       PUTLINE ROUTINE\n         SPACE\n         PUTLINE PARM=PUTLPARM+16,ENTRY=(15),MF=(E,(1)),               X\n               OUTPUT=((0),TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK)\n         SPACE\n         DROP  R1\n         TM    MYECB,X'40'           ATTN OCCUR?\n         BO    RC12                  YES, BRANCH\n         SPACE\nEXITPUT  DS    0H\n         L     R14,R14SAVE\n         LTR   R15,R15               SUCCESSFUL?\n         BZR   R14                   YES, DONE\n         SPACE 1\n         EDIT  R15,3,ERRPUTL+23,3,EQUAL=YES\n         TPUT  ERRPUTL,L'ERRPUTL\n         SPACE 5\nRC12     LA    R15,12\n         B     BYPRC0\n         SPACE 1\nRC0      SR    R15,R15\nBYPRC0   L     R13,4(,R13)\n         RETURN (14,12),RC=(15)\n$PUTMOVE MVC   PUTLINE+4(*-*),0(R1)\n         EJECT\n***\n***      CURRENT DEVICE CHARACTERISTICS (COPIED FROM UNITTBL):\n***\n*  NOTE FOR 3390, THE 'DEVOKEY' AND 'DEVNOKEY' FIELDS ARE NOT USED.\n*       ALSO THE 'DEVTRACK' IS THE MAXIMUM NUMBER OF TRACK CELLS\n*       WITH IBM STANDARD R0 PROVIDED AND R0 IS NOT INCLUDED IN\n*       CALCULATIONS.\n         SPACE 1\n         DS    0H\nDEVNAME  DC    CL5'ABCDE'          ALIAS NAME OF THIS ROUTINE(XXXABCDE)\nDEVCHAR  DC    CL6'123456'         RIGHT-ADJUSTED NAME FOR THIS DEVICE\nDEVTYPE  DC    X'12'               DEVTYPE CHARACTER\nDEVTRKCL DC    H'12'               TRACKS TO A CYLINDER\nDEVCYL   DC    H'123'              NUMBER OF CYLINDERS FOR THE DEVICE\nDEVOKEY  DC    H'123'              MINIMUM BLOCK OVERHEAD WITH A KEY\nDEVNOKEY DC    H'123'              KEYED AMOUNT OF BLOCK OVERHEAD\nDEVTRACK DC    H'12345'            MAXIMUM TRACK LENGTH\n*  NOTE - 3390 CALCULATIONS DO NOT USE 'DEVOKEY' AND 'DEVNOKEY'.\nDEVXEND  DS    0X                  END OF TABLE ENTRY\nDEVENTL  EQU   DEVXEND-DEVNAME\n         SPACE 5\n***\n***      DEVICES CURRENTLY SUPPORTED:\n***\n         SPACE 1\nUNITTBL  DS    0H\n***    NAME      CHAR  TYPE TRKCL     CYL   OKEY  NOKEY   TRACK\n DC C'9345 ',C'  9345',X'04',H'15',H'1440',X'000',X'000',X'BC98'\n DC C'23051',C'2305-1',X'06',H'08',H'0048',X'27A',X'0CA',X'38E8'\n DC C'23052',C'2305-2',X'07',H'08',H'0096',X'121',X'05B',X'3A0A'\n DC C'2314 ',C'  2314',X'08',H'20',H'0200',X'000',X'000',X'1C7E'\n DC C'3330 ',C'  3330',X'09',H'19',H'0404',X'0BF',X'038',X'336D'\n DC C'33301',C'3330-1',X'0D',H'19',H'0808',X'0BF',X'038',X'336D'\n DC C'3340 ',C'  3340',X'0A',H'12',H'0696',X'0F2',X'04B',X'2157'\n DC C'3350 ',C'  3350',X'0B',H'30',H'0555',X'10B',X'052',X'4B36'\n DC C'3375 ',C'  3375',X'0C',H'12',H'0959',X'220',X'0A0',X'8CA0'\n DC C'3380 ',C'  3380',X'0E',H'15',H'0885',X'2D8',X'0EC',X'BB60'\n DC C'3390 ',C'  3390',X'0F',H'15',H'1113',X'000',X'000',X'E5A2'\n DC  X'FF'\n         EJECT\n***\n***      PROGRAM VARIABLES\n***\n         SPACE 1\nDOUBLE   DC    D'0'             WORKAREA\nF6       DC    F'6'             CONSTANT\nF9       DC    F'9'             CONSTANT\nF10      DC    F'10'            CONSTANT\nF34      DC    F'34'            CONSTANT\nF232     DC    F'232'           CONSTANT\nSAVE     DC    18F'0'           PROGRAM SAVE AREA\nPDSMSGA  DC    A(0)             REENTRY ADDRESS FOR PDSCALL KEYWORD\nTRKCALCN DC    F'0'             CALLS TO TRKCALC FOR TRACK CAPACITY\nDEVREGS  DC    3F'0'            DEVCALC HOLD AREA FOR R14, R15 AND R0\nDEVREGX  DC    4F'0'            DEVCALC HOLD AREA (3390 CALCULATIONS)\nKEYLEN   DC    F'0'             KEY LENGTH\nLRECL    DC    F'0'             LRECL\nRECNUM   DC    F'100000'        NUMBER OF ALLOCATED RECORDS\nUSEBLK   DC    F'0'             BLOCKSIZE TO USE\nRECOMEND DC    F'0'             RECOMMENDED BLOCKSIZE\nRECBPT   DC    F'0'             BYTES/TRACK FOR RECOMMENDED BLKSIZE\nSAVEBLOK DC    18F'0'           SAVED BLOCKSIZE ARRAY\nSAVEMAX  DC    18F'0'           TRACK CAPACITY ARRAY\nLINES    DC    F'0'             LINES TO A SCREEN\nMAXBLOCK DC    F'0'             MAXIMUM BLOCKSIZE FOR THIS KEY & TRACK\nMAXROUND DC    F'0'             1/2 OF MAXBLOCK FOR ROUNDING TO 1/10\nMYPPL    DC    7A(0)            PPL FOR PARSE\nPUTLPARM DC    8A(0)            PARMS FOR PUTLINE\nPUTLCALL DC    A(0)             PARMS FOR PUTLINE\nMYANS    DC    A(0)             PARSE ANSWER AREA\nMYECB    DC    F'0'             ECB FOR PARSE AND PUTLINE\nR14SAVE  DC    F'0'             SAVE AREA FOR PARSE\nTRKNODEV DC    H'12'            TRKCALC (TRKCAP) - DEVICE NOT GENNED\nKEY3390  DC    H'0'             KEYLEN INDEX FOR 3390\nTYPE3390 DC    X'0F'            DEVICE TYPE FOR 3390\nTYPE9345 DC    X'04'            DEVICE TYPE FOR 9345\nFLG3390  DC    X'00'            USED FOR 3390 PROCESSING\n*  BIT SETTINGS FOR FLG3390\nMXT3390  EQU   X'80'            MAXTRIAL 3390 CALL\nNODEVG   EQU   X'40'            DEVICE NOT GENNED\n         DS    0H\n*\n         SPACE 3\n* BLOCKING FACTOR PREFERENCE TABLE -- ENTRIES TO THE RIGHT ARE FAVORED:\n         SPACE 1\nBLKPREF  DC    AL2(16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,0)\n         EJECT\n***\n***      PROGRAM HEADERS\n***\n         SPACE 1\nEDITPIC  DC    X'2020206B2020206B2020206B202120'\nBLOCKHED DC    C'XXXXXX BLOCKSIZE SUMMARY;    LRECL 123456    KEY LENGTX\n               H 123 '\nBLOCKLIN DC C'            BLOCKSIZE    BLOCKS/TRACK    LRECLS/TRACK    X\n               UTILIZATION'\nBLOCKUNL DC C'            ---------    ------------    ------------    X\n               -----------'\nBLANKLNE DC    C' '\nALLOCH   DC    C'FOR BLKSIZE 12,345  AND 1,234,567 RECORDS, ALLOCATE:'\nALLOCL   DC    C' 1,234,567 BLOCKS, 1,234,567 TRACKS, OR 1,234,567 CYLIX\n               NDERS'\nPUTLINE  DC    CL84' '\nTRKCAPH  DC    C'XXXXXX TRACK CAPACITY;    KEY LENGTH 123 '\nTRKCAPM  DC    C'       BLOCKS/TRACK     BLKSIZE     BYTES/TRACK     UTX\n               ILIZATION'\nTRKCAPU  DC    C'       ------------     -------     -----------     --X\n               ---------'\nOUTLINE  DC    CL80' '\nTRKDEVS  DC   C'DEVICE SUMMARY: MAX BLOCKSIZE 12,345   TRACKS 12,345   X\n               BYTES 1,234,567,890  '\nTRKSUMM  DC     C'NOCYLS 1,123   TRKS/CYL=2    TRKSIZE 12,345   DSCB/TRX\n               K=2    PDS/TRK=2  '\nTOTCALLS DC    C' 1,234,567 CALLS WERE MADE TO COMPUTE TRACK CAPACITY; X\n               34 IS THE BASELINE NUMBER'\nERRVERFY DC    C'*** VERIFICATION ERROR, COMPARE R2 && R3 WITH R4 && R5X\n               ; CORRESPONDS TO R15 && R0'\nERRNODEV DC    C'*** VERIFICATION ERROR, DEVICE NOT GENNED ON YOUR SYST+\n               EM ***.'\nER3390CK DC    C'*** TRKCALC RESULTS UNEXPECTED, CHECK TABLE ***'\nERRPUTL  DC    C'*** PUTLINE ERROR, R15 123 '\nERRSIZE  DC    C'*** RECORD SIZE 12,345 DOES NOT FIT ON A TRACK'\nERR32760 DC    C'*** 32,760 IS THE MAXIMUM ALLOWED RECORD SIZE'\nERRBLOCK DC    C'*** YOUR BLOCKSIZE IS NOT A MULTIPLE OF YOUR LOGICAL RX\n               ECORD LENGTH'\nERRNULL  DC    C'*** NULL RECORDS ARE NOT SUPPORTED'\nERRKEY   DC    C'*** THE MAXIMUM LEGAL KEY LENGTH IS 255 CHARACTERS'\nERRUNIT  DC    C'*** THIS DEVICE NAME IS NOT SUPPORTED'\nERRPROG  DC    C'*** PROGRAM ERROR, LOOK AT R2 AND R3'\n         EJECT\n***\n***      PROGRAM LITERALS\n***\n         SPACE 1\n         LTORG\n         EJECT\n***\n***      PARSE CONTROL DATA\n***\n         SPACE 1\nBLKPCL   IKJPARM\nLRE      IKJIDENT 'LRECL',                                             +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +\n               PROMPT='LOGICAL RECORD LENGTH'\nKEYKW    IKJKEYWD\n         IKJNAME 'KEYLENGTH',SUBFLD=KEYSF\nRECKW    IKJKEYWD\n         IKJNAME 'RECORDS',SUBFLD=RECSF\nNUMKW    IKJKEYWD\n         IKJNAME 'NUMBER',SUBFLD=RECSF\nBLKKW    IKJKEYWD\n         IKJNAME 'BLKSIZE',SUBFLD=BLKSF\nTRACKKW  IKJKEYWD\n         IKJNAME 'TRACKCAP'\n         IKJNAME 'NOTRACKCAP'\nVERIFYKW IKJKEYWD\n         IKJNAME 'VERIFY'\nKEYSF    IKJSUBF\nKEY      IKJIDENT 'KEY LENGTH',                                        +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,                  +\n               PROMPT='THE RECORD KEY LENGTH'\nRECSF    IKJSUBF\nREC      IKJIDENT 'NUMBER OF RECORDS',                                 +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=7,PROMPT='THE NUMBER+\n                OF RECORDS FOR AN ALLOCATION COMPUTATION'\nBLKSF    IKJSUBF\nBLK      IKJIDENT 'BLOCKSIZE TO USE',                                  +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,PROMPT='THE BLOCKS+\n               IZE TO USE FOR AN ALLOCATION COMPUTATION'\n         IKJENDP\n*  3390 KEY INDEX TABLE\nKDX3390  DC    AL1(22)     *  KEYLEN = 1-22\n         DC    AL1(56)     *  KEYLEN = 23-56\n         DC    AL1(90)     *  KEYLEN = 57-90\n         DC    AL1(124)    *  KEYLEN = 91-124\n         DC    AL1(158)    *  KEYLEN = 125-158\n         DC    AL1(192)    *  KEYLEN = 159-192\n         DC    AL1(226)    *  KEYLEN = 193-226\n         DC    AL1(254)    *  KEYLEN = 227-254\n         DC    AL1(255)    *  KEYLEN = 255\n*\n*  3390 BLKSIZE TABLE\n*   DEFINE MAX. BLOCKS FOR BLOCKING FACTORS 1 - 17.\n*   EACH ROW CONTAINS MAX. BLOCK FOR KEYS OF 0, 1-22, 23-56, 57-90,\n*         91-124, 125-158, 159-192, 193-226, 227-254, 255\n*         (RESPECTIVELY).\n*   NOT ELEGANT, BUT WILL WORK FOR TIME BEING.\n*\n*   EACH ENTRY IS DEFINED WITH 'AL2' SO AS TO OCCUPY TWO BYTES,\n*   SINCE THE LARGEST ENTRY IS 56664 (X'FFFF' IS 65535).\n**\nTBL3390  DS    0F        ALIGN ON FULLWORD BOUNDARY\n*  BLOCKING FACTOR =  1\n*                    0,  -22,  -56,  -90, -124, -158, -192, -226, -254\n         DC  AL2(56664,56336,56302,56268,56234,56200,56166,56138)\n         DC  AL2(56104,56070)                       BLOCKING FACTOR #1\nTBL3390F DS    0H\n         DC  AL2(27998,27664,27630,27602,27568,27534,27500,27466)\n         DC  AL2(27432,27398)                                       #2\n         DC  AL2(18452,18118,18090,18056,18022,17988,17954,17920)\n         DC  AL2(17886,17858)                                       #3\n         DC  AL2(13682,13348,13314,13280,13246,13218,13184,13150)\n         DC  AL2(13116,13082)                                       #4\n         DC  AL2(10796,10462,10434,10400,10366,10332,10298,10264)\n         DC  AL2(10230,10202)                                       #5\n         DC  AL2(8906,8578,8544,8510,8476,8442,8408,8374,8346,8312) #6\n         DC  AL2(7548,7214,7186,7152,7118,7084,7050,7016,6982,6954) #7\n         DC  AL2(6518,6190,6156,6122,6088,6054,6026,5992,5958,5924) #8\n         DC  AL2(5726,5392,5358,5330,5296,5262,5228,5194,5160,5126) #9\n         DC  AL2(5064,4730,4696,4662,4634,4600,4566,4532,4498,4464) #10\n         DC  AL2(4566,4232,4198,4170,4136,4102,4068,4034,4000,3966) #11\n         DC  AL2(4136,3802,3768,3734,3706,3672,3638,3604,3570,3536) #12\n         DC  AL2(3768,3440,3406,3372,3338,3304,3270,3242,3208,3174) #13\n         DC  AL2(3440,3106,3072,3038,3010,2976,2942,2908,2874,2840) #14\n         DC  AL2(3174,2840,2806,2778,2744,2710,2676,2642,2608,2574) #15\n         DC  AL2(2942,2608,2574,2546,2512,2478,2444,2410,2376,2342) #16\n         DC  AL2(2710,2376,2342,2314,2280,2246,2212,2178,2144,2110) #17\nTBL3390Z DS    0X           * END OF TABLE *\n*  FOLLOWING PLACED HERE SO IFOX00 WILL WORK WITH THIS.\n*  NOTE - 'TB3390IC' IS USED BY 'ICM' INSTRUCTION.  IT MUST\n*      CORRESPOND TO LENGTH OF EACH TABLE ITEM.\n*      IF TABLE ITEM IS 4 BYTES, THEN DEFINE AS  B'1111' ,\n*      IF TABLE ITEM IS 3 BYTES, THEN DEFINE AS  B'0111' ,\n*      IF TABLE ITEM IS 2 BYTES, THEN DEFINE AS  B'0011' .\nTB3390IT EQU   2            LENGTH OF EACH TABLE ITEM.\nTB3390IC EQU   B'0011'      USE FOR 'ICM' INSTRUCTIONS\nTBL3390C EQU   (TBL3390F-TBL3390)\nTB3390RL DC    A(TBL3390C)               LENGTH OF EACH ROW\nTB3390CL DC    A(TBL3390C/TB3390IT)      NUMBER OF COLUMNS\nTBL3390R EQU   (TBL3390Z-TBL3390)/TBL3390C\nTB3390RW DC    A(TBL3390R)               NUMBER OF ROWS\n*\n*\n*\nTBL9345  DS    0F        ALIGN ON FULLWORD BOUNDARY\n*                    0,  -22,  -56,  -90, -124, -158, -192, -226, -254\n         DC  AL2(46456,46190,46162,46128,46094,46060,46026,45992)\n         DC  AL2(45958,45930)                       BLOCKING FACTOR #1\nTBL9345F DS    0H\n         DC  AL2(22928,22662,22628,22594,22560,22526,22498,22464)\n         DC  AL2(22430,22396)                                       #2\n         DC  AL2(15074,14808,14774,14740,14706,14672,14638,14610)\n         DC  AL2(14576,14542)                                       #3\n         DC  AL2(11158,10898,10864,10830,10796,10762,10728,10694)\n         DC  AL2(10666,10632)                                       #4\n         DC  AL2(8810,8544,8510,8476,8442,8408,8374,8346,8312,8278) #5\n         DC  AL2(7214,6954,6920,6886,6852,6818,6784,6750,6722,6688) #6\n         DC  AL2(6088,5822,5794,5760,5726,5692,5658,5624,5590,5562) #7\n         DC  AL2(5262,4996,4962,4928,4894,4866,4832,4798,4764,4730) #8\n         DC  AL2(4600,4334,4300,4266,4232,4198,4170,4136,4102,4068) #9\n         DC  AL2(4102,3836,3802,3768,3734,3706,3672,3638,3604,3570) #10\n         DC  AL2(3672,3406,3372,3338,3304,3270,3242,3208,3174,3140) #11\n         DC  AL2(3304,3038,3010,2976,2942,2908,2874,2840,2806,2778) #12\n         DC  AL2(3010,2744,2710,2676,2642,2608,2574,2546,2512,2478) #13\n         DC  AL2(2744,2478,2444,2410,2376,2342,2314,2280,2246,2212) #14\n         DC  AL2(2512,2246,2212,2178,2144,2110,2082,2048,2014,1980) #15\n         DC  AL2(2314,2048,2014,1980,1946,1912,1878,1850,1816,1782) #16\n         DC  AL2(2144,1878,1850,2546,2512,2478,2444,2410,2376,2342) #17\nTBL9345Z DS    0X           * END OF TABLE *\n*\n*\n         PRINT GEN\n         EJECT\n         IKJCPPL\n         SPACE 3\n         IKJPPL\n         SPACE 3\n         IKJIOPL\n         EJECT\n         IKJECT\n         SPACE 3\n         END   BLKDISK\n//*\n//*  ALIAS NAMES FOR DEVICES YOU HAVE\n//LINK.SYSLIN  DD\n//             DD     *\n ALIAS BLK9345\n ALIAS BLK3390\n ALIAS BLK3380\n NAME BLKDISK(R)\n//*\n//*\n//*\n//*  NOTE: MAKE A VERSION OF THE FOLLOWING HELP DATA FOR EACH\n//*        DEVICE TYPE TO BE SUPPORTED AT YOUR INSTALLATION.\n//*\n//*        FOR EACH DISK TYPE, CREATE A HELP MEMBER CALLED BLKXXXX\n//*        WHERE XXXX IS ONE OF THE FOLLOWING: 23051, 23052,\n//*        2314, 3330, 33301, 3340, 3350, 3375 OR 3380;\n//*        THESE NAMES CORRESPOND TO DASD TYPES: 2305-1, 2305-2,\n//*        2314, 3330, 3330-11, 3340, 3350, 3375 OR 3380.\n//*\n//*        COPY MEMBER BLKDISK, REPLACING YYYY IN THE TEXT WITH THE\n//*        NAME OF ONE OF THE SUPPORTED DEVICE TYPES: 2305-1, 2305-2,\n//*        2314, 3330, 3330-11, 3340, 3350, 3375 OR 3380.\n//*\n//*        ALSO, REPLACE BLKXXXX IN THE HELP TEXT WITH THE NAME OF\n//*        THIS MEMBER (BLKXXXX OCCURS TWICE IN THE TEXT).\n//*\n//BDISK EXEC BCOPY,MEMBER=BLKDISK\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n  THE BLKDISK COMMAND COMPUTES AN OPTIMAL BLOCKSIZE FOR A DATA SET\n  TO BE PLACED ON A YYYY DISK PACK.  THE PROGRAM OUTPUT INCLUDES\n  THE FOLLOWING REPORTS:\n     1.  A SUMMARY BLOCKSIZE REPORT FOR THE GIVEN LRECL AND KEY\n         LENGTH WHICH INCLUDES THE RECOMMENDED BLOCKSIZE TO USE.\n     2.  A RECOMMENDED DATA SET SPACE ALLOCATION.\n     3.  A OPTIONAL TRACK CAPACITY REPORT FOR THE PROVIDED KEY LENGTH.\n\n  THE RECOMMENDED BLOCKSIZE VALUE IS FOR DATA SETS IN WHICH THE\n  PREDOMINANT ACCESS IS SEQUENTIAL; FOR DATA SETS WHERE RANDOM\n  ACCESS TIME IS CRITICAL OR THE USUAL ACCESS IS RANDOM, A SMALL\n  BLOCKSIZE (500-2000 BYTES) SHOULD PROBABLY BE USED.\n\n  THE RECOMMENDED BLOCKSIZE WILL USUALLY TEND TO BE NEAR A HALF-TRACK\n  FIGURE AS THIS IS CONSIDERED TO BE THE MOST EFFICIENT IN TERMS OF\n  THE TRADE-OFFS AMONG BUFFER SIZE, SECONDARY STORAGE REQUIREMENTS,\n  CHANNEL USE, NUMBER OF INPUT/OUTPUTS AND OVERALL PROCESSING TIME.\n  THIS FIGURE IS ONLY A GENERAL GUIDE; FOR MAXIMAL EFFICIENCY\n  CONSIDERING OTHER FACTORS, STUDY THE GENERATED BLOCKSIZE SUMMARY\n  REPORT OR A TRACK CAPACITY REPORT.\n\n  THE PROGRAM'S RECOMMENDATIONS ASSUME A FAIRLY LARGE AMOUNT OF DATA\n  IS TO BE STORED; DATA SETS WHICH OCCUPY ONLY A FEW TRACKS SHOULD\n  PROBABLY BE PLACED IN PARTITIONED DATA SETS.  IN CASES WHERE THIS\n  IS NOT FEASIBLE, THE USE OF A SMALL BLOCKSIZE (2400 - 4000 BYTES)\n  MAY BE A GOOD ALTERNATIVE PRACTICE.\n)X SYNTAX  -\n         BLKDISK  'LRECL'  KEYLENGTH('INTEGER')\n                           TRACKCAP / NOTRACKCAP\n                           BLKSIZE('INTEGER')\n                           NUMBER('INTEGER') / RECORDS('INTEGER')\n                           VERIFY\n  REQUIRED - LRECL\n  DEFAULTS - KEYLENGTH(0),\n             NOTRACKCAP,\n             BLKSIZE(RECOMMENDED VALUE),\n             NUMBER(100000)\n)O OPERANDS -\n 'LRECL'  - THE LOGICAL RECORD LENGTH OF THE DATA WHICH IS TO BE\n            PLACED IN THE DATA SET.\n))KEYLENGTH('INTEGER')\n          - THE KEY LENGTH, IN BYTES, OF THE KEYS TO BE USED IN THE\n            DATA SET.  THE MAXIMUM LEGAL KEY LENGTH IS 255.\n))TRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS TO BE PROVIDED\n            FOR THE DEVICE USING THE SPECIFIED (OR DEFAULT) KEY LENGTH.\n\n            NOTE THAT A TRACK CAPACITY REPORT IS ALSO PROVIDED IF\n            NOTRACKCAP IS NOT SPECIFIED AND LRECL EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK OR BLKSIZE EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK.\n))NOTRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS NOT DESIRED.\n))BLKSIZE('INTEGER')\n          - THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION; IF\n            BLKSIZE IS NOT ENTERED (OR ZERO IS ENTERED), THE PROGRAM'S\n            RECOMMENDED BLOCKSIZE WILL BE USED.\n))NUMBER('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))RECORDS('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))VERIFY  - SPECIFIES THAT THE MVS \"TRKCALC\" ROUTINE IS TO BE USED TO\n            VERIFY TRACK CAPACITY CALCULATIONS.  IF VERIFY IS USED,\n            THE NUMBER OF CALLS TO \"TRKCALC\" TO DETERMINE A TRACK\n            CAPACITY TABLE IS OUTPUT AT THE END OF THE OUTPUT.\n\n            NOTE: WITH VERIFY ON, A MINIMUM OF 34 CALLS IS REQUIRED TO\n            DETERMINE A TRACK CAPACITY TABLE; OTHERWISE A MINIMUM OF\n            17 CALLS IS REQUIRED TO DETERMINE THE TRACK CAPACITY TABLE.\n//*\n//B3380 EXEC BCOPY,MEMBER=BLK3380\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n  THE BLK3380 COMMAND COMPUTES AN OPTIMAL BLOCKSIZE FOR A DATA SET\n  TO BE PLACED ON A 3380 DISK PACK.  THE PROGRAM OUTPUT INCLUDES\n  THE FOLLOWING REPORTS:\n     1.  A SUMMARY BLOCKSIZE REPORT FOR THE GIVEN LRECL AND KEY\n         LENGTH WHICH INCLUDES THE RECOMMENDED BLOCKSIZE TO USE.\n     2.  A RECOMMENDED DATA SET SPACE ALLOCATION.\n     3.  A OPTIONAL TRACK CAPACITY REPORT FOR THE PROVIDED KEY LENGTH.\n\n  THE RECOMMENDED BLOCKSIZE VALUE IS FOR DATA SETS IN WHICH THE\n  PREDOMINANT ACCESS IS SEQUENTIAL; FOR DATA SETS WHERE RANDOM\n  ACCESS TIME IS CRITICAL OR THE USUAL ACCESS IS RANDOM, A SMALL\n  BLOCKSIZE (500-2000 BYTES) SHOULD PROBABLY BE USED.\n\n  THE RECOMMENDED BLOCKSIZE WILL USUALLY TEND TO BE NEAR A HALF-TRACK\n  FIGURE AS THIS IS CONSIDERED TO BE THE MOST EFFICIENT IN TERMS OF\n  THE TRADE-OFFS AMONG BUFFER SIZE, SECONDARY STORAGE REQUIREMENTS,\n  CHANNEL USE, NUMBER OF INPUT/OUTPUTS AND OVERALL PROCESSING TIME.\n  THIS FIGURE IS ONLY A GENERAL GUIDE; FOR MAXIMAL EFFICIENCY\n  CONSIDERING OTHER FACTORS, STUDY THE GENERATED BLOCKSIZE SUMMARY\n  REPORT OR A TRACK CAPACITY REPORT.\n\n  THE PROGRAM'S RECOMMENDATIONS ASSUME A FAIRLY LARGE AMOUNT OF DATA\n  IS TO BE STORED; DATA SETS WHICH OCCUPY ONLY A FEW TRACKS SHOULD\n  PROBABLY BE PLACED IN PARTITIONED DATA SETS.  IN CASES WHERE THIS\n  IS NOT FEASIBLE, THE USE OF A SMALL BLOCKSIZE (2400 - 4000 BYTES)\n  MAY BE A GOOD ALTERNATIVE PRACTICE.\n)X SYNTAX  -\n         BLK3380  'LRECL'  KEYLENGTH('INTEGER')\n                           TRACKCAP / NOTRACKCAP\n                           BLKSIZE('INTEGER')\n                           NUMBER('INTEGER') / RECORDS('INTEGER')\n                           VERIFY\n  REQUIRED - LRECL\n  DEFAULTS - KEYLENGTH(0),\n             NOTRACKCAP,\n             BLKSIZE(RECOMMENDED VALUE),\n             NUMBER(100000)\n)O OPERANDS -\n 'LRECL'  - THE LOGICAL RECORD LENGTH OF THE DATA WHICH IS TO BE\n            PLACED IN THE DATA SET.\n))KEYLENGTH('INTEGER')\n          - THE KEY LENGTH, IN BYTES, OF THE KEYS TO BE USED IN THE\n            DATA SET.  THE MAXIMUM LEGAL KEY LENGTH IS 255.\n))TRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS TO BE PROVIDED\n            FOR THE DEVICE USING THE SPECIFIED (OR DEFAULT) KEY LENGTH.\n\n            NOTE THAT A TRACK CAPACITY REPORT IS ALSO PROVIDED IF\n            NOTRACKCAP IS NOT SPECIFIED AND LRECL EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK OR BLKSIZE EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK.\n))NOTRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS NOT DESIRED.\n))BLKSIZE('INTEGER')\n          - THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION; IF\n            BLKSIZE IS NOT ENTERED (OR ZERO IS ENTERED), THE PROGRAM'S\n            RECOMMENDED BLOCKSIZE WILL BE USED.\n))NUMBER('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))RECORDS('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))VERIFY  - SPECIFIES THAT THE MVS \"TRKCALC\" ROUTINE IS TO BE USED TO\n            VERIFY TRACK CAPACITY CALCULATIONS.  IF VERIFY IS USED,\n            THE NUMBER OF CALLS TO \"TRKCALC\" TO DETERMINE A TRACK\n            CAPACITY TABLE IS OUTPUT AT THE END OF THE OUTPUT.\n\n            NOTE: WITH VERIFY ON, A MINIMUM OF 34 CALLS IS REQUIRED TO\n            DETERMINE A TRACK CAPACITY TABLE; OTHERWISE A MINIMUM OF\n            17 CALLS IS REQUIRED TO DETERMINE THE TRACK CAPACITY TABLE.\n//*\n//B3390 EXEC BCOPY,MEMBER=BLK3390\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n  THE BLK3390 COMMAND COMPUTES AN OPTIMAL BLOCKSIZE FOR A DATA SET\n  TO BE PLACED ON A 3390 DISK PACK.  THE PROGRAM OUTPUT INCLUDES\n  THE FOLLOWING REPORTS:\n     1.  A SUMMARY BLOCKSIZE REPORT FOR THE GIVEN LRECL AND KEY\n         LENGTH WHICH INCLUDES THE RECOMMENDED BLOCKSIZE TO USE.\n     2.  A RECOMMENDED DATA SET SPACE ALLOCATION.\n     3.  A OPTIONAL TRACK CAPACITY REPORT FOR THE PROVIDED KEY LENGTH.\n\n  THE RECOMMENDED BLOCKSIZE VALUE IS FOR DATA SETS IN WHICH THE\n  PREDOMINANT ACCESS IS SEQUENTIAL; FOR DATA SETS WHERE RANDOM\n  ACCESS TIME IS CRITICAL OR THE USUAL ACCESS IS RANDOM, A SMALL\n  BLOCKSIZE (500-2000 BYTES) SHOULD PROBABLY BE USED.\n\n  THE RECOMMENDED BLOCKSIZE WILL USUALLY TEND TO BE NEAR A HALF-TRACK\n  FIGURE AS THIS IS CONSIDERED TO BE THE MOST EFFICIENT IN TERMS OF\n  THE TRADE-OFFS AMONG BUFFER SIZE, SECONDARY STORAGE REQUIREMENTS,\n  CHANNEL USE, NUMBER OF INPUT/OUTPUTS AND OVERALL PROCESSING TIME.\n  THIS FIGURE IS ONLY A GENERAL GUIDE; FOR MAXIMAL EFFICIENCY\n  CONSIDERING OTHER FACTORS, STUDY THE GENERATED BLOCKSIZE SUMMARY\n  REPORT OR A TRACK CAPACITY REPORT.\n\n  THE PROGRAM'S RECOMMENDATIONS ASSUME A FAIRLY LARGE AMOUNT OF DATA\n  IS TO BE STORED; DATA SETS WHICH OCCUPY ONLY A FEW TRACKS SHOULD\n  PROBABLY BE PLACED IN PARTITIONED DATA SETS.  IN CASES WHERE THIS\n  IS NOT FEASIBLE, THE USE OF A SMALL BLOCKSIZE (2400 - 4000 BYTES)\n  MAY BE A GOOD ALTERNATIVE PRACTICE.\n)X SYNTAX  -\n         BLK3390  'LRECL'  KEYLENGTH('INTEGER')\n                           TRACKCAP / NOTRACKCAP\n                           BLKSIZE('INTEGER')\n                           NUMBER('INTEGER') / RECORDS('INTEGER')\n                           VERIFY\n  REQUIRED - LRECL\n  DEFAULTS - KEYLENGTH(0),\n             NOTRACKCAP,\n             BLKSIZE(RECOMMENDED VALUE),\n             NUMBER(100000)\n)O OPERANDS -\n 'LRECL'  - THE LOGICAL RECORD LENGTH OF THE DATA WHICH IS TO BE\n            PLACED IN THE DATA SET.\n))KEYLENGTH('INTEGER')\n          - THE KEY LENGTH, IN BYTES, OF THE KEYS TO BE USED IN THE\n            DATA SET.  THE MAXIMUM LEGAL KEY LENGTH IS 255.\n))TRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS TO BE PROVIDED\n            FOR THE DEVICE USING THE SPECIFIED (OR DEFAULT) KEY LENGTH.\n\n            NOTE THAT A TRACK CAPACITY REPORT IS ALSO PROVIDED IF\n            NOTRACKCAP IS NOT SPECIFIED AND LRECL EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK OR BLKSIZE EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK.\n))NOTRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS NOT DESIRED.\n))BLKSIZE('INTEGER')\n          - THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION; IF\n            BLKSIZE IS NOT ENTERED (OR ZERO IS ENTERED), THE PROGRAM'S\n            RECOMMENDED BLOCKSIZE WILL BE USED.\n))NUMBER('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))RECORDS('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))VERIFY  - SPECIFIES THAT THE MVS \"TRKCALC\" ROUTINE IS TO BE USED TO\n            VERIFY TRACK CAPACITY CALCULATIONS.  IF VERIFY IS USED,\n            THE NUMBER OF CALLS TO \"TRKCALC\" TO DETERMINE A TRACK\n            CAPACITY TABLE IS OUTPUT AT THE END OF THE OUTPUT.\n\n            ** N O T E **  - NOT CURRENTLY SUPPORTED FOR 3390.\n\n            NOTE: WITH VERIFY ON, A MINIMUM OF 34 CALLS IS REQUIRED TO\n            DETERMINE A TRACK CAPACITY TABLE; OTHERWISE A MINIMUM OF\n            17 CALLS IS REQUIRED TO DETERMINE THE TRACK CAPACITY TABLE.\n//*\n//B9345 EXEC BCOPY,MEMBER=BLK9345\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n  THE BLK9345 COMMAND COMPUTES AN OPTIMAL BLOCKSIZE FOR A DATA SET\n  TO BE PLACED ON A 9345 DISK PACK.  THE PROGRAM OUTPUT INCLUDES\n  THE FOLLOWING REPORTS:\n     1.  A SUMMARY BLOCKSIZE REPORT FOR THE GIVEN LRECL AND KEY\n         LENGTH WHICH INCLUDES THE RECOMMENDED BLOCKSIZE TO USE.\n     2.  A RECOMMENDED DATA SET SPACE ALLOCATION.\n     3.  A OPTIONAL TRACK CAPACITY REPORT FOR THE PROVIDED KEY LENGTH.\n\n  THE RECOMMENDED BLOCKSIZE VALUE IS FOR DATA SETS IN WHICH THE\n  PREDOMINANT ACCESS IS SEQUENTIAL; FOR DATA SETS WHERE RANDOM\n  ACCESS TIME IS CRITICAL OR THE USUAL ACCESS IS RANDOM, A SMALL\n  BLOCKSIZE (500-2000 BYTES) SHOULD PROBABLY BE USED.\n\n  THE RECOMMENDED BLOCKSIZE WILL USUALLY TEND TO BE NEAR A HALF-TRACK\n  FIGURE AS THIS IS CONSIDERED TO BE THE MOST EFFICIENT IN TERMS OF\n  THE TRADE-OFFS AMONG BUFFER SIZE, SECONDARY STORAGE REQUIREMENTS,\n  CHANNEL USE, NUMBER OF INPUT/OUTPUTS AND OVERALL PROCESSING TIME.\n  THIS FIGURE IS ONLY A GENERAL GUIDE; FOR MAXIMAL EFFICIENCY\n  CONSIDERING OTHER FACTORS, STUDY THE GENERATED BLOCKSIZE SUMMARY\n  REPORT OR A TRACK CAPACITY REPORT.\n\n  THE PROGRAM'S RECOMMENDATIONS ASSUME A FAIRLY LARGE AMOUNT OF DATA\n  IS TO BE STORED; DATA SETS WHICH OCCUPY ONLY A FEW TRACKS SHOULD\n  PROBABLY BE PLACED IN PARTITIONED DATA SETS.  IN CASES WHERE THIS\n  IS NOT FEASIBLE, THE USE OF A SMALL BLOCKSIZE (2400 - 4000 BYTES)\n  MAY BE A GOOD ALTERNATIVE PRACTICE.\n)X SYNTAX  -\n         BLK9345  'LRECL'  KEYLENGTH('INTEGER')\n                           TRACKCAP / NOTRACKCAP\n                           BLKSIZE('INTEGER')\n                           NUMBER('INTEGER') / RECORDS('INTEGER')\n                           VERIFY\n  REQUIRED - LRECL\n  DEFAULTS - KEYLENGTH(0),\n             NOTRACKCAP,\n             BLKSIZE(RECOMMENDED VALUE),\n             NUMBER(100000)\n)O OPERANDS -\n 'LRECL'  - THE LOGICAL RECORD LENGTH OF THE DATA WHICH IS TO BE\n            PLACED IN THE DATA SET.\n))KEYLENGTH('INTEGER')\n          - THE KEY LENGTH, IN BYTES, OF THE KEYS TO BE USED IN THE\n            DATA SET.  THE MAXIMUM LEGAL KEY LENGTH IS 255.\n))TRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS TO BE PROVIDED\n            FOR THE DEVICE USING THE SPECIFIED (OR DEFAULT) KEY LENGTH.\n\n            NOTE THAT A TRACK CAPACITY REPORT IS ALSO PROVIDED IF\n            NOTRACKCAP IS NOT SPECIFIED AND LRECL EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK OR BLKSIZE EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK.\n))NOTRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS NOT DESIRED.\n))BLKSIZE('INTEGER')\n          - THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION; IF\n            BLKSIZE IS NOT ENTERED (OR ZERO IS ENTERED), THE PROGRAM'S\n            RECOMMENDED BLOCKSIZE WILL BE USED.\n))NUMBER('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))RECORDS('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))VERIFY  - SPECIFIES THAT THE MVS \"TRKCALC\" ROUTINE IS TO BE USED TO\n            VERIFY TRACK CAPACITY CALCULATIONS.  IF VERIFY IS USED,\n            THE NUMBER OF CALLS TO \"TRKCALC\" TO DETERMINE A TRACK\n            CAPACITY TABLE IS OUTPUT AT THE END OF THE OUTPUT.\n\n            ** N O T E **  - NOT CURRENTLY SUPPORTED FOR 9345.\n\n            NOTE: WITH VERIFY ON, A MINIMUM OF 34 CALLS IS REQUIRED TO\n            DETERMINE A TRACK CAPACITY TABLE; OTHERWISE A MINIMUM OF\n            17 CALLS IS REQUIRED TO DETERMINE THE TRACK CAPACITY TABLE.\n//*\n//BX EXEC BXEQ\n//XEQ.SYSTSIN DD *\n BLK3380   80 TR VERIFY\n BLK3390   80 TR VERIFY\n BLK9345   80 TR VERIFY\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMPARE": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01-\\x00S\\x00\\x88\\x16/\\x01\\t'_\\x012\\x0ex\\x07\\xb5\\x00\\x00\\xc7\\xd9\\xc5\\xc7@@@@@@\"", "ispf": {"version": "01.45", "flags": 0, "createdate": "1988-06-10T00:00:00", "modifydate": "2009-10-02T01:32:53", "lines": 3704, "newlines": 1973, "modlines": 0, "user": "GREG"}, "text": "//SBGOLOBL  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*  ASM1 -- ASSEMBLES COMPARE (IFOX00 CAN BE USED INSTEAD OF IEV90)\n//*  LNK1 -- LINKS COMPARE INTO 'SYS1.CMDLIB(COMPARE)'\n//*                WITH ALIAS COMPARE$ FOR PDS USE\n//*\n//*  ASM2 -- ASSEMBLES COMPAREB (IFOX00 CAN BE USED INSTEAD OF IEV90)\n//*  LNK2 -- LINKS COMPAREB INTO 'SYS1.CMDLIB(COMPAREB)'\n//*\n//*  COPH -- COPIES COMPARE HELP TO 'SYS2.HELP(COMPARE)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*  COPP -- COPIES COMPARE PANEL TO 'SYS3.HAL.PLIB(COMPR#P)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*  COPC -- COPIES COMPARE CLIST TO 'SYS3.HAL.CLIB(COMPR#C)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*  COPS -- COPIES COMPARE SKELETON TO 'SYS3.HAL.SLIB(COMPR#S)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*********************************************************************\n//*                                                                   *\n//* THIS IS AN ENHANCEMENT (COMBINATION) OF TWO FLAVORS OF THE YALE   *\n//* COMPARE PROGRAM. THE FIRST WAS TAKEN FROM FILE 45 OF THE CBT      *\n//* TAPE AND WAS MODIFIED FROM THE ORIGINAL BY MR. BRENT TOLMAN.      *\n//* THE SECOND SOURCE IS THE VERSION FROM FILE 300 OF THE CBT TAPE    *\n//* AND WAS MODIFIED BY MR. BILL GODFREY AND MR. JIM MARSHALL         *\n//* ADDITIONAL CODE FROM THE VERSION FROM FILE 296 OF THE CBT TAPE    *\n//* HAS BEEN ADDED TO ALLOW THIS VERSION TO ALSO FUNCTION UNDER       *\n//* THE PDS COMMAND. FILE 296 IS FROM MR. BRUCE LELAND                *\n//*                                                                   *\n//* THE INTEND OF THIS COMBINATION IS TO PRODUCE A VERSION THAT       *\n//* CAN COMPARE EITHER TWO ENTIRE PDS'S, OR TWO SEQUENTIAL FILES.     *\n//* IT IS ALSO DESIRED THAT IT CAN BE INVOKED BY THE 'COMPARE'        *\n//* TSO COMMAND WRITTEN BY MR. BILL GODFREY.                          *\n//*                                                                   *\n//*                                                                   *\n//* THE FEATURES IN THIS PROGRAM ARE:                                 *\n//*  1. USES THE YALE COMPARE PROGRAM LOGIC FOR COMPARING AND RESYNC- *\n//*     RONIZATRION.                                                  *\n//*  2. SUPPORTS COMPARES OF FULL PDS DATASETS (DON'T SPECIFY A       *\n//*     MEMBER NAME TO USE THIS FEATURE).                             *\n//*  3. SUPPORTS COMPARES OF TWO SEQUENTIAL DATASETS (EITHER REAL     *\n//*     SEQUENTIAL DATASETS OR MEMBERS SPECIFIED IN JCL).             *\n//*  4. SUPPORTS RECORD SIZES DIFFERENT FROM 80 BYTES BUT LESS THAN   *\n//*     256 BYTES (NOTE IGNORE CARDS MUST BE 80 BYTES LONG)           *\n//*  5. CAN BE INVOKED WITH A DDNAME PARAMETER LIST FROM THE          *\n//*     THE 'COMPARE' TSO COMMAND (MODIFIED FROM CBT FILE 300).       *\n//*  6. ALSO ENCLOSED IS THE NECESSARY PANEL, CLIST, AND SKELETON     *\n//*     TO INVOKE IT UNDER ISPF                                       *\n//*  7. CODE FROM MR. BRUCE LELAND TO SUPPORT THE PDS COMMAND HAS     *\n//*     ALSO BEEN IMPLEMENTED.                                        *\n//*                                                                   *\n//* GUY L. ALBERTELLI                                                 *\n//* B. F. GOODRICH                                                    *\n//* 3925 EMBASSY PARKWAY                                              *\n//* AKRON, OHIO  44313                                                *\n//*     216-374-4071                                                  *\n//*                                                                   *\n//*                                                                   *\n//* SEVERAL CHANGES WERE MADE TO THIS PROGRAM ON 6/10/88 TO BETTER    *\n//* SUPPORT ITS USE FROM THE PDS COMMAND PROCESSOR:                   *\n//*  1. CHANGES WERE MADE TO ALLOW PDS CHECKPOINT PROCESSING TO       *\n//*     TERMINATE THE COMPARISON.                                     *\n//*  2. ADDED CODE TO SUPPRESS PAGES CONTAINING ONLY HEADER           *\n//*     INFORMATION FOR MEMBERS THAT COMPARE AS EQUAL.                *\n//*  3. ADDED CODE TO SUPPRESS OUTPUT LINES IN THE RECAP REPORT       *\n//*     FOR MEMBERS THAT COMPARE AS EQUAL.                            *\n//*  4. ADDED FREEPOOL INSTRUCTIONS AFTER DCB CLOSE STATEMENTS SO     *\n//*     THAT PDS CAN LINK TO THIS ROUTINE WITHOUT LOSING STORAGE.     *\n//*  5. ADDED FREEMAIN INSTRUCTIONS FOR THE DYNAMIC AREA AND THE      *\n//*     MEMBER STORAGE ARRAY.                                         *\n//*  6. ADDED OBTAIN MACROS TO GET THE FMT1DSCB FOR THE INPUT AND     *\n//*     OUTPUT DATA SETS TO DETERMINE IF SEQUENTIAL OR PARTITIONED    *\n//*     COMPARE IS REQUIRED.                                          *\n//*                                                                   *\n//* ON 1/12/88 COMPARE WAS MODIFIED TO RETURN FULL LENGTH LINES    ABL*\n//* TO PDS.  PDS 8.3 AND ABOVE HAVE ENHANCED LOG FACILITIES.       ABL*\n//*                                                                   *\n//*\n//* *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n//*                                                                   *\n//* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS *\n//* CONCERNING THIS PROGRAM TO:                                       *\n//*                                                                   *\n//*   A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n//*   SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n//*   500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n//*   BURLINGAME, CA  94010                                           *\n//*   (415) 696-1800                       HOME (408) 997-2366        *\n//*   INTERNET: BRUCE_LELAND@SERENA.COM                               *\n//*                                                                   *\n//* *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n//*                                                                   *\n//* THE PROGRAM IS SELF CONTAINED;  SIMPLY RUN THIS JCL STREAM        *\n//* AND ITS READY TO USE.                                             *\n//*                                                                   *\n//* THE JCL NEEDED TO EXECUTE COMPAREB FOLLOWS:                       *\n//*     1) //         EXEC PGM=COMPAREB,REGION=2000K,                 *\n//*     2) //             PARM='SIZE=NNNN,TYPE=OPT1,PRINT=OPT2'       *\n//*     3) //SYSPRINT DD  SYSOUT=*                                    *\n//*     4) //NEW      DD  DSN=PDS1,DISP=SHR                           *\n//*     5) //OLD      DD  DSN=PDS2,DISP=SHR                           *\n//*     6) //IGNORE   DD  *      OPTIONAL                             *\n//*                                                                   *\n//* WHERE    NNNN IS 3 OR 4 NUMERICS INDICATING AN ESTIMATE OF HOW    *\n//*               MANY MEMBERS EXIST IN THE PDS WITH THE MOST MEMBERS.*\n//*               THE DEFAULT VALUE IS 9999.  IF A VALUE OF LESS THAN *\n//*               100 IS SUPPLIED, THE PROGRAM WILL CHANGE THE VALUE  *\n//*               TO 100.  IF THERE ARE MORE MEMBERS THAN INDICATED   *\n//*               BY THE SIZE PARAMETER, THE PROGRAM MAY ABEND.       *\n//*                                                                   *\n//*          OPT1 IS EITHER 'FULL', 'ASM', OR NOT SPECIFIED (THE      *\n//*               DEFAULT). ACTUALLY, IF THE USER PROVIDES ANY VALUE  *\n//*               OTHER THAN 'FULL', OR 'ASM' THEN THE DEFAULT WILL BE*\n//*               ASSUMED.                                            *\n//*               -TYPE=FULL INDICATES THAT ALL 80 COLS OF THE CARD   *\n//*                IMAGE PDS WILL BE USED IN THE COMPARISON.          *\n//*               -TYPE=ASM INDICATES THAT COLS 1-72 OF THE CARD      *\n//*                IMAGE PDS WILL BE USED IN THE COMPARISON AND THE   *\n//*                DEFAULT IGNORE ASSEMBLER DATA WILL BE USED.        *\n//*               -IF NOT SPECIFIED ONLY COLS 1-72 WILL BE COMPARED,  *\n//*                AND NO DEFAULT IGNORE DATA WILL BE USED.           *\n//*                                                                   *\n//*          OPT2 IS 'MEM', 'DIR', OR 'NAME'; 'NAME' IS THE DEFAULT   *\n//*               VALUE.  PRINT=MEM INDICATES THAT IF ONE PDS CONTAINS*\n//*               A MEMBER, BUT THE OTHER PDS DOES NOT CONTAIN A MEMBER\n//*               WITH THE SAME NAME, THE  ENTIRE MEM WILL BE LISTED. *\n//*               PRINT=DIR INDICATES THAT THE COMPARISON OF MEMBERS  *\n//*               WON'T TAKE PLACE, BUT THE RECAP RPT WILL BE PRODUCED*\n//*               TO SHOW WHICH MEMBERS EXISTS IN EACH PDS.  PRINT=NAME\n//*               INDICATES THAT UNMATCHED MEMBERS WILL NOT BE PRINTED*\n//*               IN THEIR ENTIRITY, HOWEVER, THEY WILL BE FLAGGED AS *\n//*               UNMATCHED ON THE RECAP REPORT.                      *\n//*                                                                   *\n//*   THE 'NEW' AND 'OLD' DD STATEMENTS SHOULD BOTH POINT TO EITHER   *\n//*   PDS DATASETS OR SEQUENTIAL DATASETS (OR A MEMBER OF A PDS). IF  *\n//*   THE DATASET TYPES ARE MISMATCHED THEN THE COMPARISON TERMINATES *\n//*   WITH A RETURN CODE OF 16.                                       *\n//*                                                                   *\n//*********************************************************************\n//ASM1  EXEC  PGM=ASMA90,REGION=6000K,\n//             PARM=(DECK,NOOBJECT,NORLD,RENT,TERM,'XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSLIN   DD  DUMMY\n//SYSIN    DD  *\n         TITLE '   C O M P A R E  '\n***********************************************************************\n*                                                                     *\n*        'COMPARE' TSO COMMAND                                        *\n*                                                                     *\n***********************************************************************\n*\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. MAY 12 1981.\n*        DATE UPDATED. SEPTEMBER 17 1981.\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.\n*         THIS TSO COMMAND INVOKES A COMPARE UTILITY PROGRAM\n*         TO COMPARE TWO SEQUENTIAL DATA SETS (OR MEMBERS).\n*\n*         THE INVOKED UTILITY PROGRAM 'COMPAREB' IS A MODIFIED\n*         VERSION OF THE YALE COMPARE PROGRAM FROM THE CBT TAPE.\n*\n*         THE COMMAND CAN OPTIONALLY INVOKE THE IBM UTILITY\n*         'IEBCOMPR' OR A ZAPPED IEBCOMPR NAMED 'ZEBCOMPR'.\n*         ZEBCOMPR DISPLAYS UNMATCHED RECORDS IN EBCDIC INSTEAD OF HEX.\n*\n*         THE COMMAND ALLOCATES THE TWO DATA SETS AND PASSES\n*         THEIR DDNAMES TO THE UTILITY PROGRAM.\n*\n*        LOG OF CHANGES.\n*         14MAY81 - COMPARE MEMBERNAMES BEFORE ISSUING MSG03.\n*         15JUN81 - ZEBCOMPR KEYWORD ADDED.\n*         16JUN81 - FULL KEYWORD ADDED.\n*         16JUN81 - USERS CAN NOW USE THE NAME 'COMPARE' FOR BOTH\n*                   THE TSO COMMAND AND THE BATCH PROGRAM (COMPAREB).\n*                   IF A USER EXECUTES COMPARE AS A BATCH PROGRAM\n*                   (EXEC PGM=COMPARE) OR FROM THE CALL COMMAND,\n*                   THE COMMAND SIMPLY PASSES CONTROL DIRECTLY TO\n*                   THE COMPAREB PROGRAM, AS IF THE USER HAD SPECIFIED\n*                   EXEC PGM=COMPAREB.  THIS IS USEFUL AT INSTALLATIONS\n*                   THAT INSTALLED THE BATCH PROGRAM AS 'COMPARE'\n*                   BEFORE THEY HAD THE COMPARE COMMAND, AND DONT WANT\n*                   TO MAKE THE USERS CHANGE THEIR EXISTING JCL.\n*         17SEP81 - ASM/NOASM KEYWORD ADDED.\n*         15OCT86 - CHANGE PROMPTS FOR DATASET NAMES TO INCLUDE OLD\n*                   AND NEW. ALSO UPDATED THE HELP WITH ALL THE\n*                   OPTIONS.     JIM MARSHALL\n*         30MAR88 - ELIMINATE CHECK FOR SEQUENTIAL DS ONLY. COMPAREB\n*                   WILL NOW HANDLE FULL PDS SPECIFICATION.\n*                          GUY ALBERTELLI.\n*         10MAY88 - ADD IN CODE FROM VERSION IN CBT FILE 296 FROM\n*                   MR. BRUCE LELAND TO\n*                     1. SUPPORT PDS COMMAND\n*                     2. USER UNIT SYSALLDA IN MVS\n*                     3. ELIMINATE 013-18 IF SPECIFIED MEMBER DOES\n*                        NOT EXIST\n*                           GUY ALBERTELLI\n*         10JUN88 - ADD IN CODE TO PROVIDE A FREEPOOL AFTER DCB CLOSE\n*                   TO FREE STORAGE OBTAINED FOR DCB BUFFERS\n*                           BRUCE LELAND\n*         31NOV92 - ADD IN CODE TO AVOID S013 FOR MISSING MEMBERS\n*                   ALSO, ADD CODE TO DEFAULT THE NEW DATA SET MEMBER\n*                   NAME IF IT IS LEFT OFF (THIS CAN BE USED TO\n*                   COMPARE TWO DIFFERENT LEVELS OF THE SAME MODULE).\n*                           BRUCE LELAND\n*         01OCT09 - WHEN COMPARING ENTIRE PDS DATA SETS (THAT IS,\n*                   OLD DATA SET DSORG IS PO AND NO MEMBER NAME IS\n*                   SPECIFIED) CHANGE THE TYPORG PARAMETER ON THE\n*                   IEBCOMPR/ZEBCOMPR CONTROL STATEMENT FROM 'PS'\n*                   TO 'PO' SO IEBCOMPR/ZEBCOMPR DOES NOT CHOKE\n*                   ON THE PDS DIRECTORY, BUT COMPARES SAME-NAMED\n*                   MEMBERS INCLUDING DIRECTORY ENTRY USERDATA.\n*                           GREG PRICE                           GP2009\n*\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        SYNTAX.\n*               COMPARE 'OLDDSNAME' 'NEWDSNAME'\n*\n*            OPTIONAL KEYWORDS ARE:\n*               FULL     - INCLUDE THE SEQUENCE NUMBERS (YALE PGM).\n*               ASM      - COMPARING ASSEMBLER SOURCE CODE (YALE PGM).\n*               IEBCOMPR - THE IEBCOMPR UTILITY IS TO BE USED.\n*               ZEBCOMPR - THE MODIFIED IEBCOMPR IS TO BE USED.\n*               OVOL(VOLUME) - VOLUME CONTAINING THE OLD DATA SET.\n*                          NOT NEEDED IF CATALOGED.\n*               NVOL(VOLUME) - VOLUME CONTAINING THE NEW DATA SET.\n*                          NOT NEEDED IF CATALOGED.\n*               OUNIT(UNIT) - UNIT NAME FOR ALLOCATING THE OLD\n*                          DATA SET. NOT NEEDED IF CATALOGED.\n*               NUNIT(UNIT) - UNIT NAME FOR ALLOCATING THE NEW\n*                          DATA SET. NOT NEEDED IF CATALOGED.\n*               SYSOUT   - MESSAGES TO A SYSOUT DATA SET.\n*               PRINT    - MESSAGES TO TERMINAL (DEFAULT).\n*               NOPRINT  - MESSAGES TO DUMMY FILE.\n*               OUTFILE(FILENAME) - MESSAGES TO SPECIFIED DDNAME.\n*\n*            WHEN THE OVOL OR NVOL KEYWORDS ARE USED TO INDICATE\n*            TWO IDENTICALLY NAMED DATASETS ON DIFFERENT VOLUMES\n*            ARE BEING USED, UNEXPECTED RESULTS CAN OCCUR UNLESS\n*            BOTH OVOL AND NVOL ARE SPECIFIED.  FOR EXAMPLE, IF\n*            OVOL IS SPECIFIED AND NVOL IS NOT, THE ALLOCATION\n*            OF 'NEWDSNAME' WITH NO VOLUME SPECIFIED MAY PICK UP\n*            THE ALREADY ALLOCATED 'OLDDSNAME' INSTEAD OF THE\n*            'NEWDSNAME' IN THE CATALOG.\n*\n***********************************************************************\n         EJECT\n         GBLB  &MVS\n&MVS     SETB  1                   1 - MVS    0 - SVS,MVT\n         SPACE\nCOMPARE  START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'COMPARE '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15             FIRST BASE REGISTER\n         LA    R15,1\n         LA    R11,4095(R15,R10)   SECOND BASE REGISTER\n         LR    R2,R1               PARM POINTER\n         TM    0(R2),X'80'         IS THIS A CPPL\n         BO    PGM                 NO, GO INVOKE COMPAREB\n         TM    4(R2),X'80'         IS THIS A CPPL\n         BZ    CP                  YES, BRANCH\n         SPACE\nPGM      LA    R0,80\n         GETMAIN R,LV=(0)\n         ST    R13,4(,R1)          CHAIN FORWARD\n         ST    R1,8(,R13)          CHAIN BACK\n         LR    R13,R1              UPDATE SAVEAREA POINTER\n         LA    R3,72(,R13)         POINT TO LINK MF=L\n         XC    0(8,R3),0(R3)       CLEAR LINK MF=L\n         LR    R1,R2\n         LINK  EP=COMPAREB,SF=(E,(R3))\n         LR    R2,R15              SAVE RETURN CODE\n         LR    R1,R13              FOR FREEMAIN\n         LA    R0,80               FOR FREEMAIN\n         L     R13,4(,R13)         BACK TO OLD SAVEAREA\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2              RETURN CODE\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\n         USING CPPL,R2\nCP       L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         LR    R15,R1              AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE\n         SRDL  R0,8                DIVIDE BY 256\n         SRL   R1,24               ISOLATE REMAINDER\n         LTR   R0,R0               IS QUOTIENT ZERO\n         BZ    CLEARR              YES, GO CLEAR REMAINDER\nCLEARQ   XC    0(256,R15),0(R15)   CLEAR 256 BYTES\n         LA    R15,256(,R15)\n         BCT   R0,CLEARQ           DECREMENT QUOTIENT AND BRANCH\nCLEARR   LTR   R1,R1               IS REMAINDER ZERO\n         BZ    CLEARX              YES, BRANCH TO FINISH\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BYPASS EXECUTED INSTR\n         XC    0(0,R15),0(R15)     (EXECUTED)\n         EX    R1,*-6              DO THE ABOVE XC\nCLEARX   EQU   *\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN FORWARD\n         ST    R9,8(,R13)          CHAIN BACK\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE 1\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         ST    R2,VECTOR                                        ABL GLA\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLODED            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP DAPL FOR IKJDAIR                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYDAPL\n         USING DAPL,R15\n         MVC   DAPLUPT(12),MYIOPL  UPT,ECT,ECB\n         MVC   DAPLPSCB,CPPLPSCB\n         LA    R0,MYDAPB\n         ST    R0,DAPLDAPB\n         DROP  R15                 DAPL\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(COMPRPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15             PARSE SUCCESSFUL?\n         BZ    PARSEOK             YES, BRANCH\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         B     EXIT12\nPARSEOK  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         MVI   DSNAME+2,C' '\n         MVC   DSNAME+3(43),DSNAME+2\n         MVC   DSNAM2+2(44),DSNAME+2\n         MVC   MEMBER1,DSNAME+2\n         MVC   MEMBER2,MEMBER1\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS 'OLD' DSNAME                             *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,DSN\n         TM    6(R4),X'80'         DSNAME PRESENT\n         BZ    ERRNODSN            NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         STH   R1,DSNAME           DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAME+2(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         SPACE\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    MEMDS1X             NO, BRANCH\n         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER NAME\n         L     R15,08(,R4)         GET ADDRESS OF MEMBER NAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08MNM(0),0(R15)   (EXECUTED)\n         EX    R1,*-6              MOVE MEMBER NAME TO DAPB\n         MVC   MEMBER1,DA08MNM\nMEMDS1X  EQU   *\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    NOPASS              NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08PSWD(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nNOPASS   EQU   *\n         SPACE\n         OI    DA08DSP1,X'08'      DISP=SHR\n         AIF   (&MVS).SKIP3        DAIR TO PREFIX DSNAME\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES\n         BO    *+8                 YES, BRANCH\n         OI    DA08CTL,X'20'       NO, TELL DAIR TO PREFIX DSNAME\n.SKIP3   ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        'OLD' UNIT AND VOLUME                             *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,OVOL\n         TM    6(R4),X'80'         VOLUME SPECIFIED\n         BZ    NOOVOL              NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF VOLUME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    NOOVOL              YES, BRANCH\n         L     R15,0(,R4)          GET ADDRESS OF VOLUME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DA08SER(0),0(R15)   (EXECUTED)\n         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM\n         SPACE\n         LA    R4,OUNI\n         TM    6(R4),X'80'         UNIT SPECIFIED\n         BZ    OUNIT2              NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF UNIT\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    OUNIT2              YES, BRANCH\n         L     R15,0(,R4)          GET ADDRESS OF UNIT\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DA08UNIT(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM\n         B     OUNITX\n         SPACE\nOUNIT2   LA    R1,DA08SER          POINT TO VOLSER FOR UCB SEARCH\n         AIF   (NOT &MVS).SKIP11                                    GLA\n         MVC   DA08UNIT(8),=C'SYSALLDA'                             GLA\n         AGO   .SKIP12                                              GLA\n.SKIP11  ANOP                                                       GLA\n         BAL   R14,CUU             FIND UCB FOR VOLUME\n         LTR   R15,R15             DASD UCB FOUND?\n         BZ    OUNITX              NO, LEAVE UNIT TO SESSION DEFAULT\n         CLI   19(R15),X'0B'       3350?\n         BNE   *+10                NO\n         MVC   DA08UNIT(4),=C'3350'\n         CLI   19(R15),X'0D'       3330-1?\n         BNE   *+10                NO\n         MVC   DA08UNIT(6),=C'3330-1'\n         CLI   19(R15),X'09'       3330?\n         BNE   OUNITX              NO\n         MVC   DA08UNIT(4),=C'3330-1'  NOTE. ONLY MOVE 4 BYTES.\n         TM    17(R15),X'08'       3330V (MSS VIRTUAL VOLUME)\n         BZ    *+8\n         MVI   DA08UNIT+4,C'V'     MAKE IT 3330V\n.SKIP12  ANOP                                                       GLA\nOUNITX   EQU   *\nNOOVOL   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE 'OLD' DATA SET                       *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,CALLDAIR\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT1(8),DA08DDN    SAVE DDNAME\n         SPACE\n*                                                                   GLA\n**   NO NEED TO FORCE MEMBER SINCE COMPAREB CAN HANDLE FULL PDS     GLA\n**   BUT IF MEMBER SPECIFIED THEN VALIDATE THAT IT IS THERE         GLA\n*                                                                   GLA\n*   ************************************************************    GLA\n*   *                                                          *    GLA\n*   *         MEMBER MUST BE SPECIFIED IF DSORG IS PDS         *    GLA\n*   *                                                          *    GLA\n*   ************************************************************    GLA\n         SPACE\n         MVC   DSORG1,DA08DSO\n         TM    DA08DSO,X'02'\n         BZ    OKSEQ1\n         CLI   DA08MNM,C' '\n         BE    OKSEQ1              DONT WORRY IF NO MEMBER          GLA\n         MVC   MSGWK(8),DA08MNM                                 ABL GLA\n         MVC   DA08DDN(8),=CL8' '                                   ABL\n         MVC   DA08MNM(8),=CL8' '                                   ABL\n         BAL   R14,CALLDAIR                                         ABL\n         LTR   R15,R15                                              ABL\n         BNZ   ERRDAIR                                              ABL\n         MVC   DDUT3(8),DA08DDN                                     ABL\n         SPACE 1                                                    ABL\n         LA    R6,VERDCBW                                       ABL GLA\n         MVC   0(VERDCBL,R6),VERDCB                             ABL GLA\n         MVC   DDNAM(8,R6),DA08DDN                              ABL GLA\n         LA    R1,OPEN                                          ABL GLA\n         XC    0(4,R1),0(R1)                                    ABL GLA\n         MVI   0(R1),X'80'                                      ABL GLA\n         OPEN  ((R6),INPUT),MF=(E,(1))                          ABL GLA\n         TM    OFLGS(R6),X'10'                                  ABL GLA\n         BNO   EXIT12                                           ABL GLA\n         MVC   VERBLDL(4),=X'00010010'                          ABL GLA\n         MVC   VERBLDL+4(8),MSGWK                               ABL GLA\n         BLDL  (R6),VERBLDL                                     ABL GLA\n         LR    R4,R15                                           ABL GLA\n         LA    R1,OPEN                                          ABL GLA\n         XC    0(4,R1),0(R1)                                    ABL GLA\n         MVI   0(R1),X'80'                                      ABL GLA\n         CLOSE ((R6)),MF=(E,(1))                                ABL GLA\n         LTR   R4,R4                                            ABL GLA\n         BNZ   MEMERROR                                         ABL GLA\n*                                                               ABL GLA\nOKSEQ1   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS 'NEW' DATA SET NAME                      *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,DS2\n         TM    6(R4),X'80'         DSNAME PRESENT\n         BZ    ERRNODSN            NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    EXIT12              YES, BRANCH\n         STH   R1,DSNAM2           DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAM2+2(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAM2\n         ST    R0,DA08PDSN\n         SPACE\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    MEMDS2X             NO, BRANCH\n         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER NAME\n         L     R15,08(,R4)         GET ADDRESS OF MEMBER NAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08MNM(0),0(R15)   (EXECUTED)\n         EX    R1,*-6              MOVE MEMBER NAME TO DAPB\n         MVC   MEMBER2,DA08MNM\nMEMDS2X  EQU   *\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    NOPAS2              NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    NOPAS2              YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08PSWD(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nNOPAS2   EQU   *\n         SPACE\n         OI    DA08DSP1,X'08'      DISP=SHR\n         AIF   (&MVS).SKIP4        DAIR TO PREFIX DSNAME\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES\n         BO    *+8                 YES, BRANCH\n         OI    DA08CTL,X'20'       NO, TELL DAIR TO PREFIX DSNAME\n.SKIP4   ANOP\n         SPACE\n************************************************************\n*                                                          *\n*         'NEW' UNIT AND VOLUME                            *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,NVOL\n         TM    6(R4),X'80'         VOLUME SPECIFIED\n         BZ    NONVOL              NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF VOLUME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    NONVOL              YES, BRANCH\n         L     R15,0(,R4)          GET ADDRESS OF VOLUME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DA08SER(0),0(R15)   (EXECUTED)\n         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM\n         LA    R4,NUNI\n         TM    6(R4),X'80'         UNIT SPECIFIED\n         BZ    NUNIT2              NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF UNIT\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    NUNIT2              YES, BRANCH\n         L     R15,0(,R4)          GET ADDRESS OF UNIT\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DA08UNIT(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM\n         B     NUNITX\n         SPACE\nNUNIT2   LA    R1,DA08SER          POINT TO VOLSER FOR UCB SEARCH\n         AIF   (NOT &MVS).SKIP21                                    GLA\n         MVC   DA08UNIT(8),=C'SYSALLDA'                             GLA\n         AGO   .SKIP22                                              GLA\n.SKIP21  ANOP                                                       GLA\n         BAL   R14,CUU             FIND UCB FOR VOLUME\n         LTR   R15,R15             DASD UCB FOUND?\n         BZ    NUNITX              NO, LEAVE UNIT TO SESSION DEFAULT\n         CLI   19(R15),X'0B'       3350?\n         BNE   *+10                NO\n         MVC   DA08UNIT(4),=C'3350'\n         CLI   19(R15),X'0D'       3330-1?\n         BNE   *+10                NO\n         MVC   DA08UNIT(6),=C'3330-1'\n         CLI   19(R15),X'09'       3330?\n         BNE   NUNITX              NO\n         MVC   DA08UNIT(4),=C'3330-1'  NOTE. ONLY MOVE 4 BYTES.\n         TM    17(R15),X'08'       3330V (MSS VIRTUAL VOLUME)\n         BZ    *+8\n         MVI   DA08UNIT+4,C'V'     MAKE IT 3330V\n.SKIP22  ANOP                                                       GLA\nNUNITX   EQU   *\nNONVOL   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE 'NEW' DATA SET                       *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,CALLDAIR\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT2(8),DA08DDN    SAVE DDNAME\n         SPACE\n*                                                                   GLA\n**   NO NEED TO FORCE MEMBER SINCE COMPAREB CAN HANDLE FULL PDS     GLA\n**   BUT IF MEMBER SPECIFIED THEN VALIDATE THAT IT IS THERE         GLA\n*                                                                   GLA\n*   ************************************************************    GLA\n*   *                                                          *    GLA\n*   *         MEMBER NAME REQUIRED IF DSORG IS PARTITIONED     *    GLA\n*   *                                                          *    GLA\n*   ************************************************************    GLA\n         SPACE\n         MVC   DSORG2,DA08DSO\n         TM    DA08DSO,X'02'\n         BZ    OKSEQ2\n**                                                                  ABL\n**   IF MEMBER NAME FOR \"NEW\" BUT NOT FOR \"OLD\", DEFAULT TO         ABL\n**   SAME MEMBER NAME (THIS IS A PDS).                              ABL\n**                                                                  ABL\n         MVC   MSGWK(8),DA08MNM                                 ABL GLA\n         CLI   MEMBER1,C' '        A MEMBER NAME FOR \"OLD\"?         ABL\n         BH    NOMEMBA             YES, BRANCH                      ABL\n         CLI   DA08MNM,C' '\n         BE    OKSEQ2              DONT WORRY IF NO MEMBER          GLA\nNOMEMBA  CLI   DA08MNM,C' '        ANY MEMBER FOR \"NEW\"?            ABL\n         BNE   NOMEMBB             YES, BRANCH                      ABL\n         MVC   MSGWK(8),MEMBER1                                     ABL\n         LA    R6,VERDCBW                                           ABL\n         MVC   0(VERDCBL,R6),VERDCB                                 ABL\n         MVC   DDNAM(8,R6),DA08DDN                                  ABL\n         LA    R1,OPEN                                              ABL\n         XC    0(4,R1),0(R1)                                        ABL\n         MVI   0(R1),X'80'                                          ABL\n         OPEN  ((R6),INPUT),MF=(E,(1))                              ABL\n         TM    OFLGS(R6),X'10'                                      ABL\n         BNO   EXIT12                                               ABL\n         MVC   VERBLDL(4),=X'00010010'                              ABL\n         MVC   VERBLDL+4(8),MSGWK                                   ABL\n         BLDL  (R6),VERBLDL                                         ABL\n         LR    R4,R15                                               ABL\n         LA    R1,OPEN                                              ABL\n         XC    0(4,R1),0(R1)                                        ABL\n         MVI   0(R1),X'80'                                          ABL\n         CLOSE ((R6)),MF=(E,(1))                                    ABL\n         LTR   R4,R4                                                ABL\n         BNZ   MEMERROR                                             ABL\n         SPACE 1                                                    ABL\n         MVC   MYDAPH(21*4),MYDAPB SAVE THE PARAMETER BLOCK         ABL\n         USING DAPB18,R5                                            ABL\n         MVC   DA18CD(MODEL18L),MODEL18                             ABL\n         MVC   DA18DDN,DDUT2                                        ABL\n         BAL   R14,CALLDAIR                                         ABL\n         MVC   MYDAPB(21*4),MYDAPH RESTORE THE PARAMETER BLOCK      ABL\n         USING DAPB08,R5                                            ABL\n         MVC   MEMBER2,MEMBER1                                      ABL\n         MVC   DA08MNM,MEMBER1                                      ABL\n         MVC   DA08DDN(8),=CL8'NEWDD'                               ABL\n         BAL   R14,CALLDAIR                                         ABL\n         SPACE 1                                                    ABL\n         LTR   R15,R15                                              ABL\n         BNZ   ERRDAIR                                              ABL\n         MVC   DDUT2(8),DA08DDN    SAVE DDNAME                      ABL\n         B     OKSEQ2              CONTINUE WITH MEMBER COMPARE     ABL\nNOMEMBB  DS    0H                                                   ABL\n         MVC   DA08DDN(8),=CL8' '                                   ABL\n         MVC   DA08MNM(8),=CL8' '                                   ABL\n         BAL   R14,CALLDAIR                                         ABL\n         LTR   R15,R15                                              ABL\n         BNZ   ERRDAIR                                              ABL\n         MVC   DDUT4(8),DA08DDN                                     ABL\n         SPACE 1                                                    ABL\n         LA    R6,VERDCBW                                       ABL GLA\n         MVC   0(VERDCBL,R6),VERDCB                             ABL GLA\n         MVC   DDNAM(8,R6),DA08DDN                              ABL GLA\n         LA    R1,OPEN                                          ABL GLA\n         XC    0(4,R1),0(R1)                                    ABL GLA\n         MVI   0(R1),X'80'                                      ABL GLA\n         OPEN  ((R6),INPUT),MF=(E,(1))                          ABL GLA\n         TM    OFLGS(R6),X'10'                                  ABL GLA\n         BNO   EXIT12                                           ABL GLA\n         MVC   VERBLDL(4),=X'00010010'                          ABL GLA\n         MVC   VERBLDL+4(8),MSGWK                               ABL GLA\n         BLDL  (R6),VERBLDL                                     ABL GLA\n         LR    R4,R15                                           ABL GLA\n         LA    R1,OPEN                                          ABL GLA\n         XC    0(4,R1),0(R1)                                    ABL GLA\n         MVI   0(R1),X'80'                                      ABL GLA\n         CLOSE ((R6)),MF=(E,(1))                                ABL GLA\n         LTR   R4,R4                                            ABL GLA\n         BNZ   MEMERROR                                         ABL GLA\n*                                                               ABL GLA\n         LA    R6,VERDCBW                                       ABL GLA\n         MVC   0(VERDCBL,R6),VERDCB                             ABL GLA\n         MVC   DDNAM(8,R6),DA08DDN                              ABL GLA\n         LA    R1,OPEN                                          ABL GLA\n         XC    0(4,R1),0(R1)                                    ABL GLA\n         MVI   0(R1),X'80'                                      ABL GLA\n         OPEN  ((R6),INPUT),MF=(E,(1))                          ABL GLA\n         TM    OFLGS(R6),X'10'                                  ABL GLA\n         BNO   EXIT12                                           ABL GLA\n         MVC   VERBLDL(4),=X'00010010'                          ABL GLA\n         MVC   VERBLDL+4(8),MSGWK                               ABL GLA\n         BLDL  (R6),VERBLDL                                     ABL GLA\n         LR    R4,R15                                           ABL GLA\n         LA    R1,OPEN                                          ABL GLA\n         XC    0(4,R1),0(R1)                                    ABL GLA\n         MVI   0(R1),X'80'                                      ABL GLA\n         CLOSE ((R6)),MF=(E,(1))                                ABL GLA\n         LTR   R4,R4                                            ABL GLA\n         BNZ   MEMERROR                                         ABL GLA\n*                                                               ABL GLA\nOKSEQ2   EQU   *                                                GLA\n         SPACE\n************************************************************\n*                                                          *\n*        CHECK FOR IDENTICAL DSNAMES AND VOLUMES           *\n*                                                          *\n************************************************************\n         SPACE\n         CLC   DSNAME+2(44),DSNAM2+2\n         BNE   OKDIFF\n         CLC   MEMBER1,MEMBER2\n         BNE   OKDIFF\n         LA    R4,DDUT1            POINT TO INPUT DDNAME\n         BAL   R14,TIOTSCAN\n         MVC   DOUBLE(6),28(R1)    HOLD VOL FROM UCB\n         LA    R4,DDUT2            POINT TO OUTPUT DDNAME\n         BAL   R14,TIOTSCAN\n         CLC   DOUBLE(6),28(R1)    IS IT SAME VOLUME\n         BNE   OKDIFF              NO, BRANCH\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG\n         B     OKDIFF\n*        B     EXIT12\n         SPACE\nTIOTSCAN L     R15,16              CVTPTR\n         L     R15,0(,R15)         TCB WORDS\n         L     R15,4(,R15)         CURRENT TCB\n         L     R15,12(,R15)        TCBTIOT\n         LA    R15,24(,R15)        TIOENTRY\n         USING TIOENTRY,R15\nTIOTLOOP CLI   TIOENTRY,X'00'      END OF TIOT?\n         BER   R14                 YES - RETURN\n         CLC   TIOEDDNM,0(R4)      DOES DDNAME MATCH?\n         BE    TIOTEXIT            YES - RETURN\n         SR    R1,R1\n         IC    R1,TIOELNGH         GET LENGTH OF ENTRY\n         LA    R15,0(R1,R15)       POINT TO NEXT ENTRY\n         B     TIOTLOOP\nTIOTEXIT L     R1,TIOEFSRT-1       GET UCB ADDRESS\n         BR    R14\n         SPACE\nOKDIFF   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSIN FILE                           *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   IEBKW+1,0           IEBCOMPR REQUESTED\n         BE    NOIN                NO, SKIP SYSIN\n         MVC   DA08CD(84),MODEL08\n         MVC   DA08UNIT,@UNITVIO\n         MVI   DA08PQTY+3,1        1 TRACK\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDIN,DA08DDN\n         SPACE\n************************************************************\n*                                                          *\n*        WRITE SYSIN CONTROL STATEMENTS                    *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,CTLDCBW\n         MVC   0(CTLDCBL,R6),CTLDCB\n         MVC   DDNAM(8,R6),DDIN\n         LA    R1,OPEN\n         MVI   0(R1),X'80'\n         OPEN  ((R6),OUTPUT),MF=(E,(1))\n         TM    OFLGS(R6),X'10'\n         BNO   EXIT12\n         MVI   CARD,C' '\n         MVC   CARD+1(79),CARD\n         MVC   CARD+1(17),=C'COMPARE TYPORG=PS'\n         TM    DSORG1,X'02'        PDS?                          GP2009\n         BZ    TYPORGOK            NO, ASSUME SEQUENTIAL         GP2009\n         CLI   MEMBER1,C' '        MEMBER NAME SPECIFIED?        GP2009\n         BH    TYPORGOK            YES, TREAT AS SEQUENTIAL      GP2009\n         MVI   CARD+17,C'O'        NO, TREAT AS PARTITIONED      GP2009\nTYPORGOK EQU   *                   TYPORG NOW DECIDED            GP2009\n         PUT   (R6),CARD\n         SPACE\nMEMX     MVI   CLOSE,X'80'\n         CLOSE ((R6)),MF=(E,CLOSE)\n         FREEPOOL (R6)                                              ABL\nNOIN     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE (DUMMY)                *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   PRINTKW+1,4         'NOPRINT' SPECIFIED?\n         BNE   PRINTERM            NO\n         MVC   DA08CD(84),MODEL08\n         OI    DA08CTL,DA08DMMY\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA08DDN\n         B     PRINTX\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE TO THE TERMINAL        *\n*                                                          *\n************************************************************\n         SPACE\nPRINTERM CLI   PRINTKW+1,1         PRINT\n         BH    PRINTSYS\n         USING DAPB1C,R5\n         MVC   DA1CCD(MODEL1CL),MODEL1C\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA1CDDN\n         DROP  R5                  DAPB1C\n         B     PRINTX\n         SPACE\nPRINTSYS CLI   PRINTKW+1,2         SYSOUT\n         BNE   PRINTOUT\n         USING DAPB30,R5\n         MVC   DA30CD(MODEL30L),MODEL30\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA30DDN\n         MVI   FREEOPT,1           FREE DDPRINT WITH CLASS\n         DROP  R5                  DAPB30\n         B     PRINTX\n         SPACE\nPRINTOUT CLI   PRINTKW+1,3         OUTFILE\n         BNE   PRINTX              NO, USE SYSPRINT\n         LA    R4,OUT\n         TM    6(R4),X'80'         OUTFILE PRESENT?\n         BZ    PRINTX              NO, USE SYSPRINT\n         LH    R1,4(,R4)           GET LENGTH\n         L     R15,0(,R4)\n         MVC   DDPRINT,=CL8' '\n         BCTR  R1,0\n         B     *+10\n         MVC   DDPRINT(0),0(R15)\n         EX    R1,*-6\n         MVI   FREEOPT,2           DO NOT FREE DDPRINT\n         B     PRINTX\n         SPACE\nPRINTX   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        BUILD PARM FIELD AND DDNAME POINTERS              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,PARMPTR\n         LA    R15,PARMLEN\n         ST    R15,0(,R1)\n         LA    R15,DDNAMES\n         ST    R15,4(,R1)\n         OI    4(R1),X'80'\n         LA    R14,88\n         STH   R14,0(,R15)\n         MVC   LINKEP,=CL8'IEBCOMPR'\n         CLI   IEBKW+1,1           IEBCOMPR REQUESTED\n         BE    OKCOMPR             YES\n         MVI   LINKEP,C'Z'         NO, TRY ZEBCOMPR\n         CLI   IEBKW+1,2           ZEBCOMPR REQUESTED\n         BE    OKCOMPR             YES\n         MVC   LINKEP,=CL8'COMPAREB' NO, USE DEFAULT YALE COMPARE\n         XC    DDIN,DDIN\n         L     R14,VECTOR                                       ABL GLA\n         L     R14,0(,R14)                                      ABL GLA\n         CLI   PRINTKW+1,0         PRINT, DUMMY, SYSOUT OR FILE?ABL GLA\n         BNE   PRINTZ              YES, BRANCH                  ABL GLA\n         AH    R14,0(,R14)         POINT TO END OF PARSE STRING ABL GLA\n         CLC   2(7,R14),=C'PDSCALL'  CALLED BY PDS FOR PUTLINE SUPPORT?\n         BNE   PRINTZ                NO, BRANCH                 ABL GLA\n         MVC   DDRETURN(4),10(R14) YES, COPY REENTRY VECTOR ADDRESS GLA\n         MVI   DDRETURN,C'*'       YES, MARK FOR COMPAREB       ABL GLA\nPRINTZ   DS    0H                                               ABL GLA\n         CLI   FULLKW+1,1          FULL SPECIFIED\n         BNE   NOTFULL             NO, BRANCH\n         MVI   PARMLEN+1,9                                          GLA\n         MVC   PARM(9),=C'TYPE=FULL'                                GLA\n         CLI   ASMKW+1,1           ASM SPECIFIED\n         BNE   OKCOMPR             NO, BRANCH\n         MVI   PARMLEN+1,18                                         GLA\n         MVC   PARM+9(9),=C',TYPE=ASM'                              GLA\n         B     OKCOMPR\nNOTFULL  CLI   ASMKW+1,1           ASM SPECIFIED\n         BNE   OKCOMPR             NO, BRANCH\n         MVI   PARMLEN+1,8                                          GLA\n         MVC   PARM(8),=C'TYPE=ASM'                                 GLA\nOKCOMPR  EQU   *\n         SPACE\n         LINK  EPLOC=LINKEP,SF=(E,LINKAREA)\n         SPACE\n         ST    R15,RETURNC                                          ABL\n         LTR   R15,R15\n         BZ    EXIT0\n         B     ERRCOPY\n         SPACE\n************************************************************\n*                                                          *\n*         CALL DYNAMIC ALLOCATION                          *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR LR    R8,R14\n         LA    R1,MYDAPL\n         AIF   (NOT &MVS).SKIP5\n         L     R15,16              CVTPTR\n         TM    X'02DC'(R15),X'80'  IF HI ORDER BIT NOT ON\n         BNO   DAIRLINK               THEN DO LINK, NOT CALL\n         L     R15,X'02DC'(,R15)   CVTDAIR\n         BALR  R14,R15             CALL IKJDAIR\n         B     DAIREXIT            SKIP AROUND LINK\nDAIRLINK EQU   *\n.SKIP5   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIREXIT EQU   *\n         LR    R14,R8\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         AIF   (NOT &MVS).SKIP6\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         ST    R2,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1                  DFDSECTD\n.SKIP6   AIF   (&MVS).SKIP7\n         LA    R1,MSGDAIR\n         LA    R0,L'MSGDAIR\n         BAL   R14,PUTMSG\n.SKIP7   ANOP\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        CUU - GET UCB ADDRESS FOR A GIVEN VOLUME          *\n*                                                          *\n************************************************************\n         SPACE\nCUU      LR    0,14                SAVE RETURN ADDRESS\n         L     14,16               CVTPTR\n         L     14,X'28'(,14)       CVTILK2\nCUU1     LH    15,0(,14)           LOAD UCB ADDRESS\n         LTR   15,15               VALID ADDRESS?\n         BZ    CUU2                NULL - TRY NEXT\n         BM    CUU3                END OF LIST\n         CLI   18(15),X'20'        DASD?\n         BNE   CUU2                NO - TRY NEXT\n         TM    3(15),X'80'         ONLINE?\n         BZ    CUU2                NO - TRY NEXT\n         CLC   28(6,15),0(1)       DOES VOLUME SERIAL MATCH?\n         BNE   CUU2                NO - TRY NEXT\n         LR    14,0                RESTORE RETURN ADDRESS\n         BR    14                  RETURN\nCUU2     LA    14,2(,14)           INCREMENT UCB POINTER\n         B     CUU1                CONTINUE\nCUU3     SLR   15,15               CLEAR UCB POINTER\n         LR    14,0                RESTORE RETURN ADDRESS\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*                                                          *\n*        ERROR HANDLERS                                    *\n*                                                          *\n************************************************************\n         SPACE\nERRNODSN LA    R1,MSG06\n         LA    R0,L'MSG06\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRDAIR  BAL   R14,DAIRFAIL\n         B     EXIT12\n         SPACE\nERRPDS   LA    R15,MSGWK\n         BAL   R14,DSNOUT\nERRPDSC  MVC   0(30,R15),=CL30' IS A PARTITIONED DATA SET'\n         LA    R15,30(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     EXIT12\nERRPD2   LA    R15,MSGWK\n         BAL   R14,DSNOU2\n         B     ERRPDSC\n         SPACE\nMEMERROR LA    R15,MSGWK+8\n         MVC   0(30,R15),=CL30' IS NOT IN THE DATA SET'\n         LA    R15,30(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRCOPY  CVD   R15,DOUBLE\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(21,R15),=CL21' COMPARE RETURN CODE'\n         LA    R15,21(,R15)\n         MVI   0(R15),C' '\n         UNPK  1(3,R15),DOUBLE+6(2)\n         OI    3(R15),X'F0'\n         CLI   1(R15),C'0'\n         BNE   *+14\n         MVC   1(2,R15),2(R15)\n         MVI   3(R15),C' '\n         CLI   1(R15),C'0'\n         BNE   *+14\n         MVC   1(2,R15),2(R15)\n         MVI   3(R15),C' '\n         LA    R15,4(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         L     R15,RETURNC         GET RETURN CODE                  ABL\n         CLI   DDRETURN,C'*'       INVOKED BY PDS INTERNAL CALL?    GLA\n         BE    EXIT                YES, BRANCH                  ABL/GLA\n         BAL   R14,PUTLINE\n         L     R15,RETURNC         GET RETURN CODE                  ABL\n         B     EXIT                                                 ABL\n         SPACE\nDSNOUT   LH    R1,DSNAME\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),DSNAME+2\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         BR    R14\n         SPACE\nDSNOU2   LH    R1,DSNAM2\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),DSNAM2+2\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,MYREGS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,MYREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,MYREGS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,MYREGS\n         BR    R14\n         SPACE\nEXIT12   LA    R15,12\n         B     EXIT\n         SPACE 1\nEXIT0    SR    R15,R15             RETURN CODE ZERO\nEXIT     LR    R2,R15              HOLD RETURN CODE\n         IKJRLSA MYANS\n         DROP  R3\n         SPACE\n         USING DAPB18,R5\n         CLI   DDUT1,0\n         BE    FFUT1\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT1\n         BAL   R14,CALLDAIR\nFFUT1    EQU   *\n         CLI   DDUT2,0\n         BE    FFUT2\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT2\n         BAL   R14,CALLDAIR\nFFUT2    EQU   *\n         CLI   DDUT3,0                                              ABL\n         BE    FFUT3                                                ABL\n         MVC   DA18CD(MODEL18L),MODEL18                             ABL\n         MVC   DA18DDN,DDUT3                                        ABL\n         BAL   R14,CALLDAIR                                         ABL\nFFUT3    EQU   *                                                    ABL\n         CLI   DDUT4,0                                              ABL\n         BE    FFUT4                                                ABL\n         MVC   DA18CD(MODEL18L),MODEL18                             ABL\n         MVC   DA18DDN,DDUT4                                        ABL\n         BAL   R14,CALLDAIR                                         ABL\nFFUT4    EQU   *                                                    ABL\n         CLI   DDIN,0\n         BE    FFIN\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDIN\n         BAL   R14,CALLDAIR\nFFIN     EQU   *\n         CLI   DDPRINT,0\n         BE    FFPRINT\n         CLI   FREEOPT,2           OUTFILE\n         BE    FFPRINT             YES, LEAVE ALLOCATED\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDPRINT\n         CLI   FREEOPT,1           SYSOUT?\n         BNE   *+8                 NO\n         MVI   DA18SCLS,C'A'       YES\n         BAL   R14,CALLDAIR\nFFPRINT  EQU   *\n         DROP  R5                  DAPB18\n         TM    MYPUTLEP,X'80'      WAS PUTLINE LOADED\n         BO    DELPUTLX            NO, BRANCH\n         LA    R0,=CL8'IKJPUTL'    YES, DELETE IT\n         DELETE EPLOC=(0)\nDELPUTLX EQU   *\n         LTR   R2,R2               IS RC ZERO?\n         BZ    STACKDX             YES, BRANCH\n         MVC   MYSTPB(STACKDL),STACKD\n         SPACE\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         SPACE\n         TCLEARQ\nSTACKDX  EQU   *\nEXITX    LR    R15,R2              RESTORE RETURN CODE\n         LR    1,R13               SET UP FREE ADDRESS\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         ST    R15,16(,R13)        STORE RETURN CODE FOR LM\n         L     R0,@SIZE\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n@UNITVIO DC    CL8'SYSDA'\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODEL08  DC    AL2(8),XL10'0',CL24' ',XL16'0',CL16' ',XL8'0',CL8' '\nMODEL08L EQU   *-MODEL08\nMODEL18  DC    X'0018',XL10'0',CL18' ',XL2'0',CL8' '\nMODEL18L EQU   *-MODEL18\nMODEL1C  DC    X'001C',XL6'0',CL16' '\nMODEL1CL EQU   *-MODEL1C\nMODEL30  DC    X'0030',XL10'0',CL24' ',XL12'0',CL14' ',XL2'0',CL8' '\nMODEL30L EQU   *-MODEL30\n         SPACE\nMSG01    DC    C'PARSE ERROR'\nMSG03    DC    C'YOU ARE COMPARING A DATA SET TO ITSELF'\nMSG06    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+\n               IED'\nMSGDAIR  DC    C'UNABLE TO ALLOCATE'\n         LTORG\n         PRINT NOGEN\nCTLDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=PM,BUFNO=2,                 +\n               RECFM=FB,LRECL=80,BLKSIZE=800\nCTLDCBL  EQU   *-CTLDCB\nVERDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=R,DEVD=DA            ABL GLA\nVERDCBL  EQU   *-VERDCB\n         PRINT GEN\nDDNAM    EQU   40\nOFLGS    EQU   48\n         SPACE\nOBTAIN   CAMLST SEARCH,2,3,4\nOBTAINL  EQU   *-OBTAIN\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PCL                                         *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nCOMPRPCL IKJPARM\nDSN      IKJPOSIT DSNAME,USID,PROMPT='OLD DATA SET NAME',              +\n               HELP='FIRST (OR OLD) DATA SET NAME'\nDS2      IKJPOSIT DSNAME,USID,PROMPT='NEW DATA SET NAME',              +\n               HELP='SECOND (OR NEW) DATA SET NAME'\nOUNIKW   IKJKEYWD\n         IKJNAME 'OUNIT',SUBFLD=OUNISF\nNUNIKW   IKJKEYWD\n         IKJNAME 'NUNIT',SUBFLD=NUNISF\nOVOLKW   IKJKEYWD\n         IKJNAME 'OVOLUME',SUBFLD=OVOLSF\nNVOLKW   IKJKEYWD\n         IKJNAME 'NVOLUME',SUBFLD=NVOLSF\nPRINTKW  IKJKEYWD\n         IKJNAME 'PRINT'\n         IKJNAME 'SYSOUT'\n         IKJNAME 'OUTFILE',SUBFLD=OUTSF\n         IKJNAME 'NOPRINT'\nIEBKW    IKJKEYWD\n         IKJNAME 'IEBCOMPR'\n         IKJNAME 'ZEBCOMPR'\nFULLKW   IKJKEYWD\n         IKJNAME 'FULL'\nASMKW    IKJKEYWD DEFAULT='ASM'\n         IKJNAME 'ASM'\n         IKJNAME 'NOASM'\nOUNISF   IKJSUBF\nOUNI     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +\n               PROMPT='UNIT NAME FOR OLD DATA SET'\nNUNISF   IKJSUBF\nNUNI     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +\n               PROMPT='UNIT NAME FOR NEW DATA SET'\nOVOLSF   IKJSUBF\nOVOL     IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    +\n               PROMPT='VOLUME SERIAL FOR OLD DATA SET'\nNVOLSF   IKJSUBF\nNVOL     IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    +\n               PROMPT='VOLUME SERIAL FOR NEW DATA SET'\nOUTSF    IKJSUBF\nOUT      IKJIDENT 'OUTFILE FILENAME',                                  +\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8,                   +\n               PROMPT='OUTFILE FILENAME'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\nTIOT     DSECT\n         DS    CL24                JOBNAME, ETC\nTIOENTRY DS    0C\nTIOELNGH DS    AL1                 LENGTH OF THIS ENTRY\n         DS    XL3\nTIOEDDNM DS    CL8                 DD NAME\nTIOEJFCB DS    CL3                 TTR OF JFCB\n         DS    XL2\nTIOEFSRT DS    AL3                 ADDRESS OF UCB\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nLINKAREA DS    2F\nLINKEP   DS    0CL8\nMYPPL    DS    7F\nVECTOR   DS    F                                                ABL GLA\nRETURNC  DS    F                  RETURN CODE                       ABL\nMYANS    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nMYREGS   DS    4F                 USED BY PUTLINE ROUTINE\nMYDFREGS DS    F\nMYSTPB   DS    0F                 USED BY STACK DELETE (5F)\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nMYDAPH   DS    21F                                                  ABL\nDSNAME   DS    H,CL44\nDSNAM2   DS    H,CL44\nMEMBER1  DS    CL8\nMEMBER2  DS    CL8\nMEMDSPDE DS    5F                 FAKE SELECT PDE\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\n*\nFREEOPT  DS    H\n*\nPARMPTR  DS    2F,H\nPARMLEN  DS    H\nPARM     DS    0F,CL20\nDDNAMES  DS    H,CL32\nDDIN     DS    CL8\nDDPRINT  DS    CL8\nDDRETURN DS    CL8                                              ABL GLA\nDDUT1    DS    CL8\nDDUT2    DS    CL8\nDDUT3    DS    CL8\nDDUT4    DS    CL8\n*\nMSGWK    DS    CL72\nOPEN     DS    0F\nCLOSE    DS    F\nCTLDCBW  DS    0D,(CTLDCBL)X\nVERDCBW  DS    0D,(VERDCBL)X\nVERREGS  DS    F\nVERBLDL  DS    2H,CL8,CL4\nDSORG1   DS    C\nDSORG2   DS    C\nOBTVOL   DS    CL6\nOBTAINW  DS    4F\nDSCB     DS    CL140\n         DS    0D\nCARD     DS    CL80\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJDAPL\n         SPACE\n         IKJDAP08\n         SPACE\n         IKJDAP18\n         SPACE\n         IKJDAP1C\n         SPACE\n         IKJDAP30\n         SPACE\n         AIF   (NOT &MVS).SKIP8\n         IKJEFFDF DFDSECT=YES\n.SKIP8   ANOP\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n//*\n//LNK1   EXEC  PGM=IEWL,PARM='LIST,MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLINX  DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD(COMPARE)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//SYSLIN   DD  *\n  INCLUDE SYSLINX\n  ALIAS   COMPARE$\n  NAME    COMPARE(R)\n//*\n//ASM2  EXEC  PGM=ASMA90,REGION=6000K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,\n//             'XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DUMMY\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n         TITLE 'PDS/SEQ COMPARE PROGRAM -- USE YALE COMPARE PGM LOGIC'\n*$DOC$*****************************************************************\n*                                                                     *\n*   THIS IS AN ENHANCEMENT (COMBINATION) OF TWO FLAVORS OF THE YALE   *\n*   COMPARE PROGRAM. THE FIRST WAS TAKEN FROM FILE 45 OF THE CBT      *\n*   TAPE AND WAS MODIFIED FROM THE ORIGINAL BY MR. BRENT TOLMAN.      *\n*   THE SECOND SOURCE IS THE VERSION FROM FILE 300 OF THE CBT TAPE    *\n*   AND WAS MODIFIED BY MR. BILL GODFREY AND MR. JIM MARSHALL         *\n*   ADDITIONAL CODE FROM THE VERSION FROM FILE 296 OF THE CBT TAPE    *\n*   HAS BEEN ADDED TO ALLOW THIS VERSION TO ALSO FUNCTION UNDER       *\n*   THE PDS COMMAND. FILE 296 IS FROM MR. BRUCE LELAND                *\n*                                                                     *\n*   THE INTEND OF THIS COMBINATION IS TO PRODUCE A VERSION THAT       *\n*   CAN COMPARE EITHER TWO ENTIRE PDS'S, OR TWO SEQUENTIAL FILES.     *\n*   IT IS ALSO DESIRED THAT IT CAN BE INVOKED BY THE 'COMPARE'        *\n*   TSO COMMAND WRITTEN BY MR. BILL GODFREY.                          *\n*                                                                     *\n*                                                                     *\n*   THE FEATURES IN THIS PROGRAM ARE:                                 *\n*    1. USES THE YALE COMPARE PROGRAM LOGIC FOR COMPARING AND RESYNC- *\n*       RONIZATRION.                                                  *\n*    2. SUPPORTS COMPARES OF FULL PDS DATASETS (DON'T SPECIFY A       *\n*       MEMBER NAME TO USE THIS FEATURE).                             *\n*    3. SUPPORTS COMPARES OF TWO SEQUENTIAL DATASETS (EITHER REAL     *\n*       SEQUENTIAL DATASETS OR MEMBERS SPECIFIED IN JCL).             *\n*    4. SUPPORTS RECORD SIZES DIFFERENT FROM 80 BYTES BUT LESS THAN   *\n*       256 BYTES (NOTE IGNORE CARDS MUST BE 80 BYTES LONG) -SEE BELOW*\n*    5. CAN BE INVOKED WITH A DDNAME PARAMETER LIST FROM THE          *\n*       'COMPARE' TSO COMMAND (MODIFIED FROM CBT FILE 300).           *\n*    6. ALSO ENCLOSED IS THE NECESSARY PANEL, CLIST, AND SKELETON     *\n*       TO INVOKE IT UNDER ISPF                                       *\n*    7. CODE FROM MR. BRUCE LELAND TO SUPPORT THE PDS COMMAND HAS     *\n*       ALSO BEEN IMPLEMENTED.                                        *\n*                                                                     *\n*   GUY L. ALBERTELLI                                                 *\n*   B. F. GOODRICH                                                    *\n*   3925 EMBASSY PARKWAY                                              *\n*   AKRON, OHIO  44313                                                *\n*       216-374-4071                                                  *\n*                                                                     *\n*                                                                     *\n*   SEVERAL CHANGES WERE MADE TO THIS PROGRAM ON 6/10/88 TO BETTER    *\n*   SUPPORT ITS USE FROM THE PDS COMMAND PROCESSOR:                   *\n*    1. CHANGES WERE MADE TO ALLOW PDS CHECKPOINT PROCESSING TO       *\n*       TERMINATE THE COMPARISON.                                     *\n*    2. ADDED CODE TO SUPPRESS PAGES CONTAINING ONLY HEADER           *\n*       INFORMATION FOR MEMBERS THAT COMPARE AS EQUAL.                *\n*    3. ADDED CODE TO SUPPRESS OUTPUT LINES IN THE RECAP REPORT       *\n*       FOR MEMBERS THAT COMPARE AS EQUAL.                            *\n*    4. ADDED FREEPOOL INSTRUCTIONS AFTER DCB CLOSE STATEMENTS SO     *\n*       THAT PDS CAN LINK TO THIS ROUTINE WITHOUT LOSING STORAGE.     *\n*    5. ADDED FREEMAIN INSTRUCTIONS FOR THE DYNAMIC AREA AND THE      *\n*       MEMBER STORAGE ARRAY.                                         *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n*     BURLINGAME, CA  94010                                           *\n*     (415) 696-1800                       HOME (408) 997-2366        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n*   THE PROGRAM IS SELF CONTAINED;  SIMPLY ASSEMBLE AND LINK          *\n*   AND ITS READY TO USE.                                             *\n*                                                                     *\n*   THE JCL NEEDED TO EXECUTE COMPAREB FOLLOWS:                       *\n*       1) //         EXEC PGM=COMPAREB,REGION=2000K,                 *\n*       2) //             PARM='SIZE=NNNN,TYPE=OPT1,PRINT=OPT2'       *\n*       3) //SYSPRINT DD  SYSOUT=*                                    *\n*       4) //NEW      DD  DSN=PDS1,DISP=SHR                           *\n*       5) //OLD      DD  DSN=PDS2,DISP=SHR                           *\n*       6) //IGNORE   DD  *      OPTIONAL                             *\n*                                                                     *\n*   WHERE    NNNN IS 3 OR 4 NUMERICS INDICATING AN ESTIMATE OF HOW    *\n*                 MANY MEMBERS EXIST IN THE PDS WITH THE MOST MEMBERS.*\n*                 THE DEFAULT VALUE IS 9999.  IF A VALUE OF LESS THAN *\n*                 100 IS SUPPLIED, THE PROGRAM WILL CHANGE THE VALUE  *\n*                 TO 100.  IF THERE ARE MORE MEMBERS THAN INDICATED   *\n*                 BY THE SIZE PARAMETER, THE PROGRAM MAY ABEND.       *\n*                                                                     *\n*            OPT1 IS EITHER 'FULL', 'ASM', OR NOT SPECIFIED (THE      *\n*                 DEFAULT). ACTUALLY, IF THE USER PROVIDES ANY VALUE  *\n*                 OTHER THAN 'FULL', OR 'ASM' THEN THE DEFAULT WILL BE*\n*                 ASSUMED.                                            *\n*                 -TYPE=FULL INDICATES THAT ALL 80 COLS OF THE CARD   *\n*                  IMAGE PDS WILL BE USED IN THE COMPARISON.          *\n*                 -TYPE=ASM INDICATES THAT COLS 1-72 OF THE CARD      *\n*                  IMAGE PDS WILL BE USED IN THE COMPARISON AND THE   *\n*                  DEFAULT IGNORE ASSEMBLER DATA WILL BE USED.        *\n*                 -IF NOT SPECIFIED ONLY COLS 1-72 WILL BE COMPARED,  *\n*                  AND NO DEFAULT IGNORE DATA WILL BE USED.           *\n*                                                                     *\n*            OPT2 IS 'MEM', 'DIR', OR 'NAME'; 'NAME' IS THE DEFAULT   *\n*                 VALUE.  PRINT=MEM INDICATES THAT IF ONE PDS CONTAINS*\n*                 A MEMBER, BUT THE OTHER PDS DOES NOT CONTAIN A MEMBER\n*                 WITH THE SAME NAME, THE  ENTIRE MEM WILL BE LISTED. *\n*                 PRINT=DIR INDICATES THAT THE COMPARISON OF MEMBERS  *\n*                 WON'T TAKE PLACE, BUT THE RECAP RPT WILL BE PRODUCED*\n*                 TO SHOW WHICH MEMBERS EXISTS IN EACH PDS.  PRINT=NAME\n*                 INDICATES THAT UNMATCHED MEMBERS WILL NOT BE PRINTED*\n*                 IN THEIR ENTIRITY, HOWEVER, THEY WILL BE FLAGGED AS *\n*                 UNMATCHED ON THE RECAP REPORT.                      *\n*                                                                     *\n*     THE 'NEW' AND 'OLD' DD STATEMENTS SHOULD BOTH POINT TO EITHER   *\n*     PDS DATASETS OR SEQUENTIAL DATASETS (OR A MEMBER OF A PDS). IF  *\n*     THE DATASET TYPES ARE MISMATCHED THEN THE COMPARISON TERMINATES *\n*     WITH A RETURN CODE OF 16.                                       *\n*                                                                     *\n*$DOC$*****************************************************************\n         EJECT                                                      BFG\n*          DATA SET CBT1274J   AT LEVEL 002 AS OF 07/20/83\n* CHANGED PARM DEFAULT FROM 1000 TO 9999     AXC-CBT\n*\n*   THIS IS AN ENHANCEMENT TO THE YALE COMPARE PROGRAM THAT IS\n*   DISTRIBTED AS FILE 226 ON THE CONN. BANK MODS TAPE.  THE PURPOSE\n*   OF THE ENHANCEMENT IS TO ALLOW THE COMPARE PROGRAM TO PROCESS\n*   TWO PDS FILES RATHER THAN TWO SEQUENTIAL FILES.  THE ORIGINAL\n*   PROGRAM HAS BEEN MODIFIED A LITTLE TO ACCOMODATE THE FRONT\n*   END PDS PROCESSOR.\n*\n*\n*\n*   THE OUTPUT OF THE PROGRAM CONSISTS OF A DETAILED LISTING AND A\n*   RECAP REPORT.  THE DETAILED LISTING SHOWS:\n*      - THE MEMBER NAME, DATA SET NAME, AND VOL/SER OF EACH MEMBER\n*        PROCESSED.\n*      - ANY DIFFERENCES THAT EXIST BETWEEN THE MEMBERS.\n*      - A COUNT OF UNEQUAL BLOCKS OF DATA AS WELL AS THE RECORD COUNTS\n*        FOR EACH MEMBER.\n*   THE RECAP LISTING FORMAT IS:\n*      OLD MEM=XXXXXXXX PAGE NNNN NEW MEM=YYYYYYYY STATUS\n*      THE STATUS MAY BE\n*          - EQUAL           BOTH MEMBERS ARE THE SAME\n*          - NOT EQUAL       THERE ARE DIFFERENCES\n*          - NO MATCH        THE MEMBER EXISTS IN ONLY ONE PDS\n*\n*   WE USE THE PROGRAM TO COMPARE PARMLIB, PROCLIBS, ETC. FROM ONE\n*   CPU TO ANOTHER AND ALSO AS AN AID WHEN INSTALLING NEW SCP RELEASES.\n*\n*   BRENT TOLMAN\n*   TRANSPORTAION MANAGEMENT SERVICES\n*   SALT LAKE CITY, UT\n*\n*\n*\n*\n          EJECT\n*$DOC$*****************************************************************\n*                                                                     *\n* COMPAREB - A MODIFIED VERSION OF THE YALE COMPARE PROGRAM.          *\n*                                                                     *\n* MODIFICATIONS AT AFDSC/PENTAGON:                                    *\n*  07MAY81 - BILL GODFREY, PLANNING RESEARCH CORP.                    *\n*   .  CHECK FOR 'IGNORE' DD WITH DEVTYPE AND BYPASS OPEN IF NOT      *\n*      FOUND, SO OPEN WILL NOT WTO 'DD STATEMENT MISSING'.            *\n*   .  NAME CHANGED TO 'COMPAREB' (SAVING NAME 'COMPARE' FOR A TSO    *\n*      COMMAND WHICH WILL INVOKE THIS PROGRAM).                       *\n*   .  ACCEPT ALTERNATE DDNAMES FROM INVOKER.                         *\n*      DDNAMES ARE IN SAME SLOTS AS IBM UTILITIES.                    *\n*   .  USE R11 AS BASE REGISTER INSTEAD OF R13                        *\n*   .  CONVERT PARM TO CAPS.                                          *\n*   .  CHANGE SYSPRINT LRECL FROM 109 TO 121                          *\n*   .  TEST ALL DCB'S FOR SUCCESSFUL OPEN                             *\n*  09JUN81 - BILL GODFREY                                             *\n*   .  PROGRAM CHANGED TO ALLOW RECORDS LONGER THAN 80 BYTES TO       *\n*      BE COMPARED.  A GOOD WAY TO COMPARE LOAD MODULES IS TO         *\n*      COMPARE HEX DUMPS OF THEM. NOW THIS PROGRAM CAN COMPARE        *\n*      PRINT FILES (IF THEY ARE FIXED LENGTH RECORDS).                *\n*   .  CHANGE ALL BAL-R10 INSTRUCTIONS TO USE BAL-R14 INSTEAD,        *\n*      (AND SAVE R14) SO WE CAN USE R10 FOR ANOTHER PURPOSE.          *\n*   .  PUT THE RECORD LENGTH IN R10.                                  *\n*   .  CHANGE ALL INSTRUCTIONS THAT USE THE RECORD LENGTH (80)        *\n*      OR 2 RECORD LENGTHS (160) TO USE THE VALUE IN REGISTER R10     *\n*      INSTEAD, SO THE PROGRAM CAN COMPARE MORE THAN 80 BYTES.        *\n*   .  CHANGE MLENGTH FIELD TO A HALFWORD AND USE IT TO HOLD          *\n*      A ZERO OR AN EIGHT INSTEAD OF A 79 OR 71.                      *\n*   .  FIX S0C9 IN DCB OPEN EXIT, DIVIDING BY LRECL ZERO WHEN         *\n*      RECFM IS UNBLOCKED.                                            *\n*   .  PROGRAM WILL NO LONGER USE DEFAULT IGNORE DATA (FOR ASSEMBLER  *\n*      SOURCE) UNLESS PARM=ASM IS SPECIFIED.                          *\n*   .  FIX PARM FIELD BUG INTRODUCED 07MAY81, PARM=FULL WAS NEVER     *\n*      RECOGNIZED AFTER THAT CHANGE.                                  *\n*   .  CHECK PARM FIELD FOR 'FULL' OR 'ASM' ANYWHERE IN FIRST 16      *\n*      BYTES.                                                         *\n*  16JUN81 - BILL GODFREY                                             *\n*   .  FIX PARM DD BUG INTRODUCED 09JUN81.                            *\n*      R1 WAS DESTROYED PRIOR TO PARMX. USE R4 INSTEAD OF R1.         *\n*   .  CHANGE R10 TO 256 IF LRECL GREATER THAN 256.                   *\n*                                                                     *\n*   NOTE: THIS PROGRAM WORKS CORRECTLY ONLY ON FIXED LENGTH RECORDS   *\n*   FROM 80 TO 256 BYTES LONG. ONLY THE FIRST 80 BYTES OF A RECORD    *\n*   ARE LISTED. NO WARNING MESSAGE IS ISSUED FOR RECORDS LONGER THAN  *\n*   256 OR VARIABLE LENGTH.  ** NO LONGER APPLICABLE -- GP MAR 92 **  *\n*                                                                     *\n*  21NOV91 - GREG PRICE (GP@P6)                                       *\n*   .  HANDLE LRECL LESS THAN 80                                      *\n*      - NEVER MOVE MORE THAN LRECL BYTES TO PRINT LINE BUFFER        *\n*      - FORCE 'FULL' IF LRECL IS NOT GREATER THAN 8                  *\n*  30MAR92 - GREG PRICE (GP)                                          *\n*   .  CORRECTLY DETECT TYPE=ASM, DO NOT CORRUPT PARM LENGTH REG R2   *\n*   .  ADD ROUTCDE=(11) TO ALL WTOS EXCEPT ONE WHICH ALREADY HAD IT   *\n*   .  PUT TIME AND JULIAN DATE IN PAGE HEADING LINE                  *\n*   .  COMPARE WHOLE RECORD EVEN IF MORE THAN 256 BYTES LONG          *\n*   .  HANDLE UNDEFINED AND VARIABLE LENGTH RECORDS                   *\n*  12OCT92 - GREG PRICE (GP@FT)                                       *\n*   .  AVOID S0C4 BY SKIPPING IGNORE TEST IF NOT FIXED LENGTH RECORDS *\n*  12JUN93 - BRUCE LELAND AS SUGGESTED BY GREG PRICE                  *\n*   .        MADE CHANGES TO GETMAIN A VARIABLE AMOUNT OF             *\n*   .        STORAGE BETWEEN 100K AND 2000K; THEN FREEMAIN 16K        *\n*   .        (PREVIOUSLY BETWEEN 80K AND 800K; THEN FREEMAIN 4K)      *\n*                                                                     *\n*$DOC$*****************************************************************\n         EJECT\n         TITLE 'PDS/SEQ COMPARE PROGRAM -- USE YALE COMPARE PGM LOGIC'\n*$DOC$*****************************************************************\n*                                                                     *\n*   THIS IS AN ENHANCEMENT (COMBINATION) OF TWO FLAVORS OF THE YALE   *\n*   COMPARE PROGRAM. THE FIRST WAS TAKEN FROM FILE 45 OF THE CBT      *\n*   TAPE AND WAS MODIFIED FROM THE ORIGINAL BY MR. BRENT TOLMAN.      *\n*   THE SECOND SOURCE IS THE VERSION FROM FILE 300 OF THE CBT TAPE    *\n*   AND WAS MODIFIED BY MR. BILL GODFREY AND MR. JIM MARSHALL         *\n*   ADDITIONAL CODE FROM THE VERSION FROM FILE 296 OF THE CBT TAPE    *\n*   HAS BEEN ADDED TO ALLOW THIS VERSION TO ALSO FUNCTION UNDER       *\n*   THE PDS COMMAND. FILE 296 IS FROM MR. BRUCE LELAND                *\n*                                                                     *\n*   THE INTEND OF THIS COMBINATION IS TO PRODUCE A VERSION THAT       *\n*   CAN COMPARE EITHER TWO ENTIRE PDS'S, OR TWO SEQUENTIAL FILES.     *\n*   IT IS ALSO DESIRED THAT IT CAN BE INVOKED BY THE 'COMPARE'        *\n*   TSO COMMAND WRITTEN BY MR. BILL GODFREY.                          *\n*                                                                     *\n*                                                                     *\n*   THE FEATURES IN THIS PROGRAM ARE:                                 *\n*    1. USES THE YALE COMPARE PROGRAM LOGIC FOR COMPARING AND RESYNC- *\n*       RONIZATRION.                                                  *\n*    2. SUPPORTS COMPARES OF FULL PDS DATASETS (DON'T SPECIFY A       *\n*       MEMBER NAME TO USE THIS FEATURE).                             *\n*    3. SUPPORTS COMPARES OF TWO SEQUENTIAL DATASETS (EITHER REAL     *\n*       SEQUENTIAL DATASETS OR MEMBERS SPECIFIED IN JCL).             *\n*    4. SUPPORTS RECORD SIZES DIFFERENT FROM 80 BYTES BUT LESS THAN   *\n*       256 BYTES (NOTE IGNORE CARDS MUST BE 80 BYTES LONG) -SEE BELOW*\n*    5. CAN BE INVOKED WITH A DDNAME PARAMETER LIST FROM THE          *\n*       'COMPARE' TSO COMMAND (MODIFIED FROM CBT FILE 300).           *\n*    6. ALSO ENCLOSED IS THE NECESSARY PANEL, CLIST, AND SKELETON     *\n*       TO INVOKE IT UNDER ISPF                                       *\n*    7. CODE FROM MR. BRUCE LELAND TO SUPPORT THE PDS COMMAND HAS     *\n*       ALSO BEEN IMPLEMENTED.                                        *\n*                                                                     *\n*   GUY L. ALBERTELLI                                                 *\n*   B. F. GOODRICH                                                    *\n*   3925 EMBASSY PARKWAY                                              *\n*   AKRON, OHIO  44313                                                *\n*       216-374-4071                                                  *\n*                                                                     *\n*                                                                     *\n*   SEVERAL CHANGES WERE MADE TO THIS PROGRAM ON 6/10/88 TO BETTER    *\n*   SUPPORT ITS USE FROM THE PDS COMMAND PROCESSOR:                   *\n*    1. CHANGES WERE MADE TO ALLOW PDS CHECKPOINT PROCESSING TO       *\n*       TERMINATE THE COMPARISON.                                     *\n*    2. ADDED CODE TO SUPPRESS PAGES CONTAINING ONLY HEADER           *\n*       INFORMATION FOR MEMBERS THAT COMPARE AS EQUAL.                *\n*    3. ADDED CODE TO SUPPRESS OUTPUT LINES IN THE RECAP REPORT       *\n*       FOR MEMBERS THAT COMPARE AS EQUAL.                            *\n*    4. ADDED FREEPOOL INSTRUCTIONS AFTER DCB CLOSE STATEMENTS SO     *\n*       THAT PDS CAN LINK TO THIS ROUTINE WITHOUT LOSING STORAGE.     *\n*    5. ADDED FREEMAIN INSTRUCTIONS FOR THE DYNAMIC AREA AND THE      *\n*       MEMBER STORAGE ARRAY.                                         *\n*                                                                     *\n*   A. BRUCE LELAND                                                   *\n*   HITACHI AMERICA LTD.                                              *\n*   2210 O'TOOLE AVENUE                                               *\n*   SAN JOSE, CAL.  95131                                             *\n*       408-435-2078                                                  *\n*                                                                     *\n*                                                                     *\n*   THE PROGRAM IS SELF CONTAINED;  SIMPLY ASSEMBLE AND LINK          *\n*   AND ITS READY TO USE.                                             *\n*                                                                     *\n*   THE JCL NEEDED TO EXECUTE COMPAREB FOLLOWS:                       *\n*       1) //         EXEC PGM=COMPAREB,REGION=2000K,                 *\n*       2) //             PARM='SIZE=NNNN,TYPE=OPT1,PRINT=OPT2'       *\n*       3) //SYSPRINT DD  SYSOUT=*                                    *\n*       4) //NEW      DD  DSN=PDS1,DISP=SHR                           *\n*       5) //OLD      DD  DSN=PDS2,DISP=SHR                           *\n*       6) //IGNORE   DD  *      OPTIONAL                             *\n*                                                                     *\n*   WHERE    NNNN IS 3 OR 4 NUMERICS INDICATING AN ESTIMATE OF HOW    *\n*                 MANY MEMBERS EXIST IN THE PDS WITH THE MOST MEMBERS.*\n*                 THE DEFAULT VALUE IS 9999.  IF A VALUE OF LESS THAN *\n*                 100 IS SUPPLIED, THE PROGRAM WILL CHANGE THE VALUE  *\n*                 TO 100.  IF THERE ARE MORE MEMBERS THAN INDICATED   *\n*                 BY THE SIZE PARAMETER, THE PROGRAM MAY ABEND.       *\n*                                                                     *\n*            OPT1 IS EITHER 'FULL', 'ASM', OR NOT SPECIFIED (THE      *\n*                 DEFAULT). ACTUALLY, IF THE USER PROVIDES ANY VALUE  *\n*                 OTHER THAN 'FULL', OR 'ASM' THEN THE DEFAULT WILL BE*\n*                 ASSUMED.                                            *\n*                 -TYPE=FULL INDICATES THAT ALL 80 COLS OF THE CARD   *\n*                  IMAGE PDS WILL BE USED IN THE COMPARISON.          *\n*                 -TYPE=ASM INDICATES THAT COLS 1-72 OF THE CARD      *\n*                  IMAGE PDS WILL BE USED IN THE COMPARISON AND THE   *\n*                  DEFAULT IGNORE ASSEMBLER DATA WILL BE USED.        *\n*                 -IF NOT SPECIFIED ONLY COLS 1-72 WILL BE COMPARED,  *\n*                  AND NO DEFAULT IGNORE DATA WILL BE USED.           *\n*                                                                     *\n*            OPT2 IS 'MEM', 'DIR', OR 'NAME'; 'NAME' IS THE DEFAULT   *\n*                 VALUE.  PRINT=MEM INDICATES THAT IF ONE PDS CONTAINS*\n*                 A MEMBER, BUT THE OTHER PDS DOES NOT CONTAIN A MEMBER\n*                 WITH THE SAME NAME, THE  ENTIRE MEM WILL BE LISTED. *\n*                 PRINT=DIR INDICATES THAT THE COMPARISON OF MEMBERS  *\n*                 WON'T TAKE PLACE, BUT THE RECAP RPT WILL BE PRODUCED*\n*                 TO SHOW WHICH MEMBERS EXISTS IN EACH PDS.  PRINT=NAME\n*                 INDICATES THAT UNMATCHED MEMBERS WILL NOT BE PRINTED*\n*                 IN THEIR ENTIRITY, HOWEVER, THEY WILL BE FLAGGED AS *\n*                 UNMATCHED ON THE RECAP REPORT.                      *\n*                                                                     *\n*     THE 'NEW' AND 'OLD' DD STATEMENTS SHOULD BOTH POINT TO EITHER   *\n*     PDS DATASETS OR SEQUENTIAL DATASETS (OR A MEMBER OF A PDS). IF  *\n*     THE DATASET TYPES ARE MISMATCHED THEN THE COMPARISON TERMINATES *\n*     WITH A RETURN CODE OF 16.                                       *\n*                                                                     *\n*$DOC$*****************************************************************\n         EJECT                                                      BFG\n*          DATA SET CBT1274J   AT LEVEL 002 AS OF 07/20/83\n* CHANGED PARM DEFAULT FROM 1000 TO 9999     AXC-CBT\n*\n*   THIS IS AN ENHANCEMENT TO THE YALE COMPARE PROGRAM THAT IS\n*   DISTRIBTED AS FILE 226 ON THE CONN. BANK MODS TAPE.  THE PURPOSE\n*   OF THE ENHANCEMENT IS TO ALLOW THE COMPARE PROGRAM TO PROCESS\n*   TWO PDS FILES RATHER THAN TWO SEQUENTIAL FILES.  THE ORIGINAL\n*   PROGRAM HAS BEEN MODIFIED A LITTLE TO ACCOMODATE THE FRONT\n*   END PDS PROCESSOR.\n*\n*\n*\n*   THE OUTPUT OF THE PROGRAM CONSISTS OF A DETAILED LISTING AND A\n*   RECAP REPORT.  THE DETAILED LISTING SHOWS:\n*      - THE MEMBER NAME, DATA SET NAME, AND VOL/SER OF EACH MEMBER\n*        PROCESSED.\n*      - ANY DIFFERENCES THAT EXIST BETWEEN THE MEMBERS.\n*      - A COUNT OF UNEQUAL BLOCKS OF DATA AS WELL AS THE RECORD COUNTS\n*        FOR EACH MEMBER.\n*   THE RECAP LISTING FORMAT IS:\n*      OLD MEM=XXXXXXXX PAGE NNNN NEW MEM=YYYYYYYY STATUS\n*      THE STATUS MAY BE\n*          - EQUAL           BOTH MEMBERS ARE THE SAME\n*          - NOT EQUAL       THERE ARE DIFFERENCES\n*          - NO MATCH        THE MEMBER EXISTS IN ONLY ONE PDS\n*\n*   WE USE THE PROGRAM TO COMPARE PARMLIB, PROCLIBS, ETC. FROM ONE\n*   CPU TO ANOTHER AND ALSO AS AN AID WHEN INSTALLING NEW SCP RELEASES.\n*\n*   BRENT TOLMAN\n*   TRANSPORTAION MANAGEMENT SERVICES\n*   SALT LAKE CITY, UT\n*\n*\n*\n*\n          EJECT\n*$DOC$*****************************************************************\n*                                                                     *\n* COMPAREB - A MODIFIED VERSION OF THE YALE COMPARE PROGRAM.          *\n*                                                                     *\n* MODIFICATIONS AT AFDSC/PENTAGON:                                    *\n*  07MAY81 - BILL GODFREY, PLANNING RESEARCH CORP.                    *\n*   .  CHECK FOR 'IGNORE' DD WITH DEVTYPE AND BYPASS OPEN IF NOT      *\n*      FOUND, SO OPEN WILL NOT WTO 'DD STATEMENT MISSING'.            *\n*   .  NAME CHANGED TO 'COMPAREB' (SAVING NAME 'COMPARE' FOR A TSO    *\n*      COMMAND WHICH WILL INVOKE THIS PROGRAM).                       *\n*   .  ACCEPT ALTERNATE DDNAMES FROM INVOKER.                         *\n*      DDNAMES ARE IN SAME SLOTS AS IBM UTILITIES.                    *\n*   .  USE R11 AS BASE REGISTER INSTEAD OF R13                        *\n*   .  CONVERT PARM TO CAPS.                                          *\n*   .  CHANGE SYSPRINT LRECL FROM 109 TO 121                          *\n*   .  TEST ALL DCB'S FOR SUCCESSFUL OPEN                             *\n*  09JUN81 - BILL GODFREY                                             *\n*   .  PROGRAM CHANGED TO ALLOW RECORDS LONGER THAN 80 BYTES TO       *\n*      BE COMPARED.  A GOOD WAY TO COMPARE LOAD MODULES IS TO         *\n*      COMPARE HEX DUMPS OF THEM. NOW THIS PROGRAM CAN COMPARE        *\n*      PRINT FILES (IF THEY ARE FIXED LENGTH RECORDS).                *\n*   .  CHANGE ALL BAL-R10 INSTRUCTIONS TO USE BAL-R14 INSTEAD,        *\n*      (AND SAVE R14) SO WE CAN USE R10 FOR ANOTHER PURPOSE.          *\n*   .  PUT THE RECORD LENGTH IN R10.                                  *\n*   .  CHANGE ALL INSTRUCTIONS THAT USE THE RECORD LENGTH (80)        *\n*      OR 2 RECORD LENGTHS (160) TO USE THE VALUE IN REGISTER R10     *\n*      INSTEAD, SO THE PROGRAM CAN COMPARE MORE THAN 80 BYTES.        *\n*   .  CHANGE MLENGTH FIELD TO A HALFWORD AND USE IT TO HOLD          *\n*      A ZERO OR AN EIGHT INSTEAD OF A 79 OR 71.                      *\n*   .  FIX S0C9 IN DCB OPEN EXIT, DIVIDING BY LRECL ZERO WHEN         *\n*      RECFM IS UNBLOCKED.                                            *\n*   .  PROGRAM WILL NO LONGER USE DEFAULT IGNORE DATA (FOR ASSEMBLER  *\n*      SOURCE) UNLESS PARM=ASM IS SPECIFIED.                          *\n*   .  FIX PARM FIELD BUG INTRODUCED 07MAY81, PARM=FULL WAS NEVER     *\n*      RECOGNIZED AFTER THAT CHANGE.                                  *\n*   .  CHECK PARM FIELD FOR 'FULL' OR 'ASM' ANYWHERE IN FIRST 16      *\n*      BYTES.                                                         *\n*  16JUN81 - BILL GODFREY                                             *\n*   .  FIX PARM DD BUG INTRODUCED 09JUN81.                            *\n*      R1 WAS DESTROYED PRIOR TO PARMX. USE R4 INSTEAD OF R1.         *\n*   .  CHANGE R10 TO 256 IF LRECL GREATER THAN 256.                   *\n*                                                                     *\n*   NOTE: THIS PROGRAM WORKS CORRECTLY ONLY ON FIXED LENGTH RECORDS   *\n*   FROM 80 TO 256 BYTES LONG. ONLY THE FIRST 80 BYTES OF A RECORD    *\n*   ARE LISTED. NO WARNING MESSAGE IS ISSUED FOR RECORDS LONGER THAN  *\n*   256 OR VARIABLE LENGTH.  ** NO LONGER APPLICABLE -- GP MAR 92 **  *\n*                                                                     *\n*  21NOV91 - GREG PRICE (GP@P6)                                       *\n*   .  HANDLE LRECL LESS THAN 80                                      *\n*      - NEVER MOVE MORE THAN LRECL BYTES TO PRINT LINE BUFFER        *\n*      - FORCE 'FULL' IF LRECL IS NOT GREATER THAN 8                  *\n*  30MAR92 - GREG PRICE (GP)                                          *\n*   .  CORRECTLY DETECT TYPE=ASM, DO NOT CORRUPT PARM LENGTH REG R2   *\n*   .  ADD ROUTCDE=(11) TO ALL WTOS EXCEPT ONE WHICH ALREADY HAD IT   *\n*   .  PUT TIME AND JULIAN DATE IN PAGE HEADING LINE                  *\n*   .  COMPARE WHOLE RECORD EVEN IF MORE THAN 256 BYTES LONG          *\n*   .  HANDLE UNDEFINED AND VARIABLE LENGTH RECORDS                   *\n*  12OCT92 - GREG PRICE (GP@FT)                                       *\n*   .  AVOID S0C4 BY SKIPPING IGNORE TEST IF NOT FIXED LENGTH RECORDS *\n*  12JUN93 - BRUCE LELAND AS SUGGESTED BY GREG PRICE                  *\n*   .  MADE CHANGES TO GETMAIN A VARIABLE AMOUNT OF                   *\n*      STORAGE BETWEEN 100K AND 2000K; THEN FREEMAIN 16K              *\n*      (PREVIOUSLY BETWEEN 80K AND 800K; THEN FREEMAIN 4K)            *\n*  10MAY96 - GREG PRICE (-GP)                                         *\n*   .  TRANSLATE UNPRINTABLES OUT OF SYSPRINT WHEN GOING TO TSO       *\n*      TERMINAL TO AVOID PROG753 WITH PC/3270 FOR WINDOWS.            *\n*                                                                     *\n*$DOC$*****************************************************************\n         EJECT\nCOMPAREB CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         STM   R14,R12,12(R13)     SAVE THEIR REGS IN THEIR AREA\n         LR    R11,R15             LOAD BASE REG WITH ENTRY ADDR\n         LA    R6,4095(,R11)       LOAD SECOND BASE\n         LA    R6,1(,R6)           WITH PROPER ADDRESS\n         LA    R7,4095(,R6)        LOAD THIRD BASE\n         LA    R7,1(,R7)           WITH PROPER ADDRESS\n         USING COMPAREB,R11,R6,R7  ESTABLISH ADDRESSABILITY\n         ST    R7,SAVER07          MAKE SURE ADDRESS READY FOR RELOAD\n*  R7 IS USED LATER AT LABEL NUMB.  MAKE SURE IT'S RELOADED FROM\n*   STORAGE PLACE SAVER07 AFTER ALL BRANCHES FROM THE NUMB ROUTINE.\n         B     PDSLINK             NOW GO LINK SAVE AREAS\n         SPACE\nPDSPGM   DC    CL8'COMPAREB'       PROGRAM NAME\n         DC    CL1' '\nPDSDATE  DC    CL8'&SYSDATE'       SYSTEM DATE OF ASSEMBLY\n         DC    CL1' '\nPDSTIME  DC    CL5'&SYSTIME'       SYSTEM TIME OF ASSEMBLY\n         DC    CL1' '\n         SPACE 2\nPDSSAVE  DC    9D'0'               SAVE AREA FOR COMPAREB\nRETCODE  DC    F'0'                RETURN CODE\nRETURN   L     R15,RETCODE         GET RETURN CODE\n         L     R13,PDSSAVE+4       GET ADD OF THEIR SAVE AREA\n         L     R14,12(,R13)        RESTORE RETURN ADDRESS\n         LM    R0,R12,20(R13)      RESTORE R0 THRU R12\n         BR    R14                 RETURN TO CALLER\n         SPACE 2\nPDSLINK  LA    R14,PDSSAVE         GET ADDR OF OUR SAVE AREA\n         ST    R14,8(,R13)         SAVE OUR ADDR IN THEIR AREA\n         ST    R13,4(,R14)         SAVE THEIR ADDR IN OUR AREA\n         LR    R13,R14             POINT R13 TO OUR AREA NOW\n         EJECT\n* PARM\n*        R1 - SCP POINTER TO PARM AT ENTRY\n*        R2 - PARM LENGTH\n*        R3 - POINTER TO PARM DATA WHILE EVALUATING\n*        R4 - POINTER TO PARM VALUE SAVE AREAS\n*        R5 - LOOP CONTROL AND SAVE AREA POINTER\n*\n*        BAL   R12,NUMB  - CONVERT VALUE TO BINARY\n*        B     GETM\n***********************************************************************\n         ST    R1,ORIGPARM          SAVE INPUT PARMS                BFG\n         L     R1,0(,R1)           POINT TO PARM AREA\n         LH    R2,0(,R1)           GET LENGTH IN R2\n         STM   R1,R2,PARMVALS      SAVE ADDR AND LEN\n         LTR   R2,R2               IS THERE A PARM FROM USER?\n         BZ    PARMEND             NO  -- TAKE DEFAULTS\n         SPACE\n         LA    R3,1(,R1)           IN LOOP R3 POINTS TO DATA\n         LA    R2,1(,R2)           ADJUST LEN FOR 1ST PASS\nPARM2    EQU   *                   EVALUATE NEXT KEYWORD\n         L     R7,SAVER07          MAKE SURE BASE IS LOADED\n         LTR   R2,R2               IS THERE SOME LENGTH LEFT?\n         BNP   PARMEND             NO  -- EVALUATION COMPLETE\n         LA    R3,1(,R3)           POINT TO START OF KEYWORD\n         BCT   R2,PARM2B           REDUCE LEN - BRANCH AT END\n         B     PARMEND\nPARM2B   EQU   *                   DETERMINE WHICH KEYWORD NOW\n         L     R7,SAVER07          MAKE SURE BASE IS LOADED\n         CLC   =C'TYPE=',0(R3)     LIBRARY TYPE SPECIFICATION?    PAN\n         BE    PARM5                                              PAN\n         CLC   =C'PRINT=',0(R3)    RANGE SPECIFICATION?\n         BE    PARM6               YES\n         CLC   =C'SIZE=',0(R3)     SIZE OF PDS?\n         BE    PARM8\n         SPACE\nPARM2D   EQU   *                   INVALID PARAMETER\n         L     R7,SAVER07          MAKE SURE BASE IS LOADED\n         WTO   'INVALID PARM VALUE SPECIFIED -- PROCESSING TERMINATED',X\n               ROUTCDE=(11)                                         GP\n         MVC   RETCODE,=F'16'      SET RETURN CODE TO 16\n         B     RETURN              RETURN TO SCP\n         SPACE\nPARM5    EQU   *                   LIBRARY TYPE ANALYSIS\n         LA    R3,5(,R3)           POINT PAST KEYWORD\n         SH    R2,=H'5'            KEEP REMAINING LEN ACCURATE\n         MVC   PARMTYPE,=F'0'      INITIALIZE SAVE AREA\n         LA    R4,PARMTYPE         POINT TO SAVE AREA\n         BAL   R12,PARM10          GO GET USER VAUE\n         CLC   =C'FULL',PARMTYPE   DID USER SPECIFY FULL COMPARE?   GP\n         BNE   PARM5A              NO  -- CHECK FOR ASSEMBLER\n         MVI   MLENGTH+1,0         YES, CHANGE 8 TO ZERO\n         B     PARM2               NO FURTHER EVALUATION\nPARM5A   CLC   =C'ASM',PARMTYPE    DID USER SPECIFY ASSEMBLER??  GP BFG\n         BNE   PARM2               NO SO IGNORE                     BFG\n         LA    R0,ENDDFTIG     GP  YES, POINT TO END OF DEFAULT DATABFG\n         ST    R0,IGASMS+4     GP  STORE ENDING ADDRESS             BFG\n         B     PARM2                KEEP LOOKING                    BFG\n         SPACE 2                                                    BFG\nPARM6    EQU   *                   RANGE PROCESSING\n         LA    R3,6(,R3)           POINT PAST KEYWORD\n         SH    R2,=H'6'            KEEP LEN CORRECT\n         LA    R4,PARMPRNT         POINT TO FIRST SAVE AREA\n         BAL   R12,PARM10          GO GET USER VALUE\n         CLC   PARMPRNT(3),=C'MEM' DID USER SAY TO PRINT ENTIRE MEMBER?\n         BE    PARM6H              YES\n         CLC   PARMPRNT(3),=C'DIR' DID USER SAY TO PRINT DIRECTRY ONLY?\n         BE    PARM6H              YES\n         MVC   PARMPRNT,=C'NAME'   NO -- SET TO NAME ONLY\nPARM6H   EQU   *                   EVALUATE\n         B     PARM2               GO GET NEXT KEYWORD\n         SPACE 2\nPARM8    EQU   *                   SIZE SPECIFICATION\n         LA    R3,5(,R3)           POINT TO VALUE\n         SH    R2,=H'5'            CORRECT REMAINING LEN\n         MVC   PARMSIZE,=F'0'      INITIALIZE SAVE AREA\n         LA    R4,PARMSIZE         POINT TO SAVE AREA\n         BAL   R12,PARM10          GO GET USER VALUE\nPARM8D   EQU   *                   EVALUALTE\n         LA    R5,PARMSIZE+3       POINT TO END OF SAVE AREA\n         BAL   R12,NUMB            CONVERT VAUE TO BINARY\n         CLC   PARMSIZE,=F'100'    LESS THAN 100 MEMBERS?\n         BH    PARM8F              NO  -- OK\n         MVC   PARMSIZE,=F'100'    PUT IN MINIMUM VALUE\nPARM8F   EQU   *\n         B     PARM2               AND RETURN\n         SPACE 2\nPARM10   EQU   *                   ISSOLATE VALUE SUPPLIED BY USER\n         LA    R5,5                MAX OF FOUR CHAR + DLM ALLOWED\nPARM10B  EQU   *                   MOVE VALUE TO SAVE AREA\n         CLC   0(1,R3),PARMDLM     DELIMITING VALUE?\n         BE    0(,R12)             YES -- WE NOW HAVE THE VALUE\n         MVC   0(1,R4),0(R3)       MOVE ONE CHAR FROM PARM TO SAVE ARE\n         LA    R4,1(,R4)           BUMP POINTER TO SAVE AREA\n         LA    R3,1(,R3)           UPDATE PARM DATA POINTER\n         BCT   R2,PARM10D          REDUCE REMAINING LEN\n         BR    R12                 RETURN TO CALLER IF EXHAUSTED\nPARM10D  EQU   *\n         BCT   R5,PARM10B          LOOP TIL VALUE IS DONE\n         B     PARM2D              MORE THAN FOUR CHARS IN VALUE\n         SPACE 2\nPARMEND  EQU   *                                                  PAN\n         SPACE\n*                                                                   BFG\n**       HANDLE DDNAMES PASSED AS INPUT                             BFG\n*                                                                   BFG\n         L     R1,ORIGPARM          SAVE INPUT PARMS                BFG\n         TM    0(R1),X'80'         ONLY 1 PARAMETER\n         BO    NODD                YES, BYPASS DD ROUTINE\n         L     R2,4(,R1)           POINT TO DDNAME LIST\n         LH    R1,0(,R2)           GET LENGTH OF DDNAME LIST\n         LA    R2,2(,R2)           POINT PAST LENGTH\n         SPACE\n         CH    R1,=H'40'           LONG ENOUGH FOR SYSIN\n         BL    NODD                NO, BRANCH\n         CLI   32(R2),0            SYSIN OVERRIDE\n         BE    NWDD1               NO, SKIP MVC\n         MVC   IGNORE+DDNAM(8),32(R2)\n         SPACE\nNWDD1    CH    R1,=H'48'           LONG ENOUGH FOR SYSPRINT\n         BL    NODD                NO, BRANCH\n         CLI   40(R2),0            SYSPRINT OVERRIDE\n         BE    NWDD2               NO, SKIP MVC\n         MVC   SYSPRINT+DDNAM(8),40(R2)\n         SPACE\nNWDD2    DS    0H                                                   GLA\n         CH    R1,=H'56'           LONG ENOUGH FOR ECHO         ABL GLA\n         BL    NODD                NO, BRANCH                   ABL GLA\n         CLI   48(R2),0            REENTRY OVERRIDE             ABL GLA\n         BE    NWDD2A              NO, SKIP MVC                 ABL GLA\n         MVC   PVECTOR(4),48(R2)   YES, SAVE THE REENTRY VECTOR ABL GLA\n         SPACE\nNWDD2A   CH    R1,=H'64'           LONG ENOUGH FOR SYSUT1\n         BL    NODD                NO, BRANCH\n         CLI   56(R2),0            SYSUT1 OVERRIDE\n         BE    NWDD3               NO, SKIP MVC\n         MVC   OLDDCB+DDNAM(8),56(R2)\n         MVC   OLDDIR+DDNAM(8),56(R2)\n         SPACE\nNWDD3    CH    R1,=H'72'           LONG ENOUGH FOR SYSUT2\n         BL    NODD                NO, BRANCH\n         CLI   64(R2),0            SYSUT2 OVERRIDE\n         BE    NODD                NO, SKIP MVC\n         MVC   NEWDCB+DDNAM(8),64(R2)\n         MVC   NEWDIR+DDNAM(8),64(R2)\nNODD     EQU   *\n         B     GETM                GET STORAGE FOR WORK AREAS AND TBLS\n         EJECT\nNUMB     EQU   *                   CONVERT PARM VALUE TO BINARY\n         ST    R7,SAVER07          SAVE 3RD BASE REG VALUE\n* NUMB\n*        R5 - PARM SAVE AREA POINTER AT ENTRY\n*        R9 - LOOP CONTROL\n*        R7    WORK AREA POINTER    (THIRD BASE - SAVE OFF)\n*        R8 - PARM VALUE SAVE ARA POINTER\n*\n*        RETURN WITH BR R12\n***********************************************************************\n         SPACE 2\n         LR    R8,R5               SAVE POINTER TO END OF SAVE ARA\n         SH    R8,=H'3'            POINT TO START OF SAVE AREA\n         LA    R7,FULL+3           POINT TO END OF WORK AREA\n         LA    R9,4                MAX NUMBER OF TIMES THRU LOOP\n         MVC   FULL,=C'0000'       INITIALIZE WORK AREAA\nNUMB2    EQU   *                   MOVE DATA TO WORK AREA(RIGHT JUSTIFY\n         CLI   0(R5),X'00'         DATA CHAR?\n         BE    NUMB2D              NO  -- SKIP TO NEXT COL\n         CLI   0(R5),C'0'          LESS THAN ZERO?\n         BL    PARM2D              YES -- ERROR\n         CLI   0(R5),C'9'          GREATERTHAN NINE\n         BH    PARM2D              YES -- ERROR\n         MVC   0(1,R7),0(R5)       MOVE ONE DATA CHAR\n         BCTR  R7,0                BACKUP WORK AREA POINTER\nNUMB2D   EQU   *\n         BCTR  R5,0                BACKUP SAVE AREA POINTER\n         BCT   R9,NUMB2            CHECK FOUR COLS\n         SPACE\n         PACK  DOUBLE,FULL         CONVERT FROM CHAR TO DECIMAL\n         CVB   R7,DOUBLE           CONVERT DECIMAL TO BINARY\n         ST    R7,0(,R8)           SAVE BINARY VALUE\n         L     R7,SAVER07          RELOAD 3RD BASE REG VALUE\n         BR    R12                 RETURN TO CALLER\n         EJECT\nGETM     EQU   *                   OBTAIN STORAGE\n* 1 12 BYTE ENTRY NEEDED FOR EACH NEW MEMBER\n*           (8 BYTE MEMBER NAME, 2 BYTE PAGE NUMBER, 2 BYTE FLAGS)\n*\n* 1 12 BYTE ENTRY NEEDED FOR EACH OLD MEMBER\n*           (SAME AS NEW ENTRY)\n*\n*\n* GETM\n*        R2 - PARMSIZE VALUE (ESTIMATED NUMBER OF MEMS)\n*        R3 - GOTTEN STORAGE POINTER\n*\n*        B     NDIR\n***********************************************************************\n         SPACE 2\n         L     R2,PARMSIZE         GET BINARY NUMBER OF MEMBERS\nGETM2    EQU   *                   GET STORAGE FOR NEW OLD AND SEQ\n         MH    R2,=H'24'           12 BYTES FOR NEW - 12 BYTES FOR OLD\nGETM2D   EQU   *                   REQUEST STORAGE\n         GETMAIN EC,LV=(R2),A=NMEM\n         LTR   R15,R15             WAS STORAGE AVAILABLE?\n         BZ    GETM4               YES -- CONTINUE\n         WTO   'GETMAIN FAILURE -- RUN IN LARGER REGION',              X\n               ROUTCDE=(11)                                         GP\n         MVC   RETCODE,=F'16'      SET RETURN CODE TO U6\n         B     RETURN              RETURN TO SCP\n         SPACE 3\nGETM4    EQU   *                   DIVIDE STORAGE UP\n         L     R3,PARMSIZE         NUMBER OF ESTIMATED MEMBERS\n         MH    R3,=H'12'           12 BYTES PER MEMBER IN EACH LIST\n         L     R4,NMEM             ADDRESS OF OBTAINED STORAGE\n         AR    R4,R3               END OF FIRST LIST\n         ST    R4,OMEM             START ADDR OF OLD MEMBER LIST\n         EJECT\n         TIME  DEC                 PUT TIMESTAMP IN PAGE HEADER     GP*\n         SRL   R0,8                SHIFT OUT FRACTIONS OF SECOND      *\n         STM   R0,R1,DOUBLE        STORE TIME AND DATE                *\n         AP    DOUBLE,=PL4'1900000' GET 4 DIGIT YEAR - OK FOR MILLENIA*\n         MVC   EJECT+60(19),=X'4021207A20207A20204040202020204B202020'\n         ED    EJECT+60(19),DOUBLE+1  FORMAT 'HH:MM:SS  YYYY.DDD'   GP*\n******************************************************************\n*        THIS CODE HAS BEEN MOVED FROM THE YALE COMP PGM         *\n******************************************************************\n         OPEN  (SYSPRINT,OUTPUT)\n         GETMAIN VU,LA=MIN,A=STARTADD    GET ALL AVAILABLE STORAGE\n         LM    R0,R2,SIXTEENK      LOAD 16K, START, SIZE            ABL\n*        SR    R2,R0               SUBTRACT OFF 4K              ABL GLA\n         ST    R2,SIZE             UPDATE REGION SIZE\n         AR    R1,R2               LAST USEABLE BYTE\n         ST    R1,HIGHCORE         SAVE FOR LATER\n         SPACE\n*                                                                   BFG\n**       MOVED CODE FROM BG COMPARE TO HERE TO ELIMINATE MESSAGE    BFG\n*                                                                   BFG\n         SPACE 1                                                    BFG\n         LA    R2,IGNORE+DDNAM                                      BFG\n         DEVTYPE (R2),DEVAREA                                       BFG\n         LTR   R15,R15             IS IGNORE DD PRESENT             BFG\n         BNZ   IGNAB               NO, SKIP OPEN                    BFG\n         OPEN  (IGNORE)                                             BFG\nIGNAB    EQU   *                                                    BFG\n         L     R2,STARTADD         STARTADD\n         ST    R2,FIRSTIG          SAVE AS FIRST IGNORE ADDR\n         TM    IGNORE+48,X'10'     DID IGNORE OPEN?\n         BO    GETIG               YES -- GO READ AND STORE\n         MVC   FIRSTIG(8),IGASMS   NO  -- FIRST AND LAST IGNORES\n         ST    R2,BSTRTA           SAVE ADDRESS AFTER IGNORES       BFG\n         B     NDIR\nGETIG    GET   IGNORE,(R2)         GET A RECORD\n         LA    R2,80(,R2)          BUMP PONITER\n         B     GETIG               READ TIL END OF FILE\nENDIG    CLOSE (IGNORE)            CLOSE THE DCB\n         FREEPOOL IGNORE                                            ABL\n         ST    R2,LASTIG           SAVE ADDR OF LAST IGNORE REC\n         ST    R2,BSTRTA           SAVE ADDRESS AFTER IGNORES       BFG\n         SPACE 3\n         B     NDIR                GO PROCESS NEW DIRECTORY\n         EJECT\nNDIR     EQU   *                   OPEN AND PROCEES NEW DIRECTORY\n*\n* NDIR\n*        R1 - WORK REG\n*        R2 - LOOP CONTROL (MAX NUMBER OF MEMS)\n*        R3 - POINTER TO NEW DIRECTORY LIST\n*        R4 - DIRECTORY RECORD POINTER IN WORK AREA\n*\n*        BAL   R12,JSORT    SORT ENTRIES IN DESIRED SEQUENCE\n*        B     ODIR\n***********************************************************************\n         RDJFCB (NEWDCB)\n         MVC   NEWDSN,NEWJFCB\n         MVC   NEWVOL,NEWJFCB+118\n         RDJFCB (OLDDCB)\n         MVC   OLDDSN,OLDJFCB\n         MVC   OLDVOL,OLDJFCB+118\n         SPACE 2\n         RDJFCB (NEWDIR,,OLDDIR)   GET JFCB DATA FROM DD STATEMENT\n         OI    NJFCB+52,X'0A'      TURN ON DON'T MERGE DCB TO JFCB BIT\n         OI    OJFCB+52,X'0A'      TURN ON DON'T MERGE DCB TO JFCB BIT\n         L     R14,OBTAIN          OBTAIN FLAGS                     ABL\n         LA    R15,NJFCB           ADDRESS OF DSNAME                ABL\n         LA    R0,NJFCB+118        VOLUME SERIAL                    ABL\n         LA    R1,DS1FMTID         OUTPUT START ADDRESS             ABL\n         STM   R14,R1,PARMLIST     SAVE CAMLIST PARAMETERS          ABL\n         OBTAIN PARMLIST           GET THE FORMAT 1 DSCB            ABL\n         MVC   NEWDSORG,DS1DSORG   SAVE THE NEW DSORG               ABL\n         L     R14,OBTAIN          OBTAIN FLAGS                     ABL\n         LA    R15,OJFCB           ADDRESS OF DSNAME                ABL\n         LA    R0,OJFCB+118        VOLUME SERIAL                    ABL\n         LA    R1,DS1FMTID         OUTPUT START ADDRESS             ABL\n         STM   R14,R1,PARMLIST     SAVE CAMLIST PARAMETERS          ABL\n         OBTAIN PARMLIST           GET THE FORMAT 1 DSCB            ABL\n         MVC   OLDDSORG,DS1DSORG   SAVE THE NEW DSORG               ABL\n         CLC   NJFCB+44(8),BLANK    Q. ANY MEMBER SPECIFIED         BFG\n         BNE   NEWSEQ               A. YES SO MUST BE SEQ DS        BFG\n         CLC   OJFCB+44(8),BLANK    Q. ANY MEMBER SPECIFIED         BFG\n         BNE   OLDSEQ               A. YES SO MUST BE SEQ DS        BFG\n         TM    NEWDSORG,DS1DSGPS    Q. IS THIS SEQ DS           ABL/BFG\n         BO    NEWSEQ               A. YES SO HANDLE AS SEQ DS      BFG\n         TM    OLDDSORG,DS1DSGPS    Q. IS THIS SEQ DS           ABL/BFG\n         BO    NEWSEQ2              A. YES SO MUST BE AN ERROR  ABL/BFG\n         MVC   NJFCB+44(8),BLANK   SET MEMBER NAME TO BLANKS\n         MVC   OJFCB+44(8),BLANK   SET MEMBER NAME TO BLANKS\n         OPEN  (NEWDIR,INPUT,OLDDIR,INPUT),TYPE=J\n         SPACE 2\n         L     R2,PARMSIZE         ESTIMATED MEMBER COUNT\n         L     R3,NMEM             POINT TO START OF LIST\nNDIR2    EQU   *                   READ A DIRECTORY BLOCK\n         READ  NDIR2ECB,SF,NEWDIR,DIRWORK\n         CHECK NDIR2ECB            WAIT TIL READ COMPLETES\n         LA    R4,DIRWORK+10       POINT PAST KEY TO FIRST DATA\nNDIR2B   EQU   *                   PROCESS DIRECTORY LBOCK\n         CLC   0(8,R4),=8X'FF'     LOGICAL END OF DATA?\n         BE    NEWDEOD             YES -- TREAT AS PHYSICAL EOD\n         MVC   0(08,R3),0(R4)      MEMBER NAME\n         MVC   8(4,R3),=4X'0000FFFF' PAGE NUM. AND FLAGS\nNDIR2D   EQU   *\n         CLC   DIRWORK(8),0(R4)    AT END OF BLOCK?\n         BNE   NDIR2F              NO  -- UPDATE POINTERS AND CONT.\n         LA    R3,12(,R3)          YES -- POINT TO NEXT NEW MEMBER ENT\n         BCT   R2,NDIR2                   READ NEXT BLOCK\n         B     NDIR2H                     LIST EXCEEDED\n         SPACE\nNDIR2F   EQU   *\n         SR    R1,R1               CLEAR WORK REG\n         IC    R1,11(R4)           GET TYPE BYTE FROM DIRECTRY\n         N     R1,=X'0000001F'     COUNT OF USER HALF WORDS\n         MH    R1,=H'2'            NOW COUNT OF USER BYTES\n         LA    R4,12(R1,R4)        POINT TO LNEXT ENTRY IN BLOCK\n         LA    R3,12(,R3)          NEXT NEW MEMBER ENTRY\n         BCT   R2,NDIR2B           PROCESS NEXT ENTRY IN BLOCK\nNDIR2H   EQU   *                   TOO MANY MEMBERS\n         WTO   'TOO MANY MEMBERS IN PDS -- PARM=''SIZE=XXX'' NEEDED',  X\n               ROUTCDE=11                                           GP\n         MVC   RETCODE,=F'16'      SET RETURN CODE\n         B     RETURN              RETURN TO SCP\n         SPACE 3\nNEWDEOD  EQU   *\n         MVC   0(8,R3),=X'FF'      SET LOGICAL END OF LIST\n         CLOSE (NEWDIR)            CLOSE THE DIRECTORY DCB\n         B     ODIR                PROCESS OLD DIRECTORY\n         EJECT                                                      BFG\n*                                                                   BFG\n**       HANDLE PURELY SEQUENTIAL DATASETS AS INPUT                 BFG\n*                                                                   BFG\nNEWSEQ   CLC   OJFCB+44(8),BLANK    Q. ANY MEMBER SPECIFIED         BFG\n         BNE   OLDSEQ               A. YES SO MUST BE SEQ DS        BFG\n         TM    OLDDSORG,DS1DSGPS    Q. IS THIS SEQ DS           ABL/BFG\n         BO    OLDSEQ               A. YES SO HANDLE AS SEQ DS      BFG\nNEWSEQ2  MVC   RETCODE,=F'16'                                   ABL BFG\n         WTO   'BOTH FILES ARE NEITHER BOTH DSORG=PO OR DSORG=PS',  BFGX\n               ROUTCDE=(11)                                         BFG\n         B     CLOSE2               GO AND CLOSE SYSPRINT       ABL BFG\n         SPACE 2                                                    BFG\n*                                                                   BFG\n**       BOTH DATASETS ARE SEQUENTIAL, SO CALL COMPARE AND EXIT     BFG\n*                                                                   BFG\nOLDSEQ   DS    0H                                                   BFG\n         OPEN  (OLDDCB,,NEWDCB)                                     BFG\n         MVC   OLDMEM,OJFCB+44      SET MEMBER NAME IF ANY          BFG\n         MVC   NEWMEM,NJFCB+44      SET MEMBER NAME IF ANY          BFG\n         SR    R3,R3                SHOW NO NEED TO SAVE PAGE NUM.  BFG\n         BAL   R12,PAGE             OUTPUT PAGE                     BFG\n         BAL   R12,YALECOMP         DO COMPARE                      BFG\n         B     CLOSE2                                           ABL BFG\n         EJECT\nODIR     EQU   *                   PROCESS OLD DIRECTORY\n*\n* ODIR\n*        R1 - WORK REG\n*        R2 - LOOP CONTROL (MAX NUMBER OF MEMS)\n*        R3 - POINTER TO OLD DIRECTORYL IST\n*        R4 - DIRECTORY RECORD POINTER IN WORK AREA\n*\n*        B     OPEN1\n***********************************************************************\n         SPACE 2\n         L     R2,PARMSIZE         NUMBER OF ESTIMATED MEMBERS\n         L     R3,OMEM             POINT TO OLD MEMER LIST\nODIR2    EQU   *                   READ A DIRECTORY BLOCK\n         READ ODIR2ECB,SF,OLDDIR,DIRWORK\n         CHECK ODIR2ECB            WAIT TILL READ COMPLETES\n         LA    R4,DIRWORK+10       POINT PAST KEY TO FIRST DATA\nODIR2B   EQU   *\n         CLC   0(8,R4),=8X'FF'     LOGOCAL END OF DATA?\n         BE    OLDDEOD             YES -- SAME AS PYSICAL EOD\n         MVC   0(08,R3),0(R4)      MEMBER NAME\n         MVC   8(4,R3),=4X'0000FFFF' PAGE NUMBER AND FLAGS\nODIR2D   EQU   *\n         CLC   DIRWORK(8),0(R4)    AT END OF BLOCK?\n         BNE   ODIR2F              NO\n         LA    R3,12(,R3)          YES -- POINT TO NEXT OLD ENTRY\n         BCT   R2,ODIR2                   READ NEXT BLOCK\n         B     ODIR2H                     ESTIMATED MEMBERS EXCEEDED\n         SPACE 3\nODIR2F   EQU   *\n         SR    R1,R1               CLEAR WORK REG\n         IC    R1,11(,R4)          GET TYPE BYTE\n         N     R1,=X'0000001F'     ISOLATE USER HALF WORDS\n         MH    R1,=H'2'            NOW USER BYTES\n         LA    R4,12(R1,R4)        POINT TO NEXT DIRECTRY ENTRY\n         LA    R3,12(,R3)          POINT TO NEXT OLD MEMBER ENTRY\n         BCT   R2,ODIR2B           PROCESS NEXT ENTRY\nODIR2H   EQU   *\n         B     NDIR2H\n         SPACE 3\nOLDDEOD  EQU   *                   END OF DATA FOR DIRECTORY\n         MVC   0(8,R3),=X'FF'      LOGICAL END OF DATA\n         CLOSE (OLDDIR)            CLOSE DIRECTORY\n         B     LOOP\n         EJECT\nLOOP     EQU   *                   LOOP THRU DIRECTORIES\n         L     R2,NMEM             R2 POINTS TO NEXT MEMBER IN NEW PDS\n         L     R3,OMEM             R3 POINTS TO NEXT MEMBER IN OLD PDS\nLOOP1    EQU   *                   COMPARE NEW TO OLD\n         LH    R1,RC               RETURN CODE                      ABL\n         O     R1,RETCODE          BUILD FOR FINAL RETURN CODE      ABL\n         ST    R1,RETCODE          SAVE FOR FINAL RETURN CODE       ABL\n         CH    R1,=H'12'           ATTENTION TO TERMINATE?          ABL\n         BE    CLOSE2              YES, QUIT                        ABL\n         CLC   0(8,R2),0(R3)\n         BE    COMPARE             SAME MEMBER NAME IN OLD AND NEW\n         BL    NEWONLY             MEMBER IS ONLY IN NEW PDS\n         BH    OLDONLY             MEMBER IS ONLY IN OLD PDS\n         EJECT\nCOMPARE  EQU   *                   COMPARE OLD AND NEW MEMBERS\n         CLI   0(R2),X'FF'         EQUAL AND X'FF'?\n         BE    DIR                 YES -- TIME TO PRINT DIRECTORY\n         MVC   OLDJFCB+44(8),0(R3) MOVE IN OLD MEMBER NAME\n         MVC   NEWJFCB+44(8),0(R2) MOVE IN NEW MEMBER NAME\n         MVC   OLDMEM,0(R3)\n         MVC   NEWMEM,0(R3)\n         OI    OLDJFCB+52,X'08'    DONT REWRITE JFCB\n         OI    NEWJFCB+52,X'08'    DONT REWRITE JFCB\n         OI    OLDJFCB+86,X'01'    DATA SET IS MEMBER OF PDS\n         OI    NEWJFCB+86,X'01'    DATA SET IS MEMBER OF PDS\n         CLC   PARMPRNT(3),=C'DIR' DIRECTORY ONLY?\n         BE    COMPARE2\n         OPEN  (OLDDCB,,NEWDCB),TYPE=J   ADD MEMBER NAMES TO JFCB\n         MVI   DELAY,C'D'          DELAY THE HEADER INFORMATION     ABL\n         BAL   R12,PAGE            TOP OF FORM\n         BAL   R12,YALECOMP        GO DO THE COMPARISON\n         MVC   10(2,R2),RC         SAVE RETURN CODE\n         MVC   10(2,R3),RC         SAVE RETURN CODE\n         CLI   DELAY,C'D'          HEADER OUTPUT?                   ABL\n         BNE   COMPARE2            YES, BRANCH                      ABL\n         MVI   DELAY,C'1'          RESET THE HEADER FLAG            ABL\n         XC    8(2,R2),8(R2)       CLEAR PAGE NUMBER                ABL\n         XC    8(2,R3),8(R3)       CLEAR PAGE NUMBER                ABL\n         LH    R1,PAGECNT          PAGE NUMBER                      ABL\n         SH    R1,=H'1'            PAGE NUMBER                      ABL\n         STH   R1,PAGECNT          PAGE NUMBER                      ABL\nCOMPARE2 EQU   *\n*        CLOSE (OLDDCB,,NEWDCB)    CLOSE IS DONE BY YALE COMP\n         LA    R2,12(,R2)          POINT TO NEXT NEW MEMBER NAME\n         LA    R3,12(,R3)          POINT TO NEXT OLD MEMBER NAME\n         B     LOOP1               NOW GO CHECK CURRENT STATUS\n         SPACE 3\nNEWONLY  EQU   *                   COMPARE OLD AND NEW MEMBERS\n         MVC   NEWJFCB+44(8),0(R2) MOVE IN NEW MEMBER NAME\n         MVC   NEWMEM,0(R2)\n         OI    NEWJFCB+52,X'08'    DONT REWRITE JFCB\n         OI    NEWJFCB+86,X'01'    DATA SET IS A MEMBER OF PDS\n         MVC   OLDMEM,=8C'*'       INDICATE NO MEMBER IN OLD PDS\n         CLC   PARMPRNT(3),=C'MEM' DOES USER WANT MEMBERS?\n         BNE   NEWONLY2            NO  -- SKIP YALECOMP\n         OPEN  (NEWDCB),TYPE=J     ADD MEMBER NAMES TO JFCB\n         BAL   R12,PAGE            TOP OF FORM\n         BAL   R12,YALECOMP        YES -- COMPARE WILL LIST NEW\n         MVC   10(2,R2),=X'0005'          NO MATCHING MEMBER\nNEWONLY2 EQU   *\n*        CLOSE (OLDDCB,,NEWDCB)    CLOSE IS DONE BY YALE COMP\n         LA    R2,12(,R2)          POINT TO NEXT NEW MEMBER NAME\n         B     LOOP1               NOW GO CHECK CURRENT STATUS\n         SPACE 3\nOLDONLY  EQU   *                   COMPARE OLD AND NEW MEMBERS\n         MVC   OLDJFCB+44(8),0(R3) MOVE IN OLD MEMBER NAME\n         MVC   OLDMEM,0(R3)\n         OI    OLDJFCB+52,X'08'    DONT REWRITE JFCB\n         OI    OLDJFCB+86,X'01'    DATA SET IS MEMBER OF PDS\n         MVC   NEWMEM,=8C'*'       INDICATE NO MEMBER IN NEW PDS\n         CLC   PARMPRNT(3),=C'MEM' DOES USER WANT MEMBERS?\n         BNE   OLDONLY2            NO  -- SKIP YALECOMP\n         OPEN  (OLDDCB),TYPE=J     ADD MEMBER NAMES TO JFCB\n         BAL   R12,PAGE            TOP OF FORM\n         BAL   R12,YALECOMP        YES -- COMPARE WILL LIST OLD\n         MVC   10(2,R3),=X'0005'\nOLDONLY2 EQU   *\n*        CLOSE (OLDDCB,,NEWDCB)    CLOSE IS DONE BY YALE COMP\n         LA    R3,12(,R3)          POINT TO NEXT OLD MEMBER NAME\n         B     LOOP1               NOW GO CHECK CURRENT STATUS\n         EJECT\nPAGE     EQU   *                   TOP OF FORM ROUTINE\n         LH    R1,PAGECNT          GET OLD PAGE COUNT\n         LA    R1,1(,R1)           ADD ONE\n         STH   R1,PAGECNT          SAVE FOR NEXT TIME\n         LTR   R3,R3                Q. ARE WE PLAYING WITH MEM LIST BFG\n         BZ    PAGE4                A. NO                           BFG\n         CLC   OLDMEM,=8C'*'       IS THERE AN OLD MEMBER NAME\n         BE    PAGE2               NO  -- DON'T TRY TO SAVE PAGE NO.\n         STH   R1,8(,R3)           YES -- SAVE PAGE NUMBER\nPAGE2    EQU   *\n         CLC   NEWMEM,=8C'*'       IS THERE A NEW MEMBER NAME\n         BE    PAGE4               NO  -- DON'T TRY TO SAVE PAGE NO.\n         STH   R1,8(,R2)           YES -- SAVE PAGE NUMBER\nPAGE4    EQU   *\n         CVD   R1,DOUBLE           CONVERT PAGE NUMBER TO PACKED\n         UNPK  PAGENO,DOUBLE       NOW CHARACTER\n         OI    PAGENO+3,C'0'       NOW FIX SIGN\n         CLI   DELAY,C'D'          DELAYED HEADER?                  ABL\n         BER   R12                 YES, DO IT LATER (IF AT ALL)     ABL\n         MVI   DELAY,C'1'          ENSURE VALID PAGE EJECT          ABL\n         LA    R1,EJECT                                             GLA\n         BAL   R14,PUTOUT          GO TO TOP OF FORM AND PRINT  ABL GLA\n         LA    R1,OLDHDG           PRINT OLD PDS DSN AND MEMBER NAMEGLA\n         BAL   R14,PUTOUT          PRINT OLD PDS DSN AND MEMBER ABL GLA\n         LA    R1,NEWHDG           PRINT NEW PDS DSN AND MEMBER NAMEGLA\n         BAL   R14,PUTOUT          PRINT NEW PDS DSN AND MEMBER ABL GLA\n         BR    R12                 RETURN TO CALLER\n         EJECT\nDIR      EQU   *                   PRINT DIRECTORY\n         MVC   OLDMEM,=CL8'* OLD *'\n         MVC   NEWMEM,=CL8'* NEW *'\n         BAL   R12,PAGE\n         SPACE 3\n         L     R2,NMEM             LIST OF NEW MEMBERS\n         L     R3,OMEM             LIST OF OLD MEMBERS\nDIR2     EQU   *\n         CLC   0(8,R2),0(R3)       OLD AND NEW MATCH?\n         BE    DIRE                MEMBER IN EACH\n         BL    DIRN                ONLY NEW MEMBER\n         BH    DIRO                ONLY OLD MEMBER\n         SPACE  2\nDIRE     EQU   *                   MEMBER IN EACH\n         CLI   0(R2),X'FF'         BOTH EQUAL AND X'FF'\n         BE    CLOSE               YES -- DIRECTORY IS DONE\n         MVC   DIRLOLD,0(R3)       OLD MEMBER NAME\n         MVC   DIRLNEW,0(R2)       NEW MEMBER NAME\n         LH    R4,8(,R2)           PAGE NUMBER\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         UNPK  DIRLPGE,DOUBLE      NOW CHARACTER\n         OI    DIRLPGE+3,C'0'      NOW FIX SIGN\n         MVC   DIRLEQ,BLANK\n         MVC   DIRLNEQ,BLANK\n         MVC   DIRLMTCH,BLANK\n         CLI   11(R2),X'00'        EQUAL MATCH\n         BNE   DIRE2               NO\n         MVC   DIRLEQ,=CL8'EQUAL'\n         B     DIRE12              IGNORE LINES WITH EQUALS         ABL\n***      B     DIRE10\nDIRE2    EQU   *\n         CLI   11(R2),X'04'        NOT EQUAL\n         BNE   DIRE4               NO\n         MVC   DIRLNEQ,=CL9'NOT EQUAL'\n         B     DIRE10\nDIRE4    EQU   *\n         CLI   11(R2),X'05'        NO MATCH\n         BNE   DIRE10\n         MVC   DIRLMTCH,=CL8'NO MATCH'\nDIRE10   EQU   *\n         LA    R1,DIRLINE                                           GLA\n         BAL   R14,PUTOUT          PRINT THE LINE               ABL GLA\nDIRE12   DS    0H                                                   ABL\n         MVI   DIRLCC,C' '\n         LA    R2,12(,R2)          NEXT NEW MEMBER\n         LA    R3,12(,R3)          NEXT OLD MEMBER\n         B     DIR2                LOOP TILL DONE\n         EJECT\nDIRN     EQU   *                   MEMBER IN EACH\n         MVC   DIRLOLD,BLANK       OLD MEMBER NAME\n         MVC   DIRLNEW,0(R2)       NEW MEMBER NAME\n         LH    R4,8(,R2)           PAGE NUMBER\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         UNPK  DIRLPGE,DOUBLE      NOW CHARACTER\n         OI    DIRLPGE+3,C'0'      NOW FIX SIGN\n         MVC   DIRLEQ,BLANK\n         MVC   DIRLNEQ,BLANK\n         MVC   DIRLMTCH,=CL8'NO MATCH'\nDIRN10   EQU   *\n         LA    R1,DIRLINE                                           GLA\n         BAL   R14,PUTOUT          PRINT THE LINE               ABL GLA\n         MVI   DIRLCC,C' '\n         LA    R2,12(,R2)          NEXT NEW MEMBER\n         B     DIR2                LOOP TILL DONE\n         SPACE 3\nDIRO     EQU   *                   MEMBER IN EACH\n         MVC   DIRLOLD,0(R3)       OLD MEMBER NAME\n         MVC   DIRLNEW,BLANK       NEW MEMBER NAME\n         LH    R4,8(,R3)           PAGE NUMBER\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         UNPK  DIRLPGE,DOUBLE      NOW CHARACTER\n         OI    DIRLPGE+3,C'0'      NOW FIX SIGN\n         MVC   DIRLEQ,BLANK\n         MVC   DIRLNEQ,BLANK\n         MVC   DIRLMTCH,=CL8'NO MATCH'\nDIRO10   EQU   *\n         LA    R1,DIRLINE                                           GLA\n         BAL   R14,PUTOUT          PRINT THE LINE               ABL GLA\n         MVI   DIRLCC,C' '\n         LA    R3,12(,R3)          NEXT NEW MEMBER\n         B     DIR2                LOOP TILL DONE\n         SPACE 3\nPUTOUT   ST    R14,R14SAVE                                      ABL GLA\n         CLI   PVECTOR,C'*'               PDS REENTRY?          ABL GLA\n         BE    PUTOUT2                    YES, BRANCH           ABL GLA\n         LR    R0,R1               PUT ADDRESS IN RIGHT REGISTERABL GLA\n         PUT   SYSPRINT,(0)                                     ABL GLA\n         L     R14,R14SAVE                                      ABL GLA\n         BR    R14                                              ABL GLA\nPUTOUT2  DS    0H                         R1 IS ALREADY SETUP   ABL GLA\n         L     R15,PVECTOR                REENTRY VECTOR ADDRESSABL GLA\n         MVI   0(R1),132                  SET THE RETURN LENGTH ABL GLA\n         BALR  R14,R15                    RETURN TO PDS         ABL GLA\n         LTR   R15,R15                    SUCCESSFUL OUTPUT?    ABL GLA\n         BNZ   CLOSE2                     NO - ATTENTION, BRANCHABL GLA\n         L     R14,R14SAVE                                      ABL GLA\n         BR    R14                                              ABL GLA\n         SPACE 3\nCLOSE    EQU   *\n         ICM   R1,B'1111',RETCODE         RC=0?                     ABL\n         BNE   CLOSE2                     YES, BRANCH               ABL\n         LA    R1,ALLMEMBS                                          ABL\n         BAL   R14,PUTOUT          PRINT THE LINE                   ABL\nCLOSE2   DS    0H                                                   ABL\n         CLOSE (SYSPRINT)\n         L     R0,SIZE             SIZE OF AREA TO FREE             ABL\n         L     R1,STARTADD         START OF AREA TO FREE            ABL\n         FREEMAIN R,LV=(0),A=(1)   FREE THE DYNAMIC AREA            ABL\n*\n         L     R0,PARMSIZE         NUMBER OF MEMBERS                ABL\n         MH    R0,=H'24'           12 BYTES OLD AND 12 BYTES NEW    ABL\n         L     R1,NMEM             START OF AREA TO FREE            ABL\n         FREEMAIN R,LV=(0),A=(1)   FREE THE MEMBER STORAGE          ABL\n         B     RETURN\n         EJECT\n         LTORG\n         SPACE 3\nBLANK    DC    80C' '\nFULL     DC    F'0'\nDOUBLE   DC    D'0'\nPAGECNT  DC    H'0'\nORIGPARM DC    F'0'                                                 BFG\n         SPACE 3\n         EJECT\nPARMVALS DS    0F                  PARAM REALTED VALUES\nPARMADDR DC    F'0'                ADDR OF USER PARM\nPARMLEN  DC    F'0'                LEN OF USER PARM\nPARMPRNT DC    F'0'                PRINT NAME ONLY OR ENTIRE MEMBER\n*ARMSIZE DC    F'1000'             ESTIMATED NUMBER MEMBERS IN PDS\nPARMSIZE DC    F'9999'             ESTIMATED NUMBER MEMBERS IN PDS\nPARMTYPE DC    F'0000'             LIBRARY TYPE                   PAN\nPARMDLM  DC    C','                PARM VALUE DELIMITOR\n         SPACE 3\nOLDDSORG DC    XL1'00'             OLD FILE DSORG                   ABL\nNEWDSORG DC    XL1'00'             NEW FILE DSORG                   ABL\nPARMLIST DC    4F'0'                                                ABL\nOBTAIN   CAMLST SEARCH,0,0,0                                        ABL\n         ORG   OBTAIN+4                                             ABL\n         SPACE 3                                                    ABL\n         DS    0F             ***   FORMAT 1 DSCB  ***              ABL\n         ORG   *-44                                                 ABL\n         IECSDSL1 (1)         FORMAT 1 DSCB                         ABL\n         ORG   ,                                                    ABL\n         DC    11F'0'                                               ABL\n         EJECT\nNMEM     DC    F'0'                ADDR OF NEW MEMBER LIST\nNMEMS    EQU   NMEM\nOMEM     DC    F'0'                ADDR OF OLD EMMBER LIST\nOMEMS    EQU   OMEM\n         PRINT NOGEN\nOLDDAD1  EQU   *\nOLDDIR   DCB   BLKSIZE=256,DEVD=DA,DSORG=PS,DDNAME=OLD,EXLST=OXLST,    X\n               KEYLEN=8,LRECL=256,MACRF=(R),RECFM=F,EODAD=OLDDEOD\n         SPACE 3\nNEWDAD1  EQU   *\nNEWDIR   DCB   BLKSIZE=256,DEVD=DA,DSORG=PS,DDNAME=NEW,EXLST=NXLST,    X\n               KEYLEN=8,LRECL=256,MACRF=(R),RECFM=F,EODAD=NEWDEOD\n         SPACE 3\nOXLST    DS    0F\n         DC    X'87'\n         DC    AL3(OJFCB)\n         SPACE\nOJFCB    DC    CL176' '\n         SPACE 3\nNXLST    DS    0F\n         DC    X'87'\n         DC    AL3(NJFCB)\n         SPACE\nNJFCB    DC    CL176' '\n         SPACE 3\nOLDXLIST DS    0F\n         DC    X'05'\n         DC    AL3(DCBEXIT)\nOLDXLST2 EQU   *\n         DC    X'87'\n         DC    AL3(OLDJFCB)\n         SPACE\nOLDJFCB  DC    CL176' '\n         SPACE 3\nNEWXLIST DS    0F\n         DC    X'05'\n         DC    AL3(DCBEXIT)\nNEWXLST2 EQU   *\n         DC    X'87'\n         DC    AL3(NEWJFCB)\n         SPACE\nNEWJFCB  DC    CL176' '\n         EJECT\nDIRWORK  DS    CL264               WORK AREA FOR DIRECOTRY BLOCK READS\n         SPACE\nMEMBR    DC    CL8' ',C'  '        SAVE AREA FOR MEMBER NAMES\nMEMBR1   DC    CL8' '              SAVE AREA FOR MEMBER NAMES\nMEMBR2   DC    CL8' '              SAVE AREA FOR MEMBER NAMES\nOLDBLKSZ DC    F'0'                BLOCKSIZE FOR OLD PDS\nNEWBLKSZ DC    F'0'                BLOCKSIZE FOR NEW PDS\nOLDBLKA  DC    F'0'                ADDR OF OLD PDS BUFFER FOR READS\nNEWBLKA  DC    F'0'                ADDR OF NEW BUFFER FOR READS\nNEWBLKE  DC    F'0'                END ADDR FOR NEW BUFFER\nOLDBLKE  DC    F'0'                END OF BUFFER ADDR FOR OLD\n         EJECT\nEJECT    DC    CL133' '\n         ORG   EJECT\nDELAY    DC    C'D'               \"D\" IF DELAY FOR MISMATCH         ABL\n         ORG   EJECT\n         DC    C'1',C'PAGE  '\nPAGENO   DC    CL4' '\n         ORG   ,\n         SPACE 2\nNEWHDG   DC    CL133' '\n         ORG   NEWHDG\n         DC    C'-',C'VOL=SER='\nNEWVOL   DC    CL6' ',C'  MEMBER='\nNEWMEM   DC    CL8' ',C'  NEW DSN='\nNEWDSN   DC    CL44' '\n         ORG   ,\n         SPACE 3\nOLDHDG   DC    CL133' '\n         ORG   OLDHDG\n         DC    C'-',C'VOL=SER='\nOLDVOL   DC    CL6' ',C'  MEMBER='\nOLDMEM   DC    CL8' ',C'  OLD DSN='\nOLDDSN   DC    CL44' '\n         ORG   ,\n         SPACE 3\nALLMEMBS DC    CL133'- ALL MEMBERS WERE IDENTICAL IN THESE DATA SETS'\nDIRLINE  DC    CL133' '\n         ORG   DIRLINE\nDIRLCC   DC    C'-',C'OLD MEM='\nDIRLOLD  DC    CL8' ',C' PAGE '\nDIRLPGE  DC    CL4' ',C' NEW MEM='\nDIRLNEW  DC    CL8' ',C' '\nDIRLEQ   DC    CL8' ',C' '\nDIRLNEQ  DC    CL9' ',C' '\nDIRLMTCH DC    CL8' ',C' '\n         ORG   ,\n TITLE 'YALE COMPARE     ---  BRUCE LELAND   ---  VERSION 2.0    '\n*     CMPRSEQ  CSECT\n*\n*   THIS COMPARE PROGRAM ORIGINATED AT YALE UNIVERSITY AND WAS OBTAINED\n*     FROM THE CONNECTICUT BANK AND TRUST COMPANY MODS TAPE (FILE 226)\n*\n*   THIS COMPARE PROGRAM USES ONLY COLUMNS ONE THROUGH 72; THUS, ANY\n*     TWO VERSIONS OF A PROGRAM MAY BE EASILY COMPARED EVEN IF ONE\n*     (OR BOTH) OF THE FILES HAS BEEN RESEQUENCED.  IF NEITHER FILE\n*     HAS BEEN RESEQUENCED, A PARM OF \"FULL\" MAY BE CODED TO REQUEST\n*     THAT ALL EIGHTY COLUMNS BE USED IN THE COMPARISON.  A FACILITY\n*     IS ALSO PROVIDED TO IGNORE TRIVIAL CARD IMAGES (SUCH AS \" EJECT \"\n*     OR \" SPACE 3 \" IN AN ASSEMBLER SOURCE PROGRAM).\n*\n*   THIS PROGRAM USES ALL AVAILABLE CORE IN ITS REGION AFTER OPENING\n*     ITS INPUT/OUTPUT FILES (EXCEPT FOR 4K WHICH IS RELEASED).  THE\n*     OBTAINED CORE AREA IS USED AS A COMPARE BUFFER WHICH IS ONLY\n*     DUMPED (WRITTEN TO SYSPRINT) WHEN IDENTICAL RECORDS (BASED ON\n*     THE FIRST 72 BYTES) ARE FOUND IN THE OLD AND NEW DATA SETS.  IF\n*     THE COMPARE BUFFER OVERFLOWS, THE PROGRAM TERMINATES.  THEREFORE,\n*     IF IT IS SUSPECTED THAT THE TWO DATA SETS MAY BE VERY FAR OUT OF\n*     SYNC, A LARGE REGION SHOULD BE USED.  THE NUMBER OF UNMATCHED\n*     RECORDS THAT CAN BE BUFFERED AT ONE TIME CAN BE CALCULATED FROM\n*     THE EXPRESSION:  (REGION SIZE - 8K - BUFFERS) / 160\n*     AS A GENERAL RULE, 30K IS SUFFICIENT FOR ABOUT 100 UNMATCHED\n*     RECORDS AT A TIME, AND 100K IS SUFFICIENT FOR ABOUT 500 UNMATCHED\n*     RECORDS AT A TIME.\n*\n*   CARD IMAGES OF THE TRIVAL DATA IS INPUT FROM THE IGNORE DDNAME;\n*     IF THE DDCARD IS MISSING, A TABLE OF TRIVIAL DATA FOR ASSEMBLER\n*     SOURCE CODE WILL BE ASSUMED (THIS INCLUDES \" EJECT \", \" SPACE   \"\n*     \" SPACE 1 \", \" SPACE 2 \", \" SPACE 3 \" AND BLANK COMMENT CARDS).\n*\n*\n*\n*   THE PROGRAM FORMAT ON THE CBT MODS TAPE WAS DISASSEMBLED SOURCE; IT\n*     WAS RECOMMENTED, RESYMBOLIZED, REDOCUMENTED AND SLIGHTLY MODIFIED\n*     BY  A. BRUCE LELAND (ABL)  OCTOBER, 1978\n*\n*\n*   JCL:\n*\n*   //STEPNAME   EXEC  PGM=COMPARE,REGION=100K\n*   //OLD        DD    DSN=OLD.SEQ.DSN ....\n*   //NEW        DD    DSN=NEW.SEQ.DSN ....\n*   //SYSPRINT   DD    SYSOUT=A\n*   //IGNORE     DD    *      (OR DUMMY  --  OR OMITTED)\n*     TRIVIAL CARD IMAGES THAT ARE TO BE IGNORED IN THE COMPARISON\n*   /*\n*\n         EJECT\n*        USING CMPRSEQ,R15\n         DS    0D\nYALECOMP EQU   *\n         CLC   PARMPRNT(3),=C'DIR'\n         BE    0(,R12)            USER ONLY WANT DIRECTORY LIST\n         PRINT GEN\n*        SAVE  (14,12),,*\n         STM   R0,R15,SAVE\n*        LR    R11,R13\n*        LA    R13,SAVE\n*        USING SAVE,R13\n*        ST    R13,8(,R11)\n*        ST    R11,4(,R13)\n         B     INIT\nSAVE     DC    18F'0'\n*PARM     L     R1,0(,R1)\n*         CLC   2(4,R1),FULL\n*         BNE   OPEN\n*         MVI   MLENGTH,X'4F'\n*OPEN     OPEN  (NEW,,OLD,,SYSPRINT,OUTPUT,IGNORE)\n*         SPACE\n*         GETMAIN VU,LA=MIN,A=STARTADD      GET ALL AVAILABLE CORE\n*         LM    R0,R2,FOURK                 LOAD 4K, START, SIZE\n*         SR    R2,R0                       SUBTRACT OFF 4K\n*         ST    R2,SIZE                     UPDATE REGION SIZE\n*         AR    R1,R2                       LAST USEABLE BYTE\n*         ST    R1,HIGHCORE                 SAVE FOR LATER\n*         SPACE\n*         FREEMAIN R,LV=(0),A=(1)           FREE THE 4K DYNAMIC AREA\n*         L     R2,STARTADD\n*         ST    R2,FIRSTIG\n*         TM    IGNORE+48,X'10'             IGNORE OPEN?\n*         BO    GETIG                       YES, BRANCH             ABL\n*         MVC   FIRSTIG(8),IGASMS           FIRST AND LAST IGNORES  ABL\n*         B     NOIG                          FOR ASSEMBLER SOURCE  ABL\n*         SPACE\n*GETIG    GET   IGNORE,(2)\n*         LA    R2,80(,R2)\n*         B     GETIG\n*         SPACE\n*ENDIG    CLOSE (IGNORE)\n*         ST    R2,LASTIG                                          ABL\nINIT     EQU   *\n*                                                                   BFG\n**       SETUP REG 10 TO HAVE LENGTH OF RECORDS                     BFG\n*                                                                   BFG\n         LA    R2,OLDDCB\n         LH    R10,LRECL(,R2)      GET LRECL\n         CH    R10,MLENGTH         IS IT LARGER THAN MLENGTH      GP@P6\n         BH    *+8                 YES                            GP@P6\n         MVI   MLENGTH+1,0         NO, FORCE 'FULL'               GP@P6\n         TM    RECFM(R2),X'10'     IS IT BLOCKED\n         BO    *+8                 YES, BRANCH\n         LH    R10,BLKSI(,R2)      NO, BLKSIZE IS RECORD LENGTH\n         SPACE\n         LA    R2,NEWDCB\n         LH    R1,LRECL(,R2)       GET LRECL\n         TM    RECFM(R2),X'10'     IS IT BLOCKED\n         BO    *+8                 YES, BRANCH\n         LH    R1,BLKSI(,R2)       NO, BLKSIZE IS RECORD LENGTH\n         SPACE\n         CR    R10,R1              IS OLD LONGER THAN NEW\n         BNH   *+6                 NO, BRANCH\n         LR    R10,R1              YES, USE THE SHORTER OF THE TWO\n*        LA    R1,256              MAX RECORD SIZE  (NOW NO MAX SIZE)\n*        CR    R10,R1              IS LRECL TOO LONG\n*        BNH   *+6                 NO, BRANCH\n*        LR    R10,R1              YES, USE 256\n*                                                                   BFG\n**       INIT OTHER FIELDS                                          BFG\n*                                                                   BFG\n         L     R2,BSTRTA           ADDRESS OF GOTTEN BUFFER+IGNORES BFG\n         L     R3,SIZE             SIZE OF GOTTEN BUFFER\n         S     R3,BSTRTA                                            BFG\n         A     R3,STARTADD         SIZE OF BUFFER TO BE CLEARED\n         SR    R8,R8               SET FROM AREA TO BE ALL PADS     BFG\n         SR    R9,R9               WITH LENGTH AND ADDRESS OF ZERO  BFG\n         MVCL  R2,R8\n         L     R2,BSTRTA           ADDRESS OF GOTTEN BUFFER+IGNORES BFG\n         XC    COUNT,COUNT\n         XC    RC,RC\n         ST    R2,LOWOLD                                           ABL\n         ST    R2,HIGHOLD\n         ST    R2,CURROLD\n         AR    R2,R10\n         ST    R2,LOWNEW\n         ST    R2,HIGHNEW\n         ST    R2,CURRNEW\n         LA    R8,OLDDCB\n         LA    R9,NEWDCB\n*\n*    THIS COMPLETES THE PROGRAM INITIALIZATION\n*\n         EJECT\nSWAP     XR    R9,R8\n         XR    R8,R9\n         XR    R9,R8\n         L     R3,CURR(,R9)\n         C     R3,HIGH(,R9)\n         BL    NOINPUT\n         TM    OFLGS(R9),X'10'         CURRENT DCB OPEN?\n         BZ    SWAP                    NO, BRANCH (AND SWAP)\nOMITGET  DS    0H                                                   GP\n         LA    R1,0(,R9)\n         GET   (1)\n         SPACE\n         TM    RECFM(R9),X'C0'      FIXED LENGTH RECORDS?        GP@FT*\n         BNM   USEGET               NO, BYPASS IGNORE TEST            *\n         TM    RECFM(R9),X'80'      FIXED LENGTH RECORDS?             *\n         BNO   USEGET               NO, BYPASS IGNORE TEST       GP@FT*\n         LR    R14,R10              GET LENGTH TO COMPARE           GP*\n         BCTR  R14,0                MINUS 1 FOR EX                    *\n         SH    R14,MLENGTH          MINUS 8 FOR SEQUENCE NUMBERS      *\n         L     R15,FIRSTIG                FIRST IGNORE                *\n         LA    R0,79                                                  *\n         CR    R14,R0                     IS LENGTH GREATER THAN 80   *\n         BNH   *+6                        NO                          *\n         LR    R14,R0                     YES, REDUCE TO 80           *\nLOOPIG   C     R15,LASTIG                 LAST IGNORE?                *\n         BNL   USEGET                     YES, BRANCH                 *\n         EX    R14,CLCIG                  AN IGNORE RECORD?           *\n         BE    OMITGET                    YES, GET ANOTHER RECORD     *\n         LA    R15,80(,R15)                                           *\n         B     LOOPIG                     CHECK ALL IGNORES           *\nCLCIG    CLC   0(0,R1),0(R15)                                         *\nUSEGET   DS    0H                   DO NOT IGNORE THIS RECORD       GP*\n         SPACE\n         LA    R0,0(R10,R3)\n         SPACE\n         C     R0,HIGHCORE             FIT IN CORE?\n         BH    NOTCORE                 NO, BRANCH\n         SPACE\n         LR    R15,R10                 GET LENGTH\n         TM    RECFM(R9),DS1RECFV      FIXED LENGTH RECORDS?        GP*\n         BZ    MVCSTART                YES, OVERLAY ALL RESIDUAL DATA *\n         LR    R14,R3                  NO, COPY TARGET POINTER        *\n         LA    R0,256                  LOAD 256 FOR FAST ACCESS       *\nXCLOOP   CR    R15,R0                  LESS THAN 256 BYTES?           *\n         BL    XCTRAIL                 YES, CLEAR THAT LENGTH         *\n         XC    0(256,R14),0(R14)       NO, CLEAR 256 BYTES            *\n         AR    R14,R0                  ADVANCE TARGET POINTER         *\n         SR    R15,R0                  DECREASE BYTES-TO-DO           *\n         BZ    XCDONE                  RECORD WAS 256 MULTIPLE        *\n         B     XCLOOP                  CONTINUE ERASING RESIDUAL DATA *\nXCTRAIL  BCTR  R15,0                   LENGTH MINUS 1 FOR EX          *\n         B     *+10                    SKIP XC                        *\n         XC    0(0,R14),0(R14)         EXECUTED                       *\n         EX    R15,*-6                 CLEAR THE REST OF THE RECORD   *\nXCDONE   DS    0H                      RESIDUAL DATA NOW ERASED       *\n         LH    R15,LRECL(,R9)          LOAD PHYSICAL LENGTH JUST READ *\n         TM    RECFM(R9),DS1RECFU      UNDEFINED RECORD LENGTH?       *\n         BO    MVCSTART                YES, GOOD GUESS                *\n         ICM   R15,3,0(R1)             NO, VARIABLE SO GET IT FROM RDW*\nMVCSTART LR    R14,R3                  COPY TARGET POINTER            *\n         LA    R0,256                  LOAD 256 FOR FAST ACCESS       *\nMVCLOOP  CR    R15,R0                  LESS THAN 256 BYTES?           *\n         BL    MVCTRAIL                YES, LOAD THAT LENGTH          *\n         MVC   0(256,R14),0(R1)        NO, MOVE 256 BYTES             *\n         AR    R14,R0                  ADVANCE TARGET POINTER         *\n         AR    R1,R0                   ADVANCE SOURCE POINTER         *\n         SR    R15,R0                  DECREASE BYTES-TO-DO           *\n         BZ    MVCDONE                 RECORD WAS 256 MULTIPLE        *\n         B     MVCLOOP                 CONTINUE WITH THE MOVE         *\nMVCTRAIL DS    0H                      JUST THE LAST BIT LEFT       GP*\n         BCTR  R15,0                   LENGTH MINUS 1 FOR EX\n         B     *+10                    SKIP MVC\n         MVC   0(0,R14),0(R1)          EXECUTED\n         EX    R15,*-6                 MOVE THE RECORD\nMVCDONE  DS    0H                      RECORD NOW COPIED TO BUFFER  GP*\n         SPACE\n         LR    R0,R10                  GET LENGTH\n         AR    R0,R0                   DOUBLE IT\n         AR    R0,R3                   ADD R3\n         SPACE\n         ST    R0,HIGH(,R9)\n         SPACE 2\n*  SEE IF THIS RECORD (R3) IS ANYWHERE IN THE OTHER BUFFER\n*\nNOINPUT  L     R2,LOW(,R8)\nNEXT8    C     R2,CURR(,R8)\n         BNL   NO8\n         LR    R1,R10              GET LENGTH TO COMPARE\n         SH    R1,MLENGTH          MINUS 8 FOR SEQUENCE NUMBERS (MAYBE)\n         STM   R2,R3,DOUBLE        SAVE POINTER REGISTERS           GP*\n         LA    R0,256              LOAD 256 FOR FAST ACCESS           *\nCLCLOOP  CR    R1,R0               LESS THAN 256 BYTES?               *\n         BL    CLCTRAIL            YES, COMPARE THAT LENGTH           *\n         CLC   0(256,R3),0(R2)     NO, COMPARE 256 BYTES              *\n         BNE   CLCRESTR            MISMATCH FOUND SO LEAVE LOOP       *\n         AR    R3,R0               ADVANCE TARGET POINTER             *\n         AR    R2,R0               ADVANCE SOURCE POINTER             *\n         SR    R1,R0               DECREASE BYTES-TO-DO               *\n         BZ    CLCRESTR            RECORD WAS 256 MULTIPLE            *\n         B     CLCLOOP             CONTINUE WITH THE COMPARE          *\nCLCTRAIL DS    0H                  JUST THE LAST BIT LEFT           GP*\n         BCTR  R1,0                MINUS 1 FOR EX\n         B     *+10                SKIP CLC\n         CLC   0(1,R3),0(R2)\n         EX    R1,*-6              EXECUTE CLC\nCLCRESTR LM    R2,R3,DOUBLE        RESTORE POINTER REGISTERS        GP\n         BE    FOUND8\n         AR    R2,R10\n         AR    R2,R10\n         B     NEXT8\nNO8      EQU   *                   NOT IN THE BUFFER\n         AR    R3,R10\n         AR    R3,R10\n         ST    R3,CURR(,R9)        UPDATE THE CURRENT POINTER\n         B     SWAP\n         SPACE 2\n*    DOES NOT FIT IN THE ALLOCATED CORE\n*\nNOTCORE  BAL   R14,NOTEQUAL               OUTPUT NOT EQUAL MESSAGE\n         CLOSE (NEWDCB,,OLDDCB)\n         FREEPOOL OLDDCB                                            ABL\n         FREEPOOL NEWDCB                                            ABL\n         MVC   RETCODE,=F'8'       RETURN CODE 8                    ABL\n         MVC   BUFFER(35),CORE            CORE OVERFLOW MESSAGE\n         MVC   BUFFER+35(86),BUFFER+34    CLEAR THE REMAINDER\n         LA    R1,BUFFER                                            GLA\n         BAL   R14,PUTLINE         PRINT THE LINE                   GLA\n         MVI   BUFFER,X'40'\n         B     CORETERM\n         SPACE 2\nPUTLINE  ST    R14,R14SAVE                                      ABL GLA\n         CLI   PVECTOR,C'*'               PDS REENTRY?          ABL GLA\n         BE    PUTL10                     YES, BRANCH           ABL GLA\n         LR    R0,R1               PUT ADDRESS IN RIGHT REGISTER    GLA\n         PUT   SYSPRINT,(0)                                         GLA\n         L     R14,R14SAVE                                      ABL GLA\n         BR    R14                                              ABL GLA\nPUTL10   DS    0H                         R1 IS ALREADY SETUP       GLA\n         L     R15,PVECTOR                REENTRY VECTOR ADDRESSABL GLA\n         MVC   WORKLINE,0(R1)             SAVE THE OUTPUT LINE      ABL\n         LA    R1,WORKLINE                RESET THE OUTPUT ADDRESS  ABL\n         MVI   0(R1),121                  SET THE RETURN LENGTH     ABL\n         BALR  R14,R15                    RETURN TO PDS         ABL GLA\n         LTR   R15,R15                    SUCCESSFUL OUTPUT?    ABL GLA\n         BNZ   EXIT12                     NO - ATTENTION, BRANCHABL GLA\n         L     R14,R14SAVE                                      ABL GLA\n         BR    R14                                              ABL GLA\n         EJECT\n*   RECORD WAS FOUND -- SEE IF IT IS TO BE IGNORED\n*\nFOUND8   CLC   CURR(4,R9),LOW(R9)           RECORDS IN ACTIVE BUFFER?\n         BNE   NOTIG                        YES                     GP\n* LOGIC CHANGE: DO NOT CHECK IGNORE RECORDS AT THIS STAGE BUT       GP\n*               IMMEDIATELY AFTER INPUT, AND DISCARD STRAIGHT AWAY. GP\n*        BNE   CHKIG                        YES, CHECK IGNORES\n         ST    R2,CURR(,R8)\n         B     IGEQUAL\n*CHKIG   L     R15,FIRSTIG                FIRST IGNORE\n*        LA    R0,79\n*        CR    R1,R0                      IS LENGTH GREATER THAN 80\n*        BNH   *+6                        NO\n*        LR    R1,R0                      YES, REDUCE TO 80\n*LOOPIG  C     R15,LASTIG                 LAST IGNORE?\n*        BNL   NOTIG                      YES, BRANCH\n*        EX    R1,CLCIG                   AN IGNORE RECORD?\n*        BE    NO8                        YES, BRANCH\n*        LA    R15,80(,R15)\n*        B     LOOPIG                     CHECK ALL IGNORES\n*CLCIG   CLC   0(1,R3),0(R15)\n*\nNOTIG    ST    R2,CURR(,R8)               NOT AN IGNORE RECORD\n         BAL   R14,NOTEQUAL               OUTPUT \"NOT EQUAL\"\nIGEQUAL  BAL   R14,INBUFF                 ADD TO COMPARE BUFFER\n         XR    R9,R8\n         XR    R8,R9\n         XR    R9,R8\n         BAL   R14,INBUFF                 ADD TO OTHER BUFFER\n         B     SWAP\n         SPACE 2\n*  END OF FILE (OLD OR NEW)\n*\nEOLDNEW  CLOSE ((9))                      CLOSE THE CURRENT FILE\n         FREEPOOL (9)                                               ABL\n         XR    R9,R8\n         XR    R8,R9\n         XR    R9,R8\n         TM    OFLGS(R9),X'10'            OTHER FILE STILL OPEN?\n         BNZ   SWAP                       YES, BRANCH\n         CLC   LOWOLD(4),HIGHOLD          BUFFER EMPTY?\n         BNE   *+14                       NO, BRANCH\n         CLC   LOWNEW(4),HIGHNEW          OTHER BUFFER EMPTY TOO?\n         BE    TRIPLE                     YES, QUIT\n         BAL   R14,NOTEQUAL               FLUSH THE CURRENT BUFFERS\n         B     TRIPLE\n         EJECT\n*  TERMINATE -- LIST NUMBER OF UNEQUAL COMPARES\n*\nTRIPLE   MVI   BUFFER,C' '                                          BFG\n         CLI   DELAY,C'D'                  DELAYED OUTPUT?          ABL\n         BE    EXIT                        YES, BRANCH              ABL\n         LA    R1,BLANKS                SPACE  LINES W/O            GLA\n         BAL   R14,PUTLINE                                          GLA\n         LA    R1,BLANKS                   CARRIAGE CONTROL         GLA\n         BAL   R14,PUTLINE                                          GLA\nCORETERM MVC   BUFFER+1(6),EDCOUNT          EDIT MASK\n         MVC   BUFFER+7(35),BLOCKS          UNEQUAL BLOCKS MESSAGE\n         MVC   BUFFER+42(79),BUFFER+41      BLANK REMAINDER\n         LH    R1,COUNT\n         CVD   R1,DOUBLE\n         ED    BUFFER+1(6),DOUBLE+5\n         LA    R1,BUFFER                   CARRIAGE CONTROL         GLA\n         BAL   R14,PUTLINE                                          GLA\n         MVC   BUFFER+7(35),BLANK   CLEAR OUT BUFFER                BFG\n         B     EXIT\nEXIT12   MVI   RC+1,12                                              ABL\nEXIT     LA    R2,NEWDCB\n         TM    OFLGS(R2),X'10'     IS DCB OPN\n         BNO   EXITNEWC\n         CLOSE (NEWDCB)\n         FREEPOOL NEWDCB                                            ABL\nEXITNEWC EQU   *\n         LA    R2,OLDDCB\n         TM    OFLGS(R2),X'10'     IS DCB OPN\n         BNO   EXITOLDC\n         CLOSE (OLDDCB)\n         FREEPOOL OLDDCB                                            ABL\nEXITOLDC EQU   *\n         LH    R15,RC                                               BFG\n         LM    R0,R14,SAVE          RESTORE REGS                    BFG\n         BR    R12                  RETURN                          BFG\n         SPACE\n*  RE-INITIALIZE THE ACTIVE BUFFER -- SLIDE UNUSED RECORDS DOWN\n*\nINBUFF   L     R1,LOW(,R9)\n         L     R2,CURR(,R9)\n         ST    R1,CURR(,R9)\nNXTREC   EQU   *\n         AR    R2,R10\n         AR    R2,R10\n         C     R2,HIGH(,R9)        FINISHED REINITIALIZING?\n         BNL   REINIT              YES, BRANCH\n         SPACE\n         LR    R15,R10             GET LENGTH                       GP*\n         STM   R1,R2,DOUBLE        SAVE POINTER REGISTERS             *\n         LA    R0,256              LOAD 256 FOR FAST ACCESS           *\nSLIDELP  CR    R15,R0              LESS THAN 256 BYTES?               *\n         BL    SLIDETRL            YES, LOAD THAT LENGTH              *\n         MVC   0(256,R1),0(R2)     NO, MOVE 256 BYTES                 *\n         AR    R1,R0               ADVANCE TARGET POINTER             *\n         AR    R2,R0               ADVANCE SOURCE POINTER             *\n         SR    R15,R0              DECREASE BYTES-TO-DO               *\n         BZ    SLIDEDON            RECORD WAS 256 MULTIPLE            *\n         B     SLIDELP             CONTINUE WITH THE MOVE             *\nSLIDETRL BCTR  R15,0               JUST THE LAST BIT LEFT             *\n         EX    R15,SLIDEMVC        MOVE THE REST OF THE RECORD\nSLIDEDON LM    R1,R2,DOUBLE        RESTORE THE POINTER REGISTERS    GP*\n         SPACE\n         AR    R1,R10\n         AR    R1,R10\n         B     NXTREC\nSLIDEMVC MVC   0(0,R1),0(R2)       EXECUTED\nREINIT   ST    R1,HIGH(,R9)        RESET MAXIMUM POINTER\n         BR    R14\n         EJECT\n*     FLUSH OUT THE NON-EQUAL RECORDS\n*\nNOTEQUAL ST    R14,NOTEQR14\n         MVI   RC+1,4             RETURN CODE 4\n         LH    R1,COUNT\n         LA    R1,1(,R1)\n         STH   R1,COUNT\n         MVI   BUFFER,C' '\n         LA    R3,OLDDCB\n*\n         CLI   DELAY,C'D'          DELAYED HEADER?                  ABL\n         BNE   NOTEQU2             NO, BRANCH                       ABL\n         MVI   DELAY,C'1'          YES, RESET TO EJECT              ABL\n         LA    R1,EJECT                                             ABL\n         BAL   R14,PUTLINE         GO TO TOP OF FORM AND PRINT      ABL\n         LA    R1,OLDHDG           PRINT OLD PDS DSN AND MEMBER     ABL\n         BAL   R14,PUTLINE         PRINT OLD PDS DSN AND MEMBER     ABL\n         LA    R1,NEWHDG           PRINT NEW PDS DSN AND MEMBER     ABL\n         BAL   R14,PUTLINE         PRINT NEW PDS DSN AND MEMBER     ABL\nNOTEQU2  DS    0H                                                   ABL\n*    OUTPUT TWO BLANK LINES (TRIPLE SPACE) FOR BROWSE\n         LA    R1,BLANKS                SPACE  LINES W/O            GLA\n         BAL   R14,PUTLINE                                          GLA\n         LA    R1,BLANKS                   CARRIAGE CONTROL         GLA\n         BAL   R14,PUTLINE                                          GLA\nMOVES    MVC   BUFFER+9(3),OLDNEW(R3)\n         MVC   BUFFER+98(3),OLDNEW(R3)\n         MVI   BUFFER+7,C'-'\n         MVI   BUFFER+102,C'-'\n         ZAP   NUMBER(3),=P'0'\n         L     R5,LOW(,R3)\nFLUSHED  C     R5,CURR(,R3)               IS THIS BUFFER FLUSHED?\n         BNL   GETNEW                     YES, BRANCH\n         LR    R15,R10                 GET LENGTH                 GP@P6\n         CH    R15,=H'80'              CHECK FOR LARGE LRECL      GP@P6\n         BNH   *+8                     LRECL IS OKAY              GP@P6\n         LA    R15,80                  NEVER SHOW MORE THAN 80    GP@P6\n         BCTR  R15,0                   LENGTH MINUS 1 FOR EX      GP@P6\n         EX    R15,RECPRTBF            COPY RECORD TO PRINT BUFR  GP@P6\n         AP    NUMBER(3),=P'1'\n         MVC   DOUBLE(6),EDMKPAT\n         EDMK  DOUBLE(6),NUMBER           POINT R1 TO FIRST NONBLANK\n         LA    R14,DOUBLE+5               POINT TO LAST DIGIT\n         SR    R14,R1                     GET LENGTH MINUS 1\n         STC   R14,MOVEA+1                ALTER MVC LENGTH CODE\nMOVEA    MVC   BUFFER+103(1),0(R1)        MOVE NUMBER\n         LA    R15,BUFFER+104(R14)\n         MVI   0(R15),C'-'\n         LA    R14,1(,R14)\n         STC   R14,MOVEB+1\n         LA    R1,BUFFER+6\n         SR    R1,R14\nMOVEB    MVC   0(1,R1),BUFFER+102\n         CLI   PVECTOR,C'*'               PDS REENTRY?              ABL\n         BE    MOVEB2                     YES, BRANCH               ABL\n         TM    SYSPRINT+17,X'4F'        TSO OUTPUT \"DA(*)\"?         ABL\n         BNO   MOVEB2                   NO, BRANCH                  ABL\n         MVC   BUFFER+79(42),BLANKS     BLANK PAST SCREEN WIDTH     ABL\n         TR    BUFFER(79),TSOXLATE      REMOVE UNDISPLAYABLES       -GP\nMOVEB2   LA    R1,BUFFER                                            GLA\n         BAL   R14,PUTLINE                                          GLA\n         MVI   BUFFER,X'40'\n         AR    R5,R10\n         AR    R5,R10\n         B     FLUSHED\nRECPRTBF MVC   BUFFER+15(0),0(R5)         EXECUTED                GP@P6\n*\nGETNEW   LA    R1,NEWDCB\n         CR    R3,R1                      NEW DONE?\n         BE    NOTEQRET                   YES, RETURN\n         LR    R3,R1                      NOW SETUP THE NEW BUFFER\n         MVC   BUFFER+1(7),BLANKS\n         MVI   BUFFER+9,C'-'\n         MVC   BUFFER+10(91),BUFFER+9\n         MVC   BUFFER+102(19),BLANKS\n         CLI   PVECTOR,C'*'               PDS REENTRY?              ABL\n         BE    MOVEB22                    YES, BRANCH               ABL\n         TM    SYSPRINT+17,X'4F'          TSO OUTPUT \"DA(*)\"?       ABL\n         BNO   *+10                       NO, BRANCH                ABL\n         MVC   BUFFER+78(43),BLANKS       BLANK PAST SCREEN WIDTH   ABL\nMOVEB22  LA    R1,BUFFER                                            GLA\n         BAL   R14,PUTLINE                                          GLA\n         MVI   BUFFER,X'40'\n         B     MOVES\n         SPACE\nNOTEQRET L     R14,NOTEQR14\n         BR    R14\n         EJECT\n*\n*        DCB EXIT ROUTINE (USED BY ALL FILES)\n*\nDCBEXIT  LH    R3,BLKSI(,R1)              BLKSIZE\n         LR    R4,R3                      BLKSIZE        FIX-0C9\n         TM    RECFM(R1),X'10'            IS IT BLOCKED  FIX-0C9\n         BZ    *+8                        NO             FIX-0C9\n         LH    R4,LRECL(,R1)              BLOCKED, GET LRECL\n         SR    R2,R2\n         DR    R2,R4                      BLOCKSIZE/LRECL\n         MR    R2,R4                      BLOCKING*LRECL\n         CR    R3,R4                      BLOCKSIZE >  LRECL?\n         BH    *+10                       YES, BRANCH\n         LR    R3,R4                      MAKE BLKSIZE=LRECL\n         NI    RECFM(R1),255-X'10'        TURN OFF BLOCKING\n         STH   R3,BLKSI(,R1)              NEW BLOCKSIZE\n         STH   R3,24(,R1)                 BUFLEN PARAMETER\n         CLI   20(R1),X'00'               BUFNO=0?\n         BNER  R14                        NO, QUIT\n         MVI   20(R1),X'03'               DEFAULT TO 3 BUFFERS\n         BR    R14                        EXIT\n         SPACE 1\nSYSPRINT DCB   LRECL=121,RECFM=FBA,EXLST=EXITDCB,DDNAME=SYSPRINT,      X\n               MACRF=(PM),DSORG=PS\n         SPACE 1\nIGNORE   DCB   LRECL=80,RECFM=FB,EXLST=EXITDCB,DDNAME=IGNORE,          X\n               EODAD=ENDIG,MACRF=(GM),DSORG=PS\nFIRSTIG  DC    F'0'                     POINTER TO FIRST IGNORE RECORD\nLASTIG   DC    F'0'                     POINTER TO LAST IGNORE RECORD\n         SPACE 1\nOLDDCB   DCB   DDNAME=OLD,EXLST=OLDXLST2,                              X\n               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C\nRECFM    EQU   36\nDDNAM    EQU   40\nOFLGS    EQU   48\nLRECL    EQU   82\nBLKSI    EQU   62\nLOWOLD   DC    F'0'                     FIRST OLD RECORD\nHIGHOLD  DC    F'0'                     HIGHEST USED OLD RECORD\nCURROLD  DC    F'0'                     CURRENT OLD RECORD\nSAVER07  DC    F'0'                     SAVE REGISTER 7 (3RD BASE)\nOLDLIT   DC    C'OLD'\n         SPACE 1\nNEWDCB   DCB   DDNAME=NEW,EXLST=NEWXLST2,                              X\n               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C\nLOWNEW   DC    F'0'                     FIRST NEW RECORD\nHIGHNEW  DC    F'0'                     HIGHEST USED NEW RECORD\nCURRNEW  DC    F'0'                     CURRENT NEW RECORD\nNEWLIT   DC    C'NEW'\nLOW      EQU   LOWNEW-NEWDCB      DISPLACEMENT TO LOWOLD AND LOWNEW\nHIGH     EQU   HIGHNEW-NEWDCB     DISPLACEMENT TO HIGHOLD AND HIGHNEW\nCURR     EQU   CURRNEW-NEWDCB     DISPLACEMENT TO CURROLD AND CURRNEW\nOLDNEW   EQU   NEWLIT-NEWDCB      DISPLACEMENT TO OLD OR NEW LITERAL\n         EJECT\n         DS    0F\nEXITDCB  DC    X'85',AL3(DCBEXIT)\nRC       DC    H'0'\nCOUNT    DC    H'0'\nNUMBER   DC    XL3'0'\n*MLENGTH DC    AL1(71)             COMPARE LENGTH FOR EACH RECORD\nMLENGTH  DC    H'8'                ADJUSTMENT TO COMPARE LENGTH\nMIN      DC    0F'0',A(100*1024)    MINIMUM STORAGE TO GETMAIN   100K\nMAX      DC    A(2000*1024)         MAXIMUM STORAGE TO GETMAIN   2000K\nSIXTEENK DC    A(16*1024)           AMOUNT OF STORAGE TO RELEASE 16K\n*MIN     DC    0F'0',X'00014000'    MINIMUM CORE TO GETMAIN    80K\n*MAX     DC    X'000C8000'          MAXIMUM CORE TO GETMAIN   800K\n*FOURK   DC    X'00001000' F'4096'  AMOUNT OF CORE TO RELEASE\nSTARTADD DC    F'0'                 BUFFER START ADDRESS\nSIZE     DC    F'0'                 SIZE OF THE BUFFER AREA\nHIGHCORE DC    F'0'                 MAXIMUM BUFFER ADDRESS\nBSTRTA   DC    F'0'                 ADDRESS AFTER LAST OF IGNORES   BFG\nBUFFER   DC    X'004040404040406040000000606060'\n         DC    80X'00',X'606060000000',X'4060404040404040'\n         DC    12C' '\nBLANKS   DC    CL121' '\nWORKLINE DC    CL121' '\nEDCOUNT  DC    X'402020202120'\nEDMKPAT  DC    X'402020202020'\nCORE     DC    C'-CORE OVERFLOW - COMPARE ABANDONED '\nBLOCKS   DC    C' BLOCKS OF COMPARE ERRORS DETECTED '\nDEVAREA  DC    2F'0'\nNOTEQR14 DC    F'0'\nR14SAVE  DC    F'0'                                             ABL GLA\nPVECTOR  DC    F'0'                                             ABL GLA\nIGASMS   DC    A(DFTIG,DFTIG)           DEFAULT IGNORE TABLE        ABL\nDFTIG    DC    CL80'         EJECT   '                              ABL\n         DC    CL80'         SPACE   '                              ABL\n         DC    CL80'         SPACE 1 '                              ABL\n         DC    CL80'         SPACE 2 '                              ABL\n         DC    CL80'         SPACE 3 '                              ABL\n         DC    CL80'*                '                              ABL\nENDDFTIG EQU   *                                                    ABL\n         LTORG\nTSOXLATE DS    0D            STOP PROG753 WITH TERMINAL EMULATOR    -GP\n         DC    XL16'004B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B1C4B1E4B'   3270 DATA\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'   STREAMS ALLOW\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'   X'40' TO X'FE'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'   AS DISPLAYABLE\n         DC    XL16'505152535455565758595A5B5C5D5E5F'   CHARACTERS IN\n         DC    XL16'606162636465666768696A6B6C6D6E6F'   ALL CHARACTER\n         DC    XL16'707172737475767778797A7B7C7D7E7F'   SETS.  THAT\n         DC    XL16'808182838485868788898A8B8C8D8E8F'   DOESN'T MEAN\n         DC    XL16'909192939495969798999A9B9C9D9E9F'   THAT THERE IS\n         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'   A GOOD SYMBOL\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'   FOR EACH OF\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'   THESE CODE\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'   POINTS,\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'   THOUGH!\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'\n         DC    0D'0'\n         SPACE\n         END   COMPAREB\n//*\n//LNK2   EXEC  PGM=IEWL,PARM='MAP',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD(COMPAREB)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//*\n//COPH   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SYS2.HELP(COMPARE),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -\n  THE COMPARE COMMAND COMPARES TWO DATA SETS.  IT IS A FRONT-END TO\n  A BATCH UTILITY TO ENABLE THE COMPARE PROCESS TO BE CARRIED OUT\n  IN A TSO SESSION.\n\n  COMPARE INVOKES EITHER THE YALE COMPARE PROGRAM (COMPAREB)\n           -OR-   THE IBM COMPARE UTILITY PROGRAM (IEBCOMPR).\n\n  COMPAREB CAN COMPARE TWO SEQUENTIAL INPUTS (WHICH MAY BE A\n  SEQUENTIAL FILE OR A SINGLE MEMBER FROM A PARTITIONED DATA SET).\n\n  COMPAREB CAN COMPARE TWO PARTITIONED LIBRARIES SO THAT LIKE-NAMED\n  MEMBERS ARE COMPARED WHENEVER A MEMBER NAME MATCH OCCURS, AND A\n  LISTING OF MEMBER NAME MATCHING DETAILS IS ALSO PRODUCED.\n\n  COMPAREB CAN COMPARE RECORDS OF FIXED, VARIABLE OR UNDEFINED RECORD\n  LENGTH.  THE SHORTER OF THE TWO INPUT MAXIMUM RECORD LENGTHS IS\n  COMPARED.  FOR VARIABLE LENGTH RECORDS, THE RDW (RECORD DESCRIPTOR\n  WORD) IS ALSO COMPARED.  FOR UNDEFINED LENGTH RECORDS, A DIFFERENCE\n  OF ONLY EXTRA TRAILING NULLS WILL NOT BE DETECTED.  BECAUSE COMPAREB\n  COMPARES PHYSICAL BIT PATTERNS, LOAD MODULES AND SPANNED RECORD FILES\n  THAT HAVE BEEN REBLOCKED WILL PROBABLY COMPARE AS HAVING SUBSTANTIAL\n  DIFFERENCES EVEN THOUGH THEY CONTAIN LOGICALLY EQUIVALENT DATA.\n\n  COMPAREB WILL NOT COMPARE THE LAST EIGHT BYTES OF THE MAXIMUM RECORD\n  LENGTH (OFTEN RESERVED FOR SEQUENCE NUMBERS) UNLESS 'FULL' IS\n  SPECIFIED.\n\n  (FOR INFORMATION ABOUT INVOKING 'COMPAREB' DIRECTLY WITHOUT THE\n  TSO 'COMPARE' COMMAND FRONT END, ENTER\n                                         HELP COMPARE O(YALE)\n  UNDER TSO.)\n\n)X SYNTAX  -\n         COMPARE  'OLD-DSNAME'  'NEW-DSNAME'  IEBCOMPR\n             FULL  ASM/NOASM\n             OVOL('VOLUME')  OUNIT('UNIT')\n             NVOL('VOLUME')  NUNIT('UNIT')\n             SYSOUT / PRINT / NOPRINT / OUTFILE('DDNAME')\n\n  REQUIRED - 'OLD DSNAME'   'NEW DSNAME'\n  DEFAULTS - THE YALE COMPARE PROGRAM (COMPAREB) IS USED.\n             PRINT - DISPLAY DIFFERENCES ON TSO TERMINAL.\n             ASM   - IGNORE ASSEMBLER SOURCE 'SPACE', 'EJECT'\n                     AND BLANK COMMENT CARD IMAGES.\n  ALIAS    - NONE\n)O OPERANDS -\n  'OLD-DSNAME' -  THE NAME OF THE SYSUT1 OR OLD DATA SET.\n             A MEMBER NAME MAY BE SPECIFIED IF IT IS PARTITIONED.\n  'NEW-DSNAME' -  THE NAME OF THE SYSUT2 OR NEW DATA SET.\n             A MEMBER NAME MAY BE SPECIFIED IF IT IS PARTITIONED.\n             IF THE DATA SET IS PARTITIONED AND A MEMBER IS NOT\n             SPECIFIED, THE MEMBER DEFAULTS TO THE OLD MEMBER NAME.\n))FULL     - INCLUDE THE SEQUENCE NUMBERS IN THE COMPARISON.\n             IT SHOULD ALMOST CERTAINLY BE SPECIFIED FOR ANY\n             UNDEFINED OR VARIABLE LENGTH RECORD INPUT.\n             (COMPAREB ONLY.)\n))ASM      - SPECIFIES THAT THE COMPARISON DATA IS ASSEMBLER SOURCE.\n             SEQUENCE NUMBERS, 'SPACE', 'EJECT' AND BLANK COMMENT\n             CARD IMAGES WILL NOT BE COMPARED.  (COMPAREB ONLY.)\n))NOASM    - SPECIFIES THAT THE COMPARISON DATA IS NOT ASSEMBLER\n             SOURCE.  (COMPAREB ONLY.)\n))IEBCOMPR - THE IBM UTILITY PROGRAM 'IEBCOMPR' IS TO BE USED.\n))OVOL     - VOLUME CONTAINING OLD DATA SET.  NOT NEEDED IF CATALOGED.\n             IF YOU USE OVOL, YOU SHOULD ALSO USE NVOL EVEN IF THE\n             NEW DATA SET IS CATALOGED.\n))OUNIT    - UNIT NAME FOR ALLOCATING OLD DATA SET.\n             NOT NEEDED IF CATALOGED.\n))NVOL     - VOLUME CONTAINING NEW DATA SET.  NOT NEEDED IF CATALOGED.\n             IF YOU USE NVOL, YOU SHOULD ALSO USE OVOL EVEN IF THE\n             OLD DATA SET IS CATALOGED.\n))NUNIT    - UNIT NAME FOR ALLOCATING NEW DATA SET.\n             NOT NEEDED IF CATALOGED.\n))PRINT    - DIRECTS MESSAGES TO THE TERMINAL.  THIS IS THE DEFAULT.\n))NOPRINT  - DIRECTS MESSAGES TO A DUMMY FILE.\n))SYSOUT   - DIRECTS MESSAGES TO A SYSOUT DATA SET.\n))OUTFILE  - DIRECTS MESSAGES TO THE SPECIFIED DDNAME.\n\n))YALE     - 'YALE' IS NOT AN OPERAND, BUT JUST A HELP ENTRY TO\n             DOCUMENT THE 'COMPAREB' BATCH UTILITY.\n\n             'COMPAREB' REQUIRES JCL SIMILAR TO THE FOLLOWING:\n\n             //        EXEC PGM=COMPAREB,REGION=2M,\n             //             PARM='SIZE=NNNN,TYPE=OPT1,PRINT=OPT2'\n             //SYSPRINT DD  SYSOUT=*\n             //OLD      DD  DSN=YOUR.INPUT1,DISP=SHR\n             //NEW      DD  DSN=YOUR.INPUT2,DISP=SHR\n             //IGNORE   DD  *            <=== OMIT IF NOT REQUIRED\n             IGNORE CARD-IMAGE 1\n             ...\n             IGNORE CARD-IMAGE N\n             /*\n\n    WHERE    NNNN IS 3 OR 4 NUMERICS INDICATING AN ESTIMATE OF HOW\n                  MANY MEMBERS EXIST IN THE PDS WITH THE MOST MEMBERS.\n                  THE DEFAULT VALUE IS 9999.  IF A VALUE OF LESS THAN\n                  100 IS SUPPLIED, THE PROGRAM WILL CHANGE THE VALUE\n                  TO 100.  IF THERE ARE MORE MEMBERS THAN INDICATED\n                  BY THE SIZE PARAMETER, THE PROGRAM MAY ABEND.\n\n             OPT1 IS EITHER 'FULL', 'ASM', OR NOT SPECIFIED (THE\n                  DEFAULT).  ACTUALLY, IF THE USER PROVIDES ANY VALUE\n                  OTHER THAN 'FULL', OR 'ASM' THEN THE DEFAULT WILL BE\n                  ASSUMED.\n                  -TYPE=FULL INDICATES THAT ALL BYTES OF THE INPUT\n                   RECORD WILL BE USED IN THE COMPARISON.\n                  -TYPE=ASM INDICATES THAT THE DEFAULT IGNORE\n                   ASSEMBLER DATA WILL BE USED.\n                  -IF NOT SPECIFIED THEN THE LAST EIGHT BYTES OF THE\n                   RECORD WILL NOT BE COMPARED, AND NO DEFAULT\n                   IGNORE DATA WILL BE USED.\n                  -PARM='TYPE=FULL,TYPE=ASM' IS A VALID PARAMETER.\n\n             OPT2 IS 'MEM', 'DIR', OR 'NAME'; 'NAME' IS THE DEFAULT\n                  VALUE.  PRINT=MEM INDICATES THAT IF ONE PDS CONTAINS\n                  A MEMBER, BUT THE OTHER PDS DOES NOT CONTAIN A MEMBER\n                  WITH THE SAME NAME, THE  ENTIRE MEM WILL BE LISTED.\n                  PRINT=DIR INDICATES THAT THE COMPARISON OF MEMBERS\n                  WON'T TAKE PLACE, BUT THE RECAP RPT WILL BE PRODUCED\n                  TO SHOW WHICH MEMBERS EXISTS IN EACH PDS.  PRINT=NAME\n                  INDICATES THAT UNMATCHED MEMBERS WILL NOT BE PRINTED\n                  IN THEIR ENTIRITY, HOWEVER, THEY WILL BE FLAGGED AS\n                  UNMATCHED ON THE RECAP REPORT.\n\n      THE 'NEW' AND 'OLD' DD STATEMENTS SHOULD BOTH POINT TO EITHER\n      PDS DATASETS OR SEQUENTIAL DATASETS (OR A MEMBER OF A PDS). IF\n      THE DATASET TYPES ARE MISMATCHED THEN THE COMPARISON TERMINATES\n      WITH A RETURN CODE OF 16.\n\n **   NOTE: 'COMPAREB' WILL ONLY SHOW THE FIRST PART OF LONG\n **   RECORDS THAT CAUSE MISMATCHES.\n\n      OBVIOUSLY, THIS INFORMATION CAN BE ADAPTED TO THE TSO ENVIRONMENT\n      WHERE 'COMPAREB' CAN BE INVOKED WITH THE TSO 'CALL' COMMAND,\n      OR AN INSTALLATION-DEPENDENT LINKLIST-CALL COMMAND SUCH AS\n      'INVOKE' OR '$'.\n//*\n//COPP   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SYS3.HAL.PLIB(COMPR#P),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)BODY\n%---------------------------  File Compare Utility  --------------------\n%COMMAND ===>_ZCMD\n+\n+    Compare two files using %COMPARE+(either PDS or sequential)\n+\n+    ENTER file1%===>_DSN1\n+         VOLSER%===>_VOL1  +  (If not cataloged)\n+\n+    ENTER file2%===>_DSN2\n+         VOLSER%===>_VOL2  +  (If not cataloged)\n+\n+    Options:\n+\n+       ALC code%===>_ALC+      %YES+- is Assembler Language Code\n+                                      (sequence numbers 73-80)\n+                               %NO+ - is not Assembler Language Code\n+\n+   Print after browsing the report %===>_CMSPRT+     (%Y+or%N+)\n+\n+   Charge number for print         %===>_CMSCHG  +\n)INIT\n .CURSOR = DSN1\n &DSN1   = TRANS (&DSN1 ' ',' ',*,*)\n &DSN2   = TRANS (&DSN2 ' ',' ',*,*)\n &ALC    = TRANS (&ALC ' ',NO,*,*)\n &VOL1   = TRANS (&VOL1 ' ',' ',*,*)\n &VOL2   = TRANS (&VOL2 ' ',' ',*,*)\n &CMSPRT = 'N'\n)PROC\n VER (&DSN1,NONBLANK,DSNAME)\n VER (&DSN2,NONBLANK,DSNAME)\n &ALC = TRUNC (&ALC,1)\n VER (&ALC,LIST,N,Y)\n &ALC = TRANS (&ALC Y,YES,N,NO)\n &CMSPRT = TRUNC (&CMSPRT,1)\n VER (&CMSPRT,NB,LIST,Y,N)\n IF (&CMSPRT = 'Y')\n    VER (&CMSCHG,NB,NAME)\n &ZSEL = 'CMD(%COMPR#C)'\n VPUT (ALC,CMSPRT,DSN1,DSN2,VOL1,VOL2) SHARED\n VPUT (CMSCHG) PROFILE\n)END\n//*\n//COPC   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SYS3.HAL.CLIB(COMPR#C),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\nPROC 0\n /*--------------------------------------------------------*/\n /*      ISPF/PDF CLIST FOR TSO COMMAND  'COMPARE'         */\n /*--------------------------------------------------------*/\nCONTROL NOMSG PROMPT\nSET &CMPRPT = CMPLIST1\nSET &EFLAG = 0\nSET &RTC = 0\nERROR +\n   DO\n       DO WHILE &EFLAG = 0\n           RETURN\n       END\n       DO WHILE &EFLAG = 2\n           SET &EFLAG = 1\n           SET &CMPRPT = CMPLIST2\n           ALLOC DA('&SYSUID..&CMPRPT') FI(CMPRPT) +\n               SP(5,5) CYLINDERS RELEASE USI(T)\n           RETURN\n       END\n       DO WHILE &EFLAG = 5\n           SET &RTC = &LASTCC\n           IF &RTC < 9 THEN RETURN\n           WRITE &EMSG\n           RETURN\n       END\n       DO WHILE &EFLAG \u00ac= 0\n           WRITE &EMSG\n           EXIT\n       END\n   END\nISPEXEC VGET (CMSPRT DSN1 DSN2 ALC VOL1 VOL2)\nFREE FI(CMPRPT,OLD,NEW) ATTR(T)\nATTR T RECFM(F B A) BLKSI(19019) LRE(133) BUFN(2)\nDELETE ('&SYSUID..CMPLIST1')\nDELETE ('&SYSUID..CMPLIST2')\nSET &EFLAG = 1\nSET &EMSG=&STR(ERROR IN ALLOCATION OF CMPRPT FILE)\nCONTROL NOFLUSH\nSET &EFLAG = 2\nSET &LASTCC = 0\nALLOC FI(CMPRPT) DA('&SYSUID..&CMPRPT') +\n     SP(5,5) CYLINDERS RELEASE USI(T)\nCONTROL MSG\nSET &EFLAG = 5\nSET &EMSG=&STR(COMPARE PROGRAM RETURN CODE NON ZERO)\nIF &ALC = YES THEN SET &TX = ASM\nIF &ALC = NO  THEN SET &TX = NOASM\nIF &VOL1 =   THEN SET &V1 =\n   ELSE SET &V1 = &STR(OVOLUME(&VOL1))\nIF &VOL2 =   THEN SET &V2 =\n   ELSE SET &V2 = &STR(NVOLUME(&VOL2))\n\nCOMPARE &DSN1 &DSN2 &V1 &V2 &TX OUTFILE(CMPRPT)\n\nCONTROL NOMSG\nSET &EFLAG = 0\nFREE FI(CMPRPT,NEW,OLD) ATTR(T)\nIF &RTC > 4 THEN GOTO DONE\nISPEXEC BROWSE DATASET('&SYSUID..&CMPRPT')\nIF &CMSPRT = N THEN GOTO DONE\nISPEXEC VPUT (CMPRPT) SHARED\nISPEXEC FTOPEN TEMP\nISPEXEC FTINCL COMPR#S\nISPEXEC FTCLOSE\nISPEXEC VGET (ZTEMPF)\nCONTROL MSG\nSUBMIT '&ZTEMPF'\nEXIT\nDONE:  DELETE ('&SYSUID..&CMPRPT')\nEXIT\n//*\n//COPS   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SYS3.HAL.SLIB(COMPR#S),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  DATA\n//&ZUSER.C     JOB  (&CMSCHG),&ZUSER,CLASS=A,MSGCLASS=Z\n//TMSRPT       EXEC PGM=IEBGENER\n//SYSIN        DD   DUMMY\n//SYSPRINT     DD   SYSOUT=Z\n//SYSUT1       DD   DSN=&ZUSER..&CMPRPT,DISP=(OLD,DELETE)\n//SYSUT2       DD   SYSOUT=A\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMPAREB": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x01\\x1f\\x01\\x00\\x01\\x1f\\x15 \\x07;\\x07;\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-11T00:00:00", "modifydate": "2000-01-11T15:20:00", "lines": 1851, "newlines": 1851, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE 'PDS/SEQ COMPARE PROGRAM -- USE YALE COMPARE PGM LOGIC'\n*$DOC$*****************************************************************\n*                                                                     *\n*   THIS IS AN ENHANCEMENT (COMBINATION) OF TWO FLAVORS OF THE YALE   *\n*   COMPARE PROGRAM. THE FIRST WAS TAKEN FROM FILE 45 OF THE CBT      *\n*   TAPE AND WAS MODIFIED FROM THE ORIGINAL BY MR. BRENT TOLMAN.      *\n*   THE SECOND SOURCE IS THE VERSION FROM FILE 300 OF THE CBT TAPE    *\n*   AND WAS MODIFIED BY MR. BILL GODFREY AND MR. JIM MARSHALL         *\n*   ADDITIONAL CODE FROM THE VERSION FROM FILE 296 OF THE CBT TAPE    *\n*   HAS BEEN ADDED TO ALLOW THIS VERSION TO ALSO FUNCTION UNDER       *\n*   THE PDS COMMAND. FILE 296 IS FROM MR. BRUCE LELAND                *\n*                                                                     *\n*   THE INTEND OF THIS COMBINATION IS TO PRODUCE A VERSION THAT       *\n*   CAN COMPARE EITHER TWO ENTIRE PDS'S, OR TWO SEQUENTIAL FILES.     *\n*   IT IS ALSO DESIRED THAT IT CAN BE INVOKED BY THE 'COMPARE'        *\n*   TSO COMMAND WRITTEN BY MR. BILL GODFREY.                          *\n*                                                                     *\n*                                                                     *\n*   THE FEATURES IN THIS PROGRAM ARE:                                 *\n*    1. USES THE YALE COMPARE PROGRAM LOGIC FOR COMPARING AND RESYNC- *\n*       RONIZATRION.                                                  *\n*    2. SUPPORTS COMPARES OF FULL PDS DATASETS (DON'T SPECIFY A       *\n*       MEMBER NAME TO USE THIS FEATURE).                             *\n*    3. SUPPORTS COMPARES OF TWO SEQUENTIAL DATASETS (EITHER REAL     *\n*       SEQUENTIAL DATASETS OR MEMBERS SPECIFIED IN JCL).             *\n*    4. SUPPORTS RECORD SIZES DIFFERENT FROM 80 BYTES BUT LESS THAN   *\n*       256 BYTES (NOTE IGNORE CARDS MUST BE 80 BYTES LONG) -SEE BELOW*\n*    5. CAN BE INVOKED WITH A DDNAME PARAMETER LIST FROM THE          *\n*       'COMPARE' TSO COMMAND (MODIFIED FROM CBT FILE 300).           *\n*    6. ALSO ENCLOSED IS THE NECESSARY PANEL, CLIST, AND SKELETON     *\n*       TO INVOKE IT UNDER ISPF                                       *\n*    7. CODE FROM MR. BRUCE LELAND TO SUPPORT THE PDS COMMAND HAS     *\n*       ALSO BEEN IMPLEMENTED.                                        *\n*                                                                     *\n*   GUY L. ALBERTELLI                                                 *\n*   B. F. GOODRICH                                                    *\n*   3925 EMBASSY PARKWAY                                              *\n*   AKRON, OHIO  44313                                                *\n*       216-374-4071                                                  *\n*                                                                     *\n*                                                                     *\n*   SEVERAL CHANGES WERE MADE TO THIS PROGRAM ON 6/10/88 TO BETTER    *\n*   SUPPORT ITS USE FROM THE PDS COMMAND PROCESSOR:                   *\n*    1. CHANGES WERE MADE TO ALLOW PDS CHECKPOINT PROCESSING TO       *\n*       TERMINATE THE COMPARISON.                                     *\n*    2. ADDED CODE TO SUPPRESS PAGES CONTAINING ONLY HEADER           *\n*       INFORMATION FOR MEMBERS THAT COMPARE AS EQUAL.                *\n*    3. ADDED CODE TO SUPPRESS OUTPUT LINES IN THE RECAP REPORT       *\n*       FOR MEMBERS THAT COMPARE AS EQUAL.                            *\n*    4. ADDED FREEPOOL INSTRUCTIONS AFTER DCB CLOSE STATEMENTS SO     *\n*       THAT PDS CAN LINK TO THIS ROUTINE WITHOUT LOSING STORAGE.     *\n*    5. ADDED FREEMAIN INSTRUCTIONS FOR THE DYNAMIC AREA AND THE      *\n*       MEMBER STORAGE ARRAY.                                         *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n*     BURLINGAME, CA  94010                                           *\n*     (415) 696-1800                       HOME (408) 997-2366        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n*   THE PROGRAM IS SELF CONTAINED;  SIMPLY ASSEMBLE AND LINK          *\n*   AND ITS READY TO USE.                                             *\n*                                                                     *\n*   THE JCL NEEDED TO EXECUTE COMPAREB FOLLOWS:                       *\n*       1) //         EXEC PGM=COMPAREB,REGION=2000K,                 *\n*       2) //             PARM='SIZE=NNNN,TYPE=OPT1,PRINT=OPT2'       *\n*       3) //SYSPRINT DD  SYSOUT=*                                    *\n*       4) //NEW      DD  DSN=PDS1,DISP=SHR                           *\n*       5) //OLD      DD  DSN=PDS2,DISP=SHR                           *\n*       6) //IGNORE   DD  *      OPTIONAL                             *\n*                                                                     *\n*   WHERE    NNNN IS 3 OR 4 NUMERICS INDICATING AN ESTIMATE OF HOW    *\n*                 MANY MEMBERS EXIST IN THE PDS WITH THE MOST MEMBERS.*\n*                 THE DEFAULT VALUE IS 9999.  IF A VALUE OF LESS THAN *\n*                 100 IS SUPPLIED, THE PROGRAM WILL CHANGE THE VALUE  *\n*                 TO 100.  IF THERE ARE MORE MEMBERS THAN INDICATED   *\n*                 BY THE SIZE PARAMETER, THE PROGRAM MAY ABEND.       *\n*                                                                     *\n*            OPT1 IS EITHER 'FULL', 'ASM', OR NOT SPECIFIED (THE      *\n*                 DEFAULT). ACTUALLY, IF THE USER PROVIDES ANY VALUE  *\n*                 OTHER THAN 'FULL', OR 'ASM' THEN THE DEFAULT WILL BE*\n*                 ASSUMED.                                            *\n*                 -TYPE=FULL INDICATES THAT ALL 80 COLS OF THE CARD   *\n*                  IMAGE PDS WILL BE USED IN THE COMPARISON.          *\n*                 -TYPE=ASM INDICATES THAT COLS 1-72 OF THE CARD      *\n*                  IMAGE PDS WILL BE USED IN THE COMPARISON AND THE   *\n*                  DEFAULT IGNORE ASSEMBLER DATA WILL BE USED.        *\n*                 -IF NOT SPECIFIED ONLY COLS 1-72 WILL BE COMPARED,  *\n*                  AND NO DEFAULT IGNORE DATA WILL BE USED.           *\n*                                                                     *\n*            OPT2 IS 'MEM', 'DIR', OR 'NAME'; 'NAME' IS THE DEFAULT   *\n*                 VALUE.  PRINT=MEM INDICATES THAT IF ONE PDS CONTAINS*\n*                 A MEMBER, BUT THE OTHER PDS DOES NOT CONTAIN A MEMBER\n*                 WITH THE SAME NAME, THE  ENTIRE MEM WILL BE LISTED. *\n*                 PRINT=DIR INDICATES THAT THE COMPARISON OF MEMBERS  *\n*                 WON'T TAKE PLACE, BUT THE RECAP RPT WILL BE PRODUCED*\n*                 TO SHOW WHICH MEMBERS EXISTS IN EACH PDS.  PRINT=NAME\n*                 INDICATES THAT UNMATCHED MEMBERS WILL NOT BE PRINTED*\n*                 IN THEIR ENTIRITY, HOWEVER, THEY WILL BE FLAGGED AS *\n*                 UNMATCHED ON THE RECAP REPORT.                      *\n*                                                                     *\n*     THE 'NEW' AND 'OLD' DD STATEMENTS SHOULD BOTH POINT TO EITHER   *\n*     PDS DATASETS OR SEQUENTIAL DATASETS (OR A MEMBER OF A PDS). IF  *\n*     THE DATASET TYPES ARE MISMATCHED THEN THE COMPARISON TERMINATES *\n*     WITH A RETURN CODE OF 16.                                       *\n*                                                                     *\n*$DOC$*****************************************************************\n         EJECT                                                      BFG\n*          DATA SET CBT1274J   AT LEVEL 002 AS OF 07/20/83\n* CHANGED PARM DEFAULT FROM 1000 TO 9999     AXC-CBT\n*\n*   THIS IS AN ENHANCEMENT TO THE YALE COMPARE PROGRAM THAT IS\n*   DISTRIBTED AS FILE 226 ON THE CONN. BANK MODS TAPE.  THE PURPOSE\n*   OF THE ENHANCEMENT IS TO ALLOW THE COMPARE PROGRAM TO PROCESS\n*   TWO PDS FILES RATHER THAN TWO SEQUENTIAL FILES.  THE ORIGINAL\n*   PROGRAM HAS BEEN MODIFIED A LITTLE TO ACCOMODATE THE FRONT\n*   END PDS PROCESSOR.\n*\n*\n*\n*   THE OUTPUT OF THE PROGRAM CONSISTS OF A DETAILED LISTING AND A\n*   RECAP REPORT.  THE DETAILED LISTING SHOWS:\n*      - THE MEMBER NAME, DATA SET NAME, AND VOL/SER OF EACH MEMBER\n*        PROCESSED.\n*      - ANY DIFFERENCES THAT EXIST BETWEEN THE MEMBERS.\n*      - A COUNT OF UNEQUAL BLOCKS OF DATA AS WELL AS THE RECORD COUNTS\n*        FOR EACH MEMBER.\n*   THE RECAP LISTING FORMAT IS:\n*      OLD MEM=XXXXXXXX PAGE NNNN NEW MEM=YYYYYYYY STATUS\n*      THE STATUS MAY BE\n*          - EQUAL           BOTH MEMBERS ARE THE SAME\n*          - NOT EQUAL       THERE ARE DIFFERENCES\n*          - NO MATCH        THE MEMBER EXISTS IN ONLY ONE PDS\n*\n*   WE USE THE PROGRAM TO COMPARE PARMLIB, PROCLIBS, ETC. FROM ONE\n*   CPU TO ANOTHER AND ALSO AS AN AID WHEN INSTALLING NEW SCP RELEASES.\n*\n*   BRENT TOLMAN\n*   TRANSPORTAION MANAGEMENT SERVICES\n*   SALT LAKE CITY, UT\n*\n*\n*\n*\n          EJECT\n*$DOC$*****************************************************************\n*                                                                     *\n* COMPAREB - A MODIFIED VERSION OF THE YALE COMPARE PROGRAM.          *\n*                                                                     *\n* MODIFICATIONS AT AFDSC/PENTAGON:                                    *\n*  07MAY81 - BILL GODFREY, PLANNING RESEARCH CORP.                    *\n*   .  CHECK FOR 'IGNORE' DD WITH DEVTYPE AND BYPASS OPEN IF NOT      *\n*      FOUND, SO OPEN WILL NOT WTO 'DD STATEMENT MISSING'.            *\n*   .  NAME CHANGED TO 'COMPAREB' (SAVING NAME 'COMPARE' FOR A TSO    *\n*      COMMAND WHICH WILL INVOKE THIS PROGRAM).                       *\n*   .  ACCEPT ALTERNATE DDNAMES FROM INVOKER.                         *\n*      DDNAMES ARE IN SAME SLOTS AS IBM UTILITIES.                    *\n*   .  USE R11 AS BASE REGISTER INSTEAD OF R13                        *\n*   .  CONVERT PARM TO CAPS.                                          *\n*   .  CHANGE SYSPRINT LRECL FROM 109 TO 121                          *\n*   .  TEST ALL DCB'S FOR SUCCESSFUL OPEN                             *\n*  09JUN81 - BILL GODFREY                                             *\n*   .  PROGRAM CHANGED TO ALLOW RECORDS LONGER THAN 80 BYTES TO       *\n*      BE COMPARED.  A GOOD WAY TO COMPARE LOAD MODULES IS TO         *\n*      COMPARE HEX DUMPS OF THEM. NOW THIS PROGRAM CAN COMPARE        *\n*      PRINT FILES (IF THEY ARE FIXED LENGTH RECORDS).                *\n*   .  CHANGE ALL BAL-R10 INSTRUCTIONS TO USE BAL-R14 INSTEAD,        *\n*      (AND SAVE R14) SO WE CAN USE R10 FOR ANOTHER PURPOSE.          *\n*   .  PUT THE RECORD LENGTH IN R10.                                  *\n*   .  CHANGE ALL INSTRUCTIONS THAT USE THE RECORD LENGTH (80)        *\n*      OR 2 RECORD LENGTHS (160) TO USE THE VALUE IN REGISTER R10     *\n*      INSTEAD, SO THE PROGRAM CAN COMPARE MORE THAN 80 BYTES.        *\n*   .  CHANGE MLENGTH FIELD TO A HALFWORD AND USE IT TO HOLD          *\n*      A ZERO OR AN EIGHT INSTEAD OF A 79 OR 71.                      *\n*   .  FIX S0C9 IN DCB OPEN EXIT, DIVIDING BY LRECL ZERO WHEN         *\n*      RECFM IS UNBLOCKED.                                            *\n*   .  PROGRAM WILL NO LONGER USE DEFAULT IGNORE DATA (FOR ASSEMBLER  *\n*      SOURCE) UNLESS PARM=ASM IS SPECIFIED.                          *\n*   .  FIX PARM FIELD BUG INTRODUCED 07MAY81, PARM=FULL WAS NEVER     *\n*      RECOGNIZED AFTER THAT CHANGE.                                  *\n*   .  CHECK PARM FIELD FOR 'FULL' OR 'ASM' ANYWHERE IN FIRST 16      *\n*      BYTES.                                                         *\n*  16JUN81 - BILL GODFREY                                             *\n*   .  FIX PARM DD BUG INTRODUCED 09JUN81.                            *\n*      R1 WAS DESTROYED PRIOR TO PARMX. USE R4 INSTEAD OF R1.         *\n*   .  CHANGE R10 TO 256 IF LRECL GREATER THAN 256.                   *\n*                                                                     *\n*   NOTE: THIS PROGRAM WORKS CORRECTLY ONLY ON FIXED LENGTH RECORDS   *\n*   FROM 80 TO 256 BYTES LONG. ONLY THE FIRST 80 BYTES OF A RECORD    *\n*   ARE LISTED. NO WARNING MESSAGE IS ISSUED FOR RECORDS LONGER THAN  *\n*   256 OR VARIABLE LENGTH.  ** NO LONGER APPLICABLE -- GP MAR 92 **  *\n*                                                                     *\n*  21NOV91 - GREG PRICE (GP@P6)                                       *\n*   .  HANDLE LRECL LESS THAN 80                                      *\n*      - NEVER MOVE MORE THAN LRECL BYTES TO PRINT LINE BUFFER        *\n*      - FORCE 'FULL' IF LRECL IS NOT GREATER THAN 8                  *\n*  30MAR92 - GREG PRICE (GP)                                          *\n*   .  CORRECTLY DETECT TYPE=ASM, DO NOT CORRUPT PARM LENGTH REG R2   *\n*   .  ADD ROUTCDE=(11) TO ALL WTOS EXCEPT ONE WHICH ALREADY HAD IT   *\n*   .  PUT TIME AND JULIAN DATE IN PAGE HEADING LINE                  *\n*   .  COMPARE WHOLE RECORD EVEN IF MORE THAN 256 BYTES LONG          *\n*   .  HANDLE UNDEFINED AND VARIABLE LENGTH RECORDS                   *\n*  12OCT92 - GREG PRICE (GP@FT)                                       *\n*   .  AVOID S0C4 BY SKIPPING IGNORE TEST IF NOT FIXED LENGTH RECORDS *\n*  12JUN93 - BRUCE LELAND AS SUGGESTED BY GREG PRICE                  *\n*   .        MADE CHANGES TO GETMAIN A VARIABLE AMOUNT OF             *\n*   .        STORAGE BETWEEN 100K AND 2000K; THEN FREEMAIN 16K        *\n*   .        (PREVIOUSLY BETWEEN 80K AND 800K; THEN FREEMAIN 4K)      *\n*                                                                     *\n*$DOC$*****************************************************************\n         EJECT\n         TITLE 'PDS/SEQ COMPARE PROGRAM -- USE YALE COMPARE PGM LOGIC'\n*$DOC$*****************************************************************\n*                                                                     *\n*   THIS IS AN ENHANCEMENT (COMBINATION) OF TWO FLAVORS OF THE YALE   *\n*   COMPARE PROGRAM. THE FIRST WAS TAKEN FROM FILE 45 OF THE CBT      *\n*   TAPE AND WAS MODIFIED FROM THE ORIGINAL BY MR. BRENT TOLMAN.      *\n*   THE SECOND SOURCE IS THE VERSION FROM FILE 300 OF THE CBT TAPE    *\n*   AND WAS MODIFIED BY MR. BILL GODFREY AND MR. JIM MARSHALL         *\n*   ADDITIONAL CODE FROM THE VERSION FROM FILE 296 OF THE CBT TAPE    *\n*   HAS BEEN ADDED TO ALLOW THIS VERSION TO ALSO FUNCTION UNDER       *\n*   THE PDS COMMAND. FILE 296 IS FROM MR. BRUCE LELAND                *\n*                                                                     *\n*   THE INTEND OF THIS COMBINATION IS TO PRODUCE A VERSION THAT       *\n*   CAN COMPARE EITHER TWO ENTIRE PDS'S, OR TWO SEQUENTIAL FILES.     *\n*   IT IS ALSO DESIRED THAT IT CAN BE INVOKED BY THE 'COMPARE'        *\n*   TSO COMMAND WRITTEN BY MR. BILL GODFREY.                          *\n*                                                                     *\n*                                                                     *\n*   THE FEATURES IN THIS PROGRAM ARE:                                 *\n*    1. USES THE YALE COMPARE PROGRAM LOGIC FOR COMPARING AND RESYNC- *\n*       RONIZATRION.                                                  *\n*    2. SUPPORTS COMPARES OF FULL PDS DATASETS (DON'T SPECIFY A       *\n*       MEMBER NAME TO USE THIS FEATURE).                             *\n*    3. SUPPORTS COMPARES OF TWO SEQUENTIAL DATASETS (EITHER REAL     *\n*       SEQUENTIAL DATASETS OR MEMBERS SPECIFIED IN JCL).             *\n*    4. SUPPORTS RECORD SIZES DIFFERENT FROM 80 BYTES BUT LESS THAN   *\n*       256 BYTES (NOTE IGNORE CARDS MUST BE 80 BYTES LONG) -SEE BELOW*\n*    5. CAN BE INVOKED WITH A DDNAME PARAMETER LIST FROM THE          *\n*       'COMPARE' TSO COMMAND (MODIFIED FROM CBT FILE 300).           *\n*    6. ALSO ENCLOSED IS THE NECESSARY PANEL, CLIST, AND SKELETON     *\n*       TO INVOKE IT UNDER ISPF                                       *\n*    7. CODE FROM MR. BRUCE LELAND TO SUPPORT THE PDS COMMAND HAS     *\n*       ALSO BEEN IMPLEMENTED.                                        *\n*                                                                     *\n*   GUY L. ALBERTELLI                                                 *\n*   B. F. GOODRICH                                                    *\n*   3925 EMBASSY PARKWAY                                              *\n*   AKRON, OHIO  44313                                                *\n*       216-374-4071                                                  *\n*                                                                     *\n*                                                                     *\n*   SEVERAL CHANGES WERE MADE TO THIS PROGRAM ON 6/10/88 TO BETTER    *\n*   SUPPORT ITS USE FROM THE PDS COMMAND PROCESSOR:                   *\n*    1. CHANGES WERE MADE TO ALLOW PDS CHECKPOINT PROCESSING TO       *\n*       TERMINATE THE COMPARISON.                                     *\n*    2. ADDED CODE TO SUPPRESS PAGES CONTAINING ONLY HEADER           *\n*       INFORMATION FOR MEMBERS THAT COMPARE AS EQUAL.                *\n*    3. ADDED CODE TO SUPPRESS OUTPUT LINES IN THE RECAP REPORT       *\n*       FOR MEMBERS THAT COMPARE AS EQUAL.                            *\n*    4. ADDED FREEPOOL INSTRUCTIONS AFTER DCB CLOSE STATEMENTS SO     *\n*       THAT PDS CAN LINK TO THIS ROUTINE WITHOUT LOSING STORAGE.     *\n*    5. ADDED FREEMAIN INSTRUCTIONS FOR THE DYNAMIC AREA AND THE      *\n*       MEMBER STORAGE ARRAY.                                         *\n*                                                                     *\n*   A. BRUCE LELAND                                                   *\n*   HITACHI AMERICA LTD.                                              *\n*   2210 O'TOOLE AVENUE                                               *\n*   SAN JOSE, CAL.  95131                                             *\n*       408-435-2078                                                  *\n*                                                                     *\n*                                                                     *\n*   THE PROGRAM IS SELF CONTAINED;  SIMPLY ASSEMBLE AND LINK          *\n*   AND ITS READY TO USE.                                             *\n*                                                                     *\n*   THE JCL NEEDED TO EXECUTE COMPAREB FOLLOWS:                       *\n*       1) //         EXEC PGM=COMPAREB,REGION=2000K,                 *\n*       2) //             PARM='SIZE=NNNN,TYPE=OPT1,PRINT=OPT2'       *\n*       3) //SYSPRINT DD  SYSOUT=*                                    *\n*       4) //NEW      DD  DSN=PDS1,DISP=SHR                           *\n*       5) //OLD      DD  DSN=PDS2,DISP=SHR                           *\n*       6) //IGNORE   DD  *      OPTIONAL                             *\n*                                                                     *\n*   WHERE    NNNN IS 3 OR 4 NUMERICS INDICATING AN ESTIMATE OF HOW    *\n*                 MANY MEMBERS EXIST IN THE PDS WITH THE MOST MEMBERS.*\n*                 THE DEFAULT VALUE IS 9999.  IF A VALUE OF LESS THAN *\n*                 100 IS SUPPLIED, THE PROGRAM WILL CHANGE THE VALUE  *\n*                 TO 100.  IF THERE ARE MORE MEMBERS THAN INDICATED   *\n*                 BY THE SIZE PARAMETER, THE PROGRAM MAY ABEND.       *\n*                                                                     *\n*            OPT1 IS EITHER 'FULL', 'ASM', OR NOT SPECIFIED (THE      *\n*                 DEFAULT). ACTUALLY, IF THE USER PROVIDES ANY VALUE  *\n*                 OTHER THAN 'FULL', OR 'ASM' THEN THE DEFAULT WILL BE*\n*                 ASSUMED.                                            *\n*                 -TYPE=FULL INDICATES THAT ALL 80 COLS OF THE CARD   *\n*                  IMAGE PDS WILL BE USED IN THE COMPARISON.          *\n*                 -TYPE=ASM INDICATES THAT COLS 1-72 OF THE CARD      *\n*                  IMAGE PDS WILL BE USED IN THE COMPARISON AND THE   *\n*                  DEFAULT IGNORE ASSEMBLER DATA WILL BE USED.        *\n*                 -IF NOT SPECIFIED ONLY COLS 1-72 WILL BE COMPARED,  *\n*                  AND NO DEFAULT IGNORE DATA WILL BE USED.           *\n*                                                                     *\n*            OPT2 IS 'MEM', 'DIR', OR 'NAME'; 'NAME' IS THE DEFAULT   *\n*                 VALUE.  PRINT=MEM INDICATES THAT IF ONE PDS CONTAINS*\n*                 A MEMBER, BUT THE OTHER PDS DOES NOT CONTAIN A MEMBER\n*                 WITH THE SAME NAME, THE  ENTIRE MEM WILL BE LISTED. *\n*                 PRINT=DIR INDICATES THAT THE COMPARISON OF MEMBERS  *\n*                 WON'T TAKE PLACE, BUT THE RECAP RPT WILL BE PRODUCED*\n*                 TO SHOW WHICH MEMBERS EXISTS IN EACH PDS.  PRINT=NAME\n*                 INDICATES THAT UNMATCHED MEMBERS WILL NOT BE PRINTED*\n*                 IN THEIR ENTIRITY, HOWEVER, THEY WILL BE FLAGGED AS *\n*                 UNMATCHED ON THE RECAP REPORT.                      *\n*                                                                     *\n*     THE 'NEW' AND 'OLD' DD STATEMENTS SHOULD BOTH POINT TO EITHER   *\n*     PDS DATASETS OR SEQUENTIAL DATASETS (OR A MEMBER OF A PDS). IF  *\n*     THE DATASET TYPES ARE MISMATCHED THEN THE COMPARISON TERMINATES *\n*     WITH A RETURN CODE OF 16.                                       *\n*                                                                     *\n*$DOC$*****************************************************************\n         EJECT                                                      BFG\n*          DATA SET CBT1274J   AT LEVEL 002 AS OF 07/20/83\n* CHANGED PARM DEFAULT FROM 1000 TO 9999     AXC-CBT\n*\n*   THIS IS AN ENHANCEMENT TO THE YALE COMPARE PROGRAM THAT IS\n*   DISTRIBTED AS FILE 226 ON THE CONN. BANK MODS TAPE.  THE PURPOSE\n*   OF THE ENHANCEMENT IS TO ALLOW THE COMPARE PROGRAM TO PROCESS\n*   TWO PDS FILES RATHER THAN TWO SEQUENTIAL FILES.  THE ORIGINAL\n*   PROGRAM HAS BEEN MODIFIED A LITTLE TO ACCOMODATE THE FRONT\n*   END PDS PROCESSOR.\n*\n*\n*\n*   THE OUTPUT OF THE PROGRAM CONSISTS OF A DETAILED LISTING AND A\n*   RECAP REPORT.  THE DETAILED LISTING SHOWS:\n*      - THE MEMBER NAME, DATA SET NAME, AND VOL/SER OF EACH MEMBER\n*        PROCESSED.\n*      - ANY DIFFERENCES THAT EXIST BETWEEN THE MEMBERS.\n*      - A COUNT OF UNEQUAL BLOCKS OF DATA AS WELL AS THE RECORD COUNTS\n*        FOR EACH MEMBER.\n*   THE RECAP LISTING FORMAT IS:\n*      OLD MEM=XXXXXXXX PAGE NNNN NEW MEM=YYYYYYYY STATUS\n*      THE STATUS MAY BE\n*          - EQUAL           BOTH MEMBERS ARE THE SAME\n*          - NOT EQUAL       THERE ARE DIFFERENCES\n*          - NO MATCH        THE MEMBER EXISTS IN ONLY ONE PDS\n*\n*   WE USE THE PROGRAM TO COMPARE PARMLIB, PROCLIBS, ETC. FROM ONE\n*   CPU TO ANOTHER AND ALSO AS AN AID WHEN INSTALLING NEW SCP RELEASES.\n*\n*   BRENT TOLMAN\n*   TRANSPORTAION MANAGEMENT SERVICES\n*   SALT LAKE CITY, UT\n*\n*\n*\n*\n          EJECT\n*$DOC$*****************************************************************\n*                                                                     *\n* COMPAREB - A MODIFIED VERSION OF THE YALE COMPARE PROGRAM.          *\n*                                                                     *\n* MODIFICATIONS AT AFDSC/PENTAGON:                                    *\n*  07MAY81 - BILL GODFREY, PLANNING RESEARCH CORP.                    *\n*   .  CHECK FOR 'IGNORE' DD WITH DEVTYPE AND BYPASS OPEN IF NOT      *\n*      FOUND, SO OPEN WILL NOT WTO 'DD STATEMENT MISSING'.            *\n*   .  NAME CHANGED TO 'COMPAREB' (SAVING NAME 'COMPARE' FOR A TSO    *\n*      COMMAND WHICH WILL INVOKE THIS PROGRAM).                       *\n*   .  ACCEPT ALTERNATE DDNAMES FROM INVOKER.                         *\n*      DDNAMES ARE IN SAME SLOTS AS IBM UTILITIES.                    *\n*   .  USE R11 AS BASE REGISTER INSTEAD OF R13                        *\n*   .  CONVERT PARM TO CAPS.                                          *\n*   .  CHANGE SYSPRINT LRECL FROM 109 TO 121                          *\n*   .  TEST ALL DCB'S FOR SUCCESSFUL OPEN                             *\n*  09JUN81 - BILL GODFREY                                             *\n*   .  PROGRAM CHANGED TO ALLOW RECORDS LONGER THAN 80 BYTES TO       *\n*      BE COMPARED.  A GOOD WAY TO COMPARE LOAD MODULES IS TO         *\n*      COMPARE HEX DUMPS OF THEM. NOW THIS PROGRAM CAN COMPARE        *\n*      PRINT FILES (IF THEY ARE FIXED LENGTH RECORDS).                *\n*   .  CHANGE ALL BAL-R10 INSTRUCTIONS TO USE BAL-R14 INSTEAD,        *\n*      (AND SAVE R14) SO WE CAN USE R10 FOR ANOTHER PURPOSE.          *\n*   .  PUT THE RECORD LENGTH IN R10.                                  *\n*   .  CHANGE ALL INSTRUCTIONS THAT USE THE RECORD LENGTH (80)        *\n*      OR 2 RECORD LENGTHS (160) TO USE THE VALUE IN REGISTER R10     *\n*      INSTEAD, SO THE PROGRAM CAN COMPARE MORE THAN 80 BYTES.        *\n*   .  CHANGE MLENGTH FIELD TO A HALFWORD AND USE IT TO HOLD          *\n*      A ZERO OR AN EIGHT INSTEAD OF A 79 OR 71.                      *\n*   .  FIX S0C9 IN DCB OPEN EXIT, DIVIDING BY LRECL ZERO WHEN         *\n*      RECFM IS UNBLOCKED.                                            *\n*   .  PROGRAM WILL NO LONGER USE DEFAULT IGNORE DATA (FOR ASSEMBLER  *\n*      SOURCE) UNLESS PARM=ASM IS SPECIFIED.                          *\n*   .  FIX PARM FIELD BUG INTRODUCED 07MAY81, PARM=FULL WAS NEVER     *\n*      RECOGNIZED AFTER THAT CHANGE.                                  *\n*   .  CHECK PARM FIELD FOR 'FULL' OR 'ASM' ANYWHERE IN FIRST 16      *\n*      BYTES.                                                         *\n*  16JUN81 - BILL GODFREY                                             *\n*   .  FIX PARM DD BUG INTRODUCED 09JUN81.                            *\n*      R1 WAS DESTROYED PRIOR TO PARMX. USE R4 INSTEAD OF R1.         *\n*   .  CHANGE R10 TO 256 IF LRECL GREATER THAN 256.                   *\n*                                                                     *\n*   NOTE: THIS PROGRAM WORKS CORRECTLY ONLY ON FIXED LENGTH RECORDS   *\n*   FROM 80 TO 256 BYTES LONG. ONLY THE FIRST 80 BYTES OF A RECORD    *\n*   ARE LISTED. NO WARNING MESSAGE IS ISSUED FOR RECORDS LONGER THAN  *\n*   256 OR VARIABLE LENGTH.  ** NO LONGER APPLICABLE -- GP MAR 92 **  *\n*                                                                     *\n*  21NOV91 - GREG PRICE (GP@P6)                                       *\n*   .  HANDLE LRECL LESS THAN 80                                      *\n*      - NEVER MOVE MORE THAN LRECL BYTES TO PRINT LINE BUFFER        *\n*      - FORCE 'FULL' IF LRECL IS NOT GREATER THAN 8                  *\n*  30MAR92 - GREG PRICE (GP)                                          *\n*   .  CORRECTLY DETECT TYPE=ASM, DO NOT CORRUPT PARM LENGTH REG R2   *\n*   .  ADD ROUTCDE=(11) TO ALL WTOS EXCEPT ONE WHICH ALREADY HAD IT   *\n*   .  PUT TIME AND JULIAN DATE IN PAGE HEADING LINE                  *\n*   .  COMPARE WHOLE RECORD EVEN IF MORE THAN 256 BYTES LONG          *\n*   .  HANDLE UNDEFINED AND VARIABLE LENGTH RECORDS                   *\n*  12OCT92 - GREG PRICE (GP@FT)                                       *\n*   .  AVOID S0C4 BY SKIPPING IGNORE TEST IF NOT FIXED LENGTH RECORDS *\n*  12JUN93 - BRUCE LELAND AS SUGGESTED BY GREG PRICE                  *\n*   .  MADE CHANGES TO GETMAIN A VARIABLE AMOUNT OF                   *\n*      STORAGE BETWEEN 100K AND 2000K; THEN FREEMAIN 16K              *\n*      (PREVIOUSLY BETWEEN 80K AND 800K; THEN FREEMAIN 4K)            *\n*  10MAY96 - GREG PRICE (-GP)                                         *\n*   .  TRANSLATE UNPRINTABLES OUT OF SYSPRINT WHEN GOING TO TSO       *\n*      TERMINAL TO AVOID PROG753 WITH PC/3270 FOR WINDOWS.            *\n*                                                                     *\n*$DOC$*****************************************************************\n         EJECT\nCOMPAREB CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         STM   R14,R12,12(R13)     SAVE THEIR REGS IN THEIR AREA\n         LR    R11,R15             LOAD BASE REG WITH ENTRY ADDR\n         LA    R6,4095(,R11)       LOAD SECOND BASE\n         LA    R6,1(,R6)           WITH PROPER ADDRESS\n         LA    R7,4095(,R6)        LOAD THIRD BASE\n         LA    R7,1(,R7)           WITH PROPER ADDRESS\n         USING COMPAREB,R11,R6,R7  ESTABLISH ADDRESSABILITY\n         ST    R7,SAVER07          MAKE SURE ADDRESS READY FOR RELOAD\n*  R7 IS USED LATER AT LABEL NUMB.  MAKE SURE IT'S RELOADED FROM\n*   STORAGE PLACE SAVER07 AFTER ALL BRANCHES FROM THE NUMB ROUTINE.\n         B     PDSLINK             NOW GO LINK SAVE AREAS\n         SPACE\nPDSPGM   DC    CL8'COMPAREB'       PROGRAM NAME\n         DC    CL1' '\nPDSDATE  DC    CL8'&SYSDATE'       SYSTEM DATE OF ASSEMBLY\n         DC    CL1' '\nPDSTIME  DC    CL5'&SYSTIME'       SYSTEM TIME OF ASSEMBLY\n         DC    CL1' '\n         SPACE 2\nPDSSAVE  DC    9D'0'               SAVE AREA FOR COMPAREB\nRETCODE  DC    F'0'                RETURN CODE\nRETURN   L     R15,RETCODE         GET RETURN CODE\n         L     R13,PDSSAVE+4       GET ADD OF THEIR SAVE AREA\n         L     R14,12(,R13)        RESTORE RETURN ADDRESS\n         LM    R0,R12,20(R13)      RESTORE R0 THRU R12\n         BR    R14                 RETURN TO CALLER\n         SPACE 2\nPDSLINK  LA    R14,PDSSAVE         GET ADDR OF OUR SAVE AREA\n         ST    R14,8(,R13)         SAVE OUR ADDR IN THEIR AREA\n         ST    R13,4(,R14)         SAVE THEIR ADDR IN OUR AREA\n         LR    R13,R14             POINT R13 TO OUR AREA NOW\n         EJECT\n* PARM\n*        R1 - SCP POINTER TO PARM AT ENTRY\n*        R2 - PARM LENGTH\n*        R3 - POINTER TO PARM DATA WHILE EVALUATING\n*        R4 - POINTER TO PARM VALUE SAVE AREAS\n*        R5 - LOOP CONTROL AND SAVE AREA POINTER\n*\n*        BAL   R12,NUMB  - CONVERT VALUE TO BINARY\n*        B     GETM\n***********************************************************************\n         ST    R1,ORIGPARM          SAVE INPUT PARMS                BFG\n         L     R1,0(,R1)           POINT TO PARM AREA\n         LH    R2,0(,R1)           GET LENGTH IN R2\n         STM   R1,R2,PARMVALS      SAVE ADDR AND LEN\n         LTR   R2,R2               IS THERE A PARM FROM USER?\n         BZ    PARMEND             NO  -- TAKE DEFAULTS\n         SPACE\n         LA    R3,1(,R1)           IN LOOP R3 POINTS TO DATA\n         LA    R2,1(,R2)           ADJUST LEN FOR 1ST PASS\nPARM2    EQU   *                   EVALUATE NEXT KEYWORD\n         L     R7,SAVER07          MAKE SURE BASE IS LOADED\n         LTR   R2,R2               IS THERE SOME LENGTH LEFT?\n         BNP   PARMEND             NO  -- EVALUATION COMPLETE\n         LA    R3,1(,R3)           POINT TO START OF KEYWORD\n         BCT   R2,PARM2B           REDUCE LEN - BRANCH AT END\n         B     PARMEND\nPARM2B   EQU   *                   DETERMINE WHICH KEYWORD NOW\n         L     R7,SAVER07          MAKE SURE BASE IS LOADED\n         CLC   =C'TYPE=',0(R3)     LIBRARY TYPE SPECIFICATION?    PAN\n         BE    PARM5                                              PAN\n         CLC   =C'PRINT=',0(R3)    RANGE SPECIFICATION?\n         BE    PARM6               YES\n         CLC   =C'SIZE=',0(R3)     SIZE OF PDS?\n         BE    PARM8\n         SPACE\nPARM2D   EQU   *                   INVALID PARAMETER\n         L     R7,SAVER07          MAKE SURE BASE IS LOADED\n         WTO   'INVALID PARM VALUE SPECIFIED -- PROCESSING TERMINATED',X\n               ROUTCDE=(11)                                         GP\n         MVC   RETCODE,=F'16'      SET RETURN CODE TO 16\n         B     RETURN              RETURN TO SCP\n         SPACE\nPARM5    EQU   *                   LIBRARY TYPE ANALYSIS\n         LA    R3,5(,R3)           POINT PAST KEYWORD\n         SH    R2,=H'5'            KEEP REMAINING LEN ACCURATE\n         MVC   PARMTYPE,=F'0'      INITIALIZE SAVE AREA\n         LA    R4,PARMTYPE         POINT TO SAVE AREA\n         BAL   R12,PARM10          GO GET USER VAUE\n         CLC   =C'FULL',PARMTYPE   DID USER SPECIFY FULL COMPARE?   GP\n         BNE   PARM5A              NO  -- CHECK FOR ASSEMBLER\n         MVI   MLENGTH+1,0         YES, CHANGE 8 TO ZERO\n         B     PARM2               NO FURTHER EVALUATION\nPARM5A   CLC   =C'ASM',PARMTYPE    DID USER SPECIFY ASSEMBLER??  GP BFG\n         BNE   PARM2               NO SO IGNORE                     BFG\n         LA    R0,ENDDFTIG     GP  YES, POINT TO END OF DEFAULT DATABFG\n         ST    R0,IGASMS+4     GP  STORE ENDING ADDRESS             BFG\n         B     PARM2                KEEP LOOKING                    BFG\n         SPACE 2                                                    BFG\nPARM6    EQU   *                   RANGE PROCESSING\n         LA    R3,6(,R3)           POINT PAST KEYWORD\n         SH    R2,=H'6'            KEEP LEN CORRECT\n         LA    R4,PARMPRNT         POINT TO FIRST SAVE AREA\n         BAL   R12,PARM10          GO GET USER VALUE\n         CLC   PARMPRNT(3),=C'MEM' DID USER SAY TO PRINT ENTIRE MEMBER?\n         BE    PARM6H              YES\n         CLC   PARMPRNT(3),=C'DIR' DID USER SAY TO PRINT DIRECTRY ONLY?\n         BE    PARM6H              YES\n         MVC   PARMPRNT,=C'NAME'   NO -- SET TO NAME ONLY\nPARM6H   EQU   *                   EVALUATE\n         B     PARM2               GO GET NEXT KEYWORD\n         SPACE 2\nPARM8    EQU   *                   SIZE SPECIFICATION\n         LA    R3,5(,R3)           POINT TO VALUE\n         SH    R2,=H'5'            CORRECT REMAINING LEN\n         MVC   PARMSIZE,=F'0'      INITIALIZE SAVE AREA\n         LA    R4,PARMSIZE         POINT TO SAVE AREA\n         BAL   R12,PARM10          GO GET USER VALUE\nPARM8D   EQU   *                   EVALUALTE\n         LA    R5,PARMSIZE+3       POINT TO END OF SAVE AREA\n         BAL   R12,NUMB            CONVERT VAUE TO BINARY\n         CLC   PARMSIZE,=F'100'    LESS THAN 100 MEMBERS?\n         BH    PARM8F              NO  -- OK\n         MVC   PARMSIZE,=F'100'    PUT IN MINIMUM VALUE\nPARM8F   EQU   *\n         B     PARM2               AND RETURN\n         SPACE 2\nPARM10   EQU   *                   ISSOLATE VALUE SUPPLIED BY USER\n         LA    R5,5                MAX OF FOUR CHAR + DLM ALLOWED\nPARM10B  EQU   *                   MOVE VALUE TO SAVE AREA\n         CLC   0(1,R3),PARMDLM     DELIMITING VALUE?\n         BE    0(,R12)             YES -- WE NOW HAVE THE VALUE\n         MVC   0(1,R4),0(R3)       MOVE ONE CHAR FROM PARM TO SAVE ARE\n         LA    R4,1(,R4)           BUMP POINTER TO SAVE AREA\n         LA    R3,1(,R3)           UPDATE PARM DATA POINTER\n         BCT   R2,PARM10D          REDUCE REMAINING LEN\n         BR    R12                 RETURN TO CALLER IF EXHAUSTED\nPARM10D  EQU   *\n         BCT   R5,PARM10B          LOOP TIL VALUE IS DONE\n         B     PARM2D              MORE THAN FOUR CHARS IN VALUE\n         SPACE 2\nPARMEND  EQU   *                                                  PAN\n         SPACE\n*                                                                   BFG\n**       HANDLE DDNAMES PASSED AS INPUT                             BFG\n*                                                                   BFG\n         L     R1,ORIGPARM          SAVE INPUT PARMS                BFG\n         TM    0(R1),X'80'         ONLY 1 PARAMETER\n         BO    NODD                YES, BYPASS DD ROUTINE\n         L     R2,4(,R1)           POINT TO DDNAME LIST\n         LH    R1,0(,R2)           GET LENGTH OF DDNAME LIST\n         LA    R2,2(,R2)           POINT PAST LENGTH\n         SPACE\n         CH    R1,=H'40'           LONG ENOUGH FOR SYSIN\n         BL    NODD                NO, BRANCH\n         CLI   32(R2),0            SYSIN OVERRIDE\n         BE    NWDD1               NO, SKIP MVC\n         MVC   IGNORE+DDNAM(8),32(R2)\n         SPACE\nNWDD1    CH    R1,=H'48'           LONG ENOUGH FOR SYSPRINT\n         BL    NODD                NO, BRANCH\n         CLI   40(R2),0            SYSPRINT OVERRIDE\n         BE    NWDD2               NO, SKIP MVC\n         MVC   SYSPRINT+DDNAM(8),40(R2)\n         SPACE\nNWDD2    DS    0H                                                   GLA\n         CH    R1,=H'56'           LONG ENOUGH FOR ECHO         ABL GLA\n         BL    NODD                NO, BRANCH                   ABL GLA\n         CLI   48(R2),0            REENTRY OVERRIDE             ABL GLA\n         BE    NWDD2A              NO, SKIP MVC                 ABL GLA\n         MVC   PVECTOR(4),48(R2)   YES, SAVE THE REENTRY VECTOR ABL GLA\n         SPACE\nNWDD2A   CH    R1,=H'64'           LONG ENOUGH FOR SYSUT1\n         BL    NODD                NO, BRANCH\n         CLI   56(R2),0            SYSUT1 OVERRIDE\n         BE    NWDD3               NO, SKIP MVC\n         MVC   OLDDCB+DDNAM(8),56(R2)\n         MVC   OLDDIR+DDNAM(8),56(R2)\n         SPACE\nNWDD3    CH    R1,=H'72'           LONG ENOUGH FOR SYSUT2\n         BL    NODD                NO, BRANCH\n         CLI   64(R2),0            SYSUT2 OVERRIDE\n         BE    NODD                NO, SKIP MVC\n         MVC   NEWDCB+DDNAM(8),64(R2)\n         MVC   NEWDIR+DDNAM(8),64(R2)\nNODD     EQU   *\n         B     GETM                GET STORAGE FOR WORK AREAS AND TBLS\n         EJECT\nNUMB     EQU   *                   CONVERT PARM VALUE TO BINARY\n         ST    R7,SAVER07          SAVE 3RD BASE REG VALUE\n* NUMB\n*        R5 - PARM SAVE AREA POINTER AT ENTRY\n*        R9 - LOOP CONTROL\n*        R7    WORK AREA POINTER    (THIRD BASE - SAVE OFF)\n*        R8 - PARM VALUE SAVE ARA POINTER\n*\n*        RETURN WITH BR R12\n***********************************************************************\n         SPACE 2\n         LR    R8,R5               SAVE POINTER TO END OF SAVE ARA\n         SH    R8,=H'3'            POINT TO START OF SAVE AREA\n         LA    R7,FULL+3           POINT TO END OF WORK AREA\n         LA    R9,4                MAX NUMBER OF TIMES THRU LOOP\n         MVC   FULL,=C'0000'       INITIALIZE WORK AREAA\nNUMB2    EQU   *                   MOVE DATA TO WORK AREA(RIGHT JUSTIFY\n         CLI   0(R5),X'00'         DATA CHAR?\n         BE    NUMB2D              NO  -- SKIP TO NEXT COL\n         CLI   0(R5),C'0'          LESS THAN ZERO?\n         BL    PARM2D              YES -- ERROR\n         CLI   0(R5),C'9'          GREATERTHAN NINE\n         BH    PARM2D              YES -- ERROR\n         MVC   0(1,R7),0(R5)       MOVE ONE DATA CHAR\n         BCTR  R7,0                BACKUP WORK AREA POINTER\nNUMB2D   EQU   *\n         BCTR  R5,0                BACKUP SAVE AREA POINTER\n         BCT   R9,NUMB2            CHECK FOUR COLS\n         SPACE\n         PACK  DOUBLE,FULL         CONVERT FROM CHAR TO DECIMAL\n         CVB   R7,DOUBLE           CONVERT DECIMAL TO BINARY\n         ST    R7,0(,R8)           SAVE BINARY VALUE\n         L     R7,SAVER07          RELOAD 3RD BASE REG VALUE\n         BR    R12                 RETURN TO CALLER\n         EJECT\nGETM     EQU   *                   OBTAIN STORAGE\n* 1 12 BYTE ENTRY NEEDED FOR EACH NEW MEMBER\n*           (8 BYTE MEMBER NAME, 2 BYTE PAGE NUMBER, 2 BYTE FLAGS)\n*\n* 1 12 BYTE ENTRY NEEDED FOR EACH OLD MEMBER\n*           (SAME AS NEW ENTRY)\n*\n*\n* GETM\n*        R2 - PARMSIZE VALUE (ESTIMATED NUMBER OF MEMS)\n*        R3 - GOTTEN STORAGE POINTER\n*\n*        B     NDIR\n***********************************************************************\n         SPACE 2\n         L     R2,PARMSIZE         GET BINARY NUMBER OF MEMBERS\nGETM2    EQU   *                   GET STORAGE FOR NEW OLD AND SEQ\n         MH    R2,=H'24'           12 BYTES FOR NEW - 12 BYTES FOR OLD\nGETM2D   EQU   *                   REQUEST STORAGE\n         GETMAIN EC,LV=(R2),A=NMEM\n         LTR   R15,R15             WAS STORAGE AVAILABLE?\n         BZ    GETM4               YES -- CONTINUE\n         WTO   'GETMAIN FAILURE -- RUN IN LARGER REGION',              X\n               ROUTCDE=(11)                                         GP\n         MVC   RETCODE,=F'16'      SET RETURN CODE TO U6\n         B     RETURN              RETURN TO SCP\n         SPACE 3\nGETM4    EQU   *                   DIVIDE STORAGE UP\n         L     R3,PARMSIZE         NUMBER OF ESTIMATED MEMBERS\n         MH    R3,=H'12'           12 BYTES PER MEMBER IN EACH LIST\n         L     R4,NMEM             ADDRESS OF OBTAINED STORAGE\n         AR    R4,R3               END OF FIRST LIST\n         ST    R4,OMEM             START ADDR OF OLD MEMBER LIST\n         EJECT\n         TIME  DEC                 PUT TIMESTAMP IN PAGE HEADER     GP*\n         SRL   R0,8                SHIFT OUT FRACTIONS OF SECOND      *\n         STM   R0,R1,DOUBLE        STORE TIME AND DATE                *\n         AP    DOUBLE,=PL4'1900000' GET 4 DIGIT YEAR - OK FOR MILLENIA*\n         MVC   EJECT+60(19),=X'4021207A20207A20204040202020204B202020'\n         ED    EJECT+60(19),DOUBLE+1  FORMAT 'HH:MM:SS  YYYY.DDD'   GP*\n******************************************************************\n*        THIS CODE HAS BEEN MOVED FROM THE YALE COMP PGM         *\n******************************************************************\n         OPEN  (SYSPRINT,OUTPUT)\n         GETMAIN VU,LA=MIN,A=STARTADD    GET ALL AVAILABLE STORAGE\n         LM    R0,R2,SIXTEENK      LOAD 16K, START, SIZE            ABL\n*        SR    R2,R0               SUBTRACT OFF 4K              ABL GLA\n         ST    R2,SIZE             UPDATE REGION SIZE\n         AR    R1,R2               LAST USEABLE BYTE\n         ST    R1,HIGHCORE         SAVE FOR LATER\n         SPACE\n*                                                                   BFG\n**       MOVED CODE FROM BG COMPARE TO HERE TO ELIMINATE MESSAGE    BFG\n*                                                                   BFG\n         SPACE 1                                                    BFG\n         LA    R2,IGNORE+DDNAM                                      BFG\n         DEVTYPE (R2),DEVAREA                                       BFG\n         LTR   R15,R15             IS IGNORE DD PRESENT             BFG\n         BNZ   IGNAB               NO, SKIP OPEN                    BFG\n         OPEN  (IGNORE)                                             BFG\nIGNAB    EQU   *                                                    BFG\n         L     R2,STARTADD         STARTADD\n         ST    R2,FIRSTIG          SAVE AS FIRST IGNORE ADDR\n         TM    IGNORE+48,X'10'     DID IGNORE OPEN?\n         BO    GETIG               YES -- GO READ AND STORE\n         MVC   FIRSTIG(8),IGASMS   NO  -- FIRST AND LAST IGNORES\n         ST    R2,BSTRTA           SAVE ADDRESS AFTER IGNORES       BFG\n         B     NDIR\nGETIG    GET   IGNORE,(R2)         GET A RECORD\n         LA    R2,80(,R2)          BUMP PONITER\n         B     GETIG               READ TIL END OF FILE\nENDIG    CLOSE (IGNORE)            CLOSE THE DCB\n         FREEPOOL IGNORE                                            ABL\n         ST    R2,LASTIG           SAVE ADDR OF LAST IGNORE REC\n         ST    R2,BSTRTA           SAVE ADDRESS AFTER IGNORES       BFG\n         SPACE 3\n         B     NDIR                GO PROCESS NEW DIRECTORY\n         EJECT\nNDIR     EQU   *                   OPEN AND PROCEES NEW DIRECTORY\n*\n* NDIR\n*        R1 - WORK REG\n*        R2 - LOOP CONTROL (MAX NUMBER OF MEMS)\n*        R3 - POINTER TO NEW DIRECTORY LIST\n*        R4 - DIRECTORY RECORD POINTER IN WORK AREA\n*\n*        BAL   R12,JSORT    SORT ENTRIES IN DESIRED SEQUENCE\n*        B     ODIR\n***********************************************************************\n         RDJFCB (NEWDCB)\n         MVC   NEWDSN,NEWJFCB\n         MVC   NEWVOL,NEWJFCB+118\n         RDJFCB (OLDDCB)\n         MVC   OLDDSN,OLDJFCB\n         MVC   OLDVOL,OLDJFCB+118\n         SPACE 2\n         RDJFCB (NEWDIR,,OLDDIR)   GET JFCB DATA FROM DD STATEMENT\n         OI    NJFCB+52,X'0A'      TURN ON DON'T MERGE DCB TO JFCB BIT\n         OI    OJFCB+52,X'0A'      TURN ON DON'T MERGE DCB TO JFCB BIT\n         L     R14,OBTAIN          OBTAIN FLAGS                     ABL\n         LA    R15,NJFCB           ADDRESS OF DSNAME                ABL\n         LA    R0,NJFCB+118        VOLUME SERIAL                    ABL\n         LA    R1,DS1FMTID         OUTPUT START ADDRESS             ABL\n         STM   R14,R1,PARMLIST     SAVE CAMLIST PARAMETERS          ABL\n         OBTAIN PARMLIST           GET THE FORMAT 1 DSCB            ABL\n         MVC   NEWDSORG,DS1DSORG   SAVE THE NEW DSORG               ABL\n         L     R14,OBTAIN          OBTAIN FLAGS                     ABL\n         LA    R15,OJFCB           ADDRESS OF DSNAME                ABL\n         LA    R0,OJFCB+118        VOLUME SERIAL                    ABL\n         LA    R1,DS1FMTID         OUTPUT START ADDRESS             ABL\n         STM   R14,R1,PARMLIST     SAVE CAMLIST PARAMETERS          ABL\n         OBTAIN PARMLIST           GET THE FORMAT 1 DSCB            ABL\n         MVC   OLDDSORG,DS1DSORG   SAVE THE NEW DSORG               ABL\n         CLC   NJFCB+44(8),BLANK    Q. ANY MEMBER SPECIFIED         BFG\n         BNE   NEWSEQ               A. YES SO MUST BE SEQ DS        BFG\n         CLC   OJFCB+44(8),BLANK    Q. ANY MEMBER SPECIFIED         BFG\n         BNE   OLDSEQ               A. YES SO MUST BE SEQ DS        BFG\n         TM    NEWDSORG,DS1DSGPS    Q. IS THIS SEQ DS           ABL/BFG\n         BO    NEWSEQ               A. YES SO HANDLE AS SEQ DS      BFG\n         TM    OLDDSORG,DS1DSGPS    Q. IS THIS SEQ DS           ABL/BFG\n         BO    NEWSEQ2              A. YES SO MUST BE AN ERROR  ABL/BFG\n         MVC   NJFCB+44(8),BLANK   SET MEMBER NAME TO BLANKS\n         MVC   OJFCB+44(8),BLANK   SET MEMBER NAME TO BLANKS\n         OPEN  (NEWDIR,INPUT,OLDDIR,INPUT),TYPE=J\n         SPACE 2\n         L     R2,PARMSIZE         ESTIMATED MEMBER COUNT\n         L     R3,NMEM             POINT TO START OF LIST\nNDIR2    EQU   *                   READ A DIRECTORY BLOCK\n         READ  NDIR2ECB,SF,NEWDIR,DIRWORK\n         CHECK NDIR2ECB            WAIT TIL READ COMPLETES\n         LA    R4,DIRWORK+10       POINT PAST KEY TO FIRST DATA\nNDIR2B   EQU   *                   PROCESS DIRECTORY LBOCK\n         CLC   0(8,R4),=8X'FF'     LOGICAL END OF DATA?\n         BE    NEWDEOD             YES -- TREAT AS PHYSICAL EOD\n         MVC   0(08,R3),0(R4)      MEMBER NAME\n         MVC   8(4,R3),=4X'0000FFFF' PAGE NUM. AND FLAGS\nNDIR2D   EQU   *\n         CLC   DIRWORK(8),0(R4)    AT END OF BLOCK?\n         BNE   NDIR2F              NO  -- UPDATE POINTERS AND CONT.\n         LA    R3,12(,R3)          YES -- POINT TO NEXT NEW MEMBER ENT\n         BCT   R2,NDIR2                   READ NEXT BLOCK\n         B     NDIR2H                     LIST EXCEEDED\n         SPACE\nNDIR2F   EQU   *\n         SR    R1,R1               CLEAR WORK REG\n         IC    R1,11(R4)           GET TYPE BYTE FROM DIRECTRY\n         N     R1,=X'0000001F'     COUNT OF USER HALF WORDS\n         MH    R1,=H'2'            NOW COUNT OF USER BYTES\n         LA    R4,12(R1,R4)        POINT TO LNEXT ENTRY IN BLOCK\n         LA    R3,12(,R3)          NEXT NEW MEMBER ENTRY\n         BCT   R2,NDIR2B           PROCESS NEXT ENTRY IN BLOCK\nNDIR2H   EQU   *                   TOO MANY MEMBERS\n         WTO   'TOO MANY MEMBERS IN PDS -- PARM=''SIZE=XXX'' NEEDED',  X\n               ROUTCDE=11                                           GP\n         MVC   RETCODE,=F'16'      SET RETURN CODE\n         B     RETURN              RETURN TO SCP\n         SPACE 3\nNEWDEOD  EQU   *\n         MVC   0(8,R3),=X'FF'      SET LOGICAL END OF LIST\n         CLOSE (NEWDIR)            CLOSE THE DIRECTORY DCB\n         B     ODIR                PROCESS OLD DIRECTORY\n         EJECT                                                      BFG\n*                                                                   BFG\n**       HANDLE PURELY SEQUENTIAL DATASETS AS INPUT                 BFG\n*                                                                   BFG\nNEWSEQ   CLC   OJFCB+44(8),BLANK    Q. ANY MEMBER SPECIFIED         BFG\n         BNE   OLDSEQ               A. YES SO MUST BE SEQ DS        BFG\n         TM    OLDDSORG,DS1DSGPS    Q. IS THIS SEQ DS           ABL/BFG\n         BO    OLDSEQ               A. YES SO HANDLE AS SEQ DS      BFG\nNEWSEQ2  MVC   RETCODE,=F'16'                                   ABL BFG\n         WTO   'BOTH FILES ARE NEITHER BOTH DSORG=PO OR DSORG=PS',  BFGX\n               ROUTCDE=(11)                                         BFG\n         B     CLOSE2               GO AND CLOSE SYSPRINT       ABL BFG\n         SPACE 2                                                    BFG\n*                                                                   BFG\n**       BOTH DATASETS ARE SEQUENTIAL, SO CALL COMPARE AND EXIT     BFG\n*                                                                   BFG\nOLDSEQ   DS    0H                                                   BFG\n         OPEN  (OLDDCB,,NEWDCB)                                     BFG\n         MVC   OLDMEM,OJFCB+44      SET MEMBER NAME IF ANY          BFG\n         MVC   NEWMEM,NJFCB+44      SET MEMBER NAME IF ANY          BFG\n         SR    R3,R3                SHOW NO NEED TO SAVE PAGE NUM.  BFG\n         BAL   R12,PAGE             OUTPUT PAGE                     BFG\n         BAL   R12,YALECOMP         DO COMPARE                      BFG\n         B     CLOSE2                                           ABL BFG\n         EJECT\nODIR     EQU   *                   PROCESS OLD DIRECTORY\n*\n* ODIR\n*        R1 - WORK REG\n*        R2 - LOOP CONTROL (MAX NUMBER OF MEMS)\n*        R3 - POINTER TO OLD DIRECTORYL IST\n*        R4 - DIRECTORY RECORD POINTER IN WORK AREA\n*\n*        B     OPEN1\n***********************************************************************\n         SPACE 2\n         L     R2,PARMSIZE         NUMBER OF ESTIMATED MEMBERS\n         L     R3,OMEM             POINT TO OLD MEMER LIST\nODIR2    EQU   *                   READ A DIRECTORY BLOCK\n         READ ODIR2ECB,SF,OLDDIR,DIRWORK\n         CHECK ODIR2ECB            WAIT TILL READ COMPLETES\n         LA    R4,DIRWORK+10       POINT PAST KEY TO FIRST DATA\nODIR2B   EQU   *\n         CLC   0(8,R4),=8X'FF'     LOGOCAL END OF DATA?\n         BE    OLDDEOD             YES -- SAME AS PYSICAL EOD\n         MVC   0(08,R3),0(R4)      MEMBER NAME\n         MVC   8(4,R3),=4X'0000FFFF' PAGE NUMBER AND FLAGS\nODIR2D   EQU   *\n         CLC   DIRWORK(8),0(R4)    AT END OF BLOCK?\n         BNE   ODIR2F              NO\n         LA    R3,12(,R3)          YES -- POINT TO NEXT OLD ENTRY\n         BCT   R2,ODIR2                   READ NEXT BLOCK\n         B     ODIR2H                     ESTIMATED MEMBERS EXCEEDED\n         SPACE 3\nODIR2F   EQU   *\n         SR    R1,R1               CLEAR WORK REG\n         IC    R1,11(,R4)          GET TYPE BYTE\n         N     R1,=X'0000001F'     ISOLATE USER HALF WORDS\n         MH    R1,=H'2'            NOW USER BYTES\n         LA    R4,12(R1,R4)        POINT TO NEXT DIRECTRY ENTRY\n         LA    R3,12(,R3)          POINT TO NEXT OLD MEMBER ENTRY\n         BCT   R2,ODIR2B           PROCESS NEXT ENTRY\nODIR2H   EQU   *\n         B     NDIR2H\n         SPACE 3\nOLDDEOD  EQU   *                   END OF DATA FOR DIRECTORY\n         MVC   0(8,R3),=X'FF'      LOGICAL END OF DATA\n         CLOSE (OLDDIR)            CLOSE DIRECTORY\n         B     LOOP\n         EJECT\nLOOP     EQU   *                   LOOP THRU DIRECTORIES\n         L     R2,NMEM             R2 POINTS TO NEXT MEMBER IN NEW PDS\n         L     R3,OMEM             R3 POINTS TO NEXT MEMBER IN OLD PDS\nLOOP1    EQU   *                   COMPARE NEW TO OLD\n         LH    R1,RC               RETURN CODE                      ABL\n         O     R1,RETCODE          BUILD FOR FINAL RETURN CODE      ABL\n         ST    R1,RETCODE          SAVE FOR FINAL RETURN CODE       ABL\n         CH    R1,=H'12'           ATTENTION TO TERMINATE?          ABL\n         BE    CLOSE2              YES, QUIT                        ABL\n         CLC   0(8,R2),0(R3)\n         BE    COMPARE             SAME MEMBER NAME IN OLD AND NEW\n         BL    NEWONLY             MEMBER IS ONLY IN NEW PDS\n         BH    OLDONLY             MEMBER IS ONLY IN OLD PDS\n         EJECT\nCOMPARE  EQU   *                   COMPARE OLD AND NEW MEMBERS\n         CLI   0(R2),X'FF'         EQUAL AND X'FF'?\n         BE    DIR                 YES -- TIME TO PRINT DIRECTORY\n         MVC   OLDJFCB+44(8),0(R3) MOVE IN OLD MEMBER NAME\n         MVC   NEWJFCB+44(8),0(R2) MOVE IN NEW MEMBER NAME\n         MVC   OLDMEM,0(R3)\n         MVC   NEWMEM,0(R3)\n         OI    OLDJFCB+52,X'08'    DONT REWRITE JFCB\n         OI    NEWJFCB+52,X'08'    DONT REWRITE JFCB\n         OI    OLDJFCB+86,X'01'    DATA SET IS MEMBER OF PDS\n         OI    NEWJFCB+86,X'01'    DATA SET IS MEMBER OF PDS\n         CLC   PARMPRNT(3),=C'DIR' DIRECTORY ONLY?\n         BE    COMPARE2\n         OPEN  (OLDDCB,,NEWDCB),TYPE=J   ADD MEMBER NAMES TO JFCB\n         MVI   DELAY,C'D'          DELAY THE HEADER INFORMATION     ABL\n         BAL   R12,PAGE            TOP OF FORM\n         BAL   R12,YALECOMP        GO DO THE COMPARISON\n         MVC   10(2,R2),RC         SAVE RETURN CODE\n         MVC   10(2,R3),RC         SAVE RETURN CODE\n         CLI   DELAY,C'D'          HEADER OUTPUT?                   ABL\n         BNE   COMPARE2            YES, BRANCH                      ABL\n         MVI   DELAY,C'1'          RESET THE HEADER FLAG            ABL\n         XC    8(2,R2),8(R2)       CLEAR PAGE NUMBER                ABL\n         XC    8(2,R3),8(R3)       CLEAR PAGE NUMBER                ABL\n         LH    R1,PAGECNT          PAGE NUMBER                      ABL\n         SH    R1,=H'1'            PAGE NUMBER                      ABL\n         STH   R1,PAGECNT          PAGE NUMBER                      ABL\nCOMPARE2 EQU   *\n*        CLOSE (OLDDCB,,NEWDCB)    CLOSE IS DONE BY YALE COMP\n         LA    R2,12(,R2)          POINT TO NEXT NEW MEMBER NAME\n         LA    R3,12(,R3)          POINT TO NEXT OLD MEMBER NAME\n         B     LOOP1               NOW GO CHECK CURRENT STATUS\n         SPACE 3\nNEWONLY  EQU   *                   COMPARE OLD AND NEW MEMBERS\n         MVC   NEWJFCB+44(8),0(R2) MOVE IN NEW MEMBER NAME\n         MVC   NEWMEM,0(R2)\n         OI    NEWJFCB+52,X'08'    DONT REWRITE JFCB\n         OI    NEWJFCB+86,X'01'    DATA SET IS A MEMBER OF PDS\n         MVC   OLDMEM,=8C'*'       INDICATE NO MEMBER IN OLD PDS\n         CLC   PARMPRNT(3),=C'MEM' DOES USER WANT MEMBERS?\n         BNE   NEWONLY2            NO  -- SKIP YALECOMP\n         OPEN  (NEWDCB),TYPE=J     ADD MEMBER NAMES TO JFCB\n         BAL   R12,PAGE            TOP OF FORM\n         BAL   R12,YALECOMP        YES -- COMPARE WILL LIST NEW\n         MVC   10(2,R2),=X'0005'          NO MATCHING MEMBER\nNEWONLY2 EQU   *\n*        CLOSE (OLDDCB,,NEWDCB)    CLOSE IS DONE BY YALE COMP\n         LA    R2,12(,R2)          POINT TO NEXT NEW MEMBER NAME\n         B     LOOP1               NOW GO CHECK CURRENT STATUS\n         SPACE 3\nOLDONLY  EQU   *                   COMPARE OLD AND NEW MEMBERS\n         MVC   OLDJFCB+44(8),0(R3) MOVE IN OLD MEMBER NAME\n         MVC   OLDMEM,0(R3)\n         OI    OLDJFCB+52,X'08'    DONT REWRITE JFCB\n         OI    OLDJFCB+86,X'01'    DATA SET IS MEMBER OF PDS\n         MVC   NEWMEM,=8C'*'       INDICATE NO MEMBER IN NEW PDS\n         CLC   PARMPRNT(3),=C'MEM' DOES USER WANT MEMBERS?\n         BNE   OLDONLY2            NO  -- SKIP YALECOMP\n         OPEN  (OLDDCB),TYPE=J     ADD MEMBER NAMES TO JFCB\n         BAL   R12,PAGE            TOP OF FORM\n         BAL   R12,YALECOMP        YES -- COMPARE WILL LIST OLD\n         MVC   10(2,R3),=X'0005'\nOLDONLY2 EQU   *\n*        CLOSE (OLDDCB,,NEWDCB)    CLOSE IS DONE BY YALE COMP\n         LA    R3,12(,R3)          POINT TO NEXT OLD MEMBER NAME\n         B     LOOP1               NOW GO CHECK CURRENT STATUS\n         EJECT\nPAGE     EQU   *                   TOP OF FORM ROUTINE\n         LH    R1,PAGECNT          GET OLD PAGE COUNT\n         LA    R1,1(,R1)           ADD ONE\n         STH   R1,PAGECNT          SAVE FOR NEXT TIME\n         LTR   R3,R3                Q. ARE WE PLAYING WITH MEM LIST BFG\n         BZ    PAGE4                A. NO                           BFG\n         CLC   OLDMEM,=8C'*'       IS THERE AN OLD MEMBER NAME\n         BE    PAGE2               NO  -- DON'T TRY TO SAVE PAGE NO.\n         STH   R1,8(,R3)           YES -- SAVE PAGE NUMBER\nPAGE2    EQU   *\n         CLC   NEWMEM,=8C'*'       IS THERE A NEW MEMBER NAME\n         BE    PAGE4               NO  -- DON'T TRY TO SAVE PAGE NO.\n         STH   R1,8(,R2)           YES -- SAVE PAGE NUMBER\nPAGE4    EQU   *\n         CVD   R1,DOUBLE           CONVERT PAGE NUMBER TO PACKED\n         UNPK  PAGENO,DOUBLE       NOW CHARACTER\n         OI    PAGENO+3,C'0'       NOW FIX SIGN\n         CLI   DELAY,C'D'          DELAYED HEADER?                  ABL\n         BER   R12                 YES, DO IT LATER (IF AT ALL)     ABL\n         MVI   DELAY,C'1'          ENSURE VALID PAGE EJECT          ABL\n         LA    R1,EJECT                                             GLA\n         BAL   R14,PUTOUT          GO TO TOP OF FORM AND PRINT  ABL GLA\n         LA    R1,OLDHDG           PRINT OLD PDS DSN AND MEMBER NAMEGLA\n         BAL   R14,PUTOUT          PRINT OLD PDS DSN AND MEMBER ABL GLA\n         LA    R1,NEWHDG           PRINT NEW PDS DSN AND MEMBER NAMEGLA\n         BAL   R14,PUTOUT          PRINT NEW PDS DSN AND MEMBER ABL GLA\n         BR    R12                 RETURN TO CALLER\n         EJECT\nDIR      EQU   *                   PRINT DIRECTORY\n         MVC   OLDMEM,=CL8'* OLD *'\n         MVC   NEWMEM,=CL8'* NEW *'\n         BAL   R12,PAGE\n         SPACE 3\n         L     R2,NMEM             LIST OF NEW MEMBERS\n         L     R3,OMEM             LIST OF OLD MEMBERS\nDIR2     EQU   *\n         CLC   0(8,R2),0(R3)       OLD AND NEW MATCH?\n         BE    DIRE                MEMBER IN EACH\n         BL    DIRN                ONLY NEW MEMBER\n         BH    DIRO                ONLY OLD MEMBER\n         SPACE  2\nDIRE     EQU   *                   MEMBER IN EACH\n         CLI   0(R2),X'FF'         BOTH EQUAL AND X'FF'\n         BE    CLOSE               YES -- DIRECTORY IS DONE\n         MVC   DIRLOLD,0(R3)       OLD MEMBER NAME\n         MVC   DIRLNEW,0(R2)       NEW MEMBER NAME\n         LH    R4,8(,R2)           PAGE NUMBER\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         UNPK  DIRLPGE,DOUBLE      NOW CHARACTER\n         OI    DIRLPGE+3,C'0'      NOW FIX SIGN\n         MVC   DIRLEQ,BLANK\n         MVC   DIRLNEQ,BLANK\n         MVC   DIRLMTCH,BLANK\n         CLI   11(R2),X'00'        EQUAL MATCH\n         BNE   DIRE2               NO\n         MVC   DIRLEQ,=CL8'EQUAL'\n         B     DIRE12              IGNORE LINES WITH EQUALS         ABL\n***      B     DIRE10\nDIRE2    EQU   *\n         CLI   11(R2),X'04'        NOT EQUAL\n         BNE   DIRE4               NO\n         MVC   DIRLNEQ,=CL9'NOT EQUAL'\n         B     DIRE10\nDIRE4    EQU   *\n         CLI   11(R2),X'05'        NO MATCH\n         BNE   DIRE10\n         MVC   DIRLMTCH,=CL8'NO MATCH'\nDIRE10   EQU   *\n         LA    R1,DIRLINE                                           GLA\n         BAL   R14,PUTOUT          PRINT THE LINE               ABL GLA\nDIRE12   DS    0H                                                   ABL\n         MVI   DIRLCC,C' '\n         LA    R2,12(,R2)          NEXT NEW MEMBER\n         LA    R3,12(,R3)          NEXT OLD MEMBER\n         B     DIR2                LOOP TILL DONE\n         EJECT\nDIRN     EQU   *                   MEMBER IN EACH\n         MVC   DIRLOLD,BLANK       OLD MEMBER NAME\n         MVC   DIRLNEW,0(R2)       NEW MEMBER NAME\n         LH    R4,8(,R2)           PAGE NUMBER\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         UNPK  DIRLPGE,DOUBLE      NOW CHARACTER\n         OI    DIRLPGE+3,C'0'      NOW FIX SIGN\n         MVC   DIRLEQ,BLANK\n         MVC   DIRLNEQ,BLANK\n         MVC   DIRLMTCH,=CL8'NO MATCH'\nDIRN10   EQU   *\n         LA    R1,DIRLINE                                           GLA\n         BAL   R14,PUTOUT          PRINT THE LINE               ABL GLA\n         MVI   DIRLCC,C' '\n         LA    R2,12(,R2)          NEXT NEW MEMBER\n         B     DIR2                LOOP TILL DONE\n         SPACE 3\nDIRO     EQU   *                   MEMBER IN EACH\n         MVC   DIRLOLD,0(R3)       OLD MEMBER NAME\n         MVC   DIRLNEW,BLANK       NEW MEMBER NAME\n         LH    R4,8(,R3)           PAGE NUMBER\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         UNPK  DIRLPGE,DOUBLE      NOW CHARACTER\n         OI    DIRLPGE+3,C'0'      NOW FIX SIGN\n         MVC   DIRLEQ,BLANK\n         MVC   DIRLNEQ,BLANK\n         MVC   DIRLMTCH,=CL8'NO MATCH'\nDIRO10   EQU   *\n         LA    R1,DIRLINE                                           GLA\n         BAL   R14,PUTOUT          PRINT THE LINE               ABL GLA\n         MVI   DIRLCC,C' '\n         LA    R3,12(,R3)          NEXT NEW MEMBER\n         B     DIR2                LOOP TILL DONE\n         SPACE 3\nPUTOUT   ST    R14,R14SAVE                                      ABL GLA\n         CLI   PVECTOR,C'*'               PDS REENTRY?          ABL GLA\n         BE    PUTOUT2                    YES, BRANCH           ABL GLA\n         LR    R0,R1               PUT ADDRESS IN RIGHT REGISTERABL GLA\n         PUT   SYSPRINT,(0)                                     ABL GLA\n         L     R14,R14SAVE                                      ABL GLA\n         BR    R14                                              ABL GLA\nPUTOUT2  DS    0H                         R1 IS ALREADY SETUP   ABL GLA\n         L     R15,PVECTOR                REENTRY VECTOR ADDRESSABL GLA\n         MVI   0(R1),132                  SET THE RETURN LENGTH ABL GLA\n         BALR  R14,R15                    RETURN TO PDS         ABL GLA\n         LTR   R15,R15                    SUCCESSFUL OUTPUT?    ABL GLA\n         BNZ   CLOSE2                     NO - ATTENTION, BRANCHABL GLA\n         L     R14,R14SAVE                                      ABL GLA\n         BR    R14                                              ABL GLA\n         SPACE 3\nCLOSE    EQU   *\n         ICM   R1,B'1111',RETCODE         RC=0?                     ABL\n         BNE   CLOSE2                     YES, BRANCH               ABL\n         LA    R1,ALLMEMBS                                          ABL\n         BAL   R14,PUTOUT          PRINT THE LINE                   ABL\nCLOSE2   DS    0H                                                   ABL\n         CLOSE (SYSPRINT)\n         L     R0,SIZE             SIZE OF AREA TO FREE             ABL\n         L     R1,STARTADD         START OF AREA TO FREE            ABL\n         FREEMAIN R,LV=(0),A=(1)   FREE THE DYNAMIC AREA            ABL\n*\n         L     R0,PARMSIZE         NUMBER OF MEMBERS                ABL\n         MH    R0,=H'24'           12 BYTES OLD AND 12 BYTES NEW    ABL\n         L     R1,NMEM             START OF AREA TO FREE            ABL\n         FREEMAIN R,LV=(0),A=(1)   FREE THE MEMBER STORAGE          ABL\n         B     RETURN\n         EJECT\n         LTORG\n         SPACE 3\nBLANK    DC    80C' '\nFULL     DC    F'0'\nDOUBLE   DC    D'0'\nPAGECNT  DC    H'0'\nORIGPARM DC    F'0'                                                 BFG\n         SPACE 3\n         EJECT\nPARMVALS DS    0F                  PARAM REALTED VALUES\nPARMADDR DC    F'0'                ADDR OF USER PARM\nPARMLEN  DC    F'0'                LEN OF USER PARM\nPARMPRNT DC    F'0'                PRINT NAME ONLY OR ENTIRE MEMBER\n*ARMSIZE DC    F'1000'             ESTIMATED NUMBER MEMBERS IN PDS\nPARMSIZE DC    F'9999'             ESTIMATED NUMBER MEMBERS IN PDS\nPARMTYPE DC    F'0000'             LIBRARY TYPE                   PAN\nPARMDLM  DC    C','                PARM VALUE DELIMITOR\n         SPACE 3\nOLDDSORG DC    XL1'00'             OLD FILE DSORG                   ABL\nNEWDSORG DC    XL1'00'             NEW FILE DSORG                   ABL\nPARMLIST DC    4F'0'                                                ABL\nOBTAIN   CAMLST SEARCH,0,0,0                                        ABL\n         ORG   OBTAIN+4                                             ABL\n         SPACE 3                                                    ABL\n         DS    0F             ***   FORMAT 1 DSCB  ***              ABL\n         ORG   *-44                                                 ABL\n         IECSDSL1 (1)         FORMAT 1 DSCB                         ABL\n         ORG   ,                                                    ABL\n         DC    11F'0'                                               ABL\n         EJECT\nNMEM     DC    F'0'                ADDR OF NEW MEMBER LIST\nNMEMS    EQU   NMEM\nOMEM     DC    F'0'                ADDR OF OLD EMMBER LIST\nOMEMS    EQU   OMEM\n         PRINT NOGEN\nOLDDAD1  EQU   *\nOLDDIR   DCB   BLKSIZE=256,DEVD=DA,DSORG=PS,DDNAME=OLD,EXLST=OXLST,    X\n               KEYLEN=8,LRECL=256,MACRF=(R),RECFM=F,EODAD=OLDDEOD\n         SPACE 3\nNEWDAD1  EQU   *\nNEWDIR   DCB   BLKSIZE=256,DEVD=DA,DSORG=PS,DDNAME=NEW,EXLST=NXLST,    X\n               KEYLEN=8,LRECL=256,MACRF=(R),RECFM=F,EODAD=NEWDEOD\n         SPACE 3\nOXLST    DS    0F\n         DC    X'87'\n         DC    AL3(OJFCB)\n         SPACE\nOJFCB    DC    CL176' '\n         SPACE 3\nNXLST    DS    0F\n         DC    X'87'\n         DC    AL3(NJFCB)\n         SPACE\nNJFCB    DC    CL176' '\n         SPACE 3\nOLDXLIST DS    0F\n         DC    X'05'\n         DC    AL3(DCBEXIT)\nOLDXLST2 EQU   *\n         DC    X'87'\n         DC    AL3(OLDJFCB)\n         SPACE\nOLDJFCB  DC    CL176' '\n         SPACE 3\nNEWXLIST DS    0F\n         DC    X'05'\n         DC    AL3(DCBEXIT)\nNEWXLST2 EQU   *\n         DC    X'87'\n         DC    AL3(NEWJFCB)\n         SPACE\nNEWJFCB  DC    CL176' '\n         EJECT\nDIRWORK  DS    CL264               WORK AREA FOR DIRECOTRY BLOCK READS\n         SPACE\nMEMBR    DC    CL8' ',C'  '        SAVE AREA FOR MEMBER NAMES\nMEMBR1   DC    CL8' '              SAVE AREA FOR MEMBER NAMES\nMEMBR2   DC    CL8' '              SAVE AREA FOR MEMBER NAMES\nOLDBLKSZ DC    F'0'                BLOCKSIZE FOR OLD PDS\nNEWBLKSZ DC    F'0'                BLOCKSIZE FOR NEW PDS\nOLDBLKA  DC    F'0'                ADDR OF OLD PDS BUFFER FOR READS\nNEWBLKA  DC    F'0'                ADDR OF NEW BUFFER FOR READS\nNEWBLKE  DC    F'0'                END ADDR FOR NEW BUFFER\nOLDBLKE  DC    F'0'                END OF BUFFER ADDR FOR OLD\n         EJECT\nEJECT    DC    CL133' '\n         ORG   EJECT\nDELAY    DC    C'D'               \"D\" IF DELAY FOR MISMATCH         ABL\n         ORG   EJECT\n         DC    C'1',C'PAGE  '\nPAGENO   DC    CL4' '\n         ORG   ,\n         SPACE 2\nNEWHDG   DC    CL133' '\n         ORG   NEWHDG\n         DC    C'-',C'VOL=SER='\nNEWVOL   DC    CL6' ',C'  MEMBER='\nNEWMEM   DC    CL8' ',C'  NEW DSN='\nNEWDSN   DC    CL44' '\n         ORG   ,\n         SPACE 3\nOLDHDG   DC    CL133' '\n         ORG   OLDHDG\n         DC    C'-',C'VOL=SER='\nOLDVOL   DC    CL6' ',C'  MEMBER='\nOLDMEM   DC    CL8' ',C'  OLD DSN='\nOLDDSN   DC    CL44' '\n         ORG   ,\n         SPACE 3\nALLMEMBS DC    CL133'- ALL MEMBERS WERE IDENTICAL IN THESE DATA SETS'\nDIRLINE  DC    CL133' '\n         ORG   DIRLINE\nDIRLCC   DC    C'-',C'OLD MEM='\nDIRLOLD  DC    CL8' ',C' PAGE '\nDIRLPGE  DC    CL4' ',C' NEW MEM='\nDIRLNEW  DC    CL8' ',C' '\nDIRLEQ   DC    CL8' ',C' '\nDIRLNEQ  DC    CL9' ',C' '\nDIRLMTCH DC    CL8' ',C' '\n         ORG   ,\n TITLE 'YALE COMPARE     ---  BRUCE LELAND   ---  VERSION 2.0    '\n*     CMPRSEQ  CSECT\n*\n*   THIS COMPARE PROGRAM ORIGINATED AT YALE UNIVERSITY AND WAS OBTAINED\n*     FROM THE CONNECTICUT BANK AND TRUST COMPANY MODS TAPE (FILE 226)\n*\n*   THIS COMPARE PROGRAM USES ONLY COLUMNS ONE THROUGH 72; THUS, ANY\n*     TWO VERSIONS OF A PROGRAM MAY BE EASILY COMPARED EVEN IF ONE\n*     (OR BOTH) OF THE FILES HAS BEEN RESEQUENCED.  IF NEITHER FILE\n*     HAS BEEN RESEQUENCED, A PARM OF \"FULL\" MAY BE CODED TO REQUEST\n*     THAT ALL EIGHTY COLUMNS BE USED IN THE COMPARISON.  A FACILITY\n*     IS ALSO PROVIDED TO IGNORE TRIVIAL CARD IMAGES (SUCH AS \" EJECT \"\n*     OR \" SPACE 3 \" IN AN ASSEMBLER SOURCE PROGRAM).\n*\n*   THIS PROGRAM USES ALL AVAILABLE CORE IN ITS REGION AFTER OPENING\n*     ITS INPUT/OUTPUT FILES (EXCEPT FOR 4K WHICH IS RELEASED).  THE\n*     OBTAINED CORE AREA IS USED AS A COMPARE BUFFER WHICH IS ONLY\n*     DUMPED (WRITTEN TO SYSPRINT) WHEN IDENTICAL RECORDS (BASED ON\n*     THE FIRST 72 BYTES) ARE FOUND IN THE OLD AND NEW DATA SETS.  IF\n*     THE COMPARE BUFFER OVERFLOWS, THE PROGRAM TERMINATES.  THEREFORE,\n*     IF IT IS SUSPECTED THAT THE TWO DATA SETS MAY BE VERY FAR OUT OF\n*     SYNC, A LARGE REGION SHOULD BE USED.  THE NUMBER OF UNMATCHED\n*     RECORDS THAT CAN BE BUFFERED AT ONE TIME CAN BE CALCULATED FROM\n*     THE EXPRESSION:  (REGION SIZE - 8K - BUFFERS) / 160\n*     AS A GENERAL RULE, 30K IS SUFFICIENT FOR ABOUT 100 UNMATCHED\n*     RECORDS AT A TIME, AND 100K IS SUFFICIENT FOR ABOUT 500 UNMATCHED\n*     RECORDS AT A TIME.\n*\n*   CARD IMAGES OF THE TRIVAL DATA IS INPUT FROM THE IGNORE DDNAME;\n*     IF THE DDCARD IS MISSING, A TABLE OF TRIVIAL DATA FOR ASSEMBLER\n*     SOURCE CODE WILL BE ASSUMED (THIS INCLUDES \" EJECT \", \" SPACE   \"\n*     \" SPACE 1 \", \" SPACE 2 \", \" SPACE 3 \" AND BLANK COMMENT CARDS).\n*\n*\n*\n*   THE PROGRAM FORMAT ON THE CBT MODS TAPE WAS DISASSEMBLED SOURCE; IT\n*     WAS RECOMMENTED, RESYMBOLIZED, REDOCUMENTED AND SLIGHTLY MODIFIED\n*     BY  A. BRUCE LELAND (ABL)  OCTOBER, 1978\n*\n*\n*   JCL:\n*\n*   //STEPNAME   EXEC  PGM=COMPARE,REGION=100K\n*   //OLD        DD    DSN=OLD.SEQ.DSN ....\n*   //NEW        DD    DSN=NEW.SEQ.DSN ....\n*   //SYSPRINT   DD    SYSOUT=A\n*   //IGNORE     DD    *      (OR DUMMY  --  OR OMITTED)\n*     TRIVIAL CARD IMAGES THAT ARE TO BE IGNORED IN THE COMPARISON\n*   /*\n*\n         EJECT\n*        USING CMPRSEQ,R15\n         DS    0D\nYALECOMP EQU   *\n         CLC   PARMPRNT(3),=C'DIR'\n         BE    0(,R12)            USER ONLY WANT DIRECTORY LIST\n         PRINT GEN\n*        SAVE  (14,12),,*\n         STM   R0,R15,SAVE\n*        LR    R11,R13\n*        LA    R13,SAVE\n*        USING SAVE,R13\n*        ST    R13,8(,R11)\n*        ST    R11,4(,R13)\n         B     INIT\nSAVE     DC    18F'0'\n*PARM     L     R1,0(,R1)\n*         CLC   2(4,R1),FULL\n*         BNE   OPEN\n*         MVI   MLENGTH,X'4F'\n*OPEN     OPEN  (NEW,,OLD,,SYSPRINT,OUTPUT,IGNORE)\n*         SPACE\n*         GETMAIN VU,LA=MIN,A=STARTADD      GET ALL AVAILABLE CORE\n*         LM    R0,R2,FOURK                 LOAD 4K, START, SIZE\n*         SR    R2,R0                       SUBTRACT OFF 4K\n*         ST    R2,SIZE                     UPDATE REGION SIZE\n*         AR    R1,R2                       LAST USEABLE BYTE\n*         ST    R1,HIGHCORE                 SAVE FOR LATER\n*         SPACE\n*         FREEMAIN R,LV=(0),A=(1)           FREE THE 4K DYNAMIC AREA\n*         L     R2,STARTADD\n*         ST    R2,FIRSTIG\n*         TM    IGNORE+48,X'10'             IGNORE OPEN?\n*         BO    GETIG                       YES, BRANCH             ABL\n*         MVC   FIRSTIG(8),IGASMS           FIRST AND LAST IGNORES  ABL\n*         B     NOIG                          FOR ASSEMBLER SOURCE  ABL\n*         SPACE\n*GETIG    GET   IGNORE,(2)\n*         LA    R2,80(,R2)\n*         B     GETIG\n*         SPACE\n*ENDIG    CLOSE (IGNORE)\n*         ST    R2,LASTIG                                          ABL\nINIT     EQU   *\n*                                                                   BFG\n**       SETUP REG 10 TO HAVE LENGTH OF RECORDS                     BFG\n*                                                                   BFG\n         LA    R2,OLDDCB\n         LH    R10,LRECL(,R2)      GET LRECL\n         CH    R10,MLENGTH         IS IT LARGER THAN MLENGTH      GP@P6\n         BH    *+8                 YES                            GP@P6\n         MVI   MLENGTH+1,0         NO, FORCE 'FULL'               GP@P6\n         TM    RECFM(R2),X'10'     IS IT BLOCKED\n         BO    *+8                 YES, BRANCH\n         LH    R10,BLKSI(,R2)      NO, BLKSIZE IS RECORD LENGTH\n         SPACE\n         LA    R2,NEWDCB\n         LH    R1,LRECL(,R2)       GET LRECL\n         TM    RECFM(R2),X'10'     IS IT BLOCKED\n         BO    *+8                 YES, BRANCH\n         LH    R1,BLKSI(,R2)       NO, BLKSIZE IS RECORD LENGTH\n         SPACE\n         CR    R10,R1              IS OLD LONGER THAN NEW\n         BNH   *+6                 NO, BRANCH\n         LR    R10,R1              YES, USE THE SHORTER OF THE TWO\n*        LA    R1,256              MAX RECORD SIZE  (NOW NO MAX SIZE)\n*        CR    R10,R1              IS LRECL TOO LONG\n*        BNH   *+6                 NO, BRANCH\n*        LR    R10,R1              YES, USE 256\n*                                                                   BFG\n**       INIT OTHER FIELDS                                          BFG\n*                                                                   BFG\n         L     R2,BSTRTA           ADDRESS OF GOTTEN BUFFER+IGNORES BFG\n         L     R3,SIZE             SIZE OF GOTTEN BUFFER\n         S     R3,BSTRTA                                            BFG\n         A     R3,STARTADD         SIZE OF BUFFER TO BE CLEARED\n         SR    R8,R8               SET FROM AREA TO BE ALL PADS     BFG\n         SR    R9,R9               WITH LENGTH AND ADDRESS OF ZERO  BFG\n         MVCL  R2,R8\n         L     R2,BSTRTA           ADDRESS OF GOTTEN BUFFER+IGNORES BFG\n         XC    COUNT,COUNT\n         XC    RC,RC\n         ST    R2,LOWOLD                                           ABL\n         ST    R2,HIGHOLD\n         ST    R2,CURROLD\n         AR    R2,R10\n         ST    R2,LOWNEW\n         ST    R2,HIGHNEW\n         ST    R2,CURRNEW\n         LA    R8,OLDDCB\n         LA    R9,NEWDCB\n*\n*    THIS COMPLETES THE PROGRAM INITIALIZATION\n*\n         EJECT\nSWAP     XR    R9,R8\n         XR    R8,R9\n         XR    R9,R8\n         L     R3,CURR(,R9)\n         C     R3,HIGH(,R9)\n         BL    NOINPUT\n         TM    OFLGS(R9),X'10'         CURRENT DCB OPEN?\n         BZ    SWAP                    NO, BRANCH (AND SWAP)\nOMITGET  DS    0H                                                   GP\n         LA    R1,0(,R9)\n         GET   (1)\n         SPACE\n         TM    RECFM(R9),X'C0'      FIXED LENGTH RECORDS?        GP@FT*\n         BNM   USEGET               NO, BYPASS IGNORE TEST            *\n         TM    RECFM(R9),X'80'      FIXED LENGTH RECORDS?             *\n         BNO   USEGET               NO, BYPASS IGNORE TEST       GP@FT*\n         LR    R14,R10              GET LENGTH TO COMPARE           GP*\n         BCTR  R14,0                MINUS 1 FOR EX                    *\n         SH    R14,MLENGTH          MINUS 8 FOR SEQUENCE NUMBERS      *\n         L     R15,FIRSTIG                FIRST IGNORE                *\n         LA    R0,79                                                  *\n         CR    R14,R0                     IS LENGTH GREATER THAN 80   *\n         BNH   *+6                        NO                          *\n         LR    R14,R0                     YES, REDUCE TO 80           *\nLOOPIG   C     R15,LASTIG                 LAST IGNORE?                *\n         BNL   USEGET                     YES, BRANCH                 *\n         EX    R14,CLCIG                  AN IGNORE RECORD?           *\n         BE    OMITGET                    YES, GET ANOTHER RECORD     *\n         LA    R15,80(,R15)                                           *\n         B     LOOPIG                     CHECK ALL IGNORES           *\nCLCIG    CLC   0(0,R1),0(R15)                                         *\nUSEGET   DS    0H                   DO NOT IGNORE THIS RECORD       GP*\n         SPACE\n         LA    R0,0(R10,R3)\n         SPACE\n         C     R0,HIGHCORE             FIT IN CORE?\n         BH    NOTCORE                 NO, BRANCH\n         SPACE\n         LR    R15,R10                 GET LENGTH\n         TM    RECFM(R9),DS1RECFV      FIXED LENGTH RECORDS?        GP*\n         BZ    MVCSTART                YES, OVERLAY ALL RESIDUAL DATA *\n         LR    R14,R3                  NO, COPY TARGET POINTER        *\n         LA    R0,256                  LOAD 256 FOR FAST ACCESS       *\nXCLOOP   CR    R15,R0                  LESS THAN 256 BYTES?           *\n         BL    XCTRAIL                 YES, CLEAR THAT LENGTH         *\n         XC    0(256,R14),0(R14)       NO, CLEAR 256 BYTES            *\n         AR    R14,R0                  ADVANCE TARGET POINTER         *\n         SR    R15,R0                  DECREASE BYTES-TO-DO           *\n         BZ    XCDONE                  RECORD WAS 256 MULTIPLE        *\n         B     XCLOOP                  CONTINUE ERASING RESIDUAL DATA *\nXCTRAIL  BCTR  R15,0                   LENGTH MINUS 1 FOR EX          *\n         B     *+10                    SKIP XC                        *\n         XC    0(0,R14),0(R14)         EXECUTED                       *\n         EX    R15,*-6                 CLEAR THE REST OF THE RECORD   *\nXCDONE   DS    0H                      RESIDUAL DATA NOW ERASED       *\n         LH    R15,LRECL(,R9)          LOAD PHYSICAL LENGTH JUST READ *\n         TM    RECFM(R9),DS1RECFU      UNDEFINED RECORD LENGTH?       *\n         BO    MVCSTART                YES, GOOD GUESS                *\n         ICM   R15,3,0(R1)             NO, VARIABLE SO GET IT FROM RDW*\nMVCSTART LR    R14,R3                  COPY TARGET POINTER            *\n         LA    R0,256                  LOAD 256 FOR FAST ACCESS       *\nMVCLOOP  CR    R15,R0                  LESS THAN 256 BYTES?           *\n         BL    MVCTRAIL                YES, LOAD THAT LENGTH          *\n         MVC   0(256,R14),0(R1)        NO, MOVE 256 BYTES             *\n         AR    R14,R0                  ADVANCE TARGET POINTER         *\n         AR    R1,R0                   ADVANCE SOURCE POINTER         *\n         SR    R15,R0                  DECREASE BYTES-TO-DO           *\n         BZ    MVCDONE                 RECORD WAS 256 MULTIPLE        *\n         B     MVCLOOP                 CONTINUE WITH THE MOVE         *\nMVCTRAIL DS    0H                      JUST THE LAST BIT LEFT       GP*\n         BCTR  R15,0                   LENGTH MINUS 1 FOR EX\n         B     *+10                    SKIP MVC\n         MVC   0(0,R14),0(R1)          EXECUTED\n         EX    R15,*-6                 MOVE THE RECORD\nMVCDONE  DS    0H                      RECORD NOW COPIED TO BUFFER  GP*\n         SPACE\n         LR    R0,R10                  GET LENGTH\n         AR    R0,R0                   DOUBLE IT\n         AR    R0,R3                   ADD R3\n         SPACE\n         ST    R0,HIGH(,R9)\n         SPACE 2\n*  SEE IF THIS RECORD (R3) IS ANYWHERE IN THE OTHER BUFFER\n*\nNOINPUT  L     R2,LOW(,R8)\nNEXT8    C     R2,CURR(,R8)\n         BNL   NO8\n         LR    R1,R10              GET LENGTH TO COMPARE\n         SH    R1,MLENGTH          MINUS 8 FOR SEQUENCE NUMBERS (MAYBE)\n         STM   R2,R3,DOUBLE        SAVE POINTER REGISTERS           GP*\n         LA    R0,256              LOAD 256 FOR FAST ACCESS           *\nCLCLOOP  CR    R1,R0               LESS THAN 256 BYTES?               *\n         BL    CLCTRAIL            YES, COMPARE THAT LENGTH           *\n         CLC   0(256,R3),0(R2)     NO, COMPARE 256 BYTES              *\n         BNE   CLCRESTR            MISMATCH FOUND SO LEAVE LOOP       *\n         AR    R3,R0               ADVANCE TARGET POINTER             *\n         AR    R2,R0               ADVANCE SOURCE POINTER             *\n         SR    R1,R0               DECREASE BYTES-TO-DO               *\n         BZ    CLCRESTR            RECORD WAS 256 MULTIPLE            *\n         B     CLCLOOP             CONTINUE WITH THE COMPARE          *\nCLCTRAIL DS    0H                  JUST THE LAST BIT LEFT           GP*\n         BCTR  R1,0                MINUS 1 FOR EX\n         B     *+10                SKIP CLC\n         CLC   0(1,R3),0(R2)\n         EX    R1,*-6              EXECUTE CLC\nCLCRESTR LM    R2,R3,DOUBLE        RESTORE POINTER REGISTERS        GP\n         BE    FOUND8\n         AR    R2,R10\n         AR    R2,R10\n         B     NEXT8\nNO8      EQU   *                   NOT IN THE BUFFER\n         AR    R3,R10\n         AR    R3,R10\n         ST    R3,CURR(,R9)        UPDATE THE CURRENT POINTER\n         B     SWAP\n         SPACE 2\n*    DOES NOT FIT IN THE ALLOCATED CORE\n*\nNOTCORE  BAL   R14,NOTEQUAL               OUTPUT NOT EQUAL MESSAGE\n         CLOSE (NEWDCB,,OLDDCB)\n         FREEPOOL OLDDCB                                            ABL\n         FREEPOOL NEWDCB                                            ABL\n         MVC   RETCODE,=F'8'       RETURN CODE 8                    ABL\n         MVC   BUFFER(35),CORE            CORE OVERFLOW MESSAGE\n         MVC   BUFFER+35(86),BUFFER+34    CLEAR THE REMAINDER\n         LA    R1,BUFFER                                            GLA\n         BAL   R14,PUTLINE         PRINT THE LINE                   GLA\n         MVI   BUFFER,X'40'\n         B     CORETERM\n         SPACE 2\nPUTLINE  ST    R14,R14SAVE                                      ABL GLA\n         CLI   PVECTOR,C'*'               PDS REENTRY?          ABL GLA\n         BE    PUTL10                     YES, BRANCH           ABL GLA\n         LR    R0,R1               PUT ADDRESS IN RIGHT REGISTER    GLA\n         PUT   SYSPRINT,(0)                                         GLA\n         L     R14,R14SAVE                                      ABL GLA\n         BR    R14                                              ABL GLA\nPUTL10   DS    0H                         R1 IS ALREADY SETUP       GLA\n         L     R15,PVECTOR                REENTRY VECTOR ADDRESSABL GLA\n         MVC   WORKLINE,0(R1)             SAVE THE OUTPUT LINE      ABL\n         LA    R1,WORKLINE                RESET THE OUTPUT ADDRESS  ABL\n         MVI   0(R1),121                  SET THE RETURN LENGTH     ABL\n         BALR  R14,R15                    RETURN TO PDS         ABL GLA\n         LTR   R15,R15                    SUCCESSFUL OUTPUT?    ABL GLA\n         BNZ   EXIT12                     NO - ATTENTION, BRANCHABL GLA\n         L     R14,R14SAVE                                      ABL GLA\n         BR    R14                                              ABL GLA\n         EJECT\n*   RECORD WAS FOUND -- SEE IF IT IS TO BE IGNORED\n*\nFOUND8   CLC   CURR(4,R9),LOW(R9)           RECORDS IN ACTIVE BUFFER?\n         BNE   NOTIG                        YES                     GP\n* LOGIC CHANGE: DO NOT CHECK IGNORE RECORDS AT THIS STAGE BUT       GP\n*               IMMEDIATELY AFTER INPUT, AND DISCARD STRAIGHT AWAY. GP\n*        BNE   CHKIG                        YES, CHECK IGNORES\n         ST    R2,CURR(,R8)\n         B     IGEQUAL\n*CHKIG   L     R15,FIRSTIG                FIRST IGNORE\n*        LA    R0,79\n*        CR    R1,R0                      IS LENGTH GREATER THAN 80\n*        BNH   *+6                        NO\n*        LR    R1,R0                      YES, REDUCE TO 80\n*LOOPIG  C     R15,LASTIG                 LAST IGNORE?\n*        BNL   NOTIG                      YES, BRANCH\n*        EX    R1,CLCIG                   AN IGNORE RECORD?\n*        BE    NO8                        YES, BRANCH\n*        LA    R15,80(,R15)\n*        B     LOOPIG                     CHECK ALL IGNORES\n*CLCIG   CLC   0(1,R3),0(R15)\n*\nNOTIG    ST    R2,CURR(,R8)               NOT AN IGNORE RECORD\n         BAL   R14,NOTEQUAL               OUTPUT \"NOT EQUAL\"\nIGEQUAL  BAL   R14,INBUFF                 ADD TO COMPARE BUFFER\n         XR    R9,R8\n         XR    R8,R9\n         XR    R9,R8\n         BAL   R14,INBUFF                 ADD TO OTHER BUFFER\n         B     SWAP\n         SPACE 2\n*  END OF FILE (OLD OR NEW)\n*\nEOLDNEW  CLOSE ((9))                      CLOSE THE CURRENT FILE\n         FREEPOOL (9)                                               ABL\n         XR    R9,R8\n         XR    R8,R9\n         XR    R9,R8\n         TM    OFLGS(R9),X'10'            OTHER FILE STILL OPEN?\n         BNZ   SWAP                       YES, BRANCH\n         CLC   LOWOLD(4),HIGHOLD          BUFFER EMPTY?\n         BNE   *+14                       NO, BRANCH\n         CLC   LOWNEW(4),HIGHNEW          OTHER BUFFER EMPTY TOO?\n         BE    TRIPLE                     YES, QUIT\n         BAL   R14,NOTEQUAL               FLUSH THE CURRENT BUFFERS\n         B     TRIPLE\n         EJECT\n*  TERMINATE -- LIST NUMBER OF UNEQUAL COMPARES\n*\nTRIPLE   MVI   BUFFER,C' '                                          BFG\n         CLI   DELAY,C'D'                  DELAYED OUTPUT?          ABL\n         BE    EXIT                        YES, BRANCH              ABL\n         LA    R1,BLANKS                SPACE  LINES W/O            GLA\n         BAL   R14,PUTLINE                                          GLA\n         LA    R1,BLANKS                   CARRIAGE CONTROL         GLA\n         BAL   R14,PUTLINE                                          GLA\nCORETERM MVC   BUFFER+1(6),EDCOUNT          EDIT MASK\n         MVC   BUFFER+7(35),BLOCKS          UNEQUAL BLOCKS MESSAGE\n         MVC   BUFFER+42(79),BUFFER+41      BLANK REMAINDER\n         LH    R1,COUNT\n         CVD   R1,DOUBLE\n         ED    BUFFER+1(6),DOUBLE+5\n         LA    R1,BUFFER                   CARRIAGE CONTROL         GLA\n         BAL   R14,PUTLINE                                          GLA\n         MVC   BUFFER+7(35),BLANK   CLEAR OUT BUFFER                BFG\n         B     EXIT\nEXIT12   MVI   RC+1,12                                              ABL\nEXIT     LA    R2,NEWDCB\n         TM    OFLGS(R2),X'10'     IS DCB OPN\n         BNO   EXITNEWC\n         CLOSE (NEWDCB)\n         FREEPOOL NEWDCB                                            ABL\nEXITNEWC EQU   *\n         LA    R2,OLDDCB\n         TM    OFLGS(R2),X'10'     IS DCB OPN\n         BNO   EXITOLDC\n         CLOSE (OLDDCB)\n         FREEPOOL OLDDCB                                            ABL\nEXITOLDC EQU   *\n         LH    R15,RC                                               BFG\n         LM    R0,R14,SAVE          RESTORE REGS                    BFG\n         BR    R12                  RETURN                          BFG\n         SPACE\n*  RE-INITIALIZE THE ACTIVE BUFFER -- SLIDE UNUSED RECORDS DOWN\n*\nINBUFF   L     R1,LOW(,R9)\n         L     R2,CURR(,R9)\n         ST    R1,CURR(,R9)\nNXTREC   EQU   *\n         AR    R2,R10\n         AR    R2,R10\n         C     R2,HIGH(,R9)        FINISHED REINITIALIZING?\n         BNL   REINIT              YES, BRANCH\n         SPACE\n         LR    R15,R10             GET LENGTH                       GP*\n         STM   R1,R2,DOUBLE        SAVE POINTER REGISTERS             *\n         LA    R0,256              LOAD 256 FOR FAST ACCESS           *\nSLIDELP  CR    R15,R0              LESS THAN 256 BYTES?               *\n         BL    SLIDETRL            YES, LOAD THAT LENGTH              *\n         MVC   0(256,R1),0(R2)     NO, MOVE 256 BYTES                 *\n         AR    R1,R0               ADVANCE TARGET POINTER             *\n         AR    R2,R0               ADVANCE SOURCE POINTER             *\n         SR    R15,R0              DECREASE BYTES-TO-DO               *\n         BZ    SLIDEDON            RECORD WAS 256 MULTIPLE            *\n         B     SLIDELP             CONTINUE WITH THE MOVE             *\nSLIDETRL BCTR  R15,0               JUST THE LAST BIT LEFT             *\n         EX    R15,SLIDEMVC        MOVE THE REST OF THE RECORD\nSLIDEDON LM    R1,R2,DOUBLE        RESTORE THE POINTER REGISTERS    GP*\n         SPACE\n         AR    R1,R10\n         AR    R1,R10\n         B     NXTREC\nSLIDEMVC MVC   0(0,R1),0(R2)       EXECUTED\nREINIT   ST    R1,HIGH(,R9)        RESET MAXIMUM POINTER\n         BR    R14\n         EJECT\n*     FLUSH OUT THE NON-EQUAL RECORDS\n*\nNOTEQUAL ST    R14,NOTEQR14\n         MVI   RC+1,4             RETURN CODE 4\n         LH    R1,COUNT\n         LA    R1,1(,R1)\n         STH   R1,COUNT\n         MVI   BUFFER,C' '\n         LA    R3,OLDDCB\n*\n         CLI   DELAY,C'D'          DELAYED HEADER?                  ABL\n         BNE   NOTEQU2             NO, BRANCH                       ABL\n         MVI   DELAY,C'1'          YES, RESET TO EJECT              ABL\n         LA    R1,EJECT                                             ABL\n         BAL   R14,PUTLINE         GO TO TOP OF FORM AND PRINT      ABL\n         LA    R1,OLDHDG           PRINT OLD PDS DSN AND MEMBER     ABL\n         BAL   R14,PUTLINE         PRINT OLD PDS DSN AND MEMBER     ABL\n         LA    R1,NEWHDG           PRINT NEW PDS DSN AND MEMBER     ABL\n         BAL   R14,PUTLINE         PRINT NEW PDS DSN AND MEMBER     ABL\nNOTEQU2  DS    0H                                                   ABL\n*    OUTPUT TWO BLANK LINES (TRIPLE SPACE) FOR BROWSE\n         LA    R1,BLANKS                SPACE  LINES W/O            GLA\n         BAL   R14,PUTLINE                                          GLA\n         LA    R1,BLANKS                   CARRIAGE CONTROL         GLA\n         BAL   R14,PUTLINE                                          GLA\nMOVES    MVC   BUFFER+9(3),OLDNEW(R3)\n         MVC   BUFFER+98(3),OLDNEW(R3)\n         MVI   BUFFER+7,C'-'\n         MVI   BUFFER+102,C'-'\n         ZAP   NUMBER(3),=P'0'\n         L     R5,LOW(,R3)\nFLUSHED  C     R5,CURR(,R3)               IS THIS BUFFER FLUSHED?\n         BNL   GETNEW                     YES, BRANCH\n         LR    R15,R10                 GET LENGTH                 GP@P6\n         CH    R15,=H'80'              CHECK FOR LARGE LRECL      GP@P6\n         BNH   *+8                     LRECL IS OKAY              GP@P6\n         LA    R15,80                  NEVER SHOW MORE THAN 80    GP@P6\n         BCTR  R15,0                   LENGTH MINUS 1 FOR EX      GP@P6\n         EX    R15,RECPRTBF            COPY RECORD TO PRINT BUFR  GP@P6\n         AP    NUMBER(3),=P'1'\n         MVC   DOUBLE(6),EDMKPAT\n         EDMK  DOUBLE(6),NUMBER           POINT R1 TO FIRST NONBLANK\n         LA    R14,DOUBLE+5               POINT TO LAST DIGIT\n         SR    R14,R1                     GET LENGTH MINUS 1\n         STC   R14,MOVEA+1                ALTER MVC LENGTH CODE\nMOVEA    MVC   BUFFER+103(1),0(R1)        MOVE NUMBER\n         LA    R15,BUFFER+104(R14)\n         MVI   0(R15),C'-'\n         LA    R14,1(,R14)\n         STC   R14,MOVEB+1\n         LA    R1,BUFFER+6\n         SR    R1,R14\nMOVEB    MVC   0(1,R1),BUFFER+102\n         CLI   PVECTOR,C'*'               PDS REENTRY?              ABL\n         BE    MOVEB2                     YES, BRANCH               ABL\n         TM    SYSPRINT+17,X'4F'        TSO OUTPUT \"DA(*)\"?         ABL\n         BNO   MOVEB2                   NO, BRANCH                  ABL\n         MVC   BUFFER+79(42),BLANKS     BLANK PAST SCREEN WIDTH     ABL\n         TR    BUFFER(79),TSOXLATE      REMOVE UNDISPLAYABLES       -GP\nMOVEB2   LA    R1,BUFFER                                            GLA\n         BAL   R14,PUTLINE                                          GLA\n         MVI   BUFFER,X'40'\n         AR    R5,R10\n         AR    R5,R10\n         B     FLUSHED\nRECPRTBF MVC   BUFFER+15(0),0(R5)         EXECUTED                GP@P6\n*\nGETNEW   LA    R1,NEWDCB\n         CR    R3,R1                      NEW DONE?\n         BE    NOTEQRET                   YES, RETURN\n         LR    R3,R1                      NOW SETUP THE NEW BUFFER\n         MVC   BUFFER+1(7),BLANKS\n         MVI   BUFFER+9,C'-'\n         MVC   BUFFER+10(91),BUFFER+9\n         MVC   BUFFER+102(19),BLANKS\n         CLI   PVECTOR,C'*'               PDS REENTRY?              ABL\n         BE    MOVEB22                    YES, BRANCH               ABL\n         TM    SYSPRINT+17,X'4F'          TSO OUTPUT \"DA(*)\"?       ABL\n         BNO   *+10                       NO, BRANCH                ABL\n         MVC   BUFFER+78(43),BLANKS       BLANK PAST SCREEN WIDTH   ABL\nMOVEB22  LA    R1,BUFFER                                            GLA\n         BAL   R14,PUTLINE                                          GLA\n         MVI   BUFFER,X'40'\n         B     MOVES\n         SPACE\nNOTEQRET L     R14,NOTEQR14\n         BR    R14\n         EJECT\n*\n*        DCB EXIT ROUTINE (USED BY ALL FILES)\n*\nDCBEXIT  LH    R3,BLKSI(,R1)              BLKSIZE\n         LR    R4,R3                      BLKSIZE        FIX-0C9\n         TM    RECFM(R1),X'10'            IS IT BLOCKED  FIX-0C9\n         BZ    *+8                        NO             FIX-0C9\n         LH    R4,LRECL(,R1)              BLOCKED, GET LRECL\n         SR    R2,R2\n         DR    R2,R4                      BLOCKSIZE/LRECL\n         MR    R2,R4                      BLOCKING*LRECL\n         CR    R3,R4                      BLOCKSIZE >  LRECL?\n         BH    *+10                       YES, BRANCH\n         LR    R3,R4                      MAKE BLKSIZE=LRECL\n         NI    RECFM(R1),255-X'10'        TURN OFF BLOCKING\n         STH   R3,BLKSI(,R1)              NEW BLOCKSIZE\n         STH   R3,24(,R1)                 BUFLEN PARAMETER\n         CLI   20(R1),X'00'               BUFNO=0?\n         BNER  R14                        NO, QUIT\n         MVI   20(R1),X'03'               DEFAULT TO 3 BUFFERS\n         BR    R14                        EXIT\n         SPACE 1\nSYSPRINT DCB   LRECL=121,RECFM=FBA,EXLST=EXITDCB,DDNAME=SYSPRINT,      X\n               MACRF=(PM),DSORG=PS\n         SPACE 1\nIGNORE   DCB   LRECL=80,RECFM=FB,EXLST=EXITDCB,DDNAME=IGNORE,          X\n               EODAD=ENDIG,MACRF=(GM),DSORG=PS\nFIRSTIG  DC    F'0'                     POINTER TO FIRST IGNORE RECORD\nLASTIG   DC    F'0'                     POINTER TO LAST IGNORE RECORD\n         SPACE 1\nOLDDCB   DCB   DDNAME=OLD,EXLST=OLDXLST2,                              X\n               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C\nRECFM    EQU   36\nDDNAM    EQU   40\nOFLGS    EQU   48\nLRECL    EQU   82\nBLKSI    EQU   62\nLOWOLD   DC    F'0'                     FIRST OLD RECORD\nHIGHOLD  DC    F'0'                     HIGHEST USED OLD RECORD\nCURROLD  DC    F'0'                     CURRENT OLD RECORD\nSAVER07  DC    F'0'                     SAVE REGISTER 7 (3RD BASE)\nOLDLIT   DC    C'OLD'\n         SPACE 1\nNEWDCB   DCB   DDNAME=NEW,EXLST=NEWXLST2,                              X\n               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C\nLOWNEW   DC    F'0'                     FIRST NEW RECORD\nHIGHNEW  DC    F'0'                     HIGHEST USED NEW RECORD\nCURRNEW  DC    F'0'                     CURRENT NEW RECORD\nNEWLIT   DC    C'NEW'\nLOW      EQU   LOWNEW-NEWDCB      DISPLACEMENT TO LOWOLD AND LOWNEW\nHIGH     EQU   HIGHNEW-NEWDCB     DISPLACEMENT TO HIGHOLD AND HIGHNEW\nCURR     EQU   CURRNEW-NEWDCB     DISPLACEMENT TO CURROLD AND CURRNEW\nOLDNEW   EQU   NEWLIT-NEWDCB      DISPLACEMENT TO OLD OR NEW LITERAL\n         EJECT\n         DS    0F\nEXITDCB  DC    X'85',AL3(DCBEXIT)\nRC       DC    H'0'\nCOUNT    DC    H'0'\nNUMBER   DC    XL3'0'\n*MLENGTH DC    AL1(71)             COMPARE LENGTH FOR EACH RECORD\nMLENGTH  DC    H'8'                ADJUSTMENT TO COMPARE LENGTH\nMIN      DC    0F'0',A(100*1024)    MINIMUM STORAGE TO GETMAIN   100K\nMAX      DC    A(2000*1024)         MAXIMUM STORAGE TO GETMAIN   2000K\nSIXTEENK DC    A(16*1024)           AMOUNT OF STORAGE TO RELEASE 16K\n*MIN     DC    0F'0',X'00014000'    MINIMUM CORE TO GETMAIN    80K\n*MAX     DC    X'000C8000'          MAXIMUM CORE TO GETMAIN   800K\n*FOURK   DC    X'00001000' F'4096'  AMOUNT OF CORE TO RELEASE\nSTARTADD DC    F'0'                 BUFFER START ADDRESS\nSIZE     DC    F'0'                 SIZE OF THE BUFFER AREA\nHIGHCORE DC    F'0'                 MAXIMUM BUFFER ADDRESS\nBSTRTA   DC    F'0'                 ADDRESS AFTER LAST OF IGNORES   BFG\nBUFFER   DC    X'004040404040406040000000606060'\n         DC    80X'00',X'606060000000',X'4060404040404040'\n         DC    12C' '\nBLANKS   DC    CL121' '\nWORKLINE DC    CL121' '\nEDCOUNT  DC    X'402020202120'\nEDMKPAT  DC    X'402020202020'\nCORE     DC    C'-CORE OVERFLOW - COMPARE ABANDONED '\nBLOCKS   DC    C' BLOCKS OF COMPARE ERRORS DETECTED '\nDEVAREA  DC    2F'0'\nNOTEQR14 DC    F'0'\nR14SAVE  DC    F'0'                                             ABL GLA\nPVECTOR  DC    F'0'                                             ABL GLA\nIGASMS   DC    A(DFTIG,DFTIG)           DEFAULT IGNORE TABLE        ABL\nDFTIG    DC    CL80'         EJECT   '                              ABL\n         DC    CL80'         SPACE   '                              ABL\n         DC    CL80'         SPACE 1 '                              ABL\n         DC    CL80'         SPACE 2 '                              ABL\n         DC    CL80'         SPACE 3 '                              ABL\n         DC    CL80'*                '                              ABL\nENDDFTIG EQU   *                                                    ABL\n         LTORG\nTSOXLATE DS    0D            STOP PROG753 WITH TERMINAL EMULATOR    -GP\n         DC    XL16'004B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B1C4B1E4B'   3270 DATA\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'   STREAMS ALLOW\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'   X'40' TO X'FE'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'   AS DISPLAYABLE\n         DC    XL16'505152535455565758595A5B5C5D5E5F'   CHARACTERS IN\n         DC    XL16'606162636465666768696A6B6C6D6E6F'   ALL CHARACTER\n         DC    XL16'707172737475767778797A7B7C7D7E7F'   SETS.  THAT\n         DC    XL16'808182838485868788898A8B8C8D8E8F'   DOESN'T MEAN\n         DC    XL16'909192939495969798999A9B9C9D9E9F'   THAT THERE IS\n         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'   A GOOD SYMBOL\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'   FOR EACH OF\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'   THESE CODE\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'   POINTS,\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'   THOUGH!\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE4B'\n         DC    0D'0'\n         SPACE\n         END   COMPAREB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSAT": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00C\\x01\\x10 \\x9f\\x01\\x174\\x7f\\x01\\t\\x11\\x99\\x11c\\x11\\x99\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2010-07-28T00:00:00", "modifydate": "2017-12-13T01:09:43", "lines": 4505, "newlines": 4451, "modlines": 4505, "user": "IBMUSER"}, "text": "         LCLC  &PGM                      PROGRAM NAME           SMS0003\n         LCLC  &FMID,&PTF,&VER           VERSION/PTF LEVEL      SMS0003\n*\n&PGM     SETC  'DSAT'                                           SMS0003\n&FMID    SETC  'PDS8600'                                        SMS0003\n&PTF     SETC  '       '                                        SMS0003\n&VER     SETC  '&FMID &PTF'                                     SMS0003\n*MODIFIED BY EDS -- (NOVEMBER 2005) -- ADD SMS SUPPORT\n*ORIGINAL SOURCE -- CBT439.FILE296  (NOVEMBER 2001)\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*  BDF MODIFICATION :                                                 *\n*  30.04.2003 - A.FREYBIER                                            *\n*               MORE THAN 9999 DATASETS POSSIBLE |                    *\n*  29.11.2001 - A.FREYBIER                                            *\n*               INCREASE GETMAIN AREA FOR MORE DATASETS               *\n*  21.11.2009 - D.DALBY                                        #DD09294\n*               IGNORE \"CAMLST BLOCK\" AS IBM DROPPED SUPPORT.         *\n*               REPLACE WITH PRE-ASSEMBLED CAMLST BLOCK MACROS.       *\n*  CSC MODIFICATION :                                                 *\n*  07.29.2010 - J.KALINICH                                    DRK JUL10\n*               MARK EXTENDED FORMAT VSAM DATASETS                    *\n*  8-CHARACTER USERID AND PREFIX MODIFICATION :                       *\n*  12.12.2017 - S.GOLOB                                            UID8\n*               SUPPLY UPT PREFIX AND LENGTH FROM THE CORRECT SOURCE. *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\n         TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                 14. SYSTEM MANAGED DATA SET FLAG             SMS0001*\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   SMS/NOSMS                  SMS0001*\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOSMS                            SMS0001*\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*SMS0001                                                              *\n*SMS0001          SMS/NOSMS                                           *\n*SMS0001                      SPECIFIES WHETHER OR NOT THE SMS DATA   *\n*SMS0001                      SET FLAG SHOULD BE DISPLAYED.  SMS      *\n*SMS0001                      MANAGED DATA SETS ARE INDICATED BY 'YES'*\n*SMS0001                      AND NON-SMS MANAGED DATA SETS BY 'NO.'  *\n*SMS0001                      ADDITIONALLY, DATA SETS WITH A BLOCK    *\n*SMS0001                      SIZE DETERMINED BY THE SYSTEM (SDB) ARE *\n*SMS0001                      INDICATED WITH AN ASTERISK NEXT TO THE  *\n*SMS0001                      BLOCK SIZE.                             *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n*\n*  11/15/05  ADDED SMS KEYWORD.                        SMS0001      JCG\n*            ADDED SIZE KEYWORD WITH DEFAULT OF 8192 TO SPECIFY A\n*            LARGER SVC26 WORKAREA SIZE.  LOGIC TO OBTAIN A LARGER\n*            WORKAREA IS NOT WORKING SO WE'LL PASS THE BUCK TO THE\n*            USER.  MAXIMUM VALUE IS 65535.\n*            UPDATED SECONDARY SPACE PROCESSING TO DISPLAY SECONDARY\n*            AMOUNTS OF BYTES, KBYTES, MBYTES, OR GBYTES.\n*            ADDED PDS/E DETECTION AND DISPLAY DSORG OF PE IF PDSE\n*            FLAG IS SET.\n*            REMOVED INTERNAL FORMAT-1 DSCB MACRO AND REPLACED WITH THE\n*            REAL DEAL.  A COUPLE OF LABELS HAD TO BE MODIFIED TO\n*            USE THE PROPER FIELD NAME (NOEPV).\n*  11/15/05  ADDED DATACLAS, MGMTCLAS, AND STORCLASS     SMS0002    JCG\n*            KEYWORDS TO DISPLAY SMS ATTRIBUTES FOR THE DATA SET.\n*            THESE KEYWORDS ARE VALID ONLY IF 'SMS' IS ALSO SPECIFIED\n*            OR DEFAULTED.                               PDS1122\n*  11/15/05  MODIFIED CODE BECAUSE WITH THE ADDITION     SMS0003    JCG\n*            OF SMS0001 AND SMS0002 WE BLEW A BASE REGISTER. THE CODE\n*            WAS CHANGED WITH BRUT FORCE BY ESTABLISHING A NEW BASE\n*            REGISTER AROUND THE LABELS THAT WERE NOT ADDRESSABLE.\n*            SEARCHES FOR BASE0? WILL GO TO THE LOCATIONS CHANGED.\n*  07/26/10  ADDED RECOGNITION OF HFS DATASETS                 @KLS0710\n*  07/29/10  MARK EXTENDED FORMAT VSAM DATASETS               DRK JUL10\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         IECSDSL1 (1)                                           SMS0001\n         MEXIT                                                  SMS0001\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*  THIS CODE SEEMS NOT TO BE USED. ONLY ACTIVATE ON DOWN-LEVEL SYSTEMS.\n*    THE REAL CODE IS FROM MACRO IECSDSL1 (1) ABOVE.\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\nDS1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - BELOW\nDS1SMSDS EQU   X'80'  1... ....    SYSTEM MANAGED DATA SET\nDS1SMSUC EQU   X'40'  .1.. ....    NO BCS ENTRY EXISTS FOR DATA SET\nDS1REBLK EQU   X'20'  ..1. ....    SDB AND D.S. MAY BE REBLOCKED\nDS1CRSDB EQU   X'10'  ...1 ....    DADSM CREATE ORIGINATED BLKSIZE\nDS1PDSE  EQU   X'08'  .... 1...    PDSE DATA SET\nDS1STRP  EQU   X'04'  .... .1..    EXTENDED FORMAT DATA SET\nDS1PDSEX EQU   X'02'  .... ..1.    HFS DATA SET\nDS1DSAE  EQU   X'01'  ........1    EXTENDED ATTRIBUTES EXIST\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - ABOVE\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\nDS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\nDS3PTRDS DS    XL5                      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '3145728'                                    #6735B3 BDF\n**&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT   HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n         TITLE 'ENTRY CODING'\nDSAT     $ENTER BASE=(R11,R12),                                        +\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB\n         USING DSAT+4096+4096,R7                                SMS0003\n         ST    R7,SAVER7                                        SMS0003\n         LA    R7,4095(R12)                                     SMS0003\n         LA    R7,1(R7)                                         SMS0003\n         ST    R7,BASER3                   SAVE FOR FUTURE      SMS0003\n         LA    R1,4095(R7)                                      SMS0003\n         LA    R1,1(R1)                                         SMS0003\n         ST    R1,BASER4                   SAVE FOR FUTURE      SMS0003\n         MVC   DSATHEDR(4),MODLINE\n         DROP  R7                                               SMS0003\n         L     R7,SAVER7                                        SMS0003\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVI   BLANKS,C' '             BLANK LINE               SMS0002\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS                      SMS0002\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         DROP  R8                      DROP IOPL BASE REGISTER\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n         CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         B     AROUNDID                 BRANCH AROUND THE ID    SMS0003\n         DC    AL1(L'CSECTID)           LENGTH OF CSECT ID      SMS0003\nCSECTID  DC    C'&PGM &VER'                                     SMS0003\nAROUNDID DS    0H                                               SMS0003\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n*--------GET CATALOG WORKAREA\n*SMS0001 L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         L     R2,WORKSIZE             GET PTR TO SIZE          SMS0001\n         L     R2,0(,R2)               GET WORKSIZE             SMS0001\n         C     R2,=F'65535'            Q:IS VALUE VALID?        SMS0001\n         BNH   *+8                     Y-USE IT                 SMS0001\n         L     R2,=F'65535'            N-USE MAX VALUE          SMS0001\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n         BNE   *+8                   YES, BRANCH\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL EQU   *\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         BE    SEARS               YES, CONTINUE               HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3\n         STM   R1,R4,DSATDCB3\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   ZEROTOT\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    SETUPHDR\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n         BNE   *+8                     YES, BRANCH\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    SETUPHDR\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TRYDEV\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TRYDEV\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         BE    TRYDEVIC\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         BE    TRYALLOC\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    TRYDSORG\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n         LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    TRYDSORG\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    TRYPDS\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    TRYDCB\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    TRYCRDAT\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    TRYEXDAT\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    TRYLREFD\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   TRYCCHHR\n         BNE   TRYSMS                                           SMS0001\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\n         SPACE\nTRYSMS   CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   TRYCCHHR                                         SMS0001\n         ST    R2,SMSFLD               SAVE OUTPUT FIELD ADDR   SMS0001\n         MVC   0(4,R2),=C'SMS '        MOVE IN HEADER           SMS0001\n         LA    R2,4(,R2)               INCREMENT POINTER        SMS0001\n         SPACE\n****************************************************************SMS0002\n*        SMS KEYWORD MUST ALSO BE SPECIFIED OR DEFAULTED TO GET THE   *\n*        DATACLAS, MGMTCLAS, AND STORCLAS VALUES.                     *\n****************************************************************SMS0002\n         SPACE\n         XR    R15,R15                 FLAG = 0                 SMS0002\nTRYDATAC CLI   DATACLAS+1,1            TEST FOR DATACLAS        SMS0002\n         BNE   TRYMGMTC                                         SMS0002\n         ST    R2,DATACFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'DATACLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYMGMTC CLI   MGMTCLAS+1,1            TEST FOR MGMTCLAS        SMS0002\n         BNE   TRYSTORC                                         SMS0002\n         ST    R2,MGMTCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'MGMTCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYSTORC CLI   STORCLAS+1,1            TEST FOR STORCLAS        SMS0002\n         BNE   TESTLOAD                                         SMS0002\n         ST    R2,STORCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'STORCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTESTLOAD EQU   *                       SEE IF SMS KEYWORD       SMS0002\n         XC    IGWASMSV,IGWASMSV       CLEAR MODULE ADDRESS     SMS0002\n         LTR   R15,R15                 Q:KEYWORD SPECIFIED?     SMS0002\n         BZ    TRYCCHHR                N-DON'T NEED THIS JUNK   SMS0002\n         SPACE ,                                                SMS0002\n         LA    R15,SMS_A               TO TRICK CALL            SMS0002\n         CALL  (15),(IGWRC,IGWREAS,IGWPROB,IGWLEN,DSNAME,IGWSMS,       +\n               IGWTYPE),                                        SMS0002+\n               MF=(E,CALL_L)                                    SMS0002\n         SPACE\nSMS_A    EQU   *\n         MVI   IGWLEN+3,44             HARD LENGTH OF DSNAME    SMS0002\n         LOAD  EPLOC=IGWASMSC          SMS ATTR ROUTINE         SMS0002\n         ST    R0,IGWASMSV             SAVE ADDRESS             SMS0002\n         SPACE\nTRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    DODSNAME\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         BH    DSNFLDOK\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\n*SMS0002 LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\nDSNFLDOK LA    R1,OUTLINE+L'OUTLINE-44 LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         BE    BUILDDSN\n         BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         BNZ   MOVEREST\n*--------APPEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         CLC   UPTPREFX(7),=C'>7BYTES' 8-CHARACTER PREFIX?         UID8\n         BNE   USEOLPFX                NO. USE OLD UPTPREFX FIELD  UID8\n         LA    R4,UPTPREFX+17          LOAD NEW PREFIX ADDRESS.    UID8\n         B     USENWPFX                YES. USE NEW UPTPREF8 FIELD UID8\nUSEOLPFX DS    0H                                                  UID8\n         LA    R4,UPTPREFX             LOAD OLD PREFIX ADDRESS.    UID8\nUSENWPFX DS    0H                                                  UID8\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\nGETLEN   DS    0H                                                  UID8\n         ST    R2,SAVER2               USE R2 AS TEMP REGISTER     UID8\n         L     R2,CPPLUPT              GET UPT ADDRESS             UID8\n         USING UPT,R2                  TELL ASSEMBLER              UID8\n         CLC   UPTPREFX(7),=C'>7BYTES'   8-CHARACTER PREFIX?       UID8\n         BNE   USEOLLTH                NO. USE OLD LENGTH FIELD.   UID8\n         SR    R1,R1                   CLEAR REGISTER 1            UID8\n         IC    R1,UPT+41               YES. LOAD NEW PREFIX LENGTH.UID8\n         B     USENWLTH                                            UID8\nUSEOLLTH DS    0H                                                  UID8\n         SR    R1,R1                   CLEAR REGISTER 1            UID8\n         IC    R1,UPT+23               LOAD OLD PREFIX LENGTH      UID8\nUSENWLTH DS    0H                                                  UID8\n         DROP  R2                                                  UID8\n         L     R2,SAVER2                                           UID8\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         BNZ   COPYSER\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         BNZ   PROCGRP\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   CHECK8\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         BE    OBTAIN1\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         BNE   PROCGRP\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         BE    PROCTTR\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         BE    PROCGRP                    SU 8 NOT INSTALLED\n         B     LOCERROR\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         BNE   CHECK12\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         BNE   PROCGRP\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         BNE   PROCGRP\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BAL   R2,PUTL                 DISPLAY LINE\n         B     ENDGRP\n         SPACE 2\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         BNE   LOCERROR\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   LOCERROR\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND1\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         B     PROCNTRY                LOAD INDEX NAME\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   LOCERROR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         BE    LNKENTRY\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         BE    DSATNEXT\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         BE    DSNOVER5\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         BE    NDXENTRY\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         BNE   DSNENTRY\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         BE    NDXENTRY\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         BZ    PUTGDG\n         BM    GDGEORD\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         B     PUTGDG\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         BNZ   PUTGDG\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BAL   R2,PUTL                 DISPLAY LINE\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         B     FINDEND\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         BZ    ENDLEVEL\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         B     READCTLG\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         BNZ   TESTDONE\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         TM    FLAGS,GDG               TEST FOR GDG\n         BNZ   MTGDG\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         B     PUTEMPTY\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\n         DROP  R8                                               SMS0003\nPUTEMPTY L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BAL   R2,PUTL                 DISPLAY MESSAGE\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         BE    ENDGRP\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         BNE   FINDDOT\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         B     PROCNTRY\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   LOCATE2\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1\n         B     LOCERROR\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   DSNMVC\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         B     LDVOLCNT\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         BE    BACKUP\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         BNZ   SAVELEN\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         BNZ   SAVELEN\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         BNE   SAVELEN                 NO, BRANCH                 ABL99\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         BE    PARTIAL\n         CH    R15,=H'40'\n         BNE   LOCERROR\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         B     RETRYLOC\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY LINE                 ABL\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         B     DSATPROC\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         BNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1                 OK, BRANCH\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         BE    GDGMSGL                 YES, BRANCH                  SPG\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         BNE   LOCERROR                NO, BRANCH\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         B     LOCERROR\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\nLSHOWCAT EQU   *-SHOWCATF\nTESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         BZ    ENDGRP\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BAL   R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         B     ENDGRP\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EX    R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         BNE   OBTAIN1\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NEXTSER               YES, IGNORE\n         B     THISVOL\n         SPACE 1\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         BO    ENDGRP2\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE\n         B     ENDGRP2\nTHISVOL  CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         BNH   GETSER\n         LA    R1,20                   SET MAX COUNT\nGETSER   C     R1,=F'1'                TEST VOLUME COUNT\n         BL    BADVOLCT                BAD VOLUME COUNT\n         BE    STOREVCT\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n         BAL   R14,$SMS2               DO DATACLAS, MGMTCLAS,   SMS0002+\n                                       AND STORCLAS             SMS0002\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TESTDEV\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TESTDEV\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         BE    TESTDA\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         BNE   NOTDASD\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE CH    R1,=H'15'               TEST AGAINST MAX\n         BH    NOTDASD\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         USING DSAT+4096+4096,R8                                   UID8\n         ST    R8,SAVER8                                           UID8\n         L     R8,BASER3                                           UID8\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         DROP  R8                                                  UID8\n         L     R8,SAVER8                                           UID8\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         BNZ   TESTDEV2\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         BNE   NEXTDEV                                         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NOTUP\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         BZ    TESTTYPE\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         B     TESTTYPE\nNOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         B     DSNERR\nTESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         BE    GETFMT1\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         USING DSAT+4096+4096,R8                                   UID8\n         ST    R8,SAVER8                                           UID8\n         L     R8,BASER3                                           UID8\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         DROP  R8                                                  UID8\n         L     R8,SAVER8                                           UID8\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\nGETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n         BZ    PROCESS\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSCB                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    PROCDSRG\n         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    PROCPDS\n         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    PROCDCB\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         BZ    PROCDCB\n         TM    DS1SMSFG,DS1PDSEX       MAKE SURE ITS NOT HFS   @KLS0710\n         BO    PROCDCB                                         @KLS0710\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    PROCCRDT\n         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE\nPROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    PROCEXDT\n         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\nPROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    PROCLREF\n         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   PROCCHHR\n         BNE   PROCSMS                                          SMS0001\n         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\nPROCSMS  EQU   *                                                SMS0001\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   PROCCHHR                                         SMS0001\n         BAL   R14,$SMS                                         SMS0001\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    PUTLINE\n         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\nPUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BCT   R1,GETSER               LOOP FOR MORE VOLUMES\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         BZ    SAVETOTL\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL STM   R4,R8,TOTLS             STORE TOTALS\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         BE    NOEXTENT                YES, BRANCH                ABL94\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         BZ    NOEXTENT                NO, BRANCH                 ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         BZ    ENDGRP\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         BZ    DSATNEXT                GET NEXT DSNAME\n         B     DSATNXT2                GET NEXT DSNAME\n         SPACE 2\nENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         BZ    ENDGRP2\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         BE    NEXTSER\nENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         LA    R3,0(,R3)\n         LTR   R3,R3                   END OF CHAIN?\n         BNZ   SETUPNXT                NO, BRANCH\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         BE    RETURN\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n*\n*  MORE THAN 9999 DATASETS POSSIBLE |        A.FREYBIER 30.04.2003 BDF\n**       MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE       BDF\n**       MVC   5(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE       BDF\n         MVC   8(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n*\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         BH    CNVTALOC\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         BZ    RETURN\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   5(19,R2),=C'DATA SET DISPLAYED '\nCNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         BE    DISPLAYT\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\nDISPLAYT BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         BL    BRANCH\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   SLA   R15,2                   MULTIPLY BY 4\n         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\nBRTABLE  B     RC0                                             HD JAN99\n         B     RCTALLOC\n         B     RCTUSED\n         B     RCLALLOC\n         B     RCLUSED\n         B     RCTDIFF\n         B     RCLDIFF\n         B     RCNUM\n         B     RCPREV\n         B     RCDSORG\n         B     RCDIRA\n         B     RCDIRU\n         B     RCENTR\n         B     RCMEMB\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         B     EXIT\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         B     EXIT\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         B     EXIT\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         B     EXIT\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         B     EXIT\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         BNZ   EXIT\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         B     EXIT\nRCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         B     EXIT\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         B     EXIT\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         B     EXIT\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         B     EXIT\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         B     EXIT\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         B     EXIT\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         B     EXIT\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         B     EXIT\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         B     EXIT                                            HD JAN99\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         B     EXIT                                            HD JAN99\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         BO    RC8                     YES, RETURN CODE=8      HD JAN99\n         B     EXIT                                            HD JAN99\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    EXIT2\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         LTR   R1,R1                   Q:DID THIS?              SMS0001\n         BZ    EXIT2_A                 N-DON'T TRY TO FREE IT   SMS0001\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\nEXIT2_A  EQU   *                                                SMS0001\n         LR    R15,R3                  RESTORE RETURN CODE\n         $RTRN RENT=DSECTLEN,RC=(R15)\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\n         LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\nDSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,R1(R6)               ADD 1 TRACK\n         LA    R5,4(R5)\n         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?      ABL NOV92\n         BZ    DSATUTRK                NO, DONE               ABL NOV92\n         LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'13'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'13'               NO, DO 13 NEXT         ABL NOV92\n         B     DSATTRKS                CONTINUE               ABL NOV92\n         SPACE 3                                              ABL NOV92\nDSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         BZ    DSATXNTS\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n*SMS0001 IC    R1,DS1NOPEV             LOAD EXTENTS\n         IC    R1,DS1NOEPV             LOAD EXTENTS             SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n         CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n         BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n         MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    NOSECOND\n         LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCAL1,DS1EXT         Q:EXTEND 2NDARY SPACE?   SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         TM    DS1SCEXT,DS1SCAVB       Q:AVERAGE BLOCK DATA SET?SMS0001\n         BNO   TRYMB                   N-TRY MB TEST            SMS0001\n         XR    R1,R1                   Y-DISPLAY BLKSZ AND AMT  SMS0001\n         ICM   R1,B'0011',DS1SCXTV     COPY TO ALIGNED (F) WOR  SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   5(5,R2),DSATDEC+3       COPY ORIGINAL AVGBLKSZ   SMS0001\n         B     SECAMT                  GET # OF BLOCKS          SMS0001\nTRYMB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCMB        Q:AVGREC=M DATA SET?     SMS0001\n         BNO   TRYKB                   N-TRY KB TEST            SMS0001\n         MVI   9(R2),C'M'              INDICATE MEGABYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYKB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCKB        Q:AVGREC=K DATA SET?     SMS0001\n         BNO   TRYB                    N-TRY B TEST             SMS0001\n         MVI   9(R2),C'K'              INDICATE KILOBYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYB     EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCUB        Q:AVGREC=U DATA SET?     SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         MVI   9(R2),C'B'              INDICATE BYTES           SMS0001\n*        B     SECBYTES                CLEAR                    SMS0001\nSECBYTES EQU   *                       GET NUMBER OF BYTES      SMS0001\n         XR    R1,R1                   CLEAR FOR INSERT         SMS0001\n         ICM   R1,B'0011',DS1SCXTV     SEC SPACE EXTENSION AMT  SMS0001\n         TM    DS1SCXTF,DS1SCCP1       Q:ADJUSTED BY 256?       SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,8                    Y-MULTIPLY BY 256        SMS0001\n         TM    DS1SCXTF,DS1SCCP2       Q:ADJUSTED BY 65536?     SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,16                   Y-MULTIPLY TO 65536      SMS0001\n         SPACE ,                                                SMS0001\n         CLI   9(R2),C'B'              Q:SPACE IN BYTES?        SMS0001\n         BNE   TESTKB                  N-SEE IF IN K            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'K'              Y-CHANGE TO KB           SMS0001\n         SRL   R1,10                   BYTES/1024               SMS0001\nTESTKB   EQU   *                                                SMS0001\n         CLI   9(R2),C'K'              Q:SPACE IN KBYTES?       SMS0001\n         BNE   TESTMB                  N-SEE IF IN M            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'M'              Y-CHANGE TO MB           SMS0001\n         SRL   R1,10                   KBYTES/1024              SMS0001\nTESTMB   EQU   *                                                SMS0001\n         CLI   9(R2),C'M'              Q:SPACE IN MBYTES?       SMS0001\n         BNE   DOSEC                   N-JUST DO IT             SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'G'              Y-CHANGE TO GB           SMS0001\n         SRL   R1,10                   MBYTES/1024              SMS0001\nDOSEC    EQU   *                                                SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   1(8,R2),DSATDEC                                  SMS0001\n         BR    R14                     2NDARY SPACE COMPLETE    SMS0001\nNOAVGREC EQU   *                                                SMS0001\n         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         BM    TRKALLOC\n         BO    CYLALLOC\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         B     SECAMT\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         B     SECAMT\nTRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         BZ    BLKALLOC\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         B     SECAMT\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n         LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND BR    R14                     RETURN\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n         MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'                                        ABL94\n         BE    $ALLEX20                                           ABL94\n         LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         BNO   NOT$CYL                  NO - SKIP                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         B     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         LH    R0,2(,R1)                GET START CC              ABL94\n         MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n         AH    R0,4(,R1)                ADD START HH              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         LH    R0,6(,R1)                GET END CC                ABL94\n         MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n         AH    R0,8(,R1)                ADD END HH                ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         LH    R15,6(,R1)               GET END CC                ABL94\n         SH    R15,2(,R1)               SUB START CC              ABL94\n         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n         AH    R15,8(,R1)               ADD END HH                ABL94\n         SH    R15,4(,R1)               SUB START HH              ABL94\n         LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n         BZ    $ALLEX20                NO, DONE                   ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         BNZ   DSNERR                  NO, SOME ERROR             ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         B     $ALLEX10                CONTINUE                   ABL94\n         SPACE 3                                                  ABL94\n$ALLEX20 DS    0H                                                 ABL94\n$ALLEX99 L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\nCONVDEC0 CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\nHEADER3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--$\n               TYPE-------------------------'                     ABL94\n         EJECT\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         BZ    DSORG001\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\n         USING DSAT+4096+4096,R8                                SMS0003\nDSORG001 ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS SMS0003\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         BZ    DSORGCLC\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         BE    DSORGMVC\n         BXLE  R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\nDSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         CLC   1(2,R2),=C'AM'          TEST FOR VSAM          DRK JUL10\n         BE    DSORGVS                                        DRK JUL10\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         BE    DSORGPO\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         BE    DSORGPS\n         B     DSORGBAD                                       DRK JUL10\nDSORGVS  TM    DS1REFD+3,X'04'         EXTENDED FORMAT VSAM?  DRK JUL10\n         BNO   DSORGBAD                NO, BRANCH             DRK JUL10\n         MVI   3(R2),C'X'              YES, NOTE IT           DRK JUL10\nDSORGBAD OI    FLAGS,$NOTPOPS\n         B     DSORGRTN\nDSORGPO  OI    FLAGS,$DSPO             ASSUME PARTITIONED      @KLS0710\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         BNO   DSORGRTN                NO, BRANCH             ABL NOV92\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         TM    DS1SMSFG,DS1PDSEX       IS THIS A HFS?          @KLS0710\n         BNO   DSORGRTN                NO, BRANCH              @KLS0710\n         MVC   1(2,R2),=C'HF'          YES, CHANGE TO \"HF\"     @KLS0710\n         XI    FLAGS,$DSPO             NOT PARTITIONED         @KLS0710\n         OI    FLAGS,$NOTPOPS                                  @KLS0710\n         B     DSORGRTN\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         BZ    DSATT\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         BNZ   DSATUORV\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         BZ    DSATV\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         BZ    DSATB\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         BZ    DSATS\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         BZ    DSATA\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         BZ    DSATM\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         BZ    DSATBLK\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         BZ    REFRTRN\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n         SPACE ,                                                SMS0001\n***********************************************************************\n* PROCESS SMS INDICATOR FLAG                                    SMS0001\n* 1) INDICATE IF 'MANAGED' FLAG IS ON.                          SMS0001\n* 2) IF BLOCKSIZE IS DISPLAYED, SET INDICATOR IF IT WAS SYSTEM  SMS0001\n*    DETERMINED.                                                SMS0001\n* 3) DO SMS KEYWORDS IF SPECIFIED.                              SMS0003\n***********************************************************************\n$SMS     EQU   *                                                SMS0001\n         CLC   DCB,=H'2'               Q:NODCB SPECIFIED?       SMS0001\n         BE    $SMS_100                Y-DON'T WORRY ABOUT BLKSZSMS0001\n         TM    DS1SMSFG,DS1CRSDB       Q:SDB BLKSZ?             SMS0001\n         BNO   $SMS_100                N-DON'T FLAG             SMS0001\n         L     R2,DCBFLD               Y-GET ADDR OF PARM       SMS0001\n         MVI   10(R2),C'*'             SET SDB BLKSZ INDICATOR  SMS0001\n$SMS_100 EQU   *                                                SMS0001\n         L     R2,SMSFLD               LOAD OUTPUT AREA ADDRESS SMS0001\n         MVC   0(3,R2),=C'YES'         ASSUME SMS MANAGED       SMS0001\n         TM    DS1SMSFG,DS1SMSDS       Q:CORRECT ASSUMPTION?    SMS0001\n         BOR   R14                     Y-WE'RE SET              SMS0001\n         MVC   0(3,R2),=C'NO '         N-CHANGE TO NO           SMS0001\n         BR    R14                     RETURN TO CALLER         SMS0001\n$SMS2    EQU   *                                                SMS0002\n         ICM   R15,B'1111',IGWASMSV    GET ROUTINE ADDRESS      SMS0002\n         BZR   R14                     RETURN IF NONE           SMS0002\n         SPACE ,                                                SMS0002\n         ST    R14,$SMSAVE             SAVE RETURN ADDRESS      SMS0002\n         BAS   R14,AMODE31             TO CALL ROUTINE          SMS0002\n         CALL  (15),MF=(E,CALL_L)      GET SMS INFO             SMS0002\n         BAS   R14,AMODE24             TO GET BACK              SMS0002\n         LTR   R15,R15                 DID IT WORK?             SMS0002\n         BNZ   $SMS_900                N-SKIP THIS JUNK         SMS0002\nPROMGMTC CLI   MGMTCLAS+1,2            TEST FOR NOMGMTCLASS     SMS0002\n         BE    PROSTORC                SKIP                     SMS0002\n         L     R2,MGMTCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWMGMTC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PROSTORC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWMGMTC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPROSTORC CLI   STORCLAS+1,2            TEST FOR NOSTORCLASS     SMS0002\n         BE    PRODATAC                SKIP                     SMS0002\n         L     R2,STORCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWSTORC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PRODATAC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWSTORC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPRODATAC CLI   DATACLAS+1,2            TEST FOR NODATACLASS     SMS0002\n         BE    $SMS_900                SKIP                     SMS0002\n         L     R2,DATACFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWDATAC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    $SMS_900                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWDATAC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\n$SMS_900 EQU   *                                                SMS0002\n         L     R14,$SMSAVE             RESTORE RETURN ADDRESS   SMS0002\n         BR    R14                     RETURN TO CALLER         SMS0001\nAMODE31  EQU   *                                                SMS0002\n         O     R14,=X'80000000'        SET 31-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 31-BIT MODE    SMS0002\nAMODE24  EQU   *                                                SMS0002\n         LA    R14,0(,R14)             SET 24-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 24-BIT MODE    SMS0002\n         SPACE\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         BNE   BADDAY\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         BZ    BADDAY\n         TM    WORK+3,X'06'\n         BZ    BADDAY\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         BH    BADDAY\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         B     DATERTRN\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\n         USING DSAT+4096+4096,R8                                SMS0003\nERRPARS  ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(28),DSATERR1                             SMS0003\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     SETERROR\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\n         USING DSAT+4096+4096,R8                                SMS0003\nNOID     ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR7                             SMS0003\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     RLSA\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\n         USING DSAT+4096+4096,R8                                SMS0003\nTOOLONG  ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE,BLANKS                                   SMS0003\n         MVC   OUTLINE(44),DSATERR4\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\nRLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BAL   R2,PUTL2                PUT MESSAGE\n         LA    R3,16                   SET CONDITION CODE\n         B     EXIT2\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         BNE   LOCERR                                          HD JAN99\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   BAL   R2,PUTL                 PRINT IT\n         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     PUTLINE                 PRINT THE LINE\n*--------ERROR IN OBTAIN MACRO\nDSNERR   CH    R15,=H'8'               TEST RETURN CODE\n         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n         BE    TESTVALL\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         B     DSNERR1\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         B     PUTLINE                 PRINT IT\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         B     PUTLINE                 DISPLAY MESSAGE\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         B     PUTLINE                 DISPLAY MESSAGE              SPG\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         BE    PUTLHPDS\nPUTL2    PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         BZ    PUTLBACK\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK BR    R2                      RETURN\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                         EXIT\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\n*TTRLOC  CAMLST BLOCK,0,0,0                                    #DD09294\nTTRLOC   DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n         DC    A(0)                              PARAMETER THREE\n         DC    A(0)                              PARAMETER FOUR\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\nIGWASMSC DC    CL8'IGWASMS'            SMS ATTRIBUTE ROUTINE    SMS0002\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\n         SPACE\n*ASE01   EQU   DSAT                                             SMS0003\n*ASE02   EQU   DSAT+4096                                        SMS0003\n*ASE03   EQU   DSAT+4096+4096                                   SMS0003\n*ASE04   EQU   DSAT+4096+4096+4096                              SMS0003\n         SPACE\nMODLINE  DC    H'204,0'                                           ABL94\n*LANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY\n         DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         BNE   PDSSAVE\n         BCT   R2,PDSEND               DECREMENT COUNTER\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TESTORG\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         BNE   ERRDAIR\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         BZ    ERRDSORG\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         BZ    ERROPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n         SPACE\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         BNP   NEXTBLK\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         BNE   PROCENTR\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         B     NEXTBLK\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         BZ    DIRLEN\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         B     NEXTENT\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         B     PDSRTRN\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         BNE   CTLGERR\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         BNE   DYNALCER\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         B     PDSRTRN\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         B     PDSRTRN\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         BNE   OTHERERR\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         B     PDSRTRN\nOTHERERR ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         B     PDSRTRN\n*--------OPEN ERROR\nERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         B     PDSRTRN\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         B     PDSRTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPDSRTRN  $RTRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nSMS      IKJKEYWD DEFAULT='NOSMS'                               SMS0001\n         IKJNAME 'SMS'                                          SMS0001\n         IKJNAME 'NOSMS'                                        SMS0001\nDATACLAS IKJKEYWD DEFAULT='DATACLASS'                           SMS0002\n         IKJNAME 'DATACLASS'                                    SMS0002\n         IKJNAME 'NODATACLASS'                                  SMS0002\nMGMTCLAS IKJKEYWD DEFAULT='MGMTCLASS'                           SMS0002\n         IKJNAME 'MGMTCLASS',ALIAS='MANAGEMENTCLASS'            SMS0002\n         IKJNAME 'NOMGMTCLASS',ALIAS='NOMANAGEMENTCLASS'        SMS0002\nSTORCLAS IKJKEYWD DEFAULT='STORCLASS'                           SMS0002\n         IKJNAME 'STORCLASS',ALIAS='STORAGECLASS'               SMS0002\n         IKJNAME 'NOSTORCLASS',ALIAS='NOSTORAGECLASS'           SMS0002\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nSIZE     IKJKEYWD DEFAULT='SIZE'                                SMS0001\n         IKJNAME  'SIZE',SUBFLD=SIZSUB                          SMS0001\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\nSIZSUB   IKJSUBF                       ,                        SMS0001\nWORKSIZE IKJIDENT 'WORKSIZE',INTEG,DEFAULT='8192'               SMS0001\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\n*LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR           #DD09294\nLOCBYTTR DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nSMSFLD   DS    A                       ADDR OF SMS FIELD        SMS0001\nDATACFLD DS    A                       ADDR OF DATACLAS FIELD   SMS0002\nMGMTCFLD DS    A                       ADDR OF MGMTCLAS FIELD   SMS0002\nSTORCFLD DS    A                       ADDR OF STORCLAS FIELD   SMS0002\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL5,CL3                                            ABL94\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL5,CL3                                            ABL94\nOL@LNTH  DS    CL5,CL2                                            ABL94\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nHALF     DS    H                       HALFWORD ALIGNED WORK AREA\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\nBLANKS   DS    CL200                   BLANK AREA               SMS0002\n         SPACE\n****************************************************************SMS0002\n*        IGWASMS FIELDS                                               *\n****************************************************************SMS0002\n         SPACE\nIGWRC    DS    F                       RC FROM IGWASMS          SMS0002\nIGWREAS  DS    F                       REASON CODE FROM IGWASMS SMS0002\nIGWPROB  DS    2F                      PROB DETERMINATION INFO  SMS0002\nIGWLEN   DS    F                       LENGTH OF DATA SET NAME  SMS0002\nIGWDSN   DS    A                       POINTER TO DSN           SMS0002\nIGWSMS   EQU   *                                                SMS0002\nIGWSTORC DS    CL30                    STORAGE CLASS OR BLANK   SMS0002\nIGWMGMTC DS    CL30                    MANAGMENT CLASS OR BLANK SMS0002\nIGWDATAC DS    CL30                    DATA CLASS OR BLANK      SMS0002\nIGWTYPE  DS    F                       DATA SET TYPE            SMS0002+\n                                       1=PDS/E (LIBRARY)        SMS0002+\n                                       0=OTHER                  SMS0002\nCALL_L   CALL  ,(,,,,,,),MF=L          LIST FORM OF CALL        SMS0002\nIGWASMSV DS    V(IGWASMSV)             LOAD'ED ADDR OF IGWASMS  SMS0002\n$SMSAVE  DS    A                       $SMS RETURN ADDRESS      SMS0002\nSAVER2   DS    F                       SAVE AREA FOR R2            UID8\nSAVER7   DS    F                       SAVE AREA FOR R7         SMS0003\nSAVER8   DS    F                       SAVE AREA FOR R8         SMS0003\nBASER3   DS    F                       SAVE AREA FOR 3RD BASE   SMS0003\nBASER4   DS    F                       SAVE AREA FOR 4TH BASE   SMS0003\n         DS    0D\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSAT$": {"ttr": 5640, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00P\\x01\\t0\\x0f\\x01\\x174\\x9f\\x004\\x00\\x1f\\x01!\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "2009-10-27T00:00:00", "modifydate": "2017-12-15T00:34:50", "lines": 31, "newlines": 289, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*  ASMH -- ASSEMBLES DSAT\n//*  LKED -- LINKS DSAT\n//*  COPY -- COPIES DSAT HELP TO APPROPRIATE DATA SET\n//*\n//ASMH   EXEC PGM=ASMA90,\n//            PARM=(OBJECT,NODECK,NOESD,NORLD,RENT,TERM,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE296(DSAT) THIS PDS\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//             PARM='MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n SETSSI  CB495296\n NAME    DSAT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSATASM": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01\\x126?\\x01\\x126?\\x10S\\x00&\\x00&\\x00\\x00\\xc6\\xd9\\xc5\\xe8\\xc2\\xc9\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-12-28T00:00:00", "modifydate": "2012-12-28T10:53:25", "lines": 38, "newlines": 38, "modlines": 0, "user": "FREYBIR"}, "text": "//_jobnam_ JOB ,'DSAT : ASM/LNK',MSGCLASS=T,CLASS=S,\n//             REGION=256M,NOTIFY=&SYSUID\n//***---------------------------------------------------------------***\n//*   $DSAT    - assembly / link DSAT module                          *\n//***---------------------------------------------------------------***\n//*\n//*  LIMITS IN ICF CATALOGS:\n//*\n//*   IF GDG OPTION IS USED, ONLY THE GDG BASE NAME IS DISPLAYED\n//*   WITH THE MESSAGE ' GDG -- IN ICF CATALOG'\n//*\n//ASM1    EXEC PGM=ASMA90,REGION=2048K,\n//             PARM=('NODECK,OBJECT,NORLD,RENT,TERM,XREF(SHORT)')\n//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2    DD UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPRINT  DD SYSOUT=*\n//SYSTERM   DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//SYSIN     DD DISP=SHR,DSN=_hlq_.MVS.DSAT.SOURCE(DSAT)\n//*\n//LINK    EXEC PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSPRINT  DD SYSOUT=*\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLMOD   DD DISP=SHR,DSN=_hlq_.LOADLIB\n//SYSUT1    DD UNIT=SYSDA,SPACE=(TRK,(5,5))\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n SETSSI  CB483BDF\n ENTRY   DSAT\n NAME    DSAT(R)\n/*\n//*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DSATGO": {"ttr": 5644, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x001\\x01\\x11\"O\\x01\\x13\\x02\\x0f\\t\\x12\\x00\\x16\\x00\\x13\\x00\\x00\\xc6\\xd9\\xc5\\xe8\\xc2\\xc9\\xd9@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2011-08-12T00:00:00", "modifydate": "2013-01-20T09:12:31", "lines": 22, "newlines": 19, "modlines": 0, "user": "FREYBIR"}, "text": "//TA99071Q JOB ,'DSAT IN BATCH',MSGCLASS=T,CLASS=S,\n//             REGION=4M,NOTIFY=&SYSUID\n//***---------------------------------------------------------------***\n//*    DSATGO  -                                                      *\n//***---------------------------------------------------------------***\n//DSAT    EXEC PGM=IKJEFT01\n//STEPLIB   DD DISP=SHR,DSN=SMPC.MVS.DSAT.LOAD\n//SYSTSPRT  DD SYSOUT=*\n//LISTE     DD DISP=OLD,     (,CATLG,DELETE),\n//             DSN=#6735B3.DSAT.LISTE.DSAT483.BUG,\n//             DCB=(LRECL=150,RECFM=FB,BLKSIZE=15000),\n//             UNIT=WORK,SPACE=(CYL,(10,10))\n//SYSUDUMP  DD DUMMY\n//SYSTSIN   DD *\n  DSAT#NEW 'VBDFS09P.DSNDBD.OD60XLAW.AESDPR0X.J0001.A051' +\n       SERIAL ALLOC NODCB HEADER NODEVTYPE +\n       NODEVICE NOSECONDARY   CRDATE TOTALS +\n       HARDCOPY(LISTE)\n//\n       EXTENTS +\n//\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSATHELP": {"ttr": 5646, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01\\x11(\\x0f\\x01\\x11(\\x0f\\x10I\\x01.\\x01.\\x00\\x00\\xc6\\xd6\\xd9`\\xc5\\xc1\\xe5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-10-07T00:00:00", "modifydate": "2011-10-07T10:49:01", "lines": 302, "newlines": 302, "modlines": 0, "user": "FOR-EAV"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*  COPY -- COPIES DSAT HELP TO APPROPRIATE DATA SET\n//*\n//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SBGOLOB.HELP(DSAT),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -\n               THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION\n               INFORMATION FOR DATA SETS ON A DIRECT ACCESS\n               DEVICE.\n\n               DSAT WILL SEARCH THE OS CATALOG FOR THE\n               ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION\n               INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE\n               OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS\n               AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL\n               BE DISPLAYED.\n\n               THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING\n               THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.\n               THIS OPTION PERMITS DISPLAYING INFORMATION FOR\n               UNCATALOGED DATA SETS.\n\n               THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY\n               THE USER WHEN HE ENTERS THE DSAT COMMAND BY\n               SPECIFYING KEYWORD OPERANDS.\n\n               THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES\n               TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF\n               DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED\n               VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE\n               WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY\n               SPECIFYING NOPRINT.  THE HARDCOPY KEYWORD MAY BE USED\n               TO DIRECT THE OUTPUT TO A PRE-ALLOCATED DATA SET.\n\n               THE USER MAY CHOOSE WHAT INFORMATION WILL BE\n               DISPLAYED BY ENTERING KEYWORDS.\n\n               THE INFORMATION THAT MAY BE DISPLAYED IS:\n                1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED.\n                2. FILE SEQUENCE NUMBER.\n                3. DEVICE TYPE CODE FROM CATALOG ENTRY.\n                4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).\n                5. SECONDARY ALLOCATION (AMOUNT AND UNITS).\n                6. DATA SET ORGANIZATION.\n                7. DCB (RECFM, BLKSIZE, AND LRECL).\n                8. CREATION DATE.\n                9. EXPIRATION DATE.\n               10. LAST DATE REFERENCED (MVS SU 60).\n               11. FULLY QUALIFIED DATA SET NAME.\n               12. CCHHR OF THE FORMAT 1 DSCB.\n               13. GENERATION DATA GROUP DATA.\n               14. PDS DIRECTORY INFORMATION.\n               15. SYSTEM MANAGED DATA SET FLAG\n)X SYNTAX -\n               DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC\n                                 DSORG/NODSORG     DCB/NODCB\n                                 CRDATE/NOCRDATE   EXDATE/NOEXDATE\n                                 LASTREF/NOLASTREF\n                                 TOTALS/NOTOTALS   PRINT/NOPRINT\n                                 HEADER/NOHEADER   ALL/DAONLY\n                                 GDGDATA/NOGDGDATA SEQNO/NOSEQNO\n                                 DEVTYPE/NODEVTYPE DEVICE/NODEVICE\n                                 CCHHR/NOCCHHR     PDS/NOPDS\n                                 SECONDARY/NOSECONDARY\n                                 SMS/NOSMS\n                                 GENERIC           DSONLY\n                                 HARDCOPY(DDNAME)  VOLUME(SERIAL)\n                                 RC(TALLOC/TUSED/TDIFF/\n                                    LALLOC/LUSED/LDIFF/NUM/\n                                    PREVIOUS/DSORG/DIRALLOC/\n                                    DIRUSED/ENTRIES/ALIASES/\n                                    MEMBERS)\n\n               DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX\n                           SERIAL   ALLOC   DSORG    DCB    CRDATE\n                           NOEXDATE TOTALS  PRINT    HEADER ALL\n                           NOPDS    NOSEQNO NODEVICE NODEVTYPE\n                           NOGDGDATA    NOLASTREF    NOSECONDARY\n                           NOSMS\n                           NOCCHHR      NOEXTENTS    NOFULL\n               NOTE: IF HARDCOPY IS SPECIFIED, NOPRINT IS THE DEFAULT\n\n               WITH FULL - SAME AS DEFAULTS ABOVE WITH:\n                           EXDATE    PDS     DEVICE\n                           GDGDATA   LASTREF SECONDARY\n                           CCHHR\n                           NODEVTYPE NOSEQNO NOEXTENTS\n\n\n   SAMPLE OUTPUTS:\n 1. DSAT LIB.CNTL\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNT\n\n 2. DSAT LIB.CNTL LAST\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   LAST REF    -D\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 08/03/1994* WS\n\n 3. DSAT LIB.CNTL FULL  (NOTE: OUTPUT BELOW WRAPS TO ABOUT 160 BYTES)\n SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n   -DCB ATTRIBUTES- CR. DATE   EX. DATE   LAST REF     C C H H R -DSNAM\n   FB   23440    80 05/04/1994 05/06/1994 08/03/1994* 0000000930 WSER07.\n\n 4. DSAT LINK\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR80P    20    18  1 X-PO  U    32760    80 07/19/1994 WSER07.LINK.AL\n STR81Z  1350   634  5 A-PO  U    32760    80 11/13/1993 WSER07.LINK.LO\n MIGRAT                                                  WSER07.LINK.US\n         1370   652                                       3 DATA SETS\n\n 5. DSAT / EXTENTS\n\n  WITH NON-EAV DISKTYPE < 65520 CYLS\n\n SERIAL   ALLOC    FREE EXT  DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n SMP022     210       8   3   PO   FB    3120    80 08/26/2011 SMPC.MVS\n     EXT#--START TRK----START----END TRK-----END------LENGTH--TYPE-----\n       0   1E2F,0000   115905   1E38,000E   116054       150  CYL, DATA\n       1   1E39,0000   116055   1E3A,000E   116084        30  CYL, DATA\n       2   1E3B,0000   116085   1E3C,000E   116114        30  CYL, DATA\n\n  WITH EAV DISKTYPE > 65520 CYLS\n\n SERIAL   ALLOC    FREE EXT  DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAM\n DB6117    3000           3   AMX  U     4096     0 08/17/2011 VBDFS0\n     EXT#--START TRK----START----END TRK-----END------LENGTH--TYPE--\n       0   000C441:0   753615   000C472:E   754364       750  CYL, DAT\n       1   000C4A5:0   755115   000C508:E   756614      1500  CYL, DAT\n       2   000C53B:0   757365   000C56C:E   758114       750  CYL, DAT\n\n 6. DSAT 'SYS1.PROC' GENERIC\n\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n MPSYSM    75    53  1 A-PO  FB   27920    80 10/20/2005 SYS1.PROCLIB\n MPSYSM  1471  1452  1 A-PO  FB    6160    80 03/25/2007 SYS1.PROCLIB.A1\n MPSYSM NOT ON VOLUME                                    SYS1.PROCLIB.A2\n MPIP2M    15     5  1 A-PO  FB   27920    80 11/15/2006 SYS1.PROCLSSC\n         1561  1510                                4 DATA SETS DISPLAYED\n\n 7. DSAT ('PLI' 'NONE')\n\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n WLMDCT    15    13  1 A-PO  U     6144     0 02/24/2001 PLI.PLILINK\n WLMDCT     2     0  1 A-PO  FB    3120    80 02/24/2001 PLI.PLISAMP\n WLMDCT    15    11  1 A-PO  U     6144     0 02/24/2001 PLI.SIBMBASE\n WLMDCT    15     0  1 A-PO  U     6144     0 02/24/2001 PLI.SIBMLINK\n MTDOCM   225        1 X-AM  U     4096     0 10/20/2005 PLI\n        NAME NOT FOUND                                   NONE\n          272    24                                5 DATA SETS DISPLAYED\n\n\n 8. DSAT 'PAPI.SEDOR' SMS\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE    WRAP...>\n LMP007     4     0  1 A-PS  U    27998     0 10/02/2009  WRAP...>\n\n ...>   SMS DATACLAS MGMTCLAS STORCLAS -DSNAME-\n ...>   YES DCLMPCNV (NULL)   SCLMPCNV PAPI.SEDOR\n\n\n)O OPERANDS -\n               NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL\n                           NAMES. TSO NAMING CONVENTIONS ARE USED.\n                           IF A SPECIFIED NAME IS AN INDEX NAME,\n                           DATA SETS UNDER THAT LEVEL WILL BE\n                           DISPLAYED.  IF NO NAME IS SPECIFIED,\n                           THE PREFIX WILL BE USED.  FOR MVT AND\n                           SVS, THIS IS THE USERID.  FOR MVS,\n                           THE PREFIX MAY BE SPECIFIED WITH THE\n                           PROFILE COMMAND.  IF NO NAME IS\n                           SPECIFIED AND THE PROFILE SPECIFIES\n                           NOPREFIX, THE USERID WILL BE USED.\n\n                           NOTE - IF A KEYWORD IS ENTERED,\n                                  NAME-LIST MUST BE SPECIFIED.  IF\n                                  NAME-LIST IS OMITTED, IT WILL\n                                  NOT DEFAULT TO THE PREFIX, BUT\n                                  THE KEYWORD WILL BE INTERPRETED\n                                  AS THE NAME-LIST, NOT A KEYWORD.\n))SERIAL        LIST VOLUME SERIALS.\n))NOSERIAL      DO NOT LIST VOLUME SERIALS.\n))SEQNO         LIST FILE SEQUENCE NUMBERS.\n))NOSEQNO       DO NOT LIST FILE SEQUENCE NUMBERS.\n))DEVTYPE       DISPLAY DEVICE TYPE CODE.\n))NODEVTYPE     DO NOT DISPLAY DEVICE TYPE CODE.\n))DEVICE        LIST DEVICE NAME (3330, 3350, ETC.).\n))NODEVICE      DO NOT LIST DEVICE NAME.\n))ALLOC         LIST ALLOCATION INFORMATION (TRACKS ALLOCATED,\n                TRACKS FREE, AND EXTENTS).\n))NOALLOC       DO NOT LIST ALLOCATION INFORMATION.\n))SECONDARY     DISPLAY SECONDARY ALLOCATION INFORMATION.\n))NOSECONDARY   DO NOT DISPLAY SECONDARY ALLOCATION INFORMATION.\n))SMS           DISPLAY SMS INFORMATION (DATACLAS/MGMTCLAS/STORCLAS)\n))NOSMS         DO NOT DISPLAY INFORMATION\n))DSORG         LIST DATA SET ORGANIZATION.\n))NODSORG       DO NOT LIST DATA SET ORGANIZATION.\n))PDS           LIST PDS DIRECTORY INFORMATION (BLOCKS ALLOC, USED,\n                ENTRIES, AND ALIASES).\n))NOPDS         DO NOT LIST PDS DIRECTORY INFORMATION.\n))DCB           LIST DCB INFORMATION (RECFM, BLKSIZE, AND LRECL).\n))NODCB         DO NOT LIST DCB INFORMATION.\n))CRDATE        LIST CREATION DATE.\n))NOCRDATE      DO NOT LIST CREATION DATE.\n))EXDATE        LIST EXPIRATION DATE.\n))NOEXDATE      DO NOT LIST EXPIRATION DATE.\n))LASTREF       DISPLAY LAST DATE REFERENCED (MVS SU 60).\n))NOLASTREF     DO NOT DISPLAY LAST DATE REFERENCED.\n))CCHHR         DISPLAY FORMAT 1 DSCB ADDRESS.\n))NOCCHHR       DO NOT DISPLAY CCHHR.\n))TOTALS        DISPLAY TOTALS (TRACKS ALLOCATED, TRACKS FREE,\n                AND DATA SETS DISPLAYED).\n))NOTOTALS      DO NOT DISPLAY TOTALS.\n))PRINT         OUTPUT IS TO BE DISPLAYED.\n))NOPRINT       OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))LIST          OUTPUT IS TO BE DISPLAYED.\n))NOLIST        OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))HEADER        DISPLAY OUTPUT HEADER LINE.\n))NOHEADER      DO NOT DISPLAY HEADER LINE.\n))ALL           DISPLAY ALL DATA SET NAMES UNDER AN INDEX LEVEL.\n))DAONLY        DISPLAY DATA SETS ON MOUNTED DIRECT ACCESS\n                DEVICES.\n))GDGDATA       INFORMATION ON GENERATION DATA GROUP INDEXES IS TO\n                BE DISPLAYED.\n))NOGDGDATA     GENERATION DATA GROUP DATA WILL NOT BE DISPLAYED.\n))GENERIC       NAME SPECIFIES A GENERIC KEY.         ** MVS ONLY **\n))DSONLY        TREAT NAMES AS DATA SET NAMES, NOT INDEX NAMES.\n))VOLUME        SPECIFIES THE VOLUME TO BE SEARCHED FOR THE DATA SET.\n))HARDCOPY      SPECIFIES THE DDNAME A PRE-ALLOCATED DATA SET TO\n                RECEIVE A COPY OF DSAT OUTPUT.\n))FULL          FORMAT ADDITIONAL INFORMATION FOR EACH DATA SET: PDS,\n                EXDATE, DEVICE, GDGDATA, LASTREF, SECONDARY, CCHHR.\n\n                OTHER KEYWORDS (LIKE NOPDS) MAY BE SPECIED AFTER FULL\n                TO TURN OFF OPTIONS SELECTIVELY.\n))NOFULL        DO NOT FORMAT ADDITIONAL INFORMATION.\n))EXTENTS       FORMAT EXTENT INFORMATION FOR EACH DATA SET FOLLOWING\n                THE DATA SET DISPLAY LINE.\n\n                THE FOLLOWING FIELDS ARE FORMATTED FOR EACH EXTENT:\n                    EXT#       - EXTENT NUMBER (0 TO 122)\n                    START TRK  - STARTING CC,HH / cccCCCC:H HEX ADDRESS\n                    Start      - STARTING CC,HH / cccCCCC:H IN DECIMAL\n                    END TRK    - ENDING CC,HH / cccCCCC:H HEX ADDRESS\n                    End        - ENDING CC,HH / cccCCCC:H IN DECIMAL\n                    LENGTH     - SIZE OF EXTENT IN TRACKS\n                    TYPE       - COMMENTS ON EXTENT USE\n                                 CYL     - CYLINDER ALLOCATION\n                                 SHR     - SHARING CYLINDER\n                                 USR LBL - USER LABELS\n                                 IS INDX - ISAM INDEX\n                                 IS OVFL - ISAM OVERFLOW\n))NOEXTENTS     DO NOT FORMAT EXTENT INFORMATION.\n))RC            SPECIFIES HOW THE RETURN CODE IS TO BE SET:\n                RC NOT SPECIFIED:  0 - SUCCESSFUL COMPLETION\n                                   8 - ONE OR MORE DATA SETS NOT FOUND\n                                  16 - UNABLE TO INTERPRET COMMAND\n                TALLOC               - TOTAL TRACKS USED\n                TUSED                - TOTAL TRACKS USED\n                TDIFF                - TOTAL OVERALLOCATION\n                                       (TALLOC-TUSED)\n                LALLOC               - TRACKS ALLOCATED BY LAST\n                                       DATA SET\n                LUSED                - TRACKS USED BY LAST DATA SET\n                LDIFF                - LAST DATA SET OVERALLOCATION\n                                       (LALLOC-LUSED)\n                NUM                  - NUMBER OF DATA SETS DISPLAYED\n                                       (INCLUDES DATA SETS NOT\n                                       FOUND, ETC.)\n                PREVIOUS             - ASSUMES THE RETURN CODE OF\n                                       THE PREVIOUS COMMAND.\n                DSORG                - SETS THE RETURN CODE BASED\n                                       ON THE DATA SET ORGANIZATION\n                                       OF THE DATA SETS DISPLAYED.\n                                       1 - ALL DATA SETS WERE SEQ.\n                                       2 - ALL DATA SETS WERE PDS\n                                       3 - DATA SETS WERE MIXED PDS\n                                           AND SEQUENTIAL\n                                       4 - AN ERROR OCCURRED OR A\n                                           DATA SET OTHER THAN PDS\n                                           OR SEQUENTIAL WAS\n                                           PROCESSED\n                DIRALLOC - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           ALLOCATED.\n                DIRUSED  - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           USED.\n                ENTRIES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ENTRIES IN THE\n                           DIRECTORY (MEMBERS AND\n                           ALIASES).\n                ALIASES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ALIASES.\n                MEMBERS  - SETS THE RETURN CODE TO\n                           ENTRIES-ALIASES.\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DSATNEW": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00U\\x01\\x13\\x01_\\x01\\x175\\x0f\\x192\\x15/\\x15\\x19\\x00'\\xc6\\xd6\\xd9`\\xc5\\xc1\\xe5@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "2013-01-15T00:00:00", "modifydate": "2017-12-16T19:32:55", "lines": 5423, "newlines": 5401, "modlines": 39, "user": "FOR-EAV"}, "text": "         LCLC  &PGM                      PROGRAM NAME           SMS0003\n         LCLC  &FMID,&PTF,&VER           VERSION/PTF LEVEL      SMS0003\n         LCLC  &DEBUG                    switch debug on/off  AF jan13\n*\n&PGM     SETC  'DSAT'                                           SMS0003\n&FMID    SETC  'PDS8600'                                        SMS0003\n&PTF     SETC  '       '                                        SMS0003\n&VER     SETC  '&FMID &PTF'                                     SMS0003\n&DEBUG   SETC  'OFF'                     switch debug on/off  AF jan13\n*MODIFIED BY EDS -- (NOVEMBER 2005) -- ADD SMS SUPPORT\n*ORIGINAL SOURCE -- CBT439.FILE296  (NOVEMBER 2001)\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*  modification in detail:                                            *\n*  8-CHARACTER USERID AND PREFIX MODIFICATION :                       *\n*  12.12.2017 - S.GOLOB                                            UID8\n*               SUPPLY UPT PREFIX AND LENGTH FROM THE CORRECT SOURCE. *\n*  15.01.2013 - A.FREYBIER       <-- I use a new label --->   AF jan13*\n*             BUGFIX for multivolume datasets:                AF jan13*\n*              correct track count                            AF jan13*\n*              display extents for all volumes                AF jan13*\n*             Changes for AMODE 31 :                          AF jan13*\n*              LA R1,0(R1)-> N R1,=X'00FFFFFF' ZERO high byte AF jan13*\n*              drop address mode switch AMODE24/AMODE31       AF jan13*\n*                                                             AF jan13*\n*             BASE register cleanup                           AF jan13*\n*               remove BASE REG switches from SMS0003, bdf11  AF jan13*\n*               convert several opcodes to relative           AF jan13*\n*               use label instead of branch *+nn              AF jan13*\n*               insert DROP Rx to avoid ASMA300W + ASMA303W   AF jan13*\n*               use R12 for addressing constants area         AF jan13*\n*             other changes :                                 AF jan13*\n*              expand OUTLINE and BLANKS 200 -> 250           AF jan13*\n*                  needed if all options are set              AF jan13*\n*                                                             AF jan13*\n*  14.10.2011 - A.FREYBIER                                       bdf11*\n*               bugfix for files with F8 DSCB residing in a trk- bdf11*\n*               managed area and with end-H < begin-H (CCCCcccH) bdf11*\n*  12.10.2011 - A.FREYBIER                                       bdf11*\n*               fix freespace calculation for files > 64K tracks bdf11*\n*                                                                bdf11*\n*  28.08.2011 - A.FREYBIER                                       bdf11*\n*               introduce R10 as temporary BaseReg.              bdf11*\n*               rebuild space calculation for                    bdf11*\n*                  Volumes > 65520 Cyls (EAV).                   bdf11*\n*               Many thanks to John Kalinich, who helped         bdf11*\n*                 me with debugging                              bdf11*\n*               Special thanks to the author of DISKMAP(file792) bdf11*\n*                 KEITH COWDEN <cowdenkb@sbcglobal.net>.         bdf11*\n*                 The DUMP option helped me to understand        bdf11*\n*                 the new DSCB structures.                       bdf11*\n*                                                                     *\n*  CSC MODIFICATION :                                                 *\n*  31.08.2011 - J.KALINICH                                    DRK AUG11\n*               MARK EXTENDED AND LARGE FORMAT DATASETS               *\n*                                                                     *\n*  21.11.2009 - D.DALBY                                        #DD09294\n*               IGNORE \"CAMLST BLOCK\" AS IBM DROPPED SUPPORT.         *\n*               REPLACE WITH PRE-ASSEMBLED CAMLST BLOCK MACROS.       *\n*                                                                     *\n*  BDF modification :                                                 *\n*  21.02.2008 - A.FREYBIER                                       BDF08*\n*               correction for 3 byte extent count               BDF08*\n*  11.05.2007 - A.FREYBIER                                       BDF07*\n*               track calculation corrected for                  BDF07*\n*               extent location > CYL 32765 ( 2 byte )           BDF07*\n*               track/dsn > 99999 possible with new DASD models  BDF07*\n*               and extended adressability (display field length)BDF07*\n*  30.04.2003 - A.FREYBIER                                            *\n*               MORE THAN 9999 DATASETS POSSIBLE |                    *\n*  29.11.2001 - A.FREYBIER                                            *\n*               INCREASE GETMAIN AREA FOR MORE DATASETS               *\n*                                                                     *\n*  for previous changes search for 'UPDATE LOG' below                 *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\n         TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                 14. SYSTEM MANAGED DATA SET FLAG             SMS0001*\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   SMS/NOSMS                  SMS0001*\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOSMS                            SMS0001*\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n* with EAV disktype > 65520 cyls                                 bdf11*\n*>dsat / extents                                                      *\n*SERIAL   ALLOC    FREE EXT  DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAM *\n*DB6117    3000           3   AMX  U     4096     0 08/17/2011 VBDFS0 *\n*    EXT#--START TRK----Start----END TRK-----End------LENGTH--TYPE--  *\n*      0   000C441:0   753615   000C472:E   754364       750  CYL, DAT*\n*      1   000C4A5:0   755115   000C508:E   756614      1500  CYL, DAT*\n*      2   000C53B:0   757365   000C56C:E   758114       750  CYL, DAT*\n****                                                                  *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*SMS0001                                                              *\n*SMS0001          SMS/NOSMS                                           *\n*SMS0001                      SPECIFIES WHETHER OR NOT THE SMS DATA   *\n*SMS0001                      SET FLAG SHOULD BE DISPLAYED.  SMS      *\n*SMS0001                      MANAGED DATA SETS ARE INDICATED BY 'YES'*\n*SMS0001                      AND NON-SMS MANAGED DATA SETS BY 'NO.'  *\n*SMS0001                      ADDITIONALLY, DATA SETS WITH A BLOCK    *\n*SMS0001                      SIZE DETERMINED BY THE SYSTEM (SDB) ARE *\n*SMS0001                      INDICATED WITH AN ASTERISK NEXT TO THE  *\n*SMS0001                      BLOCK SIZE.                             *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING  (IECSDSL1)          *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING  (IECSDSL1)          *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*        SHOWCAT                                                      *\n*        CVT                                                  HD JAN99*\n*        IEFUCBOB                                             HD JAN99*\n*        IOCINFO                                              HD JAN99*\n*        UCBSCAN                                              HD JAN99*\n*        LOAD                                                  SMS0002*\n*        IECSDSL1          DSCB dsect                            bdf11*\n*        TRKADDR           convert CCCCcccH values from DSCB     bdf11*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - work register in DSATPDS subroutine only       AF jan13*\n*        R12 - address Literals                               AF jan13*\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n*\n*  11/15/05  ADDED SMS KEYWORD.                        SMS0001      JCG\n*            ADDED SIZE KEYWORD WITH DEFAULT OF 8192 TO SPECIFY A\n*            LARGER SVC26 WORKAREA SIZE.  LOGIC TO OBTAIN A LARGER\n*            WORKAREA IS NOT WORKING SO WE'LL PASS THE BUCK TO THE\n*            USER.  MAXIMUM VALUE IS 65535.\n*            UPDATED SECONDARY SPACE PROCESSING TO DISPLAY SECONDARY\n*            AMOUNTS OF BYTES, KBYTES, MBYTES, OR GBYTES.\n*            ADDED PDS/E DETECTION AND DISPLAY DSORG OF PE IF PDSE\n*            FLAG IS SET.\n*            REMOVED INTERNAL FORMAT-1 DSCB MACRO AND REPLACED WITH THE\n*            REAL DEAL.  A COUPLE OF LABELS HAD TO BE MODIFIED TO\n*            USE THE PROPER FIELD NAME (NOEPV).\n*  11/15/05  ADDED DATACLAS, MGMTCLAS, AND STORCLASS     SMS0002    JCG\n*            KEYWORDS TO DISPLAY SMS ATTRIBUTES FOR THE DATA SET.\n*            THESE KEYWORDS ARE VALID ONLY IF 'SMS' IS ALSO SPECIFIED\n*            OR DEFAULTED.                               PDS1122\n*  11/15/05  MODIFIED CODE BECAUSE WITH THE ADDITION     SMS0003    JCG\n*            OF SMS0001 AND SMS0002 WE BLEW A BASE REGISTER. THE CODE\n*            WAS CHANGED WITH BRUT FORCE BY ESTABLISHING A NEW BASE\n*            REGISTER AROUND THE LABELS THAT WERE NOT ADDRESSABLE.\n*            SEARCHES FOR BASE0? WILL GO TO THE LOCATIONS CHANGED.\n*  05/11/07  modified trk calc for extent above cyl 32765         BDF07\n*  02/21/08  modified extent count > 99                           BDF08\n*  07/26/10  ADDED RECOGNITION OF HFS DATASETS                 @KLS0710\n*  08/18/11  modified for EAV, FMT-8 and FMT-9 DSCB               BDF11\n*  08/31/11  MARK EXTENDED AND LARGE FORMAT DATASETS          DRK AUG11\n*  01/15/13  BUGfix for multivolume files                      AF jan13\n*            cleanup BASE REGs and use AMODE(31)               AF jan13\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n**       GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE           AF jan13\n         STORAGE OBTAIN,LENGTH=&RENT,SP=&SP,LOC=BELOW\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         STORAGE RELEASE,LENGTH=&RENT,ADDR=(1),SP=&SP\n*        FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE         AF jan13\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         IECSDSL1 (1)                                           SMS0001\n         MEXIT                                                  SMS0001\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*  THIS CODE SEEMS NOT TO BE USED. ONLY ACTIVATE ON DOWN-LEVEL SYSTEMS.\n*    THE REAL CODE IS FROM MACRO IECSDSL1 (1) ABOVE.\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\n**1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NOEPV DS    X                        NUMBER OF EXTENTS       SMS0001\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - BELOW\nDS1SMSDS EQU   X'80'  1... ....    SYSTEM MANAGED DATA SET\nDS1SMSUC EQU   X'40'  .1.. ....    NO BCS ENTRY EXISTS FOR DATA SET\nDS1REBLK EQU   X'20'  ..1. ....    SDB AND D.S. MAY BE REBLOCKED\nDS1CRSDB EQU   X'10'  ...1 ....    DADSM CREATE ORIGINATED BLKSIZE\nDS1PDSE  EQU   X'08'  .... 1...    PDSE DATA SET\nDS1STRP  EQU   X'04'  .... .1..    EXTENDED FORMAT DATA SET\nDS1PDSEX EQU   X'02'  .... ..1.    HFS DATA SET\nDS1DSAE  EQU   X'01'  ........1    EXTENDED ATTRIBUTES EXIST\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - ABOVE\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\nDS3      EQU   *                                                  bdf11\n         IECSDSL1 (3)                                             bdf11\nDS3LEN   EQU   *-DS3                                              bdf11\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   DS3DSCB                                            bdf11\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\n         DS    X          DS3FMTID      already defined           bdf11\n*S3FMTID DS    X          DS3FMTID      DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\n         DS    X          DS3PTRDS      already defined           bdf11\n*S3PTRDS DS    XL5        DS3PTRDS      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '6291456'                                          BDF01\n**&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT   HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n&MINSIZE SETC  '131072'               128K AS A DEFAULT           BDF03\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n*\n         SPLEVEL SET                                           AF jan13\n         SYSSTATE ARCHLVL=2    Z/ARCH                          AF jan13\n         IEABRCX DEFINE                                        AF jan13\n         TITLE 'ENTRY CODING'\nDSAT     RMODE 24                                              AF jan13\nDSAT     AMODE 31                                              AF jan13\n*  DSAT     $ENTER BASE=(R11,R12),                             AF jan13\nDSAT     $ENTER BASE=(R12),                                    AF jan13+\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n*\n         J     around_DSLEN                                    AF jan13\n         LTORG , for STORAGE OBTAIN parameters                 AF jan13\n*\naround_DSLEN   DS 0h                                           AF jan13\n*        establish addressing for literals and constant data   AF jan13\n         DROP  R12\n         LARL  R12,const                                       AF jan13\n         USING const,R12                                       AF jan13\n*\n*\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INIT PTPB\n         MVC   DSATHEDR(4),MODLINE\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVI   BLANKS,C' '             BLANK LINE               SMS0002\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS                      SMS0002\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         MVI   SLASHS,C'-'             SLASH LINE for debug       bdf11\n         MVC   SLASHS+1(L'SLASHS-1),SLASHS                        bdf11\n         DROP  R8                      DROP IOPL BASE REGISTER\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*        LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n*        CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         CALLTSSR EP=IKJPARS,MF=(E,PPL) LINK TO PARSE ROUTINE  AF jan13\n         J     AROUNDID                 BRANCH AROUND THE ID    SMS0003\n*\n         DC    AL1(L'CSECTID)           LENGTH OF CSECT ID      SMS0003\nCSECTID  DC    C'&PGM &VER'                                     SMS0003\n*\nAROUNDID DS    0H                                               SMS0003\n         LTR   R15,R15                  TEST RETURN CODE\n         JNZ   ERRPARS\n*\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n*--------GET CATALOG WORKAREA\n*SMS0001 L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         L     R2,WORKSIZE             GET PTR TO SIZE          SMS0001\n         L     R2,0(,R2)               GET WORKSIZE             SMS0001\n         C     R2,=F'65535'            Q:IS VALUE VALID?        SMS0001\n*AF**    BNH   *+8                     Y-USE IT                 SMS0001\n         JNH   PARSE1                  Y-USE IT                AF jan13\n*\n         L     R2,=F'65535'            N-USE MAX VALUE          SMS0001\nPARSE1   DS    0H                                              AF jan13\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n*$PDSCALL DC    C'PDSCALL'                                       bdf11\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n***      CLC   2(7,R1),$PDSCALL      DID PDS CALL US?             bdf11\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         JNE   NOPDSCAL              NO\n*\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n*bdf11*  BNE   *+8                   YES, BRANCH\n         JNE   NOPDSCAL              YES, BRANCH                  bdf11\n*\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL DS    0h\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n*\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         JE    SEARS               YES, CONTINUE               HD JAN99\n*\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         J     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n*\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3             FMT-3 DSCB\n         STM   R1,R4,DSATDCB3\n         LA    R4,DS9                  FMT-9 DSCB for EAV         bdf11\n         STM   R1,R4,DSATDCB9                                     bdf11\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         JNZ   ZEROTOT\n*\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  DS    0h\n         XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         JZ    SETUPHDR\n*\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n*AF**    BNE   *+8                     YES, BRANCH\n         JNE   ZEROTOT1                YES, BRANCH             AF jan13\n*\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\nZEROTOT1 DS    0h                                              AF jan13\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EXRL  R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         JO    SETUPHDR\n*\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n*\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR DS    0h\n         LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         JE    TRYDEV\n*\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         JE    TRYDEV\n*\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         JE    TRYDEVIC\n*\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         JE    TRYALLOC\n*\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         JE    TRYDSORG\n*\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(20,R2),=C'  ALLOC    FREE EXT ' SET UP HEADER   BDF08\n         LA    R2,21(R2)               INCREMENT POINTER         BDF08\n*BDF08*  MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n*BDF08*  LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         JE    TRYDSORG\n*\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         JE    TRYPDS\n*\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         JE    TRYDCB\n*\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         JE    TRYCRDAT\n*\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT DS    0h\n         CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         JE    TRYEXDAT\n*\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT DS    0h\n         CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         JE    TRYLREFD\n*\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD DS    0h\n         CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   TRYCCHHR\n         JNE   TRYSMS                                           SMS0001\n*\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\n         SPACE\nTRYSMS   DS    0h\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         JNE   TRYCCHHR                                         SMS0001\n*\n         ST    R2,SMSFLD               SAVE OUTPUT FIELD ADDR   SMS0001\n         MVC   0(4,R2),=C'SMS '        MOVE IN HEADER           SMS0001\n         LA    R2,4(,R2)               INCREMENT POINTER        SMS0001\n         SPACE\n****************************************************************SMS0002\n*        SMS KEYWORD MUST ALSO BE SPECIFIED OR DEFAULTED TO GET THE   *\n*        DATACLAS, MGMTCLAS, AND STORCLAS VALUES.                     *\n****************************************************************SMS0002\n         SPACE\n         XR    R15,R15                 FLAG = 0                 SMS0002\nTRYDATAC CLI   DATACLAS+1,1            TEST FOR DATACLAS        SMS0002\n         JNE   TRYMGMTC                                         SMS0002\n*\n         ST    R2,DATACFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'DATACLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYMGMTC CLI   MGMTCLAS+1,1            TEST FOR MGMTCLAS        SMS0002\n         JNE   TRYSTORC                                         SMS0002\n*\n         ST    R2,MGMTCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'MGMTCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYSTORC CLI   STORCLAS+1,1            TEST FOR STORCLAS        SMS0002\n         JNE   TESTLOAD                                         SMS0002\n*\n         ST    R2,STORCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'STORCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTESTLOAD EQU   *                       SEE IF SMS KEYWORD       SMS0002\n         XC    IGWASMSV,IGWASMSV       CLEAR MODULE ADDRESS     SMS0002\n         LTR   R15,R15                 Q:KEYWORD SPECIFIED?     SMS0002\n         JZ    TRYCCHHR                N-DON'T NEED THIS JUNK   SMS0002\n*\n*        LA    R15,SMS_A               TO TRICK CALL            SMS0002\n         LARL  R15,SMS_A               TO TRICK CALL           AF jan13\n         CALL  (15),(IGWRC,IGWREAS,IGWPROB,IGWLEN,DSNAME,IGWSMS,       +\n               IGWTYPE),                                        SMS0002+\n               MF=(E,CALL_L)                                    SMS0002\n         SPACE\nSMS_A    EQU   *\n         MVI   IGWLEN+3,44             HARD LENGTH OF DSNAME    SMS0002\n         LOAD  EPLOC=IGWASMSC          SMS ATTR ROUTINE         SMS0002\n         ST    R0,IGWASMSV             SAVE ADDRESS             SMS0002\n         AIF   ('&DEBUG' NE 'ON').NODEBUG1\n***  debug display begin                                          debug\n         STM   R0,R15,$REGS                                       debug\n         BRAS  R2,PUTL                 DISPLAY OUTLINE            debug\n         MVC   OUTDEBUG,SLASHS                                    debug\n         MVC   OUTDEBUG+5(8),=C'DEBUG1  '      NODEBUG1           debug\n         MVC   OUTDEBUG+15(4),$R00                                debug\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          debug\n         MVC   OUTLINE(L'OUTDEBUG),OUTDEBUG                       debug\n         BRAS  R2,PUTL                 DISPLAY THE LINE           debug\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          debug\n         LM    R0,R15,$REGS                                       debug\n***  debug display end                                            debug\n.NODEBUG1 ANOP\n         SPACE\nTRYCCHHR DS    0h\n         CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         JE    DODSNAME\n*\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         JH    DSNFLDOK\n*\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\n*SMS0002 LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\nDSNFLDOK LA    R1,OUTLINE+L'OUTLINE-44 LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         JE    BUILDDSN\n*\n         BRAS  R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN DS    0h\n         LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT DS    0h\n         MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         JNZ   MOVEREST\n*\n*--------APPEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         CLC   UPTPREFX(7),=C'>7BYTES' 8-CHARACTER PREFIX?         UID8\n         BNE   USEOLPFX                NO. USE OLD UPTPREFX FIELD  UID8\n         LA    R4,UPTPREFX+17          LOAD NEW PREFIX ADDRESS.    UID8\n         B     USENWPFX                YES. USE NEW UPTPREF8 FIELD UID8\nUSEOLPFX DS    0H                                                  UID8\n         LA    R4,UPTPREFX             LOAD OLD PREFIX ADDRESS.    UID8\nUSENWPFX DS    0H                                                  UID8\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         JNE   GETLEN\n*\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         JNZ   MOVEREST\n*\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         JE    NOID\n*\nGETLEN   DS    0H                                                  UID8\n         ST    R2,SAVER2               USE R2 AS TEMP REGISTER     UID8\n         L     R2,CPPLUPT              GET UPT ADDRESS             UID8\n         USING UPT,R2                  TELL ASSEMBLER              UID8\n         CLC   UPTPREFX(7),=C'>7BYTES'   8-CHARACTER PREFIX?       UID8\n         BNE   USEOLLTH                NO. USE OLD LENGTH FIELD.   UID8\n         SR    R1,R1                   CLEAR REGISTER 1            UID8\n         IC    R1,UPT+41               YES. LOAD NEW PREFIX LENGTH.UID8\n         B     USENWLTH                                            UID8\nUSEOLLTH DS    0H                                                  UID8\n         SR    R1,R1                   CLEAR REGISTER 1            UID8\n         IC    R1,UPT+23               LOAD OLD PREFIX LENGTH      UID8\nUSENWLTH DS    0H                                                  UID8\n         DROP  R2                                                  UID8\n         L     R2,SAVER2                                           UID8\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EXRL  R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         JZ    LOCATE\n*\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST DS    0H\n         L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EXRL  R1,MOVENAME             COPY NAME\n*\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   DS    0H\n         MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         JNZ   COPYSER\n*\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         JNZ   PROCGRP\n*\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   CHECK8\n*\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         JE    OBTAIN1\n*\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         JNE   PROCGRP\n*\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         JE    PROCTTR\n*\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         JE    PROCGRP                    SU 8 NOT INSTALLED\n         J     LOCERROR\n*\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         JNE   CHECK12\n*\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         JNE   PROCGRP\n*\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         JNE   PROCGRP\n*\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BRAS  R2,PUTL                 DISPLAY LINE\n         J     ENDGRP\n*\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         JNE   LOCERROR\n*\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         JNZ   LOCERROR\n*\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         JNE   FINDEND1\n*\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         J     PROCNTRY                LOAD INDEX NAME\n*\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         JNE   FINDEND\n*\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   LOCERROR\n*\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         JE    LNKENTRY\n*\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         JE    DSATNEXT\n*\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         JE    DSNOVER5\n*\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         JE    NDXENTRY\n*\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         JNE   DSNENTRY\n*\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         JE    NDXENTRY\n*\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         JZ    PUTGDG\n         JM    GDGEORD\n*\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         J     PUTGDG\n*\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         JNZ   PUTGDG\n*\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BRAS  R2,PUTL                 DISPLAY LINE\n*\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         J     FINDEND\n*\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         JZ    ENDLEVEL\n*\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         J     READCTLG\n*\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         JNZ   TESTDONE\n*\n         TM    FLAGS,GDG               TEST FOR GDG\n         JNZ   MTGDG\n*\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         J     PUTEMPTY\n*\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\nPUTEMPTY DS    0H                                               SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BRAS  R2,PUTL                 DISPLAY MESSAGE\n*\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         JE    ENDGRP\n*\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         JNE   FINDDOT\n*\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         J     PROCNTRY\n*\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         JNZ   LOCATE2\n*\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         JZ    OBTAIN1\n         J     LOCERROR\n*\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         JNZ   DSNMVC\n*\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         J     LDVOLCNT\n*\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         JE    BACKUP\n*\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         JNZ   SAVELEN\n*\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         JNZ   SAVELEN\n*\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         JNE   SAVELEN                 NO, BRANCH                 ABL99\n*\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         JZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         JE    PARTIAL\n*\n         CH    R15,=H'40'\n         JNE   LOCERROR\n*\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         JH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n*\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         J     RETRYLOC\n*\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         BRAS  R2,PUTL                 DISPLAY LINE                 ABL\n*\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         J     DSATPROC\n*\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         JNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n*\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         JZ    OBTAIN1                 OK, BRANCH\n*\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         JE    GDGMSGL                 YES, BRANCH                  SPG\n*\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         JNE   LOCERROR                NO, BRANCH\n*\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         J     LOCERROR\n*\n*   moved to literals  area                                    AF jan13\n*  SHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\n*  LSHOWCAT EQU   *-SHOWCATF\n*\nTESTCOMP DS    0h\n         TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         JZ    ENDGRP\n*\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BRAS  R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         J     ENDGRP\n*\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EXRL  R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         JNE   OBTAIN1\n*\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         JE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n*\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         JE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n*\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         J     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n*\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         JO    NEXTSER               YES, IGNORE\n         J     THISVOL\n*\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         JO    ENDGRP2\n*\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         BRAS  R2,PUTL                 DISPLAY ERROR MESSAGE\n         J     ENDGRP2\n*\nTHISVOL  DS    0h\n         CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         JE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n*\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  DS    0h\n         LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT DS    0h\n         MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         JNH   GETSER\n*\n         LA    R1,20                   SET MAX COUNT\nGETSER   DS    0h\n         C     R1,=F'1'                TEST VOLUME COUNT\n         JL    BADVOLCT                BAD VOLUME COUNT\n*\n         JE    STOREVCT\n*\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT DS    0h\n         STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n**\n         BRAS  R14,$SMS2               DO DATACLAS, MGMTCLAS,   SMS0002\n*                                      AND STORCLAS             SMS0002\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         JE    TESTDEV\n*\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         JE    TESTDEV\n*\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  DS    0h\n         CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         JE    TESTDA\n*\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   DS    0h\n         CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         JNE   NOTDASD\n*\n         SR    R1,R1                   CLEAR REG 1\n         XC    TRKPRCYF,TRKPRCYF       clear field               BDF07\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE DS    0h\n         CH    R1,=H'15'               TEST AGAINST MAX\n         JH    NOTDASD\n*\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         JNZ   TESTDEV2\n*\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         JE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n*\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         JE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n*\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         J     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n*\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         JNE   NEXTDEV                                         HD JAN99\n*\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         JO    NOTUP\n*\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         JZ    TESTTYPE\n*\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         J     TESTTYPE\n*\nNOTUP    DS    0h\n         LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         J     DSNERR                  ORC04\n*\nTESTDEV2 DS    0h\n         CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         JE    GETFMT1\n*\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\n* --------------------------------------------------------------  BDF11\nGETFMT1  DS    0H\n         OBTAIN DSATDCB1,EADSCB=OK     GET FORMAT 1/8 DSCB        BDF11\n*bdf11*  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   DSNERR\n*                                                                 BDF11\n* --------------------------------------------------------------  BDF11\n*\n*ETDSCB3 DS    0H\n* --------------------------------------------------------------  BDF11\n*bdf11   NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n*bdf11   BZ    PROCESS\n*\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n*bdf11   LTR   R15,R15                 TEST RETURN CODE\n*bdf11   BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE FMT-1/8 DSCB                                     *\n*        R8 = CATBLOCK                                                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*bdf11 this label no longer used\n*bdf11*PROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS,COUNT             COUNT THIS DATA SET        bdf11\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         JE    PROCDSRG\n*\n         ST    R8,SAVER8               $ALLOC needs R8\n         BRAS  R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n*\n         L     R8,SAVER8\n*\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\n*\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         JE    PROCPDS\n         BRAS  R14,$DSORG              BRANCH TO PROCESSING ROUTINE\n*\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         JE    PROCDCB\n*\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         JZ    PROCDCB\n*\n         TM    DS1SMSFG,DS1PDSEX       MAKE SURE ITS NOT HFS   @KLS0710\n         JO    PROCDCB                                         @KLS0710\n*\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\n*\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         JE    PROCCRDT\n         BRAS  R14,$DCB                BRANCH TO PROCESSING ROUTINE\n*\nPROCCRDT DS    0h\n         CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         JE    PROCEXDT\n*\n         BRAS  R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\n*\nPROCEXDT DS    0h\n         CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         JE    PROCLREF\n         BRAS  R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\n*\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   PROCCHHR\n         JNE   PROCSMS                                          SMS0001\n         BRAS  R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\n*\nPROCSMS  EQU   *                                                SMS0001\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         JNE   PROCCHHR                                         SMS0001\n         BRAS  R14,$SMS                                         SMS0001\n*\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         JE    PUTLINE\n         BRAS  R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\n*\nPUTLINE  DS    0h\n         BRAS  R2,PUTL                 DISPLAY THE LINE\n*\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n* ================================================================ *\n*        Display EXTENTs info for this volume\n* ---------------------------------------------------------------- *\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         JE    NOEXTENT                YES, BRANCH                ABL94\n*\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         JZ    NOEXTENT                NO, BRANCH                 ABL94\n*\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         ST    R8,SAVER8               $ALLEXTS needs R8\n         BRAS  R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n*\n         L     R8,SAVER8\n*\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT DS    0h\n*        NI    FLAGS,X'FF'-COUNT why?  RESET COUNT BIT   ABL94 AF jan13\n* ================================================================ *\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BRCT  R1,GETSER               LOOP FOR MORE VOLUMES\n*\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         JZ    SAVETOTL\n*\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL DS    0h\n         STM   R4,R8,TOTLS             STORE TOTALS\n* ================================================================ *\n**          This block moved to above\n* ---------------------------------------------------------------- *\n**          CLC   EXTENTS,=H'2'           NOEXTENSTS?             ABL94\n**          JE    NOEXTENT                YES, BRANCH             ABL94\n** *\n**          TM    FLAGS,COUNT             COUNT IT?               ABL94\n**          JZ    NOEXTENT                NO, BRANCH              ABL94\n** *\n**          MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE       ABL94\n**          ST    R8,SAVER8               $ALLEXTS needs R8\n**          BRAS  R14,$ALLEXTS            BRANCH TO ROUTINE       ABL94\n** *\n**          L     R8,SAVER8\n** *\n**          MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE       ABL94\n** NOEXTENT DS    0h\n**          NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT         ABL94\n* ================================================================ *\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  DS    0h\n         TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         JZ    ENDGRP\n*\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         JZ    DSATNEXT                GET NEXT DSNAME\n*\n         J     DSATNXT2                GET NEXT DSNAME\n*\nENDGRP   DS    0h\n         NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         JZ    ENDGRP2\n*\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         JE    NEXTSER\n*\nENDGRP2  DS    0h\n*                                      chain end by x'FF000000'AF jan13\n         TM    24(R3),X'FF'            end of chain ?          AF jan13\n         JO    EOC                     YES, go                 AF jan13\n*\n         L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         J     SETUPNXT                do next PDE entry       AF jan13\n* ------------------------------------------------------------ AF jan13\n*        LA    R3,0(,R3)               reset high byte         AF jan13\n*        LTR   R3,R3                   END OF CHAIN?           AF jan13\n*        BNZ   SETUPNXT                NO, BRANCH              AF jan13\n* ------------------------------------------------------------ AF jan13\n*\nEOC      DS    0h                      end of chain\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         JE    RETURN\n*\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n*\n*  MORE THAN 9999 DATASETS POSSIBLE |                             BDF03\n**       MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE      BDF03\n**       MVC   5(19,R2),=C'DATA SET DISPLAYED'                    BDF03\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      BDF03\n         MVC   8(19,R2),=C'DATA SET DISPLAYED'  ???               BDF03\n*\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         JH    CNVTALOC\n*\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         JZ    RETURN\n*\n*        display cumulation for multivol DSN\n*\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   8(19,R2),=C'DATA SET DISPLAYED'   ??               BDF08\n*old*    MVC   5(19,R2),=C'DATA SET DISPLAYED'\nCNVTALOC DS    0h\n         CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         JE    DISPLAYT\n*\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n* ---------------------------------------------------------------------\n         LR    R0,R4                   tracks total               BDF07\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        BDF07\n*\n         MVC   0(9,R2),DECNUM+12-9     MOVE INTO MESSAGE          BDF07\n*\n*old*    CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n*old*    MVC   DSATDEC,=X'4020202020202120'\n*old*    ED    DSATDEC,DSATPDEC+4      EDIT\n*old*    MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n*old*------------------------------------------------------------------\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*old*    MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\n         MVC   10(7,R2),DSATDEC+1      MOVE INTO OUTPUT LINE      BDF07\nDISPLAYT DS    0h\n         BRAS  R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         JL    BRANCH\n*\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   DS    0h\n         SLA   R15,2                   MULTIPLY BY 4\n**       B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\n         LARL  R0,BRTABLE                                      AF jan13\n         AR    R15,R0                  BRANCH TO PROPER ROUTINE AFjan13\n         BR    R15                                             AF jan13\n*\nBRTABLE  J     RC0                                             HD JAN99\n         J     RCTALLOC\n         J     RCTUSED\n         J     RCLALLOC\n         J     RCLUSED\n         J     RCTDIFF\n         J     RCLDIFF\n         J     RCNUM\n         J     RCPREV\n         J     RCDSORG\n         J     RCDIRA\n         J     RCDIRU\n         J     RCENTR\n         J     RCMEMB\n*\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         J     EXIT\n*\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         J     EXIT\n*\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         J     EXIT\n*\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         J     EXIT\n*\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         J     EXIT\n*\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         JNZ   EXIT\n*\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         J     EXIT\n*                                                                 bdf11\n*bdf11*  RCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\nRCPREV   DS    0H                                                 bdf11\n         L     R15,CPPLECT             LOAD ECT ADDRESS           bdf11\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         J     EXIT\n*\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         J     EXIT\n*\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         J     EXIT\n*\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         J     EXIT\n*\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         J     EXIT\n*\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         J     EXIT\n*\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         J     EXIT\n*\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         J     EXIT\n*\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         J     EXIT                                            HD JAN99\n*\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         J     EXIT                                            HD JAN99\n*\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         JO    RC8                     YES, RETURN CODE=8      HD JAN99\n         J     EXIT                                            HD JAN99\n*\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         JZ    EXIT2\n*\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         LTR   R1,R1                   Q:DID THIS?              SMS0001\n         JZ    EXIT2_A                 N-DON'T TRY TO FREE IT   SMS0001\n*\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\nEXIT2_A  EQU   *                                                SMS0001\n         LR    R15,R3                  RESTORE RETURN CODE\n*\n*        avoid \"ASMA303W Multiple address resolutions\"         AF jan13\n         DROP  R12          USING const,R12                    AF jan13\n         $RTRN RENT=DSECTLEN,RC=(R15)\n*\n*        re-establish BASE registers                           AF jan13\n         USING const,R12                DEFINE BASE REGISTERS  AF jan13\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   DS    0H\n         L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n         ST    R7,NEXTFMT3             clear flag                 bdf11\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         JZ    ALLOCEND\n*\n* process the 3 FMT-1/8 extents                                   bdf11\n         LA    R15,3                   EXTENTS TO PROCESS         bdf11\n         LR    R0,R4                   TOTAL EXTENTS              bdf11\n         SR    R0,R15                  EXTENTS LEFT               bdf11\n         ST    R0,EXTENTLF             SAVE FOR LATER             bdf11\n         CH    R4,=H'03'               CAN WE DO ALL?             bdf11\n         JL    DSATTRKS                YES, BRANCH                bdf11\n*\n*bdf11\n         LH    R4,=H'03'               NO, DO  3 FIRST            bdf11\n* ---------------------------------------------------------------------\n*bdf11   LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n*bdf11   LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n*bdf11   SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n*bdf11   ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n*bdf11   CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n*bdf11   BL    DSATTRKS                YES, BRANCH            ABL NOV92\n*bdf11\n*bdf11   LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\n* ---------------------------------------------------------------------\nDSATTRKS DS    0H\n         EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n*AF**    EXRL  R0,DSATADDR(R5) not valid with index reg\n         CLI   0(R7),X'00'\n         JE    DSATUTRK                finished - go\n*\n* --------------------------------------------------------------  bdf11\n*        calculate the size of this extent                        bdf11\n* --------------------------------------------------------------  bdf11\n         XC    FULL,FULL               clear field                bdf11\n         XR    R0,R0                   clear register             bdf11\n* --------------------------------------------------------------  bdf11\n*        Check for EAV                                            bdf11\n* --------------------------------------------------------------  bdf11\n         CLI   DS1FMTID,DS8IDC    IS THIS A FMT-8 ?               bdf11\n         JNE   NON_EAV            NO, go for CCHH processing      bdf11\n*\n* --------------------------------------------------------------  bdf11\n*        extent table in new form CCCCcccH                        bdf11\n* --------------------------------------------------------------  bdf11\n         LA    R8,2(R7)                  point to extent-start    bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1  get cyl                  bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1  get trk                  bdf11\n         ST    R1,TRKS#                  save start_TRK           bdf11\n*                                                                 bdf11\n         LA    R8,6(R7)                  point to extent-end      bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1  get cyl                  bdf11\n         S     R1,FULL                 subtract start from end    bdf11\n         XR    R0,R0                   clear register             bdf11\n         M     R0,TRKPRCYF             multiply by TRK per CYL    bdf11\n         ST    R1,TRKCYL                 save #tracks             bdf11\n*                                                                 bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1  get trk                  bdf11\n         A     R1,TRKCYL               add #tracks                bdf11\n         S     R1,TRKS#                subtract starting trackno  bdf11\n         LA    R1,1(R1)                add 1 TRK                  bdf11\n         AR    R6,R1                   accumulate total           bdf11\n         J     NEXT_EXT                                           bdf11\n*                                                                 bdf11\n* --------------------------------------------------------------  bdf11\n*        This routine is for NON-EAV DASD,                        bdf11\n*        extent table in old form CCCCHHHH                        bdf11\n* --------------------------------------------------------------  bdf11\nNON_EAV  DS    0H                                                 bdf11\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         L     R1,FULL                                            BDF07\n*BDF07*  LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         S     R1,FULL                 SUBTRACT STARTING FROM END BDF07\n         M     R0,TRKPRCYF             MULTIPLY BY TRACKS PER CYL BDF07\n*BDF07*  SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n*BDF07*  MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         A     R1,FULL                 ADD TO TRACK COUNT         BDF07\n*BDF07*  AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         S     R1,FULL                 SUBTRACT FROM TRACK COUNT  BDF07\n*BDF07*  SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,1(R6)                ADD 1 TRACK                BDF07\n*BDF07*  LA    R6,R1(R6)               ADD 1 TRACK\n*\n* --------------------------------------------------------------  bdf11\nNEXT_EXT DS    0H                                                 bdf11\n* --------------------------------------------------------------  bdf11\n         LA    R5,4(R5)                pointer to next extent\n         BRCT  R4,DSATTRKS             decrement extent count\n*                                                                 bdf11\n         L     R4,EXTENTLF             number extents left        bdf11\n         CH    R4,=H'0'                Q: are ther any ?          bdf11\n         JNH   DSATUTRK                NO, finished               bdf11\n*                                                                 bdf11\n         NC    NEXTFMT3,NEXTFMT3       Q:is there a FMT-3 chain ? bdf11\n         JNZ   DSCB3#15                YES, go to get DSCB-3      bdf11\n*                                                                 bdf11\n         CLI   DS1FMTID,DS8IDC         Q:is this a FMT-8 ?        bdf11\n         JNE   DSCB3#10                NO, go for FMT-3 DSCB      bdf11\n*                                                                 bdf11\n* --------------------------------------------------------------  bdf11\n*        a FMT-8 DS1PTRDS points-to the first FMT-9               bdf11\n* --------------------------------------------------------------  bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-9 ptr ?   bdf11\n         JNZ   DSCB9#10                YES, go to get it          bdf11\n*                                                                 bdf11\n         ABEND 4016               *STOP* IF FMT-8 BUT NO FMT-9    bdf11\n*                                                                 bdf11\nDSCB9#10 DS    0H                                                 bdf11\n         OBTAIN DSATDCB9,EADSCB=OK     get format 9 DSCB          bdf11\n         LTR   R15,R15                 TEST RETURN CODE           bdf11\n         JNZ   DSNERR                                             bdf11\n*                                                                 bdf11\n         LA    R4,DS9NUMF3             get num of FMT-3 pointers  bdf11\n         STH   R4,DS3LEFT              save for later use         bdf11\n         LA    R5,DS9F3P               first FMT-3 pointer        bdf11\n         NC    0(5,R5),0(R5)           Q: is it valid CCHHR?      bdf11\n         JZ    DSATUTRK                NO - finished              bdf11\n*                                                                 bdf11\n         ST    R5,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         J     DSCB3#20                go for DSCB3 processing    bdf11\n*                                                                 bdf11\nDSCB3#10 DS    0H                                                 bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-3 ptr ?   bdf11\n         JZ    DSATUTRK                NO, finished               bdf11\n*                                                                 bdf11\n         LA    R0,DS1PTRDS             pointer to FMT-3 DSCB      bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         J     DSCB3#20                go for DSCB3 processing    bdf11\n*                                                                 bdf11\n*        process FMT-3 DSCB with 13 extents                       bdf11\nDSCB3#15 DS    0H                                                 bdf11\n*bdf11   LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n*                                                                 bdf11\nDSCB3#20 DS    0H                                                 bdf11\n         OBTAIN DSATDCB3,EADSCB=OK     GET THE FORMAT 3 DSCB      bdf11\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         ST    R0,NEXTFMT3             save as Flag               bdf11\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n*\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS         bdf11\n         LR    R0,R4                   TOTAL EXTENTS              bdf11\n         SR    R0,R15                  EXTENTS LEFT               bdf11\n         ST    R0,EXTENTLF             SAVE FOR LATER             bdf11\n         LA    R5,3*4                  point to FMT-3 execs       bdf11\n         CH    R4,=H'13'               CAN WE DO ALL?             bdf11\n         JL    DSATTRKS                YES, BRANCH                bdf11\n*                                                                 bdf11\n         LH    R4,=H'13'               NO, DO 13 NEXT             bdf11\n         J     DSATTRKS                CONTINUE               ABL NOV92\n*\n* --------------------------------------------------------------  bdf11\n*        DSCBs processed, show EXTENT values                      bdf11\n* --------------------------------------------------------------  bdf11\nDSATUTRK DS    0H\n         CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO MESSAGE          BDF07\n*BDF07*  MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         JZ    DSATXNTS\n*\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n*bdf11 12.10.2011                                                 bdf11\n         TM    DS1FLAG1,DS1LARGE       Q:large file, size > 64K   bdf11\n         JNO   DSATUT10                N- go for next check       bdf11\n*\n         ICM   R1,B'0100',DS1TTTHI     get high order byte        bdf11\n         J     DSATUT20                go on                      bdf11\n*                                                                 bdf11\nDSATUT10 DS    0H                                                 bdf11\n         CLI   DS1FMTID,DS8IDC         Q:is this a FMT-8 ?        bdf11\n         JNE   DSATUT20                N-DO OLD WAY               bdf11\n*                                                                 bdf11\n         ICM   R1,B'1100',DS1TRBAL     get high order bytes       bdf11\n*                                                                 bdf11\nDSATUT20 DS    0H                                                 bdf11\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   8(7,R2),DSATDEC+1       MOVE INTO MESSAGE          BDF07\n*BDF07*  MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n*SMS0001 IC    R1,DS1NOPEV             LOAD EXTENTS\n         IC    R1,DS1NOEPV             LOAD EXTENTS             SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   16(3,R2),DSATDEC+5      MOVE INTO MESSAGE          BDF08\n*BDF08*  MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n*BDF08*  CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n*BDF08*  BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n*BDF08*  MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND DS    0h\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         JE    NOSECOND\n*\n*--------secondary space (amount and allocation unit)\n         LA    R2,21(R2)               INCREMENT FIELD POINTER    bdf11\n*bdf11   LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCAL1,DS1EXT         Q:EXTEND 2NDARY SPACE?   SMS0001\n         JNO   NOAVGREC                N-DO OLD WAY             SMS0001\n*\n         TM    DS1SCEXT,DS1SCAVB       Q:AVERAGE BLOCK DATA SET?SMS0001\n         JNO   TRYMB                   N-TRY MB TEST            SMS0001\n*\n         XR    R1,R1                   Y-DISPLAY BLKSZ AND AMT  SMS0001\n         ICM   R1,B'0011',DS1SCXTV     COPY TO ALIGNED (F) WOR  SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   5(5,R2),DSATDEC+3       COPY ORIGINAL AVGBLKSZ   SMS0001\n         J     SECAMT                  GET # OF BLOCKS          SMS0001\n*\nTRYMB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCMB        Q:AVGREC=M DATA SET?     SMS0001\n         JNO   TRYKB                   N-TRY KB TEST            SMS0001\n*\n         MVI   9(R2),C'M'              INDICATE MEGABYTES       SMS0001\n         J     SECBYTES                CLEAR                    SMS0001\n*\nTRYKB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCKB        Q:AVGREC=K DATA SET?     SMS0001\n         JNO   TRYB                    N-TRY B TEST             SMS0001\n*\n         MVI   9(R2),C'K'              INDICATE KILOBYTES       SMS0001\n         J     SECBYTES                                         SMS0001\n*\nTRYB     EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCUB        Q:AVGREC=U DATA SET?     SMS0001\n         JNO   NOAVGREC                N-DO OLD WAY             SMS0001\n*\n         MVI   9(R2),C'B'              INDICATE BYTES           SMS0001\n*        J     SECBYTES                                         SMS0001\n*\nSECBYTES EQU   *                       GET NUMBER OF BYTES      SMS0001\n         XR    R1,R1                   CLEAR FOR INSERT         SMS0001\n         ICM   R1,B'0011',DS1SCXTV     SEC SPACE EXTENSION AMT  SMS0001\n         TM    DS1SCXTF,DS1SCCP1       Q:ADJUSTED BY 256?       SMS0001\n*AF**    BNO   *+8                     N-DON'T ADJUST           SMS0001\n         JNO   SECBYTE1                N-DON'T ADJUST          AF jan13\n         SLL   R1,8                    Y-MULTIPLY BY 256        SMS0001\nSECBYTE1 EQU   *\n         TM    DS1SCXTF,DS1SCCP2       Q:ADJUSTED BY 65536?     SMS0001\n*AF**    BNO   *+8                     N-DON'T ADJUST           SMS0001\n         JNO   SECBYTE2                N-DON'T ADJUST           SMS0001\n         SLL   R1,16                   Y-MULTIPLY TO 65536      SMS0001\nSECBYTE2 EQU   *\n         CLI   9(R2),C'B'              Q:SPACE IN BYTES?        SMS0001\n         JNE   TESTKB                  N-SEE IF IN K            SMS0001\n*\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         JL    DOSEC                   N-JUST DO IT             SMS0001\n*\n         MVI   9(R2),C'K'              Y-CHANGE TO KB           SMS0001\n         SRL   R1,10                   BYTES/1024               SMS0001\nTESTKB   EQU   *                                                SMS0001\n         CLI   9(R2),C'K'              Q:SPACE IN KBYTES?       SMS0001\n         JNE   TESTMB                  N-SEE IF IN M            SMS0001\n*\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         JL    DOSEC                   N-JUST DO IT             SMS0001\n*\n         MVI   9(R2),C'M'              Y-CHANGE TO MB           SMS0001\n         SRL   R1,10                   KBYTES/1024              SMS0001\nTESTMB   EQU   *                                                SMS0001\n         CLI   9(R2),C'M'              Q:SPACE IN MBYTES?       SMS0001\n         JNE   DOSEC                   N-JUST DO IT             SMS0001\n*\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         JL    DOSEC                   N-JUST DO IT             SMS0001\n*\n         MVI   9(R2),C'G'              Y-CHANGE TO GB           SMS0001\n         SRL   R1,10                   MBYTES/1024              SMS0001\nDOSEC    EQU   *                                                SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   1(8,R2),DSATDEC                                  SMS0001\n         BR    R14                     2NDARY SPACE COMPLETE    SMS0001\n*\nNOAVGREC EQU   *                                                SMS0001\n         TM    DS1SCALO,DS1CYL         TEST ALLOCATION TYPE       bdf11\n*bdf11   TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         JM    TRKALLOC\n         JO    CYLALLOC\n*\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         J     SECAMT\n*\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         J     SECAMT\n*\nTRKALLOC DS    0H                                                 bdf11\n         TM    DS1SCALO,DS1TRK         TEST FOR TRACKS OR BLOCKS  bdf11\n*bdf11OC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         JZ    BLKALLOC\n*\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         J     SECAMT\n*\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n**       LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         N     R1,=X'00FFFFFF'         ZERO high byte          AF jan13\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND DS    0h\n         BR    R14                     RETURN\n*\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n* --------------------------------------------------------------  BDF11\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS DS    0H\n         ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n         ST    R5,NEXTFMT3             clear flag                 bdf11\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         JZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n*\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         JE    $ALLEX99                YES, BRANCH                ABL94\n*\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         JE    $ALLEX99                YES, BRANCH                ABL94\n*\n* --------------------------------------------------------------  bdf11\n*        Display header line for EXTents                          bdf11\n* --------------------------------------------------------------  bdf11\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BRAS  R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n*\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n*bdf11*  MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n*\n*        process the 3 extents in FMT-1/8 DSCB                    bdf11\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         JL    $ALLEX10                YES, BRANCH                ABL94\n*\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 DS    0H\n         EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n**       EXRL  R0,DSATADDR(R5)   not valid    with index Reg\n*bdf11*  MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'             Q: valid extent flags?     ABL94\n         JE    $ALLEX99                No: finished - go          ABL94\n*\n* ----------------------------------------------------------------\n*        put DSN attributes to output field\n* ----------------------------------------------------------------\n*   R1 needed for calculation, R7 points to Extent entry in DSCB  BDF07\n*BDF07*  LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         JNO   NOT$CYL                  NO - SKIP                 ABL94\n*                                                                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         J     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  DS    0H                                                 ABL94\n         TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         JZ    YES$CYL                  NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  DS    0H                                                 ABL94\n         TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         JZ    $ALLEX13                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX13 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         JZ    $ALLEX14                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX14 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         JZ    $ALLEX15                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX15 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         JZ    $ALLEX16                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*--- EXTENT SEQUENCE NUMBER                                       ABL94\n$ALLEX16 DS    0H                                                 BDF07\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R7)                GET EXTENT SEQ NUMBER     BDF07\n*BDF07*  IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n* --------------------------------------------------------------  bdf11\n         XC    FULL,FULL               clear field                bdf11\n         XR    R0,R0                   clear register             bdf11\n* --------------------------------------------------------------  bdf11\n*        Check for EAV                                            bdf11\n* --------------------------------------------------------------  bdf11\n         CLI   DS1FMTID,DS8IDC    IS THIS A FMT-8 ?               bdf11\n         JNE   $ALLEX20           NO, go for CCHH processing      bdf11\n*\n* --------------------------------------------------------------  bdf11\n*        extent table in new form CCCCcccH                        bdf11\n* --------------------------------------------------------------  bdf11\n*        EXTENT start address in hex                              bdf11\n         LA    R8,2(R7)                  point to extent-start    bdf11\n         TRKADDR NORMALIZE,(R8),REG=R1   get cccCCCCH             bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         UNPK  OL@START+1(8+1),FULL+1                             bdf11\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  bdf11\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             bdf11\n         MVC   OL@START(7),OL@START+1   SHIFT OVER cccCCCC        bdf11\n         MVI   OL@START+7,C':'          PUT IN SEPARATOR          bdf11\n*                                                                 bdf11\n*        EXTENT start address in decimal                          bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1 get cyl                   bdf11\n         XR    R0,R0                    clear register            bdf11\n         M     R0,TRKPRCYF              multiply by TRK per CYL   bdf11\n         ST    R1,TRKCYL                save track# from cyls     bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1 get trk                   bdf11\n         A     R1,TRKCYL                add track# to cyls        bdf11\n         ST    R1,TRKS#                 save TRK_count            bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BRAS  R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@STRK,DECNUM+12-7      get 7 digit number        bdf11\n*                                                                 bdf11\n*        EXTENT  end  address in hex                              bdf11\n         LA    R8,6(R7)                  point to extent-End      bdf11\n         TRKADDR NORMALIZE,(R8),REG=R1   get cccCCCCH             bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         UNPK  OL@END+1(8+1),FULL+1                               bdf11\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  bdf11\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             bdf11\n         MVC   OL@END(7),OL@END+1       SHIFT OVER cccCCCC        bdf11\n         MVI   OL@END+7,C':'            PUT IN SEPARATOR          bdf11\n*                                                                 bdf11\n*        EXTENT  end  address in decimal                          bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1 get cyl                   bdf11\n         XR    R0,R0                    clear register            bdf11\n         M     R0,TRKPRCYF              multiply by TRK per CYL   bdf11\n         ST    R1,TRKCYL                save track# of cyls       bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1 get trk                   bdf11\n         A     R1,TRKCYL                add tracks to cyls        bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BRAS  R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@ETRK,DECNUM+12-7      get 7 digit number        bdf11\n*                                                                 bdf11\n*        EXTENT  length in decimal                                bdf11\n         S     R1,TRKS#                 subtract start from end   bdf11\n         LA    R1,1(R1)                 add 1 TRK                 bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BRAS  R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@LNTH,DECNUM+12-7      get 7 digit number        bdf11\n* ---------------------------------------------------------------------\n*                                                                 bdf11\n         BRAS  R2,PUTL                  DISPLAY LINE              ABL94\n         J     $ALLEX25           go for next extent              bdf11\n*\n* --------------------------------------------------------------  bdf11\n*        This routine is for NON-EAV DASD,                        bdf11\n*        extent table in old form CCCCHHHH                        bdf11\n* --------------------------------------------------------------  bdf11\n$ALLEX20 DS    0H\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R7)  CCHH EXTENT START       BDF07\n*BDF07*  UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         XR    R0,R0                    clear                     BDF07\n         XR    R1,R1                    clear                     BDF07\n         XC    FULL,FULL                clear field               BDF07\n*BDF07*  LH    R0,2(,R1)                GET START CC              ABL94\n*BDF07*  MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n*BDF07*  AH    R0,4(,R1)                ADD START HH              ABL94\n         MVC   HALF(2),2(R7)           LOAD STARTING CYL NUMBER   BDF07\n         L     R1,FULL                   for calculation          BDF07\n         M     R0,TRKPRCYF              calc start CC in trks     BDF07\n         MVC   HALF(2),4(R7)            get start HH              BDF07\n         A     R1,FULL                  add start HH              BDF07\n         LR    R0,R1                    parm expected in R0       BDF07\n         ST    R0,TRKFRST               save for later use        BDF07\n*---\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@STRK,DECNUM+12-7      GET 7 DIGIT NUMBER        BDF07\n*BDF07*  MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R7)  CCHH EXTENT END           BDF07\n*BDF07*  UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         XR    R0,R0                    clear                     BDF07\n         XR    R1,R1                    clear                     BDF07\n         XC    FULL,FULL                clear field               BDF07\n*BDF07*  LH    R0,6(,R1)                GET END CC                ABL94\n*BDF07*  MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n*BDF07*  AH    R0,8(,R1)                ADD END HH                ABL94\n         MVC   HALF(2),6(R7)            get ending CYL number     BDF07\n         L     R1,FULL                   for calculation          BDF07\n         M     R0,TRKPRCYF              calc end   CC in trks     BDF07\n         MVC   HALF(2),8(R7)            get end   HH              BDF07\n         A     R1,FULL                  add end   HH              BDF07\n         LR    R0,R1                    parm expected in R0       BDF07\n         ST    R0,TRKLAST               save for later            BDF07\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@ETRK,DECNUM+12-7      GET 7 DIGIT NUMBER        BDF07\n*BDF07*  MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         L     R1,TRKLAST                                         BDF07\n         L     R0,TRKFRST                                         BDF07\n         SR    R1,R0                    calc extent size          BDF07\n         LA    R0,1(R1)                 add 1 track               BDF07\n*BDF07*  LH    R15,6(,R1)               GET END CC                ABL94\n*BDF07*  SH    R15,2(,R1)               SUB START CC              ABL94\n*BDF07*  MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n*BDF07*  AH    R15,8(,R1)               ADD END HH                ABL94\n*BDF07*  SH    R15,4(,R1)               SUB START HH              ABL94\n*BDF07*  LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n*---\n***\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@LNTH,DECNUM+12-7     GET 7 DIGIT NUMBER OF TRKS BDF07\n*BDF07*  MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BRAS  R2,PUTL                  DISPLAY LINE              ABL94\n*\n* --------------------------------------------------------------  bdf11\n$ALLEX25 DS    0H\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BRCT  R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n*\n*bdf11*  NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n*bdf11*  BZ    $ALLEX20                NO, DONE                   ABL94\n*\n*bdf11*  LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        bdf11\n         CH    R4,=H'0'                Q: are ther any ?          bdf11\n         JNH   $ALLEX99                NO, finished               bdf11\n*                                                                 bdf11\n         NC    NEXTFMT3,NEXTFMT3       Q:is there a FMT-3 chain ? bdf11\n         JNZ   $ALLEX80                YES, go to get next DSCB-3 bdf11\n*                                                                 bdf11\n         CLI   DS1FMTID,DS8IDC         Q:is this a FMT-8 ?        bdf11\n         JNE   $ALLEX75                NO, go for FMT-3 DSCB      bdf11\n*                                                                 bdf11\n* --------------------------------------------------------------  bdf11\n*        a FMT-8 DS1PTRDS points-to the first FMT-9               bdf11\n* --------------------------------------------------------------  bdf11\n$ALLEX70 DS    0H                                                 bdf11\n         OBTAIN DSATDCB9,EADSCB=OK     get format 9 DSCB          bdf11\n         LTR   R15,R15                 TEST RETURN CODE           bdf11\n         JNZ   DSNERR                                             bdf11\n*                                                                 bdf11\n         LA    R4,DS9NUMF3             get num of FMT-3 pointers  bdf11\n         STH   R4,DS3LEFT              save for later use         bdf11\n         LA    R5,DS9F3P               first FMT-3 pointer        bdf11\n         NC    0(5,R5),0(R5)           Q: is it valid CCHHR?      bdf11\n         JZ    $ALLEX99                NO - finished\n*                                                                 bdf11\n         ST    R5,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         J     $ALLEX85                go for DSCB3 processing    bdf11\n*                                                                 bdf11\n$ALLEX75 DS    0H                                                 bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-3 ptr ?   bdf11\n         JZ    $ALLEX99                NO, finished               bdf11\n*                                                                 bdf11\n         LA    R0,DS1PTRDS             pointer to FMT-3 DSCB      bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         J     $ALLEX85                go for DSCB3 processing    bdf11\n*                                                                 bdf11\n*        process FMT-3 DSCB with 13 extents                       bdf11\n$ALLEX80 DS    0H\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n*\n$ALLEX85 DS    0H\n         OBTAIN DSATDCB3,EADSCB=OK     GET THE FORMAT 3 DSCB      bdf11\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n*bdf11*  LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB 3     bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         ST    R0,NEXTFMT3             save as Flag               bdf11\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         JNZ   DSNERR                  NO, SOME ERROR             ABL94\n*\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         bdf11\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         JL    $ALLEX10                YES, BRANCH                ABL94\n*\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         J     $ALLEX10                CONTINUE                   ABL94\n*\n*----------------------------------------------------------------\n*bdf11*  $ALLEX20 DS    0H\n$ALLEX99 DS    0H\n         L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\n*\nCONVDEC0 DS    0h\n         CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\n*\n* ------------------------------------------------------------------- *\n*        moved DECMASK, HEXTAB and HEADER3 from instructions   AF jan13\n*        moved << EXECUTED INSTRUCTION >>    to LITERALS area  AF jan13\n* ------------------------------------------------------------------- *\n*\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         JZ    DSORG001\n*\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\nDSORG001 DS    0H                                               SMS0003\n         LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS SMS0003\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         JZ    DSORGCLC\n*\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         JE    DSORGMVC\n*\n         BRXLE R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\n*\nDSORGMVC DS    0h\n         MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         TM    DS1FLAG1,DS1LARGE       LARGE FORMAT?          DRK AUG11\n*        BNO   *+4+4+4                 NO, BRANCH             DRK AUG11\n         JNO   DSORGMV2                NO, BRANCH              AF jan13\n*\n         MVI   3(R2),C'L'              YES, NOTE IT           DRK AUG11\n         J     DSORGTST                                       DRK AUG11\n*\nDSORGMV2 DS    0h                                              AF jan13\n         TM    DS1REFD+3,X'04'         EXTENDED FORMAT?       DRK AUG11\n         JNO   DSORGTST                NO, BRANCH             DRK AUG11\n*\n         MVI   3(R2),C'X'              YES, NOTE IT           DRK AUG11\nDSORGTST DS    0H                                             DRK AUG11\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         JE    DSORGPO\n*\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         JE    DSORGPS\n*\nDSORGBAD DS    0h\n         OI    FLAGS,$NOTPOPS\n         J     DSORGRTN\n*\nDSORGPO  DS    0h\n         OI    FLAGS,$DSPO             ASSUME PARTITIONED      @KLS0710\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         JNO   DSORGRTN                NO, BRANCH             ABL NOV92\n*\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         TM    DS1SMSFG,DS1PDSEX       IS THIS A HFS?          @KLS0710\n         JNO   DSORGRTN                NO, BRANCH              @KLS0710\n*\n         MVC   1(2,R2),=C'HF'          YES, CHANGE TO \"HF\"     @KLS0710\n         XI    FLAGS,$DSPO             NOT PARTITIONED         @KLS0710\n         OI    FLAGS,$NOTPOPS                                  @KLS0710\n         J     DSORGRTN\n*\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         JZ    DSATT\n*\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         JNZ   DSATUORV\n*\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         J     DSATT\n*\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         JZ    DSATV\n*\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         J     DSATT\n*\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         JZ    DSATB\n*\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         JZ    DSATS\n*\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         JZ    DSATA\n*\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         JZ    DSATM\n*\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         JZ    DSATBLK\n*\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  DS    0h\n         L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BRAS  R5,DATECONV             CONVERT IT\n*\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n*\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  DS    0h\n         L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BRAS  R5,DATECONV             CONVERT IT\n*\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n*\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BRAS  R5,DATECONV             CONVERT IT\n*\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         JZ    REFRTRN\n*\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n*\n         SPACE ,                                                SMS0001\n***********************************************************************\n* PROCESS SMS INDICATOR FLAG                                    SMS0001\n* 1) INDICATE IF 'MANAGED' FLAG IS ON.                          SMS0001\n* 2) IF BLOCKSIZE IS DISPLAYED, SET INDICATOR IF IT WAS SYSTEM  SMS0001\n*    DETERMINED.                                                SMS0001\n* 3) DO SMS KEYWORDS IF SPECIFIED.                              SMS0003\n***********************************************************************\n$SMS     EQU   *                                                SMS0001\n         CLC   DCB,=H'2'               Q:NODCB SPECIFIED?       SMS0001\n         JE    $SMS_100                Y-DON'T WORRY ABOUT BLKSZSMS0001\n*\n         TM    DS1SMSFG,DS1CRSDB       Q:SDB BLKSZ?             SMS0001\n         JNO   $SMS_100                N-DON'T FLAG             SMS0001\n*\n         L     R2,DCBFLD               Y-GET ADDR OF PARM       SMS0001\n         MVI   10(R2),C'*'             SET SDB BLKSZ INDICATOR  SMS0001\n$SMS_100 EQU   *                                                SMS0001\n         L     R2,SMSFLD               LOAD OUTPUT AREA ADDRESS SMS0001\n         MVC   0(3,R2),=C'YES'         ASSUME SMS MANAGED       SMS0001\n         TM    DS1SMSFG,DS1SMSDS       Q:CORRECT ASSUMPTION?    SMS0001\n         BOR   R14                     Y-WE'RE SET              SMS0001\n*\n         MVC   0(3,R2),=C'NO '         N-CHANGE TO NO           SMS0001\n         BR    R14                     RETURN TO CALLER         SMS0001\n*\n$SMS2    EQU   *                                                SMS0002\n         ICM   R15,B'1111',IGWASMSV    GET ROUTINE ADDRESS      SMS0002\n         BZR   R14                     RETURN IF NONE           SMS0002\n*\n         ST    R14,$SMSAVE             SAVE RETURN ADDRESS      SMS0002\n* -----------------------------------------------------------  AF jan13\n*        We are AMODE 31 now already                           AF jan13\n*        BRAS  R14,AMODE31             TO CALL ROUTINE          SMS0002\n* -----------------------------------------------------------  AF jan13\n*\n         CALL  (15),MF=(E,CALL_L)      GET SMS INFO             SMS0002\n* -----------------------------------------------------------  AF jan13\n*        We are AMODE 31 now already                           AF jan13\n*        BRAS  R14,AMODE24             TO GET BACK              SMS0002\n* -----------------------------------------------------------  AF jan13\n*\n         LTR   R15,R15                 DID IT WORK?             SMS0002\n         JNZ   $SMS_900                N-SKIP THIS JUNK         SMS0002\n*\nPROMGMTC DS    0h\n         AIF   ('&DEBUG' NE 'ON').NODEBUG2\n***  debug display begin                                          debug\n         STM   R0,R15,$REGS                                       debug\n         BRAS  R2,PUTL                 DISPLAY OUTLINE            debug\n         MVC   OUTDEBUG,SLASHS                                    debug\n         MVC   OUTDEBUG+5(8),=C'DEBUG2  '      NODEBUG2           debug\n         MVC   OUTDEBUG+15(4),$R15                                debug\n         MVC   OUTDEBUG+20(8),IGWMGMTC                            debug\n         MVC   OUTDEBUG+30(8),IGWSTORC                            debug\n         MVC   OUTDEBUG+40(8),IGWDATAC                            debug\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          debug\n         MVC   OUTLINE(L'OUTDEBUG),OUTDEBUG                       debug\n         BRAS  R2,PUTL                 DISPLAY THE LINE           debug\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          debug\n         LM    R0,R15,$REGS                                       debug\n***  debug display end                                            debug\n.NODEBUG2 ANOP\n         CLI   MGMTCLAS+1,2            TEST FOR NOMGMTCLASS     SMS0002\n         JE    PROSTORC                SKIP                     SMS0002\n*\n         L     R2,MGMTCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWMGMTC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         JE    PROSTORC                N-LEAVE NULL             SMS0002\n*\n         MVC   0(8,R2),IGWMGMTC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPROSTORC DS    0h\n         CLI   STORCLAS+1,2            TEST FOR NOSTORCLASS     SMS0002\n         JE    PRODATAC                SKIP                     SMS0002\n*\n         L     R2,STORCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWSTORC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         JE    PRODATAC                N-LEAVE NULL             SMS0002\n*\n         MVC   0(8,R2),IGWSTORC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPRODATAC DS    0h\n         CLI   DATACLAS+1,2            TEST FOR NODATACLASS     SMS0002\n         JE    $SMS_900                SKIP                     SMS0002\n*\n         L     R2,DATACFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWDATAC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         JE    $SMS_900                N-LEAVE NULL             SMS0002\n*\n         MVC   0(8,R2),IGWDATAC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\n$SMS_900 EQU   *                                                SMS0002\n         L     R14,$SMSAVE             RESTORE RETURN ADDRESS   SMS0002\n         BR    R14                     RETURN TO CALLER         SMS0001\n*\n* -----------------------------------------------------------  AF jan13\n*        We are AMODE 31 now                                   AF jan13\n*AMODE31  EQU   *                                               SMS0002\n*        O     R14,=X'80000000'        SET 31-BIT ADDRESS MODE  SMS0002\n*        BSM   R0,R14                  RETURN IN 31-BIT MODE    SMS0002\n*\n*AMODE24  EQU   *                                               SMS0002\n*        LA    R14,0(,R14)             SET 24-BIT ADDRESS MODE  SMS0002\n*        BSM   R0,R14                  RETURN IN 24-BIT MODE    SMS0002\n* -----------------------------------------------------------  AF jan13\n*\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV DS    0h\n**       LA    R1,0(R1)                ZERO HIGH BYTE\n         N     R1,=X'00FFFFFF'         ZERO high byte          AF jan13\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 DS    0h\n         UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         JNE   BADDAY\n*\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         JZ    BADDAY\n*\n         TM    WORK+3,X'06'\n         JZ    BADDAY\n*\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         JH    BADDAY\n*\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         JE    NODATE\n*\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         JE    LEAP\n*\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         JNH   LEAP\n*\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     DS    0h\n         CP    DAY,=P'1'               TEST MINIMUM DAY\n         JL    BADDAY\n*\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         JH    BADDAY\n*\n*        LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         LARL  R6,CALTABLE             LOAD TABLE ADDRESS      AF jan13\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     DS    0h\n         CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         JNH   OUT\n*\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         J     LOOP\n*\nOUT      DS    0h\n         UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         J     DATERTRN\n*\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         J     DATERTRN\n*\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   DS    0h\n         UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n*\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n*\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\nERRPARS  DS    0H                                               SMS0003\n         MVC   OUTLINE(28),DSATERR1                             SMS0003\n         J     SETERROR\n*\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\nNOID     DS    0H                                               SMS0003\n         MVC   OUTLINE(32),DSATERR7                             SMS0003\n         J     RLSA\n*\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\nTOOLONG  DS    0H                                               SMS0003\n         MVC   OUTLINE,BLANKS                                   SMS0003\n         MVC   OUTLINE(44),DSATERR4\nRLSA     DS    0H                                                 bdf11\n         IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BRAS  R2,PUTL2                PUT MESSAGE\n*\n         LA    R3,16                   SET CONDITION CODE\n         J     EXIT2\n*\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         JNE   LOCERR                                          HD JAN99\n*\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   DS    0h\n         BRAS  R2,PUTL                 PRINT IT\n         J     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         JE    RESETLIN\n*\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         J     PUTLINE                 PRINT THE LINE\n*\n*--------ERROR IN OBTAIN MACRO\nDSNERR   DS    0h\n         CH    R15,=H'8'               TEST RETURN CODE\n         JH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n*\n         JE    TESTVALL\n*\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         JE    RESETLIN\n*\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         JE    PUTLINE                 YES, BRANCH                ABL94\n*\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         JE    PUTLINE                 YES, BRANCH                ABL94\n         J     DSNERR1\n*\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         JE    RESETLIN\n*\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         J     PUTLINE                 PRINT IT\n*\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         J     PUTLINE                 DISPLAY MESSAGE\n*\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         JNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n*\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         J     PUTLINE                 DISPLAY MESSAGE              SPG\n*\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         JE    PUTLHPDS\n*\nPUTL2    DS    0H\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n*\nPUTLHPDS DS    0h\n         ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         JZ    NOTPDS                  NO\n*\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n*\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         JNZ   RETURN                  NO, **ATTENTION** EXIT\n*\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\n*\nNOTPDS   DS    0H\nPUTLHCPY DS    0h\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         JZ    PUTLBACK\n*\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK DS    0h\n         BR    R2                      RETURN\n*\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  DS    0h\n         LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n*AF**    BNZ   *+8                        YES, BRANCH\n         JNZ   DCBEXIT1                   YES, BRANCH          AF jan13\n*\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\nDCBEXIT1 DS    0h\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n*AF**    BNZ   *+8                        YES, BRANCH\n         JNZ   DCBEXIT2                   YES, BRANCH          AF jan13\n*\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\nDCBEXIT2 DS    0h\n         BR    R14                         EXIT\n*\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nconst    DC    CL8'LITERALS'                                   AF jan13\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L    moved here          AF jan13\nLSHOWCAT EQU   *-SHOWCATF                     from instr area  AF jan13\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\n*TTRLOC  CAMLST BLOCK,0,0,0                                    #DD09294\nTTRLOC   DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n         DC    A(0)                              PARAMETER THREE\n         DC    A(0)                              PARAMETER FOUR\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nIGWASMSC DC    CL8'IGWASMS'            SMS ATTRIBUTE ROUTINE    SMS0002\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n*\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\n*\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\n         SPACE\nMODLINE  DC    H'204,0'                                           ABL94\n*LANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n*\n* ------------------------------------------------------------------- *\n*        moved DECMASK, HEXTAB and HEADER3 from instructions   AF jan13\n*        and   << EXECUTED INSTRUCTION >>    to LITERALS area  AF jan13\n*\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\n*bdf11*  DC    CL75'EXT#-START/CCHH----S/TRK----END/CCHH----E/TRK----LE\nHEADER3  DC    CL75'EXT#--START TRK----Start----END TRK-----End------LE$\n               NGTH--TYPE-------------------------'               BDF07\n*old*R3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--\n*old*          TYPE-------------------------'                     ABL94\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1   DSCB 1/8   << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2   DSCB 1/8   << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3   DSCB 1/8   << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13  DSCB 3     << EXECUTED INSTRUCTION >>\n* ------------------------------------------------------------------- *\n         EJECT\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\n*        avoid \"ASMA303W Multiple address resolutions\"         AF jan13\n         DROP   R12         using r12,const                    AF jan13\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*        place it here to avoid \"ASMA300W USING overridden\"    AF jan13\n         DROP  R13                   I DON'T WANT IT TO USE 13 AF jan13\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS     upper\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY    savearea\n*AF**    DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         JNE   PDSSAVE\n*\n         BRCT  R2,PDSEND               DECREMENT COUNTER\n*\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         JZ    TESTORG\n*\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         JNE   ERRDAIR\n*\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   ERRDAIR\n*\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   ERRDAIR\n*\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  DS    0h\n         TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         JZ    ERRDSORG\n*\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         JZ    ERROPEN\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         JE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n*\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         JNP   NEXTBLK\n*\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         JNE   PROCENTR\n*\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         J     NEXTBLK\n*\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         JZ    DIRLEN\n*\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         J     NEXTENT\n*\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         J     PDSRTRN\n*\n*        avoid \"ASMA300W USING overridden\"                     AF jan13\n         DROP  R9           USING DAPB08,R9                    AF jan13\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  DS    0h\n         L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         JNE   CTLGERR\n*\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         JNE   DYNALCER\n*\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         J     PDSRTRN\n*\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         J     PDSRTRN\n*\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         JNE   OTHERERR\n*\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         J     PDSRTRN\n*\nOTHERERR DS    0h\n         ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         J     PDSRTRN\n*\n*--------OPEN ERROR\nERROPEN  DS    0h\n         L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         J     PDSRTRN\n*\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         J     PDSRTRN\n*\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n*\nPDSRTRN  $RTRN RC=0\n*  re-establish previous USING                                AF jan13\n         DROP  R1\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nSMS      IKJKEYWD DEFAULT='NOSMS'                               SMS0001\n         IKJNAME 'SMS'                                          SMS0001\n         IKJNAME 'NOSMS'                                        SMS0001\nDATACLAS IKJKEYWD DEFAULT='DATACLASS'                           SMS0002\n         IKJNAME 'DATACLASS'                                    SMS0002\n         IKJNAME 'NODATACLASS'                                  SMS0002\nMGMTCLAS IKJKEYWD DEFAULT='MGMTCLASS'                           SMS0002\n         IKJNAME 'MGMTCLASS',ALIAS='MANAGEMENTCLASS'            SMS0002\n         IKJNAME 'NOMGMTCLASS',ALIAS='NOMANAGEMENTCLASS'        SMS0002\nSTORCLAS IKJKEYWD DEFAULT='STORCLASS'                           SMS0002\n         IKJNAME 'STORCLASS',ALIAS='STORAGECLASS'               SMS0002\n         IKJNAME 'NOSTORCLASS',ALIAS='NOSTORAGECLASS'           SMS0002\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nSIZE     IKJKEYWD DEFAULT='SIZE'                                SMS0001\n         IKJNAME  'SIZE',SUBFLD=SIZSUB                          SMS0001\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\nSIZSUB   IKJSUBF                       ,                        SMS0001\nWORKSIZE IKJIDENT 'WORKSIZE',INTEG,DEFAULT='8192'               SMS0001\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nDSATDCB9 CAMLST SEEK,0,0,0                                        bdf11\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\n*LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR           #DD09294\nLOCBYTTR DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYF DS    0F                      TRACKS PER CYLINDER        BDF07\n         DS    H                       TRACKS PER CYLINDER High   BDF07\nTRKPRCYL DS    H                       TRACKS PER CYLINDER low    BDF07\n*old*CYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nSMSFLD   DS    A                       ADDR OF SMS FIELD        SMS0001\nDATACFLD DS    A                       ADDR OF DATACLAS FIELD   SMS0002\nMGMTCFLD DS    A                       ADDR OF MGMTCLAS FIELD   SMS0002\nSTORCFLD DS    A                       ADDR OF STORCLAS FIELD   SMS0002\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL250                   OUTPUT LINE             Af jan13\n**TLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL7,CL3                 5 -> 7                     BDF07\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL7,CL3                 5 -> 7                     BDF07\nOL@LNTH  DS    CL7,CL2                 5 -> 7                     BDF07\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nTRKS#    DS    F                       calculation field 4 byte   bdf11\nTRKCYL   DS    F                       calculation field 4 byte   bdf11\nFULL     DS    0F                      calculation field 4 byte   BDF07\n         DS    H                                                  BDF07\nHALF     DS    H                       calculation field 2 byte   BDF07\n*old*HALFDS    H                       HALFWORD ALIGNED WORK AREA\nNEXTFMT3 DS    F                       flag for FMT-3 chain       bdf11\nDS3LEFT  DS    H                       num of DS3 ptr in DS9 left bdf11\nTRKFRST  DS    F                       trk position extent begin  BDF07\nTRKLAST  DS    F                       trk position extent end    BDF07\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    CL(DS3LEN)              FORMAT 3 DSCB (ADD EXTENTS)bdf11\n*SATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)bdf11\nDS9      EQU   *                       Format 9 DSCB              bdf11\n         IECSDSL1 (9)                  Format 9 DSCB              bdf11\n*                                                                 bdf11\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\n*\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\n*\nBLANKS   DS    CL250                   BLANK AREA              AF jan13\n**ANKS   DS    CL200                   BLANK AREA               SMS0002\nSLASHS   DS    CL100                   BLANK AREA               SMS0002\n         SPACE\n****************************************************************SMS0002\n*        IGWASMS FIELDS                                               *\n****************************************************************SMS0002\n         SPACE\nIGWRC    DS    F                       RC FROM IGWASMS          SMS0002\nIGWREAS  DS    F                       REASON CODE FROM IGWASMS SMS0002\nIGWPROB  DS    2F                      PROB DETERMINATION INFO  SMS0002\nIGWLEN   DS    F                       LENGTH OF DATA SET NAME  SMS0002\nIGWDSN   DS    A                       POINTER TO DSN           SMS0002\nIGWSMS   EQU   *                                                SMS0002\nIGWSTORC DS    CL30                    STORAGE CLASS OR BLANK   SMS0002\nIGWMGMTC DS    CL30                    MANAGMENT CLASS OR BLANK SMS0002\nIGWDATAC DS    CL30                    DATA CLASS OR BLANK      SMS0002\nIGWTYPE  DS    F                       DATA SET TYPE            SMS0002+\n                                       1=PDS/E (LIBRARY)        SMS0002+\n                                       0=OTHER                  SMS0002\nCALL_L   CALL  ,(,,,,,,),MF=L          LIST FORM OF CALL        SMS0002\nIGWASMSV DS    V(IGWASMSV)             LOAD'ED ADDR OF IGWASMS  SMS0002\n$SMSAVE  DS    A                       $SMS RETURN ADDRESS      SMS0002\nSAVER2   DS    F                       SAVE AREA FOR R2            UID8\nSAVER7   DS    F                       SAVE AREA FOR R7         SMS0003\nSAVER8   DS    F                       SAVE AREA FOR R8         SMS0003\nSAVER10  DS    F                       SAVE AREA FOR R10        SMS0003\nBASER3   DS    F                       SAVE AREA FOR 3RD BASE   SMS0003\n         DS    0D\n*------------*\n         AIF   ('&DEBUG' NE 'ON').NODEBUG0\n$REGS    DS    0F                              SAVE REGISTERS for debug\n$R00     DS    F                                                  debug\n$R01     DS    F                                                  debug\n$R02     DS    F                                                  debug\n$R03     DS    F                                                  debug\n$R04     DS    F                                                  debug\n$R05     DS    F                                                  debug\n$R06     DS    F                                                  debug\n$R07     DS    F                                                  debug\n$R08     DS    F                                                  debug\n$R09     DS    F                                                  debug\n$R10     DS    F                                                  debug\n$R11     DS    F                                                  debug\n$R12     DS    F                                                  debug\n$R13     DS    F                                                  debug\n$R14     DS    F                                                  debug\n$R15     DS    F                                                  debug\n$RLEN    EQU   *-$REGS                                            debug\nOUTDEBUG DS    CL100                   OUTPUT LINE for debug      debug\n.NODEBUG0 ANOP\n*------------*\n         PRINT ON\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n*                                                                 bdf11\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSATNEW$": {"ttr": 8195, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00#\\x01\\x00\\x04\\x8f\\x01\\x175\\x1f\\t \\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2017-12-17T09:20:23", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB          (SYS1.MACLIB)\n//         DD DISP=SHR,DSN=SYS1.MODGEN          (SYS1.MODGEN)\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE296\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE296(DSATNEW)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n SETSSI  CB495296\n NAME    DSAT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSATNEW#": {"ttr": 8197, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00Q\\x01\\x013\\x0f\\x01\\x11#O\\x15)\\x00&\\x00\"\\x00\\x00\\xc6\\xd6\\xd9`\\xc5\\xc1\\xe5@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2001-11-26T00:00:00", "modifydate": "2011-08-22T15:29:51", "lines": 38, "newlines": 34, "modlines": 0, "user": "FOR-EAV"}, "text": "//_jobnam_ JOB ,'DSAT : ASM/LNK',MSGCLASS=T,CLASS=S,\n//             REGION=256M,NOTIFY=&SYSUID\n//***---------------------------------------------------------------***\n//*   $DSAT    - assembly / link DSAT module                          *\n//***---------------------------------------------------------------***\n//*\n//*  LIMITS IN ICF CATALOGS:\n//*\n//*   IF GDG OPTION IS USED, ONLY THE GDG BASE NAME IS DISPLAYED\n//*   WITH THE MESSAGE ' GDG -- IN ICF CATALOG'\n//*\n//ASM1    EXEC PGM=ASMA90,REGION=2048K,\n//             PARM=('NODECK,OBJECT,NORLD,RENT,TERM,XREF(SHORT)')\n//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2    DD UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPRINT  DD SYSOUT=*\n//SYSTERM   DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//SYSIN     DD DISP=SHR,DSN=_hlq_.MVS.DSAT.SOURCE(DSAT)\n//*\n//LINK    EXEC PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSPRINT  DD SYSOUT=*\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLMOD   DD DISP=SHR,DSN=_hlq_.LOADLIB\n//SYSUT1    DD UNIT=SYSDA,SPACE=(TRK,(5,5))\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n SETSSI  CB479BDF\n ENTRY   DSAT\n NAME    DSAT(R)\n/*\n//*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DSATNEW0": {"ttr": 8199, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x01\\x11$\\x0f\\x01\\x11$\\x0f\\x19P\\x13\\xbd\\x13\\xbd\\x00\\x00\\xc6\\xd6\\xd9`\\xc5\\xc1\\xe5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-08-28T00:00:00", "modifydate": "2011-08-28T19:50:32", "lines": 5053, "newlines": 5053, "modlines": 0, "user": "FOR-EAV"}, "text": "         LCLC  &PGM                      PROGRAM NAME           SMS0003\n         LCLC  &FMID,&PTF,&VER           VERSION/PTF LEVEL      SMS0003\n*\n&PGM     SETC  'DSAT'                                           SMS0003\n&FMID    SETC  'PDS8600'                                        SMS0003\n&PTF     SETC  '       '                                        SMS0003\n&VER     SETC  '&FMID &PTF'                                     SMS0003\n*MODIFIED BY EDS -- (NOVEMBER 2005) -- ADD SMS SUPPORT\n*ORIGINAL SOURCE -- CBT439.FILE296  (NOVEMBER 2001)\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*  BDF modification :                                                 *\n*  28.08.2011 - A.FREYBIER                                       bdf11*\n*               introduce R10 as temporary BaseReg.              bdf11*\n*               rebuild space calculation for                    bdf11*\n*                  Volumes > 65520 Cyls (EAV).                   bdf11*\n*               Many thanks to John Kalinich, who helped         bdf11*\n*                 me with debugging                              bdf11*\n*               Special thanks to the author of DISKMAP(file792) bdf11*\n*                 KEITH COWDEN <cowdenkb@sbcglobal.net>.         bdf11*\n*                 The DUMP option helped me to understand        bdf11*\n*                 the new DSCB structures.                       bdf11*\n*                                                                     *\n*  CSC MODIFICATION :                                                 *\n*  29.07.2010 - J.KALINICH                                    DRK JUL10\n*               MARK EXTENDED FORMAT VSAM DATASETS                    *\n*                                                                     *\n*  21.11.2009 - D.DALBY                                        #DD09294\n*               IGNORE \"CAMLST BLOCK\" AS IBM DROPPED SUPPORT.         *\n*               REPLACE WITH PRE-ASSEMBLED CAMLST BLOCK MACROS.       *\n*                                                                     *\n*  BDF modification :                                                 *\n*  21.02.2008 - A.FREYBIER                                       BDF08*\n*               correction for 3 byte extent count               BDF08*\n*  11.05.2007 - A.FREYBIER                                       BDF07*\n*               track calculation corrected for                  BDF07*\n*               extent location > CYL 32765 ( 2 byte )           BDF07*\n*               track/dsn > 99999 possible with new DASD models  BDF07*\n*               and extended adressability (display field length)BDF07*\n*  30.04.2003 - A.FREYBIER                                            *\n*               MORE THAN 9999 DATASETS POSSIBLE |                    *\n*  29.11.2001 - A.FREYBIER                                            *\n*               INCREASE GETMAIN AREA FOR MORE DATASETS               *\n*                                                                     *\n*  for previous changes search for 'UPDATE LOG' below                 *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\n         TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                 14. SYSTEM MANAGED DATA SET FLAG             SMS0001*\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   SMS/NOSMS                  SMS0001*\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOSMS                            SMS0001*\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n* with EAV disktype > 65520 cyls                                 bdf11*\n*>dsat / extents                                                      *\n*SERIAL   ALLOC    FREE EXT  DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAM *\n*DB6117    3000           3   AMX  U     4096     0 08/17/2011 VBDFS0 *\n*    EXT#--START TRK----Start----END TRK-----End------LENGTH--TYPE--  *\n*      0   000C441:0   753615   000C472:E   754364       750  CYL, DAT*\n*      1   000C4A5:0   755115   000C508:E   756614      1500  CYL, DAT*\n*      2   000C53B:0   757365   000C56C:E   758114       750  CYL, DAT*\n****                                                                  *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*SMS0001                                                              *\n*SMS0001          SMS/NOSMS                                           *\n*SMS0001                      SPECIFIES WHETHER OR NOT THE SMS DATA   *\n*SMS0001                      SET FLAG SHOULD BE DISPLAYED.  SMS      *\n*SMS0001                      MANAGED DATA SETS ARE INDICATED BY 'YES'*\n*SMS0001                      AND NON-SMS MANAGED DATA SETS BY 'NO.'  *\n*SMS0001                      ADDITIONALLY, DATA SETS WITH A BLOCK    *\n*SMS0001                      SIZE DETERMINED BY THE SYSTEM (SDB) ARE *\n*SMS0001                      INDICATED WITH AN ASTERISK NEXT TO THE  *\n*SMS0001                      BLOCK SIZE.                             *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING  (IECSDSL1)          *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING  (IECSDSL1)          *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*        SHOWCAT                                                      *\n*        CVT                                                  HD JAN99*\n*        IEFUCBOB                                             HD JAN99*\n*        IOCINFO                                              HD JAN99*\n*        UCBSCAN                                              HD JAN99*\n*        LOAD                                                  SMS0002*\n*        IECSDSL1          DSCB dsect                            bdf11*\n*        TRKADDR           convert CCCCcccH values from DSCB     bdf11*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n*\n*  11/15/05  ADDED SMS KEYWORD.                        SMS0001      JCG\n*            ADDED SIZE KEYWORD WITH DEFAULT OF 8192 TO SPECIFY A\n*            LARGER SVC26 WORKAREA SIZE.  LOGIC TO OBTAIN A LARGER\n*            WORKAREA IS NOT WORKING SO WE'LL PASS THE BUCK TO THE\n*            USER.  MAXIMUM VALUE IS 65535.\n*            UPDATED SECONDARY SPACE PROCESSING TO DISPLAY SECONDARY\n*            AMOUNTS OF BYTES, KBYTES, MBYTES, OR GBYTES.\n*            ADDED PDS/E DETECTION AND DISPLAY DSORG OF PE IF PDSE\n*            FLAG IS SET.\n*            REMOVED INTERNAL FORMAT-1 DSCB MACRO AND REPLACED WITH THE\n*            REAL DEAL.  A COUPLE OF LABELS HAD TO BE MODIFIED TO\n*            USE THE PROPER FIELD NAME (NOEPV).\n*  11/15/05  ADDED DATACLAS, MGMTCLAS, AND STORCLASS     SMS0002    JCG\n*            KEYWORDS TO DISPLAY SMS ATTRIBUTES FOR THE DATA SET.\n*            THESE KEYWORDS ARE VALID ONLY IF 'SMS' IS ALSO SPECIFIED\n*            OR DEFAULTED.                               PDS1122\n*  11/15/05  MODIFIED CODE BECAUSE WITH THE ADDITION     SMS0003    JCG\n*            OF SMS0001 AND SMS0002 WE BLEW A BASE REGISTER. THE CODE\n*            WAS CHANGED WITH BRUT FORCE BY ESTABLISHING A NEW BASE\n*            REGISTER AROUND THE LABELS THAT WERE NOT ADDRESSABLE.\n*            SEARCHES FOR BASE0? WILL GO TO THE LOCATIONS CHANGED.\n*  05/11/07  modified trk calc for extent above cyl 32765         BDF07\n*  02/21/08  modified extent count > 99                           BDF08\n*  07/26/10  ADDED RECOGNITION OF HFS DATASETS                 @KLS0710\n*  07/29/10  MARK EXTENDED FORMAT VSAM DATASETS               DRK JUL10\n*  08/18/11  modified for EAV, FMT-8 and FMT-9 DSCB               BDF11\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         IECSDSL1 (1)                                           SMS0001\n         MEXIT                                                  SMS0001\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*  THIS CODE SEEMS NOT TO BE USED. ONLY ACTIVATE ON DOWN-LEVEL SYSTEMS.\n*    THE REAL CODE IS FROM MACRO IECSDSL1 (1) ABOVE.\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\n**1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NOEPV DS    X                        NUMBER OF EXTENTS       SMS0001\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - BELOW\nDS1SMSDS EQU   X'80'  1... ....    SYSTEM MANAGED DATA SET\nDS1SMSUC EQU   X'40'  .1.. ....    NO BCS ENTRY EXISTS FOR DATA SET\nDS1REBLK EQU   X'20'  ..1. ....    SDB AND D.S. MAY BE REBLOCKED\nDS1CRSDB EQU   X'10'  ...1 ....    DADSM CREATE ORIGINATED BLKSIZE\nDS1PDSE  EQU   X'08'  .... 1...    PDSE DATA SET\nDS1STRP  EQU   X'04'  .... .1..    EXTENDED FORMAT DATA SET\nDS1PDSEX EQU   X'02'  .... ..1.    HFS DATA SET\nDS1DSAE  EQU   X'01'  ........1    EXTENDED ATTRIBUTES EXIST\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - ABOVE\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\nDS3      EQU   *                                                  bdf11\n         IECSDSL1 (3)                                             bdf11\nDS3LEN   EQU   *-DS3                                              bdf11\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   DS3DSCB                                            bdf11\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\n         DS    X          DS3FMTID      already defined           bdf11\n*S3FMTID DS    X          DS3FMTID      DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\n         DS    X          DS3PTRDS      already defined           bdf11\n*S3PTRDS DS    XL5        DS3PTRDS      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '6291456'                                          BDF01\n**&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT   HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n&MINSIZE SETC  '131072'               128K AS A DEFAULT           BDF03\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n         TITLE 'ENTRY CODING'\nDSAT     $ENTER BASE=(R11,R12),                                        +\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n*BDF11*  MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB\n         USING DSAT+4096+4096,R7                                SMS0003\n         ST    R7,SAVER7                                        SMS0003\n         LA    R7,4095(R12)                                     SMS0003\n         LA    R7,1(R7)                                         SMS0003\n         ST    R7,BASER3                   SAVE FOR FUTURE      SMS0003\n*              BASER3 later used with R10 as BaseReg              BDF11\n         LA    R1,4095(R7)                                      SMS0003\n         LA    R1,1(R1)                                         SMS0003\n         ST    R1,BASER4                   SAVE FOR FUTURE      SMS0003\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INIT PTPB     BDF11\n         MVC   DSATHEDR(4),MODLINE\n         DROP  R7                                               SMS0003\n         L     R7,SAVER7                                        SMS0003\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVI   BLANKS,C' '             BLANK LINE               SMS0002\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS                      SMS0002\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         MVI   SLASHS,C'-'             SLASH LINE for debug       bdf11\n         MVC   SLASHS+1(L'SLASHS-1),SLASHS                        bdf11\n         DROP  R8                      DROP IOPL BASE REGISTER\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n         CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         B     AROUNDID                 BRANCH AROUND THE ID    SMS0003\n*\n         DC    AL1(L'CSECTID)           LENGTH OF CSECT ID      SMS0003\nCSECTID  DC    C'&PGM &VER'                                     SMS0003\n$PDSCALL DC    C'PDSCALL'                                         bdf11\n*\nAROUNDID DS    0H                                               SMS0003\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n*--------GET CATALOG WORKAREA\n*SMS0001 L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         L     R2,WORKSIZE             GET PTR TO SIZE          SMS0001\n         L     R2,0(,R2)               GET WORKSIZE             SMS0001\n         C     R2,=F'65535'            Q:IS VALUE VALID?        SMS0001\n         BNH   *+8                     Y-USE IT                 SMS0001\n         L     R2,=F'65535'            N-USE MAX VALUE          SMS0001\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),$PDSCALL      DID PDS CALL US?             bdf11\n*bdf11   CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n         BNE   NOPDSCAL              YES, BRANCH                  bdf11\n*bdf11*  BNE   *+8                   YES, BRANCH\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL EQU   *\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n*\n*bdf11* from now use R10 as BaseReg\n         ST    R10,SAVER10                                        bdf11\n         DROP  R10                                                bdf11\n         USING DSAT+4096+4096,R10                                 bdf11\n         L     R10,BASER3                                         bdf11\n*bdf11*\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         BE    SEARS               YES, CONTINUE               HD JAN99\n*\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3             FMT-3 DSCB\n         STM   R1,R4,DSATDCB3\n         LA    R4,DS9                  FMT-9 DSCB for EAV         bdf11\n         STM   R1,R4,DSATDCB9                                     bdf11\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   ZEROTOT\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    SETUPHDR\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n         BNE   *+8                     YES, BRANCH\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\n*bdf11*\n*\n*        USING DSAT+4096+4096,R8                                  bdf11\n*        ST    R8,SAVER8                                          bdf11\n*        L     R8,BASER3                                          bdf11\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n*        DROP  R8                                                 bdf11\n*        L     R8,SAVER8                                          bdf11\n*bdf11*\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    SETUPHDR\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n*                                                                 bdf11\n*bdf11*  use R10 with CPPL\n         DROP  R10                                                bdf11\n         USING CPPL,R10                 DEFINE CPPL BASE REGISTER bdf11\n         L     R10,SAVER10                                        bdf11\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n*bdf11* from now use R10 as BaseReg\n         DROP  R10                                                bdf11\n         USING DSAT+4096+4096,R10                                 bdf11\n         L     R10,BASER3                                         bdf11\n*bdf11*\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TRYDEV\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TRYDEV\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         BE    TRYDEVIC\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         BE    TRYALLOC\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    TRYDSORG\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(20,R2),=C'  ALLOC    FREE EXT ' SET UP HEADER   BDF08\n         LA    R2,21(R2)               INCREMENT POINTER         BDF08\n*BDF08*  MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n*BDF08*  LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    TRYDSORG\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    TRYPDS\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    TRYDCB\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    TRYCRDAT\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    TRYEXDAT\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    TRYLREFD\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   TRYCCHHR\n         BNE   TRYSMS                                           SMS0001\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\n         SPACE\nTRYSMS   CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   TRYCCHHR                                         SMS0001\n         ST    R2,SMSFLD               SAVE OUTPUT FIELD ADDR   SMS0001\n         MVC   0(4,R2),=C'SMS '        MOVE IN HEADER           SMS0001\n         LA    R2,4(,R2)               INCREMENT POINTER        SMS0001\n         SPACE\n****************************************************************SMS0002\n*        SMS KEYWORD MUST ALSO BE SPECIFIED OR DEFAULTED TO GET THE   *\n*        DATACLAS, MGMTCLAS, AND STORCLAS VALUES.                     *\n****************************************************************SMS0002\n         SPACE\n         XR    R15,R15                 FLAG = 0                 SMS0002\nTRYDATAC CLI   DATACLAS+1,1            TEST FOR DATACLAS        SMS0002\n         BNE   TRYMGMTC                                         SMS0002\n         ST    R2,DATACFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'DATACLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYMGMTC CLI   MGMTCLAS+1,1            TEST FOR MGMTCLAS        SMS0002\n         BNE   TRYSTORC                                         SMS0002\n         ST    R2,MGMTCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'MGMTCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYSTORC CLI   STORCLAS+1,1            TEST FOR STORCLAS        SMS0002\n         BNE   TESTLOAD                                         SMS0002\n         ST    R2,STORCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'STORCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTESTLOAD EQU   *                       SEE IF SMS KEYWORD       SMS0002\n         XC    IGWASMSV,IGWASMSV       CLEAR MODULE ADDRESS     SMS0002\n         LTR   R15,R15                 Q:KEYWORD SPECIFIED?     SMS0002\n         BZ    TRYCCHHR                N-DON'T NEED THIS JUNK   SMS0002\n         SPACE ,                                                SMS0002\n         LA    R15,SMS_A               TO TRICK CALL            SMS0002\n         CALL  (15),(IGWRC,IGWREAS,IGWPROB,IGWLEN,DSNAME,IGWSMS,       +\n               IGWTYPE),                                        SMS0002+\n               MF=(E,CALL_L)                                    SMS0002\n         SPACE\nSMS_A    EQU   *\n         MVI   IGWLEN+3,44             HARD LENGTH OF DSNAME    SMS0002\n         LOAD  EPLOC=IGWASMSC          SMS ATTR ROUTINE         SMS0002\n         ST    R0,IGWASMSV             SAVE ADDRESS             SMS0002\n         SPACE\nTRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    DODSNAME\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         BH    DSNFLDOK\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\n*SMS0002 LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\nDSNFLDOK LA    R1,OUTLINE+L'OUTLINE-44 LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         BE    BUILDDSN\n         BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         BNZ   MOVEREST\n*\n*bdf11*  use R10 with TSO control block                           bdf11\n         DROP  R10                                                bdf11\n         USING CPPL,R10                 DEFINE CPPL BASE REGISTER bdf11\n         L     R10,SAVER10                                        bdf11\n*--------APEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN\n*\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST\n*\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\n*\nGETLEN   DS    0H\n*bdf11*  from now use R10 as BaseReg again\n         DROP  R10                                                bdf11\n         USING DSAT+4096+4096,R10                                 bdf11\n         L     R10,BASER3                                         bdf11\n*bdf11\n         SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n*\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST DS    0H\n*bdf11* from now use R10 as BaseReg again\n         DROP  R10                                                bdf11\n         USING DSAT+4096+4096,R10                                 bdf11\n         L     R10,BASER3                                         bdf11\n*bdf11\n         L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   DS    0H\n         MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         BNZ   COPYSER\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         BNZ   PROCGRP\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   CHECK8\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         BE    OBTAIN1\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         BNE   PROCGRP\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         BE    PROCTTR\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         BE    PROCGRP                    SU 8 NOT INSTALLED\n         B     LOCERROR\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         BNE   CHECK12\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         BNE   PROCGRP\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         BNE   PROCGRP\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BAL   R2,PUTL                 DISPLAY LINE\n         B     ENDGRP\n         SPACE 2\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         BNE   LOCERROR\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   LOCERROR\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND1\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         B     PROCNTRY                LOAD INDEX NAME\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   LOCERROR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         BE    LNKENTRY\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         BE    DSATNEXT\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         BE    DSNOVER5\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         BE    NDXENTRY\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         BNE   DSNENTRY\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         BE    NDXENTRY\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         BZ    PUTGDG\n         BM    GDGEORD\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         B     PUTGDG\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         BNZ   PUTGDG\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BAL   R2,PUTL                 DISPLAY LINE\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         B     FINDEND\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         BZ    ENDLEVEL\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         B     READCTLG\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         BNZ   TESTDONE\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         TM    FLAGS,GDG               TEST FOR GDG\n         BNZ   MTGDG\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         B     PUTEMPTY\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\nPUTEMPTY DS    0H                                               SMS0003\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BAL   R2,PUTL                 DISPLAY MESSAGE\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         BE    ENDGRP\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         BNE   FINDDOT\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         B     PROCNTRY\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   LOCATE2\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1\n         B     LOCERROR\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   DSNMVC\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         B     LDVOLCNT\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         BE    BACKUP\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         BNZ   SAVELEN\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         BNZ   SAVELEN\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         BNE   SAVELEN                 NO, BRANCH                 ABL99\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         BE    PARTIAL\n         CH    R15,=H'40'\n         BNE   LOCERROR\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         B     RETRYLOC\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY LINE                 ABL\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         B     DSATPROC\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         BNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1                 OK, BRANCH\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         BE    GDGMSGL                 YES, BRANCH                  SPG\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         BNE   LOCERROR                NO, BRANCH\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         B     LOCERROR\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\nLSHOWCAT EQU   *-SHOWCATF\nTESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         BZ    ENDGRP\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BAL   R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         B     ENDGRP\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EX    R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         BNE   OBTAIN1\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NEXTSER               YES, IGNORE\n         B     THISVOL\n         SPACE 1\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         BO    ENDGRP2\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE\n         B     ENDGRP2\nTHISVOL  CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         BNH   GETSER\n         LA    R1,20                   SET MAX COUNT\nGETSER   C     R1,=F'1'                TEST VOLUME COUNT\n         BL    BADVOLCT                BAD VOLUME COUNT\n         BE    STOREVCT\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n         BAL   R14,$SMS2               DO DATACLAS, MGMTCLAS,   SMS0002+\n                                       AND STORCLAS             SMS0002\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TESTDEV\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TESTDEV\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         BE    TESTDA\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         BNE   NOTDASD\n         SR    R1,R1                   CLEAR REG 1\n         XC    TRKPRCYF,TRKPRCYF       clear field               BDF07\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE CH    R1,=H'15'               TEST AGAINST MAX\n         BH    NOTDASD\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n*bdf11\n*bdf11   USING DSAT+4096+4096,R8                                  bdf11\n*bdf11   ST    R8,SAVER8                                          bdf11\n*bdf11   L     R8,BASER3                                          bdf11\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n*bdf11   DROP  R8                                                 bdf11\n*bdf11   L     R8,SAVER8                                          bdf11\n*bdf11\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         BNZ   TESTDEV2\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         BNE   NEXTDEV                                         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NOTUP\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         BZ    TESTTYPE\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         B     TESTTYPE\nNOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         B     DSNERR                  ORC04\nTESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         BE    GETFMT1\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n*bdf11\n*bdf11   USING DSAT+4096+4096,R8                                  bdf11\n*bdf11   ST    R8,SAVER8                                          bdf11\n*bdf11   L     R8,BASER3                                          bdf11\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n*bdf11   DROP  R8                                                 bdf11\n*bdf11   L     R8,SAVER8                                          bdf11\n*bdf11\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\n* --------------------------------------------------------------  BDF11\nGETFMT1  DS    0H\n         OBTAIN DSATDCB1,EADSCB=OK     GET FORMAT 1/8 DSCB        BDF11\n*bdf11*  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n*                                                                 BDF11\n* --------------------------------------------------------------  BDF11\n*\n*ETDSCB3 DS    0H\n* --------------------------------------------------------------  BDF11\n*bdf11   NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n*bdf11   BZ    PROCESS\n*\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n*bdf11   LTR   R15,R15                 TEST RETURN CODE\n*bdf11   BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE FMT-1 DSCB                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*bdf11 this label no longer used\n*bdf11*PROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS,COUNT             COUNT THIS DATA SET        bdf11\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    PROCDSRG\n         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n*\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\n*\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    PROCPDS\n         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE\n*\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    PROCDCB\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         BZ    PROCDCB\n         TM    DS1SMSFG,DS1PDSEX       MAKE SURE ITS NOT HFS   @KLS0710\n         BO    PROCDCB                                         @KLS0710\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\n*\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    PROCCRDT\n         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE\n*\nPROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    PROCEXDT\n         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\n*\nPROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    PROCLREF\n         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\n*\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   PROCCHHR\n         BNE   PROCSMS                                          SMS0001\n         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\n*\nPROCSMS  EQU   *                                                SMS0001\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   PROCCHHR                                         SMS0001\n         BAL   R14,$SMS                                         SMS0001\n*\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    PUTLINE\n         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\n*\nPUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE\n*\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BCT   R1,GETSER               LOOP FOR MORE VOLUMES\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         BZ    SAVETOTL\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL STM   R4,R8,TOTLS             STORE TOTALS\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         BE    NOEXTENT                YES, BRANCH                ABL94\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         BZ    NOEXTENT                NO, BRANCH                 ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         BZ    ENDGRP\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         BZ    DSATNEXT                GET NEXT DSNAME\n         B     DSATNXT2                GET NEXT DSNAME\n         SPACE 2\nENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         BZ    ENDGRP2\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         BE    NEXTSER\nENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         LA    R3,0(,R3)\n         LTR   R3,R3                   END OF CHAIN?\n         BNZ   SETUPNXT                NO, BRANCH\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         BE    RETURN\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n*\n*  MORE THAN 9999 DATASETS POSSIBLE |                             BDF03\n**       MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE      BDF03\n**       MVC   5(19,R2),=C'DATA SET DISPLAYED'                    BDF03\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      BDF03\n         MVC   8(19,R2),=C'DATA SET DISPLAYED'  ???               BDF03\n*\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         BH    CNVTALOC\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         BZ    RETURN\n*\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   8(19,R2),=C'DATA SET DISPLAYED'   ??               BDF08\n*old*    MVC   5(19,R2),=C'DATA SET DISPLAYED'\nCNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         BE    DISPLAYT\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n* ---------------------------------------------------------------------\n         LR    R0,R4                   tracks total               BDF07\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        BDF07\n         MVC   0(9,R2),DECNUM+12-9     MOVE INTO MESSAGE          BDF07\n*\n*old*    CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n*old*    MVC   DSATDEC,=X'4020202020202120'\n*old*    ED    DSATDEC,DSATPDEC+4      EDIT\n*old*    MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n*old*------------------------------------------------------------------\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*old*    MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\n         MVC   10(7,R2),DSATDEC+1      MOVE INTO OUTPUT LINE      BDF07\nDISPLAYT BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         BL    BRANCH\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   SLA   R15,2                   MULTIPLY BY 4\n         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\nBRTABLE  B     RC0                                             HD JAN99\n         B     RCTALLOC\n         B     RCTUSED\n         B     RCLALLOC\n         B     RCLUSED\n         B     RCTDIFF\n         B     RCLDIFF\n         B     RCNUM\n         B     RCPREV\n         B     RCDSORG\n         B     RCDIRA\n         B     RCDIRU\n         B     RCENTR\n         B     RCMEMB\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         B     EXIT\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         B     EXIT\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         B     EXIT\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         B     EXIT\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         B     EXIT\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         BNZ   EXIT\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         B     EXIT\n*                                                                 bdf11\n*bdf11*  RCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\nRCPREV   DS    0H                                                 bdf11\n*bdf11*  use R10 with TSO control blocks                          bdf11\n         DROP  R10                     BASER3 no longer used      bdf11\n         USING CPPL,R10                 DEFINE CPPL BASE REGISTER bdf11\n         L     R10,SAVER10                                        bdf11\n         L     R15,CPPLECT             LOAD ECT ADDRESS           bdf11\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         B     EXIT\n*\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         B     EXIT\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         B     EXIT\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         B     EXIT\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         B     EXIT\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         B     EXIT\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         B     EXIT\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         B     EXIT\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         B     EXIT                                            HD JAN99\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         B     EXIT                                            HD JAN99\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         BO    RC8                     YES, RETURN CODE=8      HD JAN99\n         B     EXIT                                            HD JAN99\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    EXIT2\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         LTR   R1,R1                   Q:DID THIS?              SMS0001\n         BZ    EXIT2_A                 N-DON'T TRY TO FREE IT   SMS0001\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\nEXIT2_A  EQU   *                                                SMS0001\n         LR    R15,R3                  RESTORE RETURN CODE\n         $RTRN RENT=DSECTLEN,RC=(R15)\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*bdf11*  from now use R10 as BaseReg again\n         DROP  R10                                                bdf11\n         USING DSAT+4096+4096,R10                                 bdf11\n*        L     R10,BASER3              should be OK from caller   bdf11\n*bdf11\n*--------GET TRACK ALLOCATION\n$ALLOC   DS    0H\n         L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n         ST    R7,NEXTFMT3             clear flag                 bdf11\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\n* process the 3 FMT-1/8 extents                                   bdf11\n         LA    R15,3                   EXTENTS TO PROCESS         bdf11\n         LR    R0,R4                   TOTAL EXTENTS              bdf11\n         SR    R0,R15                  EXTENTS LEFT               bdf11\n         ST    R0,EXTENTLF             SAVE FOR LATER             bdf11\n         CH    R4,=H'03'               CAN WE DO ALL?             bdf11\n         BL    DSATTRKS                YES, BRANCH                bdf11\n*bdf11\n         LH    R4,=H'03'               NO, DO  3 FIRST            bdf11\n* ---------------------------------------------------------------------\n*bdf11   LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n*bdf11   LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n*bdf11   SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n*bdf11   ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n*bdf11   CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n*bdf11   BL    DSATTRKS                YES, BRANCH            ABL NOV92\n*bdf11\n*bdf11   LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\n* ---------------------------------------------------------------------\nDSATTRKS DS    0H\n         EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK                finished - go\n* --------------------------------------------------------------  bdf11\n*        calculate the size of this extent                        bdf11\n* --------------------------------------------------------------  bdf11\n         XC    FULL,FULL               clear field                bdf11\n         XR    R0,R0                   clear register             bdf11\n* --------------------------------------------------------------  bdf11\n*        Check for EAV                                            bdf11\n* --------------------------------------------------------------  bdf11\n         CLI   DS1FMTID,DS8IDC    IS THIS A FMT-8 ?               bdf11\n         BNE   NON_EAV            NO, go for CCHH processing      bdf11\n* --------------------------------------------------------------  bdf11\n*        extent table in new form CCCCcccH                        bdf11\n* --------------------------------------------------------------  bdf11\n         LA    R8,2(R7)                  point to extent-start    bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1  get cyl                  bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1  get trk                  bdf11\n         ST    R1,TRKS#                  save start_TRK           bdf11\n*                                                                 bdf11\n         LA    R8,6(R7)                  point to extent-end      bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1  get cyl                  bdf11\n         S     R1,FULL                 subtract start from end    bdf11\n         XR    R0,R0                   clear register             bdf11\n         M     R0,TRKPRCYF             multiply by TRK per CYL    bdf11\n         ST    R1,TRKCYL                 save track# from cyls    bdf11\n*                                                                 bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1  get trk                  bdf11\n         S     R1,TRKS#                subtract start from end    bdf11\n         LA    R1,1(R1)                add 1 TRK                  bdf11\n         A     R1,TRKCYL               add track# to cyls         bdf11\n         AR    R6,R1                   accumulate total           bdf11\n         B     NEXT_EXT                                           bdf11\n*                                                                 bdf11\n* --------------------------------------------------------------  bdf11\n*        This routine is for NON-EAV DASD,                        bdf11\n*        extent table in old form CCCCHHHH                        bdf11\n* --------------------------------------------------------------  bdf11\nNON_EAV  DS    0H                                                 bdf11\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         L     R1,FULL                                            BDF07\n*BDF07*  LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         S     R1,FULL                 SUBTRACT STARTING FROM END BDF07\n         M     R0,TRKPRCYF             MULTIPLY BY TRACKS PER CYL BDF07\n*BDF07*  SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n*BDF07*  MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         A     R1,FULL                 ADD TO TRACK COUNT         BDF07\n*BDF07*  AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         S     R1,FULL                 SUBTRACT FROM TRACK COUNT  BDF07\n*BDF07*  SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,1(R6)                ADD 1 TRACK                BDF07\n*BDF07*  LA    R6,R1(R6)               ADD 1 TRACK\n*\n* --------------------------------------------------------------  bdf11\nNEXT_EXT DS    0H                                                 bdf11\n* --------------------------------------------------------------  bdf11\n         LA    R5,4(R5)                pointer to next extent\n         BCT   R4,DSATTRKS             decrement extent count\n*                                                                 bdf11\n         L     R4,EXTENTLF             number extents left        bdf11\n         CH    R4,=H'0'                Q: are ther any ?          bdf11\n         BNH   DSATUTRK                NO, finished               bdf11\n*                                                                 bdf11\n         NC    NEXTFMT3,NEXTFMT3       Q:is there a FMT-3 chain ? bdf11\n         BNZ   DSCB3#15                YES, go to get DSCB-3      bdf11\n*                                                                 bdf11\n         CLI   DS1FMTID,DS8IDC         Q:is this a FMT-8 ?        bdf11\n         BNE   DSCB3#10                NO, go for FMT-3 DSCB      bdf11\n* --------------------------------------------------------------  bdf11\n*        a FMT-8 DS1PTRDS points-to the first FMT-9               bdf11\n* --------------------------------------------------------------  bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-9 ptr ?   bdf11\n         BNZ   DSCB9#10                YES, go to get it          bdf11\n         ABEND 4016               *STOP* IF FMT-8 BUT NO FMT-9    bdf11\n*                                                                 bdf11\nDSCB9#10 DS    0H                                                 bdf11\n         OBTAIN DSATDCB9,EADSCB=OK     get format 9 DSCB          bdf11\n         LTR   R15,R15                 TEST RETURN CODE           bdf11\n         BNZ   DSNERR                                             bdf11\n*                                                                 bdf11\n         LA    R4,DS9NUMF3             get num of FMT-3 pointers  bdf11\n         STH   R4,DS3LEFT              save for later use         bdf11\n         LA    R5,DS9F3P               first FMT-3 pointer        bdf11\n         NC    0(5,R5),0(R5)           Q: is it valid CCHHR?      bdf11\n         BZ    DSATUTRK                NO - finished              bdf11\n*                                                                 bdf11\n         ST    R5,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         B     DSCB3#20                go for DSCB3 processing    bdf11\n*                                                                 bdf11\nDSCB3#10 DS    0H                                                 bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-3 ptr ?   bdf11\n         BZ    DSATUTRK                NO, finished               bdf11\n*                                                                 bdf11\n         LA    R0,DS1PTRDS             pointer to FMT-3 DSCB      bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         B     DSCB3#20                go for DSCB3 processing    bdf11\n*                                                                 bdf11\n*        process FMT-3 DSCB with 13 extents                       bdf11\nDSCB3#15 DS    0H                                                 bdf11\n*bdf11   LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n*                                                                 bdf11\nDSCB3#20 DS    0H                                                 bdf11\n         OBTAIN DSATDCB3,EADSCB=OK     GET THE FORMAT 3 DSCB      bdf11\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         ST    R0,NEXTFMT3             save as Flag               bdf11\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n*\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS         bdf11\n         LR    R0,R4                   TOTAL EXTENTS              bdf11\n         SR    R0,R15                  EXTENTS LEFT               bdf11\n         ST    R0,EXTENTLF             SAVE FOR LATER             bdf11\n         LA    R5,3*4                  point to FMT-3 execs       bdf11\n         CH    R4,=H'13'               CAN WE DO ALL?             bdf11\n         BL    DSATTRKS                YES, BRANCH                bdf11\n*                                                                 bdf11\n         LH    R4,=H'13'               NO, DO 13 NEXT             bdf11\n         B     DSATTRKS                CONTINUE               ABL NOV92\n*\n* --------------------------------------------------------------  bdf11\n*        DCSBs processed, show EXTENT values                      bdf11\n* --------------------------------------------------------------  bdf11\nDSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO MESSAGE          BDF07\n*BDF07*  MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         BZ    DSATXNTS\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   8(7,R2),DSATDEC+1       MOVE INTO MESSAGE          BDF07\n*BDF07*  MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n*SMS0001 IC    R1,DS1NOPEV             LOAD EXTENTS\n         IC    R1,DS1NOEPV             LOAD EXTENTS             SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   16(3,R2),DSATDEC+5      MOVE INTO MESSAGE          BDF08\n*BDF08*  MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n*BDF08*  CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n*BDF08*  BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n*BDF08*  MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    NOSECOND\n*--------secondary space (amount and allocation unit)\n         LA    R2,21(R2)               INCREMENT FIELD POINTER    bdf11\n*bdf11   LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCAL1,DS1EXT         Q:EXTEND 2NDARY SPACE?   SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         TM    DS1SCEXT,DS1SCAVB       Q:AVERAGE BLOCK DATA SET?SMS0001\n         BNO   TRYMB                   N-TRY MB TEST            SMS0001\n         XR    R1,R1                   Y-DISPLAY BLKSZ AND AMT  SMS0001\n         ICM   R1,B'0011',DS1SCXTV     COPY TO ALIGNED (F) WOR  SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   5(5,R2),DSATDEC+3       COPY ORIGINAL AVGBLKSZ   SMS0001\n         B     SECAMT                  GET # OF BLOCKS          SMS0001\nTRYMB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCMB        Q:AVGREC=M DATA SET?     SMS0001\n         BNO   TRYKB                   N-TRY KB TEST            SMS0001\n         MVI   9(R2),C'M'              INDICATE MEGABYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYKB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCKB        Q:AVGREC=K DATA SET?     SMS0001\n         BNO   TRYB                    N-TRY B TEST             SMS0001\n         MVI   9(R2),C'K'              INDICATE KILOBYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYB     EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCUB        Q:AVGREC=U DATA SET?     SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         MVI   9(R2),C'B'              INDICATE BYTES           SMS0001\n*        B     SECBYTES                CLEAR                    SMS0001\nSECBYTES EQU   *                       GET NUMBER OF BYTES      SMS0001\n         XR    R1,R1                   CLEAR FOR INSERT         SMS0001\n         ICM   R1,B'0011',DS1SCXTV     SEC SPACE EXTENSION AMT  SMS0001\n         TM    DS1SCXTF,DS1SCCP1       Q:ADJUSTED BY 256?       SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,8                    Y-MULTIPLY BY 256        SMS0001\n         TM    DS1SCXTF,DS1SCCP2       Q:ADJUSTED BY 65536?     SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,16                   Y-MULTIPLY TO 65536      SMS0001\n         SPACE ,                                                SMS0001\n         CLI   9(R2),C'B'              Q:SPACE IN BYTES?        SMS0001\n         BNE   TESTKB                  N-SEE IF IN K            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'K'              Y-CHANGE TO KB           SMS0001\n         SRL   R1,10                   BYTES/1024               SMS0001\nTESTKB   EQU   *                                                SMS0001\n         CLI   9(R2),C'K'              Q:SPACE IN KBYTES?       SMS0001\n         BNE   TESTMB                  N-SEE IF IN M            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'M'              Y-CHANGE TO MB           SMS0001\n         SRL   R1,10                   KBYTES/1024              SMS0001\nTESTMB   EQU   *                                                SMS0001\n         CLI   9(R2),C'M'              Q:SPACE IN MBYTES?       SMS0001\n         BNE   DOSEC                   N-JUST DO IT             SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'G'              Y-CHANGE TO GB           SMS0001\n         SRL   R1,10                   MBYTES/1024              SMS0001\nDOSEC    EQU   *                                                SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   1(8,R2),DSATDEC                                  SMS0001\n         BR    R14                     2NDARY SPACE COMPLETE    SMS0001\nNOAVGREC EQU   *                                                SMS0001\n         TM    DS1SCALO,DS1CYL         TEST ALLOCATION TYPE       bdf11\n*bdf11   TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         BM    TRKALLOC\n         BO    CYLALLOC\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         B     SECAMT\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         B     SECAMT\n*\nTRKALLOC DS    0H                                                 bdf11\n         TM    DS1SCALO,DS1TRK         TEST FOR TRACKS OR BLOCKS  bdf11\n*bdf11OC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         BZ    BLKALLOC\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         B     SECAMT\n*\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n         LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND BR    R14                     RETURN\n*\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n* --------------------------------------------------------------  BDF11\n***  debug display begin\n*        STM   R0,R15,$REGS                                       BDF11\n*        BAL   R2,PUTL                 DISPLAY OUTLINE            BDF11\n*        MVC   OUTDEBUG,SLASHS                                    BDF11\n*        MVC   OUTDEBUG+5(4),$R01                                 BDF11\n*        MVC   OUTDEBUG+5(8),UPTPREFX                             BDF11\n*        MVC   OUTLINE,OUTDEBUG                                   BDF11\n*        BAL   R2,PUTL                 DISPLAY THE LINE           BDF11\n*        MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          BDF11\n*        LM    R0,R15,$REGS                                       BDF11\n***  debug display end\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS DS    0H\n         ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n         ST    R5,NEXTFMT3             clear flag                 bdf11\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n*\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n*\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n*\n* --------------------------------------------------------------  bdf11\n*        Display header line                                      bdf11\n* --------------------------------------------------------------  bdf11\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n*bdf11*  MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n*\n*        process the 3 extents in FMT-1/8 DSCB                    bdf11\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n*\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 DS    0H\n         EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n*bdf11*  MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'             Q: valid extent flags?     ABL94\n         BE    $ALLEX99                No: finished - go          ABL94\n*\n* ----------------------------------------------------------------\n*        put DSN attributes to output field\n* ----------------------------------------------------------------\n*   R1 needed for calculation, R7 points to Extent entry in DSCB  BDF07\n*BDF07*  LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         BNO   NOT$CYL                  NO - SKIP                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         B     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  DS    0H                                                 ABL94\n         TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         BZ    YES$CYL                  NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  DS    0H                                                 ABL94\n         TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         BZ    $ALLEX13                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX13 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         BZ    $ALLEX14                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX14 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         BZ    $ALLEX15                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX15 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         BZ    $ALLEX16                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*--- EXTENT SEQUENCE NUMBER                                       ABL94\n$ALLEX16 DS    0H                                                 BDF07\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R7)                GET EXTENT SEQ NUMBER     BDF07\n*BDF07*  IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n* --------------------------------------------------------------  bdf11\n         XC    FULL,FULL               clear field                bdf11\n         XR    R0,R0                   clear register             bdf11\n* --------------------------------------------------------------  bdf11\n*        Check for EAV                                            bdf11\n* --------------------------------------------------------------  bdf11\n         CLI   DS1FMTID,DS8IDC    IS THIS A FMT-8 ?               bdf11\n         BNE   $ALLEX20           NO, go for CCHH processing      bdf11\n* --------------------------------------------------------------  bdf11\n*        extent table in new form CCCCcccH                        bdf11\n* --------------------------------------------------------------  bdf11\n*        EXTENT start address in hex                              bdf11\n         LA    R8,2(R7)                  point to extent-start    bdf11\n         TRKADDR NORMALIZE,(R8),REG=R1   get cccCCCCH             bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         UNPK  OL@START+1(8+1),FULL+1                             bdf11\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  bdf11\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             bdf11\n         MVC   OL@START(7),OL@START+1   SHIFT OVER cccCCCC        bdf11\n         MVI   OL@START+7,C':'          PUT IN SEPARATOR          bdf11\n*                                                                 bdf11\n*        EXTENT start address in decimal                          bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1 get cyl                   bdf11\n         XR    R0,R0                    clear register            bdf11\n         M     R0,TRKPRCYF              multiply by TRK per CYL   bdf11\n         ST    R1,TRKCYL                save track# from cyls     bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1 get trk                   bdf11\n         A     R1,TRKCYL                add track# to cyls        bdf11\n         ST    R1,TRKS#                 save TRK_count            bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BAL   R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@STRK,DECNUM+12-7      get 7 digit number        bdf11\n*                                                                 bdf11\n*        EXTENT  end  address in hex                              bdf11\n         LA    R8,6(R7)                  point to extent-End      bdf11\n         TRKADDR NORMALIZE,(R8),REG=R1   get cccCCCCH             bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         UNPK  OL@END+1(8+1),FULL+1                               bdf11\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  bdf11\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             bdf11\n         MVC   OL@END(7),OL@END+1       SHIFT OVER cccCCCC        bdf11\n         MVI   OL@END+7,C':'            PUT IN SEPARATOR          bdf11\n*                                                                 bdf11\n*        EXTENT  end  address in decimal                          bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1 get cyl                   bdf11\n         XR    R0,R0                    clear register            bdf11\n         M     R0,TRKPRCYF              multiply by TRK per CYL   bdf11\n         ST    R1,TRKCYL                save track# of cyls       bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1 get trk                   bdf11\n         A     R1,TRKCYL                add tracks to cyls        bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BAL   R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@ETRK,DECNUM+12-7      get 7 digit number        bdf11\n*                                                                 bdf11\n*        EXTENT  length in decimal                                bdf11\n         S     R1,TRKS#                 subtract start from end   bdf11\n         LA    R1,1(R1)                 add 1 TRK                 bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BAL   R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@LNTH,DECNUM+12-7      get 7 digit number        bdf11\n* ---------------------------------------------------------------------\n*                                                                 bdf11\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n         B     $ALLEX25           go for next extent              bdf11\n*\n* --------------------------------------------------------------  bdf11\n*        This routine is for NON-EAV DASD,                        bdf11\n*        extent table in old form CCCCHHHH                        bdf11\n* --------------------------------------------------------------  bdf11\n$ALLEX20 DS    0H\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R7)  CCHH EXTENT START       BDF07\n*BDF07*  UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         XR    R0,R0                    clear                     BDF07\n         XR    R1,R1                    clear                     BDF07\n         XC    FULL,FULL                clear field               BDF07\n*BDF07*  LH    R0,2(,R1)                GET START CC              ABL94\n*BDF07*  MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n*BDF07*  AH    R0,4(,R1)                ADD START HH              ABL94\n         MVC   HALF(2),2(R7)           LOAD STARTING CYL NUMBER   BDF07\n         L     R1,FULL                   for calculation          BDF07\n         M     R0,TRKPRCYF              calc start CC in trks     BDF07\n         MVC   HALF(2),4(R7)            get start HH              BDF07\n         A     R1,FULL                  add start HH              BDF07\n         LR    R0,R1                    parm expected in R0       BDF07\n         ST    R0,TRKFRST               save for later use        BDF07\n*---\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@STRK,DECNUM+12-7      GET 7 DIGIT NUMBER        BDF07\n*BDF07*  MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R7)  CCHH EXTENT END           BDF07\n*BDF07*  UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         XR    R0,R0                    clear                     BDF07\n         XR    R1,R1                    clear                     BDF07\n         XC    FULL,FULL                clear field               BDF07\n*BDF07*  LH    R0,6(,R1)                GET END CC                ABL94\n*BDF07*  MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n*BDF07*  AH    R0,8(,R1)                ADD END HH                ABL94\n         MVC   HALF(2),6(R7)            get ending CYL number     BDF07\n         L     R1,FULL                   for calculation          BDF07\n         M     R0,TRKPRCYF              calc end   CC in trks     BDF07\n         MVC   HALF(2),8(R7)            get end   HH              BDF07\n         A     R1,FULL                  add end   HH              BDF07\n         LR    R0,R1                    parm expected in R0       BDF07\n         ST    R0,TRKLAST               save for later            BDF07\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@ETRK,DECNUM+12-7      GET 7 DIGIT NUMBER        BDF07\n*BDF07*  MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         L     R1,TRKLAST                                         BDF07\n         L     R0,TRKFRST                                         BDF07\n         SR    R1,R0                    calc extent size          BDF07\n         LA    R0,1(R1)                 add 1 track               BDF07\n*BDF07*  LH    R15,6(,R1)               GET END CC                ABL94\n*BDF07*  SH    R15,2(,R1)               SUB START CC              ABL94\n*BDF07*  MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n*BDF07*  AH    R15,8(,R1)               ADD END HH                ABL94\n*BDF07*  SH    R15,4(,R1)               SUB START HH              ABL94\n*BDF07*  LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n*---\n***\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@LNTH,DECNUM+12-7     GET 7 DIGIT NUMBER OF TRKS BDF07\n*BDF07*  MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n* --------------------------------------------------------------  bdf11\n$ALLEX25 DS    0H\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n*\n*bdf11*  NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n*bdf11*  BZ    $ALLEX20                NO, DONE                   ABL94\n*\n*bdf11*  LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        bdf11\n         CH    R4,=H'0'                Q: are ther any ?          bdf11\n         BNH   $ALLEX99                NO, finished               bdf11\n*                                                                 bdf11\n         NC    NEXTFMT3,NEXTFMT3       Q:is there a FMT-3 chain ? bdf11\n         BNZ   $ALLEX80                YES, go to get next DSCB-3 bdf11\n*                                                                 bdf11\n         CLI   DS1FMTID,DS8IDC         Q:is this a FMT-8 ?        bdf11\n         BNE   $ALLEX75                NO, go for FMT-3 DSCB      bdf11\n* --------------------------------------------------------------  bdf11\n*        a FMT-8 DS1PTRDS points-to the first FMT-9               bdf11\n* --------------------------------------------------------------  bdf11\n$ALLEX70 DS    0H                                                 bdf11\n         OBTAIN DSATDCB9,EADSCB=OK     get format 9 DSCB          bdf11\n         LTR   R15,R15                 TEST RETURN CODE           bdf11\n         BNZ   DSNERR                                             bdf11\n*                                                                 bdf11\n         LA    R4,DS9NUMF3             get num of FMT-3 pointers  bdf11\n         STH   R4,DS3LEFT              save for later use         bdf11\n         LA    R5,DS9F3P               first FMT-3 pointer        bdf11\n         NC    0(5,R5),0(R5)           Q: is it valid CCHHR?      bdf11\n         BZ    $ALLEX99                NO - finished\n*                                                                 bdf11\n         ST    R5,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         B     $ALLEX85                go for DSCB3 processing    bdf11\n*                                                                 bdf11\n$ALLEX75 DS    0H                                                 bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-3 ptr ?   bdf11\n         BZ    $ALLEX99                NO, finished               bdf11\n*                                                                 bdf11\n         LA    R0,DS1PTRDS             pointer to FMT-3 DSCB      bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         B     $ALLEX85                go for DSCB3 processing    bdf11\n*        process FMT-3 DSCB with 13 extents                       bdf11\n$ALLEX80 DS    0H\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n*\n$ALLEX85 DS    0H\n         OBTAIN DSATDCB3,EADSCB=OK     GET THE FORMAT 3 DSCB      bdf11\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n*bdf11*  LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB 3     bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         ST    R0,NEXTFMT3             save as Flag               bdf11\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         BNZ   DSNERR                  NO, SOME ERROR             ABL94\n*\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         bdf11\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n*\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         B     $ALLEX10                CONTINUE                   ABL94\n*\n*----------------------------------------------------------------\n*bdf11*  $ALLEX20 DS    0H\n$ALLEX99 DS    0H\n         L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\n*\nCONVDEC0 CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\n*\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\n*bdf11*  DC    CL75'EXT#-START/CCHH----S/TRK----END/CCHH----E/TRK----LE\nHEADER3  DC    CL75'EXT#--START TRK----Start----END TRK-----End------LE$\n               NGTH--TYPE-------------------------'               BDF07\n*old*R3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--\n*old*          TYPE-------------------------'                     ABL94\n         EJECT\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         BZ    DSORG001\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\nDSORG001 DS    0H                                               SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS SMS0003\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         BZ    DSORGCLC\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         BE    DSORGMVC\n         BXLE  R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\nDSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         CLC   1(2,R2),=C'AM'          TEST FOR VSAM          DRK JUL10\n         BE    DSORGVS                                        DRK JUL10\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         BE    DSORGPO\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         BE    DSORGPS\n         B     DSORGBAD                                       DRK JUL10\nDSORGVS  TM    DS1REFD+3,X'04'         EXTENDED FORMAT VSAM?  DRK JUL10\n         BNO   DSORGBAD                NO, BRANCH             DRK JUL10\n         MVI   3(R2),C'X'              YES, NOTE IT           DRK JUL10\nDSORGBAD OI    FLAGS,$NOTPOPS\n         B     DSORGRTN\nDSORGPO  OI    FLAGS,$DSPO             ASSUME PARTITIONED      @KLS0710\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         BNO   DSORGRTN                NO, BRANCH             ABL NOV92\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         TM    DS1SMSFG,DS1PDSEX       IS THIS A HFS?          @KLS0710\n         BNO   DSORGRTN                NO, BRANCH              @KLS0710\n         MVC   1(2,R2),=C'HF'          YES, CHANGE TO \"HF\"     @KLS0710\n         XI    FLAGS,$DSPO             NOT PARTITIONED         @KLS0710\n         OI    FLAGS,$NOTPOPS                                  @KLS0710\n         B     DSORGRTN\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         BZ    DSATT\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         BNZ   DSATUORV\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         BZ    DSATV\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         BZ    DSATB\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         BZ    DSATS\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         BZ    DSATA\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         BZ    DSATM\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         BZ    DSATBLK\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         BZ    REFRTRN\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n         SPACE ,                                                SMS0001\n***********************************************************************\n* PROCESS SMS INDICATOR FLAG                                    SMS0001\n* 1) INDICATE IF 'MANAGED' FLAG IS ON.                          SMS0001\n* 2) IF BLOCKSIZE IS DISPLAYED, SET INDICATOR IF IT WAS SYSTEM  SMS0001\n*    DETERMINED.                                                SMS0001\n* 3) DO SMS KEYWORDS IF SPECIFIED.                              SMS0003\n***********************************************************************\n$SMS     EQU   *                                                SMS0001\n         CLC   DCB,=H'2'               Q:NODCB SPECIFIED?       SMS0001\n         BE    $SMS_100                Y-DON'T WORRY ABOUT BLKSZSMS0001\n         TM    DS1SMSFG,DS1CRSDB       Q:SDB BLKSZ?             SMS0001\n         BNO   $SMS_100                N-DON'T FLAG             SMS0001\n         L     R2,DCBFLD               Y-GET ADDR OF PARM       SMS0001\n         MVI   10(R2),C'*'             SET SDB BLKSZ INDICATOR  SMS0001\n$SMS_100 EQU   *                                                SMS0001\n         L     R2,SMSFLD               LOAD OUTPUT AREA ADDRESS SMS0001\n         MVC   0(3,R2),=C'YES'         ASSUME SMS MANAGED       SMS0001\n         TM    DS1SMSFG,DS1SMSDS       Q:CORRECT ASSUMPTION?    SMS0001\n         BOR   R14                     Y-WE'RE SET              SMS0001\n         MVC   0(3,R2),=C'NO '         N-CHANGE TO NO           SMS0001\n         BR    R14                     RETURN TO CALLER         SMS0001\n$SMS2    EQU   *                                                SMS0002\n         ICM   R15,B'1111',IGWASMSV    GET ROUTINE ADDRESS      SMS0002\n         BZR   R14                     RETURN IF NONE           SMS0002\n         SPACE ,                                                SMS0002\n         ST    R14,$SMSAVE             SAVE RETURN ADDRESS      SMS0002\n         BAS   R14,AMODE31             TO CALL ROUTINE          SMS0002\n         CALL  (15),MF=(E,CALL_L)      GET SMS INFO             SMS0002\n         BAS   R14,AMODE24             TO GET BACK              SMS0002\n         LTR   R15,R15                 DID IT WORK?             SMS0002\n         BNZ   $SMS_900                N-SKIP THIS JUNK         SMS0002\nPROMGMTC CLI   MGMTCLAS+1,2            TEST FOR NOMGMTCLASS     SMS0002\n         BE    PROSTORC                SKIP                     SMS0002\n         L     R2,MGMTCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWMGMTC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PROSTORC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWMGMTC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPROSTORC CLI   STORCLAS+1,2            TEST FOR NOSTORCLASS     SMS0002\n         BE    PRODATAC                SKIP                     SMS0002\n         L     R2,STORCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWSTORC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PRODATAC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWSTORC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPRODATAC CLI   DATACLAS+1,2            TEST FOR NODATACLASS     SMS0002\n         BE    $SMS_900                SKIP                     SMS0002\n         L     R2,DATACFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWDATAC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    $SMS_900                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWDATAC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\n$SMS_900 EQU   *                                                SMS0002\n         L     R14,$SMSAVE             RESTORE RETURN ADDRESS   SMS0002\n         BR    R14                     RETURN TO CALLER         SMS0001\nAMODE31  EQU   *                                                SMS0002\n         O     R14,=X'80000000'        SET 31-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 31-BIT MODE    SMS0002\nAMODE24  EQU   *                                                SMS0002\n         LA    R14,0(,R14)             SET 24-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 24-BIT MODE    SMS0002\n         SPACE\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*         Get EAV indicator from FM4 DSCB                         bdf11\n***********************************************************************\nGETEAVID DS    0H\n\n         BR    R14                     RETURN TO CALLER           bdf11\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         BNE   BADDAY\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         BZ    BADDAY\n         TM    WORK+3,X'06'\n         BZ    BADDAY\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         BH    BADDAY\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         B     DATERTRN\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\nERRPARS  DS    0H                                               SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(28),DSATERR1                             SMS0003\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         B     SETERROR\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\nNOID     DS    0H                                               SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR7                             SMS0003\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         B     RLSA\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\nTOOLONG  DS    0H                                               SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE,BLANKS                                   SMS0003\n         MVC   OUTLINE(44),DSATERR4\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\nRLSA     DS    0H                                                 bdf11\n*bdf11*  use R10 with TSO control blocks                          bdf11\n         DROP  R10                                                bdf11\n         USING CPPL,R10                 DEFINE CPPL BASE REGISTER bdf11\n         L     R10,SAVER10                                        bdf11\n*bdf11*RLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA\n         IKJRLSA DSATANS               FREE PARSE WORK AREA\n*bdf11* from now use R10 as BaseReg again\n         DROP  R10                                                bdf11\n         USING DSAT+4096+4096,R10                                 bdf11\n         L     R10,BASER3                                         bdf11\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BAL   R2,PUTL2                PUT MESSAGE\n*\n         LA    R3,16                   SET CONDITION CODE\n         B     EXIT2\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         BNE   LOCERR                                          HD JAN99\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   BAL   R2,PUTL                 PRINT IT\n         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         B     PUTLINE                 PRINT THE LINE\n*--------ERROR IN OBTAIN MACRO\nDSNERR   CH    R15,=H'8'               TEST RETURN CODE\n         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n         BE    TESTVALL\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         B     DSNERR1\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         B     PUTLINE                 PRINT IT\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         B     PUTLINE                 DISPLAY MESSAGE\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n*bdf11   USING DSAT+4096+4096,R8                                SMS0003\n*bdf11   ST    R8,SAVER8                                        SMS0003\n*bdf11   L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n*bdf11   DROP  R8                                               SMS0003\n*bdf11   L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         B     PUTLINE                 DISPLAY MESSAGE              SPG\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         BE    PUTLHPDS\n*\nPUTL2    DS    0H\n*bdf11*  use R10 with TSO control blocks                          bdf11\n         DROP  R10                                                bdf11\n         USING CPPL,R10                 DEFINE CPPL BASE REGISTER bdf11\n         L     R10,SAVER10                                        bdf11\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n*bdf11*  from now use R10 as BaseReg\n         DROP  R10                                                bdf11\n         USING DSAT+4096+4096,R10                                 bdf11\n         L     R10,BASER3                                         bdf11\n*bdf11*\n*\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n*\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n*\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\n*\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\n*\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         BZ    PUTLBACK\n*\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK BR    R2                      RETURN\n*\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                         EXIT\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\n*TTRLOC  CAMLST BLOCK,0,0,0                                    #DD09294\nTTRLOC   DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n         DC    A(0)                              PARAMETER THREE\n         DC    A(0)                              PARAMETER FOUR\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nIGWASMSC DC    CL8'IGWASMS'            SMS ATTRIBUTE ROUTINE    SMS0002\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n*\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\n*\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\n         SPACE\n*ASE01   EQU   DSAT                                             SMS0003\n*ASE02   EQU   DSAT+4096                                        SMS0003\n*ASE03   EQU   DSAT+4096+4096                                   SMS0003\n*ASE04   EQU   DSAT+4096+4096+4096                              SMS0003\n         SPACE\nMODLINE  DC    H'204,0'                                           ABL94\n*LANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY\n         DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         BNE   PDSSAVE\n         BCT   R2,PDSEND               DECREMENT COUNTER\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TESTORG\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         BNE   ERRDAIR\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         BZ    ERRDSORG\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         BZ    ERROPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n         SPACE\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         BNP   NEXTBLK\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         BNE   PROCENTR\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         B     NEXTBLK\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         BZ    DIRLEN\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         B     NEXTENT\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         B     PDSRTRN\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         BNE   CTLGERR\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         BNE   DYNALCER\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         B     PDSRTRN\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         B     PDSRTRN\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         BNE   OTHERERR\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         B     PDSRTRN\nOTHERERR ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         B     PDSRTRN\n*--------OPEN ERROR\nERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         B     PDSRTRN\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         B     PDSRTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPDSRTRN  $RTRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nSMS      IKJKEYWD DEFAULT='NOSMS'                               SMS0001\n         IKJNAME 'SMS'                                          SMS0001\n         IKJNAME 'NOSMS'                                        SMS0001\nDATACLAS IKJKEYWD DEFAULT='DATACLASS'                           SMS0002\n         IKJNAME 'DATACLASS'                                    SMS0002\n         IKJNAME 'NODATACLASS'                                  SMS0002\nMGMTCLAS IKJKEYWD DEFAULT='MGMTCLASS'                           SMS0002\n         IKJNAME 'MGMTCLASS',ALIAS='MANAGEMENTCLASS'            SMS0002\n         IKJNAME 'NOMGMTCLASS',ALIAS='NOMANAGEMENTCLASS'        SMS0002\nSTORCLAS IKJKEYWD DEFAULT='STORCLASS'                           SMS0002\n         IKJNAME 'STORCLASS',ALIAS='STORAGECLASS'               SMS0002\n         IKJNAME 'NOSTORCLASS',ALIAS='NOSTORAGECLASS'           SMS0002\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nSIZE     IKJKEYWD DEFAULT='SIZE'                                SMS0001\n         IKJNAME  'SIZE',SUBFLD=SIZSUB                          SMS0001\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\nSIZSUB   IKJSUBF                       ,                        SMS0001\nWORKSIZE IKJIDENT 'WORKSIZE',INTEG,DEFAULT='8192'               SMS0001\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nDSATDCB9 CAMLST SEEK,0,0,0                                        bdf11\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\n*LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR           #DD09294\nLOCBYTTR DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYF DS    0F                      TRACKS PER CYLINDER        BDF07\n         DS    H                       TRACKS PER CYLINDER High   BDF07\nTRKPRCYL DS    H                       TRACKS PER CYLINDER low    BDF07\n*old*CYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nSMSFLD   DS    A                       ADDR OF SMS FIELD        SMS0001\nDATACFLD DS    A                       ADDR OF DATACLAS FIELD   SMS0002\nMGMTCFLD DS    A                       ADDR OF MGMTCLAS FIELD   SMS0002\nSTORCFLD DS    A                       ADDR OF STORCLAS FIELD   SMS0002\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL7,CL3                 5 -> 7                     BDF07\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL7,CL3                 5 -> 7                     BDF07\nOL@LNTH  DS    CL7,CL2                 5 -> 7                     BDF07\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nTRKS#    DS    F                       calculation field 4 byte   bdf11\nTRKCYL   DS    F                       calculation field 4 byte   bdf11\nFULL     DS    0F                      calculation field 4 byte   BDF07\n         DS    H                                                  BDF07\nHALF     DS    H                       calculation field 2 byte   BDF07\n*old*HALFDS    H                       HALFWORD ALIGNED WORK AREA\nNEXTFMT3 DS    F                       flag for FMT-3 chain       bdf11\nDS3LEFT  DS    H                       num of DS3 ptr in DS9 left bdf11\nTRKFRST  DS    F                       trk position extent begin  BDF07\nTRKLAST  DS    F                       trk position extent end    BDF07\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    CL(DS3LEN)              FORMAT 3 DSCB (ADD EXTENTS)bdf11\n*SATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)bdf11\nDS9      EQU   *                       Format 9 DSCB              bdf11\n         IECSDSL1 (9)                  Format 9 DSCB              bdf11\n*                                                                 bdf11\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\nBLANKS   DS    CL200                   BLANK AREA               SMS0002\nSLASHS   DS    CL100                   BLANK AREA               SMS0002\n         SPACE\n****************************************************************SMS0002\n*        IGWASMS FIELDS                                               *\n****************************************************************SMS0002\n         SPACE\nIGWRC    DS    F                       RC FROM IGWASMS          SMS0002\nIGWREAS  DS    F                       REASON CODE FROM IGWASMS SMS0002\nIGWPROB  DS    2F                      PROB DETERMINATION INFO  SMS0002\nIGWLEN   DS    F                       LENGTH OF DATA SET NAME  SMS0002\nIGWDSN   DS    A                       POINTER TO DSN           SMS0002\nIGWSMS   EQU   *                                                SMS0002\nIGWSTORC DS    CL30                    STORAGE CLASS OR BLANK   SMS0002\nIGWMGMTC DS    CL30                    MANAGMENT CLASS OR BLANK SMS0002\nIGWDATAC DS    CL30                    DATA CLASS OR BLANK      SMS0002\nIGWTYPE  DS    F                       DATA SET TYPE            SMS0002+\n                                       1=PDS/E (LIBRARY)        SMS0002+\n                                       0=OTHER                  SMS0002\nCALL_L   CALL  ,(,,,,,,),MF=L          LIST FORM OF CALL        SMS0002\nIGWASMSV DS    V(IGWASMSV)             LOAD'ED ADDR OF IGWASMS  SMS0002\n$SMSAVE  DS    A                       $SMS RETURN ADDRESS      SMS0002\nSAVER7   DS    F                       SAVE AREA FOR R7         SMS0003\nSAVER8   DS    F                       SAVE AREA FOR R8         SMS0003\nSAVER10  DS    F                       SAVE AREA FOR R10        SMS0003\nBASER3   DS    F                       SAVE AREA FOR 3RD BASE   SMS0003\nBASER4   DS    F                       SAVE AREA FOR 4TH BASE   SMS0003\n         DS    0D\n*------------*\n$REGS    DS    0H                      SAVE REGISTERS for debug   BDF07\n$R00     DS    F                                                  BDF07\n$R01     DS    F                                                  BDF07\n$R02     DS    F                                                  BDF07\n$R03     DS    F                                                  BDF07\n$R04     DS    F                                                  BDF07\n$R05     DS    F                                                  BDF07\n$R06     DS    F                                                  BDF07\n$R07     DS    F                                                  BDF07\n$R08     DS    F                                                  BDF07\n$R09     DS    F                                                  BDF07\n$R10     DS    F                                                  BDF07\n$R11     DS    F                                                  BDF07\n$R12     DS    F                                                  BDF07\n$R13     DS    F                                                  BDF07\n$R14     DS    F                                                  BDF07\n$R15     DS    F                                                  BDF07\n$RLEN    EQU   *-$REGS                                            BDF07\nOUTDEBUG DS    CL100                   OUTPUT LINE for debug      BDF07\n*------------*\n         PRINT ON\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n*                                                                 bdf11\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSATNEW1": {"ttr": 10245, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x008\\x01\\x13\\x01_\\x01\\x13\\x01_\\x17\\x07\\x15\\x19\\x15\\x19\\x00\\x04\\xc6\\xd6\\xd9`\\xc5\\xc1\\xe5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-01-15T00:00:00", "modifydate": "2013-01-15T17:07:38", "lines": 5401, "newlines": 5401, "modlines": 4, "user": "FOR-EAV"}, "text": "         LCLC  &PGM                      PROGRAM NAME           SMS0003\n         LCLC  &FMID,&PTF,&VER           VERSION/PTF LEVEL      SMS0003\n         LCLC  &DEBUG                    switch debug on/off  AF jan13\n*\n&PGM     SETC  'DSAT'                                           SMS0003\n&FMID    SETC  'PDS8600'                                        SMS0003\n&PTF     SETC  '       '                                        SMS0003\n&VER     SETC  '&FMID &PTF'                                     SMS0003\n&DEBUG   SETC  'OFF'                     switch debug on/off  AF jan13\n*MODIFIED BY EDS -- (NOVEMBER 2005) -- ADD SMS SUPPORT\n*ORIGINAL SOURCE -- CBT439.FILE296  (NOVEMBER 2001)\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*  modification in detail:                                            *\n*  15.01.2013 - A.FREYBIER       <-- I use a new label --->   AF jan13*\n*             BUGFIX for multivolume datasets:                AF jan13*\n*              correct track count                            AF jan13*\n*              display extents for all volumes                AF jan13*\n*             Changes for AMODE 31 :                          AF jan13*\n*              LA R1,0(R1)-> N R1,=X'00FFFFFF' ZERO high byte AF jan13*\n*              drop address mode switch AMODE24/AMODE31       AF jan13*\n*                                                             AF jan13*\n*             BASE register cleanup                           AF jan13*\n*               remove BASE REG switches from SMS0003, bdf11  AF jan13*\n*               convert several opcodes to relative           AF jan13*\n*               use label instead of branch *+nn              AF jan13*\n*               insert DROP Rx to avoid ASMA300W + ASMA303W   AF jan13*\n*               use R12 for addressing constants area         AF jan13*\n*             other changes :                                 AF jan13*\n*              expand OUTLINE and BLANKS 200 -> 250           AF jan13*\n*                  needed if all options are set              AF jan13*\n*                                                             AF jan13*\n*  14.10.2011 - A.FREYBIER                                       bdf11*\n*               bugfix for files with F8 DSCB residing in a trk- bdf11*\n*               managed area and with end-H < begin-H (CCCCcccH) bdf11*\n*  12.10.2011 - A.FREYBIER                                       bdf11*\n*               fix freespace calculation for files > 64K tracks bdf11*\n*                                                                bdf11*\n*  28.08.2011 - A.FREYBIER                                       bdf11*\n*               introduce R10 as temporary BaseReg.              bdf11*\n*               rebuild space calculation for                    bdf11*\n*                  Volumes > 65520 Cyls (EAV).                   bdf11*\n*               Many thanks to John Kalinich, who helped         bdf11*\n*                 me with debugging                              bdf11*\n*               Special thanks to the author of DISKMAP(file792) bdf11*\n*                 KEITH COWDEN <cowdenkb@sbcglobal.net>.         bdf11*\n*                 The DUMP option helped me to understand        bdf11*\n*                 the new DSCB structures.                       bdf11*\n*                                                                     *\n*  CSC MODIFICATION :                                                 *\n*  31.08.2011 - J.KALINICH                                    DRK AUG11\n*               MARK EXTENDED AND LARGE FORMAT DATASETS               *\n*                                                                     *\n*  21.11.2009 - D.DALBY                                        #DD09294\n*               IGNORE \"CAMLST BLOCK\" AS IBM DROPPED SUPPORT.         *\n*               REPLACE WITH PRE-ASSEMBLED CAMLST BLOCK MACROS.       *\n*                                                                     *\n*  BDF modification :                                                 *\n*  21.02.2008 - A.FREYBIER                                       BDF08*\n*               correction for 3 byte extent count               BDF08*\n*  11.05.2007 - A.FREYBIER                                       BDF07*\n*               track calculation corrected for                  BDF07*\n*               extent location > CYL 32765 ( 2 byte )           BDF07*\n*               track/dsn > 99999 possible with new DASD models  BDF07*\n*               and extended adressability (display field length)BDF07*\n*  30.04.2003 - A.FREYBIER                                            *\n*               MORE THAN 9999 DATASETS POSSIBLE |                    *\n*  29.11.2001 - A.FREYBIER                                            *\n*               INCREASE GETMAIN AREA FOR MORE DATASETS               *\n*                                                                     *\n*  for previous changes search for 'UPDATE LOG' below                 *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\n         TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                 14. SYSTEM MANAGED DATA SET FLAG             SMS0001*\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   SMS/NOSMS                  SMS0001*\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOSMS                            SMS0001*\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n* with EAV disktype > 65520 cyls                                 bdf11*\n*>dsat / extents                                                      *\n*SERIAL   ALLOC    FREE EXT  DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAM *\n*DB6117    3000           3   AMX  U     4096     0 08/17/2011 VBDFS0 *\n*    EXT#--START TRK----Start----END TRK-----End------LENGTH--TYPE--  *\n*      0   000C441:0   753615   000C472:E   754364       750  CYL, DAT*\n*      1   000C4A5:0   755115   000C508:E   756614      1500  CYL, DAT*\n*      2   000C53B:0   757365   000C56C:E   758114       750  CYL, DAT*\n****                                                                  *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*SMS0001                                                              *\n*SMS0001          SMS/NOSMS                                           *\n*SMS0001                      SPECIFIES WHETHER OR NOT THE SMS DATA   *\n*SMS0001                      SET FLAG SHOULD BE DISPLAYED.  SMS      *\n*SMS0001                      MANAGED DATA SETS ARE INDICATED BY 'YES'*\n*SMS0001                      AND NON-SMS MANAGED DATA SETS BY 'NO.'  *\n*SMS0001                      ADDITIONALLY, DATA SETS WITH A BLOCK    *\n*SMS0001                      SIZE DETERMINED BY THE SYSTEM (SDB) ARE *\n*SMS0001                      INDICATED WITH AN ASTERISK NEXT TO THE  *\n*SMS0001                      BLOCK SIZE.                             *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING  (IECSDSL1)          *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING  (IECSDSL1)          *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*        SHOWCAT                                                      *\n*        CVT                                                  HD JAN99*\n*        IEFUCBOB                                             HD JAN99*\n*        IOCINFO                                              HD JAN99*\n*        UCBSCAN                                              HD JAN99*\n*        LOAD                                                  SMS0002*\n*        IECSDSL1          DSCB dsect                            bdf11*\n*        TRKADDR           convert CCCCcccH values from DSCB     bdf11*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - work register in DSATPDS subroutine only       AF jan13*\n*        R12 - address Literals                               AF jan13*\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n*\n*  11/15/05  ADDED SMS KEYWORD.                        SMS0001      JCG\n*            ADDED SIZE KEYWORD WITH DEFAULT OF 8192 TO SPECIFY A\n*            LARGER SVC26 WORKAREA SIZE.  LOGIC TO OBTAIN A LARGER\n*            WORKAREA IS NOT WORKING SO WE'LL PASS THE BUCK TO THE\n*            USER.  MAXIMUM VALUE IS 65535.\n*            UPDATED SECONDARY SPACE PROCESSING TO DISPLAY SECONDARY\n*            AMOUNTS OF BYTES, KBYTES, MBYTES, OR GBYTES.\n*            ADDED PDS/E DETECTION AND DISPLAY DSORG OF PE IF PDSE\n*            FLAG IS SET.\n*            REMOVED INTERNAL FORMAT-1 DSCB MACRO AND REPLACED WITH THE\n*            REAL DEAL.  A COUPLE OF LABELS HAD TO BE MODIFIED TO\n*            USE THE PROPER FIELD NAME (NOEPV).\n*  11/15/05  ADDED DATACLAS, MGMTCLAS, AND STORCLASS     SMS0002    JCG\n*            KEYWORDS TO DISPLAY SMS ATTRIBUTES FOR THE DATA SET.\n*            THESE KEYWORDS ARE VALID ONLY IF 'SMS' IS ALSO SPECIFIED\n*            OR DEFAULTED.                               PDS1122\n*  11/15/05  MODIFIED CODE BECAUSE WITH THE ADDITION     SMS0003    JCG\n*            OF SMS0001 AND SMS0002 WE BLEW A BASE REGISTER. THE CODE\n*            WAS CHANGED WITH BRUT FORCE BY ESTABLISHING A NEW BASE\n*            REGISTER AROUND THE LABELS THAT WERE NOT ADDRESSABLE.\n*            SEARCHES FOR BASE0? WILL GO TO THE LOCATIONS CHANGED.\n*  05/11/07  modified trk calc for extent above cyl 32765         BDF07\n*  02/21/08  modified extent count > 99                           BDF08\n*  07/26/10  ADDED RECOGNITION OF HFS DATASETS                 @KLS0710\n*  08/18/11  modified for EAV, FMT-8 and FMT-9 DSCB               BDF11\n*  08/31/11  MARK EXTENDED AND LARGE FORMAT DATASETS          DRK AUG11\n*  01/15/13  BUGfix for multivolume files                      AF jan13\n*            cleanup BASE REGs and use AMODE(31)               AF jan13\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n**       GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE           AF jan13\n         STORAGE OBTAIN,LENGTH=&RENT,SP=&SP,LOC=BELOW\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         STORAGE RELEASE,LENGTH=&RENT,ADDR=(1),SP=&SP\n*        FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE         AF jan13\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         IECSDSL1 (1)                                           SMS0001\n         MEXIT                                                  SMS0001\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*  THIS CODE SEEMS NOT TO BE USED. ONLY ACTIVATE ON DOWN-LEVEL SYSTEMS.\n*    THE REAL CODE IS FROM MACRO IECSDSL1 (1) ABOVE.\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\n**1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NOEPV DS    X                        NUMBER OF EXTENTS       SMS0001\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - BELOW\nDS1SMSDS EQU   X'80'  1... ....    SYSTEM MANAGED DATA SET\nDS1SMSUC EQU   X'40'  .1.. ....    NO BCS ENTRY EXISTS FOR DATA SET\nDS1REBLK EQU   X'20'  ..1. ....    SDB AND D.S. MAY BE REBLOCKED\nDS1CRSDB EQU   X'10'  ...1 ....    DADSM CREATE ORIGINATED BLKSIZE\nDS1PDSE  EQU   X'08'  .... 1...    PDSE DATA SET\nDS1STRP  EQU   X'04'  .... .1..    EXTENDED FORMAT DATA SET\nDS1PDSEX EQU   X'02'  .... ..1.    HFS DATA SET\nDS1DSAE  EQU   X'01'  ........1    EXTENDED ATTRIBUTES EXIST\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - ABOVE\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\nDS3      EQU   *                                                  bdf11\n         IECSDSL1 (3)                                             bdf11\nDS3LEN   EQU   *-DS3                                              bdf11\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   DS3DSCB                                            bdf11\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\n         DS    X          DS3FMTID      already defined           bdf11\n*S3FMTID DS    X          DS3FMTID      DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\n         DS    X          DS3PTRDS      already defined           bdf11\n*S3PTRDS DS    XL5        DS3PTRDS      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '6291456'                                          BDF01\n**&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT   HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n&MINSIZE SETC  '131072'               128K AS A DEFAULT           BDF03\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n*\n         SPLEVEL SET                                           AF jan13\n         SYSSTATE ARCHLVL=2    Z/ARCH                          AF jan13\n         IEABRCX DEFINE                                        AF jan13\n         TITLE 'ENTRY CODING'\nDSAT     RMODE 24                                              AF jan13\nDSAT     AMODE 31                                              AF jan13\n*  DSAT     $ENTER BASE=(R11,R12),                             AF jan13\nDSAT     $ENTER BASE=(R12),                                    AF jan13+\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n*\n         J     around_DSLEN                                    AF jan13\n         LTORG , for STORAGE OBTAIN parameters                 AF jan13\n*\naround_DSLEN   DS 0h                                           AF jan13\n*        establish addressing for literals and constant data   AF jan13\n         DROP  R12\n         LARL  R12,const                                       AF jan13\n         USING const,R12                                       AF jan13\n*\n*\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INIT PTPB\n         MVC   DSATHEDR(4),MODLINE\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVI   BLANKS,C' '             BLANK LINE               SMS0002\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS                      SMS0002\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         MVI   SLASHS,C'-'             SLASH LINE for debug       bdf11\n         MVC   SLASHS+1(L'SLASHS-1),SLASHS                        bdf11\n         DROP  R8                      DROP IOPL BASE REGISTER\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*        LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n*        CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         CALLTSSR EP=IKJPARS,MF=(E,PPL) LINK TO PARSE ROUTINE  AF jan13\n         J     AROUNDID                 BRANCH AROUND THE ID    SMS0003\n*\n         DC    AL1(L'CSECTID)           LENGTH OF CSECT ID      SMS0003\nCSECTID  DC    C'&PGM &VER'                                     SMS0003\n*\nAROUNDID DS    0H                                               SMS0003\n         LTR   R15,R15                  TEST RETURN CODE\n         JNZ   ERRPARS\n*\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n*--------GET CATALOG WORKAREA\n*SMS0001 L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         L     R2,WORKSIZE             GET PTR TO SIZE          SMS0001\n         L     R2,0(,R2)               GET WORKSIZE             SMS0001\n         C     R2,=F'65535'            Q:IS VALUE VALID?        SMS0001\n*AF**    BNH   *+8                     Y-USE IT                 SMS0001\n         JNH   PARSE1                  Y-USE IT                AF jan13\n*\n         L     R2,=F'65535'            N-USE MAX VALUE          SMS0001\nPARSE1   DS    0H                                              AF jan13\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n*$PDSCALL DC    C'PDSCALL'                                       bdf11\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n***      CLC   2(7,R1),$PDSCALL      DID PDS CALL US?             bdf11\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         JNE   NOPDSCAL              NO\n*\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n*bdf11*  BNE   *+8                   YES, BRANCH\n         JNE   NOPDSCAL              YES, BRANCH                  bdf11\n*\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL DS    0h\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n*\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         JE    SEARS               YES, CONTINUE               HD JAN99\n*\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         J     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n*\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3             FMT-3 DSCB\n         STM   R1,R4,DSATDCB3\n         LA    R4,DS9                  FMT-9 DSCB for EAV         bdf11\n         STM   R1,R4,DSATDCB9                                     bdf11\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         JNZ   ZEROTOT\n*\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  DS    0h\n         XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         JZ    SETUPHDR\n*\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n*AF**    BNE   *+8                     YES, BRANCH\n         JNE   ZEROTOT1                YES, BRANCH             AF jan13\n*\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\nZEROTOT1 DS    0h                                              AF jan13\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EXRL  R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         JO    SETUPHDR\n*\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n*\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR DS    0h\n         LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         JE    TRYDEV\n*\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         JE    TRYDEV\n*\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         JE    TRYDEVIC\n*\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         JE    TRYALLOC\n*\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         JE    TRYDSORG\n*\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(20,R2),=C'  ALLOC    FREE EXT ' SET UP HEADER   BDF08\n         LA    R2,21(R2)               INCREMENT POINTER         BDF08\n*BDF08*  MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n*BDF08*  LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         JE    TRYDSORG\n*\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         JE    TRYPDS\n*\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         JE    TRYDCB\n*\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         JE    TRYCRDAT\n*\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT DS    0h\n         CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         JE    TRYEXDAT\n*\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT DS    0h\n         CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         JE    TRYLREFD\n*\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD DS    0h\n         CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   TRYCCHHR\n         JNE   TRYSMS                                           SMS0001\n*\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\n         SPACE\nTRYSMS   DS    0h\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         JNE   TRYCCHHR                                         SMS0001\n*\n         ST    R2,SMSFLD               SAVE OUTPUT FIELD ADDR   SMS0001\n         MVC   0(4,R2),=C'SMS '        MOVE IN HEADER           SMS0001\n         LA    R2,4(,R2)               INCREMENT POINTER        SMS0001\n         SPACE\n****************************************************************SMS0002\n*        SMS KEYWORD MUST ALSO BE SPECIFIED OR DEFAULTED TO GET THE   *\n*        DATACLAS, MGMTCLAS, AND STORCLAS VALUES.                     *\n****************************************************************SMS0002\n         SPACE\n         XR    R15,R15                 FLAG = 0                 SMS0002\nTRYDATAC CLI   DATACLAS+1,1            TEST FOR DATACLAS        SMS0002\n         JNE   TRYMGMTC                                         SMS0002\n*\n         ST    R2,DATACFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'DATACLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYMGMTC CLI   MGMTCLAS+1,1            TEST FOR MGMTCLAS        SMS0002\n         JNE   TRYSTORC                                         SMS0002\n*\n         ST    R2,MGMTCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'MGMTCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYSTORC CLI   STORCLAS+1,1            TEST FOR STORCLAS        SMS0002\n         JNE   TESTLOAD                                         SMS0002\n*\n         ST    R2,STORCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'STORCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTESTLOAD EQU   *                       SEE IF SMS KEYWORD       SMS0002\n         XC    IGWASMSV,IGWASMSV       CLEAR MODULE ADDRESS     SMS0002\n         LTR   R15,R15                 Q:KEYWORD SPECIFIED?     SMS0002\n         JZ    TRYCCHHR                N-DON'T NEED THIS JUNK   SMS0002\n*\n*        LA    R15,SMS_A               TO TRICK CALL            SMS0002\n         LARL  R15,SMS_A               TO TRICK CALL           AF jan13\n         CALL  (15),(IGWRC,IGWREAS,IGWPROB,IGWLEN,DSNAME,IGWSMS,       +\n               IGWTYPE),                                        SMS0002+\n               MF=(E,CALL_L)                                    SMS0002\n         SPACE\nSMS_A    EQU   *\n         MVI   IGWLEN+3,44             HARD LENGTH OF DSNAME    SMS0002\n         LOAD  EPLOC=IGWASMSC          SMS ATTR ROUTINE         SMS0002\n         ST    R0,IGWASMSV             SAVE ADDRESS             SMS0002\n         AIF   ('&DEBUG' NE 'ON').NODEBUG1\n***  debug display begin                                          debug\n         STM   R0,R15,$REGS                                       debug\n         BRAS  R2,PUTL                 DISPLAY OUTLINE            debug\n         MVC   OUTDEBUG,SLASHS                                    debug\n         MVC   OUTDEBUG+5(8),=C'DEBUG1  '      NODEBUG1           debug\n         MVC   OUTDEBUG+15(4),$R00                                debug\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          debug\n         MVC   OUTLINE(L'OUTDEBUG),OUTDEBUG                       debug\n         BRAS  R2,PUTL                 DISPLAY THE LINE           debug\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          debug\n         LM    R0,R15,$REGS                                       debug\n***  debug display end                                            debug\n.NODEBUG1 ANOP\n         SPACE\nTRYCCHHR DS    0h\n         CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         JE    DODSNAME\n*\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         JH    DSNFLDOK\n*\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\n*SMS0002 LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\nDSNFLDOK LA    R1,OUTLINE+L'OUTLINE-44 LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         JE    BUILDDSN\n*\n         BRAS  R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN DS    0h\n         LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT DS    0h\n         MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         JNZ   MOVEREST\n*\n*--------APEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         JNE   GETLEN\n*\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         JNZ   MOVEREST\n*\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         JE    NOID\n*\nGETLEN   DS    0H\n         SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EXRL  R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         JZ    LOCATE\n*\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST DS    0H\n         L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EXRL  R1,MOVENAME             COPY NAME\n*\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   DS    0H\n         MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         JNZ   COPYSER\n*\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         JNZ   PROCGRP\n*\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   CHECK8\n*\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         JE    OBTAIN1\n*\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         JNE   PROCGRP\n*\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         JE    PROCTTR\n*\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         JE    PROCGRP                    SU 8 NOT INSTALLED\n         J     LOCERROR\n*\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         JNE   CHECK12\n*\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         JNE   PROCGRP\n*\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         JNE   PROCGRP\n*\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BRAS  R2,PUTL                 DISPLAY LINE\n         J     ENDGRP\n*\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         JNE   LOCERROR\n*\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         JNZ   LOCERROR\n*\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         JNE   FINDEND1\n*\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         J     PROCNTRY                LOAD INDEX NAME\n*\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         JNE   FINDEND\n*\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   LOCERROR\n*\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         JE    LNKENTRY\n*\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         JE    DSATNEXT\n*\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         JE    DSNOVER5\n*\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         JE    NDXENTRY\n*\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         JNE   DSNENTRY\n*\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         JE    NDXENTRY\n*\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         JZ    PUTGDG\n         JM    GDGEORD\n*\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         J     PUTGDG\n*\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         JNZ   PUTGDG\n*\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BRAS  R2,PUTL                 DISPLAY LINE\n*\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         J     FINDEND\n*\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         JZ    ENDLEVEL\n*\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         J     READCTLG\n*\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         JNZ   TESTDONE\n*\n         TM    FLAGS,GDG               TEST FOR GDG\n         JNZ   MTGDG\n*\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         J     PUTEMPTY\n*\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\nPUTEMPTY DS    0H                                               SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BRAS  R2,PUTL                 DISPLAY MESSAGE\n*\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         JE    ENDGRP\n*\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         JNE   FINDDOT\n*\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         J     PROCNTRY\n*\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         JNZ   LOCATE2\n*\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         JZ    OBTAIN1\n         J     LOCERROR\n*\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         JNZ   DSNMVC\n*\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         J     LDVOLCNT\n*\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         JE    BACKUP\n*\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         JNZ   SAVELEN\n*\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         JNZ   SAVELEN\n*\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         JNE   SAVELEN                 NO, BRANCH                 ABL99\n*\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         JZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         JE    PARTIAL\n*\n         CH    R15,=H'40'\n         JNE   LOCERROR\n*\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         JH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n*\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         J     RETRYLOC\n*\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         BRAS  R2,PUTL                 DISPLAY LINE                 ABL\n*\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         J     DSATPROC\n*\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         JNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n*\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         JZ    OBTAIN1                 OK, BRANCH\n*\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         JE    GDGMSGL                 YES, BRANCH                  SPG\n*\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         JNE   LOCERROR                NO, BRANCH\n*\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         J     LOCERROR\n*\n*   moved to literals  area                                    AF jan13\n*  SHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\n*  LSHOWCAT EQU   *-SHOWCATF\n*\nTESTCOMP DS    0h\n         TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         JZ    ENDGRP\n*\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BRAS  R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         J     ENDGRP\n*\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EXRL  R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         JNE   OBTAIN1\n*\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         JE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n*\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         JE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n*\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         J     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n*\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         JO    NEXTSER               YES, IGNORE\n         J     THISVOL\n*\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         JO    ENDGRP2\n*\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         BRAS  R2,PUTL                 DISPLAY ERROR MESSAGE\n         J     ENDGRP2\n*\nTHISVOL  DS    0h\n         CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         JE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n*\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  DS    0h\n         LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT DS    0h\n         MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         JNH   GETSER\n*\n         LA    R1,20                   SET MAX COUNT\nGETSER   DS    0h\n         C     R1,=F'1'                TEST VOLUME COUNT\n         JL    BADVOLCT                BAD VOLUME COUNT\n*\n         JE    STOREVCT\n*\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT DS    0h\n         STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n**\n         BRAS  R14,$SMS2               DO DATACLAS, MGMTCLAS,   SMS0002\n*                                      AND STORCLAS             SMS0002\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         JE    TESTDEV\n*\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         JE    TESTDEV\n*\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  DS    0h\n         CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         JE    TESTDA\n*\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   DS    0h\n         CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         JNE   NOTDASD\n*\n         SR    R1,R1                   CLEAR REG 1\n         XC    TRKPRCYF,TRKPRCYF       clear field               BDF07\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE DS    0h\n         CH    R1,=H'15'               TEST AGAINST MAX\n         JH    NOTDASD\n*\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         JNZ   TESTDEV2\n*\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         JE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n*\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         JE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n*\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         J     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n*\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         JNE   NEXTDEV                                         HD JAN99\n*\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         JO    NOTUP\n*\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         JZ    TESTTYPE\n*\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         J     TESTTYPE\n*\nNOTUP    DS    0h\n         LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         J     DSNERR                  ORC04\n*\nTESTDEV2 DS    0h\n         CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         JE    GETFMT1\n*\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\n* --------------------------------------------------------------  BDF11\nGETFMT1  DS    0H\n         OBTAIN DSATDCB1,EADSCB=OK     GET FORMAT 1/8 DSCB        BDF11\n*bdf11*  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   DSNERR\n*                                                                 BDF11\n* --------------------------------------------------------------  BDF11\n*\n*ETDSCB3 DS    0H\n* --------------------------------------------------------------  BDF11\n*bdf11   NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n*bdf11   BZ    PROCESS\n*\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n*bdf11   LTR   R15,R15                 TEST RETURN CODE\n*bdf11   BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE FMT-1/8 DSCB                                     *\n*        R8 = CATBLOCK                                                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*bdf11 this label no longer used\n*bdf11*PROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS,COUNT             COUNT THIS DATA SET        bdf11\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         JE    PROCDSRG\n*\n         ST    R8,SAVER8               $ALLOC needs R8\n         BRAS  R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n*\n         L     R8,SAVER8\n*\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\n*\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         JE    PROCPDS\n         BRAS  R14,$DSORG              BRANCH TO PROCESSING ROUTINE\n*\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         JE    PROCDCB\n*\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         JZ    PROCDCB\n*\n         TM    DS1SMSFG,DS1PDSEX       MAKE SURE ITS NOT HFS   @KLS0710\n         JO    PROCDCB                                         @KLS0710\n*\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\n*\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         JE    PROCCRDT\n         BRAS  R14,$DCB                BRANCH TO PROCESSING ROUTINE\n*\nPROCCRDT DS    0h\n         CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         JE    PROCEXDT\n*\n         BRAS  R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\n*\nPROCEXDT DS    0h\n         CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         JE    PROCLREF\n         BRAS  R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\n*\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   PROCCHHR\n         JNE   PROCSMS                                          SMS0001\n         BRAS  R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\n*\nPROCSMS  EQU   *                                                SMS0001\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         JNE   PROCCHHR                                         SMS0001\n         BRAS  R14,$SMS                                         SMS0001\n*\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         JE    PUTLINE\n         BRAS  R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\n*\nPUTLINE  DS    0h\n         BRAS  R2,PUTL                 DISPLAY THE LINE\n*\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n* ================================================================ *\n*        Display EXTENTs info for this volume\n* ---------------------------------------------------------------- *\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         JE    NOEXTENT                YES, BRANCH                ABL94\n*\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         JZ    NOEXTENT                NO, BRANCH                 ABL94\n*\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         ST    R8,SAVER8               $ALLEXTS needs R8\n         BRAS  R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n*\n         L     R8,SAVER8\n*\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT DS    0h\n*        NI    FLAGS,X'FF'-COUNT why?  RESET COUNT BIT   ABL94 AF jan13\n* ================================================================ *\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BRCT  R1,GETSER               LOOP FOR MORE VOLUMES\n*\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         JZ    SAVETOTL\n*\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL DS    0h\n         STM   R4,R8,TOTLS             STORE TOTALS\n* ================================================================ *\n**          This block moved to above\n* ---------------------------------------------------------------- *\n**          CLC   EXTENTS,=H'2'           NOEXTENSTS?             ABL94\n**          JE    NOEXTENT                YES, BRANCH             ABL94\n** *\n**          TM    FLAGS,COUNT             COUNT IT?               ABL94\n**          JZ    NOEXTENT                NO, BRANCH              ABL94\n** *\n**          MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE       ABL94\n**          ST    R8,SAVER8               $ALLEXTS needs R8\n**          BRAS  R14,$ALLEXTS            BRANCH TO ROUTINE       ABL94\n** *\n**          L     R8,SAVER8\n** *\n**          MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE       ABL94\n** NOEXTENT DS    0h\n**          NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT         ABL94\n* ================================================================ *\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  DS    0h\n         TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         JZ    ENDGRP\n*\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         JZ    DSATNEXT                GET NEXT DSNAME\n*\n         J     DSATNXT2                GET NEXT DSNAME\n*\nENDGRP   DS    0h\n         NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         JZ    ENDGRP2\n*\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         JE    NEXTSER\n*\nENDGRP2  DS    0h\n*                                      chain end by x'FF000000'AF jan13\n         TM    24(R3),X'FF'            end of chain ?          AF jan13\n         JO    EOC                     YES, go                 AF jan13\n*\n         L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         J     SETUPNXT                do next PDE entry       AF jan13\n* ------------------------------------------------------------ AF jan13\n*        LA    R3,0(,R3)               reset high byte         AF jan13\n*        LTR   R3,R3                   END OF CHAIN?           AF jan13\n*        BNZ   SETUPNXT                NO, BRANCH              AF jan13\n* ------------------------------------------------------------ AF jan13\n*\nEOC      DS    0h                      end of chain\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         JE    RETURN\n*\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n*\n*  MORE THAN 9999 DATASETS POSSIBLE |                             BDF03\n**       MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE      BDF03\n**       MVC   5(19,R2),=C'DATA SET DISPLAYED'                    BDF03\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      BDF03\n         MVC   8(19,R2),=C'DATA SET DISPLAYED'  ???               BDF03\n*\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         JH    CNVTALOC\n*\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         JZ    RETURN\n*\n*        display cumulation for multivol DSN\n*\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   8(19,R2),=C'DATA SET DISPLAYED'   ??               BDF08\n*old*    MVC   5(19,R2),=C'DATA SET DISPLAYED'\nCNVTALOC DS    0h\n         CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         JE    DISPLAYT\n*\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n* ---------------------------------------------------------------------\n         LR    R0,R4                   tracks total               BDF07\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        BDF07\n*\n         MVC   0(9,R2),DECNUM+12-9     MOVE INTO MESSAGE          BDF07\n*\n*old*    CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n*old*    MVC   DSATDEC,=X'4020202020202120'\n*old*    ED    DSATDEC,DSATPDEC+4      EDIT\n*old*    MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n*old*------------------------------------------------------------------\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*old*    MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\n         MVC   10(7,R2),DSATDEC+1      MOVE INTO OUTPUT LINE      BDF07\nDISPLAYT DS    0h\n         BRAS  R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         JL    BRANCH\n*\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   DS    0h\n         SLA   R15,2                   MULTIPLY BY 4\n**       B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\n         LARL  R0,BRTABLE                                      AF jan13\n         AR    R15,R0                  BRANCH TO PROPER ROUTINE AFjan13\n         BR    R15                                             AF jan13\n*\nBRTABLE  J     RC0                                             HD JAN99\n         J     RCTALLOC\n         J     RCTUSED\n         J     RCLALLOC\n         J     RCLUSED\n         J     RCTDIFF\n         J     RCLDIFF\n         J     RCNUM\n         J     RCPREV\n         J     RCDSORG\n         J     RCDIRA\n         J     RCDIRU\n         J     RCENTR\n         J     RCMEMB\n*\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         J     EXIT\n*\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         J     EXIT\n*\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         J     EXIT\n*\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         J     EXIT\n*\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         J     EXIT\n*\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         JNZ   EXIT\n*\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         J     EXIT\n*                                                                 bdf11\n*bdf11*  RCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\nRCPREV   DS    0H                                                 bdf11\n         L     R15,CPPLECT             LOAD ECT ADDRESS           bdf11\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         J     EXIT\n*\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         J     EXIT\n*\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         J     EXIT\n*\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         J     EXIT\n*\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         J     EXIT\n*\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         J     EXIT\n*\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         J     EXIT\n*\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         J     EXIT\n*\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         J     EXIT                                            HD JAN99\n*\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         J     EXIT                                            HD JAN99\n*\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         JO    RC8                     YES, RETURN CODE=8      HD JAN99\n         J     EXIT                                            HD JAN99\n*\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         JZ    EXIT2\n*\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         LTR   R1,R1                   Q:DID THIS?              SMS0001\n         JZ    EXIT2_A                 N-DON'T TRY TO FREE IT   SMS0001\n*\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\nEXIT2_A  EQU   *                                                SMS0001\n         LR    R15,R3                  RESTORE RETURN CODE\n*\n*        avoid \"ASMA303W Multiple address resolutions\"         AF jan13\n         DROP  R12          USING const,R12                    AF jan13\n         $RTRN RENT=DSECTLEN,RC=(R15)\n*\n*        re-establish BASE registers                           AF jan13\n         USING const,R12                DEFINE BASE REGISTERS  AF jan13\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   DS    0H\n         L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n         ST    R7,NEXTFMT3             clear flag                 bdf11\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         JZ    ALLOCEND\n*\n* process the 3 FMT-1/8 extents                                   bdf11\n         LA    R15,3                   EXTENTS TO PROCESS         bdf11\n         LR    R0,R4                   TOTAL EXTENTS              bdf11\n         SR    R0,R15                  EXTENTS LEFT               bdf11\n         ST    R0,EXTENTLF             SAVE FOR LATER             bdf11\n         CH    R4,=H'03'               CAN WE DO ALL?             bdf11\n         JL    DSATTRKS                YES, BRANCH                bdf11\n*\n*bdf11\n         LH    R4,=H'03'               NO, DO  3 FIRST            bdf11\n* ---------------------------------------------------------------------\n*bdf11   LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n*bdf11   LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n*bdf11   SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n*bdf11   ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n*bdf11   CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n*bdf11   BL    DSATTRKS                YES, BRANCH            ABL NOV92\n*bdf11\n*bdf11   LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\n* ---------------------------------------------------------------------\nDSATTRKS DS    0H\n         EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n*AF**    EXRL  R0,DSATADDR(R5) not valid with index reg\n         CLI   0(R7),X'00'\n         JE    DSATUTRK                finished - go\n*\n* --------------------------------------------------------------  bdf11\n*        calculate the size of this extent                        bdf11\n* --------------------------------------------------------------  bdf11\n         XC    FULL,FULL               clear field                bdf11\n         XR    R0,R0                   clear register             bdf11\n* --------------------------------------------------------------  bdf11\n*        Check for EAV                                            bdf11\n* --------------------------------------------------------------  bdf11\n         CLI   DS1FMTID,DS8IDC    IS THIS A FMT-8 ?               bdf11\n         JNE   NON_EAV            NO, go for CCHH processing      bdf11\n*\n* --------------------------------------------------------------  bdf11\n*        extent table in new form CCCCcccH                        bdf11\n* --------------------------------------------------------------  bdf11\n         LA    R8,2(R7)                  point to extent-start    bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1  get cyl                  bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1  get trk                  bdf11\n         ST    R1,TRKS#                  save start_TRK           bdf11\n*                                                                 bdf11\n         LA    R8,6(R7)                  point to extent-end      bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1  get cyl                  bdf11\n         S     R1,FULL                 subtract start from end    bdf11\n         XR    R0,R0                   clear register             bdf11\n         M     R0,TRKPRCYF             multiply by TRK per CYL    bdf11\n         ST    R1,TRKCYL                 save #tracks             bdf11\n*                                                                 bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1  get trk                  bdf11\n         A     R1,TRKCYL               add #tracks                bdf11\n         S     R1,TRKS#                subtract starting trackno  bdf11\n         LA    R1,1(R1)                add 1 TRK                  bdf11\n         AR    R6,R1                   accumulate total           bdf11\n         J     NEXT_EXT                                           bdf11\n*                                                                 bdf11\n* --------------------------------------------------------------  bdf11\n*        This routine is for NON-EAV DASD,                        bdf11\n*        extent table in old form CCCCHHHH                        bdf11\n* --------------------------------------------------------------  bdf11\nNON_EAV  DS    0H                                                 bdf11\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         L     R1,FULL                                            BDF07\n*BDF07*  LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         S     R1,FULL                 SUBTRACT STARTING FROM END BDF07\n         M     R0,TRKPRCYF             MULTIPLY BY TRACKS PER CYL BDF07\n*BDF07*  SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n*BDF07*  MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         A     R1,FULL                 ADD TO TRACK COUNT         BDF07\n*BDF07*  AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         S     R1,FULL                 SUBTRACT FROM TRACK COUNT  BDF07\n*BDF07*  SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,1(R6)                ADD 1 TRACK                BDF07\n*BDF07*  LA    R6,R1(R6)               ADD 1 TRACK\n*\n* --------------------------------------------------------------  bdf11\nNEXT_EXT DS    0H                                                 bdf11\n* --------------------------------------------------------------  bdf11\n         LA    R5,4(R5)                pointer to next extent\n         BRCT  R4,DSATTRKS             decrement extent count\n*                                                                 bdf11\n         L     R4,EXTENTLF             number extents left        bdf11\n         CH    R4,=H'0'                Q: are ther any ?          bdf11\n         JNH   DSATUTRK                NO, finished               bdf11\n*                                                                 bdf11\n         NC    NEXTFMT3,NEXTFMT3       Q:is there a FMT-3 chain ? bdf11\n         JNZ   DSCB3#15                YES, go to get DSCB-3      bdf11\n*                                                                 bdf11\n         CLI   DS1FMTID,DS8IDC         Q:is this a FMT-8 ?        bdf11\n         JNE   DSCB3#10                NO, go for FMT-3 DSCB      bdf11\n*                                                                 bdf11\n* --------------------------------------------------------------  bdf11\n*        a FMT-8 DS1PTRDS points-to the first FMT-9               bdf11\n* --------------------------------------------------------------  bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-9 ptr ?   bdf11\n         JNZ   DSCB9#10                YES, go to get it          bdf11\n*                                                                 bdf11\n         ABEND 4016               *STOP* IF FMT-8 BUT NO FMT-9    bdf11\n*                                                                 bdf11\nDSCB9#10 DS    0H                                                 bdf11\n         OBTAIN DSATDCB9,EADSCB=OK     get format 9 DSCB          bdf11\n         LTR   R15,R15                 TEST RETURN CODE           bdf11\n         JNZ   DSNERR                                             bdf11\n*                                                                 bdf11\n         LA    R4,DS9NUMF3             get num of FMT-3 pointers  bdf11\n         STH   R4,DS3LEFT              save for later use         bdf11\n         LA    R5,DS9F3P               first FMT-3 pointer        bdf11\n         NC    0(5,R5),0(R5)           Q: is it valid CCHHR?      bdf11\n         JZ    DSATUTRK                NO - finished              bdf11\n*                                                                 bdf11\n         ST    R5,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         J     DSCB3#20                go for DSCB3 processing    bdf11\n*                                                                 bdf11\nDSCB3#10 DS    0H                                                 bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-3 ptr ?   bdf11\n         JZ    DSATUTRK                NO, finished               bdf11\n*                                                                 bdf11\n         LA    R0,DS1PTRDS             pointer to FMT-3 DSCB      bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         J     DSCB3#20                go for DSCB3 processing    bdf11\n*                                                                 bdf11\n*        process FMT-3 DSCB with 13 extents                       bdf11\nDSCB3#15 DS    0H                                                 bdf11\n*bdf11   LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n*                                                                 bdf11\nDSCB3#20 DS    0H                                                 bdf11\n         OBTAIN DSATDCB3,EADSCB=OK     GET THE FORMAT 3 DSCB      bdf11\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         ST    R0,NEXTFMT3             save as Flag               bdf11\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n*\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS         bdf11\n         LR    R0,R4                   TOTAL EXTENTS              bdf11\n         SR    R0,R15                  EXTENTS LEFT               bdf11\n         ST    R0,EXTENTLF             SAVE FOR LATER             bdf11\n         LA    R5,3*4                  point to FMT-3 execs       bdf11\n         CH    R4,=H'13'               CAN WE DO ALL?             bdf11\n         JL    DSATTRKS                YES, BRANCH                bdf11\n*                                                                 bdf11\n         LH    R4,=H'13'               NO, DO 13 NEXT             bdf11\n         J     DSATTRKS                CONTINUE               ABL NOV92\n*\n* --------------------------------------------------------------  bdf11\n*        DSCBs processed, show EXTENT values                      bdf11\n* --------------------------------------------------------------  bdf11\nDSATUTRK DS    0H\n         CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO MESSAGE          BDF07\n*BDF07*  MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         JZ    DSATXNTS\n*\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n*bdf11 12.10.2011                                                 bdf11\n         TM    DS1FLAG1,DS1LARGE       Q:large file, size > 64K   bdf11\n         JNO   DSATUT10                N- go for next check       bdf11\n*\n         ICM   R1,B'0100',DS1TTTHI     get high order byte        bdf11\n         J     DSATUT20                go on                      bdf11\n*                                                                 bdf11\nDSATUT10 DS    0H                                                 bdf11\n         CLI   DS1FMTID,DS8IDC         Q:is this a FMT-8 ?        bdf11\n         JNE   DSATUT20                N-DO OLD WAY               bdf11\n*                                                                 bdf11\n         ICM   R1,B'1100',DS1TRBAL     get high order bytes       bdf11\n*                                                                 bdf11\nDSATUT20 DS    0H                                                 bdf11\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   8(7,R2),DSATDEC+1       MOVE INTO MESSAGE          BDF07\n*BDF07*  MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n*SMS0001 IC    R1,DS1NOPEV             LOAD EXTENTS\n         IC    R1,DS1NOEPV             LOAD EXTENTS             SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   16(3,R2),DSATDEC+5      MOVE INTO MESSAGE          BDF08\n*BDF08*  MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n*BDF08*  CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n*BDF08*  BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n*BDF08*  MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND DS    0h\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         JE    NOSECOND\n*\n*--------secondary space (amount and allocation unit)\n         LA    R2,21(R2)               INCREMENT FIELD POINTER    bdf11\n*bdf11   LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCAL1,DS1EXT         Q:EXTEND 2NDARY SPACE?   SMS0001\n         JNO   NOAVGREC                N-DO OLD WAY             SMS0001\n*\n         TM    DS1SCEXT,DS1SCAVB       Q:AVERAGE BLOCK DATA SET?SMS0001\n         JNO   TRYMB                   N-TRY MB TEST            SMS0001\n*\n         XR    R1,R1                   Y-DISPLAY BLKSZ AND AMT  SMS0001\n         ICM   R1,B'0011',DS1SCXTV     COPY TO ALIGNED (F) WOR  SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   5(5,R2),DSATDEC+3       COPY ORIGINAL AVGBLKSZ   SMS0001\n         J     SECAMT                  GET # OF BLOCKS          SMS0001\n*\nTRYMB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCMB        Q:AVGREC=M DATA SET?     SMS0001\n         JNO   TRYKB                   N-TRY KB TEST            SMS0001\n*\n         MVI   9(R2),C'M'              INDICATE MEGABYTES       SMS0001\n         J     SECBYTES                CLEAR                    SMS0001\n*\nTRYKB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCKB        Q:AVGREC=K DATA SET?     SMS0001\n         JNO   TRYB                    N-TRY B TEST             SMS0001\n*\n         MVI   9(R2),C'K'              INDICATE KILOBYTES       SMS0001\n         J     SECBYTES                                         SMS0001\n*\nTRYB     EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCUB        Q:AVGREC=U DATA SET?     SMS0001\n         JNO   NOAVGREC                N-DO OLD WAY             SMS0001\n*\n         MVI   9(R2),C'B'              INDICATE BYTES           SMS0001\n*        J     SECBYTES                                         SMS0001\n*\nSECBYTES EQU   *                       GET NUMBER OF BYTES      SMS0001\n         XR    R1,R1                   CLEAR FOR INSERT         SMS0001\n         ICM   R1,B'0011',DS1SCXTV     SEC SPACE EXTENSION AMT  SMS0001\n         TM    DS1SCXTF,DS1SCCP1       Q:ADJUSTED BY 256?       SMS0001\n*AF**    BNO   *+8                     N-DON'T ADJUST           SMS0001\n         JNO   SECBYTE1                N-DON'T ADJUST          AF jan13\n         SLL   R1,8                    Y-MULTIPLY BY 256        SMS0001\nSECBYTE1 EQU   *\n         TM    DS1SCXTF,DS1SCCP2       Q:ADJUSTED BY 65536?     SMS0001\n*AF**    BNO   *+8                     N-DON'T ADJUST           SMS0001\n         JNO   SECBYTE2                N-DON'T ADJUST           SMS0001\n         SLL   R1,16                   Y-MULTIPLY TO 65536      SMS0001\nSECBYTE2 EQU   *\n         CLI   9(R2),C'B'              Q:SPACE IN BYTES?        SMS0001\n         JNE   TESTKB                  N-SEE IF IN K            SMS0001\n*\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         JL    DOSEC                   N-JUST DO IT             SMS0001\n*\n         MVI   9(R2),C'K'              Y-CHANGE TO KB           SMS0001\n         SRL   R1,10                   BYTES/1024               SMS0001\nTESTKB   EQU   *                                                SMS0001\n         CLI   9(R2),C'K'              Q:SPACE IN KBYTES?       SMS0001\n         JNE   TESTMB                  N-SEE IF IN M            SMS0001\n*\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         JL    DOSEC                   N-JUST DO IT             SMS0001\n*\n         MVI   9(R2),C'M'              Y-CHANGE TO MB           SMS0001\n         SRL   R1,10                   KBYTES/1024              SMS0001\nTESTMB   EQU   *                                                SMS0001\n         CLI   9(R2),C'M'              Q:SPACE IN MBYTES?       SMS0001\n         JNE   DOSEC                   N-JUST DO IT             SMS0001\n*\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         JL    DOSEC                   N-JUST DO IT             SMS0001\n*\n         MVI   9(R2),C'G'              Y-CHANGE TO GB           SMS0001\n         SRL   R1,10                   MBYTES/1024              SMS0001\nDOSEC    EQU   *                                                SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   1(8,R2),DSATDEC                                  SMS0001\n         BR    R14                     2NDARY SPACE COMPLETE    SMS0001\n*\nNOAVGREC EQU   *                                                SMS0001\n         TM    DS1SCALO,DS1CYL         TEST ALLOCATION TYPE       bdf11\n*bdf11   TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         JM    TRKALLOC\n         JO    CYLALLOC\n*\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         J     SECAMT\n*\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         J     SECAMT\n*\nTRKALLOC DS    0H                                                 bdf11\n         TM    DS1SCALO,DS1TRK         TEST FOR TRACKS OR BLOCKS  bdf11\n*bdf11OC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         JZ    BLKALLOC\n*\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         J     SECAMT\n*\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n**       LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         N     R1,=X'00FFFFFF'         ZERO high byte          AF jan13\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND DS    0h\n         BR    R14                     RETURN\n*\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n* --------------------------------------------------------------  BDF11\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS DS    0H\n         ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n         ST    R5,NEXTFMT3             clear flag                 bdf11\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         JZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n*\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         JE    $ALLEX99                YES, BRANCH                ABL94\n*\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         JE    $ALLEX99                YES, BRANCH                ABL94\n*\n* --------------------------------------------------------------  bdf11\n*        Display header line for EXTents                          bdf11\n* --------------------------------------------------------------  bdf11\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BRAS  R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n*\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n*bdf11*  MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n*\n*        process the 3 extents in FMT-1/8 DSCB                    bdf11\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         JL    $ALLEX10                YES, BRANCH                ABL94\n*\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 DS    0H\n         EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n**       EXRL  R0,DSATADDR(R5)   not valid    with index Reg\n*bdf11*  MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'             Q: valid extent flags?     ABL94\n         JE    $ALLEX99                No: finished - go          ABL94\n*\n* ----------------------------------------------------------------\n*        put DSN attributes to output field\n* ----------------------------------------------------------------\n*   R1 needed for calculation, R7 points to Extent entry in DSCB  BDF07\n*BDF07*  LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         JNO   NOT$CYL                  NO - SKIP                 ABL94\n*                                                                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         J     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  DS    0H                                                 ABL94\n         TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         JZ    YES$CYL                  NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  DS    0H                                                 ABL94\n         TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         JZ    $ALLEX13                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX13 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         JZ    $ALLEX14                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX14 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         JZ    $ALLEX15                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n$ALLEX15 DS    0H                                                 BDF07\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         JZ    $ALLEX16                 NO - SKIP                 BDF07\n*                                                                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*--- EXTENT SEQUENCE NUMBER                                       ABL94\n$ALLEX16 DS    0H                                                 BDF07\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R7)                GET EXTENT SEQ NUMBER     BDF07\n*BDF07*  IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n* --------------------------------------------------------------  bdf11\n         XC    FULL,FULL               clear field                bdf11\n         XR    R0,R0                   clear register             bdf11\n* --------------------------------------------------------------  bdf11\n*        Check for EAV                                            bdf11\n* --------------------------------------------------------------  bdf11\n         CLI   DS1FMTID,DS8IDC    IS THIS A FMT-8 ?               bdf11\n         JNE   $ALLEX20           NO, go for CCHH processing      bdf11\n*\n* --------------------------------------------------------------  bdf11\n*        extent table in new form CCCCcccH                        bdf11\n* --------------------------------------------------------------  bdf11\n*        EXTENT start address in hex                              bdf11\n         LA    R8,2(R7)                  point to extent-start    bdf11\n         TRKADDR NORMALIZE,(R8),REG=R1   get cccCCCCH             bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         UNPK  OL@START+1(8+1),FULL+1                             bdf11\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  bdf11\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             bdf11\n         MVC   OL@START(7),OL@START+1   SHIFT OVER cccCCCC        bdf11\n         MVI   OL@START+7,C':'          PUT IN SEPARATOR          bdf11\n*                                                                 bdf11\n*        EXTENT start address in decimal                          bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1 get cyl                   bdf11\n         XR    R0,R0                    clear register            bdf11\n         M     R0,TRKPRCYF              multiply by TRK per CYL   bdf11\n         ST    R1,TRKCYL                save track# from cyls     bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1 get trk                   bdf11\n         A     R1,TRKCYL                add track# to cyls        bdf11\n         ST    R1,TRKS#                 save TRK_count            bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BRAS  R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@STRK,DECNUM+12-7      get 7 digit number        bdf11\n*                                                                 bdf11\n*        EXTENT  end  address in hex                              bdf11\n         LA    R8,6(R7)                  point to extent-End      bdf11\n         TRKADDR NORMALIZE,(R8),REG=R1   get cccCCCCH             bdf11\n         ST    R1,FULL                   save cyl-no              bdf11\n         UNPK  OL@END+1(8+1),FULL+1                               bdf11\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  bdf11\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             bdf11\n         MVC   OL@END(7),OL@END+1       SHIFT OVER cccCCCC        bdf11\n         MVI   OL@END+7,C':'            PUT IN SEPARATOR          bdf11\n*                                                                 bdf11\n*        EXTENT  end  address in decimal                          bdf11\n         TRKADDR EXTRACTCYL,(R8),REG=R1 get cyl                   bdf11\n         XR    R0,R0                    clear register            bdf11\n         M     R0,TRKPRCYF              multiply by TRK per CYL   bdf11\n         ST    R1,TRKCYL                save track# of cyls       bdf11\n         TRKADDR EXTRACTTRK,(R8),REG=R1 get trk                   bdf11\n         A     R1,TRKCYL                add tracks to cyls        bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BRAS  R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@ETRK,DECNUM+12-7      get 7 digit number        bdf11\n*                                                                 bdf11\n*        EXTENT  length in decimal                                bdf11\n         S     R1,TRKS#                 subtract start from end   bdf11\n         LA    R1,1(R1)                 add 1 TRK                 bdf11\n         LR    R0,R1                    parm expected in R0       bdf11\n         BRAS  R14,CONVDEC0             convert to decimal        bdf11\n*                                                                 bdf11\n         MVC   OL@LNTH,DECNUM+12-7      get 7 digit number        bdf11\n* ---------------------------------------------------------------------\n*                                                                 bdf11\n         BRAS  R2,PUTL                  DISPLAY LINE              ABL94\n         J     $ALLEX25           go for next extent              bdf11\n*\n* --------------------------------------------------------------  bdf11\n*        This routine is for NON-EAV DASD,                        bdf11\n*        extent table in old form CCCCHHHH                        bdf11\n* --------------------------------------------------------------  bdf11\n$ALLEX20 DS    0H\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R7)  CCHH EXTENT START       BDF07\n*BDF07*  UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         XR    R0,R0                    clear                     BDF07\n         XR    R1,R1                    clear                     BDF07\n         XC    FULL,FULL                clear field               BDF07\n*BDF07*  LH    R0,2(,R1)                GET START CC              ABL94\n*BDF07*  MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n*BDF07*  AH    R0,4(,R1)                ADD START HH              ABL94\n         MVC   HALF(2),2(R7)           LOAD STARTING CYL NUMBER   BDF07\n         L     R1,FULL                   for calculation          BDF07\n         M     R0,TRKPRCYF              calc start CC in trks     BDF07\n         MVC   HALF(2),4(R7)            get start HH              BDF07\n         A     R1,FULL                  add start HH              BDF07\n         LR    R0,R1                    parm expected in R0       BDF07\n         ST    R0,TRKFRST               save for later use        BDF07\n*---\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@STRK,DECNUM+12-7      GET 7 DIGIT NUMBER        BDF07\n*BDF07*  MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R7)  CCHH EXTENT END           BDF07\n*BDF07*  UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         XR    R0,R0                    clear                     BDF07\n         XR    R1,R1                    clear                     BDF07\n         XC    FULL,FULL                clear field               BDF07\n*BDF07*  LH    R0,6(,R1)                GET END CC                ABL94\n*BDF07*  MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n*BDF07*  AH    R0,8(,R1)                ADD END HH                ABL94\n         MVC   HALF(2),6(R7)            get ending CYL number     BDF07\n         L     R1,FULL                   for calculation          BDF07\n         M     R0,TRKPRCYF              calc end   CC in trks     BDF07\n         MVC   HALF(2),8(R7)            get end   HH              BDF07\n         A     R1,FULL                  add end   HH              BDF07\n         LR    R0,R1                    parm expected in R0       BDF07\n         ST    R0,TRKLAST               save for later            BDF07\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@ETRK,DECNUM+12-7      GET 7 DIGIT NUMBER        BDF07\n*BDF07*  MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         L     R1,TRKLAST                                         BDF07\n         L     R0,TRKFRST                                         BDF07\n         SR    R1,R0                    calc extent size          BDF07\n         LA    R0,1(R1)                 add 1 track               BDF07\n*BDF07*  LH    R15,6(,R1)               GET END CC                ABL94\n*BDF07*  SH    R15,2(,R1)               SUB START CC              ABL94\n*BDF07*  MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n*BDF07*  AH    R15,8(,R1)               ADD END HH                ABL94\n*BDF07*  SH    R15,4(,R1)               SUB START HH              ABL94\n*BDF07*  LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n*---\n***\n         BRAS  R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n*\n         MVC   OL@LNTH,DECNUM+12-7     GET 7 DIGIT NUMBER OF TRKS BDF07\n*BDF07*  MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BRAS  R2,PUTL                  DISPLAY LINE              ABL94\n*\n* --------------------------------------------------------------  bdf11\n$ALLEX25 DS    0H\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BRCT  R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n*\n*bdf11*  NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n*bdf11*  BZ    $ALLEX20                NO, DONE                   ABL94\n*\n*bdf11*  LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        bdf11\n         CH    R4,=H'0'                Q: are ther any ?          bdf11\n         JNH   $ALLEX99                NO, finished               bdf11\n*                                                                 bdf11\n         NC    NEXTFMT3,NEXTFMT3       Q:is there a FMT-3 chain ? bdf11\n         JNZ   $ALLEX80                YES, go to get next DSCB-3 bdf11\n*                                                                 bdf11\n         CLI   DS1FMTID,DS8IDC         Q:is this a FMT-8 ?        bdf11\n         JNE   $ALLEX75                NO, go for FMT-3 DSCB      bdf11\n*                                                                 bdf11\n* --------------------------------------------------------------  bdf11\n*        a FMT-8 DS1PTRDS points-to the first FMT-9               bdf11\n* --------------------------------------------------------------  bdf11\n$ALLEX70 DS    0H                                                 bdf11\n         OBTAIN DSATDCB9,EADSCB=OK     get format 9 DSCB          bdf11\n         LTR   R15,R15                 TEST RETURN CODE           bdf11\n         JNZ   DSNERR                                             bdf11\n*                                                                 bdf11\n         LA    R4,DS9NUMF3             get num of FMT-3 pointers  bdf11\n         STH   R4,DS3LEFT              save for later use         bdf11\n         LA    R5,DS9F3P               first FMT-3 pointer        bdf11\n         NC    0(5,R5),0(R5)           Q: is it valid CCHHR?      bdf11\n         JZ    $ALLEX99                NO - finished\n*                                                                 bdf11\n         ST    R5,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         J     $ALLEX85                go for DSCB3 processing    bdf11\n*                                                                 bdf11\n$ALLEX75 DS    0H                                                 bdf11\n         NC    DS1PTRDS,DS1PTRDS       Q:is there a FMT-3 ptr ?   bdf11\n         JZ    $ALLEX99                NO, finished               bdf11\n*                                                                 bdf11\n         LA    R0,DS1PTRDS             pointer to FMT-3 DSCB      bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            bdf11\n         J     $ALLEX85                go for DSCB3 processing    bdf11\n*                                                                 bdf11\n*        process FMT-3 DSCB with 13 extents                       bdf11\n$ALLEX80 DS    0H\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n*\n$ALLEX85 DS    0H\n         OBTAIN DSATDCB3,EADSCB=OK     GET THE FORMAT 3 DSCB      bdf11\n*bdf11*  OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n*bdf11*  LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB 3     bdf11\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         ST    R0,NEXTFMT3             save as Flag               bdf11\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         JNZ   DSNERR                  NO, SOME ERROR             ABL94\n*\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         bdf11\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         JL    $ALLEX10                YES, BRANCH                ABL94\n*\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         J     $ALLEX10                CONTINUE                   ABL94\n*\n*----------------------------------------------------------------\n*bdf11*  $ALLEX20 DS    0H\n$ALLEX99 DS    0H\n         L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\n*\nCONVDEC0 DS    0h\n         CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\n*\n* ------------------------------------------------------------------- *\n*        moved DECMASK, HEXTAB and HEADER3 from instructions   AF jan13\n*        moved << EXECUTED INSTRUCTION >>    to LITERALS area  AF jan13\n* ------------------------------------------------------------------- *\n*\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         JZ    DSORG001\n*\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\nDSORG001 DS    0H                                               SMS0003\n         LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS SMS0003\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         JZ    DSORGCLC\n*\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         JE    DSORGMVC\n*\n         BRXLE R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\n*\nDSORGMVC DS    0h\n         MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         TM    DS1FLAG1,DS1LARGE       LARGE FORMAT?          DRK AUG11\n*        BNO   *+4+4+4                 NO, BRANCH             DRK AUG11\n         JNO   DSORGMV2                NO, BRANCH              AF jan13\n*\n         MVI   3(R2),C'L'              YES, NOTE IT           DRK AUG11\n         J     DSORGTST                                       DRK AUG11\n*\nDSORGMV2 DS    0h                                              AF jan13\n         TM    DS1REFD+3,X'04'         EXTENDED FORMAT?       DRK AUG11\n         JNO   DSORGTST                NO, BRANCH             DRK AUG11\n*\n         MVI   3(R2),C'X'              YES, NOTE IT           DRK AUG11\nDSORGTST DS    0H                                             DRK AUG11\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         JE    DSORGPO\n*\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         JE    DSORGPS\n*\nDSORGBAD DS    0h\n         OI    FLAGS,$NOTPOPS\n         J     DSORGRTN\n*\nDSORGPO  DS    0h\n         OI    FLAGS,$DSPO             ASSUME PARTITIONED      @KLS0710\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         JNO   DSORGRTN                NO, BRANCH             ABL NOV92\n*\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         TM    DS1SMSFG,DS1PDSEX       IS THIS A HFS?          @KLS0710\n         JNO   DSORGRTN                NO, BRANCH              @KLS0710\n*\n         MVC   1(2,R2),=C'HF'          YES, CHANGE TO \"HF\"     @KLS0710\n         XI    FLAGS,$DSPO             NOT PARTITIONED         @KLS0710\n         OI    FLAGS,$NOTPOPS                                  @KLS0710\n         J     DSORGRTN\n*\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         JZ    DSATT\n*\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         JNZ   DSATUORV\n*\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         J     DSATT\n*\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         JZ    DSATV\n*\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         J     DSATT\n*\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         JZ    DSATB\n*\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         JZ    DSATS\n*\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         JZ    DSATA\n*\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         JZ    DSATM\n*\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         JZ    DSATBLK\n*\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  DS    0h\n         L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BRAS  R5,DATECONV             CONVERT IT\n*\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n*\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  DS    0h\n         L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BRAS  R5,DATECONV             CONVERT IT\n*\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n*\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BRAS  R5,DATECONV             CONVERT IT\n*\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         JZ    REFRTRN\n*\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n*\n         SPACE ,                                                SMS0001\n***********************************************************************\n* PROCESS SMS INDICATOR FLAG                                    SMS0001\n* 1) INDICATE IF 'MANAGED' FLAG IS ON.                          SMS0001\n* 2) IF BLOCKSIZE IS DISPLAYED, SET INDICATOR IF IT WAS SYSTEM  SMS0001\n*    DETERMINED.                                                SMS0001\n* 3) DO SMS KEYWORDS IF SPECIFIED.                              SMS0003\n***********************************************************************\n$SMS     EQU   *                                                SMS0001\n         CLC   DCB,=H'2'               Q:NODCB SPECIFIED?       SMS0001\n         JE    $SMS_100                Y-DON'T WORRY ABOUT BLKSZSMS0001\n*\n         TM    DS1SMSFG,DS1CRSDB       Q:SDB BLKSZ?             SMS0001\n         JNO   $SMS_100                N-DON'T FLAG             SMS0001\n*\n         L     R2,DCBFLD               Y-GET ADDR OF PARM       SMS0001\n         MVI   10(R2),C'*'             SET SDB BLKSZ INDICATOR  SMS0001\n$SMS_100 EQU   *                                                SMS0001\n         L     R2,SMSFLD               LOAD OUTPUT AREA ADDRESS SMS0001\n         MVC   0(3,R2),=C'YES'         ASSUME SMS MANAGED       SMS0001\n         TM    DS1SMSFG,DS1SMSDS       Q:CORRECT ASSUMPTION?    SMS0001\n         BOR   R14                     Y-WE'RE SET              SMS0001\n*\n         MVC   0(3,R2),=C'NO '         N-CHANGE TO NO           SMS0001\n         BR    R14                     RETURN TO CALLER         SMS0001\n*\n$SMS2    EQU   *                                                SMS0002\n         ICM   R15,B'1111',IGWASMSV    GET ROUTINE ADDRESS      SMS0002\n         BZR   R14                     RETURN IF NONE           SMS0002\n*\n         ST    R14,$SMSAVE             SAVE RETURN ADDRESS      SMS0002\n* -----------------------------------------------------------  AF jan13\n*        We are AMODE 31 now already                           AF jan13\n*        BRAS  R14,AMODE31             TO CALL ROUTINE          SMS0002\n* -----------------------------------------------------------  AF jan13\n*\n         CALL  (15),MF=(E,CALL_L)      GET SMS INFO             SMS0002\n* -----------------------------------------------------------  AF jan13\n*        We are AMODE 31 now already                           AF jan13\n*        BRAS  R14,AMODE24             TO GET BACK              SMS0002\n* -----------------------------------------------------------  AF jan13\n*\n         LTR   R15,R15                 DID IT WORK?             SMS0002\n         JNZ   $SMS_900                N-SKIP THIS JUNK         SMS0002\n*\nPROMGMTC DS    0h\n         AIF   ('&DEBUG' NE 'ON').NODEBUG2\n***  debug display begin                                          debug\n         STM   R0,R15,$REGS                                       debug\n         BRAS  R2,PUTL                 DISPLAY OUTLINE            debug\n         MVC   OUTDEBUG,SLASHS                                    debug\n         MVC   OUTDEBUG+5(8),=C'DEBUG2  '      NODEBUG2           debug\n         MVC   OUTDEBUG+15(4),$R15                                debug\n         MVC   OUTDEBUG+20(8),IGWMGMTC                            debug\n         MVC   OUTDEBUG+30(8),IGWSTORC                            debug\n         MVC   OUTDEBUG+40(8),IGWDATAC                            debug\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          debug\n         MVC   OUTLINE(L'OUTDEBUG),OUTDEBUG                       debug\n         BRAS  R2,PUTL                 DISPLAY THE LINE           debug\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          debug\n         LM    R0,R15,$REGS                                       debug\n***  debug display end                                            debug\n.NODEBUG2 ANOP\n         CLI   MGMTCLAS+1,2            TEST FOR NOMGMTCLASS     SMS0002\n         JE    PROSTORC                SKIP                     SMS0002\n*\n         L     R2,MGMTCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWMGMTC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         JE    PROSTORC                N-LEAVE NULL             SMS0002\n*\n         MVC   0(8,R2),IGWMGMTC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPROSTORC DS    0h\n         CLI   STORCLAS+1,2            TEST FOR NOSTORCLASS     SMS0002\n         JE    PRODATAC                SKIP                     SMS0002\n*\n         L     R2,STORCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWSTORC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         JE    PRODATAC                N-LEAVE NULL             SMS0002\n*\n         MVC   0(8,R2),IGWSTORC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPRODATAC DS    0h\n         CLI   DATACLAS+1,2            TEST FOR NODATACLASS     SMS0002\n         JE    $SMS_900                SKIP                     SMS0002\n*\n         L     R2,DATACFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWDATAC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         JE    $SMS_900                N-LEAVE NULL             SMS0002\n*\n         MVC   0(8,R2),IGWDATAC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\n$SMS_900 EQU   *                                                SMS0002\n         L     R14,$SMSAVE             RESTORE RETURN ADDRESS   SMS0002\n         BR    R14                     RETURN TO CALLER         SMS0001\n*\n* -----------------------------------------------------------  AF jan13\n*        We are AMODE 31 now                                   AF jan13\n*AMODE31  EQU   *                                               SMS0002\n*        O     R14,=X'80000000'        SET 31-BIT ADDRESS MODE  SMS0002\n*        BSM   R0,R14                  RETURN IN 31-BIT MODE    SMS0002\n*\n*AMODE24  EQU   *                                               SMS0002\n*        LA    R14,0(,R14)             SET 24-BIT ADDRESS MODE  SMS0002\n*        BSM   R0,R14                  RETURN IN 24-BIT MODE    SMS0002\n* -----------------------------------------------------------  AF jan13\n*\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV DS    0h\n**       LA    R1,0(R1)                ZERO HIGH BYTE\n         N     R1,=X'00FFFFFF'         ZERO high byte          AF jan13\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 DS    0h\n         UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         JNE   BADDAY\n*\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         JZ    BADDAY\n*\n         TM    WORK+3,X'06'\n         JZ    BADDAY\n*\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         JH    BADDAY\n*\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         JE    NODATE\n*\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         JE    LEAP\n*\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         JNH   LEAP\n*\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     DS    0h\n         CP    DAY,=P'1'               TEST MINIMUM DAY\n         JL    BADDAY\n*\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         JH    BADDAY\n*\n*        LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         LARL  R6,CALTABLE             LOAD TABLE ADDRESS      AF jan13\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     DS    0h\n         CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         JNH   OUT\n*\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         J     LOOP\n*\nOUT      DS    0h\n         UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         J     DATERTRN\n*\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         J     DATERTRN\n*\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   DS    0h\n         UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n*\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n*\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\nERRPARS  DS    0H                                               SMS0003\n         MVC   OUTLINE(28),DSATERR1                             SMS0003\n         J     SETERROR\n*\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\nNOID     DS    0H                                               SMS0003\n         MVC   OUTLINE(32),DSATERR7                             SMS0003\n         J     RLSA\n*\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\nTOOLONG  DS    0H                                               SMS0003\n         MVC   OUTLINE,BLANKS                                   SMS0003\n         MVC   OUTLINE(44),DSATERR4\nRLSA     DS    0H                                                 bdf11\n         IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BRAS  R2,PUTL2                PUT MESSAGE\n*\n         LA    R3,16                   SET CONDITION CODE\n         J     EXIT2\n*\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         JNE   LOCERR                                          HD JAN99\n*\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   DS    0h\n         BRAS  R2,PUTL                 PRINT IT\n         J     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         JE    RESETLIN\n*\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         J     PUTLINE                 PRINT THE LINE\n*\n*--------ERROR IN OBTAIN MACRO\nDSNERR   DS    0h\n         CH    R15,=H'8'               TEST RETURN CODE\n         JH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n*\n         JE    TESTVALL\n*\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         JE    RESETLIN\n*\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         JE    PUTLINE                 YES, BRANCH                ABL94\n*\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         JE    PUTLINE                 YES, BRANCH                ABL94\n         J     DSNERR1\n*\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         JE    RESETLIN\n*\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         J     PUTLINE                 PRINT IT\n*\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         J     PUTLINE                 DISPLAY MESSAGE\n*\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         JNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n*\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         J     PUTLINE                 DISPLAY MESSAGE              SPG\n*\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         JE    PUTLHPDS\n*\nPUTL2    DS    0H\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n*\nPUTLHPDS DS    0h\n         ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         JZ    NOTPDS                  NO\n*\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n*\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         JNZ   RETURN                  NO, **ATTENTION** EXIT\n*\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\n*\nNOTPDS   DS    0H\nPUTLHCPY DS    0h\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         JZ    PUTLBACK\n*\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK DS    0h\n         BR    R2                      RETURN\n*\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  DS    0h\n         LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n*AF**    BNZ   *+8                        YES, BRANCH\n         JNZ   DCBEXIT1                   YES, BRANCH          AF jan13\n*\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\nDCBEXIT1 DS    0h\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n*AF**    BNZ   *+8                        YES, BRANCH\n         JNZ   DCBEXIT2                   YES, BRANCH          AF jan13\n*\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\nDCBEXIT2 DS    0h\n         BR    R14                         EXIT\n*\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nconst    DC    CL8'LITERALS'                                   AF jan13\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L    moved here          AF jan13\nLSHOWCAT EQU   *-SHOWCATF                     from instr area  AF jan13\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\n*TTRLOC  CAMLST BLOCK,0,0,0                                    #DD09294\nTTRLOC   DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n         DC    A(0)                              PARAMETER THREE\n         DC    A(0)                              PARAMETER FOUR\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nIGWASMSC DC    CL8'IGWASMS'            SMS ATTRIBUTE ROUTINE    SMS0002\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n*\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\n*\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\n         SPACE\nMODLINE  DC    H'204,0'                                           ABL94\n*LANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n*\n* ------------------------------------------------------------------- *\n*        moved DECMASK, HEXTAB and HEADER3 from instructions   AF jan13\n*        and   << EXECUTED INSTRUCTION >>    to LITERALS area  AF jan13\n*\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\n*bdf11*  DC    CL75'EXT#-START/CCHH----S/TRK----END/CCHH----E/TRK----LE\nHEADER3  DC    CL75'EXT#--START TRK----Start----END TRK-----End------LE$\n               NGTH--TYPE-------------------------'               BDF07\n*old*R3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--\n*old*          TYPE-------------------------'                     ABL94\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1   DSCB 1/8   << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2   DSCB 1/8   << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3   DSCB 1/8   << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12  DSCB 3     << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13  DSCB 3     << EXECUTED INSTRUCTION >>\n* ------------------------------------------------------------------- *\n         EJECT\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\n*        avoid \"ASMA303W Multiple address resolutions\"         AF jan13\n         DROP   R12         using r12,const                    AF jan13\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*        place it here to avoid \"ASMA300W USING overridden\"    AF jan13\n         DROP  R13                   I DON'T WANT IT TO USE 13 AF jan13\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS     upper\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY    savearea\n*AF**    DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         JNE   PDSSAVE\n*\n         BRCT  R2,PDSEND               DECREMENT COUNTER\n*\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         JZ    TESTORG\n*\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         JNE   ERRDAIR\n*\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   ERRDAIR\n*\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         JNZ   ERRDAIR\n*\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  DS    0h\n         TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         JZ    ERRDSORG\n*\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         JZ    ERROPEN\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         JE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n*\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         JNP   NEXTBLK\n*\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         JNE   PROCENTR\n*\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         J     NEXTBLK\n*\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         JZ    DIRLEN\n*\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         J     NEXTENT\n*\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         J     PDSRTRN\n*\n*        avoid \"ASMA300W USING overridden\"                     AF jan13\n         DROP  R9           USING DAPB08,R9                    AF jan13\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  DS    0h\n         L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         JNE   CTLGERR\n*\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         JNE   DYNALCER\n*\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         J     PDSRTRN\n*\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         J     PDSRTRN\n*\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         JNE   OTHERERR\n*\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         J     PDSRTRN\n*\nOTHERERR DS    0h\n         ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         J     PDSRTRN\n*\n*--------OPEN ERROR\nERROPEN  DS    0h\n         L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         J     PDSRTRN\n*\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         J     PDSRTRN\n*\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n*\nPDSRTRN  $RTRN RC=0\n*  re-establish previous USING                                AF jan13\n         DROP  R1\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nSMS      IKJKEYWD DEFAULT='NOSMS'                               SMS0001\n         IKJNAME 'SMS'                                          SMS0001\n         IKJNAME 'NOSMS'                                        SMS0001\nDATACLAS IKJKEYWD DEFAULT='DATACLASS'                           SMS0002\n         IKJNAME 'DATACLASS'                                    SMS0002\n         IKJNAME 'NODATACLASS'                                  SMS0002\nMGMTCLAS IKJKEYWD DEFAULT='MGMTCLASS'                           SMS0002\n         IKJNAME 'MGMTCLASS',ALIAS='MANAGEMENTCLASS'            SMS0002\n         IKJNAME 'NOMGMTCLASS',ALIAS='NOMANAGEMENTCLASS'        SMS0002\nSTORCLAS IKJKEYWD DEFAULT='STORCLASS'                           SMS0002\n         IKJNAME 'STORCLASS',ALIAS='STORAGECLASS'               SMS0002\n         IKJNAME 'NOSTORCLASS',ALIAS='NOSTORAGECLASS'           SMS0002\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nSIZE     IKJKEYWD DEFAULT='SIZE'                                SMS0001\n         IKJNAME  'SIZE',SUBFLD=SIZSUB                          SMS0001\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\nSIZSUB   IKJSUBF                       ,                        SMS0001\nWORKSIZE IKJIDENT 'WORKSIZE',INTEG,DEFAULT='8192'               SMS0001\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nDSATDCB9 CAMLST SEEK,0,0,0                                        bdf11\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\n*LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR           #DD09294\nLOCBYTTR DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYF DS    0F                      TRACKS PER CYLINDER        BDF07\n         DS    H                       TRACKS PER CYLINDER High   BDF07\nTRKPRCYL DS    H                       TRACKS PER CYLINDER low    BDF07\n*old*CYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nSMSFLD   DS    A                       ADDR OF SMS FIELD        SMS0001\nDATACFLD DS    A                       ADDR OF DATACLAS FIELD   SMS0002\nMGMTCFLD DS    A                       ADDR OF MGMTCLAS FIELD   SMS0002\nSTORCFLD DS    A                       ADDR OF STORCLAS FIELD   SMS0002\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL250                   OUTPUT LINE             Af jan13\n**TLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL7,CL3                 5 -> 7                     BDF07\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL7,CL3                 5 -> 7                     BDF07\nOL@LNTH  DS    CL7,CL2                 5 -> 7                     BDF07\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nTRKS#    DS    F                       calculation field 4 byte   bdf11\nTRKCYL   DS    F                       calculation field 4 byte   bdf11\nFULL     DS    0F                      calculation field 4 byte   BDF07\n         DS    H                                                  BDF07\nHALF     DS    H                       calculation field 2 byte   BDF07\n*old*HALFDS    H                       HALFWORD ALIGNED WORK AREA\nNEXTFMT3 DS    F                       flag for FMT-3 chain       bdf11\nDS3LEFT  DS    H                       num of DS3 ptr in DS9 left bdf11\nTRKFRST  DS    F                       trk position extent begin  BDF07\nTRKLAST  DS    F                       trk position extent end    BDF07\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    CL(DS3LEN)              FORMAT 3 DSCB (ADD EXTENTS)bdf11\n*SATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)bdf11\nDS9      EQU   *                       Format 9 DSCB              bdf11\n         IECSDSL1 (9)                  Format 9 DSCB              bdf11\n*                                                                 bdf11\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\n*\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\n*\nBLANKS   DS    CL250                   BLANK AREA              AF jan13\n**ANKS   DS    CL200                   BLANK AREA               SMS0002\nSLASHS   DS    CL100                   BLANK AREA               SMS0002\n         SPACE\n****************************************************************SMS0002\n*        IGWASMS FIELDS                                               *\n****************************************************************SMS0002\n         SPACE\nIGWRC    DS    F                       RC FROM IGWASMS          SMS0002\nIGWREAS  DS    F                       REASON CODE FROM IGWASMS SMS0002\nIGWPROB  DS    2F                      PROB DETERMINATION INFO  SMS0002\nIGWLEN   DS    F                       LENGTH OF DATA SET NAME  SMS0002\nIGWDSN   DS    A                       POINTER TO DSN           SMS0002\nIGWSMS   EQU   *                                                SMS0002\nIGWSTORC DS    CL30                    STORAGE CLASS OR BLANK   SMS0002\nIGWMGMTC DS    CL30                    MANAGMENT CLASS OR BLANK SMS0002\nIGWDATAC DS    CL30                    DATA CLASS OR BLANK      SMS0002\nIGWTYPE  DS    F                       DATA SET TYPE            SMS0002+\n                                       1=PDS/E (LIBRARY)        SMS0002+\n                                       0=OTHER                  SMS0002\nCALL_L   CALL  ,(,,,,,,),MF=L          LIST FORM OF CALL        SMS0002\nIGWASMSV DS    V(IGWASMSV)             LOAD'ED ADDR OF IGWASMS  SMS0002\n$SMSAVE  DS    A                       $SMS RETURN ADDRESS      SMS0002\nSAVER7   DS    F                       SAVE AREA FOR R7         SMS0003\nSAVER8   DS    F                       SAVE AREA FOR R8         SMS0003\nSAVER10  DS    F                       SAVE AREA FOR R10        SMS0003\nBASER3   DS    F                       SAVE AREA FOR 3RD BASE   SMS0003\n         DS    0D\n*------------*\n         AIF   ('&DEBUG' NE 'ON').NODEBUG0\n$REGS    DS    0F                              SAVE REGISTERS for debug\n$R00     DS    F                                                  debug\n$R01     DS    F                                                  debug\n$R02     DS    F                                                  debug\n$R03     DS    F                                                  debug\n$R04     DS    F                                                  debug\n$R05     DS    F                                                  debug\n$R06     DS    F                                                  debug\n$R07     DS    F                                                  debug\n$R08     DS    F                                                  debug\n$R09     DS    F                                                  debug\n$R10     DS    F                                                  debug\n$R11     DS    F                                                  debug\n$R12     DS    F                                                  debug\n$R13     DS    F                                                  debug\n$R14     DS    F                                                  debug\n$R15     DS    F                                                  debug\n$RLEN    EQU   *-$REGS                                            debug\nOUTDEBUG DS    CL100                   OUTPUT LINE for debug      debug\n.NODEBUG0 ANOP\n*------------*\n         PRINT ON\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n*                                                                 bdf11\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSATO": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01)\\x00\\x00\\x00\\x923\\x0f\\x00\\x99\\x02_\\x124\\x13S\\x0f2\\x00\\x00\\xe5\\xc5\\xd9\\xe8\\xd6\\xd3\\xc4@@@'", "ispf": {"version": "01.41", "flags": 0, "createdate": "1992-11-25T00:00:00", "modifydate": "1999-01-25T12:34:00", "lines": 4947, "newlines": 3890, "modlines": 0, "user": "VERYOLD"}, "text": "//WSER07J  JOB ...\n//*\n//*  ASM1 -- ASSEMBLES DSAT (YOU MAY OPTIONALLY CHANGE ASMA90 TO IFOX00)\n//*  LINK -- LINKS DSAT INTO 'SYS1.CMDLIB(DSAT)'\n//*  COPY -- COPIES DSAT HELP TO 'SYS2.HELP(DSAT)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*\n//*  LIMITS IN ICF CATALOGS:\n//*\n//*   IF GDG OPTION IS USED, ONLY THE GDG BASE NAME IS DISPLAYED\n//*   WITH THE MESSAGE ' GDG -- IN ICF CATALOG'\n//*\n//*\n//ASM1  EXEC  PGM=ASMA90,REGION=2048K,\n//             PARM=('DECK,NOOBJECT,NORLD,RENT,TERM,XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\nDSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              4 - SUCCESSFUL COMPLETION.             *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LENARD WOREN'S  ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n*     BURLINGAME, CA  94010                                           *\n*     (415) 696-1800                       HOME (408) 997-2366        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\nDS1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\nDS1PDSE  EQU   X'08'                    PDSE DATA SET         ABL NOV92\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\nDS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\nDS3PTRDS DS    XL5                      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\nDSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT       HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n         TITLE 'ENTRY CODING'\nDSAT     $ENTER BASE=(R11,R12),                                        +\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB\n         MVC   DSATHEDR(4),MODLINE\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         DROP  R8                      DROP IOPL BASE REGISTER\n*--------GET CATALOG WORKAREA\n         L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n         CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n         BNE   *+8                   YES, BRANCH\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL EQU   *\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         BE    SEARS               YES, CONTINUE               HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3\n         STM   R1,R4,DSATDCB3\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   ZEROTOT\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    SETUPHDR\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n         BNE   *+8                     YES, BRANCH\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    SETUPHDR\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TRYDEV\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TRYDEV\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         BE    TRYDEVIC\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         BE    TRYALLOC\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    TRYDSORG\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n         LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    TRYDSORG\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    TRYPDS\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    TRYDCB\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    TRYCRDAT\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    TRYEXDAT\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    TRYLREFD\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF\n         BNE   TRYCCHHR\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\nTRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    DODSNAME\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         BH    DSNFLDOK\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\nDSNFLDOK LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         BE    BUILDDSN\n         BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         BNZ   MOVEREST\n*--------APEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\nGETLEN   SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         BNZ   COPYSER\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         BNZ   PROCGRP\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   CHECK8\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         BE    OBTAIN1\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         BNE   PROCGRP\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         BE    PROCTTR\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         BE    PROCGRP                    SU 8 NOT INSTALLED\n         B     LOCERROR\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         BNE   CHECK12\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         BNE   PROCGRP\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         BNE   PROCGRP\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BAL   R2,PUTL                 DISPLAY LINE\n         B     ENDGRP\n         SPACE 2\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         BNE   LOCERROR\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   LOCERROR\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND1\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         B     PROCNTRY                LOAD INDEX NAME\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   LOCERROR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         BE    LNKENTRY\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         BE    DSATNEXT\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         BE    DSNOVER5\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         BE    NDXENTRY\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         BNE   DSNENTRY\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         BE    NDXENTRY\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         BZ    PUTGDG\n         BM    GDGEORD\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         B     PUTGDG\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         BNZ   PUTGDG\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BAL   R2,PUTL                 DISPLAY LINE\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         B     FINDEND\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         BZ    ENDLEVEL\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         B     READCTLG\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         BNZ   TESTDONE\n         TM    FLAGS,GDG               TEST FOR GDG\n         BNZ   MTGDG\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         B     PUTEMPTY\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\nPUTEMPTY L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BAL   R2,PUTL                 DISPLAY MESSAGE\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         BE    ENDGRP\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         BNE   FINDDOT\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         B     PROCNTRY\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   LOCATE2\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1\n         B     LOCERROR\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   DSNMVC\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         B     LDVOLCNT\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         BE    BACKUP\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         BNZ   SAVELEN\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         BNZ   SAVELEN\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         BNE   SAVELEN                 NO, BRANCH                 ABL99\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         BE    PARTIAL\n         CH    R15,=H'40'\n         BNE   LOCERROR\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         B     RETRYLOC\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         BAL   R2,PUTL                 DISPLAY LINE                 ABL\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         B     DSATPROC\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         BNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1                 OK, BRANCH\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         BE    GDGMSGL                 YES, BRANCH                  SPG\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         BNE   LOCERROR                NO, BRANCH\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         B     LOCERROR\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\nLSHOWCAT EQU   *-SHOWCATF\nTESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         BZ    ENDGRP\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BAL   R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         B     ENDGRP\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EX    R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         BNE   OBTAIN1\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NEXTSER               YES, IGNORE\n         B     THISVOL\n         SPACE 1\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         BO    ENDGRP2\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE\n         B     ENDGRP2\nTHISVOL  CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         BNH   GETSER\n         LA    R1,20                   SET MAX COUNT\nGETSER   C     R1,=F'1'                TEST VOLUME COUNT\n         BL    BADVOLCT                BAD VOLUME COUNT\n         BE    STOREVCT\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TESTDEV\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TESTDEV\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         BE    TESTDA\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         BNE   NOTDASD\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE CH    R1,=H'15'               TEST AGAINST MAX\n         BH    NOTDASD\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         BNZ   TESTDEV2\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         BNE   NEXTDEV                                         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NOTUP\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         BZ    TESTTYPE\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         B     TESTTYPE\nNOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         B     DSNERR\nTESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         BE    GETFMT1\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\nGETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n         BZ    PROCESS\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSCB                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    PROCDSRG\n         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    PROCPDS\n         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    PROCDCB\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         BZ    PROCDCB\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    PROCCRDT\n         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE\nPROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    PROCEXDT\n         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\nPROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    PROCLREF\n         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n         BNE   PROCCHHR\n         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    PUTLINE\n         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\nPUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BCT   R1,GETSER               LOOP FOR MORE VOLUMES\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         BZ    SAVETOTL\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL STM   R4,R8,TOTLS             STORE TOTALS\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         BE    NOEXTENT                YES, BRANCH                ABL94\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         BZ    NOEXTENT                NO, BRANCH                 ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         BZ    ENDGRP\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         BZ    DSATNEXT                GET NEXT DSNAME\n         B     DSATNXT2                GET NEXT DSNAME\n         SPACE 2\nENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         BZ    ENDGRP2\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         BE    NEXTSER\nENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         LA    R3,0(,R3)\n         LTR   R3,R3                   END OF CHAIN?\n         BNZ   SETUPNXT                NO, BRANCH\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         BE    RETURN\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n         MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE\n         MVC   5(19,R2),=C'DATA SETS DISPLAYED'\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         BH    CNVTALOC\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         BZ    RETURN\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   5(19,R2),=C'DATA SET DISPLAYED '\nCNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         BE    DISPLAYT\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\nDISPLAYT BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         BL    BRANCH\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   SLA   R15,2                   MULTIPLY BY 4\n         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\nBRTABLE  B     RC0                                             HD JAN99\n         B     RCTALLOC\n         B     RCTUSED\n         B     RCLALLOC\n         B     RCLUSED\n         B     RCTDIFF\n         B     RCLDIFF\n         B     RCNUM\n         B     RCPREV\n         B     RCDSORG\n         B     RCDIRA\n         B     RCDIRU\n         B     RCENTR\n         B     RCMEMB\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         B     EXIT\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         B     EXIT\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         B     EXIT\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         B     EXIT\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         B     EXIT\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         BNZ   EXIT\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         B     EXIT\nRCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         B     EXIT\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         B     EXIT\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         B     EXIT\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         B     EXIT\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         B     EXIT\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         B     EXIT\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         B     EXIT\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         B     EXIT\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         B     EXIT                                            HD JAN99\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         B     EXIT                                            HD JAN99\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         BO    RC8                     YES, RETURN CODE=8      HD JAN99\n         B     EXIT                                            HD JAN99\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    EXIT2\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\n         LR    R15,R3                  RESTORE RETURN CODE\n         $RTRN RENT=DSECTLEN,RC=(R15)\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\n         LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\nDSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,R1(R6)               ADD 1 TRACK\n         LA    R5,4(R5)\n         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?      ABL NOV92\n         BZ    DSATUTRK                NO, DONE               ABL NOV92\n         LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'13'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'13'               NO, DO 13 NEXT         ABL NOV92\n         B     DSATTRKS                CONTINUE               ABL NOV92\n         SPACE 3                                              ABL NOV92\nDSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         BZ    DSATXNTS\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n         IC    R1,DS1NOPEV             LOAD EXTENTS\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n         CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n         BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n         MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    NOSECOND\n         LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         BM    TRKALLOC\n         BO    CYLALLOC\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         B     SECAMT\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         B     SECAMT\nTRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         BZ    BLKALLOC\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         B     SECAMT\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n         LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND BR    R14                     RETURN\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n         MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'                                        ABL94\n         BE    $ALLEX20                                           ABL94\n         LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         BNO   NOT$CYL                  NO - SKIP                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         B     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         LH    R0,2(,R1)                GET START CC              ABL94\n         MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n         AH    R0,4(,R1)                ADD START HH              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         LH    R0,6(,R1)                GET END CC                ABL94\n         MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n         AH    R0,8(,R1)                ADD END HH                ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         LH    R15,6(,R1)               GET END CC                ABL94\n         SH    R15,2(,R1)               SUB START CC              ABL94\n         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n         AH    R15,8(,R1)               ADD END HH                ABL94\n         SH    R15,4(,R1)               SUB START HH              ABL94\n         LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n         BZ    $ALLEX20                NO, DONE                   ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         BNZ   DSNERR                  NO, SOME ERROR             ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         B     $ALLEX10                CONTINUE                   ABL94\n         SPACE 3                                                  ABL94\n$ALLEX20 DS    0H                                                 ABL94\n$ALLEX99 L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\nCONVDEC0 CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\nHEADER3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--$\n               TYPE-------------------------'                     ABL94\n         EJECT\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         BZ    DSORG001\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\nDSORG001 LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         BZ    DSORGCLC\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         BE    DSORGMVC\n         BXLE  R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\nDSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         BE    DSORGPO\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         BE    DSORGPS\nDSORGBAD OI    FLAGS,$NOTPOPS\n         B     DSORGRTN\nDSORGPO  OI    FLAGS,$DSPO             PARTITIONED\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         BNO   DSORGRTN                NO, BRANCH             ABL NOV92\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         B     DSORGRTN\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         BZ    DSATT\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         BNZ   DSATUORV\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         BZ    DSATV\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         BZ    DSATB\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         BZ    DSATS\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         BZ    DSATA\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         BZ    DSATM\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         BZ    DSATBLK\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         BZ    REFRTRN\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         BNE   BADDAY\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         BZ    BADDAY\n         TM    WORK+3,X'06'\n         BZ    BADDAY\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         BH    BADDAY\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         B     DATERTRN\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\nERRPARS  MVC   OUTLINE(28),DSATERR1\n         B     SETERROR\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\nNOID     MVC   OUTLINE(32),DSATERR7\n         B     RLSA\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\nTOOLONG  MVC   OUTLINE,BLANKS\n         MVC   OUTLINE(44),DSATERR4\nRLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BAL   R2,PUTL2                PUT MESSAGE\n         LA    R3,16                   SET CONDITION CODE\n         B     EXIT2\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         BNE   LOCERR                                          HD JAN99\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   BAL   R2,PUTL                 PRINT IT\n         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         B     PUTLINE                 PRINT THE LINE\n*--------ERROR IN OBTAIN MACRO\nDSNERR   CH    R15,=H'8'               TEST RETURN CODE\n         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n         BE    TESTVALL\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         B     DSNERR1\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         B     PUTLINE                 PRINT IT\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         B     PUTLINE                 DISPLAY MESSAGE\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         B     PUTLINE                 DISPLAY MESSAGE              SPG\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         BE    PUTLHPDS\nPUTL2    PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         BZ    PUTLBACK\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK BR    R2                      RETURN\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                         EXIT\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\nTTRLOC   CAMLST BLOCK,0,0,0\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\nMODLINE  DC    H'204,0'                                           ABL94\nBLANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY\n         DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         BNE   PDSSAVE\n         BCT   R2,PDSEND               DECREMENT COUNTER\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TESTORG\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         BNE   ERRDAIR\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         BZ    ERRDSORG\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         BZ    ERROPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n         SPACE\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         BNP   NEXTBLK\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         BNE   PROCENTR\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         B     NEXTBLK\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         BZ    DIRLEN\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         B     NEXTENT\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         B     PDSRTRN\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         BNE   CTLGERR\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         BNE   DYNALCER\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         B     PDSRTRN\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         B     PDSRTRN\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         BNE   OTHERERR\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         B     PDSRTRN\nOTHERERR ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         B     PDSRTRN\n*--------OPEN ERROR\nERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         B     PDSRTRN\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         B     PDSRTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPDSRTRN  $RTRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\nLOCBYTTR CAMLST BLOCK,0,0,0            LOCATE BY TTR\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL5,CL3                                            ABL94\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL5,CL3                                            ABL94\nOL@LNTH  DS    CL5,CL2                                            ABL94\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nHALF     DS    H                       HALFWORD ALIGNED WORK AREA\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\n         DS    0D\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n         END\n//*\n//LINK   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.CMDLIB(DSAT)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//*\n//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SYS2.HELP(DSAT),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -\n               THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION\n               INFORMATION FOR DATA SETS ON A DIRECT ACCESS\n               DEVICE.\n\n               DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE\n               ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION\n               INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE\n               OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS\n               AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL\n               BE DISPLAYED.\n\n               THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING\n               THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.\n               THIS OPTION PERMITS DISPLAYING INFORMATION FOR\n               UNCATALOGED DATA SETS.\n\n               THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY\n               THE USER WHEN HE ENTERS THE DSAT COMMAND BY\n               SPECIFYING KEYWORD OPERANDS.\n\n               THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES\n               TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF\n               DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED\n               VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE\n               WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY\n               SPECIFYING NOPRINT.  THE HARDCOPY KEYWORD MAY BE USED\n               TO DIRECT THE OUTPUT TO A PRE-ALLOCATED DATA SET.\n\n               THE USER MAY CHOOSE WHAT INFORMATION WILL BE\n               DISPLAYED BY ENTERING KEYWORDS.\n\n               THE INFORMATION THAT MAY BE DISPLAYED IS:\n                1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED.\n                2. FILE SEQUENCE NUMBER.\n                3. DEVICE TYPE CODE FROM CATALOG ENTRY.\n                4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).\n                5. SECONDARY ALLOCATION (AMOUNT AND UNITS).\n                6. DATA SET ORGANIZATION.\n                7. DCB (RECFM, BLKSIZE, AND LRECL).\n                8. CREATION DATE.\n                9. EXPIRATION DATE.\n               10. LAST DATE REFERENCED (MVS SU 60).\n               11. FULLY QUALIFIED DATA SET NAME.\n               12. CCHHR OF THE FORMAT 1 DSCB.\n               13. GENERATION DATA GROUP DATA.\n               14. PDS DIRECTORY INFORMATION.\n)X SYNTAX -\n               DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC\n                                 DSORG/NODSORG     DCB/NODCB\n                                 CRDATE/NOCRDATE   EXDATE/NOEXDATE\n                                 LASTREF/NOLASTREF\n                                 TOTALS/NOTOTALS   PRINT/NOPRINT\n                                 HEADER/NOHEADER   ALL/DAONLY\n                                 GDGDATA/NOGDGDATA SEQNO/NOSEQNO\n                                 DEVTYPE/NODEVTYPE DEVICE/NODEVICE\n                                 CCHHR/NOCCHHR     PDS/NOPDS\n                                 SECONDARY/NOSECONDARY\n                                 GENERIC           DSONLY\n                                 HARDCOPY(DDNAME)  VOLUME(SERIAL)\n                                 RC(TALLOC/TUSED/TDIFF/\n                                    LALLOC/LUSED/LDIFF/NUM/\n                                    PREVIOUS/DSORG/DIRALLOC/\n                                    DIRUSED/ENTRIES/ALIASES/\n                                    MEMBERS)\n\n               DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX\n                           SERIAL   ALLOC   DSORG    DCB    CRDATE\n                           NOEXDATE TOTALS  PRINT    HEADER ALL\n                           NOPDS    NOSEQNO NODEVICE NODEVTYPE\n                           NOGDGDATA    NOLASTREF    NOSECONDARY\n                           NOCCHHR      NOEXTENTS    NOFULL\n               NOTE: IF HARDCOPY IS SPECIFIED, NOPRINT IS THE DEFAULT\n\n               WITH FULL - SAME AS DEFAULTS ABOVE WITH:\n                           EXDATE    PDS     DEVICE\n                           GDGDATA   LASTREF SECONDARY\n                           CCHHR\n                           NODEVTYPE NOSEQNO NOEXTENTS\n\n\n   SAMPLE OUTPUTS:\n 1. DSAT LIB.CNTL\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNT\n\n 2. DSAT LIB.CNTL LAST\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   LAST REF    -D\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 08/03/1994* WS\n\n 3. DSAT LIB.CNTL FULL  (NOTE: OUTPUT BELOW WRAPS TO ABOUT 160 BYTES)\n SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n   -DCB ATTRIBUTES- CR. DATE   EX. DATE   LAST REF     C C H H R -DSNAM\n   FB   23440    80 05/04/1994 05/06/1994 08/03/1994* 0000000930 WSER07.\n\n 4. DSAT LINK\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR80P    20    18  1 X-PO  U    32760    80 07/19/1994 WSER07.LINK.AL\n STR81Z  1350   634  5 A-PO  U    32760    80 11/13/1993 WSER07.LINK.LO\n MIGRAT                                                  WSER07.LINK.US\n         1370   652                                       3 DATA SETS\n\n 5. DSAT LIB.CNTL EXTENTS\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNTL\n     EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE-----------\n       0   02CB,0004  10729   02D7,0004  10909     181  DATA\n       1   052A,0000  19830   052C,0008  19868      39  DATA\n       2   07D6,0000  30090   07D9,000E  30149      60  DATA\n\n\n)O OPERANDS -\n               NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL\n                           NAMES. TSO NAMING CONVENTIONS ARE USED.\n                           IF A SPECIFIED NAME IS AN INDEX NAME,\n                           DATA SETS UNDER THAT LEVEL WILL BE\n                           DISPLAYED.  IF NO NAME IS SPECIFIED,\n                           THE PREFIX WILL BE USED.  FOR MVT AND\n                           SVS, THIS IS THE USERID.  FOR MVS,\n                           THE PREFIX MAY BE SPECIFIED WITH THE\n                           PROFILE COMMAND.  IF NO NAME IS\n                           SPECIFIED AND THE PROFILE SPECIFIES\n                           NOPREFIX, THE USERID WILL BE USED.\n\n                           NOTE - IF A KEYWORD IS ENTERED,\n                                  NAME-LIST MUST BE SPECIFIED.  IF\n                                  NAME-LIST IS OMITTED, IT WILL\n                                  NOT DEFAULT TO THE PREFIX, BUT\n                                  THE KEYWORD WILL BE INTERPRETED\n                                  AS THE NAME-LIST, NOT A KEYWORD.\n))SERIAL        LIST VOLUME SERIALS.\n))NOSERIAL      DO NOT LIST VOLUME SERIALS.\n))SEQNO         LIST FILE SEQUENCE NUMBERS.\n))NOSEQNO       DO NOT LIST FILE SEQUENCE NUMBERS.\n))DEVTYPE       DISPLAY DEVICE TYPE CODE.\n))NODEVTYPE     DO NOT DISPLAY DEVICE TYPE CODE.\n))DEVICE        LIST DEVICE NAME (3330, 3350, ETC.).\n))NODEVICE      DO NOT LIST DEVICE NAME.\n))ALLOC         LIST ALLOCATION INFORMATION (TRACKS ALLOCATED,\n                TRACKS FREE, AND EXTENTS).\n))NOALLOC       DO NOT LIST ALLOCATION INFORMATION.\n))SECONDARY     DISPLAY SECONDARY ALLOCATION INFORMATION.\n))NOSECONDARY   DO NOT DISPLAY SECONDARY ALLOCATION INFORMATION.\n))DSORG         LIST DATA SET ORGANIZATION.\n))NODSORG       DO NOT LIST DATA SET ORGANIZATION.\n))PDS           LIST PDS DIRECTORY INFORMATION (BLOCKS ALLOC, USED,\n                ENTRIES, AND ALIASES).\n))NOPDS         DO NOT LIST PDS DIRECTORY INFORMATION.\n))DCB           LIST DCB INFORMATION (RECFM, BLKSIZE, AND LRECL).\n))NODCB         DO NOT LIST DCB INFORMATION.\n))CRDATE        LIST CREATION DATE.\n))NOCRDATE      DO NOT LIST CREATION DATE.\n))EXDATE        LIST EXPIRATION DATE.\n))NOEXDATE      DO NOT LIST EXPIRATION DATE.\n))LASTREF       DISPLAY LAST DATE REFERENCED (MVS SU 60).\n))NOLASTREF     DO NOT DISPLAY LAST DATE REFERENCED.\n))CCHHR         DISPLAY FORMAT 1 DSCB ADDRESS.\n))NOCCHHR       DO NOT DISPLAY CCHHR.\n))TOTALS        DISPLAY TOTALS (TRACKS ALLOCATED, TRACKS FREE,\n                AND DATA SETS DISPLAYED).\n))NOTOTALS      DO NOT DISPLAY TOTALS.\n))PRINT         OUTPUT IS TO BE DISPLAYED.\n))NOPRINT       OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))LIST          OUTPUT IS TO BE DISPLAYED.\n))NOLIST        OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))HEADER        DISPLAY OUTPUT HEADER LINE.\n))NOHEADER      DO NOT DISPLAY HEADER LINE.\n))ALL           DISPLAY ALL DATA SET NAMES UNDER AN INDEX LEVEL.\n))DAONLY        DISPLAY DATA SETS ON MOUNTED DIRECT ACCESS\n                DEVICES.\n))GDGDATA       INFORMATION ON GENERATION DATA GROUP INDEXES IS TO\n                BE DISPLAYED.\n))NOGDGDATA     GENERATION DATA GROUP DATA WILL NOT BE DISPLAYED.\n))GENERIC       NAME SPECIFIES A GENERIC KEY.         ** MVS ONLY **\n))DSONLY        TREAT NAMES AS DATA SET NAMES, NOT INDEX NAMES.\n))VOLUME        SPECIFIES THE VOLUME TO BE SEARCHED FOR THE DATA SET.\n))HARDCOPY      SPECIFIES THE DDNAME A PRE-ALLOCATED DATA SET TO\n                RECEIVE A COPY OF DSAT OUTPUT.\n))FULL          FORMAT ADDITIONAL INFORMATION FOR EACH DATA SET: PDS,\n                EXDATE, DEVICE, GDGDATA, LASTREF, SECONDARY, CCHHR.\n\n                OTHER KEYWORDS (LIKE NOPDS) MAY BE SPECIED AFTER FULL\n                TO TURN OFF OPTIONS SELECTIVELY.\n))NOFULL        DO NOT FORMAT ADDITIONAL INFORMATION.\n))EXTENTS       FORMAT EXTENT INFORMATION FOR EACH DATA SET FOLLOWING\n                THE DATA SET DISPLAY LINE.\n\n                THE FOLLOWING FIELDS ARE FORMATTED FOR EACH EXTENT:\n                    EXT#       - EXTENT NUMBER (0 TO 122)\n                    START/CCHH - STARTING CCHH HEX ADDRESS\n                    S/TRK      - STARTING CCHH IN DECIMAL\n                    END/CCHH   - ENDING CCHH HEX ADDRESS\n                    E/TRK      - ENDING CCHH IN DECIMAL\n                    LENGTH     - SIZE OF EXTENT IN TRACKS\n                    TYPE       - COMMENTS ON EXTENT USE\n                                 CYL     - CYLINDER ALLOCATION\n                                 SHR     - SHARING CYLINDER\n                                 USR LBL - USER LABELS\n                                 IS INDX - ISAM INDEX\n                                 IS OVFL - ISAM OVERFLOW\n))NOEXTENTS     DO NOT FORMAT EXTENT INFORMATION.\n))RC            SPECIFIES HOW THE RETURN CODE IS TO BE SET:\n                RC NOT SPECIFIED:  0 - SUCCESSFUL COMPLETION\n                                   8 - ONE OR MORE DATA SETS NOT FOUND\n                                  16 - UNABLE TO INTERPRET COMMAND\n                TALLOC               - TOTAL TRACKS USED\n                TUSED                - TOTAL TRACKS USED\n                TDIFF                - TOTAL OVERALLOCATION\n                                       (TALLOC-TUSED)\n                LALLOC               - TRACKS ALLOCATED BY LAST\n                                       DATA SET\n                LUSED                - TRACKS USED BY LAST DATA SET\n                LDIFF                - LAST DATA SET OVERALLOCATION\n                                       (LALLOC-LUSED)\n                NUM                  - NUMBER OF DATA SETS DISPLAYED\n                                       (INCLUDES DATA SETS NOT\n                                       FOUND, ETC.)\n                PREVIOUS             - ASSUMES THE RETURN CODE OF\n                                       THE PREVIOUS COMMAND.\n                DSORG                - SETS THE RETURN CODE BASED\n                                       ON THE DATA SET ORGANIZATION\n                                       OF THE DATA SETS DISPLAYED.\n                                       1 - ALL DATA SETS WERE SEQ.\n                                       2 - ALL DATA SETS WERE PDS\n                                       3 - DATA SETS WERE MIXED PDS\n                                           AND SEQUENTIAL\n                                       4 - AN ERROR OCCURRED OR A\n                                           DATA SET OTHER THAN PDS\n                                           OR SEQUENTIAL WAS\n                                           PROCESSED\n                DIRALLOC - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           ALLOCATED.\n                DIRUSED  - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           USED.\n                ENTRIES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ENTRIES IN THE\n                           DIRECTORY (MEMBERS AND\n                           ALIASES).\n                ALIASES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ALIASES.\n                MEMBERS  - SETS THE RETURN CODE TO\n                           ENTRIES-ALIASES.\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSATO$": {"ttr": 14346, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x005\\x01\\t0\\x0f\\x01\\x10!\\x0f\\x10E\\x01=\\x01!\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xe5\\xc5\\xd9@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2009-10-27T00:00:00", "modifydate": "2010-07-29T10:45:35", "lines": 317, "newlines": 289, "modlines": 0, "user": "PREVVER"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*  ASMH -- ASSEMBLES DSAT\n//*  LKED -- LINKS DSAT\n//*  COPY -- COPIES DSAT HELP TO APPROPRIATE DATA SET\n//*\n//ASMH   EXEC PGM=ASMA90,\n//            PARM=(OBJECT,NODECK,NOESD,NORLD,RENT,TERM,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT478.FILE296       THIS PDS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT478.FILE296(DSAT)  THIS PDS\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//             PARM='MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n SETSSI  CB478296\n NAME    DSAT(R)\n/*\n//*\n//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SBGOLOB.HELP(DSAT),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -\n               THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION\n               INFORMATION FOR DATA SETS ON A DIRECT ACCESS\n               DEVICE.\n\n               DSAT WILL SEARCH THE OS CATALOG FOR THE\n               ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION\n               INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE\n               OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS\n               AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL\n               BE DISPLAYED.\n\n               THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING\n               THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.\n               THIS OPTION PERMITS DISPLAYING INFORMATION FOR\n               UNCATALOGED DATA SETS.\n\n               THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY\n               THE USER WHEN HE ENTERS THE DSAT COMMAND BY\n               SPECIFYING KEYWORD OPERANDS.\n\n               THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES\n               TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF\n               DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED\n               VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE\n               WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY\n               SPECIFYING NOPRINT.  THE HARDCOPY KEYWORD MAY BE USED\n               TO DIRECT THE OUTPUT TO A PRE-ALLOCATED DATA SET.\n\n               THE USER MAY CHOOSE WHAT INFORMATION WILL BE\n               DISPLAYED BY ENTERING KEYWORDS.\n\n               THE INFORMATION THAT MAY BE DISPLAYED IS:\n                1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED.\n                2. FILE SEQUENCE NUMBER.\n                3. DEVICE TYPE CODE FROM CATALOG ENTRY.\n                4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).\n                5. SECONDARY ALLOCATION (AMOUNT AND UNITS).\n                6. DATA SET ORGANIZATION.\n                7. DCB (RECFM, BLKSIZE, AND LRECL).\n                8. CREATION DATE.\n                9. EXPIRATION DATE.\n               10. LAST DATE REFERENCED (MVS SU 60).\n               11. FULLY QUALIFIED DATA SET NAME.\n               12. CCHHR OF THE FORMAT 1 DSCB.\n               13. GENERATION DATA GROUP DATA.\n               14. PDS DIRECTORY INFORMATION.\n               15. SYSTEM MANAGED DATA SET FLAG\n)X SYNTAX -\n               DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC\n                                 DSORG/NODSORG     DCB/NODCB\n                                 CRDATE/NOCRDATE   EXDATE/NOEXDATE\n                                 LASTREF/NOLASTREF\n                                 TOTALS/NOTOTALS   PRINT/NOPRINT\n                                 HEADER/NOHEADER   ALL/DAONLY\n                                 GDGDATA/NOGDGDATA SEQNO/NOSEQNO\n                                 DEVTYPE/NODEVTYPE DEVICE/NODEVICE\n                                 CCHHR/NOCCHHR     PDS/NOPDS\n                                 SECONDARY/NOSECONDARY\n                                 SMS/NOSMS\n                                 GENERIC           DSONLY\n                                 HARDCOPY(DDNAME)  VOLUME(SERIAL)\n                                 RC(TALLOC/TUSED/TDIFF/\n                                    LALLOC/LUSED/LDIFF/NUM/\n                                    PREVIOUS/DSORG/DIRALLOC/\n                                    DIRUSED/ENTRIES/ALIASES/\n                                    MEMBERS)\n\n               DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX\n                           SERIAL   ALLOC   DSORG    DCB    CRDATE\n                           NOEXDATE TOTALS  PRINT    HEADER ALL\n                           NOPDS    NOSEQNO NODEVICE NODEVTYPE\n                           NOGDGDATA    NOLASTREF    NOSECONDARY\n                           NOSMS\n                           NOCCHHR      NOEXTENTS    NOFULL\n               NOTE: IF HARDCOPY IS SPECIFIED, NOPRINT IS THE DEFAULT\n\n               WITH FULL - SAME AS DEFAULTS ABOVE WITH:\n                           EXDATE    PDS     DEVICE\n                           GDGDATA   LASTREF SECONDARY\n                           CCHHR\n                           NODEVTYPE NOSEQNO NOEXTENTS\n\n\n   SAMPLE OUTPUTS:\n 1. DSAT LIB.CNTL\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNT\n\n 2. DSAT LIB.CNTL LAST\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   LAST REF    -D\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 08/03/1994* WS\n\n 3. DSAT LIB.CNTL FULL  (NOTE: OUTPUT BELOW WRAPS TO ABOUT 160 BYTES)\n SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n   -DCB ATTRIBUTES- CR. DATE   EX. DATE   LAST REF     C C H H R -DSNAM\n   FB   23440    80 05/04/1994 05/06/1994 08/03/1994* 0000000930 WSER07.\n\n 4. DSAT LINK\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR80P    20    18  1 X-PO  U    32760    80 07/19/1994 WSER07.LINK.AL\n STR81Z  1350   634  5 A-PO  U    32760    80 11/13/1993 WSER07.LINK.LO\n MIGRAT                                                  WSER07.LINK.US\n         1370   652                                       3 DATA SETS\n\n 5. DSAT LIB.CNTL EXTENTS\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNTL\n     EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE-----------\n       0   02CB,0004  10729   02D7,0004  10909     181  DATA\n       1   052A,0000  19830   052C,0008  19868      39  DATA\n       2   07D6,0000  30090   07D9,000E  30149      60  DATA\n\n 6. DSAT 'SYS1.PROC' GENERIC\n\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n MPSYSM    75    53  1 A-PO  FB   27920    80 10/20/2005 SYS1.PROCLIB\n MPSYSM  1471  1452  1 A-PO  FB    6160    80 03/25/2007 SYS1.PROCLIB.A1\n MPSYSM NOT ON VOLUME                                    SYS1.PROCLIB.A2\n MPIP2M    15     5  1 A-PO  FB   27920    80 11/15/2006 SYS1.PROCLSSC\n         1561  1510                                4 DATA SETS DISPLAYED\n\n 7. DSAT ('PLI' 'NONE')\n\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n WLMDCT    15    13  1 A-PO  U     6144     0 02/24/2001 PLI.PLILINK\n WLMDCT     2     0  1 A-PO  FB    3120    80 02/24/2001 PLI.PLISAMP\n WLMDCT    15    11  1 A-PO  U     6144     0 02/24/2001 PLI.SIBMBASE\n WLMDCT    15     0  1 A-PO  U     6144     0 02/24/2001 PLI.SIBMLINK\n MTDOCM   225        1 X-AM  U     4096     0 10/20/2005 PLI\n        NAME NOT FOUND                                   NONE\n          272    24                                5 DATA SETS DISPLAYED\n\n\n 8. DSAT 'PAPI.SEDOR' SMS\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE    WRAP...>\n LMP007     4     0  1 A-PS  U    27998     0 10/02/2009  WRAP...>\n\n ...>   SMS DATACLAS MGMTCLAS STORCLAS -DSNAME-\n ...>   YES DCLMPCNV (NULL)   SCLMPCNV PAPI.SEDOR\n\n\n)O OPERANDS -\n               NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL\n                           NAMES. TSO NAMING CONVENTIONS ARE USED.\n                           IF A SPECIFIED NAME IS AN INDEX NAME,\n                           DATA SETS UNDER THAT LEVEL WILL BE\n                           DISPLAYED.  IF NO NAME IS SPECIFIED,\n                           THE PREFIX WILL BE USED.  FOR MVT AND\n                           SVS, THIS IS THE USERID.  FOR MVS,\n                           THE PREFIX MAY BE SPECIFIED WITH THE\n                           PROFILE COMMAND.  IF NO NAME IS\n                           SPECIFIED AND THE PROFILE SPECIFIES\n                           NOPREFIX, THE USERID WILL BE USED.\n\n                           NOTE - IF A KEYWORD IS ENTERED,\n                                  NAME-LIST MUST BE SPECIFIED.  IF\n                                  NAME-LIST IS OMITTED, IT WILL\n                                  NOT DEFAULT TO THE PREFIX, BUT\n                                  THE KEYWORD WILL BE INTERPRETED\n                                  AS THE NAME-LIST, NOT A KEYWORD.\n))SERIAL        LIST VOLUME SERIALS.\n))NOSERIAL      DO NOT LIST VOLUME SERIALS.\n))SEQNO         LIST FILE SEQUENCE NUMBERS.\n))NOSEQNO       DO NOT LIST FILE SEQUENCE NUMBERS.\n))DEVTYPE       DISPLAY DEVICE TYPE CODE.\n))NODEVTYPE     DO NOT DISPLAY DEVICE TYPE CODE.\n))DEVICE        LIST DEVICE NAME (3330, 3350, ETC.).\n))NODEVICE      DO NOT LIST DEVICE NAME.\n))ALLOC         LIST ALLOCATION INFORMATION (TRACKS ALLOCATED,\n                TRACKS FREE, AND EXTENTS).\n))NOALLOC       DO NOT LIST ALLOCATION INFORMATION.\n))SECONDARY     DISPLAY SECONDARY ALLOCATION INFORMATION.\n))NOSECONDARY   DO NOT DISPLAY SECONDARY ALLOCATION INFORMATION.\n))SMS           DISPLAY SMS INFORMATION (DATACLAS/MGMTCLAS/STORCLAS)\n))NOSMS         DO NOT DISPLAY INFORMATION\n))DSORG         LIST DATA SET ORGANIZATION.\n))NODSORG       DO NOT LIST DATA SET ORGANIZATION.\n))PDS           LIST PDS DIRECTORY INFORMATION (BLOCKS ALLOC, USED,\n                ENTRIES, AND ALIASES).\n))NOPDS         DO NOT LIST PDS DIRECTORY INFORMATION.\n))DCB           LIST DCB INFORMATION (RECFM, BLKSIZE, AND LRECL).\n))NODCB         DO NOT LIST DCB INFORMATION.\n))CRDATE        LIST CREATION DATE.\n))NOCRDATE      DO NOT LIST CREATION DATE.\n))EXDATE        LIST EXPIRATION DATE.\n))NOEXDATE      DO NOT LIST EXPIRATION DATE.\n))LASTREF       DISPLAY LAST DATE REFERENCED (MVS SU 60).\n))NOLASTREF     DO NOT DISPLAY LAST DATE REFERENCED.\n))CCHHR         DISPLAY FORMAT 1 DSCB ADDRESS.\n))NOCCHHR       DO NOT DISPLAY CCHHR.\n))TOTALS        DISPLAY TOTALS (TRACKS ALLOCATED, TRACKS FREE,\n                AND DATA SETS DISPLAYED).\n))NOTOTALS      DO NOT DISPLAY TOTALS.\n))PRINT         OUTPUT IS TO BE DISPLAYED.\n))NOPRINT       OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))LIST          OUTPUT IS TO BE DISPLAYED.\n))NOLIST        OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))HEADER        DISPLAY OUTPUT HEADER LINE.\n))NOHEADER      DO NOT DISPLAY HEADER LINE.\n))ALL           DISPLAY ALL DATA SET NAMES UNDER AN INDEX LEVEL.\n))DAONLY        DISPLAY DATA SETS ON MOUNTED DIRECT ACCESS\n                DEVICES.\n))GDGDATA       INFORMATION ON GENERATION DATA GROUP INDEXES IS TO\n                BE DISPLAYED.\n))NOGDGDATA     GENERATION DATA GROUP DATA WILL NOT BE DISPLAYED.\n))GENERIC       NAME SPECIFIES A GENERIC KEY.         ** MVS ONLY **\n))DSONLY        TREAT NAMES AS DATA SET NAMES, NOT INDEX NAMES.\n))VOLUME        SPECIFIES THE VOLUME TO BE SEARCHED FOR THE DATA SET.\n))HARDCOPY      SPECIFIES THE DDNAME A PRE-ALLOCATED DATA SET TO\n                RECEIVE A COPY OF DSAT OUTPUT.\n))FULL          FORMAT ADDITIONAL INFORMATION FOR EACH DATA SET: PDS,\n                EXDATE, DEVICE, GDGDATA, LASTREF, SECONDARY, CCHHR.\n\n                OTHER KEYWORDS (LIKE NOPDS) MAY BE SPECIED AFTER FULL\n                TO TURN OFF OPTIONS SELECTIVELY.\n))NOFULL        DO NOT FORMAT ADDITIONAL INFORMATION.\n))EXTENTS       FORMAT EXTENT INFORMATION FOR EACH DATA SET FOLLOWING\n                THE DATA SET DISPLAY LINE.\n\n                THE FOLLOWING FIELDS ARE FORMATTED FOR EACH EXTENT:\n                    EXT#       - EXTENT NUMBER (0 TO 122)\n                    START/CCHH - STARTING CCHH HEX ADDRESS\n                    S/TRK      - STARTING CCHH IN DECIMAL\n                    END/CCHH   - ENDING CCHH HEX ADDRESS\n                    E/TRK      - ENDING CCHH IN DECIMAL\n                    LENGTH     - SIZE OF EXTENT IN TRACKS\n                    TYPE       - COMMENTS ON EXTENT USE\n                                 CYL     - CYLINDER ALLOCATION\n                                 SHR     - SHARING CYLINDER\n                                 USR LBL - USER LABELS\n                                 IS INDX - ISAM INDEX\n                                 IS OVFL - ISAM OVERFLOW\n))NOEXTENTS     DO NOT FORMAT EXTENT INFORMATION.\n))RC            SPECIFIES HOW THE RETURN CODE IS TO BE SET:\n                RC NOT SPECIFIED:  0 - SUCCESSFUL COMPLETION\n                                   8 - ONE OR MORE DATA SETS NOT FOUND\n                                  16 - UNABLE TO INTERPRET COMMAND\n                TALLOC               - TOTAL TRACKS USED\n                TUSED                - TOTAL TRACKS USED\n                TDIFF                - TOTAL OVERALLOCATION\n                                       (TALLOC-TUSED)\n                LALLOC               - TRACKS ALLOCATED BY LAST\n                                       DATA SET\n                LUSED                - TRACKS USED BY LAST DATA SET\n                LDIFF                - LAST DATA SET OVERALLOCATION\n                                       (LALLOC-LUSED)\n                NUM                  - NUMBER OF DATA SETS DISPLAYED\n                                       (INCLUDES DATA SETS NOT\n                                       FOUND, ETC.)\n                PREVIOUS             - ASSUMES THE RETURN CODE OF\n                                       THE PREVIOUS COMMAND.\n                DSORG                - SETS THE RETURN CODE BASED\n                                       ON THE DATA SET ORGANIZATION\n                                       OF THE DATA SETS DISPLAYED.\n                                       1 - ALL DATA SETS WERE SEQ.\n                                       2 - ALL DATA SETS WERE PDS\n                                       3 - DATA SETS WERE MIXED PDS\n                                           AND SEQUENTIAL\n                                       4 - AN ERROR OCCURRED OR A\n                                           DATA SET OTHER THAN PDS\n                                           OR SEQUENTIAL WAS\n                                           PROCESSED\n                DIRALLOC - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           ALLOCATED.\n                DIRUSED  - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           USED.\n                ENTRIES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ENTRIES IN THE\n                           DIRECTORY (MEMBERS AND\n                           ALIASES).\n                ALIASES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ALIASES.\n                MEMBERS  - SETS THE RETURN CODE TO\n                           ENTRIES-ALIASES.\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSATOLD": {"ttr": 14598, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x00\\x00\\x00\\x923\\x0f\\x00\\x94!\\x7f\\x13\\x15\\x10\\xa2\\x0f2\\x10\\xa2\\xe6\\xe2\\xc5\\xd9\\xf0\\xf7@@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "1992-11-25T00:00:00", "modifydate": "1994-08-05T13:15:00", "lines": 4258, "newlines": 3890, "modlines": 4258, "user": "WSER07"}, "text": "//WSER07J  JOB ...\n//*\n//*  ASM1 -- ASSEMBLES DSAT (YOU MAY OPTIONALLY CHANGE IEV90 TO IFOX00)\n//*  LINK -- LINKS DSAT INTO 'SYS1.CMDLIB(DSAT)'\n//*  COPY -- COPIES DSAT HELP TO 'SYS2.HELP(DSAT)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*\n//*  LIMITS IN ICF CATALOGS:\n//*\n//*   IF GDG OPTION IS USED, ONLY THE GDG BASE NAME IS DISPLAYED\n//*   WITH THE MESSAGE ' GDG -- IN ICF CATALOG'\n//*\n//*\n//ASM1  EXEC  PGM=IEV90,REGION=2048K,\n//             PARM=('DECK,NOOBJECT,NORLD,RENT,TERM,XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR,DCB=BLKSIZE=18000\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\nDSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              4 - SUCCESSFUL COMPLETION.             *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*            CHANGED TO SKIP 'VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LENARD WOREN    ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n*     BURLINGAME, CA  94010                                           *\n*     (415) 696-1800                       HOME (408) 997-2366        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\nDS1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\nDS1PDSE  EQU   X'08'                    PDSE DATA SET         ABL NOV92\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\nDS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\nDS3PTRDS DS    XL5                      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         LCLC  &OPSYSTM\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&OPSYSTM SETC  'MVS13'                 MVS 1.3 OR ABOVE\n*OPSYSTM SETC  'MVS'                   MVS TO MVS 1.2\n*OPSYSTM SETC  'SVS'                   SVS\n*OPSYSTM SETC  'MVT'                   MVT\n&MAXSIZE SETC  '524288'                512K AS A DEFAULT            ABL\n* EACH DATA SET REQUIRES 45 BYTES; 512K IS GOOD FOR 11650 DATA SETS ABL\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n         TITLE 'ENTRY CODING'\nDSAT     $ENTER BASE=(R11,R12),                                        +\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB\n         MVC   DSATHEDR(4),MODLINE\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         DROP  R8                      DROP IOPL BASE REGISTER\n*--------GET CATALOG WORKAREA\n         L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n         LINK  EP=IKJPARS               LINK TO PARSE ROUTINE\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n         BNE   *+8                   YES, BRANCH\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL EQU   *\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3\n         STM   R1,R4,DSATDCB3\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         AIF   ('&OPSYSTM' EQ 'SVS').ZEROTOT\n         AIF   ('&OPSYSTM' EQ 'MVT').ZEROTOT\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   ZEROTOT\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\n.ZEROTOT ANOP\nZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    SETUPHDR\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n         BNE   *+8                     YES, BRANCH\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    SETUPHDR\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TRYDEV\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TRYDEV\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         BE    TRYDEVIC\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         BE    TRYALLOC\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    TRYDSORG\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n         LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    TRYDSORG\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    TRYPDS\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    TRYDCB\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    TRYCRDAT\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    TRYEXDAT\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'CR. DATE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    TRYLREFD\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'EX. DATE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF\n         BNE   TRYCCHHR\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'LAST REF'    MOVE IN HEADER\n         LA    R2,10(R2)               INCREMENT POINTER\nTRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    DODSNAME\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         BH    DSNFLDOK\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\nDSNFLDOK LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         BE    BUILDDSN\n         BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         BNZ   MOVEREST\n*--------APEND PREFIX TO NAME\n         AIF   ('&OPSYSTM' EQ 'SVS').PSCB\n         AIF   ('&OPSYSTM' EQ 'MVT').PSCB\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST\n         DROP  R1\n.PSCB    L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\nGETLEN   SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         BNZ   COPYSER\n         AIF   ('&OPSYSTM' EQ 'SVS').LOCATE\n         AIF   ('&OPSYSTM' EQ 'MVT').LOCATE\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         BNZ   PROCGRP\n.LOCATE  LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         AIF   ('&OPSYSTM' EQ 'MVS13').MVSLOC\n         AIF   ('&OPSYSTM' EQ 'MVS').MVSLOC\n         BZ    OBTAIN1\n         AGO   .TESTNDX\n.MVSLOC  BNZ   CHECK8\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         BE    OBTAIN1\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         BNE   PROCGRP\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         BE    PROCTTR\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         BE    PROCGRP                    SU 8 NOT INSTALLED\n         B     LOCERROR\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         BNE   CHECK12\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         BNE   PROCGRP\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         BNE   PROCGRP\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BAL   R2,PUTL                 DISPLAY LINE\n         B     ENDGRP\n         SPACE 2\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         BNE   LOCERROR\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   LOCERROR\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND1\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         B     PROCNTRY                LOAD INDEX NAME\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   LOCERROR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         BE    LNKENTRY\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         BE    DSATNEXT\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         BE    DSNOVER5\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         BE    NDXENTRY\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         BNE   DSNENTRY\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         BE    NDXENTRY\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         BZ    PUTGDG\n         BM    GDGEORD\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         B     PUTGDG\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         BNZ   PUTGDG\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BAL   R2,PUTL                 DISPLAY LINE\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         B     FINDEND\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         BZ    ENDLEVEL\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         B     READCTLG\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         BNZ   TESTDONE\n         TM    FLAGS,GDG               TEST FOR GDG\n         BNZ   MTGDG\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         B     PUTEMPTY\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\nPUTEMPTY L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BAL   R2,PUTL                 DISPLAY MESSAGE\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         BE    ENDGRP\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         BNE   FINDDOT\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         B     PROCNTRY\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   LOCATE2\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1\n         B     LOCERROR\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   DSNMVC\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         B     LDVOLCNT\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         BE    BACKUP\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         BNZ   SAVELEN\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         BNZ   SAVELEN\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         AIF   ('&OPSYSTM' EQ 'MVS13').MVSFM0                       ABL\n         STH   R1,0(R15)               STORE IN WORK AREA\n         AGO   .MVSFM0E                                             ABL\n.MVSFM0  ANOP                                                       ABL\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n.MVSFM0E ANOP                                                       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         BE    PARTIAL\n         CH    R15,=H'40'\n         BNE   LOCERROR\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         AIF   ('&OPSYSTM' EQ 'MVS13').MVSFM1                       ABL\n         CLC   =X'7FFF',2(R1)          TEST FOR MORE THAN 32,767\n         BL    PARTIAL                 YES, PROCESS PART RETURNED\n         XC    0(2,R1),0(R1)           ZERO 2 BYTES\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH\n         L     R2,0(R1)                LOAD LENGTH NEEDED\n         AGO   .MVSFM1E                                             ABL\n.MVSFM1  ANOP                                                       ABL\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n.MVSFM1E ANOP                                                       ABL\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         B     RETRYLOC\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         BAL   R2,PUTL                 DISPLAY LINE                 ABL\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n         AIF   ('&OPSYSTM' EQ 'MVS13').MVSFM2                       ABL\n         MVC   2(2,R1),0(R1)           SET LENGTH USED TO TOTAL LENGTH\n.MVSFM2  ANOP                                                       ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         AIF   ('&OPSYSTM' EQ 'MVS13').MVSFM3                       ABL\n         XC    0(2,R15),0(R15)         ZERO HIGH TWO BYTES\n         L     R1,0(R15)               LOAD LENGTH OF WORK AREA USED\n         AGO   .MVSFM3E                                             ABL\n.MVSFM3  ANOP                                                       ABL\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n.MVSFM3E ANOP                                                       ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         AIF   ('&OPSYSTM' EQ 'MVS13').MVSFM4                       ABL\n         LA    R7,4(R15)               LOAD ADDRESS OF FIRST ENTRY\n         AGO   .MVSFM4E                                             ABL\n.MVSFM4  ANOP                                                       ABL\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n.MVSFM4E ANOP                                                       ABL\n         B     DSATPROC\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         BH    TESTCOMP\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1                 OK, BRANCH\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         BE    GDGMSGL                 YES, BRANCH                  SPG\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         BNE   LOCERROR                NO, BRANCH\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         B     LOCERROR\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\nLSHOWCAT EQU   *-SHOWCATF\nTESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         BZ    ENDGRP\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BAL   R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         B     ENDGRP\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EX    R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         BNE   OBTAIN1\n         AIF   ('&OPSYSTM' NE 'MVS13').MVS13A\n         XC    UCBANSR1,UCBANSR1     START UCB SEARCH OVER\n         LA    R14,UCBWORK1          WORK AREA ADDRESS\n         LA    R15,=AL1(X'20')       DASD UCB'S DESIRED\n         LA    R0,UCBANSR1           RESULTANT UCB ADDRESS\n         STM   R14,R0,UCBPARM1       SAVE PARAMETER LIST\n         OI    UCBPARM1+8,X'80'      MARK END OF LIST\n         SPACE 1\nNEXTSER  LA    R1,UCBPARM1           START OF PARAMETER LIST\n         L     R15,16                A(CVT)\n         L     R15,X'434'(R15)       START OF UCB SCAN SERVICE\n         BALR  R14,R15               GO SCAN UCB LIST\n         SPACE 1\n         LTR   R15,R15               END OF LIST?\n         BNZ   ENDVALL               YES, BRANCH\n         L     R15,UCBANSR1          START OF THIS UCB\n         TM    6(R15),X'40'          NOT READY?\n         BO    NEXTSER               YES, IGNORE\n         B     THISVOL\n         SPACE 1\n         AGO   .MVS13AX\n.MVS13A  ANOP\n         SPACE 1\n         CLC   VOLSER,28(R15)        THIS VOLUME?\n         BE    FNDUCB                FOUND IT\n         XC    SERPTR,SERPTR           ZERO SERIAL POINTER\n         XC    LASTUCB,LASTUCB         ZERO LAST UCB PROCESSED\n         L     R1,16                   LOAD CVT ADDRESS\n         L     R1,40(R1)               LOAD UCB TABLE ADDRESS\n         B     NEXTUCB1\nNEXTSER  L     R1,SERPTR               LOAD PREVIOUS ENTRY\n         LA    R1,2(R1)                INCREMENT POINTER\nNEXTUCB1 SR    R15,R15                 CLEAR R15\n         AIF   ('&OPSYSTM' EQ 'MVS').LOADMVS\n         LH    R15,0(R1)               LOAD UCB ADDRESS\n         AGO   .COMMON\n.LOADMVS ICM   R15,3,0(R1)             LOAD UCB ADDRESS\n.COMMON  LTR   R15,R15                 TEST FOR HOLE\n         BZ    UCBHOLE1\n         CLC   0(2,R1),=X'FFFF'        TEST FOR END OF TABLE\n         BE    ENDVALL\n         CLI   18(R15),X'20'           TEST FOR DIRECT ACCESS\n         BNE   UCBHOLE1\n         CLI   28(R15),X'00'           TEST FOR NO SERIAL\n         BE    UCBHOLE1\n         TM    6(R15),X'40'            TEST FOR NOT READY\n         BO    UCBHOLE1\n         C     R15,LASTUCB             SEE IF ALTERNATE PATH\n         BH    THISVOL\nUCBHOLE1 LA    R1,2(R1)                NEXT ENTRY\n         B     NEXTUCB1\n.MVS13AX ANOP\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         BO    ENDGRP2\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE\n         B     ENDGRP2\nTHISVOL  CLI   28(R15),0               ANY NAME?\n         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n         MVC   CATBLOCK+2(4),16(R15)   COPY UCBTYPE FIELD\n         MVC   CATBLOCK+6(6),28(R15)   COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         BNH   GETSER\n         LA    R1,20                   SET MAX COUNT\nGETSER   C     R1,=F'1'                TEST VOLUME COUNT\n         BL    BADVOLCT                BAD VOLUME COUNT\n         BE    STOREVCT\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TESTDEV\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TESTDEV\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         BE    TESTDA\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         BNE   NOTDASD\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE CH    R1,=H'15'               TEST AGAINST MAX\n         BH    NOTDASD\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         BNZ   TESTDEV2\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         AIF   ('&OPSYSTM' NE 'MVS13').MVS13B\n         XC    UCBANSR2,UCBANSR2     START UCB SEARCH OVER\n         LA    R14,UCBWORK2          WORK AREA ADDRESS\n         LA    R15,=AL1(X'20')       DASD UCB'S DESIRED\n         LA    R0,UCBANSR2           RESULTANT UCB ADDRESS\n         STM   R14,R0,UCBPARM2       SAVE PARAMETER LIST\n         OI    UCBPARM1+8,X'80'      MARK END OF LIST\n         SPACE 1\nNEXTDEV  LA    R1,UCBPARM2           START OF PARAMETER LIST\n         L     R15,16                A(CVT)\n         L     R15,X'434'(R15)       START OF UCB SCAN SERVICE\n         BALR  R14,R15               GO SCAN UCB LIST\n         SPACE 1\n         LTR   R15,R15               END OF LIST?\n         BNZ   NOTUP                 YES, BRANCH\n         L     R15,UCBANSR2          START OF THIS UCB\n         AGO   .MVS13BX\n.MVS13B  ANOP\n         SPACE 1\n         L     R2,16                   LOAD CVT ADDRESS\n         L     R2,40(R2)               LOAD UCB TABLE ADDRESS\n         SR    R15,R15\nNEXTDEV  EQU   *\n         AIF   ('&OPSYSTM' EQ 'MVS').MVSUCB\n         LH    R15,0(R2)               LOAD UCB ADDRESS\n         AGO   .TESTUCB\n.MVSUCB  ICM   R15,3,0(R2)             LOAD UCB ADDRESS\n.TESTUCB LTR   R15,R15                 TEST FOR EMPTY ENTRY\n         BZ    UCBHOLE2\n         CLC   0(2,R2),=X'FFFF'        TEST FOR END OF TABLE\n         BE    NOTUP\n.MVS13BX ANOP\n         CLC   28(6,R15),DSATSER       COMPARE SERIAL\n         BNE   UCBHOLE2\n         TM    6(R15),X'40'            TEST FOR NOT READY\n         BO    NOTUP\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         BZ    TESTTYPE\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         B     TESTTYPE\nUCBHOLE2 LA    R2,2(R2)                NEXT UCB TABLE ENTRY\n         B     NEXTDEV\nNOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         B     DSNERR\nTESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         BE    GETFMT1\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\nGETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n         BZ    PROCESS\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSCB                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    PROCDSRG\n         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    PROCPDS\n         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    PROCDCB\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         BZ    PROCDCB\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    PROCCRDT\n         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE\nPROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    PROCEXDT\n         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\nPROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    PROCLREF\n         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n         BNE   PROCCHHR\n         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    PUTLINE\n         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\nPUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BCT   R1,GETSER               LOOP FOR MORE VOLUMES\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         BZ    SAVETOTL\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL STM   R4,R8,TOTLS             STORE TOTALS\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         BE    NOEXTENT                YES, BRANCH                ABL94\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         BZ    NOEXTENT                NO, BRANCH                 ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP\n         BZ    ENDGRP\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         BZ    DSATNEXT                GET NEXT DSNAME\n         B     DSATNXT2                GET NEXT DSNAME\n         SPACE 2\nENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         BZ    ENDGRP2\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         BE    NEXTSER\nENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         LA    R3,0(,R3)\n         LTR   R3,R3                   END OF CHAIN?\n         BNZ   SETUPNXT                NO, BRANCH\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         BE    RETURN\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n         MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE\n         MVC   5(19,R2),=C'DATA SETS DISPLAYED'\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         BH    CNVTALOC\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         BZ    RETURN\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   5(19,R2),=C'DATA SET DISPLAYED '\nCNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         BE    DISPLAYT\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\nDISPLAYT BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         BL    BRANCH\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   SLA   R15,2                   MULTIPLY BY 4\n         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\nBRTABLE  B     RC4\n         B     RCTALLOC\n         B     RCTUSED\n         B     RCLALLOC\n         B     RCLUSED\n         B     RCTDIFF\n         B     RCLDIFF\n         B     RCNUM\n         B     RCPREV\n         B     RCDSORG\n         B     RCDIRA\n         B     RCDIRU\n         B     RCENTR\n         B     RCMEMB\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         B     EXIT\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         B     EXIT\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         B     EXIT\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         B     EXIT\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         B     EXIT\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         BNZ   EXIT\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         B     EXIT\nRCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         B     EXIT\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         B     EXIT\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         B     EXIT\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         B     EXIT\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         B     EXIT\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         B     EXIT\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         B     EXIT\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         B     EXIT\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    EXIT2\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\n         LR    R15,R3                  RESTORE RETURN CODE\n         $RTRN RENT=DSECTLEN,RC=(R15)\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\n         LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\nDSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,R1(R6)               ADD 1 TRACK\n         LA    R5,4(R5)\n         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?      ABL NOV92\n         BZ    DSATUTRK                NO, DONE               ABL NOV92\n         LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'13'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'13'               NO, DO 13 NEXT         ABL NOV92\n         B     DSATTRKS                CONTINUE               ABL NOV92\n         SPACE 3                                              ABL NOV92\nDSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         BZ    DSATXNTS\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n         IC    R1,DS1NOPEV             LOAD EXTENTS\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n         CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n         BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n         MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    NOSECOND\n         LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         BM    TRKALLOC\n         BO    CYLALLOC\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         B     SECAMT\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         B     SECAMT\nTRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         BZ    BLKALLOC\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         B     SECAMT\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n         LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND BR    R14                     RETURN\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n         MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'                                        ABL94\n         BE    $ALLEX20                                           ABL94\n         LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         BNO   NOT$CYL                  NO - SKIP                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         B     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         LH    R0,2(,R1)                GET START CC              ABL94\n         MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n         AH    R0,4(,R1)                ADD START HH              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         LH    R0,6(,R1)                GET END CC                ABL94\n         MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n         AH    R0,8(,R1)                ADD END HH                ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         LH    R15,6(,R1)               GET END CC                ABL94\n         SH    R15,2(,R1)               SUB START CC              ABL94\n         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n         AH    R15,8(,R1)               ADD END HH                ABL94\n         SH    R15,4(,R1)               SUB START HH              ABL94\n         LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n         BZ    $ALLEX20                NO, DONE                   ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         BNZ   DSNERR                  NO, SOME ERROR             ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         B     $ALLEX10                CONTINUE                   ABL94\n         SPACE 3                                                  ABL94\n$ALLEX20 DS    0H                                                 ABL94\n$ALLEX99 L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\nCONVDEC0 CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\nHEADER3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--$\n               TYPE-------------------------'                     ABL94\n         EJECT\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         BZ    DSORG001\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\nDSORG001 LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         BZ    DSORGCLC\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         BE    DSORGMVC\n         BXLE  R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\nDSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         BE    DSORGPO\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         BE    DSORGPS\nDSORGBAD OI    FLAGS,$NOTPOPS\n         B     DSORGRTN\nDSORGPO  OI    FLAGS,$DSPO             PARTITIONED\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         BNO   DSORGRTN                NO, BRANCH             ABL NOV92\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         B     DSORGRTN\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         BZ    DSATT\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         BNZ   DSATUORV\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         BZ    DSATV\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         BZ    DSATB\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         BZ    DSATS\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         BZ    DSATA\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         BZ    DSATM\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         BZ    DSATBLK\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(8,R2),DATEWORK        MOVE DATE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(8,R2),DATEWORK        MOVE DATE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(8,R2),DATEWORK        MOVE DATE INTO MESSAGE\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         BZ    REFRTRN\n         MVI   8(R2),C'*'              INDICATE UPDATE BIT ON\nREFRTRN  BR    R14                     RETURN\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         BNE   BADDAY\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         BZ    BADDAY\n         TM    WORK+3,X'06'\n         BZ    BADDAY\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         BH    BADDAY\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+2,X'F0'          SET ZONE\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL3'0'          00 00 0C\n         MVO   YEAR2,YEAR              00 0Y YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         B     DATERTRN\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\nERRPARS  MVC   OUTLINE(28),DSATERR1\n         B     SETERROR\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\nNOID     MVC   OUTLINE(32),DSATERR7\n         B     RLSA\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\nTOOLONG  MVC   OUTLINE,BLANKS\n         MVC   OUTLINE(44),DSATERR4\nRLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BAL   R2,PUTL2                PUT MESSAGE\n         LA    R3,16                   SET CONDITION CODE\n         B     EXIT2\n*--------ERROR IN LOCATE MACRO\nLOCERROR SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   BAL   R2,PUTL                 PRINT IT\n         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         B     PUTLINE                 PRINT THE LINE\n*--------ERROR IN OBTAIN MACRO\nDSNERR   CH    R15,=H'8'               TEST RETURN CODE\n         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n         BE    TESTVALL\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         B     DSNERR1\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         B     PUTLINE                 PRINT IT\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         B     PUTLINE                 DISPLAY MESSAGE\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         B     PUTLINE                 DISPLAY MESSAGE              SPG\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         BE    PUTLHPDS\nPUTL2    PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         BZ    PUTLBACK\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK BR    R2                      RETURN\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                         EXIT\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\nTTRLOC   CAMLST BLOCK,0,0,0\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(046),CL7'2302   '   04 (04) - 2302 DISK FILE\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\nMODLINE  DC    H'204,0'                                           ABL94\nBLANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY\n         DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         BNE   PDSSAVE\n         BCT   R2,PDSEND               DECREMENT COUNTER\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TESTORG\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         BNE   ERRDAIR\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         BZ    ERRDSORG\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         BZ    ERROPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n         SPACE\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         BNP   NEXTBLK\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         BNE   PROCENTR\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         B     NEXTBLK\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         BZ    DIRLEN\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         B     NEXTENT\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         B     PDSRTRN\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         BNE   CTLGERR\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         BNE   DYNALCER\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         B     PDSRTRN\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         B     PDSRTRN\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         BNE   OTHERERR\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         B     PDSRTRN\nOTHERERR ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         B     PDSRTRN\n*--------OPEN ERROR\nERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         B     PDSRTRN\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         B     PDSRTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPDSRTRN  $RTRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT'\n         IKJNAME  'NOPRINT'\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\nLOCBYTTR CAMLST BLOCK,0,0,0            LOCATE BY TTR\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n*                     .... XXXX          NOT USED\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL5,CL3                                            ABL94\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL5,CL3                                            ABL94\nOL@LNTH  DS    CL5,CL2                                            ABL94\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nHALF     DS    H                       HALFWORD ALIGNED WORK AREA\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nJULIAN   DS    0CL5                    JULIAN DATE - EBCDIC\nYR       DS    CL2                     YEAR\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE\n         DS    C                       FILLER\nDATE     DS    0CL3                    JULIAN DATE - PACKED DECIMAL\nYEAR     DS    C                       YEAR - NO SIGN\nDAY      DS    CL2                     DD DS\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL3                    00 0Y YS  -  0Q QS RS\n         DS    C                       0Q         PART OF QUOTIENT\nYEAR2    DS    0PL2                    0Y YS      YEAR AND SIGN\n         DS    C                       QS         QUOTIENT AND SIGN\nREM      DS    C                       RS         REMAINDER AND SIGN\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nUCBPARM1 DS    3A             PARMS FOR UCB SCAN SERVICES\nUCBANSR1 DS    A              RESULT UCB ADDRESS\n         DS    0D\nUCBWORK1 DS    CL100          UCB SCAN WORK AREA\n         DS    0D\nUCBPARM2 DS    3A             PARMS FOR UCB SCAN SERVICES\nUCBANSR2 DS    A              RESULT UCB ADDRESS\n         DS    0D\nUCBWORK2 DS    CL100          UCB SCAN WORK AREA\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\n         DS    0D\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         END\n//*\n//LINK   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.CMDLIB(DSAT)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//*\n//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SYS2.HELP(DSAT),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -\n               THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION\n               INFORMATION FOR DATA SETS ON A DIRECT ACCESS\n               DEVICE.\n\n               DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE\n               ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION\n               INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE\n               OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS\n               AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL\n               BE DISPLAYED.\n\n               THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING\n               THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.\n               THIS OPTION PERMITS DISPLAYING INFORMATION FOR\n               UNCATALOGED DATA SETS.\n\n               THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY\n               THE USER WHEN HE ENTERS THE DSAT COMMAND BY\n               SPECIFYING KEYWORD OPERANDS.\n\n               THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES\n               TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF\n               DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED\n               VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE\n               WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY\n               SPECIFYING NOPRINT.  THE HARDCOPY KEYWORD MAY BE USED\n               TO DIRECT THE OUTPUT TO A PRE-ALLOCATED DATA SET.\n\n               THE USER MAY CHOOSE WHAT INFORMATION WILL BE\n               DISPLAYED BY ENTERING KEYWORDS.\n\n               THE INFORMATION THAT MAY BE DISPLAYED IS:\n                1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED.\n                2. FILE SEQUENCE NUMBER.\n                3. DEVICE TYPE CODE FROM CATALOG ENTRY.\n                4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).\n                5. SECONDARY ALLOCATION (AMOUNT AND UNITS).\n                6. DATA SET ORGANIZATION.\n                7. DCB (RECFM, BLKSIZE, AND LRECL).\n                8. CREATION DATE.\n                9. EXPIRATION DATE.\n               10. LAST DATE REFERENCED (MVS SU 60).\n               11. FULLY QUALIFIED DATA SET NAME.\n               12. CCHHR OF THE FORMAT 1 DSCB.\n               13. GENERATION DATA GROUP DATA.\n               14. PDS DIRECTORY INFORMATION.\n)X SYNTAX -\n               DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC\n                                 DSORG/NODSORG     DCB/NODCB\n                                 CRDATE/NOCRDATE   EXDATE/NOEXDATE\n                                 LASTREF/NOLASTREF\n                                 TOTALS/NOTOTALS   PRINT/NOPRINT\n                                 HEADER/NOHEADER   ALL/DAONLY\n                                 GDGDATA/NOGDGDATA SEQNO/NOSEQNO\n                                 DEVTYPE/NODEVTYPE DEVICE/NODEVICE\n                                 CCHHR/NOCCHHR     PDS/NOPDS\n                                 SECONDARY/NOSECONDARY\n                                 GENERIC           DSONLY\n                                 HARDCOPY(DDNAME)  VOLUME(SERIAL)\n                                 RC(TALLOC/TUSED/TDIFF/\n                                    LALLOC/LUSED/LDIFF/NUM/\n                                    PREVIOUS/DSORG/DIRALLOC/\n                                    DIRUSED/ENTRIES/ALIASES/\n                                    MEMBERS)\n\n               DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX\n                           SERIAL   ALLOC   DSORG    DCB    CRDATE\n                           NOEXDATE TOTALS  PRINT    HEADER ALL\n                           NOPDS    NOSEQNO NODEVICE NODEVTYPE\n                           NOGDGDATA    NOLASTREF    NOSECONDARY\n                           NOCCHHR      NOEXTENTS    NOFULL\n               NOTE: IF HARDCOPY IS SPECIFIED, NOPRINT IS THE DEFAULT\n\n               WITH FULL - SAME AS DEFAULTS ABOVE WITH:\n                           EXDATE    PDS     DEVICE\n                           GDGDATA   LASTREF SECONDARY\n                           CCHHR\n                           NODEVTYPE NOSEQNO NOEXTENTS\n\n\n   SAMPLE OUTPUTS:\n 1. DSAT LIB.CNTL\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL\n\n 2. DSAT LIB.CNTL LAST\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS...\n STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE...\n\n 3. DSAT LIB.CNTL FULL  (NOTE: OUTPUT BELOW WRAPS TO ABOUT 160 BYTES)\n SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n   -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-\n   FB   23440    80 05/04/94 05/06/94 08/03/94* 0000000930 WSER07.LIB.C\n\n 4. DSAT LINK\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-\n STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALIA\n STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOAD\n MIGRAT                                                WSER07.LINK.USER\n         1370   652                                       3 DATA SETS\n\n 5. DSAT LIB.CNTL EXTENTS\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL\n     EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE-----------\n       0   02CB,0004  10729   02D7,0004  10909     181  DATA\n       1   052A,0000  19830   052C,0008  19868      39  DATA\n       2   07D6,0000  30090   07D9,000E  30149      60  DATA\n\n\n)O OPERANDS -\n               NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL\n                           NAMES. TSO NAMING CONVENTIONS ARE USED.\n                           IF A SPECIFIED NAME IS AN INDEX NAME,\n                           DATA SETS UNDER THAT LEVEL WILL BE\n                           DISPLAYED.  IF NO NAME IS SPECIFIED,\n                           THE PREFIX WILL BE USED.  FOR MVT AND\n                           SVS, THIS IS THE USERID.  FOR MVS,\n                           THE PREFIX MAY BE SPECIFIED WITH THE\n                           PROFILE COMMAND.  IF NO NAME IS\n                           SPECIFIED AND THE PROFILE SPECIFIES\n                           NOPREFIX, THE USERID WILL BE USED.\n\n                           NOTE - IF A KEYWORD IS ENTERED,\n                                  NAME-LIST MUST BE SPECIFIED.  IF\n                                  NAME-LIST IS OMITTED, IT WILL\n                                  NOT DEFAULT TO THE PREFIX, BUT\n                                  THE KEYWORD WILL BE INTERPRETED\n                                  AS THE NAME-LIST, NOT A KEYWORD.\n))SERIAL        LIST VOLUME SERIALS.\n))NOSERIAL      DO NOT LIST VOLUME SERIALS.\n))SEQNO         LIST FILE SEQUENCE NUMBERS.\n))NOSEQNO       DO NOT LIST FILE SEQUENCE NUMBERS.\n))DEVTYPE       DISPLAY DEVICE TYPE CODE.\n))NODEVTYPE     DO NOT DISPLAY DEVICE TYPE CODE.\n))DEVICE        LIST DEVICE NAME (3330, 3350, ETC.).\n))NODEVICE      DO NOT LIST DEVICE NAME.\n))ALLOC         LIST ALLOCATION INFORMATION (TRACKS ALLOCATED,\n                TRACKS FREE, AND EXTENTS).\n))NOALLOC       DO NOT LIST ALLOCATION INFORMATION.\n))SECONDARY     DISPLAY SECONDARY ALLOCATION INFORMATION.\n))NOSECONDARY   DO NOT DISPLAY SECONDARY ALLOCATION INFORMATION.\n))DSORG         LIST DATA SET ORGANIZATION.\n))NODSORG       DO NOT LIST DATA SET ORGANIZATION.\n))PDS           LIST PDS DIRECTORY INFORMATION (BLOCKS ALLOC, USED,\n                ENTRIES, AND ALIASES).\n))NOPDS         DO NOT LIST PDS DIRECTORY INFORMATION.\n))DCB           LIST DCB INFORMATION (RECFM, BLKSIZE, AND LRECL).\n))NODCB         DO NOT LIST DCB INFORMATION.\n))CRDATE        LIST CREATION DATE.\n))NOCRDATE      DO NOT LIST CREATION DATE.\n))EXDATE        LIST EXPIRATION DATE.\n))NOEXDATE      DO NOT LIST EXPIRATION DATE.\n))LASTREF       DISPLAY LAST DATE REFERENCED (MVS SU 60).\n))NOLASTREF     DO NOT DISPLAY LAST DATE REFERENCED.\n))CCHHR         DISPLAY FORMAT 1 DSCB ADDRESS.\n))NOCCHHR       DO NOT DISPLAY CCHHR.\n))TOTALS        DISPLAY TOTALS (TRACKS ALLOCATED, TRACKS FREE,\n                AND DATA SETS DISPLAYED).\n))NOTOTALS      DO NOT DISPLAY TOTALS.\n))PRINT         OUTPUT IS TO BE DISPLAYED.\n))NOPRINT       OUTPUT IS NOT TO BE DISPLAYED, EXCEPT FOR ERROR\n                MESSAGES.\n))HEADER        DISPLAY OUTPUT HEADER LINE.\n))NOHEADER      DO NOT DISPLAY HEADER LINE.\n))ALL           DISPLAY ALL DATA SET NAMES UNDER AN INDEX LEVEL.\n))DAONLY        DISPLAY DATA SETS ON MOUNTED DIRECT ACCESS\n                DEVICES.\n))GDGDATA       INFORMATION ON GENERATION DATA GROUP INDEXES IS TO\n                BE DISPLAYED.\n))NOGDGDATA     GENERATION DATA GROUP DATA WILL NOT BE DISPLAYED.\n))GENERIC       NAME SPECIFIES A GENERIC KEY.         ** MVS ONLY **\n))DSONLY        TREAT NAMES AS DATA SET NAMES, NOT INDEX NAMES.\n))VOLUME        SPECIFIES THE VOLUME TO BE SEARCHED FOR THE DATA SET.\n))HARDCOPY      SPECIFIES THE DDNAME A PRE-ALLOCATED DATA SET TO\n                RECEIVE A COPY OF DSAT OUTPUT.\n))FULL          FORMAT ADDITIONAL INFORMATION FOR EACH DATA SET: PDS,\n                EXDATE, DEVICE, GDGDATA, LASTREF, SECONDARY, CCHHR.\n\n                OTHER KEYWORDS (LIKE NOPDS) MAY BE SPECIED AFTER FULL\n                TO TURN OFF OPTIONS SELECTIVELY.\n))NOFULL        DO NOT FORMAT ADDITIONAL INFORMATION.\n))EXTENTS       FORMAT EXTENT INFORMATION FOR EACH DATA SET FOLLOWING\n                THE DATA SET DISPLAY LINE.\n\n                THE FOLLOWING FIELDS ARE FORMATTED FOR EACH EXTENT:\n                    EXT#       - EXTENT NUMBER (0 TO 122)\n                    START/CCHH - STARTING CCHH HEX ADDRESS\n                    S/TRK      - STARTING CCHH IN DECIMAL\n                    END/CCHH   - ENDING CCHH HEX ADDRESS\n                    E/TRK      - ENDING CCHH IN DECIMAL\n                    LENGTH     - SIZE OF EXTENT IN TRACKS\n                    TYPE       - COMMENTS ON EXTENT USE\n                                 CYL     - CYLINDER ALLOCATION\n                                 SHR     - SHARING CYLINDER\n                                 USR LBL - USER LABELS\n                                 IS INDX - ISAM INDEX\n                                 IS OVFL - ISAM OVERFLOW\n))NOEXTENTS     DO NOT FORMAT EXTENT INFORMATION.\n))RC            SPECIFIES HOW THE RETURN CODE IS TO BE SET:\n                RC NOT SPECIFIED:  4 - SUCCESSFUL COMPLETION\n                                  16 - UNABLE TO INTERPRET COMMAND\n                TALLOC               - TOTAL TRACKS USED\n                TUSED                - TOTAL TRACKS USED\n                TDIFF                - TOTAL OVERALLOCATION\n                                       (TALLOC-TUSED)\n                LALLOC               - TRACKS ALLOCATED BY LAST\n                                       DATA SET\n                LUSED                - TRACKS USED BY LAST DATA SET\n                LDIFF                - LAST DATA SET OVERALLOCATION\n                                       (LALLOC-LUSED)\n                NUM                  - NUMBER OF DATA SETS DISPLAYED\n                                       (INCLUDES DATA SETS NOT\n                                       FOUND, ETC.)\n                PREVIOUS             - ASSUMES THE RETURN CODE OF\n                                       THE PREVIOUS COMMAND.\n                DSORG                - SETS THE RETURN CODE BASED\n                                       ON THE DATA SET ORGANIZATION\n                                       OF THE DATA SETS DISPLAYED.\n                                       1 - ALL DATA SETS WERE SEQ.\n                                       2 - ALL DATA SETS WERE PDS\n                                       3 - DATA SETS WERE MIXED PDS\n                                           AND SEQUENTIAL\n                                       4 - AN ERROR OCCURRED OR A\n                                           DATA SET OTHER THAN PDS\n                                           OR SEQUENTIAL WAS\n                                           PROCESSED\n                DIRALLOC - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           ALLOCATED.\n                DIRUSED  - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           USED.\n                ENTRIES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ENTRIES IN THE\n                           DIRECTORY (MEMBERS AND\n                           ALIASES).\n                ALIASES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ALIASES.\n                MEMBERS  - SETS THE RETURN CODE TO\n                           ENTRIES-ALIASES.\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSAT1": {"ttr": 16388, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x16\\x01\\x013\\x0f\\x01\\x03\\x12\\x0f\\x13\\x13\\x13_\\x13S\\x13_\\xc6\\xd9\\xc5\\xe8\\xc2\\xc9\\xc5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2001-11-26T00:00:00", "modifydate": "2003-04-30T13:13:16", "lines": 4959, "newlines": 4947, "modlines": 4959, "user": "FREYBIE"}, "text": "//WSER07J  JOB ...\n//*\n//*  ASM1 -- ASSEMBLES DSAT (YOU MAY OPTIONALLY CHANGE ASMA90 TO IFOX00)\n//*  LINK -- LINKS DSAT INTO 'SYS1.CMDLIB(DSAT)'\n//*  COPY -- COPIES DSAT HELP TO 'SYS2.HELP(DSAT)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*\n//*  LIMITS IN ICF CATALOGS:\n//*\n//*   IF GDG OPTION IS USED, ONLY THE GDG BASE NAME IS DISPLAYED\n//*   WITH THE MESSAGE ' GDG -- IN ICF CATALOG'\n//*\n//*\n//ASM1  EXEC  PGM=ASMA90,REGION=2048K,\n//             PARM=('DECK,NOOBJECT,NORLD,RENT,TERM,XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n*ORIGINAL SOURCE -- CBT439.FILE296  (NOVEMBER 2001)\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*  BDF MODIFICATION :                                                 *\n*  30.04.2003 - A.FREYBIER                                            *\n*               MORE THAN 9999 DATASETS POSSIBLE |                    *\n*  29.11.2001 - A.FREYBIER                                            *\n*               INCREASE GETMAIN AREA FOR MORE DATASETS               *\n* ------------------------------------------------------------------- *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\nDSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              4 - SUCCESSFUL COMPLETION.             *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LENARD WOREN'S  ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n*     BURLINGAME, CA  94010                                           *\n*     (415) 696-1800                       HOME (408) 997-2366        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\nDS1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\nDS1PDSE  EQU   X'08'                    PDSE DATA SET         ABL NOV92\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\nDS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\nDS3PTRDS DS    XL5                      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\nDSAT     TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '3145728'                                    #6735B3 BDF\n**&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT   HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n         TITLE 'ENTRY CODING'\nDSAT     $ENTER BASE=(R11,R12),                                        +\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB\n         MVC   DSATHEDR(4),MODLINE\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         DROP  R8                      DROP IOPL BASE REGISTER\n*--------GET CATALOG WORKAREA\n         L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n         CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n         BNE   *+8                   YES, BRANCH\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL EQU   *\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         BE    SEARS               YES, CONTINUE               HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3\n         STM   R1,R4,DSATDCB3\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   ZEROTOT\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    SETUPHDR\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n         BNE   *+8                     YES, BRANCH\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    SETUPHDR\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TRYDEV\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TRYDEV\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         BE    TRYDEVIC\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         BE    TRYALLOC\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    TRYDSORG\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n         LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    TRYDSORG\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    TRYPDS\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    TRYDCB\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    TRYCRDAT\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    TRYEXDAT\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    TRYLREFD\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF\n         BNE   TRYCCHHR\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\nTRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    DODSNAME\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         BH    DSNFLDOK\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\nDSNFLDOK LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         BE    BUILDDSN\n         BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         BNZ   MOVEREST\n*--------APEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\nGETLEN   SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         BNZ   COPYSER\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         BNZ   PROCGRP\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   CHECK8\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         BE    OBTAIN1\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         BNE   PROCGRP\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         BE    PROCTTR\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         BE    PROCGRP                    SU 8 NOT INSTALLED\n         B     LOCERROR\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         BNE   CHECK12\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         BNE   PROCGRP\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         BNE   PROCGRP\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BAL   R2,PUTL                 DISPLAY LINE\n         B     ENDGRP\n         SPACE 2\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         BNE   LOCERROR\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   LOCERROR\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND1\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         B     PROCNTRY                LOAD INDEX NAME\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   LOCERROR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         BE    LNKENTRY\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         BE    DSATNEXT\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         BE    DSNOVER5\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         BE    NDXENTRY\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         BNE   DSNENTRY\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         BE    NDXENTRY\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         BZ    PUTGDG\n         BM    GDGEORD\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         B     PUTGDG\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         BNZ   PUTGDG\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BAL   R2,PUTL                 DISPLAY LINE\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         B     FINDEND\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         BZ    ENDLEVEL\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         B     READCTLG\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         BNZ   TESTDONE\n         TM    FLAGS,GDG               TEST FOR GDG\n         BNZ   MTGDG\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         B     PUTEMPTY\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\nPUTEMPTY L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BAL   R2,PUTL                 DISPLAY MESSAGE\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         BE    ENDGRP\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         BNE   FINDDOT\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         B     PROCNTRY\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   LOCATE2\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1\n         B     LOCERROR\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   DSNMVC\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         B     LDVOLCNT\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         BE    BACKUP\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         BNZ   SAVELEN\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         BNZ   SAVELEN\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         BNE   SAVELEN                 NO, BRANCH                 ABL99\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         BE    PARTIAL\n         CH    R15,=H'40'\n         BNE   LOCERROR\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         B     RETRYLOC\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         BAL   R2,PUTL                 DISPLAY LINE                 ABL\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         B     DSATPROC\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         BNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1                 OK, BRANCH\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         BE    GDGMSGL                 YES, BRANCH                  SPG\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         BNE   LOCERROR                NO, BRANCH\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         B     LOCERROR\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\nLSHOWCAT EQU   *-SHOWCATF\nTESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         BZ    ENDGRP\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BAL   R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         B     ENDGRP\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EX    R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         BNE   OBTAIN1\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NEXTSER               YES, IGNORE\n         B     THISVOL\n         SPACE 1\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         BO    ENDGRP2\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE\n         B     ENDGRP2\nTHISVOL  CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         BNH   GETSER\n         LA    R1,20                   SET MAX COUNT\nGETSER   C     R1,=F'1'                TEST VOLUME COUNT\n         BL    BADVOLCT                BAD VOLUME COUNT\n         BE    STOREVCT\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TESTDEV\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TESTDEV\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         BE    TESTDA\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         BNE   NOTDASD\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE CH    R1,=H'15'               TEST AGAINST MAX\n         BH    NOTDASD\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         BNZ   TESTDEV2\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         BNE   NEXTDEV                                         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NOTUP\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         BZ    TESTTYPE\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         B     TESTTYPE\nNOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         B     DSNERR\nTESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         BE    GETFMT1\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\nGETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n         BZ    PROCESS\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSCB                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    PROCDSRG\n         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    PROCPDS\n         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    PROCDCB\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         BZ    PROCDCB\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    PROCCRDT\n         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE\nPROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    PROCEXDT\n         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\nPROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    PROCLREF\n         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n         BNE   PROCCHHR\n         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    PUTLINE\n         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\nPUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BCT   R1,GETSER               LOOP FOR MORE VOLUMES\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         BZ    SAVETOTL\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL STM   R4,R8,TOTLS             STORE TOTALS\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         BE    NOEXTENT                YES, BRANCH                ABL94\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         BZ    NOEXTENT                NO, BRANCH                 ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         BZ    ENDGRP\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         BZ    DSATNEXT                GET NEXT DSNAME\n         B     DSATNXT2                GET NEXT DSNAME\n         SPACE 2\nENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         BZ    ENDGRP2\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         BE    NEXTSER\nENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         LA    R3,0(,R3)\n         LTR   R3,R3                   END OF CHAIN?\n         BNZ   SETUPNXT                NO, BRANCH\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         BE    RETURN\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n*\n*  MORE THAN 9999 DATASETS POSSIBLE |        A.FREYBIER 30.04.2003 BDF\n**       MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE       BDF\n**       MVC   5(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE       BDF\n         MVC   8(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n*\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         BH    CNVTALOC\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         BZ    RETURN\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   5(19,R2),=C'DATA SET DISPLAYED '\nCNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         BE    DISPLAYT\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\nDISPLAYT BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         BL    BRANCH\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   SLA   R15,2                   MULTIPLY BY 4\n         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\nBRTABLE  B     RC0                                             HD JAN99\n         B     RCTALLOC\n         B     RCTUSED\n         B     RCLALLOC\n         B     RCLUSED\n         B     RCTDIFF\n         B     RCLDIFF\n         B     RCNUM\n         B     RCPREV\n         B     RCDSORG\n         B     RCDIRA\n         B     RCDIRU\n         B     RCENTR\n         B     RCMEMB\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         B     EXIT\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         B     EXIT\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         B     EXIT\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         B     EXIT\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         B     EXIT\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         BNZ   EXIT\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         B     EXIT\nRCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         B     EXIT\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         B     EXIT\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         B     EXIT\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         B     EXIT\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         B     EXIT\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         B     EXIT\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         B     EXIT\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         B     EXIT\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         B     EXIT                                            HD JAN99\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         B     EXIT                                            HD JAN99\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         BO    RC8                     YES, RETURN CODE=8      HD JAN99\n         B     EXIT                                            HD JAN99\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    EXIT2\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\n         LR    R15,R3                  RESTORE RETURN CODE\n         $RTRN RENT=DSECTLEN,RC=(R15)\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\n         LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\nDSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,R1(R6)               ADD 1 TRACK\n         LA    R5,4(R5)\n         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?      ABL NOV92\n         BZ    DSATUTRK                NO, DONE               ABL NOV92\n         LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'13'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'13'               NO, DO 13 NEXT         ABL NOV92\n         B     DSATTRKS                CONTINUE               ABL NOV92\n         SPACE 3                                              ABL NOV92\nDSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         BZ    DSATXNTS\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n         IC    R1,DS1NOPEV             LOAD EXTENTS\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n         CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n         BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n         MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    NOSECOND\n         LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         BM    TRKALLOC\n         BO    CYLALLOC\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         B     SECAMT\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         B     SECAMT\nTRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         BZ    BLKALLOC\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         B     SECAMT\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n         LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND BR    R14                     RETURN\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n         IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n         MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'                                        ABL94\n         BE    $ALLEX20                                           ABL94\n         LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         BNO   NOT$CYL                  NO - SKIP                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         B     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         LH    R0,2(,R1)                GET START CC              ABL94\n         MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n         AH    R0,4(,R1)                ADD START HH              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         LH    R0,6(,R1)                GET END CC                ABL94\n         MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n         AH    R0,8(,R1)                ADD END HH                ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         LH    R15,6(,R1)               GET END CC                ABL94\n         SH    R15,2(,R1)               SUB START CC              ABL94\n         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n         AH    R15,8(,R1)               ADD END HH                ABL94\n         SH    R15,4(,R1)               SUB START HH              ABL94\n         LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n         BZ    $ALLEX20                NO, DONE                   ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         BNZ   DSNERR                  NO, SOME ERROR             ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         B     $ALLEX10                CONTINUE                   ABL94\n         SPACE 3                                                  ABL94\n$ALLEX20 DS    0H                                                 ABL94\n$ALLEX99 L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\nCONVDEC0 CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\nHEADER3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--$\n               TYPE-------------------------'                     ABL94\n         EJECT\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         BZ    DSORG001\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\nDSORG001 LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         BZ    DSORGCLC\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         BE    DSORGMVC\n         BXLE  R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\nDSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         BE    DSORGPO\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         BE    DSORGPS\nDSORGBAD OI    FLAGS,$NOTPOPS\n         B     DSORGRTN\nDSORGPO  OI    FLAGS,$DSPO             PARTITIONED\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         BNO   DSORGRTN                NO, BRANCH             ABL NOV92\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         B     DSORGRTN\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         BZ    DSATT\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         BNZ   DSATUORV\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         BZ    DSATV\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         BZ    DSATB\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         BZ    DSATS\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         BZ    DSATA\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         BZ    DSATM\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         BZ    DSATBLK\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         BZ    REFRTRN\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         BNE   BADDAY\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         BZ    BADDAY\n         TM    WORK+3,X'06'\n         BZ    BADDAY\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         BH    BADDAY\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         B     DATERTRN\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\nERRPARS  MVC   OUTLINE(28),DSATERR1\n         B     SETERROR\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\nNOID     MVC   OUTLINE(32),DSATERR7\n         B     RLSA\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\nTOOLONG  MVC   OUTLINE,BLANKS\n         MVC   OUTLINE(44),DSATERR4\nRLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BAL   R2,PUTL2                PUT MESSAGE\n         LA    R3,16                   SET CONDITION CODE\n         B     EXIT2\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         BNE   LOCERR                                          HD JAN99\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   BAL   R2,PUTL                 PRINT IT\n         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         B     PUTLINE                 PRINT THE LINE\n*--------ERROR IN OBTAIN MACRO\nDSNERR   CH    R15,=H'8'               TEST RETURN CODE\n         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n         BE    TESTVALL\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         B     DSNERR1\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         B     PUTLINE                 PRINT IT\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         B     PUTLINE                 DISPLAY MESSAGE\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         B     PUTLINE                 DISPLAY MESSAGE              SPG\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         BE    PUTLHPDS\nPUTL2    PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         BZ    PUTLBACK\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK BR    R2                      RETURN\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                         EXIT\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\nTTRLOC   CAMLST BLOCK,0,0,0\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\nMODLINE  DC    H'204,0'                                           ABL94\nBLANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY\n         DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         BNE   PDSSAVE\n         BCT   R2,PDSEND               DECREMENT COUNTER\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TESTORG\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         BNE   ERRDAIR\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         BZ    ERRDSORG\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         BZ    ERROPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n         SPACE\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         BNP   NEXTBLK\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         BNE   PROCENTR\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         B     NEXTBLK\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         BZ    DIRLEN\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         B     NEXTENT\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         B     PDSRTRN\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         BNE   CTLGERR\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         BNE   DYNALCER\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         B     PDSRTRN\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         B     PDSRTRN\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         BNE   OTHERERR\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         B     PDSRTRN\nOTHERERR ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         B     PDSRTRN\n*--------OPEN ERROR\nERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         B     PDSRTRN\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         B     PDSRTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPDSRTRN  $RTRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\nLOCBYTTR CAMLST BLOCK,0,0,0            LOCATE BY TTR\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL5,CL3                                            ABL94\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL5,CL3                                            ABL94\nOL@LNTH  DS    CL5,CL2                                            ABL94\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nHALF     DS    H                       HALFWORD ALIGNED WORK AREA\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\n         DS    0D\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n         END\n//*\n//LINK   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.CMDLIB(DSAT)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//*\n//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SYS2.HELP(DSAT),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -\n               THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION\n               INFORMATION FOR DATA SETS ON A DIRECT ACCESS\n               DEVICE.\n\n               DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE\n               ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION\n               INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE\n               OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS\n               AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL\n               BE DISPLAYED.\n\n               THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING\n               THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.\n               THIS OPTION PERMITS DISPLAYING INFORMATION FOR\n               UNCATALOGED DATA SETS.\n\n               THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY\n               THE USER WHEN HE ENTERS THE DSAT COMMAND BY\n               SPECIFYING KEYWORD OPERANDS.\n\n               THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES\n               TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF\n               DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED\n               VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE\n               WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY\n               SPECIFYING NOPRINT.  THE HARDCOPY KEYWORD MAY BE USED\n               TO DIRECT THE OUTPUT TO A PRE-ALLOCATED DATA SET.\n\n               THE USER MAY CHOOSE WHAT INFORMATION WILL BE\n               DISPLAYED BY ENTERING KEYWORDS.\n\n               THE INFORMATION THAT MAY BE DISPLAYED IS:\n                1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED.\n                2. FILE SEQUENCE NUMBER.\n                3. DEVICE TYPE CODE FROM CATALOG ENTRY.\n                4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).\n                5. SECONDARY ALLOCATION (AMOUNT AND UNITS).\n                6. DATA SET ORGANIZATION.\n                7. DCB (RECFM, BLKSIZE, AND LRECL).\n                8. CREATION DATE.\n                9. EXPIRATION DATE.\n               10. LAST DATE REFERENCED (MVS SU 60).\n               11. FULLY QUALIFIED DATA SET NAME.\n               12. CCHHR OF THE FORMAT 1 DSCB.\n               13. GENERATION DATA GROUP DATA.\n               14. PDS DIRECTORY INFORMATION.\n)X SYNTAX -\n               DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC\n                                 DSORG/NODSORG     DCB/NODCB\n                                 CRDATE/NOCRDATE   EXDATE/NOEXDATE\n                                 LASTREF/NOLASTREF\n                                 TOTALS/NOTOTALS   PRINT/NOPRINT\n                                 HEADER/NOHEADER   ALL/DAONLY\n                                 GDGDATA/NOGDGDATA SEQNO/NOSEQNO\n                                 DEVTYPE/NODEVTYPE DEVICE/NODEVICE\n                                 CCHHR/NOCCHHR     PDS/NOPDS\n                                 SECONDARY/NOSECONDARY\n                                 GENERIC           DSONLY\n                                 HARDCOPY(DDNAME)  VOLUME(SERIAL)\n                                 RC(TALLOC/TUSED/TDIFF/\n                                    LALLOC/LUSED/LDIFF/NUM/\n                                    PREVIOUS/DSORG/DIRALLOC/\n                                    DIRUSED/ENTRIES/ALIASES/\n                                    MEMBERS)\n\n               DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX\n                           SERIAL   ALLOC   DSORG    DCB    CRDATE\n                           NOEXDATE TOTALS  PRINT    HEADER ALL\n                           NOPDS    NOSEQNO NODEVICE NODEVTYPE\n                           NOGDGDATA    NOLASTREF    NOSECONDARY\n                           NOCCHHR      NOEXTENTS    NOFULL\n               NOTE: IF HARDCOPY IS SPECIFIED, NOPRINT IS THE DEFAULT\n\n               WITH FULL - SAME AS DEFAULTS ABOVE WITH:\n                           EXDATE    PDS     DEVICE\n                           GDGDATA   LASTREF SECONDARY\n                           CCHHR\n                           NODEVTYPE NOSEQNO NOEXTENTS\n\n\n   SAMPLE OUTPUTS:\n 1. DSAT LIB.CNTL\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNT\n\n 2. DSAT LIB.CNTL LAST\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   LAST REF    -D\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 08/03/1994* WS\n\n 3. DSAT LIB.CNTL FULL  (NOTE: OUTPUT BELOW WRAPS TO ABOUT 160 BYTES)\n SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n   -DCB ATTRIBUTES- CR. DATE   EX. DATE   LAST REF     C C H H R -DSNAM\n   FB   23440    80 05/04/1994 05/06/1994 08/03/1994* 0000000930 WSER07.\n\n 4. DSAT LINK\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR80P    20    18  1 X-PO  U    32760    80 07/19/1994 WSER07.LINK.AL\n STR81Z  1350   634  5 A-PO  U    32760    80 11/13/1993 WSER07.LINK.LO\n MIGRAT                                                  WSER07.LINK.US\n         1370   652                                       3 DATA SETS\n\n 5. DSAT LIB.CNTL EXTENTS\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNTL\n     EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE-----------\n       0   02CB,0004  10729   02D7,0004  10909     181  DATA\n       1   052A,0000  19830   052C,0008  19868      39  DATA\n       2   07D6,0000  30090   07D9,000E  30149      60  DATA\n\n\n)O OPERANDS -\n               NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL\n                           NAMES. TSO NAMING CONVENTIONS ARE USED.\n                           IF A SPECIFIED NAME IS AN INDEX NAME,\n                           DATA SETS UNDER THAT LEVEL WILL BE\n                           DISPLAYED.  IF NO NAME IS SPECIFIED,\n                           THE PREFIX WILL BE USED.  FOR MVT AND\n                           SVS, THIS IS THE USERID.  FOR MVS,\n                           THE PREFIX MAY BE SPECIFIED WITH THE\n                           PROFILE COMMAND.  IF NO NAME IS\n                           SPECIFIED AND THE PROFILE SPECIFIES\n                           NOPREFIX, THE USERID WILL BE USED.\n\n                           NOTE - IF A KEYWORD IS ENTERED,\n                                  NAME-LIST MUST BE SPECIFIED.  IF\n                                  NAME-LIST IS OMITTED, IT WILL\n                                  NOT DEFAULT TO THE PREFIX, BUT\n                                  THE KEYWORD WILL BE INTERPRETED\n                                  AS THE NAME-LIST, NOT A KEYWORD.\n))SERIAL        LIST VOLUME SERIALS.\n))NOSERIAL      DO NOT LIST VOLUME SERIALS.\n))SEQNO         LIST FILE SEQUENCE NUMBERS.\n))NOSEQNO       DO NOT LIST FILE SEQUENCE NUMBERS.\n))DEVTYPE       DISPLAY DEVICE TYPE CODE.\n))NODEVTYPE     DO NOT DISPLAY DEVICE TYPE CODE.\n))DEVICE        LIST DEVICE NAME (3330, 3350, ETC.).\n))NODEVICE      DO NOT LIST DEVICE NAME.\n))ALLOC         LIST ALLOCATION INFORMATION (TRACKS ALLOCATED,\n                TRACKS FREE, AND EXTENTS).\n))NOALLOC       DO NOT LIST ALLOCATION INFORMATION.\n))SECONDARY     DISPLAY SECONDARY ALLOCATION INFORMATION.\n))NOSECONDARY   DO NOT DISPLAY SECONDARY ALLOCATION INFORMATION.\n))DSORG         LIST DATA SET ORGANIZATION.\n))NODSORG       DO NOT LIST DATA SET ORGANIZATION.\n))PDS           LIST PDS DIRECTORY INFORMATION (BLOCKS ALLOC, USED,\n                ENTRIES, AND ALIASES).\n))NOPDS         DO NOT LIST PDS DIRECTORY INFORMATION.\n))DCB           LIST DCB INFORMATION (RECFM, BLKSIZE, AND LRECL).\n))NODCB         DO NOT LIST DCB INFORMATION.\n))CRDATE        LIST CREATION DATE.\n))NOCRDATE      DO NOT LIST CREATION DATE.\n))EXDATE        LIST EXPIRATION DATE.\n))NOEXDATE      DO NOT LIST EXPIRATION DATE.\n))LASTREF       DISPLAY LAST DATE REFERENCED (MVS SU 60).\n))NOLASTREF     DO NOT DISPLAY LAST DATE REFERENCED.\n))CCHHR         DISPLAY FORMAT 1 DSCB ADDRESS.\n))NOCCHHR       DO NOT DISPLAY CCHHR.\n))TOTALS        DISPLAY TOTALS (TRACKS ALLOCATED, TRACKS FREE,\n                AND DATA SETS DISPLAYED).\n))NOTOTALS      DO NOT DISPLAY TOTALS.\n))PRINT         OUTPUT IS TO BE DISPLAYED.\n))NOPRINT       OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))LIST          OUTPUT IS TO BE DISPLAYED.\n))NOLIST        OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))HEADER        DISPLAY OUTPUT HEADER LINE.\n))NOHEADER      DO NOT DISPLAY HEADER LINE.\n))ALL           DISPLAY ALL DATA SET NAMES UNDER AN INDEX LEVEL.\n))DAONLY        DISPLAY DATA SETS ON MOUNTED DIRECT ACCESS\n                DEVICES.\n))GDGDATA       INFORMATION ON GENERATION DATA GROUP INDEXES IS TO\n                BE DISPLAYED.\n))NOGDGDATA     GENERATION DATA GROUP DATA WILL NOT BE DISPLAYED.\n))GENERIC       NAME SPECIFIES A GENERIC KEY.         ** MVS ONLY **\n))DSONLY        TREAT NAMES AS DATA SET NAMES, NOT INDEX NAMES.\n))VOLUME        SPECIFIES THE VOLUME TO BE SEARCHED FOR THE DATA SET.\n))HARDCOPY      SPECIFIES THE DDNAME A PRE-ALLOCATED DATA SET TO\n                RECEIVE A COPY OF DSAT OUTPUT.\n))FULL          FORMAT ADDITIONAL INFORMATION FOR EACH DATA SET: PDS,\n                EXDATE, DEVICE, GDGDATA, LASTREF, SECONDARY, CCHHR.\n\n                OTHER KEYWORDS (LIKE NOPDS) MAY BE SPECIED AFTER FULL\n                TO TURN OFF OPTIONS SELECTIVELY.\n))NOFULL        DO NOT FORMAT ADDITIONAL INFORMATION.\n))EXTENTS       FORMAT EXTENT INFORMATION FOR EACH DATA SET FOLLOWING\n                THE DATA SET DISPLAY LINE.\n\n                THE FOLLOWING FIELDS ARE FORMATTED FOR EACH EXTENT:\n                    EXT#       - EXTENT NUMBER (0 TO 122)\n                    START/CCHH - STARTING CCHH HEX ADDRESS\n                    S/TRK      - STARTING CCHH IN DECIMAL\n                    END/CCHH   - ENDING CCHH HEX ADDRESS\n                    E/TRK      - ENDING CCHH IN DECIMAL\n                    LENGTH     - SIZE OF EXTENT IN TRACKS\n                    TYPE       - COMMENTS ON EXTENT USE\n                                 CYL     - CYLINDER ALLOCATION\n                                 SHR     - SHARING CYLINDER\n                                 USR LBL - USER LABELS\n                                 IS INDX - ISAM INDEX\n                                 IS OVFL - ISAM OVERFLOW\n))NOEXTENTS     DO NOT FORMAT EXTENT INFORMATION.\n))RC            SPECIFIES HOW THE RETURN CODE IS TO BE SET:\n                RC NOT SPECIFIED:  0 - SUCCESSFUL COMPLETION\n                                   8 - ONE OR MORE DATA SETS NOT FOUND\n                                  16 - UNABLE TO INTERPRET COMMAND\n                TALLOC               - TOTAL TRACKS USED\n                TUSED                - TOTAL TRACKS USED\n                TDIFF                - TOTAL OVERALLOCATION\n                                       (TALLOC-TUSED)\n                LALLOC               - TRACKS ALLOCATED BY LAST\n                                       DATA SET\n                LUSED                - TRACKS USED BY LAST DATA SET\n                LDIFF                - LAST DATA SET OVERALLOCATION\n                                       (LALLOC-LUSED)\n                NUM                  - NUMBER OF DATA SETS DISPLAYED\n                                       (INCLUDES DATA SETS NOT\n                                       FOUND, ETC.)\n                PREVIOUS             - ASSUMES THE RETURN CODE OF\n                                       THE PREVIOUS COMMAND.\n                DSORG                - SETS THE RETURN CODE BASED\n                                       ON THE DATA SET ORGANIZATION\n                                       OF THE DATA SETS DISPLAYED.\n                                       1 - ALL DATA SETS WERE SEQ.\n                                       2 - ALL DATA SETS WERE PDS\n                                       3 - DATA SETS WERE MIXED PDS\n                                           AND SEQUENTIAL\n                                       4 - AN ERROR OCCURRED OR A\n                                           DATA SET OTHER THAN PDS\n                                           OR SEQUENTIAL WAS\n                                           PROCESSED\n                DIRALLOC - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           ALLOCATED.\n                DIRUSED  - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           USED.\n                ENTRIES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ENTRIES IN THE\n                           DIRECTORY (MEMBERS AND\n                           ALIASES).\n                ALIASES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ALIASES.\n                MEMBERS  - SETS THE RETURN CODE TO\n                           ENTRIES-ALIASES.\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSAT2": {"ttr": 18435, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x03\\x01\\t)?\\x01\\t)_\\x13#\\x11[\\x11K\\x00\\x95\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2009-10-20T00:00:00", "modifydate": "2009-10-22T13:23:03", "lines": 4443, "newlines": 4427, "modlines": 149, "user": "SBGOLOB"}, "text": "         LCLC  &PGM                      PROGRAM NAME           SMS0003\n         LCLC  &FMID,&PTF,&VER           VERSION/PTF LEVEL      SMS0003\n*\n&PGM     SETC  'DSAT'                                           SMS0003\n&FMID    SETC  'PDS8600'                                        SMS0003\n&PTF     SETC  '       '                                        SMS0003\n&VER     SETC  '&FMID &PTF'                                     SMS0003\n*MODIFIED BY EDS -- (NOVEMBER 2005) -- ADD SMS SUPPORT\n*ORIGINAL SOURCE -- CBT439.FILE296  (NOVEMBER 2001)\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*  BDF MODIFICATION :                                                 *\n*  30.04.2003 - A.FREYBIER                                            *\n*               MORE THAN 9999 DATASETS POSSIBLE |                    *\n*  29.11.2001 - A.FREYBIER                                            *\n*               INCREASE GETMAIN AREA FOR MORE DATASETS               *\n*  21.11.2009 - D.DALBY                                        #DD09294\n*               IGNORE \"CAMLST BLOCK\" AS IBM DROPPED SUPPORT.         *\n*               REPLACE WITH PRE-ASSEMBLED CAMLST BLOCK MACROS.       *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\n         TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                 14. SYSTEM MANAGED DATA SET FLAG             SMS0001*\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   SMS/NOSMS                  SMS0001*\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOSMS                            SMS0001*\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*SMS0001                                                              *\n*SMS0001          SMS/NOSMS                                           *\n*SMS0001                      SPECIFIES WHETHER OR NOT THE SMS DATA   *\n*SMS0001                      SET FLAG SHOULD BE DISPLAYED.  SMS      *\n*SMS0001                      MANAGED DATA SETS ARE INDICATED BY 'YES'*\n*SMS0001                      AND NON-SMS MANAGED DATA SETS BY 'NO.'  *\n*SMS0001                      ADDITIONALLY, DATA SETS WITH A BLOCK    *\n*SMS0001                      SIZE DETERMINED BY THE SYSTEM (SDB) ARE *\n*SMS0001                      INDICATED WITH AN ASTERISK NEXT TO THE  *\n*SMS0001                      BLOCK SIZE.                             *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n*\n*  11/15/05  ADDED SMS KEYWORD.                        SMS0001      JCG\n*            ADDED SIZE KEYWORD WITH DEFAULT OF 8192 TO SPECIFY A\n*            LARGER SVC26 WORKAREA SIZE.  LOGIC TO OBTAIN A LARGER\n*            WORKAREA IS NOT WORKING SO WE'LL PASS THE BUCK TO THE\n*            USER.  MAXIMUM VALUE IS 65535.\n*            UPDATED SECONDARY SPACE PROCESSING TO DISPLAY SECONDARY\n*            AMOUNTS OF BYTES, KBYTES, MBYTES, OR GBYTES.\n*            ADDED PDS/E DETECTION AND DISPLAY DSORG OF PE IF PDSE\n*            FLAG IS SET.\n*            REMOVED INTERNAL FORMAT-1 DSCB MACRO AND REPLACED WITH THE\n*            REAL DEAL.  A COUPLE OF LABELS HAD TO BE MODIFIED TO\n*            USE THE PROPER FIELD NAME (NOEPV).\n*  11/15/05  ADDED DATACLAS, MGMTCLAS, AND STORCLASS     SMS0002    JCG\n*            KEYWORDS TO DISPLAY SMS ATTRIBUTES FOR THE DATA SET.\n*            THESE KEYWORDS ARE VALID ONLY IF 'SMS' IS ALSO SPECIFIED\n*            OR DEFAULTED.                               PDS1122\n*  11/15/05  MODIFIED CODE BECAUSE WITH THE ADDITION     SMS0003    JCG\n*            OF SMS0001 AND SMS0002 WE BLEW A BASE REGISTER. THE CODE\n*            WAS CHANGED WITH BRUT FORCE BY ESTABLISHING A NEW BASE\n*            REGISTER AROUND THE LABELS THAT WERE NOT ADDRESSABLE.\n*            SEARCHES FOR BASE0? WILL GO TO THE LOCATIONS CHANGED.\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         IECSDSL1 (1)                                           SMS0001\n         MEXIT                                                  SMS0001\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\nDS1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\nDS1PDSE  EQU   X'08'                    PDSE DATA SET         ABL NOV92\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\nDS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\nDS3PTRDS DS    XL5                      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '3145728'                                    #6735B3 BDF\n**&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT   HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n         TITLE 'ENTRY CODING'\nDSAT     $ENTER BASE=(R11,R12),                                        +\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB\n         USING DSAT+4096+4096,R7                                SMS0003\n         ST    R7,SAVER7                                        SMS0003\n         LA    R7,4095(R12)                                     SMS0003\n         LA    R7,1(R7)                                         SMS0003\n         ST    R7,BASER3                   SAVE FOR FUTURE      SMS0003\n         LA    R1,4095(R7)                                      SMS0003\n         LA    R1,1(R1)                                         SMS0003\n         ST    R1,BASER4                   SAVE FOR FUTURE      SMS0003\n         MVC   DSATHEDR(4),MODLINE\n         DROP  R7                                               SMS0003\n         L     R7,SAVER7                                        SMS0003\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVI   BLANKS,C' '             BLANK LINE               SMS0002\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS                      SMS0002\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         DROP  R8                      DROP IOPL BASE REGISTER\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n         CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         B     AROUNDID                 BRANCH AROUND THE ID    SMS0003\n         DC    AL1(L'CSECTID)           LENGTH OF CSECT ID      SMS0003\nCSECTID  DC    C'&PGM &VER'                                     SMS0003\nAROUNDID DS    0H                                               SMS0003\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n*--------GET CATALOG WORKAREA\n*SMS0001 L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         L     R2,WORKSIZE             GET PTR TO SIZE          SMS0001\n         L     R2,0(,R2)               GET WORKSIZE             SMS0001\n         C     R2,=F'65535'            Q:IS VALUE VALID?        SMS0001\n         BNH   *+8                     Y-USE IT                 SMS0001\n         L     R2,=F'65535'            N-USE MAX VALUE          SMS0001\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n         BNE   *+8                   YES, BRANCH\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL EQU   *\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         BE    SEARS               YES, CONTINUE               HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3\n         STM   R1,R4,DSATDCB3\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   ZEROTOT\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    SETUPHDR\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n         BNE   *+8                     YES, BRANCH\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    SETUPHDR\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TRYDEV\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TRYDEV\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         BE    TRYDEVIC\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         BE    TRYALLOC\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    TRYDSORG\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n         LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    TRYDSORG\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    TRYPDS\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    TRYDCB\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    TRYCRDAT\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    TRYEXDAT\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    TRYLREFD\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   TRYCCHHR\n         BNE   TRYSMS                                           SMS0001\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\n         SPACE\nTRYSMS   CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   TRYCCHHR                                         SMS0001\n         ST    R2,SMSFLD               SAVE OUTPUT FIELD ADDR   SMS0001\n         MVC   0(4,R2),=C'SMS '        MOVE IN HEADER           SMS0001\n         LA    R2,4(,R2)               INCREMENT POINTER        SMS0001\n         SPACE\n****************************************************************SMS0002\n*        SMS KEYWORD MUST ALSO BE SPECIFIED OR DEFAULTED TO GET THE   *\n*        DATACLAS, MGMTCLAS, AND STORCLAS VALUES.                     *\n****************************************************************SMS0002\n         SPACE\n         XR    R15,R15                 FLAG = 0                 SMS0002\nTRYDATAC CLI   DATACLAS+1,1            TEST FOR DATACLAS        SMS0002\n         BNE   TRYMGMTC                                         SMS0002\n         ST    R2,DATACFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'DATACLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYMGMTC CLI   MGMTCLAS+1,1            TEST FOR MGMTCLAS        SMS0002\n         BNE   TRYSTORC                                         SMS0002\n         ST    R2,MGMTCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'MGMTCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYSTORC CLI   STORCLAS+1,1            TEST FOR STORCLAS        SMS0002\n         BNE   TESTLOAD                                         SMS0002\n         ST    R2,STORCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'STORCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTESTLOAD EQU   *                       SEE IF SMS KEYWORD       SMS0002\n         XC    IGWASMSV,IGWASMSV       CLEAR MODULE ADDRESS     SMS0002\n         LTR   R15,R15                 Q:KEYWORD SPECIFIED?     SMS0002\n         BZ    TRYCCHHR                N-DON'T NEED THIS JUNK   SMS0002\n         SPACE ,                                                SMS0002\n         LA    R15,SMS_A               TO TRICK CALL            SMS0002\n         CALL  (15),(IGWRC,IGWREAS,IGWPROB,IGWLEN,DSNAME,IGWSMS,       +\n               IGWTYPE),                                        SMS0002+\n               MF=(E,CALL_L)                                    SMS0002\n         SPACE\nSMS_A    EQU   *\n         MVI   IGWLEN+3,44             HARD LENGTH OF DSNAME    SMS0002\n         LOAD  EPLOC=IGWASMSC          SMS ATTR ROUTINE         SMS0002\n         ST    R0,IGWASMSV             SAVE ADDRESS             SMS0002\n         SPACE\nTRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    DODSNAME\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         BH    DSNFLDOK\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\n*SMS0002 LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\nDSNFLDOK LA    R1,OUTLINE+L'OUTLINE-44 LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         BE    BUILDDSN\n         BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         BNZ   MOVEREST\n*--------APEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\nGETLEN   SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         BNZ   COPYSER\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         BNZ   PROCGRP\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   CHECK8\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         BE    OBTAIN1\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         BNE   PROCGRP\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         BE    PROCTTR\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         BE    PROCGRP                    SU 8 NOT INSTALLED\n         B     LOCERROR\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         BNE   CHECK12\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         BNE   PROCGRP\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         BNE   PROCGRP\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BAL   R2,PUTL                 DISPLAY LINE\n         B     ENDGRP\n         SPACE 2\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         BNE   LOCERROR\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   LOCERROR\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND1\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         B     PROCNTRY                LOAD INDEX NAME\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   LOCERROR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         BE    LNKENTRY\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         BE    DSATNEXT\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         BE    DSNOVER5\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         BE    NDXENTRY\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         BNE   DSNENTRY\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         BE    NDXENTRY\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         BZ    PUTGDG\n         BM    GDGEORD\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         B     PUTGDG\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         BNZ   PUTGDG\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BAL   R2,PUTL                 DISPLAY LINE\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         B     FINDEND\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         BZ    ENDLEVEL\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         B     READCTLG\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         BNZ   TESTDONE\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         TM    FLAGS,GDG               TEST FOR GDG\n         BNZ   MTGDG\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         B     PUTEMPTY\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\n         DROP  R8                                               SMS0003\nPUTEMPTY L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BAL   R2,PUTL                 DISPLAY MESSAGE\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         BE    ENDGRP\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         BNE   FINDDOT\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         B     PROCNTRY\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   LOCATE2\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1\n         B     LOCERROR\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   DSNMVC\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         B     LDVOLCNT\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         BE    BACKUP\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         BNZ   SAVELEN\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         BNZ   SAVELEN\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         BNE   SAVELEN                 NO, BRANCH                 ABL99\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         BE    PARTIAL\n         CH    R15,=H'40'\n         BNE   LOCERROR\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         B     RETRYLOC\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY LINE                 ABL\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         B     DSATPROC\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         BNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1                 OK, BRANCH\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         BE    GDGMSGL                 YES, BRANCH                  SPG\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         BNE   LOCERROR                NO, BRANCH\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         B     LOCERROR\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\nLSHOWCAT EQU   *-SHOWCATF\nTESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         BZ    ENDGRP\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BAL   R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         B     ENDGRP\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EX    R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         BNE   OBTAIN1\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NEXTSER               YES, IGNORE\n         B     THISVOL\n         SPACE 1\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         BO    ENDGRP2\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE\n         B     ENDGRP2\nTHISVOL  CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         BNH   GETSER\n         LA    R1,20                   SET MAX COUNT\nGETSER   C     R1,=F'1'                TEST VOLUME COUNT\n         BL    BADVOLCT                BAD VOLUME COUNT\n         BE    STOREVCT\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n         BAL   R14,$SMS2               DO DATACLAS, MGMTCLAS,   SMS0002+\n                                       AND STORCLAS             SMS0002\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TESTDEV\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TESTDEV\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         BE    TESTDA\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         BNE   NOTDASD\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE CH    R1,=H'15'               TEST AGAINST MAX\n         BH    NOTDASD\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         BNZ   TESTDEV2\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         BNE   NEXTDEV                                         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NOTUP\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         BZ    TESTTYPE\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         B     TESTTYPE\nNOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         B     DSNERR\nTESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         BE    GETFMT1\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\nGETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n         BZ    PROCESS\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSCB                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    PROCDSRG\n         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    PROCPDS\n         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    PROCDCB\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         BZ    PROCDCB\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    PROCCRDT\n         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE\nPROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    PROCEXDT\n         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\nPROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    PROCLREF\n         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   PROCCHHR\n         BNE   PROCSMS                                          SMS0001\n         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\nPROCSMS  EQU   *                                                SMS0001\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   PROCCHHR                                         SMS0001\n         BAL   R14,$SMS                                         SMS0001\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    PUTLINE\n         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\nPUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BCT   R1,GETSER               LOOP FOR MORE VOLUMES\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         BZ    SAVETOTL\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL STM   R4,R8,TOTLS             STORE TOTALS\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         BE    NOEXTENT                YES, BRANCH                ABL94\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         BZ    NOEXTENT                NO, BRANCH                 ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         BZ    ENDGRP\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         BZ    DSATNEXT                GET NEXT DSNAME\n         B     DSATNXT2                GET NEXT DSNAME\n         SPACE 2\nENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         BZ    ENDGRP2\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         BE    NEXTSER\nENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         LA    R3,0(,R3)\n         LTR   R3,R3                   END OF CHAIN?\n         BNZ   SETUPNXT                NO, BRANCH\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         BE    RETURN\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n*\n*  MORE THAN 9999 DATASETS POSSIBLE |        A.FREYBIER 30.04.2003 BDF\n**       MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE       BDF\n**       MVC   5(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE       BDF\n         MVC   8(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n*\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         BH    CNVTALOC\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         BZ    RETURN\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   5(19,R2),=C'DATA SET DISPLAYED '\nCNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         BE    DISPLAYT\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\nDISPLAYT BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         BL    BRANCH\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   SLA   R15,2                   MULTIPLY BY 4\n         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\nBRTABLE  B     RC0                                             HD JAN99\n         B     RCTALLOC\n         B     RCTUSED\n         B     RCLALLOC\n         B     RCLUSED\n         B     RCTDIFF\n         B     RCLDIFF\n         B     RCNUM\n         B     RCPREV\n         B     RCDSORG\n         B     RCDIRA\n         B     RCDIRU\n         B     RCENTR\n         B     RCMEMB\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         B     EXIT\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         B     EXIT\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         B     EXIT\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         B     EXIT\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         B     EXIT\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         BNZ   EXIT\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         B     EXIT\nRCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         B     EXIT\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         B     EXIT\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         B     EXIT\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         B     EXIT\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         B     EXIT\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         B     EXIT\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         B     EXIT\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         B     EXIT\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         B     EXIT                                            HD JAN99\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         B     EXIT                                            HD JAN99\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         BO    RC8                     YES, RETURN CODE=8      HD JAN99\n         B     EXIT                                            HD JAN99\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    EXIT2\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         LTR   R1,R1                   Q:DID THIS?              SMS0001\n         BZ    EXIT2_A                 N-DON'T TRY TO FREE IT   SMS0001\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\nEXIT2_A  EQU   *                                                SMS0001\n         LR    R15,R3                  RESTORE RETURN CODE\n         $RTRN RENT=DSECTLEN,RC=(R15)\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\n         LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\nDSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,R1(R6)               ADD 1 TRACK\n         LA    R5,4(R5)\n         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?      ABL NOV92\n         BZ    DSATUTRK                NO, DONE               ABL NOV92\n         LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'13'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'13'               NO, DO 13 NEXT         ABL NOV92\n         B     DSATTRKS                CONTINUE               ABL NOV92\n         SPACE 3                                              ABL NOV92\nDSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         BZ    DSATXNTS\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n*SMS0001 IC    R1,DS1NOPEV             LOAD EXTENTS\n         IC    R1,DS1NOEPV             LOAD EXTENTS             SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n         CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n         BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n         MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    NOSECOND\n         LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCAL1,DS1EXT         Q:EXTEND 2NDARY SPACE?   SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         TM    DS1SCEXT,DS1SCAVB       Q:AVERAGE BLOCK DATA SET?SMS0001\n         BNO   TRYMB                   N-TRY MB TEST            SMS0001\n         XR    R1,R1                   Y-DISPLAY BLKSZ AND AMT  SMS0001\n         ICM   R1,B'0011',DS1SCXTV     COPY TO ALIGNED (F) WOR  SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   5(5,R2),DSATDEC+3       COPY ORIGINAL AVGBLKSZ   SMS0001\n         B     SECAMT                  GET # OF BLOCKS          SMS0001\nTRYMB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCMB        Q:AVGREC=M DATA SET?     SMS0001\n         BNO   TRYKB                   N-TRY KB TEST            SMS0001\n         MVI   9(R2),C'M'              INDICATE MEGABYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYKB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCKB        Q:AVGREC=K DATA SET?     SMS0001\n         BNO   TRYB                    N-TRY B TEST             SMS0001\n         MVI   9(R2),C'K'              INDICATE KILOBYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYB     EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCUB        Q:AVGREC=U DATA SET?     SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         MVI   9(R2),C'B'              INDICATE BYTES           SMS0001\n*        B     SECBYTES                CLEAR                    SMS0001\nSECBYTES EQU   *                       GET NUMBER OF BYTES      SMS0001\n         XR    R1,R1                   CLEAR FOR INSERT         SMS0001\n         ICM   R1,B'0011',DS1SCXTV     SEC SPACE EXTENSION AMT  SMS0001\n         TM    DS1SCXTF,DS1SCCP1       Q:ADJUSTED BY 256?       SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,8                    Y-MULTIPLY BY 256        SMS0001\n         TM    DS1SCXTF,DS1SCCP2       Q:ADJUSTED BY 65536?     SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,16                   Y-MULTIPLY TO 65536      SMS0001\n         SPACE ,                                                SMS0001\n         CLI   9(R2),C'B'              Q:SPACE IN BYTES?        SMS0001\n         BNE   TESTKB                  N-SEE IF IN K            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'K'              Y-CHANGE TO KB           SMS0001\n         SRL   R1,10                   BYTES/1024               SMS0001\nTESTKB   EQU   *                                                SMS0001\n         CLI   9(R2),C'K'              Q:SPACE IN KBYTES?       SMS0001\n         BNE   TESTMB                  N-SEE IF IN M            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'M'              Y-CHANGE TO MB           SMS0001\n         SRL   R1,10                   KBYTES/1024              SMS0001\nTESTMB   EQU   *                                                SMS0001\n         CLI   9(R2),C'M'              Q:SPACE IN MBYTES?       SMS0001\n         BNE   DOSEC                   N-JUST DO IT             SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'G'              Y-CHANGE TO GB           SMS0001\n         SRL   R1,10                   MBYTES/1024              SMS0001\nDOSEC    EQU   *                                                SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   1(8,R2),DSATDEC                                  SMS0001\n         BR    R14                     2NDARY SPACE COMPLETE    SMS0001\nNOAVGREC EQU   *                                                SMS0001\n         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         BM    TRKALLOC\n         BO    CYLALLOC\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         B     SECAMT\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         B     SECAMT\nTRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         BZ    BLKALLOC\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         B     SECAMT\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n         LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND BR    R14                     RETURN\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n         MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'                                        ABL94\n         BE    $ALLEX20                                           ABL94\n         LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         BNO   NOT$CYL                  NO - SKIP                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         B     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         LH    R0,2(,R1)                GET START CC              ABL94\n         MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n         AH    R0,4(,R1)                ADD START HH              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         LH    R0,6(,R1)                GET END CC                ABL94\n         MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n         AH    R0,8(,R1)                ADD END HH                ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         LH    R15,6(,R1)               GET END CC                ABL94\n         SH    R15,2(,R1)               SUB START CC              ABL94\n         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n         AH    R15,8(,R1)               ADD END HH                ABL94\n         SH    R15,4(,R1)               SUB START HH              ABL94\n         LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n         BZ    $ALLEX20                NO, DONE                   ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         BNZ   DSNERR                  NO, SOME ERROR             ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         B     $ALLEX10                CONTINUE                   ABL94\n         SPACE 3                                                  ABL94\n$ALLEX20 DS    0H                                                 ABL94\n$ALLEX99 L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\nCONVDEC0 CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\nHEADER3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--$\n               TYPE-------------------------'                     ABL94\n         EJECT\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         BZ    DSORG001\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\n         USING DSAT+4096+4096,R8                                SMS0003\nDSORG001 ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS SMS0003\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         BZ    DSORGCLC\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         BE    DSORGMVC\n         BXLE  R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\nDSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         BE    DSORGPO\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         BE    DSORGPS\nDSORGBAD OI    FLAGS,$NOTPOPS\n         B     DSORGRTN\nDSORGPO  OI    FLAGS,$DSPO             PARTITIONED\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         BNO   DSORGRTN                NO, BRANCH             ABL NOV92\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         B     DSORGRTN\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         BZ    DSATT\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         BNZ   DSATUORV\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         BZ    DSATV\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         BZ    DSATB\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         BZ    DSATS\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         BZ    DSATA\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         BZ    DSATM\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         BZ    DSATBLK\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         BZ    REFRTRN\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n         SPACE ,                                                SMS0001\n***********************************************************************\n* PROCESS SMS INDICATOR FLAG                                    SMS0001\n* 1) INDICATE IF 'MANAGED' FLAG IS ON.                          SMS0001\n* 2) IF BLOCKSIZE IS DISPLAYED, SET INDICATOR IF IT WAS SYSTEM  SMS0001\n*    DETERMINED.                                                SMS0001\n* 3) DO SMS KEYWORDS IF SPECIFIED.                              SMS0003\n***********************************************************************\n$SMS     EQU   *                                                SMS0001\n         CLC   DCB,=H'2'               Q:NODCB SPECIFIED?       SMS0001\n         BE    $SMS_100                Y-DON'T WORRY ABOUT BLKSZSMS0001\n         TM    DS1SMSFG,DS1CRSDB       Q:SDB BLKSZ?             SMS0001\n         BNO   $SMS_100                N-DON'T FLAG             SMS0001\n         L     R2,DCBFLD               Y-GET ADDR OF PARM       SMS0001\n         MVI   10(R2),C'*'             SET SDB BLKSZ INDICATOR  SMS0001\n$SMS_100 EQU   *                                                SMS0001\n         L     R2,SMSFLD               LOAD OUTPUT AREA ADDRESS SMS0001\n         MVC   0(3,R2),=C'YES'         ASSUME SMS MANAGED       SMS0001\n         TM    DS1SMSFG,DS1SMSDS       Q:CORRECT ASSUMPTION?    SMS0001\n         BOR   R14                     Y-WE'RE SET              SMS0001\n         MVC   0(3,R2),=C'NO '         N-CHANGE TO NO           SMS0001\n         BR    R14                     RETURN TO CALLER         SMS0001\n$SMS2    EQU   *                                                SMS0002\n         ICM   R15,B'1111',IGWASMSV    GET ROUTINE ADDRESS      SMS0002\n         BZR   R14                     RETURN IF NONE           SMS0002\n         SPACE ,                                                SMS0002\n         ST    R14,$SMSAVE             SAVE RETURN ADDRESS      SMS0002\n         BAS   R14,AMODE31             TO CALL ROUTINE          SMS0002\n         CALL  (15),MF=(E,CALL_L)      GET SMS INFO             SMS0002\n         BAS   R14,AMODE24             TO GET BACK              SMS0002\n         LTR   R15,R15                 DID IT WORK?             SMS0002\n         BNZ   $SMS_900                N-SKIP THIS JUNK         SMS0002\nPROMGMTC CLI   MGMTCLAS+1,2            TEST FOR NOMGMTCLASS     SMS0002\n         BE    PROSTORC                SKIP                     SMS0002\n         L     R2,MGMTCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWMGMTC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PROSTORC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWMGMTC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPROSTORC CLI   STORCLAS+1,2            TEST FOR NOSTORCLASS     SMS0002\n         BE    PRODATAC                SKIP                     SMS0002\n         L     R2,STORCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWSTORC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PRODATAC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWSTORC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPRODATAC CLI   DATACLAS+1,2            TEST FOR NODATACLASS     SMS0002\n         BE    $SMS_900                SKIP                     SMS0002\n         L     R2,DATACFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWDATAC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    $SMS_900                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWDATAC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\n$SMS_900 EQU   *                                                SMS0002\n         L     R14,$SMSAVE             RESTORE RETURN ADDRESS   SMS0002\n         BR    R14                     RETURN TO CALLER         SMS0001\nAMODE31  EQU   *                                                SMS0002\n         O     R14,=X'80000000'        SET 31-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 31-BIT MODE    SMS0002\nAMODE24  EQU   *                                                SMS0002\n         LA    R14,0(,R14)             SET 24-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 24-BIT MODE    SMS0002\n         SPACE\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         BNE   BADDAY\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         BZ    BADDAY\n         TM    WORK+3,X'06'\n         BZ    BADDAY\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         BH    BADDAY\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         B     DATERTRN\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\n         USING DSAT+4096+4096,R8                                SMS0003\nERRPARS  ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(28),DSATERR1                             SMS0003\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     SETERROR\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\n         USING DSAT+4096+4096,R8                                SMS0003\nNOID     ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR7                             SMS0003\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     RLSA\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\n         USING DSAT+4096+4096,R8                                SMS0003\nTOOLONG  ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE,BLANKS                                   SMS0003\n         MVC   OUTLINE(44),DSATERR4\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\nRLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BAL   R2,PUTL2                PUT MESSAGE\n         LA    R3,16                   SET CONDITION CODE\n         B     EXIT2\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         BNE   LOCERR                                          HD JAN99\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   BAL   R2,PUTL                 PRINT IT\n         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     PUTLINE                 PRINT THE LINE\n*--------ERROR IN OBTAIN MACRO\nDSNERR   CH    R15,=H'8'               TEST RETURN CODE\n         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n         BE    TESTVALL\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         B     DSNERR1\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         B     PUTLINE                 PRINT IT\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         B     PUTLINE                 DISPLAY MESSAGE\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         B     PUTLINE                 DISPLAY MESSAGE              SPG\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         BE    PUTLHPDS\nPUTL2    PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         BZ    PUTLBACK\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK BR    R2                      RETURN\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                         EXIT\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\n*TTRLOC  CAMLST BLOCK,0,0,0                                    #DD09294\nTTRLOC   DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n         DC    A(0)                              PARAMETER THREE\n         DC    A(0)                              PARAMETER FOUR\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\nIGWASMSC DC    CL8'IGWASMS'            SMS ATTRIBUTE ROUTINE    SMS0002\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\n         SPACE\n*ASE01   EQU   DSAT                                             SMS0003\n*ASE02   EQU   DSAT+4096                                        SMS0003\n*ASE03   EQU   DSAT+4096+4096                                   SMS0003\n*ASE04   EQU   DSAT+4096+4096+4096                              SMS0003\n         SPACE\nMODLINE  DC    H'204,0'                                           ABL94\n*LANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY\n         DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         BNE   PDSSAVE\n         BCT   R2,PDSEND               DECREMENT COUNTER\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TESTORG\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         BNE   ERRDAIR\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         BZ    ERRDSORG\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         BZ    ERROPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n         SPACE\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         BNP   NEXTBLK\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         BNE   PROCENTR\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         B     NEXTBLK\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         BZ    DIRLEN\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         B     NEXTENT\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         B     PDSRTRN\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         BNE   CTLGERR\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         BNE   DYNALCER\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         B     PDSRTRN\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         B     PDSRTRN\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         BNE   OTHERERR\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         B     PDSRTRN\nOTHERERR ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         B     PDSRTRN\n*--------OPEN ERROR\nERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         B     PDSRTRN\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         B     PDSRTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPDSRTRN  $RTRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nSMS      IKJKEYWD DEFAULT='NOSMS'                               SMS0001\n         IKJNAME 'SMS'                                          SMS0001\n         IKJNAME 'NOSMS'                                        SMS0001\nDATACLAS IKJKEYWD DEFAULT='DATACLASS'                           SMS0002\n         IKJNAME 'DATACLASS'                                    SMS0002\n         IKJNAME 'NODATACLASS'                                  SMS0002\nMGMTCLAS IKJKEYWD DEFAULT='MGMTCLASS'                           SMS0002\n         IKJNAME 'MGMTCLASS',ALIAS='MANAGEMENTCLASS'            SMS0002\n         IKJNAME 'NOMGMTCLASS',ALIAS='NOMANAGEMENTCLASS'        SMS0002\nSTORCLAS IKJKEYWD DEFAULT='STORCLASS'                           SMS0002\n         IKJNAME 'STORCLASS',ALIAS='STORAGECLASS'               SMS0002\n         IKJNAME 'NOSTORCLASS',ALIAS='NOSTORAGECLASS'           SMS0002\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nSIZE     IKJKEYWD DEFAULT='SIZE'                                SMS0001\n         IKJNAME  'SIZE',SUBFLD=SIZSUB                          SMS0001\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\nSIZSUB   IKJSUBF                       ,                        SMS0001\nWORKSIZE IKJIDENT 'WORKSIZE',INTEG,DEFAULT='8192'               SMS0001\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\n*LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR           #DD09294\nLOCBYTTR DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nSMSFLD   DS    A                       ADDR OF SMS FIELD        SMS0001\nDATACFLD DS    A                       ADDR OF DATACLAS FIELD   SMS0002\nMGMTCFLD DS    A                       ADDR OF MGMTCLAS FIELD   SMS0002\nSTORCFLD DS    A                       ADDR OF STORCLAS FIELD   SMS0002\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL5,CL3                                            ABL94\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL5,CL3                                            ABL94\nOL@LNTH  DS    CL5,CL2                                            ABL94\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nHALF     DS    H                       HALFWORD ALIGNED WORK AREA\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\nBLANKS   DS    CL200                   BLANK AREA               SMS0002\n         SPACE\n****************************************************************SMS0002\n*        IGWASMS FIELDS                                               *\n****************************************************************SMS0002\n         SPACE\nIGWRC    DS    F                       RC FROM IGWASMS          SMS0002\nIGWREAS  DS    F                       REASON CODE FROM IGWASMS SMS0002\nIGWPROB  DS    2F                      PROB DETERMINATION INFO  SMS0002\nIGWLEN   DS    F                       LENGTH OF DATA SET NAME  SMS0002\nIGWDSN   DS    A                       POINTER TO DSN           SMS0002\nIGWSMS   EQU   *                                                SMS0002\nIGWSTORC DS    CL30                    STORAGE CLASS OR BLANK   SMS0002\nIGWMGMTC DS    CL30                    MANAGMENT CLASS OR BLANK SMS0002\nIGWDATAC DS    CL30                    DATA CLASS OR BLANK      SMS0002\nIGWTYPE  DS    F                       DATA SET TYPE            SMS0002+\n                                       1=PDS/E (LIBRARY)        SMS0002+\n                                       0=OTHER                  SMS0002\nCALL_L   CALL  ,(,,,,,,),MF=L          LIST FORM OF CALL        SMS0002\nIGWASMSV DS    V(IGWASMSV)             LOAD'ED ADDR OF IGWASMS  SMS0002\n$SMSAVE  DS    A                       $SMS RETURN ADDRESS      SMS0002\nSAVER7   DS    F                       SAVE AREA FOR R7         SMS0003\nSAVER8   DS    F                       SAVE AREA FOR R8         SMS0003\nBASER3   DS    F                       SAVE AREA FOR 3RD BASE   SMS0003\nBASER4   DS    F                       SAVE AREA FOR 4TH BASE   SMS0003\n         DS    0D\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSAT3": {"ttr": 20228, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x18\\x01\\x10 \\x9f\\x01\\x10 \\x9f\\t\\x05\\x11n\\x11c\\x11n\\xd2\\xe2\\xc8\\xc1\\xd9\\xd7\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2010-07-28T00:00:00", "modifydate": "2010-07-28T09:05:18", "lines": 4462, "newlines": 4451, "modlines": 4462, "user": "KSHARPE"}, "text": "         LCLC  &PGM                      PROGRAM NAME           SMS0003\n         LCLC  &FMID,&PTF,&VER           VERSION/PTF LEVEL      SMS0003\n*\n&PGM     SETC  'DSAT'                                           SMS0003\n&FMID    SETC  'PDS8600'                                        SMS0003\n&PTF     SETC  '       '                                        SMS0003\n&VER     SETC  '&FMID &PTF'                                     SMS0003\n*MODIFIED BY EDS -- (NOVEMBER 2005) -- ADD SMS SUPPORT\n*ORIGINAL SOURCE -- CBT439.FILE296  (NOVEMBER 2001)\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*  BDF MODIFICATION :                                                 *\n*  30.04.2003 - A.FREYBIER                                            *\n*               MORE THAN 9999 DATASETS POSSIBLE |                    *\n*  29.11.2001 - A.FREYBIER                                            *\n*               INCREASE GETMAIN AREA FOR MORE DATASETS               *\n*  21.11.2009 - D.DALBY                                        #DD09294\n*               IGNORE \"CAMLST BLOCK\" AS IBM DROPPED SUPPORT.         *\n*               REPLACE WITH PRE-ASSEMBLED CAMLST BLOCK MACROS.       *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\n         TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                 14. SYSTEM MANAGED DATA SET FLAG             SMS0001*\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   SMS/NOSMS                  SMS0001*\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOSMS                            SMS0001*\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*SMS0001                                                              *\n*SMS0001          SMS/NOSMS                                           *\n*SMS0001                      SPECIFIES WHETHER OR NOT THE SMS DATA   *\n*SMS0001                      SET FLAG SHOULD BE DISPLAYED.  SMS      *\n*SMS0001                      MANAGED DATA SETS ARE INDICATED BY 'YES'*\n*SMS0001                      AND NON-SMS MANAGED DATA SETS BY 'NO.'  *\n*SMS0001                      ADDITIONALLY, DATA SETS WITH A BLOCK    *\n*SMS0001                      SIZE DETERMINED BY THE SYSTEM (SDB) ARE *\n*SMS0001                      INDICATED WITH AN ASTERISK NEXT TO THE  *\n*SMS0001                      BLOCK SIZE.                             *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n*\n*  11/15/05  ADDED SMS KEYWORD.                        SMS0001      JCG\n*            ADDED SIZE KEYWORD WITH DEFAULT OF 8192 TO SPECIFY A\n*            LARGER SVC26 WORKAREA SIZE.  LOGIC TO OBTAIN A LARGER\n*            WORKAREA IS NOT WORKING SO WE'LL PASS THE BUCK TO THE\n*            USER.  MAXIMUM VALUE IS 65535.\n*            UPDATED SECONDARY SPACE PROCESSING TO DISPLAY SECONDARY\n*            AMOUNTS OF BYTES, KBYTES, MBYTES, OR GBYTES.\n*            ADDED PDS/E DETECTION AND DISPLAY DSORG OF PE IF PDSE\n*            FLAG IS SET.\n*            REMOVED INTERNAL FORMAT-1 DSCB MACRO AND REPLACED WITH THE\n*            REAL DEAL.  A COUPLE OF LABELS HAD TO BE MODIFIED TO\n*            USE THE PROPER FIELD NAME (NOEPV).\n*  11/15/05  ADDED DATACLAS, MGMTCLAS, AND STORCLASS     SMS0002    JCG\n*            KEYWORDS TO DISPLAY SMS ATTRIBUTES FOR THE DATA SET.\n*            THESE KEYWORDS ARE VALID ONLY IF 'SMS' IS ALSO SPECIFIED\n*            OR DEFAULTED.                               PDS1122\n*  11/15/05  MODIFIED CODE BECAUSE WITH THE ADDITION     SMS0003    JCG\n*            OF SMS0001 AND SMS0002 WE BLEW A BASE REGISTER. THE CODE\n*            WAS CHANGED WITH BRUT FORCE BY ESTABLISHING A NEW BASE\n*            REGISTER AROUND THE LABELS THAT WERE NOT ADDRESSABLE.\n*            SEARCHES FOR BASE0? WILL GO TO THE LOCATIONS CHANGED.\n*  07/26/10  ADDED RECOGNITION OF HFS DATASETS                 @KLS0710\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         IECSDSL1 (1)                                           SMS0001\n         MEXIT                                                  SMS0001\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*  THIS CODE SEEMS NOT TO BE USED. ONLY ACTIVATE ON DOWN-LEVEL SYSTEMS.\n*    THE REAL CODE IS FROM MACRO IECSDSL1 (1) ABOVE.\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\nDS1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - BELOW\nDS1SMSDS EQU   X'80'  1... ....    SYSTEM MANAGED DATA SET\nDS1SMSUC EQU   X'40'  .1.. ....    NO BCS ENTRY EXISTS FOR DATA SET\nDS1REBLK EQU   X'20'  ..1. ....    SDB AND D.S. MAY BE REBLOCKED\nDS1CRSDB EQU   X'10'  ...1 ....    DADSM CREATE ORIGINATED BLKSIZE\nDS1PDSE  EQU   X'08'  .... 1...    PDSE DATA SET\nDS1STRP  EQU   X'04'  .... .1..    EXTENDED FORMAT DATA SET\nDS1PDSEX EQU   X'02'  .... ..1.    HFS DATA SET\nDS1DSAE  EQU   X'01'  ........1    EXTENDED ATTRIBUTES EXIST\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - ABOVE\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\nDS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\nDS3PTRDS DS    XL5                      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '3145728'                                    #6735B3 BDF\n**&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT   HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n         TITLE 'ENTRY CODING'\nDSAT     $ENTER BASE=(R11,R12),                                        +\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB\n         USING DSAT+4096+4096,R7                                SMS0003\n         ST    R7,SAVER7                                        SMS0003\n         LA    R7,4095(R12)                                     SMS0003\n         LA    R7,1(R7)                                         SMS0003\n         ST    R7,BASER3                   SAVE FOR FUTURE      SMS0003\n         LA    R1,4095(R7)                                      SMS0003\n         LA    R1,1(R1)                                         SMS0003\n         ST    R1,BASER4                   SAVE FOR FUTURE      SMS0003\n         MVC   DSATHEDR(4),MODLINE\n         DROP  R7                                               SMS0003\n         L     R7,SAVER7                                        SMS0003\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVI   BLANKS,C' '             BLANK LINE               SMS0002\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS                      SMS0002\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         DROP  R8                      DROP IOPL BASE REGISTER\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n         CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         B     AROUNDID                 BRANCH AROUND THE ID    SMS0003\n         DC    AL1(L'CSECTID)           LENGTH OF CSECT ID      SMS0003\nCSECTID  DC    C'&PGM &VER'                                     SMS0003\nAROUNDID DS    0H                                               SMS0003\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n*--------GET CATALOG WORKAREA\n*SMS0001 L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         L     R2,WORKSIZE             GET PTR TO SIZE          SMS0001\n         L     R2,0(,R2)               GET WORKSIZE             SMS0001\n         C     R2,=F'65535'            Q:IS VALUE VALID?        SMS0001\n         BNH   *+8                     Y-USE IT                 SMS0001\n         L     R2,=F'65535'            N-USE MAX VALUE          SMS0001\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n         BNE   *+8                   YES, BRANCH\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL EQU   *\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         BE    SEARS               YES, CONTINUE               HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3\n         STM   R1,R4,DSATDCB3\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   ZEROTOT\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    SETUPHDR\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n         BNE   *+8                     YES, BRANCH\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    SETUPHDR\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TRYDEV\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TRYDEV\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         BE    TRYDEVIC\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         BE    TRYALLOC\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    TRYDSORG\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n         LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    TRYDSORG\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    TRYPDS\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    TRYDCB\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    TRYCRDAT\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    TRYEXDAT\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    TRYLREFD\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   TRYCCHHR\n         BNE   TRYSMS                                           SMS0001\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\n         SPACE\nTRYSMS   CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   TRYCCHHR                                         SMS0001\n         ST    R2,SMSFLD               SAVE OUTPUT FIELD ADDR   SMS0001\n         MVC   0(4,R2),=C'SMS '        MOVE IN HEADER           SMS0001\n         LA    R2,4(,R2)               INCREMENT POINTER        SMS0001\n         SPACE\n****************************************************************SMS0002\n*        SMS KEYWORD MUST ALSO BE SPECIFIED OR DEFAULTED TO GET THE   *\n*        DATACLAS, MGMTCLAS, AND STORCLAS VALUES.                     *\n****************************************************************SMS0002\n         SPACE\n         XR    R15,R15                 FLAG = 0                 SMS0002\nTRYDATAC CLI   DATACLAS+1,1            TEST FOR DATACLAS        SMS0002\n         BNE   TRYMGMTC                                         SMS0002\n         ST    R2,DATACFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'DATACLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYMGMTC CLI   MGMTCLAS+1,1            TEST FOR MGMTCLAS        SMS0002\n         BNE   TRYSTORC                                         SMS0002\n         ST    R2,MGMTCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'MGMTCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYSTORC CLI   STORCLAS+1,1            TEST FOR STORCLAS        SMS0002\n         BNE   TESTLOAD                                         SMS0002\n         ST    R2,STORCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'STORCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTESTLOAD EQU   *                       SEE IF SMS KEYWORD       SMS0002\n         XC    IGWASMSV,IGWASMSV       CLEAR MODULE ADDRESS     SMS0002\n         LTR   R15,R15                 Q:KEYWORD SPECIFIED?     SMS0002\n         BZ    TRYCCHHR                N-DON'T NEED THIS JUNK   SMS0002\n         SPACE ,                                                SMS0002\n         LA    R15,SMS_A               TO TRICK CALL            SMS0002\n         CALL  (15),(IGWRC,IGWREAS,IGWPROB,IGWLEN,DSNAME,IGWSMS,       +\n               IGWTYPE),                                        SMS0002+\n               MF=(E,CALL_L)                                    SMS0002\n         SPACE\nSMS_A    EQU   *\n         MVI   IGWLEN+3,44             HARD LENGTH OF DSNAME    SMS0002\n         LOAD  EPLOC=IGWASMSC          SMS ATTR ROUTINE         SMS0002\n         ST    R0,IGWASMSV             SAVE ADDRESS             SMS0002\n         SPACE\nTRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    DODSNAME\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         BH    DSNFLDOK\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\n*SMS0002 LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\nDSNFLDOK LA    R1,OUTLINE+L'OUTLINE-44 LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         BE    BUILDDSN\n         BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         BNZ   MOVEREST\n*--------APEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\nGETLEN   SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         BNZ   COPYSER\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         BNZ   PROCGRP\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   CHECK8\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         BE    OBTAIN1\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         BNE   PROCGRP\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         BE    PROCTTR\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         BE    PROCGRP                    SU 8 NOT INSTALLED\n         B     LOCERROR\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         BNE   CHECK12\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         BNE   PROCGRP\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         BNE   PROCGRP\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BAL   R2,PUTL                 DISPLAY LINE\n         B     ENDGRP\n         SPACE 2\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         BNE   LOCERROR\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   LOCERROR\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND1\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         B     PROCNTRY                LOAD INDEX NAME\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   LOCERROR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         BE    LNKENTRY\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         BE    DSATNEXT\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         BE    DSNOVER5\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         BE    NDXENTRY\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         BNE   DSNENTRY\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         BE    NDXENTRY\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         BZ    PUTGDG\n         BM    GDGEORD\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         B     PUTGDG\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         BNZ   PUTGDG\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BAL   R2,PUTL                 DISPLAY LINE\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         B     FINDEND\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         BZ    ENDLEVEL\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         B     READCTLG\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         BNZ   TESTDONE\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         TM    FLAGS,GDG               TEST FOR GDG\n         BNZ   MTGDG\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         B     PUTEMPTY\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\n         DROP  R8                                               SMS0003\nPUTEMPTY L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BAL   R2,PUTL                 DISPLAY MESSAGE\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         BE    ENDGRP\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         BNE   FINDDOT\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         B     PROCNTRY\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   LOCATE2\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1\n         B     LOCERROR\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   DSNMVC\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         B     LDVOLCNT\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         BE    BACKUP\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         BNZ   SAVELEN\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         BNZ   SAVELEN\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         BNE   SAVELEN                 NO, BRANCH                 ABL99\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         BE    PARTIAL\n         CH    R15,=H'40'\n         BNE   LOCERROR\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         B     RETRYLOC\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY LINE                 ABL\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         B     DSATPROC\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         BNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1                 OK, BRANCH\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         BE    GDGMSGL                 YES, BRANCH                  SPG\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         BNE   LOCERROR                NO, BRANCH\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         B     LOCERROR\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\nLSHOWCAT EQU   *-SHOWCATF\nTESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         BZ    ENDGRP\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BAL   R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         B     ENDGRP\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EX    R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         BNE   OBTAIN1\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NEXTSER               YES, IGNORE\n         B     THISVOL\n         SPACE 1\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         BO    ENDGRP2\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE\n         B     ENDGRP2\nTHISVOL  CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         BNH   GETSER\n         LA    R1,20                   SET MAX COUNT\nGETSER   C     R1,=F'1'                TEST VOLUME COUNT\n         BL    BADVOLCT                BAD VOLUME COUNT\n         BE    STOREVCT\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n         BAL   R14,$SMS2               DO DATACLAS, MGMTCLAS,   SMS0002+\n                                       AND STORCLAS             SMS0002\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TESTDEV\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TESTDEV\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         BE    TESTDA\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         BNE   NOTDASD\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE CH    R1,=H'15'               TEST AGAINST MAX\n         BH    NOTDASD\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         BNZ   TESTDEV2\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         BNE   NEXTDEV                                         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NOTUP\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         BZ    TESTTYPE\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         B     TESTTYPE\nNOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         B     DSNERR\nTESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         BE    GETFMT1\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\nGETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n         BZ    PROCESS\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSCB                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    PROCDSRG\n         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    PROCPDS\n         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    PROCDCB\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         BZ    PROCDCB\n         TM    DS1SMSFG,DS1PDSEX       MAKE SURE ITS NOT HFS   @KLS0710\n         BO    PROCDCB                                         @KLS0710\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    PROCCRDT\n         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE\nPROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    PROCEXDT\n         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\nPROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    PROCLREF\n         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   PROCCHHR\n         BNE   PROCSMS                                          SMS0001\n         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\nPROCSMS  EQU   *                                                SMS0001\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   PROCCHHR                                         SMS0001\n         BAL   R14,$SMS                                         SMS0001\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    PUTLINE\n         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\nPUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BCT   R1,GETSER               LOOP FOR MORE VOLUMES\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         BZ    SAVETOTL\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL STM   R4,R8,TOTLS             STORE TOTALS\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         BE    NOEXTENT                YES, BRANCH                ABL94\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         BZ    NOEXTENT                NO, BRANCH                 ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         BZ    ENDGRP\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         BZ    DSATNEXT                GET NEXT DSNAME\n         B     DSATNXT2                GET NEXT DSNAME\n         SPACE 2\nENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         BZ    ENDGRP2\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         BE    NEXTSER\nENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         LA    R3,0(,R3)\n         LTR   R3,R3                   END OF CHAIN?\n         BNZ   SETUPNXT                NO, BRANCH\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         BE    RETURN\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n*\n*  MORE THAN 9999 DATASETS POSSIBLE |        A.FREYBIER 30.04.2003 BDF\n**       MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE       BDF\n**       MVC   5(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE       BDF\n         MVC   8(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n*\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         BH    CNVTALOC\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         BZ    RETURN\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   5(19,R2),=C'DATA SET DISPLAYED '\nCNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         BE    DISPLAYT\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\nDISPLAYT BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         BL    BRANCH\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   SLA   R15,2                   MULTIPLY BY 4\n         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\nBRTABLE  B     RC0                                             HD JAN99\n         B     RCTALLOC\n         B     RCTUSED\n         B     RCLALLOC\n         B     RCLUSED\n         B     RCTDIFF\n         B     RCLDIFF\n         B     RCNUM\n         B     RCPREV\n         B     RCDSORG\n         B     RCDIRA\n         B     RCDIRU\n         B     RCENTR\n         B     RCMEMB\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         B     EXIT\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         B     EXIT\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         B     EXIT\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         B     EXIT\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         B     EXIT\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         BNZ   EXIT\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         B     EXIT\nRCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         B     EXIT\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         B     EXIT\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         B     EXIT\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         B     EXIT\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         B     EXIT\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         B     EXIT\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         B     EXIT\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         B     EXIT\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         B     EXIT                                            HD JAN99\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         B     EXIT                                            HD JAN99\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         BO    RC8                     YES, RETURN CODE=8      HD JAN99\n         B     EXIT                                            HD JAN99\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    EXIT2\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         LTR   R1,R1                   Q:DID THIS?              SMS0001\n         BZ    EXIT2_A                 N-DON'T TRY TO FREE IT   SMS0001\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\nEXIT2_A  EQU   *                                                SMS0001\n         LR    R15,R3                  RESTORE RETURN CODE\n         $RTRN RENT=DSECTLEN,RC=(R15)\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\n         LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\nDSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,R1(R6)               ADD 1 TRACK\n         LA    R5,4(R5)\n         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?      ABL NOV92\n         BZ    DSATUTRK                NO, DONE               ABL NOV92\n         LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'13'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'13'               NO, DO 13 NEXT         ABL NOV92\n         B     DSATTRKS                CONTINUE               ABL NOV92\n         SPACE 3                                              ABL NOV92\nDSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         BZ    DSATXNTS\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n*SMS0001 IC    R1,DS1NOPEV             LOAD EXTENTS\n         IC    R1,DS1NOEPV             LOAD EXTENTS             SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n         CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n         BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n         MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    NOSECOND\n         LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCAL1,DS1EXT         Q:EXTEND 2NDARY SPACE?   SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         TM    DS1SCEXT,DS1SCAVB       Q:AVERAGE BLOCK DATA SET?SMS0001\n         BNO   TRYMB                   N-TRY MB TEST            SMS0001\n         XR    R1,R1                   Y-DISPLAY BLKSZ AND AMT  SMS0001\n         ICM   R1,B'0011',DS1SCXTV     COPY TO ALIGNED (F) WOR  SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   5(5,R2),DSATDEC+3       COPY ORIGINAL AVGBLKSZ   SMS0001\n         B     SECAMT                  GET # OF BLOCKS          SMS0001\nTRYMB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCMB        Q:AVGREC=M DATA SET?     SMS0001\n         BNO   TRYKB                   N-TRY KB TEST            SMS0001\n         MVI   9(R2),C'M'              INDICATE MEGABYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYKB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCKB        Q:AVGREC=K DATA SET?     SMS0001\n         BNO   TRYB                    N-TRY B TEST             SMS0001\n         MVI   9(R2),C'K'              INDICATE KILOBYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYB     EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCUB        Q:AVGREC=U DATA SET?     SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         MVI   9(R2),C'B'              INDICATE BYTES           SMS0001\n*        B     SECBYTES                CLEAR                    SMS0001\nSECBYTES EQU   *                       GET NUMBER OF BYTES      SMS0001\n         XR    R1,R1                   CLEAR FOR INSERT         SMS0001\n         ICM   R1,B'0011',DS1SCXTV     SEC SPACE EXTENSION AMT  SMS0001\n         TM    DS1SCXTF,DS1SCCP1       Q:ADJUSTED BY 256?       SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,8                    Y-MULTIPLY BY 256        SMS0001\n         TM    DS1SCXTF,DS1SCCP2       Q:ADJUSTED BY 65536?     SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,16                   Y-MULTIPLY TO 65536      SMS0001\n         SPACE ,                                                SMS0001\n         CLI   9(R2),C'B'              Q:SPACE IN BYTES?        SMS0001\n         BNE   TESTKB                  N-SEE IF IN K            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'K'              Y-CHANGE TO KB           SMS0001\n         SRL   R1,10                   BYTES/1024               SMS0001\nTESTKB   EQU   *                                                SMS0001\n         CLI   9(R2),C'K'              Q:SPACE IN KBYTES?       SMS0001\n         BNE   TESTMB                  N-SEE IF IN M            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'M'              Y-CHANGE TO MB           SMS0001\n         SRL   R1,10                   KBYTES/1024              SMS0001\nTESTMB   EQU   *                                                SMS0001\n         CLI   9(R2),C'M'              Q:SPACE IN MBYTES?       SMS0001\n         BNE   DOSEC                   N-JUST DO IT             SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'G'              Y-CHANGE TO GB           SMS0001\n         SRL   R1,10                   MBYTES/1024              SMS0001\nDOSEC    EQU   *                                                SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   1(8,R2),DSATDEC                                  SMS0001\n         BR    R14                     2NDARY SPACE COMPLETE    SMS0001\nNOAVGREC EQU   *                                                SMS0001\n         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         BM    TRKALLOC\n         BO    CYLALLOC\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         B     SECAMT\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         B     SECAMT\nTRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         BZ    BLKALLOC\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         B     SECAMT\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n         LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND BR    R14                     RETURN\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n         MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'                                        ABL94\n         BE    $ALLEX20                                           ABL94\n         LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         BNO   NOT$CYL                  NO - SKIP                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         B     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         LH    R0,2(,R1)                GET START CC              ABL94\n         MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n         AH    R0,4(,R1)                ADD START HH              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         LH    R0,6(,R1)                GET END CC                ABL94\n         MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n         AH    R0,8(,R1)                ADD END HH                ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         LH    R15,6(,R1)               GET END CC                ABL94\n         SH    R15,2(,R1)               SUB START CC              ABL94\n         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n         AH    R15,8(,R1)               ADD END HH                ABL94\n         SH    R15,4(,R1)               SUB START HH              ABL94\n         LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n         BZ    $ALLEX20                NO, DONE                   ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         BNZ   DSNERR                  NO, SOME ERROR             ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         B     $ALLEX10                CONTINUE                   ABL94\n         SPACE 3                                                  ABL94\n$ALLEX20 DS    0H                                                 ABL94\n$ALLEX99 L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\nCONVDEC0 CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\nHEADER3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--$\n               TYPE-------------------------'                     ABL94\n         EJECT\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         BZ    DSORG001\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\n         USING DSAT+4096+4096,R8                                SMS0003\nDSORG001 ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS SMS0003\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         BZ    DSORGCLC\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         BE    DSORGMVC\n         BXLE  R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\nDSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         BE    DSORGPO\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         BE    DSORGPS\nDSORGBAD OI    FLAGS,$NOTPOPS\n         B     DSORGRTN\nDSORGPO  OI    FLAGS,$DSPO             ASSUME PARTITIONED      @KLS0710\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         BNO   DSORGRTN                NO, BRANCH             ABL NOV92\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         TM    DS1SMSFG,DS1PDSEX       IS THIS A HFS?          @KLS0710\n         BNO   DSORGRTN                NO, BRANCH              @KLS0710\n         MVC   1(2,R2),=C'HF'          YES, CHANGE TO \"HF\"     @KLS0710\n         XI    FLAGS,$DSPO             NOT PARTITIONED         @KLS0710\n         OI    FLAGS,$NOTPOPS                                  @KLS0710\n         B     DSORGRTN\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         BZ    DSATT\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         BNZ   DSATUORV\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         BZ    DSATV\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         BZ    DSATB\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         BZ    DSATS\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         BZ    DSATA\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         BZ    DSATM\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         BZ    DSATBLK\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         BZ    REFRTRN\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n         SPACE ,                                                SMS0001\n***********************************************************************\n* PROCESS SMS INDICATOR FLAG                                    SMS0001\n* 1) INDICATE IF 'MANAGED' FLAG IS ON.                          SMS0001\n* 2) IF BLOCKSIZE IS DISPLAYED, SET INDICATOR IF IT WAS SYSTEM  SMS0001\n*    DETERMINED.                                                SMS0001\n* 3) DO SMS KEYWORDS IF SPECIFIED.                              SMS0003\n***********************************************************************\n$SMS     EQU   *                                                SMS0001\n         CLC   DCB,=H'2'               Q:NODCB SPECIFIED?       SMS0001\n         BE    $SMS_100                Y-DON'T WORRY ABOUT BLKSZSMS0001\n         TM    DS1SMSFG,DS1CRSDB       Q:SDB BLKSZ?             SMS0001\n         BNO   $SMS_100                N-DON'T FLAG             SMS0001\n         L     R2,DCBFLD               Y-GET ADDR OF PARM       SMS0001\n         MVI   10(R2),C'*'             SET SDB BLKSZ INDICATOR  SMS0001\n$SMS_100 EQU   *                                                SMS0001\n         L     R2,SMSFLD               LOAD OUTPUT AREA ADDRESS SMS0001\n         MVC   0(3,R2),=C'YES'         ASSUME SMS MANAGED       SMS0001\n         TM    DS1SMSFG,DS1SMSDS       Q:CORRECT ASSUMPTION?    SMS0001\n         BOR   R14                     Y-WE'RE SET              SMS0001\n         MVC   0(3,R2),=C'NO '         N-CHANGE TO NO           SMS0001\n         BR    R14                     RETURN TO CALLER         SMS0001\n$SMS2    EQU   *                                                SMS0002\n         ICM   R15,B'1111',IGWASMSV    GET ROUTINE ADDRESS      SMS0002\n         BZR   R14                     RETURN IF NONE           SMS0002\n         SPACE ,                                                SMS0002\n         ST    R14,$SMSAVE             SAVE RETURN ADDRESS      SMS0002\n         BAS   R14,AMODE31             TO CALL ROUTINE          SMS0002\n         CALL  (15),MF=(E,CALL_L)      GET SMS INFO             SMS0002\n         BAS   R14,AMODE24             TO GET BACK              SMS0002\n         LTR   R15,R15                 DID IT WORK?             SMS0002\n         BNZ   $SMS_900                N-SKIP THIS JUNK         SMS0002\nPROMGMTC CLI   MGMTCLAS+1,2            TEST FOR NOMGMTCLASS     SMS0002\n         BE    PROSTORC                SKIP                     SMS0002\n         L     R2,MGMTCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWMGMTC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PROSTORC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWMGMTC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPROSTORC CLI   STORCLAS+1,2            TEST FOR NOSTORCLASS     SMS0002\n         BE    PRODATAC                SKIP                     SMS0002\n         L     R2,STORCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWSTORC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PRODATAC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWSTORC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPRODATAC CLI   DATACLAS+1,2            TEST FOR NODATACLASS     SMS0002\n         BE    $SMS_900                SKIP                     SMS0002\n         L     R2,DATACFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWDATAC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    $SMS_900                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWDATAC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\n$SMS_900 EQU   *                                                SMS0002\n         L     R14,$SMSAVE             RESTORE RETURN ADDRESS   SMS0002\n         BR    R14                     RETURN TO CALLER         SMS0001\nAMODE31  EQU   *                                                SMS0002\n         O     R14,=X'80000000'        SET 31-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 31-BIT MODE    SMS0002\nAMODE24  EQU   *                                                SMS0002\n         LA    R14,0(,R14)             SET 24-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 24-BIT MODE    SMS0002\n         SPACE\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         BNE   BADDAY\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         BZ    BADDAY\n         TM    WORK+3,X'06'\n         BZ    BADDAY\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         BH    BADDAY\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         B     DATERTRN\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\n         USING DSAT+4096+4096,R8                                SMS0003\nERRPARS  ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(28),DSATERR1                             SMS0003\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     SETERROR\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\n         USING DSAT+4096+4096,R8                                SMS0003\nNOID     ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR7                             SMS0003\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     RLSA\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\n         USING DSAT+4096+4096,R8                                SMS0003\nTOOLONG  ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE,BLANKS                                   SMS0003\n         MVC   OUTLINE(44),DSATERR4\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\nRLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BAL   R2,PUTL2                PUT MESSAGE\n         LA    R3,16                   SET CONDITION CODE\n         B     EXIT2\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         BNE   LOCERR                                          HD JAN99\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   BAL   R2,PUTL                 PRINT IT\n         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     PUTLINE                 PRINT THE LINE\n*--------ERROR IN OBTAIN MACRO\nDSNERR   CH    R15,=H'8'               TEST RETURN CODE\n         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n         BE    TESTVALL\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         B     DSNERR1\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         B     PUTLINE                 PRINT IT\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         B     PUTLINE                 DISPLAY MESSAGE\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         B     PUTLINE                 DISPLAY MESSAGE              SPG\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         BE    PUTLHPDS\nPUTL2    PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         BZ    PUTLBACK\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK BR    R2                      RETURN\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                         EXIT\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\n*TTRLOC  CAMLST BLOCK,0,0,0                                    #DD09294\nTTRLOC   DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n         DC    A(0)                              PARAMETER THREE\n         DC    A(0)                              PARAMETER FOUR\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\nIGWASMSC DC    CL8'IGWASMS'            SMS ATTRIBUTE ROUTINE    SMS0002\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\n         SPACE\n*ASE01   EQU   DSAT                                             SMS0003\n*ASE02   EQU   DSAT+4096                                        SMS0003\n*ASE03   EQU   DSAT+4096+4096                                   SMS0003\n*ASE04   EQU   DSAT+4096+4096+4096                              SMS0003\n         SPACE\nMODLINE  DC    H'204,0'                                           ABL94\n*LANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY\n         DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         BNE   PDSSAVE\n         BCT   R2,PDSEND               DECREMENT COUNTER\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TESTORG\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         BNE   ERRDAIR\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         BZ    ERRDSORG\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         BZ    ERROPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n         SPACE\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         BNP   NEXTBLK\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         BNE   PROCENTR\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         B     NEXTBLK\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         BZ    DIRLEN\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         B     NEXTENT\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         B     PDSRTRN\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         BNE   CTLGERR\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         BNE   DYNALCER\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         B     PDSRTRN\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         B     PDSRTRN\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         BNE   OTHERERR\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         B     PDSRTRN\nOTHERERR ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         B     PDSRTRN\n*--------OPEN ERROR\nERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         B     PDSRTRN\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         B     PDSRTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPDSRTRN  $RTRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nSMS      IKJKEYWD DEFAULT='NOSMS'                               SMS0001\n         IKJNAME 'SMS'                                          SMS0001\n         IKJNAME 'NOSMS'                                        SMS0001\nDATACLAS IKJKEYWD DEFAULT='DATACLASS'                           SMS0002\n         IKJNAME 'DATACLASS'                                    SMS0002\n         IKJNAME 'NODATACLASS'                                  SMS0002\nMGMTCLAS IKJKEYWD DEFAULT='MGMTCLASS'                           SMS0002\n         IKJNAME 'MGMTCLASS',ALIAS='MANAGEMENTCLASS'            SMS0002\n         IKJNAME 'NOMGMTCLASS',ALIAS='NOMANAGEMENTCLASS'        SMS0002\nSTORCLAS IKJKEYWD DEFAULT='STORCLASS'                           SMS0002\n         IKJNAME 'STORCLASS',ALIAS='STORAGECLASS'               SMS0002\n         IKJNAME 'NOSTORCLASS',ALIAS='NOSTORAGECLASS'           SMS0002\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nSIZE     IKJKEYWD DEFAULT='SIZE'                                SMS0001\n         IKJNAME  'SIZE',SUBFLD=SIZSUB                          SMS0001\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\nSIZSUB   IKJSUBF                       ,                        SMS0001\nWORKSIZE IKJIDENT 'WORKSIZE',INTEG,DEFAULT='8192'               SMS0001\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\n*LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR           #DD09294\nLOCBYTTR DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nSMSFLD   DS    A                       ADDR OF SMS FIELD        SMS0001\nDATACFLD DS    A                       ADDR OF DATACLAS FIELD   SMS0002\nMGMTCFLD DS    A                       ADDR OF MGMTCLAS FIELD   SMS0002\nSTORCFLD DS    A                       ADDR OF STORCLAS FIELD   SMS0002\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL5,CL3                                            ABL94\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL5,CL3                                            ABL94\nOL@LNTH  DS    CL5,CL2                                            ABL94\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nHALF     DS    H                       HALFWORD ALIGNED WORK AREA\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\nBLANKS   DS    CL200                   BLANK AREA               SMS0002\n         SPACE\n****************************************************************SMS0002\n*        IGWASMS FIELDS                                               *\n****************************************************************SMS0002\n         SPACE\nIGWRC    DS    F                       RC FROM IGWASMS          SMS0002\nIGWREAS  DS    F                       REASON CODE FROM IGWASMS SMS0002\nIGWPROB  DS    2F                      PROB DETERMINATION INFO  SMS0002\nIGWLEN   DS    F                       LENGTH OF DATA SET NAME  SMS0002\nIGWDSN   DS    A                       POINTER TO DSN           SMS0002\nIGWSMS   EQU   *                                                SMS0002\nIGWSTORC DS    CL30                    STORAGE CLASS OR BLANK   SMS0002\nIGWMGMTC DS    CL30                    MANAGMENT CLASS OR BLANK SMS0002\nIGWDATAC DS    CL30                    DATA CLASS OR BLANK      SMS0002\nIGWTYPE  DS    F                       DATA SET TYPE            SMS0002+\n                                       1=PDS/E (LIBRARY)        SMS0002+\n                                       0=OTHER                  SMS0002\nCALL_L   CALL  ,(,,,,,,),MF=L          LIST FORM OF CALL        SMS0002\nIGWASMSV DS    V(IGWASMSV)             LOAD'ED ADDR OF IGWASMS  SMS0002\n$SMSAVE  DS    A                       $SMS RETURN ADDRESS      SMS0002\nSAVER7   DS    F                       SAVE AREA FOR R7         SMS0003\nSAVER8   DS    F                       SAVE AREA FOR R8         SMS0003\nBASER3   DS    F                       SAVE AREA FOR 3RD BASE   SMS0003\nBASER4   DS    F                       SAVE AREA FOR 4TH BASE   SMS0003\n         DS    0D\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSAT5": {"ttr": 22021, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00X\\x01\\x10 \\x9f\\x01\\x10!\\x0f\\t3\\x11x\\x11c\\x11x\\xd7\\xd9\\xc5\\xe5\\xe5\\xc5\\xd9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2010-07-28T00:00:00", "modifydate": "2010-07-29T09:33:58", "lines": 4472, "newlines": 4451, "modlines": 4472, "user": "PREVVER"}, "text": "         LCLC  &PGM                      PROGRAM NAME           SMS0003\n         LCLC  &FMID,&PTF,&VER           VERSION/PTF LEVEL      SMS0003\n*\n&PGM     SETC  'DSAT'                                           SMS0003\n&FMID    SETC  'PDS8600'                                        SMS0003\n&PTF     SETC  '       '                                        SMS0003\n&VER     SETC  '&FMID &PTF'                                     SMS0003\n*MODIFIED BY EDS -- (NOVEMBER 2005) -- ADD SMS SUPPORT\n*ORIGINAL SOURCE -- CBT439.FILE296  (NOVEMBER 2001)\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                        MVT\n*                                        SVS  (OS/VS2 RELEASE 1)\n*                                        MVS  (OS/VS2 RELEASE 3)\n*          DATA SET CBT10902   AT LEVEL 003 AS OF 12/01/87\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*  BDF MODIFICATION :                                                 *\n*  30.04.2003 - A.FREYBIER                                            *\n*               MORE THAN 9999 DATASETS POSSIBLE |                    *\n*  29.11.2001 - A.FREYBIER                                            *\n*               INCREASE GETMAIN AREA FOR MORE DATASETS               *\n*  21.11.2009 - D.DALBY                                        #DD09294\n*               IGNORE \"CAMLST BLOCK\" AS IBM DROPPED SUPPORT.         *\n*               REPLACE WITH PRE-ASSEMBLED CAMLST BLOCK MACROS.       *\n*  CSC MODIFICATION :                                                 *\n*  07.29.2010 - J.KALINICH                                    DRK JUL10\n*               MARK EXTENDED FORMAT VSAM DATASETS                    *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     THE MODULE MAY BE LINKED WITH ATTRIBUTES RENT AND REFR AND IS   *\n*     ELIGIBLE FOR INCLUSION IN THE LINK PACK AREA.                   *\n*                                                                     *\n***********************************************************************\n         TITLE 'DISPLAY DATA SET ATTRIBUTES'\n***********************************************************************\n*                                                                     *\n*  SS0802         ALIAS DSAT                                          *\n*                                                                     *\n*  FUNCTION       THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION      *\n*                 INFORMATION FOR DATA SETS ON A DIRECT ACCESS        *\n*                 DEVICE.                                             *\n*                                                                     *\n*  DESCRIPTION    DSAT WILL SEARCH THE OS CATALOG AND CVOLS FOR THE   *\n*                 ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION    *\n*                 INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE  *\n*                 OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS *\n*                 AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL   *\n*                 BE DISPLAYED.                                       *\n*                                                                     *\n*                 THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING *\n*                 THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.    *\n*                 THIS OPTION PERMITS DISPLAYING INFORMATION FOR      *\n*                 UNCATALOGED DATA SETS.                              *\n*                                                                     *\n*                 THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY   *\n*                 THE USER WHEN HE ENTERS THE DSAT COMMAND BY         *\n*                 SPECIFYING KEYWORD OPERANDS.                        *\n*                                                                     *\n*                 THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES  *\n*                 TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF  *\n*                 DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED  *\n*                 VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE *\n*                 WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY          *\n*                 SPECIFYING NOPRINT.                                 *\n*                                                                     *\n*                 THE USER MAY CHOOSE WHAT INFORMATION WILL BE        *\n*                 DISPLAYED BY ENTERING KEYWORDS.                     *\n*                                                                     *\n*                 THE INFORMATION THAT MAY BE DISPLAYED IS:           *\n*                  1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED. *\n*                  2. FILE SEQUENCE NUMBER.                           *\n*                  3. DEVICE TYPE CODE FROM CATALOG ENTRY.            *\n*                  4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).     *\n*                  5. SECONDARY ALLOCATION (AMOUNT AND UNITS).        *\n*                  6. DATA SET ORGANIZATION.                          *\n*                  7. DCB (RECFM, BLKSIZE, AND LRECL).                *\n*                  8. CREATION DATE.                                  *\n*                  9. EXPIRATION DATE.                                *\n*                 10. FULLY QUALIFIED DATA SET NAME.                  *\n*                 11. CCHHR OF THE FORMAT 1 DSCB.                     *\n*                 12. GENERATION DATA GROUP DATA.                     *\n*                 13. PDS DIRECTORY INFORMATION.                      *\n*                 14. SYSTEM MANAGED DATA SET FLAG             SMS0001*\n*                                                                     *\n*  SYNTAX         DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC   *\n*                                   DSORG/NODSORG     DCB/NODCB       *\n*                                   CRDATE/NOCRDATE   EXDATE/NOEXDATE *\n*                                   LASTREF/NOLASTREF\n*                                   TOTALS/NOTOTALS   PRINT/NOPRINT   *\n*                                   HEADER/NOHEADER   ALL/DAONLY      *\n*                                   GDGDATA/NOGDGDATA SEQNO/NOSEQNO   *\n*                                   DEVTYPE/NODEVTYPE DEVICE/NODEVICE *\n*                                   CCHHR/NOCCHHR     PDS/NOPDS       *\n*                                   SECONDARY/NOSECONDARY             *\n*                                   SMS/NOSMS                  SMS0001*\n*                                   GENERIC           DSONLY          *\n*                                   HARDCOPY(DDNAME)  VOLUME(SERIAL)  *\n*                                   RC(TALLOC/TUSED/TDIFF/            *\n*                                      LALLOC/LUSED/LDIFF/NUM/        *\n*                                      PREVIOUS/DSORG/DIRALLOC/       *\n*                                      DIRUSED/ENTRIES/ALIASES/       *\n*                                      MEMBERS)                       *\n*                                                                     *\n*                 DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX            *\n*                             SERIAL   ALLOC   DSORG    DCB    CRDATE *\n*                             NOEXDATE TOTALS  PRINT    HEADER ALL    *\n*                             NOPDS    NOSEQNO NODEVICE NODEVTYPE     *\n*                             NOGDGDATA    NOLASTREF    NOSECONDARY   *\n*                             NOSMS                            SMS0001*\n*                             NOCCHHR      NOEXTENTS    NOFULL   ABL94*\n*                                                                     *\n*                 WITH FULL - SAME AS DEFAULTS ABOVE WITH:       ABL94*\n*                             EXDATE    PDS     DEVICE           ABL94*\n*                             GDGDATA   LASTREF SECONDARY        ABL94*\n*                             CCHHR                              ABL94*\n*                             NODEVTYPE NOSEQNO NOEXTENTS        ABL94*\n*                                                                     *\n*  SAMPLE OUTPUTS:                                               ABL94*\n*>DSAT LIB.CNTL                                                       *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*                                                                     *\n*>DSAT LIB.CNTL LAST                                                  *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS..*\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE..*\n*                                                                     *\n*>DSAT LIB.CNTL FULL  (NOTE: THE OUTPUT LINE IS ABOUT 160 BYTES WIDE) *\n*SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n*STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n*  -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-   *\n*  FB   23440    80 05/04/94 05/06/94 08/03/94  0000000930 WSER07.LIB.*\n*                                                                     *\n*>DSAT LINK                                                           *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALI*\n*STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOA*\n*MIGRAT                                                WSER07.LINK.USE*\n*        1370   652                                       3 DATA SETS *\n*                                                                     *\n*>DSAT LIB.CNTL EXTENTS                                               *\n*SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-       *\n*STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL*\n*    EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE----------*\n*      0   02CB,0004  10729   02D7,0004  10909     181  DATA          *\n*      1   052A,0000  19830   052C,0008  19868      39  DATA          *\n*      2   07D6,0000  30090   07D9,000E  30149      60  DATA          *\n*                                                                     *\n*                                                                     *\n*  OPERANDS       NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL     *\n*                             NAMES. TSO NAMING CONVENTIONS ARE USED. *\n*                             IF A SPECIFIED NAME IS AN INDEX NAME,   *\n*                             DATA SETS UNDER THAT LEVEL WILL BE      *\n*                             DISPLAYED.  IF NO NAME IS SPECIFIED,    *\n*                             THE PREFIX WILL BE USED.  FOR MVT AND   *\n*                             SVS, THIS IS THE USERID.  FOR MVS,      *\n*                             THE PREFIX MAY BE SPECIFIED WITH THE    *\n*                             PROFILE COMMAND.  IF NO NAME IS         *\n*                             SPECIFIED AND THE PROFILE SPECIFIES     *\n*                             NOPREFIX, THE USERID WILL BE USED.      *\n*                                                                     *\n*                             NOTE - IF A KEYWORD IS ENTERED,         *\n*                                    NAME-LIST MUST BE SPECIFIED.  IF *\n*                                    NAME-LIST IS OMITTED, IT WILL    *\n*                                    NOT DEFAULT TO THE PREFIX, BUT   *\n*                                    THE KEYWORD WILL BE INTERPRETED  *\n*                                    AS THE NAME-LIST, NOT A KEYWORD. *\n*                                                                     *\n*                 SERIAL/NOSERIAL                                     *\n*                             SPECIFIES WHETHER OR NOT THE VOLUME     *\n*                             SERIAL IS TO BE DISPLAYED FOR EACH DATA *\n*                             SET.                                    *\n*                                                                     *\n*                 SEQNO/NOSEQNO                                       *\n*                             SPECIFIES WHETHER OR NOT THE FILE       *\n*                             SEQUENCE NUMBER IS TO BE DISPLAYED.     *\n*                             IF NOSERIAL IS SPECIFIED, THE FILE      *\n*                             SEQUENCE NUMBER WILL NOT BE DISPLAYED.  *\n*                                                                     *\n*                 DEVTYPE/NODEVTYPE                                   *\n*                             SPECIFIES WHETHER OR NOT THE DEVICE     *\n*                             CODE FROM THE CATALOG ENTRY IS TO BE    *\n*                             DISPLAYED.  IF VOLUME IS SPECIFIED,     *\n*                             THE DEVICE TYPE IS OBTAINED FROM THE    *\n*                             UCB.                                    *\n*                                                                     *\n*                 DEVICE/NODEVICE                                     *\n*                             SPECIFIES WHETHER OR NOT THE NAME OF    *\n*                             THE DEVICE (3330, 2314, ETC.) IS TO     *\n*                             BE DISPLAYED.  THIS VALUE IS ONLY       *\n*                             RECOGNIZED FOR DIRECT ACCESS DEVICES.   *\n*                                                                     *\n*                 ALLOC/NOALLOC                                       *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             INFORMATION (TRACKS ALLOCATED, TRACKS   *\n*                             FREE, AND NUMBER OF EXTENTS) IS TO BE   *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 SECONDARY/NOSECONDARY                               *\n*                             SPECIFIES WHETHER OR NOT SECONDARY      *\n*                             ALLOCATION INFORMATION (AMOUNT OF       *\n*                             SECONDARY SPACE AND UNITS) IS TO BE     *\n*                             DISPLAYED.  IF NOALLOC IS SPECIFIED,    *\n*                             NO SECONDARY ALLOCATION INFORMATION     *\n*                             WILL BE DISPLAYED.                      *\n*SMS0001                                                              *\n*SMS0001          SMS/NOSMS                                           *\n*SMS0001                      SPECIFIES WHETHER OR NOT THE SMS DATA   *\n*SMS0001                      SET FLAG SHOULD BE DISPLAYED.  SMS      *\n*SMS0001                      MANAGED DATA SETS ARE INDICATED BY 'YES'*\n*SMS0001                      AND NON-SMS MANAGED DATA SETS BY 'NO.'  *\n*SMS0001                      ADDITIONALLY, DATA SETS WITH A BLOCK    *\n*SMS0001                      SIZE DETERMINED BY THE SYSTEM (SDB) ARE *\n*SMS0001                      INDICATED WITH AN ASTERISK NEXT TO THE  *\n*SMS0001                      BLOCK SIZE.                             *\n*                                                                     *\n*                 DSORG/NODSORG                                       *\n*                             SPECIFIES WHETHER OR NOT DATA SET       *\n*                             ORGANIZATION IS TO BE DISPLAYED.        *\n*                                                                     *\n*                 PDS/NOPDS                                           *\n*                             SPECIFIES WHETHER OR NOT PDS DIRECTORY  *\n*                             INFORMATION IS DISPLAYED.  SELECTION    *\n*                             OF THE PDS OPTION WILL RESULT IN        *\n*                             DYNAMIC ALLOCATION/DEALLOCATION AND     *\n*                             READING OF THE PDS.  THESE OPERATIONS   *\n*                             WILL RESULT IN PERFORMANCE DEGRADATION. *\n*                                                                     *\n*                             THE MESSAGE \"DATA SET IN USE\" INDICATES *\n*                             ANOTHER USER HAD EXCLUSIVE CONTROL OF   *\n*                             THE DATA SET AND DSAT COULD NOT         *\n*                             ALLOCATE IT.                            *\n*                                                                     *\n*                             IF AN ERROR OCCURS DURING PROCESSING OF *\n*                             THE PDS DIRECTORY, AN ERROR MESSAGE     *\n*                             WILL APPEAR IN THE PDS DATA FIELDS.     *\n*                               RC =   RETURN CODE FROM DAIR          *\n*                               DARC = DYNAMIC ALLOCATION RETURN CODE *\n*                               CTRC = CATALOG RETURN CODE            *\n*                                                                     *\n*                 DCB/NODCB                                           *\n*                             SPECIFIES WHETHER OR NOT DCB INFORMATION*\n*                             (RECFM, BLKSIZE, AND LRECL) IS TO BE    *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 CRDATE/NOCRDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE CREATION   *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 EXDATE/NOEXDATE                                     *\n*                             SPECIFIES WHETHER OR NOT THE EXPIRATION *\n*                             DATE IS TO BE DISPLAYED.                *\n*                                                                     *\n*                 LASTREF/NOLASTREF                                   *\n*                             SPECIFIES WHETHER OR NOT THE LAST DATE  *\n*                             REFERENCED IS TO BE DISPLAYED.  MVS     *\n*                             SU 60 REQUIRED.                         *\n*                                                                     *\n*                 CCHHR/NOCCHHR                                       *\n*                             SPECIFIES WHETHER OR NOT THE CCHHR OF   *\n*                             THE FORMAT 1 DSCB IS TO BE DISPLAYED.   *\n*                                                                     *\n*                 TOTALS/NOTOTALS                                     *\n*                             SPECIFIES WHETHER OR NOT ALLOCATION     *\n*                             AND NUMBER OF DATA SET ENTRIES DISPLAYED*\n*                             TOTALS ARE TO BE DISPLAYED.  IF NOALLOC *\n*                             IS SPECIFIED, TOTALS ARE NOT DISPLAYED. *\n*                                                                     *\n*                 PRINT/NOPRINT                                       *\n*                             SPECIFIES WHETHER OR NOT OUTPUT IS TO BE*\n*                             SUPPRESSED.  THIS IS INTENDED FOR USE IN*\n*                             COMMAND PROCEDURES WHERE DSAT IS BEING  *\n*                             USED TO SET THE RETURN CODE.  ERROR     *\n*                             MESSAGES ARE NOT SUPPRESSED.            *\n*                                                                     *\n*                 HEADER/NOHEADER                                     *\n*                             SPECIFIES WHETHER OR NOT THE HEADER     *\n*                             LINE IS TO BE SUPPRESSED.               *\n*                                                                     *\n*                 ALL/DAONLY                                          *\n*                             SPECIFIES WHETHER OR NOT DATA SETS      *\n*                             ON NON-DIRECT ACCESS DEVICES OR         *\n*                             ON UNMOUNTED DEVICES ARE TO BE          *\n*                             DISPLAYED.                              *\n*                                                                     *\n*                 FULL/NOFULL                                         *\n*                             SPECIFIES WHETHER OR NOT MOST OF THE    *\n*                             AVAILABLE DATA SET INFORMATION SHOULD   *\n*                             BE DISPLAYED.  FULL ADDS EXDATE, PDS,   *\n*                             DEVICE, GDGDATA, LASTREF, SECONDARY,    *\n*                             AND CCHHR KEYWORDS.                     *\n*                                                                     *\n*                             OTHER KEYWORDS (LIKE NOPDS) MAY BE      *\n*                             SPECIED AFTER FULL TO TURN OFF          *\n*                             OPTIONS SELECTIVELY.                    *\n*                                                                     *\n*                 EXTENTS/NOEXTENTS                                   *\n*                             SPECIFIES WHETHER OR NOT INDIVIDUAL     *\n*                             EXTENTS SHOULD BE FORMATTED WITH THE    *\n*                             FOLLOWING FIELDS:                       *\n*                               EXT#       - EXTENT NUMBER (0 TO 122) *\n*                               START/CCHH - STARTING CCHH HEX ADDRESS*\n*                               S/TRK      - STARTING CCHH IN DECIMAL *\n*                               END/CCHH   - ENDING CCHH HEX ADDRESS  *\n*                               E/TRK      - ENDING CCHH IN DECIMAL   *\n*                               LENGTH     - SIZE OF EXTENT IN TRACKS *\n*                               TYPE       - COMMENTS ON EXTENT USE   *\n*                                            CYL - CYLINDER ALLOCATION*\n*                                            SHR - SHARING CYLINDER   *\n*                                            USR LBL - USER LABELS    *\n*                                            IS INDX - ISAM INDEX     *\n*                                            IS OVFL - ISAM OVERFLOW  *\n*                                            DATA    - USER DATA/PRIME*\n*                                                                     *\n*                 GDGDATA/NOGDGDATA                                   *\n*                             SPECIFIES WHETHER OR NOT GENERATION     *\n*                             DATA GROUP DATA IS TO BE DISPLAYED.     *\n*                             IF GDGDATA IS SPECIFIED, THE            *\n*                             INFORMATION DISPLAYED IS -              *\n*                               OPTIONS - OPTIONS SPECIFIED WHEN THE  *\n*                                         INDEX WAS BUILT.            *\n*                                         E INDICATES EMPTY,          *\n*                                         D INDICATES DELETE.         *\n*                               CURRENT - NUMBER OF GENERATION DATA   *\n*                                         SETS CURRENTLY CATALOGED    *\n*                                         UNDER THE INDEX.            *\n*                               MAX     - MAXIMUM NUMBER OF ENTRIES   *\n*                                         WHICH MAY EXIST AT ONE      *\n*                                         TIME.                       *\n*                                                                     *\n*                             NOTE: THIS OPTION IS INOPERATIVE IN     *\n*                                   MVS IF THE DATA MANAGMENT SU (8)  *\n*                                   IS NOT INSTALLED.  THIS OPERAND   *\n*                                   IS ALSO INOPERATIVE FOR           *\n*                                   GENERATION INDICES IN VSAM        *\n*                                   CATALOGS.  IF THE KEYWORD IS      *\n*                                   ENTERED, IT WILL BE IGNORED.  NO  *\n*                                   ERROR MESSAGE WILL BE GENERATED.  *\n*                                                                     *\n*                 GENERIC     SPECIFIES THAT THE NAME SPECIFIED IS    *\n*                             TO BE USED AS A GENERIC KEY TO LOCATE   *\n*                             DATA SET NAMES.  ALL DATA SETS WHICH    *\n*                             MATCH THE KEY WILL BE DISPLAYED.  THE   *\n*                             NAME NEED NOT SPECIFY AN INDEX LEVEL.   *\n*                             THIS OPTION IS VALID FOR MVS ONLY       *\n*                             AND ENTRIES IN A VSAM CATALOG.          *\n*                                                                     *\n*                             GENERIC IS IGNORED IF DSONLY IS         *\n*                             SPECIFIED.                              *\n*                                                                     *\n*                 DSONLY      SPECIFIES THAT NAME-LIST ENTRIES        *\n*                             REPRESENT DATA SET NAMES ONLY.  IF      *\n*                             A NAME SPECIFIED IS FOUND TO BE AN      *\n*                             INDEX, DSAT WILL TREAT IT AS NOT        *\n*                             FOUND.                                  *\n*                                                                     *\n*                 VOLUME      SPECIFIES THE VOLUME SERIAL NUMBER      *\n*                             OF THE VOLUME TO BE SEARCHED FOR        *\n*                             THE SPECIFIED DATA SETS.  DSAT WILL     *\n*                             ASSUME THAT THE NAME-LIST CONSISTS      *\n*                             OF DATA SET NAMES, NOT INDEX NAMES.     *\n*                                                                     *\n*                 HARDCOPY(DDNAME)                                    *\n*                             SPECIFIES THAT A HARD COPY LISTING      *\n*                             OF THE DSAT OUTPUT IS DESIRED.          *\n*                             DDNAME SPECIFIES THE DDNAME OF A        *\n*                             PRE-ALLOCATED DATA SET WHERE THE        *\n*                             OUTPUT WILL BE WRITTEN.  THE DATA SET   *\n*                             ATTRIBUTES WILL BE                      *\n*                                RECFM=FB,LRECL=120,BLKSIZE=3000      *\n*                                                                     *\n*                 RC                                                  *\n*                             SPECIFIES THE RETURN CODE SETTING.  IF  *\n*                             RC IS NOT SPECIFIED, THE RETURN CODE    *\n*                             WILL BE SET TO:                         *\n*                              0 - SUCCESSFUL COMPLETION.             *\n*                              8 - AT LEAST ONE DATASET NOT FOUND     *\n*                             16 - UNABLE TO INTERPRET COMMAND.       *\n*                                                                     *\n*                             THE RC OPERAND PERMITS THE USER TO      *\n*                             SPECIFY THAT THE RETURN CODE IS TO BE   *\n*                             SET TO A VALUE DEPENDING ON THE         *\n*                             ALLOCATION OF THE DATA SETS.            *\n*                             TALLOC   - TOTAL TRACKS ALLOCATED       *\n*                             TUSED    - TOTAL TRACKS USED            *\n*                             TDIFF    - TOTAL OVERALLOCATION         *\n*                                        (TALLOC-TUSED)               *\n*                             LALLOC   - TRACKS ALLOCATED BY LAST     *\n*                                        DATA SET                     *\n*                             LUSED    - TRACKS USED BY LAST DATA SET *\n*                             LDIFF    - LAST DATA SET OVERALLOCATION *\n*                                        (LALLOC-LUSED)               *\n*                             NUM      - NUMBER OF DATA SETS DISPLAYED*\n*                                        (INCLUDES DATA SETS NOT      *\n*                                        FOUND, ETC.)                 *\n*                             PREVIOUS - ASSUMES THE RETURN CODE OF   *\n*                                        THE PREVIOUS COMMAND.        *\n*                             DSORG    - SETS THE RETURN CODE BASED   *\n*                                        ON THE DATA SET ORGANIZATION *\n*                                        OF THE DATA SETS DISPLAYED.  *\n*                                        1 - ALL DATA SETS WERE SEQ.  *\n*                                        2 - ALL DATA SETS WERE PDS   *\n*                                        3 - DATA SETS WERE MIXED PDS *\n*                                            AND SEQUENTIAL           *\n*                                        4 - AN ERROR OCCURRED OR A   *\n*                                            DATA SET OTHER THAN PDS  *\n*                                            OR SEQUENTIAL WAS        *\n*                                            PROCESSED                *\n*                             DIRALLOC - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        ALLOCATED.                   *\n*                             DIRUSED  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF DIRECTORY BLOCKS   *\n*                                        USED.                        *\n*                             ENTRIES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ENTRIES IN THE     *\n*                                        DIRECTORY (MEMBERS AND       *\n*                                        ALIASES).                    *\n*                             ALIASES  - SETS THE RETURN CODE TO THE  *\n*                                        NUMBER OF ALIASES.           *\n*                             MEMBERS  - SETS THE RETURN CODE TO      *\n*                                        ENTRIES-ALIASES.             *\n*                                                                     *\n*                                                                     *\n*                             NOTE - IF NOALLOC IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR TALLOC, TUSED,   *\n*                                    TDIFF, LALLOC, LUSED, AND LDIFF  *\n*                                    WILL BE ZERO.                    *\n*                                                                     *\n*                                    IF NODSORG IS SPECIFIED, THE     *\n*                                    RETURN CODE FOR DSORG WILL BE    *\n*                                    ZERO.                            *\n*                                                                     *\n*                                    IF NOPDS IS SPECIFIED OR THE     *\n*                                    LAST OR ONLY DATA SET IS NOT     *\n*                                    A PDS, THE RETURN CODE FOR       *\n*                                    DIRALLOC, DIRUSED, ENTRIES,      *\n*                                    ALIASES, AND MEMBERS WILL BE     *\n*                                    ZERO.                            *\n*                                                                     *\n*  SUBCOMMANDS    DSAT HAS NO SUBCOMMANDS.                            *\n*                                                                     *\n*  ATTRIBUTES     RENT, REUS, REFR, ENABLED, NON-PRIVELEGED           *\n*                                                                     *\n*  EXAMPLES       DISPLAY ALL DATA SETS UNDER THE TERMINAL USER'S ID. *\n*                                                                     *\n*                 DSAT                                                *\n*                                                                     *\n*                                                                     *\n*                 DISPLAY ALL \"FPL\" DATA SETS.  DISPLAY EXPIRATION    *\n*                 DATES.                                              *\n*                                                                     *\n*                 DSAT 'FPL' EXDATE                                   *\n*                                                                     *\n*                                                                     *\n*                 IN A PROCEDURE, DETERMINE IF DATA SET SS.MACLIB     *\n*                 HAS 20 TRACKS LEFT.  IF SO, TERMINATE.  IF NOT,     *\n*                 COMPRESS IT.                                        *\n*                                                                     *\n*                 DSAT 'SS.MACLIB' RC(LDIFF) NOPRINT                  *\n*                 WHEN SYSRC(GT 20) END                               *\n*                 COMPRESS 'SS.MACLIB'                                *\n*                 END                                                 *\n*                                                                     *\n*                                                                     *\n*  FPL MACROS USED                                                    *\n*                                                                     *\n*        $ENTER            ENTRY CODING                               *\n*        $RTRN             EXIT CODING                                *\n*        #TSOBLKS          CONSTRUCT TSO CONTROL BLOCKS               *\n*        #VTCFMT1          FORMAT 1 DSCB MAPPING                      *\n*        #VTCFMT3          FORMAT 3 DSCB MAPPING                      *\n*        #CTGPL            MAP A VSAM CATALOG PARAMETER LIST          *\n*                                                                     *\n*  IBM MACROS USED                                                    *\n*                                                                     *\n*        GETMAIN           OBTAIN WORKING STORAGE                     *\n*        FREEMAIN          RELEASE WORKING STORAGE                    *\n*        LINK              INVOKE SERVICE ROUTINE                     *\n*        LOCATE            READ CATALOG                               *\n*        OBTAIN            READ VTOC                                  *\n*        CAMLST            CONSTRUCT PARM LIST FOR LOCATE AND OBTAIN  *\n*        OPEN              OPEN PDS DIRECTORY                         *\n*        CLOSE             CLOSE PDS DIRECTORY                        *\n*        READ              READ PDS DIRECTORY                         *\n*        CHECK             WAIT FOR COMPLETION OF READ                *\n*        PUT               WRITE A RECORD                             *\n*        DCB               DATA CONTROL BLOCK FOR PDS DIRECTORY       *\n*        PUTLINE           OUTPUT A LINE TO TERMINAL                  *\n*        IKJPARM           BEGIN PARSE PARAMETER CONTROL LIST         *\n*        IKJIDENT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJPOSIT          DESCRIBE POSITIONAL PARAMETER              *\n*        IKJKEYWD          DESCRIBE A KEYWORD PARAMETER               *\n*        IKJNAME           DESCRIBE A KEYWORD VALUE                   *\n*        IKJSUBF           BEGIN A SUBFIELD DESCRIPTION               *\n*        IKJENDP           END PARSE PARAMETER CONTROL LIST           *\n*        IKJRLSA           RELEASE STORAGE OBTAINED BY PARSE          *\n*        IKJECT            MAP ECT                                    *\n*        IKJUPT            MAP UPT                                    *\n*        IKJDAP08          MAP DYNAMIC ALLOCATION CONTROL BLOCK (ALC) *\n*        IKJDAP18          MAY DYNAMIC ALLOCATION CONTROL BLOCK (FREE)*\n*                                                                     *\n*  TSO SERVICE ROUTINES USED                                          *\n*                                                                     *\n*        IKJPARS           INTERPRET COMMAND OPERANDS                 *\n*        PUTLINE           DISPLAY OUTPUT MESSAGES                    *\n*        IKJDAIR           DYNAMIC ALLOCATION                         *\n*                                                                     *\n*  REGISTER ASSIGNMENTS                                               *\n*                                                                     *\n*        R0  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R1  - LINKAGE REGISTER/TEMPORARY WORK REGISTER               *\n*        R2  - WORK REGISTER/OUTPUT AREA POINTER                      *\n*        R3  - WORK REGISTER/DSNAME PDL POINTER                       *\n*        R4  - WORK REGISTER                                          *\n*        R5  - WORK REGISTER                                          *\n*        R6  - WORK REGISTER                                          *\n*        R7  - WORK REGISTER                                          *\n*        R8  - WORK REGISTER                                          *\n*        R9  - BASE REGISTER FOR PCL AND PDL                          *\n*        R10 - BASE REGISTER FOR CPPL                                 *\n*        R11 - PROGRAM BASE REGISTER 1                                *\n*        R12 - PROGRAM BASE REGISTER 2                                *\n*        R13 - WORK AREA BASE REGISTER (SAVE AREA FIRST 18 WORDS)     *\n*        R14 - LINKAGE REGISTER                                       *\n*        R15 - LINKAGE REGISTER/RETURN CODE                           *\n*                                                                     *\n*  FOR FURTHER INFORMATION ON THE WORK REGISTERS, SEE INDIVDUAL       *\n*  ROUTINES.                                                          *\n*                                                                     *\n*  THIS VERSION OF DSAT WILL WORK ON MVT, SVS, OR MVS IF ASSEMBLED    *\n*  WITH THE PROPER SYSTEM NAME IN THE SETC STATEMENT AT THE           *\n*  BEGINNING OF THIS MODULE.                                          *\n*                                                                     *\n*  THE ORIGINAL MVS MODIFICATIONS WERE MADE BY DAVID JOHN FLYNN OF    *\n*  PRATT & WHITNEY AIRCRAFT.                                          *\n*                                                                     *\n*                                                GORDON P. WEST 09/76 *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n*  UPDATE LOG                                                         *\n*                                                                     *\n*  09/24/76  MVS EXPANSION MODIFIED TO REPLACE IKJEHCIR WITH          *\n*            DIRECT INVOCATION OF SVC 26 WITH A CTGPL.  PERFORMANCE   *\n*            ENHANCEMENT.                                             *\n*                                                                     *\n*            GENERIC OPERAND ADDED FOR MVS EXPANSION.  REPLACEMENT    *\n*            OF IKJEHCIR IS A PREREQUISITE FOR THIS MODIFICATION.     *\n*                                                                     *\n*  11/16/76  CCHHR OPTION ADDED.                                      *\n*                                                                     *\n*  01/14/77  SUPPORT FOR MVS WITH DATA MANAGMENT SU (8) ADDED.        *\n*            IKJEHCIR REMOVED FROM MVT AND SVS EXPANSION.             *\n*            DEVTYPE OPTION ADDED.                                    *\n*                                                                     *\n*  04/25/77  DSONLY OPTION ADDED.                                     *\n*                                                                     *\n*  05/13/77  ENTRY TYPE ADDED TO DSORG FOR VSAM CATALOG ENTRIES.      *\n*                                                                     *\n*  05/31/77  SUPPRESS DATA SET NOT FOUND MESSAGES FOR VOLUME(*).      *\n*                                                                     *\n*  07/25/77  ADD TEST FOR NOT READY TO UCB LOOKUP ROUTINES.           *\n*                                                                     *\n*  08/10/77  ADD PDS OPTION TO OBTAIN DIRECTORY INFORMATION.          *\n*            ADD DEVICE OPTION TO DISPLAY DEVICE NAME (3330, ETC.)    *\n*            OBTAIN DEVTYPE FROM UCB IF VOLUME SPECIFIED.             *\n*                                                                     *\n*  08/31/77  ADD PUNCH STATEMENT FOR ALIAS STATEMENT. (REMOVED -- ABL)*\n*            CHECK FOR ZERO OR NEGATIVE VOLUME COUNT.                 *\n*                                                                     *\n*  09/28/77  ADD MORE INFORMATION ON ERRORS ENCOUNTERED DURING        *\n*                 PDS PROCESSING.                                     *\n*                                                                     *\n*  03/10/78  ADD HARDCOPY OPTION.                                     *\n*            PROVIDE DEVTYPE FROM CATALOG FOR NON-DASD DEVICES.       *\n*            TEST FOR NO PREFIX, NO DSNAME, NO USERID                 *\n*                                                                     *\n*  03/20/78  LAST DATE REFERENCED ADDED - MVS SU 60 (OR EQUIVALENT    *\n*                 REQUIRED).                                          *\n*                                                                     *\n*  01/16/84  CHANGED SLIGHTLY TO ADD 3375 AND 3380 DISK DEVICES    ABL*\n*            ALSO, ADDED THE FPL MACROS INLINE                     ABL*\n*                                                                     *\n*  12/04/84  CHANGED TO AVOID S0C4 ABENDS BETWEEN DATA SET LIST    ABL*\n*            ITEMS (TABLE REALLOCATION DESTROYED REGISTER 3)       ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO USE UCB SCAN SERVICES FOR MVS 1.3 OR       ABL*\n*            LATER SYSTEMS (FOR EARLIER SYSTEMS, SEE &OPSYSTM)     ABL*\n*                                                                     *\n*  03/19/85  CHANGED TO ALLOW LOCATE RETRY TO WORK CORRECTLY       ABL*\n*            (THE FIRST USE OF LOCATE LEAVES A GARBAGE PARM LIST)  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ADD AN INTERNAL PDS INTERFACE FOR OUTPUT  ABL*\n*                                                                     *\n*  02/11/87  MODIFIED TO ALLOW USE OF AN EXISTING DATA SET FOR     ABL*\n*            THE HARDCOPY OUTPUT DCB.                              ABL*\n*                                                                     *\n*  10/22/87  MODIFIED CODE TO CORRECT USED BLOCKS              LMN-CBT*\n*                                                                     *\n*  11/02/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR DATASETS    LMN-CBT*\n*                                                                     *\n*  11/30/87  MODIFIED CODE TO SUPPORT 3380 K'S FOR PDS OPTION  LMN-CBT*\n*                                                                     *\n*  03/22/88  CHANGED TO BYPASS GDG IN ICF CATALOG                   SPG\n*                                                                     *\n*  06/27/88  CHANGED TO ALLOW RETRYLOC TO WORK IN ICF CATALOGS      ABL\n*                                                                     *\n*  01/08/89  CHANGED USED TRACKS TO FREE TRACKS IN OUTPUT DISPLAYS  ABL\n*            TO MAKE THIS PROGRAM MORE SIMILAR TO THE VTOC COMMAND. ABL\n*                                                                     *\n*  03/21/90  CHANGED SLIGHTLY TO ADD 3390 DISK DEVICES.            ABL*\n*                                                                     *\n*  11/25/90  CHANGED TO SUPPORT DATA SETS WITH MORE THAN 16        ABL*\n*            EXTENTS AND PDSE DATA SETS.  DSORG IS PE FOR A PDSE.  ABL*\n*                                                                     *\n*   8/03/94  CHANGED TO ADD \"FULL\" TO TURN ON MOST KEYWORDS.     ABL94*\n*                                                                ABL94*\n*            CHANGED TO SKIP \"VOLUME NOT MOUNTED\" FOR MIGRAT.    ABL94*\n*                                                                ABL94*\n*            CHANGED TO ADD \"EXTENTS\" SIMILAR TO LEONARD WOREN'S ABL94*\n*            VERSION OF DSAT AT USC.                             ABL94*\n*                                                                ABL94*\n*            TOTAL NUMBER OF ALLOCATED TRACKS WAS EXPANDED TO    ABL94*\n*            SUPPORT SEVEN DIGITS INSTEAD OF FIVE DIGITS.        ABL94*\n*                                                                ABL94*\n*            NOTE THAT THE NUMBER OF USED TRACKS IS STILL FIVE   ABL94*\n*            CHARACTERS; IT HAS TO LINE UP WITH THE DATA COLUMN. ABL94*\n*                                                                ABL94*\n*\n*  01/08/99  ADDED CODE TO MAKE YEAR 2000 COMPLIANT            HD JAN99\n*\n*  01/08/99  FIXED RETURN CODE - 0 - SUCCESSFUL COMPLETION     HD JAN99\n*                                8 - AT LEAST ONE D/S NOT FOUNDHD JAN99\n*                               16 - UNABLE TO INTERPRET CMD   HD JAN99\n*\n*  01/08/99  OS/390 SUPPORT  - USE UCBSCAN AND IOCINFO MACROS  HD JAN99\n*            REMOVE &OPSYSTM - ONLY WORKS ON MVS 4.3 AND ABOVE HD JAN99\n*            ADD Y2K COMPATIBILITY - FOUR DIGIT YEARS.         HD JAN99\n*            MAKE LIST, NOLIST ALIASES FOR PRINT,NOPRINT       HD JAN99\n*                                                                ABL99*\n*  01/15/99  ADDED ONE FLAG SETTING TO GET RC=8 FOR DATA SET NOT ABL99*\n*            FOUND CONDITIONS; ALSO, ADDED SUPPORT FOR ALIAS     ABL99*\n*            DATA SETS WHEN A SINGLE ALIAS DATA SET IS CHECKED.  ABL99*\n*\n*  11/15/05  ADDED SMS KEYWORD.                        SMS0001      JCG\n*            ADDED SIZE KEYWORD WITH DEFAULT OF 8192 TO SPECIFY A\n*            LARGER SVC26 WORKAREA SIZE.  LOGIC TO OBTAIN A LARGER\n*            WORKAREA IS NOT WORKING SO WE'LL PASS THE BUCK TO THE\n*            USER.  MAXIMUM VALUE IS 65535.\n*            UPDATED SECONDARY SPACE PROCESSING TO DISPLAY SECONDARY\n*            AMOUNTS OF BYTES, KBYTES, MBYTES, OR GBYTES.\n*            ADDED PDS/E DETECTION AND DISPLAY DSORG OF PE IF PDSE\n*            FLAG IS SET.\n*            REMOVED INTERNAL FORMAT-1 DSCB MACRO AND REPLACED WITH THE\n*            REAL DEAL.  A COUPLE OF LABELS HAD TO BE MODIFIED TO\n*            USE THE PROPER FIELD NAME (NOEPV).\n*  11/15/05  ADDED DATACLAS, MGMTCLAS, AND STORCLASS     SMS0002    JCG\n*            KEYWORDS TO DISPLAY SMS ATTRIBUTES FOR THE DATA SET.\n*            THESE KEYWORDS ARE VALID ONLY IF 'SMS' IS ALSO SPECIFIED\n*            OR DEFAULTED.                               PDS1122\n*  11/15/05  MODIFIED CODE BECAUSE WITH THE ADDITION     SMS0003    JCG\n*            OF SMS0001 AND SMS0002 WE BLEW A BASE REGISTER. THE CODE\n*            WAS CHANGED WITH BRUT FORCE BY ESTABLISHING A NEW BASE\n*            REGISTER AROUND THE LABELS THAT WERE NOT ADDRESSABLE.\n*            SEARCHES FOR BASE0? WILL GO TO THE LOCATIONS CHANGED.\n*  07/26/10  ADDED RECOGNITION OF HFS DATASETS                 @KLS0710\n*  07/29/10  MARK EXTENDED FORMAT VSAM DATASETS               DRK JUL10\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1247 WAVECREST LANE        *\n*     500 AIRPORT BLVD. 2ND FLOOR          BANDON, OREGON  97411      *\n*     BURLINGAME, CA  94010                                           *\n*     (650) 696-1800                       HOME (541) 347-9137        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n         #VTCFMT1\n         IECSDSL1 (1)                                           SMS0001\n         MEXIT                                                  SMS0001\n         MNOTE *,'       #VTCFMT1  VERSION 002 09/22/75  03/20/78  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT1                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 1 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 1 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT1                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT1DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT1                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE LOG                                                         *\n.*                                                                    *\n.*      DATE    VERSION     CHANGES                                   *\n.*    03/20/78    002       SU60 FIELDS ADDED                         *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 1 DSCB DESCRIPTION                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*  THIS CODE SEEMS NOT TO BE USED. ONLY ACTIVATE ON DOWN-LEVEL SYSTEMS.\n*    THE REAL CODE IS FROM MACRO IECSDSL1 (1) ABOVE.\nDS1DSNAM DS    CL44                     DSNAME\nDS1FMTID DS    X                        FORMAT 1 IDENTIFIER\nDS1DSSN  DS    CL6                      DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                      VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                      CREATION DATE\nDS1EXPDT DS    XL3                      EXPIRATION DATE\nDS1NOPEV DS    X                        NUMBER OF EXTENTS\nDS1NODBD DS    X                        NO OF BYTES USED IN LAST DIR BL\n         DS    X                        RESERVED\nDS1SYSCD DS    CL13                     SYSTEM CODE\nDS1REFD  DS    XL3                      LAST DATE REFERENCED - SU 60\nDS1SMSFG DS    XL1                      SMSFLAGS              ABL NOV92\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - BELOW\nDS1SMSDS EQU   X'80'  1... ....    SYSTEM MANAGED DATA SET\nDS1SMSUC EQU   X'40'  .1.. ....    NO BCS ENTRY EXISTS FOR DATA SET\nDS1REBLK EQU   X'20'  ..1. ....    SDB AND D.S. MAY BE REBLOCKED\nDS1CRSDB EQU   X'10'  ...1 ....    DADSM CREATE ORIGINATED BLKSIZE\nDS1PDSE  EQU   X'08'  .... 1...    PDSE DATA SET\nDS1STRP  EQU   X'04'  .... .1..    EXTENDED FORMAT DATA SET\nDS1PDSEX EQU   X'02'  .... ..1.    HFS DATA SET\nDS1DSAE  EQU   X'01'  ........1    EXTENDED ATTRIBUTES EXIST\n*   --   FLAG SETTINGS COPIED IN - SBG - 07/28/2010 - - - - ABOVE\n         DS    XL3                      RESERVED              ABL NOV92\nDS1DSORG DS    XL2                      DATA SET ORGANIZATION\nDS1RECFM DS    X                        RECORD FORMAT\nDS1OPTCD DS    X                        OPTION CODE\nDS1BLKL  DS    XL2                      BLOCKSIZE\nDS1LRECL DS    XL2                      RECORD LENGTH\nDS1KEYL  DS    X                        KEY LENGTH\nDS1RKP   DS    XL2                      RELATIVE KEY POSITION\nDS1DSIND DS    X                        DATA SET INDICATORS\n*              X'80'                      LAST VOLUME FOR DATA SET\n*              X'40'                      RACF DEFINED\n*              X'20'                      BLOCK LEN MULT OF 8\n*              X'10'                      READ/WRITE PASSWORD\n*              X'08'                      RESERVED\n*              X'04'                      MORE PASSWORD INDICATORS\n*              X'02'                      UPDATED - SU 60\n*              X'01'                      RESERVED\nDS1SCALO DS    XL4                      ALLOCATION PARAMETERS\nDS1LSTAR DS    XL3                      LAST BLOCK POINTER\nDS1TRBAL DS    XL2                      LL PORTION OF DS1LSTAR\n         DS    XL2                      RESERVED\nDS1EXT1  DS    XL10                     FIRST EXTENT DESCRIPTION\nDS1EXT2  DS    XL10                     SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                     THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                      CCHHTTR OF FORMAT 2 OR 3 DSCB\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT3\n         MNOTE *,'       #VTCFMT3  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT3                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 3 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 3 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 3 DSCB DESCRIBES DATA SET EXTENTS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT3                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT3DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT3                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 3 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        DESCRIPTION OF FOURTH THROUGH SIXTEENTH EXTENTS OF A         *\n*        DATA SET                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS3KEY   DS    XL4                      KEY - 03030303\nDS3EXT01 DS    XL10                     EXTENT  4 DESCRIPTION\nDS3EXT02 DS    XL10                             5\nDS3EXT03 DS    XL10                             6\nDS3EXT04 DS    XL10                             7\nDS3FMTID DS    X                        DSCB FORMAT 3 IDENTIFIER, X'F3'\nDS3EXT05 DS    XL10                     EXTENT  8 DESCRIPTION\nDS3EXT06 DS    XL10                             9\nDS3EXT07 DS    XL10                            10\nDS3EXT08 DS    XL10                            11\nDS3EXT09 DS    XL10                            12\nDS3EXT10 DS    XL10                            13\nDS3EXT11 DS    XL10                            14\nDS3EXT12 DS    XL10                            15\nDS3EXT13 DS    XL10                            16\nDS3PTRDS DS    XL5                      POINTER TO FMT3 DSCB  ABL NOV92\n         MEND\n         SPACE 3\n         MACRO\n         #CTGPL\n         MNOTE *,'       #CTGPL    VERSION 001 09/24/76  09/24/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #CTGPL                                                             *\n.*                                                                    *\n.* FUNCTION         MAP A CATALOG PARAMETER LIST.                     *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO FIELDS IN THE CTGPL.     *\n.*                  NAMES CORRESPOND TO NAMES IN OS/VS2 CATALOG       *\n.*                  MANAGMENT LOGIC - SY26-3826-1                     *\n.*                                                                    *\n.*                  THE CTGPL IS BUILT BEFORE AN OS/VS COMPONENT      *\n.*                  ISSUES THE CATLG MACRO INSTRUCTION (SVC 26)       *\n.*                  TO PROCESS AN OS/VS2 MASTER OR USER CATALOG       *\n.*                  RECORD.  THE CTGPL DEFINES THE CATALOG MANAGEMENT *\n.*                  REQUEST AND ITS OPTIONS, THE CATALOG RECORD TO    *\n.*                  BE PROCESSED, AND THE OS/VS2 CATALOG WHICH        *\n.*                  CONTAINS THE RECORD.  THE CTGPL IS POINTED TO     *\n.*                  BY REGISTER 1.                                    *\n.*                                                                    *\n.* SYNTAX                    #CTGPL                                   *\n.*                                                                    *\n.* ERRORS           NO ERROR MESSAGES ARE PRODUCED.                   *\n.*                                                                    *\n.* EXAMPLE                   DS    0F          ALIGNMENT              *\n.*                           #CTGPL                                   *\n.*                                                                    *\n.* GLOBAL SYMBOLS   NONE                                              *\n.*                                                                    *\n.* MACROS CALLED    NONE                                              *\n.*                                                                    *\n.**********************************************************************\nCTGPL    DS    0D\n*\nCTGOPTN1 DS    X              FIRST OPTION BYTE:\nCTGBYPSS EQU   X'80' 1... ....  BYPASS CATALOG MANAGMENT SECURITY\nCTGMAST  EQU   X'40' .1.. ....  CHECK THE MASTER PASSWORD\nCTGCI    EQU   X'20' ..1. ....  CHECK CONTROL INTERVAL PASSWORD\nCTGUPD   EQU   X'10' ...1 ....  CHECK UPDATE PASSWORD\nCTGREAD  EQU   X'08' .... 1...  CHECK READ PASSWORD\nCTGNAME  EQU   X'04' .... .1..  CTGENT CONTAINS DSNAME OR SERIAL ADDR\n*                    .... .0..  CTGENT CONTAINS CONTROL INTERVAL NUMBER\nCTGCNAME EQU   X'02' .... ..1.  CTGCAT CONTAINS CATALOG DSNAME ADDRESS\n*                    .... ..0.  CTGCAT CONTAINS CATALOG ACB ADDRESS\nCTGGENLD EQU   X'01' .... ...1  GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    X              SECOND OPTION BYTE:\nCTGEXT   EQU   X'80' 1... ....  EXTEND OPTION (WITH UPDATE)\nCTGNSVS  EQU   X'80'            NO SCRATCH VSAM SPACE (WITH DELETE)\nCTGERASE EQU   X'40' .1.. ....  ERASE OPTION (WITH DELETE)\nCTGSMF   EQU   X'40'            WRITE SMF RECORD OPTION (WITH LSPACE)\nCTGGALL  EQU   X'40'            SEARCH ALL CATALOGS (WITH LISTCAT)\nCTGPURG  EQU   X'20' ..1. ....  PURGE OPTION (WITH DELETE)\nCTGVMNT  EQU   X'20'            CALLER IS VSAM OPEN/CLOSE/EOV\nCTGRCATN EQU   X'20'            RETURN CATALOG NAME (WITH LISTCAT)\nCTGGTNXT EQU   X'10' ...1 ....  GET-NEXT OPTION (WITH LISTCAT)\nCTGDISC  EQU   X'08' .... 1...  DISCONNECT OPTION (WITH EXPORT)\nCTGOVRID EQU   X'04' .... .1..  ERASE OVERRIDE OPTION (WITH DELETE)\nCTGSCR   EQU   X'02' .... ..1.  SCRATCH SPACE (WITH DELETE NON-VSAM)\n*                    .... ...X  RESERVED\n*\nCTGOPTN3 DS    0X             THIRD OPTION BYTE\nCTGFUNC  DS    X     XXX. ....  SPECIFIES THE CALLER-REQUESTED FUNCTION\nCTGLOC   EQU   X'20' 001. ....    LOCATE\nCTGLSP   EQU   X'40' 010. ....    LSPACE\nCTGUPDAT EQU   X'60' 011. ....    UPDATE\nCTGCMS   EQU   X'80' 100. ....    CATALOG MGMT SERV. FUNCT. SEE CTGOPNS\nCTGSUPLT EQU   X'10' ...1 ....  SUPERLOCATE FUNCTION\nCTGGDGL  EQU   X'08' .... 1...  GDG LOCATE - CALLER SUPPLIED BASE LEVEL\nCTGSRH   EQU   X'04' .... .1..  SEARCH MASTER CATALOG ONLY\n*                    .... .0..  SEARCH USER CATALOGS FIRST\n*                    .... ..X.  RESERVED\nCTGAM0   EQU   X'01' .... ...1  OS/VS2 CATALOG MANAGMENT REQUEST\n*                    .... ...0  OS CATALOG REQUEST USER SUPPLIED CAMLST\n*\nCTGOPTN4 DS    X              FOURTH OPTION BYTE\nCTGLBASE EQU   X'80' 1... ....  LOCATE BASE LEVEL (SUPERLOCATE GDG)\nCTGDOCAT EQU   X'40' .0.. ....  DYNAMICALLY LOCATE AND OPEN CAT IF REQ.\n*                    .1.. ....  DO NOT DYNAMICALLY OPEN NEEDED CATALOG\n*                    ..XX XXXX  RESERVED\n*\nCTGENT   DS    0A             ADDRESS OF CATALOG RECORD IDENTIFIER\nCTGFVT   DS    A              ADDRESS OF CALLER'S CTGFV\n*\nCTGCAT   DS    0A             ADDRESS OF CATALOG DSNAME OR ACB\nCTGCVOL  DS    A              ADDRESS OF OS SYSCTLG DSNAME\n*\nCTGWKA   DS    A              ADDRESS OF CALLER'S WORK AREA\n*\nCTGDSORG DS    XL2            DATA SET ORGANIZATION IF SUPERLOCATE\n*\nCTGOPTNS DS    X              CATALOG MANAGMENT SERVICES REQUEST OPTION\nCTGDEFIN EQU   X'08' 0000 1...  DEFINE\nCTGALTER EQU   X'10' 0001 0...  ALTER\nCTGDELET EQU   X'18' 0001 1...  DELETE\nCTGLTCAT EQU   X'20' 0010 0...  LISTCAT\n*                    .... .XXX    RESERVED\n*\n         DS    X              RESERVED\n*\nCTGTYPE  DS    X              TYPE OF CATALOG RECORD\nCTGTALIN EQU   C'A'             NON-VSAM DATA SET\nCTGTGBS  EQU   C'B'             GDG BASE RECORD\nCTGTCL   EQU   C'C'             CLUSTER\nCTGTDATA EQU   C'D'             DATA SET\nCTGTINDX EQU   C'I'             INDEX\nCTGTMCAT EQU   C'M'             MASTER CATALOG\nCTGTPGS  EQU   C'P'             PAGE DATA SET\nCTGTUCAT EQU   C'U'             USER CATALOG\nCTGTVOL  EQU   C'V'             VOLUME\nCTGTANM  EQU   C'X'             ALIAS NAME\n*\nCTGNOFLD DS    X              NUMBER OF ENTRIES IN CTGFIELD\n*\nCTGDDNM  DS    0A             ADDRESS OF DD STATEMENT (OPTIONAL)\nCTGNEWNM DS    0A             ADDRESS OF NEW DSNAME (ALTER)\nCTGFDBK  DS    XL2            FEEDBACK AREA (SUPERLOCATE)\nCTGFBFLG DS    X              FLAGS (SUPERLOCATE)\nCTGPAR   EQU   X'80' 1... ....  PARALLEL MOUNT\nCTGKEEP  EQU   X'40' .1.. ....  FORCED KEEP\nCTGGDGB  EQU   X'20' ..1. ....  GDG BASE LOCATED\nCTGNGDSN EQU   X'10' ...1 ....  GDG DSNAME GENERATED (DSNAME.GXXXXVYY)\n*                    .... XXXX  RESERVED\n         DS    X              RESERVED\n*\nCTGJSCB  DS    0A             ADDRESS OF JSCB\nCTGPSWD  DS    A              ADDRESS OF CALLER-SUPPLIED PASSWORD\n*\nCTGFIELD EQU   *              VARIABLE LENGTH FIELD\n*                               4 BYTE ADDRESS OF EACH CTGFL TO SPECIFY\n*                               EACH CATALOG FIELD TO BE PROCESSED.\n*                               LENGTH OF CTGFIELD IS CTGNOFLD VALUE\n*                               TIMES 4.\n*\nCTGPLLEN EQU   *-CTGPL                 LENGTH OF CTGPL\n         MEND\n         LCLC  &MAXSIZE                MAXIMUM GETMAIN FOR CATALOG  ABL\n         LCLC  &MINSIZE                MINIMUM GETMAIN FOR CATALOG  ABL\n&MAXSIZE SETC  '3145728'                                    #6735B3 BDF\n**&MAXSIZE SETC  '1048576'               1MEG AS A DEFAULT   HD JAN99\n* EACH DATA SET REQUIRES 45 BYTES; 1MEG IS GOOD FOR 23301 DATA SETS  HD\n&MINSIZE SETC  '65536'                 64K AS A DEFAULT             ABL\n* EACH DATA SET REQUIRES 45 BYTES; 64K IS GOOD FOR 1456 DATA SETS   ABL\n         TITLE 'ENTRY CODING'\nDSAT     $ENTER BASE=(R11,R12),                                        +\n               RENT=DSECTLEN,                                          +\n               SAVE=DSATSAVE\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT TSO CONTROL BLOCKS                                 *\n*                                                                     *\n***********************************************************************\n         #TSOBLKS DSECT,ECB=DSATECB,                                   +\n               CPPL=(R10,R1),                                          +\n               PPL=(R9,DSATPPL,DSATPCL,DSATANS),                       +\n               IOPL=(R8,DSATIOPL,DSATPTPB),                            +\n               DAPL=(R7,DSATDAPL)\n         DROP  R7\n         MVC   DSATPTPB(ENDPTPB-MODLPTPB),MODLPTPB  INITIALIZE PTPB\n         USING DSAT+4096+4096,R7                                SMS0003\n         ST    R7,SAVER7                                        SMS0003\n         LA    R7,4095(R12)                                     SMS0003\n         LA    R7,1(R7)                                         SMS0003\n         ST    R7,BASER3                   SAVE FOR FUTURE      SMS0003\n         LA    R1,4095(R7)                                      SMS0003\n         LA    R1,1(R1)                                         SMS0003\n         ST    R1,BASER4                   SAVE FOR FUTURE      SMS0003\n         MVC   DSATHEDR(4),MODLINE\n         DROP  R7                                               SMS0003\n         L     R7,SAVER7                                        SMS0003\n         MVI   FLAGS,X'00'             CLEAR FLAGS\n         MVI   FLAGS2,X'00'\n         MVI   BLANKS,C' '             BLANK LINE               SMS0002\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS                      SMS0002\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         DROP  R8                      DROP IOPL BASE REGISTER\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*                  PARSE THE COMMAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PARSE PARAMETER LIST ADDR\n         CALLTSSR EP=IKJPARS            LINK TO PARSE ROUTINE  HD JAN99\n         B     AROUNDID                 BRANCH AROUND THE ID    SMS0003\n         DC    AL1(L'CSECTID)           LENGTH OF CSECT ID      SMS0003\nCSECTID  DC    C'&PGM &VER'                                     SMS0003\nAROUNDID DS    0H                                               SMS0003\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DSATANS               LOAD ANSWER AREA ADDRESS\n         USING DSATPDL,R9               DEFINE PDE BASE REGISTER\n*--------GET CATALOG WORKAREA\n*SMS0001 L     R2,=A(&MINSIZE)         LOAD LENGTH OF WORK AREA     ABL\n         L     R2,WORKSIZE             GET PTR TO SIZE          SMS0001\n         L     R2,0(,R2)               GET WORKSIZE             SMS0001\n         C     R2,=F'65535'            Q:IS VALUE VALID?        SMS0001\n         BNH   *+8                     Y-USE IT                 SMS0001\n         L     R2,=F'65535'            N-USE MAX VALUE          SMS0001\n         GETMAIN R,LV=(R2),SP=1        OBTAIN WORK AREA\n         ST    R1,WORKAREA             SAVE ADDRESS OF WORK AREA\n         ST    R2,WORKLEN              SAVE LENGTH OF WORK AREA\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   PRINT+1,0             ANY KEYWORD SPECIFIED?\n         BNE   *+8                   YES, BRANCH\n         MVI   PRINT+1,2             NO, USE NOPRINT AS A DEFAULT\nNOPDSCAL EQU   *\n         TITLE 'INVOKE IOCINFO TO LOCK CONFIGURATION'\n***********************************************************************\n**  INVOKE IOCINFO TO GET THE CONFIGURATION TOKEN JUST                *\n**  IN CASE SOMETHING MOVES!                                          *\n***********************************************************************\n         SPACE 1\nIOCDATA  IOCINFO IOCTOKEN=TOKEN,                               HD JAN99+\n               RETCODE=ICRETN,                                 HD JAN99+\n               RSNCODE=ICRSN,                                  HD JAN99+\n               MF=(E,IOCLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',ICRETN        RETURN CODE ZERO?           HD JAN99\n         BE    SEARS               YES, CONTINUE               HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),ICRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR8     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),ICRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         TITLE 'SET UP CAMLST CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        SET UP CATALOG AND VTOC SEARCH CONTROL BLOCKS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------SET UP CAMLIST'S\nSEARS    DS    0H                                              HD JAN99\n         LM    R1,R4,SEARCH            OBTAIN, SEARCH\n         LA    R2,DSNAME\n         LA    R3,DSATSER\n         LA    R4,DSATFMT1\n         STM   R1,R4,DSATDCB1\n         LM    R1,R4,SEEK              OBTAIN, SEEK\n         LA    R2,DS1PTRDS\n         LA    R3,DSATSER\n         LA    R4,DSATFMT3\n         STM   R1,R4,DSATDCB3\n         LM    R1,R4,NAME              LOCATE, NAME\n         LA    R2,DSNAME\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST\n         LM    R1,R4,NAMECVOL          LOCATE, NAME AND CVOL\n         LA    R2,DSNAME\n         LA    R3,CVOL\n         LA    R4,CATBLOCK\n         STM   R1,R4,LOCLIST2\n         LM    R1,R4,TTRLOC            LOCATE, TTR\n         LA    R2,TTR\n         LA    R3,CVOL\n         STM   R1,R4,LOCBYTTR\n         XC    CTGPL(CTGPLLEN),CTGPL   ZERO OUT CTGPL\n         OI    CTGOPTN1,CTGNAME+CTGCNAME\n         OI    CTGOPTN3,CTGSUPLT+CTGAM0\n         LA    R1,INDEX-1              SET UP SEARCH KEY ADDRESS\n         ST    R1,CTGENT\n         L     R1,WORKAREA             SET UP WORK AREA ADDRESS\n         ST    R1,CTGWKA\n         NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   ZEROTOT\n         OI    CTGOPTN1,CTGGENLD       SET GENERIC LOCATE\nZEROTOT  XC    TOTLS(20),TOTLS         ZERO TOTAL FIELDS\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    SETUPHDR\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         CLI   PRINT+1,0               ANY KEYWORD SPECIFIED?\n         BNE   *+8                     YES, BRANCH\n         MVI   PRINT+1,2               NO, USE NOPRINT AS A DEFAULT\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    SETUPHDR\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(48),DSATERR6    MOVE IN ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY INDICATOR\n         TITLE 'SET UP HEADER LINE'\n***********************************************************************\n*                                                                     *\n*        SET UP HEADER LINE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETUPHDR LA    R2,OUTLINE              LOAD OUTPUT AREA ADDRESS\n         MVC   OUTLINE,BLANKS          BLANK THE LINE\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TRYDEV\n         ST    R2,SERFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'SERIAL'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TRYDEV\n         MVC   0(4,R2),=C' SEQ'        SET UP HEADER\n         LA    R2,5(R2)                INCREMENT POINTER\nTRYDEV   CLC   DEVTYPE,=H'2'           TEST FOR NODEVTYPE\n         BE    TRYDEVIC\n         ST    R2,DEVFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C' DEVTYPE'    MOVE IN HEADER\n         LA    R2,9(R2)                INCREMENT POINTER\nTRYDEVIC CLC   DEVICE,=H'2'            TEST FOR NODEVICE\n         BE    TRYALLOC\n         ST    R2,DEVFIELD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(6,R2),=C'DEVICE'      MOVE IN HEADER\n         LA    R2,7(R2)                INCREMENT POINTER\nTRYALLOC ST    R2,ERRFLD               STORE ERROR FIELD ADDRESS\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    TRYDSORG\n         ST    R2,ALLOCFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(14,R2),=C'ALLOC  FREE EX'  SET UP HEADER\n         LA    R2,15(R2)               INCREMENT POINTER\n         CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    TRYDSORG\n         MVC   0(10,R2),=C' SEC UNITS'      SET UP HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nTRYDSORG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    TRYPDS\n         ST    R2,DSORGFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(5,R2),=C'DSORG'       MOVE IN HEADER\n         LA    R2,6(R2)                INCREMENT POINTER\nTRYPDS   CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    TRYDCB\n         ST    R2,PDSFLD               SAVE OUTPUT FIELD ADDRESS\n*        MVC   0(19,R2),=C'DIRA DIRU ENTR  AL '\n         MVC   0(25,R2),=C'DIRA    DIRU    ENTR  AL ' EXPANDED LMN-CBT\n*        LA    R2,20(R2)               INCREMENT POINTER\n         LA    R2,26(R2)   INCREMENT POINTER-EXPANDED        LMN-CBT\nTRYDCB   CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    TRYCRDAT\n         ST    R2,DCBFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(16,R2),=C'-DCB ATTRIBUTES-'  MOVE IN HEADER\n         LA    R2,17(R2)               INCREMENT POINTER\nTRYCRDAT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    TRYEXDAT\n         ST    R2,CRDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'CR. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYEXDAT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    TRYLREFD\n         ST    R2,EXDATFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'EX. DATE  ' MOVE IN HEADER          HD JAN99\n         LA    R2,11(R2)               INCREMENT POINTER       HD JAN99\nTRYLREFD CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   TRYCCHHR\n         BNE   TRYSMS                                           SMS0001\n         ST    R2,LREFFLD              SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C'LAST REF  ' MOVE IN HEADER          HD JAN99\n         LA    R2,12(R2)               INCREMENT POINTER       HD JAN99\n         SPACE\nTRYSMS   CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   TRYCCHHR                                         SMS0001\n         ST    R2,SMSFLD               SAVE OUTPUT FIELD ADDR   SMS0001\n         MVC   0(4,R2),=C'SMS '        MOVE IN HEADER           SMS0001\n         LA    R2,4(,R2)               INCREMENT POINTER        SMS0001\n         SPACE\n****************************************************************SMS0002\n*        SMS KEYWORD MUST ALSO BE SPECIFIED OR DEFAULTED TO GET THE   *\n*        DATACLAS, MGMTCLAS, AND STORCLAS VALUES.                     *\n****************************************************************SMS0002\n         SPACE\n         XR    R15,R15                 FLAG = 0                 SMS0002\nTRYDATAC CLI   DATACLAS+1,1            TEST FOR DATACLAS        SMS0002\n         BNE   TRYMGMTC                                         SMS0002\n         ST    R2,DATACFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'DATACLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYMGMTC CLI   MGMTCLAS+1,1            TEST FOR MGMTCLAS        SMS0002\n         BNE   TRYSTORC                                         SMS0002\n         ST    R2,MGMTCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'MGMTCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTRYSTORC CLI   STORCLAS+1,1            TEST FOR STORCLAS        SMS0002\n         BNE   TESTLOAD                                         SMS0002\n         ST    R2,STORCFLD             SAVE OUTPUT FIELD ADDR   SMS0002\n         MVC   0(9,R2),=C'STORCLAS '   MOVE IN HEADER           SMS0002\n         LA    R2,9(,R2)               INCREMENT POINTER        SMS0002\n         LA    R15,1                   REMEMBER WE NEED IT      SMS0002\n         SPACE\nTESTLOAD EQU   *                       SEE IF SMS KEYWORD       SMS0002\n         XC    IGWASMSV,IGWASMSV       CLEAR MODULE ADDRESS     SMS0002\n         LTR   R15,R15                 Q:KEYWORD SPECIFIED?     SMS0002\n         BZ    TRYCCHHR                N-DON'T NEED THIS JUNK   SMS0002\n         SPACE ,                                                SMS0002\n         LA    R15,SMS_A               TO TRICK CALL            SMS0002\n         CALL  (15),(IGWRC,IGWREAS,IGWPROB,IGWLEN,DSNAME,IGWSMS,       +\n               IGWTYPE),                                        SMS0002+\n               MF=(E,CALL_L)                                    SMS0002\n         SPACE\nSMS_A    EQU   *\n         MVI   IGWLEN+3,44             HARD LENGTH OF DSNAME    SMS0002\n         LOAD  EPLOC=IGWASMSC          SMS ATTR ROUTINE         SMS0002\n         ST    R0,IGWASMSV             SAVE ADDRESS             SMS0002\n         SPACE\nTRYCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    DODSNAME\n         ST    R2,CCHHRFLD             SAVE OUTPUT FIELD ADDRESS\n         MVC   0(10,R2),=C' C C H H R' MOVE IN HEADER\n         LA    R2,11(R2)               INCREMENT POINTER\nDODSNAME L     R1,ERRFLD               LOAD ADDRESS OF ERROR FIELD\n         LA    R1,33(R1)               ALLOW ROOM FOR 32 BYTE MESSAGE\n         CR    R2,R1                   COMPARE TO POINTER\n         BH    DSNFLDOK\n         LR    R2,R1                   SET POINTER TO MIN FIELD ADDR\n*SMS0002 LA    R1,OUTLINE+120-44       LOAD LAST POSSIBLE ADDR FOR DSN\nDSNFLDOK LA    R1,OUTLINE+L'OUTLINE-44 LOAD LAST POSSIBLE ADDR FOR DSN\n         CR    R2,R1                   SEE IF WE'RE PAST IT\n*        BH    TOOLONG                 WHAT NONSENSE\n         ST    R2,DSNFLD               SAVE OUTPUT FIELD ADDRESS\n         MVC   0(8,R2),=C'-DSNAME-'    MOVE IN HEADER\n         CLC   HEADER,=H'2'            TEST FOR HEADER\n         BE    BUILDDSN\n         BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'CONSTRUCT DSNAME'\n***********************************************************************\n*                                                                     *\n*        CONSTRUCT DSNAME                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBUILDDSN LA    R3,DSN                  LOAD DSN PDL ADDRESS\nSETUPNXT MVC   DSNAME,BLANKS           CLEAR DSNAME FIELD\n         MVC   OUTLINE,BLANKS\n         NI    FLAGS2,X'FF'-$FOUND     RESET DATA SET FOUND FLAG\n         LA    R2,DSNAME               SET POINTER TO DSNAME\n*--------SEE IF NAME ENCLOSED IN QUOTES\n         TM    6(R3),X'40'\n         BNZ   MOVEREST\n*--------APEND PREFIX TO NAME\n         L     R1,CPPLUPT              LOAD UPT ADDRESS\n         USING UPT,R1                  DEFINE UPT ADDRESSABILITY\n         LA    R4,UPTPREFX             LOAD ADDRESS OF PREFIX ENTRY\n         CLI   UPTPREFL,0              TEST FOR NOPREFIX\n         BNE   GETLEN\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BNZ   MOVEREST\n         DROP  R1\n         L     R4,CPPLPSCB             LOAD USERID ADDRESS\n         CLI   7(R4),0                 SEE IF NO USERID (BATCH)\n         BE    NOID\nGETLEN   SR    R1,R1                   CLEAR REGISTER 1\n         IC    R1,7(R4)                LOAD PREFIX LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY PREFIX TO DSNAME FIELD\n         LA    R2,1(R1,R2)             INCREMENT PAST USERID\n         NC    4(2,R3),4(R3)           SEE IF DSNAME ENTERED\n         BZ    LOCATE\n         MVI   0(R2),C'.'              ADD .\n         LA    R2,1(R2)                INCREMENT PAST .\n*--------FULLY QUALIFIED NAME SPECIFIED\nMOVEREST L     R4,0(R3)                LOAD ADDRESS OF INPUT\n         LH    R1,4(R3)                LOAD LENGTH\n         BCTR  R1,R0                   REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             COPY NAME\n         TITLE 'SEARCH CATALOG FOR DSNAME'\n***********************************************************************\n*                                                                     *\n*        LOCATE CATALOG BLOCK                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLOCATE   MVC   INDEX,DSNAME            COPY TO INDEX NAME ALSO\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         MVI   CATBLOCK+2,X'FF'        GARBAGE INTO CATALOG BLOCK AREA\n         TM    VOLSER+6,X'80'          SEE IF VOLUME SERIAL IS PRESENT\n         BNZ   COPYSER\n         NC    GENERIC,GENERIC         TEST FOR GENERIC OPTION\n         BNZ   PROCGRP\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   CHECK8\n         CLC   DSNAME,INDEX            SEE IF ALIAS NAME RETURNED\n         BE    OBTAIN1\n         CLC   DSNAME(8),=C'SYSCTLG.'  SEE IF CVOL NAME RETURNED\n         BNE   PROCGRP\n         MVC   CVOL,CATBLOCK+6         COPY CVOL SERIAL\n         MVC   DSNAME,INDEX            RESET DATA SET/INDEX NAME\n         LOCATE LOCLIST2               LOCATE BY NAME AND CVOL\n         CH    R15,=H'12'              RC = 12 - PROCESS BY TTR\n         BE    PROCTTR\n         LTR   R15,R15                 IF CVOL NAME RETURNED AGAIN,\n         BE    PROCGRP                    SU 8 NOT INSTALLED\n         B     LOCERROR\nCHECK8   CH    R15,=H'8'               SEE IF EMPTY INDEX STRUCTURE\n         BNE   CHECK12\n         CLC   CATBLOCK+2(8),=X'0000000000000001'  TEST FOR ICE\n         BNE   PROCGRP\n         CLC   CATBLOCK+20(8),=X'FFFFFFFFFFFFFFFF' TEST FOR ILE\n         BNE   PROCGRP\n*--------EMPTY INDEX STRUCTURE\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),EMPTYNDX       COPY ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),INDEX          COPY INDEX NAME\n         BAL   R2,PUTL                 DISPLAY LINE\n         B     ENDGRP\n         SPACE 2\n.TESTNDX ANOP\n*--------TEST FOR INDEX (MVT, SVS, OR MVS WITH SU 8)\nCHECK12  CH    R15,=H'12'              TEST FOR INDEX NAME\n         BNE   LOCERROR\n         TITLE 'DATA SET GROUP PROCESSING - VIA TTR'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA TTR                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCTTR  NC    DSONLY,DSONLY           SEE IF DSONLY SPECIFIED\n         BNZ   LOCERROR\n         OI    FLAGS,DSATGRP           SET DSGROUP FLAG\n         MVC   CVOL,CATBLOCK+259       SAVE CVOL SERIAL\n         L     R1,WORKAREA             LOAD FIRST BLOCK ADDRESS\n         ST    R1,FIRSTBLK             SAVE FIRST BLOCK ADDRESS\n         ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,10(R1)               LOAD ADDRESS OF FIRST DATA ENTRY\n         ST    R2,0(R1)                SAVE CURRENT ENTRY ADDRESS\n         MVC   0(254,R2),CATBLOCK+2    COPY CATALOG BLOCK\n         LA    R4,INDEX                LOAD INDEX NAME\nFINDEND1 LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND1\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\n         B     PROCNTRY                LOAD INDEX NAME\nFINDEND  LA    R4,1(R4)                POINT TO NEXT CHARACTER\n         CLI   0(R4),C' '              TEST FOR BLANK\n         BNE   FINDEND\n         ST    R4,ENDNAME              SAVE END OF NAME ADDRESS\nREADCTLG ST    R1,CURRBLK              SAVE CURRENT BLOCK ADDRESS\n         LA    R2,8(R1)                LOAD WORK AREA ADDRESS\n         ST    R2,LOCBYTTR+12          SAVE IN PARM LIST\n         LA    R2,2(R2)                FIRST 2 BYTES WILL BE LENGTH\n         ST    R2,0(R1)                INITIALIZE POINTER\n         LOCATE LOCBYTTR               LOCATE BY TTR\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   LOCERROR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\nPROCNTRY CLC   0(8,R2),=X'FFFFFFFFFFFFFFFF'  TEST FOR LINK ENTRY\n         BE    LNKENTRY\n         CLC   0(8,R2),=X'0000000000000001'  TEST FOR INDEX CONTROL\n         BE    DSATNEXT\n         CLI   11(R2),X'01'            DATA SET WITH OVER 5 VOLUMES\n         BE    DSNOVER5\n         CLI   11(R2),X'00'            TEST FOR INDEX ENTRY\n         BE    NDXENTRY\n         CLI   11(R2),X'02'            TEST FOR GDG ENTRY\n         BNE   DSNENTRY\n*--------GENERATION INDEX\n         OI    FLAGS,GDG               INDICATE GDG\n         CLC   GDGDATA,=H'2'           SEE IF GDG DATA REQUESTED\n         BE    NDXENTRY\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(L'GDGMSG),GDGMSG     COPY MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R15,ENDNAME             LOAD END OF INDEX NAME\n         MVI   0(R15),C'.'             ADD .\n         MVC   1(8,R15),0(R2)          ADD INDEX QUALIFIER\n         L     R15,DSNFLD              LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R15),INDEX         COPY INDEX TO MESSAGE\n         SR    R15,R15                 LOAD MAXIMUM ENTRIES\n         IC    R15,13(R2)\n         CVD   R15,DSATPDEC            CONVERT MAX\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+36(3),DSATDEC+5 COPY TO MESSAGE\n         LH    R15,14(R2)              LOAD CURRENT\n         CVD   R15,DSATPDEC            CONVERT TO DECIMAL\n         OI    DSATPDEC+7,X'0F'        SET SIGN CODE\n         UNPK  DSATDEC,DSATPDEC+4(4)   UNPACK\n         MVC   OUTLINE+28(3),DSATDEC+5 COPY TO MESSAGE\n         TM    12(R2),X'03'            TEST FLAG BYTE\n         BZ    PUTGDG\n         BM    GDGEORD\n         MVC   OUTLINE+15(4),=C'E,D '  INDICATE EMPTY, DELETE\n         B     PUTGDG\nGDGEORD  MVC   OUTLINE+15(4),=C'E   '\n         TM    12(R2),X'01'\n         BNZ   PUTGDG\n         MVI   OUTLINE+15,C'D'\nPUTGDG   LR    R4,R2                   SAVE R2\n         BAL   R2,PUTL                 DISPLAY LINE\n         LR    R2,R4                   RESTORE R2\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA\n*--------INDEX ENTRY - ADD NAME TO INDEX AND GET NEXT BLOCK\nNDXENTRY L     R4,ENDNAME              LOAD END OF NAME ADDRESS\n         MVI   0(R4),C'.'\n         MVC   1(8,R4),0(R2)           ADD INDEX NAME\n         NI    FLAGS,X'FF'-NOTEMPTY    CLEAR EMPTY INDICATOR\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         LA    R1,264(R1)              INCREMENT TO NEXT BLOCK\n         B     FINDEND\n*--------INDEX LINK ENTRY\nLNKENTRY NC    8(3,R2),8(R2)           TEST FOR ZERO TTR\n         BZ    ENDLEVEL\n         MVC   TTR,8(R2)               COPY TTR\n         L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         B     READCTLG\n*--------END OF INDEX LEVEL\nENDLEVEL TM    FLAGS,NOTEMPTY          TEST FOR EMPTY INDEX\n         BNZ   TESTDONE\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         TM    FLAGS,GDG               TEST FOR GDG\n         BNZ   MTGDG\n         MVC   OUTLINE(32),EMPTYNDX    MOVE MESSAGE INTO LINE\n         B     PUTEMPTY\nMTGDG    MVC   OUTLINE(32),EMPTYGDG    MOVE MESSAGE INTO LINE\n         DROP  R8                                               SMS0003\nPUTEMPTY L     R8,SAVER8                                        SMS0003\n         L     R2,DSNFLD               LOAD DSNAME FIELD\n         MVC   0(44,R2),INDEX          MOVE INDEX INTO MESSAGE\n         BAL   R2,PUTL                 DISPLAY MESSAGE\n         MVC   OUTLINE,BLANKS          CLEAR LINE\nTESTDONE OI    FLAGS,NOTEMPTY          SET NOT EMPTY\n         NI    FLAGS,X'FF'-GDG         CLEAR GDG INDICATOR\n         CLC   FIRSTBLK,CURRBLK        TEST FOR DONE\n         BE    ENDGRP\n         L     R4,ENDNAME              REMOVE LOWEST LEVEL NAME\nFINDDOT  BCTR  R4,0\n         CLI   0(R4),C'.'\n         MVI   0(R4),C' '\n         BNE   FINDDOT\n         ST    R4,ENDNAME\n         L     R1,CURRBLK              POINT TO PREVIOUS BLOCK\n         S     R1,=F'264'\n         ST    R1,CURRBLK\n*--------NEXT ENTRY\nDSATNEXT L     R1,CURRBLK              LOAD CURRENT BLOCK ADDRESS\n         L     R2,0(R1)                LOAD POINTER\n         SR    R15,R15                 LOAD HALFWORD COUNT\n         IC    R15,11(R2)\n         SLA   R15,1                   DOUBLE TO GET BYTES\n         LA    R2,12(R15,R2)           12 BYTES FOR HEADER\n         ST    R2,0(R1)                SAVE POINTER\n         B     PROCNTRY\n*--------DATA SET ENTRY WITH OVER 5 VOLUMES\nDSNOVER5 OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME              GET INDEX NAME LENGTH\n         LA    R15,INDEX\n         SR    R1,R15\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   LOCATE2\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nLOCATE2  L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1\n         B     LOCERROR\n*--------DATA SET ENTRY\nDSNENTRY OI    FLAGS,NOTEMPTY          INDICATE NOT EMPTY\n         MVC   DSNAME,INDEX            COPY INDEX TO DSNAME\n         L     R1,ENDNAME\n         LA    R15,INDEX\n         SR    R1,R15                  GET LENGTH OF INDEX\n         LA    R1,DSNAME(R1)           POINT TO END OF NAME\n         MVI   0(R1),C'.'\n         MVC   1(8,R1),0(R2)           ADD NAME\n         TM    2(R1),X'F0'             TEST FOR GDG NAME\n         BNZ   DSNMVC\n         XC    2(4,R1),=X'FFFFFFFF'    COMPLEMENT GENERATION NUMBER\nDSNMVC   LA    R8,12(R2)               POINT TO VOLUME LIST\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         B     LDVOLCNT\n         TITLE 'DATA SET GROUP PROCESSING - VIA VSAM LOCATE'\n***********************************************************************\n*                                                                     *\n*        PROCESS DATA SET GROUP VIA VSAM LOCATE                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCGRP  OI    FLAGS2,$VSAMLOC         INDICATE VSAM LOCATE BEING USED\n         LA    R1,INDEX+44             LOAD END OF SEARCH KEY ADDRESS\nBACKUP   BCTR  R1,0                    DECREMENT POINTER\n         CLI   0(R1),C' '              TEST FOR BLANK\n         BE    BACKUP\n         LR    R7,R1                   SAVE ADDRESS\n         LA    R15,INDEX               LOAD INDEX ADDRESS\n         SR    R7,R15                  GET LENGTH OF INDEX NAME\n         LA    R7,1(R7)\n         NC    DSONLY,DSONLY           TEST FOR DSONLY\n         BNZ   SAVELEN\n         NC    GENERIC,GENERIC         TEST FOR GENERIC\n         BNZ   SAVELEN\n         CLC   DSNAME,INDEX            ALIAS NAME RETURN?         ABL99\n         BNE   SAVELEN                 NO, BRANCH                 ABL99\n         LA    R7,1(R7)                ADD ONE MORE FOR THE PERIOD\n         MVI   1(R1),C'.'              ADD THE PERIOD\nSAVELEN  STC   R7,INDEXLEN\nRETRYLOC L     R15,WORKAREA            LOAD WORK AREA\n         XC    0(4,R15),0(R15)         ZERO LENGTH FIELDS\n         L     R1,WORKLEN              LOAD LENGTH OF WORK AREA\n         ST    R1,0(,R15)              STORE FORMAT-2 LENGTH        ABL\n         MVC   4(4,R15),=A(8)          SET USED LENGTH              ABL\n         OI    CTGDSORG,X'04'          SET FORMAT-2 WORK AREA       ABL\n         XC    CTGTYPE(2),CTGTYPE      CLEAR WORK AREA BYTES\n         LOCATE CTGPL                  LOCATE ALL DSNAMES\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    PROCDATA\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN CODES 40 AND 44 INDICATE THAT THE WORK AREA IS TOO    *\n*        SMALL TO CONTAIN ALL THE DATA SET NAMES, BUT AS MANY NAMES   *\n*        AS COULD BE HELD HAVE BEEN RETURNED.                         *\n*                                                                     *\n*        CODE 44 INDICATES THAT SVC 26 COULD NOT DETERMINE THE SIZE   *\n*        WORK AREA REQUIRED, SO CONTINUE PROCESSING THE NAMES THAT    *\n*        WERE RETURNED.                                               *\n*                                                                     *\n*        CODE 40 INDICATES THAT SVC 26 RETURNED THE REQUIRED WORK     *\n*        AREA SIZE IN THE SECOND HALFWORD OF THE WORK AREA.  FREE     *\n*        THE ORIGINAL WORK AREA, OBTAIN A NEW WORK AREA OF REQUIRED   *\n*        SIZE, AND RE-TRY THE LOCATE REQUEST.                         *\n*                                                                     *\n*        NOTE THAT SVC 26 CONSIDERS A SIZE OF 32,768 (X'8000') OR     *\n*        MORE A NEGATIVE SIZE AND WILL NOT RETURN ANY INFORMATION.    *\n*        IF MORE THAN 32,767 IS REQUIRED, JUST PROCESS WHAT WAS       *\n*        RETURNED.                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CH    R15,=H'44'              SEE IF WORK AREA TOO SMALL\n         BE    PARTIAL\n         CH    R15,=H'40'\n         BNE   LOCERROR\n*--------GET NEW, BIGGER WORK AREA\n         L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R0,WORKLEN              LOAD WORK AREA LENGTH        ABL\n         L     R2,4(,R1)               LOAD LENGTH NEEDED           ABL\n         ST    R0,4(,R1)               STORE LENGTH USED            ABL\n         C     R2,=F'&MAXSIZE'         EXCEED MAXIMUM?              ABL\n         BH    PARTIAL                 YES, PROCESS PART RETURNED   ABL\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1                    ABL\n         FREEMAIN R,LV=(0),A=(1)       FREE OLD WORK AREA\n         LR    R0,R2                   LOAD LENGTH NEEDED\n         ICM   R0,B'1000',=X'01'       SUBPOOL 1\n         GETMAIN  R,LV=(0)             GET NEW WORK AREA\n         ST    R2,WORKLEN              SAVE WORK AREA LENGTH\n         ST    R1,WORKAREA             SAVE WORK AREA ADDRESS\n         ST    R1,CTGWKA               STORE ADDRESS IN CTGPL\n         B     RETRYLOC\n*--------TOO MANY NAMES FOR WORK AREA\nPARTIAL  OI    FLAGS2,$INCMPLT         INDICATE NAME LIST INCOMPLETE\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY LINE                 ABL\n         MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         L     R1,WORKAREA             RELOAD WORKAREA ADDRESS      ABL\n*--------PROCESS DATA SETS\nPROCDATA OI    FLAGS,DSATGRP           SET GROUP INDICATOR\n         L     R15,WORKAREA            LOAD WORK AREA ADDRESS\n         L     R1,4(,R15)              LOAD USED WORK AREA LENGTH   ABL\n         LA    R1,0(R1,R15)            ADD TO WORK AREA ADDRESS\n         S     R1,=F'44'               BACK OFF ONE ENTRY LESS ONE  ABL\n         ST    R1,ENDWORK              SAVE END OF WORK AREA USED ADDR\n         LA    R7,8(R15)               LOAD ADDRESS OF FIRST ENTRY  ABL\n         B     DSATPROC\nDSATNXT2 L     R7,CURRBLK              LOAD ADDR LAST ENTRY PROCESSED\n         LA    R7,45(R7)               INCREMENT TO NEXT NAME\nDSATPROC C     R7,ENDWORK              SEE IF NAME IS OUT OF WORK AREA\n         BNL   TESTCOMP                BRANCH HIGH OR EQUAL    HD JAN99\n         ST    R7,CURRBLK              SAVE ADDRESS OF THIS ENTRY\n         MVC   DSNAME,1(R7)            COPY DSNAME\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\n         L     R2,DSNFLD               LOAD ADDRESS OF DSNAME FIELD\n         MVC   0(44,R2),DSNAME         COPY DSNAME INTO MESSAGE\n         LOCATE LOCLIST                LOCATE BY NAME\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OBTAIN1                 OK, BRANCH\n         CH    R15,=H'8'               GDG BLOCK IN ICF CATALOG?    SPG\n         BE    GDGMSGL                 YES, BRANCH                  SPG\n         CLI   0(R7),C'B'              GDG BASE RECORD?\n         BNE   LOCERROR                NO, BRANCH\n         MVC   SHOWCAT(LSHOWCAT),SHOWCATF  INITIALIZE SHOWCAT\n         LA    R1,100                      LENGTH OF SHOWCAT AREA\n         STH   R1,SHOWCATA                 LENGTH OF AREA\n         SHOWCAT AREA=SHOWCATA,NAME=1(R7),MF=(E,SHOWCAT)\n         L     R1,SHOWCATA                 START OF SHOWCAT AREA\n         B     LOCERROR\nSHOWCATF SHOWCAT AREA=*-*,NAME=*-*,MF=L\nLSHOWCAT EQU   *-SHOWCATF\nTESTCOMP TM    FLAGS2,$INCMPLT         SEE IF NAME LIST INCOMPLETE\n         BZ    ENDGRP\n***      L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS     ABL\n***      MVC   0(32,R2),DSATERR3       MOVE IN ERROR MESSAGE        ABL\n***      BAL   R2,PUTL                 DISPLAY LINE                 ABL\n***      MVC   OUTLINE,BLANKS          BLANK OUT LINE               ABL\n         B     ENDGRP\n         TITLE 'SEARCH VTOC'\n***********************************************************************\n*                                                                     *\n*        OBTAIN DSCB'S                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCOPYSER  MVC   CATBLOCK+6,=CL6' '      BLANK OUT VOLUME SERIAL\n         LH    R1,VOLSER+4             LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                    REDUCE BY 1\n         LA    R2,CATBLOCK+6           LOAD DESTINATION ADDRESS\n         L     R4,VOLSER               LOAD SOURCE ADDRESS\n         EX    R1,MOVENAME             COPY VOLUME SERIAL\n         MVC   CATBLOCK(2),=H'1'       SET VOLUME COUNT\n         MVC   CATBLOCK+2(4),=X'00002000'  MAKE IT LOOK LIKE DASD\n         XC    CATBLOCK+12(2),CATBLOCK+12  ZERO FILE SEQUENCE NUMBER\n         CLI   0(R4),C'*'              TEST FOR * ENTERED\n         BNE   OBTAIN1\n         XC    UWORK,UWORK           START UCB SEARCH OVER\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTSER  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXT01              YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    ENDVALL             YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\nNEXT01   DS    0H                                              HD JAN99\n         LA    R15,UCBAR             START OF THIS UCB         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NEXTSER               YES, IGNORE\n         B     THISVOL\n         SPACE 1\nENDVALL  TM    FLAGS2,$FOUND           SEE IF DATA SET FOUND ON ANY VOL\n         BO    ENDGRP2\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME\n         L     R2,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R2),NOVOL          COPY ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         BAL   R2,PUTL                 DISPLAY ERROR MESSAGE\n         B     ENDGRP2\nTHISVOL  CLI   UCBVOLI-UCBOB(R15),0    ANY NAME?               HD JAN99\n         BE    NEXTSER                 NO, DO NOT USE THIS VOLUME NAME\n         MVC   CATBLOCK+2(4),UCBTYP-UCBOB(R15)                 HD JAN99\n*                                      COPY UCBTYPE FIELD      HD JAN99\n         MVC   CATBLOCK+6(6),UCBVOLI-UCBOB(R15)                HD JAN99\n*                                      COPY SERIAL\n         ST    R1,SERPTR               STORE UCB TABLE POINTER\n         ST    R15,LASTUCB             STORE LAST UCB PROCESSED ADDR\n         L     R2,DSNFLD               LOAD DSNAME FIELD ADDRESS\n         MVC   0(44,R2),DSNAME         COPY DSNAME TO OUTPUT LINE\n         XC    TOTLS+8(8),TOTLS+8      RESET DATA SET ALLOCATION TOTALS\n         XC    PDSTOTLS(16),PDSTOTLS   RESET PDS TOTALS\nOBTAIN1  LA    R8,CATBLOCK             LOAD VOLUME LIST ADDRESS\nLDVOLCNT MVC   HALF,0(R8)              VOLUME COUNT TO ALIGNED AREA\n         LH    R1,HALF                 LOAD VOLUME COUNT\n         LA    R8,2(R8)                BUMP POINTER TO FIRST VOL FIELD\n         CH    R1,=H'20'               TEST AGAINST MAX COUNT\n         BNH   GETSER\n         LA    R1,20                   SET MAX COUNT\nGETSER   C     R1,=F'1'                TEST VOLUME COUNT\n         BL    BADVOLCT                BAD VOLUME COUNT\n         BE    STOREVCT\n         OI    FLAGS,$MULTVOL          INDICATE MULTIVOLUME\nSTOREVCT STH   R1,VOLCNT               STORE REMAINING VOLUME COUNT\n         MVC   DSATSER,4(R8)           COPY SERIAL\n         BAL   R14,$SMS2               DO DATACLAS, MGMTCLAS,   SMS0002+\n                                       AND STORCLAS             SMS0002\n         CLC   SERIAL,=H'2'            TEST FOR NOSERIAL\n         BE    TESTDEV\n         L     R2,SERFLD               LOAD OUTPUT AREA ADDRESS\n         MVC   0(6,R2),DSATSER         COPY SERIAL TO OUTPUT LINE\n         CLC   SEQNO,=H'2'             TEST FOR NOSEQNO\n         BE    TESTDEV\n         MVC   HALF,10(R8)             SEQ NO TO ALIGNED AREA\n         LH    R1,HALF                 LOAD FILE SEQUENCE NUMBER\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'   MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT SEQUENCE NUMBER\n         MVC   7(4,R2),DSATDEC+4       MOVE TO MESSAGE\nTESTDEV  CLC   DEVTYPE,=H'2'           TEST FOR DEVTYPE\n         BE    TESTDA\n         UNPK  DSATDEC(9),0(5,R8)      UNPACK DEVTYPE\n         TR    DSATDEC(8),TRTABLE      TRANSLATE TO EBCDIC\n         L     R2,DEVFLD               LOAD OUTPUT ADDRESS\n         MVC   0(8,R2),DSATDEC         MOVE TO MESSAGE\nTESTDA   CLI   2(R8),X'20'             TEST FOR DIRECT ACCESS\n         BNE   NOTDASD\n         SR    R1,R1                   CLEAR REG 1\n         IC    R1,3(R8)                LOAD LAST BYTE OF DEVTYPE FIELD\nTESTTYPE CH    R1,=H'15'               TEST AGAINST MAX\n         BH    NOTDASD\n         SLA   R1,3                    MULTIPLY BY 8\n         SR    R0,R0\n         IC    R0,TRKSCYL(R1)          INSERT TRACKS PER CYL\n         STH   R0,TRKPRCYL             SAVE IT\n         LTR   R0,R0                   TEST IT\n         BNZ   TESTDEV2\n*--------DEVICE CODE NOT IN CATALOG, GET IT FROM UCB\n         XC    UWORK,UWORK           START UCB SEARCH OVER     HD JAN99\n         EJECT\n***********************************************************************\n**                                                                   **\n**  SCAN THE UCBS (BOTH DYNAMIC AND STATIC) ONE BY ONE SELECTING     **\n**  ONLY THE DEVICE CLASS OF DASD. WE GET A COPY OF EACH UCB IN      **\n**  OUR WORK AREA. PROCESS THE UCB COPY, THEN GET ANOTHER.           **\n**                                                                   **\n***********************************************************************\n         SPACE 1\nNEXTDEV  UCBSCAN COPY,                                         HD JAN99+\n               WORKAREA=UWORK,                                 HD JAN99+\n               UCBAREA=UCBAR,                                  HD JAN99+\n               DYNAMIC=YES,                                    HD JAN99+\n               RANGE=ALL,                                      HD JAN99+\n               DEVCLASS=DASD,                                  HD JAN99+\n               RETCODE=USRETN,                                 HD JAN99+\n               RSNCODE=USRSN,                                  HD JAN99+\n               IOCTOKEN=TOKEN,                                 HD JAN99+\n               MF=(E,UCBLIST,COMPLETE)                         HD JAN99\n         SPACE 1\n         CLC   =F'0',USRETN        RETURN CODE ZERO?           HD JAN99\n         BE    NEXTDEV1            YES, WE HAVE A UCB!         HD JAN99\n         CLC   =F'4',USRETN        RETURN CODE FOUR?           HD JAN99\n         BE    NOTUP               YUP, DONE WITH THIS NOW!    HD JAN99\n         L     R1,=A(TRTABLE2)     LOAD TABLE ADDRESS          HD JAN99\n         UNPK  UNPKAREA(5),USRETN+2(3)  UNPACK RETURN CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR9     MOVE ERROR MESSAGE     HD JAN99\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   OUTLINE+RCPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         UNPK  UNPKAREA(5),USRSN+2(3)   UNPACK REASON CODE     HD JAN99\n         TR    UNPKAREA(4),0(R1)        TRANSLATE TO HEX       HD JAN99\n         MVC   OUTLINE+RSPT(4),UNPKAREA MOVE INTO MESSAGE      HD JAN99\n         B     SETERROR                 INDICATE SERIOUS ERROR HD JAN99\n         SPACE 1                                               HD JAN99\nNEXTDEV1 DS    0H                                              HD JAN99\n         LA    R15,UCBAR                START OF THIS UCB      HD JAN99\n         CLC   UCBVOLI-UCBOB(6,R15),DSATSER                    HD JAN99\n         BNE   NEXTDEV                                         HD JAN99\n         TM    UCBFLA-UCBOB(R15),UCBNRY                        HD JAN99\n*                                    CHECK FOR NOT-READY       HD JAN99\n         BO    NOTUP\n         SR    R1,R1\n         IC    R1,19(R15)              INSERT TYPE CODE\n         TM    VOLSER+6,X'80'          SEE IF VOL SERIAL ENTERED\n         BZ    TESTTYPE\n         MVC   CATBLOCK+2(4),16(R15)   COPY DEVTYPE TO DUMMY ENTRY\n         B     TESTTYPE\nNOTUP    LA    R15,4                   VOL NOT MOUNTED - OBTAIN ERROR 4\n         B     DSNERR\nTESTDEV2 CLC   DEVICE,=H'2'            TEST FOR DEVICE\n         BE    GETFMT1\n         L     R2,DEVFIELD             LOAD OUTPUT AREA ADDRESS\n         LA    R15,TRKSCYL(R1)         LOAD FIELD ADDRESS\n         MVC   0(6,R2),1(R15)          DEVICE CODE TO OUTPUT LINE\nGETFMT1  OBTAIN DSATDCB1               GET FORMAT 1 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         NC    DS1PTRDS,DS1PTRDS       SEE IF THERE IS A FORMAT 3 DSCB\n         BZ    PROCESS\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DSNERR\n         TITLE 'PROCESS THE DSCB'\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSCB                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCESS  OI    FLAGS,COUNT             COUNT THIS DATA SET\n         OI    FLAGS2,$FOUND           INDICATE DATA SET FOUND\n         CLC   ALLOC,=H'2'             TEST FOR NOALLOC\n         BE    PROCDSRG\n         BAL   R14,$ALLOC              BRANCH TO PROCESSING ROUTINE\n         LM    R4,R5,TOTLS+8           LOAD DATA SET TOTALS\n         AR    R4,R6                   ADD TRACKS ALLOCATED THIS VOLUME\n         AR    R5,R7                   ADD TRACKS FREE THIS VOLUME\n         STM   R4,R5,TOTLS+8           SAVE TOTALS\nPROCDSRG CLC   DSORG,=H'2'             TEST FOR NODSORG\n         BE    PROCPDS\n         BAL   R14,$DSORG              BRANCH TO PROCESSING ROUTINE\nPROCPDS  CLC   PDS,=H'2'               TEST FOR NOPDS\n         BE    PROCDCB\n         TM    DS1DSORG,X'02'          MAKE SURE DSORG = PO\n         BZ    PROCDCB\n         TM    DS1SMSFG,DS1PDSEX       MAKE SURE ITS NOT HFS   @KLS0710\n         BO    PROCDCB                                         @KLS0710\n         L     R15,=V(DSATPDS)         LOAD SUBROUTINE ADDRESS\n         BALR  R14,R15                 BRANCH TO PROCESSING ROUTINE\nPROCDCB  CLC   DCB,=H'2'               TEST FOR NODCB\n         BE    PROCCRDT\n         BAL   R14,$DCB                BRANCH TO PROCESSING ROUTINE\nPROCCRDT CLC   CRDATE,=H'2'            TEST FOR NOCRDATE\n         BE    PROCEXDT\n         BAL   R14,$CRDATE             BRANCH TO PROCESSING ROUTINE\nPROCEXDT CLC   EXDATE,=H'2'            TEST FOR NOEXDATE\n         BE    PROCLREF\n         BAL   R14,$EXDATE             BRANCH TO PROCESSING ROUTINE\nPROCLREF CLC   LASTREF,=H'1'           TEST FOR LASTREF\n*SMS0001 BNE   PROCCHHR\n         BNE   PROCSMS                                          SMS0001\n         BAL   R14,$LASTREF            BRANCH TO PROCESSING ROUTINE\nPROCSMS  EQU   *                                                SMS0001\n         CLC   SMS,=H'1'               TEST FOR SMS             SMS0001\n         BNE   PROCCHHR                                         SMS0001\n         BAL   R14,$SMS                                         SMS0001\nPROCCHHR CLC   CCHHR,=H'2'             TEST FOR NOCCHHR\n         BE    PUTLINE\n         BAL   R14,$CCHHR              BRANCH TO PROCESSING ROUTINE\nPUTLINE  BAL   R2,PUTL                 DISPLAY THE LINE\nRESETLIN MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ACCUMULATE TOTALS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R8,12(R8)               INCREMENT TO NEXT VOLUME\n         LH    R1,VOLCNT               LOAD VOLUME COUNT\n         BCT   R1,GETSER               LOOP FOR MORE VOLUMES\n         LM    R4,R8,TOTLS             LOAD TOTALS FIELDS\n         AR    R4,R6                   ACCUMULATE TOTAL TRACKS ALLOC\n         AR    R5,R7                   ACCUMULATE TOTAL TRACKS FREE\n         TM    FLAGS,COUNT             COUNT IT?\n         BZ    SAVETOTL\n         LA    R8,1(R8)                INCREMENT DATA SET COUNT\nSAVETOTL STM   R4,R8,TOTLS             STORE TOTALS\n         CLC   EXTENTS,=H'2'           NOEXTENSTS?                ABL94\n         BE    NOEXTENT                YES, BRANCH                ABL94\n         TM    FLAGS,COUNT             COUNT IT?                  ABL94\n         BZ    NOEXTENT                NO, BRANCH                 ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\n         BAL   R14,$ALLEXTS            BRANCH TO ROUTINE          ABL94\n         MVC   OUTLINE,BLANKS          BLANK OUTPUT LINE          ABL94\nNOEXTENT NI    FLAGS,X'FF'-COUNT       RESET COUNT BIT            ABL94\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PROCESS NEXT DATA SET                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFORK  TM    FLAGS,DSATGRP           TEST FOR DATA SET GROUP HD JAN99\n         BZ    ENDGRP\n         TM    FLAGS2,$VSAMLOC         TEST FOR VSAM LOCATE\n         BZ    DSATNEXT                GET NEXT DSNAME\n         B     DSATNXT2                GET NEXT DSNAME\n         SPACE 2\nENDGRP   NI    FLAGS,RESET             RESET DATA SET GROUP FLAG\n         NI    FLAGS2,X'FF'-$VSAMLOC-$INCMPLT\n         TM    VOLSER+6,X'80'          SEE IF VOLUME ENTERED\n         BZ    ENDGRP2\n         L     R1,VOLSER               LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R1),C'*'              TEST FOR ASTERISK\n         BE    NEXTSER\nENDGRP2  L     R3,24(R3)               LOAD ADDRESS OF NEXT PDE\n         LA    R3,0(,R3)\n         LTR   R3,R3                   END OF CHAIN?\n         BNZ   SETUPNXT                NO, BRANCH\n         TITLE 'DISPLAY TOTALS'\n***********************************************************************\n*                                                                     *\n*        DISPLAY TOTALS IF REQUESTED                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         CLC   TOTALS,=H'2'            SEE IF TOTALS REQUESTED\n         BE    RETURN\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT LINE\n         LM    R4,R8,TOTLS             LOAD TOTALS\n         CVD   R8,DSATPDEC             CONVERT NUMBER OF DATA SETS\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         L     R2,DSNFLD               LOAD DATA SET NAME FIELD\n*\n*  MORE THAN 9999 DATASETS POSSIBLE |        A.FREYBIER 30.04.2003 BDF\n**       MVC   0(4,R2),DSATDEC+4       MOVE INTO OUTPUT LINE       BDF\n**       MVC   5(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE       BDF\n         MVC   8(19,R2),=C'DATA SETS DISPLAYED'                    BDF\n*\n         CH    R8,=H'1'                TEST FOR ONE OR ZERO DATA SETS\n         BH    CNVTALOC\n         TM    FLAGS,$MULTVOL          TEST FOR MULTIVOLUME\n         BZ    RETURN\n         NI    FLAGS,X'FF'-$MULTVOL    CLEAR MULTIVOLUME INDICATOR\n         MVC   5(19,R2),=C'DATA SET DISPLAYED '\nCNVTALOC CLC   ALLOC,=H'2'             SEE IF ALLOCATION REQUESTED\n         BE    DISPLAYT\n         L     R2,ALLOCFLD             LOAD ALLOCATION FIELD ADDRESS\n         SH    R2,=H'2'                BACK UP BY TWO             ABL94\n         CVD   R4,DSATPDEC             CONVERT ALLOCATED TOTAL TO DEC\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   0(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   0(7,R2),DSATDEC+1       MOVE INTO OUTPUT LINE      ABL94\n         CVD   R5,DSATPDEC             CONVERT USED TOTAL TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   6(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE\n         MVC   8(5,R2),DSATDEC+3       MOVE INTO OUTPUT LINE      ABL94\nDISPLAYT BAL   R2,PUTL                 DISPLAY LINE\n         TITLE 'SET UP RETURN CODE'\n***********************************************************************\n*                                                                     *\n*        SET UP RETURN CODE                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   LM    R4,R8,TOTLS             LOAD TOTALS\n         LH    R15,RC                  LOAD RETURN CODE\n         C     R15,=F'10'              SEE IF A PDS CODE\n         BL    BRANCH\n         LM    R4,R7,PDSTOTLS          LOAD PDS TOTALS\nBRANCH   SLA   R15,2                   MULTIPLY BY 4\n         B     BRTABLE(R15)            BRANCH TO PROPER ROUTINE\nBRTABLE  B     RC0                                             HD JAN99\n         B     RCTALLOC\n         B     RCTUSED\n         B     RCLALLOC\n         B     RCLUSED\n         B     RCTDIFF\n         B     RCLDIFF\n         B     RCNUM\n         B     RCPREV\n         B     RCDSORG\n         B     RCDIRA\n         B     RCDIRU\n         B     RCENTR\n         B     RCMEMB\nRCALIAS  LR    R15,R7                  NUMBER OF ALIASES\n         B     EXIT\nRCMEMB   LR    R15,R6                  NUMBER OF ENTRIES\n         SR    R15,R7                  MINUS ALIASES = MEMBERS\n         B     EXIT\nRCENTR   LR    R15,R6                  NUMBER OF ENTRIES\n         B     EXIT\nRCDIRU   LR    R15,R5                  DIRECTORY BLOCKS USED\n         B     EXIT\nRCDIRA   LR    R15,R4                  DIRECTORY BLOCKS ALLOCATED\n         B     EXIT\nRCDSORG  NI    FLAGS,$NOTPOPS+$DSPO+$DSPS   SAVE DSORG INDICATORS\n         LA    R15,4                   SET COMPLETION CODE\n         TM    FLAGS,$NOTPOPS\n         BNZ   EXIT\n         IC    R15,FLAGS               LOAD FLAGS AS RC\n         B     EXIT\nRCPREV   L     R15,CPPLECT             LOAD ECT ADDRESS\n         USING ECT,R15\n         LH    R15,ECTRTCD+1           LOAD PREVIOUS RETURN CODE\n         DROP  R15\n         B     EXIT\nRCTALLOC LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\n         B     EXIT\nRCTUSED  LR    R15,R4                  LOAD TOTAL TRACKS ALLOC\n         SR    R15,R5                  LESS TOTAL TRACKS FREE\n         B     EXIT\nRCLALLOC LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\n         B     EXIT\nRCLUSED  LR    R15,R6                  LOAD TOTAL TRACKS FOR LAST DS\n         SR    R15,R7                  LESS TOTAL TRACKS FREE\n         B     EXIT\n*CTDIFF  LR    R15,R4                  LOAD TOTAL TRACKS ALLOCATED\nRCTDIFF  LR    R15,R5                  SUBTRACTS TOTAL TRACKS USED\n         B     EXIT\n*CLDIFF  LR    R15,R6                  LOAD TRACKS ALLOCATED BY LAST DS\nRCLDIFF  LR    R15,R7                  SUBTRACT TRACKS USED BY LAST DS\n         B     EXIT\nRCNUM    LR    R15,R8                  LOAD DATA SET COUNT\n         B     EXIT\nRC4      LA    R15,4                   SET RETURN CODE TO 4\n         B     EXIT                                            HD JAN99\nRC8      LA    R15,8                   SET RETURN CODE TO 8    HD JAN99\n         B     EXIT                                            HD JAN99\nRC0      SLR   R15,R15                 CLEAR RETURN CODE       HD JAN99\n         TM    FLAGS2,$ONENF           ONE DATASET NOT FOUND?  HD JAN99\n         BO    RC8                     YES, RETURN CODE=8      HD JAN99\n         B     EXIT                                            HD JAN99\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*        RELEASE STORAGE AND RETURN                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXIT     LR    R3,R15                  SAVE RETURN CODE\n         IKJRLSA DSATANS               RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    EXIT2\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\nEXIT2    L     R1,WORKAREA             LOAD WORK AREA ADDRESS\n         L     R2,WORKLEN              LOAD WORK AREA LENGTH\n         LTR   R1,R1                   Q:DID THIS?              SMS0001\n         BZ    EXIT2_A                 N-DON'T TRY TO FREE IT   SMS0001\n         FREEMAIN R,LV=(R2),A=(R1),SP=1  FREE WORK AREA\nEXIT2_A  EQU   *                                                SMS0001\n         LR    R15,R3                  RESTORE RETURN CODE\n         $RTRN RENT=DSECTLEN,RC=(R15)\n         TITLE 'GET ALLOCATION INFORMATION'\n***********************************************************************\n*                                                                     *\n*        GET ALLOCATION  (ALLOCATED, FREE, AND EXTENTS)               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2        - OUTPUT AREA ADDRESS                              *\n*        R3        - RESERVED (DSNAME PDE POINTER)                    *\n*        R4        - NUMBER OF EXTENTS (COUNTER)                      *\n*        R5        - EXECUTE TABLE POINTER                            *\n*        R6        - TRACKS ALLOCATED                                 *\n*        R7        - EXTENT DESCRIPTION POINTER/TRACKS USED           *\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------GET TRACK ALLOCATION\n$ALLOC   L     R2,ALLOCFLD             LOAD OUTPUT AREA ADDRESS\n         SR    R4,R4                   CLEAR REGISTER 4\n         SR    R5,R5                   CLEAR REGISTER 5\n         SR    R6,R6                   CLEAR REGISTER 6\n         SR    R7,R7                   CLEAR REGISTER 7\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   TEST NUMBER OF EXTENTS\n         BZ    ALLOCEND\n         LA    R15,16                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'16'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'16'               NO, DO 16 FIRST        ABL NOV92\nDSATTRKS EX    R0,DSATADDR(R5)         PROCESS EXTENT BLOCK\n         CLI   0(R7),X'00'\n         BE    DSATUTRK\n         LA    R7,2(R7)                LOAD ADDRESS OF STARTING TRACK\n         MVC   HALF(2),4(R7)           LOAD ENDING CYL NUMBER\n         LH    R1,HALF\n         MVC   HALF(2),0(R7)           LOAD STARTING CYL NUMBER\n         SH    R1,HALF                 SUBTRACT STARTING FROM ENDING\n         MH    R1,TRKPRCYL             MULTIPLY BY TRACKS PER CYL\n         MVC   HALF(2),6(R7)           LOAD ENDING TRACK\n         AH    R1,HALF                 ADD TO TRACK COUNT\n         MVC   HALF(2),2(R7)           LOAD STARTING TRACK\n         SH    R1,HALF                 SUBTRACT FROM TRACK COUNT\n         AR    R6,R1                   ACCUMULATE TOTAL\n         LA    R6,R1(R6)               ADD 1 TRACK\n         LA    R5,4(R5)\n         BCT   R4,DSATTRKS             DECREMENT EXTENT COUNT\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?      ABL NOV92\n         BZ    DSATUTRK                NO, DONE               ABL NOV92\n         LA    R5,3*4                  POINTER TO NEXT 13     ABL NOV92\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB  ABL NOV92\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB   ABL NOV92\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN        ABL NOV92\n         LTR   R15,R15                 GOOD RETURN CODE?      ABL NOV92\n         BNZ   DSNERR                  NO, SOME ERROR         ABL NOV92\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT    ABL NOV92\n         LA    R15,13                  EXTENTS TO PROCESS     ABL NOV92\n         LR    R0,R4                   TOTAL EXTENTS          ABL NOV92\n         SR    R0,R15                  EXTENTS LEFT           ABL NOV92\n         ST    R0,EXTENTLF             SAVE FOR LATER         ABL NOV92\n         CH    R4,=H'13'               CAN WE DO ALL?         ABL NOV92\n         BL    DSATTRKS                YES, BRANCH            ABL NOV92\n         LH    R4,=H'13'               NO, DO 13 NEXT         ABL NOV92\n         B     DSATTRKS                CONTINUE               ABL NOV92\n         SPACE 3                                              ABL NOV92\nDSATUTRK CVD   R6,DSATPDEC             CONVERT TRACKS TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'      MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET TRACKS USED\n         SR    R7,R7                   ASSUME NO DATA IS FREE       ABL\n         NC    DS1LSTAR,DS1LSTAR       TEST FOR ZERO\n         BZ    DSATXNTS\n         LH    R1,DS1LSTAR             LOAD TRACKS USED             ABL\n         N     R1,=X'0000FFFF'     TURN OFF HIGH ORDER BYTES LMN-CBTABL\n         LA    R1,1(R1)                ADD 1                        ABL\n         LR    R7,R6                   TOTAL FOUND FOR DATA SET     ABL\n         SR    R7,R1                   TOTAL FREE FOR DATA SET      ABL\n         CVD   R7,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   6(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET NUMBER OF EXTENTS\nDSATXNTS SR    R1,R1\n*SMS0001 IC    R1,DS1NOPEV             LOAD EXTENTS\n         IC    R1,DS1NOEPV             LOAD EXTENTS             SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   12(2,R2),DSATDEC+6      MOVE INTO MESSAGE\n         CH    R1,=H'99'               MORE THAN 99 EXTENTS?  ABL NOV92\n         BNH   ALLOCEND                NO, BRANCH             ABL NOV92\n         MVI   11(R2),C'1'             YES, ADD 100           ABL NOV92\nALLOCEND CLC   SECOND,=H'2'            TEST FOR NOSECONDARY\n         BE    NOSECOND\n         LA    R2,15(R2)               INCREMENT FIELD POINTER\n         TM    DS1SCAL1,DS1EXT         Q:EXTEND 2NDARY SPACE?   SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         TM    DS1SCEXT,DS1SCAVB       Q:AVERAGE BLOCK DATA SET?SMS0001\n         BNO   TRYMB                   N-TRY MB TEST            SMS0001\n         XR    R1,R1                   Y-DISPLAY BLKSZ AND AMT  SMS0001\n         ICM   R1,B'0011',DS1SCXTV     COPY TO ALIGNED (F) WOR  SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   5(5,R2),DSATDEC+3       COPY ORIGINAL AVGBLKSZ   SMS0001\n         B     SECAMT                  GET # OF BLOCKS          SMS0001\nTRYMB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCMB        Q:AVGREC=M DATA SET?     SMS0001\n         BNO   TRYKB                   N-TRY KB TEST            SMS0001\n         MVI   9(R2),C'M'              INDICATE MEGABYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYKB    EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCKB        Q:AVGREC=K DATA SET?     SMS0001\n         BNO   TRYB                    N-TRY B TEST             SMS0001\n         MVI   9(R2),C'K'              INDICATE KILOBYTES       SMS0001\n         B     SECBYTES                CLEAR                    SMS0001\nTRYB     EQU   *                                                SMS0001\n         TM    DS1SCEXT,DS1SCUB        Q:AVGREC=U DATA SET?     SMS0001\n         BNO   NOAVGREC                N-DO OLD WAY             SMS0001\n         MVI   9(R2),C'B'              INDICATE BYTES           SMS0001\n*        B     SECBYTES                CLEAR                    SMS0001\nSECBYTES EQU   *                       GET NUMBER OF BYTES      SMS0001\n         XR    R1,R1                   CLEAR FOR INSERT         SMS0001\n         ICM   R1,B'0011',DS1SCXTV     SEC SPACE EXTENSION AMT  SMS0001\n         TM    DS1SCXTF,DS1SCCP1       Q:ADJUSTED BY 256?       SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,8                    Y-MULTIPLY BY 256        SMS0001\n         TM    DS1SCXTF,DS1SCCP2       Q:ADJUSTED BY 65536?     SMS0001\n         BNO   *+8                     N-DON'T ADJUST           SMS0001\n         SLL   R1,16                   Y-MULTIPLY TO 65536      SMS0001\n         SPACE ,                                                SMS0001\n         CLI   9(R2),C'B'              Q:SPACE IN BYTES?        SMS0001\n         BNE   TESTKB                  N-SEE IF IN K            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'K'              Y-CHANGE TO KB           SMS0001\n         SRL   R1,10                   BYTES/1024               SMS0001\nTESTKB   EQU   *                                                SMS0001\n         CLI   9(R2),C'K'              Q:SPACE IN KBYTES?       SMS0001\n         BNE   TESTMB                  N-SEE IF IN M            SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'M'              Y-CHANGE TO MB           SMS0001\n         SRL   R1,10                   KBYTES/1024              SMS0001\nTESTMB   EQU   *                                                SMS0001\n         CLI   9(R2),C'M'              Q:SPACE IN MBYTES?       SMS0001\n         BNE   DOSEC                   N-JUST DO IT             SMS0001\n         C     R1,=F'100000'           Q:MORE THAN THIS?        SMS0001\n         BL    DOSEC                   N-JUST DO IT             SMS0001\n         MVI   9(R2),C'G'              Y-CHANGE TO GB           SMS0001\n         SRL   R1,10                   MBYTES/1024              SMS0001\nDOSEC    EQU   *                                                SMS0001\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL       SMS0001\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK       SMS0001\n         ED    DSATDEC,DSATPDEC+4      EDIT                     SMS0001\n         MVC   1(8,R2),DSATDEC                                  SMS0001\n         BR    R14                     2NDARY SPACE COMPLETE    SMS0001\nNOAVGREC EQU   *                                                SMS0001\n         TM    DS1SCALO,X'C0'          TEST ALLOCATION TYPE\n         BM    TRKALLOC\n         BO    CYLALLOC\n         MVC   5(5,R2),=C'ABSTR'       ABSOLUTE TRACK ALLOCATION\n         B     SECAMT\nCYLALLOC MVC   5(5,R2),=C' CYL '       CYLINDER ALLOCATION\n         B     SECAMT\nTRKALLOC TM    DS1SCALO,X'80'          TEST FOR TRACKS OR BLOCKS\n         BZ    BLKALLOC\n         MVC   5(5,R2),=C' TRK '       TRACK ALLOCATION\n         B     SECAMT\nBLKALLOC MVC   5(5,R2),=C'BLOCK'       BLOCK ALLOCATION\nSECAMT   MVC   WORK,DS1SCALO           COPY TO ALIGNED (F) WORK AREA\n         L     R1,WORK                 LOAD ALLOCATION WORD\n         LA    R1,0(R1)                ZERO OUT HIGH BYTE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   0(4,R2),DSATDEC+4\nNOSECOND BR    R14                     RETURN\n         TITLE 'FORMAT SECONDARY INFORMATION'                     ABL94\n***********************************************************************\n*                                                                ABL94*\n*        FORMAT SECONDARY EXTENTS                                ABL94*\n*                                                                ABL94*\n***********************************************************************\n*                                                                ABL94*\n*        R3        - RESERVED (DSNAME PDE POINTER)               ABL94*\n*        R4        - NUMBER OF EXTENTS (COUNTER)                 ABL94*\n*        R5        - EXECUTE TABLE POINTER                       ABL94*\n*        R7        - EXTENT DESCRIPTION POINTER                  ABL94*\n*        R8 - R13  - RESERVED (POINTERS AND BASE REGISTERS)      ABL94*\n*                                                                ABL94*\n***********************************************************************\n         SPACE 2                                                  ABL94\n$ALLEXTS ST    R14,RETURNRG            SAVE THE RETURN REGISTER   ABL94\n         SR    R4,R4                   CLEAR REGISTER 4           ABL94\n         SR    R5,R5                   CLEAR REGISTER 5           ABL94\n*SMS0001 IC    R4,DS1NOPEV             LOAD NUMBER OF EXTENTS     ABL94\n         IC    R4,DS1NOEPV             LOAD NUMBER OF EXTENTS   SMS0001\n         LTR   R4,R4                   ANY EXTENTS?               ABL94\n         BZ    $ALLEX99                NO, END THIS ROUTINE       ABL94\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    $ALLEX99                YES, BRANCH                ABL94\n         MVC   OUTLINE+4(75),HEADER3   MOVE MESSAGE INTO LINE     ABL94\n         BAL   R2,PUTL                 OUTPUT A HEADER LINE       ABL94\n         MVC   DS3PTRDS,DS1PTRDS       FIRST FORMAT 3 ADDRESS     ABL94\n         LA    R15,3                   EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'3'                CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'3'                NO, DO 3 FIRST             ABL94\n$ALLEX10 EX    R0,DSATADDR(R5)         GET THE NEXT EXTENT IN R7  ABL94\n         MVC   OUTLINE,BLANKS          CLEAR OUTPUT AREA          ABL94\n         CLI   0(R7),X'00'                                        ABL94\n         BE    $ALLEX20                                           ABL94\n         LR    R1,R7                    GET AN EXTENT ADDRESS     ABL94\n         LA    R14,OL@XTYPE-2           -> START OF OUTPUT FIELD  ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'81'            EXTENT ON CYLINDER BOUND? ABL94\n         BNO   NOT$CYL                  NO - SKIP                 ABL94\n         MVC   0(5,R14),=C', CYL'       YES - SHOW IT             ABL94\n         LA    R14,5(,R14)              BUMP SCAN PTR             ABL94\n         B     YES$CYL                  SKIP AROUND               ABL94\n*                                                                 ABL94\nNOT$CYL  TM    DS1EXT1,X'80'            EXTENT SHARING CYLINDER?  ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', SHR CYL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\nYES$CYL  TM    DS1EXT1,X'40'            FIRST EXTENT DESCRIBE UL? ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', USR LBL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'04'            ISAM INDEX?               ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS INDX'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'02'            ISAM OVERFLOW?            ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(9,R14),=C', IS OVFL'   YES - SHOW IT             ABL94\n         LA    R14,9(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         TM    DS1EXT1,X'01'            USER DATA / ISAM PRIME?   ABL94\n         BZ    *+4+6+4                  NO - SKIP                 ABL94\n         MVC   0(6,R14),=C', DATA'      YES - SHOW IT             ABL94\n         LA    R14,6(,R14)              BUMP SCAN PTR             ABL94\n*                                                                 ABL94\n         MVC   OL@XTYPE-2(2),=C'  '     BLANK OUT LEADING ', '    ABL94\n         SR    R0,R0                    CLEAR FOR IC              ABL94\n         IC    R0,1(,R1)                GET EXTENT SEQUENCE NUMBERABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@XTNT,DECNUM+12-3      MOVE ANSWER TO OUTPUT LINEABL94\n*--- EXTENT STARTING ADDRESS (HEX)                                ABL94\n         UNPK  OL@START+1(8+1),2(4+1,R1)  CCHH EXTENT START       ABL94\n         TR    OL@START+1(8),HEXTAB     CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@START+9,C' '          FIX FLIP BYTE             ABL94\n         MVC   OL@START(4),OL@START+1   SHIFT OVER CC             ABL94\n         MVI   OL@START+4,C','          PUT IN SEPARATOR          ABL94\n*--- EXTENT STARTING ADDRESS (DEC)                                ABL94\n         LH    R0,2(,R1)                GET START CC              ABL94\n         MH    R0,TRKPRCYL              GET START CC IN TRKS      ABL94\n         AH    R0,4(,R1)                ADD START HH              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@STRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- EXTENT ENDING ADDRESS (HEX)                                  ABL94\n         UNPK  OL@END+1(8+1),6(4+1,R1)  CCHH EXTENT END           ABL94\n         TR    OL@END+1(8),HEXTAB       CONVERT TO PRINTABLE HEX  ABL94\n         MVI   OL@END+9,C' '            FIX FLIP BYTE             ABL94\n         MVC   OL@END(4),OL@END+1       SHIFT OVER CC             ABL94\n         MVI   OL@END+4,C','            PUT IN SEPARATOR          ABL94\n*--- EXTENT ENDING ADDRESS (DEC)                                  ABL94\n         LH    R0,6(,R1)                GET END CC                ABL94\n         MH    R0,TRKPRCYL              GET END CC IN TRKS        ABL94\n         AH    R0,8(,R1)                ADD END HH                ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@ETRK,DECNUM+12-5      GET 5 DIGIT NUMBER        ABL94\n*--- LENGTH IN TRACKS OF EXTENT (DEC)                             ABL94\n         LH    R15,6(,R1)               GET END CC                ABL94\n         SH    R15,2(,R1)               SUB START CC              ABL94\n         MH    R15,TRKPRCYL             GET NUMBER OF TRACKS      ABL94\n         AH    R15,8(,R1)               ADD END HH                ABL94\n         SH    R15,4(,R1)               SUB START HH              ABL94\n         LA    R0,1(,R15)               FUDGE FACTOR              ABL94\n         BAL   R14,CONVDEC0             CONVERT TO DECIMAL        ABL94\n         MVC   OL@LNTH,DECNUM+12-5      GET 5 DIGIT NUMBER OF TRKSABL94\n         BAL   R2,PUTL                  DISPLAY LINE              ABL94\n         LA    R5,4(R5)                 NEXT EXECUTED INSTRUCTION ABL94\n         BCT   R4,$ALLEX10              DECREMENT EXTENT COUNT    ABL94\n         NC    DS3PTRDS,DS3PTRDS       ANOTHER FORMAT 3?          ABL94\n         BZ    $ALLEX20                NO, DONE                   ABL94\n         LA    R5,3*4                  POINTER TO NEXT 13         ABL94\n         LA    R0,DS3PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         OBTAIN DSATDCB3               GET THE FORMAT 3 DSCB      ABL94\n         LA    R0,DS1PTRDS             POINTER TO NEXT DSCB       ABL94\n         ST    R0,DSATDCB3+4           SAVE FOR OBTAIN            ABL94\n         LTR   R15,R15                 GOOD RETURN CODE?          ABL94\n         BNZ   DSNERR                  NO, SOME ERROR             ABL94\n         L     R4,EXTENTLF             NUMBER EXTENTS LEFT        ABL94\n         LA    R15,13                  EXTENTS TO PROCESS         ABL94\n         LR    R0,R4                   TOTAL EXTENTS              ABL94\n         SR    R0,R15                  EXTENTS LEFT               ABL94\n         ST    R0,EXTENTLF             SAVE FOR LATER             ABL94\n         CH    R4,=H'13'               CAN WE DO ALL?             ABL94\n         BL    $ALLEX10                YES, BRANCH                ABL94\n         LH    R4,=H'13'               NO, DO 13 NEXT             ABL94\n         B     $ALLEX10                CONTINUE                   ABL94\n         SPACE 3                                                  ABL94\n$ALLEX20 DS    0H                                                 ABL94\n$ALLEX99 L     R14,RETURNRG            RESET THE RETURN REGISTER  ABL94\n         BR    R14                     RETURN                     ABL94\nCONVDEC0 CVD   R0,DECWORK                                         ABL94\n         MVC   DECNUM(12),DECMASK                                 ABL94\n         ED    DECNUM(12),DECWORK+2                               ABL94\n         BR    R14                                                ABL94\nDECMASK  DC    X'402020202020202020202120'  EDIT PATTERN          ABL94\nHEXTAB   EQU   *-C'0'                                             ABL94\n         DC    C'0123456789ABCDEF'                                ABL94\nHEADER3  DC    CL75'EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--$\n               TYPE-------------------------'                     ABL94\n         EJECT\n*--------LOAD EXTENT DESCRIPTIONS\nDSATADDR LA    R7,DS1EXT1              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT2              << EXECUTED INSTRUCTION >>\n         LA    R7,DS1EXT3              << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT01             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT02             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT03             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT04             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT05             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT06             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT07             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT08             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT09             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT10             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT11             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT12             << EXECUTED INSTRUCTION >>\n         LA    R7,DS3EXT13             << EXECUTED INSTRUCTION >>\n         TITLE 'DSORG PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DSORG                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DSORG   L     R2,DSORGFLD             LOAD OUTPUT AREA ADDRESS\n         TM    FLAGS2,$VSAMLOC         SEE IF VSAM CATALOG ENTRY\n         BZ    DSORG001\n         L     R1,CURRBLK              LOAD CURRENT ENTRY ADDRESSS\n         MVC   0(1,R2),0(R1)           COPY TYPE CODE\n         MVI   1(R2),C'-'\n         LA    R2,1(R2)                INCREMENT OVER TYPE CODE\n         USING DSAT+4096+4096,R8                                SMS0003\nDSORG001 ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R1,DSORGTBL             LOAD DSORG TABLE ADDRESS SMS0003\n         LA    R4,4                    LOAD LENGTH OF ENTRY\n         LA    R5,DSORGEND             LOAD END OF TABLE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         TM    DS1DSORG,X'01'          TEST FOR UNMOVABLE\n         BZ    DSORGCLC\n         MVI   3(R2),C'U'              INDICATE UMMOVABLE\n         XI    DS1DSORG,X'01'          TURN OFF UNMOVABLE BIT\nDSORGCLC CLC   DS1DSORG,0(R1)          TEST DSORG CODE\n         BE    DSORGMVC\n         BXLE  R1,R4,DSORGCLC\n         MVC   1(2,R2),=C'**'          UNDEFINED DSORG\n         B     DSORGBAD                RETURN\nDSORGMVC MVC   1(2,R2),2(R1)           COPY DSORG CODE\n         CLC   1(2,R2),=C'AM'          TEST FOR VSAM          DRK JUL10\n         BE    DSORGVS                                        DRK JUL10\n         CLC   1(2,R2),=C'PO'          TEST FOR PDS\n         BE    DSORGPO\n         CLC   1(2,R2),=C'PS'          TEST FOR SEQUENTIAL\n         BE    DSORGPS\n         B     DSORGBAD                                       DRK JUL10\nDSORGVS  TM    DS1REFD+3,X'04'         EXTENDED FORMAT VSAM?  DRK JUL10\n         BNO   DSORGBAD                NO, BRANCH             DRK JUL10\n         MVI   3(R2),C'X'              YES, NOTE IT           DRK JUL10\nDSORGBAD OI    FLAGS,$NOTPOPS\n         B     DSORGRTN\nDSORGPO  OI    FLAGS,$DSPO             ASSUME PARTITIONED      @KLS0710\n         TM    DS1SMSFG,DS1PDSE        IS THIS A PDSE?        ABL NOV92\n         BNO   DSORGRTN                NO, BRANCH             ABL NOV92\n         MVI   2(R2),C'E'              YES, CHANGE TO \"PE\"    ABL NOV92\n         TM    DS1SMSFG,DS1PDSEX       IS THIS A HFS?          @KLS0710\n         BNO   DSORGRTN                NO, BRANCH              @KLS0710\n         MVC   1(2,R2),=C'HF'          YES, CHANGE TO \"HF\"     @KLS0710\n         XI    FLAGS,$DSPO             NOT PARTITIONED         @KLS0710\n         OI    FLAGS,$NOTPOPS                                  @KLS0710\n         B     DSORGRTN\nDSORGPS  OI    FLAGS,$DSPS             SEQUENTIAL\nDSORGRTN BR    R14                     RETURN\n         TITLE 'DCB PROCESSING'\n***********************************************************************\n*                                                                     *\n*        GET DCB ATTRIBUTES                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$DCB     L     R2,DCBFLD               LOAD OUTPUT AREA ADDRESS\n         LR    R5,R2\n         TM    DS1RECFM,X'C0'          TEST FOR UNKNOWN RECFM\n         BZ    DSATT\n         TM    DS1RECFM,X'40'          TEST FOR F RECFM\n         BNZ   DSATUORV\n         MVI   0(R5),C'F'              MOVE F INTO MESSAGE\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATUORV TM    DS1RECFM,X'80'          TEST FOR V RECFM\n         BZ    DSATV\n         MVI   0(R5),C'U'              RECFM IS U\n         LA    R5,1(R5)                INCREMENT POINTER\n         B     DSATT\nDSATV    MVI   0(R5),C'V'              RECFM IS V\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATT    TM    DS1RECFM,X'20'          TEST FOR T RECFM\n         BZ    DSATB\n         MVI   0(R5),C'T'              RECFM IS T\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATB    TM    DS1RECFM,X'10'          TEST FOR BLOCKING\n         BZ    DSATS\n         MVI   0(R5),C'B'              ADD B TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATS    TM    DS1RECFM,X'08'          TEST FOR SPANNED RECORDS\n         BZ    DSATA\n         MVI   0(R5),C'S'              ADD S TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATA    TM    DS1RECFM,X'04'          TEST FOR ASA CONTROL CHARACTERS\n         BZ    DSATM\n         MVI   0(R5),C'A'              ADD A TO RECFM\n         LA    R5,1(R5)                INCREMENT POINTER\nDSATM    TM    DS1RECFM,X'02'          TEST FOR MACHINE CONTROL CHARS\n         BZ    DSATBLK\n         MVI   0(R5),C'M'              ADD M TO RECFM\n*--------GET BLOCKSIZE\nDSATBLK  LH    R1,DS1BLKL              LOAD BLKSIZE\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   5(5,R2),DSATDEC+3       MOVE INTO MESSAGE\n*--------GET LRECL\n         LH    R1,DS1LRECL             LOAD LRECL\n         CVD   R1,DSATPDEC             CONVERT TO DECIMAL\n         MVC   DSATDEC,=X'4020202020202120'  MOVE MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n         MVC   11(5,R2),DSATDEC+3      MOVE INTO MESSAGE\n         BR    R14                     RETURN\n         TITLE 'CREATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CREATION DATE                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CRDATE  L     R1,DS1CREDT-1           LOAD CREATION DATE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,CRDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'EXPIRATION DATE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        EXPIRATION DATE                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$EXDATE  L     R1,DS1EXPDT             LOAD EXPIRATION DATE\n         SRA   R1,8                    SHIFT RIGHT 1 BYTE\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,EXDATFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         BR    R14                     RETURN\n         TITLE 'LAST DATE REFERENCED PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LAST DATE REFERENCED - MVS SU 60 OR EQUIVALENT REQUIRED      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$LASTREF MVC   DSATDEC(4),DS1REFD-1    MOVE LAST DATE REF TO FULLWORD\n         L     R1,DSATDEC              LOAD DATE LAST REFERENCED\n         BAL   R5,DATECONV             CONVERT IT\n         L     R2,LREFFLD              LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DATEWORK       MOVE DATE INTO MESSAGE  HD JAN99\n         TM    DS1DSIND,X'02'          SEE IF UPDATE INDICATOR ON\n         BZ    REFRTRN\n         MVI   10(R2),C'*'             INDICATE UPDATE BIT ON  HD JAN99\nREFRTRN  BR    R14                     RETURN\n         SPACE ,                                                SMS0001\n***********************************************************************\n* PROCESS SMS INDICATOR FLAG                                    SMS0001\n* 1) INDICATE IF 'MANAGED' FLAG IS ON.                          SMS0001\n* 2) IF BLOCKSIZE IS DISPLAYED, SET INDICATOR IF IT WAS SYSTEM  SMS0001\n*    DETERMINED.                                                SMS0001\n* 3) DO SMS KEYWORDS IF SPECIFIED.                              SMS0003\n***********************************************************************\n$SMS     EQU   *                                                SMS0001\n         CLC   DCB,=H'2'               Q:NODCB SPECIFIED?       SMS0001\n         BE    $SMS_100                Y-DON'T WORRY ABOUT BLKSZSMS0001\n         TM    DS1SMSFG,DS1CRSDB       Q:SDB BLKSZ?             SMS0001\n         BNO   $SMS_100                N-DON'T FLAG             SMS0001\n         L     R2,DCBFLD               Y-GET ADDR OF PARM       SMS0001\n         MVI   10(R2),C'*'             SET SDB BLKSZ INDICATOR  SMS0001\n$SMS_100 EQU   *                                                SMS0001\n         L     R2,SMSFLD               LOAD OUTPUT AREA ADDRESS SMS0001\n         MVC   0(3,R2),=C'YES'         ASSUME SMS MANAGED       SMS0001\n         TM    DS1SMSFG,DS1SMSDS       Q:CORRECT ASSUMPTION?    SMS0001\n         BOR   R14                     Y-WE'RE SET              SMS0001\n         MVC   0(3,R2),=C'NO '         N-CHANGE TO NO           SMS0001\n         BR    R14                     RETURN TO CALLER         SMS0001\n$SMS2    EQU   *                                                SMS0002\n         ICM   R15,B'1111',IGWASMSV    GET ROUTINE ADDRESS      SMS0002\n         BZR   R14                     RETURN IF NONE           SMS0002\n         SPACE ,                                                SMS0002\n         ST    R14,$SMSAVE             SAVE RETURN ADDRESS      SMS0002\n         BAS   R14,AMODE31             TO CALL ROUTINE          SMS0002\n         CALL  (15),MF=(E,CALL_L)      GET SMS INFO             SMS0002\n         BAS   R14,AMODE24             TO GET BACK              SMS0002\n         LTR   R15,R15                 DID IT WORK?             SMS0002\n         BNZ   $SMS_900                N-SKIP THIS JUNK         SMS0002\nPROMGMTC CLI   MGMTCLAS+1,2            TEST FOR NOMGMTCLASS     SMS0002\n         BE    PROSTORC                SKIP                     SMS0002\n         L     R2,MGMTCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWMGMTC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PROSTORC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWMGMTC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPROSTORC CLI   STORCLAS+1,2            TEST FOR NOSTORCLASS     SMS0002\n         BE    PRODATAC                SKIP                     SMS0002\n         L     R2,STORCFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWSTORC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    PRODATAC                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWSTORC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\nPRODATAC CLI   DATACLAS+1,2            TEST FOR NODATACLASS     SMS0002\n         BE    $SMS_900                SKIP                     SMS0002\n         L     R2,DATACFLD             GET POINTER TO FIELD     SMS0002\n         MVC   0(6,R2),=C'(NULL)'      DEFAULT VALUE            SMS0002\n         CLI   IGWDATAC,C' '           Q:FIELD AVAILABLE?       SMS0002\n         BE    $SMS_900                N-LEAVE NULL             SMS0002\n         MVC   0(8,R2),IGWDATAC        Y-COPY 1ST 8 BYTES       SMS0002\n         SPACE ,                                                SMS0002\n$SMS_900 EQU   *                                                SMS0002\n         L     R14,$SMSAVE             RESTORE RETURN ADDRESS   SMS0002\n         BR    R14                     RETURN TO CALLER         SMS0001\nAMODE31  EQU   *                                                SMS0002\n         O     R14,=X'80000000'        SET 31-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 31-BIT MODE    SMS0002\nAMODE24  EQU   *                                                SMS0002\n         LA    R14,0(,R14)             SET 24-BIT ADDRESS MODE  SMS0002\n         BSM   R0,R14                  RETURN IN 24-BIT MODE    SMS0002\n         SPACE\n         TITLE 'DATE CONVERSION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        DATE CONVERSION ROUTINE                                      *\n*                                                                     *\n*             THIS SECTION WAS ADAPTED FROM AN INSTALLATION           *\n*             DATE CONVERSION ROUTINE TO AVOID HAVING MANY            *\n*             DIFFERENT DATE CONVERSION ROUTINES.  IT IS              *\n*             NECESSARY TO CONVERT THE DATE TO PACKED DECIMAL         *\n*             FORM (AS IS THE DATE RETURNED BY TIME) TO               *\n*             CONFORM TO THIS ROUTINE.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDATECONV LA    R1,0(R1)                ZERO HIGH BYTE\n         ST    R1,WORK                 STORE IT\n         ST    R1,DSATPDEC             SAVE IT AGAIN\n         SRA   R1,16                   GET YEAR IN LOW BYTE\n         AH    R1,=H'1900'             1900 IS BASE YEAR       HD JAN99\n         MH    R1,=H'1000'             MULTIPLY BY 1000\n         AH    R1,WORK+2               ADD DAY\n         CVD   R1,DSATDEC              CONVERT TO DECIMAL\n         MVC   WORK,DSATDEC+4          COPY LOW ORDER WORD\n*--------OBTAIN MAY RETURN A DSCB WITH BAD DATE FIELDS\n*--------      IF IT THINKS THAT THE DATA SET IS VSAM\n*--------THE FOLLOWING CODE IS TO VALIDITY CHECK THE DATE\n*--------      FIELD TO INSURE THAT IT IS A VALID PACKED\n*--------      DECIMAL FIELD BEFORE ATTEMPTING TO OPERATE\n*--------      ON IT AND RISK AN 0C7.\n*--------IF DATE IS INVALID, DISPLAY IT IN HEX.\nDATECON1 UNPK  DSATDEC,WORK            UNPACK THE DATE\n         OI    DSATDEC+7,X'F0'         SET ZONE FIELD\n         TRT   DSATDEC,DIGITMSK        TEST FOR INVALID CHARACTERS\n         BNE   BADDAY\n         TM    WORK+3,X'08'            VALIDATE SIGN\n         BZ    BADDAY\n         TM    WORK+3,X'06'\n         BZ    BADDAY\n*--------DATE IS VALID DECIMAL FORM\n         CP    DAY,=P'366'             TEST MAX\n         BH    BADDAY\n         CP    DATE,=P'0'              TEST FOR ZERO DATE\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+3,X'F0'          SET ZONE                HD JAN99\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL4'0'          00 00 00 0C             HD JAN99\n         MVO   YEAR2,YEAR              0Y YY YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     CP    DAY,=P'1'               TEST MINIMUM DAY\n         BL    BADDAY\n         CP    DAY,=P'366'             TEST MAXIMUM DAY\n         BH    BADDAY\n         LA    R6,CALTABLE             LOAD TABLE ADDRESS\n         USING CALENDAR,R6             SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP     CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   OUT\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R6,LEN(R6)              INCREMENT TO NEXT MONTH\n         B     LOOP\nOUT      UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         MVC   YRZ(4),YR+1             MOVE IN YEAR            HD JUL98\n         B     DATERTRN\nNODATE   MVC   DATEWORK,=CL12' '       BLANK OUTPUT FIELD\n         B     DATERTRN\n*--------DATE INVALID, DISPLAY IT IN HEX\nBADDAY   UNPK  DSATDEC(7),DSATPDEC+1(4)  UNPACK INVALID DATE FIELD\n         TR    DSATDEC(6),TRTABLE      TRANSLATE TO EBCDIC\n         MVC   DATEWORK,=CL12' '       CLEAR OUTPUT AREA\n         MVC   DATEWORK+1(6),DSATDEC   MOVE IN HEX DATE VALUE\nDATERTRN BR    R5                      RETURN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALTABLE DC    PL2'31'                 JANUARY\n         DC    PL2'29'                 FEBRUARY\n         DC    PL2'31'                 MARCH\n         DC    PL2'30'                 APRIL\n         DC    PL2'31'                 MAY\n         DC    PL2'30'                 JUNE\n         DC    PL2'31'                 JULY\n         DC    PL2'31'                 AUGUST\n         DC    PL2'30'                 SEPTEMBER\n         DC    PL2'31'                 OCTOBER\n         DC    PL2'30'                 NOVEMBER\n         DC    PL2'31'                 DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                     DAYS IN MONTH\nLEN      EQU   *-DAYS                  LENGTH OF ENTRY\n         SPACE 2\nDSAT     CSECT\n         TITLE 'CCHHR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        CCHHR PROCESSING                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n$CCHHR   UNPK  DSATDEC(11),DSATFMT1+96(6)  UNPACK CCHHR PLUS ONE BYTE\n         TR    DSATDEC(10),TRTABLE     TRANSLATE TO CHARACTER\n         L     R2,CCHHRFLD             LOAD OUTPUT AREA ADDRESS\n         MVC   0(10,R2),DSATDEC        COPY CCHHR TO OUTPUT LINE\n         BR    R14                     RETURN\n         TITLE 'ERROR PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ERRORS                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*--------ERROR IN PARSE ROUTINE\n         USING DSAT+4096+4096,R8                                SMS0003\nERRPARS  ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(28),DSATERR1                             SMS0003\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     SETERROR\n*--------NO PREFIX, NO DSNAME, AND NO USERID (BATCH)\n         USING DSAT+4096+4096,R8                                SMS0003\nNOID     ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE(32),DSATERR7                             SMS0003\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     RLSA\n*--------TOO MANY OPERANDS - OUTPUT WILL EXCEED LINE LENGTH'\n         USING DSAT+4096+4096,R8                                SMS0003\nTOOLONG  ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   OUTLINE,BLANKS                                   SMS0003\n         MVC   OUTLINE(44),DSATERR4\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\nRLSA     IKJRLSA DSATANS               FREE PARSE WORK AREA\n*--------SET ERROR INDICATOR AND DISPLAY ERROR MESSAGE\nSETERROR OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         BAL   R2,PUTL2                PUT MESSAGE\n         LA    R3,16                   SET CONDITION CODE\n         B     EXIT2\n*--------ERROR IN LOCATE MACRO\nLOCERROR DS    0H                                              HD JAN99\n         C     R15,=F'8'               DATASET NOT FOUND?      HD JAN99\n         BNE   LOCERR                                          HD JAN99\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F    HD JAN99\nLOCERR   SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R15,LOCMSGS-32(R15)     LOAD MESSAGE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS,$NOTPOPS          INDICATE ERROR\nPUTMSG   BAL   R2,PUTL                 PRINT IT\n         B     ENDGRP                  TERMINATE THIS GROUP OR DSNAME\n*--------NOT A DIRECT ACCESS DEVICE\nNOTDASD  CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT+$NOTPOPS    COUNT THIS DATA SET, ERROR\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR2       COPY MESSAGE TO OUTPUT LINE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         B     PUTLINE                 PRINT THE LINE\n*--------ERROR IN OBTAIN MACRO\nDSNERR   CH    R15,=H'8'               TEST RETURN CODE\n         BH    DSNERR1                 WAS MH (INCORRECTLY)         ABL\n         BE    TESTVALL\n         CLC   DAONLY,=H'2'            SEE IF MESSAGE TO BE SUPRESSED\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET\n         CLC   DSATSER,=C'MIGRAT'      MIGRAT VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         CLC   DSATSER,=C'ARCIVE'      ARCIVE VOLUME?             ABL94\n         BE    PUTLINE                 YES, BRANCH                ABL94\n         B     DSNERR1\nTESTVALL L     R1,VOLSER               TEST FOR VOLUME(*)\n         CLI   0(R1),C'*'\n         BE    RESETLIN\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\nDSNERR1  OI    FLAGS,$NOTPOPS          INDICATE ERROR\n         SLA   R15,3                   MULTIPLY RETURN CODE BY 8\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         LA    R15,DSNERRS-32(R15)     LOAD PROPER MESSAGE ADDRESS\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(32,R1),0(R15)         COPY MESSAGE TO OUTPUT LINE\n         OI    FLAGS2,$ONENF           INDICATE ONE D/S N/F       ABL99\n         B     PUTLINE                 PRINT IT\n*--------VOLUME COUNT IS NEGATIVE OR ZERO\nBADVOLCT L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),DSATERR5       MOVE IN ERROR MESSAGE\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR\n         B     PUTLINE                 DISPLAY MESSAGE\nGDGMSGL  L     R1,ERRFLD               LOAD ERROR FIELD ADDRESS     SPG\n         USING DSAT+4096+4096,R8                                SMS0003\n         ST    R8,SAVER8                                        SMS0003\n         L     R8,BASER3                                        SMS0003\n         MVC   0(32,R1),GDGMSG2        MOVE IN GDG MESSAGE 2        SPG\n         DROP  R8                                               SMS0003\n         L     R8,SAVER8                                        SMS0003\n         MVC   VOLCNT,=H'1'            SET COUNT TO 1               SPG\n         OI    FLAGS,$NOTPOPS          SET ERROR INDICATOR          SPG\n         CLC   GDGDATA,=H'1'           SEE IF GDG DATA REQUESTED    ABL\n         BNE   RESETLIN                NO, IGNORE ICF MESSAGE       ABL\n         OI    FLAGS,COUNT             COUNT THIS DATA SET          ABL\n         B     PUTLINE                 DISPLAY MESSAGE              SPG\n         TITLE 'DISPLAY LINES'\n***********************************************************************\n*                                                                     *\n*        DISPLAY LINE                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     CLC   PRINT,=H'2'             TEST FOR NOPRINT\n         BE    PUTLHPDS\nPUTL2    PUTLINE OUTPUT=(DSATHEDR,,,DATA),MF=(E,DSATIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            START OF MESSAGE\n         SR    R0,R0                   FOR ICM                  ABL-PDS\n         ICM   R0,B'0001',DSATHEDR+1   LENGTH OF MESSAGE+4      ABL-PDS\n         SH    R0,=H'4'                LENGTH OF MESSAGE        ABL-PDS\n         STCM  R0,B'0001',0(R1)        UPDATE FOR PDS           ABL-PDS\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\n         MVI   DSATHEDR+3,0            CLEAR THE LENGTH BYTE    ABL-PDS\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY\n         BZ    PUTLBACK\n         PUT   HARDCPY,OUTLINE         PRINT LINE\nPUTLBACK BR    R2                      RETURN\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)   DCB EXIT ROUTINE START\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                         EXIT\n         TITLE 'CONSTANT DATA - LITERAL POOL'\n***********************************************************************\n*                                                                     *\n*        CONSTANT DATA                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG\n         TITLE 'CONSTANT DATA - MODEL CONTROL BLOCKS'\nNAME     CAMLST NAME,0,,0\nNAMECVOL CAMLST NAME,0,0,0\n*TTRLOC  CAMLST BLOCK,0,0,0                                    #DD09294\nTTRLOC   DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n         DC    A(0)                              PARAMETER THREE\n         DC    A(0)                              PARAMETER FOUR\nSEARCH   CAMLST SEARCH,0,0,0\nSEEK     CAMLST SEEK,0,0,0\nDIGITMSK EQU   *-X'F0'\n         DC    X'00000000000000000000FFFFFFFFFFFF' MASK FOR DETECTING\n*                                                  INVALID DEC DIGITS\nTRTABLE  EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     HEX TO EBCDIC TRANSLATE TABLE\nIGWASMSC DC    CL8'IGWASMS'            SMS ATTRIBUTE ROUTINE    SMS0002\nMOVENAME MVC   0(0,R2),0(R4)\nMODLPTPB PUTLINE MF=L\nENDPTPB  EQU   *\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n         TITLE 'DEVICE TABLE'\n***********************************************************************\n*                                                                     *\n*        DEVICE TABLE                                                 *\n*                                                                     *\n*        A ONE BYTE ENTRY FOR EACH TYPE OF DIRECT ACCESS DEVICE       *\n*        WHICH DEFINES THE NUMBER OF TRACKS PER CYLINDER FOR          *\n*        THE DEVICE.  IF AN ENTRY IS ZERO, THE DEVICE IS              *\n*        UNASSIGNED OR UNSUPPORTED BY DSAT.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nTRKSCYL  DC    AL1(000),CL7'       '   00 (00) - UNASSIGNED\n         DC    AL1(010),CL7'2311   '   01 (01) - 2311 DISK\n         DC    AL1(200),CL7'2301   '   02 (02) - 2301 DRUM\n         DC    AL1(010),CL7'2303   '   03 (03) - 2303 DRUM\n         DC    AL1(015),CL7'9345   '   04 (04) - 9345 DISK     HD JAN99\n         DC    AL1(000),CL7'       '   05 (05) - 2321 DATA CELL\n         DC    AL1(008),CL7'2305-1 '   06 (06) - 2305-1\n         DC    AL1(008),CL7'2305-2 '   07 (07) - 2305-2\n         DC    AL1(020),CL7'2314   '   08 (08) - 2314 DISK\n         DC    AL1(019),CL7'3330   '   09 (09) - 3330 DISK\n         DC    AL1(000),CL7'       '   10 (0A) - UNASSIGNED\n         DC    AL1(030),CL7'3350   '   11 (0B) - 3350\n         DC    AL1(012),CL7'3375   '   12 (0C) - 3375 DISK\n         DC    AL1(019),CL7'3330-1 '   13 (0D) - 3330-11 DISK\n         DC    AL1(015),CL7'3380   '   14 (0E) - 3380 DISK\n         DC    AL1(015),CL7'3390   '   15 (0F) - 3390 DISK\n         TITLE 'DATA SET ORGANIZATION TABLE'\n***********************************************************************\n*                                                                     *\n*        DATA SET ORGANIZATION TABLE                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDSORGTBL DC    X'8000',C'IS'           INDEXED SEQUENTIAL\n         DC    X'4000',C'PS'           PHYSICAL SEQUENTIAL\n         DC    X'2000',C'DA'           DIRECT ACCESS\n         DC    X'0200',C'PO'           PARTITIONED ORGANIZATION\nDSORGEND DC    X'0008',C'AM'           VSAM\n         TITLE 'CONSTANT DATA - MESSAGES'\n         SPACE\n*ASE01   EQU   DSAT                                             SMS0003\n*ASE02   EQU   DSAT+4096                                        SMS0003\n*ASE03   EQU   DSAT+4096+4096                                   SMS0003\n*ASE04   EQU   DSAT+4096+4096+4096                              SMS0003\n         SPACE\nMODLINE  DC    H'204,0'                                           ABL94\n*LANKS   DC    CL200' '                                           ABL94\nGDGMSG   DC    CL40'GDG -- OPTIONS=NONE CURRENT=000 MAX=000'\nGDGMSG2  DC    CL40'GDG -- IN ICF CATALOG           '               SPG\nDSATERR1 DC    CL28'UNABLE TO INTERPRET COMMAND'\nDSATERR2 DC    CL32'                                '\nDSATERR3 DC    CL32'TOO MANY NAMES, INCOMPLETE LIST:'               ABL\nDSATERR4 DC    CL44'TOO MUCH OUTPUT REQUESTED - LINE EXCEEDED'\nDSATERR5 DC    CL32'VOLUME COUNT IS ZERO OR NEGATIVE'\nDSATERR6 DC    CL48'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED'\nDSATERR7 DC    CL32'NO PREFIX, NO DSNAME, NO USERID '\nDSATERR8 DC    CL32'IOCINFO ERROR RC=XXXX,RS=XXXX'             HD JAN99\nDSATERR9 DC    CL32'UCBSCAN ERROR RC=XXXX,RS=XXXX'             HD JAN99\nRCPT     EQU   17                                              HD JAN99\nRSPT     EQU   25                                              HD JAN99\nEMPTYNDX DC    CL32'EMPTY INDEX STRUCTURE           '\nEMPTYGDG DC    CL32'EMPTY GENERATION INDEX STRUCTURE'\nNOVOL    DC    CL32'NOT ON ANY MOUNTED VOLUME       '\nDSNERRS  DC    CL32'VOLUME NOT MOUNTED              '  ORC04\n         DC    CL32'NOT ON VOLUME                   '  ORC08\n         DC    CL32'INVALID WORK AREA POINTER       '  ORC12\n         DC    CL32'CCHH NOT IN VTOC                '  ORC16\nLOCMSGS  DC    CL32'CATALOG VOLUME NOT MOUNTED      '  LRC04\n         DC    CL32'NAME NOT FOUND                  '  LRC08\n         DC    CL32'INDEX NAME SPECIFIED            '  LRC12\n         DC    CL32'DATA SET AT LOWER LEVEL         '  LRC16\n         DC    CL32'SYNTAX ERROR IN DSNAME          '  LRC20\n         DC    CL32'PERMANENT CATALOG I/O ERROR     '  LRC24\n         DC    CL32'TTR OUT OF SYSCTLG              '  LRC28\n         DC    CL32'INVALID WORK AREA POINTER       '  LRC32\n         DC    CL32'USER CATALOG NOT ALLOCATED      '  LRC36\n         DC    CL32'WORK AREA TOO SMALL      CODE 40'  LRC40\n         DC    CL32'WORK AREA TOO SMALL      CODE 44'  LRC44\n         DC    CL32'INVALID OPERATION-RETURN CODE 48'  LRC48\n         DC    CL32'I/O ERROR ON USER VOLUME-CODE 52'  LRC52\n         DC    CL32'PASSWORD NOT CORRECT            '  LRC56\n         DC    CL32'STEPCAT/JOBCAT NOT OPEN         '  LRC60\n         TITLE 'PDS DIRECTORY PROCESSING SUBROUTINE - DSATPDS'\n***********************************************************************\n*                                                                     *\n*        PDS DIRECTORY PROCESSING SUBROUTINE                          *\n*                                                                     *\n*        CALLED FROM DSAT TO DYNAMICALLY ALLOCATE A PDS, READ THE     *\n*        DIRECTORY AND COUNT DIRECTORY BLOCKS AND ENTRIES.            *\n*                                                                     *\n*        THIS SUBROUTINE IS ONLY CALLED WHEN THE PDS OPTION IS        *\n*        REQUESTED AND A PDS IS ENCOUNTERED.                          *\n*                                                                     *\n*        LINKAGE CONVENTIONS - THIS SUBROUTINE DEPENDS ON THE         *\n*            PREVIOUS SAVE AREA FOR ADDRESSABILITY TO THE WORK        *\n*            AREA.  SINCE THE ENTIRE WORK AREA IS AVAILABLE, NO       *\n*            PARAMETERS ARE PASSED.                                   *\n*                                                                     *\n*            THE VALUES IN PDSTOTLS ARE CLEARED BY THE DSAT           *\n*            MAINLINE CODE AND ARE RELIED UPON TO CONTAIN ZEROS.      *\n*                                                                     *\n*        IF AN ERROR IS DETECTED, THE PDS DATA FIELD IS USED FOR      *\n*        AN ERROR MESSAGE.                                            *\n*            RC=     RETURN CODE FROM DAIR (REGISTER 15)              *\n*            DARC=   DYNAMIC ALLOCATION RETURN CODE (DAXXDARC FIELD)  *\n*            CTRC=   CATALOG RETURN CODE (DAXXCTRC FIELD)             *\n*                                                                     *\n*            SEE GC28-6764 GUIDE TO WRITING A TMP OR CP   (MVT, SVS)  *\n*             OR GC28-0627 OS/VS2 SPL: JOB MANAGMENT      (MVS)       *\n*             FOR DYNAMIC ALLOCATION RETURN CODE DESCRIPTIONS.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nDSATPDS  $ENTER BASE=R12,                                              +\n               SAVE=SAVE2\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R11,4(R13)              LOAD WORK AREA ADDRESS\n         USING DSATSAVE,R11            DSECT ADDRESSABILITY\n         DROP  R13                     I DON'T WANT IT TO USE 13\n         LA    R10,DSATDAPL            LOAD DAPL ADDRESS\n         USING DAPL,R10                DAPL ADDRESSABILITY\n         SPACE 2\n*--------SET UP DAPB'S\n         LA    R9,DA18DAPB             LOAD FREE DAPB ADDRESS\n         USING DAPB18,R9               DEFINE BASE REGISTER\n         XC    DAPB18(DA18LEN),DAPB18  ZERO OUT CONTROL BLOCK\n         MVC   DA18CD,=X'0018'         MOVE IN BLOCK CODE\n         XC    DA18PDSN,DA18PDSN       ZERO DSNAME ADDRESS POINTER\n         MVC   DA18DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA18MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA18SCLS,=CL2' '        BLANK OUT SYSOUT CLASS\n         MVI   DA18DPS2,DA18KEEP       DISP=KEEP\n         MVI   DA18CTL,DA18PERM\n         MVC   DA18JBNM,=CL8' '        BLANK OUT MEMBER NAME\n         LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               DEFINE BASE REGISTER\n         XC    DAPB08(DA08LEN),DAPB08  ZERO OUT CONTROL BLOCK\n         MVC   DA08CD,=X'0008'         MOVE IN BLOCK CODE\n         LA    R1,DSNLEN               LOAD DSNAME FIELD ADDRESS\n         ST    R1,DA08PDSN             SAVE IT\n         MVC   DA08DDN,=CL8'DSATDDN'   MOVE IN DDNAME\n         MVC   DA08UNIT,=CL8'SYSALLDA' UNIT NAME FOR EVERYTHING\n         MVC   DA08SER,=CL8' '         BLANK OUT SERIAL FIELD\n         MVC   DA08SER(6),DSATSER      COPY IN VOLUME SERIAL\n         MVC   DA08MNM,=CL8' '         BLANK OUT MEMBER NAME\n         MVC   DA08PSWD,=CL8' '        BLANK OUT PASSWORD\n         MVI   DA08DSP1,DA08SHR        DISP=(SHR,KEEP,KEEP)\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '         BLANK OUT ATTRIBUTE LIST NAME\n         DROP  R9\n*--------GET DSNAME LENGTH\n         LA    R1,DSNAME-1             LOAD START ADDR - 1\n         LA    R2,44                   LOAD MAXIMUM DSNANME LEN\nPDSEND   LA    R15,0(R2,R1)            LOAD ADDR OF CHAR\n         CLI   0(R15),C' '             TEST FOR BLANK\n         BNE   PDSSAVE\n         BCT   R2,PDSEND               DECREMENT COUNTER\nPDSSAVE  STH   R2,DSNLEN               SAVE LENGTH\n*--------SET UP OPEN LIST FORM\n         MVC   OPENLIST(OPENLEN),MODLOPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              ALLOCATE THE DATA SET                                  *\n*                                                                     *\n***********************************************************************\n*--------SET UP ALLOCATE DAPB\nSETUPDDN LA    R9,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         USING DAPB08,R9               ADDRESSABILITY FOR DSORG TEST\n         ST    R9,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    TESTORG\n         C     R15,=F'20'              TEST FOR FILE IN USE\n         BNE   ERRDAIR\n         LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         LA    R1,DA08DAPB             LOAD ALLOCATE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              FREE THE FILE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   ERRDAIR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              BE SURE DSORG PO                                       *\n*                                                                     *\n***********************************************************************\nTESTORG  TM    DA08DSO,X'02'           TEST FOR PARTITIONED\n         BZ    ERRDSORG\n*--------INITIALIZE DCB\n         MVC   DSATDCB(DCBLEN),PSDCB   COPY DCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*              OPEN DATA SET                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------OPEN THE DATA SET\n         LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         OPEN  ((R2)),MF=(E,(R1))      OPEN THE DATA SET\n         TM    DSATDCB+48,X'10'        SEE IF IT OPENED\n         BZ    ERROPEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ DIRECTORY AND COUNT BLOCKS AND ENTRIES                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LM    R2,R5,PDSTOTLS          ZERO TOTALS\n         MVI   ENDBLK,X'00'            INITIALIZE INDICATOR     LMN-CBT\nNEXTBLK  READ  DIRDECB,SF,DSATDCB,PDSREC,MF=E  READ DIR BLOCK\n         CHECK DIRDECB                 WAIT FOR COMPLETION OF READ\n         SPACE\n         LA    R6,PDSREC               LOAD RECORD ADDRESS\n         LA    R2,1(R2)                COUNT BLOCK\n         LH    R0,8(R6)                LOAD COUNT\n         SH    R0,=H'2'                LESS 2 FOR COUNT FIELD\n         LA    R6,10(R6)               BUMP PASE KEY AND COUNT\n         CLI   ENDBLK,X'FF'            IS IT END OF BLK         LMN-CBT\n         BE    NEXTBLK                 YES, GO READ ANOTHER BLK LMN-CBT\n         SPACE\nNEXTENT  LTR   R0,R0                   SEE IF ANY LEFT IN BLOCK\n         BNP   NEXTBLK\n         CLC   ENDMEMB,0(R6)           TEST FOR END OF ENTRIES\n         BNE   PROCENTR\n         MVI   ENDBLK,X'FF'            MOVE INDICATOR IN        LMN-CBT\n         LR    R3,R2                   SET USED = TOTAL\n         B     NEXTBLK\nPROCENTR LA    R4,1(R4)                COUNT ENTRY\n         TM    11(R6),X'80'            TEST FOR ALIAS\n         BZ    DIRLEN\n         LA    R5,1(R5)                COUNT ALIAS\nDIRLEN   SR    R1,R1\n         NI    11(R6),X'1F'            ZERO INDICATOR BITS\n         IC    R1,11(R6)               LOAD LENGTH\n         SLL   R1,1                    DOUBLE TO GET LENGTH IN BYTES\n         LA    R1,12(R1)               ADD FIXED FIELD LENGTH\n         AR    R6,R1                   INCREMENT POINTER\n         SR    R0,R1                   DECREMENT BYTE COUNT\n         B     NEXTENT\n*--------END OF DATA\nDIREOD   STM   R2,R5,PDSTOTLS          SAVE TOTALS\n         L     R1,PDSFLD               LOAD OUTPUT AREA ADDRESS\n         SH    R1,=H'3'                SUB FROM START OF PRINT LOC LMN\n         CVD   R2,DSATPDEC             CONVERT BLOCKS ALLOCATED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   00(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   00(7,R1),DSATDEC+1      MOVE INTO MESSAGE   LMN\n         MVC   01(6,R1),DSATDEC+2      MOVE INTO MESSAGE  LMN ABL NOV92\n         AH    R1,=H'3'                ADD TO START OF PRINT LOC   LMN\n         CVD   R3,DSATPDEC             CONVERT BLOCKS USED\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   05(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   05(7,R1),DSATDEC+1      EXPAND FOR 3380K        LMN-CBT\n         CVD   R4,DSATPDEC             CONVERT DIRECTORY ENTRIES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n***TEST  MVC   10(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n*        MVC   10(5,R1),DSATDEC+3      MOVE INTO MESSAGE\n         MVC   13(7,R1),DSATDEC+1      MOVE INTO MESSAGE       LMN-CBT\n         CVD   R5,DSATPDEC             CONVERT ALIASES\n         MVC   DSATDEC,=X'4020202020202120'  MOVE IN MASK\n         ED    DSATDEC,DSATPDEC+4      EDIT\n*        MVC   15(4,R1),DSATDEC+4      MOVE INTO MESSAGE\n         MVC   21(4,R1),DSATDEC+4      MOVE INTO MESSAGE       LMN-CBT\n*--------CLOSE THE DATA SET\nCLOSE    LA    R1,OPENLIST             LOAD ADDRESS OF OPEN LIST FORM\n         LA    R2,DSATDCB              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      THIS RELEASES FREE SPACE\n*--------FREE THE DATA SET\nFREE     LA    R1,DA18DAPB             LOAD FREE DAPB ADDRESS\n         ST    R1,DAPLDAPB             STORE DAPB ADDRESS IN DAPL\n         LA    R1,DAPL                 LOAD DAPL ADDRESS\n         LINK  EP=IKJDAIR              LINK TO DAIR\n         B     PDSRTRN\n*--------ERROR IN DYNAMIC ALLOCATION\nERRDAIR  L     R2,PDSFLD               ADDRESS OF ERROR MESSAGE FIELD\n         L     R1,DAPLDAPB             LOAD DAPB ADDRESS\n         USING DAPB08,R1               ADDRESSABILITY\n         C     R15,=F'12'              TEST FOR RETURN CODE 12\n         BNE   CTLGERR\n         CLC   DA08DARC,=X'0210'       TEST FOR DATA SET IN USE\n         BNE   DYNALCER\n         MVC   0(16,R2),=CL16' DATA SET IN USE'\n         B     PDSRTRN\nDYNALCER UNPK  DSATDEC(5),DA08DARC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=000C, DARC='\n         MVC   14(4,R2),DSATDEC        MOVE IN RETURN CODE\n         B     PDSRTRN\nCTLGERR  C     R15,=F'8'               TEST FOR CATALOG ERROR\n         BNE   OTHERERR\n         UNPK  DSATDEC(5),DA08CTRC(3)  TRANSLATE TO EBCDIC\n         TR    DSATDEC(4),TRTABLE2\n         MVC   0(14,R2),=CL14'RC=0008, CTRC='\n         MVC   14(4,R2),DSATDEC        MOVE IN ERROR CODE\n         B     PDSRTRN\nOTHERERR ST    R15,DSATPDEC            STORE RETURN CODE\n         UNPK  DSATDEC(5),DSATPDEC+2(3)\n         MVC   0(14,R2),=CL14'DAIR ERROR RC='\n         MVC   14(4,R2),DSATDEC\n         B     PDSRTRN\n*--------OPEN ERROR\nERROPEN  L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'UNABLE TO OPEN DIR'\n         B     PDSRTRN\n*--------DATA SET NOT PARTITIONED - THIS IS A PROGRAM LOGIC ERROR\nERRDSORG L     R2,PDSFLD               LOAD ERROR FIELD ADDRESS\n         MVC   0(18,R2),=CL18'DATA SET NOT A PDS'\n         B     PDSRTRN\n         EJECT\n***********************************************************************\n*                                                                     *\n*              END OF ROUTINE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPDSRTRN  $RTRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nENDMEMB  DC    XL8'FFFFFFFFFFFFFFFF'    LAST DIRECTORY ENTRY\nPSDCB    DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\nDCBLEN   EQU   *-PSDCB\nMODLOPEN OPEN  (,),MF=L\nOPENLEN  EQU   *-MODLOPEN\n         SPACE 2\nTRTABLE2 EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'\n         SPACE\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATPCL  IKJPARM  DSECT=DSATPDL\nDSN      IKJPOSIT DSNAME,LIST\nSERIAL   IKJKEYWD DEFAULT='SERIAL'\n         IKJNAME  'SERIAL'\n         IKJNAME  'NOSERIAL'\nALLOC    IKJKEYWD DEFAULT='ALLOC'\n         IKJNAME  'ALLOC'\n         IKJNAME  'NOALLOC'\nSECOND   IKJKEYWD DEFAULT='NOSECONDARY'\n         IKJNAME  'SECONDARY'\n         IKJNAME  'NOSECONDARY'\nDSORG    IKJKEYWD DEFAULT='DSORG'\n         IKJNAME  'DSORG'\n         IKJNAME  'NODSORG'\nDCB      IKJKEYWD DEFAULT='DCB'\n         IKJNAME  'DCB'\n         IKJNAME  'NODCB'\nCRDATE   IKJKEYWD DEFAULT='CRDATE'\n         IKJNAME  'CRDATE'\n         IKJNAME  'NOCRDATE'\nEXDATE   IKJKEYWD DEFAULT='NOEXDATE'\n         IKJNAME  'EXDATE'\n         IKJNAME  'NOEXDATE'\nLASTREF  IKJKEYWD DEFAULT='NOLASTREF'\n         IKJNAME  'LASTREF'\n         IKJNAME  'NOLASTREF'\nTOTALS   IKJKEYWD DEFAULT='TOTALS'\n         IKJNAME  'TOTALS'\n         IKJNAME  'NOTOTALS'\nPRINT    IKJKEYWD\n         IKJNAME  'PRINT',ALIAS='LIST'                         HD JAN99\n         IKJNAME  'NOPRINT',ALIAS='NOLIST'                     HD JAN99\nHEADER   IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nDAONLY   IKJKEYWD DEFAULT='ALL'\n         IKJNAME  'ALL'\n         IKJNAME  'DAONLY'\nGDGDATA  IKJKEYWD DEFAULT='NOGDGDATA'\n         IKJNAME  'GDGDATA'\n         IKJNAME  'NOGDGDATA'\nFULLDATA IKJKEYWD DEFAULT='NOFULL'                                ABL94\n         IKJNAME  'FULL',                                         ABL94X\n               INSERT='PDS,EXD,LAST,GDG,DEVI,SEC,CCHHR'           ABL94\n         IKJNAME  'NOFULL'                                        ABL94\nEXTENTS  IKJKEYWD DEFAULT='NOEXTENTS'                             ABL94\n         IKJNAME  'EXTENTS'                                       ABL94\n         IKJNAME  'NOEXTENTS'                                     ABL94\nSEQNO    IKJKEYWD DEFAULT='NOSEQNO'\n         IKJNAME  'SEQNO'\n         IKJNAME  'NOSEQNO'\nDEVTYPE  IKJKEYWD DEFAULT='NODEVTYPE'\n         IKJNAME  'DEVTYPE'\n         IKJNAME  'NODEVTYPE'\nDEVICE   IKJKEYWD DEFAULT='NODEVICE'\n         IKJNAME  'DEVICE'\n         IKJNAME  'NODEVICE'\nCCHHR    IKJKEYWD DEFAULT='NOCCHHR'\n         IKJNAME  'CCHHR'\n         IKJNAME  'NOCCHHR'\nPDS      IKJKEYWD DEFAULT='NOPDS'\n         IKJNAME  'PDS'\n         IKJNAME  'NOPDS'\nSMS      IKJKEYWD DEFAULT='NOSMS'                               SMS0001\n         IKJNAME 'SMS'                                          SMS0001\n         IKJNAME 'NOSMS'                                        SMS0001\nDATACLAS IKJKEYWD DEFAULT='DATACLASS'                           SMS0002\n         IKJNAME 'DATACLASS'                                    SMS0002\n         IKJNAME 'NODATACLASS'                                  SMS0002\nMGMTCLAS IKJKEYWD DEFAULT='MGMTCLASS'                           SMS0002\n         IKJNAME 'MGMTCLASS',ALIAS='MANAGEMENTCLASS'            SMS0002\n         IKJNAME 'NOMGMTCLASS',ALIAS='NOMANAGEMENTCLASS'        SMS0002\nSTORCLAS IKJKEYWD DEFAULT='STORCLASS'                           SMS0002\n         IKJNAME 'STORCLASS',ALIAS='STORAGECLASS'               SMS0002\n         IKJNAME 'NOSTORCLASS',ALIAS='NOSTORAGECLASS'           SMS0002\nGENERIC  IKJKEYWD\n         IKJNAME  'GENERIC'\nDSONLY   IKJKEYWD\n         IKJNAME  'DSONLY'\nVOLUME   IKJKEYWD\n         IKJNAME  'VOLUME',SUBFLD=VOLSUB\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nRCODE    IKJKEYWD\n         IKJNAME  'RC',SUBFLD=RCSUB\nSIZE     IKJKEYWD DEFAULT='SIZE'                                SMS0001\n         IKJNAME  'SIZE',SUBFLD=SIZSUB                          SMS0001\nVOLSUB   IKJSUBF\nVOLSER   IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='VOLUME SERIAL'\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\nRCSUB    IKJSUBF\nRC       IKJKEYWD\n         IKJNAME 'TALLOC'\n         IKJNAME 'TUSED'\n         IKJNAME 'LALLOC'\n         IKJNAME 'LUSED'\n         IKJNAME 'TDIFF'\n         IKJNAME 'LDIFF'\n         IKJNAME 'NUM'\n         IKJNAME 'PREVIOUS'\n         IKJNAME 'DSORG'\n         IKJNAME 'DIRALLOC'\n         IKJNAME 'DIRUSED'\n         IKJNAME 'ENTRIES'\n         IKJNAME 'MEMBERS'\n         IKJNAME 'ALIASES'\nSIZSUB   IKJSUBF                       ,                        SMS0001\nWORKSIZE IKJIDENT 'WORKSIZE',INTEG,DEFAULT='8192'               SMS0001\n         IKJENDP\n         TITLE 'DYNAMIC ALLOCATION CONTROL BLOCK DSECTS'\n***********************************************************************\n*                                                                     *\n*              DYNAMIC ALLOCATION CONTROL BLOCK DSECTS                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         IKJDAP18\nDA18LEN  EQU   *-DAPB18                 DAPB LENGTH\n         SPACE\n         IKJDAP08\nDA08LEN  EQU   *-DAPB08                 DAPB LENGTH\n         SPACE\n         TITLE 'WORK AREA DSECT'\n***********************************************************************\n*                                                                     *\n*                  WORK AREA DSECT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nDSATDS   DSECT\nDSATSAVE DS    18A                     SAVE AREA\nSAVE2    DS    18F                     SAVE AREA\nDSATDCB1 CAMLST SEARCH,0,0,0\nDSATDCB3 CAMLST SEEK,0,0,0\nLOCLIST  CAMLST NAME,0,,0              LOCATE BY NAME\nLOCLIST2 CAMLST NAME,0,0,0             LOCATE BY NAME AND CVOL\n*LOCBYTTR CAMLST BLOCK,0,0,0           LOCATE BY TTR           #DD09294\nLOCBYTTR DS    0F                                ALIGN ON FULL WORD\n         DC    AL1(194)                          THREE BYTES OF FLAGS\n         DC    AL1(0)                            INDICATING THE FUNC-\n         DC    AL1(0)                            TION TO BE PERFORMED\n         DC    AL1(0)                            NO OPTION THREE\n         DC    A(0)                              PARAMETER TWO\n*                                                              HD JAN99\nIOCLIST  IOCINFO MF=(L,IOCAREA,0D)                             HD JAN99\n*                                                              HD JAN99\nUCBLIST  UCBSCAN MF=(L,SCANAREA,0D)                            HD JAN99\n*                                                              HD JAN99\nDSATPTPB PUTLINE MF=L                  LIST FORM OF PUTLINE\nDSATIOPL DS    0A                      ALIGN TO FULLWORD\n         ORG   *+IOPLLEN               LENGTH OF CONTROL BLOCK\nDSATPPL  DS    0A                      ALIGN TO FULLWORD\n         ORG   *+PPLLEN                LENGTH OF CONTROL BLOCK\nDSATANS  DS    A                       ADDRESS OF PARSE ANSWER AREA\nDSATECB  DS    F                       EVENT CONTROL BLOCK\n         SPACE\nDSATDAPL DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DAPLLEN\n         SPACE\nDA18DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA18LEN\n         SPACE\nDA08DAPB DS    0F                      FULLWORD ALIGNMENT\n         ORG   *+DA08LEN\nCURRBLK  DS    A                       ADDRESS OF CURRENT CAT BLOCK\nENDWORK  DS    A                       ADDRESS OF END OF VSAM WORK AREA\nTOTLS    DS    F                       TOTAL TRACKS ALLOCATED\n         DS    F                       TOTAL TRACKS FREE\n         DS    F                       LAST DATA SET TRACKS ALLOCATED\n         DS    F                       LAST DATA SET TRACKS FREE\n         DS    F                       NUMBER OF DATA SETS DISPLAYED\nPDSTOTLS DS    F                       NUMBER OF DIR BLOCKS ALLOCATED\n         DS    F                       NUMBER OF DIR BLOCKS USED\n         DS    F                       NUMBER OF DIRECTORY ENTRIES\n         DS    F                       NUMBER OF ALIASES\nRETURNRG DS    F                       RETURN REGISTER SAVE       ABL94\nDECWORK  DS    D                       DOUBLE WORD WORK AREA      ABL94\nDECNUM   DS    CL12                    RESULT AREA                ABL94\nVOLCNT   DS    H                       VOLUME COUNT\nTRKPRCYL DS    H                       TRACKS PER CYLINDER\nSERFLD   DS    A                       ADDRESS OF SERIAL FIELD\nDEVFLD   DS    A                       ADDRESS OF DEVTYPE FIELD\nDEVFIELD DS    A                       ADDRESS OF DEVICE NAME FIELD\nALLOCFLD DS    A                       ADDRESS OF ALLOCATION FIELD\nDSORGFLD DS    A                       ADDRESS OF DSORG FIELD\nPDSFLD   DS    A                       ADDRESS OF PDS INFO FIELD\nDCBFLD   DS    A                       ADDRESS OF DCB FIELD\nCRDATFLD DS    A                       ADDRESS OF CREATION DATE FIELD\nEXDATFLD DS    A                       ADDRESS OF EXPIRATION DATE FIELD\nLREFFLD  DS    A                       ADDRESS OF DATE LAST REF FIELD\nSMSFLD   DS    A                       ADDR OF SMS FIELD        SMS0001\nDATACFLD DS    A                       ADDR OF DATACLAS FIELD   SMS0002\nMGMTCFLD DS    A                       ADDR OF MGMTCLAS FIELD   SMS0002\nSTORCFLD DS    A                       ADDR OF STORCLAS FIELD   SMS0002\nDSNFLD   DS    A                       ADDRESS OF DSNAME FIELD\nERRFLD   DS    A                       ADDRESS OF ERROR FIELD\nCCHHRFLD DS    A                       ADDRESS OF CCHHR FIELD\nPDSMSGA  DS    F                       ADDRESS OF PDS INTERFACE\nSERPTR   DS    A                       SERIAL TABLE POINTER\nLASTUCB  DS    A                       LAST UCB PROCESSED ADDRESS\nEXTENTLF DS    F                       NUMBER OF EXTENTS LEFT ABL NOV92\nFLAGS    DS    X                       INDICATORS\nNOTEMPTY EQU   X'80'  1... ....          INDEX IS NOT EMPTY\nGDG      EQU   X'40'  .1.. ....          GDG BEING PROCESSED\nCOUNT    EQU   X'20'  ..1. ....          COUNT THIS DATA SET\nDSATGRP  EQU   X'10'  ...1 ....          GROUP PROCESSING IN PROGRESS\n$MULTVOL EQU   X'08'  .... 1...          MULTI-VOLUME DATA SET\n$NOTPOPS EQU   X'04'  .... .1..          DATA SET NOT PS OR PO\n$DSPO    EQU   X'02'  .... ..1.          DATA SET IS PARTITIONED\n$DSPS    EQU   X'01'  .... ...1          DATA SET IS SEQUENTIAL\nRESET    EQU   $NOTPOPS+$DSPO+$DSPS+$MULTVOL   RESET MASK\nFLAGS2   DS    X                       MORE INDICATORS\n$VSAMLOC EQU   X'80'  1... ....          VSAM LOCATE IN PROGRESS\n$INCMPLT EQU   X'40'  .1.. ....          TOO MANY DSNAMES\n$FOUND   EQU   X'20'  ..1. ....          DATA SET FOUND\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n$ONENF   EQU   X'08'  .... 1...          AT LEAST ONE D/S NOT FOUND\n*                     .... .XXX          NOT USED              HD JAN99\nUNPKAREA DC    D'0'      DOUBLEWORD FOR MAINUPLATING NUMBERS   HD JAN99\n         SPACE 1                                               HD JAN99\nTOKEN    DS    CL48      TOKEN FOR DYNAMIC I/O CONFIG          HD JAN99\nICRETN   DS    F         IOCINFO RETURN CODE                   HD JAN99\nICRSN    DS    F         IOCINFO REASON CODE                   HD JAN99\nUSRETN   DS    F         UCBSCAN RETURN CODE                   HD JAN99\nUSRSN    DS    F         UCBSCAN REASON CODE                   HD JAN99\n*                                                              HD JAN99\n*  UCBSCAN WORK AREA AND STORAGE FOR THE UCB COPY              HD JAN99\n*                                                              HD JAN99\nUWORK    DS   XL100     WORK AREA, MUST BE ZEROED              HD JAN99\nUCBAR    DS   CL48      COPY OF THE UCB PLACED HERE            HD JAN99\n*                                                              HD JAN99\nDSATSER  DS    CL6                     SERIAL\nINDEXLEN DS    X                       LENGTH OF INDEX NAME\nINDEX    DS    CL44                    INDEX NAME\n         DS    0F\nDSNLEN   DS    H                       LENGTH OF DSNAME (PDS)\nDSNAME   DS    CL44                    DSNAME\n         DS    CL8                     OVERFLOW BLANKS FOR LONG NAMES\nDSATHEDR DS    H,H                     MESSAGE HEADER\nOUTLINE  DS    CL200                   OUTPUT LINE                ABL94\n         ORG   OUTLINE+4                                          ABL94\nOL@XTNT  DS    CL3,CL3                                            ABL94\nOL@START DS    CL9,CL2                                            ABL94\nOL@STRK  DS    CL5,CL3                                            ABL94\nOL@END   DS    CL9,CL2                                            ABL94\nOL@ETRK  DS    CL5,CL3                                            ABL94\nOL@LNTH  DS    CL5,CL2                                            ABL94\nOL@XTYPE DS    CL29                                               ABL94\n         ORG   ,                                                  ABL94\nHALF     DS    H                       HALFWORD ALIGNED WORK AREA\nDSATDEC  DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDSATPDEC DS    D                       WORK AREA FOR DECIMAL CONVERSION\nDATEWORK DS    0CL12                   WORK AREA FOR DATE CONVERSION\nMO       DS    CL2                     MONTH\nSLASH1   DS    C                       SLASH\nDA       DS    CL2                     DAY\nSLASH2   DS    C                       SLASH\nYRZ      DS    CL4                     YEAR   YYYY   ZONED     HD JUL98\nJULIAN   DS    0CL8                    JULIAN DATE - EBCDIC    HD JUL98\nYR       DS    CL4                     YEAR   0YYYY            HD JUL98\nJULDAY   DS    CL3                     JULIAN DAY\nBLANK    DS    C                       BLANK\nWORK     DS    0F                      DATE                    HD JAN99\nDATE     DS    0CL4                    JULIAN DATE - PACKED    HD JAN99\nYEAR     DS    CL2                     YEAR - YYYY NO SIGN     HD JAN99\nDAY      DS    CL2                     DD DS - SIGN LOW ORDER  HD JAN99\nMONTHP   DS    PL2                     0M MS\nTARGET   DS    0CL4                    0Y YY YS  -  0Q QS RS   HD JAN99\n         DS    C                       0Q     PART OF QUOTIENT HD JAN99\nYEAR2    DS    0PL3                    0Y YS  YEAR AND SIGN    HD JAN99\n         DS    CL2                     QS QUOTIENT AND SIGN    HD JAN99\nREM      DS    C                       RS  REMAINDER AND SIGN  HD JAN99\nDSATFMT1 DS    0D,148C                 FORMAT 1 DSCB (DS DESCRIPTION)\nDSATFMT3 DS    0D,148C                 FORMAT 3 DSCB (ADD EXTENTS)\nCATBLOCK DS    0D,265C                 CATALOG BLOCK\nCVOL     DS    CL6                     CONTROL VOLUME SERIAL\nTTR      DS    XL3                     TTR OF CATALOG BLOCK\nFIRSTBLK DS    A                       ADDRESS OF FIRST CATALOG BLOCK\nENDNAME  DS    A                       ADDRESS OF END OF INDEX NAME\n         #CTGPL\nWORKAREA DS    A                       ADDRESS OF CATALOG WORK AREA\nWORKLEN  DS    F                       LENGTH OF CATALOG WORK AREA\n*\n*        FOR LOCATE BY TTR, THIS AREA IS LARGE ENOUGH TO CONTAIN\n*        22 (MAXIMUM NUMBER OF LEVELS IN A DATA SET NAME) CATALOG\n*        BLOCKS.  EACH 264 BYTE BLOCK IS ALLOCATED AS FOLOWS:\n*\n*                 A                      POINTER TO ENTRY PROCESSED\n*                 A                      NOT USED (NEEDED TO ALIGN)\n*                 CL256                  CATALOG BLOCK\n*\n*        FOR VSAM LOCATES, THIS AREA CONTAINS A 4 BYTE HEADER PLUS\n*        45 BYTE DSNAME ENTRIES.\n*                 EACH 45 BYTE ENTRY CONSISTS OF -\n*                 A  1 BYTE TYPE CODE\n*                 A 44 BYTE DSNAME\n*\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=*-*                                      ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         SPACE\nOPENLIST OPEN  (,),MF=L                OPEN CONTROL BLOCK LIST FORM\n         SPACE\n         READ  DIRDECB,SF,,,MF=L       LIST FORM OF READ\n         SPACE\nDSATDCB  DCB   DDNAME=DSATDDN,                                         +\n               DSORG=PS,                                               +\n               KEYLEN=8,                                               +\n               RECFM=F,                                                +\n               BLKSIZE=256,                                            +\n               EODAD=DIREOD,                                           +\n               MACRF=R\n         SPACE\nPDSREC   DS    264X                    DIRECTORY RECORD\nENDBLK   DS    X              LAST USED BLOCK INDICATOR        LMN-CBT\nSHOWCAT  SHOWCAT AREA=*-*,NAME=*-*,MF=L\nSHOWCATA DS    CL100          SHOWCAT AREA\nBLANKS   DS    CL200                   BLANK AREA               SMS0002\n         SPACE\n****************************************************************SMS0002\n*        IGWASMS FIELDS                                               *\n****************************************************************SMS0002\n         SPACE\nIGWRC    DS    F                       RC FROM IGWASMS          SMS0002\nIGWREAS  DS    F                       REASON CODE FROM IGWASMS SMS0002\nIGWPROB  DS    2F                      PROB DETERMINATION INFO  SMS0002\nIGWLEN   DS    F                       LENGTH OF DATA SET NAME  SMS0002\nIGWDSN   DS    A                       POINTER TO DSN           SMS0002\nIGWSMS   EQU   *                                                SMS0002\nIGWSTORC DS    CL30                    STORAGE CLASS OR BLANK   SMS0002\nIGWMGMTC DS    CL30                    MANAGMENT CLASS OR BLANK SMS0002\nIGWDATAC DS    CL30                    DATA CLASS OR BLANK      SMS0002\nIGWTYPE  DS    F                       DATA SET TYPE            SMS0002+\n                                       1=PDS/E (LIBRARY)        SMS0002+\n                                       0=OTHER                  SMS0002\nCALL_L   CALL  ,(,,,,,,),MF=L          LIST FORM OF CALL        SMS0002\nIGWASMSV DS    V(IGWASMSV)             LOAD'ED ADDR OF IGWASMS  SMS0002\n$SMSAVE  DS    A                       $SMS RETURN ADDRESS      SMS0002\nSAVER7   DS    F                       SAVE AREA FOR R7         SMS0003\nSAVER8   DS    F                       SAVE AREA FOR R8         SMS0003\nBASER3   DS    F                       SAVE AREA FOR 3RD BASE   SMS0003\nBASER4   DS    F                       SAVE AREA FOR 4TH BASE   SMS0003\n         DS    0D\nDSECTLEN EQU   *-DSATDS                LENGTH OF WORK AREA\n         TITLE 'FORMAT 1 DSCB MAP'\n         ORG   DSATFMT1-44\n         #VTCFMT1\n         TITLE 'FORMAT 3 DSCB MAP'\n         ORG   DSATFMT3\n         #VTCFMT3\n         TITLE 'ECT MAP'\n         IKJECT\n         TITLE 'UPT MAP'\n         IKJUPT\n         TITLE 'CVT MAP'                                       HD JAN99\n         CVT  LIST=YES,DSECT=YES                               HD JAN99\n         TITLE 'UCB MAP'                                       HD JAN99\n         IEFUCBOB LIST=YES                                     HD JAN99\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DVOL": {"ttr": 23814, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01+\\x009\\x01\\x05\\x05\\x9f\\x01\\x11\\x05/\\x14T\\x0e\\xf1\\r\\xe8\\x00\\x00\\xe3\\xd9\\xc9\\xc4\\xd1\\xd2@@@@'", "ispf": {"version": "01.43", "flags": 0, "createdate": "2005-02-28T00:00:00", "modifydate": "2011-02-21T14:54:39", "lines": 3825, "newlines": 3560, "modlines": 0, "user": "TRIDJK"}, "text": "//DVOL     JOB MSGCLASS=R\n//*-----------------------------------------------------------------*\n//*\n//*  ASM1 -- ASSEMBLES DVOL (IFOX00 CAN BE USED INSTEAD OF IEV90)\n//*  ASM2 -- ASSEMBLES IXTOFMT5 (IFOX00 CAN BE USED INSTEAD OF IEV90)\n//*  LINK -- LINKS DVOL INTO 'SYS1.CMDLIB(DVOL)'\n//*  COPY -- COPIES DVOL HELP TO 'SYS2.HELP(DVOL)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*   THIS SOURCE CODE IS OPERATING SYSTEM DEPENDENT (MVT THROUGH ESA).\n//*   SPECIFY THE DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.\n//*\n//*   ALSO, THE CODE GENERATED DEPENDS ON WHETHER 3390M9 (FAT DASD)\n//*   DEVICES ARE SUPPORTED.  SEE THE VALUE OF &MODEL9 SELECTED BELOW.\n//*\n//ASM1  EXEC  PGM=ASMA90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,\n//             'XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                         MVT\n*                                         SVS (OS/VS2 RELEASE 1)\n*                                         MVS (OS/VS2 RELEASE 3)\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     ALSO, THE CODE GENERATED DEPENDS ON WHETHER 3390M9 (FAT DASD)   *\n*     DEVICES ARE SUPPORTED.  SEE THE VALUE OF &MODEL9 SELECTED BELOW.*\n*                                                                     *\n*     THE MODULE IS NOT REENTRANT ANYMORE                             *\n*                                                                     *\n***********************************************************************\nDVOL     TITLE 'DISPLAY VTOC CHARACTERISTICS'\n***********************************************************************\n*                                                                     *\n* DVOL                                                                *\n*                                                                     *\n* FUNCTION         THE DVOL COMMAND IS USED TO DISPLAY THE AMOUNT OF  *\n*                  OF FREE SPACE ON A DIRECT ACCESS DEVICE.           *\n*                                                                     *\n* DESCRIPTION      DVOL WILL READ THE FORMAT 4 AND FORMAT 5 DSCB'S    *\n*                  FROM THE VTOC OF A DIRECT ACCESS VOLUME AND        *\n*                  DISPLAY:                                           *\n*                   1.  VOLUME SERIAL                                 *\n*                   2.  UNIT ADDRESS                                  *\n*                   3.  MOUNT STATUS                                  *\n*                   4.  USE STATUS                                    *\n*                   5.  NUMBER OF BLANK DSCB'S IN THE VTOC            *\n*                   6.  CONDITION OF THE VTOC INDICATORS BYTE         *\n*                   7.  PERCENT USED SPACE                            *\n*                   8.  TOTAL FREE SPACE IN TRACKS                    *\n*                   9.  NUMBER OF FREE EXTENTS                        *\n*                  10.  NUMBER OF FREE CYLINDERS                      *\n*                  11.  SIZE OF LARGEST EXTENTS (UP TO 5) IN          *\n*                       CYLINDERS + TRACKS                            *\n*                  12.  SIZE OF LARGEST EXTENTS (UP TO 5) IN TRACKS   *\n*                       -OR-                                          *\n*                       USER COUNT                                    *\n*                                                                     *\n*                  THE RETURN CODE IS SET TO THE TOTAL NUMBER OF      *\n*                  TRACKS IN THE LARGEST EXTENTS (UP TO 5) UP TO A    *\n*                  MAXIMUM OF 4095.  IF THE NUMBER OF FREE TRACKS     *\n*                  EXCEEDS 4095, THE RETURN CODE WILL BE SET TO 4095. *\n*                  IF MORE THAN ONE VOLUME IS DISPLAYED, THE RETURN   *\n*                  CODE WILL BE REFER TO THE SPACE ON THE LAST        *\n*                  VOLUME.  IF AN ERROR CONDITION EXISTS ON THE       *\n*                  VOLUME, THE RETURN CODE WILL BE SET TO 0.          *\n*                                                                     *\n*                  NOTE - IF AN ERROR CONDITION EXISTS ON THE VOLUME, *\n*                         THE RETURN CODE WILL BE SET TO 0.           *\n*                                                                     *\n* ATTRIBUTES       DVOL IS RE-ENTRANT.                                *\n*                                                                     *\n* SYNTAX           DVOL  (VOLUME-LIST)/*                              *\n*                        SHORT/LONG                                   *\n*                        USER/NOUSER                                  *\n*                        HEADER/NOHEADER                              *\n*                        PRINT/NOPRINT                                *\n*                        SERONLY                                      *\n*                                                                     *\n*                  REQUIRED - NONE                                    *\n*                  DEFAULTS - *  SHORT  HEADER  PRINT NOUSER          *\n*                                                                     *\n*                                                                     *\n* SAMPLE OUTPUT FOR: DVOL LDS USER\n*SERIAL  --UNIT--   ATTRIB   %USED AVAIL -----TOTALS-----  LARGEST-EXT*\n*       ADDR TYPE   MOUNT/USE      DSCBS TRACKS EXT   CYL   CYL+TR TRA*\n*LDS115 2972 3390-3 RES/PRIV    60  4377  20016  12  1327   607+ 1   9*\n*LDS900 2990 3390-9 RES/PRIV     0  4495 150110   2 10007  9961+ 5 149*\n*LDS901 2991 3390-9 RES/PRIV     0  4495 150110   2 10007  9961+ 5 149*\n*                                                                     *\n*                                                                     *\n* SAMPLE OUTPUT FOR: DVOL STR849 LONG                                 *\n*VOLUME SERIAL = STR849     UNIT = 1538    TYPE = 3390-3              *\n*STATUS: RESIDENT   STORAGE  ALLOCATED    ONLINE                      *\n*VTOC CONTAINS 2343 BLANK DSCB'S                                      *\n*INDEXED VTOC CONTAINS   19 FREE VIR'S                                *\n*FREE SPACE IS  11541 TRACKS IN  299 EXTENTS INCLUDING   658 FULL CYLI*\n*LARGEST EXTENTS ARE: /CYL+TR/   43+ 0/   39+ 0/   32+ 0/   19+ 5/   1*\n*                     /TRACKS/     645/     585/     480/     290/    *\n*VOLUME IS   23 PERCENT USED                                          *\n*                                                                     *\n*                                                                     *\n* OPERANDS         VOLUME-LIST                                        *\n*                       IS A LIST OF ONE OR MOVE VOLUME SERIALS OF    *\n*                       MOUNTED DIRECT ACCESS VOLUMES.                *\n*                                                                     *\n*                       IF NO VOLUME IS ENTERED, OR IF AN * IS        *\n*                       SPECIFIED, THE INFORMATION IS DISPLAYED       *\n*                       FOR EACH DIRECT ACCESS VOLUME ON THE          *\n*                       SYSTEM.                                       *\n*                                                                     *\n*                  SHORT/LONG                                         *\n*                       SPECIFIES THE OUTPUT FORMAT.                  *\n*                                                                     *\n*                       SHORT - (DEFAULT) SPECIFIES THAT A SINGLE     *\n*                               LINE OF OUTPUT IS TO BE DISPLAYED     *\n*                               FOR EACH VOLUME.                      *\n*                                                                     *\n*                               DATA WHICH IS NOT PRODUCED IF SHORT   *\n*                               IS USED -                             *\n*                                    ONLINE/OFFLINE STATUS            *\n*                                    UNLOAD PENDING                   *\n*                                    VTOC INDICATORS                  *\n*                                    VSAM TIMESTAMPS                  *\n*                                    SIZE OF SECOND TO FIFTH EXTENTS  *\n*                               THIS DATA IS PRODUCED ONLY WITH THE   *\n*                               LONG OUTPUT FORMAT.                   *\n*                                                                     *\n*                       LONG  - SPECIFIES THAT MULTIPLE LINES OF      *\n*                               DATA ARE PRODUCED FOR EACH VOLUME.    *\n*                                                                     *\n*                  USER/NOUSER                                        *\n*                       SPECIFIES WHETHER OR NOT THE USER COUNT       *\n*                       IS TO BE DISPLAYED INSTEAD OF THE LARGEST     *\n*                       5 EXTENTS DATA.  ONLY FOR SHORT REQUEST.      *\n*                                                                     *\n*                  HEADER/NOHEADER                                    *\n*                       SPECIFIES WHETHER OR NOT THE HEADER LINES     *\n*                       ARE TO BE DISPLAYED.  SINCE HEADERS ARE       *\n*                       PRODUCED FOR THE SHORT FORM OF OUTPUT ONLY,   *\n*                       THIS OPTION IS MEANINGLESS WHEN LONG IS       *\n*                       SPECIFIED.                                    *\n*                                                                     *\n*                  PRINT/NOPRINT                                      *\n*                       NOPRINT MAY BE USED TO SUPPRESS ALL OUTPUT    *\n*                       (INCLUDING ERROR MESSAGES).  THIS OPTION      *\n*                       MAY BE USED WHEN ONLY THE RETURN CODE IS      *\n*                       DESIRED.                                      *\n*                                                                     *\n*                  SERONLY                                            *\n*                       SPECIFIES THAT ONLY A LIST OF MOUNTED         *\n*                       VOLUME SERIALS WILL BE DISPLAYED.             *\n*                       SERONLY IS IGNORED IF A VOLUME SERIAL IS      *\n*                       SPECIFIED.                                    *\n*                                                                     *\n* SUBCOMMANDS      DVOL HAS NO SUBCOMMANDS.                           *\n*                                                                     *\n* EXAMPLE          DISPLAY FREE SPACE ON VOLUME WORK01.               *\n*                                                                     *\n*                  DVOL WORK01                                        *\n*                                                                     *\n* FPL MACROS USED BY THIS MODULE                                      *\n*                                                                     *\n*         $ENTER              ENTRY CODING                            *\n*         $RTRN               EXIT CODING                             *\n*         #TSOBLKS            CONSTRUCT TSO CONTROL BLOCKS            *\n*         #TSOMSG             CONSTRUCT MESSAGES IN PUTLINE FORMAT    *\n*         #VTCFMT4            MAP FORMAT 4 DSCB                       *\n*         #VTCFMT5            MAP FORMAT 5 DSCB                       *\n*                                                                     *\n* IBM MACROS USED BY THIS MODULE                                      *\n*                                                                     *\n*         LINK                INVOKE A SERVICE ROUTINE                *\n*         OBTAIN              READ A DSCB FROM THE VTOC               *\n*         CAMLST              CONSTRUCT OBTAIN PARAMETER LIST         *\n*         IKJIOPL             MAP INPUT/OUTPUT PARAMETER LIST         *\n*         PUTLINE             OUTPUT A LINE TO THE TERMINAL           *\n*         IKJCPPL             MAP COMMAND PROCESSOR PARAMETER LIST    *\n*         IKJPPL              MAP PARSE PARAMETER LIST                *\n*         IKJRLSA             RELEASE STORAGE OBTAINED BY PARSE       *\n*         IKJPARM             BEGIN PARSE PARAMETER CONTROL LIST      *\n*         IKJIDENT            DESCRIBE A POSITIONAL PARAMETER         *\n*         IKJENDP             END PARSE PARAMETER LIST                *\n*         IEFUCBOB     *      MAP UNIT CONTROL BLOCK                  *\n*                                                                     *\n*         MACROS DESIGNATED BY * MUST BE OBTAINED FROM THE            *\n*         SYS1.AMODGEN DISTRIBUTION LIBRARY.                          *\n*                                                                     *\n* REGISTER ASSIGNMENTS                                                *\n*                                                                     *\n*          0 - STANDARD LINKAGE                                       *\n*          1 - STANDARD LINKAGE                                       *\n*          2 - WORK                                                   *\n*          3 - WORK                                                   *\n*          4 - WORK                                                   *\n*          5 - WORK                                                   *\n*          6 - WORK                                                   *\n*          7 - WORK                                                   *\n*          8 - PDE POINTER                                            *\n*          9 - PPL/PDL BASE REGISTER                                  *\n*         10 - IOPL BASE REGISTER                                     *\n*         11 - CPPL BASE REGISTER                                     *\n*         12 - PROGRAM BASE REGISTER                                  *\n*         13 - SAVE AREA ADDRESS AND WORK AREA DSECT BASE REGISTER    *\n*         14 - STANDARD LINKAGE                                       *\n*         15 - STANDARD LINKAGE                                       *\n*                                                                     *\n* MODULE ATTRIBUTES                                                   *\n*                                                                     *\n*         ENABLED, NON-PRIVELEGED                                     *\n*                                                                     *\n*                                                 9/76 GORDON P. WEST *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n* 01/20/77  ADD SHORT FORM OF OUTPUT AND MAKE SHORT FORM DEFAULT      *\n*           ADD SHORT/LONG, HEADER/NOHEADER, AND PRINT/NOPRINT KEYWDS *\n*           ADD * SUPPORT FOR VOLUME LIST AND MAKE IT DEFAULT         *\n*           ADD TEST FOR MOUNT PENDING                                *\n*                                                                     *\n* 07/15/77  ADD TESTS FOR NOT READY, OFFLINE PENDING                  *\n*           ADD SERONLY OPERAND                                       *\n*                                                                     *\n* 01/17/83  ADD PARTIAL VOLUME SERIAL NAME CHECKING               ABL *\n*           ADD U... CHECK FOR POSSIBLE PARTIAL UCB ADDRESS       ABL *\n*           ADD HEADERS BETWEEN EACH VOLUME PARAMETER'S OUTPUT    ABL *\n*           ADD FPL MACROS INLINE                                 ABL *\n*           ADD SUPPORT FOR INDEXED VTOC'S                        ABL *\n*           NOTE: THE INDEXED VTOC SUPPORT IS VIA UCLA'S          ABL *\n*                 IXTOFMT5 ROUTINE PROGRAMMED BY CHRIS THOMAS     ABL *\n*                 AND MARKED CST IN COLUMNS 67-69                 ABL *\n*                                                                     *\n*                                                                     *\n* 01/04/85  USE UCB SCAN SERVICES FROM MVS 1.1.3 OR MVS/XA        ABL *\n*           ADD DEVICE TYPE IN THE OUTPUT LINE                    ABL *\n*                                                                     *\n* 02/11/87  ADD HARDCOPY SUPPORT AS PROGRAMMED BY MICHAEL LAY     ABL *\n*           WITH THE K-MART INSURANCE GROUP IN DALLAS             ABL *\n*                                                                     *\n* 02/11/87  ADD AN PDS INTERNAL INTERFACE USING PDSCALL           ABL *\n*                                                                     *\n* 02/13/87  ADD AN DCB EXIT SO DCB INFORMATION IS NOT OVERRIDDEN  ABL *\n*           BY THE HARDCOPY DCB.                                  ABL *\n*                                                                     *\n* 03/21/90  ADDED SUPPORT FOR 3380-K AND 3390 DEVICES BY ALLOWING ABL *\n*           FOUR CHARACTERS FOR ANY CYLINDER OUTPUT FIELD.        ABL *\n*                                                                     *\n* 05/25/94  ADDED SUPPORT FOR 3390M3 AND ABOVE DEVICES BY         ABL *\n*           EXPANDING TOTAL FIELDS BY ONE ADDITIONAL CHARACTER.   ABL *\n*           NOTE THAT THIS DIGIT NORMALLY PRINTS AS BLANKS.       ABL *\n*                                                                     *\n* 05/25/94  ADDED SUPPORT FOR 3390M9 DISK DEVICES BY MODIFYING    ABL *\n*           THE IXTOFMT5 ROUTINE TO RETURN FORMAT 7 DSCB RECORDS  ABL *\n*           (INSTEAD OF FORMAT 5) IF &MODEL9 IS 'YES'.            ABL *\n*                                                                     *\n* 05/25/94  ADDED CHANGES TO INDICATE THE MODEL NUMBER FOR        ABL *\n*           SEVERAL 3380 AND 3390 DEVICES.                        ABL *\n*                                                                     *\n* 05/25/94  CHANGED THE LONG OUTPUT FORMAT TO SKIP THE VSAM       ABL *\n*           OUTPUT LINE IF VSAM OWNERSHIP IS OFF FOR A VOLUME.    ABL *\n*                                                                     *\n* 09/28/95  MODIFIED BY A. BRUCE LELAND AT SERENA INTERNATIONAL ABL-410\n*           TO USE THE UCBSCAN MACRO TO LOCATE UCB'S ON SYSTEMS ABL-410\n*           AFTER MVS/ESA 4.1.0.                                ABL-410\n*                                                                     *\n* 07/31/97  Modified by A. Bruce Leland at SERENA International   ABL97\n*           to add four character UCB support.  Note that the     ABL97\n*           short form output format was changed slightly due     ABL97\n*           to this change.  ADR for UCB became ADDR and VSAM     ABL97\n*           OFF/ON  was shortened by one column to OF/ON          ABL97\n*                                                                     *\n* 09/02/97  Modified by A. Bruce Leland at SERENA International   ABL97\n*           to correct problems on systems with only 3 digit      ABL97\n*           UCB addresses as well as 4 digit UCB addresses.       ABL97\n*                                                                     *\n* 02/21/11  Modified by John Kalinich at CSC:                 DRK FEB11\n*                                                                     *\n*           USER/NOUSER operand to display the UCB user count DRK FEB11\n*           instead of the size of the largest extents        DRK FEB11\n*           (up to 5) in tracks on the SHORT output request.  DRK FEB11\n*                                                                     *\n*           Changed VSAM column to reflect %USED.             DRK FEB11\n*                                                                     *\n*           Use LSPACE for non-indexec VTOCs w/ extended      DRK FEB11\n*           free-space Format 7 DSCBs.                        DRK FEB11\n*                                                                     *\n*           LONG:  VOLUME IS  XXX PERCENT USED                DRK FEB11\n*                                                                     *\n***********************************************************************\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. Bruce Leland           or         A. Bruce Leland            *\n*     SERENA International                 1247 Wavecrest             *\n*     500 Airport Blvd. 2nd Floor          Bandon, Oregon  97411      *\n*     Burlingame, CA  94010                                           *\n*     (415) 696-1800                       HOME: (541) 347-8102       *\n*     Internet: Bruce_Leland@serena.com                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOMSG &MSG,&OFFSET=0,&LENGTH=\n         MNOTE *,'       #TSOMSG   VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOMSG                                                            *\n.*                                                                    *\n.* FUNCTION        GENERATE A MESSAGE LINE IN PUTLINE FORMAT WITH     *\n.*                 LENGTH AND OFFSET HEADERS.                         *\n.*                                                                    *\n.* DESCRIPTION     THE USER SPECIFIES A MESSAGE TEST ENCLOSED IN      *\n.*                 SINGLE QUOTES.  AN OFFSET MAY ALSO BE SPECIFIED.   *\n.*                 A MESSAGE IN PUTLINE FORMAT (WITH HALFWORD HEADERS *\n.*                 CONTAINING THE TOTAL LENGTH OF HEADERS AND         *\n.*                 MESSAGE AND OFFSET) IS CREATED.  THE LENGTH OF     *\n.*                 THE MESSAGE IS ROUNDED UP TO THE NEXT FULLWORD     *\n.*                 MULTIPLE.  THE USER MAY OPTIONALLY SPECIFY THE     *\n.*                 LENGTH OF THE MESSAGE TEXT.                        *\n.*                                                                    *\n.* SYNTAX          NAME     #TSOMSG 'MESSAGE-TEXT'                    *\n.*                                  OFFSET=N                          *\n.*                                  LENGTH=N                          *\n.*                                                                    *\n.*                 MESSAGE-TEXT IS THE MESSAGE TO BE GENERATED.       *\n.*                                                                    *\n.*                 OFFSET       SPECIFIES THE VALUE OF THE OFFSET     *\n.*                              HEADER HALFWORD.  DEFAULT IS 0.       *\n.*                                                                    *\n.*                 LENGTH       SPECIFIES THE LENGTH IN BYTES OF      *\n.*                              THE MESSAGE TEXT.  THIS LENGTH DOES   *\n.*                              NOT INCLUDE THE HEADER LENGTHS.  IF   *\n.*                              LENGTH IS NOT SPECIFIED, THE LENGTH   *\n.*                              WILL BE THE LENGTH OF THE MESSAGE     *\n.*                              TEXT ROUNDED TO THE NEXT FULLWORD.    *\n.*                                                                    *\n.* ERRORS          NO ERROR MESSAGES ARE DISPLAYED.                   *\n.*                                                                    *\n.* EXAMPLE         GENERATE A TSO MESSAGE.  LENGTH IS NOT SPECIFIED,  *\n.*                 AND OFFSET IS 0.                                   *\n.*                                                                    *\n.*                 ERROR1   #TSOMSG 'NAME NOT FOUND'                  *\n.*                                                                    *\n.*                 GENERATE A DUMMY MESSAGE.  THE MESSAGE TEXT WILL   *\n.*                 BE FILLED IN BY THE PROGRAM.  THE LENGTH OF THE    *\n.*                 MESSAGE MAY BE UP TO 120 CHARACTERS.               *\n.*                                                                    *\n.*                 OUTLINE  #TSOMSG ' ',LENGTH=120                    *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                 NONE                                               *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                 NONE                                               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &LEN,&LEN2\n.*\n         AIF   ('&LENGTH' EQ '').CALCLEN\n&LEN     SETA  &LENGTH\n         AGO   .GETLEN2\n.CALCLEN ANOP\n&LEN     SETA  K'&MSG-2\n&LEN     SETA  ((&LEN-1)/4+1)*4\n.GETLEN2 ANOP\n&LEN2    SETA  &LEN+4\n&NAME    DC    H'&LEN2,&OFFSET',CL&LEN.&MSG\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT4\n         MNOTE *,'       #VTCFMT4  VERSION 002 09/22/75  06/08/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT4                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 4 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 4 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 4 DSCB DESCRIBES THE VOLUME TABLE OF     *\n.*                  CONTENTS.                                         *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT4                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT4DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT4                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*        002   06/08/76   VSAM DATA AREAS ADDED                      *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 4 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        VTOC DESCRIPTION                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS4KEY   DS    XL44                     KEY - VTOC NAME - 44X'04'\nDS4IDFMT DS    X                        FORMAT 4 ID X'F4'\nDS4HPCHR DS    XL5                      HIGHEST ADDR OF A FORMAT 1 DSCB\nDS4DSREC DS    XL2                      NUMBER OF AVAILABLE DSCB'S\nDS4HCCHH DS    XL4                      CCHH OF NEXT AVAILABLE ALT. TRK\nDS4NOATK DS    XL2                      NUMBER OF REMAINING ALT. TRACKS\nDS4VTOCI DS    X                        VTOC INDICATORS\nDS4DOSBT EQU   X'80'  1... ....    DOS CONTAMINATION BIT.          @L6C\n*                                   ON IMPLIES F5 DSCB CHAIN IS INVALID\nDS4DVTOC EQU   X'40'  .1.. ....    IF ON, THE INDEX WAS DISABLED   @P2A\nDS4EFVLD EQU   X'20'  ..1. ....    EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  VALIDITY FLAG.  ON IMPLIES      @L6A\n*                                  EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  IS ACTIVE AND FREE-SPACE IS     @L6A\n*                                  VALID.  SEE DS4EFLVL.           @L6A\nDS4DSTKP EQU   X'10'  ...1 ....    DOS STACKED PACK                @P1C\nDS4DOCVT EQU   X'08'  .... 1...    DOS CONVERTED VTOC              @P1C\nDS4DIRF  EQU   X'04'  .... .1..    DIRF BIT                        @P1C\nDS4DICVT EQU   X'02'  .... ..1.    DIRF RECLAIMED                  @P1C\nDS4IVTOC EQU   X'01'  .... ...1    IF ON, AN INDEX HAS BEEN CREATED@P1C\n*                                     FOR THE VTOC.                @P1A\n*                                  IF DS4DOSBT IS ON, THE INDEX IS @P1A\n*                                     VALID.                       @P1A\n*                                  IF EITHER OF THESE BITS IS OFF, @P1A\n*                                    THE INDEX HAS BEEN INVALIDATED@P1A\nDS4NOEXT DS    XL1                 NUMBER OF EXTENTS IN THE VTOC\nDS4SMSFG DS    XL1                 SYSTEM MANAGED STORAGE INDICATORS   X\n                                                                   @L4A\nDS4SMSTS EQU   X'C0'  11.. ....    SYSTEM MANAGED VOLUME TEST      @L4A\nDS4SMS   EQU   X'C0'  11.. ....    SYSTEM MANAGED VOLUME           @L4A\n*              X'80'  10.. ....    RESERVED                        @L4A\nDS4SMSCV EQU   X'40'  01.. ....    SYSTEM MANAGED VOLUME IN INITIAL    X\n                                   STATUS                          @L4A\nDS4NTSMS EQU   X'00'  00.. ....    NON SYSTEM MANAGED VOLUME       @L4A\n*              X'3F'  ..11 1111    RESERVED                        @L4A\n         DS    XL1                 RESERVED                        @L4C\nDS4DEVCT DS    0XL14               DEVICE CONSTANTS\nDS4DEVSZ DS    XL4                      DEVICE SIZE\nDS4DEVTK DS    XL2                      DEVICE TRACK LENGTH\nDS4DEVZ  DS    0XL2                     KEYED RECORD OVERHEAD\nDS4DEVI  DS    X                        NON-LAST KEYED RECORD OVERHEAD\nDS4DEVL  DS    X                        LAST KEYED RECORD OVERHEAD\nDS4DEVK  DS    X                        NON-KEYED RECORD OVERHEAD DIFF.\nDS4DEVFG DS    X                        FLAG BYTE\nDS4DEVTL DS    XL2                      DEVICE TOLERANCE\nDS4DEVDT DS    X                        NUMBER OF DSCB'S PER TRACK\nDS4DEVDB DS    X                        NUMBER OF DIRECTORY BLOCKS/TRK\n*\nDS4AMTIM DS    XL8                      VSAM TIME STAMP\nDS4AMCAT DS    0XL3                     VSAM CATALOG INDICATORS\nDS4VSIND DS    X                        VSAM INDICATORS\n*              X'80'                      VOLUME OWNED BY VSAM CATALOG\nDS4VSCRA DS    XL2                      RELATIVE TRACK ADDRESS OF CRA\nDS4R2TIM DS    XL8                      VSAM VOLUME/CATALOG MATCH TIME\n         DS    XL5                      RESERVED\nDS4F6PTR DS    XL5                      POINTER TO FIRST FORMAT 6 DSCB\nDS4VTOCE DS    XL10                     VTOC EXTENT DESCRIPTION\n         DS    XL10                RESERVED                        @L6C\nDS4EFLVL DS    CL1                 EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  LEVEL.                          @L6A\n*                                  X'00' MEANS EXTENDED FREE-      @L6A\n*                                  SPACE MANAGEMENT WILL NOT BE    @L6A\n*                                  USED FOR THIS VOLUME.           @L6A\n*                                  X'07' MEANS WHEN IN OSVTOC      @L6A\n*                                  FORMAT, FREE-SPACE MANAGED IN   @L6A\n*                                  F7 DSCB'S.                      @L6A\nDS4EFL00 EQU   00                  EXTENDED FREE-SPACE             @L6A\n*                                  LEVEL 0.                        @L6A\nDS4EFL07 EQU   07                  EXTENDED FREE-SPACE             @L6A\n*                                  LEVEL 7.                        @L6A\nDS4EFPTR DS    CL5                 POINTER TO EXTENDED FREE-SPACE  @L6A\n*                                  INFORMATION:                    @L6A\n*                                  FOR DS4LVL=X'00' THIS IS ZERO.  @L6A\n*                                  FOR DS4EFLVL=X'07' THIS IS THE  @L6A\n*                                  CCHHR OF THE FIRST F7 DSCB.     @L6A\n         DS    XL9                 RESERVED                        @L6A\nDS4END   EQU   *                   EQUATE AT END OF DSCB4          @P1C\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT5\n         MNOTE *,'       #VTCFMT5  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT5                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 5 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 5 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 5 DSCB DESCRIBES FREE SPACE AREAS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT5                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT5DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT5                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 5 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        FREE SPACE DESCRIPTIONS                                      *\n*                                                                     *\n*        FIRST FORMAT 5 DSCB FOLLOWS FORMAT 4 DSCB                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS5KEYID DS    XL4                      KEY IDENTIFIER\nDS5EXT01 DS    XL5                      AVAILABLE ENTENT\nDS5EXT02 DS    XL5                           .\nDS5EXT03 DS    XL5                           .\nDS5EXT04 DS    XL5                           .\nDS5EXT05 DS    XL5                           .\nDS5EXT06 DS    XL5                           .\nDS5EXT07 DS    XL5                           .\nDS5EXT08 DS    XL5                           .\nDS5FMTID DS    X                        FORMAT IDENTIFIER\nDS5EXT09 DS    XL5                      AVAILABLE EXTENT\nDS5EXT10 DS    XL5                           .\nDS5EXT11 DS    XL5                           .\nDS5EXT12 DS    XL5                           .\nDS5EXT13 DS    XL5                           .\nDS5EXT14 DS    XL5                           .\nDS5EXT15 DS    XL5                           .\nDS5EXT16 DS    XL5                           .\nDS5EXT17 DS    XL5                           .\nDS5EXT18 DS    XL5                           .\nDS5EXT19 DS    XL5                           .\nDS5EXT20 DS    XL5                           .\nDS5EXT21 DS    XL5                           .\nDS5EXT22 DS    XL5                           .\nDS5EXT23 DS    XL5                           .\nDS5EXT24 DS    XL5                           .\nDS5EXT25 DS    XL5                           .\nDS5EXT26 DS    XL5                           .\nDS5PTRDS DS    XL5                      POINTER TO NEXT FORMAT 5 DSCB\nDS5END   EQU   *                        END OF DSCB5\n         MEND\n         MACRO\n         #VTCFMT7\n         MNOTE *,'       #VTCFMT7                                  ABL'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT7                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 7 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 7 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 7 DSCB DESCRIBES VOLUME FREE SPACE.      *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT7                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT7DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT7                                 *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\nDS7KEYID DS    XL4                     KEY X'07070707'\nDS7EXTNT DS    5XL8                    SPACE FOR 5 EXTENT DESCRIPTIONS\nDS7FMTID DS    X                       FORMAT IDENTIFIER\nDS7ADEXT DS    11XL8                   SPACE FOR 11 EXTENT DESCRIPTIONS\n         DS    XL2                     RESERVED\nDS7PTRDS DS    XL5                     POINTER TO NEXT FORMAT 7 DSCB\nDS7END   EQU   *                       END OF DSCB7\n         MEND\n         SPACE 3\n         LCLC  &OPSYSTM                 OPERATING SYSTEM\n* VALUES ARE MVT, SVS, MVS112, MVS113, MVS4\n***          MVT    - DO YOU STILL HAVE MVT?\n***          SVS    - HOW ABOUT SVS?\n***          MVS112 - MVS UP TO MVS 1.1.2\n***          MVS113 - MVS SP 1.1.3 AND ABOVE (XA AND ESA)\n***          MVS4   - MVS/ESA WITH DYNAMIC UCB (MVS ESA 4.1.0-UCBSCAN)\n&OPSYSTM SETC  'MVS4'                   DEFINE OPERATING SYSTEM\n         TITLE 'ENTRY CODING'\nDVOL     $ENTER BASE=R12,                                              +\n               RENT=DSECTLEN,                                          +\n               SAVE=SAVEAREA\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         #TSOBLKS DSECT,ECB=DVOLECB,                                   +\n               CPPL=(R11,R1),                                          +\n               IOPL=(R10,DVOLIOPL,DVOLPTPB),                           +\n               PPL=(R9,DVOLPPL,DVOLPCL,DVOLANS)\n         DROP  R10\n         B     DVOLC                                          DRK FEB11\n         LTORG ,                                              DRK FEB11\n         CNOP  0,8                                            DRK FEB11\nDVOLC    DS    0H                                             DRK FEB11\n         LA    R10,2048\n         LA    R10,2048(R10,R12)\n         USING DVOL+4096,R10\n         TITLE 'SET UP DATA AREAS'\n***********************************************************************\n*                                                                     *\n*              SET UP DATA AREAS                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         MVC   DVOLHEDR(4),MODLINE       INIT OUTPUT AREA\n         MVC   OUTLINE,BLANKS            INIT OUTPUT LINE\n         MVC   DVOLPTPB(MODLEN1),MODELS1 INITIALIZE WORK AREAS\n         LA    R1,DSNAME                SET UP OBTAIN, SEARCH LIST\n         LA    R2,DVOLSER\n         LA    R3,VTOCFMT4\n         STM   R1,R3,DVOLDCB4+4\n         LA    R1,DVOLCCHH              SET UP OBTAIN, SEEK LIST\n         LA    R2,DVOLSER\n         LA    R3,VTOCFMT5\n         STM   R1,R3,DVOLDCB5+4\n         XC    TOTAL,TOTAL              ZERO SIZE OF 5 LARGEST EXTENTS\n         XC    UCBADDR,UCBADDR          ZERO UCB ADDRESS\n         XC    UCBWORK(100),UCBWORK     ZERO UCB WORKAREA\n         LA    R1,UCBWORK               WORK AREA\n         LA    R2,=AL1(UCB3DACC)        DIRECT ACCESS DEVICES\n         LA    R3,UCBANSR               UCB ADDRESS\n         STM   R1,R3,UCBPARMS           SAVE THE PARAMETER LIST\n         OI    UCBPARMS+8,X'80'         MARK THE END OF THE LIST\n         LA    R1,SHORTSER              INITIALIZE SERIAL POINTER\n         ST    R1,SERPTR\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*              PARSE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PPL ADDRESS\n         LINK  EP=IKJPARS               PARSE THE OPERANDS\n         LTR   R15,R15                  TEST PARSE RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DVOLANS               LOAD ANSWER AREA ADDRESS\n         USING DVOLPDL,R9               DEFINE BASE REGISTER\n         SPACE 2\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO, BRANCH\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   NOPRINT+1,0           ANY PRINT KEYWORD?\n         BNE   NOPDSCAL              NO, BRANCH\n         MVI   NOPRINT+1,2           YES, SET DEFAULT TO NOPRINT\nNOPDSCAL EQU   *\n***********************************************************************\n*                                                                     *\n*              CHECK FOR HARDCOPY OPTION AND OPEN DCB IF NEEDED       *\n*                                                                     *\n***********************************************************************\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    NEXT                    GO ON TO NEXT OPTION\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         CLI   NOPRINT+1,0             ANY PRINT KEYWORD?\n         BNE   *+8                     NO, BRANCH\n         MVI   NOPRINT+1,2             YES, SET DEFAULT TO NOPRINT\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    NEXT                    CONTINUE\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY      ABL FEB87\n         MVI   NOPRINT+1,1             CHANGE TO PRINT        ABL FEB87\n         LA    R15,BADOPEN             LOAD ADDR OF MSG\n         BAL   R2,PUTL                 GO WRITE MSG\n***********************************************************************\n*                                                                     *\n*              GET VOLUME SERIAL AND UCB ADDRESS                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNEXT     LA    R8,VOL                   SET POINTER TO FIRST VOLUME\n         MVI   FOUNDONE,X'FF'           NO OUTPUT AT ALL\n         SPACE 1\nNEXTPARM XC    UCBADDR,UCBADDR          START THE UCB SCAN OVER\n         XC    UCBWORK(100),UCBWORK     START THE UCB SCAN OVER\n         XC    SRVUCBIC,SRVUCBIC     ZERO THE TOKEN AREA        ABL-410\n         L     R15,16                   LOAD CVT ADDRESS\n         L     R15,40(R15)              LOAD UCB TABLE ADDRESS\n         ST    R15,UCBTABLE             SAVE UCB TABLE ADDRESS\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   NEXTHDR\n         CLC   NOHEADER,=H'2'           SEE IF HEADER SUPPRESSED\n         BE    NEXTHDR\n         LA    R15,BLANKLIN             LOAD OUTPUT LINE ADDRESS\n         CLI   FOUNDONE,X'FF'           FIRST LINE OUTPUT?\n         BE    *+8                      YES, NO BLANK LINE\n         BAL   R2,PUTL\n         CLC   USECOUNT,=H'1'           USER COUNT?           DRK FEB11\n         BE    USEHDR                   YES                   DRK FEB11\n         LA    R15,SHORT1               LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,SHORT2               LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTHDR                                        DRK FEB11\nUSEHDR   DS    0H                                             DRK FEB11\n         LA    R15,SHORT1U              LOAD OUTPUT LINE ADDR DRK FEB11\n         BAL   R2,PUTL                                        DRK FEB11\n         LA    R15,SHORT2U              LOAD OUTPUT LINE ADDR DRK FEB11\n         BAL   R2,PUTL                                        DRK FEB11\nNEXTHDR  MVI   FOUNDONE,0               NO OUTPUT YET\n         SPACE 2\nNEXTVOL  MVC   LINE1(MODLEN2),MODELS2   COPY OUTPUT LINES\n         MVC   FREEMSG1(MODLEN3),MODELS3\n         MVC   USEDMSG(MODLEN3P),MODELS3P                     DRK FEB11\n         MVC   BLDSCBS(MODLEN4),MODELS4\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL\n         MVC   DVOLSER,=CL6' '          BLANK OUT VOL SERIAL\n         L     R3,0(R8)                 LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BE    GETUCB\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         EX    R1,MOVESER               MOVE SERIAL\n         MVC   SHORTSER,DVOLSER         COPY VOLUME SERIAL\n         TITLE 'FIND UCB ENTRY FOR VOLUME'\n         AIF   ('&OPSYSTM' NE 'MVS4').MVS4NOT\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        USE THE UCBSCAN MACRO FROM MVS 4.1.0 OR ABOVE                *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\nUCBCHECK EQU   *\n*\n**  FIND THE A(UCB)\n*\nVOLSET   LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         L     R1,16               CVT                          ABL-410\n         L     R1,CVTUCBSC-CVT(R1) IOSSVSUCB  UCB SCAN          ABL-410\n         ST    R1,UCBPARMS+12      SAVE ADDRESS                 ABL-410\n         SPACE 1                                                ABL-UCB\n**                                                              ABL-410\nINCR1    L     R15,16                       CVT                 ABL-410\n         TM    CVTDCB-CVT(R15),CVTOSEXT     X'074' EXTENSION?   ABL-410\n         BNO   ISPDEVTA                     NO, BRANCH          ABL-410\n         TM    CVTOSLV0-CVT(R15),X'08'      X'4F0' HBB4410 UCB? ABL-410\n         BO    ISPDEVTB                     YES, BRANCH         ABL-410\n*                                                               ABL-410\n* SYSTEM DOES NOT HAVE UCB SCAN SERVICES (BEFORE MVS ESA 4.1.0) ABL-410\nISPDEVTA DS    0H                                               ABL-410\nISPDEVTL DS    0H                       *                       ABL-410\n         LA    R1,UCBPARMS                                      ABL-410\n         L     R15,UCBPARMS+12     ROUTINE ADDRESS              ABL-410\n         BALR  R14,R15                                          ABL-410\n         LTR   R15,R15                                          ABL-410\n         BNZ   ISPDEVTE            DONE                         ABL-410\n         L     R1,UCBANSR                                       ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTL            NO, SKIP IT                  ABL-410\nISPDEVT4 DS    0H                       *                       ABL-410\n         SR    R15,R15                  RC0                     ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTE LA    R15,4                    VOLUME NOT FOUND        ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\n         DROP  R1                                               ABL-410\n*                                                               ABL-410\n* SYSTEM IS AT LEAST MVS ESA 4.1.0 OR HIGHER -- HAS UCB SCAN    ABL-410\nISPDEVTB DS    0H                       *                       ABL-410\nISPDEVTF DS    0H                       *                       ABL-410\n         L     R15,16                       CVT                 ABL-410\n         TM    CVTOSLV1-CVT(R15),X'20'  X'4F1' JBB5510 4 DIGIT? ABL-410\n         BO    ISPDEVTK                                         ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,              ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTK DS    0H                       *                       ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,RANGE=ALL,    ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTG DS    0H                       *                       ABL-410\n         LA    R1,SRVUCBUC              UCB ADDRESS             ABL-410\n         ST    R1,UCBANSR               SET                     ABL-410\n         SR    R15,R15                  SET RETURN CODE         ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTF   W?       NO, SKIP IT                  ABL-410\n         DROP  R1                                               ABL-410\nISPDEVTN DS    0H                       *                       ABL-410\n*                                                               ABL-410\nSPACVO99 L     R6,UCBANSR               R6 HAS THE UCB ADDRESS  ABL-410\n         LTR   R15,R15                  FOUND THE UCB?          ABL-410\n         BNZ   NOUCB                    NO, BRANCH              ABL-410\n         L     R3,0(,R8)                LOAD SERIAL ADDRESS     ABL-410\n         LA    R15,SRVUCBDC             ADDRESS OF DCE          ABL-410\n         STCM  R15,B'1111',ADDRDCE SAVE DCE ADDRESS             ABL-410\n*                                                               ABL-410\n         L     R5,UCBANSR               LOAD UCB ADDRESS\n         USING UCB,R5\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBCHECK\n*                                                                 ABL97\n         ST    R5,DVOLDEC               SAVE UCB ADDRESS          ABL97\n         UCBDEVN UCBPTR=DVOLDEC,DEVN=UCBTEXT                      ABL97\n*                                                                 ABL97\n***      CLI   UCBTEXT,C' '             LEADING BLANK?            ABL97\n***      BNE   UCBFOUR                  NO, BRANCH                ABL97\n***      ICM   R1,B'1110',UCBTEXT+1     UCB CHARACTERS            ABL97\n***      ICM   R1,B'0001',UCBTEXT       LEADING BLANK AT END      ABL97\n***      STCM  R1,B'1111',UCBTEXT       SHIFT THE UCB CHARACTERS  ABL97\nUCBFOUR  DS    0H                                                 ABL97\n*                                                                 ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBCHECK                 NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBCHECK                 NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n***      BNE   UCBCHECK                 NO, BRANCH                ABL97\n         BE    UCBHIGH                  YES, BRANCH               ABL97\n         CLI   UCBTEXT,C' '             BLANK FIRST CHARACTER?    ABL97\n         BNE   UCBCHECK                 NO, BRANCH                ABL97\n         CLC   1(*-*,R3),UCBTEXT+1      <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?              ABL97\n         BNE   UCBCHECK                 NO, BRANCH                ABL97\n         SPACE 2\nUCBHIGH  DS    0H\n         MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\nISPDEVTH DC    H'128'                                           ABL-410\n         DROP  R5\n         AGO   .MVS4DON\n.MVS4NOT ANOP\n         AIF   ('&OPSYSTM' NE 'MVS113').MVSNOXA\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        USE THE UCB SCAN SERVICES FROM MVS SP 1.1.3 OR MVS/XA        *\n***********************************************************************\n*                                                                     *\n*        R2  - VOLUME SERIAL ADDRESS                                  *\n*        R3  - VOLUME SERIAL (FROM COMMAND LINE) ADDRESS              *\n*        R4  - UCB SCAN ENTRY ADDRESS                                 *\n*        R5  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\n         L     R4,16                    CVT ADDRESS START\n         L     R4,CVTUCBSE(,R4)         START OF UCB SCAN ROUTINE\n         SR    R5,R5                    CLEAR REGISTER 5\nUCBCHECK EQU   *\n         LA    R1,UCBPARMS              START OF PARAMETER LIST\n         LR    R15,R4\n         BALR  R14,R15                  INVOKE THE SCAN ROUTINE\n         SPACE 1\n         LTR   R15,R15                  ANY MORE?\n         BNZ   NOUCB                    NO, DONE\n         L     R5,UCBANSR               LOAD UCB ADDRESS\n         USING UCB,R5\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBCHECK\n         MVI   UCBNAME,C' '             SAVE UCB ADDRESS          ABL97\n         MVC   UCBNAME+1(3),UCBNAME     SAVE UCB ADDRESS          ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBCHECK                 NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBCHECK                 NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n         BNE   UCBCHECK                 NO, BRANCH\n         SPACE 2\nUCBHIGH  DS    0H\n         MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\n         DROP  R5\n         AGO   .MVSXA\n.MVSNOXA ANOP\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        IF DEVICES HAVE MULTIPLE PATHS, THERE WILL BE MULTIPLE       *\n*        ENTRIES IN THE UCB LOOKUP TABLE, BUT ONLY ONE UCB FOR        *\n*        EACH DEVICE.  DVOL WILL SKIP ALTERNATE PATHS.  THE           *\n*        LOGIC TO SKIP ALTERNATE PATHS DEPENDS ON THE RESTRICTIONS    *\n*        THAT  1.  THE ALTERNATE ADDRESS MUST BE HIGHER THAN THE      *\n*                  PRIMARY ADDRESS, AND                               *\n*              2.  THAT UCB'S ARE LOCATED IN STORAGE IN ASCENDING     *\n*                  ORDER BY PRIMARY UNIT ADDRESS                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2  - VOLUME SERIAL ADDRESS                                  *\n*        R3  - VOLUME SERIAL (FROM COMMAND LINE) ADDRESS              *\n*        R4  - UCB TABLE ADDRESS                                      *\n*        R5  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\n         L     R4,UCBTABLE              LOAD ADDRESS TO START SEARCH\n         SR    R5,R5                    CLEAR REGISTER 5\nUCBCHECK EQU   *\n         AIF   ('&OPSYSTM' EQ 'MVS112').MVSUCB\n         LH    R5,0(R4)                 LOAD UCB ADDRESS\n         AGO   .USING\n.MVSUCB  ICM   R5,3,0(R4)               LOAD UCB ADDRESS\n.USING   USING UCB,R5\n         LTR   R5,R5                    TEST FOR BLANK ENTRY\n         BZ    UCBHOLE\n         CLC   0(2,R4),=X'FFFF'         TEST FOR END OF TABLE\n         BE    NOUCB\n         CLI   UCBTBYT3,UCB3DACC        TEST FOR DIRECT ACCESS\n         BNE   UCBHOLE\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBHOLE\n         MVI   UCBNAME,C' '             SAVE UCB ADDRESS          ABL97\n         MVC   UCBNAME+1(3),UCBNAME     SAVE UCB ADDRESS          ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBHOLE                  NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBHOLE                  NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n         BNE   UCBHOLE                  NO, BRANCH\n         SPACE 2\nUCBHIGH  C     R5,UCBADDR               CHECK AGAINST LAST UCB ADDRESS\n         BH    UCBCONT\nUCBHOLE  LA    R4,2(R4)                 INCREMENT TO NEXT UCB\n         B     UCBCHECK\nUCBCONT  MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         LA    R4,2(R4)                 LOAD ADDR OF NEXT UCB ENTRY\n         ST    R4,UCBNEXT               SAVE ADDRESS\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         MVC   UCBTABLE,UCBNEXT         SET UCBTABLE ADDR TO NEXT UCB\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\n         DROP  R5\n.MVSXA   ANOP\n         L     R7,UCBADDR               LOAD UCB ADDRESS        ABL-410\n         USING UCB,R7                   DEFINE BASE REGISTER    ABL-410\n         SR    R15,R15             ZERO FOR INSERT              ABL-410\n         ICM   R15,B'0111',UCBEXTP-UCBOB(R7) DCE ADDRESS        ABL-410\n         BZ    *+8                 NO, BRANCH                   ABL-410\n         ICM   R15,B'1111',24(R15) GET DCE                      ABL-410\n         STCM  R15,B'1111',ADDRDCE SAVE DCE ADDRESS             ABL-410\n.MVS4DON ANOP\n         TITLE 'PROCESS UCB INFORMATION'\n***********************************************************************\n*                                                                     *\n*              PROCESS UCB INFORMATION                                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R7  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCONTINUE MVC   SHORTSER,DVOLSER         COPY VOLUME SERIAL\n         MVI   FOUNDONE,1               OUTPUT NOW\n         L     R7,UCBADDR               LOAD UCB ADDRESS\n         USING UCB,R7                   DEFINE BASE REGISTER\n*        MVC   UNITADDR,UCBNAME         COPY UNIT ADDRESS         ABL97\n         MVC   UNITADDR,UCBTEXT         COPY UNIT ADDRESS         ABL97\n*        MVC   SHORTUNT,UCBNAME                                   ABL97\n         MVC   SHORTUNT,UCBTEXT                                   ABL97\n         IC    R15,19(R7)               UNIT TYPE IN HEX\n         N     R15,=X'0000000F'         MASK OFF OTHER BITS\n         MH    R15,=H'6'                UNIT TYPE * 6\n         LA    R15,UNITTBL(R15)         UNIT TYPE NAME\n         MVC   UNITTYPE(6),0(R15)       SAVE NAME IN MESSAGE\n         MVC   SHORTTYP(6),0(R15)       SAVE NAME IN MESSAGE\n*\n         ICM   R15,B'1111',ADDRDCE GOOD DCE ADDRESS?            ABL-410\n         BZ    TYPEEXIT            NO, BRANCH                   ABL-410\n         LA    R14,MODELTBL-4      TABLE OF DEVICE MODIFIERS\n*\nTYPELOOP LA    R14,4(,R14)             NEXT TABLE ENTRY\n         CLI   0(R14),X'FF'            END OF TABLE?\n         BE    TYPEEXIT                YES, BRANCH\n         CLC   UCBTBYT4-UCBOB(1,R7),0(R14)  MATCH DEVICE TYPE?\n         BNE   TYPELOOP                     NO, BRANCH\n         CLC   22(1,R15),1(R14)        MATCH DCEMDRDT?\n         BNE   TYPELOOP                NO, BRANCH\n         MVC   UNITTYPE+4(2),2(R14)    ADD THE DESIGNATOR\n         MVC   SHORTTYP+4(2),2(R14)    ADD THE DESIGNATOR\nTYPEEXIT DS    0H                                             ABL MAY90\n*\n*--------MOUNT STATUS\n         TM    UCBSTAT,UCBRESV          TEST FOR RESERVED\n         BZ    TRYRES\n         MVC   MNTSTAT,=CL9'RESERVED'   SET MOUNT STATUS\n*        MVC   SHORTMNT(6),=CL6'RESRVD' SET MOUNT STATUS\n         MVC   SHORTMNT(3),=CL3'RSV'    SET MOUNT STATUS\n         B     USESTAT\nTRYRES   TM    UCBSTAT,UCBPRES          TEST FOR RESIDENT\n         BZ    USESTAT\n         MVC   MNTSTAT,=CL9'RESIDENT'   SET MOUNT STATUS\n*        MVC   SHORTMNT(6),=CL6'RESDNT' SET MOUNT STATUS\n         MVC   SHORTMNT(3),=CL3'RES'    SET MOUNT STATUS\nUSESTAT  MVI   SHORTSLA,C'/'\n*--------USE STATUS\n         TM    UCBSTAB,UCBBPRV          TEST FOR PRIVATE\n         BZ    TRYPUB\n         MVC   USESTATS,=CL7'PRIVATE'   SET USE STATUS\n         B     TESTALOC\nTRYPUB   TM    UCBSTAB,UCBBPUB          TEST FOR PUBLIC\n         BZ    TRYSTOR\n         MVC   USESTATS,=CL7'PUBLIC'    SET USE STATUS\n         B     TESTALOC\nTRYSTOR  TM    UCBSTAB,UCBBSTR          TEST FOR STORAGE\n         BZ    TESTALOC\n         MVC   USESTATS,=CL7'STORAGE'   SET USE STATUS\nTESTALOC MVC   SHORTUSE(4),USESTATS    COPY USE STATUS\n*--------ALLOCATED/UNALLOCATED\n         TM    UCBSTAT,UCBALOC          TEST FOR ALLOCATED\n         BZ    TESTOFF\n         MVC   ALLOCATD,=CL11'ALLOCATED  '\n*--------ONLINE/OFFLINE\nTESTOFF  TM    UCBSTAT,UCBONLI          TEST FOR ONLINE\n         BZ    TESTUNLD\n         MVC   ONOFF,=CL17'ONLINE'\n         TM    UCBSTAT,UCBCHGS          TEST FOR OFFLINE PENDING\n         BZ    TESTUNLD\n         MVC   ONOFF,=CL17'OFFLINE PENDING'\n         MVC   SHORTMNT(17),ONOFF\n*--------PENDING MOUNT/UNLOAD\nTESTUNLD TM    UCBSTAT,UCBUNLD          TEST FOR UNLOAD PENDING\n         BZ    GETFMT4\n         MVC   UNLOAD,=CL17'UNLOAD PENDING'\n         MVC   SHORTMNT(17),UNLOAD\n***      TM    DVOLFLGB,UCBTICBT        TEST FOR MOUNT PENDING\n***      BZ    GETFMT4\n***      MVC   UNLOAD,=CL17'MOUNT PENDING'\n***      MVC   SHORTMNT(17),UNLOAD\n         TITLE 'OBTAIN AND PROCESS FORMAT 4 DSCB (VTOC DSCB)'\n***********************************************************************\n*                                                                     *\n*              OBTAIN FORMAT 4 DSCB (VTOC DSCB)                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETFMT4  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BNE   GETFMT4A\n         LA    R15,LINE1                DISPLAY VOLUME SERIAL AND UNIT\n         BAL   R2,PUTL\nGETFMT4A XC    TOTAL,TOTAL              ZERO 5 LARGEST EXTENT TOTAL\n         MVI   DS4IDFMT,X'00'           ZERO OUT FORMAT 4 ID LOCATION\n         MVI   VTOCINDS,X'00'           ZERO OUT VTOC INDICATORS\n         TM    DVOLFLGA,DVOLNRDY        TEST FOR NOT READY\n         BO    NOTREADY\n         DROP  R7\n         OBTAIN DVOLDCB4                OBTAIN FORMAT 4 DSCB\n         CLI   DS4IDFMT,X'F4'           TEST FIELD IDENTIFIER\n         BNE   ERRFMT4\n         MVC   SAVEFMT4(148),VTOCFMT4                         DRK FEB11\n         MVC   DVOLCCHH,DS4VTOCE+2      COPY CCHH OF VTOC\n         MVI   DVOLCCHH+4,X'02'         SET RECORD TO 2 FOR FIRST FMT 5\n         MVC   TRKPRCYL,DS4DEVSZ+2      COPY TRACKS PER CYLINDER\n         MVC   MTDSCBS,DS4DSREC         NUMBER OF AVAILABLE DSCB'S\n         MVC   VTOCINDS,DS4VTOCI        SAVE VTOC INDICATORS\n         BAL   R2,IXINIT                GET INDEXED VTOC IF AVAILABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*              PROCESS VSAM INFORMATION                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETVSAM  TM    DS4VSIND,X'80'           TEST OWNERSHIP BIT\n         BZ    ZERO5                    IGNORE VSAM LINE IF NOT OWNED\n*ABL     BZ    TIMESTMP\n         MVC   OWNERSHP,=C'ON '         INDICATE VOLUME IS OWNED\nTIMESTMP UNPK  WORKAREA(9),DS4AMTIM(5)  UNPACK TIMESTAMP 1\n         UNPK  WORKAREA+8(9),DS4AMTIM+4(5)\n         MVZ   WORKAREA,=XL16'00'       MOVE ZEROS TO ZONES\n         TR    WORKAREA,=C'0123456789ABCDEF'  CONVERT TO EBCDIC\n         MVC   TIMEST1,WORKAREA         COPY TIMESTAMP 1 TO MESSAGE\n         UNPK  WORKAREA(9),DS4R2TIM(5)  UNPACK TIMESTAMP 2\n         UNPK  WORKAREA+8(9),DS4R2TIM+4(5)\n         MVZ   WORKAREA,=XL16'00'       MOVE ZEROS TO ZONES\n         TR    WORKAREA,=C'0123456789ABCDEF'  CONVERT TO EBCDIC\n         MVC   TIMEST2,WORKAREA         COPY TIMESTAMP2 TO MESSAGE\n         SPACE 2\n         CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    ZERO5\n         MVC   SHORTVSM,OWNERSHP        COPY OWNERSHIP INFORMATION\n         TITLE 'OBTAIN FORMAT 5 DSCB (FREE AREA DSCB)'\n***********************************************************************\n*                                                                     *\n*              OBTAIN FORMAT 5 DSCB (FREE AREA DSCB)                  *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R2  - EXTENTS LEFT TO PROCESS IN THIS DSCB                   *\n*        R3  - POINTER TO LOAD ADDRESS TABLE ENTRY                    *\n*        R4  - CUMULATIVE CYLINDER COUNT                              *\n*        R5  - CUMULATIVE EXCESS TRACK COUNT                          *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION (LOADED BY EXECUTE)      *\n*        R7  - CUMULATIVE EXTENT COUNT                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nZERO5    XC    LARGE5(50),LARGE5        ZERO LARGEST 5 EXTENTS TABLE\n         XC    TOTFREE(4),TOTFREE       ZERO TOTAL FREE TRKS  DRK FEB11\n         SR    R7,R7                    ZERO EXTENTS\n         SR    R4,R4                    ZERO CYLINDERS\n         SR    R5,R5                    ZERO TRACKS\nOBTFMT5  L     R15,UCBADDR              LOAD UCB ADDRESS\n         USING UCB,R15                  ADDRESSABILITY\n         TM    DVOLFLGA,DVOLNRDY        TEST NOT READY\n         BO    NOTREADY\n         DROP  R15\n         BAL   R2,IXFMT5                GET THE NEXT FORMAT 5 DSCB\n         B     PFGOTIX                  GOT INDEXED VTOC, BRANCH\n         SPACE 1\n         OBTAIN DVOLDCB5                READ FORMAT 5 DSCB\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRFMT5\nPFGOTIX  CLI   DS5FMTID,X'F5'           TEST FORMAT 5 ID\n         BNZ   PFGOTIX7                 NO, TRY FOR 7\n         LA    R2,26                    LOAD EXTENTS PER DSCB\n         SR    R3,R3                    ZERO POINTER\nDVOLLOAD EX    R0,FMT5ADDR(R3)          LOAD ADDRESS OF EXTENT DESCR\n         NC    0(5,R6),0(R6)            TEST FOR LAST EXTENT\n         BE    ENDFMT5\n         SR    R0,R0                    CLEAR REGISTER\n         MVC   HALF,2(R6)               COPY NUMBER OF CYLINDERS\n         LH    R1,HALF                  LOAD NUMBER OF CYLINDERS\n         IC    R0,4(R6)                 LOAD NUMBER OF TRACKS\n         AR    R4,R1                    ACCUMULATE CYLINDERS\n         AR    R5,R0                    ACCUMULATE TRACKS\n         LA    R7,1(R7)                 INCREMENT EXTENT COUNT\n         MH    R1,TRKPRCYL              MULT CYLS BY TRKS PER CYL\n         AR    R0,R1                    TOTAL TRACKS THIS EXTENT\n         TITLE 'SEE IF EXTENT IS ONE OF 5 LARGEST'\n***********************************************************************\n*                                                                     *\n*              SEE IF CURRENT EXTENT IS ONE OF 5 LARGEST              *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R1  - EXTENT TABLE COUNTER                                   *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION                          *\n*        R14 - CHARACTERS TO BE MOVED, ADDR OF EXTENT ENTRY           *\n*              R2, R3, R4, R5, AND R7 MUST BE PRESERVED               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SR    R14,R14                  ZERO CHARACTERS\n         LA    R1,5                     LOAD COUNT\nCOMPARE  C     R0,LARGE5(R14)           COMPARE TOTAL TRACKS\n         BNH   NOTLARGE\n         LA    R14,10(R14)              INCREMENT COUNT BY 10\n         BCT   R1,COMPARE\nNOTLARGE SH    R14,=H'10'\n         LTR   R14,R14                  TEST COUNT\n         BM    NEXTFREE\n         BZ    ADDEXTNT\n         BCTR  R14,0                    REDUCE COUNT BY 1\n         EX    R14,MOVEXTNT             COPY EXTENT DESCRIPTIONS\n         LA    R14,1(R14)               ADD 1 TO COUNT\nADDEXTNT LA    R14,LARGE5(R14)          LOAD ADDRESS FOR THIS EXTENT\n         ST    R0,0(R14)                STORE NUMBER OF TRACKS\n         MVC   6(3,R14),2(R6)           COPY CYLINDERS AND TRACKS\nNEXTFREE LA    R3,4(R3)                 INCREMENT POINTER\n         BCT   R2,DVOLLOAD              DECREMENT EXTENT COUNTER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              FINISHED WITH FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         NC    DS5PTRDS,DS5PTRDS        TEST FOR ANOTHER FMT5\n         BE    ENDFMT5\n         MVC   DVOLCCHH,DS5PTRDS        COPY ADDRESS OF NEXT FMT5 DSCB\n         B     OBTFMT5\nPFGOTIX7 CLI   DS5FMTID,X'F7'           TEST FORMAT 7 ID\n         BNZ   ERRFMT5\n         LA    R2,16                    LOAD EXTENTS PER DSCB\n         SR    R3,R3                    ZERO POINTER\nDVOLLOD7 EX    R0,FMT7ADDR(R3)          LOAD ADDRESS OF EXTENT DESCR\n         NC    0(8,R6),0(R6)            TEST FOR LAST EXTENT\n         BE    ENDFMT5\n         XC    STARTC(16),STARTC        CLEAR ACCUMULATORS\n         SR    R0,R0\n         L     R1,0(,R6)                BEGINNING OF THIS EXTENT\n         LH    R15,TRKPRCYL             TRKS PER CYL\n         DR    R0,R15                   DIVIDE\n         LTR   R0,R0                    ANY ODD TRACKS INTO EXTENT?\n         BZ    DVOLEXT1                 NO, BRANCH\n         AH    R1,=H'1'                 YES, ONE LESS WHOLE CYLINDER\n         SR    R15,R0                   TRACKS LEFT IN CYLINDER\n         LR    R0,R15                   TRACKS LEFT IN CYLINDER\nDVOLEXT1 ST    R1,STARTC                SAVE STARTING CYLINDER\n         ST    R0,STARTT                SAVE STARTING TRACK\n         SR    R0,R0\n         L     R1,4(,R6)                END OF THIS EXTENT\n         LH    R15,TRKPRCYL             TRKS PER CYL\n         DR    R0,R15                   DIVIDE\n         C     R1,STARTC                END:START CYLINDER\n         BE    DVOLEXT2                   EQUAL, BRANCH\n         BL    DVOLEXT3                   LESS, BRANCH\n*  END GREATER THAN START CYLINDER\n         S     R1,STARTC                NUMBER OF WHOLE CYLINDERS\n         A     R0,STARTT                TRACKS LEFT IN EXTENT\n         B     DVOLEXT7\n*  END SAME AS START CYLINDER\nDVOLEXT2 SR    R1,R1                    NO CYLINDERS SPANNED\n         A     R0,STARTT                TRACKS LEFT IN EXTENT\n         B     DVOLEXT7\n*  END LESS THAN START CYLINDER (STARTED ON SAME CYLINDER ACTUALLY)\nDVOLEXT3 SR    R1,R1                    NO CYLINDERS SPANNED\n         SR    R15,R0                   TRACKS LEFT IN SECOND CYLINDER\n         L     R0,STARTT                TRACKS LEFT IN FIRST CYLINDER\n         SR    R0,R15                   TRACKS IN THIS EXTENT\nDVOLEXT7 ST    R1,TOTALC                SAVE STARTING CYLINDER\n         ST    R0,TOTALT                SAVE TOTAL TRACKS\n         AR    R4,R1                    ACCUMULATE CYLINDERS\n         AR    R5,R0                    ACCUMULATE TRACKS\n         LA    R7,1(R7)                 INCREMENT EXTENT COUNT\n         L     R0,4(,R6)                END OF THIS EXTENT\n         S     R0,0(,R6)                LESS BEGINNING OF THIS EXTENT\n         TITLE 'SEE IF EXTENT IS ONE OF 5 LARGEST'\n***********************************************************************\n*                                                                     *\n*              SEE IF CURRENT EXTENT IS ONE OF 5 LARGEST              *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R1  - EXTENT TABLE COUNTER                                   *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION                          *\n*        R14 - CHARACTERS TO BE MOVED, ADDR OF EXTENT ENTRY           *\n*              R2, R3, R4, R5, AND R7 MUST BE PRESERVED               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SR    R14,R14                  ZERO CHARACTERS\n         LA    R1,5                     LOAD COUNT\nCOMPARE7 C     R0,LARGE5(R14)           COMPARE TOTAL TRACKS\n         BNH   NOTLARG7\n         LA    R14,10(R14)              INCREMENT COUNT BY 10\n         BCT   R1,COMPARE7\nNOTLARG7 SH    R14,=H'10'\n         LTR   R14,R14                  TEST COUNT\n         BM    NEXTFRE7\n         BZ    ADDEXTN7\n         BCTR  R14,0                    REDUCE COUNT BY 1\n         EX    R14,MOVEXTNT             COPY EXTENT DESCRIPTIONS\n         LA    R14,1(R14)               ADD 1 TO COUNT\nADDEXTN7 LA    R14,LARGE5(R14)          LOAD ADDRESS FOR THIS EXTENT\n         ST    R0,0(R14)                STORE NUMBER OF TRACKS\n         MVC   4(4,R14),TOTALC          COPY CYLINDERS\n         MVC   8(1,R14),TOTALT+3        COPY TRACKS\nNEXTFRE7 LA    R3,4(R3)                 INCREMENT POINTER\n         BCT   R2,DVOLLOD7              DECREMENT EXTENT COUNTER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              FINISHED WITH FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         NC    DS5PTRDS,DS5PTRDS        TEST FOR ANOTHER FMT5\n         BE    ENDFMT5\n         MVC   DVOLCCHH,DS5PTRDS        COPY ADDRESS OF NEXT FMT5 DSCB\n         B     OBTFMT5\n         AGO   .DASHTBL                                       DRK FEB11\nMODELTBL DC    X'0E1C',C'D '           3380D\n         DC    X'0E1B',C'E '           3380E\n         DC    X'0E21',C'J '           3380J\n         DC    X'0E23',C'K '           3380K\n         DC    X'0F26',C'M1'           3390M1\n         DC    X'0F27',C'M2'           3390M2\n         DC    X'0F24',C'M3'           3390M3\n         DC    X'0F31',C'OP'           3390 OPTICAL (LIKE M3)\n         DC    X'0F32',C'M9'           3390M9\n         DC    X'FF'                   END OF TABLE\n.DASHTBL ANOP                                                 DRK FEB11\nMODELTBL DC    X'0E1C',C'-D'           3380D\n         DC    X'0E1B',C'-E'           3380E\n         DC    X'0E21',C'-J'           3380J\n         DC    X'0E23',C'-K'           3380K\n         DC    X'0F26',C'-1'           3390M1\n         DC    X'0F27',C'-2'           3390M2\n         DC    X'0F24',C'-3'           3390M3\n         DC    X'0F31',C'-O'           3390 OPTICAL (LIKE M3)\n         DC    X'0F32',C'-9'           3390M9\n         DC    X'FF'                   END OF TABLE\n         DS    0H\n         TITLE 'DEVICE NOT READY'\n***********************************************************************\n*                                                                     *\n*              DEVICE NOT READY                                       *\n*                                                                     *\n***********************************************************************\nNOTREADY MVC   UNLOAD,=CL17'NOT READY'  INDICATE NOT READY\n         MVC   SHORTMNT(17),UNLOAD\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BE    INCRVOL\n         LA    R15,LINE2                DISPLAY HELD LINE\n         BAL   R2,PUTL\n         B     INCRVOL\n         TITLE 'FORMAT AND DISPLAY LINE'\n***********************************************************************\n*                                                                     *\n*              FORMAT AND DISPLAY LINE                                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - CYLINDER COUNT                                         *\n*        R5  - EXCESS TRACK COUNT                                     *\n*        R7  - EXTENT COUNT                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFMT5  BAL   R2,IXTERM                FIX FREE DSCB'S AND QUIT\n         LH    R1,MTDSCBS\n         CVD   R1,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   DSCBS,EDITFLD+4-1\n         SPACE 1\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   ENDFMT5A\n         MVC   SHORTDCB,DSCBS           COPY NUMBER OF DSCB'S\n         SPACE 2\nENDFMT5A CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BNE   ENDFMT5B\n         LA    R15,LINE2                DISPLAY HELD LINES\n         BAL   R2,PUTL\n         CLI   OWNERSHP+1,C'F'          VSAM OWNERSHIP OFF?\n         BE    TESTDOS                  YES, IGNORE IF NOT OWNED\n         LA    R15,LINE3\n         BAL   R2,PUTL\n*--------PROCESS VTOC INDICATORS\nTESTDOS  TM    VTOCINDS,X'08'\n         BZ    TESTDIRF\n         SPACE 2\n         LA    R15,DOS                  LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\nTESTDIRF TM    VTOCINDS,X'04'\n         BZ    BLKDSCBS\n         LA    R15,DAMAGED              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\nBLKDSCBS LA    R15,BLDSCBS              DISPLAY HELD LINE\n         BAL   R2,PUTL\n         SPACE 2\n         TM    VTOCINDS,DS4IVTOC        THIS VTOC INDEXED?\n         BZ    ENDFMT5B                 IF NO, DONE\n         L     R1,IXCT2                 FREE VIR'S\n         CVD   R1,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   DSCBVIR,EDITFLD+4-1\n         LA    R15,BLDSVIR              DISPLAY HELD LINE\n         BAL   R2,PUTL\n         SPACE 2\nENDFMT5B DS    0H\n*NDFMT5B CLC   LARGE5+50-10(4),=F'0'    TEST FOR NO SPACE ON PACK\n*        BE    NOSPACE                                        DRK FEB11\n         CVD   R7,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   EXTENTS,EDITFLD+4-1\n         CVD   R4,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   CYLS,EDITFLD+4-1\n         MH    R4,TRKPRCYL              CONVERT TOTAL TRACKS\n         AR    R4,R5\n         ST    R4,TOTFREE               SAVE TOTAL TRACKS     DRK FEB11\n         CVD   R4,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   TRACKS,EDITFLD+3-1\n         SPACE 2\n         CLC   OUTFORM,=H'1'\n         BNE   DISPLAY4\n         MVC   SHORTTOT,TRACKS\n*        MVC   SHORTEXT,EXTENTS\n         CLC   EXTENTS+1(4),=CL4' 999'  >1K?                  DRK FEB11\n         BNH   EXTOK                                          DRK FEB11\n         MVC   SHORTEXT+1(3),=CL3'>1K'  YES, MARK IT          DRK FEB11\n         B     MOVECYL                                        DRK FEB11\nEXTOK    DS    0H                                             DRK FEB11\n         MVC   SHORTEXT+1(3),EXTENTS+2                        DRK FEB11\nMOVECYL  DS    0H                                             DRK FEB11\n         MVC   SHORTCYL,CYLS\n         B     GETCYLTR\n         SPACE 2\nDISPLAY4 DS    0H\n*        LA    R15,FREEMSG1             LOAD OUTPUT LINE ADDRESS\n*        BAL   R2,PUTL\n         TITLE 'DISPLAY LARGEST EXTENTS AS CYL+TR'\n***********************************************************************\n*                                                                     *\n*              DISPLAY LARGEST EXTENTS AS CYL+TR                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - DESCRIPTION COUNTER                                    *\n*        R5  - TABLE ENTRY POINTER                                    *\n*        R6  - OUTPUT LINE POINTER                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETCYLTR LA    R4,5                     SET COUNTER\n         LA    R5,LARGE5+50-10          SET POINTER\n         LA    R6,LRGXTNT1-1            SET POINTER\nLOOP1    CLC   0(4,R5),=F'0'            TEST FOR END OF LIST\n         BE    ENDLOOP1\n         L     R3,4(R5)                 LOAD CYLINDERS\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   0(4+1,R6),EDITFLD+4-1    MOVE CYLINDERS TO MESSAGE\n         MVI   4+1(R6),C'+'             MOVE + SIGN\n         SR    R3,R3                    CLEAR REGISTER\n         IC    R3,8(R5)                 LOAD TRACKS\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'  SET UP EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT TRACKS\n         MVC   5+1(2,R6),EDITFLD+6      MOVE TRACKS INTO MESSAGE\n         MVI   7+1(R6),C'/'             MOVE /\n         SH    R5,=H'10'                POINT TO NEXT DESCRIPTION\n         LA    R6,8+1(R6)               POINT TO NEXT OUTPUT DESCR\n         BCT   R4,LOOP1                 DECREMENT COUNT AND LOOP\n         SPACE 2\nENDLOOP1 CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   DISPLAY5\n         MVC   SHORT1CL,LRGXTNT1-1      COPY CYLINDERS IN LARGEST EXTNT\n         MVC   SHORT1TR,LRGXTNT1+5      COPY TRACKS IN LARGETS EXTENT\n         MVI   SHORT1CL+4+1,C'+'        ADD A +\n         B     GETTRKS\n         SPACE 2\nDISPLAY5 DS    0H\n*        LA    R15,FREEMSG2             LOAD OUTPUT LINE ADDRESS\n*        BAL   R2,PUTL\n         TITLE 'DISPLAY LARGEST EXTENTS AS TRACKS'\n***********************************************************************\n*                                                                     *\n*              DISPLAY LARGEST EXTENTS AS TRACKS                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - DESCRIPTION COUNTER                                    *\n*        R5  - TABLE ENTRY POINTER                                    *\n*        R6  - OUTPUT LINE POINTER                                    *\n*        R7  - CUMULATIVE TRACK COUNTER                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETTRKS  LA    R4,5                     SET COUNT\n         LA    R5,LARGE5+50-10          SET POINTER\n         LA    R6,LRGXTNT2-1            SET POINTER\n         SR    R7,R7                    ZERO 5 LARGEST EXTENTS TOTAL\nLOOP2    CLC   0(4,R5),=F'0'            TEST FOR END OF TABLE\n         BE    ENDLOOP2\n         L     R3,0(R5)                 LOAD TOTAL TRACKS IN EXTENT\n         AR    R7,R3                    ACCUMULATE TOTAL\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'  SET EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT TRACKS\n         MVC   0+1(7,R6),EDITFLD+1      MOVE INTO MESSAGE\n         MVI   7+1(R6),C'/'             MOVE / INTO MESSAGE\n         SH    R5,=H'10'                POINT TO NEXT EXTENT ENTRY\n         LA    R6,8+1(R6)               POINT TO NEXT OUTPUT DESCR\n         BCT   R4,LOOP2                 DECREMENT COUNT AND LOOP\n         SPACE 2\nENDLOOP2 DS    0H\n*        CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n*        BNE   DISPLAY6\n         MVC   SHORTLRG,LRGXTNT2+2-1    COPY TRACKS IN LARGEST EXTENT\n         CVD   R7,DVOLDEC               CONVERT TOTAL OF 5 LARGEST\n         MVC   EDITFLD,=X'4020202020202120'  MOVE IN EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT VALUE\n         MVC   SHORT5XT,EDITFLD+3-1     COPY TO OUTPUT LINE\n         SPACE 1\n         LCLC  &TSTMOD9                                       DRK FEB11\n&TSTMOD9 SETC  'YES'      TEST WITH 3390-9'S                  DRK FEB11\n&TSTMOD9 SETC  'NO'       NORMAL OPERATION                    DRK FEB11\n         AIF   ('&TSTMOD9' NE 'YES').NOTEST                   DRK FEB11\n         CLI   SHORTTYP+5,C'9'     MODEL 9?   *** Test ***    DRK FEB11\n         BNE   SKIPLSPC            NO                         DRK FEB11\n         AGO   .TESTON                                        DRK FEB11\n.NOTEST  ANOP                                                 DRK FEB11\n*   USE LSPACE FOR NON-INDEXED VTOCS W/ EXT FREE-SPACE FORMAT 7 DSCBS\n         CLI   DS4EFLVL-DS4IDFMT+SAVEFMT4,DS4EFL07  EXT FREE-SPACE 7?\n         BNE   SKIPLSPC                             NO\n         TM    VTOCINDS,DS4IVTOC   INDEXED VTOC?              DRK FEB11\n         BO    SKIPLSPC            YES                        DRK FEB11\n         CLC   TOTFREE(4),=XL4'00' ZERO FREE TRKS?            DRK FEB11\n         BNE   SKIPLSPC            NO                         DRK FEB11\n.TESTON  ANOP\n         L     R0,UCBANSR               UCB ADDRESS           DRK FEB11\n         LA    R2,MSGAREA               EXPANDED MSG AREA     DRK FEB11\n         LSPACE UCB=(R0),EXPMSG=(R2)                          DRK FEB11\n         SPACE 1                                              DRK FEB11\n         XC    DVOLDEC(8),DVOLDEC       CLEAR                 DRK FEB11\n         PACK  DVOLDEC+4(4),MSGFCYL(6)  FREE CYLS             DRK FEB11\n         CVB   R2,DVOLDEC                                     DRK FEB11\n         MH    R2,=H'15'                CYLS TO TRKS          DRK FEB11\n         XC    DVOLDEC(8),DVOLDEC       CLEAR                 DRK FEB11\n         PACK  DVOLDEC+4(4),MSGFTRK(6)  ADD'L FREE TRKS       DRK FEB11\n         CVB   R1,DVOLDEC                                     DRK FEB11\n         AR    R2,R1                    TOTAL FREE TRKS       DRK FEB11\n         ST    R2,TOTFREE               SAVE                  DRK FEB11\n         CVD   R2,DVOLDEC               PACKED                DRK FEB11\n         MVC   EDITFLD,=X'4020202020202120'                   DRK FEB11\n         ED    EDITFLD,DVOLDEC+4                              DRK FEB11\n         MVC   TRACKS,EDITFLD+3-1       FREE TTTTTT           DRK FEB11\n         SPACE 1                                              DRK FEB11\n         XC    DVOLDEC(8),DVOLDEC       CLEAR                 DRK FEB11\n         PACK  DVOLDEC+4(4),MSGLCYL(6)  LRG CYLS              DRK FEB11\n         CVB   R2,DVOLDEC                                     DRK FEB11\n         MH    R2,=H'15'                CYLS TO TRKS          DRK FEB11\n         XC    DVOLDEC(8),DVOLDEC       CLEAR                 DRK FEB11\n         PACK  DVOLDEC+4(4),MSGLTRK(6)  ADD'L LRG TRKS        DRK FEB11\n         CVB   R1,DVOLDEC                                     DRK FEB11\n         AR    R2,R1                    TOTAL LRG TRKS        DRK FEB11\n         CVD   R2,DVOLDEC               PACKED                DRK FEB11\n         MVC   EDITFLD,=X'4020202020202120'                   DRK FEB11\n         ED    EDITFLD,DVOLDEC+4                              DRK FEB11\n         MVC   LRGTRKS,EDITFLD+3-1      LARGE TTTTTT          DRK FEB11\n         SPACE 1                                              DRK FEB11\n         CLC   MSGFEXT(6),=CL6'000999'  >1K?                  DRK FEB11\n         BNH   EXTOKL                   NO                    DRK FEB11\n         MVC   MSGFEXT+3(3),=CL3'>1K'   YES, MARK IT          DRK FEB11\n         B     NOSTRIP                                        DRK FEB11\nEXTOKL   DS    0H                                             DRK FEB11\n         LA    R15,MSGFEXT                                    DRK FEB11\n         BAS   R1,DVOLSPCS              REMOVE LEADING ZEROES DRK FEB11\nNOSTRIP  DS    0H                                             DRK FEB11\n         LA    R15,MSGFCYL                                    DRK FEB11\n         BAS   R1,DVOLSPCS              REMOVE LEADING ZEROES DRK FEB11\n         LA    R15,MSGLCYL                                    DRK FEB11\n         BAS   R1,DVOLSPCS              REMOVE LEADING ZEROES DRK FEB11\n         LA    R15,MSGLTRK                                    DRK FEB11\n         BAS   R1,DVOLSPCS              REMOVE LEADING ZEROES DRK FEB11\n* SHORT\n         MVC   SHORTTOT(6),TRACKS       FREE TTTTTT           DRK FEB11\n         MVC   SHORTEXT(5),=CL5' '      CLEAR                 DRK FEB11\n         MVC   SHORTEXT+1(3),MSGFEXT+3  TOT  EXT              DRK FEB11\n         MVC   SHORTCYL(5),MSGFCYL+1    FREE CCCCC            DRK FEB11\n         MVC   SHORT1CL(5),MSGLCYL+1    LRG  CCCCC            DRK FEB11\n         MVC   SHORT1TR(2),MSGLTRK+4    LRG  TT               DRK FEB11\n         MVC   SHORTLRG(6),LRGTRKS      LRG  TTTTTT           DRK FEB11\n         MVC   SHORT5XT(6),=CL6'   N/A'                       DRK FEB11\n* LONG\n         MVC   EXTENTS+2(3),MSGFEXT+3   TOT  EXT              DRK FEB11\n         MVC   CYLS(5),MSGFCYL+1        FREE CCCCC            DRK FEB11\n         MVC   LRGXTNT1-1(5),MSGLCYL+1  LRG  CCCCC            DRK FEB11\n         MVI   LRGXTNT1-1+5,C'+'        +                     DRK FEB11\n         MVC   LRGXTNT1+5(2),MSGLTRK+4  LRG  TT               DRK FEB11\n         MVI   LRGXTNT1+5+2,C'/'        /                     DRK FEB11\n         MVC   LRGXTNT2+1(6),LRGTRKS    LRG  TTTTTT           DRK FEB11\n         MVI   LRGXTNT2+1+6,C'/'        /                     DRK FEB11\n         B     SKIPLSPC                                       DRK FEB11\n         SPACE 1                                              DRK FEB11\nDVOLSPCS DS    0H                      LITTLE SUB             DRK FEB11\n         LA    R14,5                   FIRST 5 NUMBERS        DRK FEB11\nDVOLSPCL CLI   0(R15),C'0'             STILL ZEROS            DRK FEB11\n         BHR   R1                      NO, END OF LEADING 0   DRK FEB11\n         MVI   0(R15),C' '             CONVERT TO BLANK       DRK FEB11\n         LA    R15,1(,R15)             NEXT NUMBER            DRK FEB11\n         BCT   R14,DVOLSPCL            LOOP FOR 5             DRK FEB11\n         BR    R1                      ALL DONE               DRK FEB11\n         SPACE 1                                              DRK FEB11\nSKIPLSPC DS    0H                                             DRK FEB11\n*   PERCENT USED                                              DRK FEB11\n         L     R0,TOTFREE          TOTAL FREE TRKS            DRK FEB11\n         SR    R2,R2                                          DRK FEB11\n         ICM   R2,3,DS4DEVSZ-DS4IDFMT+SAVEFMT4  DEV CYLS      DRK FEB11\n         MH    R2,=H'15'           DEV CYLS * TRK/CYL         DRK FEB11\n         LR    R1,R2               DEV TRKS                   DRK FEB11\n         SR    R1,R0               DEV TRKS - TOTAL TRKS FREE DRK FEB11\n         MH    R1,=H'100'          * 100 FOR PERCENT          DRK FEB11\n         SR    R0,R0               CLEAR EVEN FOR DIVIDE      DRK FEB11\n         DR    R0,R2               PERCENT SPACE USED         DRK FEB11\n         CVD   R1,DVOLDEC          PACKED                     DRK FEB11\n         MVC   SHORTVSM+1(4),=XL4'40202120'                   DRK FEB11\n         ED    SHORTVSM+1(4),DVOLDEC+6                        DRK FEB11\n         MVC   PCTUSED(4),SHORTVSM+1    PCT USED LONG         DRK FEB11\n         SPACE 1                                              DRK FEB11\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT    DRK FEB11\n         BNE   DISPLAY6                                       DRK FEB11\n*   USER COUNT                                                DRK FEB11\n         CLC   USECOUNT,=H'1'           USER COUNT?           DRK FEB11\n         BNE   NOUSER                   NO                    DRK FEB11\n         L     R1,UCBANSR               UCB ADDRESS           DRK FEB11\n         USING UCBOB,R1                                       DRK FEB11\n         SR    R0,R0                    CLEAR TO ICM          DRK FEB11\n         ICM   R0,B'0011',UCBUSER       USER COUNT            DRK FEB11\n         DROP  R1                                             DRK FEB11\n         CVD   R0,DVOLDEC               CONVERT USER COUNT    DRK FEB11\n         MVC   EDITFLD,=X'4020202020202120'  EDIT MASK        DRK FEB11\n         ED    EDITFLD,DVOLDEC+4        EDIT VALUE            DRK FEB11\n         MVC   SHORT5XT,EDITFLD+3-1     COPY TO OUTPUT LINE   DRK FEB11\nNOUSER   DS    0H                                             DRK FEB11\n*        CLC   LARGE5+50-10(4),=F'0'    TEST FOR NO SPACE ON PACK     \"\n         CLC   TOTFREE(4),=F'0'         TEST FOR NO SPACE ON PACK     \"\n         BE    NOSPACE                                        DRK FEB11\n         B     CALCRC\n         SPACE 2\nDISPLAY6 DS    0H\n         LA    R15,FREEMSG1             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,FREEMSG2             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,FREEMSG3             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,USEDMSG              LOAD OUTPUT LINE ADDR DRK FEB11\n         BAL   R2,PUTL                                        DRK FEB11\n         SPACE 2\nCALCRC   MVC   TOTAL,=H'4095'           SET TOTAL = 4095 (LARGEST)\n         C     R7,=F'4095'              COMPARE TOTAL TO 4095\n         BH    INCRVOL\n         STH   R7,TOTAL                 STORE TOTAL\n         B     INCRVOL\n         TITLE 'NO SPACE ON VOLUME'\n***********************************************************************\n*                                                                     *\n*              NO SPACE ON VOLUME                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOSPACE  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    NOSPACE2\n         CLC   USECOUNT,=H'1'           USER COUNT?           DRK FEB11\n         BNE   NOSPACE1                                       DRK FEB11\n         MVC   SHORTTOT(32),=CL32'     0   0     0     0+ 0      0'   \"\n         B     INCRVOL                                        DRK FEB11\nNOSPACE1 DS    0H\n         MVC   SHORTTOT(38),VOLFULL+4   MOVE NO SPACE MESSAGE\n         B     INCRVOL\nNOSPACE2 LA    R15,VOLFULL              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         TITLE 'END OF UCB TABLE REACHED'\n***********************************************************************\n*                                                                     *\n*              END OF UCB TABLE REACHED                               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R8  - PDE POINTER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOUCB    L     R3,0(R8)\n         CLI   0(R3),C'*'\n         BE    TSERONLY\n         CLI   FOUNDONE,1               ANY FOUND?\n         BE    NEXTONE                  YES, BRANCH\n         MVC   VOLSER,DVOLSER           SERIAL NOT FOUND - SET UP MSG\n         SPACE 2\n         CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRTNOSER\n         MVC   SHORTDCB(23),NOSER+13\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTONE\nPRTNOSER LA    R15,NOSER                LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTONE\nTSERONLY NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    RETURN\n         LA    R15,SHORTLIN             LOAD LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         B     RETURN\n         TITLE 'ERRORS'\n***********************************************************************\n*                                                                     *\n*              ERROR READING FORMAT 4 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRFMT4  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRNTFMT4\n         MVC   SHORTDCB(27),FMT4BAD+4\n         B     INCRVOL\nPRNTFMT4 LA    R15,FMT4BAD              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              ERROR READING FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRFMT5  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRNTFMT5\n         MVC   SHORTDCB(27),FMT5BAD+4\n         B     INCRVOL\nPRNTFMT5 LA    R15,FMT5BAD              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         EJECT\n***********************************************************************\n*                                                                     *\n*              UNABLE TO PARSE COMMAND OPERANDS                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRPARS  LA    R15,PARSERR              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,0                    SET RETURN CODE\n         B     RETURN2\n         TITLE 'FINISHED PROCESSING VOLUME'\n***********************************************************************\n*                                                                     *\n*              FINISHED THIS VOLUME - GO TO NEXT VOLUME               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R8  - PDE POINTER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nINCRVOL  CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   DISPLAY9\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTVOL                  REPEAT FOR ALL MATCHES\n         SPACE 2\nDISPLAY9 LA    R15,BLANKLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTVOL                  REPEAT FOR ALL MATCHES\n         SPACE 2\nNEXTONE  L     R8,8(R8)                 LOAD NEXT PDE ADDRESS\n         C     R8,=X'FF000000'          TEST FOR END OF LIST\n         BNE   NEXTPARM\n         B     RETURN\n         TITLE 'INDEXED VTOC INTERFACE'\n********************************************************************CST\n*                                                                   CST\n*  ROUTINES ADDED TO INTERFACE WITH INDEXED VTOCS.  THE FOLLOWING   CST\n*  STEPS ARE NEEDED                                                 CST\n*     1.  FIND UCB ADDRESS IN ORDER TO PASS UNIT ADDRESS TO         CST\n*         DYNAMIC ALLOCATE.                                         CST\n*     2.  DYNAMICALLY ALLOCATE VTOC                                 CST\n*     3.  OPEN VTOC                                                 CST\n*     4.  CALL IXTOFMT5 TO RETURN PSUEDO FORMAT-5S                  CST\n*     5.  CLOSE VTOC                                                CST\n*     6.  DEALLOCATE VTOC                                           CST\n* ZZZZ                                                              CST\n********************************************************************CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X I N I T                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  INITIALIZE FOR READING IX VTOC                                   CST\n*                                                                   CST\nIXINIT   XC    IXWORD,IXWORD           ZERO WORK WORD FOR 1ST CALL  CST\n         TM    VTOCINDS,DS4IVTOC       THIS VTOC INDEXED?           CST\n         BZR   R2                      IF NO, QUIT                  CST\n*                                                                   CST\n*  DYNALLOC VTOC                                                    CST\n*                                                                   CST\n         L     R1,UCBADDR              UCB ADDRESS                  ABL\n         USING UCB,R1                                               ABL\n*        MVC   IXKUNT+6(3),UCBNAME     SET UP DYNALOC UNIT.       ABL97\n*                         /1234                                   ABL97\n*                         ----1----+----2                         ABL97\n         MVC   IXKUNT+7(4),UCBTEXT     SET UP DYNALOC UNIT.       ABL97\n         CLI   IXKUNT+7,C' '  BLANK FIRST DIGIT?                  ABL97\n         BNE   USE4           NO, BRANCH                          ABL97\n         MVI   IXKUNT+5,3     RESET THE UCB LENGTH                ABL97\n         MVC   IXKUNT+6(3),IXKUNT+8  MOVE DOWN A 3 DIGIT UCB ADDR ABL97\nUSE4     DS    0H                                                 ABL97\n         MVC   IXKVOL+6(6),UCBVOLI     SET UP DYNALOC VOL.          ABL\n         DROP  R1                      DROP UCB ADDRESSING          ABL\n         LA    R1,AIX99RBA             POINT TO PARM LIST           CST\n         DYNALLOC                      CALL SVC99                   CST\n         LTR   R15,R15                 DID IT WORK?                 CST\n         BZ    *+8                     BIF YES                      CST\n         EX    0,*                     ELSE DIE                     CST\n*                                                                   CST\n* OPEN VTOC                                                         CST\n*                                                                   CST\n         MVC     IXDCB+DCBDDNAM(8),IXKDDN+6  MOVE DDNAME TO DCB     CST\n         RDJFCB  IXDCB                 READ IN JFCB                 CST\n         MVC   IXJFCB(44),=44XL1'04'   DSNAME FOR VTOC              CST\n         OPEN  (IXDCB,(INPUT)),TYPE=J  OPEN VTOC                    CST\n         TM    IXDCB+48,X'10'          DID IT WORK?                 CST\n         BOR   R2                      YES. ALL READY.              CST\n         EX    0,*                     NO. FAIL.                    CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X F M T 5                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  GET A PSUEDO FORMAT-5 FROM AN IX VTOC                            CST\n*                                                                   CST\nIXFMT5   TM    VTOCINDS,DS4IVTOC       VTOC IS INDEXED?             CST\n         BZ    4(,R2)                  IF NOT, SKIP                 CST\n         LA    R1,VTOCFMT5             POINT TO OUTPUT AREA         ABL\n         ST    R1,IXPARM+16            PASS TO IXTOFMT5 ROUTINE     ABL\n         LA    R1,IXPARM               POINT TO PARMLIST            CST\n         L     R15,=V(IXTOFMT5)        POINT TO ROUTINE             CST\n         BALR  R14,R15                 CALL INTERFACE ROUTINE       CST\n         LTR   R15,R15                 DID IT WORK?                 CST\n         BZR   R2                      IF SO, CONTINUE              CST\n         EX    0,*                     ELSE DIE.                    CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X T E R M                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  CLOSE VTOC DCB AND FREE ALLOCATION                               CST\n*                                                                   CST\nIXTERM   TM    VTOCINDS,DS4IVTOC       VTOC IS INDEXED?             CST\n         BZR   R2                      IF NOT, SKIP                 CST\n*                                                                   CST\n*  CORRECT DSCB COUNT AND GET VIRS FOR STAFF                        CST\n*                                                                   CST\n         L     R1,IXCT1                USE DSCB 0 COUNT FROM IX     CST\n         STH   R1,MTDSCBS              UPDATE THE EMPTY COUNT       ABL\n         CLOSE IXDCB                   CLOSE THE VTOC               CST\n         MVC   IXKDDN2+6(8),IXKDDN+6   MOVE DDNAME TO DEALLOC LIST  CST\n         LA    R1,AIX99RBF             POINT TO PARMLIST            CST\n         DYNALLOC                      FREE VTOC                    CST\n         LTR   R15,R15                                              CST\n         BZR   R2                      RETURN                       CST\n         EX    0,*                     RETURN                       CST\n         EJECT ,                                                    CST\n*                                                                   CST\n*  PARMLIST FOR INTERFACE ROUTINE                                   CST\n*                                                                   CST\nIXPARM   DC    A(IXWORD)               @ WORK WORD                  CST\n         DC    A(IXDCB)                @ VTOC DCB                   CST\n         DC    A(IXCT1)                @ CNT - FREE FMT 0S          CST\n         DC    A(IXCT2)                @ CNT - FREE VIRS            CST\n         DC    A(VTOCFMT5-VTOCFMT5)    @ BFR FOR FMT5               CST\nIXWORD   DC    F'0'                    WORK WORD                    CST\nIXCT1    DC    F'0'                    COUNT FREE FMT0              CST\nIXCT2    DC    F'0'                    COUNT FREE VIRS              CST\n         SPACE 2                                                    CST\n*                                                                   CST\n*  PARMLIST FOR VTOC ALLOCATE                                       CST\n*                                                                   CST\n         PRINT GEN,DATA                                             CST\nAIX99RBA DC    0F'0',X'80',AL3(IX99RBAL)                            CST\nIX99RBAL DC    AL1(20,1)               LENGTH, VERB                 CST\n         DC    X'4000'                 FLAG1 (DON'T USE EXISTING)   CST\n         DC    AL2(0,0)                ERROR CODE, INFO CODE        CST\n         DC    A(IX99TXT1)             @ TEXT UNITS                 CST\n         DC    2F'0'                   RSVD, FLAG2                  CST\nIX99TXT1 DC    A(IXKDDN,IXKVOL,IXKUNT,IXKOLD)                       CST\n         DC    X'80',AL3(IXKKEP)                                    CST\nIXKDDN   DC    AL2(85,1,8),C'SYS99999' DDNAME ASSIGNED              CST\nIXKVOL   DC    AL2(16,1,6),C'XXXXXX'   VOL=SER=                     CST\nIXKUNT   DC    AL2(21,1,5),C'/ UCB'    UNIT=                      ABL97\nIXKOLD   DC    AL2(4,1,1),X'01'        DISP=OLD                     CST\nIXKKEP   DC    AL2(5,1,1),X'08'        DISP=KEEP                    CST\n         SPACE 4                                                    CST\n*                                                                   CST\n*  PARMLIST FOR VTOC DEALLOCATE                                     CST\n*                                                                   CST\nAIX99RBF DC    0F'0',X'80',AL3(IX99RBFR)                            CST\nIX99RBFR DC    AL1(20,2)               LENGTH, VERB                 CST\n         DC    X'0000'                 FLAG1                        CST\n         DC    AL2(0,0)                ERROR CODE, INFO CODE        CST\n         DC    A(IX99TXT2)             @ TEXT UNITS                 CST\n         DC    2F'0'                   RSVD, FLAG2                  CST\n         SPACE 2                                                    CST\nIX99TXT2 DC    A(IXKDDN2),X'80',AL3(IXKKEP)                         CST\nIXKDDN2  DC    AL2(1,1,8),C'SYS99999'  DDNAME ASSIGNED              CST\n         PRINT GEN,NODATA                                           CST\n         SPACE 4                                                    CST\n*                                                                   CST\n*  MISC CONSTANTS AND EQUATES                                       CST\n*                                                                   CST\nCVTILK2  EQU   40                      OFFSET TO LOOKUP TABLE       CST\nCVTUCBSE EQU   1076                    ADDRESS OF UCB SCAN SERVICE  ABL\nDCBDDNAM EQU   40                      OFFSET TO DDNAME             CST\n         SPACE 2                                                    CST\n*                                                                   CST\n*  DCB AND JFCB FOR VTOC                                            CST\n*                                                                   CST\nIXLST    DC    0F'0',X'87',AL3(IXJFCB)                              CST\nIXJFCB   DC    XL176'00'                                            CST\n         PRINT NOGEN                                                CST\nIXDCB    DCB   DSORG=PS,MACRF=(E),EXLST=IXLST,DDNAME=NONE           CST\n         PRINT GEN                                                  CST\n         SPACE 4                                                    CST\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*              FREE STORAGE, SET RETURN CODE, AND RETURN              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   IKJRLSA DVOLANS                RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    $$EXIT2                 SKIP CLOSE HARDCOPY NOT OPEN\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\n$$EXIT2  DS    0H\n         LH    R15,TOTAL                SAVE 5 LARGEST EXTENTS TOTAL\nRETURN2  $RTRN RC=(R15),RENT=DSECTLEN   RETURN\n         TITLE 'DISPLAY OUTPUT SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*              DISPLAY OUTPUT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     LH    R3,0(R15)                LOAD DATA LENGTH\n         BCTR  R3,0                     BRANCH ON COUNT\n         EX    R3,MOVELINE              MOVE DATA TO OUTPUT LINE\n         CLC   NOPRINT,=H'2'            SEE IF OUTPUT SUPPRESSED\n         BE    PUTLHPDS\n         PUTLINE OUTPUT=(DVOLHEDR,,,DATA),MF=(E,DVOLIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            OUTPUT LINE\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY          SEE IF HARCOPY WANTED\n         BZ    PUTLBACK                 NO, SO GO ON BACK\n         PUT   HARDCPY,OUTLINE          WRITE OUTPUT LINE\n         MVC   OUTLINE,BLANKS           CLEAR OUTPUT LINE\nPUTLBACK BR    R2\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                        EXIT\n         TITLE 'CONSTANT DATA AREAS'\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANT STORAGE                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nFMT4BAD  #TSOMSG 'ERROR READING FORMAT 4 DSCB',LENGTH=80\n         SPACE\nFMT5BAD  #TSOMSG 'ERROR READING FORMAT 5 DSCB',LENGTH=80\n         SPACE\nVOLFULL  #TSOMSG 'VOLUME CONTAINS NO FREE SPACE',LENGTH=80\n         SPACE\nPARSERR  #TSOMSG 'UNABLE TO INTERPRET COMMAND',LENGTH=80\n         SPACE\nDOS      #TSOMSG '*** WARNING - VOLUME MAY CONTAIN DOS DATA SETS',     +\n               LENGTH=80\n         SPACE\nUNITTBL  DC      C'??????????????????????  9345????????'\n         DC      C'2305-12305-22314  3330  3340  3350  '\n         DC      C'3375  3330-13380  3390  '\n         SPACE\nDAMAGED  #TSOMSG '*** WARNING - VTOC DAMAGE BIT IS SET.  PLEASE NOTIFY +\n               YOUR SYSTEMS PROGRAMMER',LENGTH=80\n         SPACE\nSHORT1   #TSOMSG 'SERIAL  --UNIT--   ATTRIB   %USED AVAIL -----TOTALS--+\n               ---  LARGEST-EXTENT 5 EXTS',LENGTH=80          DRK FEB11\nSHORT2   #TSOMSG '       ADDR TYPE   MOUNT/USE      DSCBS TRACKS EXT   +\n               CYL   CYL+TR TRACKS TRACKS',LENGTH=80          DRK FEB11\nSHORT1U  #TSOMSG 'SERIAL  --UNIT--   ATTRIB   %USED AVAIL -----TOTALS--+\n               ---  LARGEST-EXTENT  USER',LENGTH=80           DRK FEB11\nSHORT2U  #TSOMSG '       ADDR TYPE   MOUNT/USE      DSCBS TRACKS EXT   +\n               CYL   CYL+TR TRACKS  COUNT',LENGTH=80          DRK FEB11\n         SPACE\nBLANKLIN #TSOMSG ' ',LENGTH=80\nBADOPEN  #TSOMSG   'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED', +\n               LENGTH=80\n         SPACE\nFLAGS2   DS    X                         HARDCOPY OPTION SWITCH\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n*                     XXX. XXXX          NOT USED\n         SPACE\nDSNAME   DC    44X'04'\n         EJECT\n***********************************************************************\n*                                                                     *\n*              PUTLINE, CAMLST, AND MESSAGE MODELS                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSHORTMDL #TSOMSG ' ',LENGTH=80\nSHORTLEN EQU   *-SHORTMDL\n         SPACE 2\nMODELS1  PUTLINE MF=L\n         CAMLST SEARCH,*-*,*-*,*-*\n         CAMLST SEEK,*-*,*-*,*-*\nMODLEN1  EQU   *-MODELS1\n         SPACE 2\nMODELS2  #TSOMSG 'VOLUME SERIAL = XXXXXX     UNIT = XXX     TYPE = XXXX+\n               XX',LENGTH=80\n         #TSOMSG 'STATUS: REMOVABLE           UNALLOCATED  OFFLINE',   +\n               LENGTH=80\n         SPACE\n         #TSOMSG 'VSAM: OWNERSHIP - OFF   TIMESTAMPS - ................+\n               /................',LENGTH=80\n         SPACE\nMODLEN2  EQU   *-MODELS2\n         SPACE 2\nMODELS3  #TSOMSG 'FREE SPACE IS XXXXXX TRACKS IN XXXX EXTENTS INCLUDING+\n                XXXXX FULL CYLINDERS',LENGTH=80               DRK FEB11\n         SPACE\n         #TSOMSG 'LARGEST EXTENTS ARE: /CYL+TR/',LENGTH=80\n         SPACE\n         #TSOMSG '                     /TRACKS/',LENGTH=80\n         SPACE\nMODLEN3  EQU   *-MODELS3\n         SPACE\nMODELS3P #TSOMSG 'VOLUME IS XXXX PERCENT USED',LENGTH=80      DRK FEB11\n         SPACE 2\nMODLEN3P EQU   *-MODELS3P\n         SPACE\nMODELS4  #TSOMSG 'VTOC CONTAINS XXXX BLANK DSCB''S',LENGTH=80\n         SPACE\n         #TSOMSG 'XXXXXX - VOLUME OR UCB NOT FOUND',LENGTH=80\n         SPACE 1\n         #TSOMSG 'INDEXED VTOC CONTAINS XXXX FREE VIR''S',LENGTH=80\n         SPACE\nMODLEN4  EQU   *-MODELS4\n         EJECT\n***********************************************************************\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n***********************************************************************\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         EJECT\n***********************************************************************\n*                                                                     *\n*              INSTRUCTIONS TO BE EXECUTED BY EXECUTE INSTRUCTIONS    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nMOVENAME MVC   0(0,R2),0(R4)            MOVE HARDCOPY DDNAME\nMOVELINE MVC   DVOLHEDR(0),0(R15)       MOVE PRINT TO OUTPUT LINE\nMOVESER  MVC   DVOLSER(0),0(R3)         COPY VOLUME SERIAL\nMOVEXTNT MVC   LARGE5(0),LARGE5+10      COPY EXTENT ENTRIES\nFMT5ADDR LA    R6,DS5EXT01              LOAD EXTENT DESCRIPTION ADDRESS\n         LA    R6,DS5EXT02\n         LA    R6,DS5EXT03\n         LA    R6,DS5EXT04\n         LA    R6,DS5EXT05\n         LA    R6,DS5EXT06\n         LA    R6,DS5EXT07\n         LA    R6,DS5EXT08\n         LA    R6,DS5EXT09\n         LA    R6,DS5EXT10\n         LA    R6,DS5EXT11\n         LA    R6,DS5EXT12\n         LA    R6,DS5EXT13\n         LA    R6,DS5EXT14\n         LA    R6,DS5EXT15\n         LA    R6,DS5EXT16\n         LA    R6,DS5EXT17\n         LA    R6,DS5EXT18\n         LA    R6,DS5EXT19\n         LA    R6,DS5EXT20\n         LA    R6,DS5EXT21\n         LA    R6,DS5EXT22\n         LA    R6,DS5EXT23\n         LA    R6,DS5EXT24\n         LA    R6,DS5EXT25\n         LA    R6,DS5EXT26\n*\nFMT7ADDR LA    R6,DS7EXTNT              LOAD EXTENT DESCRIPTION ADDRESS\n         LA    R6,DS7EXTNT+8\n         LA    R6,DS7EXTNT+16\n         LA    R6,DS7EXTNT+24\n         LA    R6,DS7EXTNT+32\n         LA    R6,DS7ADEXT\n         LA    R6,DS7ADEXT+8\n         LA    R6,DS7ADEXT+16\n         LA    R6,DS7ADEXT+24\n         LA    R6,DS7ADEXT+32\n         LA    R6,DS7ADEXT+40\n         LA    R6,DS7ADEXT+48\n         LA    R6,DS7ADEXT+56\n         LA    R6,DS7ADEXT+64\n         LA    R6,DS7ADEXT+72\n         LA    R6,DS7ADEXT+80\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*              PARSE CONTROL BLOCKS                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDVOLPCL  IKJPARM DSECT=DVOLPDL\nVOL      IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               LIST,                                                   +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               DEFAULT='*'\nOUTFORM  IKJKEYWD DEFAULT='SHORT'\n         IKJNAME  'SHORT'\n         IKJNAME  'LONG'\nUSECOUNT IKJKEYWD DEFAULT='NOUSER'                            DRK FEB11\n         IKJNAME  'USER',ALIAS=('USED')                       DRK FEB11\n         IKJNAME  'NOUSER',ALIAS=('NOUSED')                   DRK FEB11\nNOHEADER IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nNOPRINT  IKJKEYWD\n         IKJNAME  'PRINT'\n         IKJNAME  'NOPRINT'\nSERONLY  IKJKEYWD\n         IKJNAME  'SERONLY',INSERT='NOHEADER'\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\n         IKJENDP\n         TITLE 'UCB MAP'\n***********************************************************************\n*                                                                     *\n*              UCB MAP                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         PRINT NOGEN\nUCB      DSECT\n         IEFUCBOB LIST=YES\n         PRINT GEN\n         SPACE 3\n         AIF  ('&OPSYSTM' EQ 'MVS112').MVSEQU\n         AIF  ('&OPSYSTM' EQ 'MVS113').MVSEQU\nDVOLFLGA EQU  UCBFL1\nDVOLFLGB EQU  UCBFL5\nDVOLNRDY EQU  UCBNOTRD\n         AGO  .WORK\n.MVSEQU  ANOP\nDVOLFLGA EQU  UCBFLA\nDVOLFLGB EQU  UCBFLC\nDVOLNRDY EQU  UCBNRY\n.WORK    ANOP\n         TITLE 'WORK AREA'\n***********************************************************************\n*                                                                     *\n*                       WORK AREA DSECT                               *\n*                                                                     *\n***********************************************************************\nDVOLDS   DSECT\nSAVEAREA DC    18F'0'\nWORKAREA DS    XL16\nDVOLDEC  DS    D\nTOTFREE  DS    F                                              DRK FEB11\nLRGTRKS  DS    CL6                                            DRK FEB11\nEDITFLD  DC    X'4020202020202120'\nSERPTR   DS    A                        ADDRESS OF SERIAL FIELD\nMODLINE  DC    H'84,0'\nBLANKS   DC    CL80' '\nSAVEFMT4 DS    0D,148C\nVTOCFMT4 DS    0D,148C\nVTOCFMT5 EQU   VTOCFMT4\nVTOCFMT7 EQU   VTOCFMT4\nDVOLCCHH DS    XL5\nDVOLHEDR DS    H,H\nOUTLINE  DS    CL80\nVTOCINDS DS    X\nFOUNDONE DS    X\nMTDSCBS  DS    H\nSTARTC   DS    F                  STARTING TRACK\nSTARTT   DS    F                  STARTING CYLINDER\nTOTALC   DS    F                  TOTAL CYLINDERS\nTOTALT   DS    F                  TOTAL TRACKS\nLARGE5   DS    XL50\n*                      ----+----1----+----2----+----3----+----4\nMSGAREA  DS    CL40    SPACE=aaaaaa,bbbbbb,cccccc/dddddd,eeeeee\n*                      aaaaaa = Total number of free cylinders\n*                      bbbbbb = Total number of additional free\n*                               tracks\n*                      cccccc = Total number of free extents\n*                      dddddd = Number of cylinders in largest\n*                               free extent\n*                      eeeeee = Number of additional tracks in\n*                               largest free extent\n         ORG   MSGAREA+6\nMSGFCYL  DS    CL6\n         DS    CL1\nMSGFTRK  DS    CL6\n         DS    CL1\nMSGFEXT  DS    CL6\n         DS    CL1\nMSGLCYL  DS    CL6\n         DS    CL1\nMSGLTRK  DS    CL6\nHALF     DS    H\nTRKPRCYL DS    H\nTOTAL    DS    H\nUCBADDR  DS    A\nUCBTABLE DS    A\nUCBNEXT  DS    A\nUCBPARMS DS    4A             PARMS FOR UCB SCAN SERVICES       ABL-410\nUCBANSR  DS    A\nUCBTEXT  DS    A              UCB FOUR CHARACTER NAME             ABL97\n         DS    0D\nUCBWORK  DS    CL216          UCB SCAN WORK AREA                ABL-410\n         DS    0D\nPDSMSGA  DC    F'0'\nDVOLECB  DC    F'0'\n         SPACE\nDVOLPPL  DS    0F\n         ORG   *+PPLLEN\n         SPACE\nDVOLIOPL DS    0F\n         ORG   *+IOPLLEN\n         SPACE\nDVOLANS  DS    A\n         SPACE\nDVOLPTPB PUTLINE MF=L\n         SPACE\nDVOLDCB4 CAMLST SEARCH,0,0,0\n         SPACE\nDVOLDCB5 CAMLST SEEK,0,0,0\n         SPACE\nLINE1    #TSOMSG ' ',LENGTH=80\n         SPACE\nLINE2    #TSOMSG ' ',LENGTH=80\n         SPACE\nLINE3    #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG1 #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG2 #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG3 #TSOMSG ' ',LENGTH=80\n         SPACE\nUSEDMSG  #TSOMSG ' ',LENGTH=80                                DRK FEB11\n         SPACE\nBLDSCBS  #TSOMSG ' ',LENGTH=80\n         SPACE\nNOSER    #TSOMSG ' ',LENGTH=80\n         SPACE\nBLDSVIR  #TSOMSG ' ',LENGTH=80\n         SPACE 2\nSHORTLIN #TSOMSG ' ',LENGTH=80\n         SPACE\nADDRDCE  DS    A              UCB DCE POINTER                   ABL-410\nSRVUCBDC DS    CL128          UCB SAVE AREA FOR UCB DCE AREA    ABL-410\nSRVUCBUC DS    CL48           UCB SAVE AREA FOR UCB COPY AREA   ABL-410\nSRVUCBIC DS    CL48           UCB SAVE AREA FOR UCB TOKEN       ABL-410\nDSECTLEN EQU   *-DVOLDS\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              OUTPUT LINE EQUIVALENCES                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG    LINE1\n         DC    H'84,0',C'VOLUME SERIAL = '\nDVOLSER  DC    CL6'XXXXXX'\n         DC    C'     UNIT = '\nUNITADDR DC    CL4'XXXX'                                          ABL97\n         DC    C'    TYPE = '                                     ABL97\nUNITTYPE DC    CL6'XXXXXX'\n         SPACE\n         ORG   LINE2\n         DC    H'84,0',C'STATUS: '\nMNTSTAT  DC    CL9'REMOVABLE'\n         DC    CL2' '\nUSESTATS DC    CL7'XXXXXXX'\n         DC    CL2' '\nALLOCATD DC    CL11'XXXXXXXXXXX'\n         DC    CL2' '\nONOFF    DC    CL17'OFFLINE'\n         DC    CL2' '\nUNLOAD   DC    CL17'XXXXXXXXXXXXXX'\n         SPACE\n         ORG   LINE3\n         DC    H'84,0',C'VSAM: OWNERSHIP - '\nOWNERSHP DC    CL3'OFF'\n         DC    C'   TIMESTAMPS - '\nTIMEST1  DC    CL16' '\n         DC    C'/'\nTIMEST2  DC    CL16' '\n         ORG   FREEMSG1\n         DC    H'84,0',C'FREE SPACE IS '                      DRK FEB11\nTRACKS   DC    CL6'XXXXXX'                                    DRK FEB11\n         DC    C' TRACKS IN'\nEXTENTS  DC    CL5' XXXX'\n         DC    C' EXTENTS INCLUDING '                         DRK FEB11\nCYLS     DC    CL5'XXXXX'                                     DRK FEB11\n         DC    C' FULL CYLINDERS'\n         SPACE\n         ORG   FREEMSG2\n         DC    H'84,0',C'LARGEST EXTENTS ARE: / CYL+TR/'\nLRGXTNT1 EQU   *\n         SPACE\n         ORG   FREEMSG3\n         DC    H'84,0',C'                     / TRACKS/'\nLRGXTNT2 EQU   *\n         SPACE\n         ORG   USEDMSG                                        DRK FEB11\n         DC    H'84,0',C'VOLUME IS '                          DRK FEB11\nPCTUSED  DC    CL4'XXXX'                                      DRK FEB11\n         DC    C' PERCENT USED'                               DRK FEB11\n         SPACE\n         ORG   BLDSCBS\n         DC    H'84,0',C'VTOC CONTAINS'\nDSCBS    DC    CL5' XXXX'\n         DC    C'BLANK DSCB''S'\n         DC    CL48' '\n         SPACE\n         ORG   NOSER\n         DC    H'84,0'\nVOLSER   DC    CL6'XXXXXX'\n         DC    C' - VOLUME OR UCB NOT FOUND'\n         DC    CL48' '\n         SPACE\n         ORG   BLDSVIR\n         DC    H'84,0',C'INDEXED VTOC CONTAINS'\nDSCBVIR  DC    CL5' XXXX'\n         DC    C'FREE VIR''S'\n         DC    CL42' '\n         SPACE 2\n         ORG   SHORTLIN\n         DS    H,H\nSHORTSER DS    CL6\n         DS    CL1\nSHORTUNT DS    CL4                                                ABL97\n         DS    CL1\nSHORTTYP DS    CL6\n         DS    CL1\n*HORTMNT DS    CL6\nSHORTMNT DS    CL3\nSHORTSLA DS    CL1\nSHORTUSE DS    CL4\n         DS    CL1\n*HORTVSM DS    CL2                                                ABL97\nSHORTVSM DS    CL5                                                ABL97\n         DS    CL1\nSHORTDCB DS    CL5\n         DS    CL1\nSHORTTOT DS    CL6\nSHORTEXT DS    CL5\nSHORTCYL DS    CL5\n         DS    CL1                                            DRK FEB11\nSHORT1CL DS    CL5\n         DC    C'+'\nSHORT1TR DS    CL2\n         DS    CL1\nSHORTLRG DS    CL6\n         DS    CL1\nSHORT5XT DS    CL6\n         TITLE 'FORMAT 4 DSCB MAP'\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 4 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT4-44\n         #VTCFMT4\n         TITLE 'FORMAT 5 DSCB MAP'\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 5 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT5\n         #VTCFMT5\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 7 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT7\n         #VTCFMT7\n         CVT   DSECT=YES\n         END\n//*\n//ASM2  EXEC  PGM=ASMA90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,\n//             'XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&Y,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n         TITLE 'IXTOFMT5 -- INDEXED VTOC FORMAT-5 INTERFACE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* 05/25/94  ADDED SUPPORT FOR 3390M9 DISK DEVICES BY MODIFYING    ABL *\n*           THE IXTOFMT5 ROUTINE TO RETURN FORMAT 7 DSCB RECORDS  ABL *\n*           (INSTEAD OF FORMAT 5) IF &MODEL9 IS 'YES'.            ABL *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         MACRO\n         #VTCFMT7\n         MNOTE *,'       #VTCFMT7                                  ABL'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT7                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 7 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 7 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 7 DSCB DESCRIBES VOLUME FREE SPACE.      *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT7                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT7DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT7                                 *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\nDS7KEYID DS    XL4                     KEY X'07070707'\nDS7EXTNT DS    5XL8                    SPACE FOR 5 EXTENT DESCRIPTIONS\nDS7FMTID DS    X                       FORMAT IDENTIFIER\nDS7ADEXT DS    11XL8                   SPACE FOR 11 EXTENT DESCRIPTIONS\n         DS    XL2                     RESERVED\nDS7PTRDS DS    XL5                     POINTER TO NEXT FORMAT 7 DSCB\nDS7END   EQU   *                       END OF DSCB7\n         MEND\n         SPACE 3\n         LCLC  &MODEL9\n&MODEL9  SETC  'YES'                   3390M9 IS SUPPORTED\n*&MODEL9  SETC  'NO'                    3390M9 IS NOT SUPPORTED\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n***********************************************************************\n*\nIXTOFMT5 CSECT\n*\n*  THIS ROUTINE USES THE CVAF SERVICE ROUTINES TO CONVERT THE\n*  FREE SPACE BIT MAP OF AN INDEXED VTOC INTO PSUEDO FORMAT-5\n*  DSCBS.  THIS PROVIDES A COMPATIBILITY INTERFACE FUNCTION FOR\n*  PRE-DFDS ROUTINES WHICH EXAMINE FORMAT-5 DSCBS.\n*\n*  THIS ROUTINE IS CALLED ONCE FOR EACH FORMAT-5 WHICH MUST BE\n*  BUILT.  THE INDEX RECORD BUFFER RETURNED BY CVAF IS SAVED SO\n*  THAT NO ADDITIONAL I/O NEED BE DONE FOR SUCCEEDING CALLS.  THE\n*  BUFFERS ARE FREED WHEN THE LAST FORMAT-5 DSCB IS RETURNED.\n*  HENCE, THIS ROUTINE SHOULD BE CALLED UNTIL A FORMAT-5 DSCB WITH\n*  DS5PTRDS EQUAL TO ZERO IS RETURNED.  THE NON-ZERO VALUE IN\n*  DS5PTRDS WILL ALWAYS BE C'00001'.  NO ENQUEUE ON THE VTOC IS\n*  PERFORMED.\n*\n*  INPUT:    R1 -->  (PARMLIST)\n*                    A(WORD) -- ADDR OF A FULLWORD USED BY THIS\n*                               ROUTINE.  MUST BE ZEROED FOR FIRST\n*                               CALL AND RETURNED UNALTERED THEREAFTER.\n*                    A(DCB)  -- ADDR OF A DCB OPENED TO THE DESIRED\n*                               VTOC.  NO I/O MAY BE OUTSTANDING TO\n*                               THIS DCB.  AN APF-AUTHORIZED CALLER\n*                               MAY PASS A COMPLIMENTED UCB ADDRESS\n*                               INSTEAD.\n*                    A(COUNT1)- ADDR OF FULLWORD WHERE COUNT OF THE\n*                               FREE (FMT 0) DSCBS WILL BE RETURNED.\n*                    A(COUNT2)- ADDR OF FULLWORD WHERE COUNT OF THE\n*                               FREE VIRS WILL BE RETURNED.\n*                    A(FMT5) -- ADDR OF 140-BYTE AREA FOR FORMAT-5\n*                               DSCB BUILT BY THIS ROUTINE.\n*\n*  RETURN CODES:\n*            R15  = 0   ALL OK.\n*            R15  = 4   VTOC IS NOT IN INDEXED FORMAT.\n*            R15  = 8   CVAFTST CALL FAILED (OTHER THAN NOT INDEXED\n*                       FORMAT VTOC).  CVAFTST RC IN REG 0.\n*            R15  = 12  CVAFDSM CALL FAILED (OTHER THAN NON INDEXED\n*                       FORMAT VTOC).  CVAFDSM RC IN HIGH ORDER BYTE\n*                       OF R0. CVSTAT IN LOW ORDER BYTE OF R0.\n*            R15  = 16  (UNUSED)\n*            R15  = 20  LOGIC ERROR IN THIS ROUTINE.  R0 = OFFSET.\n*\n*\n*  ATTRIBUTES -  REENTRANT, PROBLEM STATE, PROBLEM KEY.\n*                THIS ROUTINE WILL WORK CORRECTLY ON A NON DFDS\n*                SYSTEM.  HOWEVER, DFDS MACROS ARE REQUIRED FOR\n*                ASSEMBLY.\n*\n*  WRITTEN BY: CHRIS THOMAS, UCLA/OAC SYSTEMS GROUP, 5/30/81\n*\n***********************************************************************\n         TITLE 'IXTOFMT5 -- MAINLINE ROUTINE'\n*\n*  INITIALIZATION\n*\n         SAVE  (14,12),,IXTOFMT5-VERSION_1.0   SAVE REGS\n         LR    R12,R15            ESTABLISH BASE\n         USING IXTOFMT5,R12\n         LR    R9,R13             SAVE CALLER'S R13\n         LR    R11,R1             SAVE CALLER'S PARM POINTER\n         USING PARMLIST,R11\n         L     R1,PARMWORD        POINT TO ANCHOR WORD\n         ICM   R13,B'1111',0(R1)  GET MY WORKAREA ANCHOR\n         BNZ   SKIPGET            IF NON-ZERO, CALL FOR NEXT FMT5\n*\n*  GET WORKAREA AT FIRST CALL\n*\n         GETMAIN  RU,LV=WORKLEN,SP=0\n         LR    R13,R1             ESTABLISH WORKAREA\n         USING WORKAREA,R13\n         L     R1,PARMWORD        ADDR OF ANCHOR\n         ST    R13,0(,R1)         SAVE FOR SUBSEQUENT CALLS\n         LR    R0,R13             ADDR FOR MVCL\n         LA    R1,WORKLEN         LENGTH FOR MVCL\n         SR    R3,R3              ZERO FILL BYTE\n         MVCL  R0,R2              ZERO WORKAREA\n*\n*  CHAIN SAVEAREAS\n*\nSKIPGET  ST    R9,SAVEAREA+4      SAVE CALLER'S R13\n         ST    R13,8(,R9)         FORWARD CHAIN\n         NC    SAVEEXT,SAVEEXT    CALL FOR FIRST FMT5?\n         BNZ   GETNEXT5           NO. RETURN NEXT FMT5\n*\n*  DETERMINE IF THIS IS A DCB FOR DASD WITH INDEXED VTOC\n*\nTST      L     R2,PARMDCB         POINT TO PASSED DCB\n         LCR   R3,R2              MAYBE UCB INSTEAD\n         BNM   UCBPASS            TREAT MINUS AS UCB\n         L     R2,DCBDEBAD-IHADCB(,R2)   GET DEB FROM DCB PASSED\n         ST    R2,DEBADDR         SAVE FOR LATER (ZERO IF UCB)\n         ICM   R3,B'0111',(DEBUCBA-DEBDASD)+(DEBBASND-DEBBASIC)(R2)    *\n                                  GET UCB ADDR FROM DEB\n         B     TESTIT             LEAVE UCB ZERO IF DEB PASSED\nUCBPASS  ST    R3,UCBADDR\nTESTIT   CVAFTST  UCB=(R3)\n         B     *+4(R15)\n         B     UNINDXD            RC = 0   DFDS NOT ON SYSTEM\n         B     UNINDXD            RC = 4   VOL IS NOT INDEXED\n         B     GOODIX             RC = 8   INDEXED. ALL OK.\n         B     TSTERROR           RC = 12  NO VOL MOUNTED, ETC.\n         B     TSTERROR           RC = 16  BAD UCB (NOT DASD, ETC)\n*\n*  CALL CVAFDSM FOR NUMBER OF FREE DSCBS\n*\nGOODIX   L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         MVC   CVPL(CVAF_DSML),CVAF_DSM\n         CVAFDSM  MF=(E,CVPL),    GET COUNT1                           *\n               ACCESS=MAPDATA,                                         *\n               MAP=VTOC,                                               *\n               COUNT=YES,                                              *\n               MAPRCDS=YES,                                            *\n               DEB=(2),                                                *\n               CTAREA=COUNT1\n         B     *+4(R15)\n         B     GOODCT1            RC = 0   SUCCESSFUL\n         B     CHECKEND           RC = 4   END OF DATA, OR ERROR  DRK\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n***********************************************************************\n*                                                                     *\n* 06/28/88  HANDLE NO FREE DSCBS CONDITION WHEN CVAFDSM PASSES    DRK *\n*           RETURN CODE = 4 AND STAT032 (END OF DATA)             DRK *\n*                                                                     *\n*                                                                 DRK\n*  IF RC=4, SEE IF ERROR OR NO FREE DSCB'S                        DRK\n*                                                                 DRK\n***********************************************************************\nCHECKEND CLI   CVSTAT,STAT032     END OF DATA?                    DRK\n         BNE   DSMERROR           NO, OTHER ERROR                 DRK\n*\n*  RETURN COUNT OF FREE DSCBS\n*\nGOODCT1  L     R1,PARMCT1         @ COUNT1\n         MVC   0(4,R1),COUNT1     RETURN COUNT1\n*\n*  SAVE INDEX BUFFERS FOR SUCCEEDING FUNCTIONS\n*\n         L     R1,CVMRCDS               GET ADDR OF BUFFERS\n         ST    R1,BUFLIST               SAVE FOR LATER\n*\n*  CALL CVAFDSM FOR NUMBER OF FREE INDEX BLOCKS (VIRS)\n*\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(CVAF_DSML),CVAF_DSM\n         CVAFDSM  MF=(E,CVPL),    GET COUNT1                           *\n               ACCESS=MAPDATA,                                         *\n               MAP=INDEX,                                              *\n               COUNT=YES,                                              *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               CTAREA=COUNT2\n         B     *+4(R15)\n         B     RETCT2             RC = 0   SUCCESSFUL\n         B     DSMERROR           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  RETURN COUNT OF FREE VIRS\n*\nRETCT2   L     R1,PARMCT2         @ COUNT2\n         MVC   0(4,R1),COUNT2     RETURN COUNT2\n         XC    SAVEEXT,SAVEEXT    BEGIN FMT5S AT THE BEGINNING\n         AIF   ('&MODEL9' EQ 'YES').YESM9\n*\n*  GET 26 FREE EXTENTS.  (ASK FOR 27 TO SIMPLIFY EOD LOGIC).\n*\nGETNEXT5 MVC   EXTS(L'DS5AVEXT),SAVEEXT  SET UP STARTING POINT\n         MVI   NUMEXTS,27\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(CVAF_DSML),CVAF_DSM\n         CVAFDSM  MF=(E,CVPL),    GET EXTENTS                          *\n               ACCESS=MAPDATA,                                         *\n               MAP=VOLUME,                                             *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               EXTENTS=EXTABL\n         B     *+4(R15)\n         B     NOERROR            RC = 0   SUCCESSFUL\n         B     CHECKEOD           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  IF RC=4, SEE IF ERROR OR END OF EXTENTS\n*\nCHECKEOD CLI   CVSTAT,STAT032     END OF DATA?\n         BNE   DSMERROR           NO, OTHER ERROR\n*\n*  USE 26 (OR FEWER) EXTENTS RETURNED TO BUILD PSUEDO FORMT-5\n*\nNOERROR  L     R10,PARMFMT5       ADDR FOR GENERATED FMT5\n         USING IECSDSF5,R10\n         MVC   DS5KEYID,F5ID      SET KEY\n         MVC   DS5AVEXT(L'DS5AVEXT+L'DS5EXTAV),EXTS  MOVE IN EXTS\n         MVI   DS5FMTID,C'5'      SET DSCB ID\n         MVC   DS5MAVET,EXTS+L'DS5AVEXT+L'DS5EXTAV MOVE REMAINING\n         XC    DS5PTRDS,DS5PTRDS  ZERO CHAIN PTR\n         NC    EXT27,EXT27        IS 27TH EXT ZERO? (1ST IN NEXT FMT5)\n         BZ    CLEANUP            GO CLEANUP. ALL DONE.\n         MVC   DS5PTRDS,NZPTR     MAKE PUSEDO CHAIN POINTER\n         MVC   SAVEEXT(5),DS5MAVET+L'DS5MAVET-L'DS5AVEXT  SAVE THE     *\n                                  LAST EXTENT FOR NEXT FORMAT 5\n         B     RETURN\n         DROP  R10\n         AGO   .NOM9A\n.YESM9   ANOP\n*\n*  GET 16 FREE EXTENTS.  (ASK FOR 17 TO SIMPLIFY EOD LOGIC).\n*\nGETNEXT5 MVC   DT2ENTRY(16),SAVEEXT      SET UP STARTING POINT\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(CVAF_DSML),CVAF_DSM\n         MVC   DT2X7EYE,=C'ICVEDT02'     IDENTIFIER FOR CONTROL BLOCK\n         MVC   DT2ENTNM,=F'17'           NUMBER OF EXTENTS TO RETRIEVE\n***   IF YOU GET ASSEMBLY ERRORS ON THE FOLLOWING MACRO, YOUR SYSTEM\n***   PROBABLY DOES NOT HAVE SUPPORT FOR 3390M9 (FAT DASD) DEVICES.\n***   YOU SHOULD CHANGE THE VALUE OF &MODEL9 AS EXPLAINED ABOVE.\n         CVAFDSM  MF=(E,CVPL),    GET EXTENTS                          *\n               ACCESS=MAPDATA,                                         *\n               MAP=VOLUME,                                             *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               RTA4BYTE=YES,                                           *\n               EXTENTS=RTATBL\n         B     *+4(R15)\n         B     NOERROR            RC = 0   SUCCESSFUL\n         B     CHECKEOD           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  IF RC=4, SEE IF ERROR OR END OF EXTENTS\n*\nCHECKEOD CLI   CVSTAT,STAT032     END OF DATA?\n         BNE   DSMERROR           NO, OTHER ERROR\n*\n*  USE 16 (OR FEWER) EXTENTS RETURNED TO BUILD PSUEDO FORMT-7\n*\nNOERROR  L     R10,PARMFMT5       ADDR FOR GENERATED FMT5 (FMT7 NOW)\n         USING IECSDSF7,R10\n         MVC   DS7KEYID,F7ID      SET KEY\n         MVC   DS7EXTNT(5*8),DT2ENTRY  MOVE FIRST 5 EXTENTS\n         MVI   DS7FMTID,C'7'      SET DSCB ID\n         MVC   DS7ADEXT(11*8),DT2ENTRY+40  MOVE NEXT 11 EXTENTS\n         XC    DS7PTRDS,DS7PTRDS  ZERO CHAIN PTR\n         MVC   SAVEEXT(16),DT2ENTRY+16*8-8     LAST FREE EXTENT USED\n         NC    DT2ENTRY+16*8(4),DT2ENTRY+16*8  NEXT FREE EXTENT ZERO?\n         BZ    CLEANUP                         YES, ALL DONE\n         CLI   CVSTAT,STAT032     END OF DATA?\n         BE    CLEANUP            YES, TERMINATE CVAF\n         MVC   DS7PTRDS,NZPTR     MAKE PSUEDO CHAIN POINTER\n         B     RETURN\n         DROP  R10\n.NOM9A   ANOP\n*\n*  RELEASE BUFFERS FOR INDEX RECORDS AFTER LAST USE\n*\nCLEANUP  L     R2,DEBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(CVAF_DIRL),CVAF_DIR\n         CVAFDIR  MF=(E,CVPL),    FREEMAIN CVAF BUFFERS                *\n               ACCESS=RLSE,                                            *\n               DEB=(2),                                                *\n               MAPRCDS=(NO,(3))\n         LTR   R15,R15            ERROR?\n         BZ    FREEWORK           GOOD. SHOULD ALWAYS WORK.\n         BAL   R14,LOGICERR       BAD. DIE.\n*\n*  FREE GOTTEN  WORKAREA          OR DFDS NOT INSTALLED ON SYSTEM.\n*\nFREEWORK LR    R1,R13             ADDR OF WORKAREA TO BE FREED\n         L     R13,SAVEAREA+4     RELOAD CALLER'S SAVE PTR\n         FREEMAIN  RU,LV=WORKLEN,A=(1),SP=0\n         L     R1,PARMWORD        POINT TO WORKAREA ANCHOR\n         SR    R15,R15            ZERO RETCODE\n         SR    R0,R0              ZERO SUPLIMENTARY RETCODE\n         ST    R15,0(,R1)         ZERO ANCHOR WORD\n         B     EXIT2              GO LEAVE\n         TITLE 'IXTOFMT5 -- TERMINATION ROUTINES'\n*\n*  VTOC IS NOT IN INDEXED FORMAT, OR DFDS NOT INSTALLED ON SYSTEM.\n*\nUNINDXD  SR    R0,R0              ZERO SUPLEMENTRY RETURN CODE\n         LA    R15,4              INDICATE NOT INDEXED\n         B     EXIT               COMMON EXIT\n*\n*  CVAFTST COMPLETED WITH AN ERROR\n*\nTSTERROR LR    R0,R15             SAVE CVAFTST RETURN CODE\n         LA    R15,8              INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  CVAFDSM COMPLETED WITH AN ERROR\n*\nDSMERROR LR    R0,R15             PUT CVAFDSM RETURN CODE INTO\n         SLL   R0,24              ... HIGH ORDER BYTE OF R0\n         IC    R0,CVSTAT-CVPL(R1)  ADD CVSTAT VALUE\n         LA    R15,12             INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  INTERNAL LOGIC ERROR OR INCORRECT CALL\n*\nLOGICERR LA    R1,IXTOFMT5        ADDR OF ENTRY POINT\n         SLR   R14,R1             CONVERT TO OFFSET\n         LA    R0,0(,R14)         RETURN OFFSET IN R0\n         LA    R15,20             INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  NORMAL CONDITIONS\n*\nRETURN   SR    R0,R0              ZERO SUPLEMENTARY RETURN CODE\n         SR    R15,R15            ZERO PRIMARY RETURN CODE\n         B     EXIT               COMMON EXIT\n         SPACE 4\n*\n*  COMMON EXIT ROUTINE\n*\nEXIT     L     R13,SAVEAREA+4     RESTORE CALLER'S SAVE PRT\nEXIT2    L     R14,12(,R13)       RESTORE R14\n         LM    R1,R12,24(R13)     RESTORE R1 THRU R12 (R15,R0 SET)\n         BR    R14                RETURN\n         TITLE 'IXTOFMT5 -- CONSTANTS'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 4\n*\n*  CONSTANTS\n*\nF5ID     DC    XL4'05050505'      FMT5 KEY\nF7ID     DC    XL4'07070707'      FMT7 KEY\nNZPTR    DC    C'00001'           CHAR INSURES INVALID DASD ADDR\n*\nCVAF_DIR  CVAFDIR MF=L\nCVAF_DIRL EQU     *-CVAF_DIR\n*\nCVAF_DSM  CVAFDSM  MF=L\nCVAF_DSML EQU     *-CVAF_DSM\n*\n         TITLE 'IXTOFMT5 -- WORKAREA DESCT'\nWORKAREA DSECT\nSAVEAREA DC    18F'0'             YE OLDE SAVEAREA\nCOUNT1   DC    F'0'               FORMAT 0 DSCBS\nCOUNT2   DC    F'0'               FREE INDEX RECORDS\nBUFLIST  DC    A(0)               ADDR VIX BFRS OBTAINED BY CVAF\nDEBADDR  DC    A(0)               ADDR OF DEB PASSED IN CALLER'S DCB\nUCBADDR  DC    A(0)               ADDR OF UCB PASSED (PRIV CALLER)\nSAVEEXT  DC    XL16'00'           SAVED FORMAT 5 OR FORMAT 7 EXTENTS\nEXTABL   DS    0CL(1+(27*5))      FANCY LENGTH\nNUMEXTS  DC    AL1(27)            NR OF EXTENTS REQUESTED\nEXTS     DC    CL(27*5)' '        27 5-BYTE FREE SPACE EXTENTS\n         ORG   *-5\nEXT27    DC    CL5' '             GIVE LAST ONE A NAME\nRTATBL   DS    0F\n         AIF   ('&MODEL9' EQ 'NO').NOM9B\n         ICVEDT02 DSECT=NO        MAP THE DSECT FOR THE RTA TABLE\nWORKAREA DSECT\n.NOM9B   ANOP\n         ORG\n         SPACE 4\nCVPL     ICVAFPL  DSECT=NO,CVPLX=YES\n         ORG   CVPL\n         DS    CL(CVAF_DSML)\n         ORG   CVPL\n         DS    CL(CVAF_DIRL)\n         ORG\n         SPACE 4\nWORKLEN  EQU   *-WORKAREA\n         EJECT\n         DSECT\n         IECSDSL1  (5)\nIECSDSF7 DSECT\n         #VTCFMT7                                 *\n         SPACE 4\nPARMLIST DSECT\nPARMWORD DS    A                  ANCHOR FOR GETMAINED AREA\nPARMDCB  DS    A                  ADDR OF DCB FOR VTOC\nPARMCT1  DS    A                  ADDR OF #FMT 0S\nPARMCT2  DS    A                  ADDR OF #FREE VIRS\nPARMFMT5 DS    A                  ADDR OF FMT5 WORKAREA\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n         IEZDEB LIST=NO\n         PRINT GEN\n         END\n//*\n//LINK   EXEC  PGM=IEWL,PARM='MAP',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//*SYSLMOD  DD  DISP=SHR,DSN=CBT.FEB05.LOAD(DVOL)\n//SYSLMOD  DD  DISP=SHR,DSN=AD.CMDLIB(DVOLU)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//         DD  DSN=&&Y,DISP=(OLD,DELETE)\n//         DD  *\n  IDENTIFY DVOL('CBT FILE296')\n//*\n//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=CBT.FEB05.HELP(DVOL),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -    The DVOL command is used to display the amount of\n                 of free space on a direct access device.\n\n                 DVOL will read the format 4 and format 5 DSCB's from\n                 the VTOC of a direct access volume and display:\n                  1.  Volume name\n                  2.  Unit address\n                  3.  Mount status and device type\n                  4.  Use status\n                  5.  Number of blank DSCB's in the vtoc\n                  6.  Condition of the VTOC indicators byte\n                  7.  Percent used space\n                  8.  Total free space in tracks\n                  9.  Number of free extents\n                 10.  Number of free cylinders\n                 11.  Size of largest extents (up to 5) in\n                      cylinders + tracks\n                 12.  Size of largest extents (up to 5) in tracks\n                      -or-\n                      User count\n\n   Return Code: The return code is set to the total number of tracks\n                in the 5 largest extents (to a maximum of 4095) for\n                the last volume displayed.\n\n                If an error condition exists on the volume, the\n                return code will be set to 0.\n\n)X SYNTAX -     DVOL  (volume-list)/*\n                      SHORT/LONG\n                      USER/NOUSER\n                      HEADER/NOHEADER\n                      PRINT/NOPRINT\n                      SERONLY\n                      HARDCOPY(DDNAME)\n\n                Required - none\n                Defaults - *  SHORT  HEADER  PRINT  NOUSER\n                Note: if HARDCOPY is specified, NOPRINT is the default\n\nSample Outputs:\n>dvol fr user\nSERIAL  --UNIT--   ATTRIB   %USED AVAIL -----TOTALS-----  LARGEST-EXTENT  USER\n       ADDR TYPE   MOUNT/USE      DSCBS TRACKS EXT   CYL   CYL+TR TRACKS  COUNT\nFR8621 8621 3390-9 RES/PRIV     0   697 150240   1 10016 10016+ 0 150240      0\nFR8622 8622 3390-9 RES/PRIV     0   697 150240   1 10016 10016+ 0 150240      0\n\n>dvol qfv\nSERIAL  --UNIT--   ATTRIB   %USED AVAIL -----TOTALS-----  LARGEST-EXTENT 5 EXTS\n       ADDR TYPE   MOUNT/USE      DSCBS TRACKS EXT   CYL   CYL+TR TRACKS TRACKS\nQFV056 2965 3390-3 RES/PRIV    59  1245  20055   1  1337  1337+ 0  20055  20055\nQFV057 2966 3390-3 RES/PRIV   100  1244 VOLUME CONTAINS NO FREE SPACE         0\n\n)O OPERANDS -\n  volume-list   is a list of one or more volume serials of mounted\n                direct access volumes or partial volume names.\n\n                If no volume is entered, or if an * is specified, the\n                information is displayed for each direct access volume\n                on the system.\n\n                If a volume name is entered with a U followed by one\n                to four digits, the data is also used as a UCB name.\n\n))SHORT         Short output form requested\n))LONG          Long output form requested\n))USER          User count is to be displayed\n))NOUSER        No user count is to be displayed\n))HEADER        Header is to be displayed for SHORT form\n))NOHEADER      No header is to be displayed for SHORT form\n))PRINT         Output is to be displayed\n))NOPRINT       No output is to be displayed\n))SERONLY       Only a list of mounted volume serials will be displayed\n))HARDCOPY      Specifies the DDNAME a pre-allocated data set to\n                receive a copy of DVOL output.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DVOLO": {"ttr": 25351, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x05\\x05\\x9f\\x01\\x05\\x05\\x9f#D\\r\\xe8\\r\\xe8\\x00\\x00\\xc3\\xc7\\xc1\\xd9\\xd9\\xc5\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-02-28T00:00:00", "modifydate": "2005-02-28T23:44:56", "lines": 3560, "newlines": 3560, "modlines": 0, "user": "CGARRET"}, "text": "//DVOL     JOB MSGCLASS=X\n//*-----------------------------------------------------------------*\n//*\n//*  ASM1 -- ASSEMBLES DVOL (IFOX00 CAN BE USED INSTEAD OF IEV90)\n//*  ASM2 -- ASSEMBLES IXTOFMT5 (IFOX00 CAN BE USED INSTEAD OF IEV90)\n//*  LINK -- LINKS DVOL INTO 'SYS1.CMDLIB(DVOL)'\n//*  COPY -- COPIES DVOL HELP TO 'SYS2.HELP(DVOL)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*   THIS SOURCE CODE IS OPERATING SYSTEM DEPENDENT (MVT THROUGH ESA).\n//*   SPECIFY THE DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.\n//*\n//*   ALSO, THE CODE GENERATED DEPENDS ON WHETHER 3390M9 (FAT DASD)\n//*   DEVICES ARE SUPPORTED.  SEE THE VALUE OF &MODEL9 SELECTED BELOW.\n//*\n//ASM1  EXEC  PGM=ASMA90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,\n//             'XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                         MVT\n*                                         SVS (OS/VS2 RELEASE 1)\n*                                         MVS (OS/VS2 RELEASE 3)\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     ALSO, THE CODE GENERATED DEPENDS ON WHETHER 3390M9 (FAT DASD)   *\n*     DEVICES ARE SUPPORTED.  SEE THE VALUE OF &MODEL9 SELECTED BELOW.*\n*                                                                     *\n*     THE MODULE IS NOT REENTRANT ANYMORE                             *\n*                                                                     *\n***********************************************************************\nDVOL     TITLE 'DISPLAY VTOC CHARACTERISTICS'\n***********************************************************************\n*                                                                     *\n* DVOL                                                                *\n*                                                                     *\n* FUNCTION         THE DVOL COMMAND IS USED TO DISPLAY THE AMOUNT OF  *\n*                  OF FREE SPACE ON A DIRECT ACCESS DEVICE.           *\n*                                                                     *\n* DESCRIPTION      DVOL WILL READ THE FORMAT 4 AND FORMAT 5 DSCB'S    *\n*                  FROM THE VTOC OF A DIRECT ACCESS VOLUME AND        *\n*                  DISPLAY:                                           *\n*                   1.  VOLUME SERIAL                                 *\n*                   2.  UNIT ADDRESS                                  *\n*                   3.  MOUNT STATUS                                  *\n*                   4.  USE STATUS                                    *\n*                   5.  NUMBER OF BLANK DSCB'S IN THE VTOC            *\n*                   6.  CONDITION OF THE VTOC INDICATORS BYTE         *\n*                   7.  VSAM DATA FIELDS                              *\n*                   8.  TOTAL FREE SPACE IN TRACKS                    *\n*                   9.  NUMBER OF FREE EXTENTS                        *\n*                  10.  NUMBER OF FREE CYLINDERS                      *\n*                  11.  SIZE OF LARGEST EXTENTS (UP TO 5) IN          *\n*                       CYLINDERS + TRACKS                            *\n*                  12.  SIZE OF LARGEST EXTENTS (UP TO 5) IN TRACKS   *\n*                                                                     *\n*                  THE RETURN CODE IS SET TO THE TOTAL NUMBER OF      *\n*                  TRACKS IN THE LARGEST EXTENTS (UP TO 5) UP TO A    *\n*                  MAXIMUM OF 4095.  IF THE NUMBER OF FREE TRACKS     *\n*                  EXCEEDS 4095, THE RETURN CODE WILL BE SET TO 4095. *\n*                  IF MORE THAN ONE VOLUME IS DISPLAYED, THE RETURN   *\n*                  CODE WILL BE REFER TO THE SPACE ON THE LAST        *\n*                  VOLUME.  IF AN ERROR CONDITION EXISTS ON THE       *\n*                  VOLUME, THE RETURN CODE WILL BE SET TO 0.          *\n*                                                                     *\n*                  NOTE - IF AN ERROR CONDITION EXISTS ON THE VOLUME, *\n*                         THE RETURN CODE WILL BE SET TO 0.           *\n*                                                                     *\n* ATTRIBUTES       DVOL IS RE-ENTRANT.                                *\n*                                                                     *\n* SYNTAX           DVOL  (VOLUME-LIST)/*                              *\n*                        SHORT/LONG                                   *\n*                        HEADER/NOHEADER                              *\n*                        PRINT/NOPRINT                                *\n*                        SERONLY                                      *\n*                                                                     *\n*                  REQUIRED - NONE                                    *\n*                  DEFAULTS - *  SHORT  HEADER  PRINT                 *\n*                                                                     *\n*                                                                     *\n* SAMPLE OUTPUT FOR: DVOL SYSBK                                       *\n*SERIAL  --UNIT--   ATTRIBUTES VSAM AVAIL -----TOTALS---- LARGEST-EXTEN\n*       ADDR TYPE   MOUNT/USE      DSCBS TRACKS  EXT  CYL  CYL+TR TRACK\n*SYSBK1 0341 3380E  RESDNT/PRIV      154  13200   39  864  861+11 12926\n*SYSBK2 155E 3390M3 RESDNT/PRIV     3746  49980    1 3332 3332+ 0 49980\n*                                                                     *\n*                                                                     *\n* SAMPLE OUTPUT FOR: DVOL STR849 LONG                                 *\n*VOLUME SERIAL = STR849     UNIT = 1538    TYPE = 3390M3              *\n*STATUS: RESIDENT   STORAGE  ALLOCATED    ONLINE                      *\n*VTOC CONTAINS 2343 BLANK DSCB'S                                      *\n*INDEXED VTOC CONTAINS   19 FREE VIR'S                                *\n*FREE SPACE IS 11541 TRACKS IN  299 EXTENTS INCLUDING  658 FULL CYLINDE\n*LARGEST EXTENTS ARE: /CYL+TR/   43+ 0/   39+ 0/   32+ 0/  19+ 5/ 16+ 0\n*                     /TRACKS/     645/     585/     480/    290/   240\n*                                                                     *\n*                                                                     *\n* OPERANDS         VOLUME-LIST                                        *\n*                       IS A LIST OF ONE OR MOVE VOLUME SERIALS OF    *\n*                       MOUNTED DIRECT ACCESS VOLUMES.                *\n*                                                                     *\n*                       IF NO VOLUME IS ENTERED, OR IF AN * IS        *\n*                       SPECIFIED, THE INFORMATION IS DISPLAYED       *\n*                       FOR EACH DIRECT ACCESS VOLUME ON THE          *\n*                       SYSTEM.                                       *\n*                                                                     *\n*                  SHORT/LONG                                         *\n*                       SPECIFIES THE OUTPUT FORMAT.                  *\n*                                                                     *\n*                       SHORT - (DEFAULT) SPECIFIES THAT A SINGLE     *\n*                               LINE OF OUTPUT IS TO BE DISPLAYED     *\n*                               FOR EACH VOLUME.                      *\n*                                                                     *\n*                               DATA WHICH IS NOT PRODUCED IF SHORT   *\n*                               IS USED -                             *\n*                                    ONLINE/OFFLINE STATUS            *\n*                                    UNLOAD PENDING                   *\n*                                    VTOC INDICATORS                  *\n*                                    VSAM TIMESTAMPS                  *\n*                                    SIZE OF SECOND TO FIFTH EXTENTS  *\n*                               THIS DATA IS PRODUCED ONLY WITH THE   *\n*                               LONG OUTPUT FORMAT.                   *\n*                                                                     *\n*                       LONG  - SPECIFIES THAT MULTIPLE LINES OF      *\n*                               DATA ARE PRODUCED FOR EACH VOLUME.    *\n*                                                                     *\n*                  HEADER/NOHEADER                                    *\n*                       SPECIFIES WHETHER OR NOT THE HEADER LINES     *\n*                       ARE TO BE DISPLAYED.  SINCE HEADERS ARE       *\n*                       PRODUCED FOR THE SHORT FORM OF OUTPUT ONLY,   *\n*                       THIS OPTION IS MEANINGLESS WHEN LONG IS       *\n*                       SPECIFIED.                                    *\n*                                                                     *\n*                  PRINT/NOPRINT                                      *\n*                       NOPRINT MAY BE USED TO SUPPRESS ALL OUTPUT    *\n*                       (INCLUDING ERROR MESSAGES).  THIS OPTION      *\n*                       MAY BE USED WHEN ONLY THE RETURN CODE IS      *\n*                       DESIRED.                                      *\n*                                                                     *\n*                  SERONLY                                            *\n*                       SPECIFIES THAT ONLY A LIST OF MOUNTED         *\n*                       VOLUME SERIALS WILL BE DISPLAYED.             *\n*                       SERONLY IS IGNORED IF A VOLUME SERIAL IS      *\n*                       SPECIFIED.                                    *\n*                                                                     *\n* SUBCOMMANDS      DVOL HAS NO SUBCOMMANDS.                           *\n*                                                                     *\n* EXAMPLE          DISPLAY FREE SPACE ON VOLUME WORK01.               *\n*                                                                     *\n*                  DVOL WORK01                                        *\n*                                                                     *\n* FPL MACROS USED BY THIS MODULE                                      *\n*                                                                     *\n*         $ENTER              ENTRY CODING                            *\n*         $RTRN               EXIT CODING                             *\n*         #TSOBLKS            CONSTRUCT TSO CONTROL BLOCKS            *\n*         #TSOMSG             CONSTRUCT MESSAGES IN PUTLINE FORMAT    *\n*         #VTCFMT4            MAP FORMAT 4 DSCB                       *\n*         #VTCFMT5            MAP FORMAT 5 DSCB                       *\n*                                                                     *\n* IBM MACROS USED BY THIS MODULE                                      *\n*                                                                     *\n*         LINK                INVOKE A SERVICE ROUTINE                *\n*         OBTAIN              READ A DSCB FROM THE VTOC               *\n*         CAMLST              CONSTRUCT OBTAIN PARAMETER LIST         *\n*         IKJIOPL             MAP INPUT/OUTPUT PARAMETER LIST         *\n*         PUTLINE             OUTPUT A LINE TO THE TERMINAL           *\n*         IKJCPPL             MAP COMMAND PROCESSOR PARAMETER LIST    *\n*         IKJPPL              MAP PARSE PARAMETER LIST                *\n*         IKJRLSA             RELEASE STORAGE OBTAINED BY PARSE       *\n*         IKJPARM             BEGIN PARSE PARAMETER CONTROL LIST      *\n*         IKJIDENT            DESCRIBE A POSITIONAL PARAMETER         *\n*         IKJENDP             END PARSE PARAMETER LIST                *\n*         IEFUCBOB     *      MAP UNIT CONTROL BLOCK                  *\n*                                                                     *\n*         MACROS DESIGNATED BY * MUST BE OBTAINED FROM THE            *\n*         SYS1.AMODGEN DISTRIBUTION LIBRARY.                          *\n*                                                                     *\n* REGISTER ASSIGNMENTS                                                *\n*                                                                     *\n*          0 - STANDARD LINKAGE                                       *\n*          1 - STANDARD LINKAGE                                       *\n*          2 - WORK                                                   *\n*          3 - WORK                                                   *\n*          4 - WORK                                                   *\n*          5 - WORK                                                   *\n*          6 - WORK                                                   *\n*          7 - WORK                                                   *\n*          8 - PDE POINTER                                            *\n*          9 - PPL/PDL BASE REGISTER                                  *\n*         10 - IOPL BASE REGISTER                                     *\n*         11 - CPPL BASE REGISTER                                     *\n*         12 - PROGRAM BASE REGISTER                                  *\n*         13 - SAVE AREA ADDRESS AND WORK AREA DSECT BASE REGISTER    *\n*         14 - STANDARD LINKAGE                                       *\n*         15 - STANDARD LINKAGE                                       *\n*                                                                     *\n* MODULE ATTRIBUTES                                                   *\n*                                                                     *\n*         ENABLED, NON-PRIVELEGED                                     *\n*                                                                     *\n*                                                 9/76 GORDON P. WEST *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n* 01/20/77  ADD SHORT FORM OF OUTPUT AND MAKE SHORT FORM DEFAULT      *\n*           ADD SHORT/LONG, HEADER/NOHEADER, AND PRINT/NOPRINT KEYWDS *\n*           ADD * SUPPORT FOR VOLUME LIST AND MAKE IT DEFAULT         *\n*           ADD TEST FOR MOUNT PENDING                                *\n*                                                                     *\n* 07/15/77  ADD TESTS FOR NOT READY, OFFLINE PENDING                  *\n*           ADD SERONLY OPERAND                                       *\n*                                                                     *\n* 01/17/83  ADD PARTIAL VOLUME SERIAL NAME CHECKING               ABL *\n*           ADD U... CHECK FOR POSSIBLE PARTIAL UCB ADDRESS       ABL *\n*           ADD HEADERS BETWEEN EACH VOLUME PARAMETER'S OUTPUT    ABL *\n*           ADD FPL MACROS INLINE                                 ABL *\n*           ADD SUPPORT FOR INDEXED VTOC'S                        ABL *\n*           NOTE: THE INDEXED VTOC SUPPORT IS VIA UCLA'S          ABL *\n*                 IXTOFMT5 ROUTINE PROGRAMMED BY CHRIS THOMAS     ABL *\n*                 AND MARKED CST IN COLUMNS 67-69                 ABL *\n*                                                                     *\n*                                                                     *\n* 01/04/85  USE UCB SCAN SERVICES FROM MVS 1.1.3 OR MVS/XA        ABL *\n*           ADD DEVICE TYPE IN THE OUTPUT LINE                    ABL *\n*                                                                     *\n* 02/11/87  ADD HARDCOPY SUPPORT AS PROGRAMMED BY MICHAEL LAY     ABL *\n*           WITH THE K-MART INSURANCE GROUP IN DALLAS             ABL *\n*                                                                     *\n* 02/11/87  ADD AN PDS INTERNAL INTERFACE USING PDSCALL           ABL *\n*                                                                     *\n* 02/13/87  ADD AN DCB EXIT SO DCB INFORMATION IS NOT OVERRIDDEN  ABL *\n*           BY THE HARDCOPY DCB.                                  ABL *\n*                                                                     *\n* 03/21/90  ADDED SUPPORT FOR 3380-K AND 3390 DEVICES BY ALLOWING ABL *\n*           FOUR CHARACTERS FOR ANY CYLINDER OUTPUT FIELD.        ABL *\n*                                                                     *\n* 05/25/94  ADDED SUPPORT FOR 3390M3 AND ABOVE DEVICES BY         ABL *\n*           EXPANDING TOTAL FIELDS BY ONE ADDITIONAL CHARACTER.   ABL *\n*           NOTE THAT THIS DIGIT NORMALLY PRINTS AS BLANKS.       ABL *\n*                                                                     *\n* 05/25/94  ADDED SUPPORT FOR 3390M9 DISK DEVICES BY MODIFYING    ABL *\n*           THE IXTOFMT5 ROUTINE TO RETURN FORMAT 7 DSCB RECORDS  ABL *\n*           (INSTEAD OF FORMAT 5) IF &MODEL9 IS 'YES'.            ABL *\n*                                                                     *\n* 05/25/94  ADDED CHANGES TO INDICATE THE MODEL NUMBER FOR        ABL *\n*           SEVERAL 3380 AND 3390 DEVICES.                        ABL *\n*                                                                     *\n* 05/25/94  CHANGED THE LONG OUTPUT FORMAT TO SKIP THE VSAM       ABL *\n*           OUTPUT LINE IF VSAM OWNERSHIP IS OFF FOR A VOLUME.    ABL *\n*                                                                     *\n* 09/28/95  MODIFIED BY A. BRUCE LELAND AT SERENA INTERNATIONAL ABL-410\n*           TO USE THE UCBSCAN MACRO TO LOCATE UCB'S ON SYSTEMS ABL-410\n*           AFTER MVS/ESA 4.1.0.                                ABL-410\n*                                                                     *\n* 07/31/97  Modified by A. Bruce Leland at SERENA International   ABL97\n*           to add four character UCB support.  Note that the     ABL97\n*           short form output format was changed slightly due     ABL97\n*           to this change.  ADR for UCB became ADDR and VSAM     ABL97\n*           OFF/ON  was shortened by one column to OF/ON          ABL97\n*                                                                     *\n* 09/02/97  Modified by A. Bruce Leland at SERENA International   ABL97\n*           to correct problems on systems with only 3 digit      ABL97\n*           UCB addresses as well as 4 digit UCB addresses.       ABL97\n*                                                                     *\n***********************************************************************\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. Bruce Leland           or         A. Bruce Leland            *\n*     SERENA International                 1247 Wavecrest             *\n*     500 Airport Blvd. 2nd Floor          Bandon, Oregon  97411      *\n*     Burlingame, CA  94010                                           *\n*     (415) 696-1800                       HOME: (541) 347-8102       *\n*     Internet: Bruce_Leland@serena.com                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOMSG &MSG,&OFFSET=0,&LENGTH=\n         MNOTE *,'       #TSOMSG   VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOMSG                                                            *\n.*                                                                    *\n.* FUNCTION        GENERATE A MESSAGE LINE IN PUTLINE FORMAT WITH     *\n.*                 LENGTH AND OFFSET HEADERS.                         *\n.*                                                                    *\n.* DESCRIPTION     THE USER SPECIFIES A MESSAGE TEST ENCLOSED IN      *\n.*                 SINGLE QUOTES.  AN OFFSET MAY ALSO BE SPECIFIED.   *\n.*                 A MESSAGE IN PUTLINE FORMAT (WITH HALFWORD HEADERS *\n.*                 CONTAINING THE TOTAL LENGTH OF HEADERS AND         *\n.*                 MESSAGE AND OFFSET) IS CREATED.  THE LENGTH OF     *\n.*                 THE MESSAGE IS ROUNDED UP TO THE NEXT FULLWORD     *\n.*                 MULTIPLE.  THE USER MAY OPTIONALLY SPECIFY THE     *\n.*                 LENGTH OF THE MESSAGE TEXT.                        *\n.*                                                                    *\n.* SYNTAX          NAME     #TSOMSG 'MESSAGE-TEXT'                    *\n.*                                  OFFSET=N                          *\n.*                                  LENGTH=N                          *\n.*                                                                    *\n.*                 MESSAGE-TEXT IS THE MESSAGE TO BE GENERATED.       *\n.*                                                                    *\n.*                 OFFSET       SPECIFIES THE VALUE OF THE OFFSET     *\n.*                              HEADER HALFWORD.  DEFAULT IS 0.       *\n.*                                                                    *\n.*                 LENGTH       SPECIFIES THE LENGTH IN BYTES OF      *\n.*                              THE MESSAGE TEXT.  THIS LENGTH DOES   *\n.*                              NOT INCLUDE THE HEADER LENGTHS.  IF   *\n.*                              LENGTH IS NOT SPECIFIED, THE LENGTH   *\n.*                              WILL BE THE LENGTH OF THE MESSAGE     *\n.*                              TEXT ROUNDED TO THE NEXT FULLWORD.    *\n.*                                                                    *\n.* ERRORS          NO ERROR MESSAGES ARE DISPLAYED.                   *\n.*                                                                    *\n.* EXAMPLE         GENERATE A TSO MESSAGE.  LENGTH IS NOT SPECIFIED,  *\n.*                 AND OFFSET IS 0.                                   *\n.*                                                                    *\n.*                 ERROR1   #TSOMSG 'NAME NOT FOUND'                  *\n.*                                                                    *\n.*                 GENERATE A DUMMY MESSAGE.  THE MESSAGE TEXT WILL   *\n.*                 BE FILLED IN BY THE PROGRAM.  THE LENGTH OF THE    *\n.*                 MESSAGE MAY BE UP TO 120 CHARACTERS.               *\n.*                                                                    *\n.*                 OUTLINE  #TSOMSG ' ',LENGTH=120                    *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                 NONE                                               *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                 NONE                                               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &LEN,&LEN2\n.*\n         AIF   ('&LENGTH' EQ '').CALCLEN\n&LEN     SETA  &LENGTH\n         AGO   .GETLEN2\n.CALCLEN ANOP\n&LEN     SETA  K'&MSG-2\n&LEN     SETA  ((&LEN-1)/4+1)*4\n.GETLEN2 ANOP\n&LEN2    SETA  &LEN+4\n&NAME    DC    H'&LEN2,&OFFSET',CL&LEN.&MSG\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT4\n         MNOTE *,'       #VTCFMT4  VERSION 002 09/22/75  06/08/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT4                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 4 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 4 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 4 DSCB DESCRIBES THE VOLUME TABLE OF     *\n.*                  CONTENTS.                                         *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT4                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT4DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT4                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*        002   06/08/76   VSAM DATA AREAS ADDED                      *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 4 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        VTOC DESCRIPTION                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS4KEY   DS    XL44                     KEY - VTOC NAME - 44X'04'\nDS4IDFMT DS    X                        FORMAT 4 ID X'F4'\nDS4HPCHR DS    XL5                      HIGHEST ADDR OF A FORMAT 1 DSCB\nDS4DSREC DS    XL2                      NUMBER OF AVAILABLE DSCB'S\nDS4HCCHH DS    XL4                      CCHH OF NEXT AVAILABLE ALT. TRK\nDS4NOATK DS    XL2                      NUMBER OF REMAINING ALT. TRACKS\nDS4VTOCI DS    X                        VTOC INDICATORS\nDS4DOSBT EQU   X'80'  1... ....    DOS CONTAMINATION BIT.          @L6C\n*                                   ON IMPLIES F5 DSCB CHAIN IS INVALID\nDS4DVTOC EQU   X'40'  .1.. ....    IF ON, THE INDEX WAS DISABLED   @P2A\nDS4EFVLD EQU   X'20'  ..1. ....    EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  VALIDITY FLAG.  ON IMPLIES      @L6A\n*                                  EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  IS ACTIVE AND FREE-SPACE IS     @L6A\n*                                  VALID.  SEE DS4EFLVL.           @L6A\nDS4DSTKP EQU   X'10'  ...1 ....    DOS STACKED PACK                @P1C\nDS4DOCVT EQU   X'08'  .... 1...    DOS CONVERTED VTOC              @P1C\nDS4DIRF  EQU   X'04'  .... .1..    DIRF BIT                        @P1C\nDS4DICVT EQU   X'02'  .... ..1.    DIRF RECLAIMED                  @P1C\nDS4IVTOC EQU   X'01'  .... ...1    IF ON, AN INDEX HAS BEEN CREATED@P1C\n*                                     FOR THE VTOC.                @P1A\n*                                  IF DS4DOSBT IS ON, THE INDEX IS @P1A\n*                                     VALID.                       @P1A\n*                                  IF EITHER OF THESE BITS IS OFF, @P1A\n*                                    THE INDEX HAS BEEN INVALIDATED@P1A\nDS4NOEXT DS    XL1                 NUMBER OF EXTENTS IN THE VTOC\nDS4SMSFG DS    XL1                 SYSTEM MANAGED STORAGE INDICATORS   X\n                                                                   @L4A\nDS4SMSTS EQU   X'C0'  11.. ....    SYSTEM MANAGED VOLUME TEST      @L4A\nDS4SMS   EQU   X'C0'  11.. ....    SYSTEM MANAGED VOLUME           @L4A\n*              X'80'  10.. ....    RESERVED                        @L4A\nDS4SMSCV EQU   X'40'  01.. ....    SYSTEM MANAGED VOLUME IN INITIAL    X\n                                   STATUS                          @L4A\nDS4NTSMS EQU   X'00'  00.. ....    NON SYSTEM MANAGED VOLUME       @L4A\n*              X'3F'  ..11 1111    RESERVED                        @L4A\n         DS    XL1                 RESERVED                        @L4C\nDS4DEVCT DS    0XL14               DEVICE CONSTANTS\nDS4DEVSZ DS    XL4                      DEVICE SIZE\nDS4DEVTK DS    XL2                      DEVICE TRACK LENGTH\nDS4DEVZ  DS    0XL2                     KEYED RECORD OVERHEAD\nDS4DEVI  DS    X                        NON-LAST KEYED RECORD OVERHEAD\nDS4DEVL  DS    X                        LAST KEYED RECORD OVERHEAD\nDS4DEVK  DS    X                        NON-KEYED RECORD OVERHEAD DIFF.\nDS4DEVFG DS    X                        FLAG BYTE\nDS4DEVTL DS    XL2                      DEVICE TOLERANCE\nDS4DEVDT DS    X                        NUMBER OF DSCB'S PER TRACK\nDS4DEVDB DS    X                        NUMBER OF DIRECTORY BLOCKS/TRK\n*\nDS4AMTIM DS    XL8                      VSAM TIME STAMP\nDS4AMCAT DS    0XL3                     VSAM CATALOG INDICATORS\nDS4VSIND DS    X                        VSAM INDICATORS\n*              X'80'                      VOLUME OWNED BY VSAM CATALOG\nDS4VSCRA DS    XL2                      RELATIVE TRACK ADDRESS OF CRA\nDS4R2TIM DS    XL8                      VSAM VOLUME/CATALOG MATCH TIME\n         DS    XL5                      RESERVED\nDS4F6PTR DS    XL5                      POINTER TO FIRST FORMAT 6 DSCB\nDS4VTOCE DS    XL10                     VTOC EXTENT DESCRIPTION\n         DS    XL10                RESERVED                        @L6C\nDS4EFLVL DS    CL1                 EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  LEVEL.                          @L6A\n*                                  X'00' MEANS EXTENDED FREE-      @L6A\n*                                  SPACE MANAGEMENT WILL NOT BE    @L6A\n*                                  USED FOR THIS VOLUME.           @L6A\n*                                  X'07' MEANS WHEN IN OSVTOC      @L6A\n*                                  FORMAT, FREE-SPACE MANAGED IN   @L6A\n*                                  F7 DSCB'S.                      @L6A\nDS4EFL00 EQU   00                  EXTENDED FREE-SPACE             @L6A\n*                                  LEVEL 0.                        @L6A\nDS4EFL07 EQU   07                  EXTENDED FREE-SPACE             @L6A\n*                                  LEVEL 7.                        @L6A\nDS4EFPTR DS    CL5                 POINTER TO EXTENDED FREE-SPACE  @L6A\n*                                  INFORMATION:                    @L6A\n*                                  FOR DS4LVL=X'00' THIS IS ZERO.  @L6A\n*                                  FOR DS4EFLVL=X'07' THIS IS THE  @L6A\n*                                  CCHHR OF THE FIRST F7 DSCB.     @L6A\n         DS    XL9                 RESERVED                        @L6A\nDS4END   EQU   *                   EQUATE AT END OF DSCB4          @P1C\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT5\n         MNOTE *,'       #VTCFMT5  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT5                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 5 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 5 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 5 DSCB DESCRIBES FREE SPACE AREAS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT5                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT5DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT5                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 5 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        FREE SPACE DESCRIPTIONS                                      *\n*                                                                     *\n*        FIRST FORMAT 5 DSCB FOLLOWS FORMAT 4 DSCB                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS5KEYID DS    XL4                      KEY IDENTIFIER\nDS5EXT01 DS    XL5                      AVAILABLE ENTENT\nDS5EXT02 DS    XL5                           .\nDS5EXT03 DS    XL5                           .\nDS5EXT04 DS    XL5                           .\nDS5EXT05 DS    XL5                           .\nDS5EXT06 DS    XL5                           .\nDS5EXT07 DS    XL5                           .\nDS5EXT08 DS    XL5                           .\nDS5FMTID DS    X                        FORMAT IDENTIFIER\nDS5EXT09 DS    XL5                      AVAILABLE EXTENT\nDS5EXT10 DS    XL5                           .\nDS5EXT11 DS    XL5                           .\nDS5EXT12 DS    XL5                           .\nDS5EXT13 DS    XL5                           .\nDS5EXT14 DS    XL5                           .\nDS5EXT15 DS    XL5                           .\nDS5EXT16 DS    XL5                           .\nDS5EXT17 DS    XL5                           .\nDS5EXT18 DS    XL5                           .\nDS5EXT19 DS    XL5                           .\nDS5EXT20 DS    XL5                           .\nDS5EXT21 DS    XL5                           .\nDS5EXT22 DS    XL5                           .\nDS5EXT23 DS    XL5                           .\nDS5EXT24 DS    XL5                           .\nDS5EXT25 DS    XL5                           .\nDS5EXT26 DS    XL5                           .\nDS5PTRDS DS    XL5                      POINTER TO NEXT FORMAT 5 DSCB\nDS5END   EQU   *                        END OF DSCB5\n         MEND\n         MACRO\n         #VTCFMT7\n         MNOTE *,'       #VTCFMT7                                  ABL'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT7                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 7 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 7 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 7 DSCB DESCRIBES VOLUME FREE SPACE.      *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT7                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT7DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT7                                 *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\nDS7KEYID DS    XL4                     KEY X'07070707'\nDS7EXTNT DS    5XL8                    SPACE FOR 5 EXTENT DESCRIPTIONS\nDS7FMTID DS    X                       FORMAT IDENTIFIER\nDS7ADEXT DS    11XL8                   SPACE FOR 11 EXTENT DESCRIPTIONS\n         DS    XL2                     RESERVED\nDS7PTRDS DS    XL5                     POINTER TO NEXT FORMAT 7 DSCB\nDS7END   EQU   *                       END OF DSCB7\n         MEND\n         SPACE 3\n         LCLC  &OPSYSTM                 OPERATING SYSTEM\n* VALUES ARE MVT, SVS, MVS112, MVS113, MVS4\n***          MVT    - DO YOU STILL HAVE MVT?\n***          SVS    - HOW ABOUT SVS?\n***          MVS112 - MVS UP TO MVS 1.1.2\n***          MVS113 - MVS SP 1.1.3 AND ABOVE (XA AND ESA)\n***          MVS4   - MVS/ESA WITH DYNAMIC UCB (MVS ESA 4.1.0-UCBSCAN)\n&OPSYSTM SETC  'MVS4'                   DEFINE OPERATING SYSTEM\n         TITLE 'ENTRY CODING'\nDVOL     $ENTER BASE=R12,                                              +\n               RENT=DSECTLEN,                                          +\n               SAVE=SAVEAREA\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         #TSOBLKS DSECT,ECB=DVOLECB,                                   +\n               CPPL=(R11,R1),                                          +\n               IOPL=(R10,DVOLIOPL,DVOLPTPB),                           +\n               PPL=(R9,DVOLPPL,DVOLPCL,DVOLANS)\n         DROP  R10\n         LA    R10,2048\n         LA    R10,2048(R10,R12)\n         USING DVOL+4096,R10\n         TITLE 'SET UP DATA AREAS'\n***********************************************************************\n*                                                                     *\n*              SET UP DATA AREAS                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         MVC   DVOLHEDR(4),MODLINE       INIT OUTPUT AREA\n         MVC   OUTLINE,BLANKS            INIT OUTPUT LINE\n         MVC   DVOLPTPB(MODLEN1),MODELS1 INITIALIZE WORK AREAS\n         LA    R1,DSNAME                SET UP OBTAIN, SEARCH LIST\n         LA    R2,DVOLSER\n         LA    R3,VTOCFMT4\n         STM   R1,R3,DVOLDCB4+4\n         LA    R1,DVOLCCHH              SET UP OBTAIN, SEEK LIST\n         LA    R2,DVOLSER\n         LA    R3,VTOCFMT5\n         STM   R1,R3,DVOLDCB5+4\n         XC    TOTAL,TOTAL              ZERO SIZE OF 5 LARGEST EXTENTS\n         XC    UCBADDR,UCBADDR          ZERO UCB ADDRESS\n         XC    UCBWORK(100),UCBWORK     ZERO UCB WORKAREA\n         LA    R1,UCBWORK               WORK AREA\n         LA    R2,=AL1(UCB3DACC)        DIRECT ACCESS DEVICES\n         LA    R3,UCBANSR               UCB ADDRESS\n         STM   R1,R3,UCBPARMS           SAVE THE PARAMETER LIST\n         OI    UCBPARMS+8,X'80'         MARK THE END OF THE LIST\n         LA    R1,SHORTSER              INITIALIZE SERIAL POINTER\n         ST    R1,SERPTR\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*              PARSE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PPL ADDRESS\n         LINK  EP=IKJPARS               PARSE THE OPERANDS\n         LTR   R15,R15                  TEST PARSE RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DVOLANS               LOAD ANSWER AREA ADDRESS\n         USING DVOLPDL,R9               DEFINE BASE REGISTER\n         SPACE 2\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO, BRANCH\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   NOPRINT+1,0           ANY PRINT KEYWORD?\n         BNE   NOPDSCAL              NO, BRANCH\n         MVI   NOPRINT+1,2           YES, SET DEFAULT TO NOPRINT\nNOPDSCAL EQU   *\n***********************************************************************\n*                                                                     *\n*              CHECK FOR HARDCOPY OPTION AND OPEN DCB IF NEEDED       *\n*                                                                     *\n***********************************************************************\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    NEXT                    GO ON TO NEXT OPTION\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         CLI   NOPRINT+1,0             ANY PRINT KEYWORD?\n         BNE   *+8                     NO, BRANCH\n         MVI   NOPRINT+1,2             YES, SET DEFAULT TO NOPRINT\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    NEXT                    CONTINUE\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY      ABL FEB87\n         MVI   NOPRINT+1,1             CHANGE TO PRINT        ABL FEB87\n         LA    R15,BADOPEN             LOAD ADDR OF MSG\n         BAL   R2,PUTL                 GO WRITE MSG\n***********************************************************************\n*                                                                     *\n*              GET VOLUME SERIAL AND UCB ADDRESS                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNEXT     LA    R8,VOL                   SET POINTER TO FIRST VOLUME\n         MVI   FOUNDONE,X'FF'           NO OUTPUT AT ALL\n         SPACE 1\nNEXTPARM XC    UCBADDR,UCBADDR          START THE UCB SCAN OVER\n         XC    UCBWORK(100),UCBWORK     START THE UCB SCAN OVER\n         XC    SRVUCBIC,SRVUCBIC     ZERO THE TOKEN AREA        ABL-410\n         L     R15,16                   LOAD CVT ADDRESS\n         L     R15,40(R15)              LOAD UCB TABLE ADDRESS\n         ST    R15,UCBTABLE             SAVE UCB TABLE ADDRESS\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   NEXTHDR\n         CLC   NOHEADER,=H'2'           SEE IF HEADER SUPPRESSED\n         BE    NEXTHDR\n         LA    R15,BLANKLIN             LOAD OUTPUT LINE ADDRESS\n         CLI   FOUNDONE,X'FF'           FIRST LINE OUTPUT?\n         BE    *+8                      YES, NO BLANK LINE\n         BAL   R2,PUTL\n         LA    R15,SHORT1               LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,SHORT2               LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\nNEXTHDR  MVI   FOUNDONE,0               NO OUTPUT YET\n         SPACE 2\nNEXTVOL  MVC   LINE1(MODLEN2),MODELS2   COPY OUTPUT LINES\n         MVC   FREEMSG1(MODLEN3),MODELS3\n         MVC   BLDSCBS(MODLEN4),MODELS4\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL\n         MVC   DVOLSER,=CL6' '          BLANK OUT VOL SERIAL\n         L     R3,0(R8)                 LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BE    GETUCB\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         EX    R1,MOVESER               MOVE SERIAL\n         MVC   SHORTSER,DVOLSER         COPY VOLUME SERIAL\n         TITLE 'FIND UCB ENTRY FOR VOLUME'\n         AIF   ('&OPSYSTM' NE 'MVS4').MVS4NOT\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        USE THE UCBSCAN MACRO FROM MVS 4.1.0 OR ABOVE                *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\nUCBCHECK EQU   *\n*\n**  FIND THE A(UCB)\n*\nVOLSET   LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         L     R1,16               CVT                          ABL-410\n         L     R1,CVTUCBSC-CVT(R1) IOSSVSUCB  UCB SCAN          ABL-410\n         ST    R1,UCBPARMS+12      SAVE ADDRESS                 ABL-410\n         SPACE 1                                                ABL-UCB\n**                                                              ABL-410\nINCR1    L     R15,16                       CVT                 ABL-410\n         TM    CVTDCB-CVT(R15),CVTOSEXT     X'074' EXTENSION?   ABL-410\n         BNO   ISPDEVTA                     NO, BRANCH          ABL-410\n         TM    CVTOSLV0-CVT(R15),X'08'      X'4F0' HBB4410 UCB? ABL-410\n         BO    ISPDEVTB                     YES, BRANCH         ABL-410\n*                                                               ABL-410\n* SYSTEM DOES NOT HAVE UCB SCAN SERVICES (BEFORE MVS ESA 4.1.0) ABL-410\nISPDEVTA DS    0H                                               ABL-410\nISPDEVTL DS    0H                       *                       ABL-410\n         LA    R1,UCBPARMS                                      ABL-410\n         L     R15,UCBPARMS+12     ROUTINE ADDRESS              ABL-410\n         BALR  R14,R15                                          ABL-410\n         LTR   R15,R15                                          ABL-410\n         BNZ   ISPDEVTE            DONE                         ABL-410\n         L     R1,UCBANSR                                       ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTL            NO, SKIP IT                  ABL-410\nISPDEVT4 DS    0H                       *                       ABL-410\n         SR    R15,R15                  RC0                     ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTE LA    R15,4                    VOLUME NOT FOUND        ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\n         DROP  R1                                               ABL-410\n*                                                               ABL-410\n* SYSTEM IS AT LEAST MVS ESA 4.1.0 OR HIGHER -- HAS UCB SCAN    ABL-410\nISPDEVTB DS    0H                       *                       ABL-410\nISPDEVTF DS    0H                       *                       ABL-410\n         L     R15,16                       CVT                 ABL-410\n         TM    CVTOSLV1-CVT(R15),X'20'  X'4F1' JBB5510 4 DIGIT? ABL-410\n         BO    ISPDEVTK                                         ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,              ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTK DS    0H                       *                       ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,RANGE=ALL,    ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTG DS    0H                       *                       ABL-410\n         LA    R1,SRVUCBUC              UCB ADDRESS             ABL-410\n         ST    R1,UCBANSR               SET                     ABL-410\n         SR    R15,R15                  SET RETURN CODE         ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTF   W?       NO, SKIP IT                  ABL-410\n         DROP  R1                                               ABL-410\nISPDEVTN DS    0H                       *                       ABL-410\n*                                                               ABL-410\nSPACVO99 L     R6,UCBANSR               R6 HAS THE UCB ADDRESS  ABL-410\n         LTR   R15,R15                  FOUND THE UCB?          ABL-410\n         BNZ   NOUCB                    NO, BRANCH              ABL-410\n         L     R3,0(,R8)                LOAD SERIAL ADDRESS     ABL-410\n         LA    R15,SRVUCBDC             ADDRESS OF DCE          ABL-410\n         STCM  R15,B'1111',ADDRDCE SAVE DCE ADDRESS             ABL-410\n*                                                               ABL-410\n         L     R5,UCBANSR               LOAD UCB ADDRESS\n         USING UCB,R5\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBCHECK\n*                                                                 ABL97\n         ST    R5,DVOLDEC               SAVE UCB ADDRESS          ABL97\n         UCBDEVN UCBPTR=DVOLDEC,DEVN=UCBTEXT                      ABL97\n*                                                                 ABL97\n***      CLI   UCBTEXT,C' '             LEADING BLANK?            ABL97\n***      BNE   UCBFOUR                  NO, BRANCH                ABL97\n***      ICM   R1,B'1110',UCBTEXT+1     UCB CHARACTERS            ABL97\n***      ICM   R1,B'0001',UCBTEXT       LEADING BLANK AT END      ABL97\n***      STCM  R1,B'1111',UCBTEXT       SHIFT THE UCB CHARACTERS  ABL97\nUCBFOUR  DS    0H                                                 ABL97\n*                                                                 ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBCHECK                 NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBCHECK                 NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n***      BNE   UCBCHECK                 NO, BRANCH                ABL97\n         BE    UCBHIGH                  YES, BRANCH               ABL97\n         CLI   UCBTEXT,C' '             BLANK FIRST CHARACTER?    ABL97\n         BNE   UCBCHECK                 NO, BRANCH                ABL97\n         CLC   1(*-*,R3),UCBTEXT+1      <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?              ABL97\n         BNE   UCBCHECK                 NO, BRANCH                ABL97\n         SPACE 2\nUCBHIGH  DS    0H\n         MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\nISPDEVTH DC    H'128'                                           ABL-410\n         DROP  R5\n         AGO   .MVS4DON\n.MVS4NOT ANOP\n         AIF   ('&OPSYSTM' NE 'MVS113').MVSNOXA\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        USE THE UCB SCAN SERVICES FROM MVS SP 1.1.3 OR MVS/XA        *\n***********************************************************************\n*                                                                     *\n*        R2  - VOLUME SERIAL ADDRESS                                  *\n*        R3  - VOLUME SERIAL (FROM COMMAND LINE) ADDRESS              *\n*        R4  - UCB SCAN ENTRY ADDRESS                                 *\n*        R5  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\n         L     R4,16                    CVT ADDRESS START\n         L     R4,CVTUCBSE(,R4)         START OF UCB SCAN ROUTINE\n         SR    R5,R5                    CLEAR REGISTER 5\nUCBCHECK EQU   *\n         LA    R1,UCBPARMS              START OF PARAMETER LIST\n         LR    R15,R4\n         BALR  R14,R15                  INVOKE THE SCAN ROUTINE\n         SPACE 1\n         LTR   R15,R15                  ANY MORE?\n         BNZ   NOUCB                    NO, DONE\n         L     R5,UCBANSR               LOAD UCB ADDRESS\n         USING UCB,R5\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBCHECK\n         MVI   UCBNAME,C' '             SAVE UCB ADDRESS          ABL97\n         MVC   UCBNAME+1(3),UCBNAME     SAVE UCB ADDRESS          ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBCHECK                 NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBCHECK                 NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n         BNE   UCBCHECK                 NO, BRANCH\n         SPACE 2\nUCBHIGH  DS    0H\n         MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\n         DROP  R5\n         AGO   .MVSXA\n.MVSNOXA ANOP\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        IF DEVICES HAVE MULTIPLE PATHS, THERE WILL BE MULTIPLE       *\n*        ENTRIES IN THE UCB LOOKUP TABLE, BUT ONLY ONE UCB FOR        *\n*        EACH DEVICE.  DVOL WILL SKIP ALTERNATE PATHS.  THE           *\n*        LOGIC TO SKIP ALTERNATE PATHS DEPENDS ON THE RESTRICTIONS    *\n*        THAT  1.  THE ALTERNATE ADDRESS MUST BE HIGHER THAN THE      *\n*                  PRIMARY ADDRESS, AND                               *\n*              2.  THAT UCB'S ARE LOCATED IN STORAGE IN ASCENDING     *\n*                  ORDER BY PRIMARY UNIT ADDRESS                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2  - VOLUME SERIAL ADDRESS                                  *\n*        R3  - VOLUME SERIAL (FROM COMMAND LINE) ADDRESS              *\n*        R4  - UCB TABLE ADDRESS                                      *\n*        R5  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\n         L     R4,UCBTABLE              LOAD ADDRESS TO START SEARCH\n         SR    R5,R5                    CLEAR REGISTER 5\nUCBCHECK EQU   *\n         AIF   ('&OPSYSTM' EQ 'MVS112').MVSUCB\n         LH    R5,0(R4)                 LOAD UCB ADDRESS\n         AGO   .USING\n.MVSUCB  ICM   R5,3,0(R4)               LOAD UCB ADDRESS\n.USING   USING UCB,R5\n         LTR   R5,R5                    TEST FOR BLANK ENTRY\n         BZ    UCBHOLE\n         CLC   0(2,R4),=X'FFFF'         TEST FOR END OF TABLE\n         BE    NOUCB\n         CLI   UCBTBYT3,UCB3DACC        TEST FOR DIRECT ACCESS\n         BNE   UCBHOLE\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBHOLE\n         MVI   UCBNAME,C' '             SAVE UCB ADDRESS          ABL97\n         MVC   UCBNAME+1(3),UCBNAME     SAVE UCB ADDRESS          ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBHOLE                  NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBHOLE                  NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n         BNE   UCBHOLE                  NO, BRANCH\n         SPACE 2\nUCBHIGH  C     R5,UCBADDR               CHECK AGAINST LAST UCB ADDRESS\n         BH    UCBCONT\nUCBHOLE  LA    R4,2(R4)                 INCREMENT TO NEXT UCB\n         B     UCBCHECK\nUCBCONT  MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         LA    R4,2(R4)                 LOAD ADDR OF NEXT UCB ENTRY\n         ST    R4,UCBNEXT               SAVE ADDRESS\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         MVC   UCBTABLE,UCBNEXT         SET UCBTABLE ADDR TO NEXT UCB\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\n         DROP  R5\n.MVSXA   ANOP\n         L     R7,UCBADDR               LOAD UCB ADDRESS        ABL-410\n         USING UCB,R7                   DEFINE BASE REGISTER    ABL-410\n         SR    R15,R15             ZERO FOR INSERT              ABL-410\n         ICM   R15,B'0111',UCBEXTP-UCBOB(R7) DCE ADDRESS        ABL-410\n         BZ    *+8                 NO, BRANCH                   ABL-410\n         ICM   R15,B'1111',24(R15) GET DCE                      ABL-410\n         STCM  R15,B'1111',ADDRDCE SAVE DCE ADDRESS             ABL-410\n.MVS4DON ANOP\n         TITLE 'PROCESS UCB INFORMATION'\n***********************************************************************\n*                                                                     *\n*              PROCESS UCB INFORMATION                                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R7  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCONTINUE MVC   SHORTSER,DVOLSER         COPY VOLUME SERIAL\n         MVI   FOUNDONE,1               OUTPUT NOW\n         L     R7,UCBADDR               LOAD UCB ADDRESS\n         USING UCB,R7                   DEFINE BASE REGISTER\n*        MVC   UNITADDR,UCBNAME         COPY UNIT ADDRESS         ABL97\n         MVC   UNITADDR,UCBTEXT         COPY UNIT ADDRESS         ABL97\n*        MVC   SHORTUNT,UCBNAME                                   ABL97\n         MVC   SHORTUNT,UCBTEXT                                   ABL97\n         IC    R15,19(R7)               UNIT TYPE IN HEX\n         N     R15,=X'0000000F'         MASK OFF OTHER BITS\n         MH    R15,=H'6'                UNIT TYPE * 6\n         LA    R15,UNITTBL(R15)         UNIT TYPE NAME\n         MVC   UNITTYPE(6),0(R15)       SAVE NAME IN MESSAGE\n         MVC   SHORTTYP(6),0(R15)       SAVE NAME IN MESSAGE\n*\n         ICM   R15,B'1111',ADDRDCE GOOD DCE ADDRESS?            ABL-410\n         BZ    TYPEEXIT            NO, BRANCH                   ABL-410\n         LA    R14,MODELTBL-4      TABLE OF DEVICE MODIFIERS\n*\nTYPELOOP LA    R14,4(,R14)             NEXT TABLE ENTRY\n         CLI   0(R14),X'FF'            END OF TABLE?\n         BE    TYPEEXIT                YES, BRANCH\n         CLC   UCBTBYT4-UCBOB(1,R7),0(R14)  MATCH DEVICE TYPE?\n         BNE   TYPELOOP                     NO, BRANCH\n         CLC   22(1,R15),1(R14)        MATCH DCEMDRDT?\n         BNE   TYPELOOP                NO, BRANCH\n         MVC   UNITTYPE+4(2),2(R14)    ADD THE DESIGNATOR\n         MVC   SHORTTYP+4(2),2(R14)    ADD THE DESIGNATOR\nTYPEEXIT DS    0H                                             ABL MAY90\n*\n*--------MOUNT STATUS\n         TM    UCBSTAT,UCBRESV          TEST FOR RESERVED\n         BZ    TRYRES\n         MVC   MNTSTAT,=CL9'RESERVED'   SET MOUNT STATUS\n         MVC   SHORTMNT(6),=CL6'RESRVD' SET MOUNT STATUS\n         B     USESTAT\nTRYRES   TM    UCBSTAT,UCBPRES          TEST FOR RESIDENT\n         BZ    USESTAT\n         MVC   MNTSTAT,=CL9'RESIDENT'   SET MOUNT STATUS\n         MVC   SHORTMNT(6),=CL6'RESDNT' SET MOUNT STATUS\nUSESTAT  MVI   SHORTSLA,C'/'\n*--------USE STATUS\n         TM    UCBSTAB,UCBBPRV          TEST FOR PRIVATE\n         BZ    TRYPUB\n         MVC   USESTATS,=CL7'PRIVATE'   SET USE STATUS\n         B     TESTALOC\nTRYPUB   TM    UCBSTAB,UCBBPUB          TEST FOR PUBLIC\n         BZ    TRYSTOR\n         MVC   USESTATS,=CL7'PUBLIC'    SET USE STATUS\n         B     TESTALOC\nTRYSTOR  TM    UCBSTAB,UCBBSTR          TEST FOR STORAGE\n         BZ    TESTALOC\n         MVC   USESTATS,=CL7'STORAGE'   SET USE STATUS\nTESTALOC MVC   SHORTUSE(4),USESTATS    COPY USE STATUS\n*--------ALLOCATED/UNALLOCATED\n         TM    UCBSTAT,UCBALOC          TEST FOR ALLOCATED\n         BZ    TESTOFF\n         MVC   ALLOCATD,=CL11'ALLOCATED  '\n*--------ONLINE/OFFLINE\nTESTOFF  TM    UCBSTAT,UCBONLI          TEST FOR ONLINE\n         BZ    TESTUNLD\n         MVC   ONOFF,=CL17'ONLINE'\n         TM    UCBSTAT,UCBCHGS          TEST FOR OFFLINE PENDING\n         BZ    TESTUNLD\n         MVC   ONOFF,=CL17'OFFLINE PENDING'\n         MVC   SHORTMNT(17),ONOFF\n*--------PENDING MOUNT/UNLOAD\nTESTUNLD TM    UCBSTAT,UCBUNLD          TEST FOR UNLOAD PENDING\n         BZ    GETFMT4\n         MVC   UNLOAD,=CL17'UNLOAD PENDING'\n         MVC   SHORTMNT(17),UNLOAD\n***      TM    DVOLFLGB,UCBTICBT        TEST FOR MOUNT PENDING\n***      BZ    GETFMT4\n***      MVC   UNLOAD,=CL17'MOUNT PENDING'\n***      MVC   SHORTMNT(17),UNLOAD\n         TITLE 'OBTAIN AND PROCESS FORMAT 4 DSCB (VTOC DSCB)'\n***********************************************************************\n*                                                                     *\n*              OBTAIN FORMAT 4 DSCB (VTOC DSCB)                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETFMT4  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BNE   GETFMT4A\n         LA    R15,LINE1                DISPLAY VOLUME SERIAL AND UNIT\n         BAL   R2,PUTL\nGETFMT4A XC    TOTAL,TOTAL              ZERO 5 LARGEST EXTENT TOTAL\n         MVI   DS4IDFMT,X'00'           ZERO OUT FORMAT 4 ID LOCATION\n         MVI   VTOCINDS,X'00'           ZERO OUT VTOC INDICATORS\n         TM    DVOLFLGA,DVOLNRDY        TEST FOR NOT READY\n         BO    NOTREADY\n         DROP  R7\n         OBTAIN DVOLDCB4                OBTAIN FORMAT 4 DSCB\n         CLI   DS4IDFMT,X'F4'           TEST FIELD IDENTIFIER\n         BNE   ERRFMT4\n         MVC   DVOLCCHH,DS4VTOCE+2      COPY CCHH OF VTOC\n         MVI   DVOLCCHH+4,X'02'         SET RECORD TO 2 FOR FIRST FMT 5\n         MVC   TRKPRCYL,DS4DEVSZ+2      COPY TRACKS PER CYLINDER\n         MVC   MTDSCBS,DS4DSREC         COPY TRACKS PER CYLINDER\n         MVC   VTOCINDS,DS4VTOCI        SAVE VTOC INDICATORS\n         BAL   R2,IXINIT                GET INDEXED VTOC IF AVAILABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*              PROCESS VSAM INFORMATION                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETVSAM  TM    DS4VSIND,X'80'           TEST OWNERSHIP BIT\n         BZ    ZERO5                    IGNORE VSAM LINE IF NOT OWNED\n*ABL     BZ    TIMESTMP\n         MVC   OWNERSHP,=C'ON '         INDICATE VOLUME IS OWNED\nTIMESTMP UNPK  WORKAREA(9),DS4AMTIM(5)  UNPACK TIMESTAMP 1\n         UNPK  WORKAREA+8(9),DS4AMTIM+4(5)\n         MVZ   WORKAREA,=XL16'00'       MOVE ZEROS TO ZONES\n         TR    WORKAREA,=C'0123456789ABCDEF'  CONVERT TO EBCDIC\n         MVC   TIMEST1,WORKAREA         COPY TIMESTAMP 1 TO MESSAGE\n         UNPK  WORKAREA(9),DS4R2TIM(5)  UNPACK TIMESTAMP 2\n         UNPK  WORKAREA+8(9),DS4R2TIM+4(5)\n         MVZ   WORKAREA,=XL16'00'       MOVE ZEROS TO ZONES\n         TR    WORKAREA,=C'0123456789ABCDEF'  CONVERT TO EBCDIC\n         MVC   TIMEST2,WORKAREA         COPY TIMESTAMP2 TO MESSAGE\n         SPACE 2\n         CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    ZERO5\n         MVC   SHORTVSM,OWNERSHP        COPY OWNERSHIP INFORMATION\n         TITLE 'OBTAIN FORMAT 5 DSCB (FREE AREA DSCB)'\n***********************************************************************\n*                                                                     *\n*              OBTAIN FORMAT 5 DSCB (FREE AREA DSCB)                  *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R2  - EXTENTS LEFT TO PROCESS IN THIS DSCB                   *\n*        R3  - POINTER TO LOAD ADDRESS TABLE ENTRY                    *\n*        R4  - CUMULATIVE CYLINDER COUNT                              *\n*        R5  - CUMULATIVE EXCESS TRACK COUNT                          *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION (LOADED BY EXECUTE)      *\n*        R7  - CUMULATIVE EXTENT COUNT                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nZERO5    XC    LARGE5(50),LARGE5        ZERO LARGEST 5 EXTENTS TABLE\n         SR    R7,R7                    ZERO EXTENTS\n         SR    R4,R4                    ZERO CYLINDERS\n         SR    R5,R5                    ZERO TRACKS\nOBTFMT5  L     R15,UCBADDR              LOAD UCB ADDRESS\n         USING UCB,R15                  ADDRESSABILITY\n         TM    DVOLFLGA,DVOLNRDY        TEST NOT READY\n         BO    NOTREADY\n         DROP  R15\n         BAL   R2,IXFMT5                GET THE NEXT FORMAT 5 DSCB\n         B     PFGOTIX                  GOT INDEXED VTOC, BRANCH\n         SPACE 1\n         OBTAIN DVOLDCB5                READ FORMAT 5 DSCB\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRFMT5\nPFGOTIX  CLI   DS5FMTID,X'F5'           TEST FORMAT 5 ID\n         BNZ   PFGOTIX7                 NO, TRY FOR 7\n         LA    R2,26                    LOAD EXTENTS PER DSCB\n         SR    R3,R3                    ZERO POINTER\nDVOLLOAD EX    R0,FMT5ADDR(R3)          LOAD ADDRESS OF EXTENT DESCR\n         NC    0(5,R6),0(R6)            TEST FOR LAST EXTENT\n         BE    ENDFMT5\n         SR    R0,R0                    CLEAR REGISTER\n         MVC   HALF,2(R6)               COPY NUMBER OF CYLINDERS\n         LH    R1,HALF                  LOAD NUMBER OF CYLINDERS\n         IC    R0,4(R6)                 LOAD NUMBER OF TRACKS\n         AR    R4,R1                    ACCUMULATE CYLINDERS\n         AR    R5,R0                    ACCUMULATE TRACKS\n         LA    R7,1(R7)                 INCREMENT EXTENT COUNT\n         MH    R1,TRKPRCYL              MULT CYLS BY TRKS PER CYL\n         AR    R0,R1                    TOTAL TRACKS THIS EXTENT\n         TITLE 'SEE IF EXTENT IS ONE OF 5 LARGEST'\n***********************************************************************\n*                                                                     *\n*              SEE IF CURRENT EXTENT IS ONE OF 5 LARGEST              *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R1  - EXTENT TABLE COUNTER                                   *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION                          *\n*        R14 - CHARACTERS TO BE MOVED, ADDR OF EXTENT ENTRY           *\n*              R2, R3, R4, R5, AND R7 MUST BE PRESERVED               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SR    R14,R14                  ZERO CHARACTERS\n         LA    R1,5                     LOAD COUNT\nCOMPARE  C     R0,LARGE5(R14)           COMPARE TOTAL TRACKS\n         BNH   NOTLARGE\n         LA    R14,10(R14)              INCREMENT COUNT BY 10\n         BCT   R1,COMPARE\nNOTLARGE SH    R14,=H'10'\n         LTR   R14,R14                  TEST COUNT\n         BM    NEXTFREE\n         BZ    ADDEXTNT\n         BCTR  R14,0                    REDUCE COUNT BY 1\n         EX    R14,MOVEXTNT             COPY EXTENT DESCRIPTIONS\n         LA    R14,1(R14)               ADD 1 TO COUNT\nADDEXTNT LA    R14,LARGE5(R14)          LOAD ADDRESS FOR THIS EXTENT\n         ST    R0,0(R14)                STORE NUMBER OF TRACKS\n         MVC   6(3,R14),2(R6)           COPY CYLINDERS AND TRACKS\nNEXTFREE LA    R3,4(R3)                 INCREMENT POINTER\n         BCT   R2,DVOLLOAD              DECREMENT EXTENT COUNTER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              FINISHED WITH FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         NC    DS5PTRDS,DS5PTRDS        TEST FOR ANOTHER FMT5\n         BE    ENDFMT5\n         MVC   DVOLCCHH,DS5PTRDS        COPY ADDRESS OF NEXT FMT5 DSCB\n         B     OBTFMT5\nPFGOTIX7 CLI   DS5FMTID,X'F7'           TEST FORMAT 7 ID\n         BNZ   ERRFMT5\n         LA    R2,16                    LOAD EXTENTS PER DSCB\n         SR    R3,R3                    ZERO POINTER\nDVOLLOD7 EX    R0,FMT7ADDR(R3)          LOAD ADDRESS OF EXTENT DESCR\n         NC    0(8,R6),0(R6)            TEST FOR LAST EXTENT\n         BE    ENDFMT5\n         XC    STARTC(16),STARTC        CLEAR ACCUMULATORS\n         SR    R0,R0\n         L     R1,0(,R6)                BEGINNING OF THIS EXTENT\n         LH    R15,TRKPRCYL             TRKS PER CYL\n         DR    R0,R15                   DIVIDE\n         LTR   R0,R0                    ANY ODD TRACKS INTO EXTENT?\n         BZ    DVOLEXT1                 NO, BRANCH\n         AH    R1,=H'1'                 YES, ONE LESS WHOLE CYLINDER\n         SR    R15,R0                   TRACKS LEFT IN CYLINDER\n         LR    R0,R15                   TRACKS LEFT IN CYLINDER\nDVOLEXT1 ST    R1,STARTC                SAVE STARTING CYLINDER\n         ST    R0,STARTT                SAVE STARTING TRACK\n         SR    R0,R0\n         L     R1,4(,R6)                END OF THIS EXTENT\n         LH    R15,TRKPRCYL             TRKS PER CYL\n         DR    R0,R15                   DIVIDE\n         C     R1,STARTC                END:START CYLINDER\n         BE    DVOLEXT2                   EQUAL, BRANCH\n         BL    DVOLEXT3                   LESS, BRANCH\n*  END GREATER THAN START CYLINDER\n         S     R1,STARTC                NUMBER OF WHOLE CYLINDERS\n         A     R0,STARTT                TRACKS LEFT IN EXTENT\n         B     DVOLEXT7\n*  END SAME AS START CYLINDER\nDVOLEXT2 SR    R1,R1                    NO CYLINDERS SPANNED\n         A     R0,STARTT                TRACKS LEFT IN EXTENT\n         B     DVOLEXT7\n*  END LESS THAN START CYLINDER (STARTED ON SAME CYLINDER ACTUALLY)\nDVOLEXT3 SR    R1,R1                    NO CYLINDERS SPANNED\n         SR    R15,R0                   TRACKS LEFT IN SECOND CYLINDER\n         L     R0,STARTT                TRACKS LEFT IN FIRST CYLINDER\n         SR    R0,R15                   TRACKS IN THIS EXTENT\nDVOLEXT7 ST    R1,TOTALC                SAVE STARTING CYLINDER\n         ST    R0,TOTALT                SAVE TOTAL TRACKS\n         AR    R4,R1                    ACCUMULATE CYLINDERS\n         AR    R5,R0                    ACCUMULATE TRACKS\n         LA    R7,1(R7)                 INCREMENT EXTENT COUNT\n         L     R0,4(,R6)                END OF THIS EXTENT\n         S     R0,0(,R6)                LESS BEGINNING OF THIS EXTENT\n         TITLE 'SEE IF EXTENT IS ONE OF 5 LARGEST'\n***********************************************************************\n*                                                                     *\n*              SEE IF CURRENT EXTENT IS ONE OF 5 LARGEST              *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R1  - EXTENT TABLE COUNTER                                   *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION                          *\n*        R14 - CHARACTERS TO BE MOVED, ADDR OF EXTENT ENTRY           *\n*              R2, R3, R4, R5, AND R7 MUST BE PRESERVED               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SR    R14,R14                  ZERO CHARACTERS\n         LA    R1,5                     LOAD COUNT\nCOMPARE7 C     R0,LARGE5(R14)           COMPARE TOTAL TRACKS\n         BNH   NOTLARG7\n         LA    R14,10(R14)              INCREMENT COUNT BY 10\n         BCT   R1,COMPARE7\nNOTLARG7 SH    R14,=H'10'\n         LTR   R14,R14                  TEST COUNT\n         BM    NEXTFRE7\n         BZ    ADDEXTN7\n         BCTR  R14,0                    REDUCE COUNT BY 1\n         EX    R14,MOVEXTNT             COPY EXTENT DESCRIPTIONS\n         LA    R14,1(R14)               ADD 1 TO COUNT\nADDEXTN7 LA    R14,LARGE5(R14)          LOAD ADDRESS FOR THIS EXTENT\n         ST    R0,0(R14)                STORE NUMBER OF TRACKS\n         MVC   4(4,R14),TOTALC          COPY CYLINDERS\n         MVC   8(1,R14),TOTALT+3        COPY TRACKS\nNEXTFRE7 LA    R3,4(R3)                 INCREMENT POINTER\n         BCT   R2,DVOLLOD7              DECREMENT EXTENT COUNTER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              FINISHED WITH FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         NC    DS5PTRDS,DS5PTRDS        TEST FOR ANOTHER FMT5\n         BE    ENDFMT5\n         MVC   DVOLCCHH,DS5PTRDS        COPY ADDRESS OF NEXT FMT5 DSCB\n         B     OBTFMT5\nMODELTBL DC    X'0E1C',C'D '           3380D\n         DC    X'0E1B',C'E '           3380E\n         DC    X'0E21',C'J '           3380J\n         DC    X'0E23',C'K '           3380K\n         DC    X'0F26',C'M1'           3390M1\n         DC    X'0F27',C'M2'           3390M2\n         DC    X'0F24',C'M3'           3390M3\n         DC    X'0F31',C'OP'           3390 OPTICAL (LIKE M3)\n         DC    X'0F32',C'M9'           3390M9\n         DC    X'FF'                   END OF TABLE\n         DS    0H\n         TITLE 'DEVICE NOT READY'\n***********************************************************************\n*                                                                     *\n*              DEVICE NOT READY                                       *\n*                                                                     *\n***********************************************************************\nNOTREADY MVC   UNLOAD,=CL17'NOT READY'  INDICATE NOT READY\n         MVC   SHORTMNT(17),UNLOAD\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BE    INCRVOL\n         LA    R15,LINE2                DISPLAY HELD LINE\n         BAL   R2,PUTL\n         B     INCRVOL\n         TITLE 'FORMAT AND DISPLAY LINE'\n***********************************************************************\n*                                                                     *\n*              FORMAT AND DISPLAY LINE                                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - CYLINDER COUNT                                         *\n*        R5  - EXCESS TRACK COUNT                                     *\n*        R7  - EXTENT COUNT                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFMT5  BAL   R2,IXTERM                FIX FREE DSCB'S AND QUIT\n         LH    R1,MTDSCBS\n         CVD   R1,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   DSCBS,EDITFLD+4-1\n         SPACE 1\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   ENDFMT5A\n         MVC   SHORTDCB,DSCBS           COPY NUMBER OF DSCB'S\n         SPACE 2\nENDFMT5A CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BNE   ENDFMT5B\n         LA    R15,LINE2                DISPLAY HELD LINES\n         BAL   R2,PUTL\n         CLI   OWNERSHP+1,C'F'          VSAM OWNERSHIP OFF?\n         BE    TESTDOS                  YES, IGNORE IF NOT OWNED\n         LA    R15,LINE3\n         BAL   R2,PUTL\n*--------PROCESS VTOC INDICATORS\nTESTDOS  TM    VTOCINDS,X'08'\n         BZ    TESTDIRF\n         SPACE 2\n         LA    R15,DOS                  LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\nTESTDIRF TM    VTOCINDS,X'04'\n         BZ    BLKDSCBS\n         LA    R15,DAMAGED              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\nBLKDSCBS LA    R15,BLDSCBS              DISPLAY HELD LINE\n         BAL   R2,PUTL\n         SPACE 2\n         TM    VTOCINDS,DS4IVTOC        THIS VTOC INDEXED?\n         BZ    ENDFMT5B                 IF NO, DONE\n         L     R1,IXCT2                 FREE VIR'S\n         CVD   R1,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   DSCBVIR,EDITFLD+4-1\n         LA    R15,BLDSVIR              DISPLAY HELD LINE\n         BAL   R2,PUTL\n         SPACE 2\nENDFMT5B CLC   LARGE5+50-10(4),=F'0'    TEST FOR NO SPACE ON PACK\n         BE    NOSPACE\n         CVD   R7,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   EXTENTS,EDITFLD+4-1\n         CVD   R4,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   CYLS,EDITFLD+4-1\n         MH    R4,TRKPRCYL              CONVERT TOTAL TRACKS\n         AR    R4,R5\n         CVD   R4,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   TRACKS,EDITFLD+3-1\n         SPACE 2\n         CLC   OUTFORM,=H'1'\n         BNE   DISPLAY4\n         MVC   SHORTTOT,TRACKS\n         MVC   SHORTEXT,EXTENTS\n         MVC   SHORTCYL,CYLS\n         B     GETCYLTR\n         SPACE 2\nDISPLAY4 LA    R15,FREEMSG1             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         TITLE 'DISPLAY LARGEST EXTENTS AS CYL+TR'\n***********************************************************************\n*                                                                     *\n*              DISPLAY LARGEST EXTENTS AS CYL+TR                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - DESCRIPTION COUNTER                                    *\n*        R5  - TABLE ENTRY POINTER                                    *\n*        R6  - OUTPUT LINE POINTER                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETCYLTR LA    R4,5                     SET COUNTER\n         LA    R5,LARGE5+50-10          SET POINTER\n         LA    R6,LRGXTNT1-1            SET POINTER\nLOOP1    CLC   0(4,R5),=F'0'            TEST FOR END OF LIST\n         BE    ENDLOOP1\n         L     R3,4(R5)                 LOAD CYLINDERS\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   0(4+1,R6),EDITFLD+4-1    MOVE CYLINDERS TO MESSAGE\n         MVI   4+1(R6),C'+'             MOVE + SIGN\n         SR    R3,R3                    CLEAR REGISTER\n         IC    R3,8(R5)                 LOAD TRACKS\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'  SET UP EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT TRACKS\n         MVC   5+1(2,R6),EDITFLD+6      MOVE TRACKS INTO MESSAGE\n         MVI   7+1(R6),C'/'             MOVE /\n         SH    R5,=H'10'                POINT TO NEXT DESCRIPTION\n         LA    R6,8+1(R6)               POINT TO NEXT OUTPUT DESCR\n         BCT   R4,LOOP1                 DECREMENT COUNT AND LOOP\n         SPACE 2\nENDLOOP1 CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   DISPLAY5\n         MVC   SHORT1CL,LRGXTNT1-1      COPY CYLINDERS IN LARGEST EXTNT\n         MVC   SHORT1TR,LRGXTNT1+5      COPY TRACKS IN LARGETS EXTENT\n         MVI   SHORT1CL+4+1,C'+'        ADD A +\n         B     GETTRKS\n         SPACE 2\nDISPLAY5 LA    R15,FREEMSG2             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         TITLE 'DISPLAY LARGEST EXTENTS AS TRACKS'\n***********************************************************************\n*                                                                     *\n*              DISPLAY LARGEST EXTENTS AS TRACKS                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - DESCRIPTION COUNTER                                    *\n*        R5  - TABLE ENTRY POINTER                                    *\n*        R6  - OUTPUT LINE POINTER                                    *\n*        R7  - CUMULATIVE TRACK COUNTER                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETTRKS  LA    R4,5                     SET COUNT\n         LA    R5,LARGE5+50-10          SET POINTER\n         LA    R6,LRGXTNT2-1            SET POINTER\n         SR    R7,R7                    ZERO 5 LARGEST EXTENTS TOTAL\nLOOP2    CLC   0(4,R5),=F'0'            TEST FOR END OF TABLE\n         BE    ENDLOOP2\n         L     R3,0(R5)                 LOAD TOTAL TRACKS IN EXTENT\n         AR    R7,R3                    ACCUMULATE TOTAL\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'  SET EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT TRACKS\n         MVC   0+1(7,R6),EDITFLD+1      MOVE INTO MESSAGE\n         MVI   7+1(R6),C'/'             MOVE / INTO MESSAGE\n         SH    R5,=H'10'                POINT TO NEXT EXTENT ENTRY\n         LA    R6,8+1(R6)               POINT TO NEXT OUTPUT DESCR\n         BCT   R4,LOOP2                 DECREMENT COUNT AND LOOP\n         SPACE 2\nENDLOOP2 CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   DISPLAY6\n         MVC   SHORTLRG,LRGXTNT2+2-1    COPY TRACKS IN LARGEST EXTENT\n         CVD   R7,DVOLDEC               CONVERT TOTAL OF 5 LARGEST\n         MVC   EDITFLD,=X'4020202020202120'  MOVE IN EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT VALUE\n         MVC   SHORT5XT,EDITFLD+3-1     COPY TO OUTPUT LINE\n         B     CALCRC\n         SPACE 2\nDISPLAY6 LA    R15,FREEMSG3             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         SPACE 2\nCALCRC   MVC   TOTAL,=H'4095'           SET TOTAL = 4095 (LARGEST)\n         C     R7,=F'4095'              COMPARE TOTAL TO 4095\n         BH    INCRVOL\n         STH   R7,TOTAL                 STORE TOTAL\n         B     INCRVOL\n         TITLE 'NO SPACE ON VOLUME'\n***********************************************************************\n*                                                                     *\n*              NO SPACE ON VOLUME                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOSPACE  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    NOSPACE2\n         MVC   SHORTTOT(29),VOLFULL+4   MOVE NO SPACE MESSAGE\n         B     INCRVOL\nNOSPACE2 LA    R15,VOLFULL              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         TITLE 'END OF UCB TABLE REACHED'\n***********************************************************************\n*                                                                     *\n*              END OF UCB TABLE REACHED                               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R8  - PDE POINTER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOUCB    L     R3,0(R8)\n         CLI   0(R3),C'*'\n         BE    TSERONLY\n         CLI   FOUNDONE,1               ANY FOUND?\n         BE    NEXTONE                  YES, BRANCH\n         MVC   VOLSER,DVOLSER           SERIAL NOT FOUND - SET UP MSG\n         SPACE 2\n         CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRTNOSER\n         MVC   SHORTDCB(23),NOSER+13\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTONE\nPRTNOSER LA    R15,NOSER                LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTONE\nTSERONLY NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    RETURN\n         LA    R15,SHORTLIN             LOAD LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         B     RETURN\n         TITLE 'ERRORS'\n***********************************************************************\n*                                                                     *\n*              ERROR READING FORMAT 4 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRFMT4  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRNTFMT4\n         MVC   SHORTDCB(27),FMT4BAD+4\n         B     INCRVOL\nPRNTFMT4 LA    R15,FMT4BAD              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              ERROR READING FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRFMT5  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRNTFMT5\n         MVC   SHORTDCB(27),FMT5BAD+4\n         B     INCRVOL\nPRNTFMT5 LA    R15,FMT5BAD              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         EJECT\n***********************************************************************\n*                                                                     *\n*              UNABLE TO PARSE COMMAND OPERANDS                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRPARS  LA    R15,PARSERR              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,0                    SET RETURN CODE\n         B     RETURN2\n         TITLE 'FINISHED PROCESSING VOLUME'\n***********************************************************************\n*                                                                     *\n*              FINISHED THIS VOLUME - GO TO NEXT VOLUME               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R8  - PDE POINTER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nINCRVOL  CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   DISPLAY9\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTVOL                  REPEAT FOR ALL MATCHES\n         SPACE 2\nDISPLAY9 LA    R15,BLANKLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTVOL                  REPEAT FOR ALL MATCHES\n         SPACE 2\nNEXTONE  L     R8,8(R8)                 LOAD NEXT PDE ADDRESS\n         C     R8,=X'FF000000'          TEST FOR END OF LIST\n         BNE   NEXTPARM\n         B     RETURN\n         TITLE 'INDEXED VTOC INTERFACE'\n********************************************************************CST\n*                                                                   CST\n*  ROUTINES ADDED TO INTERFACE WITH INDEXED VTOCS.  THE FOLLOWING   CST\n*  STEPS ARE NEEDED                                                 CST\n*     1.  FIND UCB ADDRESS IN ORDER TO PASS UNIT ADDRESS TO         CST\n*         DYNAMIC ALLOCATE.                                         CST\n*     2.  DYNAMICALLY ALLOCATE VTOC                                 CST\n*     3.  OPEN VTOC                                                 CST\n*     4.  CALL IXTOFMT5 TO RETURN PSUEDO FORMAT-5S                  CST\n*     5.  CLOSE VTOC                                                CST\n*     6.  DEALLOCATE VTOC                                           CST\n* ZZZZ                                                              CST\n********************************************************************CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X I N I T                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  INITIALIZE FOR READING IX VTOC                                   CST\n*                                                                   CST\nIXINIT   XC    IXWORD,IXWORD           ZERO WORK WORD FOR 1ST CALL  CST\n         TM    VTOCINDS,DS4IVTOC       THIS VTOC INDEXED?           CST\n         BZR   R2                      IF NO, QUIT                  CST\n*                                                                   CST\n*  DYNALLOC VTOC                                                    CST\n*                                                                   CST\n         L     R1,UCBADDR              UCB ADDRESS                  ABL\n         USING UCB,R1                                               ABL\n*        MVC   IXKUNT+6(3),UCBNAME     SET UP DYNALOC UNIT.       ABL97\n*                         /1234                                   ABL97\n*                         ----1----+----2                         ABL97\n         MVC   IXKUNT+7(4),UCBTEXT     SET UP DYNALOC UNIT.       ABL97\n         CLI   IXKUNT+7,C' '  BLANK FIRST DIGIT?                  ABL97\n         BNE   USE4           NO, BRANCH                          ABL97\n         MVI   IXKUNT+5,3     RESET THE UCB LENGTH                ABL97\n         MVC   IXKUNT+6(3),IXKUNT+8  MOVE DOWN A 3 DIGIT UCB ADDR ABL97\nUSE4     DS    0H                                                 ABL97\n         MVC   IXKVOL+6(6),UCBVOLI     SET UP DYNALOC VOL.          ABL\n         DROP  R1                      DROP UCB ADDRESSING          ABL\n         LA    R1,AIX99RBA             POINT TO PARM LIST           CST\n         DYNALLOC                      CALL SVC99                   CST\n         LTR   R15,R15                 DID IT WORK?                 CST\n         BZ    *+8                     BIF YES                      CST\n         EX    0,*                     ELSE DIE                     CST\n*                                                                   CST\n* OPEN VTOC                                                         CST\n*                                                                   CST\n         MVC     IXDCB+DCBDDNAM(8),IXKDDN+6  MOVE DDNAME TO DCB     CST\n         RDJFCB  IXDCB                 READ IN JFCB                 CST\n         MVC   IXJFCB(44),=44XL1'04'   DSNAME FOR VTOC              CST\n         OPEN  (IXDCB,(INPUT)),TYPE=J  OPEN VTOC                    CST\n         TM    IXDCB+48,X'10'          DID IT WORK?                 CST\n         BOR   R2                      YES. ALL READY.              CST\n         EX    0,*                     NO. FAIL.                    CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X F M T 5                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  GET A PSUEDO FORMAT-5 FROM AN IX VTOC                            CST\n*                                                                   CST\nIXFMT5   TM    VTOCINDS,DS4IVTOC       VTOC IS INDEXED?             CST\n         BZ    4(,R2)                  IF NOT, SKIP                 CST\n         LA    R1,VTOCFMT5             POINT TO OUTPUT AREA         ABL\n         ST    R1,IXPARM+16            PASS TO IXTOFMT5 ROUTINE     ABL\n         LA    R1,IXPARM               POINT TO PARMLIST            CST\n         L     R15,=V(IXTOFMT5)        POINT TO ROUTINE             CST\n         BALR  R14,R15                 CALL INTERFACE ROUTINE       CST\n         LTR   R15,R15                 DID IT WORK?                 CST\n         BZR   R2                      IF SO, CONTINUE              CST\n         EX    0,*                     ELSE DIE.                    CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X T E R M                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  CLOSE VTOC DCB AND FREE ALLOCATION                               CST\n*                                                                   CST\nIXTERM   TM    VTOCINDS,DS4IVTOC       VTOC IS INDEXED?             CST\n         BZR   R2                      IF NOT, SKIP                 CST\n*                                                                   CST\n*  CORRECT DSCB COUNT AND GET VIRS FOR STAFF                        CST\n*                                                                   CST\n         L     R1,IXCT1                USE DSCB 0 COUNT FROM IX     CST\n         STH   R1,MTDSCBS              UPDATE THE EMPTY COUNT       ABL\n         CLOSE IXDCB                   CLOSE THE VTOC               CST\n         MVC   IXKDDN2+6(8),IXKDDN+6   MOVE DDNAME TO DEALLOC LIST  CST\n         LA    R1,AIX99RBF             POINT TO PARMLIST            CST\n         DYNALLOC                      FREE VTOC                    CST\n         LTR   R15,R15                                              CST\n         BZR   R2                      RETURN                       CST\n         EX    0,*                     RETURN                       CST\n         EJECT ,                                                    CST\n*                                                                   CST\n*  PARMLIST FOR INTERFACE ROUTINE                                   CST\n*                                                                   CST\nIXPARM   DC    A(IXWORD)               @ WORK WORD                  CST\n         DC    A(IXDCB)                @ VTOC DCB                   CST\n         DC    A(IXCT1)                @ CNT - FREE FMT 0S          CST\n         DC    A(IXCT2)                @ CNT - FREE VIRS            CST\n         DC    A(VTOCFMT5-VTOCFMT5)    @ BFR FOR FMT5               CST\nIXWORD   DC    F'0'                    WORK WORD                    CST\nIXCT1    DC    F'0'                    COUNT FREE FMT0              CST\nIXCT2    DC    F'0'                    COUNT FREE VIRS              CST\n         SPACE 2                                                    CST\n*                                                                   CST\n*  PARMLIST FOR VTOC ALLOCATE                                       CST\n*                                                                   CST\n         PRINT GEN,DATA                                             CST\nAIX99RBA DC    0F'0',X'80',AL3(IX99RBAL)                            CST\nIX99RBAL DC    AL1(20,1)               LENGTH, VERB                 CST\n         DC    X'4000'                 FLAG1 (DON'T USE EXISTING)   CST\n         DC    AL2(0,0)                ERROR CODE, INFO CODE        CST\n         DC    A(IX99TXT1)             @ TEXT UNITS                 CST\n         DC    2F'0'                   RSVD, FLAG2                  CST\nIX99TXT1 DC    A(IXKDDN,IXKVOL,IXKUNT,IXKOLD)                       CST\n         DC    X'80',AL3(IXKKEP)                                    CST\nIXKDDN   DC    AL2(85,1,8),C'SYS99999' DDNAME ASSIGNED              CST\nIXKVOL   DC    AL2(16,1,6),C'XXXXXX'   VOL=SER=                     CST\nIXKUNT   DC    AL2(21,1,5),C'/ UCB'    UNIT=                      ABL97\nIXKOLD   DC    AL2(4,1,1),X'01'        DISP=OLD                     CST\nIXKKEP   DC    AL2(5,1,1),X'08'        DISP=KEEP                    CST\n         SPACE 4                                                    CST\n*                                                                   CST\n*  PARMLIST FOR VTOC DEALLOCATE                                     CST\n*                                                                   CST\nAIX99RBF DC    0F'0',X'80',AL3(IX99RBFR)                            CST\nIX99RBFR DC    AL1(20,2)               LENGTH, VERB                 CST\n         DC    X'0000'                 FLAG1                        CST\n         DC    AL2(0,0)                ERROR CODE, INFO CODE        CST\n         DC    A(IX99TXT2)             @ TEXT UNITS                 CST\n         DC    2F'0'                   RSVD, FLAG2                  CST\n         SPACE 2                                                    CST\nIX99TXT2 DC    A(IXKDDN2),X'80',AL3(IXKKEP)                         CST\nIXKDDN2  DC    AL2(1,1,8),C'SYS99999'  DDNAME ASSIGNED              CST\n         PRINT GEN,NODATA                                           CST\n         SPACE 4                                                    CST\n*                                                                   CST\n*  MISC CONSTANTS AND EQUATES                                       CST\n*                                                                   CST\nCVTILK2  EQU   40                      OFFSET TO LOOKUP TABLE       CST\nCVTUCBSE EQU   1076                    ADDRESS OF UCB SCAN SERVICE  ABL\nDCBDDNAM EQU   40                      OFFSET TO DDNAME             CST\n         SPACE 2                                                    CST\n*                                                                   CST\n*  DCB AND JFCB FOR VTOC                                            CST\n*                                                                   CST\nIXLST    DC    0F'0',X'87',AL3(IXJFCB)                              CST\nIXJFCB   DC    XL176'00'                                            CST\n         PRINT NOGEN                                                CST\nIXDCB    DCB   DSORG=PS,MACRF=(E),EXLST=IXLST,DDNAME=NONE           CST\n         PRINT GEN                                                  CST\n         SPACE 4                                                    CST\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*              FREE STORAGE, SET RETURN CODE, AND RETURN              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   IKJRLSA DVOLANS                RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    $$EXIT2                 SKIP CLOSE HARDCOPY NOT OPEN\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\n$$EXIT2  DS    0H\n         LH    R15,TOTAL                SAVE 5 LARGEST EXTENTS TOTAL\nRETURN2  $RTRN RC=(R15),RENT=DSECTLEN   RETURN\n         TITLE 'DISPLAY OUTPUT SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*              DISPLAY OUTPUT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     LH    R3,0(R15)                LOAD DATA LENGTH\n         BCTR  R3,0                     BRANCH ON COUNT\n         EX    R3,MOVELINE              MOVE DATA TO OUTPUT LINE\n         CLC   NOPRINT,=H'2'            SEE IF OUTPUT SUPPRESSED\n         BE    PUTLHPDS\n         PUTLINE OUTPUT=(DVOLHEDR,,,DATA),MF=(E,DVOLIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            OUTPUT LINE\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY          SEE IF HARCOPY WANTED\n         BZ    PUTLBACK                 NO, SO GO ON BACK\n         PUT   HARDCPY,OUTLINE          WRITE OUTPUT LINE\n         MVC   OUTLINE,BLANKS           CLEAR OUTPUT LINE\nPUTLBACK BR    R2\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                        EXIT\n         TITLE 'CONSTANT DATA AREAS'\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANT STORAGE                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nFMT4BAD  #TSOMSG 'ERROR READING FORMAT 4 DSCB',LENGTH=80\n         SPACE\nFMT5BAD  #TSOMSG 'ERROR READING FORMAT 5 DSCB',LENGTH=80\n         SPACE\nVOLFULL  #TSOMSG 'VOLUME CONTAINS NO FREE SPACE',LENGTH=80\n         SPACE\nPARSERR  #TSOMSG 'UNABLE TO INTERPRET COMMAND',LENGTH=80\n         SPACE\nDOS      #TSOMSG '*** WARNING - VOLUME MAY CONTAIN DOS DATA SETS',     +\n               LENGTH=80\n         SPACE\nUNITTBL  DC      C'??????????????????????  9345????????'\n         DC      C'2305-12305-22314  3330  3340  3350  '\n         DC      C'3375  3330-13380  3390  '\n         SPACE\nDAMAGED  #TSOMSG '*** WARNING - VTOC DAMAGE BIT IS SET.  PLEASE NOTIFY +\n               YOUR SYSTEMS PROGRAMMER',LENGTH=80\n         SPACE\nSHORT1   #TSOMSG 'SERIAL  --UNIT--   ATTRIBUTES VSAM AVAIL -----TOTALS-+\n               ---- LARGEST-EXTENT 5 EXTS',LENGTH=80\nSHORT2   #TSOMSG '       ADDR TYPE   MOUNT/USE      DSCBS TRACKS  EXT  +\n               CYL  CYL+TR  TRACKS TRACKS',LENGTH=80\n         SPACE\nBLANKLIN #TSOMSG ' ',LENGTH=80\nBADOPEN  #TSOMSG   'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED', +\n               LENGTH=80\n         SPACE\nFLAGS2   DS    X                         HARDCOPY OPTION SWITCH\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n*                     XXX. XXXX          NOT USED\n         SPACE\nDSNAME   DC    44X'04'\n         EJECT\n***********************************************************************\n*                                                                     *\n*              PUTLINE, CAMLST, AND MESSAGE MODELS                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSHORTMDL #TSOMSG ' ',LENGTH=80\nSHORTLEN EQU   *-SHORTMDL\n         SPACE 2\nMODELS1  PUTLINE MF=L\n         CAMLST SEARCH,*-*,*-*,*-*\n         CAMLST SEEK,*-*,*-*,*-*\nMODLEN1  EQU   *-MODELS1\n         SPACE 2\nMODELS2  #TSOMSG 'VOLUME SERIAL = XXXXXX     UNIT = XXX     TYPE = XXXX+\n               XX',LENGTH=80\n         #TSOMSG 'STATUS: REMOVABLE           UNALLOCATED  OFFLINE',   +\n               LENGTH=80\n         SPACE\n         #TSOMSG 'VSAM: OWNERSHIP - OFF   TIMESTAMPS - ................+\n               /................',LENGTH=80\n         SPACE\nMODLEN2  EQU   *-MODELS2\n         SPACE 2\nMODELS3  #TSOMSG 'FREE SPACE IS XXXXX TRACKS IN XXXX EXTENTS INCLUDING +\n               XXXX FULL CYLINDERS',LENGTH=80\n         SPACE\n         #TSOMSG 'LARGEST EXTENTS ARE: /CYL+TR/',LENGTH=80\n         SPACE\n         #TSOMSG '                     /TRACKS/',LENGTH=80\n         SPACE\nMODLEN3  EQU   *-MODELS3\n         SPACE 2\nMODELS4  #TSOMSG 'VTOC CONTAINS XXXX BLANK DSCB''S',LENGTH=80\n         SPACE\n         #TSOMSG 'XXXXXX - VOLUME OR UCB NOT FOUND',LENGTH=80\n         SPACE 1\n         #TSOMSG 'INDEXED VTOC CONTAINS XXXX FREE VIR''S',LENGTH=80\n         SPACE\nMODLEN4  EQU   *-MODELS4\n         EJECT\n***********************************************************************\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n***********************************************************************\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         EJECT\n***********************************************************************\n*                                                                     *\n*              INSTRUCTIONS TO BE EXECUTED BY EXECUTE INSTRUCTIONS    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nMOVENAME MVC   0(0,R2),0(R4)            MOVE HARDCOPY DDNAME\nMOVELINE MVC   DVOLHEDR(0),0(R15)       MOVE PRINT TO OUTPUT LINE\nMOVESER  MVC   DVOLSER(0),0(R3)         COPY VOLUME SERIAL\nMOVEXTNT MVC   LARGE5(0),LARGE5+10      COPY EXTENT ENTRIES\nFMT5ADDR LA    R6,DS5EXT01              LOAD EXTENT DESCRIPTION ADDRESS\n         LA    R6,DS5EXT02\n         LA    R6,DS5EXT03\n         LA    R6,DS5EXT04\n         LA    R6,DS5EXT05\n         LA    R6,DS5EXT06\n         LA    R6,DS5EXT07\n         LA    R6,DS5EXT08\n         LA    R6,DS5EXT09\n         LA    R6,DS5EXT10\n         LA    R6,DS5EXT11\n         LA    R6,DS5EXT12\n         LA    R6,DS5EXT13\n         LA    R6,DS5EXT14\n         LA    R6,DS5EXT15\n         LA    R6,DS5EXT16\n         LA    R6,DS5EXT17\n         LA    R6,DS5EXT18\n         LA    R6,DS5EXT19\n         LA    R6,DS5EXT20\n         LA    R6,DS5EXT21\n         LA    R6,DS5EXT22\n         LA    R6,DS5EXT23\n         LA    R6,DS5EXT24\n         LA    R6,DS5EXT25\n         LA    R6,DS5EXT26\n*\nFMT7ADDR LA    R6,DS7EXTNT              LOAD EXTENT DESCRIPTION ADDRESS\n         LA    R6,DS7EXTNT+8\n         LA    R6,DS7EXTNT+16\n         LA    R6,DS7EXTNT+24\n         LA    R6,DS7EXTNT+32\n         LA    R6,DS7ADEXT\n         LA    R6,DS7ADEXT+8\n         LA    R6,DS7ADEXT+16\n         LA    R6,DS7ADEXT+24\n         LA    R6,DS7ADEXT+32\n         LA    R6,DS7ADEXT+40\n         LA    R6,DS7ADEXT+48\n         LA    R6,DS7ADEXT+56\n         LA    R6,DS7ADEXT+64\n         LA    R6,DS7ADEXT+72\n         LA    R6,DS7ADEXT+80\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*              PARSE CONTROL BLOCKS                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDVOLPCL  IKJPARM DSECT=DVOLPDL\nVOL      IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               LIST,                                                   +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               DEFAULT='*'\nOUTFORM  IKJKEYWD DEFAULT='SHORT'\n         IKJNAME  'SHORT'\n         IKJNAME  'LONG'\nNOHEADER IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nNOPRINT  IKJKEYWD\n         IKJNAME  'PRINT'\n         IKJNAME  'NOPRINT'\nSERONLY  IKJKEYWD\n         IKJNAME  'SERONLY',INSERT='NOHEADER'\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\n         IKJENDP\n         TITLE 'UCB MAP'\n***********************************************************************\n*                                                                     *\n*              UCB MAP                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         PRINT NOGEN\nUCB      DSECT\n         IEFUCBOB\n         PRINT GEN\n         SPACE 3\n         AIF  ('&OPSYSTM' EQ 'MVS112').MVSEQU\n         AIF  ('&OPSYSTM' EQ 'MVS113').MVSEQU\nDVOLFLGA EQU  UCBFL1\nDVOLFLGB EQU  UCBFL5\nDVOLNRDY EQU  UCBNOTRD\n         AGO  .WORK\n.MVSEQU  ANOP\nDVOLFLGA EQU  UCBFLA\nDVOLFLGB EQU  UCBFLC\nDVOLNRDY EQU  UCBNRY\n.WORK    ANOP\n         TITLE 'WORK AREA'\n***********************************************************************\n*                                                                     *\n*                       WORK AREA DSECT                               *\n*                                                                     *\n***********************************************************************\nDVOLDS   DSECT\nSAVEAREA DC    18F'0'\nWORKAREA DS    XL16\nDVOLDEC  DS    D\nEDITFLD  DC    X'4020202020202120'\nSERPTR   DS    A                        ADDRESS OF SERIAL FIELD\nMODLINE  DC    H'84,0'\nBLANKS   DC    CL80' '\nVTOCFMT4 DS    0D,148C\nVTOCFMT5 EQU   VTOCFMT4\nVTOCFMT7 EQU   VTOCFMT4\nDVOLCCHH DS    XL5\nDVOLHEDR DS    H,H\nOUTLINE  DS    CL80\nVTOCINDS DS    X\nFOUNDONE DS    X\nMTDSCBS  DS    H\nSTARTC   DS    F                  STARTING TRACK\nSTARTT   DS    F                  STARTING CYLINDER\nTOTALC   DS    F                  TOTAL CYLINDERS\nTOTALT   DS    F                  TOTAL TRACKS\nLARGE5   DS    XL50\nHALF     DS    H\nTRKPRCYL DS    H\nTOTAL    DS    H\nUCBADDR  DS    A\nUCBTABLE DS    A\nUCBNEXT  DS    A\nUCBPARMS DS    4A             PARMS FOR UCB SCAN SERVICES       ABL-410\nUCBANSR  DS    A\nUCBTEXT  DS    A              UCB FOUR CHARACTER NAME             ABL97\n         DS    0D\nUCBWORK  DS    CL216          UCB SCAN WORK AREA                ABL-410\n         DS    0D\nPDSMSGA  DC    F'0'\nDVOLECB  DC    F'0'\n         SPACE\nDVOLPPL  DS    0F\n         ORG   *+PPLLEN\n         SPACE\nDVOLIOPL DS    0F\n         ORG   *+IOPLLEN\n         SPACE\nDVOLANS  DS    A\n         SPACE\nDVOLPTPB PUTLINE MF=L\n         SPACE\nDVOLDCB4 CAMLST SEARCH,0,0,0\n         SPACE\nDVOLDCB5 CAMLST SEEK,0,0,0\n         SPACE\nLINE1    #TSOMSG ' ',LENGTH=80\n         SPACE\nLINE2    #TSOMSG ' ',LENGTH=80\n         SPACE\nLINE3    #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG1 #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG2 #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG3 #TSOMSG ' ',LENGTH=80\n         SPACE\nBLDSCBS  #TSOMSG ' ',LENGTH=80\n         SPACE\nNOSER    #TSOMSG ' ',LENGTH=80\n         SPACE\nBLDSVIR  #TSOMSG ' ',LENGTH=80\n         SPACE 2\nSHORTLIN #TSOMSG ' ',LENGTH=80\n         SPACE\nADDRDCE  DS    A              UCB DCE POINTER                   ABL-410\nSRVUCBDC DS    CL128          UCB SAVE AREA FOR UCB DCE AREA    ABL-410\nSRVUCBUC DS    CL48           UCB SAVE AREA FOR UCB COPY AREA   ABL-410\nSRVUCBIC DS    CL48           UCB SAVE AREA FOR UCB TOKEN       ABL-410\nDSECTLEN EQU   *-DVOLDS\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              OUTPUT LINE EQUIVALENCES                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG    LINE1\n         DC    H'84,0',C'VOLUME SERIAL = '\nDVOLSER  DC    CL6'XXXXXX'\n         DC    C'     UNIT = '\nUNITADDR DC    CL4'XXXX'                                          ABL97\n         DC    C'    TYPE = '                                     ABL97\nUNITTYPE DC    CL6'XXXXXX'\n         SPACE\n         ORG   LINE2\n         DC    H'84,0',C'STATUS: '\nMNTSTAT  DC    CL9'REMOVABLE'\n         DC    CL2' '\nUSESTATS DC    CL7'XXXXXXX'\n         DC    CL2' '\nALLOCATD DC    CL11'XXXXXXXXXXX'\n         DC    CL2' '\nONOFF    DC    CL17'OFFLINE'\n         DC    CL2' '\nUNLOAD   DC    CL17'XXXXXXXXXXXXXX'\n         SPACE\n         ORG   LINE3\n         DC    H'84,0',C'VSAM: OWNERSHIP - '\nOWNERSHP DC    CL3'OFF'\n         DC    C'   TIMESTAMPS - '\nTIMEST1  DC    CL16' '\n         DC    C'/'\nTIMEST2  DC    CL16' '\n         ORG   FREEMSG1\n         DC    H'84,0',C'FREE SPACE IS'\nTRACKS   DC    CL6' XXXXX'\n         DC    C' TRACKS IN'\nEXTENTS  DC    CL5' XXXX'\n         DC    C' EXTENTS INCLUDING'\nCYLS     DC    CL5' XXXX'\n         DC    C' FULL CYLINDERS'\n         SPACE\n         ORG   FREEMSG2\n         DC    H'84,0',C'LARGEST EXTENTS ARE: / CYL+TR/'\nLRGXTNT1 EQU   *\n         SPACE\n         ORG   FREEMSG3\n         DC    H'84,0',C'                     / TRACKS/'\nLRGXTNT2 EQU   *\n         SPACE\n         ORG   BLDSCBS\n         DC    H'84,0',C'VTOC CONTAINS'\nDSCBS    DC    CL5' XXXX'\n         DC    C'BLANK DSCB''S'\n         DC    CL48' '\n         SPACE\n         ORG   NOSER\n         DC    H'84,0'\nVOLSER   DC    CL6'XXXXXX'\n         DC    C' - VOLUME OR UCB NOT FOUND'\n         DC    CL48' '\n         SPACE\n         ORG   BLDSVIR\n         DC    H'84,0',C'INDEXED VTOC CONTAINS'\nDSCBVIR  DC    CL5' XXXX'\n         DC    C'FREE VIR''S'\n         DC    CL42' '\n         SPACE 2\n         ORG   SHORTLIN\n         DS    H,H\nSHORTSER DS    CL6\n         DS    CL1\nSHORTUNT DS    CL4                                                ABL97\n         DS    CL1\nSHORTTYP DS    CL6\n         DS    CL1\nSHORTMNT DS    CL6\nSHORTSLA DS    CL1\nSHORTUSE DS    CL4\n         DS    CL1\nSHORTVSM DS    CL2                                                ABL97\n         DS    CL1\nSHORTDCB DS    CL5\n         DS    CL1\nSHORTTOT DS    CL6\nSHORTEXT DS    CL5\nSHORTCYL DS    CL5\nSHORT1CL DS    CL5\n         DC    C'+'\nSHORT1TR DS    CL2\n         DS    CL1\nSHORTLRG DS    CL6\n         DS    CL1\nSHORT5XT DS    CL6\n         TITLE 'FORMAT 4 DSCB MAP'\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 4 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT4-44\n         #VTCFMT4\n         TITLE 'FORMAT 5 DSCB MAP'\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 5 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT5\n         #VTCFMT5\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 7 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT7\n         #VTCFMT7\n         CVT   DSECT=YES\n         END\n//*\n//ASM2  EXEC  PGM=ASMA90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,\n//             'XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&Y,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n         TITLE 'IXTOFMT5 -- INDEXED VTOC FORMAT-5 INTERFACE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* 05/25/94  ADDED SUPPORT FOR 3390M9 DISK DEVICES BY MODIFYING    ABL *\n*           THE IXTOFMT5 ROUTINE TO RETURN FORMAT 7 DSCB RECORDS  ABL *\n*           (INSTEAD OF FORMAT 5) IF &MODEL9 IS 'YES'.            ABL *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         MACRO\n         #VTCFMT7\n         MNOTE *,'       #VTCFMT7                                  ABL'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT7                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 7 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 7 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 7 DSCB DESCRIBES VOLUME FREE SPACE.      *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT7                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT7DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT7                                 *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\nDS7KEYID DS    XL4                     KEY X'07070707'\nDS7EXTNT DS    5XL8                    SPACE FOR 5 EXTENT DESCRIPTIONS\nDS7FMTID DS    X                       FORMAT IDENTIFIER\nDS7ADEXT DS    11XL8                   SPACE FOR 11 EXTENT DESCRIPTIONS\n         DS    XL2                     RESERVED\nDS7PTRDS DS    XL5                     POINTER TO NEXT FORMAT 7 DSCB\nDS7END   EQU   *                       END OF DSCB7\n         MEND\n         SPACE 3\n         LCLC  &MODEL9\n&MODEL9  SETC  'YES'                   3390M9 IS SUPPORTED\n*&MODEL9  SETC  'NO'                    3390M9 IS NOT SUPPORTED\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n***********************************************************************\n*\nIXTOFMT5 CSECT\n*\n*  THIS ROUTINE USES THE CVAF SERVICE ROUTINES TO CONVERT THE\n*  FREE SPACE BIT MAP OF AN INDEXED VTOC INTO PSUEDO FORMAT-5\n*  DSCBS.  THIS PROVIDES A COMPATIBILITY INTERFACE FUNCTION FOR\n*  PRE-DFDS ROUTINES WHICH EXAMINE FORMAT-5 DSCBS.\n*\n*  THIS ROUTINE IS CALLED ONCE FOR EACH FORMAT-5 WHICH MUST BE\n*  BUILT.  THE INDEX RECORD BUFFER RETURNED BY CVAF IS SAVED SO\n*  THAT NO ADDITIONAL I/O NEED BE DONE FOR SUCCEEDING CALLS.  THE\n*  BUFFERS ARE FREED WHEN THE LAST FORMAT-5 DSCB IS RETURNED.\n*  HENCE, THIS ROUTINE SHOULD BE CALLED UNTIL A FORMAT-5 DSCB WITH\n*  DS5PTRDS EQUAL TO ZERO IS RETURNED.  THE NON-ZERO VALUE IN\n*  DS5PTRDS WILL ALWAYS BE C'00001'.  NO ENQUEUE ON THE VTOC IS\n*  PERFORMED.\n*\n*  INPUT:    R1 -->  (PARMLIST)\n*                    A(WORD) -- ADDR OF A FULLWORD USED BY THIS\n*                               ROUTINE.  MUST BE ZEROED FOR FIRST\n*                               CALL AND RETURNED UNALTERED THEREAFTER.\n*                    A(DCB)  -- ADDR OF A DCB OPENED TO THE DESIRED\n*                               VTOC.  NO I/O MAY BE OUTSTANDING TO\n*                               THIS DCB.  AN APF-AUTHORIZED CALLER\n*                               MAY PASS A COMPLIMENTED UCB ADDRESS\n*                               INSTEAD.\n*                    A(COUNT1)- ADDR OF FULLWORD WHERE COUNT OF THE\n*                               FREE (FMT 0) DSCBS WILL BE RETURNED.\n*                    A(COUNT2)- ADDR OF FULLWORD WHERE COUNT OF THE\n*                               FREE VIRS WILL BE RETURNED.\n*                    A(FMT5) -- ADDR OF 140-BYTE AREA FOR FORMAT-5\n*                               DSCB BUILT BY THIS ROUTINE.\n*\n*  RETURN CODES:\n*            R15  = 0   ALL OK.\n*            R15  = 4   VTOC IS NOT IN INDEXED FORMAT.\n*            R15  = 8   CVAFTST CALL FAILED (OTHER THAN NOT INDEXED\n*                       FORMAT VTOC).  CVAFTST RC IN REG 0.\n*            R15  = 12  CVAFDSM CALL FAILED (OTHER THAN NON INDEXED\n*                       FORMAT VTOC).  CVAFDSM RC IN HIGH ORDER BYTE\n*                       OF R0. CVSTAT IN LOW ORDER BYTE OF R0.\n*            R15  = 16  (UNUSED)\n*            R15  = 20  LOGIC ERROR IN THIS ROUTINE.  R0 = OFFSET.\n*\n*\n*  ATTRIBUTES -  REENTRANT, PROBLEM STATE, PROBLEM KEY.\n*                THIS ROUTINE WILL WORK CORRECTLY ON A NON DFDS\n*                SYSTEM.  HOWEVER, DFDS MACROS ARE REQUIRED FOR\n*                ASSEMBLY.\n*\n*  WRITTEN BY: CHRIS THOMAS, UCLA/OAC SYSTEMS GROUP, 5/30/81\n*\n***********************************************************************\n         TITLE 'IXTOFMT5 -- MAINLINE ROUTINE'\n*\n*  INITIALIZATION\n*\n         SAVE  (14,12),,IXTOFMT5-VERSION_1.0   SAVE REGS\n         LR    R12,R15            ESTABLISH BASE\n         USING IXTOFMT5,R12\n         LR    R9,R13             SAVE CALLER'S R13\n         LR    R11,R1             SAVE CALLER'S PARM POINTER\n         USING PARMLIST,R11\n         L     R1,PARMWORD        POINT TO ANCHOR WORD\n         ICM   R13,B'1111',0(R1)  GET MY WORKAREA ANCHOR\n         BNZ   SKIPGET            IF NON-ZERO, CALL FOR NEXT FMT5\n*\n*  GET WORKAREA AT FIRST CALL\n*\n         GETMAIN  RU,LV=WORKLEN,SP=0\n         LR    R13,R1             ESTABLISH WORKAREA\n         USING WORKAREA,R13\n         L     R1,PARMWORD        ADDR OF ANCHOR\n         ST    R13,0(,R1)         SAVE FOR SUBSEQUENT CALLS\n         LR    R0,R13             ADDR FOR MVCL\n         LA    R1,WORKLEN         LENGTH FOR MVCL\n         SR    R3,R3              ZERO FILL BYTE\n         MVCL  R0,R2              ZERO WORKAREA\n*\n*  CHAIN SAVEAREAS\n*\nSKIPGET  ST    R9,SAVEAREA+4      SAVE CALLER'S R13\n         ST    R13,8(,R9)         FORWARD CHAIN\n         NC    SAVEEXT,SAVEEXT    CALL FOR FIRST FMT5?\n         BNZ   GETNEXT5           NO. RETURN NEXT FMT5\n*\n*  DETERMINE IF THIS IS A DCB FOR DASD WITH INDEXED VTOC\n*\nTST      L     R2,PARMDCB         POINT TO PASSED DCB\n         LCR   R3,R2              MAYBE UCB INSTEAD\n         BNM   UCBPASS            TREAT MINUS AS UCB\n         L     R2,DCBDEBAD-IHADCB(,R2)   GET DEB FROM DCB PASSED\n         ST    R2,DEBADDR         SAVE FOR LATER (ZERO IF UCB)\n         ICM   R3,B'0111',(DEBUCBA-DEBDASD)+(DEBBASND-DEBBASIC)(R2)    *\n                                  GET UCB ADDR FROM DEB\n         B     TESTIT             LEAVE UCB ZERO IF DEB PASSED\nUCBPASS  ST    R3,UCBADDR\nTESTIT   CVAFTST  UCB=(R3)\n         B     *+4(R15)\n         B     UNINDXD            RC = 0   DFDS NOT ON SYSTEM\n         B     UNINDXD            RC = 4   VOL IS NOT INDEXED\n         B     GOODIX             RC = 8   INDEXED. ALL OK.\n         B     TSTERROR           RC = 12  NO VOL MOUNTED, ETC.\n         B     TSTERROR           RC = 16  BAD UCB (NOT DASD, ETC)\n*\n*  CALL CVAFDSM FOR NUMBER OF FREE DSCBS\n*\nGOODIX   L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         MVC   CVPL(CVAF_DSML),CVAF_DSM\n         CVAFDSM  MF=(E,CVPL),    GET COUNT1                           *\n               ACCESS=MAPDATA,                                         *\n               MAP=VTOC,                                               *\n               COUNT=YES,                                              *\n               MAPRCDS=YES,                                            *\n               DEB=(2),                                                *\n               CTAREA=COUNT1\n         B     *+4(R15)\n         B     GOODCT1            RC = 0   SUCCESSFUL\n         B     CHECKEND           RC = 4   END OF DATA, OR ERROR  DRK\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n***********************************************************************\n*                                                                     *\n* 06/28/88  HANDLE NO FREE DSCBS CONDITION WHEN CVAFDSM PASSES    DRK *\n*           RETURN CODE = 4 AND STAT032 (END OF DATA)             DRK *\n*                                                                     *\n*                                                                 DRK\n*  IF RC=4, SEE IF ERROR OR NO FREE DSCB'S                        DRK\n*                                                                 DRK\n***********************************************************************\nCHECKEND CLI   CVSTAT,STAT032     END OF DATA?                    DRK\n         BNE   DSMERROR           NO, OTHER ERROR                 DRK\n*\n*  RETURN COUNT OF FREE DSCBS\n*\nGOODCT1  L     R1,PARMCT1         @ COUNT1\n         MVC   0(4,R1),COUNT1     RETURN COUNT1\n*\n*  SAVE INDEX BUFFERS FOR SUCCEEDING FUNCTIONS\n*\n         L     R1,CVMRCDS               GET ADDR OF BUFFERS\n         ST    R1,BUFLIST               SAVE FOR LATER\n*\n*  CALL CVAFDSM FOR NUMBER OF FREE INDEX BLOCKS (VIRS)\n*\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(CVAF_DSML),CVAF_DSM\n         CVAFDSM  MF=(E,CVPL),    GET COUNT1                           *\n               ACCESS=MAPDATA,                                         *\n               MAP=INDEX,                                              *\n               COUNT=YES,                                              *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               CTAREA=COUNT2\n         B     *+4(R15)\n         B     RETCT2             RC = 0   SUCCESSFUL\n         B     DSMERROR           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  RETURN COUNT OF FREE VIRS\n*\nRETCT2   L     R1,PARMCT2         @ COUNT2\n         MVC   0(4,R1),COUNT2     RETURN COUNT2\n         XC    SAVEEXT,SAVEEXT    BEGIN FMT5S AT THE BEGINNING\n         AIF   ('&MODEL9' EQ 'YES').YESM9\n*\n*  GET 26 FREE EXTENTS.  (ASK FOR 27 TO SIMPLIFY EOD LOGIC).\n*\nGETNEXT5 MVC   EXTS(L'DS5AVEXT),SAVEEXT  SET UP STARTING POINT\n         MVI   NUMEXTS,27\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(CVAF_DSML),CVAF_DSM\n         CVAFDSM  MF=(E,CVPL),    GET EXTENTS                          *\n               ACCESS=MAPDATA,                                         *\n               MAP=VOLUME,                                             *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               EXTENTS=EXTABL\n         B     *+4(R15)\n         B     NOERROR            RC = 0   SUCCESSFUL\n         B     CHECKEOD           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  IF RC=4, SEE IF ERROR OR END OF EXTENTS\n*\nCHECKEOD CLI   CVSTAT,STAT032     END OF DATA?\n         BNE   DSMERROR           NO, OTHER ERROR\n*\n*  USE 26 (OR FEWER) EXTENTS RETURNED TO BUILD PSUEDO FORMT-5\n*\nNOERROR  L     R10,PARMFMT5       ADDR FOR GENERATED FMT5\n         USING IECSDSF5,R10\n         MVC   DS5KEYID,F5ID      SET KEY\n         MVC   DS5AVEXT(L'DS5AVEXT+L'DS5EXTAV),EXTS  MOVE IN EXTS\n         MVI   DS5FMTID,C'5'      SET DSCB ID\n         MVC   DS5MAVET,EXTS+L'DS5AVEXT+L'DS5EXTAV MOVE REMAINING\n         XC    DS5PTRDS,DS5PTRDS  ZERO CHAIN PTR\n         NC    EXT27,EXT27        IS 27TH EXT ZERO? (1ST IN NEXT FMT5)\n         BZ    CLEANUP            GO CLEANUP. ALL DONE.\n         MVC   DS5PTRDS,NZPTR     MAKE PUSEDO CHAIN POINTER\n         MVC   SAVEEXT(5),DS5MAVET+L'DS5MAVET-L'DS5AVEXT  SAVE THE     *\n                                  LAST EXTENT FOR NEXT FORMAT 5\n         B     RETURN\n         DROP  R10\n         AGO   .NOM9A\n.YESM9   ANOP\n*\n*  GET 16 FREE EXTENTS.  (ASK FOR 17 TO SIMPLIFY EOD LOGIC).\n*\nGETNEXT5 MVC   DT2ENTRY(16),SAVEEXT      SET UP STARTING POINT\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(CVAF_DSML),CVAF_DSM\n         MVC   DT2X7EYE,=C'ICVEDT02'     IDENTIFIER FOR CONTROL BLOCK\n         MVC   DT2ENTNM,=F'17'           NUMBER OF EXTENTS TO RETRIEVE\n***   IF YOU GET ASSEMBLY ERRORS ON THE FOLLOWING MACRO, YOUR SYSTEM\n***   PROBABLY DOES NOT HAVE SUPPORT FOR 3390M9 (FAT DASD) DEVICES.\n***   YOU SHOULD CHANGE THE VALUE OF &MODEL9 AS EXPLAINED ABOVE.\n         CVAFDSM  MF=(E,CVPL),    GET EXTENTS                          *\n               ACCESS=MAPDATA,                                         *\n               MAP=VOLUME,                                             *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               RTA4BYTE=YES,                                           *\n               EXTENTS=RTATBL\n         B     *+4(R15)\n         B     NOERROR            RC = 0   SUCCESSFUL\n         B     CHECKEOD           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  IF RC=4, SEE IF ERROR OR END OF EXTENTS\n*\nCHECKEOD CLI   CVSTAT,STAT032     END OF DATA?\n         BNE   DSMERROR           NO, OTHER ERROR\n*\n*  USE 16 (OR FEWER) EXTENTS RETURNED TO BUILD PSUEDO FORMT-7\n*\nNOERROR  L     R10,PARMFMT5       ADDR FOR GENERATED FMT5 (FMT7 NOW)\n         USING IECSDSF7,R10\n         MVC   DS7KEYID,F7ID      SET KEY\n         MVC   DS7EXTNT(5*8),DT2ENTRY  MOVE FIRST 5 EXTENTS\n         MVI   DS7FMTID,C'7'      SET DSCB ID\n         MVC   DS7ADEXT(11*8),DT2ENTRY+40  MOVE NEXT 11 EXTENTS\n         XC    DS7PTRDS,DS7PTRDS  ZERO CHAIN PTR\n         MVC   SAVEEXT(16),DT2ENTRY+16*8-8     LAST FREE EXTENT USED\n         NC    DT2ENTRY+16*8(4),DT2ENTRY+16*8  NEXT FREE EXTENT ZERO?\n         BZ    CLEANUP                         YES, ALL DONE\n         CLI   CVSTAT,STAT032     END OF DATA?\n         BE    CLEANUP            YES, TERMINATE CVAF\n         MVC   DS7PTRDS,NZPTR     MAKE PSUEDO CHAIN POINTER\n         B     RETURN\n         DROP  R10\n.NOM9A   ANOP\n*\n*  RELEASE BUFFERS FOR INDEX RECORDS AFTER LAST USE\n*\nCLEANUP  L     R2,DEBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(CVAF_DIRL),CVAF_DIR\n         CVAFDIR  MF=(E,CVPL),    FREEMAIN CVAF BUFFERS                *\n               ACCESS=RLSE,                                            *\n               DEB=(2),                                                *\n               MAPRCDS=(NO,(3))\n         LTR   R15,R15            ERROR?\n         BZ    FREEWORK           GOOD. SHOULD ALWAYS WORK.\n         BAL   R14,LOGICERR       BAD. DIE.\n*\n*  FREE GOTTEN  WORKAREA          OR DFDS NOT INSTALLED ON SYSTEM.\n*\nFREEWORK LR    R1,R13             ADDR OF WORKAREA TO BE FREED\n         L     R13,SAVEAREA+4     RELOAD CALLER'S SAVE PTR\n         FREEMAIN  RU,LV=WORKLEN,A=(1),SP=0\n         L     R1,PARMWORD        POINT TO WORKAREA ANCHOR\n         SR    R15,R15            ZERO RETCODE\n         SR    R0,R0              ZERO SUPLIMENTARY RETCODE\n         ST    R15,0(,R1)         ZERO ANCHOR WORD\n         B     EXIT2              GO LEAVE\n         TITLE 'IXTOFMT5 -- TERMINATION ROUTINES'\n*\n*  VTOC IS NOT IN INDEXED FORMAT, OR DFDS NOT INSTALLED ON SYSTEM.\n*\nUNINDXD  SR    R0,R0              ZERO SUPLEMENTRY RETURN CODE\n         LA    R15,4              INDICATE NOT INDEXED\n         B     EXIT               COMMON EXIT\n*\n*  CVAFTST COMPLETED WITH AN ERROR\n*\nTSTERROR LR    R0,R15             SAVE CVAFTST RETURN CODE\n         LA    R15,8              INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  CVAFDSM COMPLETED WITH AN ERROR\n*\nDSMERROR LR    R0,R15             PUT CVAFDSM RETURN CODE INTO\n         SLL   R0,24              ... HIGH ORDER BYTE OF R0\n         IC    R0,CVSTAT-CVPL(R1)  ADD CVSTAT VALUE\n         LA    R15,12             INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  INTERNAL LOGIC ERROR OR INCORRECT CALL\n*\nLOGICERR LA    R1,IXTOFMT5        ADDR OF ENTRY POINT\n         SLR   R14,R1             CONVERT TO OFFSET\n         LA    R0,0(,R14)         RETURN OFFSET IN R0\n         LA    R15,20             INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  NORMAL CONDITIONS\n*\nRETURN   SR    R0,R0              ZERO SUPLEMENTARY RETURN CODE\n         SR    R15,R15            ZERO PRIMARY RETURN CODE\n         B     EXIT               COMMON EXIT\n         SPACE 4\n*\n*  COMMON EXIT ROUTINE\n*\nEXIT     L     R13,SAVEAREA+4     RESTORE CALLER'S SAVE PRT\nEXIT2    L     R14,12(,R13)       RESTORE R14\n         LM    R1,R12,24(R13)     RESTORE R1 THRU R12 (R15,R0 SET)\n         BR    R14                RETURN\n         TITLE 'IXTOFMT5 -- CONSTANTS'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 4\n*\n*  CONSTANTS\n*\nF5ID     DC    XL4'05050505'      FMT5 KEY\nF7ID     DC    XL4'07070707'      FMT7 KEY\nNZPTR    DC    C'00001'           CHAR INSURES INVALID DASD ADDR\n*\nCVAF_DIR  CVAFDIR MF=L\nCVAF_DIRL EQU     *-CVAF_DIR\n*\nCVAF_DSM  CVAFDSM  MF=L\nCVAF_DSML EQU     *-CVAF_DSM\n*\n         TITLE 'IXTOFMT5 -- WORKAREA DESCT'\nWORKAREA DSECT\nSAVEAREA DC    18F'0'             YE OLDE SAVEAREA\nCOUNT1   DC    F'0'               FORMAT 0 DSCBS\nCOUNT2   DC    F'0'               FREE INDEX RECORDS\nBUFLIST  DC    A(0)               ADDR VIX BFRS OBTAINED BY CVAF\nDEBADDR  DC    A(0)               ADDR OF DEB PASSED IN CALLER'S DCB\nUCBADDR  DC    A(0)               ADDR OF UCB PASSED (PRIV CALLER)\nSAVEEXT  DC    XL16'00'           SAVED FORMAT 5 OR FORMAT 7 EXTENTS\nEXTABL   DS    0CL(1+(27*5))      FANCY LENGTH\nNUMEXTS  DC    AL1(27)            NR OF EXTENTS REQUESTED\nEXTS     DC    CL(27*5)' '        27 5-BYTE FREE SPACE EXTENTS\n         ORG   *-5\nEXT27    DC    CL5' '             GIVE LAST ONE A NAME\nRTATBL   DS    0F\n         AIF   ('&MODEL9' EQ 'NO').NOM9B\n         ICVEDT02 DSECT=NO        MAP THE DSECT FOR THE RTA TABLE\nWORKAREA DSECT\n.NOM9B   ANOP\n         ORG\n         SPACE 4\nCVPL     ICVAFPL  DSECT=NO,CVPLX=YES\n         ORG   CVPL\n         DS    CL(CVAF_DSML)\n         ORG   CVPL\n         DS    CL(CVAF_DIRL)\n         ORG\n         SPACE 4\nWORKLEN  EQU   *-WORKAREA\n         EJECT\n         DSECT\n         IECSDSL1  (5)\nIECSDSF7 DSECT\n         #VTCFMT7                                 *\n         SPACE 4\nPARMLIST DSECT\nPARMWORD DS    A                  ANCHOR FOR GETMAINED AREA\nPARMDCB  DS    A                  ADDR OF DCB FOR VTOC\nPARMCT1  DS    A                  ADDR OF #FMT 0S\nPARMCT2  DS    A                  ADDR OF #FREE VIRS\nPARMFMT5 DS    A                  ADDR OF FMT5 WORKAREA\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n         IEZDEB LIST=NO\n         PRINT GEN\n         END\n//*\n//LINK   EXEC  PGM=IEWL,PARM='MAP',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=CBT.FEB05.LOAD(DVOL)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//         DD  DSN=&&Y,DISP=(OLD,DELETE)\n//         DD  *\n  IDENTIFY DVOL('CBT FILE296')\n//*\n//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=CBT.FEB05.HELP(DVOL),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -    The DVOL command is used to display the amount of\n                 of free space on a direct access device.\n\n                 DVOL will read the format 4 and format 5 DSCB's from\n                 the VTOC of a direct access volume and display:\n                  1.  Volume name\n                  2.  Unit address\n                  3.  Mount status and device type\n                  4.  Use status\n                  5.  Number of blank DSCB's in the vtoc\n                  6.  Condition of the VTOC indicators byte\n                  7.  VSAM data fields\n                  8.  Total free space in tracks\n                  9.  Number of free extents\n                 10.  Number of free cylinders\n                 11.  Size of largest extents (up to 5) in\n                      cylinders + tracks\n                 12.  Size of largest extents (up to 5) in tracks\n\n   Return Code: The return code is set to the total number of tracks\n                in the 5 largest extents (to a maximum of 4095) for\n                the last volume displayed.\n\n                If an error condition exists on the volume, the\n                return code will be set to 0.\n\n)X SYNTAX -     DVOL  (volume-list)/*\n                      SHORT/LONG\n                      HEADER/NOHEADER\n                      PRINT/NOPRINT\n                      SERONLY\n                      HARDCOPY(DDNAME)\n\n                Required - none\n                Defaults - *  SHORT  HEADER  PRINT\n                Note: if HARDCOPY is specified, NOPRINT is the default\n)O OPERANDS -\n  volume-list   is a list of one or more volume serials of mounted\n                direct access volumes or partial volume names.\n\n                If no volume is entered, or if an * is specified, the\n                information is displayed for each direct access volume\n                on the system.\n\n                If a volume name is entered with a U followed by one\n                to four digits, the data is also used as a UCB name.\n\n))SHORT         Short output form requested\n))LONG          Long output form requested\n))HEADER        Header is to be displayed for SHORT form\n))NOHEADER      No header is to be displayed for SHORT form\n))PRINT         Output is to be displayed\n))NOPRINT       No output is to be displayed\n))SERONLY       Only a list of mounted volume serials will be displayed\n))HARDCOPY      Specifies the DDNAME a pre-allocated data set to\n                receive a copy of DVOL output.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DVOLP": {"ttr": 26884, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00\\x00\\x00\\x90\\x08\\x0f\\x01\\x01\\x14?\\x11(\\r\\xdc\\x0b\\x91\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "1990-03-21T00:00:00", "modifydate": "2001-05-23T11:28:00", "lines": 3548, "newlines": 2961, "modlines": 0, "user": "WSBG"}, "text": "//WSER07J  JOB ...\n//*-----------------------------------------------------------------*\n//*\n//*  ASM1 -- ASSEMBLES DVOL (IFOX00 CAN BE USED INSTEAD OF IEV90)\n//*  ASM2 -- ASSEMBLES IXTOFMT5 (IFOX00 CAN BE USED INSTEAD OF IEV90)\n//*  LINK -- LINKS DVOL INTO 'SYS1.CMDLIB(DVOL)'\n//*  COPY -- COPIES DVOL HELP TO 'SYS2.HELP(DVOL)'\n//*          USING IEBGENER AND SHARED ALLOCATION\n//*\n//*   THIS SOURCE CODE IS OPERATING SYSTEM DEPENDENT (MVT THROUGH ESA).\n//*   SPECIFY THE DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.\n//*\n//*   ALSO, THE CODE GENERATED DEPENDS ON WHETHER 3390M9 (FAT DASD)\n//*   DEVICES ARE SUPPORTED.  SEE THE VALUE OF &MODEL9 SELECTED BELOW.\n//*\n//ASM1  EXEC  PGM=IEV90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,NOSTMT,\n//             'XREF(SHORT),BUFSIZE(MAX)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR,DCB=BLKSIZE=23440\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*ORIGINAL SOURCE -- CBT TAPE FILE 058, VERSION 227\n*                                         MVT\n*                                         SVS (OS/VS2 RELEASE 1)\n*                                         MVS (OS/VS2 RELEASE 3)\n         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              SYSTEMS & PROGRAMMING DEPARTMENT                       *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n* INSTALLATION INSTRUCTIONS                                           *\n*                                                                     *\n*     THIS MODULE MAY BE ASSEMBLED AND LINKED INTO A LIBRARY IN THE   *\n*     LINK LIST OR SPECIFIED AS A STEPLIB IN THE TSO LOGON PROCEDURE. *\n*     THE COMMAND MAY BE INVOKED FROM TSO BY ENTERING THE NAME OR AN  *\n*     ALIAS OF THE MODULE.                                            *\n*                                                                     *\n*     BEFORE ASSEMBLING THE MODULE, INSURE THAT ALL THE REQUIRED      *\n*     MACROS ARE AVAILABLE.  SOME MACROS FROM SYS1.AMODGEN MAY BE     *\n*     REQUIRED.  THE $ENTER MACRO USES SYSTEM VARIABLE SYMBOLS        *\n*     &SYSDATE AND &SYSTIME.  THESE SYMBOLS ARE NOT SUPPORTED BY ALL  *\n*     ASSEMBLERS.  IF THE ASSEMBLER TO BE USED DOES NOT SUPPORT THESE *\n*     SYMBOLS, THE $ENTER MACRO MUST BE MODIFIED.                     *\n*                                                                     *\n*     THE SOURCE PROVIDED IS OPERATING SYSTEM DEPENDENT.  SPECIFY THE *\n*     DESIRED OPERATING SYSTEM AS THE VALUE FOR &OPSYSTM.             *\n*                                                                     *\n*     ALSO, THE CODE GENERATED DEPENDS ON WHETHER 3390M9 (FAT DASD)   *\n*     DEVICES ARE SUPPORTED.  SEE THE VALUE OF &MODEL9 SELECTED BELOW.*\n*                                                                     *\n*     THE MODULE IS NOT REENTRANT ANYMORE                             *\n*                                                                     *\n***********************************************************************\nDVOL     TITLE 'DISPLAY VTOC CHARACTERISTICS'\n***********************************************************************\n*                                                                     *\n* DVOL                                                                *\n*                                                                     *\n* FUNCTION         THE DVOL COMMAND IS USED TO DISPLAY THE AMOUNT OF  *\n*                  OF FREE SPACE ON A DIRECT ACCESS DEVICE.           *\n*                                                                     *\n* DESCRIPTION      DVOL WILL READ THE FORMAT 4 AND FORMAT 5 DSCB'S    *\n*                  FROM THE VTOC OF A DIRECT ACCESS VOLUME AND        *\n*                  DISPLAY:                                           *\n*                   1.  VOLUME SERIAL                                 *\n*                   2.  UNIT ADDRESS                                  *\n*                   3.  MOUNT STATUS                                  *\n*                   4.  USE STATUS                                    *\n*                   5.  NUMBER OF BLANK DSCB'S IN THE VTOC            *\n*                   6.  CONDITION OF THE VTOC INDICATORS BYTE         *\n*                   7.  VSAM DATA FIELDS                              *\n*                   8.  TOTAL FREE SPACE IN TRACKS                    *\n*                   9.  NUMBER OF FREE EXTENTS                        *\n*                  10.  NUMBER OF FREE CYLINDERS                      *\n*                  11.  SIZE OF LARGEST EXTENTS (UP TO 5) IN          *\n*                       CYLINDERS + TRACKS                            *\n*                  12.  SIZE OF LARGEST EXTENTS (UP TO 5) IN TRACKS   *\n*                                                                     *\n*                  THE RETURN CODE IS SET TO THE TOTAL NUMBER OF      *\n*                  TRACKS IN THE LARGEST EXTENTS (UP TO 5) UP TO A    *\n*                  MAXIMUM OF 4095.  IF THE NUMBER OF FREE TRACKS     *\n*                  EXCEEDS 4095, THE RETURN CODE WILL BE SET TO 4095. *\n*                  IF MORE THAN ONE VOLUME IS DISPLAYED, THE RETURN   *\n*                  CODE WILL BE REFER TO THE SPACE ON THE LAST        *\n*                  VOLUME.  IF AN ERROR CONDITION EXISTS ON THE       *\n*                  VOLUME, THE RETURN CODE WILL BE SET TO 0.          *\n*                                                                     *\n*                  NOTE - IF AN ERROR CONDITION EXISTS ON THE VOLUME, *\n*                         THE RETURN CODE WILL BE SET TO 0.           *\n*                                                                     *\n* ATTRIBUTES       DVOL IS RE-ENTRANT.                                *\n*                                                                     *\n* SYNTAX           DVOL  (VOLUME-LIST)/*                              *\n*                        SHORT/LONG                                   *\n*                        HEADER/NOHEADER                              *\n*                        PRINT/NOPRINT                                *\n*                        SERONLY                                      *\n*                                                                     *\n*                  REQUIRED - NONE                                    *\n*                  DEFAULTS - *  SHORT  HEADER  PRINT                 *\n*                                                                     *\n*                                                                     *\n* SAMPLE OUTPUT FOR: DVOL SYSBK                                       *\n*SERIAL  --UNIT--   ATTRIBUTES VSAM AVAIL -----TOTALS---- LARGEST-EXTEN\n*       ADDR TYPE   MOUNT/USE      DSCBS TRACKS  EXT  CYL  CYL+TR TRACK\n*SYSBK1 0341 3380E  RESDNT/PRIV      154  13200   39  864  861+11 12926\n*SYSBK2 155E 3390M3 RESDNT/PRIV     3746  49980    1 3332 3332+ 0 49980\n*                                                                     *\n*                                                                     *\n* SAMPLE OUTPUT FOR: DVOL STR849 LONG                                 *\n*VOLUME SERIAL = STR849     UNIT = 1538    TYPE = 3390M3              *\n*STATUS: RESIDENT   STORAGE  ALLOCATED    ONLINE                      *\n*VTOC CONTAINS 2343 BLANK DSCB'S                                      *\n*INDEXED VTOC CONTAINS   19 FREE VIR'S                                *\n*FREE SPACE IS 11541 TRACKS IN  299 EXTENTS INCLUDING  658 FULL CYLINDE\n*LARGEST EXTENTS ARE: /CYL+TR/   43+ 0/   39+ 0/   32+ 0/  19+ 5/ 16+ 0\n*                     /TRACKS/     645/     585/     480/    290/   240\n*                                                                     *\n*                                                                     *\n* OPERANDS         VOLUME-LIST                                        *\n*                       IS A LIST OF ONE OR MOVE VOLUME SERIALS OF    *\n*                       MOUNTED DIRECT ACCESS VOLUMES.                *\n*                                                                     *\n*                       IF NO VOLUME IS ENTERED, OR IF AN * IS        *\n*                       SPECIFIED, THE INFORMATION IS DISPLAYED       *\n*                       FOR EACH DIRECT ACCESS VOLUME ON THE          *\n*                       SYSTEM.                                       *\n*                                                                     *\n*                  SHORT/LONG                                         *\n*                       SPECIFIES THE OUTPUT FORMAT.                  *\n*                                                                     *\n*                       SHORT - (DEFAULT) SPECIFIES THAT A SINGLE     *\n*                               LINE OF OUTPUT IS TO BE DISPLAYED     *\n*                               FOR EACH VOLUME.                      *\n*                                                                     *\n*                               DATA WHICH IS NOT PRODUCED IF SHORT   *\n*                               IS USED -                             *\n*                                    ONLINE/OFFLINE STATUS            *\n*                                    UNLOAD PENDING                   *\n*                                    VTOC INDICATORS                  *\n*                                    VSAM TIMESTAMPS                  *\n*                                    SIZE OF SECOND TO FIFTH EXTENTS  *\n*                               THIS DATA IS PRODUCED ONLY WITH THE   *\n*                               LONG OUTPUT FORMAT.                   *\n*                                                                     *\n*                       LONG  - SPECIFIES THAT MULTIPLE LINES OF      *\n*                               DATA ARE PRODUCED FOR EACH VOLUME.    *\n*                                                                     *\n*                  HEADER/NOHEADER                                    *\n*                       SPECIFIES WHETHER OR NOT THE HEADER LINES     *\n*                       ARE TO BE DISPLAYED.  SINCE HEADERS ARE       *\n*                       PRODUCED FOR THE SHORT FORM OF OUTPUT ONLY,   *\n*                       THIS OPTION IS MEANINGLESS WHEN LONG IS       *\n*                       SPECIFIED.                                    *\n*                                                                     *\n*                  PRINT/NOPRINT                                      *\n*                       NOPRINT MAY BE USED TO SUPPRESS ALL OUTPUT    *\n*                       (INCLUDING ERROR MESSAGES).  THIS OPTION      *\n*                       MAY BE USED WHEN ONLY THE RETURN CODE IS      *\n*                       DESIRED.                                      *\n*                                                                     *\n*                  SERONLY                                            *\n*                       SPECIFIES THAT ONLY A LIST OF MOUNTED         *\n*                       VOLUME SERIALS WILL BE DISPLAYED.             *\n*                       SERONLY IS IGNORED IF A VOLUME SERIAL IS      *\n*                       SPECIFIED.                                    *\n*                                                                     *\n* SUBCOMMANDS      DVOL HAS NO SUBCOMMANDS.                           *\n*                                                                     *\n* EXAMPLE          DISPLAY FREE SPACE ON VOLUME WORK01.               *\n*                                                                     *\n*                  DVOL WORK01                                        *\n*                                                                     *\n* FPL MACROS USED BY THIS MODULE                                      *\n*                                                                     *\n*         $ENTER              ENTRY CODING                            *\n*         $RTRN               EXIT CODING                             *\n*         #TSOBLKS            CONSTRUCT TSO CONTROL BLOCKS            *\n*         #TSOMSG             CONSTRUCT MESSAGES IN PUTLINE FORMAT    *\n*         #VTCFMT4            MAP FORMAT 4 DSCB                       *\n*         #VTCFMT5            MAP FORMAT 5 DSCB                       *\n*                                                                     *\n* IBM MACROS USED BY THIS MODULE                                      *\n*                                                                     *\n*         LINK                INVOKE A SERVICE ROUTINE                *\n*         OBTAIN              READ A DSCB FROM THE VTOC               *\n*         CAMLST              CONSTRUCT OBTAIN PARAMETER LIST         *\n*         IKJIOPL             MAP INPUT/OUTPUT PARAMETER LIST         *\n*         PUTLINE             OUTPUT A LINE TO THE TERMINAL           *\n*         IKJCPPL             MAP COMMAND PROCESSOR PARAMETER LIST    *\n*         IKJPPL              MAP PARSE PARAMETER LIST                *\n*         IKJRLSA             RELEASE STORAGE OBTAINED BY PARSE       *\n*         IKJPARM             BEGIN PARSE PARAMETER CONTROL LIST      *\n*         IKJIDENT            DESCRIBE A POSITIONAL PARAMETER         *\n*         IKJENDP             END PARSE PARAMETER LIST                *\n*         IEFUCBOB     *      MAP UNIT CONTROL BLOCK                  *\n*                                                                     *\n*         MACROS DESIGNATED BY * MUST BE OBTAINED FROM THE            *\n*         SYS1.AMODGEN DISTRIBUTION LIBRARY.                          *\n*                                                                     *\n* REGISTER ASSIGNMENTS                                                *\n*                                                                     *\n*          0 - STANDARD LINKAGE                                       *\n*          1 - STANDARD LINKAGE                                       *\n*          2 - WORK                                                   *\n*          3 - WORK                                                   *\n*          4 - WORK                                                   *\n*          5 - WORK                                                   *\n*          6 - WORK                                                   *\n*          7 - WORK                                                   *\n*          8 - PDE POINTER                                            *\n*          9 - PPL/PDL BASE REGISTER                                  *\n*         10 - IOPL BASE REGISTER                                     *\n*         11 - CPPL BASE REGISTER                                     *\n*         12 - PROGRAM BASE REGISTER                                  *\n*         13 - SAVE AREA ADDRESS AND WORK AREA DSECT BASE REGISTER    *\n*         14 - STANDARD LINKAGE                                       *\n*         15 - STANDARD LINKAGE                                       *\n*                                                                     *\n* MODULE ATTRIBUTES                                                   *\n*                                                                     *\n*         ENABLED, NON-PRIVELEGED                                     *\n*                                                                     *\n*                                                 9/76 GORDON P. WEST *\n***********************************************************************\n         TITLE 'UPDATE LOG'\n***********************************************************************\n*                                                                     *\n* 01/20/77  ADD SHORT FORM OF OUTPUT AND MAKE SHORT FORM DEFAULT      *\n*           ADD SHORT/LONG, HEADER/NOHEADER, AND PRINT/NOPRINT KEYWDS *\n*           ADD * SUPPORT FOR VOLUME LIST AND MAKE IT DEFAULT         *\n*           ADD TEST FOR MOUNT PENDING                                *\n*                                                                     *\n* 07/15/77  ADD TESTS FOR NOT READY, OFFLINE PENDING                  *\n*           ADD SERONLY OPERAND                                       *\n*                                                                     *\n* 01/17/83  ADD PARTIAL VOLUME SERIAL NAME CHECKING               ABL *\n*           ADD U... CHECK FOR POSSIBLE PARTIAL UCB ADDRESS       ABL *\n*           ADD HEADERS BETWEEN EACH VOLUME PARAMETER'S OUTPUT    ABL *\n*           ADD FPL MACROS INLINE                                 ABL *\n*           ADD SUPPORT FOR INDEXED VTOC'S                        ABL *\n*           NOTE: THE INDEXED VTOC SUPPORT IS VIA UCLA'S          ABL *\n*                 IXTOFMT5 ROUTINE PROGRAMMED BY CHRIS THOMAS     ABL *\n*                 AND MARKED CST IN COLUMNS 67-69                 ABL *\n*                                                                     *\n*                                                                     *\n* 01/04/85  USE UCB SCAN SERVICES FROM MVS 1.1.3 OR MVS/XA        ABL *\n*           ADD DEVICE TYPE IN THE OUTPUT LINE                    ABL *\n*                                                                     *\n* 02/11/87  ADD HARDCOPY SUPPORT AS PROGRAMMED BY MICHAEL LAY     ABL *\n*           WITH THE K-MART INSURANCE GROUP IN DALLAS             ABL *\n*                                                                     *\n* 02/11/87  ADD AN PDS INTERNAL INTERFACE USING PDSCALL           ABL *\n*                                                                     *\n* 02/13/87  ADD AN DCB EXIT SO DCB INFORMATION IS NOT OVERRIDDEN  ABL *\n*           BY THE HARDCOPY DCB.                                  ABL *\n*                                                                     *\n* 03/21/90  ADDED SUPPORT FOR 3380-K AND 3390 DEVICES BY ALLOWING ABL *\n*           FOUR CHARACTERS FOR ANY CYLINDER OUTPUT FIELD.        ABL *\n*                                                                     *\n* 05/25/94  ADDED SUPPORT FOR 3390M3 AND ABOVE DEVICES BY         ABL *\n*           EXPANDING TOTAL FIELDS BY ONE ADDITIONAL CHARACTER.   ABL *\n*           NOTE THAT THIS DIGIT NORMALLY PRINTS AS BLANKS.       ABL *\n*                                                                     *\n* 05/25/94  ADDED SUPPORT FOR 3390M9 DISK DEVICES BY MODIFYING    ABL *\n*           THE IXTOFMT5 ROUTINE TO RETURN FORMAT 7 DSCB RECORDS  ABL *\n*           (INSTEAD OF FORMAT 5) IF &MODEL9 IS 'YES'.            ABL *\n*                                                                     *\n* 05/25/94  ADDED CHANGES TO INDICATE THE MODEL NUMBER FOR        ABL *\n*           SEVERAL 3380 AND 3390 DEVICES.                        ABL *\n*                                                                     *\n* 05/25/94  CHANGED THE LONG OUTPUT FORMAT TO SKIP THE VSAM       ABL *\n*           OUTPUT LINE IF VSAM OWNERSHIP IS OFF FOR A VOLUME.    ABL *\n*                                                                     *\n* 09/28/95  MODIFIED BY A. BRUCE LELAND AT SERENA INTERNATIONAL ABL-410\n*           TO USE THE UCBSCAN MACRO TO LOCATE UCB'S ON SYSTEMS ABL-410\n*           AFTER MVS/ESA 4.1.0.                                ABL-410\n*                                                                     *\n* 07/31/97  Modified by A. Bruce Leland at SERENA International   ABL97\n*           to add four character UCB support.  Note that the     ABL97\n*           short form output format was changed slightly due     ABL97\n*           to this change.  ADR for UCB became ADDR and VSAM     ABL97\n*           OFF/ON  was shortened by one column to OF/ON          ABL97\n*                                                                     *\n* 09/02/97  Modified by A. Bruce Leland at SERENA International   ABL97\n*           to correct problems on systems with only 3 digit      ABL97\n*           UCB addresses as well as 4 digit UCB addresses.       ABL97\n*                                                                     *\n***********************************************************************\n***********************************************************************\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. Bruce Leland           or         A. Bruce Leland            *\n*     SERENA International                 1247 Wavecrest             *\n*     500 Airport Blvd. 2nd Floor          Bandon, Oregon  97411      *\n*     Burlingame, CA  94010                                           *\n*     (415) 696-1800                       HOME: (541) 347-8102       *\n*     Internet: Bruce_Leland@serena.com                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         TITLE 'FPL MACROS'\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         SPACE 3\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOBLKS &DSECTS,&CPPL=,&IOPL=,&PPL=,&DAPL=,&ECB=\n         MNOTE *,'       #TSOBLKS  VERSION 002 06/06/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOBLKS                                                           *\n.*                                                                    *\n.* FUNCTION       CONSTRUCT TSO CONTROL BLOCKS REQUIRED BY TSO        *\n.*                COMMAND PROCESSORS.                                 *\n.*                                                                    *\n.* DESCRIPTION    CODE TO INITIALIZE TSO CONTROL BLOCKS IS GENERATED  *\n.*                BY THE MACRO.  DSECTS DESCRIBING THE CONTROL BLOCKS *\n.*                ARE GENERATED IF REQUESTED.  THE CONTROL BLOCKS ARE *\n.*                GENERATED USING USER SUPPLIED INFORMATION AND DATA  *\n.*                FROM THE COMMAND PROCESSOR PARAMETER LIST (CPPL).   *\n.*                                                                    *\n.*                THE CONTROL BLOCKS WHICH MAY BE GENREATED ARE:      *\n.*                                                                    *\n.*                ECB  - EVENT CONTROL BLOCK.  THE USER MUST SPECIFY  *\n.*                       THE SYMBOLIC NAME OF THE ECB.  IT WILL BE    *\n.*                       INITIALIZED TO ZERO.                         *\n.*                                                                    *\n.*                IOPL - INPUT/OUTPUT PARAMETER LIST.  THE USER MUST  *\n.*                       SPECIFY THE REGISTER TO BE USED AS THE IOPL  *\n.*                       BASE REGISTER AND THE SYMBOLIC LABEL OF THE  *\n.*                       IOPL.  HE MAY SPECIFY THE LABEL OF AN IOPB   *\n.*                       IF IT IS TO BE INCLUDED IN THE IOPL.         *\n.*                                                                    *\n.*                PPL  - PARSE PARAMETER LIST.  THE USER MUST SPECIFY *\n.*                       THE REGISTER TO BE USED AS THE PPL BASE      *\n.*                       REGISTER, THE SYMBOLIC NAME OF THE PPL,      *\n.*                       THE SYMBOLIC NAME OF THE PCL CSECT, AND THE  *\n.*                       SYMBOLIC NAME OF THE ANSWER LIST LOCATION.   *\n.*                       THE SYMBOLIC NAME OF A USER WORK AREA MAY    *\n.*                       ALSO BE SPECIFIED.                           *\n.*                                                                    *\n.*                DAPL - DYNAMIC ALLOCATION PARAMETER LIST.  THE USER *\n.*                       MUST SPECIFY THE REGISTER TO BE USED AS THE  *\n.*                       DAPL BASE REGISTER AND THE SYMBOLIC NAME     *\n.*                       OF THE DAPL.  A DAPB NAME MAY BE SPECIFIED.  *\n.*                                                                    *\n.*                THE LENGTHS OF THE CONTROL BLOCKS GENERATED WILL BE *\n.*                GIVEN BY THE LABELS IOPLLEN, PPLLEN, DAPLLEN.       *\n.*                THE USER MAY USE THESE VALUES TO ALLOCATE AREAS FOR *\n.*                THE CONTROL BLOCKS.  USE OF THESE LABELS INSURE     *\n.*                THAT THE PROPER AMOUNT OF SPACE WILL BE ALLOCATED.  *\n.*                IF THE SIZE OF THESE BLOCKS ARE CHANGED BY IBM,     *\n.*                ONLY A RE-ASSEMBLY AND LINK WILL BE NECESSARY.      *\n.*                                                                    *\n.* SYNTAX         NAME     #TSOBLKS  DSECT                            *\n.*                                   CPPL=(REG1,REG2)                 *\n.*                                   IOPL=(REG3,SYM1,SYM2,SYM3)       *\n.*                                   PPL=(REG4,SYM4,SYM5,SYM6,SYM7)   *\n.*                                   DAPL=(REG5,SYM8,SYM9,SYM10)      *\n.*                                   ECB=SYM11                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                DSECT  - INDICATES THAT DSECTS ARE TO BE GENERATED  *\n.*                         FOR THE CONTROL BLOCKS SPECIFIED.          *\n.*                                                                    *\n.*                CPPL   - COMMAND PROCESSOR PARAMETER LIST, TWO      *\n.*                         REQUIRED SUBPARAMETERS.                    *\n.*                         1. - REGISTER TO BE USED AS THE CPPL BASE  *\n.*                              REGISTER.                             *\n.*                         2. - REGISTER CONTAINING THE CPPL ADDRESS. *\n.*                                                                    *\n.*                IOPL   - INPUT/OUTPUT PARAMETER LIST, TWO REQUIRED  *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS IOPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR IOPL.            *\n.*                         3.  - SYMBOLIC LABEL OF AN IOPB (PARAMETER *\n.*                               BLOCK FOR GETLINE, PUTLINE, PUTGET,  *\n.*                               OR STACK).  THE IOPB ADDRESS MAY BE  *\n.*                               SPECIFIED IN THE GETLINE, PUTLINE,   *\n.*                               PUTGET OR STACK MACRO.               *\n.*                                                                    *\n.*                PPL    - PARSE PARAMETER LIST, FOUR REQUIRED        *\n.*                         SUBPARAMETERS AND ONE OPTIONAL             *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS PPL BASE      *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               AREA TO BE USED FOR PPL.             *\n.*                         3.  - SYMBOLIC LABEL OF PCL CSECT (NAME    *\n.*                               FIELD OF IKJPARM MACRO.              *\n.*                         4.  - SYMBOLIC LABEL OF USER ALLOCATED     *\n.*                               FULLWORD WHERE ANSWER LIST (PDL)     *\n.*                               ADDRESS WILL BE PLACED.              *\n.*                         5.  - SYMBOLIC LABEL OF USER WORK AREA.    *\n.*                                                                    *\n.*                DAPL   - DYNAMIC ALLOCATION PARAMETER LIST, TWO     *\n.*                         REQUIRED SUBPARAMETERS AND ONE OPTIONAL    *\n.*                         SUBPARAMETER.                              *\n.*                         1.  - REGISTER TO BE USED AS DAPL BASE     *\n.*                               REGISTER.                            *\n.*                         2.  - SYMBOLIC LABEL OF USER ASSIGNED AREA *\n.*                               TO BE USED FOR DAPL.                 *\n.*                         3.  - SYMBOLIC LABEL OF A DAPB.  THE DAPB  *\n.*                               ADDRESS MAY BE SUPPLIED BY THE USER  *\n.*                               BEFORE INVOKING IKJDAIR.             *\n.*                                                                    *\n.*                ECB    - EVENT CONTROL BLOCK, REQUIRED.  SYMBOLIC   *\n.*                         LABEL OF A USER ASSIGNED FULLWORD TO BE    *\n.*                         USED AS AN ECB.                            *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         THE NUMBER OF SUBPARAMETERS FOR EACH PARAMETER IS   *\n.*                CHECKED.  IF ANY PARAMETER IS SPECIFIED INCORRECTLY,*\n.*                A MESSAGE WILL BE DISPLAYED AND NO CODE OR DSECTS   *\n.*                WILL BE GENERATED.  EACH PARAMETER WILL BE CHECKED, *\n.*                EVEN IF A PRECEEDING PARAMETER WAS FOUND TO BE      *\n.*                INCORRECT.  ALL ERRORS ARE SEVERITY CODE 8.         *\n.*                                                                    *\n.* EXAMPLE        BUILD    #TSOBLKS DSECT,ECB=DSATECB,              X *\n.*                               CPPL=(R11,R1),                     X *\n.*                               IOPL=(R10,DSATIOPL,DSATPTPB),      X *\n.*                               PPL=(R9,DSATPPL,DSATPCL,DSATANS)     *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATIOPL DS    0F       ALIGNMENT                   *\n.*                         ORG   *+IOPLLEN                            *\n.*                DSATPPL  DS    0F                                   *\n.*                         ORG   *+PPLLEN                             *\n.*                DSATECB  DS    F                                    *\n.*                DSATANS  DS    A                                    *\n.*                DSATPTPB PUTLINE MF=L                               *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DSATPCL  IKJPARM DSECT=DSATPDL                      *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                IKJCPPL   IKJIOPL   IKJPPL    IKJDAPL               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &IER                     ERROR INDICTOR\n.*\n&IER     SETA  0                        INITIALIZE ERROR INDICATOR\n         AIF   (N'&CPPL EQ 2).CKIOPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKIOPL  AIF   (N'&IOPL EQ 0 OR N'&IOPL EQ 2 OR N'&IOPL EQ 3).CKPPL\n         MNOTE 8,'*** IOPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKPPL   AIF   (N'&PPL EQ 0 OR N'&PPL EQ 4 OR N'&PPL EQ 5).CKDAPL\n         MNOTE 8,'*** CPPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKDAPL  AIF   (N'&DAPL EQ 0 OR N'&DAPL EQ 2 OR N'&DAPL EQ 3).CKECB\n         MNOTE 8,'*** DAPL SUBPARAMETERS INCORRECT'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKECB   AIF   ('&ECB' NE '').CKERR\n         MNOTE 8,'*** ECB PARAMETER MISSING'\n&IER     SETA  1                        SET ERROR INDICATOR\n.CKERR   AIF   (&IER EQ 0).PARMSOK\n         MEXIT\n.PARMSOK AIF   ('&DSECTS' NE 'DSECT').USING\n         MNOTE *,' IKJCPPL'\n         IKJCPPL\n* END IKJCPPL - #TSOBLKS\n         SPACE 4\n         AIF   ('&IOPL' EQ '').IKJPPL\n         MNOTE *,' IKJIOPL'\n         IKJIOPL\n* END IKJIOPL - #TSOBLKS\nIOPLLEN  EQU   *-IOPL\n         SPACE 4\n.IKJPPL  AIF   ('&PPL' EQ '').IKJDAPL\n         MNOTE *,' IKJPPL'\n         IKJPPL\n* END IKJPPL  - #TSOBLKS\nPPLLEN   EQU   *-PPL\n         SPACE 4\n.IKJDAPL AIF   ('&DAPL' EQ '').EJECT\n         MNOTE *,' IKJDAPL'\n         IKJDAPL\n* END IKJDAPL - #TSOBLKS\nDAPLLEN  EQU   *-DAPL\n.EJECT   EJECT\n&SYSECT  CSECT                          CONTINUE USER CSECT\n.USING   ANOP\n***********************************************************************\n*                                                                     *\n*                     SET UP TSO CONTROL BLOCKS                       *\n*                                                                     *\n***********************************************************************\n&NAME    XC    &ECB.(4),&ECB            ZERO ECB\n         LR    &CPPL(1),&CPPL(2)        LOAD CPPL ADDRESS\n         USING CPPL,&CPPL(1)            DEFINE CPPL BASE REGISTER\n         AIF   ('&IOPL' EQ '').UPPL     SEE IF IOPL REQUESTED\n         LA    &IOPL(1),&IOPL(2)\n         USING IOPL,&IOPL(1)\n.UPPL    AIF   ('&PPL' EQ '').UDAPL\n         LA    &PPL(1),&PPL(2)\n         USING PPL,&PPL(1)\n.UDAPL   AIF   ('&DAPL' EQ '').SETUP\n         LA    &DAPL(1),&DAPL(2)\n         USING DAPL,&DAPL(1)\n.SETUP   ANOP\n         AIF   ('&IOPL' EQ '').BLDPPL\n*--------BUILD IOPL\n         MVC   IOPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   IOPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,IOPLECB\n         AIF   ('&IOPL(3)' EQ '').BLDPPL\n         LA    R1,&IOPL(3)              GET IOPB ADDRESS\n         ST    R1,IOPLIOPB\n.BLDPPL  AIF   ('&PPL' EQ '').BLDDAPL\n*--------BUILD PPL\n         MVC   PPLUPT(4),CPPLUPT        COPY UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT        COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,PPLECB\n         L     R1,=V(&PPL(3))           GET PCL ADDRESS\n         ST    R1,PPLPCL\n         LA    R1,&PPL(4)               GET ANSWER AREA WORD ADDRESS\n         ST    R1,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF      COPY COMMAND BUFFER ADDRESS\n         AIF   ('&PPL(5)' EQ '').BLDDAPL\n         LA    R1,&PPL(5)               GET USER WORK AREA ADDRESS\n         ST    R1,PPLUWA\n.BLDDAPL AIF   ('&DAPL' EQ '').DONE\n*--------BUILD DAPL\n         MVC   DAPLUPT(4),CPPLUPT       COPY UPT ADDRESS\n         MVC   DAPLECT(4),CPPLECT       COPY ECT ADDRESS\n         LA    R1,&ECB                  GET ECB ADDRESS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB     COPY PSCB ADDRESS\n         AIF   ('&DAPL(3)' EQ '').DONE\n         LA    R1,&DAPL(3)              GET DAPB ADDRESS\n         ST    R1,DAPLDAPB\n.DONE    MEND\n         SPACE 3\n         MACRO\n&NAME    #TSOMSG &MSG,&OFFSET=0,&LENGTH=\n         MNOTE *,'       #TSOMSG   VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #TSOMSG                                                            *\n.*                                                                    *\n.* FUNCTION        GENERATE A MESSAGE LINE IN PUTLINE FORMAT WITH     *\n.*                 LENGTH AND OFFSET HEADERS.                         *\n.*                                                                    *\n.* DESCRIPTION     THE USER SPECIFIES A MESSAGE TEST ENCLOSED IN      *\n.*                 SINGLE QUOTES.  AN OFFSET MAY ALSO BE SPECIFIED.   *\n.*                 A MESSAGE IN PUTLINE FORMAT (WITH HALFWORD HEADERS *\n.*                 CONTAINING THE TOTAL LENGTH OF HEADERS AND         *\n.*                 MESSAGE AND OFFSET) IS CREATED.  THE LENGTH OF     *\n.*                 THE MESSAGE IS ROUNDED UP TO THE NEXT FULLWORD     *\n.*                 MULTIPLE.  THE USER MAY OPTIONALLY SPECIFY THE     *\n.*                 LENGTH OF THE MESSAGE TEXT.                        *\n.*                                                                    *\n.* SYNTAX          NAME     #TSOMSG 'MESSAGE-TEXT'                    *\n.*                                  OFFSET=N                          *\n.*                                  LENGTH=N                          *\n.*                                                                    *\n.*                 MESSAGE-TEXT IS THE MESSAGE TO BE GENERATED.       *\n.*                                                                    *\n.*                 OFFSET       SPECIFIES THE VALUE OF THE OFFSET     *\n.*                              HEADER HALFWORD.  DEFAULT IS 0.       *\n.*                                                                    *\n.*                 LENGTH       SPECIFIES THE LENGTH IN BYTES OF      *\n.*                              THE MESSAGE TEXT.  THIS LENGTH DOES   *\n.*                              NOT INCLUDE THE HEADER LENGTHS.  IF   *\n.*                              LENGTH IS NOT SPECIFIED, THE LENGTH   *\n.*                              WILL BE THE LENGTH OF THE MESSAGE     *\n.*                              TEXT ROUNDED TO THE NEXT FULLWORD.    *\n.*                                                                    *\n.* ERRORS          NO ERROR MESSAGES ARE DISPLAYED.                   *\n.*                                                                    *\n.* EXAMPLE         GENERATE A TSO MESSAGE.  LENGTH IS NOT SPECIFIED,  *\n.*                 AND OFFSET IS 0.                                   *\n.*                                                                    *\n.*                 ERROR1   #TSOMSG 'NAME NOT FOUND'                  *\n.*                                                                    *\n.*                 GENERATE A DUMMY MESSAGE.  THE MESSAGE TEXT WILL   *\n.*                 BE FILLED IN BY THE PROGRAM.  THE LENGTH OF THE    *\n.*                 MESSAGE MAY BE UP TO 120 CHARACTERS.               *\n.*                                                                    *\n.*                 OUTLINE  #TSOMSG ' ',LENGTH=120                    *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                 NONE                                               *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                 NONE                                               *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &LEN,&LEN2\n.*\n         AIF   ('&LENGTH' EQ '').CALCLEN\n&LEN     SETA  &LENGTH\n         AGO   .GETLEN2\n.CALCLEN ANOP\n&LEN     SETA  K'&MSG-2\n&LEN     SETA  ((&LEN-1)/4+1)*4\n.GETLEN2 ANOP\n&LEN2    SETA  &LEN+4\n&NAME    DC    H'&LEN2,&OFFSET',CL&LEN.&MSG\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT4\n         MNOTE *,'       #VTCFMT4  VERSION 002 09/22/75  06/08/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT4                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 4 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 4 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 4 DSCB DESCRIBES THE VOLUME TABLE OF     *\n.*                  CONTENTS.                                         *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT4                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT4DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT4                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*        002   06/08/76   VSAM DATA AREAS ADDED                      *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 4 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        VTOC DESCRIPTION                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS4KEY   DS    XL44                     KEY - VTOC NAME - 44X'04'\nDS4IDFMT DS    X                        FORMAT 4 ID X'F4'\nDS4HPCHR DS    XL5                      HIGHEST ADDR OF A FORMAT 1 DSCB\nDS4DSREC DS    XL2                      NUMBER OF AVAILABLE DSCB'S\nDS4HCCHH DS    XL4                      CCHH OF NEXT AVAILABLE ALT. TRK\nDS4NOATK DS    XL2                      NUMBER OF REMAINING ALT. TRACKS\nDS4VTOCI DS    X                        VTOC INDICATORS\nDS4DOSBT EQU   X'80'  1... ....    DOS CONTAMINATION BIT.          @L6C\n*                                   ON IMPLIES F5 DSCB CHAIN IS INVALID\nDS4DVTOC EQU   X'40'  .1.. ....    IF ON, THE INDEX WAS DISABLED   @P2A\nDS4EFVLD EQU   X'20'  ..1. ....    EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  VALIDITY FLAG.  ON IMPLIES      @L6A\n*                                  EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  IS ACTIVE AND FREE-SPACE IS     @L6A\n*                                  VALID.  SEE DS4EFLVL.           @L6A\nDS4DSTKP EQU   X'10'  ...1 ....    DOS STACKED PACK                @P1C\nDS4DOCVT EQU   X'08'  .... 1...    DOS CONVERTED VTOC              @P1C\nDS4DIRF  EQU   X'04'  .... .1..    DIRF BIT                        @P1C\nDS4DICVT EQU   X'02'  .... ..1.    DIRF RECLAIMED                  @P1C\nDS4IVTOC EQU   X'01'  .... ...1    IF ON, AN INDEX HAS BEEN CREATED@P1C\n*                                     FOR THE VTOC.                @P1A\n*                                  IF DS4DOSBT IS ON, THE INDEX IS @P1A\n*                                     VALID.                       @P1A\n*                                  IF EITHER OF THESE BITS IS OFF, @P1A\n*                                    THE INDEX HAS BEEN INVALIDATED@P1A\nDS4NOEXT DS    XL1                 NUMBER OF EXTENTS IN THE VTOC\nDS4SMSFG DS    XL1                 SYSTEM MANAGED STORAGE INDICATORS   X\n                                                                   @L4A\nDS4SMSTS EQU   X'C0'  11.. ....    SYSTEM MANAGED VOLUME TEST      @L4A\nDS4SMS   EQU   X'C0'  11.. ....    SYSTEM MANAGED VOLUME           @L4A\n*              X'80'  10.. ....    RESERVED                        @L4A\nDS4SMSCV EQU   X'40'  01.. ....    SYSTEM MANAGED VOLUME IN INITIAL    X\n                                   STATUS                          @L4A\nDS4NTSMS EQU   X'00'  00.. ....    NON SYSTEM MANAGED VOLUME       @L4A\n*              X'3F'  ..11 1111    RESERVED                        @L4A\n         DS    XL1                 RESERVED                        @L4C\nDS4DEVCT DS    0XL14               DEVICE CONSTANTS\nDS4DEVSZ DS    XL4                      DEVICE SIZE\nDS4DEVTK DS    XL2                      DEVICE TRACK LENGTH\nDS4DEVZ  DS    0XL2                     KEYED RECORD OVERHEAD\nDS4DEVI  DS    X                        NON-LAST KEYED RECORD OVERHEAD\nDS4DEVL  DS    X                        LAST KEYED RECORD OVERHEAD\nDS4DEVK  DS    X                        NON-KEYED RECORD OVERHEAD DIFF.\nDS4DEVFG DS    X                        FLAG BYTE\nDS4DEVTL DS    XL2                      DEVICE TOLERANCE\nDS4DEVDT DS    X                        NUMBER OF DSCB'S PER TRACK\nDS4DEVDB DS    X                        NUMBER OF DIRECTORY BLOCKS/TRK\n*\nDS4AMTIM DS    XL8                      VSAM TIME STAMP\nDS4AMCAT DS    0XL3                     VSAM CATALOG INDICATORS\nDS4VSIND DS    X                        VSAM INDICATORS\n*              X'80'                      VOLUME OWNED BY VSAM CATALOG\nDS4VSCRA DS    XL2                      RELATIVE TRACK ADDRESS OF CRA\nDS4R2TIM DS    XL8                      VSAM VOLUME/CATALOG MATCH TIME\n         DS    XL5                      RESERVED\nDS4F6PTR DS    XL5                      POINTER TO FIRST FORMAT 6 DSCB\nDS4VTOCE DS    XL10                     VTOC EXTENT DESCRIPTION\n         DS    XL10                RESERVED                        @L6C\nDS4EFLVL DS    CL1                 EXTENDED FREE-SPACE MANAGEMENT  @L6A\n*                                  LEVEL.                          @L6A\n*                                  X'00' MEANS EXTENDED FREE-      @L6A\n*                                  SPACE MANAGEMENT WILL NOT BE    @L6A\n*                                  USED FOR THIS VOLUME.           @L6A\n*                                  X'07' MEANS WHEN IN OSVTOC      @L6A\n*                                  FORMAT, FREE-SPACE MANAGED IN   @L6A\n*                                  F7 DSCB'S.                      @L6A\nDS4EFL00 EQU   00                  EXTENDED FREE-SPACE             @L6A\n*                                  LEVEL 0.                        @L6A\nDS4EFL07 EQU   07                  EXTENDED FREE-SPACE             @L6A\n*                                  LEVEL 7.                        @L6A\nDS4EFPTR DS    CL5                 POINTER TO EXTENDED FREE-SPACE  @L6A\n*                                  INFORMATION:                    @L6A\n*                                  FOR DS4LVL=X'00' THIS IS ZERO.  @L6A\n*                                  FOR DS4EFLVL=X'07' THIS IS THE  @L6A\n*                                  CCHHR OF THE FIRST F7 DSCB.     @L6A\n         DS    XL9                 RESERVED                        @L6A\nDS4END   EQU   *                   EQUATE AT END OF DSCB4          @P1C\n         MEND\n         SPACE 3\n         MACRO\n         #VTCFMT5\n         MNOTE *,'       #VTCFMT5  VERSION 001 09/22/75  09/22/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT5                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 5 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 5 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 5 DSCB DESCRIBES FREE SPACE AREAS.       *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT5                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT5DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT5                                 *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                  NONE                                              *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        FORMAT 5 DSCB DESCRIPTION                                    *\n*                                                                     *\n*        FREE SPACE DESCRIPTIONS                                      *\n*                                                                     *\n*        FIRST FORMAT 5 DSCB FOLLOWS FORMAT 4 DSCB                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDS5KEYID DS    XL4                      KEY IDENTIFIER\nDS5EXT01 DS    XL5                      AVAILABLE ENTENT\nDS5EXT02 DS    XL5                           .\nDS5EXT03 DS    XL5                           .\nDS5EXT04 DS    XL5                           .\nDS5EXT05 DS    XL5                           .\nDS5EXT06 DS    XL5                           .\nDS5EXT07 DS    XL5                           .\nDS5EXT08 DS    XL5                           .\nDS5FMTID DS    X                        FORMAT IDENTIFIER\nDS5EXT09 DS    XL5                      AVAILABLE EXTENT\nDS5EXT10 DS    XL5                           .\nDS5EXT11 DS    XL5                           .\nDS5EXT12 DS    XL5                           .\nDS5EXT13 DS    XL5                           .\nDS5EXT14 DS    XL5                           .\nDS5EXT15 DS    XL5                           .\nDS5EXT16 DS    XL5                           .\nDS5EXT17 DS    XL5                           .\nDS5EXT18 DS    XL5                           .\nDS5EXT19 DS    XL5                           .\nDS5EXT20 DS    XL5                           .\nDS5EXT21 DS    XL5                           .\nDS5EXT22 DS    XL5                           .\nDS5EXT23 DS    XL5                           .\nDS5EXT24 DS    XL5                           .\nDS5EXT25 DS    XL5                           .\nDS5EXT26 DS    XL5                           .\nDS5PTRDS DS    XL5                      POINTER TO NEXT FORMAT 5 DSCB\nDS5END   EQU   *                        END OF DSCB5\n         MEND\n         MACRO\n         #VTCFMT7\n         MNOTE *,'       #VTCFMT7                                  ABL'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT7                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 7 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 7 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 7 DSCB DESCRIBES VOLUME FREE SPACE.      *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT7                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT7DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT7                                 *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\nDS7KEYID DS    XL4                     KEY X'07070707'\nDS7EXTNT DS    5XL8                    SPACE FOR 5 EXTENT DESCRIPTIONS\nDS7FMTID DS    X                       FORMAT IDENTIFIER\nDS7ADEXT DS    11XL8                   SPACE FOR 11 EXTENT DESCRIPTIONS\n         DS    XL2                     RESERVED\nDS7PTRDS DS    XL5                     POINTER TO NEXT FORMAT 7 DSCB\nDS7END   EQU   *                       END OF DSCB7\n         MEND\n         SPACE 3\n         LCLC  &OPSYSTM                 OPERATING SYSTEM\n* VALUES ARE MVT, SVS, MVS112, MVS113, MVS4\n***          MVT    - DO YOU STILL HAVE MVT?\n***          SVS    - HOW ABOUT SVS?\n***          MVS112 - MVS UP TO MVS 1.1.2\n***          MVS113 - MVS SP 1.1.3 AND ABOVE (XA AND ESA)\n***          MVS4   - MVS/ESA WITH DYNAMIC UCB (MVS ESA 4.1.0-UCBSCAN)\n&OPSYSTM SETC  'MVS4'                   DEFINE OPERATING SYSTEM\n         TITLE 'ENTRY CODING'\nDVOL     $ENTER BASE=R12,                                              +\n               RENT=DSECTLEN,                                          +\n               SAVE=SAVEAREA\n         TITLE 'SET UP TSO CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*              SET UP TSO CONTROL BLOCKS                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         #TSOBLKS DSECT,ECB=DVOLECB,                                   +\n               CPPL=(R11,R1),                                          +\n               IOPL=(R10,DVOLIOPL,DVOLPTPB),                           +\n               PPL=(R9,DVOLPPL,DVOLPCL,DVOLANS)\n         DROP  R10\n         LA    R10,2048\n         LA    R10,2048(R10,R12)\n         USING DVOL+4096,R10\n         TITLE 'SET UP DATA AREAS'\n***********************************************************************\n*                                                                     *\n*              SET UP DATA AREAS                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         MVC   DVOLHEDR(4),MODLINE       INIT OUTPUT AREA\n         MVC   OUTLINE,BLANKS            INIT OUTPUT LINE\n         MVC   DVOLPTPB(MODLEN1),MODELS1 INITIALIZE WORK AREAS\n         LA    R1,DSNAME                SET UP OBTAIN, SEARCH LIST\n         LA    R2,DVOLSER\n         LA    R3,VTOCFMT4\n         STM   R1,R3,DVOLDCB4+4\n         LA    R1,DVOLCCHH              SET UP OBTAIN, SEEK LIST\n         LA    R2,DVOLSER\n         LA    R3,VTOCFMT5\n         STM   R1,R3,DVOLDCB5+4\n         XC    TOTAL,TOTAL              ZERO SIZE OF 5 LARGEST EXTENTS\n         XC    UCBADDR,UCBADDR          ZERO UCB ADDRESS\n         XC    UCBWORK(100),UCBWORK     ZERO UCB WORKAREA\n         LA    R1,UCBWORK               WORK AREA\n         LA    R2,=AL1(UCB3DACC)        DIRECT ACCESS DEVICES\n         LA    R3,UCBANSR               UCB ADDRESS\n         STM   R1,R3,UCBPARMS           SAVE THE PARAMETER LIST\n         OI    UCBPARMS+8,X'80'         MARK THE END OF THE LIST\n         LA    R1,SHORTSER              INITIALIZE SERIAL POINTER\n         ST    R1,SERPTR\n         TITLE 'PARSE COMMAND OPERANDS'\n***********************************************************************\n*                                                                     *\n*              PARSE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LA    R1,PPL                   LOAD PPL ADDRESS\n         LINK  EP=IKJPARS               PARSE THE OPERANDS\n         LTR   R15,R15                  TEST PARSE RETURN CODE\n         BNZ   ERRPARS\n         L     R9,DVOLANS               LOAD ANSWER AREA ADDRESS\n         USING DVOLPDL,R9               DEFINE BASE REGISTER\n         SPACE 2\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF\n         LH    R14,0(,R1)            GET THE LENGTH\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?\n         BNE   NOPDSCAL              NO, BRANCH\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS\n         CLI   NOPRINT+1,0           ANY PRINT KEYWORD?\n         BNE   NOPDSCAL              NO, BRANCH\n         MVI   NOPRINT+1,2           YES, SET DEFAULT TO NOPRINT\nNOPDSCAL EQU   *\n***********************************************************************\n*                                                                     *\n*              CHECK FOR HARDCOPY OPTION AND OPEN DCB IF NEEDED       *\n*                                                                     *\n***********************************************************************\n         NC    HARDCOPY,HARDCOPY       SEE IF HARDCOPY SPECIFIED\n         BZ    NEXT                    GO ON TO NEXT OPTION\n         OI    FLAGS2,$HARDCPY         TURN ON HARDCOPY INDICATOR\n         MVC   HARDCPY(HARDLEN),HARDDCB     DCB AND OPEN CONTROL BLOCKS\n         LA    R2,HARDCPY+40           LOAD DCBDDNAME ADDRESS\n         L     R4,DDNAME               LOAD DDNAME OPERAND ADDRESS\n         LH    R1,DDNAME+4             LOAD DDNAME OPERAND LENGTH\n         BCTR  R1,0                    REDUCE LENGTH BY 1\n         EX    R1,MOVENAME             MOVE DDNAME IN TO DCB\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         OPEN  ((R2),OUTPUT),MF=(E,(R1))    OPEN THE DATA SET\n         CLI   NOPRINT+1,0             ANY PRINT KEYWORD?\n         BNE   *+8                     NO, BRANCH\n         MVI   NOPRINT+1,2             YES, SET DEFAULT TO NOPRINT\n         TM    HARDCPY+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    NEXT                    CONTINUE\n         NI    FLAGS2,X'FF'-$HARDCPY   TURN OFF HARDCOPY      ABL FEB87\n         MVI   NOPRINT+1,1             CHANGE TO PRINT        ABL FEB87\n         LA    R15,BADOPEN             LOAD ADDR OF MSG\n         BAL   R2,PUTL                 GO WRITE MSG\n***********************************************************************\n*                                                                     *\n*              GET VOLUME SERIAL AND UCB ADDRESS                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNEXT     LA    R8,VOL                   SET POINTER TO FIRST VOLUME\n         MVI   FOUNDONE,X'FF'           NO OUTPUT AT ALL\n         SPACE 1\nNEXTPARM XC    UCBADDR,UCBADDR          START THE UCB SCAN OVER\n         XC    UCBWORK(100),UCBWORK     START THE UCB SCAN OVER\n         XC    SRVUCBIC,SRVUCBIC     ZERO THE TOKEN AREA        ABL-410\n         L     R15,16                   LOAD CVT ADDRESS\n         L     R15,40(R15)              LOAD UCB TABLE ADDRESS\n         ST    R15,UCBTABLE             SAVE UCB TABLE ADDRESS\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   NEXTHDR\n         CLC   NOHEADER,=H'2'           SEE IF HEADER SUPPRESSED\n         BE    NEXTHDR\n         LA    R15,BLANKLIN             LOAD OUTPUT LINE ADDRESS\n         CLI   FOUNDONE,X'FF'           FIRST LINE OUTPUT?\n         BE    *+8                      YES, NO BLANK LINE\n         BAL   R2,PUTL\n         LA    R15,SHORT1               LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,SHORT2               LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\nNEXTHDR  MVI   FOUNDONE,0               NO OUTPUT YET\n         SPACE 2\nNEXTVOL  MVC   LINE1(MODLEN2),MODELS2   COPY OUTPUT LINES\n         MVC   FREEMSG1(MODLEN3),MODELS3\n         MVC   BLDSCBS(MODLEN4),MODELS4\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL\n         MVC   DVOLSER,=CL6' '          BLANK OUT VOL SERIAL\n         L     R3,0(R8)                 LOAD VOLUME SERIAL ADDRESS\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BE    GETUCB\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         EX    R1,MOVESER               MOVE SERIAL\n         MVC   SHORTSER,DVOLSER         COPY VOLUME SERIAL\n         TITLE 'FIND UCB ENTRY FOR VOLUME'\n         AIF   ('&OPSYSTM' NE 'MVS4').MVS4NOT\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        USE THE UCBSCAN MACRO FROM MVS 4.1.0 OR ABOVE                *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\nUCBCHECK EQU   *\n*\n**  FIND THE A(UCB)\n*\nVOLSET   LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         L     R1,16               CVT                          ABL-410\n         L     R1,CVTUCBSC-CVT(R1) IOSSVSUCB  UCB SCAN          ABL-410\n         ST    R1,UCBPARMS+12      SAVE ADDRESS                 ABL-410\n         SPACE 1                                                ABL-UCB\n**                                                              ABL-410\nINCR1    L     R15,16                       CVT                 ABL-410\n         TM    CVTDCB-CVT(R15),CVTOSEXT     X'074' EXTENSION?   ABL-410\n         BNO   ISPDEVTA                     NO, BRANCH          ABL-410\n         TM    CVTOSLV0-CVT(R15),X'08'      X'4F0' HBB4410 UCB? ABL-410\n         BO    ISPDEVTB                     YES, BRANCH         ABL-410\n*                                                               ABL-410\n* SYSTEM DOES NOT HAVE UCB SCAN SERVICES (BEFORE MVS ESA 4.1.0) ABL-410\nISPDEVTA DS    0H                                               ABL-410\nISPDEVTL DS    0H                       *                       ABL-410\n         LA    R1,UCBPARMS                                      ABL-410\n         L     R15,UCBPARMS+12     ROUTINE ADDRESS              ABL-410\n         BALR  R14,R15                                          ABL-410\n         LTR   R15,R15                                          ABL-410\n         BNZ   ISPDEVTE            DONE                         ABL-410\n         L     R1,UCBANSR                                       ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTL            NO, SKIP IT                  ABL-410\nISPDEVT4 DS    0H                       *                       ABL-410\n         SR    R15,R15                  RC0                     ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTE LA    R15,4                    VOLUME NOT FOUND        ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\n         DROP  R1                                               ABL-410\n*                                                               ABL-410\n* SYSTEM IS AT LEAST MVS ESA 4.1.0 OR HIGHER -- HAS UCB SCAN    ABL-410\nISPDEVTB DS    0H                       *                       ABL-410\nISPDEVTF DS    0H                       *                       ABL-410\n         L     R15,16                       CVT                 ABL-410\n         TM    CVTOSLV1-CVT(R15),X'20'  X'4F1' JBB5510 4 DIGIT? ABL-410\n         BO    ISPDEVTK                                         ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,              ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTK DS    0H                       *                       ABL-410\n         UCBSCAN COPY,WORKAREA=UCBWORK,UCBAREA=SRVUCBUC,        ABL-410X\n               DCEAREA=SRVUCBDC,IOCTOKEN=SRVUCBIC,RANGE=ALL,    ABL-410X\n               DEVCLASS=DASD,DYNAMIC=YES,DCELEN=ISPDEVTH,       ABL-410X\n               MF=(E,UCBWORK+100,COMPLETE)                      ABL-410\n         LTR   R15,R15                  RC=0?                   ABL-410\n         BZ    ISPDEVTG                 YES, FOUND THE UCB      ABL-410\n         LA    R15,4                    NO, SET AN ERROR RETURN ABL-410\n         B     SPACVO99                 EXIT                    ABL-410\nISPDEVTG DS    0H                       *                       ABL-410\n         LA    R1,SRVUCBUC              UCB ADDRESS             ABL-410\n         ST    R1,UCBANSR               SET                     ABL-410\n         SR    R15,R15                  SET RETURN CODE         ABL-410\n         USING UCBOB,R1                                         ABL-410\n         CLI   UCBTBYT3,X'20'      REALLY A DASD DEVICE         ABL-410\n         BNE   ISPDEVTF   W?       NO, SKIP IT                  ABL-410\n         DROP  R1                                               ABL-410\nISPDEVTN DS    0H                       *                       ABL-410\n*                                                               ABL-410\nSPACVO99 L     R6,UCBANSR               R6 HAS THE UCB ADDRESS  ABL-410\n         LTR   R15,R15                  FOUND THE UCB?          ABL-410\n         BNZ   NOUCB                    NO, BRANCH              ABL-410\n         L     R3,0(,R8)                LOAD SERIAL ADDRESS     ABL-410\n         LA    R15,SRVUCBDC             ADDRESS OF DCE          ABL-410\n         STCM  R15,B'1111',ADDRDCE SAVE DCE ADDRESS             ABL-410\n*                                                               ABL-410\n         L     R5,UCBANSR               LOAD UCB ADDRESS\n         USING UCB,R5\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBCHECK\n*                                                                 ABL97\n         ST    R5,DVOLDEC               SAVE UCB ADDRESS          ABL97\n         UCBDEVN UCBPTR=DVOLDEC,DEVN=UCBTEXT                      ABL97\n*                                                                 ABL97\n***      CLI   UCBTEXT,C' '             LEADING BLANK?            ABL97\n***      BNE   UCBFOUR                  NO, BRANCH                ABL97\n***      ICM   R1,B'1110',UCBTEXT+1     UCB CHARACTERS            ABL97\n***      ICM   R1,B'0001',UCBTEXT       LEADING BLANK AT END      ABL97\n***      STCM  R1,B'1111',UCBTEXT       SHIFT THE UCB CHARACTERS  ABL97\nUCBFOUR  DS    0H                                                 ABL97\n*                                                                 ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBCHECK                 NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBCHECK                 NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n***      BNE   UCBCHECK                 NO, BRANCH                ABL97\n         BE    UCBHIGH                  YES, BRANCH               ABL97\n         CLI   UCBTEXT,C' '             BLANK FIRST CHARACTER?    ABL97\n         BNE   UCBCHECK                 NO, BRANCH                ABL97\n         CLC   1(*-*,R3),UCBTEXT+1      <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?              ABL97\n         BNE   UCBCHECK                 NO, BRANCH                ABL97\n         SPACE 2\nUCBHIGH  DS    0H\n         MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\nISPDEVTH DC    H'128'                                           ABL-410\n         DROP  R5\n         AGO   .MVS4DON\n.MVS4NOT ANOP\n         AIF   ('&OPSYSTM' NE 'MVS113').MVSNOXA\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        USE THE UCB SCAN SERVICES FROM MVS SP 1.1.3 OR MVS/XA        *\n***********************************************************************\n*                                                                     *\n*        R2  - VOLUME SERIAL ADDRESS                                  *\n*        R3  - VOLUME SERIAL (FROM COMMAND LINE) ADDRESS              *\n*        R4  - UCB SCAN ENTRY ADDRESS                                 *\n*        R5  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\n         L     R4,16                    CVT ADDRESS START\n         L     R4,CVTUCBSE(,R4)         START OF UCB SCAN ROUTINE\n         SR    R5,R5                    CLEAR REGISTER 5\nUCBCHECK EQU   *\n         LA    R1,UCBPARMS              START OF PARAMETER LIST\n         LR    R15,R4\n         BALR  R14,R15                  INVOKE THE SCAN ROUTINE\n         SPACE 1\n         LTR   R15,R15                  ANY MORE?\n         BNZ   NOUCB                    NO, DONE\n         L     R5,UCBANSR               LOAD UCB ADDRESS\n         USING UCB,R5\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBCHECK\n         MVI   UCBNAME,C' '             SAVE UCB ADDRESS          ABL97\n         MVC   UCBNAME+1(3),UCBNAME     SAVE UCB ADDRESS          ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBCHECK                 NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBCHECK                 NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n         BNE   UCBCHECK                 NO, BRANCH\n         SPACE 2\nUCBHIGH  DS    0H\n         MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\n         DROP  R5\n         AGO   .MVSXA\n.MVSNOXA ANOP\n***********************************************************************\n*                                                                     *\n*              FIND UCB ENTRY FOR VOLUME                              *\n*                                                                     *\n*        IF DEVICES HAVE MULTIPLE PATHS, THERE WILL BE MULTIPLE       *\n*        ENTRIES IN THE UCB LOOKUP TABLE, BUT ONLY ONE UCB FOR        *\n*        EACH DEVICE.  DVOL WILL SKIP ALTERNATE PATHS.  THE           *\n*        LOGIC TO SKIP ALTERNATE PATHS DEPENDS ON THE RESTRICTIONS    *\n*        THAT  1.  THE ALTERNATE ADDRESS MUST BE HIGHER THAN THE      *\n*                  PRIMARY ADDRESS, AND                               *\n*              2.  THAT UCB'S ARE LOCATED IN STORAGE IN ASCENDING     *\n*                  ORDER BY PRIMARY UNIT ADDRESS                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R2  - VOLUME SERIAL ADDRESS                                  *\n*        R3  - VOLUME SERIAL (FROM COMMAND LINE) ADDRESS              *\n*        R4  - UCB TABLE ADDRESS                                      *\n*        R5  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETUCB   L     R3,0(,R8)                LOAD SERIAL ADDRESS\n         L     R4,UCBTABLE              LOAD ADDRESS TO START SEARCH\n         SR    R5,R5                    CLEAR REGISTER 5\nUCBCHECK EQU   *\n         AIF   ('&OPSYSTM' EQ 'MVS112').MVSUCB\n         LH    R5,0(R4)                 LOAD UCB ADDRESS\n         AGO   .USING\n.MVSUCB  ICM   R5,3,0(R4)               LOAD UCB ADDRESS\n.USING   USING UCB,R5\n         LTR   R5,R5                    TEST FOR BLANK ENTRY\n         BZ    UCBHOLE\n         CLC   0(2,R4),=X'FFFF'         TEST FOR END OF TABLE\n         BE    NOUCB\n         CLI   UCBTBYT3,UCB3DACC        TEST FOR DIRECT ACCESS\n         BNE   UCBHOLE\n         CLI   UCBVOLI,X'00'            TEST FOR NO SERIAL\n         BE    UCBHOLE\n         MVI   UCBNAME,C' '             SAVE UCB ADDRESS          ABL97\n         MVC   UCBNAME+1(3),UCBNAME     SAVE UCB ADDRESS          ABL97\n         CLI   0(R3),C'*'               ALL VOLUMES?\n         BE    UCBHIGH                  YES, BRANCH\n         LH    R1,4(R8)                 LOAD VOLUME SERIAL LENGTH\n         BCTR  R1,0                     REDUCE LENGTH BY 1\n         CLC   0(*-*,R3),UCBVOLI        <<EXECUTED>>\n         EX    R1,*-6                   THIS VOLUME?\n         BE    UCBHIGH                  YES, BRANCH\n         LTR   R1,R1                    POSSIBLE U... FOR UNIT?\n         BNP   UCBHOLE                  NO, BRANCH\n         CLI   0(R3),C'U'               FIRST CHARACTER OF U?\n         BNE   UCBHOLE                  NO, BRANCH\n         BCTR  R1,0                     REDUCE LENGTH BY ANOTHER 1\n*        CLC   1(*-*,R3),UCBNAME        <<EXECUTED>>              ABL97\n         CLC   1(*-*,R3),UCBTEXT        <<EXECUTED>>              ABL97\n         EX    R1,*-6                   THIS VOLUME?\n         BNE   UCBHOLE                  NO, BRANCH\n         SPACE 2\nUCBHIGH  C     R5,UCBADDR               CHECK AGAINST LAST UCB ADDRESS\n         BH    UCBCONT\nUCBHOLE  LA    R4,2(R4)                 INCREMENT TO NEXT UCB\n         B     UCBCHECK\nUCBCONT  MVC   DVOLSER,UCBVOLI          COPY VOLUME SERIAL\n         LA    R4,2(R4)                 LOAD ADDR OF NEXT UCB ENTRY\n         ST    R4,UCBNEXT               SAVE ADDRESS\n         ST    R5,UCBADDR               STORE THIS UCB ADDRESS\n         SPACE 2\n         MVC   UCBTABLE,UCBNEXT         SET UCBTABLE ADDR TO NEXT UCB\n         CLI   0(R3),C'*'               TEST FOR * (ALL VOLUMES)\n         BNE   CONTINUE\n         NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    CONTINUE\n         L     R2,SERPTR                LOAD SERIAL POINTER\n         LA    R1,SHORTSER+71           TEST FOR FULL LINE\n         CR    R2,R1\n         BL    COPYSER2\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         MVC   SHORTLIN(SHORTLEN),SHORTMDL  CLEAR LINE\n         LA    R2,SHORTSER              RESET POINTER\nCOPYSER2 MVC   0(6,R2),DVOLSER          COPY SERIAL INTO LINE\n         LA    R2,10(R2)                INCREMENT POINTER\n         ST    R2,SERPTR                SAVE POINTER\n         B     GETUCB\n         DROP  R5\n.MVSXA   ANOP\n         L     R7,UCBADDR               LOAD UCB ADDRESS        ABL-410\n         USING UCB,R7                   DEFINE BASE REGISTER    ABL-410\n         SR    R15,R15             ZERO FOR INSERT              ABL-410\n         ICM   R15,B'0111',UCBEXTP-UCBOB(R7) DCE ADDRESS        ABL-410\n         BZ    *+8                 NO, BRANCH                   ABL-410\n         ICM   R15,B'1111',24(R15) GET DCE                      ABL-410\n         STCM  R15,B'1111',ADDRDCE SAVE DCE ADDRESS             ABL-410\n.MVS4DON ANOP\n         TITLE 'PROCESS UCB INFORMATION'\n***********************************************************************\n*                                                                     *\n*              PROCESS UCB INFORMATION                                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R7  - UCB ADDRESS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCONTINUE MVC   SHORTSER,DVOLSER         COPY VOLUME SERIAL\n         MVI   FOUNDONE,1               OUTPUT NOW\n         L     R7,UCBADDR               LOAD UCB ADDRESS\n         USING UCB,R7                   DEFINE BASE REGISTER\n*        MVC   UNITADDR,UCBNAME         COPY UNIT ADDRESS         ABL97\n         MVC   UNITADDR,UCBTEXT         COPY UNIT ADDRESS         ABL97\n*        MVC   SHORTUNT,UCBNAME                                   ABL97\n         MVC   SHORTUNT,UCBTEXT                                   ABL97\n         IC    R15,19(R7)               UNIT TYPE IN HEX\n         N     R15,=X'0000000F'         MASK OFF OTHER BITS\n         MH    R15,=H'6'                UNIT TYPE * 6\n         LA    R15,UNITTBL(R15)         UNIT TYPE NAME\n         MVC   UNITTYPE(6),0(R15)       SAVE NAME IN MESSAGE\n         MVC   SHORTTYP(6),0(R15)       SAVE NAME IN MESSAGE\n*\n         ICM   R15,B'1111',ADDRDCE GOOD DCE ADDRESS?            ABL-410\n         BZ    TYPEEXIT            NO, BRANCH                   ABL-410\n         LA    R14,MODELTBL-4      TABLE OF DEVICE MODIFIERS\n*\nTYPELOOP LA    R14,4(,R14)             NEXT TABLE ENTRY\n         CLI   0(R14),X'FF'            END OF TABLE?\n         BE    TYPEEXIT                YES, BRANCH\n         CLC   UCBTBYT4-UCBOB(1,R7),0(R14)  MATCH DEVICE TYPE?\n         BNE   TYPELOOP                     NO, BRANCH\n         CLC   22(1,R15),1(R14)        MATCH DCEMDRDT?\n         BNE   TYPELOOP                NO, BRANCH\n         MVC   UNITTYPE+4(2),2(R14)    ADD THE DESIGNATOR\n         MVC   SHORTTYP+4(2),2(R14)    ADD THE DESIGNATOR\nTYPEEXIT DS    0H                                             ABL MAY90\n*\n*--------MOUNT STATUS\n         TM    UCBSTAT,UCBRESV          TEST FOR RESERVED\n         BZ    TRYRES\n         MVC   MNTSTAT,=CL9'RESERVED'   SET MOUNT STATUS\n         MVC   SHORTMNT(6),=CL6'RESRVD' SET MOUNT STATUS\n         B     USESTAT\nTRYRES   TM    UCBSTAT,UCBPRES          TEST FOR RESIDENT\n         BZ    USESTAT\n         MVC   MNTSTAT,=CL9'RESIDENT'   SET MOUNT STATUS\n         MVC   SHORTMNT(6),=CL6'RESDNT' SET MOUNT STATUS\nUSESTAT  MVI   SHORTSLA,C'/'\n*--------USE STATUS\n         TM    UCBSTAB,UCBBPRV          TEST FOR PRIVATE\n         BZ    TRYPUB\n         MVC   USESTATS,=CL7'PRIVATE'   SET USE STATUS\n         B     TESTALOC\nTRYPUB   TM    UCBSTAB,UCBBPUB          TEST FOR PUBLIC\n         BZ    TRYSTOR\n         MVC   USESTATS,=CL7'PUBLIC'    SET USE STATUS\n         B     TESTALOC\nTRYSTOR  TM    UCBSTAB,UCBBSTR          TEST FOR STORAGE\n         BZ    TESTALOC\n         MVC   USESTATS,=CL7'STORAGE'   SET USE STATUS\nTESTALOC MVC   SHORTUSE(4),USESTATS    COPY USE STATUS\n*--------ALLOCATED/UNALLOCATED\n         TM    UCBSTAT,UCBALOC          TEST FOR ALLOCATED\n         BZ    TESTOFF\n         MVC   ALLOCATD,=CL11'ALLOCATED  '\n*--------ONLINE/OFFLINE\nTESTOFF  TM    UCBSTAT,UCBONLI          TEST FOR ONLINE\n         BZ    TESTUNLD\n         MVC   ONOFF,=CL17'ONLINE'\n         TM    UCBSTAT,UCBCHGS          TEST FOR OFFLINE PENDING\n         BZ    TESTUNLD\n         MVC   ONOFF,=CL17'OFFLINE PENDING'\n         MVC   SHORTMNT(17),ONOFF\n*--------PENDING MOUNT/UNLOAD\nTESTUNLD TM    UCBSTAT,UCBUNLD          TEST FOR UNLOAD PENDING\n         BZ    GETFMT4\n         MVC   UNLOAD,=CL17'UNLOAD PENDING'\n         MVC   SHORTMNT(17),UNLOAD\n***      TM    DVOLFLGB,UCBTICBT        TEST FOR MOUNT PENDING\n***      BZ    GETFMT4\n***      MVC   UNLOAD,=CL17'MOUNT PENDING'\n***      MVC   SHORTMNT(17),UNLOAD\n         TITLE 'OBTAIN AND PROCESS FORMAT 4 DSCB (VTOC DSCB)'\n***********************************************************************\n*                                                                     *\n*              OBTAIN FORMAT 4 DSCB (VTOC DSCB)                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETFMT4  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BNE   GETFMT4A\n         LA    R15,LINE1                DISPLAY VOLUME SERIAL AND UNIT\n         BAL   R2,PUTL\nGETFMT4A XC    TOTAL,TOTAL              ZERO 5 LARGEST EXTENT TOTAL\n         MVI   DS4IDFMT,X'00'           ZERO OUT FORMAT 4 ID LOCATION\n         MVI   VTOCINDS,X'00'           ZERO OUT VTOC INDICATORS\n         TM    DVOLFLGA,DVOLNRDY        TEST FOR NOT READY\n         BO    NOTREADY\n         DROP  R7\n         OBTAIN DVOLDCB4                OBTAIN FORMAT 4 DSCB\n         CLI   DS4IDFMT,X'F4'           TEST FIELD IDENTIFIER\n         BNE   ERRFMT4\n         MVC   DVOLCCHH,DS4VTOCE+2      COPY CCHH OF VTOC\n         MVI   DVOLCCHH+4,X'02'         SET RECORD TO 2 FOR FIRST FMT 5\n         MVC   TRKPRCYL,DS4DEVSZ+2      COPY TRACKS PER CYLINDER\n         MVC   MTDSCBS,DS4DSREC         COPY TRACKS PER CYLINDER\n         MVC   VTOCINDS,DS4VTOCI        SAVE VTOC INDICATORS\n         BAL   R2,IXINIT                GET INDEXED VTOC IF AVAILABLE\n         EJECT\n***********************************************************************\n*                                                                     *\n*              PROCESS VSAM INFORMATION                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETVSAM  TM    DS4VSIND,X'80'           TEST OWNERSHIP BIT\n         BZ    ZERO5                    IGNORE VSAM LINE IF NOT OWNED\n*ABL     BZ    TIMESTMP\n         MVC   OWNERSHP,=C'ON '         INDICATE VOLUME IS OWNED\nTIMESTMP UNPK  WORKAREA(9),DS4AMTIM(5)  UNPACK TIMESTAMP 1\n         UNPK  WORKAREA+8(9),DS4AMTIM+4(5)\n         MVZ   WORKAREA,=XL16'00'       MOVE ZEROS TO ZONES\n         TR    WORKAREA,=C'0123456789ABCDEF'  CONVERT TO EBCDIC\n         MVC   TIMEST1,WORKAREA         COPY TIMESTAMP 1 TO MESSAGE\n         UNPK  WORKAREA(9),DS4R2TIM(5)  UNPACK TIMESTAMP 2\n         UNPK  WORKAREA+8(9),DS4R2TIM+4(5)\n         MVZ   WORKAREA,=XL16'00'       MOVE ZEROS TO ZONES\n         TR    WORKAREA,=C'0123456789ABCDEF'  CONVERT TO EBCDIC\n         MVC   TIMEST2,WORKAREA         COPY TIMESTAMP2 TO MESSAGE\n         SPACE 2\n         CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    ZERO5\n         MVC   SHORTVSM,OWNERSHP        COPY OWNERSHIP INFORMATION\n         TITLE 'OBTAIN FORMAT 5 DSCB (FREE AREA DSCB)'\n***********************************************************************\n*                                                                     *\n*              OBTAIN FORMAT 5 DSCB (FREE AREA DSCB)                  *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R2  - EXTENTS LEFT TO PROCESS IN THIS DSCB                   *\n*        R3  - POINTER TO LOAD ADDRESS TABLE ENTRY                    *\n*        R4  - CUMULATIVE CYLINDER COUNT                              *\n*        R5  - CUMULATIVE EXCESS TRACK COUNT                          *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION (LOADED BY EXECUTE)      *\n*        R7  - CUMULATIVE EXTENT COUNT                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nZERO5    XC    LARGE5(50),LARGE5        ZERO LARGEST 5 EXTENTS TABLE\n         SR    R7,R7                    ZERO EXTENTS\n         SR    R4,R4                    ZERO CYLINDERS\n         SR    R5,R5                    ZERO TRACKS\nOBTFMT5  L     R15,UCBADDR              LOAD UCB ADDRESS\n         USING UCB,R15                  ADDRESSABILITY\n         TM    DVOLFLGA,DVOLNRDY        TEST NOT READY\n         BO    NOTREADY\n         DROP  R15\n         BAL   R2,IXFMT5                GET THE NEXT FORMAT 5 DSCB\n         B     PFGOTIX                  GOT INDEXED VTOC, BRANCH\n         SPACE 1\n         OBTAIN DVOLDCB5                READ FORMAT 5 DSCB\n         LTR   R15,R15                  TEST RETURN CODE\n         BNZ   ERRFMT5\nPFGOTIX  CLI   DS5FMTID,X'F5'           TEST FORMAT 5 ID\n         BNZ   PFGOTIX7                 NO, TRY FOR 7\n         LA    R2,26                    LOAD EXTENTS PER DSCB\n         SR    R3,R3                    ZERO POINTER\nDVOLLOAD EX    R0,FMT5ADDR(R3)          LOAD ADDRESS OF EXTENT DESCR\n         NC    0(5,R6),0(R6)            TEST FOR LAST EXTENT\n         BE    ENDFMT5\n         SR    R0,R0                    CLEAR REGISTER\n         MVC   HALF,2(R6)               COPY NUMBER OF CYLINDERS\n         LH    R1,HALF                  LOAD NUMBER OF CYLINDERS\n         IC    R0,4(R6)                 LOAD NUMBER OF TRACKS\n         AR    R4,R1                    ACCUMULATE CYLINDERS\n         AR    R5,R0                    ACCUMULATE TRACKS\n         LA    R7,1(R7)                 INCREMENT EXTENT COUNT\n         MH    R1,TRKPRCYL              MULT CYLS BY TRKS PER CYL\n         AR    R0,R1                    TOTAL TRACKS THIS EXTENT\n         TITLE 'SEE IF EXTENT IS ONE OF 5 LARGEST'\n***********************************************************************\n*                                                                     *\n*              SEE IF CURRENT EXTENT IS ONE OF 5 LARGEST              *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R1  - EXTENT TABLE COUNTER                                   *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION                          *\n*        R14 - CHARACTERS TO BE MOVED, ADDR OF EXTENT ENTRY           *\n*              R2, R3, R4, R5, AND R7 MUST BE PRESERVED               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SR    R14,R14                  ZERO CHARACTERS\n         LA    R1,5                     LOAD COUNT\nCOMPARE  C     R0,LARGE5(R14)           COMPARE TOTAL TRACKS\n         BNH   NOTLARGE\n         LA    R14,10(R14)              INCREMENT COUNT BY 10\n         BCT   R1,COMPARE\nNOTLARGE SH    R14,=H'10'\n         LTR   R14,R14                  TEST COUNT\n         BM    NEXTFREE\n         BZ    ADDEXTNT\n         BCTR  R14,0                    REDUCE COUNT BY 1\n         EX    R14,MOVEXTNT             COPY EXTENT DESCRIPTIONS\n         LA    R14,1(R14)               ADD 1 TO COUNT\nADDEXTNT LA    R14,LARGE5(R14)          LOAD ADDRESS FOR THIS EXTENT\n         ST    R0,0(R14)                STORE NUMBER OF TRACKS\n         MVC   6(3,R14),2(R6)           COPY CYLINDERS AND TRACKS\nNEXTFREE LA    R3,4(R3)                 INCREMENT POINTER\n         BCT   R2,DVOLLOAD              DECREMENT EXTENT COUNTER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              FINISHED WITH FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         NC    DS5PTRDS,DS5PTRDS        TEST FOR ANOTHER FMT5\n         BE    ENDFMT5\n         MVC   DVOLCCHH,DS5PTRDS        COPY ADDRESS OF NEXT FMT5 DSCB\n         B     OBTFMT5\nPFGOTIX7 CLI   DS5FMTID,X'F7'           TEST FORMAT 7 ID\n         BNZ   ERRFMT5\n         LA    R2,16                    LOAD EXTENTS PER DSCB\n         SR    R3,R3                    ZERO POINTER\nDVOLLOD7 EX    R0,FMT7ADDR(R3)          LOAD ADDRESS OF EXTENT DESCR\n         NC    0(8,R6),0(R6)            TEST FOR LAST EXTENT\n         BE    ENDFMT5\n         XC    STARTC(16),STARTC        CLEAR ACCUMULATORS\n         SR    R0,R0\n         L     R1,0(,R6)                BEGINNING OF THIS EXTENT\n         LH    R15,TRKPRCYL             TRKS PER CYL\n         DR    R0,R15                   DIVIDE\n         LTR   R0,R0                    ANY ODD TRACKS INTO EXTENT?\n         BZ    DVOLEXT1                 NO, BRANCH\n         AH    R1,=H'1'                 YES, ONE LESS WHOLE CYLINDER\n         SR    R15,R0                   TRACKS LEFT IN CYLINDER\n         LR    R0,R15                   TRACKS LEFT IN CYLINDER\nDVOLEXT1 ST    R1,STARTC                SAVE STARTING CYLINDER\n         ST    R0,STARTT                SAVE STARTING TRACK\n         SR    R0,R0\n         L     R1,4(,R6)                END OF THIS EXTENT\n         LH    R15,TRKPRCYL             TRKS PER CYL\n         DR    R0,R15                   DIVIDE\n         C     R1,STARTC                END:START CYLINDER\n         BE    DVOLEXT2                   EQUAL, BRANCH\n         BL    DVOLEXT3                   LESS, BRANCH\n*  END GREATER THAN START CYLINDER\n         S     R1,STARTC                NUMBER OF WHOLE CYLINDERS\n         A     R0,STARTT                TRACKS LEFT IN EXTENT\n         B     DVOLEXT7\n*  END SAME AS START CYLINDER\nDVOLEXT2 SR    R1,R1                    NO CYLINDERS SPANNED\n         A     R0,STARTT                TRACKS LEFT IN EXTENT\n         B     DVOLEXT7\n*  END LESS THAN START CYLINDER (STARTED ON SAME CYLINDER ACTUALLY)\nDVOLEXT3 SR    R1,R1                    NO CYLINDERS SPANNED\n         SR    R15,R0                   TRACKS LEFT IN SECOND CYLINDER\n         L     R0,STARTT                TRACKS LEFT IN FIRST CYLINDER\n         SR    R0,R15                   TRACKS IN THIS EXTENT\nDVOLEXT7 ST    R1,TOTALC                SAVE STARTING CYLINDER\n         ST    R0,TOTALT                SAVE TOTAL TRACKS\n         AR    R4,R1                    ACCUMULATE CYLINDERS\n         AR    R5,R0                    ACCUMULATE TRACKS\n         LA    R7,1(R7)                 INCREMENT EXTENT COUNT\n         L     R0,4(,R6)                END OF THIS EXTENT\n         S     R0,0(,R6)                LESS BEGINNING OF THIS EXTENT\n         TITLE 'SEE IF EXTENT IS ONE OF 5 LARGEST'\n***********************************************************************\n*                                                                     *\n*              SEE IF CURRENT EXTENT IS ONE OF 5 LARGEST              *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R0  - TRACKS IN THIS EXTENT                                  *\n*        R1  - EXTENT TABLE COUNTER                                   *\n*        R6  - ADDRESS OF EXTENT DESCRIPTION                          *\n*        R14 - CHARACTERS TO BE MOVED, ADDR OF EXTENT ENTRY           *\n*              R2, R3, R4, R5, AND R7 MUST BE PRESERVED               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         SR    R14,R14                  ZERO CHARACTERS\n         LA    R1,5                     LOAD COUNT\nCOMPARE7 C     R0,LARGE5(R14)           COMPARE TOTAL TRACKS\n         BNH   NOTLARG7\n         LA    R14,10(R14)              INCREMENT COUNT BY 10\n         BCT   R1,COMPARE7\nNOTLARG7 SH    R14,=H'10'\n         LTR   R14,R14                  TEST COUNT\n         BM    NEXTFRE7\n         BZ    ADDEXTN7\n         BCTR  R14,0                    REDUCE COUNT BY 1\n         EX    R14,MOVEXTNT             COPY EXTENT DESCRIPTIONS\n         LA    R14,1(R14)               ADD 1 TO COUNT\nADDEXTN7 LA    R14,LARGE5(R14)          LOAD ADDRESS FOR THIS EXTENT\n         ST    R0,0(R14)                STORE NUMBER OF TRACKS\n         MVC   4(4,R14),TOTALC          COPY CYLINDERS\n         MVC   8(1,R14),TOTALT+3        COPY TRACKS\nNEXTFRE7 LA    R3,4(R3)                 INCREMENT POINTER\n         BCT   R2,DVOLLOD7              DECREMENT EXTENT COUNTER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              FINISHED WITH FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         NC    DS5PTRDS,DS5PTRDS        TEST FOR ANOTHER FMT5\n         BE    ENDFMT5\n         MVC   DVOLCCHH,DS5PTRDS        COPY ADDRESS OF NEXT FMT5 DSCB\n         B     OBTFMT5\nMODELTBL DC    X'0E1C',C'D '           3380D\n         DC    X'0E1B',C'E '           3380E\n         DC    X'0E21',C'J '           3380J\n         DC    X'0E23',C'K '           3380K\n         DC    X'0F26',C'M1'           3390M1\n         DC    X'0F27',C'M2'           3390M2\n         DC    X'0F24',C'M3'           3390M3\n         DC    X'0F31',C'OP'           3390 OPTICAL (LIKE M3)\n         DC    X'0F32',C'M9'           3390M9\n         DC    X'FF'                   END OF TABLE\n         DS    0H\n         TITLE 'DEVICE NOT READY'\n***********************************************************************\n*                                                                     *\n*              DEVICE NOT READY                                       *\n*                                                                     *\n***********************************************************************\nNOTREADY MVC   UNLOAD,=CL17'NOT READY'  INDICATE NOT READY\n         MVC   SHORTMNT(17),UNLOAD\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BE    INCRVOL\n         LA    R15,LINE2                DISPLAY HELD LINE\n         BAL   R2,PUTL\n         B     INCRVOL\n         TITLE 'FORMAT AND DISPLAY LINE'\n***********************************************************************\n*                                                                     *\n*              FORMAT AND DISPLAY LINE                                *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - CYLINDER COUNT                                         *\n*        R5  - EXCESS TRACK COUNT                                     *\n*        R7  - EXTENT COUNT                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFMT5  BAL   R2,IXTERM                FIX FREE DSCB'S AND QUIT\n         LH    R1,MTDSCBS\n         CVD   R1,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   DSCBS,EDITFLD+4-1\n         SPACE 1\n         CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   ENDFMT5A\n         MVC   SHORTDCB,DSCBS           COPY NUMBER OF DSCB'S\n         SPACE 2\nENDFMT5A CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BNE   ENDFMT5B\n         LA    R15,LINE2                DISPLAY HELD LINES\n         BAL   R2,PUTL\n         CLI   OWNERSHP+1,C'F'          VSAM OWNERSHIP OFF?\n         BE    TESTDOS                  YES, IGNORE IF NOT OWNED\n         LA    R15,LINE3\n         BAL   R2,PUTL\n*--------PROCESS VTOC INDICATORS\nTESTDOS  TM    VTOCINDS,X'08'\n         BZ    TESTDIRF\n         SPACE 2\n         LA    R15,DOS                  LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\nTESTDIRF TM    VTOCINDS,X'04'\n         BZ    BLKDSCBS\n         LA    R15,DAMAGED              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\nBLKDSCBS LA    R15,BLDSCBS              DISPLAY HELD LINE\n         BAL   R2,PUTL\n         SPACE 2\n         TM    VTOCINDS,DS4IVTOC        THIS VTOC INDEXED?\n         BZ    ENDFMT5B                 IF NO, DONE\n         L     R1,IXCT2                 FREE VIR'S\n         CVD   R1,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   DSCBVIR,EDITFLD+4-1\n         LA    R15,BLDSVIR              DISPLAY HELD LINE\n         BAL   R2,PUTL\n         SPACE 2\nENDFMT5B CLC   LARGE5+50-10(4),=F'0'    TEST FOR NO SPACE ON PACK\n         BE    NOSPACE\n         CVD   R7,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   EXTENTS,EDITFLD+4-1\n         CVD   R4,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   CYLS,EDITFLD+4-1\n         MH    R4,TRKPRCYL              CONVERT TOTAL TRACKS\n         AR    R4,R5\n         CVD   R4,DVOLDEC\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   TRACKS,EDITFLD+3-1\n         SPACE 2\n         CLC   OUTFORM,=H'1'\n         BNE   DISPLAY4\n         MVC   SHORTTOT,TRACKS\n         MVC   SHORTEXT,EXTENTS\n         MVC   SHORTCYL,CYLS\n         B     GETCYLTR\n         SPACE 2\nDISPLAY4 LA    R15,FREEMSG1             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         TITLE 'DISPLAY LARGEST EXTENTS AS CYL+TR'\n***********************************************************************\n*                                                                     *\n*              DISPLAY LARGEST EXTENTS AS CYL+TR                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - DESCRIPTION COUNTER                                    *\n*        R5  - TABLE ENTRY POINTER                                    *\n*        R6  - OUTPUT LINE POINTER                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETCYLTR LA    R4,5                     SET COUNTER\n         LA    R5,LARGE5+50-10          SET POINTER\n         LA    R6,LRGXTNT1-1            SET POINTER\nLOOP1    CLC   0(4,R5),=F'0'            TEST FOR END OF LIST\n         BE    ENDLOOP1\n         L     R3,4(R5)                 LOAD CYLINDERS\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'\n         ED    EDITFLD,DVOLDEC+4\n         MVC   0(4+1,R6),EDITFLD+4-1    MOVE CYLINDERS TO MESSAGE\n         MVI   4+1(R6),C'+'             MOVE + SIGN\n         SR    R3,R3                    CLEAR REGISTER\n         IC    R3,8(R5)                 LOAD TRACKS\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'  SET UP EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT TRACKS\n         MVC   5+1(2,R6),EDITFLD+6      MOVE TRACKS INTO MESSAGE\n         MVI   7+1(R6),C'/'             MOVE /\n         SH    R5,=H'10'                POINT TO NEXT DESCRIPTION\n         LA    R6,8+1(R6)               POINT TO NEXT OUTPUT DESCR\n         BCT   R4,LOOP1                 DECREMENT COUNT AND LOOP\n         SPACE 2\nENDLOOP1 CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   DISPLAY5\n         MVC   SHORT1CL,LRGXTNT1-1      COPY CYLINDERS IN LARGEST EXTNT\n         MVC   SHORT1TR,LRGXTNT1+5      COPY TRACKS IN LARGETS EXTENT\n         MVI   SHORT1CL+4+1,C'+'        ADD A +\n         B     GETTRKS\n         SPACE 2\nDISPLAY5 LA    R15,FREEMSG2             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         TITLE 'DISPLAY LARGEST EXTENTS AS TRACKS'\n***********************************************************************\n*                                                                     *\n*              DISPLAY LARGEST EXTENTS AS TRACKS                      *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R4  - DESCRIPTION COUNTER                                    *\n*        R5  - TABLE ENTRY POINTER                                    *\n*        R6  - OUTPUT LINE POINTER                                    *\n*        R7  - CUMULATIVE TRACK COUNTER                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETTRKS  LA    R4,5                     SET COUNT\n         LA    R5,LARGE5+50-10          SET POINTER\n         LA    R6,LRGXTNT2-1            SET POINTER\n         SR    R7,R7                    ZERO 5 LARGEST EXTENTS TOTAL\nLOOP2    CLC   0(4,R5),=F'0'            TEST FOR END OF TABLE\n         BE    ENDLOOP2\n         L     R3,0(R5)                 LOAD TOTAL TRACKS IN EXTENT\n         AR    R7,R3                    ACCUMULATE TOTAL\n         CVD   R3,DVOLDEC               CONVERT TO DECIMAL\n         MVC   EDITFLD,=X'4020202020202120'  SET EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT TRACKS\n         MVC   0+1(7,R6),EDITFLD+1      MOVE INTO MESSAGE\n         MVI   7+1(R6),C'/'             MOVE / INTO MESSAGE\n         SH    R5,=H'10'                POINT TO NEXT EXTENT ENTRY\n         LA    R6,8+1(R6)               POINT TO NEXT OUTPUT DESCR\n         BCT   R4,LOOP2                 DECREMENT COUNT AND LOOP\n         SPACE 2\nENDLOOP2 CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   DISPLAY6\n         MVC   SHORTLRG,LRGXTNT2+2-1    COPY TRACKS IN LARGEST EXTENT\n         CVD   R7,DVOLDEC               CONVERT TOTAL OF 5 LARGEST\n         MVC   EDITFLD,=X'4020202020202120'  MOVE IN EDIT MASK\n         ED    EDITFLD,DVOLDEC+4        EDIT VALUE\n         MVC   SHORT5XT,EDITFLD+3-1     COPY TO OUTPUT LINE\n         B     CALCRC\n         SPACE 2\nDISPLAY6 LA    R15,FREEMSG3             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         SPACE 2\nCALCRC   MVC   TOTAL,=H'4095'           SET TOTAL = 4095 (LARGEST)\n         C     R7,=F'4095'              COMPARE TOTAL TO 4095\n         BH    INCRVOL\n         STH   R7,TOTAL                 STORE TOTAL\n         B     INCRVOL\n         TITLE 'NO SPACE ON VOLUME'\n***********************************************************************\n*                                                                     *\n*              NO SPACE ON VOLUME                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOSPACE  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    NOSPACE2\n         MVC   SHORTTOT(29),VOLFULL+4   MOVE NO SPACE MESSAGE\n         B     INCRVOL\nNOSPACE2 LA    R15,VOLFULL              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         TITLE 'END OF UCB TABLE REACHED'\n***********************************************************************\n*                                                                     *\n*              END OF UCB TABLE REACHED                               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R8  - PDE POINTER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNOUCB    L     R3,0(R8)\n         CLI   0(R3),C'*'\n         BE    TSERONLY\n         CLI   FOUNDONE,1               ANY FOUND?\n         BE    NEXTONE                  YES, BRANCH\n         MVC   VOLSER,DVOLSER           SERIAL NOT FOUND - SET UP MSG\n         SPACE 2\n         CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRTNOSER\n         MVC   SHORTDCB(23),NOSER+13\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTONE\nPRTNOSER LA    R15,NOSER                LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTONE\nTSERONLY NC    SERONLY,SERONLY          TEST FOR SERONLY\n         BZ    RETURN\n         LA    R15,SHORTLIN             LOAD LINE ADDRESS\n         BAL   R2,PUTL                  DISPLAY LINE\n         B     RETURN\n         TITLE 'ERRORS'\n***********************************************************************\n*                                                                     *\n*              ERROR READING FORMAT 4 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRFMT4  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRNTFMT4\n         MVC   SHORTDCB(27),FMT4BAD+4\n         B     INCRVOL\nPRNTFMT4 LA    R15,FMT4BAD              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              ERROR READING FORMAT 5 DSCB                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRFMT5  CLC   OUTFORM,=H'2'            TEST OUTPUT FORMAT\n         BE    PRNTFMT5\n         MVC   SHORTDCB(27),FMT5BAD+4\n         B     INCRVOL\nPRNTFMT5 LA    R15,FMT5BAD              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     INCRVOL\n         EJECT\n***********************************************************************\n*                                                                     *\n*              UNABLE TO PARSE COMMAND OPERANDS                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nERRPARS  LA    R15,PARSERR              LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         LA    R15,0                    SET RETURN CODE\n         B     RETURN2\n         TITLE 'FINISHED PROCESSING VOLUME'\n***********************************************************************\n*                                                                     *\n*              FINISHED THIS VOLUME - GO TO NEXT VOLUME               *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        R8  - PDE POINTER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nINCRVOL  CLC   OUTFORM,=H'1'            TEST OUTPUT FORMAT\n         BNE   DISPLAY9\n         LA    R15,SHORTLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTVOL                  REPEAT FOR ALL MATCHES\n         SPACE 2\nDISPLAY9 LA    R15,BLANKLIN             LOAD OUTPUT LINE ADDRESS\n         BAL   R2,PUTL\n         B     NEXTVOL                  REPEAT FOR ALL MATCHES\n         SPACE 2\nNEXTONE  L     R8,8(R8)                 LOAD NEXT PDE ADDRESS\n         C     R8,=X'FF000000'          TEST FOR END OF LIST\n         BNE   NEXTPARM\n         B     RETURN\n         TITLE 'INDEXED VTOC INTERFACE'\n********************************************************************CST\n*                                                                   CST\n*  ROUTINES ADDED TO INTERFACE WITH INDEXED VTOCS.  THE FOLLOWING   CST\n*  STEPS ARE NEEDED                                                 CST\n*     1.  FIND UCB ADDRESS IN ORDER TO PASS UNIT ADDRESS TO         CST\n*         DYNAMIC ALLOCATE.                                         CST\n*     2.  DYNAMICALLY ALLOCATE VTOC                                 CST\n*     3.  OPEN VTOC                                                 CST\n*     4.  CALL IXTOFMT5 TO RETURN PSUEDO FORMAT-5S                  CST\n*     5.  CLOSE VTOC                                                CST\n*     6.  DEALLOCATE VTOC                                           CST\n* ZZZZ                                                              CST\n********************************************************************CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X I N I T                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  INITIALIZE FOR READING IX VTOC                                   CST\n*                                                                   CST\nIXINIT   XC    IXWORD,IXWORD           ZERO WORK WORD FOR 1ST CALL  CST\n         TM    VTOCINDS,DS4IVTOC       THIS VTOC INDEXED?           CST\n         BZR   R2                      IF NO, QUIT                  CST\n*                                                                   CST\n*  DYNALLOC VTOC                                                    CST\n*                                                                   CST\n         L     R1,UCBADDR              UCB ADDRESS                  ABL\n         USING UCB,R1                                               ABL\n*        MVC   IXKUNT+6(3),UCBNAME     SET UP DYNALOC UNIT.       ABL97\n*                         /1234                                   ABL97\n*                         ----1----+----2                         ABL97\n         MVC   IXKUNT+7(4),UCBTEXT     SET UP DYNALOC UNIT.       ABL97\n         CLI   IXKUNT+7,C' '  BLANK FIRST DIGIT?                  ABL97\n         BNE   USE4           NO, BRANCH                          ABL97\n         MVI   IXKUNT+5,3     RESET THE UCB LENGTH                ABL97\n         MVC   IXKUNT+6(3),IXKUNT+8  MOVE DOWN A 3 DIGIT UCB ADDR ABL97\nUSE4     DS    0H                                                 ABL97\n         MVC   IXKVOL+6(6),UCBVOLI     SET UP DYNALOC VOL.          ABL\n         DROP  R1                      DROP UCB ADDRESSING          ABL\n         LA    R1,AIX99RBA             POINT TO PARM LIST           CST\n         DYNALLOC                      CALL SVC99                   CST\n         LTR   R15,R15                 DID IT WORK?                 CST\n         BZ    *+8                     BIF YES                      CST\n         EX    0,*                     ELSE DIE                     CST\n*                                                                   CST\n* OPEN VTOC                                                         CST\n*                                                                   CST\n         MVC     IXDCB+DCBDDNAM(8),IXKDDN+6  MOVE DDNAME TO DCB     CST\n         RDJFCB  IXDCB                 READ IN JFCB                 CST\n         MVC   IXJFCB(44),=44XL1'04'   DSNAME FOR VTOC              CST\n         OPEN  (IXDCB,(INPUT)),TYPE=J  OPEN VTOC                    CST\n         TM    IXDCB+48,X'10'          DID IT WORK?                 CST\n         BOR   R2                      YES. ALL READY.              CST\n         EX    0,*                     NO. FAIL.                    CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X F M T 5                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  GET A PSUEDO FORMAT-5 FROM AN IX VTOC                            CST\n*                                                                   CST\nIXFMT5   TM    VTOCINDS,DS4IVTOC       VTOC IS INDEXED?             CST\n         BZ    4(,R2)                  IF NOT, SKIP                 CST\n         LA    R1,VTOCFMT5             POINT TO OUTPUT AREA         ABL\n         ST    R1,IXPARM+16            PASS TO IXTOFMT5 ROUTINE     ABL\n         LA    R1,IXPARM               POINT TO PARMLIST            CST\n         L     R15,=V(IXTOFMT5)        POINT TO ROUTINE             CST\n         BALR  R14,R15                 CALL INTERFACE ROUTINE       CST\n         LTR   R15,R15                 DID IT WORK?                 CST\n         BZR   R2                      IF SO, CONTINUE              CST\n         EX    0,*                     ELSE DIE.                    CST\n         SPACE 4                                                    CST\n********************************************************************CST\n*                                                                   CST\n*  I X T E R M                                                      CST\n*                                                                   CST\n********************************************************************CST\n*                                                                   CST\n*  CLOSE VTOC DCB AND FREE ALLOCATION                               CST\n*                                                                   CST\nIXTERM   TM    VTOCINDS,DS4IVTOC       VTOC IS INDEXED?             CST\n         BZR   R2                      IF NOT, SKIP                 CST\n*                                                                   CST\n*  CORRECT DSCB COUNT AND GET VIRS FOR STAFF                        CST\n*                                                                   CST\n         L     R1,IXCT1                USE DSCB 0 COUNT FROM IX     CST\n         STH   R1,MTDSCBS              UPDATE THE EMPTY COUNT       ABL\n         CLOSE IXDCB                   CLOSE THE VTOC               CST\n         MVC   IXKDDN2+6(8),IXKDDN+6   MOVE DDNAME TO DEALLOC LIST  CST\n         LA    R1,AIX99RBF             POINT TO PARMLIST            CST\n         DYNALLOC                      FREE VTOC                    CST\n         LTR   R15,R15                                              CST\n         BZR   R2                      RETURN                       CST\n         EX    0,*                     RETURN                       CST\n         EJECT ,                                                    CST\n*                                                                   CST\n*  PARMLIST FOR INTERFACE ROUTINE                                   CST\n*                                                                   CST\nIXPARM   DC    A(IXWORD)               @ WORK WORD                  CST\n         DC    A(IXDCB)                @ VTOC DCB                   CST\n         DC    A(IXCT1)                @ CNT - FREE FMT 0S          CST\n         DC    A(IXCT2)                @ CNT - FREE VIRS            CST\n         DC    A(VTOCFMT5-VTOCFMT5)    @ BFR FOR FMT5               CST\nIXWORD   DC    F'0'                    WORK WORD                    CST\nIXCT1    DC    F'0'                    COUNT FREE FMT0              CST\nIXCT2    DC    F'0'                    COUNT FREE VIRS              CST\n         SPACE 2                                                    CST\n*                                                                   CST\n*  PARMLIST FOR VTOC ALLOCATE                                       CST\n*                                                                   CST\n         PRINT GEN,DATA                                             CST\nAIX99RBA DC    0F'0',X'80',AL3(IX99RBAL)                            CST\nIX99RBAL DC    AL1(20,1)               LENGTH, VERB                 CST\n         DC    X'4000'                 FLAG1 (DON'T USE EXISTING)   CST\n         DC    AL2(0,0)                ERROR CODE, INFO CODE        CST\n         DC    A(IX99TXT1)             @ TEXT UNITS                 CST\n         DC    2F'0'                   RSVD, FLAG2                  CST\nIX99TXT1 DC    A(IXKDDN,IXKVOL,IXKUNT,IXKOLD)                       CST\n         DC    X'80',AL3(IXKKEP)                                    CST\nIXKDDN   DC    AL2(85,1,8),C'SYS99999' DDNAME ASSIGNED              CST\nIXKVOL   DC    AL2(16,1,6),C'XXXXXX'   VOL=SER=                     CST\nIXKUNT   DC    AL2(21,1,5),C'/ UCB'    UNIT=                      ABL97\nIXKOLD   DC    AL2(4,1,1),X'01'        DISP=OLD                     CST\nIXKKEP   DC    AL2(5,1,1),X'08'        DISP=KEEP                    CST\n         SPACE 4                                                    CST\n*                                                                   CST\n*  PARMLIST FOR VTOC DEALLOCATE                                     CST\n*                                                                   CST\nAIX99RBF DC    0F'0',X'80',AL3(IX99RBFR)                            CST\nIX99RBFR DC    AL1(20,2)               LENGTH, VERB                 CST\n         DC    X'0000'                 FLAG1                        CST\n         DC    AL2(0,0)                ERROR CODE, INFO CODE        CST\n         DC    A(IX99TXT2)             @ TEXT UNITS                 CST\n         DC    2F'0'                   RSVD, FLAG2                  CST\n         SPACE 2                                                    CST\nIX99TXT2 DC    A(IXKDDN2),X'80',AL3(IXKKEP)                         CST\nIXKDDN2  DC    AL2(1,1,8),C'SYS99999'  DDNAME ASSIGNED              CST\n         PRINT GEN,NODATA                                           CST\n         SPACE 4                                                    CST\n*                                                                   CST\n*  MISC CONSTANTS AND EQUATES                                       CST\n*                                                                   CST\nCVTILK2  EQU   40                      OFFSET TO LOOKUP TABLE       CST\nCVTUCBSE EQU   1076                    ADDRESS OF UCB SCAN SERVICE  ABL\nDCBDDNAM EQU   40                      OFFSET TO DDNAME             CST\n         SPACE 2                                                    CST\n*                                                                   CST\n*  DCB AND JFCB FOR VTOC                                            CST\n*                                                                   CST\nIXLST    DC    0F'0',X'87',AL3(IXJFCB)                              CST\nIXJFCB   DC    XL176'00'                                            CST\n         PRINT NOGEN                                                CST\nIXDCB    DCB   DSORG=PS,MACRF=(E),EXLST=IXLST,DDNAME=NONE           CST\n         PRINT GEN                                                  CST\n         SPACE 4                                                    CST\n         TITLE 'EXIT CODING'\n***********************************************************************\n*                                                                     *\n*              FREE STORAGE, SET RETURN CODE, AND RETURN              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nRETURN   IKJRLSA DVOLANS                RELEASE PARSE STORAGE\n         TM    FLAGS2,$HARDCPY         TEST FOR HARDCOPY OPTION\n         BZ    $$EXIT2                 SKIP CLOSE HARDCOPY NOT OPEN\n         LA    R1,HARDOPEN             LOAD OPEN LIST FORM ADDRESS\n         LA    R2,HARDCPY              LOAD DCB ADDRESS\n         CLOSE ((R2)),MF=(E,(R1))      CLOSE HARDCPY DCB\n$$EXIT2  DS    0H\n         LH    R15,TOTAL                SAVE 5 LARGEST EXTENTS TOTAL\nRETURN2  $RTRN RC=(R15),RENT=DSECTLEN   RETURN\n         TITLE 'DISPLAY OUTPUT SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*              DISPLAY OUTPUT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPUTL     LH    R3,0(R15)                LOAD DATA LENGTH\n         BCTR  R3,0                     BRANCH ON COUNT\n         EX    R3,MOVELINE              MOVE DATA TO OUTPUT LINE\n         CLC   NOPRINT,=H'2'            SEE IF OUTPUT SUPPRESSED\n         BE    PUTLHPDS\n         PUTLINE OUTPUT=(DVOLHEDR,,,DATA),MF=(E,DVOLIOPL)\nPUTLHPDS ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS\n         BZ    NOTPDS                  NO\n         LA    R1,OUTLINE-1            OUTPUT LINE\n         BALR  R14,R15                 INVOKE THE PDS OUTPUT ROUTINE\n         LTR   R15,R15                 SUCCESSFUL OUTPUT?\n         BNZ   RETURN                  NO, **ATTENTION** EXIT\nNOTPDS   DS    0H\nPUTLHCPY TM    FLAGS2,$HARDCPY          SEE IF HARCOPY WANTED\n         BZ    PUTLBACK                 NO, SO GO ON BACK\n         PUT   HARDCPY,OUTLINE          WRITE OUTPUT LINE\n         MVC   OUTLINE,BLANKS           CLEAR OUTPUT LINE\nPUTLBACK BR    R2\n         TITLE 'DCB EXIT ROUTINE'\n***********************************************************************\n*                                                                     *\n*              DCB EXIT ROUTINE (INITIALIZE LRECL AND BLKSIZE)        *\n*                                                                     *\n***********************************************************************\nEXITDCB  DC    0F'0',X'85',AL3(DCBEXIT)\nDCBEXIT  LA    R15,80                     DEFAULT LRECL\n         LH    R0,82(,R1)                 LRECL\n         LTR   R0,R0                      ANY LRECL\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,82(,R1)                NO, USE THE DEFAULT\n         LA    R15,3120                   DEFAULT BLKSIZE\n         LH    R0,62(,R1)                 BLKSIZE\n         LTR   R0,R0                      ANY BLKSIZE\n         BNZ   *+8                        YES, BRANCH\n         STH   R15,62(,R1)                NO, USE THE DEFAULT\n         BR    R14                        EXIT\n         TITLE 'CONSTANT DATA AREAS'\n***********************************************************************\n*                                                                     *\n*              LITERAL POOL                                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*              CONSTANT STORAGE                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nFMT4BAD  #TSOMSG 'ERROR READING FORMAT 4 DSCB',LENGTH=80\n         SPACE\nFMT5BAD  #TSOMSG 'ERROR READING FORMAT 5 DSCB',LENGTH=80\n         SPACE\nVOLFULL  #TSOMSG 'VOLUME CONTAINS NO FREE SPACE',LENGTH=80\n         SPACE\nPARSERR  #TSOMSG 'UNABLE TO INTERPRET COMMAND',LENGTH=80\n         SPACE\nDOS      #TSOMSG '*** WARNING - VOLUME MAY CONTAIN DOS DATA SETS',     +\n               LENGTH=80\n         SPACE\nUNITTBL  DC      C'??????????????????????  9345????????'\n         DC      C'2305-12305-22314  3330  3340  3350  '\n         DC      C'3375  3330-13380  3390  '\n         SPACE\nDAMAGED  #TSOMSG '*** WARNING - VTOC DAMAGE BIT IS SET.  PLEASE NOTIFY +\n               YOUR SYSTEMS PROGRAMMER',LENGTH=80\n         SPACE\nSHORT1   #TSOMSG 'SERIAL  --UNIT--   ATTRIBUTES VSAM AVAIL -----TOTALS-+\n               ---- LARGEST-EXTENT 5 EXTS',LENGTH=80\nSHORT2   #TSOMSG '       ADDR TYPE   MOUNT/USE      DSCBS TRACKS  EXT  +\n               CYL  CYL+TR  TRACKS TRACKS',LENGTH=80\n         SPACE\nBLANKLIN #TSOMSG ' ',LENGTH=80\nBADOPEN  #TSOMSG   'UNABLE TO OPEN HARDCOPY DCB - HARDCOPY CANCELLED', +\n               LENGTH=80\n         SPACE\nFLAGS2   DS    X                         HARDCOPY OPTION SWITCH\n$HARDCPY EQU   X'10'  ...1 ....          HARDCOPY OPTION REQUESTED\n*                     XXX. XXXX          NOT USED\n         SPACE\nDSNAME   DC    44X'04'\n         EJECT\n***********************************************************************\n*                                                                     *\n*              PUTLINE, CAMLST, AND MESSAGE MODELS                    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSHORTMDL #TSOMSG ' ',LENGTH=80\nSHORTLEN EQU   *-SHORTMDL\n         SPACE 2\nMODELS1  PUTLINE MF=L\n         CAMLST SEARCH,*-*,*-*,*-*\n         CAMLST SEEK,*-*,*-*,*-*\nMODLEN1  EQU   *-MODELS1\n         SPACE 2\nMODELS2  #TSOMSG 'VOLUME SERIAL = XXXXXX     UNIT = XXX     TYPE = XXXX+\n               XX',LENGTH=80\n         #TSOMSG 'STATUS: REMOVABLE           UNALLOCATED  OFFLINE',   +\n               LENGTH=80\n         SPACE\n         #TSOMSG 'VSAM: OWNERSHIP - OFF   TIMESTAMPS - ................+\n               /................',LENGTH=80\n         SPACE\nMODLEN2  EQU   *-MODELS2\n         SPACE 2\nMODELS3  #TSOMSG 'FREE SPACE IS XXXXX TRACKS IN XXXX EXTENTS INCLUDING +\n               XXXX FULL CYLINDERS',LENGTH=80\n         SPACE\n         #TSOMSG 'LARGEST EXTENTS ARE: /CYL+TR/',LENGTH=80\n         SPACE\n         #TSOMSG '                     /TRACKS/',LENGTH=80\n         SPACE\nMODLEN3  EQU   *-MODELS3\n         SPACE 2\nMODELS4  #TSOMSG 'VTOC CONTAINS XXXX BLANK DSCB''S',LENGTH=80\n         SPACE\n         #TSOMSG 'XXXXXX - VOLUME OR UCB NOT FOUND',LENGTH=80\n         SPACE 1\n         #TSOMSG 'INDEXED VTOC CONTAINS XXXX FREE VIR''S',LENGTH=80\n         SPACE\nMODLEN4  EQU   *-MODELS4\n         EJECT\n***********************************************************************\nHARDDCB  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\n         OPEN  (,),MF=L\nHARDLEN  EQU   *-HARDDCB\n***********************************************************************\nHARDCPY  DCB   DDNAME=X,               WILL BE REPLACED AT EXEC TIME   +\n               MACRF=PM,                                               +\n               DSORG=PS,                                               +\n               RECFM=FB,                                               +\n               EXLST=EXITDCB                                  ABL FEB87\nHARDOPEN OPEN  (,),MF=L\n         EJECT\n***********************************************************************\n*                                                                     *\n*              INSTRUCTIONS TO BE EXECUTED BY EXECUTE INSTRUCTIONS    *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nMOVENAME MVC   0(0,R2),0(R4)            MOVE HARDCOPY DDNAME\nMOVELINE MVC   DVOLHEDR(0),0(R15)       MOVE PRINT TO OUTPUT LINE\nMOVESER  MVC   DVOLSER(0),0(R3)         COPY VOLUME SERIAL\nMOVEXTNT MVC   LARGE5(0),LARGE5+10      COPY EXTENT ENTRIES\nFMT5ADDR LA    R6,DS5EXT01              LOAD EXTENT DESCRIPTION ADDRESS\n         LA    R6,DS5EXT02\n         LA    R6,DS5EXT03\n         LA    R6,DS5EXT04\n         LA    R6,DS5EXT05\n         LA    R6,DS5EXT06\n         LA    R6,DS5EXT07\n         LA    R6,DS5EXT08\n         LA    R6,DS5EXT09\n         LA    R6,DS5EXT10\n         LA    R6,DS5EXT11\n         LA    R6,DS5EXT12\n         LA    R6,DS5EXT13\n         LA    R6,DS5EXT14\n         LA    R6,DS5EXT15\n         LA    R6,DS5EXT16\n         LA    R6,DS5EXT17\n         LA    R6,DS5EXT18\n         LA    R6,DS5EXT19\n         LA    R6,DS5EXT20\n         LA    R6,DS5EXT21\n         LA    R6,DS5EXT22\n         LA    R6,DS5EXT23\n         LA    R6,DS5EXT24\n         LA    R6,DS5EXT25\n         LA    R6,DS5EXT26\n*\nFMT7ADDR LA    R6,DS7EXTNT              LOAD EXTENT DESCRIPTION ADDRESS\n         LA    R6,DS7EXTNT+8\n         LA    R6,DS7EXTNT+16\n         LA    R6,DS7EXTNT+24\n         LA    R6,DS7EXTNT+32\n         LA    R6,DS7ADEXT\n         LA    R6,DS7ADEXT+8\n         LA    R6,DS7ADEXT+16\n         LA    R6,DS7ADEXT+24\n         LA    R6,DS7ADEXT+32\n         LA    R6,DS7ADEXT+40\n         LA    R6,DS7ADEXT+48\n         LA    R6,DS7ADEXT+56\n         LA    R6,DS7ADEXT+64\n         LA    R6,DS7ADEXT+72\n         LA    R6,DS7ADEXT+80\n         TITLE 'PARSE CONTROL BLOCKS'\n***********************************************************************\n*                                                                     *\n*              PARSE CONTROL BLOCKS                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDVOLPCL  IKJPARM DSECT=DVOLPDL\nVOL      IKJIDENT 'VOLUME SERIAL',                                     +\n               ASTERISK,                                               +\n               LIST,                                                   +\n               MAXLNTH=6,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               DEFAULT='*'\nOUTFORM  IKJKEYWD DEFAULT='SHORT'\n         IKJNAME  'SHORT'\n         IKJNAME  'LONG'\nNOHEADER IKJKEYWD DEFAULT='HEADER'\n         IKJNAME  'HEADER'\n         IKJNAME  'NOHEADER'\nNOPRINT  IKJKEYWD\n         IKJNAME  'PRINT'\n         IKJNAME  'NOPRINT'\nSERONLY  IKJKEYWD\n         IKJNAME  'SERONLY',INSERT='NOHEADER'\nHARDCOPY IKJKEYWD\n         IKJNAME  'HARDCOPY',SUBFLD=DDNSUB\nDDNSUB   IKJSUBF\nDDNAME   IKJIDENT 'DDNAME',                                            +\n               MAXLNTH=8,                                              +\n               FIRST=ALPHANUM,                                         +\n               OTHER=ALPHANUM,                                         +\n               PROMPT='DDNAME FOR HARDCOPY OUTPUT'\n         IKJENDP\n         TITLE 'UCB MAP'\n***********************************************************************\n*                                                                     *\n*              UCB MAP                                                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         PRINT NOGEN\nUCB      DSECT\n         IEFUCBOB\n         PRINT GEN\n         SPACE 3\n         AIF  ('&OPSYSTM' EQ 'MVS112').MVSEQU\n         AIF  ('&OPSYSTM' EQ 'MVS113').MVSEQU\nDVOLFLGA EQU  UCBFL1\nDVOLFLGB EQU  UCBFL5\nDVOLNRDY EQU  UCBNOTRD\n         AGO  .WORK\n.MVSEQU  ANOP\nDVOLFLGA EQU  UCBFLA\nDVOLFLGB EQU  UCBFLC\nDVOLNRDY EQU  UCBNRY\n.WORK    ANOP\n         TITLE 'WORK AREA'\n***********************************************************************\n*                                                                     *\n*                       WORK AREA DSECT                               *\n*                                                                     *\n***********************************************************************\nDVOLDS   DSECT\nSAVEAREA DC    18F'0'\nWORKAREA DS    XL16\nDVOLDEC  DS    D\nEDITFLD  DC    X'4020202020202120'\nSERPTR   DS    A                        ADDRESS OF SERIAL FIELD\nMODLINE  DC    H'84,0'\nBLANKS   DC    CL80' '\nVTOCFMT4 DS    0D,148C\nVTOCFMT5 EQU   VTOCFMT4\nVTOCFMT7 EQU   VTOCFMT4\nDVOLCCHH DS    XL5\nDVOLHEDR DS    H,H\nOUTLINE  DS    CL80\nVTOCINDS DS    X\nFOUNDONE DS    X\nMTDSCBS  DS    H\nSTARTC   DS    F                  STARTING TRACK\nSTARTT   DS    F                  STARTING CYLINDER\nTOTALC   DS    F                  TOTAL CYLINDERS\nTOTALT   DS    F                  TOTAL TRACKS\nLARGE5   DS    XL50\nHALF     DS    H\nTRKPRCYL DS    H\nTOTAL    DS    H\nUCBADDR  DS    A\nUCBTABLE DS    A\nUCBNEXT  DS    A\nUCBPARMS DS    4A             PARMS FOR UCB SCAN SERVICES       ABL-410\nUCBANSR  DS    A\nUCBTEXT  DS    A              UCB FOUR CHARACTER NAME             ABL97\n         DS    0D\nUCBWORK  DS    CL216          UCB SCAN WORK AREA                ABL-410\n         DS    0D\nPDSMSGA  DC    F'0'\nDVOLECB  DC    F'0'\n         SPACE\nDVOLPPL  DS    0F\n         ORG   *+PPLLEN\n         SPACE\nDVOLIOPL DS    0F\n         ORG   *+IOPLLEN\n         SPACE\nDVOLANS  DS    A\n         SPACE\nDVOLPTPB PUTLINE MF=L\n         SPACE\nDVOLDCB4 CAMLST SEARCH,0,0,0\n         SPACE\nDVOLDCB5 CAMLST SEEK,0,0,0\n         SPACE\nLINE1    #TSOMSG ' ',LENGTH=80\n         SPACE\nLINE2    #TSOMSG ' ',LENGTH=80\n         SPACE\nLINE3    #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG1 #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG2 #TSOMSG ' ',LENGTH=80\n         SPACE\nFREEMSG3 #TSOMSG ' ',LENGTH=80\n         SPACE\nBLDSCBS  #TSOMSG ' ',LENGTH=80\n         SPACE\nNOSER    #TSOMSG ' ',LENGTH=80\n         SPACE\nBLDSVIR  #TSOMSG ' ',LENGTH=80\n         SPACE 2\nSHORTLIN #TSOMSG ' ',LENGTH=80\n         SPACE\nADDRDCE  DS    A              UCB DCE POINTER                   ABL-410\nSRVUCBDC DS    CL128          UCB SAVE AREA FOR UCB DCE AREA    ABL-410\nSRVUCBUC DS    CL48           UCB SAVE AREA FOR UCB COPY AREA   ABL-410\nSRVUCBIC DS    CL48           UCB SAVE AREA FOR UCB TOKEN       ABL-410\nDSECTLEN EQU   *-DVOLDS\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*              OUTPUT LINE EQUIVALENCES                               *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG    LINE1\n         DC    H'84,0',C'VOLUME SERIAL = '\nDVOLSER  DC    CL6'XXXXXX'\n         DC    C'     UNIT = '\nUNITADDR DC    CL4'XXXX'                                          ABL97\n         DC    C'    TYPE = '                                     ABL97\nUNITTYPE DC    CL6'XXXXXX'\n         SPACE\n         ORG   LINE2\n         DC    H'84,0',C'STATUS: '\nMNTSTAT  DC    CL9'REMOVABLE'\n         DC    CL2' '\nUSESTATS DC    CL7'XXXXXXX'\n         DC    CL2' '\nALLOCATD DC    CL11'XXXXXXXXXXX'\n         DC    CL2' '\nONOFF    DC    CL17'OFFLINE'\n         DC    CL2' '\nUNLOAD   DC    CL17'XXXXXXXXXXXXXX'\n         SPACE\n         ORG   LINE3\n         DC    H'84,0',C'VSAM: OWNERSHIP - '\nOWNERSHP DC    CL3'OFF'\n         DC    C'   TIMESTAMPS - '\nTIMEST1  DC    CL16' '\n         DC    C'/'\nTIMEST2  DC    CL16' '\n         ORG   FREEMSG1\n         DC    H'84,0',C'FREE SPACE IS'\nTRACKS   DC    CL6' XXXXX'\n         DC    C' TRACKS IN'\nEXTENTS  DC    CL5' XXXX'\n         DC    C' EXTENTS INCLUDING'\nCYLS     DC    CL5' XXXX'\n         DC    C' FULL CYLINDERS'\n         SPACE\n         ORG   FREEMSG2\n         DC    H'84,0',C'LARGEST EXTENTS ARE: / CYL+TR/'\nLRGXTNT1 EQU   *\n         SPACE\n         ORG   FREEMSG3\n         DC    H'84,0',C'                     / TRACKS/'\nLRGXTNT2 EQU   *\n         SPACE\n         ORG   BLDSCBS\n         DC    H'84,0',C'VTOC CONTAINS'\nDSCBS    DC    CL5' XXXX'\n         DC    C'BLANK DSCB''S'\n         DC    CL48' '\n         SPACE\n         ORG   NOSER\n         DC    H'84,0'\nVOLSER   DC    CL6'XXXXXX'\n         DC    C' - VOLUME OR UCB NOT FOUND'\n         DC    CL48' '\n         SPACE\n         ORG   BLDSVIR\n         DC    H'84,0',C'INDEXED VTOC CONTAINS'\nDSCBVIR  DC    CL5' XXXX'\n         DC    C'FREE VIR''S'\n         DC    CL42' '\n         SPACE 2\n         ORG   SHORTLIN\n         DS    H,H\nSHORTSER DS    CL6\n         DS    CL1\nSHORTUNT DS    CL4                                                ABL97\n         DS    CL1\nSHORTTYP DS    CL6\n         DS    CL1\nSHORTMNT DS    CL6\nSHORTSLA DS    CL1\nSHORTUSE DS    CL4\n         DS    CL1\nSHORTVSM DS    CL2                                                ABL97\n         DS    CL1\nSHORTDCB DS    CL5\n         DS    CL1\nSHORTTOT DS    CL6\nSHORTEXT DS    CL5\nSHORTCYL DS    CL5\nSHORT1CL DS    CL5\n         DC    C'+'\nSHORT1TR DS    CL2\n         DS    CL1\nSHORTLRG DS    CL6\n         DS    CL1\nSHORT5XT DS    CL6\n         TITLE 'FORMAT 4 DSCB MAP'\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 4 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT4-44\n         #VTCFMT4\n         TITLE 'FORMAT 5 DSCB MAP'\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 5 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT5\n         #VTCFMT5\n***********************************************************************\n*                                                                     *\n*              DESCRIPTION OF FORMAT 7 DSCB                           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ORG   VTOCFMT7\n         #VTCFMT7\n         CVT   DSECT=YES\n         END\n//*\n//ASM2  EXEC  PGM=IEV90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,NOSTMT,\n//             'XREF(SHORT),BUFSIZE(MAX)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR,DCB=BLKSIZE=23440\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&Y,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\n         TITLE 'IXTOFMT5 -- INDEXED VTOC FORMAT-5 INTERFACE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* 05/25/94  ADDED SUPPORT FOR 3390M9 DISK DEVICES BY MODIFYING    ABL *\n*           THE IXTOFMT5 ROUTINE TO RETURN FORMAT 7 DSCB RECORDS  ABL *\n*           (INSTEAD OF FORMAT 5) IF &MODEL9 IS 'YES'.            ABL *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         MACRO\n         #VTCFMT7\n         MNOTE *,'       #VTCFMT7                                  ABL'\n.**********************************************************************\n.*                                                                    *\n.* #VTCFMT7                                                           *\n.*                                                                    *\n.* FUNCTION         CONSTRUCT A DSECT FOR A FORMAT 7 DSCB.            *\n.*                                                                    *\n.* DESCRIPTION      ASSIGN SYMBOLIC NAMES TO THE FIELDS IN A FORMAT 7 *\n.*                  DATA SET CONTROL BLOCK (DSCB).  THE FIELD NAMES   *\n.*                  CORRESPOND TO THE NAMES IN THE DATA AREAS MANUAL. *\n.*                  A FORMAT 7 DSCB DESCRIBES VOLUME FREE SPACE.      *\n.*                                                                    *\n.* SYNTAX                    #VTCFMT7                                 *\n.*                                                                    *\n.* ERRORS           NO ERRORS ARE INDICATED.                          *\n.*                                                                    *\n.* EXAMPLE                   ORG   FMT7DSCB    ORG TO DATA AREA       *\n.*                           #VTCFMT7                                 *\n.*                                                                    *\n.**********************************************************************\n         SPACE 2\nDS7KEYID DS    XL4                     KEY X'07070707'\nDS7EXTNT DS    5XL8                    SPACE FOR 5 EXTENT DESCRIPTIONS\nDS7FMTID DS    X                       FORMAT IDENTIFIER\nDS7ADEXT DS    11XL8                   SPACE FOR 11 EXTENT DESCRIPTIONS\n         DS    XL2                     RESERVED\nDS7PTRDS DS    XL5                     POINTER TO NEXT FORMAT 7 DSCB\nDS7END   EQU   *                       END OF DSCB7\n         MEND\n         SPACE 3\n         LCLC  &MODEL9\n&MODEL9  SETC  'YES'                   3390M9 IS SUPPORTED\n*&MODEL9  SETC  'NO'                    3390M9 IS NOT SUPPORTED\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n*SOURCE -- CBT TAPE FILE 149, VERSION 227\n***********************************************************************\n*\nIXTOFMT5 CSECT\n*\n*  THIS ROUTINE USES THE CVAF SERVICE ROUTINES TO CONVERT THE\n*  FREE SPACE BIT MAP OF AN INDEXED VTOC INTO PSUEDO FORMAT-5\n*  DSCBS.  THIS PROVIDES A COMPATIBILITY INTERFACE FUNCTION FOR\n*  PRE-DFDS ROUTINES WHICH EXAMINE FORMAT-5 DSCBS.\n*\n*  THIS ROUTINE IS CALLED ONCE FOR EACH FORMAT-5 WHICH MUST BE\n*  BUILT.  THE INDEX RECORD BUFFER RETURNED BY CVAF IS SAVED SO\n*  THAT NO ADDITIONAL I/O NEED BE DONE FOR SUCCEEDING CALLS.  THE\n*  BUFFERS ARE FREED WHEN THE LAST FORMAT-5 DSCB IS RETURNED.\n*  HENCE, THIS ROUTINE SHOULD BE CALLED UNTIL A FORMAT-5 DSCB WITH\n*  DS5PTRDS EQUAL TO ZERO IS RETURNED.  THE NON-ZERO VALUE IN\n*  DS5PTRDS WILL ALWAYS BE C'00001'.  NO ENQUEUE ON THE VTOC IS\n*  PERFORMED.\n*\n*  INPUT:    R1 -->  (PARMLIST)\n*                    A(WORD) -- ADDR OF A FULLWORD USED BY THIS\n*                               ROUTINE.  MUST BE ZEROED FOR FIRST\n*                               CALL AND RETURNED UNALTERED THEREAFTER.\n*                    A(DCB)  -- ADDR OF A DCB OPENED TO THE DESIRED\n*                               VTOC.  NO I/O MAY BE OUTSTANDING TO\n*                               THIS DCB.  AN APF-AUTHORIZED CALLER\n*                               MAY PASS A COMPLIMENTED UCB ADDRESS\n*                               INSTEAD.\n*                    A(COUNT1)- ADDR OF FULLWORD WHERE COUNT OF THE\n*                               FREE (FMT 0) DSCBS WILL BE RETURNED.\n*                    A(COUNT2)- ADDR OF FULLWORD WHERE COUNT OF THE\n*                               FREE VIRS WILL BE RETURNED.\n*                    A(FMT5) -- ADDR OF 140-BYTE AREA FOR FORMAT-5\n*                               DSCB BUILT BY THIS ROUTINE.\n*\n*  RETURN CODES:\n*            R15  = 0   ALL OK.\n*            R15  = 4   VTOC IS NOT IN INDEXED FORMAT.\n*            R15  = 8   CVAFTST CALL FAILED (OTHER THAN NOT INDEXED\n*                       FORMAT VTOC).  CVAFTST RC IN REG 0.\n*            R15  = 12  CVAFDSM CALL FAILED (OTHER THAN NON INDEXED\n*                       FORMAT VTOC).  CVAFDSM RC IN HIGH ORDER BYTE\n*                       OF R0. CVSTAT IN LOW ORDER BYTE OF R0.\n*            R15  = 16  (UNUSED)\n*            R15  = 20  LOGIC ERROR IN THIS ROUTINE.  R0 = OFFSET.\n*\n*\n*  ATTRIBUTES -  REENTRANT, PROBLEM STATE, PROBLEM KEY.\n*                THIS ROUTINE WILL WORK CORRECTLY ON A NON DFDS\n*                SYSTEM.  HOWEVER, DFDS MACROS ARE REQUIRED FOR\n*                ASSEMBLY.\n*\n*  WRITTEN BY: CHRIS THOMAS, UCLA/OAC SYSTEMS GROUP, 5/30/81\n*\n***********************************************************************\n         TITLE 'IXTOFMT5 -- MAINLINE ROUTINE'\n*\n*  INITIALIZATION\n*\n         SAVE  (14,12),,IXTOFMT5-VERSION_1.0   SAVE REGS\n         LR    R12,R15            ESTABLISH BASE\n         USING IXTOFMT5,R12\n         LR    R9,R13             SAVE CALLER'S R13\n         LR    R11,R1             SAVE CALLER'S PARM POINTER\n         USING PARMLIST,R11\n         L     R1,PARMWORD        POINT TO ANCHOR WORD\n         ICM   R13,B'1111',0(R1)  GET MY WORKAREA ANCHOR\n         BNZ   SKIPGET            IF NON-ZERO, CALL FOR NEXT FMT5\n*\n*  GET WORKAREA AT FIRST CALL\n*\n         GETMAIN  RU,LV=WORKLEN,SP=0\n         LR    R13,R1             ESTABLISH WORKAREA\n         USING WORKAREA,R13\n         L     R1,PARMWORD        ADDR OF ANCHOR\n         ST    R13,0(,R1)         SAVE FOR SUBSEQUENT CALLS\n         LR    R0,R13             ADDR FOR MVCL\n         LA    R1,WORKLEN         LENGTH FOR MVCL\n         SR    R3,R3              ZERO FILL BYTE\n         MVCL  R0,R2              ZERO WORKAREA\n*\n*  CHAIN SAVEAREAS\n*\nSKIPGET  ST    R9,SAVEAREA+4      SAVE CALLER'S R13\n         ST    R13,8(,R9)         FORWARD CHAIN\n         NC    SAVEEXT,SAVEEXT    CALL FOR FIRST FMT5?\n         BNZ   GETNEXT5           NO. RETURN NEXT FMT5\n*\n*  DETERMINE IF THIS IS A DCB FOR DASD WITH INDEXED VTOC\n*\nTST      L     R2,PARMDCB         POINT TO PASSED DCB\n         LCR   R3,R2              MAYBE UCB INSTEAD\n         BNM   UCBPASS            TREAT MINUS AS UCB\n         L     R2,DCBDEBAD-IHADCB(,R2)   GET DEB FROM DCB PASSED\n         ST    R2,DEBADDR         SAVE FOR LATER (ZERO IF UCB)\n         ICM   R3,B'0111',(DEBUCBA-DEBDASD)+(DEBBASND-DEBBASIC)(R2)    *\n                                  GET UCB ADDR FROM DEB\n         B     TESTIT             LEAVE UCB ZERO IF DEB PASSED\nUCBPASS  ST    R3,UCBADDR\nTESTIT   CVAFTST  UCB=(R3)\n         B     *+4(R15)\n         B     UNINDXD            RC = 0   DFDS NOT ON SYSTEM\n         B     UNINDXD            RC = 4   VOL IS NOT INDEXED\n         B     GOODIX             RC = 8   INDEXED. ALL OK.\n         B     TSTERROR           RC = 12  NO VOL MOUNTED, ETC.\n         B     TSTERROR           RC = 16  BAD UCB (NOT DASD, ETC)\n*\n*  CALL CVAFDSM FOR NUMBER OF FREE DSCBS\n*\nGOODIX   L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         MVC   CVPL(LENCVPL),CVPLMFL\n         CVAFDSM  MF=(E,CVPL),    GET COUNT1                           *\n               ACCESS=MAPDATA,                                         *\n               MAP=VTOC,                                               *\n               COUNT=YES,                                              *\n               MAPRCDS=YES,                                            *\n               DEB=(2),                                                *\n               CTAREA=COUNT1\n         B     *+4(R15)\n         B     GOODCT1            RC = 0   SUCCESSFUL\n         B     CHECKEND           RC = 4   END OF DATA, OR ERROR  DRK\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n***********************************************************************\n*                                                                     *\n* 06/28/88  HANDLE NO FREE DSCBS CONDITION WHEN CVAFDSM PASSES    DRK *\n*           RETURN CODE = 4 AND STAT032 (END OF DATA)             DRK *\n*                                                                     *\n*                                                                 DRK\n*  IF RC=4, SEE IF ERROR OR NO FREE DSCB'S                        DRK\n*                                                                 DRK\n***********************************************************************\nCHECKEND CLI   CVSTAT,STAT032     END OF DATA?                    DRK\n         BNE   DSMERROR           NO, OTHER ERROR                 DRK\n*\n*  RETURN COUNT OF FREE DSCBS\n*\nGOODCT1  L     R1,PARMCT1         @ COUNT1\n         MVC   0(4,R1),COUNT1     RETURN COUNT1\n*\n*  SAVE INDEX BUFFERS FOR SUCCEEDING FUNCTIONS\n*\n         L     R1,CVMRCDS               GET ADDR OF BUFFERS\n         ST    R1,BUFLIST               SAVE FOR LATER\n*\n*  CALL CVAFDSM FOR NUMBER OF FREE INDEX BLOCKS (VIRS)\n*\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(LENCVPL),CVPLMFL\n         CVAFDSM  MF=(E,CVPL),    GET COUNT1                           *\n               ACCESS=MAPDATA,                                         *\n               MAP=INDEX,                                              *\n               COUNT=YES,                                              *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               CTAREA=COUNT2\n         B     *+4(R15)\n         B     RETCT2             RC = 0   SUCCESSFUL\n         B     DSMERROR           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  RETURN COUNT OF FREE VIRS\n*\nRETCT2   L     R1,PARMCT2         @ COUNT2\n         MVC   0(4,R1),COUNT2     RETURN COUNT2\n         XC    SAVEEXT,SAVEEXT    BEGIN FMT5S AT THE BEGINNING\n         AIF   ('&MODEL9' EQ 'YES').YESM9\n*\n*  GET 26 FREE EXTENTS.  (ASK FOR 27 TO SIMPLIFY EOD LOGIC).\n*\nGETNEXT5 MVC   EXTS(L'DS5AVEXT),SAVEEXT  SET UP STARTING POINT\n         MVI   NUMEXTS,27\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(LENCVPL),CVPLMFL\n         CVAFDSM  MF=(E,CVPL),    GET EXTENTS                          *\n               ACCESS=MAPDATA,                                         *\n               MAP=VOLUME,                                             *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               EXTENTS=EXTABL\n         B     *+4(R15)\n         B     NOERROR            RC = 0   SUCCESSFUL\n         B     CHECKEOD           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  IF RC=4, SEE IF ERROR OR END OF EXTENTS\n*\nCHECKEOD CLI   CVSTAT,STAT032     END OF DATA?\n         BNE   DSMERROR           NO, OTHER ERROR\n*\n*  USE 26 (OR FEWER) EXTENTS RETURNED TO BUILD PSUEDO FORMT-5\n*\nNOERROR  L     R10,PARMFMT5       ADDR FOR GENERATED FMT5\n         USING IECSDSF5,R10\n         MVC   DS5KEYID,F5ID      SET KEY\n         MVC   DS5AVEXT(L'DS5AVEXT+L'DS5EXTAV),EXTS  MOVE IN EXTS\n         MVI   DS5FMTID,C'5'      SET DSCB ID\n         MVC   DS5MAVET,EXTS+L'DS5AVEXT+L'DS5EXTAV MOVE REMAINING\n         XC    DS5PTRDS,DS5PTRDS  ZERO CHAIN PTR\n         NC    EXT27,EXT27        IS 27TH EXT ZERO? (1ST IN NEXT FMT5)\n         BZ    CLEANUP            GO CLEANUP. ALL DONE.\n         MVC   DS5PTRDS,NZPTR     MAKE PUSEDO CHAIN POINTER\n         MVC   SAVEEXT(5),DS5MAVET+L'DS5MAVET-L'DS5AVEXT  SAVE THE     *\n                                  LAST EXTENT FOR NEXT FORMAT 5\n         B     RETURN\n         DROP  R10\n         AGO   .NOM9A\n.YESM9   ANOP\n*\n*  GET 16 FREE EXTENTS.  (ASK FOR 17 TO SIMPLIFY EOD LOGIC).\n*\nGETNEXT5 MVC   DT2ENTRY(16),SAVEEXT      SET UP STARTING POINT\n         L     R2,DEBADDR\n         MVC   CVUCB,UCBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(LENCVPL),CVPLMFL\n         MVC   DT2X7EYE,=C'ICVEDT02'     IDENTIFIER FOR CONTROL BLOCK\n         MVC   DT2ENTNM,=F'17'           NUMBER OF EXTENTS TO RETRIEVE\n***   IF YOU GET ASSEMBLY ERRORS ON THE FOLLOWING MACRO, YOUR SYSTEM\n***   PROBABLY DOES NOT HAVE SUPPORT FOR 3390M9 (FAT DASD) DEVICES.\n***   YOU SHOULD CHANGE THE VALUE OF &MODEL9 AS EXPLAINED ABOVE.\n         CVAFDSM  MF=(E,CVPL),    GET EXTENTS                          *\n               ACCESS=MAPDATA,                                         *\n               MAP=VOLUME,                                             *\n               MAPRCDS=(YES,(3)),                                      *\n               DEB=(2),                                                *\n               RTA4BYTE=YES,                                           *\n               EXTENTS=RTATBL\n         B     *+4(R15)\n         B     NOERROR            RC = 0   SUCCESSFUL\n         B     CHECKEOD           RC = 4   END OF DATA, OR ERROR\n         B     DSMERROR           RC = 8   INVALID VTOC INDEX\n         B     DSMERROR           RC = 12  CVAF PARM LIST ERROR\n         B     DSMERROR           RC = 16  DASD I/O ERROR\n*\n*  IF RC=4, SEE IF ERROR OR END OF EXTENTS\n*\nCHECKEOD CLI   CVSTAT,STAT032     END OF DATA?\n         BNE   DSMERROR           NO, OTHER ERROR\n*\n*  USE 16 (OR FEWER) EXTENTS RETURNED TO BUILD PSUEDO FORMT-7\n*\nNOERROR  L     R10,PARMFMT5       ADDR FOR GENERATED FMT5 (FMT7 NOW)\n         USING IECSDSF7,R10\n         MVC   DS7KEYID,F7ID      SET KEY\n         MVC   DS7EXTNT(5*8),DT2ENTRY  MOVE FIRST 5 EXTENTS\n         MVI   DS7FMTID,C'7'      SET DSCB ID\n         MVC   DS7ADEXT(11*8),DT2ENTRY+40  MOVE NEXT 11 EXTENTS\n         XC    DS7PTRDS,DS7PTRDS  ZERO CHAIN PTR\n         MVC   SAVEEXT(16),DT2ENTRY+16*8-8     LAST FREE EXTENT USED\n         NC    DT2ENTRY+16*8(4),DT2ENTRY+16*8  NEXT FREE EXTENT ZERO?\n         BZ    CLEANUP                         YES, ALL DONE\n         CLI   CVSTAT,STAT032     END OF DATA?\n         BE    CLEANUP            YES, TERMINATE CVAF\n         MVC   DS7PTRDS,NZPTR     MAKE PSUEDO CHAIN POINTER\n         B     RETURN\n         DROP  R10\n.NOM9A   ANOP\n*\n*  RELEASE BUFFERS FOR INDEX RECORDS AFTER LAST USE\n*\nCLEANUP  L     R2,DEBADDR\n         L     R3,BUFLIST\n         MVC   CVPL(LENCVPL),CVPLMFL\n         CVAFDIR  MF=(E,CVPL),    FREEMAIN CVAF BUFFERS                *\n               ACCESS=RLSE,                                            *\n               DEB=(2),                                                *\n               MAPRCDS=(NO,(3))\n         LTR   R15,R15            ERROR?\n         BZ    FREEWORK           GOOD. SHOULD ALWAYS WORK.\n         BAL   R14,LOGICERR       BAD. DIE.\n*\n*  FREE GOTTEN  WORKAREA          OR DFDS NOT INSTALLED ON SYSTEM.\n*\nFREEWORK LR    R1,R13             ADDR OF WORKAREA TO BE FREED\n         L     R13,SAVEAREA+4     RELOAD CALLER'S SAVE PTR\n         FREEMAIN  RU,LV=WORKLEN,A=(1),SP=0\n         L     R1,PARMWORD        POINT TO WORKAREA ANCHOR\n         SR    R15,R15            ZERO RETCODE\n         SR    R0,R0              ZERO SUPLIMENTARY RETCODE\n         ST    R15,0(,R1)         ZERO ANCHOR WORD\n         B     EXIT2              GO LEAVE\n         TITLE 'IXTOFMT5 -- TERMINATION ROUTINES'\n*\n*  VTOC IS NOT IN INDEXED FORMAT, OR DFDS NOT INSTALLED ON SYSTEM.\n*\nUNINDXD  SR    R0,R0              ZERO SUPLEMENTRY RETURN CODE\n         LA    R15,4              INDICATE NOT INDEXED\n         B     EXIT               COMMON EXIT\n*\n*  CVAFTST COMPLETED WITH AN ERROR\n*\nTSTERROR LR    R0,R15             SAVE CVAFTST RETURN CODE\n         LA    R15,8              INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  CVAFDSM COMPLETED WITH AN ERROR\n*\nDSMERROR LR    R0,R15             PUT CVAFDSM RETURN CODE INTO\n         SLL   R0,24              ... HIGH ORDER BYTE OF R0\n         IC    R0,CVSTAT-CVPL(R1)  ADD CVSTAT VALUE\n         LA    R15,12             INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  INTERNAL LOGIC ERROR OR INCORRECT CALL\n*\nLOGICERR LA    R1,IXTOFMT5        ADDR OF ENTRY POINT\n         SLR   R14,R1             CONVERT TO OFFSET\n         LA    R0,0(,R14)         RETURN OFFSET IN R0\n         LA    R15,20             INDICATE FAILURE\n         B     EXIT               COMMON EXIT\n*\n*  NORMAL CONDITIONS\n*\nRETURN   SR    R0,R0              ZERO SUPLEMENTARY RETURN CODE\n         SR    R15,R15            ZERO PRIMARY RETURN CODE\n         B     EXIT               COMMON EXIT\n         SPACE 4\n*\n*  COMMON EXIT ROUTINE\n*\nEXIT     L     R13,SAVEAREA+4     RESTORE CALLER'S SAVE PRT\nEXIT2    L     R14,12(,R13)       RESTORE R14\n         LM    R1,R12,24(R13)     RESTORE R1 THRU R12 (R15,R0 SET)\n         BR    R14                RETURN\n         TITLE 'IXTOFMT5 -- CONSTANTS'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 4\n*\n*  CONSTANTS\n*\nF5ID     DC    XL4'05050505'      FMT5 KEY\nF7ID     DC    XL4'07070707'      FMT7 KEY\nNZPTR    DC    C'00001'           CHAR INSURES INVALID DASD ADDR\nCVPLMFL  CVAFDSM  MF=L\nLENCVPL  EQU   *-CVPLMFL\n         TITLE 'IXTOFMT5 -- WORKAREA DESCT'\nWORKAREA DSECT\nSAVEAREA DC    18F'0'             YE OLDE SAVEAREA\nCOUNT1   DC    F'0'               FORMAT 0 DSCBS\nCOUNT2   DC    F'0'               FREE INDEX RECORDS\nBUFLIST  DC    A(0)               ADDR VIX BFRS OBTAINED BY CVAF\nDEBADDR  DC    A(0)               ADDR OF DEB PASSED IN CALLER'S DCB\nUCBADDR  DC    A(0)               ADDR OF UCB PASSED (PRIV CALLER)\nSAVEEXT  DC    XL16'00'           SAVED FORMAT 5 OR FORMAT 7 EXTENTS\nEXTABL   DS    0CL(1+(27*5))      FANCY LENGTH\nNUMEXTS  DC    AL1(27)            NR OF EXTENTS REQUESTED\nEXTS     DC    CL(27*5)' '        27 5-BYTE FREE SPACE EXTENTS\n         ORG   *-5\nEXT27    DC    CL5' '             GIVE LAST ONE A NAME\nRTATBL   DS    0F\n         AIF   ('&MODEL9' EQ 'NO').NOM9B\n         ICVEDT02 DSECT=NO        MAP THE DSECT FOR THE RTA TABLE\nWORKAREA DSECT\n.NOM9B   ANOP\n         ORG\n         SPACE 4\nCVPL     ICVAFPL  DSECT=NO\n         SPACE 4\nWORKLEN  EQU   *-WORKAREA\n         EJECT\n         DSECT\n         IECSDSL1  (5)\nIECSDSF7 DSECT\n         #VTCFMT7                                 *\n         SPACE 4\nPARMLIST DSECT\nPARMWORD DS    A                  ANCHOR FOR GETMAINED AREA\nPARMDCB  DS    A                  ADDR OF DCB FOR VTOC\nPARMCT1  DS    A                  ADDR OF #FMT 0S\nPARMCT2  DS    A                  ADDR OF #FREE VIRS\nPARMFMT5 DS    A                  ADDR OF FMT5 WORKAREA\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n         IEZDEB LIST=NO\n         PRINT GEN\n         END\n//*\n//LINK   EXEC  PGM=IEWL,PARM='MAP',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//         DD  DSN=&&Y,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.CMDLIB(DVOL)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//*\n//COPY   EXEC  PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=SYS2.HELP(DVOL),DISP=SHR\n//SYSIN    DD  *\n//SYSUT1   DD  *\n)F FUNCTION -    The DVOL command is used to display the amount of\n                 of free space on a direct access device.\n\n                 DVOL will read the format 4 and format 5 DSCB's from\n                 the VTOC of a direct access volume and display:\n                  1.  Volume name\n                  2.  Unit address\n                  3.  Mount status and device type\n                  4.  Use status\n                  5.  Number of blank DSCB's in the vtoc\n                  6.  Condition of the VTOC indicators byte\n                  7.  VSAM data fields\n                  8.  Total free space in tracks\n                  9.  Number of free extents\n                 10.  Number of free cylinders\n                 11.  Size of largest extents (up to 5) in\n                      cylinders + tracks\n                 12.  Size of largest extents (up to 5) in tracks\n\n   Return Code: The return code is set to the total number of tracks\n                in the 5 largest extents (to a maximum of 4095) for\n                the last volume displayed.\n\n                If an error condition exists on the volume, the\n                return code will be set to 0.\n\n)X SYNTAX -     DVOL  (volume-list)/*\n                      SHORT/LONG\n                      HEADER/NOHEADER\n                      PRINT/NOPRINT\n                      SERONLY\n                      HARDCOPY(DDNAME)\n\n                Required - none\n                Defaults - *  SHORT  HEADER  PRINT\n                Note: if HARDCOPY is specified, NOPRINT is the default\n)O OPERANDS -\n  volume-list   is a list of one or more volume serials of mounted\n                direct access volumes or partial volume names.\n\n                If no volume is entered, or if an * is specified, the\n                information is displayed for each direct access volume\n                on the system.\n\n                If a volume name is entered with a U followed by one\n                to four digits, the data is also used as a UCB name.\n\n))SHORT         Short output form requested\n))LONG          Long output form requested\n))HEADER        Header is to be displayed for SHORT form\n))NOHEADER      No header is to be displayed for SHORT form\n))PRINT         Output is to be displayed\n))NOPRINT       No output is to be displayed\n))SERONLY       Only a list of mounted volume serials will be displayed\n))HARDCOPY      Specifies the DDNAME a pre-allocated data set to\n                receive a copy of DVOL output.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HEL": {"ttr": 28170, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00Y\\x00\\x93$o\\x01\\t)_\\x133\\x00\\x02\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1993-09-03T00:00:00", "modifydate": "2009-10-22T13:33:59", "lines": 2, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "SEE THE VERSION OF HEL ON FILE 134 OF THIS TAPE.\nHEL IS NOW AN ALIAS OF REVIEW.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RELEASE": {"ttr": 28172, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0b\\x001\\x00\\x88!\\x8f\\x01\\x175?\\x12'\\x04\\xda\\x04\\xf4\\x00!\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@\"", "ispf": {"version": "01.11", "flags": 0, "createdate": "1988-08-05T00:00:00", "modifydate": "2017-12-19T12:27:31", "lines": 1242, "newlines": 1268, "modlines": 33, "user": "IBMUSER"}, "text": "         TITLE '   R E L E A S E '\n***********************************************************************\n*                                                                     *\n*        'RELEASE' TSO COMMAND                                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n*        INSTALLATION. PRC, MCLEAN VA.\n*        DATE WRITTEN. NOVEMBER 22 1978.\n*        DATE UPDATED. AUGUST 3 1981.\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.\n*            THIS TSO COMMAND RELEASES UNUSED SPACE FROM SEQUENTIAL\n*            OR PARTITIONED DATA SETS.\n*\n*            THE 'LEAVE(NN)' KEYWORD ALLOWS THE USER TO SPECIFY\n*            HOW MANY UNUSED TRACKS NOT TO RELEASE.\n*\n*            THE 'EXTENT' KEYWORD ALLOWS THE USER TO RELEASE ONLY\n*            UNUSED EXTENTS, LEAVING THE PRIMARY EXTENT INTACT.\n*\n*            24MAY79 - OBTAIN ADDED FOR CHECKING CYLINDER ALLOC.\n*            24MAY79 - STACK DELETE ADDED.\n*            09JUN80 - FIX LINK TO STACK.\n*            31JUL81 - FOLLOWING PROBLEM REPORTED.\n*                      FIRST BYTE OF EXTENT DESCRIPTION IN F1-DSCB\n*                      FOR CYLINDER ALLOCATED DATA SET IS BEING CHANGED\n*                      FROM X'81' TO X'01'.\n*            03AUG81 - ABOVE PROBLEM FIXED. CAUSE WAS DETERMINED TO BE\n*                      CYLINDER BITS IN JFCB NOT BEING RECOGNIZED BY\n*                      MODULE IGG020P1, SINCE JFCB REWRITE WAS BEING\n*                      INHIBITED.  REMOVED JFCB REWRITE INHIBIT,\n*                      REMOVED JFCB DISP=MOD ALTERATION, CHANGED ALL\n*                      OPEN-OUTPUT TO OPEN-EXTEND.  THUS, THE ONLY\n*                      JFCB ALTERATIONS ARE FOR CYLINDER ALLOCATION\n*                      AND RLSE, (AND RLSE IS SET OFF AGAIN IF THERE\n*                      WAS ANY UNUSED SPACE LEFT UNRELEASED).\n*            03AUG81 - CHANGE LOGIC SO THAT ONLY ONE DCB IS EVER OPEN\n*                      AT ANY TIME.\n*            15APR85 - ADDED SUPPORT FOR VOLUME KEYWORD        SS APR85\n*            05JUN86 - ADDED SUPPORT FOR PDSCALL KEYWORD      JWM-GTEDS\n*            12FEB87 - ADDED CHECK FOR DATASET OPEN ELSEWHERE ABL FEB87\n*            31JUL88 - PROVIDE FOR MVS220 SWA ABOVE THE LINE   SS JUL88\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n*     BURLINGAME, CA  94010                                           *\n*     (415) 696-1800                       HOME (408) 997-2366        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n         SPACE\n*              INTERCEPT 'LINK' MACROS IMBEDDED IN PUTLINE & STACK\n*              TO MAKE SF=(E,LINKAREA) THE DEFAULT\n         GBLC  &MVSLEV\n***                                                                 ***\n*** SET THE LEVEL OF YOUR OPERATING SYSTEM WITH ANY OF TWO VALUES:\n***\n*&MVSLEV  SETC  'MVSXXX'    ***  FOR MVS SP 1.3 OR LATER (MVS/XA TOO)\n&MVSLEV  SETC  'MVS220'   ***  FOR MVS/XA 2.2.0 WITH SWA ABOVE THE\n*                               16M LINE\n         SPACE\n         MACRO\n&NAME    LINK  &EP=,&SF=(E,LINKAREA)\n&NAME    LA    15,&SF(2)\n         LA    0,*+8\n         B     *+12\n         DC    CL8'&EP'\n         ST    0,0(0,15)\n         SVC   6             ISSUE LINK SVC\n         MEND\n         SPACE\nRELEASE  START\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'RELEASE'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R12,15\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING @DATA,R9\n         SPACE\n         LR    R0,R1               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SLR   R14,R14             ZERO SENDING ADDRESS\n         SLR   R15,R15             ZERO PAD AND LENGTH\n         MVCL  R0,R14              CLEAR IT ALL\n         SPACE\n         ST    R13,4(,R9)          PUT OLD ADDRESS IN NEW AREA\n         ST    R9,8(,R13)          PUT NEW ADDRESS IN OLD AREA\n         LR    R13,R9              SET SAVEAREA POINTER\n         SPACE\n         ST    R2,SAVE2\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLODED            BRANCH AROUND LOAD\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n*        L     R0,=A(RELEAPCL)\n         LA    R0,PCLADDR\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         XC    MYANS(4),MYANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA\n         DROP  R15\n         SPACE 1\n************************************************************\n*                                                          *\n*        PROCESS 'PDSCALL' KEYWORD                         *\n*                                                          *\n************************************************************\n         SPACE 1                                              JWM-GTEDS\n         L     R1,CPPLCBUF           GET ADDRESS OF CBUF      JWM-GTEDS\n         LH    R14,0(,R1)            GET THE LENGTH           JWM-GTEDS\n         LA    R1,0(R14,R1)          POINT TO PDSCALL, MAYBE  JWM-GTEDS\n         CLC   2(7,R1),=C'PDSCALL'   DID PDS CALL US?         JWM-GTEDS\n         BNE   NOPDSCAL              NO                       JWM-GTEDS\n         MVC   PDSMSGA,10(R1)        MOVE THE ADDRESS         JWM-GTEDS\nNOPDSCAL EQU   *                                              JWM-GTEDS\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    PARSEOK\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         OI    STATUS,STATERR      ERROR\n         B     EXIT\nPARSEOK  EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS 'LEAVE' KEYWORD                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,LEAVE\n         TM    6(R4),X'80'\n         BZ    NOLEAVE\n         LH    R1,4(,R4)\n         L     R14,0(,R4)\n         BCTR  R1,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R14)\n         EX    R1,*-6\n         CVB   R1,DOUBLE\n         ST    R1,LEAVV\nNOLEAVE  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        PROCESS 'VOLUME' KEYWORD                          *\n*                                                          *\n************************************************************\n         SPACE 1                                               SS APR85\n         MVC   VOLSER(6),=CL8' '                               SS APR85\n         CLI   VOLUMKW+1,0                                     SS APR85\n         BE    NOVOLUM                                         SS APR85\n         LA    R4,VOLUM                                        SS APR85\n         TM    6(R4),X'80'                                     SS APR85\n         BZ    NOVOLUM                                         SS APR85\n         LH    R1,4(,R4)                                       SS APR85\n         L     R14,0(,R4)                                      SS APR85\n         BCTR  R1,0                                            SS APR85\n         B     *+10                                            SS APR85\n         MVC   VOLSER(0),0(R14)                                SS APR85\n         EX    R1,*-6                                          SS APR85\n         OI    STATUS,STATVOL        FLAG USING VOL KEYWORD    SS APR85\nNOVOLUM  EQU   *                                               SS APR85\n         SPACE 1                                               SS APR85\n************************************************************\n*                                                          *\n*        QUALIFY THE DSNAME IF NECESSARY                   *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,DSN\nSTARTDSN NI    STATUS,255-STATCYL  SET OFF CYLINDER ALLOC SW\n         SLR   R7,R7\n         BCTR  R7,0\n         TM    6(R4),X'80'         IS DATASET NAME SPECIFIED?\n         BO    OKDSN               YES - BRANCH\n         LA    R1,MSG05            NO - JUST MEMBER NAME\n         LA    R0,L'MSG05\n         BAL   R14,PUTMSG\n         OI    STATUS,STATERR      ERROR\n         B     NEXTDSN\nOKDSN    EQU   *\n         MVI   DSNAME,C' '\n         MVC   DSNAME+1(45),DSNAME\n         LH    R1,4(,R4)           GET LENGTH\n         STH   R1,DSNAME\n         L     R14,0(,R4)          GET ADDRESS OF NAME\n         BCTR  R1,0\n         B     *+10\n         MVC   DSNAME+2(0),0(R14)\n         EX    R1,*-6\n         MVC   DSNSAVE(46),DSNAME  SAVE DSN AS ENTERED\n         TM    6(R4),X'40'         IS IT QUOTED?\n         BO    DEFX                YES - SKIP DEFAULT SERVICE\n         SPACE\n         TM    STATUS,STATVOL      WE USING VOL                SS APR85\n         BZ    DODFP               NO, USE PREFIX SERVICES     SS APR85\n* DO PREFIXING HERE                                            SS APR85\n         SR    R1,R1                                           SS APR85\n         L     R15,CPPLUPT                                     SS APR85\n         USING UPT,R15                                         SS APR85\n* -- >                             FIX FOR 8-CHAR PREFIXES         UID8\n         CLI   16(R15),C'>'        IS PREFIX 8-CHAR?               UID8\n         BNE   PREF07              NO. BYPASS THIS CODE.           UID8\n         IC    R1,UPTPREFL+18      PULL LENGTH FROM NEW FIELD      UID8\n         B     *+10                                                UID8\n         MVC   DSNAME+2(0),UPTPREFX+17  MOVE UIDPREF8 INSTEAD      UID8\n         EX    R1,*-6                                              UID8\n         B     PREF08              BYPASS OLD CODE.                UID8\nPREF07   DS    0H                                                  UID8\n* -- >                                                             UID8\n         IC    R1,UPTPREFL                                     SS APR85\n         B     *+10                                            SS APR85\n         MVC   DSNAME+2(0),UPTPREFX                            SS APR85\n         EX    R1,*-6                                          SS APR85\nPREF08   DS    0H\n         DROP  R15                                             SS APR85\n         LA    R15,DSNAME+2(R1)                                SS APR85\n         MVI   0(R15),C'.'                                     SS APR85\n         LA    R15,1(,R15)                                     SS APR85\n         LH    R14,DSNSAVE                                     SS APR85\n         BCTR  R14,0                                           SS APR85\n         B     *+10                                            SS APR85\n         MVC   0(0,R15),DSNSAVE+2                              SS APR85\n         EX    R14,*-6                                         SS APR85\n         LA    R1,2(R1,R14)                                    SS APR85\n         STH   R1,DSNAME                                       SS APR85\n*        STM   R14,R1,SAVERS    >> DIAGNOSTIC TO DISPLAY DSNAME    UID8\n*        TPUT  DSNAME,46        >>                                 UID8\n*        LM    R14,R1,SAVERS    >> (MOVE AROUND TO SUIT)           UID8\n         B     DEFX                                            SS APR85\nDODFP    DS    0H                                              SS APR85\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         LA    R14,MYDFPB\n         ST    R14,IOPLIOPB\n         USING DFPB,R14\n         XC    0(20,R14),0(R14)\n         LA    R0,DSNAME\n         ST    R0,DFPBDSN\n         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI\n         MVC   DFPBPSCB,CPPLPSCB\n         MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME\n         DROP  R14\n         SPACE\n         LA    R1,MYIOPL\n         SPACE\n         LR    R1,R15              POINT TO IOPL\n         L     R15,16              CVTPTR\n         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   EHDEFLNK               THEN DO LINK, NOT CALL\n         L     R15,736(,R15)       CVTEHDEF\n         BALR  R14,R15             CALL IKJEHDEF\n         B     EHDEFEXT            SKIP AROUND LINK\nEHDEFLNK EQU   *\n         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)\nEHDEFEXT EQU   *\n         SPACE\n         B     DEFCODE(R15)\nDEFCODE  B     DEF00               SUCCESS\n         B     NEXTDSN              MSG ALREADY ISSUED\n         B     DEF08               INVALID NAME GT 44\n         B     NEXTDSN              MSG ALREADY ISUED\n         B     DEF16               NOT IN CATALOG\n         B     DEF20               NOT IN CATALOG\n         B     DEF24               IMPOSSIBLE\n         B     DEF28               COMMAND SYSTEM ERROR\n         B     DEF32               IMPOSSIBLE\n         B     DEF36               ?\nDEF08    EQU   *\nDEF16    EQU   *\n         B     DEF24\nDEF20    EQU   *\nLOCERR   EQU   *\n         MVC   MSGWK(L'MSG02),MSG02\n         LA    R15,MSGWK+L'MSG02\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG02(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(L'MSG02A,R15),MSG02A\n         LA    R0,L'MSG02+L'MSG02A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG\n         B     NEXTDSN\nDEF24    EQU   *\nDEF28    EQU   *\nDEF32    EQU   *\nDEF36    EQU   *\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG\n         B     NEXTDSN\n         SPACE\nDEF00    EQU   *\nDEFX     EQU   *\n         SPACE 3                                              ABL FEB87\n************************************************************  ABL FEB87\n*                                                          *  ABL FEB87\n*        VERIFY THAT THE DATASET IS NOT ALREADY OPEN       *  ABL FEB87\n*                                                          *  ABL FEB87\n************************************************************  ABL FEB87\n         SPACE 1                                              ABL FEB87\n         L     R1,16                       CVT                ABL FEB87\n         L     R1,0(,R1)                   ACTIVE TCB POINTER ABL FEB87\n         L     R1,4(,R1)                   ACTIVE TCB         ABL FEB87\n         L     R1,TCBJSCB-TCBRBP(,R1)      JSCB               ABL FEB87\n         L     R1,JSCDSABQ-IEZJSCB(,R1)    DSAB QUEUE         ABL FEB87\n         L     R14,12(,R1)                 FIRST DSAB         ABL FEB87\nDSABNEXT LTR   R1,R14                      ANY MORE DSABS?    ABL FEB87\n         BZ    DSABDONE                    NO, NOT OPEN       ABL FEB87\n         L     R14,DSABFCHN-DSAB(,R1)      NEXT DSAB          ABL FEB87\n         CLI   DSABOPCT-DSAB+1(R1),0       OPEN DATA SET?     ABL FEB87\n         BE    DSABNEXT                    NO, BRANCH         ABL FEB87\n         AIF   ('&MVSLEV' GE 'MVS220').MVS22C                  SS JUL88\n         L     R15,DSABTIOT-DSAB(,R1)      TIOT ENTRY         ABL FEB87\n         ICM   R15,7,TIOEJFCB-TIOENTRY(R15)   JFCB ENTRY      ABL FEB87\n         CLC   16(44,R15),DSNAME+2         THIS DSNAME?       ABL FEB87\n         BNE   DSABNEXT                    YES, ERROR         ABL FEB87\n         AGO   .MVS22CX                                        SS JUL88\n.MVS22C  ANOP                                                  SS JUL88\n         SR    R0,R0                    SET FLAG OFF           SS JUL88\n         LR    R15,R1                   SAVE DSAB POINTER      SS JUL88\n         L     R1,CVTPTR                *                      SS JUL88\n         TM    CVTDCB-CVT(R1),CVTMVSE   REALY  XA              SS JUL88\n         BZ    *+4+4+4+2                NO, SKIP  BSM          SS JUL88\n         LA    R1,*+4+4+2               POINT AFTER BSM        SS JUL88\n         O     R1,=X'80000000'          31 BIT MODE            SS JUL88\n         BSM   0,R1                     SET MODE               SS JUL88\n         L     R1,DSABSIOT-DSAB(,R15)   POINT TO SIOT          SS JUL88\n         L     R1,SJFCBPTR-SIOT(R1)     JFCB ADDR              SS JUL88\n         CLC   00(44,R1),DSNAME+2       THIS DSNAME?           SS JUL88\n         BNE   *+8                      *                      SS JUL88\n         LA    R0,1                     HAVE MATCH.. FLAG ON   SS JUL88\n         L     R1,CVTPTR                *                      SS JUL88\n         TM    CVTDCB-CVT(R1),CVTMVSE   REALY  XA              SS JUL88\n         BZ    *+4+4+2                  NO, SKIP  BSM          SS JUL88\n         LA    R1,*+4+2                 POINT AFTER BSM        SS JUL88\n         BSM   0,R1                     SET MODE 24            SS JUL88\n         LTR   R0,R0                    FLAG OFF               SS JUL88\n         BZ    DSABNEXT                 NO, CONTINUE           SS JUL88\n.MVS22CX ANOP                                                  SS JUL88\n         LA    R1,MSG07                    DATA SET IS OPEN   ABL FEB87\n         LA    R0,L'MSG07                                     ABL FEB87\n         BAL   R14,PUTMSG                                     ABL FEB87\n         B     NEXTDSN                                        ABL FEB87\nDSABDONE DS    0H                                             ABL FEB87\n         SPACE 3                                              ABL FEB87\n************************************************************\n*                                                          *\n*        ALLOCATE THE DATASET                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R15,MYDAPB\n         ST    R15,DAPLDAPB\n         DROP  R1\n         USING DAPB08,R15\n         XC    0(84,R15),0(R15)\n         MVI   DA08CD+1,X'08'\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         MVC   DA08DDN(8),=CL8' '\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,=CL8' '\n         TM    STATUS,STATVOL                                  SS APR85\n         BZ    NOVOLAL                                         SS APR85\n         MVC   DA08SER(6),VOLSER                               SS APR85\n         MVC   DA08UNIT,=CL8'SYSALLDA'                         SS APR85\nNOVOLAL  DS    0H                                              SS APR85\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08OLD\n*        MVI   DA08DSP1,DA08MOD                               .02AUG81.\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         TM    14(R4),X'80'        MEMBER SPECIFIED?\n         BZ    MEMBX               NO - BRANCH\n         LA    R1,MSG05\n         LA    R0,L'MSG05\n         BAL   R14,PUTMSG\n         B     NEXTDSN\nMEMBX    EQU   *\n         TM    22(R4),X'80'        PASSWORD SPECIFIED?\n         BZ    PASSX               NO - BRANCH\n         LH    R1,20(,R4)          GET LENGTH OF PSWD\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,16(,R4)         GET ADDRESS OF PSWD\n         B     *+10\n         MVC   DA08PSWD(0),0(R14)  MOVE PSWD\n         EX    R1,*-6\nPASSX    EQU   *\n         LA    R1,MYDAPL\n         SPACE\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BZ    OKDAIR\n         BAL   R14,DAIRFAIL\n         OI    STATUS,STATERR      ERROR\n         B     NEXTDSN\nOKDAIR   EQU   *\n         OI    CLEANUP,CLEANDAR    TELL CLEANUP TO FREE IT\n         LA    R15,MYDAPB\n         MVC   DDSAVE,DA08DDN\n         TM    DA08DSO,X'42'       IS DSORG PS OR PO\n         BNZ   OKDSORG             YES - BRANCH\nERRDSORG LA    R1,MSG06            MUST BE PS OR PO\n         LA    R0,L'MSG06\n         BAL   R14,PUTMSG\n         OI    STATUS,STATERR      ERROR\n         B     NEXTDSN\nOKDSORG  EQU   *\n         DROP  R15\n         SPACE\n         DEVTYPE DDSAVE,DEVAREA,DEVTAB\n         SPACE\n         CLI   DEVAREA+2,X'20'     DIRECT ACCESS DEVICE\n         BE    OKDA                YES, BRANCH\n         LA    R1,MSG09\n         LA    R0,L'MSG09\n         BAL   R14,PUTMSG\n         OI    STATUS,STATERR      ERROR\n         B     NEXTDSN\nOKDA     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        CHECK FORMAT-1 DSCB FOR CYLINDER ALLOCATION       *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCB WORDS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R1,12(,R1)          TIOT\n         LA    R1,24(,R1)          TOIENTRY\nDDLOOP   CLI   0(R1),0             END OF TIOT\n         BE    ERROBT              YES, BRANCH (NEVER HAPPENS)\n         CLC   4(8,R1),DDSAVE      DOES DDNAME MATCH\n         BE    DDFOUND\n         SLR   R15,R15\n         IC    R15,0(,R1)\n         LA    R1,0(R15,R1)\n         B     DDLOOP\nDDFOUND  L     R15,16(,R1)         TIOEFSRT-1\n         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?\n         BZ    ERROBT              NO, BYPASS OBTAIN\n         MVC   VOLSER,28(R15)      UCBVOLI\nOBTDSCB  LA    R1,OBTAINW\n         MVC   0(OBTAINL,R1),OBTAIN\n         LA    R0,DSNAME+2         DSN FOR OBTAIN\n         ST    R0,4(,R1)\n         LA    R0,VOLSER           VOLUME FOR OBTAIN\n         ST    R0,8(,R1)\n         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS OBTAIN SUCCESSFUL\n         BZ    OKDSCB              YES, BRANCH\n         SPACE\n*               OBTAIN HAS FAILED. HOW CAN THAT HAPPEN WHEN\n*               DYNAMIC ALLOCATION WAS SUCCESSFUL? ONE WAY IT\n*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY\n*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL\n*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW\n*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.\n         SPACE\n         TM    STATUS,STATLOC      HAS LOCATE BEEN TRIED ALREADY?\n         BZ    ALIAS               NO, GO TRY IT\nERROBT   LA    R1,MSG10            UNABLE TO OBTAIN DSCB\n         LA    R0,L'MSG10\n         BAL   R14,PUTMSG\n         OI    STATUS,STATERR      ERROR\n         B     NEXTDSN\nALIAS    OI    STATUS,STATLOC      TRIP THE SWITCH\n         LA    R1,LOCATEW\n         MVC   0(LOCATEL,R1),LOCATE\n         LA    R0,DSNAME+2         DSNAME FOR LOCATE\n         ST    R0,4(,R1)\n         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE\n         ST    R0,12(,R1)\n         LOCATE (1)\n         LTR   15,15               WAS LOCATE SUCCESSFUL?\n         BZ    OBTDSCB             YES, GO OBTAIN AGAIN\n         B     ERROBT              NO, ISSUE MESSAGE\n         SPACE\nOKDSCB   NI    STATUS,255-STATLOC  TURN OFF LOCATE SWITCH\n         LA    R1,MYDSCB-44\n         TM    X'5E'(R1),X'C0'     CYLINDER ALLOCATION?\n         BO    CYLSTAT             YES, BRANCH\n         TM    X'5E'(R1),X'41'     AVG AND ROUND ALLOCATION\n         BO    CYLSTAT             YES, BRANCH\n         B     *+8\nCYLSTAT  OI    STATUS,STATCYL      YES, SET CYLINDER SWITCH\n         TM    X'52'(R1),X'42'     DSORG=PS OR PO\n         BZ    ERRDSORG            NEITHER, BRANCH\n         CLI   X'54'(R1),0         IS THERE A RECFM\n         BNE   OKRECFM             YES, BRANCH\n         LA    R1,MSG11\n         LA    R0,L'MSG11\n         BAL   R14,PUTMSG\n         OI    STATUS,STATERR      ERROR\n         B     NEXTDSN\nOKRECFM  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP THE DCB                                    *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R5,MODDCB\n         MVC   0(CONDCBL,R5),CONDCB\n         USING IHADCB,R5\n         MVC   DCBDDNAM(8),DDSAVE\n         SPACE\n         LA    R15,DYNEXLST\n         IC    R0,DCBEXLSA-1\n         ST    R15,DCBEXLSA-1\n         STC   R0,DCBEXLSA-1\n         LA    R1,JFCB\n         ST    R1,0(,R15)\n         MVI   0(R15),X'87'\n         LA    R6,RLSDCB\n         MVC   0(CONDCBL,R6),0(R5)\n         SPACE\n         MVI   OPEN,X'80'\n         SPACE\n         RDJFCB ((R5)),MF=(E,OPEN)\n         SPACE\n*        OI    JFCB+X'34',X'08'    DO NOT REWRITE JFCB          DELETED\n*        NI    JFCB+X'57',X'3F'    ZERO 1ST 2 BITS (OLD=X'40')  DELETED\n*        OI    JFCB+X'57',X'80'    DISP=MOD            =X'80'   DELETED\n         TM    STATUS,STATCYL      CYLINDER ALLOCATION?\n         BZ    *+8                 NO, SKIP NEXT INSTRUCTION\n         OI    JFCB+X'9B',X'C0'    YES, MARK JFCBCTRI CYL\n         SPACE\n         MVI   OPEN,X'80'\n         SPACE\n         OPEN  ((R5),EXTEND),TYPE=J,MF=(E,OPEN)\n         SPACE\n         TM    DCBOFLGS,X'10'\n         BO    OKOPEN\n         LA    R1,MSG04\n         LA    R0,L'MSG04\n         BAL   R14,PUTMSG\n         OI    STATUS,STATERR      ERROR\n         B     NEXTDSN\n         SPACE\nOKOPEN   EQU   *\n         MVC   HOLDEOF,DCBFDAD     SAVE MBBCCHHR OF EOF\n         OI    CLEANUP,CLEANOP5    TELL CLEANUP TO CLOSE IT\n         SPACE\n         L     R1,DCBDEBAD         POINT TO DEB\n         SLR   R14,R14\n         SLR   R15,R15\n         SLR   R0,R0\n         IC    R0,16(,R1)          GET NUMBER OF EXTENTS\n         LTR   R0,R0               ZERO EXTENTS?\n         BZ    RLSNONE             YES, BRANCH\n         IC    R15,04(,R1)         GET LENGTH OF EXTENT FIELD\nLOOPDEB  AH    R14,46(,R1)         ADD TRACKS TO COUNTER\n         AR    R1,R15              POINT TO NEXT EXTENT\n         BCT   R0,LOOPDEB\n         BCTR  R14,0               TRKS-1 = HIGH TRACK NUMBER\n         LR    R8,R14              SAVE HIGH TRACK ALLOCATED\n         SPACE\n         L     R1,DCBDEBAD\n         LA    R2,DCBFDAD\n         ST    R3,12(,R13)\n         STM   R9,R13,16(R13)\n         LR    R3,R13\n         L     R15,16              CVTPTR\n         L     R15,32(,R15)        CVTPRLTV\n         BALR  R14,R15\n         LR    R13,R3              RESTORE R13\n         LM    R9,R13,16(R13)\n         L     R3,12(,R13)\n         SPACE\n         SRL   R0,16               TTRZ TO TT (HIGH TRACK USED)\n         LR    R1,R8               GET HIGH TRACK ALLOCATED\n         SR    R1,R0               MINUS HIGH TRACK USED\n         BNP   RLSNONE             BRANCH IF NOTHING TO RELEASE\n         SPACE\n         LR    R7,R1               SAVE UNUSED TRACKS\n         SPACE\n*              IF DATA SET WAS ORIGINALLY ALLOCATED IN CYLINDERS,\n*              THE FOLLOWING ROUTINE INSURES THAT THE NUMBER OF\n*              TRACKS REMAINING WILL BE AN EVEN MULTIPLE OF THE\n*              NUMBER OF TRACKS PER CYLINDER FOR THE DEVICE.\n*              R7 WILL BE CHANGED TO INCLUDE ONLY THOSE UNUSED\n*              TRACKS THAT ARE WITHIN UNUSED CYLINDERS.\n         SPACE\n         TM    STATUS,STATCYL      ALLOCATED BY CYLINDER?\n         BZ    NOTCYL              NO, BRANCH\n         CLI   LEAVEKW+1,3         'EXTENTS' SPECIFIED\n         BE    NOTCYL              YES, EXISTING EXTENTS ASSUMED OK\n*        LR    R1,R8               GET HIGH TRACK ALLOCATED\n*        SLR   R0,R0\n         SRDL  R0,32\n         LH    R15,TRKCYL          GET TRACKS PER CYLINDER\n         DR    R0,R15              GET TRACK WITHIN LAST CYL\n         BCTR  R15,0               GET NO OF LAST TRK\n         CLR   R15,R0              IS LAST TRK = HIGH TRACK\n         BNE   ADJUST              NO, ADJUSTMENT NECESSARY\n         L     R0,LEAVV\n         LTR   R0,R0               IS LEAVE SPECIFIED\n         BZ    RLSALL              NO, TAKE FAST PATH\n         B     ADJLEAV             YES, ADJUST IT\nADJUST   MH    R1,TRKCYL           CHANGE CYL TO TRK\n         AR    R15,R1              SET TO LAST TRACK\n         LR    R1,R8               GET HIGH TRACK ALLOCATED\n         SR    R1,R15              MINUS LAST TRACK OF LAST CYL USED\n         BNP   RLSNONE             BRANCH IF NOTHING TO RELEASE\n         LR    R0,R7               SAVE OLD UNUSED TRACKS\n         LR    R7,R1               NO OF TRACKS TO RELEASE\n         SR    R0,R1               GET DIFF BETWEEN OLD & NEW\n         LR    R1,R0               DIFF IN R1\n*\n*              NOW WE HAVE AN IMPLICIT LEAVE(N) WHERE N IS IN R1\n*              AND IS THE NUMBER OF TRACKS FROM THE LAST TRACK USED\n*              TO THE END OF THE CYLINDER.  IF LEAVE WAS EXPLICITLY\n*              SPECIFIED, WE CAN REDUCE THE SPECIFIED NUMBER BY THE\n*              IMPLICIT NUMBER BECAUSE IF THE USER SPECIFIED LEAVE(8)\n*              AND THE IMPLICIT NUMBER WAS 7, THAT MEANS THAT NORMAL\n*              CYLINDER RELEASE WILL LEAVE THE USER 7 UNUSED TRACKS\n*              AND OUR INTERNAL PROCESSING ONLY HAS TO WORK ON GETTING\n*              THE ONE OTHER TRACK THE USER WANTS. THE USER WILL END\n*              UP WITH MORE THAN 8 BECAUSE THE ONE OTHER TRACK MEANS\n*              THE WHOLE CYLINDER CONTAINING THAT TRACK WILL BE LEFT.\n*              AFTER THE SPECIFIED NUMBER IS REDUCED BY THE IMPLICIT\n*              NUMBER, IF THE RESULT IS POSITIVE WE ROUND IT UP TO THE\n*              NEXT HIGHER MULTIPLE OF TRACKS PER CYLINDER.\n*              IF THE USER SPECIFIED LEAVE(7) AND THE IMPLICIT NUMBER\n*              WAS 7 (OR MORE), OUR JOB IS SIMPLE BECAUSE A NORMAL\n*              CYLINDER RELEASE WILL LEAVE ENOUGH UNUSED TRACKS.\n*\n         L     R0,LEAVV\n         SR    R0,R1               REDUCE SPECIFIED NUMBER BY R1\n         ST    R0,LEAVV\n         BNP   RLSPART             IF RESULT LT 1, RELEASE R7 TRACKS.\nADJLEAV  SRDL  R0,32\n         BCTR  R1,0\n         LH    R15,TRKCYL\n         DR    R0,R15\n         MH    R1,TRKCYL\n         AR    R1,R15              PLUS 1 CYL\n         SR    R7,R1               REDUCE NUMBER OF RELEASABLE TRACKS\n         BP    RLSPART             GO RELEASE THEM\n         B     RLSNONE             UNLESS THAT LEAVES NOTHING\n         SPACE\n*\n*              PROCESSING FOR NON-CYLINDER ALLOCATIONS,\n*              (OR CYLINDER ALLOCATIONS IF 'EXTENTS' SPECIFIED).\n*\n*              R7 CONTAINS # OF TRACKS RELEASABLE.\n*              IT CAN BE REDUCED BY THE NUMBER OF TRACKS SPECIFIED\n*              IN THE  LEAVE(NN)  KEYWORD.\n*\nNOTCYL   EQU   *\n         L     R15,LEAVV\n         LTR   R15,R15             TO LEAVE SOME UNUSED TRACKS?\n         BZ    LEAVEX              NO, BRANCH\n         SR    R7,R15              REDUCE RELEASABLE SPACE\n         BP    RLSPART             BRANCH IF RELEASABLE SPACE\n         B     RLSNONE             NO RELEASABLE SPACE\n         SPACE\nLEAVEX   EQU   *\n         CLI   LEAVEKW+1,3         'EXTENTS' SPECIFIED?\n         BNE   RLSALL              NO, GO RELEASE ALL UNUSED SPACE\n         LR    R2,R0               SAVE HIGH TRACK USED\n         SPACE\n         L     R1,DCBDEBAD         POINT TO DEB\n         SLR   R14,R14\n         SLR   R15,R15\n         SLR   R0,R0\n         IC    R0,16(,R1)          GET NUMBER OF EXTENTS\n         IC    R15,04(,R1)         GET LENGTH OF EXTENT FIELD\nEXTLOOP  AH    R14,46(,R1)         ADD TRACKS TO COUNTER\n         CR    R14,R2              TRACKS .GT. HIGH TRACK USED?\n         BH    EXTSTOP             YES, KEEP THRU THIS EXTENT\n         AR    R1,R15              POINT TO NEXT EXTENT\n         BCT   R0,EXTLOOP          BRANCH FOR EACH EXTENT\n         B     RLSNONE             KEEP ALL EXTENTS\nEXTSTOP  BCTR  R0,0                SUBTRACT 1 FROM EXTENT\n         LTR   R0,R0               WAS IT LAST EXTENT?\n         BNP   RLSNONE             YES, KEEP ALL EXTENTS\n         BCTR  R14,0               HIGH TRACK IN THIS EXTENT\n         LR    R7,R8               HIGH TRACK ALLOC\n         SR    R7,R14              GET NO TRACKS IN REMAIN EXTENTS\n         BNP   RLSNONE\n         B     RLSPART\n         SPACE\n*\n*              RELEASE THE NUMBER OF TRACKS SPECIFIED IN R7\n*\n         SPACE\nOPEN6    MVI   CLOSE,X'80'\n         CLOSE ((R5)),MF=(E,CLOSE)\n         NI    CLEANUP,255-CLEANOP5\n         SPACE\n         OI    JFCB+X'56',X'C0'    RLSE\n         MVI   OPEN,X'80'\n         OPEN  ((R6),EXTEND),TYPE=J,MF=(E,OPEN)\n         BR    R2\n         SPACE\nRLSPART  BAL   R2,OPEN6\n         LR    R0,R8               GET HIGH TRACK ALLOCATED\n         SR    R0,R7               MINUS RELEASED TRACKS\n         SLL   R0,16               TT00 OF LAST TRACK TO BE KEPT\n         LA    R1,X'100'           RECORD 1\n         OR    R0,R1               CHANGE TT00 TO TTR0  (R=1)\n         SPACE\n*              PUT FAKE CCHHR ADDRESS IN R6 DCB.\n*              CONVERT TTR IN R0 TO CCHHR IN DCBFDAD\n         L     R1,DCBDEBAD-IHADCB(,R6)\n         LA    R2,DCBFDAD-IHADCB(,R6)\n         ST    R3,12(,R13)\n         STM   R9,R13,16(R13)\n         LR    R3,R13\n         L     R15,16\n         L     R15,28(,R15)        CVTPCNVT  TTR TO CCHHR\n         BALR  R14,R15\n         LR    R13,R3\n         LM    R9,R13,16(R13)\n         L     R3,12(,R13)\n         SPACE\n         MVI   CLOSE,X'80'\n         CLOSE ((R6)),MF=(E,CLOSE)\n*\n*              NOW RESTORE THE REAL END OF FILE\n*\n         SPACE\nRESTREOF EQU   *\n         NI    JFCB+X'56',255-X'C0'   NO RLSE\n         SPACE\n         MVI   OPEN,X'80'\n         OPEN  ((R6),EXTEND),TYPE=J,MF=(E,OPEN)\n         SPACE\n         MVC   DCBFDAD-IHADCB(8,R6),HOLDEOF\n         SPACE\n         MVI   CLOSE,X'80'\n         CLOSE ((R6)),MF=(E,CLOSE)\n         B     NEXTDSN\n         SPACE\n*\n*              RELEASE ALL UNUSED SPACE\n*\n         SPACE\nRLSALL   BAL   R2,OPEN6\n         MVI   CLOSE,X'80'\n         CLOSE ((R6)),MF=(E,CLOSE)\n         B     NEXTDSN\n         SPACE\n*\n*              RELEASE NOTHING\n*\n         SPACE\nRLSNONE  EQU   *\n         SLR   R7,R7\n         SPACE\n*\n*              CLEANUP AND TERMINATE\n*\n         SPACE\nNEXTDSN  EQU   *\n         L     R2,SAVE2\n         TM    CLEANUP,CLEANOP5\n         BZ    NOCLOSE\n         MVI   CLOSE,X'80'\n         CLOSE ((R5)),MF=(E,CLOSE)\n         NI    CLEANUP,255-CLEANOP5\nNOCLOSE  TM    CLEANUP,CLEANDAR    IS DATA SET ALLOCATED\n         BZ    NOFREE              NO, BYPASS UNALLOCATE\n         LA    R1,MYDAPL\n         LA    R15,MYDAPB\n         USING DAPB18,R15\n         XC    0(40,R15),0(R15)\n         MVI   DA18CD+1,X'18'\n         MVC   DA18DDN,DDSAVE\n         MVC   DA18MNM(8),=CL8' '\n         MVC   DA18SCLS(2),=CL8' '\n         BAL   R14,CALLDAIR        UNALLOCATE\n         NI    CLEANUP,255-CLEANDAR FREED\n         SPACE\nNOFREE   EQU   *\n         SPACE\n         LTR   R7,R7               WAS RELEASE LOGIC ENTERED\n         BM    NODIS               NO, BYPASS DISPLAY\n         LA    R1,MSGWK\n         MVI   0(R1),C' '\n         MVC   1(L'MSGWK-1,R1),0(R1)\n         MVC   0(6,R1),=X'402020202120'\n         CVD   R7,DOUBLE\n         ED    0(6,R1),DOUBLE+5\n         MVC   7(6,R1),=C'TRACKS'\n         LA    R15,13(R1)\n         CL    R7,=F'1'            ONE TRACK\n         BNE   *+6                 NO, SKIP NEXT INSTR\n         BCTR  R15,0               CHANGE TRACKS TO TRACK\n         MVC   0(24,R15),=C' RELEASED FROM DATA SET '\n         MVC   24(44,R15),DSNSAVE+2\n         LA    R0,24+44(,R15)\n         SR    R0,R1\n         BAL   R14,PUTMSG\nNODIS    EQU   *\n         SPACE\n         L     R4,24(,R4)          POINT TO NEXT DSN PDE\n         LA    R4,0(,R4)           CLEAR HIGH ORDER BYTE\n         LTR   R4,R4               IS THERE ANOTHER\n         BZ    NODSNS              END OF LIST                 SS APR85\n         TM    STATUS,STATVOL      WAS VOL KEYWORD USED        SS APR85\n         BZ    STARTDSN            NO,  GO PROCESS NEW DSNAME  SS APR85\n         LA    R1,MSG12                                        SS APR85\n         LA    R0,L'MSG12                                      SS APR85\n         BAL   R14,PUTMSG                                      SS APR85\nNODSNS   DS    0H                                              SS APR85\n         IKJRLSA MYANS\n         LH    R15,RC\n         B     EXIT\n         SPACE\n************************************************************\n*                                                          *\n*         CALL IKJDAIR SERVICE ROUTINE                     *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR ST    R14,DAIRREGS\n         L     R15,16\n         TM    732(R15),X'80'     CVTDAIR\n         BNO   DAIRLINK\n         L     R15,732(,R15)\n         BALR  R14,R15\n         B     DAIRFINI\nDAIRLINK EQU   *\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIRFINI L     R14,DAIRREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         SLR   R15,R15\n         ST    R15,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTLINS\n         ICM   R15,15,PDSMSGA          LOAD ADDRESS OF PDS JWM-GTEDS\n         BZ    NOTPDS                  NO                  JWM-GTEDS\n         MVI   MYSEG1,C' '             CLEAR OUT THE       JWM-GTEDS\n         MVC   MYSEG1+1(79),MYSEG1         MESSAGE AREA    JWM-GTEDS\n         LR    R14,R0                   GET THE LENGTH     JWM-GTEDS\n         BCTR  R14,0                        MINUS ONE      JWM-GTEDS\n         B     *+10                                        JWM-GTEDS\n         MVC   MYSEG1(0),0(R1)         MOVE MESSAGE IN     JWM-GTEDS\n         EX    R14,*-6                   WITH THE EX       JWM-GTEDS\n         LA    R1,MYSEG1-1             ADDRESS OF DATA        ABL FEB87\n         BALR  R14,R15                 RETURN TO PDS       JWM-GTEDS\n         LM    R14,R1,PUTLINS                              JWM-GTEDS\n         BR    R14                                         JWM-GTEDS\nNOTPDS   DS    0H                                          JWM-GTEDS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTLINS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\nEXIT     SLR   R15,R15\n         TM    STATUS,STATERR\n         BZ    EXITX\n         MVC   MYSTPB(STACKDL),STACKD\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         TCLEARQ\n         LA    R15,12\nEXITX    LR    R1,R13\n         L     0,@SIZE\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         PRINT NOGEN\n         SPACE\nCONDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(W)\nCONDCBL  EQU   *-CONDCB\n         SPACE\n         PRINT GEN\n         SPACE\nOBTAIN   CAMLST SEARCH,2,3,4\nOBTAINL  EQU   *-OBTAIN\n         SPACE\nLOCATE   CAMLST NAME,2,,4\nLOCATEL  EQU   *-LOCATE\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\nMSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'\nMSG02    DC    C'IKJ58503I DATA SET '\nMSG02A   DC    C' NOT IN CATALOG'\nMSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'\nMSG04    DC    C'UNABLE TO OPEN DATASET'\nMSG05    DC    C'IKJ58509I MEMBER NAME MUST NOT BE SPECIFIED'\nMSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN+\n               TIAL'\nMSG07    DC    C'YOU ALREADY HAVE THIS DATA SET OPEN; RELEASE FAILED'\nMSG09    DC    C'DATA SET IS NOT ON A DIRECT ACCESS DEVICE'\nMSG10    DC    C'UNABLE TO OBTAIN DSCB FOR DATA SET'\nMSG11    DC    C'DATA SET HAS NEVER BEEN OPENED'\nMSG12    DC    C'ONLY ONE DATA SET ALLOWED WITH VOLUME KEYWORD'\n         LTORG\nPCLADDR  DC    0D'0'  END OF CSECT, START OF PARSE PCL CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PARAMETERS                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nRELEAPCL IKJPARM\nDSN      IKJPOSIT DSNAME,LIST,PROMPT='DATA SET NAME'\nLEAVEKW  IKJKEYWD\n         IKJNAME 'LEAVE',SUBFLD=LEAVESF\n         IKJNAME 'SPACE',SUBFLD=LEAVESF\n         IKJNAME 'EXTENTS'\nVOLUMKW  IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VOLUMSF\nLEAVESF  IKJSUBF\nLEAVE    IKJIDENT 'NUMBER OF TRACKS',                                  +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +\n               PROMPT='NUMBER OF UNUSED TRACKS TO LEAVE UN-RELEASED'\nVOLUMSF  IKJSUBF\nVOLUM    IKJIDENT 'VOLUME SERIAL',                                     +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +\n               PROMPT='VOLUME SERIAL OF DATASET IF NOT CATALOGED'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nLINKAREA DS    2F\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nMYSTPB   DS    0F\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nMYDFPB   DS    5F\nDSNAME   DS    H,CL44\nDSNSAVE  DS    H,CL44\nCLEANUP  DS    X\nCLEANDAR EQU   X'80'\nCLEANOP5 EQU   X'40'\nSTATUS   DS    H\nSTATLOC  EQU   X'08'\nSTATCYL  EQU   X'04'\nSTATVOL  EQU   X'08'                                           SS APR85\nSTATERR  EQU   X'01'\nRC       DS    H\nVOLSER   DS    CL6\nLOCATEW  DS    0F\nOBTAINW  DS    4F\nLOCBUF   DS    0D,0CL265\nMYDSCB   DS    CL140\nMSGWK    DS    CL128\nDEVAREA  DS    0F                  5 FULLWORDS FOR DEVTYPE\nTRKCYL   EQU   DEVAREA+10,2\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFREGS DS    F   USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nLEAVV    DS    F\nSAVERS   DS    4F                                                  UID8\nHOLDEOF  DS    CL8\nDDSAVE   DS    CL8\nDAIRREGS DS    F\nOPEN     DS    0F\nCLOSE    DS    F\nDYNEXLST DS    F\nSAVE2    DS    F\nPDSMSGA  DS    F                                              JWM-GTEDS\nMODDCB   DS    0D,XL(CONDCBL)\nRLSDCB   DS    0D,XL(CONDCBL)\n         DS    0D\nJFCB     DS    XL176\n@DATAL   EQU   *-@DATA\n         SPACE\nIHADCB   DSECT\n         DS    XL5\nDCBFDAD  DS    CL8                 FULL DISK ADDRESS, MBBCCHHR\n         DS    19XL1\nDCBBFTEK DS    XL1\nDCBEODAD DS    AL3\nDCBRECFM DS    X\nDCBEXLSA DS    AL3\nDCBDDNAM DS    CL8\n         ORG   *-4\nDCBDEBAD DS    A\nDCBOFLGS DS    X\n         DS    7XL1\n         DS    X\nDCBSYNAD DS    AL3\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJPPL\n         SPACE\n         IKJDFPB\n         SPACE 2\n         IKJUPT\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJDAPL\n         SPACE 2\n         IKJDAP08\n         SPACE 2\n         IKJDAP18\n         SPACE 2\n         IKJEFFDF DFDSECT=YES\n         SPACE 2\n         IKJTCB\n         SPACE 2\n         IEZJSCB\n         SPACE 2\n         IHADSAB\n         SPACE 2\n         IEFTIOT1\n         SPACE 2\nSIOT     DSECT                          *                      SS JUL88\n         IEFASIOT\n         SPACE 2\n         CVT   DSECT=YES\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RELEASE$": {"ttr": 28682, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00V\\x01\\x00\\x04\\x8f\\x01\\x175?\\x18\\x17\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2017-12-19T18:17:56", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(RELEASE)\n//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSALLDA,SPACE=(CYL,1),DISP=(,PASS),\n//            DCB=BLKSIZE=3200,DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB495296\n SETCODE AC(0)\n NAME    RELEASE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RESET": {"ttr": 28929, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x00\\x1f\\x00\\x90\\x00\\x1f\\x12\\x00\\x00\\xd9\\x00\\xd9\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-01-01T00:00:00", "modifydate": "1990-01-01T12:00:00", "lines": 217, "newlines": 217, "modlines": 0, "user": "FILE296"}, "text": "//*\n//*  ASM1 -- ASSEMBLES RESET\n//*  LINK -- LINKS RESET INTO 'SYS1.CMDLIB(RESET)'\n//*\n//ASM1  EXEC  PGM=ASMBLR,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,NOSTMT,\n//             'XREF(SHORT),BUFSIZE(MAX)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\nRESET TITLE 'RESET -- REINITIALIZES (EMPTIES) ANY PARTITIONED DATA SET'\n*            RESET -- REINITIALIZES (EMPTIES) ANY PARTITIONED DATA SET\n*\n*\n*  RESET IS USED TO REINITIALIZE (EMPTY) PARTITIONED DATA SETS.  THE\n*   USER CAN OPTIONALLY SPECIFY THE NUMBER OF DIRECTORY BLOCKS DESIRED.\n*\n*\n*\n*\n*  JCL:\n*       //STEPNAME    EXEC  PGM=RESET,PARM='RESET'\n*       //RESET         DD  DSN=PDSNAME,DISP=SHR\n*\n*       WHERE THE PARM CAN OPTIONALLY BE CODED AS PARM='RESET(N)'\n*       AND N IS THE NUMBER OF DIRECTORY BLOCKS DESIRED.\n*\n*       ERROR MESSAGE OUTPUT IS WRITTEN AS WTO'S WITH ROUTE CODE 11.\n*\n*\n*\n*\n*  METHOD:  IF N IS NOT CODED, THE PROGRAM COUNTS THE CURRENT DIRECTORY\n*    BLOCKS AND REWRITES THAT SAME NUMBER OF EMPTY DIRECTORY BLOCKS;\n*    OTHERWISE, THE PROGRAM WRITES N EMPTY DIRECTORY BLOCKS.\n*\n*    THEN, A NULL MEMBER IS ADDED TO AND DELETED FROM THE PARTITIONED\n*    DATA SET SO THAT THE END OF DATA SET POINTER (DS1LSTAR) IN THE\n*    DSCB WILL CORRECTLY POINT TO THE AVAILABLE SPACE FOLLOWING THE\n*    DIRECTORY AND THE END OF DIRECTORY (EOF) MARK.\n*\n*\n*\n*  ABENDS:  10 -- SYNTAX ERROR IN THE PARM FIELD.\n*           20 -- THE DIRECTORY COULD NOT BE OPENED FOR INPUT.\n*           30 -- THE DIRECTORY COULD NOT BE OPENED FOR OUTPUT.\n*           40 -- THE PARTITIONED DATA SET COULD NOT BE OPENED.\n*           50 -- THE NULL MEMBER COULD NOT BE ADDED.\n*           60 -- THE NULL MEMBER COULD NOT BE DELETED.\n*\n*\n*\n*  NOTE:  AT LEAST ONE DIRECTORY BLOCK IS ALWAYS WRITTEN.\n*\n*\n* AUTHOR:\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     HITACHI AMERICA, LTD.                6084 CRIMSON DRIVE         *\n*     2210 O'TOOLE AVENUE                  SAN JOSE, CALIF 95120      *\n*     SAN JOSE, CALIF. 95131                                          *\n*     (408) 435-2143                       (408) 997-2366             *\n*                                                                     *\n         EJECT\n         PRINT NOGEN\nRESET    CSECT\n         SAVE  (14,12),,*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         LR    R2,R15\n         USING RESET,R2\n         ST    R13,SAVE+4\n         LR    R3,R13\n         LA    R13,SAVE\n         ST    R13,8(R3)\n         USING IHADCB,R3\n         L     R4,0(R1)\n         EJECT\n         LA    R3,OUT\n         OPEN  (OUT,(OUTPUT)) OPEN\n         TM    DCBOFLGS,X'10'     AND\n         BZ    ABE40                 CLOSE\n         CLOSE (OUT)                      OUT (GETS DCB PARAMETERS)\n         LA    R3,DIR         ADDRESS OF DIRECTORY DCB\n         CLI   1(R4),5        SUFFICIENT CHARACTERS FOR \"RESET\"?\n         BL    ABEND10        NO, ERROR\n         CLC   2(5,R4),KEY    PARM='RESET. . . ?\n         BNE   ABEND10        NO, ERROR\n         CLI   1(R4),5        RESET ONLY?\n         BE    INOUT          YES, COUNT BLOCKS AND REWRITE\n         CLI   7(R4),C'('     BEGINNING PARENTHESIS?\n         BNE   ABEND10        NO, ERROR\n         LH    R5,0(R4)       LENGTH OF PARM DATA\n         LA    R5,1(R4,R5)    END OF PARM DATA\n         CLI   0(R5),C')'     ENDING PARENTHESIS?\n         BNE   ABEND10        NO, ERROR\n         SR    R7,R7          TOTAL BLOCK NUMBER\n         SR    R5,R5          TEMP REGISTER\nNXTNUM   LA    R4,1(R4)\n         IC    R5,7(R4)\n         S     R5,=F'240'     VALID ZONED NUMBER?\n         BM    ABEND10        NO, ERROR\n         M     R6,=F'10'      TOTAL * 10\n         AR    R7,R5                    + DIGIT\n         CLI   8(R4),C')'     END OF PARM STRING?\n         BNE   NXTNUM         NO, BRANCH\n         B     OUTPUT\nABEND10  WTO   'THE PARM IS CODED INCORRECTLY',ROUTCDE=(11)\n         ABEND 10       ***   SYNTAX ERROR IN THE PARM DATA   ***\n         EJECT\nINOUT    SR    R7,R7          DIRECTORY BLOCK COUNTER\n         OPEN  (DIR,INPUT)\n         TM    DCBOFLGS,X'10' DIR OPEN?\n         BNZ   NOTABE20\n         WTO   'THE DIRECTORY DID NOT OPEN FOR INPUT',ROUTCDE=(11)\n         ABEND 20       ***   DIR DID NOT OPEN SUCCESSFULLY   ***\nNOTABE20 READ  D1,SF,DIR,A\n         CHECK D1\n         A     R7,=F'1'       ADD 1 TO DIR COUNT\n         B     NOTABE20\nENDDIR   CLOSE (DIR)\n*\n*\n*\n*\nOUTPUT   OPEN  (DIR,(OUTPUT))\n         TM    DCBOFLGS,X'10' DIR OPEN?\n         BNZ   NOTABE30       YES, BRANCH\n         WTO   'THE DIRECTORY DID NOT OPEN FOR OUTPUT',ROUTCDE=(11)\n         ABEND 30       ***   DIR DID NOT OPEN SUCCESSFULLY   ***\nNOTABE30 WRITE D2,SF,DIR,B    OUTPUT A DUMMY DIRECTORY BLOCK\n         CHECK D2\n         XC    B(20),B        ZERO THE KEY & DATA PORTIONS OF THE BLOCK\n         S     R7,=F'1'       ENOUGH DIRECTORY BLOCKS WRITTEN?\n         BP    NOTABE30       NO, BRANCH\n         CLOSE (DIR)          YES, CLOSE THE DIRECTORY OUTPUT\n         EJECT\n         LA    R3,OUT\n         OPEN  (OUT,(OUTPUT))\n         TM    DCBOFLGS,X'10' OUT OPEN?\n         BNZ   NOTABE40       YES, BRANCH\nABE40    WTO   'THE PARTITIONED DATA SET DID NOT OPEN',ROUTCDE=(11)\n         ABEND 40       ***   OUT DID NOT OPEN SUCCESSFULLY  ***\nNOTABE40 STOW  OUT,MEMBER,A   ADD A NULL MEMBER TO OUT\n         LTR   R15,R15        ADDED?\n         BZ    NOTABE50       YES, BRANCH\n         WTO   'THE EMPTY MEMBER COULD NOT BE ADDED',ROUTCDE=(11)\n         ABEND 50       ***   DIRECTORY ADDITION FAILED  ***\nNOTABE50 STOW  OUT,MEMBER,D   DELETE THE NULL MEMBER\n         LTR   R15,R15        DELETED?\n         BZ    NOTABE60       YES, BRANCH\n         WTO   'THE EMPTY MEMBER COULD NOT BE DELETED',ROUTCDE=(11)\n         ABEND 60       ***   MEMBER DELETION FAILED   ***\nNOTABE60 CLOSE (OUT)\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*\n*\n*\n*\nMYEXIT   DS    0F             OUT EXIT ROUTINE (DCB PRESERVATION)\n         DC    X'85',AL3(OUTEXIT)\nOUTEXIT  CLC   BLKSI,=H'0'    FIRST OPEN?\n         BNE   STORE          NO, BRANCH\n         MVC   BLKSI,DCBBLKSI SAVE THE BLOCKSIZE\n         MVC   LRECL,DCBLRECL SAVE THE LRECL\n         MVC   RECFM,DCBRECFM SAVE THE RECFM\n         BR    R14\nSTORE    MVC   DCBBLKSI,BLKSI RESET THE BLOCKSIZE\n         MVC   DCBLRECL,LRECL RESET THE LRECL\n         MVC   DCBRECFM,RECFM RESET THE RECFM\n         BR    R14\n         EJECT\n         LTORG\nSAVE     DC    18F'0'\nBLKSI    DC    H'0'\nLRECL    DC    H'0'\nRECFM    DC    X'00'\nKEY      DC    CL5'RESET'     \"RESET\"\nMEMBER   DC    CL8'DUMMY ',XL4'00000000'\nA        DC    2CL133' '\nB        DC    XL8'FFFFFFFFFFFFFFFF',XL2'000E',XL8'FFFFFFFFFFFFFFFF'\n         DC    XL246'00'\n*\nOUT      DCB   DDNAME=RESET,DSORG=PO,MACRF=(W),KEYLEN=0,EXLST=MYEXIT\n*\nDIR      DCB   DDNAME=RESET,DSORG=PS,RECFM=FB,LRECL=256,BLKSIZE=256,  XX\n               MACRF=(R,W),KEYLEN=8,EODAD=ENDDIR\n*\n         DCBD  DSORG=PS,DEVD=DA\n         END   RESET\n//*\n//LINK   EXEC  PGM=IEWL,PARM='MAP',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=OLD,DSN=SYS1.CMDLIB(RESET)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVIEW": {"ttr": 28934, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x925?\\x00\\x925?\\x077\\x00\\x01\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-12-18T00:00:00", "modifydate": "1992-12-18T07:37:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "SBGCSC"}, "text": "SEE THE VERSION OF REVIEW ON FILE 134 OF THIS TAPE.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REVSMF": {"ttr": 28936, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x925?\\x00\\x925?\\x078\\x00\\x01\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-12-18T00:00:00", "modifydate": "1992-12-18T07:38:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "SBGCSC"}, "text": "SEE THE VERSION OF REVSMF ON FILE 134 OF THIS TAPE.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XEQ": {"ttr": 28938, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00W\\x00\\x82\\x15_\\x01\\x18\\x11\\x9f\\x15\\x11\\x04\\xde\\x05 \\x00\\x1a\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1982-06-04T00:00:00", "modifydate": "2018-04-29T15:11:57", "lines": 1246, "newlines": 1312, "modlines": 26, "user": "SBGOLOB"}, "text": "*************************************************************JFS03NOV77\n*             LATEST UPDATE DATE                             JFS03NOV77\n         LCLC  &DATE                                         JFS03NOV77\n&DATE    SETC  '29APR18'    ABL                              JFS03NOV77\n*************************************************************JFS03NOV77\nDOPG TITLE 'NASA/GSFC -- DOPROG/DOPGM (TSO) COMMAND PROCESSOR (&DATE)'\n*                                                            JFS03NOV77\n**\n** THE DOPROG TSO COMMAND WAS\n** DESIGNED AND DEVELOPED BY J. SCHINDLER (CSC), MARCH 1975\n**   THE DOPROG COMMAND IS BASED ON AN EARLIER VERSION THAT WAS\n**   DESIGNED AND DEVELOPED BY\n**       GENE CZARCINSKI\n**       NASA, GODDARD SPACE FLIGHT CENTER\n**       GREENBELT, MARYLAND\n**\n** UPDATED 10APR77, GENE CZARCINSKI, NASA/GSFC (GT00501)\n**      . RENAME CSECT FROM 'GSFTSODO' TO 'DOPROG' WITH AN\n**        ENTRY POINT OF DOPGM ... MORE CONSISTANCY AND\n**        CLEANER CMDLIB\n**      . CHANGE BASE REG INIT CODE .. IT IS FLAKY AND MAY CAUSE\n**        ERROR*********\n** UPDATED 03NOV77, J. SCHINDLER, (PAC) CSC\n**      . INCLUDED CODE SO THAT THE LATEST UPDATE DATE COULD BE\n**        CHANGED EASILY\n**      . CHANGED THE LOGIC SO THAT THE 2 BYTES FROM THE ATTACH\n**        ECB IS USED AS THE RETURN CODE THAT IS PASSED ON EXIT\n**        FROM THIS COMMAND PROCESSOR\n** UPDATED 18APR80, B. GODFREY, AFDSC\n**      . BALR TO IKJPARS INSTEAD OF LINK, FOR MVS\n**      . REPLACE REGS MACRO WITH 16 EQUATES\n**      . USE UPTPREFX INSTEAD OF PSCBUSER. ADDED IKJUPT MACRO.\n** UPDATED 24MAY82, A. BRUCE LELAND, HITACHI\n**      . PASS ADDRESSES OF THE UPT, PSCB, AND ECT TO THE\n**        INVOKED PROCESSOR IN CASE IT IS A COMMAND PROCESSOR.\n** UPDATED 04JUN82, A. BRUCE LELAND, HITACHI\n**      . ADD CP PARAMETER TO ALLOW A PROMPT FOR COMMAND PROCESSOR\n**        PARAMETERS\n** UPDATED 29APR18, SAM GOLOB\n**      . CHECKED IF UPTPREFX IS FOR AN 8-CHARACTER USERID, AND\n**        GET THE INFORMATION FROM THE NEW FIELDS, IF IT IS SO.\n**        CHANGED SUPPORT INFORMATION.\n**\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     SAM GOLOB - SBGOLOB@CBTTAPE.ORG                                 *\n*                                                                     *\n*     BILL GODFREY - YAK36790@YAHOO.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n**\n** ATTR - RENT\n** ALIAS - DOPGM\n**\n** COMMAND -\n**\n** DOPROG/DOPGM 'LOAD MOD NAME' ''PARMS'' TASKLIB/LIB('DSLIST')\n**               RC/NORC/ALLRC  CP/NOCP\n**    'LOAD MOD NAME' - NAME OF THE LOAD MODULE TO BE EXECUTED.\n**    ''PARMS'' - PARM FIELD TO BE PASSED TO THE LOAD MODULE, QUOTED\n**               STRING.\n**    TASKLIB('DSLIST') - SPECIFIES THE DATA SET NAME(S) THAT ARE\n**             CONTENATED AND USED FOR THE TASK LIBRARY.\n**    LIB('DSLIST') - SAME AS TASKLIB\n**    RC - SPECIFIES THAT THE NON-ZERO RETURN CODE FROM THE EXECUTED\n**              PROGRAM IS TO BE PRINTED.\n**    NORC - SPECIFIES THAT THE RETURN CODE IS NOT TO BE PRINTED.\n**          (DEFAULT).\n**    ALLRC - SPECIFIES THAT THE RETURN CODE IS TO BE PRINTED.\n**      NOTE - THE RETURN CODE FROM THE EXECUTED PROGRAM IS ALWAYS\n**             PASSED. IF THIS COMMAND PROCESSOR ENCOUNTERS AN ERROR\n**             OR AN ATTENTION IS ENTERED, THE RETURN CODE IS 16.\n**    NOCP - SPECIFIES THAT THE LOAD MODULE IS NOT A COMMAND PROCESSOR\n**          (DEFAULT).\n**    CP   - SPECIFIES THAT THE LOAD MODULE IS A COMMAND PROCESSOR AND\n**           THAT PARAMETERS ARE TO BE PROVIDED IN RESPONSE TO A\n**           PROGRAM PROMPT.  NOTE THAT IF CP IS CODED, ANY PROGRAM\n**           PARM FIELD IS IGNORED.\n**\n**\n** THIS COMMAND PROCESSOR IS DESIGNED TO LOAD AND EXECUTE (ATTACH) A\n** PROGRAM IN ONE OF THE SYSTEM LINK LIBRARIES OR A USER\n** LIBRARY (TASKLIB).\n**\nDOPROG   CSECT\n         ENTRY DOPGM\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n**\n** FLAGS SETTINGS -\n**\n**       1... ... - RC (PRINT NON-ZERO RETURN CODES)\n**       .1.. .... - ALLRC (PRINT ALL RETURN CODES)\n**       ..1. .... - TASKLIB SPECIFIED\n**       ...1 .... - DSNAME INPUT IN QOUTES\n**       .... 1... - CP PARAMETER WAS CODED\n**       .... .111 - NOT USED\n**\n**\n** FLAGS EQUATES -\n**\nRCFLG    EQU   B'10000000' PRINT NON-ZERO RC FLAG\nALLRCFLG EQU   B'01000000' PRINT ALL RC FLAG\nTASKFLG  EQU   B'00100000' TASKLIB WAS SPECIFIED\nQFLG     EQU   B'00010000' DSNAME WAS INPUT IN QUOTES FLAG\nCPFLG    EQU   B'00001000' CP PARAMETER WAS CODED\n**\nDOPGM    SAVE  (14,12),,DOPROG/DOPGM-GT00501-&DATE\n         LA    R10,0(,R15)    *** INIT BASE REGS ***        GT00501\n         LA    R11,2048                                     GT00501\n         AR    R11,R11                                      GT00501\n         AR    R11,R10                                      GT00501\n         USING DOPROG,R10,R11\n         LR    R9,R1 SAVE CPPL PTR\n         USING CPPL,R9\n         LA    R0,RENTLEN LOAD LENGTH OF RENT DSECT\n         GETMAIN R,LV=(0) SP=0\n         USING SAVE,R1\n         ST    R1,8(R13)\n         ST    R13,4(R1)\n         LR    R13,R1\n         DROP  R1\n         USING SAVE,R13\n**\n** INIT PARSE PARM LIST (PPL)\n**\nBEGIN    LA    R8,PARSEPL\n         USING PPL,R8\n         MVC   PPLUPT,CPPLUPT USER PROFILE TABLE\n         MVC   PPLECT,CPPLECT ENVIRONMENT CONTROL TABLE\n         LA    R2,ECB\n         ST    R2,PPLECB ECB\n         LA    R2,ANSWER\n         ST    R2,PPLANS ADDR OF PDL\n         MVC   PPLCBUF,CPPLCBUF COMMAND BUFFER\n         XC    PPLUWA,PPLUWA USER WORK AREA ADDR\n         MVC   PPLPCL,=A(PPLPARM) PARM CONTROL LIST\n         MVC   UPTA,CPPLUPT       USER PROFILE TABLE\n         MVC   PSCBA,CPPLPSCB     PROTECTED STEP CONTROL BLOCK\n         MVC   ECTA,CPPLECT       ENVIRONMENT CONTROL TABLE\n**\n** INIT STACK IOPL\n**\n         LA    R8,STAKIOPL\n         USING IOPL,R8\n         MVC   IOPLUPT,CPPLUPT\n         MVC   IOPLECT,CPPLECT\n         LA    R2,STAKECB\n         ST    R2,IOPLECB\n** IOPLIOPB WILL BE INIT BY STACK MACRO\n**\n** INIT IOPL\n**\n         LA    R8,IOPLA\n         USING IOPL,R8\n         MVC   IOPLUPT,CPPLUPT\n         MVC   IOPLECT,CPPLECT\n         LA    R2,ECB\n         ST    R2,IOPLECB\n** IOPLIOPB WILL BE INIT BY MACRO\n**\n** INIT DAIR PARM LIST\n         LA    R8,DAIRPL\n         USING DAPL,R8\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R2,ECB\n         ST    R2,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB PROTECTED STEP CONTROL BLOCK\n         LA    R2,DAIRPB\n         ST    R2,DAPLDAPB ADDR OF DAIR PARM BLOCK\n**\n** SAVE PREFIX AND LENGTH WITH PERIOD (.)\n**\n         L     R15,CPPLUPT\n         SR    R3,R3\n         IC    R3,UPTPREFL-UPT(,R15)  LENGTH OF PREFIX\n         LA    R15,UPTPREFX-UPT(,R15) ADDRESS OF PREFIX\n*\n* -- >                              GET UPTPREFX FROM NEW FIELDS.\n         CLI   0(R15),C'>'          8-CHARACTER UPT PREFIX?\n         BNE   NOUID8               NO. SKIP THIS CODE.\n         LA    R15,17(,R15)         YES, LOAD FROM UPTPREF8.\n         SR    R3,R3                CLEAR REGISTER AS BEFORE.\n         IC    R3,41(,R15)          POINT TO NEW LENGTH.\nNOUID8   DS    0H\n* -- >\n         LR    R4,R3\n         BCTR  R3,R0\n         LA    R14,USERID\n         EX    R3,MOVE\n*MOVE    MVC   0(0,R14),0(R15)\n         LA    R3,USERID(R4)\n         MVI   0(R3),C'.' MOVE IN PERIOD\n         LA    R4,1(R4) FOR PERIOB\n         STH   R4,USERIDL\n         DROP  R8,R9\n**\n** INIT PARM BLOCK, ETC.\n**\n         MVC   PTPB(PTREFL),PTREF INIT PUTLINE PARM BLOCK\n         MVC   PGPB(PGREFL),PGREF INIT PUTGET PARM BLOCK\n         MVC   STAK(STAKREFL),STAKREF INIT STACK PARM BLOCK\n         XC    NODDNS,NODDNS INIT NO. OF DDNAMES SPECIFIED BY TASKLIB\n         XC    ANSWER1,ANSWER1\n         MVI   FLAGS,0\n         MVC   EPENTRY(4),=Y(1,58)\n         MVC   EPNAME,BLANKS\n         LA    R2,1\n         ST    R2,OLD ONLY ONE SEGMENT\n**\n** PARSE THE COMMAND\n**\n         XC    ECB,ECB\n         LA    R1,PARSEPL\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IS IKJPARS IN LPA ?\n         BNO   PARSELNK            IF NOT, DO LINK\n         L     R15,524(,R15)       GET ADDRESS OF IKJPARS\n         BALR  R14,R15             CALL PARSE SERVICE ROUTINE\n         B     PARSELTR            BRANCH AROUND LINK\nPARSELNK EQU   *\n         LINK  EP=IKJPARS LINK TO PARSE\nPARSELTR LTR   R15,R15\n         BZ    PARSEOK\n         LA    R0,MSG01\n         BAL   R14,PUTLINE PARSE ERROR\n         B     ERRORRTN\nPARSEOK  DC    0H'0'\n         L     R12,ANSWER\n         USING PDL,R12\n         STM   R14,R12,STAXSAVE+12 SAVE REGS SO STAXEXIT CAN USE\n**             PROGRAM BASE REGS\n         MVC   STAXLIST(STAXREFL),STAXREF\n         LA    R2,STAXSAVE\n         STAX  STAXEXIT,USADDR=(R2),MF=(E,STAXLIST)\n         CLI   CPKEYWD+1,1 CP PARAMETER?\n         BNE   *+8         NO, BRANCH\n         OI    FLAGS,CPFLG YES, SET THE FLAG\n         CLI   RCKEYWD+1,2 TEST FOR NO RC\n         BE    TESTAKW GO TEST FOR TASK LIB\n         BH    SETALLFL\n         OI    FLAGS,RCFLG\n         B     TESTAKW GO TEST FOR TASK LIB\nSETALLFL OI    FLAGS,ALLRCFLG\nTESTAKW  DC    0H'0'\n         CLI   TASKEYWD+1,0 TEST FOR TASKLIB\n         BE    MOVEEP\n**\n**INIT PARSEPL WITH DIFFERENT ANSWER ADDR AND COMMAND BUFFER IN\n** CASE THE DATA SET(S) WHOSE NAMES ARE SPECIFIED BY THE TASKLIB\n** KEYWORD ARE NOT IN THE CATALOG, CANT BE ALLOCATED, ETC.\n**\n         OI    FLAGS,TASKFLG\n         LA    R2,ANSWER1\n         ST    R2,PARSEPL+16\n         LA    R2,CMDLEN\n         ST    R2,PARSEPL+20\n         MVC   PARSEPL+12,=A(DSNPPL)\n         LA    R9,TASKDSNA USE R9 AS BASE FOR DSNAME PDE\nTASKLP1  DC    0H'0'\n         NI    FLAGS,255-QFLG\n         L     R15,0(R9) LOAD ADDR OF DSNAME\n         LTR   R15,R15 TEST FOR DSNAME\n         BNZ   TASKB\n**\n** DATA SET NAME ERROR -- PROBABLY MEMBER NAME ONLY\n**\n         TM    14(R9),B'10000000' TEST FOR MEMBER NAME\n         BO    TASKA\n         LA    R0,MSG02 INVALID DSNAME\n         BAL   R14,PUTLINE\n         B     TASKPRMT GO PROMPT FOR ANOTHER DSNAME\nTASKA    OI    FLAGS,QFLG SO ''( ... )'' WILL BE PRINTED\n         LA    R14,CMDBUF\n         MVI   0(R14),C'('\n         LA    R14,1(R14)\n         LA    R2,1\n         LH    R3,12(R9) LOAD LENGTH OF MEMBER NAME\n         AR    R2,R3\n         BCTR  R3,R0\n         L     R15,8(R9) LOAD ADDR OF MEMBER NAME\n         EX    R3,MOVE\n         LA    R14,1(R3,R14)\n         MVI   0(R14),C')'\n         LA    R2,1(R2)\n         STH   R2,CMDOFF\n         LA    R0,CMDOFF\n         LA    R1,MSG03\n         BAL   R14,MSGOUT GO OUTPUT 'DATA SET --- INVALID'\n         B     TASKPRMT GO PROMPT FOR ANOTHER DATA SET NAME\n**\n** DATA SET NAME WAS SPECIFIED, IGNORE MEMBER NAME IF SPECIFIED.\n**\nTASKB    DC    0H'0'\n         TM    6(R9),B'01000000' TEST FOR QUOTES\n         BZ    TASKC\n         OI    FLAGS,QFLG SET QUOTES FLAG\nTASKC    LH    R2,4(R9) LOAD LENGTH OF DATA SET NAME\n         STH   R2,DSNLEN\n         BCTR  R2,R0\n         LA    R14,DSNAME R15= ADDR OF INPUT DSNAME\n         EX    R2,MOVE\n**\n** ALLOC DSNAME\n**\n         LA    R8,DAIRPB\n         USING DAPB08,R8\n         MVC   DA08CD,=X'0008'\n         XC    DA08FLG(6),DA08FLG\n         LA    R2,DSNLEN\n         ST    R2,DA08PDSN\n         MVI   DA08DDN,C' '\n         MVC   DA08DDN+1(23),DA08DDN\n         XC    DA08BLK(16),DA08BLK\n         MVI   DA08MNM,C' '\n         MVC   DA08MNM+1(15),DA08MNM\n         MVI   DA08DSP1,B'00001000' SHR\n         MVI   DA08DPS2,B'00001000' KEEP\n         MVI   DA08DPS3,B'00001000' KEEP\n         XC    DA08CTL(5),DA08CTL\n         TM    FLAGS,QFLG TEST FOR QUOTE\n         BO    *+8\n         OI    DA08CTL,B'00100000' PREFIX USER ID\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LTR   R15,R15\n         BZ    TESTPDS\n         CH    R15,=H'8' TEST FOR CATALOG ERROR\n         BNE   TASKDAER\n         CLC   DA08DARC,=X'170C'\n         BNE   TASKCTER\n         TM    FLAGS,QFLG TEST FOR QUOTES\n         BO    TASKDAER\n**\n** SINCE THE DSNAME IS NOT IN QUOTES, APPEND .LOAD AND TRY ALLOC AGAIN\n**\n         LH    R2,DSNLEN\n         LA    R3,DSNAME(R2)\n         MVC   0(5,R3),=C'.LOAD'\n         LA    R2,5(R2)\n         STH   R2,DSNLEN\n         XC    DA08DARC(4),DA08DARC\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LTR   R15,R15\n         BZ    TESTPDS\n         LH    R2,DSNLEN\n         SH    R2,=H'5' FOR .LOAAD\n         STH   R2,DSNLEN\n         CH    R15,=H'8' TEST FOR CATALOG ERROR\n         BNE   TASKDAER\nTASKCTER DC    0H'0' CATALOG ERROR\n         LA    R0,DSNLEN\n         LA    R1,MSG06 DSNAME NOT IN CATALOG\n         BAL   R14,MSGOUT\n         B     TASKPRMT GO PROMPT\n**\n** ALLOCATION ERROR\n**\nTASKDAER DC    0H'0'\n         ST    R15,SAVER15\n         LA    R0,DSNLEN\n         LA    R1,MSG25\n         BAL   R14,MSGOUT\n         L     R15,SAVER15\n         CH    R15,=H'12'\n         BH    TESTDARC\n         MVC   WORKBUFF(L'MSG07),MSG07\n         LA    R6,L'MSG07+8\n         STH   R6,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LH    R2,DA08DARC\n         LA    R4,4\n         SR    R5,R5\n         LA    R6,WORKBUFF+L'MSG07-1\nTASKLP2  SRDL  R2,4\n         SRL   R3,28\n         IC    R5,TABLE(R3)\n         STC   R5,0(R4,R6)\n         BCT   R4,TASKLP2\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\n         B     TASKPRMT\nTESTDARC DC    0H'0'\n         CH    R15,=H'16'\n         BH    TSTDARC1\n         LA    R0,MSG26  ALLOCATIONS EXCEEDED\n         BAL   R14,PUTLINE\n         B     TASKPRMT\nTSTDARC1 DC    0H'0'\n         MVC   WORKBUFF(L'MSG27),MSG27\n         CVD   R15,DWORK\n         UNPK  DWORK(3),DWORK+6(2)\n         OI    DWORK+2,C'0'\n         MVC   WORKBUFF+L'MSG27(2),DWORK+1\n         LA    R2,L'MSG27+6\n         STH   R2,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\n         B     TASKPRMT\n**\n** DATA SET IS ALLOCATED, TEST FOR PDS.\n**\nTESTPDS  TM    DA08DSO,B'00000010' TEST FOR PDS\n         BO    SAVEDDN\n         LA    R0,DSNLEN\n         LA    R1,MSG13\n         BAL   R14,MSGOUT DS IS NOT PDS\n         LA    R1,DA08DDN\n         BAL   R14,FREEDDN GO FREE DDNAME\n         B     TASKPRMT\nSAVEDDN  LH    R2,NODDNS SAVE ALLOCATED DDNAME\n         SLL   R2,3 MULTIPLY BY 8\n         LA    R3,DDNAMES(R2)\n         MVC   0(8,R3),DA08DDN SAVE DDNAME\n         DROP  R8\n         LH    R2,NODDNS\n         LA    R2,1(R2)\n         STH   R2,NODDNS\n         CH    R2,=H'10'\n         BL    TASKENLP\n         CLI   24(R9),X'FF' TEST FOR LAST PDE\n         BE    CONCAT  LAST PDE -- GO CONCAT.\n         LA    R0,MSG08  MORE THAN 10 DSNAMES SPECIFIED BY TASKLIB\n         BAL   R14,PUTLINE\n         LA    R2,MSG09\n         ST    R2,OLD+4\n         TCLEARQ INPUT\n         XC    ECB,ECB\n         PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                  X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC GO TEST RETURN CODE\n         L     R2,PGPB+12 LOAD ADDR OF INPUT LINE\n         LH    R3,0(R2) LOAD LENGTH OF INPUT LINE\n         CH    R3,=H'4' TEST FOR NULL LINE\n         BNH   CONCAT\n         B     ERRORRTN\n**\n** PROMPT FOR TASK LIBRARY DATA SET NAME\n**\nTASKPRMT LA    R2,MSG04 ENTER TASKLIB DSNAME\n         ST    R2,OLD+4\n         TCLEARQ INPUT\n         XC    ECB,ECB\nTASKPRMA PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                  X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC\n         L     R15,PGPB+12 LOAD ADDR OF INPUT LINE\n         LH    R2,0(R15) LOAD LENGTH\n         CH    R2,=H'48' TEST FOR MAX DSN LENGTH\n         BNH   TASKPRMB\n         LR    R0,R2\n         O     R0,=X'01000000' SP=1\n         LR    R1,R15\n         FREEMAIN R,LV=(0),A=(1)\n         LA    R0,MSG05 DSNAME TOO LONG\n         BAL   R14,PUTLINE\n         B     TASKPRMA\nTASKPRMB BCTR  R2,R0\n         LA    R14,CMDLEN\n         EX    R2,MOVE\n         LH    R0,0(R15)\n         O     R0,=X'01000000' SP=1\n         LR    R1,R15\n         FREEMAIN R,LV=(0),A=(1)\n         LH    R2,CMDLEN\n         CH    R2,=H'4' TEST FOR NULL LINE RESPONSE\n         BNH   TASKENLP GO TO END OF LOOP\n         IKJRLSA ANSWER1\n         XC    ECB,ECB\n         LA    R1,PARSEPL\n         LINK  EP=IKJPARS PARSE DSNAME\n         CH    R15,=H'8' TEST FOR ATTN\n         BE    ERRORRTN GO RETURN\n         BH    TASKPRMC\n         CH    R15,=H'4'\n         BNE   TASKPRMD\nTASKPRMC LA    R0,MSG01 PARSE ERROR\n         BAL   R14,PUTLINE\n         B     ERRORRTN\nTASKPRMD L     R15,ANSWER1\n         USING DSNPDL,R15\n         MVC   0(24,R9),NEWDSN OVERLAY OLD PDE WITH NEW ONE\n         B     TASKLP1\n         DROP  R15\n**\n** TEST FOR RETURN CODE FROM PUTGET\n**\nTESTPGRC CH    R15,=H'8'\n         BE    ERRORRTN\n         CH    R15,=H'12'\n         BNE   TESTRC24\n         TPUT  MSG10,MSG10L NO PROMPTING\n         B     ERRORRTN\nTESTRC24 CH    R15,=H'24'\n         BNE   PGRC28\n         TPUT  MSG11,MSG11L INVALID PARMS\n         B     ERRORRTN\nPGRC28   TPUT  MSG12,MSG12L NOT ENOUGH SPACE\n         B     ERRORRTN\n**\n** TEST FOR END OF PDE'S\n**\nTASKENLP CLI   24(R9),X'FF'\n         BE    CONCAT\n         L     R9,24(R9) ADDR OF NEXT PDE\n         B     TASKLP1\n**\n** ALL DATA SETS FOR TASKLIB HAVE BEEN ALLOCATED. NOW CONCATENATE THEM.\n**\nCONCAT   DC    0H'0'\n         LH    R2,NODDNS TEST FOR TASK LIBRARIES\n         CH    R2,=H'1'\n         BE    MOVEEP\n         BH    CONCAT1\n         LA    R0,MSG16\n         BAL   R14,PUTLINE\n         LA    R2,MSG09\n         ST    R2,OLD+4\n         TCLEARQ INPUT\n         XC    ECB,ECB\n         PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                  X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC GO TEST RC FROM PUTGET\n         L     R1,PGPB+12 LOAD ADDR OF INPUT LINE\n         LH    R0,0(R1) LOAD LENGTH\n         CH    R0,=H'4' TEST FOR NULL LINE\n         BH    ERRORRTN\n         O     R0,=X'01000000' SP=1\n         FREEMAIN R,LV=(0),A=(1)\n         B     MOVEEP\nCONCAT1  LA    R8,DAIRPB\n         USING DAPB0C,R8\n         MVC   DA0CCD,=X'000C'\n         XC    DA0CFLG(6),DA0CFLG\n         LH    R2,NODDNS\n         STH   R2,DA0CNUMB\n         XC    DA0CNUMB+2(2),DA0CNUMB+2\n         SLL   R2,3 MULTIPLY BY 8\n         BCTR  R2,R0\n         LA    R14,DA0CDDN\n         LA    R15,DDNAMES\n         EX    R2,MOVE\n         DROP  R8\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LTR   R15,R15\n         BZ    MOVEEP GO MOVE IN EP NAME\n         LA    R0,MSG14 CONCAT ERROR\n         BAL   R14,PUTLINE\n         B     ERRORRTN\n**\n** HAVE ALLOCATED AND CONCATENATED THE TASK LIBRARIES, WILL NOW\n** MOVE LOAD MOD NAME, MOVE THE PARM FIELD (IF SPECIFIED), OPEN THE\n** TASKLIB DCB, AND ATTACH.\n**\nMOVEEP   DC    0H'0'\n         LH    R2,LOADMOD+4\n         STH   R2,EPNAMEL   SAVE LENGTH OF PROGRAM NAME\n         BCTR  R2,R0\n         L     R15,LOADMOD\n         LA    R14,EPNAME\n         EX    R2,MOVE MOVE EP NAME\n         TM    PARMA+6,B'10000000' TEST FOR PARM FIELD\n         BO    TSTPARML\n         XC    PARMFLDL,PARMFLDL\n         B     TESTTSK\nTSTPARML LH    R2,PARMA+4 LOAD LENGTH OF QSTRING (PARMFIELD)\n         CH    R2,=H'256'\n         BNH   MOVEPARM\n         LA    R0,MSG15 PARM FIELD EXCEEDS 256 BYTES\n         BAL   R14,PUTLINE\n         LA    R2,256\nMOVEPARM STH   R2,PARMFLDL\n         BCTR  R2,R0\n         L     R15,PARMA LOAD ADDR OF QSTRING\n         LA    R14,PARMFLD\n         EX    R2,MOVE MOVE PARM FIELD\n         LH    R2,NODDNS\n         TM    FLAGS,TASKFLG WAS TASKLIB SPECIFIED?\n         BZ    PROMPT        NO, BRANCH\nTESTTSK  DC    0H'0' TEST FOR TASKLIB DSNAMES\n         LH    R2,NODDNS\n         LTR   R2,R2\n         BZ    PROMPT\n         MVC   TASKLIB(SKELDCBL),SKELDCB\n         LA    R8,TASKLIB\n         USING IHADCB,R8\n         MVC   DCBDDNAM,DDNAMES MOVE DDNAME TO DCB\n         DROP  R8\n**\n**  CHECK FOR CP PARAMETER AND PROMPT IF REQUIRED\n**\nPROMPT   TM    FLAGS,CPFLG      CP CODED?\n         BNO   RELEASE          NO, BRANCH\n         L     R1,ECTA          ECT ADDRESS\n         USING ECT,R1\n         MVC   ECTPCMD(8),EPNAME  CHANGE THE PRIMARY COMMAND NAME\n         DROP  R1\n         LA    R2,MSG28\n         ST    R2,OLD+4\n         XC    ECB,ECB\n         PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,MODE), ALLOW CLIST SOURCE X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC GO TEST RETURN CODE\n         L     R3,PGPB+12 LOAD ADDR OF INPUT LINE\n         LH    R2,0(R3) LOAD LENGTH OF INPUT LINE\n         CH    R2,=H'256'\n         BNH   MOVECP\n         LA    R0,MSG29 COMMAND EXCEEDS 256 BYTES\n         BAL   R14,PUTLINE\n         LA    R2,256\nMOVECP   BCTR  R2,R0\n         LR    R15,R3    ADDRESS OF COMMAND\n         LA    R14,PARMFLDL\n         EX    R2,MOVE MOVE PARM FIELD\n         AH    R2,=H'1'\n         STH   R2,PARMFLDL\n         LR    R1,R3          ADDRESS OF INPUT STRING\n         LH    R0,0(,R1)      LENGTH OF INPUT STRING\n         O     R0,=X'01000000'  SUBPOOL 1\n         FREEMAIN R,LV=(0),A=(1)  FREEMAIN\n         LA    R15,PARMFLDL(R2)   END OF STRING\n         SR    R2,R2          OFFSET TO PARAMTERS\n         LR    R3,R14         POINT TO STRING\n*\nCOMMSRCH CLI   4(R3),X'40'    START OF COMMAND?\n         BNE   COMMSTRT       YES, BRANCH\n         AH    R2,=H'1'\n         AH    R3,=H'1'\n         B     COMMSRCH\nCOMMSTRT CLI   4(R3),X'40'    END OF COMMAND?\n         BE    COMMEND        YES, BRANCH\n         CR    R3,R15         TERMINATOR?\n         BNL   COMMEND        YES, BRANCH\n         AH    R2,=H'1'\n         AH    R3,=H'1'\n         B     COMMSTRT\nCOMMEND  CLI   4(R3),X'40'    START OF OPERANDS?\n         BNE   COMMOPER       YES, BRANCH\n         CR    R3,R15         TERMINATOR?\n         BNL   COMMEND        YES, BRANCH\n         AH    R2,=H'1'\n         AH    R3,=H'1'\n         B     COMMEND\nCOMMOPER STH   R2,PARMFLDL+2  OFFSET TO COMMAND OPERANDS\n**\n** RELEASE PARSE SPACE BEFORE ATTACHING\n**\nRELEASE  DC    0H'0'\n         IKJRLSA ANSWER\n         XC    ANSWER,ANSWER\n         IKJRLSA ANSWER1\n         XC    ANSWER1,ANSWER1\n         SR    R0,R0\n         GETMAIN R,LV=(0) CLEAN UP SEGMENTS\n         MVC   ATTACH(ATREFL),ATREF\n         XC    ECB,ECB\n         LA    R1,PARMFLDL\n         ST    R1,PARMADDR\n         OI    PARMADDR,X'80'\n         TM    FLAGS,CPFLG       COMMAND PROCESSOR?\n         BNO   *+8               NO, BRANCH\n         XI    PARMADDR,X'80'    YES, TURN OFF PARM FLAG BIT\n         TM    FLAGS,TASKFLG TEST FOR TASK LIB\n         BZ    ATTACH1\n         LH    R2,NODDNS\n         LTR   R2,R2\n         BNZ   OPENDCB\nATTACH1  DC    0H'0'\n         BLDL  0,EPENTRY\n         LTR   R15,R15 WAS EP NAME FOUND?\n         BNZ   EPERROR NO - GO PUT OUT MSG\n         LA    R1,PARMADDR\n         LA    R15,ATTACH\n         LA    R2,ECB\n         LA    R3,EPNAME\n         XC    ECB,ECB\n         ATTACH DE=(3),ECB=(2),SHSPL=SPLIST,                           X\n               MF=(E,(1)),SF=(E,(15))\n         B     WAIT\nOPENDCB  DC    0H'0'\n         MVC   OPEN(OPENREFL),OPENREF\n         LA    R1,OPEN\n         LA    R2,TASKLIB\n         OPEN  ((2),(INPUT)),MF=(E,(1))\n         LA    R8,TASKLIB\n         USING IHADCB,R8\n         TM    DCBOFLGS,B'00010000' TEST FOR OPEN\n         BO    OPENOK\n         LA    R0,MSG17 DCB NOT OPEN\n         BAL   R14,PUTLINE\n         B     ERRORRTN\n         DROP  R8\nOPENOK   DC    0H'0'\n         LA    R3,TASKLIB\n         BLDL  (3),EPENTRY\n         LTR   R15,R15\n         BZ    GOTEPOK\nEPERROR  DC    0H'0' PROGRAM NAME NOT FOUND\n         LA    R14,WORKBUFF\n         MVC   0(MSG20L,R14),MSG20  PROGRAM NAME\n         LA    R14,MSG20L(R14)\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\n         LH    R2,EPNAMEL\n         BCTR  R2,R0\n         LA    R15,EPNAME\n         EX    R2,MOVE  EPNAME\n         LA    R14,1(R2,R14)\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\n         MVC   0(MSG21L,R14),MSG21  NOT FOUND\n         LA    R14,MSG21L(R14)\n         LH    R2,NODDNS\n         LTR   R2,R2\n         BZ    EPERROR1\n         MVC   0(4,R14),=C'TASK'\n         B     EPERROR2\nEPERROR1 MVC   0(4,R14),=C'LINK'\nEPERROR2 LA    R14,4(R14)\n         MVC   0(MSG22L,R14),MSG22  LIBRARIES\n         LA    R14,MSG22L(R14)\n         LA    R2,WORKLEN\n         SR    R14,R2\n         STH   R14,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\nEPERROR3 LA    R2,MSG23\n         ST    R2,OLD+4\n         TCLEARQ INPUT\n         XC    ECB,ECB\n         PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                  X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC\n         L     R1,PGPB+12  LOAD ADDR\n         LH    R3,0(R1)\n         SH    R3,=H'4'\n         BNP   ERRORRTN\n         CH    R3,=H'8'\n         BNH   EPERROR4\n         LA    R0,MSG24  PROGRAM NAME EXCEEDS 8 CHAR\n         BAL   R14,PUTLINE\n         B     EPERROR3\nEPERROR4 STH   R3,EPNAMEL  STORE LENGTH OF EP NAME\n         MVC   EPNAME,BLANKS\n         LA    R14,EPNAME\n         LA    R15,4(R1)\n         BCTR  R3,R0\n         EX    R3,MOVE\n         OC    EPNAME,BLANKS UPPER CASE EP NAME\n         LH    R0,0(R1)\n         O     R0,=X'01000000'  SP=1\n         FREEMAIN R,LV=(0),A=(1)\n         LH    R2,NODDNS\n         LTR   R2,R2\n         BNZ   OPENOK\n         B     ATTACH1\nGOTEPOK  DC    0H'0'\n         LA    R1,PARMADDR\n         LA    R15,ATTACH\n         LA    R2,ECB\n         LA    R4,EPNAME\n         XC    ECB,ECB\n         ATTACH DE=(4),ECB=(2),TASKLIB=(3),SHSPL=SPLIST,               X\n               MF=(E,(1)),SF=(E,(15))\nWAIT     ST    R1,TCB\n         LA    R2,ECB\n         WAIT  ECB=(2)\n         DETACH TCB\n         XC    COMPCDE,COMPCDE   CLEAR CONDITION CODE        JFS04NOV77\n         MVC   COMPCDE+2(2),ECB+2  SAVE CONDITION CODE     JFS03NOV77\n         B     RETURN\n**\n** ERROR RETURN. ATTN, ERROR, ETC. WILL CAUSE CONTROL TO BE PASSED TO\n** THIS SECTION.\n**\nERRORRTN DC    0H'0'\n         IKJRLSA ANSWER\n         IKJRLSA ANSWER1\n         XC    STAKECB,STAKECB\n         STACK PARM=STAK,DELETE=ALL,MF=(E,STAKIOPL)\n         XC    COMPCDE,COMPCDE                               JFS03NOV77\n         MVI   COMPCDE+3,16                                  JFS03NOV77\n**\n** CLEAN UP AND RETURN\n**\nRETURN   DC    0H'0'\n         LH    R2,NODDNS ANY DDNAME TO DECONCATENATE?\n         LTR   R2,R2\n         BZ    RETURN1\n         MVC   CLOSE(CLOSREFL),CLOSREF\n         LA    R1,CLOSE\n         LA    R3,TASKLIB\n         CLOSE ((3)),MF=(E,(1))\n         CH    R2,=H'1'\n         BE    FREEUP ONLY ONE\n         LA    R8,DAIRPB\n         USING DAPB10,R8\n         MVC   DA10CD,=X'0010'\n         XC    DA10FLG(6),DA10FLG\n         MVC   DA10DDN,DDNAMES\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LTR   R15,R15\n         BZ    FREEUP\n         LA    R0,MSG18 DECONT. ERROR\n         BAL   R14,PUTLINE\n         DROP  R8\n**\n** FREE THE ALLOCATED DDNAMES\n**\nFREEUP   LR    R3,R2\n         BCTR  R3,R0\n         SLL   R3,3\n         LA    R1,DDNAMES(R3)\n         BAL   R14,FREEDDN\n         BCT   R2,FREEUP\nRETURN1  DC 0H'0'                                            JFS03NOV77\n         L     R2,COMPCDE     RETURN CODE FROM ATTACHED PROG JFS03NOV77\n         TM    FLAGS,ALLRCFLG\n         BO    PUTRCOUT\n         TM    FLAGS,RCFLG\n         BZ    RETURN2\n         LTR   R2,R2\n         BZ    RETURN2\n**                                                           JFS03NOV77\n** CONVERT CONDITION CODE FROM BINARY TO EBCDIC AND          JFS04NOV77\n** OUTPUT THE MESSAGE                                        JFS04NOV77\n**                                                           JFS03NOV77\nPUTRCOUT MVC   WORKBUFF(L'MSG19),MSG19\n         CVD   R2,DWORK\n         UNPK  DWORK(5),DWORK+5(3)                           JFS03NOV77\n         OI    DWORK+4,C'0'                                  JFS03NOV77\n         LA    R15,DWORK-1                                   JFS03NOV77\n         LA    R4,5                                          JFS04NOV77\nPUTRC1   LA    R15,1(R15)                                    JFS03NOV77\n         CLI   0(R15),C'0'  FIND NON ZERO                    JFS03NOV77\n         BNE   PUTRC2                                        JFS03NOV77\n         BCT   R4,PUTRC1                                     JFS03NOV77\n         LA    R4,1  SO AT LEAST 1 0 WILL BE OUTPUT          JFS04NOV77\nPUTRC2   LA    R14,WORKBUFF+L'MSG19                          JFS03NOV77\n         BCTR  R4,R0  -1 FOR MVC                             JFS03NOV77\n         EX    R4,MOVE MOVE IN COMP CODE RETURNED            JFS03NOV77\n         LA    R3,L'MSG19+4+1(R4) +4 FOR HEADER,+1 FOR MVC   JFS03NOV77\n         STH   R3,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\nRETURN2  DC    0H'0'\n         LA    R0,RENTLEN\n         LR    R1,R13\n         L     R13,SAVE+4\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2 LOAD RETURN CODE\n         RETURN (14,12),T,RC=(15)\n**\n**\n**\nMOVE     MVC   0(0,R14),0(R15)\n**\n**\n**\n** PUTLINE SECTION\n** ON ENTRY - R0 = ADDR OF MSG, R14 = RETURN ADDR\n**\nPUTLINE  DC    0H'0'\n         ST    R14,PTSVE14\n         XC    ECB,ECB\n         PUTLINE PARM=PTPB,OUTPUT=((R0),TERM,SINGLE,DATA),             X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=(E,IOPLA)\n         LTR   R15,R15 TEST FOR ERRORS, ATTN ETC\n         BZ    PTRTN\n         CH    R15,=H'4' TEST FOR ATTN\n         BE    ERRORRTN GO RETURN WITH RC=16\n         TPUT  PTERROR,PTERRORL PUTLINE ERROR\n         B     ERRORRTN\nPTRTN    L     R14,PTSVE14\n         BR    R14\n**\n** END OF PUTLINE SECTION\n**\n**\n** STAX EXIT\n**\nSTAXEXIT SAVE  (14,12)\n         LR    R2,R13 SAVE SAVE ADDR\n         L     R13,8(R1) LOAD ADDR OF STAXSAVE\n         USING STAXSAVE,R13\n         ST    R2,STAXSAVE+4\n         ST    R13,8(R2)\n         LM    R14,R12,STAXSAVE+12 RESTORE REGS\n         LA    R2,ECB\n         POST  (R2),16  SET RC=16\n         XC    STAKECB,STAKECB\n         STACK PARM=STAK,DELETE=ALL,MF=(E,STAKIOPL)\n         TCLEARQ INPUT\n         TCLEARQ OUTPUT\n         L     R13,STAXSAVE+4\n         RETURN (14,12),RC=0\n         USING SAVE,R13 REESTABLISH BASE REG\n**\n** END OF STAXEXIT\n**\n**\n** OUTPUT -- 'DATA SET ---- ' MSG\n** ON ENTRY - R0 = ADDR OF DSNAME, R1 = ADDR OF LAST PART OF MSG,\n** R14 = RETURN ADDR.\n**\nMSGOUT   DC    0H'0'\n         ST    R14,MSGSVE14\n         STM   R2,R8,MSGSVE28\n         LA    R14,WORKBUFF\n         LA    R3,DATAMSGL\n         LA    R15,DATAMSG\n         BCTR  R3,R0\n         EX    R3,MOVE\n*MOVE    MVC   0(0,R14),0(R15)\n         LA    R14,1(R3,R14)\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\n         TM    FLAGS,QFLG TEST FOR QUOTES\n         BZ    MSGOUT1\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\n         B     MSGOUT2\nMSGOUT1  LH    R3,USERIDL LOAD LENGTH OF USER ID\n         LA    R15,USERID\n         BCTR  R3,R0\n         EX    R3,MOVE ID\n         LA    R14,1(R3,R14)\nMSGOUT2  DC    0H'0'\n         LR    R15,R0\n         LH    R3,0(R15) LOAD LENGTH OF DSNAME\n         LA    R15,2(R15)\n         BCTR  R3,R0\n         EX    R3,MOVE\n         LA    R14,1(R3,R14)\n         TM    FLAGS,QFLG\n         BZ    MSGOUT3\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\nMSGOUT3  MVI   0(R14),C''''\n         LA    R14,1(R14)\n         MVI   0(R14),C' '\n         LA    R14,1(R14)\n         LH    R3,0(R1)\n         LA    R15,2(R1) LOAD ADDR DSNAME\n         BCTR  R3,R0\n         EX    R3,MOVE\n         LA    R14,1(R3,R14)\n         LA    R3,WORKLEN\n         SR    R14,R3\n         STH   R14,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\n         LM    R2,R8,MSGSVE28\n         L     R14,MSGSVE14\n         BR    R14\n**\n** END OF OUTMSG SECTION\n**\n**\n** FREE DATA SETS BY DDNAME SECTION\n** ON ENTRY - R1 = ADDR OF DDNAME, R14 = RETURN ADDR\n**\nFREEDDN  DC    0H'0'\n         STM   R2,R8,FREESV28\n         ST    R14,FREESV14\n         LA    R8,DAIRPB\n         USING DAPB18,R8\n         MVC   DA18CD,=X'0018'\n         XC    DA18FLG(10),DA18FLG\n         MVC   DA18DDN,0(R1) MOVE IN DDNAME\n         MVI   DA18MNM,C' '\n         MVC   DA18MNM+1(9),DA18MNM\n         MVI   DA18DPS2,B'00001000' KEEP\n         MVI   DA18CTL,B'00010000' UNALLOC PERM\n         MVC   DA18JBNM,BLANKS\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LM    R2,R8,FREESV28\n         L     R14,FREESV14\n         BR    R14 RETURN\n         DROP  R8\n**\n** END OF FREE DDNAME SECTION\n**\n         EJECT\n**\n** ADDRS, PARM BLOCKS, ETC.\n**\nATREF    ATTACH SF=L\nATREFL  EQU   *-ATREF\nSTAXREF  STAX  STAXEXIT,MF=L\nSTAXREFL EQU   *-STAXREF\nPGREF    PUTGET MF=L\nPGREFL   EQU   *-PGREF\nPTREF    PUTLINE MF=L\nPTREFL   EQU   *-PTREF\nSTAKREF  STACK MF=L\nSTAKREFL EQU   *-STAKREF\nOPENREF  OPEN  (,),MF=L\nOPENREFL EQU   *-OPENREF\nCLOSREF  CLOSE (,),MF=L\nCLOSREFL EQU   *-CLOSREF\n         PRINT NOGEN\nSKELDCB  DCB   DSORG=PO,MACRF=R  SKELETON DCB\nSKELDCBL EQU   *-SKELDCB\nSPLIST   DC    AL1(3,0,1,78) SHARE SUBPOOL LIST\nBLANKS   DC    CL8' '\nTABLE    DC    C'0123456789ABCDEF' CONVERT TABLE\n         EJECT\n**\n** MESSAGES\n**\nMSG01    DC    Y(MSG01L,0)\n         DC    C'PARSE ERROR'\nMSG01L   EQU   *-MSG01\nMSG02    DC    Y(MSG02L,0)\n         DC    C'INVALID DATA SET NAME'\nMSG02L   EQU   *-MSG02\nMSG03    DC    Y(MSG03L)\n         DC    C'IS AN INVALID TASK LIBRARY NAME'\nMSG03L   EQU   *-MSG03-2\nMSG04    DC    Y(MSG04L,0)\n         DC    C' ENTER TASKLIB DATA SET NAME-'\nMSG04L   EQU   *-MSG04\nMSG05    DC    Y(MSG05L,0)\n         DC    C'DATA SET NAME LENGTH EXCEEDS 44 BYTES'\nMSG05L   EQU   *-MSG05\nMSG06    DC    Y(MSG06L)\n         DC    C'NOT IN CATALOG'\nMSG06L   EQU   *-MSG06-2\nMSG07    DC    C'DYNAMIC ALLOCATION ERROR CODE = '\nMSG08    DC    Y(MSG08L,0)\n         DC    C'NO MORE THAN 10 DATA SET NAMES MAY BE SPECIFIED BY THEX\n                TASKLIB KEYWORD'\nMSG08L   EQU   *-MSG08\nMSG09    DC    Y(MSG09L,0)\n         DC    C' ENTER NULL LINE TO CONTINUE, NON-NULL LINE TO STOP-'\nMSG09L   EQU   *-MSG09\nMSG10    DC    C'CANNOT PROMPT, EITHER YOU ARE EXECUTING A CLIST OR YOUX\n               R PROFILE REQUESTS NO PROMPTING.'\nMSG10L   EQU   *-MSG10\nMSG11    DC    C'INVALID PARAMETERS PASSED TO PUTGET'\nMSG11L   EQU   *-MSG11\nMSG12    DC    C'NOT ENOUGH SPACE FOR PUTGET TO OBTAIN OUTPUT BUFFERS'\nMSG12L   EQU   *-MSG12\nMSG13    DC    Y(MSG13L)\n         DC    C'IS NOT PARTITIONED'\nMSG13L   EQU   *-MSG13-2\nMSG14    DC    Y(MSG14L,0)\n         DC    C'ERROR IN CONCATENATING TASK LIBRARIES'\nMSG14L   EQU   *-MSG14\nMSG15    DC    Y(MSG15L,0)\n         DC    C'PARM FIELD SPECIFIED EXCEEDS 256 BYTES, TRUNCATED'\nMSG15L   EQU   *-MSG15\nMSG16    DC    Y(MSG16L,0)\n         DC    C'NO TASK LIBRARIES'\nMSG16L   EQU   *-MSG16\nMSG17    DC    Y(MSG17L,0)\n         DC    C'TASKLIB DCB OPEN ERROR'\nMSG17L   EQU   *-MSG17\nMSG18    DC    Y(MSG18L,0)\n         DC    C'ERROR IN DECONTENATING TASK LIBRARIES'\nMSG18L   EQU   *-MSG18\nMSG19    DC    C'CONDITION CODE = '                          JFS03NOV77\nMSG20    DC    C'PROGRAM NAME '\nMSG20L   EQU   *-MSG20\nMSG21    DC    C' NOT FOUND IN CONCATENATED '\nMSG21L   EQU   *-MSG21\nMSG22    DC    C' LIBRARIES'\nMSG22L   EQU   *-MSG22\nMSG23    DC    Y(MSG23L,0)\n         DC    C' ENTER PROGRAM NAME, OR NULL LINE TO STOP'\nMSG23L   EQU   *-MSG23\nMSG24    DC    Y(MSG24L,0)\n         DC    C'PROGRAM NAME EXCEEDS 8 CHARACTERS'\nMSG24L   EQU   *-MSG24\nMSG25    DC    Y(MSG25L)\n         DC    C'ALLOCATION ERROR'\nMSG25L   EQU   *-MSG25-2\nMSG26    DC    Y(MSG26L,0)\n         DC    C'MAXIMUM NUMBER OF ALLOCATIONS EXCEEDED'\nMSG26L   EQU   *-MSG26\nMSG27    DC    C'DYNAMIC ALLOCATION RETURN CODE = '\nMSG28    DC    Y(MSG28L,0)\n         DC    C'IKJ57090A ENTER COMMAND FOR CP'\nMSG28L   EQU   *-MSG28\nMSG29    DC    Y(MSG29L,0)\n         DC    C'COMMAND EXCEEDS 256 BYTES, TRUNCATED'\nMSG29L   EQU   *-MSG29\nDATAMSG  DC    C'DATA SET '\nDATAMSGL EQU   *-DATAMSG\nPTERROR  DC    C'PUTLINE ERROR'\nPTERRORL EQU   *-PTERROR\n         PRINT GEN\n         EJECT\n**\n** DSECT FOR REENTRANCY\n**\nRENTDSCT DSECT\nSAVE     DS    18F\nSTAXSAVE DS    18F\nDWORK    DS    D\nMSGSVE28 DS    7F\nMSGSVE14 DS    F\nPTSVE14  DS    F\nFREESV28 DS    7F\nFREESV14 DS    F\nSAVER15  DS    F\nIOPLA    DS    4F\nSTAKIOPL DS    4F\nPARMADDR DS    F ADDR OF PARM FIELD\nUPTA     DS    F ADDR OF UPT\nPSCBA    DS    F ADDR OF PSCB\nECTA     DS    F ADDR OF ECT\nSTAKECB  DS    F\nECB      DS    F\nTCB      DS    F\nPARSEPL  DS    7F PARSE PARM LIST\nDAIRPL   DS    5F DAIR PARM LIST\nDAIRPB   DS    25F DAIR PARM BLOCK\nDA0CDDN  EQU   DAIRPB+12 DA0CDDN NOT DEFINED IN CSECT\nANSWER   DS    F\nANSWER1  DS    F\nOLD      DS    F\nCOMPCDE  DS    F                                             JFS04NOV77\n         DS    A\nEPENTRY  DC    Y(1,58) BLDL\nEPNAME   DS    CL8\n         DS    CL58\nWORKLEN  DS    H\nWORKOFF  DS    H\nWORKBUFF DS    CL120\nATTACH   ATTACH SF=L\nSTAXLIST STAX  STAXEXIT,USADDR=STAXSAVE,MF=L\nPGPB     PUTGET MF=L\nPTPB     PUTLINE MF=L\nSTAK     STACK MF=L\nOPEN     OPEN  (,),MF=L\nCLOSE    CLOSE (,),MF=L\nUSERIDL  DS    H\nUSERID   DS    CL8\n         PRINT NOGEN\nTASKLIB  DCB   DSORG=PO,MACRF=R\n         PRINT GEN\nEPNAMEL  DS    H\nCMDLEN   DS    H\nCMDOFF   DS    H\nCMDBUF   DS    CL44\nDSNLEN   DS    H\nDSNAME   DS    CL44\nNODDNS   DS    H\nDDNAMES  DS    10CL8\nPARMFLDL DS    H\nPARMFLD  DS    CL256\nFLAGS    DS    X\nRENTLEN  EQU   *-RENTDSCT\nDOPROG   CSECT\n         PRINT NOGEN\n         EJECT\n**\n** PARAMETER CONTROL LIST FOR PARSE\n**\nPPLPARM  IKJPARM DSECT=PDL\nLOADMOD  IKJIDENT 'LOAD MOD NAME',MAXLNTH=8,FIRST=ALPHA,               X\n               OTHER=ALPHANUM,PROMPT='NAME OF PROGRAM TO BE EXECUTED'\nPARMA    IKJPOSIT QSTRING,HELP='PARM FIELD TO BE PASSED TO PROGRAM'\nTASKEYWD IKJKEYWD\n         IKJNAME 'TASKLIB',SUBFLD=TASKSUBF\n         IKJNAME 'LIB',SUBFLD=TASKSUBF\nRCKEYWD  IKJKEYWD DEFAULT='RC'\n         IKJNAME 'RC'\n         IKJNAME 'NORC'\n         IKJNAME 'ALLRC'\nCPKEYWD  IKJKEYWD DEFAULT='NOCP'\n         IKJNAME 'CP'\n         IKJNAME 'NOCP'\nTASKSUBF IKJSUBF\nTASKDSNA IKJPOSIT DSNAME,LIST,PROMPT='TASKLIB DATA SET NAME'\n         IKJENDP\n**\n** PARSE PARM CONTROL LIST FOR PROMPT OF TASKLIB DATA SET NAME\n**\nDSNPPL   IKJPARM DSECT=DSNPDL\nNEWDSN   IKJPOSIT DSNAME,PROMPT='TASKLIB DATA SET NAME'\n         IKJENDP\n         PRINT NOGEN\n         EJECT\n**\n** MAPPING DSECTS\n**\n         IKJCPPL\n         IKJIOPL\n         IKJUPT\n         IKJECT\n         IKJPPL\n         IKJDAPL\n         IKJDAP08\n         IKJDAP0C\n         IKJDAP10\n         IKJDAP18\n         DCBD  DSORG=PO\nDOPROG   CSECT\n         LTORG\n         END   DOPROG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XEQ$": {"ttr": 29446, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x000\\x01\\x00\\x04\\x8f\\x01\\x162\\x7f\\x10\\x15\\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2016-11-22T10:15:30", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=CBT.CBT492.FILE296.PDS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(XEQ)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB493296\n SETCODE AC(1)\n NAME    XEQ(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XEQ#": {"ttr": 29448, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\t\\x01\\x175?\\x01\\x175?\\x01\\x12\\x00#\\x00#\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-12-19T00:00:00", "modifydate": "2017-12-19T01:12:09", "lines": 35, "newlines": 35, "modlines": 0, "user": "SBGOLOB"}, "text": ")F FUNCTION -\n     THE XEQ COMMAND PROCESSOR ATTACHES A PROGRAM THAT IS\n     IN EXECUTABLE FORM. THE PROGRAM MAY RESIDE IN A USER LIBRARY OR\n     ONE OF THE CONTENATED SYSTEM LINK LIBRARIES.\n)X SYNTAX -\n           XEQ     'PROGRAM NAME'   ''PARMS''\n                   LIB('DSLIST')/TASKLIB('DSLIST')\n                   RC/NORC/ALLRC  CP/NOCP\n      REQUIRED - 'PROGRAM NAME'\n      DEFAULTS - RC, NOCP\n      ALIAS    - NONE\n)O OPERANDS -\n))'PROGRAM NAME' - NAME OF THE PROGRAM TO BE EXECUTED. MUST BE A\n                   MEMBER OF A LOAD MODULE PARTITIONED DATA SET.\n))''PARMS'' - PARM FIELD TO BE PASSED TO THE EXECUTED PROGRAM. THE\n              LENGTH OF THE PARM FIELD SHOULD NOT EXCEED 256\n              CHARACTERS.\n))TASKLIB('DSLIST')/LIB('DSLIST') -\n      SPECIFIES THAT THE USER LIBRARY IS TO BE SEARCHED FOR THE\n      EXECUTABLE PROGRAM. THE TASK LIBRARY WILL ALSO BE SEARCHED\n      FOR THE PROGRAM NAMES OF LOAD MODULES ATTACHED BY THE SUBTASK.\n))'DSLIST' - SPECIFIES THE DATA SET NAMES TO BE CONCATENATED AND\n             USED FOR THE TASK LIBRARY. A MAXIMUM OF 10 DATA\n             SET NAMES IS ALLOWED.\n))RC - SPECIFIES THAT THE NON-ZERO RETURN CODE FROM THE\n       PROGRAM IS TO BE DISPLAYED AT THE TERMINAL.\n))NORC - SPECIFIES THAT NO RETURN CODES ARE TO BE DISPLAYED.\n))ALLRC - SPECIFIES THAT ALL RETURN CODES ARE TO BE\n          DISPLAYED AT THE TERMINAL.\n     NOTE - IF AN ATTENTION, ERROR, ETC. IS ENCOUNTERED BY THE\n            COMMAND PROCESSOR, THE RETURN CODE IS SET TO 16 AND\n            IS DISPLAYED ONLY IF 'RC' OR 'ALLRC' IS SPECIFIED.\n))CP - SPECIFIES THAT COMMAND PROCESSOR PARAMETERS SHOULD BE\n       REQUESTED FROM THE TERMINAL (LIKE THE TEST COMMAND).\n))NOCP - SPECIFIES THAT THIS IS NOT A COMMAND PROCESSOR.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XEQ000": {"ttr": 29450, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x82\\x15_\\x00\\x82\\x15_\\x12X\\x05.\\x05 \\x00\\x12\\xd7\\xc1\\xe2\\xe3\\xe5\\xc5\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1982-06-04T00:00:00", "modifydate": "1982-06-04T12:58:00", "lines": 1326, "newlines": 1312, "modlines": 18, "user": "PASTVER"}, "text": "//HABLB  JOB ...\n//*\n//*  STEP  |  COMMENTS\n//*  ------|------------------------------------------------------\n//*  ASM   | ASSEMBLES XEQ (IEV90 OR IFOX00 MAY BE USED)\n//*  LINK  | LINKS XEQ INTO 'SYS1.CMDLIB(XEQ)'\n//*  COPY  | COPIES XEQ HELP TO 'SYS2.HELP(XEQ)'\n//*        | USING IEBGENER AND SHARED ALLOCATION\n//*\n//*\n//*     NOTE:\n//*          IF A VERSION OF THIS COMMAND IS LINKED WITH\n//*          AUTHORIZATION AND PUT INTO THE LIST OF TSO\n//*          AUTHORIZED COMMANDS, THIS COMMAND IS USEFUL\n//*          FOR TRYING NEW AUTHORIZED TSO COMMANDS.\n//*\n//*          IF AUTHORIZATION IS NEEDED FOR THE TSO\n//*          COMMAND BEING TESTED, IT MUST BE BROUGHT OUT\n//*          OF THE LINKLIST OR AN AUTHORIZED TASKLIB.\n//*\n//*     CAUTION:\n//*          ADD ANY APPROPRIATE SECURITY CONTROLS IF YOU DO THIS.\n//*\n//*     COMMAND SEQUENCE:\n//*          XEQAUTH AUTHPROG LIB('ANY.AUTHORIZED.LIB') CP\n//*          AUTHPROG INPUT PARAMETERS...\n//*\n//*\n//INSTALL PROC MEMBER=XEQ\n//ASM     EXEC PGM=IEV90,REGION=2048K,\n//             PARM=(DECK,NOOBJECT,NORLD,TERM,'XREF(SHORT)')\n//SYSLIB   DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(,PASS),DSN=&&X,\n//         DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//LKED    EXEC PGM=IEWL,PARM='MAP,RENT,REUS,REFR',COND=(5,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.CMDLIB(&MEMBER)    <=== MODIFY\n//SYSLIN   DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//COPY    EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DISP=SHR,DSN=SYS2.HELP(&MEMBER)      <=== MODIFY ?\n//SYSIN    DD  DUMMY\n//        PEND\n//*\n//*\n//A       EXEC INSTALL\n//ASM.SYSIN DD *\n*************************************************************JFS03NOV77\n*             LATEST UPDATE DATE                             JFS03NOV77\n         LCLC  &DATE                                         JFS03NOV77\n&DATE    SETC  '04JUN82'    ABL                              JFS03NOV77\n*************************************************************JFS03NOV77\nDOPG TITLE 'NASA/GSFC -- DOPROG/DOPGM (TSO) COMMAND PROCESSOR (&DATE)'\n*                                                            JFS03NOV77\n**\n** THE DOPROG TSO COMMAND WAS\n** DESIGNED AND DEVELOPED BY J. SCHINDLER (CSC), MARCH 1975\n**   THE DOPROG COMMAND IS BASED ON AN EARLIER VERSION THAT WAS\n**   DESIGNED AND DEVELOPED BY\n**       GENE CZARCINSKI\n**       NASA, GODDARD SPACE FLIGHT CENTER\n**       GREENBELT, MARYLAND\n**\n** UPDATED 10APR77, GENE CZARCINSKI, NASA/GSFC (GT00501)\n**      . RENAME CSECT FROM 'GSFTSODO' TO 'DOPROG' WITH AN\n**        ENTRY POINT OF DOPGM ... MORE CONSISTANCY AND\n**        CLEANER CMDLIB\n**      . CHANGE BASE REG INIT CODE .. IT IS FLAKY AND MAY CAUSE\n**        ERROR*********\n** UPDATED 03NOV77, J. SCHINDLER, (PAC) CSC\n**      . INCLUDED CODE SO THAT THE LATEST UPDATE DATE COULD BE\n**        CHANGED EASILY\n**      . CHANGED THE LOGIC SO THAT THE 2 BYTES FROM THE ATTACH\n**        ECB IS USED AS THE RETURN CODE THAT IS PASSED ON EXIT\n**        FROM THIS COMMAND PROCESSOR\n** UPDATED 18APR80, B. GODFREY, AFDSC\n**      . BALR TO IKJPARS INSTEAD OF LINK, FOR MVS\n**      . REPLACE REGS MACRO WITH 16 EQUATES\n**      . USE UPTPREFX INSTEAD OF PSCBUSER. ADDED IKJUPT MACRO.\n** UPDATED 24MAY82, A. BRUCE LELAND, HITACHI\n**      . PASS ADDRESSES OF THE UPT, PSCB, AND ECT TO THE\n**        INVOKED PROCESSOR IN CASE IT IS A COMMAND PROCESSOR.\n** UPDATED 04JUN82, A. BRUCE LELAND, HITACHI\n**      . ADD CP PARAMETER TO ALLOW A PROMPT FOR COMMAND PROCESSOR\n**        PARAMETERS\n**\n***\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n*                                                                     *\n* PLEASE REPORT ANY PROBLEMS, ENHANCEMENTS, SUGGESTIONS OR COMMENTS   *\n* CONCERNING THIS PROGRAM TO:                                         *\n*                                                                     *\n*     A. BRUCE LELAND           OR         A. BRUCE LELAND            *\n*     SERENA INTERNATIONAL                 1103 KENDAL COURT          *\n*     500 AIRPORT BLVD. 2ND FLOOR          SAN JOSE, CALIF 95120      *\n*     BURLINGAME, CA  94010                                           *\n*     (415) 696-1800                       HOME (408) 997-2366        *\n*     INTERNET: BRUCE_LELAND@SERENA.COM                               *\n*                                                                     *\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\n**\n** ATTR - RENT\n** ALIAS - DOPGM\n**\n** COMMAND -\n**\n** DOPROG/DOPGM 'LOAD MOD NAME' ''PARMS'' TASKLIB/LIB('DSLIST')\n**               RC/NORC/ALLRC  CP/NOCP\n**    'LOAD MOD NAME' - NAME OF THE LOAD MODULE TO BE EXECUTED.\n**    ''PARMS'' - PARM FIELD TO BE PASSED TO THE LOAD MODULE, QUOTED\n**               STRING.\n**    TASKLIB('DSLIST') - SPECIFIES THE DATA SET NAME(S) THAT ARE\n**             CONTENATED AND USED FOR THE TASK LIBRARY.\n**    LIB('DSLIST') - SAME AS TASKLIB\n**    RC - SPECIFIES THAT THE NON-ZERO RETURN CODE FROM THE EXECUTED\n**              PROGRAM IS TO BE PRINTED.\n**    NORC - SPECIFIES THAT THE RETURN CODE IS NOT TO BE PRINTED.\n**          (DEFAULT).\n**    ALLRC - SPECIFIES THAT THE RETURN CODE IS TO BE PRINTED.\n**      NOTE - THE RETURN CODE FROM THE EXECUTED PROGRAM IS ALWAYS\n**             PASSED. IF THIS COMMAND PROCESSOR ENCOUNTERS AN ERROR\n**             OR AN ATTENTION IS ENTERED, THE RETURN CODE IS 16.\n**    NOCP - SPECIFIES THAT THE LOAD MODULE IS NOT A COMMAND PROCESSOR\n**          (DEFAULT).\n**    CP   - SPECIFIES THAT THE LOAD MODULE IS A COMMAND PROCESSOR AND\n**           THAT PARAMETERS ARE TO BE PROVIDED IN RESPONSE TO A\n**           PROGRAM PROMPT.  NOTE THAT IF CP IS CODED, ANY PROGRAM\n**           PARM FIELD IS IGNORED.\n**\n**\n** THIS COMMAND PROCESSOR IS DESIGNED TO LOAD AND EXECUTE (ATTACH) A\n** PROGRAM IN ONE OF THE SYSTEM LINK LIBRARIES OR A USER\n** LIBRARY (TASKLIB).\n**\nDOPROG   CSECT\n         ENTRY DOPGM\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n**\n** FLAGS SETTINGS -\n**\n**       1... ... - RC (PRINT NON-ZERO RETURN CODES)\n**       .1.. .... - ALLRC (PRINT ALL RETURN CODES)\n**       ..1. .... - TASKLIB SPECIFIED\n**       ...1 .... - DSNAME INPUT IN QOUTES\n**       .... 1... - CP PARAMETER WAS CODED\n**       .... .111 - NOT USED\n**\n**\n** FLAGS EQUATES -\n**\nRCFLG    EQU   B'10000000' PRINT NON-ZERO RC FLAG\nALLRCFLG EQU   B'01000000' PRINT ALL RC FLAG\nTASKFLG  EQU   B'00100000' TASKLIB WAS SPECIFIED\nQFLG     EQU   B'00010000' DSNAME WAS INPUT IN QUOTES FLAG\nCPFLG    EQU   B'00001000' CP PARAMETER WAS CODED\n**\nDOPGM    SAVE  (14,12),,DOPROG/DOPGM-GT00501-&DATE\n         LA    R10,0(,R15)    *** INIT BASE REGS ***        GT00501\n         LA    R11,2048                                     GT00501\n         AR    R11,R11                                      GT00501\n         AR    R11,R10                                      GT00501\n         USING DOPROG,R10,R11\n         LR    R9,R1 SAVE CPPL PTR\n         USING CPPL,R9\n         LA    R0,RENTLEN LOAD LENGTH OF RENT DSECT\n         GETMAIN R,LV=(0) SP=0\n         USING SAVE,R1\n         ST    R1,8(R13)\n         ST    R13,4(R1)\n         LR    R13,R1\n         DROP  R1\n         USING SAVE,R13\n**\n** INIT PARSE PARM LIST (PPL)\n**\nBEGIN    LA    R8,PARSEPL\n         USING PPL,R8\n         MVC   PPLUPT,CPPLUPT USER PROFILE TABLE\n         MVC   PPLECT,CPPLECT ENVIRONMENT CONTROL TABLE\n         LA    R2,ECB\n         ST    R2,PPLECB ECB\n         LA    R2,ANSWER\n         ST    R2,PPLANS ADDR OF PDL\n         MVC   PPLCBUF,CPPLCBUF COMMAND BUFFER\n         XC    PPLUWA,PPLUWA USER WORK AREA ADDR\n         MVC   PPLPCL,=A(PPLPARM) PARM CONTROL LIST\n         MVC   UPTA,CPPLUPT       USER PROFILE TABLE\n         MVC   PSCBA,CPPLPSCB     PROTECTED STEP CONTROL BLOCK\n         MVC   ECTA,CPPLECT       ENVIRONMENT CONTROL TABLE\n**\n** INIT STACK IOPL\n**\n         LA    R8,STAKIOPL\n         USING IOPL,R8\n         MVC   IOPLUPT,CPPLUPT\n         MVC   IOPLECT,CPPLECT\n         LA    R2,STAKECB\n         ST    R2,IOPLECB\n** IOPLIOPB WILL BE INIT BY STACK MACRO\n**\n** INIT IOPL\n**\n         LA    R8,IOPLA\n         USING IOPL,R8\n         MVC   IOPLUPT,CPPLUPT\n         MVC   IOPLECT,CPPLECT\n         LA    R2,ECB\n         ST    R2,IOPLECB\n** IOPLIOPB WILL BE INIT BY MACRO\n**\n** INIT DAIR PARM LIST\n         LA    R8,DAIRPL\n         USING DAPL,R8\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R2,ECB\n         ST    R2,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB PROTECTED STEP CONTROL BLOCK\n         LA    R2,DAIRPB\n         ST    R2,DAPLDAPB ADDR OF DAIR PARM BLOCK\n**\n** SAVE PREFIX AND LENGTH WITH PERIOD (.)\n**\n         L     R15,CPPLUPT\n         SR    R3,R3\n         IC    R3,UPTPREFL-UPT(,R15)  LENGTH OF PREFIX\n         LA    R15,UPTPREFX-UPT(,R15) ADDRESS OF PREFIX\n         LR    R4,R3\n         BCTR  R3,R0\n         LA    R14,USERID\n         EX    R3,MOVE\n*MOVE    MVC   0(0,R14),0(R15)\n         LA    R3,USERID(R4)\n         MVI   0(R3),C'.' MOVE IN PERIOD\n         LA    R4,1(R4) FOR PERIOB\n         STH   R4,USERIDL\n         DROP  R8,R9\n**\n** INIT PARM BLOCK, ETC.\n**\n         MVC   PTPB(PTREFL),PTREF INIT PUTLINE PARM BLOCK\n         MVC   PGPB(PGREFL),PGREF INIT PUTGET PARM BLOCK\n         MVC   STAK(STAKREFL),STAKREF INIT STACK PARM BLOCK\n         XC    NODDNS,NODDNS INIT NO. OF DDNAMES SPECIFIED BY TASKLIB\n         XC    ANSWER1,ANSWER1\n         MVI   FLAGS,0\n         MVC   EPENTRY(4),=Y(1,58)\n         MVC   EPNAME,BLANKS\n         LA    R2,1\n         ST    R2,OLD ONLY ONE SEGMENT\n**\n** PARSE THE COMMAND\n**\n         XC    ECB,ECB\n         LA    R1,PARSEPL\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IS IKJPARS IN LPA ?\n         BNO   PARSELNK            IF NOT, DO LINK\n         L     R15,524(,R15)       GET ADDRESS OF IKJPARS\n         BALR  R14,R15             CALL PARSE SERVICE ROUTINE\n         B     PARSELTR            BRANCH AROUND LINK\nPARSELNK EQU   *\n         LINK  EP=IKJPARS LINK TO PARSE\nPARSELTR LTR   R15,R15\n         BZ    PARSEOK\n         LA    R0,MSG01\n         BAL   R14,PUTLINE PARSE ERROR\n         B     ERRORRTN\nPARSEOK  DC    0H'0'\n         L     R12,ANSWER\n         USING PDL,R12\n         STM   R14,R12,STAXSAVE+12 SAVE REGS SO STAXEXIT CAN USE\n**             PROGRAM BASE REGS\n         MVC   STAXLIST(STAXREFL),STAXREF\n         LA    R2,STAXSAVE\n         STAX  STAXEXIT,USADDR=(R2),MF=(E,STAXLIST)\n         CLI   CPKEYWD+1,1 CP PARAMETER?\n         BNE   *+8         NO, BRANCH\n         OI    FLAGS,CPFLG YES, SET THE FLAG\n         CLI   RCKEYWD+1,2 TEST FOR NO RC\n         BE    TESTAKW GO TEST FOR TASK LIB\n         BH    SETALLFL\n         OI    FLAGS,RCFLG\n         B     TESTAKW GO TEST FOR TASK LIB\nSETALLFL OI    FLAGS,ALLRCFLG\nTESTAKW  DC    0H'0'\n         CLI   TASKEYWD+1,0 TEST FOR TASKLIB\n         BE    MOVEEP\n**\n**INIT PARSEPL WITH DIFFERENT ANSWER ADDR AND COMMAND BUFFER IN\n** CASE THE DATA SET(S) WHOSE NAMES ARE SPECIFIED BY THE TASKLIB\n** KEYWORD ARE NOT IN THE CATALOG, CANT BE ALLOCATED, ETC.\n**\n         OI    FLAGS,TASKFLG\n         LA    R2,ANSWER1\n         ST    R2,PARSEPL+16\n         LA    R2,CMDLEN\n         ST    R2,PARSEPL+20\n         MVC   PARSEPL+12,=A(DSNPPL)\n         LA    R9,TASKDSNA USE R9 AS BASE FOR DSNAME PDE\nTASKLP1  DC    0H'0'\n         NI    FLAGS,255-QFLG\n         L     R15,0(R9) LOAD ADDR OF DSNAME\n         LTR   R15,R15 TEST FOR DSNAME\n         BNZ   TASKB\n**\n** DATA SET NAME ERROR -- PROBABLY MEMBER NAME ONLY\n**\n         TM    14(R9),B'10000000' TEST FOR MEMBER NAME\n         BO    TASKA\n         LA    R0,MSG02 INVALID DSNAME\n         BAL   R14,PUTLINE\n         B     TASKPRMT GO PROMPT FOR ANOTHER DSNAME\nTASKA    OI    FLAGS,QFLG SO ''( ... )'' WILL BE PRINTED\n         LA    R14,CMDBUF\n         MVI   0(R14),C'('\n         LA    R14,1(R14)\n         LA    R2,1\n         LH    R3,12(R9) LOAD LENGTH OF MEMBER NAME\n         AR    R2,R3\n         BCTR  R3,R0\n         L     R15,8(R9) LOAD ADDR OF MEMBER NAME\n         EX    R3,MOVE\n         LA    R14,1(R3,R14)\n         MVI   0(R14),C')'\n         LA    R2,1(R2)\n         STH   R2,CMDOFF\n         LA    R0,CMDOFF\n         LA    R1,MSG03\n         BAL   R14,MSGOUT GO OUTPUT 'DATA SET --- INVALID'\n         B     TASKPRMT GO PROMPT FOR ANOTHER DATA SET NAME\n**\n** DATA SET NAME WAS SPECIFIED, IGNORE MEMBER NAME IF SPECIFIED.\n**\nTASKB    DC    0H'0'\n         TM    6(R9),B'01000000' TEST FOR QUOTES\n         BZ    TASKC\n         OI    FLAGS,QFLG SET QUOTES FLAG\nTASKC    LH    R2,4(R9) LOAD LENGTH OF DATA SET NAME\n         STH   R2,DSNLEN\n         BCTR  R2,R0\n         LA    R14,DSNAME R15= ADDR OF INPUT DSNAME\n         EX    R2,MOVE\n**\n** ALLOC DSNAME\n**\n         LA    R8,DAIRPB\n         USING DAPB08,R8\n         MVC   DA08CD,=X'0008'\n         XC    DA08FLG(6),DA08FLG\n         LA    R2,DSNLEN\n         ST    R2,DA08PDSN\n         MVI   DA08DDN,C' '\n         MVC   DA08DDN+1(23),DA08DDN\n         XC    DA08BLK(16),DA08BLK\n         MVI   DA08MNM,C' '\n         MVC   DA08MNM+1(15),DA08MNM\n         MVI   DA08DSP1,B'00001000' SHR\n         MVI   DA08DPS2,B'00001000' KEEP\n         MVI   DA08DPS3,B'00001000' KEEP\n         XC    DA08CTL(5),DA08CTL\n         TM    FLAGS,QFLG TEST FOR QUOTE\n         BO    *+8\n         OI    DA08CTL,B'00100000' PREFIX USER ID\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LTR   R15,R15\n         BZ    TESTPDS\n         CH    R15,=H'8' TEST FOR CATALOG ERROR\n         BNE   TASKDAER\n         CLC   DA08DARC,=X'170C'\n         BNE   TASKCTER\n         TM    FLAGS,QFLG TEST FOR QUOTES\n         BO    TASKDAER\n**\n** SINCE THE DSNAME IS NOT IN QUOTES, APPEND .LOAD AND TRY ALLOC AGAIN\n**\n         LH    R2,DSNLEN\n         LA    R3,DSNAME(R2)\n         MVC   0(5,R3),=C'.LOAD'\n         LA    R2,5(R2)\n         STH   R2,DSNLEN\n         XC    DA08DARC(4),DA08DARC\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LTR   R15,R15\n         BZ    TESTPDS\n         LH    R2,DSNLEN\n         SH    R2,=H'5' FOR .LOAAD\n         STH   R2,DSNLEN\n         CH    R15,=H'8' TEST FOR CATALOG ERROR\n         BNE   TASKDAER\nTASKCTER DC    0H'0' CATALOG ERROR\n         LA    R0,DSNLEN\n         LA    R1,MSG06 DSNAME NOT IN CATALOG\n         BAL   R14,MSGOUT\n         B     TASKPRMT GO PROMPT\n**\n** ALLOCATION ERROR\n**\nTASKDAER DC    0H'0'\n         ST    R15,SAVER15\n         LA    R0,DSNLEN\n         LA    R1,MSG25\n         BAL   R14,MSGOUT\n         L     R15,SAVER15\n         CH    R15,=H'12'\n         BH    TESTDARC\n         MVC   WORKBUFF(L'MSG07),MSG07\n         LA    R6,L'MSG07+8\n         STH   R6,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LH    R2,DA08DARC\n         LA    R4,4\n         SR    R5,R5\n         LA    R6,WORKBUFF+L'MSG07-1\nTASKLP2  SRDL  R2,4\n         SRL   R3,28\n         IC    R5,TABLE(R3)\n         STC   R5,0(R4,R6)\n         BCT   R4,TASKLP2\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\n         B     TASKPRMT\nTESTDARC DC    0H'0'\n         CH    R15,=H'16'\n         BH    TSTDARC1\n         LA    R0,MSG26  ALLOCATIONS EXCEEDED\n         BAL   R14,PUTLINE\n         B     TASKPRMT\nTSTDARC1 DC    0H'0'\n         MVC   WORKBUFF(L'MSG27),MSG27\n         CVD   R15,DWORK\n         UNPK  DWORK(3),DWORK+6(2)\n         OI    DWORK+2,C'0'\n         MVC   WORKBUFF+L'MSG27(2),DWORK+1\n         LA    R2,L'MSG27+6\n         STH   R2,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\n         B     TASKPRMT\n**\n** DATA SET IS ALLOCATED, TEST FOR PDS.\n**\nTESTPDS  TM    DA08DSO,B'00000010' TEST FOR PDS\n         BO    SAVEDDN\n         LA    R0,DSNLEN\n         LA    R1,MSG13\n         BAL   R14,MSGOUT DS IS NOT PDS\n         LA    R1,DA08DDN\n         BAL   R14,FREEDDN GO FREE DDNAME\n         B     TASKPRMT\nSAVEDDN  LH    R2,NODDNS SAVE ALLOCATED DDNAME\n         SLL   R2,3 MULTIPLY BY 8\n         LA    R3,DDNAMES(R2)\n         MVC   0(8,R3),DA08DDN SAVE DDNAME\n         DROP  R8\n         LH    R2,NODDNS\n         LA    R2,1(R2)\n         STH   R2,NODDNS\n         CH    R2,=H'10'\n         BL    TASKENLP\n         CLI   24(R9),X'FF' TEST FOR LAST PDE\n         BE    CONCAT  LAST PDE -- GO CONCAT.\n         LA    R0,MSG08  MORE THAN 10 DSNAMES SPECIFIED BY TASKLIB\n         BAL   R14,PUTLINE\n         LA    R2,MSG09\n         ST    R2,OLD+4\n         TCLEARQ INPUT\n         XC    ECB,ECB\n         PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                  X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC GO TEST RETURN CODE\n         L     R2,PGPB+12 LOAD ADDR OF INPUT LINE\n         LH    R3,0(R2) LOAD LENGTH OF INPUT LINE\n         CH    R3,=H'4' TEST FOR NULL LINE\n         BNH   CONCAT\n         B     ERRORRTN\n**\n** PROMPT FOR TASK LIBRARY DATA SET NAME\n**\nTASKPRMT LA    R2,MSG04 ENTER TASKLIB DSNAME\n         ST    R2,OLD+4\n         TCLEARQ INPUT\n         XC    ECB,ECB\nTASKPRMA PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                  X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC\n         L     R15,PGPB+12 LOAD ADDR OF INPUT LINE\n         LH    R2,0(R15) LOAD LENGTH\n         CH    R2,=H'48' TEST FOR MAX DSN LENGTH\n         BNH   TASKPRMB\n         LR    R0,R2\n         O     R0,=X'01000000' SP=1\n         LR    R1,R15\n         FREEMAIN R,LV=(0),A=(1)\n         LA    R0,MSG05 DSNAME TOO LONG\n         BAL   R14,PUTLINE\n         B     TASKPRMA\nTASKPRMB BCTR  R2,R0\n         LA    R14,CMDLEN\n         EX    R2,MOVE\n         LH    R0,0(R15)\n         O     R0,=X'01000000' SP=1\n         LR    R1,R15\n         FREEMAIN R,LV=(0),A=(1)\n         LH    R2,CMDLEN\n         CH    R2,=H'4' TEST FOR NULL LINE RESPONSE\n         BNH   TASKENLP GO TO END OF LOOP\n         IKJRLSA ANSWER1\n         XC    ECB,ECB\n         LA    R1,PARSEPL\n         LINK  EP=IKJPARS PARSE DSNAME\n         CH    R15,=H'8' TEST FOR ATTN\n         BE    ERRORRTN GO RETURN\n         BH    TASKPRMC\n         CH    R15,=H'4'\n         BNE   TASKPRMD\nTASKPRMC LA    R0,MSG01 PARSE ERROR\n         BAL   R14,PUTLINE\n         B     ERRORRTN\nTASKPRMD L     R15,ANSWER1\n         USING DSNPDL,R15\n         MVC   0(24,R9),NEWDSN OVERLAY OLD PDE WITH NEW ONE\n         B     TASKLP1\n         DROP  R15\n**\n** TEST FOR RETURN CODE FROM PUTGET\n**\nTESTPGRC CH    R15,=H'8'\n         BE    ERRORRTN\n         CH    R15,=H'12'\n         BNE   TESTRC24\n         TPUT  MSG10,MSG10L NO PROMPTING\n         B     ERRORRTN\nTESTRC24 CH    R15,=H'24'\n         BNE   PGRC28\n         TPUT  MSG11,MSG11L INVALID PARMS\n         B     ERRORRTN\nPGRC28   TPUT  MSG12,MSG12L NOT ENOUGH SPACE\n         B     ERRORRTN\n**\n** TEST FOR END OF PDE'S\n**\nTASKENLP CLI   24(R9),X'FF'\n         BE    CONCAT\n         L     R9,24(R9) ADDR OF NEXT PDE\n         B     TASKLP1\n**\n** ALL DATA SETS FOR TASKLIB HAVE BEEN ALLOCATED. NOW CONCATENATE THEM.\n**\nCONCAT   DC    0H'0'\n         LH    R2,NODDNS TEST FOR TASK LIBRARIES\n         CH    R2,=H'1'\n         BE    MOVEEP\n         BH    CONCAT1\n         LA    R0,MSG16\n         BAL   R14,PUTLINE\n         LA    R2,MSG09\n         ST    R2,OLD+4\n         TCLEARQ INPUT\n         XC    ECB,ECB\n         PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                  X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC GO TEST RC FROM PUTGET\n         L     R1,PGPB+12 LOAD ADDR OF INPUT LINE\n         LH    R0,0(R1) LOAD LENGTH\n         CH    R0,=H'4' TEST FOR NULL LINE\n         BH    ERRORRTN\n         O     R0,=X'01000000' SP=1\n         FREEMAIN R,LV=(0),A=(1)\n         B     MOVEEP\nCONCAT1  LA    R8,DAIRPB\n         USING DAPB0C,R8\n         MVC   DA0CCD,=X'000C'\n         XC    DA0CFLG(6),DA0CFLG\n         LH    R2,NODDNS\n         STH   R2,DA0CNUMB\n         XC    DA0CNUMB+2(2),DA0CNUMB+2\n         SLL   R2,3 MULTIPLY BY 8\n         BCTR  R2,R0\n         LA    R14,DA0CDDN\n         LA    R15,DDNAMES\n         EX    R2,MOVE\n         DROP  R8\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LTR   R15,R15\n         BZ    MOVEEP GO MOVE IN EP NAME\n         LA    R0,MSG14 CONCAT ERROR\n         BAL   R14,PUTLINE\n         B     ERRORRTN\n**\n** HAVE ALLOCATED AND CONCATENATED THE TASK LIBRARIES, WILL NOW\n** MOVE LOAD MOD NAME, MOVE THE PARM FIELD (IF SPECIFIED), OPEN THE\n** TASKLIB DCB, AND ATTACH.\n**\nMOVEEP   DC    0H'0'\n         LH    R2,LOADMOD+4\n         STH   R2,EPNAMEL   SAVE LENGTH OF PROGRAM NAME\n         BCTR  R2,R0\n         L     R15,LOADMOD\n         LA    R14,EPNAME\n         EX    R2,MOVE MOVE EP NAME\n         TM    PARMA+6,B'10000000' TEST FOR PARM FIELD\n         BO    TSTPARML\n         XC    PARMFLDL,PARMFLDL\n         B     TESTTSK\nTSTPARML LH    R2,PARMA+4 LOAD LENGTH OF QSTRING (PARMFIELD)\n         CH    R2,=H'256'\n         BNH   MOVEPARM\n         LA    R0,MSG15 PARM FIELD EXCEEDS 256 BYTES\n         BAL   R14,PUTLINE\n         LA    R2,256\nMOVEPARM STH   R2,PARMFLDL\n         BCTR  R2,R0\n         L     R15,PARMA LOAD ADDR OF QSTRING\n         LA    R14,PARMFLD\n         EX    R2,MOVE MOVE PARM FIELD\n         LH    R2,NODDNS\n         TM    FLAGS,TASKFLG WAS TASKLIB SPECIFIED?\n         BZ    PROMPT        NO, BRANCH\nTESTTSK  DC    0H'0' TEST FOR TASKLIB DSNAMES\n         LH    R2,NODDNS\n         LTR   R2,R2\n         BZ    PROMPT\n         MVC   TASKLIB(SKELDCBL),SKELDCB\n         LA    R8,TASKLIB\n         USING IHADCB,R8\n         MVC   DCBDDNAM,DDNAMES MOVE DDNAME TO DCB\n         DROP  R8\n**\n**  CHECK FOR CP PARAMETER AND PROMPT IF REQUIRED\n**\nPROMPT   TM    FLAGS,CPFLG      CP CODED?\n         BNO   RELEASE          NO, BRANCH\n         L     R1,ECTA          ECT ADDRESS\n         USING ECT,R1\n         MVC   ECTPCMD(8),EPNAME  CHANGE THE PRIMARY COMMAND NAME\n         DROP  R1\n         LA    R2,MSG28\n         ST    R2,OLD+4\n         XC    ECB,ECB\n         PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,MODE), ALLOW CLIST SOURCE X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC GO TEST RETURN CODE\n         L     R3,PGPB+12 LOAD ADDR OF INPUT LINE\n         LH    R2,0(R3) LOAD LENGTH OF INPUT LINE\n         CH    R2,=H'256'\n         BNH   MOVECP\n         LA    R0,MSG29 COMMAND EXCEEDS 256 BYTES\n         BAL   R14,PUTLINE\n         LA    R2,256\nMOVECP   BCTR  R2,R0\n         LR    R15,R3    ADDRESS OF COMMAND\n         LA    R14,PARMFLDL\n         EX    R2,MOVE MOVE PARM FIELD\n         AH    R2,=H'1'\n         STH   R2,PARMFLDL\n         LR    R1,R3          ADDRESS OF INPUT STRING\n         LH    R0,0(,R1)      LENGTH OF INPUT STRING\n         O     R0,=X'01000000'  SUBPOOL 1\n         FREEMAIN R,LV=(0),A=(1)  FREEMAIN\n         LA    R15,PARMFLDL(R2)   END OF STRING\n         SR    R2,R2          OFFSET TO PARAMTERS\n         LR    R3,R14         POINT TO STRING\n*\nCOMMSRCH CLI   4(R3),X'40'    START OF COMMAND?\n         BNE   COMMSTRT       YES, BRANCH\n         AH    R2,=H'1'\n         AH    R3,=H'1'\n         B     COMMSRCH\nCOMMSTRT CLI   4(R3),X'40'    END OF COMMAND?\n         BE    COMMEND        YES, BRANCH\n         CR    R3,R15         TERMINATOR?\n         BNL   COMMEND        YES, BRANCH\n         AH    R2,=H'1'\n         AH    R3,=H'1'\n         B     COMMSTRT\nCOMMEND  CLI   4(R3),X'40'    START OF OPERANDS?\n         BNE   COMMOPER       YES, BRANCH\n         CR    R3,R15         TERMINATOR?\n         BNL   COMMEND        YES, BRANCH\n         AH    R2,=H'1'\n         AH    R3,=H'1'\n         B     COMMEND\nCOMMOPER STH   R2,PARMFLDL+2  OFFSET TO COMMAND OPERANDS\n**\n** RELEASE PARSE SPACE BEFORE ATTACHING\n**\nRELEASE  DC    0H'0'\n         IKJRLSA ANSWER\n         XC    ANSWER,ANSWER\n         IKJRLSA ANSWER1\n         XC    ANSWER1,ANSWER1\n         SR    R0,R0\n         GETMAIN R,LV=(0) CLEAN UP SEGMENTS\n         MVC   ATTACH(ATREFL),ATREF\n         XC    ECB,ECB\n         LA    R1,PARMFLDL\n         ST    R1,PARMADDR\n         OI    PARMADDR,X'80'\n         TM    FLAGS,CPFLG       COMMAND PROCESSOR?\n         BNO   *+8               NO, BRANCH\n         XI    PARMADDR,X'80'    YES, TURN OFF PARM FLAG BIT\n         TM    FLAGS,TASKFLG TEST FOR TASK LIB\n         BZ    ATTACH1\n         LH    R2,NODDNS\n         LTR   R2,R2\n         BNZ   OPENDCB\nATTACH1  DC    0H'0'\n         BLDL  0,EPENTRY\n         LTR   R15,R15 WAS EP NAME FOUND?\n         BNZ   EPERROR NO - GO PUT OUT MSG\n         LA    R1,PARMADDR\n         LA    R15,ATTACH\n         LA    R2,ECB\n         LA    R3,EPNAME\n         XC    ECB,ECB\n         ATTACH DE=(3),ECB=(2),SHSPL=SPLIST,                           X\n               MF=(E,(1)),SF=(E,(15))\n         B     WAIT\nOPENDCB  DC    0H'0'\n         MVC   OPEN(OPENREFL),OPENREF\n         LA    R1,OPEN\n         LA    R2,TASKLIB\n         OPEN  ((2),(INPUT)),MF=(E,(1))\n         LA    R8,TASKLIB\n         USING IHADCB,R8\n         TM    DCBOFLGS,B'00010000' TEST FOR OPEN\n         BO    OPENOK\n         LA    R0,MSG17 DCB NOT OPEN\n         BAL   R14,PUTLINE\n         B     ERRORRTN\n         DROP  R8\nOPENOK   DC    0H'0'\n         LA    R3,TASKLIB\n         BLDL  (3),EPENTRY\n         LTR   R15,R15\n         BZ    GOTEPOK\nEPERROR  DC    0H'0' PROGRAM NAME NOT FOUND\n         LA    R14,WORKBUFF\n         MVC   0(MSG20L,R14),MSG20  PROGRAM NAME\n         LA    R14,MSG20L(R14)\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\n         LH    R2,EPNAMEL\n         BCTR  R2,R0\n         LA    R15,EPNAME\n         EX    R2,MOVE  EPNAME\n         LA    R14,1(R2,R14)\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\n         MVC   0(MSG21L,R14),MSG21  NOT FOUND\n         LA    R14,MSG21L(R14)\n         LH    R2,NODDNS\n         LTR   R2,R2\n         BZ    EPERROR1\n         MVC   0(4,R14),=C'TASK'\n         B     EPERROR2\nEPERROR1 MVC   0(4,R14),=C'LINK'\nEPERROR2 LA    R14,4(R14)\n         MVC   0(MSG22L,R14),MSG22  LIBRARIES\n         LA    R14,MSG22L(R14)\n         LA    R2,WORKLEN\n         SR    R14,R2\n         STH   R14,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\nEPERROR3 LA    R2,MSG23\n         ST    R2,OLD+4\n         TCLEARQ INPUT\n         XC    ECB,ECB\n         PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                  X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)\n         CH    R15,=H'4'\n         BH    TESTPGRC\n         L     R1,PGPB+12  LOAD ADDR\n         LH    R3,0(R1)\n         SH    R3,=H'4'\n         BNP   ERRORRTN\n         CH    R3,=H'8'\n         BNH   EPERROR4\n         LA    R0,MSG24  PROGRAM NAME EXCEEDS 8 CHAR\n         BAL   R14,PUTLINE\n         B     EPERROR3\nEPERROR4 STH   R3,EPNAMEL  STORE LENGTH OF EP NAME\n         MVC   EPNAME,BLANKS\n         LA    R14,EPNAME\n         LA    R15,4(R1)\n         BCTR  R3,R0\n         EX    R3,MOVE\n         OC    EPNAME,BLANKS UPPER CASE EP NAME\n         LH    R0,0(R1)\n         O     R0,=X'01000000'  SP=1\n         FREEMAIN R,LV=(0),A=(1)\n         LH    R2,NODDNS\n         LTR   R2,R2\n         BNZ   OPENOK\n         B     ATTACH1\nGOTEPOK  DC    0H'0'\n         LA    R1,PARMADDR\n         LA    R15,ATTACH\n         LA    R2,ECB\n         LA    R4,EPNAME\n         XC    ECB,ECB\n         ATTACH DE=(4),ECB=(2),TASKLIB=(3),SHSPL=SPLIST,               X\n               MF=(E,(1)),SF=(E,(15))\nWAIT     ST    R1,TCB\n         LA    R2,ECB\n         WAIT  ECB=(2)\n         DETACH TCB\n         XC    COMPCDE,COMPCDE   CLEAR CONDITION CODE        JFS04NOV77\n         MVC   COMPCDE+2(2),ECB+2  SAVE CONDITION CODE     JFS03NOV77\n         B     RETURN\n**\n** ERROR RETURN. ATTN, ERROR, ETC. WILL CAUSE CONTROL TO BE PASSED TO\n** THIS SECTION.\n**\nERRORRTN DC    0H'0'\n         IKJRLSA ANSWER\n         IKJRLSA ANSWER1\n         XC    STAKECB,STAKECB\n         STACK PARM=STAK,DELETE=ALL,MF=(E,STAKIOPL)\n         XC    COMPCDE,COMPCDE                               JFS03NOV77\n         MVI   COMPCDE+3,16                                  JFS03NOV77\n**\n** CLEAN UP AND RETURN\n**\nRETURN   DC    0H'0'\n         LH    R2,NODDNS ANY DDNAME TO DECONCATENATE?\n         LTR   R2,R2\n         BZ    RETURN1\n         MVC   CLOSE(CLOSREFL),CLOSREF\n         LA    R1,CLOSE\n         LA    R3,TASKLIB\n         CLOSE ((3)),MF=(E,(1))\n         CH    R2,=H'1'\n         BE    FREEUP ONLY ONE\n         LA    R8,DAIRPB\n         USING DAPB10,R8\n         MVC   DA10CD,=X'0010'\n         XC    DA10FLG(6),DA10FLG\n         MVC   DA10DDN,DDNAMES\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LTR   R15,R15\n         BZ    FREEUP\n         LA    R0,MSG18 DECONT. ERROR\n         BAL   R14,PUTLINE\n         DROP  R8\n**\n** FREE THE ALLOCATED DDNAMES\n**\nFREEUP   LR    R3,R2\n         BCTR  R3,R0\n         SLL   R3,3\n         LA    R1,DDNAMES(R3)\n         BAL   R14,FREEDDN\n         BCT   R2,FREEUP\nRETURN1  DC 0H'0'                                            JFS03NOV77\n         L     R2,COMPCDE     RETURN CODE FROM ATTACHED PROG JFS03NOV77\n         TM    FLAGS,ALLRCFLG\n         BO    PUTRCOUT\n         TM    FLAGS,RCFLG\n         BZ    RETURN2\n         LTR   R2,R2\n         BZ    RETURN2\n**                                                           JFS03NOV77\n** CONVERT CONDITION CODE FROM BINARY TO EBCDIC AND          JFS04NOV77\n** OUTPUT THE MESSAGE                                        JFS04NOV77\n**                                                           JFS03NOV77\nPUTRCOUT MVC   WORKBUFF(L'MSG19),MSG19\n         CVD   R2,DWORK\n         UNPK  DWORK(5),DWORK+5(3)                           JFS03NOV77\n         OI    DWORK+4,C'0'                                  JFS03NOV77\n         LA    R15,DWORK-1                                   JFS03NOV77\n         LA    R4,5                                          JFS04NOV77\nPUTRC1   LA    R15,1(R15)                                    JFS03NOV77\n         CLI   0(R15),C'0'  FIND NON ZERO                    JFS03NOV77\n         BNE   PUTRC2                                        JFS03NOV77\n         BCT   R4,PUTRC1                                     JFS03NOV77\n         LA    R4,1  SO AT LEAST 1 0 WILL BE OUTPUT          JFS04NOV77\nPUTRC2   LA    R14,WORKBUFF+L'MSG19                          JFS03NOV77\n         BCTR  R4,R0  -1 FOR MVC                             JFS03NOV77\n         EX    R4,MOVE MOVE IN COMP CODE RETURNED            JFS03NOV77\n         LA    R3,L'MSG19+4+1(R4) +4 FOR HEADER,+1 FOR MVC   JFS03NOV77\n         STH   R3,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\nRETURN2  DC    0H'0'\n         LA    R0,RENTLEN\n         LR    R1,R13\n         L     R13,SAVE+4\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2 LOAD RETURN CODE\n         RETURN (14,12),T,RC=(15)\n**\n**\n**\nMOVE     MVC   0(0,R14),0(R15)\n**\n**\n**\n** PUTLINE SECTION\n** ON ENTRY - R0 = ADDR OF MSG, R14 = RETURN ADDR\n**\nPUTLINE  DC    0H'0'\n         ST    R14,PTSVE14\n         XC    ECB,ECB\n         PUTLINE PARM=PTPB,OUTPUT=((R0),TERM,SINGLE,DATA),             X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=(E,IOPLA)\n         LTR   R15,R15 TEST FOR ERRORS, ATTN ETC\n         BZ    PTRTN\n         CH    R15,=H'4' TEST FOR ATTN\n         BE    ERRORRTN GO RETURN WITH RC=16\n         TPUT  PTERROR,PTERRORL PUTLINE ERROR\n         B     ERRORRTN\nPTRTN    L     R14,PTSVE14\n         BR    R14\n**\n** END OF PUTLINE SECTION\n**\n**\n** STAX EXIT\n**\nSTAXEXIT SAVE  (14,12)\n         LR    R2,R13 SAVE SAVE ADDR\n         L     R13,8(R1) LOAD ADDR OF STAXSAVE\n         USING STAXSAVE,R13\n         ST    R2,STAXSAVE+4\n         ST    R13,8(R2)\n         LM    R14,R12,STAXSAVE+12 RESTORE REGS\n         LA    R2,ECB\n         POST  (R2),16  SET RC=16\n         XC    STAKECB,STAKECB\n         STACK PARM=STAK,DELETE=ALL,MF=(E,STAKIOPL)\n         TCLEARQ INPUT\n         TCLEARQ OUTPUT\n         L     R13,STAXSAVE+4\n         RETURN (14,12),RC=0\n         USING SAVE,R13 REESTABLISH BASE REG\n**\n** END OF STAXEXIT\n**\n**\n** OUTPUT -- 'DATA SET ---- ' MSG\n** ON ENTRY - R0 = ADDR OF DSNAME, R1 = ADDR OF LAST PART OF MSG,\n** R14 = RETURN ADDR.\n**\nMSGOUT   DC    0H'0'\n         ST    R14,MSGSVE14\n         STM   R2,R8,MSGSVE28\n         LA    R14,WORKBUFF\n         LA    R3,DATAMSGL\n         LA    R15,DATAMSG\n         BCTR  R3,R0\n         EX    R3,MOVE\n*MOVE    MVC   0(0,R14),0(R15)\n         LA    R14,1(R3,R14)\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\n         TM    FLAGS,QFLG TEST FOR QUOTES\n         BZ    MSGOUT1\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\n         B     MSGOUT2\nMSGOUT1  LH    R3,USERIDL LOAD LENGTH OF USER ID\n         LA    R15,USERID\n         BCTR  R3,R0\n         EX    R3,MOVE ID\n         LA    R14,1(R3,R14)\nMSGOUT2  DC    0H'0'\n         LR    R15,R0\n         LH    R3,0(R15) LOAD LENGTH OF DSNAME\n         LA    R15,2(R15)\n         BCTR  R3,R0\n         EX    R3,MOVE\n         LA    R14,1(R3,R14)\n         TM    FLAGS,QFLG\n         BZ    MSGOUT3\n         MVI   0(R14),C''''\n         LA    R14,1(R14)\nMSGOUT3  MVI   0(R14),C''''\n         LA    R14,1(R14)\n         MVI   0(R14),C' '\n         LA    R14,1(R14)\n         LH    R3,0(R1)\n         LA    R15,2(R1) LOAD ADDR DSNAME\n         BCTR  R3,R0\n         EX    R3,MOVE\n         LA    R14,1(R3,R14)\n         LA    R3,WORKLEN\n         SR    R14,R3\n         STH   R14,WORKLEN\n         XC    WORKOFF,WORKOFF\n         LA    R0,WORKLEN\n         BAL   R14,PUTLINE\n         LM    R2,R8,MSGSVE28\n         L     R14,MSGSVE14\n         BR    R14\n**\n** END OF OUTMSG SECTION\n**\n**\n** FREE DATA SETS BY DDNAME SECTION\n** ON ENTRY - R1 = ADDR OF DDNAME, R14 = RETURN ADDR\n**\nFREEDDN  DC    0H'0'\n         STM   R2,R8,FREESV28\n         ST    R14,FREESV14\n         LA    R8,DAIRPB\n         USING DAPB18,R8\n         MVC   DA18CD,=X'0018'\n         XC    DA18FLG(10),DA18FLG\n         MVC   DA18DDN,0(R1) MOVE IN DDNAME\n         MVI   DA18MNM,C' '\n         MVC   DA18MNM+1(9),DA18MNM\n         MVI   DA18DPS2,B'00001000' KEEP\n         MVI   DA18CTL,B'00010000' UNALLOC PERM\n         MVC   DA18JBNM,BLANKS\n         XC    ECB,ECB\n         LA    R1,DAIRPL\n         LINK  EP=IKJEFD00 LINK TO DAIR\n         LM    R2,R8,FREESV28\n         L     R14,FREESV14\n         BR    R14 RETURN\n         DROP  R8\n**\n** END OF FREE DDNAME SECTION\n**\n         EJECT\n**\n** ADDRS, PARM BLOCKS, ETC.\n**\nATREF    ATTACH SF=L\nATREFL  EQU   *-ATREF\nSTAXREF  STAX  STAXEXIT,MF=L\nSTAXREFL EQU   *-STAXREF\nPGREF    PUTGET MF=L\nPGREFL   EQU   *-PGREF\nPTREF    PUTLINE MF=L\nPTREFL   EQU   *-PTREF\nSTAKREF  STACK MF=L\nSTAKREFL EQU   *-STAKREF\nOPENREF  OPEN  (,),MF=L\nOPENREFL EQU   *-OPENREF\nCLOSREF  CLOSE (,),MF=L\nCLOSREFL EQU   *-CLOSREF\n         PRINT NOGEN\nSKELDCB  DCB   DSORG=PO,MACRF=R  SKELETON DCB\nSKELDCBL EQU   *-SKELDCB\nSPLIST   DC    AL1(3,0,1,78) SHARE SUBPOOL LIST\nBLANKS   DC    CL8' '\nTABLE    DC    C'0123456789ABCDEF' CONVERT TABLE\n         EJECT\n**\n** MESSAGES\n**\nMSG01    DC    Y(MSG01L,0)\n         DC    C'PARSE ERROR'\nMSG01L   EQU   *-MSG01\nMSG02    DC    Y(MSG02L,0)\n         DC    C'INVALID DATA SET NAME'\nMSG02L   EQU   *-MSG02\nMSG03    DC    Y(MSG03L)\n         DC    C'IS AN INVALID TASK LIBRARY NAME'\nMSG03L   EQU   *-MSG03-2\nMSG04    DC    Y(MSG04L,0)\n         DC    C' ENTER TASKLIB DATA SET NAME-'\nMSG04L   EQU   *-MSG04\nMSG05    DC    Y(MSG05L,0)\n         DC    C'DATA SET NAME LENGTH EXCEEDS 44 BYTES'\nMSG05L   EQU   *-MSG05\nMSG06    DC    Y(MSG06L)\n         DC    C'NOT IN CATALOG'\nMSG06L   EQU   *-MSG06-2\nMSG07    DC    C'DYNAMIC ALLOCATION ERROR CODE = '\nMSG08    DC    Y(MSG08L,0)\n         DC    C'NO MORE THAN 10 DATA SET NAMES MAY BE SPECIFIED BY THEX\n                TASKLIB KEYWORD'\nMSG08L   EQU   *-MSG08\nMSG09    DC    Y(MSG09L,0)\n         DC    C' ENTER NULL LINE TO CONTINUE, NON-NULL LINE TO STOP-'\nMSG09L   EQU   *-MSG09\nMSG10    DC    C'CANNOT PROMPT, EITHER YOU ARE EXECUTING A CLIST OR YOUX\n               R PROFILE REQUESTS NO PROMPTING.'\nMSG10L   EQU   *-MSG10\nMSG11    DC    C'INVALID PARAMETERS PASSED TO PUTGET'\nMSG11L   EQU   *-MSG11\nMSG12    DC    C'NOT ENOUGH SPACE FOR PUTGET TO OBTAIN OUTPUT BUFFERS'\nMSG12L   EQU   *-MSG12\nMSG13    DC    Y(MSG13L)\n         DC    C'IS NOT PARTITIONED'\nMSG13L   EQU   *-MSG13-2\nMSG14    DC    Y(MSG14L,0)\n         DC    C'ERROR IN CONCATENATING TASK LIBRARIES'\nMSG14L   EQU   *-MSG14\nMSG15    DC    Y(MSG15L,0)\n         DC    C'PARM FIELD SPECIFIED EXCEEDS 256 BYTES, TRUNCATED'\nMSG15L   EQU   *-MSG15\nMSG16    DC    Y(MSG16L,0)\n         DC    C'NO TASK LIBRARIES'\nMSG16L   EQU   *-MSG16\nMSG17    DC    Y(MSG17L,0)\n         DC    C'TASKLIB DCB OPEN ERROR'\nMSG17L   EQU   *-MSG17\nMSG18    DC    Y(MSG18L,0)\n         DC    C'ERROR IN DECONTENATING TASK LIBRARIES'\nMSG18L   EQU   *-MSG18\nMSG19    DC    C'CONDITION CODE = '                          JFS03NOV77\nMSG20    DC    C'PROGRAM NAME '\nMSG20L   EQU   *-MSG20\nMSG21    DC    C' NOT FOUND IN CONCATENATED '\nMSG21L   EQU   *-MSG21\nMSG22    DC    C' LIBRARIES'\nMSG22L   EQU   *-MSG22\nMSG23    DC    Y(MSG23L,0)\n         DC    C' ENTER PROGRAM NAME, OR NULL LINE TO STOP'\nMSG23L   EQU   *-MSG23\nMSG24    DC    Y(MSG24L,0)\n         DC    C'PROGRAM NAME EXCEEDS 8 CHARACTERS'\nMSG24L   EQU   *-MSG24\nMSG25    DC    Y(MSG25L)\n         DC    C'ALLOCATION ERROR'\nMSG25L   EQU   *-MSG25-2\nMSG26    DC    Y(MSG26L,0)\n         DC    C'MAXIMUM NUMBER OF ALLOCATIONS EXCEEDED'\nMSG26L   EQU   *-MSG26\nMSG27    DC    C'DYNAMIC ALLOCATION RETURN CODE = '\nMSG28    DC    Y(MSG28L,0)\n         DC    C'IKJ57090A ENTER COMMAND FOR CP'\nMSG28L   EQU   *-MSG28\nMSG29    DC    Y(MSG29L,0)\n         DC    C'COMMAND EXCEEDS 256 BYTES, TRUNCATED'\nMSG29L   EQU   *-MSG29\nDATAMSG  DC    C'DATA SET '\nDATAMSGL EQU   *-DATAMSG\nPTERROR  DC    C'PUTLINE ERROR'\nPTERRORL EQU   *-PTERROR\n         PRINT GEN\n         EJECT\n**\n** DSECT FOR REENTRANCY\n**\nRENTDSCT DSECT\nSAVE     DS    18F\nSTAXSAVE DS    18F\nDWORK    DS    D\nMSGSVE28 DS    7F\nMSGSVE14 DS    F\nPTSVE14  DS    F\nFREESV28 DS    7F\nFREESV14 DS    F\nSAVER15  DS    F\nIOPLA    DS    4F\nSTAKIOPL DS    4F\nPARMADDR DS    F ADDR OF PARM FIELD\nUPTA     DS    F ADDR OF UPT\nPSCBA    DS    F ADDR OF PSCB\nECTA     DS    F ADDR OF ECT\nSTAKECB  DS    F\nECB      DS    F\nTCB      DS    F\nPARSEPL  DS    7F PARSE PARM LIST\nDAIRPL   DS    5F DAIR PARM LIST\nDAIRPB   DS    25F DAIR PARM BLOCK\nDA0CDDN  EQU   DAIRPB+12 DA0CDDN NOT DEFINED IN CSECT\nANSWER   DS    F\nANSWER1  DS    F\nOLD      DS    F\nCOMPCDE  DS    F                                             JFS04NOV77\n         DS    A\nEPENTRY  DC    Y(1,58) BLDL\nEPNAME   DS    CL8\n         DS    CL58\nWORKLEN  DS    H\nWORKOFF  DS    H\nWORKBUFF DS    CL120\nATTACH   ATTACH SF=L\nSTAXLIST STAX  STAXEXIT,USADDR=STAXSAVE,MF=L\nPGPB     PUTGET MF=L\nPTPB     PUTLINE MF=L\nSTAK     STACK MF=L\nOPEN     OPEN  (,),MF=L\nCLOSE    CLOSE (,),MF=L\nUSERIDL  DS    H\nUSERID   DS    CL8\n         PRINT NOGEN\nTASKLIB  DCB   DSORG=PO,MACRF=R\n         PRINT GEN\nEPNAMEL  DS    H\nCMDLEN   DS    H\nCMDOFF   DS    H\nCMDBUF   DS    CL44\nDSNLEN   DS    H\nDSNAME   DS    CL44\nNODDNS   DS    H\nDDNAMES  DS    10CL8\nPARMFLDL DS    H\nPARMFLD  DS    CL256\nFLAGS    DS    X\nRENTLEN  EQU   *-RENTDSCT\nDOPROG   CSECT\n         PRINT NOGEN\n         EJECT\n**\n** PARAMETER CONTROL LIST FOR PARSE\n**\nPPLPARM  IKJPARM DSECT=PDL\nLOADMOD  IKJIDENT 'LOAD MOD NAME',MAXLNTH=8,FIRST=ALPHA,               X\n               OTHER=ALPHANUM,PROMPT='NAME OF PROGRAM TO BE EXECUTED'\nPARMA    IKJPOSIT QSTRING,HELP='PARM FIELD TO BE PASSED TO PROGRAM'\nTASKEYWD IKJKEYWD\n         IKJNAME 'TASKLIB',SUBFLD=TASKSUBF\n         IKJNAME 'LIB',SUBFLD=TASKSUBF\nRCKEYWD  IKJKEYWD DEFAULT='RC'\n         IKJNAME 'RC'\n         IKJNAME 'NORC'\n         IKJNAME 'ALLRC'\nCPKEYWD  IKJKEYWD DEFAULT='NOCP'\n         IKJNAME 'CP'\n         IKJNAME 'NOCP'\nTASKSUBF IKJSUBF\nTASKDSNA IKJPOSIT DSNAME,LIST,PROMPT='TASKLIB DATA SET NAME'\n         IKJENDP\n**\n** PARSE PARM CONTROL LIST FOR PROMPT OF TASKLIB DATA SET NAME\n**\nDSNPPL   IKJPARM DSECT=DSNPDL\nNEWDSN   IKJPOSIT DSNAME,PROMPT='TASKLIB DATA SET NAME'\n         IKJENDP\n         PRINT NOGEN\n         EJECT\n**\n** MAPPING DSECTS\n**\n         IKJCPPL\n         IKJIOPL\n         IKJUPT\n         IKJECT\n         IKJPPL\n         IKJDAPL\n         IKJDAP08\n         IKJDAP0C\n         IKJDAP10\n         IKJDAP18\n         DCBD  DSORG=PO\nDOPROG   CSECT\n         LTORG\n         END   DOPROG\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n     THE XEQ COMMAND PROCESSOR ATTACHES A PROGRAM THAT IS\n     IN EXECUTABLE FORM. THE PROGRAM MAY RESIDE IN A USER LIBRARY OR\n     ONE OF THE CONTENATED SYSTEM LINK LIBRARIES.\n)X SYNTAX -\n           XEQ     'PROGRAM NAME'   ''PARMS''\n                   LIB('DSLIST')/TASKLIB('DSLIST')\n                   RC/NORC/ALLRC  CP/NOCP\n      REQUIRED - 'PROGRAM NAME'\n      DEFAULTS - RC, NOCP\n      ALIAS    - NONE\n)O OPERANDS -\n))'PROGRAM NAME' - NAME OF THE PROGRAM TO BE EXECUTED. MUST BE A\n                   MEMBER OF A LOAD MODULE PARTITIONED DATA SET.\n))''PARMS'' - PARM FIELD TO BE PASSED TO THE EXECUTED PROGRAM. THE\n              LENGTH OF THE PARM FIELD SHOULD NOT EXCEED 256\n              CHARACTERS.\n))TASKLIB('DSLIST')/LIB('DSLIST') -\n      SPECIFIES THAT THE USER LIBRARY IS TO BE SEARCHED FOR THE\n      EXECUTABLE PROGRAM. THE TASK LIBRARY WILL ALSO BE SEARCHED\n      FOR THE PROGRAM NAMES OF LOAD MODULES ATTACHED BY THE SUBTASK.\n))'DSLIST' - SPECIFIES THE DATA SET NAMES TO BE CONCATENATED AND\n             USED FOR THE TASK LIBRARY. A MAXIMUM OF 10 DATA\n             SET NAMES IS ALLOWED.\n))RC - SPECIFIES THAT THE NON-ZERO RETURN CODE FROM THE\n       PROGRAM IS TO BE DISPLAYED AT THE TERMINAL.\n))NORC - SPECIFIES THAT NO RETURN CODES ARE TO BE DISPLAYED.\n))ALLRC - SPECIFIES THAT ALL RETURN CODES ARE TO BE\n          DISPLAYED AT THE TERMINAL.\n     NOTE - IF AN ATTENTION, ERROR, ETC. IS ENCOUNTERED BY THE\n            COMMAND PROCESSOR, THE RETURN CODE IS SET TO 16 AND\n            IS DISPLAYED ONLY IF 'RC' OR 'ALLRC' IS SPECIFIED.\n))CP - SPECIFIES THAT COMMAND PROCESSOR PARAMETERS SHOULD BE\n       REQUESTED FROM THE TERMINAL (LIKE THE TEST COMMAND).\n))NOCP - SPECIFIES THAT THIS IS NOT A COMMAND PROCESSOR.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT296/FILE296.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT296", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}