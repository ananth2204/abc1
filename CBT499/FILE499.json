{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012220000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3115658, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 13, "INMDSNAM": "CBT.V500.FILE499.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE499.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x001\\x0c'", "DS1TRBAL": "b'\\x08\\xe6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xcc\\x00\\x0b\\x03\\xd0\\x00\\x00\\x002'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x02O\\x01\\x01\\x02O\\x17@\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-24T00:00:00", "modifydate": "2001-01-24T17:40:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 432    FILE:  499\n\n    ORIGINAL DSNAME:  WSBG.CBT432.FILE499\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    27920   PO\n\n\n   46 MEMBERS COUNTED; CUMULATIVE SIZE IS 29,252 RECORDS\n\nTIME THIS PDS WAS SHIPPED:   01/24/01    17:40:40    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$IDENT": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x01o\\x01\\x01\\x01o\\x149\\x00!\\x00A\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-16T00:00:00", "modifydate": "2001-01-16T14:39:00", "lines": 33, "newlines": 65, "modlines": 0, "user": "WSBG"}, "text": "Subject: Re: RACF Password utils etc.\nDate: Fri, 12 Jan 2001 18:09:47 +0200\nFrom: edwardr@cch.co.za\nTo: sbgolob@attglobal.net\n\nHi Sam\n\nMy name is Edward Ross\nand I currently work as a\nS/390 Software Engineer for\na company called Computer\nConfigurations Holding as\nthey have bought out Amdahl SA.\n\n\nI will also accept snail mail if there\nare any problems with the files\nI contributed and as such\nmy address is:\n\nMr EJ Ross\nP.O Box 32335\nTotiusdal\nPretoria\nSouth Africa\n0134\n\nMobile : +27 82 979 4317\nif anyone would like to contact me\n\nCheers\nEdward\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@EQU": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x95 o\\x00\\x95 o\\tS\\x00#\\x00\\x13\\x00!\\xe2\\xe8\\xe2\\xf2\\xf0\\xf0\\xf5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1995-07-25T00:00:00", "modifydate": "1995-07-25T09:53:00", "lines": 35, "newlines": 19, "modlines": 33, "user": "SYS2005"}, "text": "         MACRO\n&NAME    @EQU\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nR00      EQU   0\nR01      EQU   1\nR02      EQU   2\nR03      EQU   3\nR04      EQU   4\nR05      EQU   5\nR06      EQU   6\nR07      EQU   7\nR08      EQU   8\nR09      EQU   9\nR0A      EQU   10\nR0B      EQU   11\nR0C      EQU   12\nR0D      EQU   13\nR0E      EQU   14\nR0F      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE499": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x08?\\x01\\x01\\x01o\\x14C\\x00\\x16\\x00\\x02\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2001-01-16T14:43:00", "lines": 22, "newlines": 2, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 499 is from Edward Ross and contains a collection of      *   FILE 499\n//*           utilities, as well as ISPF panels and CLISTs for      *   FILE 499\n//*           doing RACF manipulations.                             *   FILE 499\n//*                                                                 *   FILE 499\n//*           If you have questions, please feel free to            *   FILE 499\n//*           contact:                                              *   FILE 499\n//*                                                                 *   FILE 499\n//*           Ed Ross     email:  edwardr@cch.co.za                 *   FILE 499\n//*                                                                 *   FILE 499\n//*           I will also accept snail mail if there are            *   FILE 499\n//*           any problems with the files I contributed and         *   FILE 499\n//*           as such my address is:                                *   FILE 499\n//*                                                                 *   FILE 499\n//*           Mr EJ Ross                                            *   FILE 499\n//*           P.O Box 32335                                         *   FILE 499\n//*           Totiusdal                                             *   FILE 499\n//*           Pretoria                                              *   FILE 499\n//*           South Africa                                          *   FILE 499\n//*           0134                                                  *   FILE 499\n//*                                                                 *   FILE 499\n//*           Mobile : +27 82 979 4317                              *   FILE 499\n//*                                                                 *   FILE 499\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE500": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x08?\\x01\\x01\\x01o\\x14E\\x00\\x08\\x00\\x02\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2001-01-16T14:45:00", "lines": 8, "newlines": 2, "modlines": 0, "user": "WSBG"}, "text": "//***FILE 500 is from Edward Ross, and contains object decks        *   FILE 500\n//*           connected with the material on File 499.              *   FILE 500\n//*                                                                 *   FILE 500\n//*           If you have questions, please feel free to            *   FILE 500\n//*           contact:                                              *   FILE 500\n//*                                                                 *   FILE 500\n//*           Ed Ross     email:  edwardr@cch.co.za                 *   FILE 500\n//*                                                                 *   FILE 500\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMACL": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x00\\x00\\x970o\\x00\\x99 /\\t\\x10\\x00\\x11\\x00\\x1a\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf1@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1997-11-02T00:00:00", "modifydate": "1999-07-21T09:10:00", "lines": 17, "newlines": 26, "modlines": 0, "user": "SYS0011"}, "text": "//SYS0011L JOB (1,RESYS,SYS,01),'ASM-LINK',TIME=1439,\n//             REGION=8M,CLASS=A,MSGCLASS=V,NOTIFY=&SYSUID\n//*\n//STEP1    EXEC ASMACL,PARM.C='OBJ,NODECK',REGION=8M,\n//***      PARM.L='AC=1,AMODE=31,RMODE=ANY,LIST,XREF,MAP'\n//***      PARM.L='AC=1,AMODE=31,RMODE=ANY,RENT,LIST,XREF,MAP'\n//         PARM.L='AC=1,AMODE=24,RMODE=24,RENT,REUS,,LIST,XREF,MAP'\n//***      PARM.L='AC=1,AMODE=31,RMODE=24,RENT,REUS,,LIST,XREF,MAP'\n//C.SYSLIB DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=CEE.SCEEMAC,DISP=SHR\n//         DD  DSN=SYS0011.LIB.ASM,DISP=SHR\n//C.SYSLIN DD  DSN=SYS0011.LIB.OBJECT(CMD@WAIT),DISP=SHR\n//C.SYSIN  DD  DSN=SYS0011.LIB.ASM(CMD@WAIT),DISP=SHR\n//L.SYSLIN DD  DSN=SYS0011.LIB.OBJECT(CMD@WAIT),DISP=SHR\n//L.SYSLMOD DD DSN=SYS0011.LIB.LOAD2(CMD@WAIT),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMHC": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01&\\x00\\x00\\x00\\x94 o\\x00\\x99 /\\x08V\\x00\\x11\\x00\\x0b\\x00\\x11\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf1@@@'", "ispf": {"version": "01.38", "flags": 0, "createdate": "1994-07-25T00:00:00", "modifydate": "1999-07-21T08:56:00", "lines": 17, "newlines": 11, "modlines": 17, "user": "SYS0011"}, "text": "//SYS0011A JOB (1,RESYS,SYS,01),'FRANCOIS',REGION=8M,\n//             CLASS=A,MSGCLASS=V,NOTIFY=&SYSUID\n//*\n//VTOC@HDR EXEC ASMAC,PARM.C='OBJ,NODECK',REGION=8M\n//C.SYSLIB DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=CEE.SCEEMAC,DISP=SHR\n//         DD  DSN=SYS0011.LIB.ASM,DISP=SHR\n//C.SYSLIN DD  DSN=SYS0011.LIB.OBJECT(VTOC@HDR),DISP=SHR\n//C.SYSIN  DD  DSN=SYS0011.LIB.ASM(VTOC@HDR),DISP=SHR\n//\n//C.SYSLIN DD  DSN=SYS0011.LIB.OBJECT(VTOC@LST),DISP=SHR\n//C.SYSIN  DD  DSN=SYS0011.LIB.ASM(VTOC@LST),DISP=SHR\n//\n//C.SYSLIN DD  DSN=SYS0011.LIB.OBJECT(VTOC@UCB),DISP=SHR\n//C.SYSIN  DD  DSN=SYS0011.LIB.ASM(VTOC@UCB),DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CMD@WAIT": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x93(_\\x00\\x99\\x06?\\x13#\\x00\\x99\\x00\\x9b\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1993-10-12T00:00:00", "modifydate": "1999-03-04T13:23:00", "lines": 153, "newlines": 155, "modlines": 0, "user": "SYS0007"}, "text": "CMD@WAIT CSECT\nCMD@WAIT AMODE 24\nCMD@WAIT RMODE 24\n**********************************************************************\n** FUNCTION: THIS PROGRAM ISSUES MULTIPLE SYSTEM COMMANDS           **\n**                                                                  **\n** INPUT:  COMMANDS TO BE ISSUED READ FROM SYSIN.                   **\n**         TIME TO WAIT BETWEEN COMMANDS - FROM INPUT PARM,         **\n**         DEFAULT IS 1 SECOND.                                     **\n**                                                                  **\n** OUTPUT: SYSTEM COMMANDS                                          **\n**                                                                  **\n** ATTRIBUTES: RE-ENTRANT                                           **\n**             THE PROGRAM SHOULD BE APF AUTHORIZED AND LINKED AC=1 **\n**                                                                  **\n**********************************************************************\n         STM   R14,R12,12(R13)          .SAVE REGISTERS\n         LR    R12,R15                  .LOAD BASE ADDRESS\n         USING CMD@WAIT,R12             .SET BASE REGISTER\n         L     R2,0(,R1)                .SAVE PARAMETER POINTER\n*\n         LA    R10,LENWORK              .LOAD LENGTH OF WORKSTOR\n         GETMAIN R,LV=(10)              .GET MAIN STORAGE - WORKSTOR\n         LR    R11,R1                   .LOAD ADDRESS     - WORKSTOR\n         USING WORKSTOR,R11             .SET BASE ADDRESS - WORKSTOR\n         ST    R13,4(,R11)              .SAVE AREA POINTER\n         ST    R11,8(,R13)              .SAVE AREA POINTER\n         LR    R13,R11                  .SAVE AREA ADDRESS IN R13\n*\n**********************************************************************\n*** PROCESS INPUT WAIT TIME\n**********************************************************************\n         MVC   WTIME,=C'00000100'      .INITIALIZE WAIT TIME\n         LA    R2,0(,R2)               .GET RID OF HIGH ORDER BIT\n         LH    R9,0(,R2)               .LOAD LENGTH OF PARAMETER\n         S     R9,=F'1'                .DECREMENT 1 FOR MOVE\n         BM    OPENR                   .NO WAIT TIME SPECIFIED\n*\n         LA    R7,2(R2)                .LOAD INPUT ADDRESS\n         LA    R8,WTIME                .LOAD WAIT TIME ADDRESS\n         EX    R9,MOVEIN               .MOVE INPUT TO WAIT TIME\n*\n**********************************************************************\n*** OPEN INPUT FILE AND TEST\n**********************************************************************\nOPENR    EQU   *\n         LA    R7,INFILE                .LOAD ADDR. OF INPUT DCB\n         LA    R8,SYSIN                 .LOAD ADDR. OF WORKSTOR DCB\n         LA    R9,LENINP                .LOAD LENGTH OF INPUT DCB\n         EX    R9,MOVEIN                .MOVE DCB TO WORKSTOR\n         LA    R6,OPENIN                .LOAD DCB ADDRESS\n         OPEN  (SYSIN,(INPUT)),MF=(E,(6))   .OPEN INPUT FILE\n         LTR   R15,R15                  .INPUT FILE PRESENT ?\n         BNZ   FINISH                   .NO INPUT FILE\n*\n         LA    R7,CMDDUMMY              .LOAD ADDR. DUMMY CMD AREA\n         LA    R8,CMDAREA               .LOAD ADDR. OF COMMAND AREA\n         LA    R9,CMDLEN                .LOAD LENGTH OF COMMAND AREA\n         EX    R9,MOVEIN                .MOVE DUMMY TO COMMAND AREA\n*\nREADIN   EQU   *\n         GET   SYSIN,INCMD              .READ INPUT\n         MVC   COMMAND(80),INCMD        .READ INPUT\n         STIMER WAIT,DINTVL=WTIME      .WAIT THE SPECIFIED TIME\n         MODESET KEY=ZERO,MODE=SUP      .SET SUPERVISOR STATE\n         XR    R0,R0                    .CLEAR R0 - FOR SVC 34\n         MGCR  CMDAREA                  .ISSUE SYSTEM COMMAND\n         MODESET KEY=NZERO,MODE=PROB    .SET PROBLEM STATE\n         B     READIN                   .READ NEXT COMMAND\n*\n**********************************************************************\n*** DO END OF PROGRAM HOUSEKEEPING\n**********************************************************************\nCLOSE    EQU   *\n         LA    R6,CLOSEIN               .LOAD DCB ADDRESS\n         CLOSE SYSIN,MF=(E,(6))         .CLOSE INPUT FILE\nFINISH   EQU   *\n         XR    R15,R15                  .SET RETURN CODE TO ZERO\n         L     R13,4(,R13)              .RESTORE SAVAREA ADDRESS\n         ST    R15,8(,R13)              .CLR BACKWARD SAVAREA PNTR\n         FREEMAIN R,LV=(10),A=(11)      .FREE STORAGE - WORKSTOR\n         LM    R0,R12,20(R13)           .RESTORE REGISTERS\n         L     R14,12(R13)              .   DO NOT OVERWRITE R15\n         BR    R14                      .END OF EXECUTABLE INSTR.\n         EJECT\n**********************************************************************\n*** LITERAL POOL\n**********************************************************************\n         LTORG\n*\n**********************************************************************\n*** INSTRUCTION MASKS\n**********************************************************************\n         DS    0F                      .ALIGN ON FULLWORD BOUNDARY\nMOVEIN   MVC   0(0,R8),0(R7)           .MOVE WITH LENGTH\n         DS    0F                      .ALIGN ON FULLWORD BOUNDARY\nOPENIN   OPEN  (INFILE,(INPUT)),MF=L    .OPEN INPUT FILE LIST\n         DS    0F                      .ALIGN ON FULLWORD BOUNDARY\nCLOSEIN  CLOSE INFILE,MF=L              .CLOSE INPUT FILE LIST\n*\n**********************************************************************\n*** DUMMY DCB FOR INPUT DATA SET\n**********************************************************************\nINFILE   DCB   DDNAME=SYSIN,            .INPUT DATA SET                X\n               DSORG=PS,                .DCB INFO                      X\n               RECFM=FB,                .DCB INFO                      X\n               LRECL=80,                .DCB INFO                      X\n               EODAD=CLOSE,             .AT END OF INPUT               X\n               MACRF=GM                 .USING GET MOVE\nLENINP   EQU   *-INFILE\n*\n**********************************************************************\n*** REGISTER EQUATES\n**********************************************************************\nEQUATES  EQUATES\n*\n**********************************************************************\n*** SYSTEM COMMAND DUMMY AREA\n**********************************************************************\nCMDDUMMY DS    0F\n         DC    X'00'                    .NO TOKEN PRESENT\n         DC    AL1(CMDLEN)              .LENGTH OF COMMAND\n         DC    X'0000'                  .NO TOKEN PRESENT\n         DC    CL80' '                  .MAX LENGTH IS 80 BYTES\nCMDLEN   EQU   *-CMDDUMMY\n         EJECT\n**********************************************************************\n*** WORK STORE - DUMMY SECTION\n**********************************************************************\nWORKSTOR DSECT\n**********************************************************************\n*** REGISTER SAVE AREA\n**********************************************************************\nSAVAREA  DS    18F                      .SAVE AREA\nWTIME    DS    D                        .WAIT TIME\nINCMD    DS    CL80                     .COMMAND READ\n*\n**********************************************************************\n*** WRITE TO OPERATOR MESSAGE AREA\n**********************************************************************\n         DS    0F                      .ALIGN ON FULLWORD BOUNDARY\nCMDAREA  DS    CL(CMDLEN)               .DEFINE COMMAND AREA\n         ORG   CMDAREA+4\nCOMMAND  DS    CL(CMDLEN-4)             .COMMAND\n         ORG\n*\n**********************************************************************\n*** DCB FOR INPUT DATA SET\n**********************************************************************\nSYSIN    DS    CL(LENINP)               .SYSIN FILE DCB\n*\nLENWORK  EQU   *-WORKSTOR               .LENGTH OF DSECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CMDISSUE": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x91\\x10_\\x00\\x99\\x06?\\x13#\\x00v\\x00t\\x00\\x02\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1991-04-15T00:00:00", "modifydate": "1999-03-04T13:23:00", "lines": 118, "newlines": 116, "modlines": 2, "user": "SYS0007"}, "text": "CMDISSUE CSECT\nCMDISSUE AMODE 24\nCMDISSUE RMODE 24\n**********************************************************************\n** FUNCTION: THIS PROGRAM ISSUES A SYSTEM COMMAND                   **\n**                                                                  **\n** INPUT:  ADDRESS OF THE COMMAND TO BE WRITTEN TO THE CONSOLE.     **\n**                                                                  **\n** OUTPUT: SYSTEM COMMAND                                           **\n**                                                                  **\n** ATTRIBUTES: RE-ENTRANT                                           **\n**             THE PROGRAM SHOULD BE APF AUTHORIZED AND LINKED AC=1 **\n**                                                                  **\n** REGISTER USAGE:                                                  **\n**     R2  - PARAMETER LIST ADRRESS (FROM REGISTER 1)               **\n**                                                                  **\n**     R7  - EXECUTE MVC - INPUT AREA ADDRESS                       **\n**     R8  - EXECUTE MVC - OUTPUT AREA ADDRESS                      **\n**     R9  - EXECUTE MVC - LENGTH OF AREA TO BE MOVED               **\n**     R10 - LENGTH OF WORK STORE                                   **\n**     R11 - WORK STORE AND SAVE AREA BASE ADDRESS                  **\n**     R12 - PROGRAM BASE ADDRESS                                   **\n**     R13 - SAVEAREA ADDRESS                                       **\n**     R14 - RETURN ADDRESS OF CALLING PROGRAM                      **\n**     R15 - RETURN CODES                                           **\n**                                                                  **\n**********************************************************************\n         STM   R14,R12,12(R13)          .SAVE REGISTERS\n         LR    R12,R15                  .LOAD BASE ADDRESS\n         USING CMDISSUE,R12             .SET BASE REGISTER\n         L     R2,0(,R1)                .SAVE PARAMETER POINTER\n*\n         LA    R10,LENWORK              .LOAD LENGTH OF WORKSTOR\n         GETMAIN R,LV=(10)              .GET MAIN STORAGE - WORKSTOR\n         LR    R11,R1                   .LOAD ADDRESS     - WORKSTOR\n         USING WORKSTOR,R11             .SET BASE ADDRESS - WORKSTOR\n         ST    R13,4(,R11)              .SAVE AREA POINTER\n         ST    R11,8(,R13)              .SAVE AREA POINTER\n         LR    R13,R11                  .SAVE AREA ADDRESS IN R13\n         EJECT\n**********************************************************************\n*** READ AND PROCESS COMMAND\n**********************************************************************\n         LA    R7,CMDDUMMY              .LOAD ADDR. DUMMY CMD AREA\n         LA    R8,CMDAREA               .LOAD ADDR. OF COMMAND AREA\n         LA    R9,CMDLEN                .LOAD LENGTH OF COMMAND AREA\n         EX    R9,MOVEIN                .MOVE DUMMY TO COMMAND AREA\n*\n         LA    R2,0(,R2)                .GET RID OF HIGH ORDER BIT\n         LH    R9,0(,R2)                .LOAD LENGTH OF PARAMETER\n         S     R9,=F'1'                 .DECREMENT 1 FOR MOVE\n         BM    FINISH                   .NO PARAMETER SPECIFIED\n*\n         LA    R7,2(R2)                 .LOAD ADDR. INPUT COMMAND\n         LA    R8,COMMAND               .LOAD ADDR. OF OUTPUT COMMAND\n         EX    R9,MOVEIN                .MOVE TO COMMAND AREA\n*\n         MODESET KEY=ZERO,MODE=SUP      .SET SUPERVISOR STATE\n         XR    R0,R0                    .CLEAR R0 - FOR SVC 34\n         MGCR  CMDAREA                  .ISSUE SYSTEM COMMAND\n         MODESET KEY=NZERO,MODE=PROB    .SET PROBLEM STATE\n*\n**********************************************************************\n*** DO END OF PROGRAM HOUSEKEEPING\n**********************************************************************\nFINISH   XR    R15,R15                  .SET RETURN CODE TO ZERO\n         L     R13,4(,R13)              .RESTORE SAVAREA ADDRESS\n         ST    R15,8(,R13)              .CLR BACKWARD SAVAREA PNTR\n         FREEMAIN R,LV=(10),A=(11)      .FREE STORAGE - WORKSTOR\n         LM    R0,R12,20(R13)           .RESTORE REGISTERS\n         L     R14,12(R13)              .   DO NOT OVERWRITE R15\n         BR    R14                      .END OF EXECUTABLE INSTR.\n         EJECT\n**********************************************************************\n*** LITERAL POOL\n**********************************************************************\n         LTORG\n*\n**********************************************************************\n*** EXECUTE INSTRUCTION MASK\n**********************************************************************\n         DS    0F                      .ALIGN ON FULLWORD BOUNDARY\nMOVEIN   MVC   0(0,R8),0(R7)           .MOVE WITH LENGTH\n*\n**********************************************************************\n*** REGISTER EQUATES\n**********************************************************************\nEQUATES  EQUATES\n*\n**********************************************************************\n*** SYSTEM COMMAND DUMMY AREA\n**********************************************************************\nCMDDUMMY DS    0F\n         DC    X'00'                    .NO TOKEN PRESENT\n         DC    AL1(CMDLEN)              .LENGTH OF COMMAND\n         DC    X'0000'                  .NO TOKEN PRESENT\n         DC    CL100' '                 .MAX LENGTH IS 100 BYTES\nCMDLEN   EQU   *-CMDDUMMY\n         EJECT\n**********************************************************************\n*** WORK STORE - DUMMY SECTION\n**********************************************************************\nWORKSTOR DSECT\n**********************************************************************\n*** REGISTER SAVE AREA\n**********************************************************************\nSAVAREA  DS    18F                      .SAVE AREA\n*\n**********************************************************************\n*** SYSTEM COMMAND AREA\n**********************************************************************\nCMDAREA  DS    CL(CMDLEN)               .DEFINE COMMAND AREA\n         ORG   CMDAREA+4\nCOMMAND  DS    CL(CMDLEN-4)             .COMMAND\n         ORG\n*\nLENWORK  EQU   *-WORKSTOR               .LENGTH OF DSECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EDCCPL": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x00\\x00\\x982\\x7f\\x00\\x99\\x18?\\t)\\x00\\x17\\x00\\x15\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf1@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1998-11-23T00:00:00", "modifydate": "1999-07-02T09:29:00", "lines": 23, "newlines": 21, "modlines": 0, "user": "SYS0011"}, "text": "//SYS0011B JOB (0),'ME',CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID,REGION=0M\n//*\n//  SET #CPP=CBC\n//  SET #LE=CEE\n//*\n//*ROC JCLLIB ORDER=(&#CPP..SCBCPRC,\n//*  &#LE..SCEEPROC)\n//*\n//VTOC@ALL EXEC EDCCPL,REGION=8M,\n//     CPARM='NOLIST,MEMORY,NOOFFSET,OPTIMIZE,SOURCE,NOXREF',\n//     LPARM='AC=1,AMODE=31,RMODE=24,LIST,LET,XREF,MAP',\n//     LIBPRFX=&#LE.,\n//     LNGPRFX=&#CPP.,\n//     INFILE=SYS0011.LIB.ASM(VTOC@ALL),\n//     OUTFILE=SYS0011.LIB.LOAD(VTOC@ALL)\n//*    PLANG='EDCPMSGK',\n//*    CRUN='NATLANG(JPN)',\n//LKED.SYSLIN DD DSN=SYS0011.LIB.OBJECT(VTOC@ALL),DISP=SHR\n//          DD DSN=SYS0011.LIB.OBJECT(VTOC@HDR),DISP=SHR\n//          DD DSN=SYS0011.LIB.OBJECT(VTOC@LST),DISP=SHR\n//          DD DSN=SYS0011.LIB.OBJECT(VTOC@UCB),DISP=SHR\n//LKED.SYSLMOD DD DSN=&OUTFILE,DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTER": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x14\\x9f\\x00\\x95\\x15\\x0f\\x15\\x05\\x00~\\x00~\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-05-29T00:00:00", "modifydate": "1995-05-30T15:05:00", "lines": 126, "newlines": 126, "modlines": 0, "user": "SYS0007"}, "text": "         MACRO                            +\n&CNAME   ENTER &SAVE=SAVE,&BASE=(12),&EQU=YES,&CSECT=YES,&RENT=NO,     +\n               &SP=0,&AUTH=,&FUNC=,&DATEW=,&PGM=,&TRACE=OFF,&BLOCK=NO, +\n               &SA=YES\n         GBLB  &FTIME,&GETMAIN,&TRACEP,&SAC\n         GBLA  &SUBP\n         LCLA  &NUMBAS,&SUP,&FUNCE        +\n         LCLC  &NAMSAV,&USEBASE,&FUNC1,&FUNC2\n         LCLC  &PGM1                      +\n         PRINT ON                         +\n&SAC     SETB  ('&SA' EQ 'YES')           +\n&GETMAIN SETB  ('&RENT' EQ 'YES')         +\n&SUBP    SETA  &SP                        +\n&TRACEP  SETB  ('&TRACE' EQ 'ON')         +\n         AIF   ('&CNAME' NE '').E10       +\n         MNOTE 8,'NO CSECT NAME SPECIFIED'\n         MEXIT                            +\n.E10     AIF   (K'&SAVE LT 5).E20         +\n         MNOTE 8,'SAVE AREA MORE THAN 4 CHARACTERS'\n         MEXIT                            +\n.E20     ANOP                             +\n         AIF   ('&BLOCK' EQ 'NO').NOBLK   +DONT GENERATE HEADING BLOCK\n&PGM1    SETC  '&PGM'                     +SET IT TO CSECT NAME IF NULL\n         AIF   ('&PGM' NE '').GENHD       +GO GEN HEADINGS\n&PGM1    SETC  '&CNAME'                   +SET IT TO CSECT NAME IF NULL\n.GENHD   ANOP                             +\n         AIF   ('&FUNC' EQ '').GENBLK     +NO FUNCTION SPECIFIED\n         AIF   ('&FUNC'(1,1) EQ '''').Q   +FUNC IN QUOTES ????\n&FUNC1   SETC  ''''                       +MAKE IT A QUAOTE\n&FUNC1   SETC  '&FUNC1.&FUNC.&FUNC1'      +FORCE QUOTES\n         AGO   .Q1                        +\n.Q       ANOP                             +\n&FUNC1   SETC  '&FUNC'                    +\n.Q1      ANOP                             +\n&FUNCE   SETA  44                         +SET END OF FUNC\n         AIF   (K'&FUNC1 GT 45).GENTIT    +CHECK FUNC LEN\n&FUNCE   SETA  (K'&FUNC1-2)               +IF LT 45 SET RIGHT\n.GENTIT  ANOP                             +\n&FUNC2   SETC  '&FUNC1'(2,&FUNCE)         +EXTRACT FROM FUNC FOR TITLE\n         TITLE '&PGM1 - &FUNC2'           +\n.GENBLK  ANOP                             +\n         PSHD1 PGM=&PGM1,FUNC=&FUNC1,AUTH=&AUTH,DATEW=&DATEW +GEN HEAD\n.NOBLK   ANOP                             +\n&NAMSAV  SETC  '&SAVE'.'&SYSNDX'          +\n         AIF   ('&BASE'(1,1) EQ '(').E22  +\n&USEBASE SETC  '&BASE'                    +\n         AGO   .E24                       +\n.E22     ANOP                             +\n&NUMBAS  SETA  K'&BASE-2                  +\n&USEBASE SETC  '&BASE'(2,&NUMBAS)         +\n.E24     ANOP                             +\n&NUMBAS  SETA  1                          +\n         AIF   ('&CSECT' EQ 'NO').E25     +\n&CNAME   CSECT                            +\n.E25     ANOP                             +\n         USING *,&USEBASE                 +\n         PSPGMID1 &CNAME                  +SET UP ID\n         STM   14,12,12(13)               +\n         LR    &BASE(1),15                +SET UP FIRST BASE REG\n         AIF   (NOT &SAC).BASES           +NO SAVE AREA CHAINING\n         LR    14,13                      +STORE SAVE AREA POINTER\n         AIF   (NOT &GETMAIN).E26         +\n&SUP     SETA  &SP                        +\n         AIF   (NOT &SUP).E26A            +IS SUBPOOL ?\n         AGO   .E26B                      +YES\n.E26A    GETMAIN R,LV=72                  +GET SAVE AREA\n         LR    13,1                       +ADDRESS OF SAVE AREA\n         AGO   .E27                       +\n.E26B    ANOP                             +\n         GETMAIN RC,LV=72,SP=&SUP         +SAVE AREA WITH SUBPOOL\n         LR    13,1                       +\n         AGO   .E27                       +\n.E26     ANOP                             +\n         LA    13,&NAMSAV                 +LOAD ADDRESS OF NEW S.A.\n.E27     ANOP                             +\n         ST    13,8(14)                   +SAVE AREA FORWARD CHAIN\n         ST    14,4(13)                   +SAVE AREA BACKWARD CHAIN\n         LM    14,1,12(14)                +RESTORE REGS 14-1\n.BASES   ANOP\n         AIF   (N'&BASE EQ &NUMBAS).E40   +\n         LA    15,4095                    +X'1000' - 1\n.E30     AIF   (N'&BASE EQ &NUMBAS).E40   +\n&NUMBAS  SETA  &NUMBAS+1                  +\n         LA    &BASE(&NUMBAS),1(15,&BASE(&NUMBAS-1)) +SECONDARY BASE\n         AGO   .E30                       +\n.E40     ANOP                             +\n         AIF   (&GETMAIN).E45             +EXTERNAL SA\n         AIF   (NOT &SAC).E45             +NO SA\n         B     $$EN&SYSNDX                +BRANCH AROUND SAVE AREA\n&NAMSAV  DC    9D'0'                      +DEFINE SAVE AREA\n.E45     ANOP                             +\n         AIF   ('&EQU' EQ 'NO').E50       +\n         AIF   (&FTIME).E50               +\n&FTIME   SETB  1                          +\nR0       EQU   0                          +\nR1       EQU   1                          +\nR2       EQU   2                          +\nR3       EQU   3                          +\nR4       EQU   4                          +\nR5       EQU   5                          +\nR6       EQU   6                          +\nR7       EQU   7                          +\nR8       EQU   8                          +\nR9       EQU   9                          +\nRA       EQU   10                         +\nRB       EQU   11                         +\nRC       EQU   12                         +\nRD       EQU   13                         +\nRE       EQU   14                         +\nRF       EQU   15                         +\nR10      EQU   10                         +\nR11      EQU   11                         +\nR12      EQU   12                         +\nR13      EQU   13                         +\nR14      EQU   14                         +\nR15      EQU   15                         +\nFPR0     EQU   0                          +\nFPR2     EQU   2                          +\nFPR4     EQU   4                          +\nFPR6     EQU   6                          +\n.E50     ANOP                             +\n         AIF   (&GETMAIN).E60             +\n&USEBASE SETC  '$$EN'.'&SYSNDX'           +\n&USEBASE EQU   *                          +\n.E60     ANOP                             +\n         MEND                             +\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUATES": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x890_\\x00\\x95\\x15\\x0f\\x15\\x08\\x00\\x13\\x00\\x14\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1989-11-01T00:00:00", "modifydate": "1995-05-30T15:08:00", "lines": 19, "newlines": 20, "modlines": 0, "user": "SYS0007"}, "text": "         MACRO\n         EQUATES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUATES1": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92\\x18/\\x00\\x95\\x15\\x0f\\x15\\x06\\x00\\x14\\x00\\x14\\x00\\x01\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-06-30T00:00:00", "modifydate": "1995-05-30T15:06:00", "lines": 20, "newlines": 20, "modlines": 1, "user": "SYS0007"}, "text": "         MACRO\n         EQUATES1\n*        REGISTER EQUATES\nR00      EQU   0\nR01      EQU   1\nR02      EQU   2\nR03      EQU   3\nR04      EQU   4\nR05      EQU   5\nR06      EQU   6\nR07      EQU   7\nR08      EQU   8\nR09      EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIT": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x82\\x14\\x7f\\x00\\x95\\x15\\x0f\\x15\\x05\\x00\"\\x00!\\x00\\x06\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1982-05-27T00:00:00", "modifydate": "1995-05-30T15:05:00", "lines": 34, "newlines": 33, "modlines": 6, "user": "SYS0007"}, "text": "         MACRO\n&EXIT    EXIT  &RC=0\n         GBLB  &GETMAIN\n         GBLA  &SUBP\n         LCLA  &SUP\n         LCLC  &RC2\n         AIF   (NOT &GETMAIN).NOGET\n&EXIT    LR    R1,RD                    +LOAD SA ADDRESS\n         L     RD,4(0,RD)               +GET OLD SA ADDRESS\n         ST    RF,16(,RD)               +SAVE REG 15\n&SUP     SETA  &SUBP\n         AIF   (&SUP EQ 0).A1\n         FREEMAIN RC,LV=72,A=(1),SP=&SUP\n         AGO   .SETRC\n.A1      ANOP\n         FREEMAIN R,LV=72,A=(1)\n         AGO   .SETRC0\n.NOGET   ANOP\n&EXIT    L     RD,4(0,RD)               +GET OLD SA ADDRESS\n         AGO   .SETRC\n.SETRC0  ANOP\n         L     RF,16(,RD)\n.SETRC   ANOP\n&RC2     SETC  '&RC'\n         AIF   ('&RC'(1,1) NE '(').EX20\n         AIF   ('&RC(1)' EQ '15').EX10\n&RC2     SETC  '(15)'\n         LR    RF,&RC(1)\n.EX10    ANOP\n         RETURN (14,12),RC=(15)         ISSUE RETURN MACRO\n         MEXIT\n.EX20    ANOP\n         RETURN (14,12),RC=&RC2         ISSUE RETURN MACRO\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETASCB": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x901o\\x00\\x95\\x15\\x0f\\x15\\x05\\x004\\x004\\x00\\x02\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-11-12T00:00:00", "modifydate": "1995-05-30T15:05:00", "lines": 52, "newlines": 52, "modlines": 2, "user": "SYS0007"}, "text": "********        *MACRO TO GET ASCB - CAN BE MOVED TO A SYSLIB LIBRARY\n         MACRO\n         GETASCB  &NAME,&PAR=@00,&RENTSAV=NO,&USE=NO\n.*******       *\n.*******       *PS@ASCB1:84-11-22 - OBTAIN A USERS ASCB ADDRESS\n.*******       *         NAME     = FIELD CONTAINING JOBNAME/USERID\n.*******       *         PAR      = CURRENT PARAGRAPH PREFIX\n.*******       *         RENTSAV  = NAME OF WORK SAVE AREA\n.*******       *         USE      = USE PARAMETER REGS OPTION\n.*******       *  REG 1 IS DESTROYED AND CONTAINS @ ASCB OR 0 IF\n.*******       *  NOT FOUND\n.*******       * B BEKKER      PERSETEL (PTY LTD)\n         LCLB  &USEREGS\n         LCLC  &ERS,&EPA,&LBL1\n&USEREGS SETB  ('&USE' EQ 'YES')            +SET USE SWITCH\n&ERS     SETC  '&RENTSAV'                   +GET KEYWORD VALUE\n         AIF   ('&RENTSAV' NE 'NO').SAVE    +DOES HE PROVIDE SA??\n         B     &PAR.X&SYSNDX                +BRANCH AROUND SAVE AREA\n&PAR.Z&SYSNDX DS  4F                        +SAVE AREA FOR WORKREGS\n&PAR.X&SYSNDX EQU   *                       +\n&ERS     SETC  '&PAR.Z&SYSNDX'              +SET SAVE AREA NAME\n.SAVE    ANOP                               +\n&PAR.X   STM   RE,R1,&ERS                   +SAVE WORK REGS\n         PUSH  USING                 +\n         L     RE,FLCCVT2-PSA(R0,R0) +LOAD CVT ADDRESS\n         L     RE,CVTASVT-CVT(R0,RE) +LOAD ASVT ADDRESS\n         USING ASVT,RE               +\n.*       CLC   ASVTASVT,=C'ASVT'     +HIT??\n.*       BNER  R0                    +NO - DIE\n         L     R0,ASVTMAXU           +LOAD MAX NO OF ASCBS\n&PAR.L&SYSNDX EQU   *\n         TM    ASVTENTY,ASVTAVAL     +IS IT IN USE???\n         BO    &PAR.R&SYSNDX         +NO - BYPASS\n         L     R1,ASVTENTY           +LOAD A(ASCB)\n         USING ASCB,R1               +\n         CLC   ASCBJBNI,=X'00000000' +IS IT AN INITIATED JOB???\n         BE    &PAR.S&SYSNDX         +NO - GO GET OTHER ADDRESS\n         L     RF,ASCBJBNI           +GET @ JOBNAME ADDRESS\n         B     &PAR.C&SYSNDX         +  AND GO CHECK IT\n&PAR.S&SYSNDX EQU   *                +\n         L     RF,ASCBJBNS           +GET @ STC/TSU/MOUNT NAME ADDRESS\n&PAR.C&SYSNDX EQU   *                +\n         CLC   &NAME.(8),0(RF)       +HIT??\n         BE    &PAR.F&SYSNDX         +YES - RETURN\n&PAR.R&SYSNDX EQU   *                +\n         LA    RE,4(,RE)             +ADJUST ASVT ADDRESS\n         BCT   R0,&PAR.L&SYSNDX      +REPEAT\n         XR    R1,R1                 +INDICATE NOT FOUND\n&PAR.F&SYSNDX EQU   *                +\n         LM    RE,R0,&ERS            +RESTORE WORK REGS\n         POP   USING                 +RESTORE\n         MEND                               +\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEECRDCM": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x15\\x0f\\x00\\x95\\x15\\x0f\\x15\\x05\\x00\\x04\\x00\\x04\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-05-30T00:00:00", "modifydate": "1995-05-30T15:05:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "SYS0007"}, "text": "         MACRO\n         IEECRDCM\nDCMADTRN DS    A                       .PAGEABLE DCM\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KOCASRPT": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92 o\\x00\\x92 o\\x153\\x03f\\x03f\\x00\\x00\\xc3\\xf2\\xf3\\xf0\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-24T00:00:00", "modifydate": "1992-07-24T15:33:00", "lines": 870, "newlines": 870, "modlines": 0, "user": "C2300"}, "text": "         TITLE 'SMFRPT - OMEGAMON SMF SECURITY AUDIT POST-PROCESSOR ANDX\n                REPORT GENERATOR'\n***********************************************************************\n*                                                                     *\n*                         S M F R P T                                 *\n*                                                                     *\n* ******************************************************************* *\n* *                                                                 * *\n* *  N   =====> PLEASE NOTE THAT THIS CODE IS *NOT* SUPPORTED BY    * *\n* *      =====> CANDLE.  IT IS MERELY AN EXAMPLE OF A WORKING SMF   * *\n* *  O   =====> POST-PROCESSOR AND REPORT GENERATOR WHICH MAY BE    * *\n* *      =====> USED IN CONJUNCTION WITH OMEGAMON'S SMF SECURITY    * *\n* *  T   =====> AUDIT FEATURE.  PLEASE FEEL FREE TO MODIFY OR       * *\n* *      =====> EMBELLISH THIS PROGRAM AS YOU SEE FIT TO SUIT       * *\n* *  E   =====> THE NEEDS OF YOUR INSTALLATION.                     * *\n* *                                                                 * *\n* ******************************************************************* *\n*                                                                     *\n*                                                                     *\n*        PROGRAM NAME:                                                *\n*                                                                     *\n*        SMFRPT.                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        FUNCTION ABSTRACT:                                           *\n*                                                                     *\n*        THIS PROGRAM WILL FORMAT A REPORT BASED ON SMF DATA DERIVED  *\n*        FROM THE OMEGAMON/BASE AUDIT PROCESS.                        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        CALLING CONVENTIONS:                                         *\n*                                                                     *\n*        //SMFRPT EXEC PGM=SMFRPT                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        INPUT (SYSIN):                                               *\n*                                                                     *\n*        OMEGAMON/BASE SECURITY AUDIT SMF RECORDS, SORTED AND         *\n*        EXTRACTED VIA IFASMFDP.  DCB ATTRIBUTES ARE RECFM=VBS,       *\n*        LRECL=32767,BLKSIZE=4096.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        OUTPUT (SYSPRINT):                                           *\n*                                                                     *\n*        FORMATTED OMEGAMON SECURITY AUDIT REPORT.  DCB ATTRIBUTES    *\n*        ARE RECFM=FBA,LRECL=133,BLKSIZE=25*133.                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        ATTRIBUTES:                                                  *\n*                                                                     *\n*        REFRESHABLE, REENTRANT, REUSABLE, RMODE(24), AMODE(24)       *\n*        (MAY BE PLACED IN PLPA, IF DESIRED).                         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        USER ABENDS:                                                 *\n*                                                                     *\n*        1137 - INPUT FILE FAILED TO OPEN.                            *\n*        1237 - OUTPUT FILE FAILED TO OPEN.                           *\n*        4000 - INTERNAL LOGIC ERROR (SHOULD NEVER OCCUR).            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES CALLED:                                          *\n*                                                                     *\n*        NONE.                                                        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        MACROS USED:                                                 *\n*                                                                     *\n*        (IBM)                                                        *\n*        ABEND, CLOSE, DCB, DCBD, FREEMAIN, GET, GETMAIN, IFASMFR,    *\n*        IHAPIE, OPEN, PUT, RETURN, SAVE, SPIE, TIME.                 *\n*                                                                     *\n*        (CANDLE)                                                     *\n*        $AUDIT, $CANHDR.                                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        RETURN CODES:                                                *\n*                                                                     *\n*        0 - SUCCESSFUL COMPLETION.                                   *\n*        4 - NO ELIGIBLE SMF RECORDS WERE PROCESSED.                  *\n*        8 - AT LEAST ONE RECORD IN ERROR WAS PROCESSED.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*                                                                     *\n*        R0  - USED TO PASS TIME TO FORMATTING SUBROUTINE.            *\n*        R1  - USED TO PASS DATE TO FORMATTING SUBROUTINE.            *\n*        R2  - WORK.                                                  *\n*        R3  - BASE FOR IBM SMF HEADER (IFASMFR).                     *\n*        R4  - BASE FOR CANDLE COMMON HEADER ($CANHDR)                *\n*              (NOTE: ONLY SELECTED $CANHDR FIELDS NECESSARY TO       *\n*              IDENTIFY OMEGAMON/BASE SECURITY AUDIT SMF RECORDS      *\n*              WILL BE PRESENT).                                      *\n*        R5  - BASE FOR SECURITY AUDIT RECORD ($AUDIT).               *\n*        R6  - WORK.                                                  *\n*        R7  - WORK.                                                  *\n*        R8  - WORK/SUBROUTINE LINKAGE.                               *\n*        R9  - WORK/SUBROUTINE LINKAGE.                               *\n*        R10 - ADDR OF INPUT DCB.                                     *\n*        R11 - ADDR OF OUTPUT DCB.                                    *\n*        R12 - CSECT BASE REGISTER.                                   *\n*        R13 - ADDR OF GETMAINED WORK AREA (EXPLICIT BASE).           *\n*        R14 - RETURN ADDRESS.                                        *\n*        R15 - ENTRY POINT ADDRESS.                                   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*| NO. |             CHANGE DESCRIPTION             |   DATE   | WHO |*\n*|     |                                            |          |     |*\n*| @00 | INITIAL CODING                             | 04/22/88 | ASG |*\n*| @01 | STANDARDIZE $CANHDR FIELD ASSIGNMENTS      | 07/08/88 | ASG |*\n*| @02 | ENHANCE RECORD VALIDATION PROCESS          | 08/22/88 | ASG |*\n*| @03 | FIX MINOR FORMATTING PROBLEM               | 01/27/89 | ASG |*\n*|     |                                            |          |     |*\n***********************************************************************\n         SPACE 3\n*\n*        PERFORM HOUSEKEEPING REQUIRED FOR A REENTRANT ROUTINE.\n*\nOMSMFRPT CSECT\n         SAVE  (14,12),,*                SAVE CALLER'S REGISTERS\n         LR    R12,R15                   GET ENTRY POINT ADDRESS\n         USING OMSMFRPT,R12              ESTABLISH ADDRESSABILITY\n         B     P000050                   BRANCH AROUND EYE-CATCHER\n         DC    C'****&SYSDATE****&SYSTIME****'\n         SPACE 3\nP000050  DS    0H\n         GETMAIN R,LV=WORKSZ             GETMAIN A WORK AREA\n         ST    R1,8(R13)                 ESTABLISH BACKWARD CHAIN\n         LR    R2,R1                     SAVE WORK AREA ADDR\n         LA    R3,WORKSZ                 SIZE OF WORK AREA\n         LA    R6,X                      ADDR OF WORK AREA TEMPLATE\n         LA    R7,WORKSZ                 SIZE OF WORK AREA\n         MVCL  R2,R6                     INITIALIZE WORK AREA\n         ST    R13,4(R1)                 ESTABLISH FORWARD CHAIN\n         LR    R13,R1                    POINT R13 TO MY SAVE AREA\n         SPACE 3\n*\n*        OPEN THE INPUT AND OUTPUT FILES.\n*\nP000100  DS    0H\n         LA    R10,INDCB-X(,R13)         ADDR OF INPUT FILE\n         LA    R11,OUTDCB-X(,R13)        ADDR OF OUTPUT FILE\n         OPEN  ((R10),INPUT,(R11),OUTPUT),MF=(E,OPENFI-X(,R13))\n         TM    DCBOFLGS-IHADCB(R10),DCBOFOPN  WAS FILE OPENED?\n         BO    P000200                   +YES, SKIP NEXT SECTION\n         ABEND 1137,,,,REASON=0          ELSE, ABEND U1137\n         SPACE 3\nP000200  DS    0H\n         TM    DCBOFLGS-IHADCB(R11),DCBOFOPN  WAS FILE OPENED?\n         BO    P000250                   +YES, SKIP NEXT SECTION\n         ABEND 1237,,,,REASON=0          ELSE, ABEND U1237\n         SPACE 3\n*\n*        OBTAIN THE CURRENT DATE AND TIME VIA THE TIME MACRO.\n*\nP000250  DS    0H\n         TIME  DEC                       GET CURRENT TIME AND DATE\n         BAL   R9,P001400                PERFORM CONVERSION ROUTINE\n         MVC   TIME-X(8,R13),HHMMSS-X(R13)  MOVE TIME TO HEADING\n         MVC   DATE-X(8,R13),GREGDATE-X(R13)  MOVE DATE TO HEADING\n         SPACE 3\n*\n*        THIS SECTION CONSTITUTES THE MAIN PROCESSING LOOP OF THE\n*        ROUTINE.\n*\nP000300  DS    0H\n         GET   (R10)                     GET A RECORD - QSAM (GL)\n         LR    R3,R1                     R3 POINTS TO THE RECORD\n         USING SMFRCD0,R3                ESTABLISH ADDRESSABILITY\n         CLI   SMF0RTY,X'02'             SMF DUMP HEADER RECORD?\n         BE    P000300                   +YES, GET ANOTHER RECORD\n         CLI   SMF0RTY,X'03'             SMF DUMP TRAILER RECORD?\n         BE    P000300                   +YES, GET ANOTHER RECORD\n         L     R1,TOTCNT-X(,R13)         GET TOTAL RECORD COUNT     @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,TOTCNT-X(,R13)         SAVE TOTAL RECORD COUNT    @02\n         LA    R4,SMF0JWT+2              BUMP OVER IBM SMF HEADER\n         DROP  R3                        DROP ADDRESSABILITY\n         USING C#RDW,R4                  ESTABLISH ADDRESSABILITY   @01\n         CLC   C#PRDFM1(2),=AL2(C@PFC1CM)  GOOD PROD FAMILY CODE?   @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDID1(2),=AL2(C@PID1OB)  GOOD PROD ID CODE?       @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDFM2(2),=AL2(C@PFC2CM)  GOOD PROD FAMILY?        @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDID2(2),=AL2(C@PID2OB)  GOOD PROD ID?            @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         LA    R5,C#CMNLEN(,R4)          BUMP OVER CANDLE COMMON HEADER\n         DROP  R4                        DROP ADDRESSABILITY\n         USING A#AUDIT,R5                ESTABLISH ADDRESSABILITY\n         CLI   A#TYPE,A@COMMND           COMMAND-TYPE RECORD?\n         BNE   P003000                   +NO, PROCESS ERROR\n         MVC   JOBNAME-X(8,R13),A#CNJOB  MOVE JOB NAME\n         MVC   PRSTPNM-X(8,R13),A#CSTEP  MOVE PROCSTEP NAME\n         MVC   STPNM-X(8,R13),A#CSTEP+8  MOVE STEP NAME\n         MVC   USERID-X(8,R13),A#USERID  MOVE USERID\n         MVC   UNIT-X(8,R13),A#LUNAME    MOVE UNIT\n         MVC   SYSID-X(4,R13),A#SYSID    MOVE SYSID\n         MVC   JOBID-X(8,R13),A#JOBID    MOVE JOBID\n         SPACE 3                                                    @02\nP000350  DS    0H                                                   @02\n         OI    MISCSW-X(R13),SPIEACT     INDICATE SPIE ACTIVE       @02\n         SPIE  P003000,(7),MF=(E,STOP0C7-X(R13))  ESTABLISH SPIE    @02\n         ICM   R0,B'1111',A#TIME         GET TIME\n         ICM   R1,B'1111',A#DATE         GET DATE\n         BAL   R9,P001400                PERFORM CONVERSION ROUTINE\n         SPACE 3                                                    @02\nP000360  DS    0H                                                   @02\n         SPIE  0,MF=(E,STOP0C7-X(R13))   CANCEL SPIE                @02\n         NI    MISCSW-X(R13),255-SPIEACT  RESET SWITCH              @02\n         SPACE 3                                                    @02\nP000365  DS    0H                                                   @02\n         TM    MISCSW-X(R13),ERROR       DID AN ERROR OCCURR?       @02\n         BNO   P000370                   +NO, CONTINUE PROCESSING   @02\n         NI    MISCSW-X(R13),255-ERROR   ELSE, RESET ERROR SWITCH   @02\n         B     P000300                   ...AND, GET ANOTHER RECORD @02\n         SPACE 3                                                    @02\nP000370  DS    0H                                                   @02\n         MVC   REPTIME-X(8,R13),HHMMSS-X(R13)  MOVE TIME INTO DETAIL\n         MVC   REPDATE-X(8,R13),GREGDATE-X(R13)  MOVE DATE INTO DETAIL\n         LA    R7,COMMTBL                POINT TO COMMAND TYPE TABLE\n         LA    R8,CTBLSZ                 # OF ENTRIES IN TABLE\n         SPACE 3\n*\n*        COMMAND TYPE TABLE LOOK-UP LOOP.\n*\nP000400  DS    0H\n         CLC   A#STYPE(1),0(R7)          DO WE HAVE A MATCH?\n         BE    P000500                   +YES, SKIP NEXT SECTION\n         LA    R7,16(,R7)                ELSE, BUMP POINTER\n         BCT   R8,P000400                LOOP THROUGH TABLE\n         MVC   CMTYPE-X(15,R13),=CL15'*** UNKNOWN ***'  NOT FOUND\n         B     P000600                   SKIP NEXT SECTION\n         SPACE 3\nP000500  DS    0H\n         MVC   CMTYPE-X(15,R13),1(R7)    MOVE COMM TYPE INTO DETAIL\n         SPACE 3\nP000600  DS    0H\n         LA    R7,DISPTBL                POINT TO DISPOSITION TABLE\n         LA    R8,DTBLSZ                 # OF ENTRIES IN TABLE\n         SPACE 3\n*\n*        DISPOSITION TABLE LOOK-UP LOOP.\n*\nP000700  DS    0H\n         CLC   A#DISP(1),0(R7)           DO WE HAVE A MATCH?\n         BE    P000800                   +YES, SKIP NEXT SECTION\n         LA    R7,24(,R7)                ELSE, BUMP POINTER\n         BCT   R8,P000700                LOOP THROUGH TABLE\n         MVC   DISP-X(23,R13),=CL23'    *** UNKNOWN ***    '  NOT FOUND\n         B     P000900                   SKIP NEXT SECTION\n         SPACE 3\nP000800  DS    0H\n         MVC   DISP-X(23,R13),1(R7)      MOVE DISP INTO DETAIL\n         SPACE 3\n*\n*        PROCESS COMMAND INFORMATION.\n*\nP000900  DS    0H\n         MVI   COMMAND-X(R13),C' '       USING BLANKS...\n         MVC   COMMAND+1-X(8,R13),COMMAND-X(R13)  ...CLEAR THE FIELD\n         MVI   ASSOCMAJ-X(R13),C' '      USING BLANKS...\n         MVC   ASSOCMAJ+1-X(15,R13),ASSOCMAJ-X(R13)  ...CLEAR THE FIELD\n         CLI   A#STYPE,A@MINCOM          IS THIS A MINOR?\n         BE    P000925                   +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          IS THIS A GENERALIZED MINOR?\n         BNE   P000975                   +NO, SKIP NEXT SECTION\n         SPACE 3\nP000925  DS    0H\n         MVC   COMMAND+1-X(4,R13),A#COMMND+4  MOVE MINOR\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000985                   +YES, SKIP NEXT SECTION\n         MVC   MAJCMD-X(4,R13),A#COMMND  MOVE ASSOCIATED MAJOR\n         MVC   ASSOCMAJ-X(16,R13),MAJTAG-X(R13)  MOVE MAJOR ADDENDUM\n         MVI   AUXBUFF-X(R13),C' '       USING BLANKS...\n         MVC   AUXBUFF+1-X(79,R13),AUXBUFF-X(R13)  ...CLEAR THE FIELD\n         LH    R3,A#BUFLN2               LENGTH OF AUX BUFFER\n         CH    R3,=H'80'                 IS LENGHTH LE 80?\n         BNH   P000950                   +YES, SKIP NEXT SECTION\n         LH    R3,=H'80'                 ELSE, SET LENGTH AT 80\n         SPACE 3\nP000950  DS    0H\n         BCTR  R3,0                      DECREMENT FOR EXECUTE\n         EX    R3,MVCBUFAU               MOVE THE AUX BUFFER\n*\n*        IF YOUR PRINTER CANNOT HANDLE LOWER-CASE CHARACTERS, UNCOMMENT\n*        THE FOLLOWING COMMAND IN ORDER TO FORCE ALL UPPER-CASE\n*        CHARACTERS.\n*\n*        EX    R3,OCBUFAU                FORCE UPPER-CASE CHARACTERS\n         B     P000985                   SKIP NEXT SECTION\n         SPACE 3\nP000975  DS    0H\n         MVC   COMMAND+1-X(8,R13),A#COMMND  MOVE COMMAND TO DETAIL\n         CLI   A#STYPE,A@ILCCOM          INFO-LINE COMMAND?\n         BNE   P000985                   +NO, SKIP NEXT SECTION\n         MVI   COMMAND-X(R13),C'/'       ELSE, STUFF A SLASH\n         TR    A#BUFPR(16),TRTABLE       AND, ELIMINATE UNDERSCORES\n         SPACE 3\nP000985  DS    0H\n         MVI   PRMBUFF-X(R13),C' '       USING BLANKS...\n         MVC   PRMBUFF+1-X(79,R13),PRMBUFF-X(R13)  ...CLEAR THE FIELD\n         LH    R3,A#BUFLN1               LENGTH OF PRM BUFFER\n         BCTR  R3,0                      DECREMENT FOR EXECUTE\n         EX    R3,MVCBUFPR               MOVE THE PRM BUFFER\n         L     R1,GOODCNT-X(,R13)        GET GOOD RECORD COUNT      @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,GOODCNT-X(,R13)        STORE GOOD RECORD COUNT    @02\n         SPACE 3\n*\n*        PREPARE THE DATA FOR THE FORMATTING AND OUTPUT PROCESSING\n*        SUBROUTINES.\n*\nP000990  DS    0H\n         CLI   A#STYPE,A@MINCOM          MINOR COMMAND?\n         BE    P000990A                  +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          GENERALIZED MINOR COMMAND?\n         BNE   P000991                   +NO, SKIP NEXT SECTION\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000991                   +YES, SKIP NEXT SECTION\n         SPACE 3\nP000990A DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'9'  ENOUGH ROOM LEFT ON PAGE?\n         B     P000992                   MERGE\n         SPACE 3\nP000991  DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'8'  ENOUGH ROOM LEFT ON PAGE?\n         SPACE 3\nP000992  DS    0H\n         BNL   P000993                   +YES, SKIP NEXT SECTION\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQUIRED\n         SPACE 3\nP000993  DS    0H\n         LA    R8,LINE1-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE2-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE3-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,BLANKS-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         CLI   A#STYPE,A@MINCOM          MINOR COMMAND?\n         BE    P000994                   +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          GENERALIZED MINOR COMMAND?\n         BNE   P000995                   +NO, SKIP NEXT SECTION\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000995                   +YES, SKIP NEXT SECTION\n         SPACE 3\nP000994  DS    0H\n         LA    R8,LINE4A-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         SPACE 3\nP000995  DS    0H\n         LA    R8,LINE4B-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE5-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         B     P000300                   GET ANOTHER RECORD!\n         SPACE 3\n*\n*        FORMATTING AND OUTPUT PROCESSING SUBROUTINES.\n*\nP001010  DS    0H\n         TM    MISCSW-X(R13),PGEJECT     PAGE EJECT INDICATED?\n         BNO   P001015                   +NO, SKIP NEXT SECTION\n         NI    MISCSW-X(R13),255-PGEJECT  TURN OFF PAGE EJECT SWITCH\n         AP    PGCOUNT-X(8,R13),=PL8'1'  INCREMENT PAGE COUNT\n*\n*        TO CHANGE THE LINE COUNT, PLACE THE VALUE OF THE DESIRED\n*        LINE COUNT IN THE LITERAL IN THE FOLLOWING INSTRUCTION.\n*\n         ZAP   LNCOUNT-X(2,R13),=PL2'55'  <-- SPECIFY LINE COUNT\n         MVC   PAGE-X(8,R13),=XL8'4020202020202020'  SET PATTERN\n         ED    PAGE-X(8,R13),PGCOUNT+4-X(R13)  FORMAT PAGE COUNT\n         LA    R6,HEADING-X(,R13)        POINT TO OUTPUT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         LA    R6,BLANKS-X(,R13)         POINT TO OUTPUT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         SPACE 3\nP001015  DS    0H\n         LR    R6,R8                     POINT TO REPORT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         BR    R9                        RETURN\n         SPACE 3\nP001200  DS    0H\n         CLI   0(R6),C'-'                SPACE 3 LINES?\n         BNE   P001210                   +NO, SKIP NEXT SECTION\n         SP    LNCOUNT-X(2,R13),=PL2'3'  ELSE, DECREMENT LINE COUNT 3\n         B     P001220                   MERGE\n         SPACE 3\nP001210  DS    0H\n         SP    LNCOUNT-X(2,R13),=PL2'1'  ELSE, DECREMENT LINE COUNT 1\n         SPACE 3\nP001220  DS    0H\n         PUT   (R11),(R6)                PUT A RECORD - QSAM (PM)\n         BR    R7                        RETURN\n         SPACE 3\n*\n*        TIME AND DATE CONVERSION SUBROUTINE.  TIME MUST BE IN\n*        REGISTER 0 (HHMMSSTH) AND DATE MUST BE IN REGISTER 1\n*        (00YYDDDF).\n*\nP001400  DS    0H\n         SRL   R0,4                      TIME - 0HHMMSST\n         O     R0,=X'0000000F'           TIME - 0HHMMSSF\n         STCM  R0,B'1111',TIMEWORK+6-X(R13)  STORE IN WORK AREA\n         UNPK  TIMEWORK-X(6,R13),TIMEWORK+6-X(4,R13)  UNPACK IT!\n         MVC   HH-X(2,R13),TIMEWORK-X(R13)  MOVE HOURS\n         MVC   MM-X(2,R13),TIMEWORK+2-X(R13)  MOVE MINUTES\n         MVC   SS-X(2,R13),TIMEWORK+4-X(R13)  MOVE SECONDS\n         LR    R7,R1                     SAVE JULIAN DATE\n         SRL   R7,12                     DATE - 00000YYD\n         O     R7,=X'0000000F'           DATE - 00000YYF\n         STCM  R7,B'0011',DATEWORK+6-X(R13)  STORE YEAR PORTION\n         UNPK  YR-X(2,R13),DATEWORK+6-X(2,R13)  UNPACK IT!\n         LA    R2,TABLE1                 ASSUME NOT A LEAP YEAR\n         DP    DATEWORK+5-X(3,R13),=PL1'4'  DIVIDE YEAR BY 4\n         CP    DATEWORK+7-X(1,R13),=PL1'0'  ZERO REMAINDER?\n         BNE   P001500                   +NO, NOT A LEAP YEAR\n         LA    R2,TABLE2                 ELSE, USE LEAP YEAR TABLE\n         SPACE 3\nP001500  DS    0H\n         N     R1,=X'0000FFFF'           ZERO YEAR PORTION OF DATE\n         SPACE 3\nP001600  DS    0H\n         CLM   R1,B'0011',0(R2)          COMPARE JULIAN DATE IN TABLE\n         BH    P001700                   BRANCH IF HIGH\n         S     R2,=F'4'                  ELSE, POINT TO PREVIOUS ENTRY\n         MVC   MO-X(2,R13),2(R2)         GET MONTH\n         XC    DATEWORK-X(8,R13),DATEWORK-X(R13)  CLEAR WORK AREA\n         STCM  R1,B'0011',DATEWORK-X(R13)  STORE JULIAN DATE\n         SP    DATEWORK-X(2,R13),0(2,R2)  SUBTRACT FOR DATE OF MONTH\n         OI    DATEWORK+1-X(R13),X'0F'   FIX THE SIGN\n         UNPK  DA-X(2,R13),DATEWORK-X(2,R13)  UNPACK IT!\n         B     P001800                   ALL DONE, PREPARE TO EXIT\n         SPACE 3\nP001700  DS    0H\n         LA    R2,4(,R2)                 BUMP TABLE POINTER\n         B     P001600                   KEEP CHECKING\n         SPACE 3\nP001800  DS    0H\n         BR    R9                        RETURN\n         SPACE 3\n*\n*        TERMINATION, VALIDATION, AND SUMMARIZATION.\n*\nP002000  DS    0H\n         XR    R3,R3                     CLEAR R3 TO ZEROS          @02\n         CLC   TOTCNT-X(4,R13),=F'0'     WERE ANY RCDS PROCESSED?   @02\n         BNE   P002010                   +YES, SKIP NEXT SECTION    @02\n         LA    R3,4                      ELSE, SET RC=4             @02\n         SPACE 3                                                    @02\nP002010  DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'5'  ENOUGH ROOM LEFT ON PAGE?  @02\n         BNL   P002020                   +YES, SKIP NEXT SECTION    @02\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQ'D  @02\n         SPACE 3                                                    @02\nP002020  DS    0H                                                   @02\n         L     R6,GOODCNT-X(,R13)        GET GOOD COUNT             @02\n         L     R7,BADCNT-X(,R13)         GET BAD COUNT              @02\n         ALR   R6,R7                     GET TOTAL COUNT            @02\n         CL    R6,TOTCNT-X(,R13)         DO TOTALS AGREE?           @02\n         BE    P002025                   +THEY DARN WELL BETTER!    @02\n         ABEND 4000,,,,REASON=0          ELSE, ADIOS...             @02\n         SPACE 3                                                    @02\nP002025  DS    0H                                                   @02\n         L     R6,GOODCNT-X(,R13)        GET GOOD COUNT             @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  GOODNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER  @02\n         LA    R8,TERMLN1-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         ICM   R6,B'1111',BADCNT-X(R13)  GET BAD COUNT              @02\n         BZ    P002027                   ZERO, SKIP RC SETTING      @02\n         LA    R3,8                      SET RETURN CODE            @02\n         SPACE 3                                                    @02\nP002027  DS    0H                                                   @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  BADNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER   @02\n         LA    R8,TERMLN2-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         L     R6,TOTCNT-X(,R13)         GET TOTAL COUNT            @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  TOTNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER   @02\n         LA    R8,TERMLN3-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         SPACE 3                                                    @02\nP002030  DS    0H                                                   @02\n         CLOSE ((R10),,(R11)),MF=(E,CLOSFI-X(,R13))  CLOSE FILES\n         L     R8,4(R13)                 SAVE ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKSZ,A=(R13)    FREE THE WORK AREA\n         LR    R13,R8                    ADDR CALLER'S SAVE AREA\n         LR    R15,R3                    LOAD RETURN CODE           @02\n         RETURN (14,12),,RC=(15)         RESTORE REGS AND RETURN\n         SPACE 3\n*                                                                   @02\n*        ERROR ROUITNE.                                             @02\n*                                                                   @02\nP003000  DS    0H                                                   @02\n         TM    MISCSW-X(R13),SPIEACT     ENTERED BECAUSE OF 0C7?    @02\n         BO    P003005                   +YES, SKIP NEXT SECTION    @02\n         LA    R14,P000365               RETURN POINT (NO SPIE)     @02\n         B     P003007                   MERGE                      @02\n         SPACE 3                                                    @02\nP003005  DS    0H                                                   @02\n         LR    R2,R1                     SAVE ADDR OF PIE           @02\n         USING PIE,R2                    ESTABLISH ADDRESSABILITY   @02\n         SPACE 3                                                    @02\nP003007  DS    0H                                                   @02\n         ST    R14,SPIESAVE-X(,R13)      SAVE REGISTER 14           @02\n         OI    MISCSW-X(R13),ERROR       INDICATE ERROR DETECTED    @02\n         CP    LNCOUNT-X(2,R13),=PL2'6'  ENOUGH ROOM LEFT ON PAGE?  @02\n         BNL   P003010                   +YES, SKIP NEXT SECTION    @02\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQ'D  @02\n         SPACE 3                                                    @02\nP003010  DS    0H                                                   @02\n         L     R1,TOTCNT-X(,R13)         GET RUNNING TOTAL COUNT    @02\n         CVD   R1,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  RECNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPACK THE NUMBER @02\n         LA    R8,ERRORLN1-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN2-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN3-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN4-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         L     R1,BADCNT-X(,R13)         GET BAD RECORD COUNT       @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,BADCNT-X(,R13)         SAVE BAD RECORD COUNT      @02\n         TM    MISCSW-X(R13),SPIEACT     SPIE ACTIVE?               @02\n         BNO   P003020                   +NO, SKIP NEXT SECTION     @02\n         MVC   PIEPSW+5(3),=AL3(P000360)  RETURN POINT IN MAINLINE  @02\n         DROP  R2                        DROP ADDRESSABILITY        @02\n         SPACE 3                                                    @02\nP003020  DS    0H                                                   @02\n         L     R14,SPIESAVE-X(,R13)      RESTORE REGSITER 14        @02\n         BR    R14                       RETURN                     @02\n         SPACE 3                                                    @02\n*\n*        EXECUTED INSTRUCTIONS.\n*\nMVCBUFAU MVC   AUXBUFF-X(*-*,R13),A#BUFAU  MOVE AUX BUFFER\nMVCBUFPR MVC   PRMBUFF-X(*-*,R13),A#BUFPR  MOVE PRM BUFFER\n         DROP  R5                        DROP ADDRESSABILITY\nOCBUFAU  OC    AUXBUFF-X(*-*,R13),=80X'40' FORCE UPPER-CASE AUX BUFFER\n         SPACE 3\n*\n*        TABLE OF COMMAND TYPES.\n*\nCOMMTBL  DS    0F\n         DC    AL1(A@IMMCOM),CL15'IMMEDIATE      '\n         DC    AL1(A@MAJCOM),CL15'MAJOR          '\n         DC    AL1(A@MINCOM),CL15'MINOR          '\n         DC    AL1(A@GENMIN),CL15'GENERAL MINOR  '\n         DC    AL1(A@ILCCOM),CL15'INFO-LINE      '\n         DC    AL1(A@SUPCOM),CL15'SUPERSEDED     '\nCTBLSZ   EQU   (*-COMMTBL)/16\n         SPACE 3\n*\n*        TABLE OF COMMAND DISPOSITIONS.\n*\nDISPTBL  DS    0F\n         DC    AL1(A@ALLOW),CL23'ACCESS ALLOWED         '\n         DC    AL1(A@DISALW),CL23'ACCESS DENIED          '\n         DC    AL1(A@ASFTSF),CL23'SPECIAL ACCESS ALLOWED '\nDTBLSZ   EQU   (*-DISPTBL)/24\n         SPACE 3\n*\n*        NON-LEAP YEAR TABLE.\n*\nTABLE1   DC    XL2'000F',CL2'01'         JAN\n         DC    XL2'031F',CL2'02'         FEB\n         DC    XL2'059F',CL2'03'         MAR\n         DC    XL2'090F',CL2'04'         APR\n         DC    XL2'120F',CL2'05'         MAY\n         DC    XL2'151F',CL2'06'         JUN\n         DC    XL2'181F',CL2'07'         JUL\n         DC    XL2'212F',CL2'08'         AUG\n         DC    XL2'243F',CL2'09'         SEP\n         DC    XL2'273F',CL2'10'         OCT\n         DC    XL2'304F',CL2'11'         NOV\n         DC    XL2'334F',CL2'12'         DEC\n         DC    XL2'365F'\n         SPACE 3\n*\n*        LEAP YEAR TABLE.\n*\nTABLE2   DC    XL2'000F',CL2'01'         JAN\n         DC    XL2'031F',CL2'02'         FEB\n         DC    XL2'060F',CL2'03'         MAR\n         DC    XL2'091F',CL2'04'         APR\n         DC    XL2'121F',CL2'05'         MAY\n         DC    XL2'152F',CL2'06'         JUN\n         DC    XL2'182F',CL2'07'         JUL\n         DC    XL2'213F',CL2'08'         AUG\n         DC    XL2'244F',CL2'09'         SEP\n         DC    XL2'274F',CL2'10'         OCT\n         DC    XL2'305F',CL2'11'         NOV\n         DC    XL2'335F',CL2'12'         DEC\n         DC    XL2'366F'\n         SPACE 3\n*\n*        TRANSLATE TABLE FOR TRANSLATING UNDERSCORES TO BLANKS.\n*\nTRTABLE  DS    0F\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'808182838485868788898A8B8C8D8E8F'\n         DC    XL16'909192939495969798999A9B9C9D9E9F'\n         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         ORG   TRTABLE+C'_'\n         DC    C' '\n         ORG   ,\n         SPACE 3\n*\n*        LITERAL POOL.\n*\n         LTORG ,\n*\n*        GETMAINED WORK AREA TEMPLATE BEGINS HERE!\n*\nX        DS    0D\nSAVEAREA DS    18F\n*\nHEADING  DS    0CL133\n         DC    CL1'1'\nDATE     DS    CL8\n         DC    CL4' '\nTIME     DS    CL8\n         DC    CL23' '\n         DC    CL40'O M E G A M O N  SECURITY  AUDIT  REPORT'\n         DC    CL36' '\n         DC    CL5'PAGE '\nPAGE     DS    CL8\n*\nLINE1    DS    0CL133\n         DC    CL1'-'\n         DC    CL13' '\n         DC    CL6'JOB:  '\nJOBNAME  DS    CL8\n         DC    CL3'  ('\nJOBID    DS    CL8\n         DC    CL5')    '\nPRSTPNM  DS    CL8\n         DC    CL4' '\nSTPNM    DS    CL8\n         DC    CL6' '\n         DC    CL9'SYSTEM:  '\nSYSID    DS    CL4\n         DC    CL50' '\n*\nLINE2    DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL7'DATE:  '\nREPDATE  DS    CL8\n         DC    CL4' '\n         DC    CL7'TIME:  '\nREPTIME  DS    CL8\n         DC    CL4' '\n         DC    CL9'USERID:  '\nUSERID   DS    CL7\n         DC    CL4' '\n         DC    CL7'UNIT:  '\nUNIT     DS    CL8\n         DC    CL46' '\n*\nLINE3    DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL10'COMMAND:  '\nCOMMAND  DS    CL9\nASSOCMAJ DS    CL16\n         DC    CL6' '\n         DC    CL7'TYPE:  '\nCMTYPE   DS    CL15                                                 @03\n         DC    CL6' '\n         DC    CL14'DISPOSITION:  '\nDISP     DS    CL7\n         DC    CL29' '                                              @03\n*\nLINE4A   DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL31'COMMAND OUTPUT IMAGE (MAJOR)>  '\nAUXBUFF  DS    CL80\n         DC    CL8' '\n*\nLINE4B   DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL31'COMMAND INPUT IMAGE -------->  '\nPRMBUFF  DS    CL80\n         DC    CL8' '\n*\nLINE5    DS    0CL133\n         DC    CL1' '\n         DC    CL44' '\n         DC    CL10'....+....1'\n         DC    CL10'....+....2'\n         DC    CL10'....+....3'\n         DC    CL10'....+....4'\n         DC    CL10'....+....5'\n         DC    CL10'....+....6'\n         DC    CL10'....+....7'\n         DC    CL10'....+....8'\n         DC    CL8' '\n*\nBLANKS   DS    0CL133\n         DC    CL1' '\n         DC    CL132' '\n*\nERRORLN1 DS    0CL133                                               @02\n         DC    CL1'-'                                               @02\n         DC    CL13' '                                              @02\n         DC    CL16'*** WARNING *** '                               @02\n         DC    CL61'AN ERROR WAS DETECTED DURING THE PROCESSING OF RECOX\n               RD NUMBER '                                          @02\nRECNUM   DS    CL7                                                  @02\n         DC    CL3'.  '                                             @02\n         DC    CL32'POSSIBLE CAUSES ARE AS FOLLOWS: '               @02\n*\nERRORLN2 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL89'1)  INCORRECT SMF NUMBER SPECIFICATION IN EXTRACTIOX\n               N STEP OR IN OMEGAMON SECURITY UPDATE.'              @02\n         DC    CL14' '                                              @02\n*\nERRORLN3 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL76'2)  USE OF OMEGAMON''S SECURITY AUDIT SMF NUMBER BYX\n                ANOTHER APPLICATION.'                               @02\n         DC    CL27' '                                              @02\n*\nERRORLN4 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL43'3)  CORRUPTION OF THE SYSTEM SMF DATA SETS.'    @02\n         DC    CL60' '                                              @02\n*\nTERMLN1  DS    0CL133                                               @02\n         DC    CL1'-'                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'RECORDS PROCESSED SUCCESSFULLY:  '              @02\nGOODNUM  DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nTERMLN2  DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'RECORDS PROCESSED IN ERROR:      '              @02\nBADNUM   DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nTERMLN3  DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'TOTAL RECORDS PROCESSED:         '              @02\nTOTNUM   DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nMAJTAG   DS    0CL16\n         DC    CL11'  (MAJOR:  '\nMAJCMD   DS    CL4\n         DC    CL1')'\nLNCOUNT  DC    PL2'0'\nPGCOUNT  DC    PL8'0'\nPATTERN  DC    XL6'402020202120'\nTIMEWORK DS    XL10\nDATEWORK DS    D\nGREGDATE DS    0CL8\nMO       DS    CL2\n         DC    CL1'/'\nDA       DS    CL2\n         DC    CL1'/'\nYR       DS    CL2\nHHMMSS   DS    0CL8\nHH       DS    CL2\n         DC    CL1':'\nMM       DS    CL2\n         DC    CL1':'\nSS       DS    CL2\nMISCSW   DC    X'00'\nPGEJECT  EQU   X'80'\nERROR    EQU   X'40'                                                @02\nSPIEACT  EQU   X'20'                                                @02\nSPIESAVE DS    F                                                    @02\nTOTCNT   DC    F'0'                                                 @02\nGOODCNT  DC    F'0'                                                 @02\nBADCNT   DC    F'0'                                                 @02\nDOUBLE   DS    D                                                    @02\nOPENFI   OPEN  (0,,0),MF=L\nCLOSFI   CLOSE (0,,0),MF=L\nSTOP0C7  SPIE  ,,MF=L                                               @02\n*\n*        INPUT FILE DCB.\n*\nINDCB    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,RECFM=VBS,               X\n               LRECL=32767,BLKSIZE=4096,EODAD=P002000,BFTEK=A\n*\n*        OUTPUT FILE DCB.\n*\nOUTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,            X\n               LRECL=133,BLKSIZE=25*133\n*\n*        GETMAINED WORK AREA TEMPLATE ENDS HERE!\n*\nWORKSZ   EQU   *-X\n         SPACE 3\n*\n*        MAPPING MACROS AND DSECTS.\n*\n         DCBD  DEVD=DA,DSORG=PS          DCB MAPPING MACRO\n         DSECT\n         IFASMFR 0                       SMF COMMON HEADER\n         IHAPIE ,                        PROGRAM INTERRUPT ELEMENT  @02\n         $CANHDR DSECT=YES               CANDLE COMMON HEADER\n         $AUDIT ,                        OMEGAMON/BASE SECURITY AUDIT\n*\n*        STANDARD REGISTER EQUATES.\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         DROP  ,\n         END   OMSMFRPT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSHD1": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x82\\x14\\x7f\\x00\\x95\\x15\\x0f\\x15\\x06\\x00t\\x00t\\x00\\x03\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1982-05-27T00:00:00", "modifydate": "1995-05-30T15:06:00", "lines": 116, "newlines": 116, "modlines": 3, "user": "SYS0007"}, "text": "         MACRO\n&NAME    PSHD1 &PGM=,&AUTH=,&DATEW=,&TYPE=1,&FUNC=\n.*******       ********************************************************\n.*******       *PSHD1    GENERATE PROGRAM HEADING BLOCK               *\n.*******       ********************************************************\n         LCLC  &HYPH,&ADATE,&WDATE          +ASSEMBLY DATE,DATE WRITTEN\n         LCLC  &AYY,&AMM,&ADD               +ASSEMBLY DATE\n         LCLC  &FUNC1,&FUNC2,&FUNC3         +FUNCTION DESCRIPTION\n         LCLC  &WYYC,&WMMC,&WDDC            +DATE WRITTEN\n         LCLA  &WYY,&WMM,&WDD               +DATE WRITTEN\n         LCLC  &ERMSG                       +ERROR MESSAGE\n&HYPH    SETC  '-'                          +SET HYPHEN\n         MNOTE '********       ****************************************+\n               ****************'            +WRITE FIRST LINE\n.*******       ********************************************************\n.*******       *CHECK IF REQUIRED PARMS ARE PRESENT *******************\n.*******       ********************************************************\n&ERMSG   SETC  'PGM'                        +INSERT PARM TYPE\n         AIF   (K'&PGM EQ 0).PARMERR        +CHECK PARM LENGTH\n&ERMSG   SETC  'AUTH'                       +INSERT PARM TYPE\n         AIF   (K'&AUTH EQ 0).PARMERR       +CHECK PARM LENGTH\n&ERMSG   SETC  'DATEW'                      +INSERT PARM TYPE\n         AIF   (K'&DATEW EQ 0).PARMERR      +CHECK PARM LENGTH\n&ERMSG   SETC  'FUNC'                       +INSERT PARM TYPE\n         AIF   (K'&FUNC EQ 0).PARMERR       +CHECK PARM LENGTH\n         AGO   .GENBLK                      +GO GENERATE BLK CHARS\n.PARMERR ANOP                               +PARM MISSING OR TOO SHORT\n         MNOTE  3,'PARAMETER MISSING OR TOO SHORT &ERMSG'\n.*******       ********************************************************\n.*******       *PRINT PROGRAM NAME IN BLOCK CHARACTERS ****************\n.*******       ********************************************************\n.GENBLK  ANOP                               +PARM MISSING OR TOO SHORT\n         PSBC0 PROGRAM=&PGM,TYPE=1          +PRINT BLK CHARS\n         MNOTE '********       ****************************************+\n               ****************'            +WRITE END   LINE\n.*******       ********************************************************\n.*******       *SET UP ASSEMBLY DATE **********************************\n.*******       ********************************************************\n&ADATE   SETC  '&SYSDATE'                   +GET DATE\n&AYY     SETC  '&ADATE'(7,2)                +EXTRACT YEAR\n&AMM     SETC  '&ADATE'(1,2)                +EXTRACT MONTH\n&ADD     SETC  '&ADATE'(4,2)                +EXTRACT DAY\n&ADATE   SETC  '&AYY.&HYPH.&AMM.&HYPH.&ADD' +BUILD DATE\n.*******       ********************************************************\n.*******       *SET UP DATE WRITTEN  **********************************\n.*******       ********************************************************\n         AIF   (K'&DATEW LE 6).DWLOK        +CHECK LENGTH\n         MNOTE 4,'DATE WRITTEN &DATEW LONGER THAN 6 DIGITS -TRUNCATED'\n.DWLOK   ANOP                               +\n&WYY     SETA   &DATEW/10000                +EXTRACT YEAR\n&WMM     SETA   (&DATEW/100)-(&WYY*100)     +EXTRACT MONTH\n&WDD     SETA   &DATEW-((&WYY*10000)+(&WMM*100)) +GET DAY\n         AIF   (&WYY LE &AYY AND &WYY GE 64).DWYOK +CHECK YEAR\n         MNOTE 1,'YEAR WRITTEN NOT IN RANGE 64 TO &AYY'\n.DWYOK   ANOP                               +\n         AIF   (&WMM GE 1 AND &WMM LE 12).DWMOK   +CHECK MONTH\n         MNOTE 1,'MONTH WRITTEN NOT IN RANGE 1 TO 12'\n.DWMOK   ANOP                               +\n         AIF   (&WDD GE 1 AND &WDD LE 31).DWDOK   +CHECK DAY\n         MNOTE 1,'DAY WRITTEN NOT IN RANGE 1 TO 31'\n.DWDOK   ANOP                               +\n         AIF   (&WDD LT 10).ADD0D           +ADD A 0\n&WDDC    SETC  '&WDD'\n         AGO   .CHKM\n.ADD0D   ANOP\n&WDDC    SETC  '0&WDD'\n.CHKM    ANOP\n         AIF   (&WMM LT 10).ADD0M           +ADD A 0\n&WMMC    SETC  '&WMM'\n         AGO   .SETYY\n.ADD0M   ANOP\n&WMMC    SETC  '0&WMM'\n.SETYY   ANOP\n&WYYC    SETC  '&WYY'\n&WDATE   SETC  '&WYYC.&HYPH.&WMMC.&HYPH.&WDDC' +BUILD DATE\n.*******       ********************************************************\n.*******       *SET UP FUNCTION ***************************************\n.*******       ********************************************************\n         AIF   (K'&FUNC LE 116).LFOK1       +IN MAX RANGE\n         MNOTE 1,'FUNCTION LONGER THAN 114 CHARACTERS - TRUNCATED'\n.LFOK1   ANOP                               +LENGTH LE 114\n         AIF   (K'&FUNC GT 40).LFUNC1       +CHECK FUNC LENGTH\n&FUNC1   SETC  '&FUNC'(2,K'&FUNC-2)         +DROP QUOTES\n         MNOTE '********       *FUNCTION.......:&FUNC1'\n         AGO   .ENDFUNC\n.LFUNC1  ANOP                               +LENGTH LE 114\n         AIF   (K'&FUNC GT 78).LFUNC2       +CHECK FUNC LENGTH\n&FUNC1   SETC  '&FUNC'(2,38)\n         MNOTE '********       *FUNCTION.......:&FUNC1'\n&FUNC2   SETC  '&FUNC'(40,K'&FUNC-40)\n         MNOTE '********       *...............:&FUNC2'\n         AGO   .ENDFUNC\n.LFUNC2  ANOP                               +LENGTH GT 76\n&FUNC1   SETC  '&FUNC'(2,38)\n         MNOTE '********       *FUNCTION.......:&FUNC1'\n&FUNC2   SETC  '&FUNC'(40,38)\n         MNOTE '********       *...............:&FUNC2'\n         AIF   (K'&FUNC LE 116).LFUNC3      +IN MAX RANGE\n&FUNC3   SETC  '&FUNC'(78,115-78)\n         AGO   .LFUNC4\n.LFUNC3  ANOP                               +LENGTH GT 76\n&FUNC3   SETC  '&FUNC'(78,K'&FUNC-78)\n.LFUNC4  ANOP                               +LENGTH GT 76\n         MNOTE '********       *...............:&FUNC3'\n.ENDFUNC ANOP\n.*******       ********************************************************\n.*******       *PRINT REST OUT ****************************************\n.*******       ********************************************************\n.*******       *MAXIMUM PARM LENGTH = 38\n         MNOTE '********       *DATE WRITTEN...:&WDATE'\n         MNOTE '********       *DATE ASSEMBLED.:&ADATE'\n         MNOTE '********       *AUTHOR.........:&AUTH'\n         MNOTE '********       ****************************************+\n               ****************'\n         EJECT\n         MEND                           +\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSPGMID1": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x843?\\x00\\x95\\x15\\x0f\\x15\\x06\\x00\\x0e\\x00\\x85\\x00\\x06\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1984-11-28T00:00:00", "modifydate": "1995-05-30T15:06:00", "lines": 14, "newlines": 133, "modlines": 6, "user": "SYS0007"}, "text": "         MACRO                            +\n         PSPGMID1 &CNAME\n         LCLA  &K\n         LCLC  &DATE,&CON                 +\n&DATE    SETC  '&SYSDATE'(7,2).'-'.'&SYSDATE'(1,2).'-'.'&SYSDATE'(4,2)\n&CON     SETC  ' &DATE'.' - '.'&SYSTIME'  +\n&K       SETA  ((2+K'&CON)/2)*2+4+8+32    +\n         B     &K.(0,15)                  +\n&K       SETA  K'&CON+8                   +\n         DC    AL1(&K)                    +\n         DC    CL8'&CNAME'                +\n         DC    C'&CON'                    +\nCOPRIGHT DC    CL32'  COPYRIGHT PERSETEL (PTY) LTD '\n         MEND                             +\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLCKCAT": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x96\\x02\\x9f\\x00\\x96\\x05\\x0f\\x18)\\x00\\xc0\\x00\\xaf\\x00\\x15\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1996-01-29T00:00:00", "modifydate": "1996-02-19T18:29:00", "lines": 192, "newlines": 175, "modlines": 21, "user": "SYS0015"}, "text": "//SYS2005A JOB (A,RESYS,CIC,00),'CHRIS',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS2005\n//******** *\n//ASM      EXEC PGM=IEV90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS2005.LIB.MACLIB2,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLCKCAT ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1995-09-26',     *\n               FUNC='CHECK CATALOG FOR DATASET NAME + VOLUME'\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         BCTR  R3,0\n         LA    R2,2(,R2)\n         MVC   PARMTXT(8),0(R2)\nGETSYSID DS    0H\n         LA    R2,16\n         L     R2,0(R2)\n         USING CVT,R2\n         MVC   HDGSYSID(8),CVTSNAME\nOPENIT   DS    0H\n         OPEN  (VTOCLST,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\n*\nREADLST  DS    0H\n         GET   VTOCLST,LSTREC\n         CLC   LSTREC+1(7),=C'VOLSER='\n         BNE   CHKDSN\n         MVC   HDGVOL+1(6),LSTREC+8\n         PUT   REPORT,OUTPHDG\n         MVC   OUTVOLDS(6),LSTREC+8\n         B     READLST\nCHKDSN   DS    0H\n         CLC   LSTREC+1(12),=C'------------'\n         BNE   READLST\nSETDSN   DS    0H\n         GET   VTOCLST,LSTREC\n         BAL   R6,CHKRUBB\n         CLC   LSTREC+37(18),=C'>>>>> END OF VTOC.'\n         BE    READLST\n         CLC   LSTREC+38(18),=C'>>>>> END OF VTOC.'\n         BE    READLST\n         MVC   DSNAME(44),LSTREC+1\n*\nCHECKCAT DS    0H\n         MVC   OUTDSN(44),DSNAME\n         LOCATE CATENTRY\n         LTR   R15,R15\n         BZ    CATLGOK\nCATLGNOK DS    0H\n         BAL   R6,CHKVALID\n         MVC   OUTDESC(32),=C' NOT CATALOGED .... INVESTIGATE.'\n         PUT   REPORT,OUTPREC\n         BAL   R6,CLROUTP\n         B     SETDSN\nCATLGOK  DS    0H\n         LH    R4,LOCAREA\n         LA    R5,LOCAREA+2\nPRTREPRT DS    0H\n         MVC   OUTVOLCT(6),4(R5)\n         CLC   OUTVOLDS(6),OUTVOLCT\n         BE    WRITEIT\n         MVC   OUTDESC(32),=C' DIFFERENT VOLUME IN CATALOG....'\nWRITEIT  DS    0H\n         CLC   PARMTXT(3),=C'EXC'\n         BNE   WRITEALL\n         CLC   OUTDESC(10),BLANK18\n         BNE   WRITEALL\n         BAL   R6,CLROUTP\n         B     SETDSN\nWRITEALL DS    0H\n         PUT   REPORT,OUTPREC\n         BAL   R6,CLROUTP\n         LA    R5,12(R5)\n         BCT   R4,PRTREPRT\n         B     SETDSN\nEOFVTOC  DS    0H\nEXITRC   DS    0H\n         CLOSE (VTOCLST)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n*\n* -------------------------------------------------------------------\n*              SUBROUTINES\n* -------------------------------------------------------------------\nCLROUTP  DS    0H\n         MVI   OUTDSN,C' '\n         MVC   OUTDSN+1(43),OUTDSN\n*        MVI   OUTVOLDS,C' '\n*        MVC   OUTVOLDS+1(5),OUTVOLDS\n         MVI   OUTVOLCT,C' '\n         MVC   OUTVOLCT+1(5),OUTVOLCT\n         MVI   OUTDESC,C' '\n         MVC   OUTDESC+1(45),OUTDESC\n         BR    R6\n*\nCHKRUBB  DS    0H\n         CLC   LSTREC+1(18),BLANK18\n         BE    SETDSN\n         CLC   LSTREC+1(15),=C'D A T A   S E T'\n         BE    SETDSN\n         CLC   LSTREC+1(12),=C'------------'\n         BE    SETDSN\n         BR    R6\n*\nCHKVALID DS    0H\n         CLC   OUTDSN(12),=C'SYS1.VTOCIX.'\n         BE    SETDSN\n         CLC   OUTDSN(12),=C'SYS1.HASPACE'\n         BE    SETDSN\n         CLC   OUTDSN(13),=C'SYS1.PAGEDUMP'\n         BE    SETDSN\n         BR    R6\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\nCATENTRY CAMLST NAME,DSNAME,,LOCAREA\nDSNAME   DC    44CL1' '\nLOCAREA  DS    0D\n         DS    265CL1\n*\nREG0SAVE DC    F'0'\nBLANK18  DC    18CL1' '\nLSTREC   DC    133CL1' '\n* -------------------------------------------------------------------\nOUTPREC  DS    CL133\n         ORG   OUTPREC\n         DC    CL1' '\n         DC    CL16'DATASET NAME  : '\nOUTDSN   DS    CL44\n         DC    CL13' ON VOLUME : '\nOUTVOLDS DS    CL6\n         DC    CL1' '\nOUTVOLCT DS    CL6\nOUTDESC  DC    46CL1' '\n         ORG   ,\n*\nOUTPHDG  DS    CL133\n         ORG   OUTPHDG\n         DC    CL1'1'\n         DC    58CL1'-'\n         DC    CL8' VOLSER='\nHDGVOL   DC    8CL1'        '\n         DC    CL1'('\nHDGSYSID DC    8CL1'        '\n         DC    CL1')'\n         DC    48CL1'-'\n         ORG   ,\n* -------------------------------------------------------------------\nPARMTXT  DS    CL8\n         LTORG\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nVTOCLST  DCB   MACRF=(GM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=18354,  *\n               DDNAME=VTOCLST,EODAD=EOFVTOC\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n*\n         CVT DSECT=YES\n         END\n/*\n//* ********************\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS2005.LIB.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=SYS2005.LIB.LOAD,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY PTLCKCAT\n NAME PTLCKCAT(R)\n/*\n//\n//PTLCKCAT EXEC PGM=PTLCKCAT,PARM='CHR',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS2005.LIB.LOAD,DISP=SHR\n//VTOCLST  DD   DSN=SYS2005.@VTOC.LISTALL,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLCKDSK": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x96\\x02\\x9f\\x00\\x96\\x07/\\x17#\\x01\\\\\\x01E\\x00\\x1f\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1996-01-29T00:00:00", "modifydate": "1996-03-12T17:23:00", "lines": 348, "newlines": 325, "modlines": 31, "user": "SYS0015"}, "text": "//SYS2005A JOB (A,RESYS,CIC,00),'CHRIS',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS2005\n//******** *\n//ASM      EXEC PGM=IEV90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS2005.LIB.MACLIB2,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLCKDSK ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1995-05-12',     *\n               FUNC='CHECK DASD VOLUME FOR CATALOGED DATASETS'\n* --------------------------------------------------------------------\n* --     PARM VALUE : 'EXC' - EXCEPTIONS ==> ONLY REPORTS EXCEPTIONS -\n* --                  'ALL' - ALL        ==> REPORTS ALL DATASETS    -\n* --------------------------------------------------------------------\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         BCTR  R3,0\n         LA    R2,2(,R2)\n         MVC   PARMTXT(3),0(R2)\nGETSYSID DS    0H\n         LA    R2,16\n         L     R2,0(R2)\n         USING CVT,R2\n         MVC   HDGSYSID(8),CVTSNAME\nGETSTOR  DS    0H\n         LA    R0,3000\n         GETMAIN R,LV=(R0)\n         ST    R1,STORADDR\n         LR    R9,R1\n         USING VOLAREA,R9\n         BAL   R6,INITSTOR\nOPENIT   DS    0H\n         OPEN  (CATLGLST,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\nGETVOLS  DS    0H\n         BAL   R6,BLDVOL_TAB\n         BAL   R6,PRTVOL_TAB\n         LA    R8,0                        .LINE COUNTER - OUTPUT\nREADLST  DS    0H\n         BAL   R6,CLRINPT\n         GET   CATLGLST,LSTREC\n         CLC   LSTREC+34(12),=C'LISTING FROM'\n         BNE   CHKDSN\n         BAL   R6,CHK_CATNAME\nCHKDSN   DS    0H\n         CLC   LSTREC+5(7),=C'NONVSAM'\n         BE    GETDSN\n         CLC   LSTREC+5(7),=C'CLUSTER'\n         BE    GETDSN\n         B     READLST\nGETDSN   DS    0H\n         MVC   OUTDSN(44),LSTREC+21\nGETVOL   DS    0H\n         BAL   R6,CLRINPT\n         GET   CATLGLST,LSTREC\n         CLC   LSTREC+5(7),=C'IDC3014I'\n         BE    CAT_ERR\n         CLC   LSTREC+12(6),=C'VOLSER'\n         BNE   GETVOL\n         MVC   OUTVOL(6),LSTREC+30\n         CLC   LSTREC+30,=C'MIGRAT'\n         BE    WRITEIT\nGETDEV   DS    0H\n         CLC   LSTREC+41(7),=C'DEVTYPE'\n         BNE   ALLOCDD                         .NO IT MUST BE VSAM\n         CLC   LSTREC+56(7),=C'3010200'\n         BE    ALLOCDD\n         MVC   OUTDESC(27),=C' DATASET CATALOGED ON TAPE.'\n         B     WRITEIT\nALLOCDD  DS    0H\n         BAL   R6,CHKVOLUM\n         BAL   R6,DYNALLOC\nWRITEIT  DS    0H\n         BAL   R6,CHKHEAD\n         CLC   PARMTXT(3),=C'EXC'\n         BNE   WRITEALL\n         CLC   OUTDESC(10),BLANKS\n         BE    READLST\nWRITEALL DS    0H\n         PUT   REPORT,OUTPREC\n         LA    R8,1(R8)\n         BAL   R6,CLROUTP\n         B     READLST\nEOFCATLS DS    0H\nEXITRC   DS    0H\n         LA    R0,3000\n         L     R1,STORADDR\n         FREEMAIN R,LV=(R0),A=(R1)\n         CLOSE (CATLGLST)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n*\nCHKVOLUM DS    0H\n         LA    R4,VOLTAB\nNEXTVOL  DS    0H\n         CLC   0(6,R4),=C'XXXXXX'\n         BE    LASTVOL\n         CLC   0(6,R4),OUTVOL\n         BER   R6\n         LA    R4,6(R4)\n         B     NEXTVOL\nLASTVOL  DS    0H\n         MVC   OUTDESC(20),=C' VOLUME NOT MOUNTED.'\n         B     WRITEIT\n*\nDYNALLOC DS    0H\n         CLC   OUTDSN(4),=C'ONS.'\n         BE    DYN_ACCESS\n         MVC   DSNPARM(44),OUTDSN\n         MVI   S99VERB,X'01'\n         MVI   S99TXTDS,X'00'\n         LA    R1,S99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BNZ   DYNERR\n         BAL   R7,DEALLOC\n         BR    R6\nDYNERR   DS    0H\n         ST    R0,REG0SAVE\n         CLC   REG0SAVE(4),=X'17080000'\n         BE    DYNNCTLG\n         CLC   REG0SAVE(4),=X'02100000'\n         BE    DYNBUSY\n         B     DYNNODSN\nDYNNCTLG DS    0H\n         MVC   OUTDESC(20),=C' NO ALIAS MASTERCAT.'\n         BR    R6\nDYNBUSY  DS    0H\n         MVC   OUTDESC(32),=C' DATASET IN USE BY ANOTHER USER.'\n         BR    R6\nDYNNODSN DS    0H\n         MVC   OUTDESC(22),=C' DATASET NOT ON VOLUME'\n         BR    R6\nDYN_ACCESS DS  0H\n         MVC   OUTDESC(22),=C' NO ACCESS AUTHORITY. '\n         BR    R6\n*\nDEALLOC  DS    0H\n         MVI   S99VERB,X'02'\n         MVI   S99TXTDS,X'80'\n         LA    R1,S99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZR   R7\n         DC    H'0'\n*\nCLROUTP  DS    0H\n         MVI   OUTDSN,C' '\n         MVC   OUTDSN+1(43),OUTDSN\n         MVI   OUTVOL,C' '\n         MVC   OUTVOL+1(5),OUTVOL\n         MVI   OUTDESC,C' '\n         MVC   OUTDESC+1(45),OUTDESC\n         BR    R6\n*\nCLRINPT  DS    0H\n         MVI   LSTREC,C' '\n         MVC   LSTREC+1(136),LSTREC\n         BR    R6\n*\nBLDVOL_TAB DS  0H\n         XC    UCBWORK(100),UCBWORK\n         LA    R4,VOLTAB\n         LA    R5,UCBAREA1\n         USING UCBCMSEG,R5\nSCANNEXT DS    0H\n         UCBSCAN COPY,                                                 *\n               WORKAREA=UCBWORK,                                       *\n               UCBAREA=UCBAREA1,                                       *\n               DYNAMIC=YES,                                            *\n               RANGE=ALL,                                              *\n               DEVCLASS=DASD\n         LTR   R15,R15\n         BNZ   UCBSCAN_ERR\n         TM    UCBSTAT,UCBONLI\n         BZ    SCANNEXT\n*        DC    H'0'\n         MVC   0(6,R4),UCBVOLI\n         LA    R4,6(R4)\n         B     SCANNEXT\n         BR    R6\nUCBSCAN_ERR DS 0H\n*        WTO   'UCB SCAN ERROR...................'\n         BR    R6\n*\nPRTVOL_TAB DS  0H\n         LA    R4,VOLTAB\nPRTNEXT  DS    0H\n         CLC   0(6,R4),=C'XXXXXX'\n         BER   R6\n         MVC   OUTPVOL+1(6),0(R4)\n         PUT   REPORT,OUTPVOL\n         LA    R4,6(R4)\n         B     PRTNEXT\n*\nCAT_ERR  DS    0H\n         MVC   OUTDESC(25),=C' CATALOG ERROR - IDC3014I'\n         B     WRITEIT\n*\nCHK_CATNAME DS 0H\n         CLC   HDG_CAT(40),LSTREC+58\n         BER   R6\n         MVC   HDG_CAT(40),LSTREC+58\n         PUT   REPORT,HDGREC\n         PUT   REPORT,HDGLINE\n         LA    R8,2\n         BR    R6\n*\nCHKHEAD  DS    0H\n         C     R8,=F'0'\n         BE    PRTHEAD\n         C     R8,=F'55'\n         BH    PRTHEAD\n         BR    R6\nPRTHEAD  DS    0H\n         PUT   REPORT,HDGREC\n         PUT   REPORT,HDGLINE\n         LA    R8,2\n         BR    R6\n*\nINITSTOR DS    0H\n         LA    R3,500\n         LA    R4,VOLTAB\nINITLOOP DS    0H\n         MVC   0(6,R4),=C'XXXXXX'\n         LA    R4,6(R4)\n         BCT   R3,INITLOOP\n         BR    R6\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\nREG0SAVE DC    F'0'\nSTORADDR DC    F'0'\nBLANKS   DC    10CL1' '\nLSTREC   DC    137CL1' '\nOUTPVOL  DC    133CL1' '\n*\nHDGLINE  DS    CL133\n         ORG   HDGLINE\n         DC    CL1' '\n         DC    132CL1'-'\n         ORG   ,\nHDGREC   DS    CL133\n         ORG   HDGREC\n         DC    CL1'1'\n         DC    60CL1' '\n         DC    CL22' REPORT FOR CATALOG : '\nHDG_CAT  DS    CL40\n         DC    CL1'('\nHDGSYSID DS    CL8\n         DC    CL1')'\n         ORG   ,\n*\nOUTPREC  DS    CL133\n         ORG   OUTPREC\n         DC    CL1' '\n         DC    CL16' DATASET NAME : '\nOUTDSN   DS    CL44\n         DC    CL13' ON VOLUME : '\nOUTVOL   DS    CL6\nOUTDESC  DC    53CL1' '\n         ORG   ,\nLSTDSN   DC    44CL1' '\nDIRREC   DC    256CL1' '\nPARMTXT  DS    CL8\nUCBWORK  DC    100XL1'00'\nUCBAREA1 DC    48CL1' '\n         LTORG\n* -------------------------------------------------------------------\n*              DYNAMIC ALLOCATION\n* -------------------------------------------------------------------\n         DS    0F\nS99RBPTR DC    X'80'\n         DC    AL3(S99RB)\nS99RB    DC    X'14'\nS99VERB  DC    X'01'\nS99FLAG1 DC    X'40'\n         DC    X'00'\nS99INFO  DC    F'0'\n         DC    AL4(S99TXPTR)\n         DC    2F'0'\nS99TXPTR DC    AL4(DDNKEY)\nS99TXTDS DC    AL4(DSNKEY)\n         DC    X'80'\n         DC    AL3(STAKEY)\n*              DDNAME ALLOCATION\nDDNKEY   DC    X'0001'\nDDNNUM   DC    X'0001'\nDDNLEN   DC    X'0006'\nDDNPARM  DC    C'SCANDD'\n*              DSN ALLOCATION\nDSNKEY   DC    X'0002'\nDSNNUM   DC    X'0001'\nDSNLEN   DC    X'002C'\nDSNPARM  DC    44CL1' '\n*              DS-STAT ALLOCATION\nSTAKEY   DC    X'0004'\nSTANUM   DC    X'0001'\nSTALEN   DC    X'0001'\nSTAPARM  DC    X'08'                   .SHR\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\n* ANDD   DCB   MACRF=(GM),DDNAME=SCANDD,DSORG=PS,RECFM=U,BLKSIZE=256,  *\n               EODAD=CLSSCAN\nCATLGLST DCB   MACRF=(GM),DSORG=PS,RECFM=VBA,LRECL=133,BLKSIZE=18354,  *\n               DDNAME=CATLGLST,EODAD=EOFCATLS\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n         CVT   DSECT=YES\n         IEFUCBOB PREFIX=YES,LIST=YES,DEVCLAS=DA\n*\nVOLAREA  DSECT\nVOLTAB   DS    500CL6\n*\n         END\n/*\n//*\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS2005.LIB.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=SYS2005.LIB.LOAD,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY PTLCKDSK\n NAME  PTLCKDSK(R)\n/*\n//\n//PTLCKDSK EXEC PGM=PTLCKDSK,PARM='EXC',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS2005.LIB.LOAD,DISP=SHR\n//CATLGLST DD   DSN=SYS2005.LISTCAT.LISTALL,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLCSMF": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x00\\x95)\\x1f\\x00\\x96&\\x1f\\x15\\x00\\x01#\\x02\\xf3\\x00!\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1995-10-18T00:00:00", "modifydate": "1996-09-17T15:00:00", "lines": 291, "newlines": 755, "modlines": 33, "user": "SYS0015"}, "text": "         TITLE 'PTLCSMF '\n         SPACE 3\n*\n*        PERFORM HOUSEKEEPING REQUIRED FOR A REENTRANT ROUTINE.\n*\nPTLCSMF  CSECT\n         SAVE  (14,12),,*                SAVE CALLER'S REGISTERS\n         LR    R12,R15                   GET ENTRY POINT ADDRESS\n         USING PTLCSMF,R12               ESTABLISH ADDRESSABILITY\n         B     P000050                   BRANCH AROUND EYE-CATCHER\n         DC    C'****&SYSDATE****&SYSTIME****'\n         SPACE 3\nP000050  DS    0H\n         GETMAIN R,LV=WORKSZ             GETMAIN A WORK AREA\n         ST    R1,8(R13)                 ESTABLISH BACKWARD CHAIN\n         LR    R2,R1                     SAVE WORK AREA ADDR\n         LA    R3,WORKSZ                 SIZE OF WORK AREA\n         LA    R6,X                      ADDR OF WORK AREA TEMPLATE\n         LA    R7,WORKSZ                 SIZE OF WORK AREA\n         MVCL  R2,R6                     INITIALIZE WORK AREA\n         ST    R13,4(R1)                 ESTABLISH FORWARD CHAIN\n         LR    R13,R1                    POINT R13 TO MY SAVE AREA\n         SPACE 3\n*\n*        OPEN THE INPUT AND OUTPUT FILES.\n*\nP000100  DS    0H\n         OPEN  (INDCB,(INPUT))\n         OPEN  (OUTDCB,(OUTPUT))\nP000200  DS    0H\n*        THIS SECTION CONSTITUTES THE MAIN PROCESSING LOOP OF THE\n*        ROUTINE.\n*\n         GETMAIN R,LV=STORSZ             GETMAIN A WORK AREA\n         LR    R3,R1\n         LR    R4,R1\n         ST    R1,STOR@\n         L     R10,=F'30000'\nP000300  DS    0H\n         USING INAREA,R4                 ESTABLISH ADDRESSABILITY\n         GET   INDCB,INREC\n         USING SMFRCD0,R3                 ESTABLISH ADDRESSABILITY\n*        CLI   SMF0RTY,X'6E'       TYPE 110 (CICS MON)\n         CLI   SMF0RTY,X'1A'         TYPE 30\n         BNE   P000300\n*        CLC   SMF0LEN,=X'7FF0'\n*        BNH   P000301\n*        WTO   ' SMF RECORD TO LONG.'\n*        B     P000300\nP000301  DS    0H\n         PUT   OUTDCB,INREC              PUT A RECORD - QSAM (PM)\n         BCT   R10,P000300\nENDINPT  DS    0H\n         CLOSE (INDCB)\n         CLOSE (OUTDCB)\n         L     R8,4(R13)                 SAVE ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKSZ,A=(R13)    FREE THE WORK AREA\n         LR    R13,R8                    ADDR CALLER'S SAVE AREA\n         RETURN (14,12),,RC=(15)         RESTORE REGS AND RETURN\n* **********************************************************\n         SPACE 3                                                    @02\n         ORG   ,\n         SPACE 3\nSTOR@    DS    F\n*\n*        LITERAL POOL.\n*\n         LTORG ,\n*\n*        GETMAINED WORK AREA TEMPLATE BEGINS HERE!\n*\nX        DS    0D\nSAVEAREA DS    18F\n*\nHEADING  DS    0CL133\n         DC    CL1'1'\nDATE     DS    CL8\n         DC    CL4' '\nTIME     DS    CL8\n         DC    CL23' '\n         DC    CL40'O M E G A M O N  SECURITY  AUDIT  REPORT'\n         DC    CL36' '\n         DC    CL5'PAGE '\nPAGE     DS    CL8\n*\nLINE1    DS    0CL133\n         DC    CL1'-'\n         DC    CL13' '\n         DC    CL6'JOB:  '\nJOBNAME  DS    CL8\n         DC    CL3'  ('\nJOBID    DS    CL8\n         DC    CL5')    '\nPRSTPNM  DS    CL8\n         DC    CL4' '\nSTPNM    DS    CL8\n         DC    CL6' '\n         DC    CL9'SYSTEM:  '\nSYSID    DS    CL4\n         DC    CL50' '\n*\nLINE2    DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL7'DATE:  '\nREPDATE  DS    CL8\n         DC    CL4' '\n         DC    CL7'TIME:  '\nREPTIME  DS    CL8\n         DC    CL4' '\n         DC    CL9'USERID:  '\nUSERID   DS    CL7\n         DC    CL4' '\n         DC    CL7'UNIT:  '\nUNIT     DS    CL8\n         DC    CL46' '\n*\nLINE3    DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL10'COMMAND:  '\nCOMMAND  DS    CL9\nASSOCMAJ DS    CL16\n         DC    CL6' '\n         DC    CL7'TYPE:  '\nCMTYPE   DS    CL15                                                 @03\n         DC    CL6' '\n         DC    CL14'DISPOSITION:  '\nDISP     DS    CL7\n         DC    CL29' '                                              @03\n*\nLINE4A   DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL31'COMMAND OUTPUT IMAGE (MAJOR)>  '\nAUXBUFF  DS    CL80\n         DC    CL8' '\n*\nLINE4B   DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL31'COMMAND INPUT IMAGE -------->  '\nPRMBUFF  DS    CL80\n         DC    CL8' '\n*\nLINE5    DS    0CL133\n         DC    CL1' '\n         DC    CL44' '\n         DC    CL10'....+....1'\n         DC    CL10'....+....2'\n         DC    CL10'....+....3'\n         DC    CL10'....+....4'\n         DC    CL10'....+....5'\n         DC    CL10'....+....6'\n         DC    CL10'....+....7'\n         DC    CL10'....+....8'\n         DC    CL8' '\n*\nBLANKS   DS    0CL133\n         DC    CL1' '\n         DC    CL132' '\n*\nERRORLN1 DS    0CL133                                               @02\n         DC    CL1'-'                                               @02\n         DC    CL13' '                                              @02\n         DC    CL16'*** WARNING *** '                               @02\n         DC    CL61'AN ERROR WAS DETECTED DURING THE PROCESSING OF RECOX\n               RD NUMBER '                                          @02\nRECNUM   DS    CL7                                                  @02\n         DC    CL3'.  '                                             @02\n         DC    CL32'POSSIBLE CAUSES ARE AS FOLLOWS: '               @02\n*\nERRORLN2 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL89'1)  INCORRECT SMF NUMBER SPECIFICATION IN EXTRACTIOX\n               N STEP OR IN OMEGAMON SECURITY UPDATE.'              @02\n         DC    CL14' '                                              @02\n*\nERRORLN3 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL76'2)  USE OF OMEGAMON''S SECURITY AUDIT SMF NUMBER BYX\n                ANOTHER APPLICATION.'                               @02\n         DC    CL27' '                                              @02\n*\nERRORLN4 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL43'3)  CORRUPTION OF THE SYSTEM SMF DATA SETS.'    @02\n         DC    CL60' '                                              @02\n*\nTERMLN1  DS    0CL133                                               @02\n         DC    CL1'-'                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'RECORDS PROCESSED SUCCESSFULLY:  '              @02\nGOODNUM  DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nTERMLN2  DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'RECORDS PROCESSED IN ERROR:      '              @02\nBADNUM   DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nTERMLN3  DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'TOTAL RECORDS PROCESSED:         '              @02\nTOTNUM   DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nMAJTAG   DS    0CL16\n         DC    CL11'  (MAJOR:  '\nMAJCMD   DS    CL4\n         DC    CL1')'\nLNCOUNT  DC    PL2'0'\nPGCOUNT  DC    PL8'0'\nPATTERN  DC    XL6'402020202120'\nTIMEWORK DS    XL10\nDATEWORK DS    D\nGREGDATE DS    0CL8\nMO       DS    CL2\n         DC    CL1'/'\nDA       DS    CL2\n         DC    CL1'/'\nYR       DS    CL2\nHHMMSS   DS    0CL8\nHH       DS    CL2\n         DC    CL1':'\nMM       DS    CL2\n         DC    CL1':'\nSS       DS    CL2\nMISCSW   DC    X'00'\nPGEJECT  EQU   X'80'\nERROR    EQU   X'40'                                                @02\nSPIEACT  EQU   X'20'                                                @02\nSPIESAVE DS    F                                                    @02\nTOTCNT   DC    F'0'                                                 @02\nGOODCNT  DC    F'0'                                                 @02\nBADCNT   DC    F'0'                                                 @02\nDOUBLE   DS    D                                                    @02\nOPENFI   OPEN  (0,,0),MF=L\nCLOSFI   CLOSE (0,,0),MF=L\nSTOP0C7  SPIE  ,,MF=L                                               @02\n*\n*        INPUT FILE DCB.\n*\nINDCB    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,RECFM=VBS,               X\n               LRECL=32767,BLKSIZE=4096,EODAD=ENDINPT\n*\n*        OUTPUT FILE DCB.\n*\nOUTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=VB,             X\n               LRECL=32756,BLKSIZE=32760\n*\n*        GETMAINED WORK AREA TEMPLATE ENDS HERE!\n*\nWORKSZ   EQU   *-X\nSTORSZ   EQU   32760\n         SPACE 3\n*\n*        MAPPING MACROS AND DSECTS.\n*\n         DSECT\n         IFASMFR 0                       SMF COMMON HEADER\n*\nINAREA   DSECT\nINREC    DS    CL32760\n*\n*        STANDARD REGISTER EQUATES.\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         DROP  ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLFRMS$": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x00\\x00\\x96#\\x9f\\x00\\x96$\\x7f\\x16\\x08\\x00\\xf3\\x00e\\x00\\xf3\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1996-08-26T00:00:00", "modifydate": "1996-09-03T16:08:00", "lines": 243, "newlines": 101, "modlines": 243, "user": "SYS0015"}, "text": "//SYS0015A JOB (A,RESYS,CIC,00),'CHRIS',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS0015\n//******** *\n//ASM      EXEC PGM=IEV90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.MACLIB2,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLFRMSC ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1996-08-26',     *\n               FUNC='REPORT NEXT-FORM CHAIN'\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         LA    R2,2(,R2)\n         MVC   BLDLMEM(8),0(R2)\n         MVC   STRTMEM(8),0(R2)\nOPENIT   DS    0H\n         OPEN  (PDSINP01,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\n         MVC   OUTPREC(18),=C' PTLFRMSC ENTERED.'\n         PUT   REPORT,OUTPREC\n*\n         LA    R8,MEMTABLE\n         ST    R8,R8POINTR\nSTRTPROC DS    0H\n         BAL   R11,CHECKMEM\n         BAL   R11,FINDMEM\nREADBLK  DS    0H\n         BAL   R11,READMEM\n         BAL   R11,SCANBLK\n         B     READBLK\n*\nEOFPDS   DS    0H\n         L     R8,R8POINTR\n         LR    R9,R8\n         LA    R8,180(,R8)\n         ST    R8,R8POINTR\nWRTMEMTB DS    0H\n         MVC   OUTPREC+3(130),0(R9)\n         PUT   REPORT,OUTPREC\n*        DC    H'0'\n         XC    OUTPREC,OUTPREC\n*\nNEXTONE  DS    0H\n         LA    R9,8(,R9)\n         MVI   BLDLMEM,C' '\n         MVC   BLDLMEM+1(7),BLDLMEM\n         LA    R10,BLDLMEM\nNEXTMEM  DS    0H\n         CLC   0(3,R9),=C'###'\n         BE    EXITRC\n         CLI   0(R9),C'|'\n         BNE   NEXTBLD\n         LA    R9,1(,R9)\n         CLC   BLDLMEM(8),PREVMEM\n         BE    NEXTERR\n         CLC   BLDLMEM(8),STRTMEM\n         BE    NEXTERR\n         MVC   PREVMEM(8),BLDLMEM\n         B     STRTPROC\n*        BNE   LOADTST\nNEXTERR  DS    0H\n         MVC   EQMEMMSG+9(8),BLDLMEM\n         MVC   EQMEMMSG+27(8),STRTMEM\n         WTO   TEXT=(EQMEMMSG,C)\n         B     NEXTONE\nNEXTBLD  DS    0H\n         MVC   0(1,R10),0(R9)\n         OI    0(R10),X'40'\n         LA    R9,1(,R9)\n         LA    R10,1(,R10)\n         B     NEXTMEM\nEXITRC   DS    0H\n         MVC   OUTPREC+3(130),0(R9)\n         PUT   REPORT,OUTPREC\n         XC    OUTPREC,OUTPREC\n*        DC    H'0'\n         CLOSE (PDSINP01)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n* ------------------------------------------------------------------\nCHECKMEM DS    0H\n         MVC   NXMEMMSG+9(8),BLDLMEM\n         XC    OUTPREC,OUTPREC\n         MVC   OUTPREC(35),NXMEMMSG\n         PUT   REPORT,OUTPREC\n         XC    OUTPREC,OUTPREC\n*        WTO   TEXT=(NXMEMMSG,C)\n         BLDL  PDSINP01,BLDLLST\n         LTR   R15,R15\n         BZR   R11\n         MVC   NOMEMMSG+9(8),BLDLMEM\n         WTO   TEXT=(NOMEMMSG,C)\n         B     EXITRC\n* ------------------------------------------------------------------\nFINDMEM  DS    0H\n         FIND  PDSINP01,BLDLMEM,D\n         LTR   R15,R15\n         BZR   R11\n         WTO   ' START OF MEMBER NOT FOUND.'\n         B     EXITRC\n* ------------------------------------------------------------------\nSCANBLK  DS    0H\n         LH    R4,INAREA                     .LENGTH OF BLOCK\n         LA    R6,INAREA\n*        GET A SOLUTION FOR 'NO CALL' CONDITION\n         MVC   0(8,R8),BLDLMEM\n         LA    R8,8(,R8)\nSCANNXT  DS    0H\n*        CLC   0(11,R6),CALLQRYU\n*        BE    MEMBUILD\n*        CLC   0(11,R6),CALLQRYL\n*        BE    MEMBUILD\n         CLC   0(9,R6),NEWFRMUC\n         BE    MEMBUILD\n         CLC   0(9,R6),NEWFRMLC\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTU\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTL\n         BE    MEMBUILD\n         LA    R6,1(,R6)\n         BCT   R4,SCANNXT\n         BR    R11\n*\nMEMBUILD DS    0H\n         CLI   0(R6),X'7D'                     .START QUOTE\n         BE    MEMFOUND\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         B     MEMBUILD\nMEMFOUND DS    0H\n         MVI   FOUNDIND,C'1'\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         LR    R7,R6\nMEMSCAN  DS    0H\n         CLI   0(R7),X'7D'                      .END QUOTE\n         BE    MEMEND\n         MVC   0(1,R8),0(R7)\n         LA    R8,1(,R8)\nMEMSTEP  DS    0H\n         LA    R7,1(,R7)\n         B     MEMSCAN\nMEMEND   DS    0H\n         MVI   0(R8),C'|'\n         LA    R8,1(,R8)\n         B     SCANNXT\n* ------------------------------------------------------------------\nREADMEM  DS    0H\n         CLI   FOUNDIND,C'1'\n         BE    READON\n         L     R8,R8POINTR\nREADON   DS    0H\n         MVI   FOUNDIND,C'0'\n         READ  DECB01,SF,PDSINP01,INAREA,'S'\n         CHECK DECB01,DSORG=ALL\n         BR    R11\n* -------------------------------------------------------------------\nLOADTST  DS    0H\n         LOAD  EP=PTLFRMSC,LOADPT=PGMADDR\n         MVC   CALLMEM(8),BLDLMEM\n         LA    R1,CALLPARM\n         L     R15,PGMADDR\n*        DC    H'0'\n         BALR  R14,R15\n         DELETE EP=PTLFRMSC\n         B     EXITRC\n* -------------------------------------------------------------------\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\n*\nBLDLLST  DC    H'1'\n         DC    H'18'\nBLDLMEM  DC    CL8'TSTMEM  '\n         DC    10CL1'1'\n*\nR8POINTR DS    F\nPGMADDR  DS    A\n*\n         DS    0F\nCALLPARM DC    AL4(CALLLEN)\nCALLLEN  DC    H'8'\nCALLMEM  DS    CL8\n*\nFOUNDIND DC    CL1'0'\nSTRTMEM  DC    8CL1' '\nPREVMEM  DC    8CL1' '\nOUTPREC  DS    CL133\n*\nCALLTXTU DC    CL5'CALL('\nCALLTXTL DC    XL5'838193934D'\nNEWFRMUC DC    CL9'NEW_FORM('\nNEWFRMLC DC    XL9'9585A66D869699944D'\nCALLQRYU DC    CL11'CALL_QUERY('\nCALLQRYL DC    XL11'838193936D98A48599A84D'\nNOMEMMSG DC    CL35'  MEMBER XXXXXXXX NOT FOUND.       '\nNXMEMMSG DC    CL35'  MEMBER XXXXXXXX TO BE FOUND.     '\nEQMEMMSG DC    CL35'  MEMBER XXXXXXXX EQ START XXXXXXXX '\nMEMTABLE DC    200CL9'#########'      20*9*10 (20X9BYTE COLS,10 ROWS\n         LTORG\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nPDSINP01 DCB   MACRF=(R),DSORG=PO,RECFM=VB,LRECL=250,BLKSIZE=18254,    *\n               DDNAME=PDSINP01,EODAD=EOFPDS\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n*\nINAREA   DC    18254CL1' '\n         END\n/*\n//* ********************\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSLMOD  DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY PTLFRMSC\n NAME PTLFRMSC(R)\n/*\n//*\n//PTLFRMSC EXEC PGM=PTLFRMSC,PARM='MAS0135U',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//PDSINP01 DD   DSN=SYS0015.TEST.INP,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLFRMS#": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x96$\\x8f\\x00\\x96$\\x8f\\x119\\x00\\xfd\\x00\\xfd\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-09-04T00:00:00", "modifydate": "1996-09-04T11:39:00", "lines": 253, "newlines": 253, "modlines": 0, "user": "SYS0015"}, "text": "//SYS0015A JOB (A,RESYS,CIC,00),'CHRIS',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS0015\n//******** *\n//ASM      EXEC PGM=IEV90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.MACLIB2,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLFRMSC ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1996-08-26',     *\n               FUNC='REPORT NEXT-FORM CHAIN'\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         LA    R2,2(,R2)\n         MVC   BLDLMEM(8),0(R2)\n         MVC   STRTMEM(8),0(R2)\nOPENIT   DS    0H\n         OPEN  (PDSINP01,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\n         MVC   OUTPREC(18),=C' PTLFRMSC ENTERED.'\n         PUT   REPORT,OUTPREC\n*\n         LA    R8,MEMTABLE\n         ST    R8,R8POINTR\nSTRTPROC DS    0H\n         BAL   R11,CHECKMEM\n         BAL   R11,FINDMEM\nREADBLK  DS    0H\n         BAL   R11,READMEM\n         BAL   R11,SCANBLK\n         B     READBLK\n*\nEOFPDS   DS    0H\n         L     R8,R8POINTR\n         LR    R9,R8\n         DC    H'0'\n         LA    R8,180(,R8)\n         ST    R8,R8POINTR\nWRTMEMTB DS    0H\n         MVC   OUTPREC+3(130),0(R9)\n         PUT   REPORT,OUTPREC\n*        DC    H'0'\n         XC    OUTPREC,OUTPREC\n*\nNEXTONE  DS    0H\n         LA    R9,8(,R9)\n         MVI   BLDLMEM,C' '\n         MVC   BLDLMEM+1(7),BLDLMEM\n         LA    R10,BLDLMEM\nNEXTMEM  DS    0H\n         CLC   0(3,R9),=C'###'\n         BE    EXITRC\n         CLI   0(R9),C'|'\n         BNE   NEXTBLD\n         LA    R9,1(,R9)\n         CLC   BLDLMEM(8),PREVMEM\n         BE    NEXTERR\n         CLC   BLDLMEM(8),STRTMEM\n         BE    NEXTERR\n         MVC   PREVMEM(8),BLDLMEM\n         B     STRTPROC\n*        BNE   LOADTST\nNEXTERR  DS    0H\n         MVC   EQMEMMSG+9(8),BLDLMEM\n         MVC   EQMEMMSG+27(8),STRTMEM\n         WTO   TEXT=(EQMEMMSG,C)\n         B     NEXTONE\nNEXTBLD  DS    0H\n         MVC   0(1,R10),0(R9)\n         OI    0(R10),X'40'\n         LA    R9,1(,R9)\n         LA    R10,1(,R10)\n         B     NEXTMEM\nEXITRC   DS    0H\n         MVC   OUTPREC+3(130),0(R9)\n         PUT   REPORT,OUTPREC\n         XC    OUTPREC,OUTPREC\n*        DC    H'0'\n         CLOSE (PDSINP01)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n* ------------------------------------------------------------------\nCHECKMEM DS    0H\n         MVC   NXMEMMSG+9(8),BLDLMEM\n         XC    OUTPREC,OUTPREC\n         MVC   OUTPREC(35),NXMEMMSG\n         PUT   REPORT,OUTPREC\n         XC    OUTPREC,OUTPREC\n*        WTO   TEXT=(NXMEMMSG,C)\n         BLDL  PDSINP01,BLDLLST\n         LTR   R15,R15\n         BZR   R11\n         MVC   NOMEMMSG+9(8),BLDLMEM\n         WTO   TEXT=(NOMEMMSG,C)\n         B     EXITRC\n* ------------------------------------------------------------------\nFINDMEM  DS    0H\n         FIND  PDSINP01,BLDLMEM,D\n         LTR   R15,R15\n         BZR   R11\n         WTO   ' START OF MEMBER NOT FOUND.'\n         B     EXITRC\n* ------------------------------------------------------------------\nSCANBLK  DS    0H\n         LH    R4,INAREA                     .LENGTH OF BLOCK\n         LA    R6,INAREA\n*        GET A SOLUTION FOR 'NO CALL' CONDITION\n         MVC   0(8,R8),BLDLMEM\n         LA    R8,8(,R8)\nSCANNXT  DS    0H\n*        CLC   0(11,R6),CALLQRYU\n*        BE    MEMBUILD\n*        CLC   0(11,R6),CALLQRYL\n*        BE    MEMBUILD\n         CLC   0(9,R6),NEWFRMUC\n         BE    MEMBUILD\n         CLC   0(9,R6),NEWFRMLC\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTU\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTL\n         BE    MEMBUILD\n         LA    R6,1(,R6)\n         BCT   R4,SCANNXT\n         BR    R11\n*\nMEMBUILD DS    0H\n         CLI   0(R6),X'7D'                     .START QUOTE\n         BE    MEMFOUND\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         B     MEMBUILD\nMEMFOUND DS    0H\n         MVI   FOUNDIND,C'1'\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         LA    R7,8\nMEMSCAN  DS    0H\n         CLI   0(R6),X'7D'                      .END QUOTE\n         BE    MEMEND\n         MVC   0(1,R8),0(R6)\n         LA    R8,1(,R8)\nMEMSTEP  DS    0H\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         BCTR  R7,0\n         B     MEMSCAN\nMEMEND   DS    0H\n         EX    R7,MOVBLANK\n         LA    R8,0(R7,R8)\n         STORAGE OBTAIN,LENGTH=MEMTABLN,ADDR=(R5),LOC=RES\n         ST    R5,0(R8)\n         LA    R8,4(,R8)\n         B     SCANNXT\n* ------------------------------------------------------------------\nREADMEM  DS    0H\n         CLI   FOUNDIND,C'1'\n         BE    READON\n         L     R8,R8POINTR\nREADON   DS    0H\n         MVI   FOUNDIND,C'0'\n         READ  DECB01,SF,PDSINP01,INAREA,'S'\n         CHECK DECB01,DSORG=ALL\n         BR    R11\n* -------------------------------------------------------------------\nLOADTST  DS    0H\n         LOAD  EP=PTLFRMSC,LOADPT=PGMADDR\n         MVC   CALLMEM(8),BLDLMEM\n         LA    R1,CALLPARM\n         L     R15,PGMADDR\n*        DC    H'0'\n         BALR  R14,R15\n         DELETE EP=PTLFRMSC\n         B     EXITRC\n* -------------------------------------------------------------------\nMOVBLANK MVC   0(0,R8),BLANK\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\n*\nBLDLLST  DC    H'1'\n         DC    H'18'\nBLDLMEM  DC    CL8'TSTMEM  '\n         DC    10CL1'1'\n*\nR8POINTR DS    F\nPGMADDR  DS    A\n*\n         DS    0F\nCALLPARM DC    AL4(CALLLEN)\nCALLLEN  DC    H'8'\nCALLMEM  DS    CL8\n*\nFOUNDIND DC    CL1'0'\nSTRTMEM  DC    8CL1' '\nPREVMEM  DC    8CL1' '\nBLANK    DC    CL8'        '\nOUTPREC  DS    CL133\n*\nCALLTXTU DC    CL5'CALL('\nCALLTXTL DC    XL5'838193934D'\nNEWFRMUC DC    CL9'NEW_FORM('\nNEWFRMLC DC    XL9'9585A66D869699944D'\nCALLQRYU DC    CL11'CALL_QUERY('\nCALLQRYL DC    XL11'838193936D98A48599A84D'\nNOMEMMSG DC    CL35'  MEMBER XXXXXXXX NOT FOUND.       '\nNXMEMMSG DC    CL35'  MEMBER XXXXXXXX TO BE FOUND.     '\nEQMEMMSG DC    CL35'  MEMBER XXXXXXXX EQ START XXXXXXXX '\n         DS    0F\nMEMTABLE DC    30CL12'############'      30*(8+4) (30X (MEM + POINTER)\nMEMTABLN EQU   30*12\n         LTORG\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nPDSINP01 DCB   MACRF=(R),DSORG=PO,RECFM=VB,LRECL=250,BLKSIZE=18254,    *\n               DDNAME=PDSINP01,EODAD=EOFPDS\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n*\nINAREA   DC    18254CL1' '\n         END\n/*\n//*\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSLMOD  DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY PTLFRMSC\n NAME PTLFRMSC(R)\n/*\n//*\n//PTLFRMSC EXEC PGM=PTLFRMSC,PARM='MAS0135U',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//PDSINP01 DD   DSN=SYS0015.TEST.INP,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLFRMSC": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x96$\\x7f\\x00\\x96$\\x8f\\x15Q\\x00\\xe6\\x00\\xf3\\x00;\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1996-09-03T00:00:00", "modifydate": "1996-09-04T15:51:00", "lines": 230, "newlines": 243, "modlines": 59, "user": "SYS0015"}, "text": "//SYS0015A JOB (A,RESYS,CIC,00),'CHRIS',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS0015\n//******** *\n//ASM      EXEC PGM=IEV90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.MACLIB2,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLFRMSC ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1996-08-26',     *\n               FUNC='REPORT NEXT-FORM CHAIN'\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         LA    R2,2(,R2)\n         MVC   BLDLMEM(8),0(R2)\n         MVC   STRTMEM(8),0(R2)\nOPENIT   DS    0H\n         OPEN  (PDSINP01,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\n         MVC   OUTPREC(18),=C' PTLFRMSC ENTERED.'\n         PUT   REPORT,OUTPREC\n*\n         LA    R8,MEMTABLE\n         ST    R8,R8POINTR\n         MVI   FRSTTIME,C'1'\nSTRTPROC DS    0H\n         BAL   R11,CHECKMEM\n         BAL   R11,FINDMEM\nREADBLK  DS    0H\n         BAL   R11,READMEM\n         BAL   R11,SCANBLK\n         B     READBLK\n*\nEOFPDS   DS    0H\n         CLI   FRSTTIME,C'1'\n         BNE   BLDCHAIN\n         LA    R3,MEMTABLE\n         MVI   FRSTTIME,C'0'\n         B     BLDCHAIN\nBLDCHAIN DS    0H\n         CLC   0(8,R3),=C'########'\n         BE    PRTCHAIN\n         MVC   BLDLMEM(8),0(R3)\n         OC    BLDLMEM(8),UCMASK\n         L     R8,8(R3)\n         LA    R3,12(,R3)\n         B     STRTPROC\nPRTCHAIN DS    0H\n         LA    R9,OUTPREC+1\n         MVC   0(8,R9),STRTMEM\n         LA    R9,8(,R9)\n         LA    R3,MEMTABLE\nPRTLOOP1 DS    0H\n         MVC   0(8,R9),0(R3)\n         L     R3,8(R3)\n         LA    R9,8(,R9)\n         PUT   REPORT,OUTPREC\n         B     PRTLOOP1\nEXITRC   DS    0H\n         CLOSE (PDSINP01)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n* ------------------------------------------------------------------\nCHECKMEM DS    0H\n         MVC   NXMEMMSG+9(8),BLDLMEM\n         XC    OUTPREC,OUTPREC\n         MVC   OUTPREC(35),NXMEMMSG\n         PUT   REPORT,OUTPREC\n         XC    OUTPREC,OUTPREC\n*        WTO   TEXT=(NXMEMMSG,C)\n         BLDL  PDSINP01,BLDLLST\n         LTR   R15,R15\n         BZR   R11\n         MVC   NOMEMMSG+9(8),BLDLMEM\n         WTO   TEXT=(NOMEMMSG,C)\n         B     EXITRC\n* ------------------------------------------------------------------\nFINDMEM  DS    0H\n         FIND  PDSINP01,BLDLMEM,D\n         LTR   R15,R15\n         BZR   R11\n         WTO   ' START OF MEMBER NOT FOUND.'\n         B     EXITRC\n* ------------------------------------------------------------------\nSCANBLK  DS    0H\n         LH    R4,INAREA                     .LENGTH OF BLOCK\n         LA    R6,INAREA\n*        GET A SOLUTION FOR 'NO CALL' CONDITION\n*        MVC   0(8,R8),BLDLMEM\n*        LA    R8,8(,R8)\nSCANNXT  DS    0H\n         CLC   0(9,R6),NEWFRMUC\n         BE    MEMBUILD\n         CLC   0(9,R6),NEWFRMLC\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTU\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTL\n         BE    MEMBUILD\n         LA    R6,1(,R6)\n         BCT   R4,SCANNXT\n         BR    R11\n*\nMEMBUILD DS    0H\n         CLI   0(R6),X'7D'                     .START QUOTE\n         BE    MEMFOUND\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         B     MEMBUILD\nMEMFOUND DS    0H\n         MVI   FOUNDIND,C'1'\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         LA    R7,8\nMEMSCAN  DS    0H\n         CLI   0(R6),X'7D'                      .END QUOTE\n         BE    MEMEND\n         MVC   0(1,R8),0(R6)\n         LA    R8,1(,R8)\nMEMSTEP  DS    0H\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         BCTR  R7,0\n         B     MEMSCAN\nMEMEND   DS    0H\n         EX    R7,MOVBLANK\n         LA    R8,0(R7,R8)\n         STORAGE OBTAIN,LENGTH=MEMTABLN,ADDR=(R5),LOC=RES\n         ST    R5,0(R8)\n         MVI   0(R5),C'#'\n         MVC   1(MEMTABLN-1,R5),0(R5)\n         LA    R8,4(,R8)\n         B     SCANNXT\n* ------------------------------------------------------------------\nREADMEM  DS    0H\n         MVI   FOUNDIND,C'0'\n         READ  DECB01,SF,PDSINP01,INAREA,'S'\n         CHECK DECB01,DSORG=ALL\n         BR    R11\n* -------------------------------------------------------------------\nLOADTST  DS    0H\n         LOAD  EP=PTLFRMSC,LOADPT=PGMADDR\n         MVC   CALLMEM(8),BLDLMEM\n         LA    R1,CALLPARM\n         L     R15,PGMADDR\n*        DC    H'0'\n         BALR  R14,R15\n         DELETE EP=PTLFRMSC\n         B     EXITRC\n* -------------------------------------------------------------------\nMOVBLANK MVC   0(0,R8),BLANK\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\n*\nBLDLLST  DC    H'1'\n         DC    H'18'\nBLDLMEM  DC    CL8'TSTMEM  '\n         DC    10CL1'1'\n*\nR8POINTR DS    F\nPGMADDR  DS    A\n*\n         DS    0F\nCALLPARM DC    AL4(CALLLEN)\nCALLLEN  DC    H'8'\nCALLMEM  DS    CL8\n*\nFRSTTIME DC    CL1'1'\nFOUNDIND DC    CL1'0'\nSTRTMEM  DC    8CL1' '\nPREVMEM  DC    8CL1' '\nBLANK    DC    CL8'        '\nUCMASK   DC    8XL1'40'\nOUTPREC  DS    CL133\n*\nCALLTXTU DC    CL5'CALL('\nCALLTXTL DC    XL5'838193934D'\nNEWFRMUC DC    CL9'NEW_FORM('\nNEWFRMLC DC    XL9'9585A66D869699944D'\nCALLQRYU DC    CL11'CALL_QUERY('\nCALLQRYL DC    XL11'838193936D98A48599A84D'\nNOMEMMSG DC    CL35'  MEMBER XXXXXXXX NOT FOUND.       '\nNXMEMMSG DC    CL35'  MEMBER XXXXXXXX TO BE FOUND.     '\nEQMEMMSG DC    CL35'  MEMBER XXXXXXXX EQ START XXXXXXXX '\n         DS    0F\nMEMTABLE DC    30CL12'############'      30*(8+4) (30X (MEM + POINTER)\nMEMTABLN EQU   30*12\n         LTORG\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nPDSINP01 DCB   MACRF=(R),DSORG=PO,RECFM=VB,LRECL=250,BLKSIZE=18254,    *\n               DDNAME=PDSINP01,EODAD=EOFPDS\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n*\nINAREA   DC    18254CL1' '\n         END\n/*\n//*\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSLMOD  DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY PTLFRMSC\n NAME PTLFRMSC(R)\n/*\n//*\n//PTLFRMSC EXEC PGM=PTLFRMSC,PARM='CHR1    ',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//PDSINP01 DD   DSN=SYS0015.TEST.INP,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLFRM01": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x96$\\x8f\\x00\\x96$\\x8f\\x15T\\x00\\xe1\\x00\\xe1\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-09-04T00:00:00", "modifydate": "1996-09-04T15:54:00", "lines": 225, "newlines": 225, "modlines": 0, "user": "SYS0015"}, "text": "//SYS0015A JOB (A,RESYS,CIC,00),'CHRIS',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS0015\n//******** *\n//ASM      EXEC PGM=IEV90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.MACLIB2,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLFRM01 ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1996-08-26',     *\n               FUNC='REPORT NEXT-FORM CHAIN'\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         LA    R2,2(,R2)\n         MVC   BLDLMEM(8),0(R2)\n         MVC   STRTMEM(8),0(R2)\nOPENIT   DS    0H\n         OPEN  (PDSINP01,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\n         MVC   OUTPREC(18),=C' PTLFRM01 ENTERED.'\n         PUT   REPORT,OUTPREC\n*\n         LA    R8,MEMTABLE\n         ST    R8,R8POINTR\n         MVI   FRSTTIME,C'1'\nSTRTPROC DS    0H\n         BAL   R11,CHECKMEM\n         BAL   R11,FINDMEM\nREADBLK  DS    0H\n         BAL   R11,READMEM\n         BAL   R11,SCANBLK\n         B     READBLK\n*\nEOFPDS   DS    0H\n         CLI   FRSTTIME,C'1'\n         BNE   BLDCHAIN\n         LA    R3,MEMTABLE\n         MVI   FRSTTIME,C'0'\n         B     BLDCHAIN\nBLDCHAIN DS    0H\n         CLC   0(8,R3),=C'########'\n         BE    PRTCHAIN\n         MVC   BLDLMEM(8),0(R3)\n         OC    BLDLMEM(8),UCMASK\n         L     R8,8(R3)\n         LA    R3,12(,R3)\n         B     STRTPROC\nPRTCHAIN DS    0H\n         LA    R9,OUTPREC+1\n         MVC   0(8,R9),STRTMEM\n         LA    R9,8(,R9)\n         LA    R3,MEMTABLE\nPRTLOOP1 DS    0H\n         MVC   0(8,R9),0(R3)\n         L     R3,8(R3)\n         LA    R9,8(,R9)\n         PUT   REPORT,OUTPREC\n         B     PRTLOOP1\nEXITRC   DS    0H\n         CLOSE (PDSINP01)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n* ------------------------------------------------------------------\nCHECKMEM DS    0H\n         MVC   NXMEMMSG+9(8),BLDLMEM\n         XC    OUTPREC,OUTPREC\n         MVC   OUTPREC(35),NXMEMMSG\n         PUT   REPORT,OUTPREC\n         XC    OUTPREC,OUTPREC\n*        WTO   TEXT=(NXMEMMSG,C)\n         BLDL  PDSINP01,BLDLLST\n         LTR   R15,R15\n         BZR   R11\n         MVC   NOMEMMSG+9(8),BLDLMEM\n         WTO   TEXT=(NOMEMMSG,C)\n         B     EXITRC\n* ------------------------------------------------------------------\nFINDMEM  DS    0H\n         FIND  PDSINP01,BLDLMEM,D\n         LTR   R15,R15\n         BZR   R11\n         WTO   ' START OF MEMBER NOT FOUND.'\n         B     EXITRC\n* ------------------------------------------------------------------\nSCANBLK  DS    0H\n         LH    R4,INAREA                     .LENGTH OF BLOCK\n         LA    R6,INAREA\n*        GET A SOLUTION FOR 'NO CALL' CONDITION\n*        MVC   0(8,R8),BLDLMEM\n*        LA    R8,8(,R8)\nSCANNXT  DS    0H\n         CLC   0(9,R6),NEWFRMUC\n         BE    MEMBUILD\n         CLC   0(9,R6),NEWFRMLC\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTU\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTL\n         BE    MEMBUILD\n         LA    R6,1(,R6)\n         BCT   R4,SCANNXT\n         BR    R11\n*\nMEMBUILD DS    0H\n         CLI   0(R6),X'7D'                     .START QUOTE\n         BE    MEMFOUND\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         B     MEMBUILD\nMEMFOUND DS    0H\n         MVI   FOUNDIND,C'1'\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         LA    R7,8\nMEMSCAN  DS    0H\n         CLI   0(R6),X'7D'                      .END QUOTE\n         BE    MEMEND\n         MVC   0(1,R8),0(R6)\n         LA    R8,1(,R8)\nMEMSTEP  DS    0H\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         BCTR  R7,0\n         B     MEMSCAN\nMEMEND   DS    0H\n         EX    R7,MOVBLANK\n         LA    R8,0(R7,R8)\n         B     SCANNXT\n* ------------------------------------------------------------------\nREADMEM  DS    0H\n         MVI   FOUNDIND,C'0'\n         READ  DECB01,SF,PDSINP01,INAREA,'S'\n         CHECK DECB01,DSORG=ALL\n         BR    R11\n* -------------------------------------------------------------------\nLOADTST  DS    0H\n         LOAD  EP=PTLFRM01,LOADPT=PGMADDR\n         MVC   CALLMEM(8),BLDLMEM\n         LA    R1,CALLPARM\n         L     R15,PGMADDR\n*        DC    H'0'\n         BALR  R14,R15\n         DELETE EP=PTLFRM01\n         B     EXITRC\n* -------------------------------------------------------------------\nMOVBLANK MVC   0(0,R8),BLANK\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\n*\nBLDLLST  DC    H'1'\n         DC    H'18'\nBLDLMEM  DC    CL8'TSTMEM  '\n         DC    10CL1'1'\n*\nR8POINTR DS    F\nPGMADDR  DS    A\n*\n         DS    0F\nCALLPARM DC    AL4(CALLLEN)\nCALLLEN  DC    H'8'\nCALLMEM  DS    CL8\n*\nFRSTTIME DC    CL1'1'\nFOUNDIND DC    CL1'0'\nSTRTMEM  DC    8CL1' '\nPREVMEM  DC    8CL1' '\nBLANK    DC    CL8'        '\nUCMASK   DC    8XL1'40'\nOUTPREC  DS    CL133\n*\nCALLTXTU DC    CL5'CALL('\nCALLTXTL DC    XL5'838193934D'\nNEWFRMUC DC    CL9'NEW_FORM('\nNEWFRMLC DC    XL9'9585A66D869699944D'\nCALLQRYU DC    CL11'CALL_QUERY('\nCALLQRYL DC    XL11'838193936D98A48599A84D'\nNOMEMMSG DC    CL35'  MEMBER XXXXXXXX NOT FOUND.       '\nNXMEMMSG DC    CL35'  MEMBER XXXXXXXX TO BE FOUND.     '\nEQMEMMSG DC    CL35'  MEMBER XXXXXXXX EQ START XXXXXXXX '\n         DS    0F\nMEMTABLE DC    30CL8'############'      30*(8) (30X (MEM)\nMEMTABLN EQU   30*8\n         LTORG\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nPDSINP01 DCB   MACRF=(R),DSORG=PO,RECFM=VB,LRECL=250,BLKSIZE=18254,    *\n               DDNAME=PDSINP01,EODAD=EOFPDS\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n*\nINAREA   DC    18254CL1' '\n         END\n/*\n//*\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSLMOD  DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY PTLFRM01\n NAME PTLFRM01(R)\n/*\n//*\n//PTLFRM01 EXEC PGM=PTLFRM01,PARM='CHR1    ',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//PDSINP01 DD   DSN=SYS0015.TEST.INP,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLMAC01": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x96(/\\x00\\x96(?!(\\x01\\x1c\\x00\\xe6\\x00\\xd4\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1996-10-08T00:00:00", "modifydate": "1996-10-09T21:28:00", "lines": 284, "newlines": 230, "modlines": 212, "user": "SYS0015"}, "text": "//SYS0015A JOB (A,RESYS,CIC,00),'CHRIS',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS0015\n//******** *\n//ASM      EXEC PGM=IEV90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.MACLIB2,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLMAC01 ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1996-08-26',     *\n               FUNC='SCAN SOURCE LIB FOR DFHXX MACROS'\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         BCTR  R3,0\n         LA    R2,2(,R2)\n         EX    R3,MOVPARM\n* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\nALLOCDD  DS    0H\n         BAL   R6,DYNALLOC\nSCANDDS  DS    0H\n         OPEN  (SCANDD)\n         LA    R7,MEMTABLE\nSCANGET  DS    0H\n         GET   SCANDD,DIRREC\n         LA    R4,DIRREC\n         LH    R5,0(R4)\n         LTR   R5,R5\n         BZ    CLSSCAN\n         LA    R5,0(R4,R5)\n         LA    R4,2(,R4)\nSCANLOOP DS    0H\n         CR    R4,R5\n         BNL   SCANGET\n         MVC   0(8,R7),0(R4)\nSCANNEXT DS    0H\n         LA    R4,42(,R4)\n         LA    R7,8(,R7)\n         B     SCANLOOP\nCLSSCAN  DS    0H\n         CLOSE SCANDD\n         BAL   R6,DEALLOC\nOPENPDS  DS    0H\n         MVC   DDNPARM(8),=C'PDSINP01'\n         MVC   DDNLEN(2),=H'8'\n         BAL   R6,DYNALLOC\n         OPEN  (PDSINP01,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\n         MVC   OUTPHDNG+44(44),DSNPARM\n         PUT   REPORT,OUTPHDNG\n         MVI   OUTPHDNG,C' '\n         MVC   OUTPHDNG+1(132),OUTPHDNG\n         PUT   REPORT,OUTPHDNG\n         LA    R8,MEMTABLE\n         ST    R8,R8POINTR\nFINDNEXT DS    0H\n         CLC   0(8,R8),=X'FFFFFFFFFFFFFFFF'\n         BE    EXITRC\n         MVC   PDSMEM(8),0(R8)\n         BAL   R11,FINDMEM\n*        WTO   ' FIND HAPPY'\nREADBLK  DS    0H\n         BAL   R11,READMEM\n         BAL   R11,SCANBLK\n         B     READBLK\nEOFPDS   DS    0H\n         LA    R8,8(,R8)\n         B     FINDNEXT\n* ---------------------------------------------------------------------\nEXITRC   DS    0H\n         CLOSE (PDSINP01)\n         CLOSE (REPORT)\n         BAL   R6,DEALLOC\n         EXIT  RC=(15)\n*\n*        DS    F\nDYNALLOC DS    0H\n         MVI   S99VERB,X'01'\n         MVI   S99TXTDS,X'00'\n         LA    R1,S99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZR   R6\nDYNERR   DS    0H\n         ST    R0,REG0SAVE\n         CLC   REG0SAVE(4),=X'17080000'\n         BE    DYNNCTLG\n         CLC   REG0SAVE(4),=X'17080002'\n         BE    DYNNCTLG\n         CLC   REG0SAVE(4),=X'02100000'\n         BE    DYNBUSY\n         B     DYNCRASH\nDYNNCTLG DS    0H\n*        MVC   OUTDSN(44),LSTDSN\n*        MVC   OUTMEM(8),=C'00000000'\n*        MVC   OUTDESC(20),=C' NOT CATALOGUED.....'\n*        PUT   REPORT,OUTPREC\n*        MVC   OUTDESC(20),=C'                    '\n*        B     READLST\nDYNBUSY  DS    0H\n*        MVC   OUTDSN(44),LSTDSN\n*        MVC   OUTMEM(8),=C'00000000'\n*        MVC   OUTDESC(20),=C' DATASET NOT AVAIL..'\n*        PUT   REPORT,OUTPREC\n*        MVC   OUTDESC(20),=C'                    '\n*        B     READLST\nDYNCRASH DS    0H\n         DC    H'0'\n*\nDEALLOC  DS    0H\n         MVI   S99VERB,X'02'\n         MVI   S99TXTDS,X'80'\n         LA    R1,S99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZR   R6\n         DC    H'0'\n*\n* ------------------------------------------------------------------\nFINDMEM  DS    0H\n         FIND  PDSINP01,PDSMEM,D\n         LTR   R15,R15\n         BZR   R11\n         WTO   ' START OF MEMBER NOT FOUND.'\n         B     EXITRC\n* ------------------------------------------------------------------\nREADMEM  DS    0H\n         READ  DECB01,SF,PDSINP01,INAREA,'S'\n         CHECK DECB01,DSORG=ALL\n*        WTO   ' READ AND CHECH HAPPY'\n         BR    R11\n* ------------------------------------------------------------------\nSCANBLK  DS    0H\n         LA    R4,MACTABLE\nSCANDATA DS    0H\n         LA    R6,INAREA\nSCANNXT  DS    0H\n         CLC   0(5,R6),=X'1111111111'\n         BE    SCANEOD\nSCANMAC  DS    0H\n         CLC   0(6,R6),0(R4)\n         BNE   SCANSTEP\nSCANWRIT DS    0H\n         MVC   OUTPMEM(8),PDSMEM\n         MVC   OUTPMAC(6),0(R6)\n         LA    R9,100\nSCANTYPE DS    0H\n         CLC   0(5,R6),=C'TYPE='\n         BE    TYPEFND\n         LA    R6,1(,R6)\n         BCT   R9,SCANTYPE\n         B     SCANSTEP\nTYPEFND  DS    0H\n         MVC   OUTPTYP(20),0(R6)\n         PUT   REPORT,OUTPREC\nSCANSTEP DS    0H\n         LA    R6,1(,R6)\n         B     SCANNXT\nSCANEOD  DS    0H\n         LA    R4,6(,R4)\n         CLC   0(6,R4),=C'DFH000'\n         BER   R11\n         B     SCANDATA\n*\n* -------------------------------------------------------------------\nMOVPARM  MVC   DSNPARM(0),0(R2)\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\n*\nREG0SAVE DC    F'0'\nR8POINTR DS    F\n*\nFRSTTIME DC    CL1'1'\nPDSMEM   DC    CL8'TSTMEM  '\nOUTPHDNG DS    CL333\n         ORG   OUTPHDNG\n         DC    CL1'1'\n         DC    132CL1' '\n         ORG   ,\nOUTPREC  DS    CL133\n         ORG   OUTPREC\n         DC    2CL1' '\nOUTPMEM  DC    8CL1' '\n         DC    2CL1' '\nOUTPMAC  DC    6CL1' '\n         DC    2CL1' '\nOUTPTYP  DC    20CL1' '\nOUTPFIL  DC    93CL1' '\n         ORG   ,\n*\nMACTABLE DC    CL6'DFHDC '\n         DC    CL6'DFHDI '\n         DC    CL6'DFHFC '\n         DC    CL6'DFHIC '\n         DC    CL6'DFHJC '\n         DC    CL6'DFHKC '\n         DC    CL6'DFHPC '\n         DC    CL6'DFHSC '\n         DC    CL6'DFHSP '\n         DC    CL6'DFHTC '\n         DC    CL6'DFHTD '\n         DC    CL6'DFHTR '\n         DC    CL6'DFHTS '\n         DC    CL6'DFH000'\n         DS    0F\nMEMTABLE DC    100CL8'########'         100*(8)   (100 X MEM'S)\nMEMTABLN EQU   10*8\nDIRREC   DC    256CL1' '\n* -------------------------------------------------------------------\n*              DYNAMIC ALLOCATION\n* -------------------------------------------------------------------\n         DS    0F\nS99RBPTR DC    X'80'\n         DC    AL3(S99RB)\nS99RB    DC    X'14'\nS99VERB  DC    X'01'\nS99FLAG1 DC    X'40'\n         DC    X'00'\nS99INFO  DC    F'0'\n         DC    AL4(S99TXPTR)\n         DC    2F'0'\nS99TXPTR DC    AL4(DDNKEY)\nS99TXTDS DC    AL4(DSNKEY)\n         DC    X'80'\n         DC    AL3(STAKEY)\n*              DDNAME ALLOCATION\nDDNKEY   DC    X'0001'\nDDNNUM   DC    X'0001'\nDDNLEN   DC    X'0006'\nDDNPARM  DC    C'SCANDD  '\n*              DSN ALLOCATION\nDSNKEY   DC    X'0002'\nDSNNUM   DC    X'0001'\nDSNLEN   DC    X'002C'\nDSNPARM  DC    44CL1' '\n*              DS-STAT ALLOCATION\nSTAKEY   DC    X'0004'\nSTANUM   DC    X'0001'\nSTALEN   DC    X'0001'\nSTAPARM  DC    X'08'                   .SHR\n         LTORG\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nSCANDD   DCB   MACRF=(GM),DDNAME=SCANDD,DSORG=PS,RECFM=U,BLKSIZE=256,  *\n               EODAD=CLSSCAN\nPDSINP01 DCB   MACRF=(R),DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=3120,      *\n               DDNAME=PDSINP01,EODAD=EOFPDS\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n*\nINAREA   DC    18254XL1'11'\n         END\n/*\n//*\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSLMOD  DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY PTLMAC01\n NAME PTLMAC01(R)\n/*\n//*\n//PTLMAC01 EXEC PGM=PTLMAC01,\n//    PARM='SYS0015.PRDA.LIB.TEST',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PTLVSCAN": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x00\\x95\\x17\\x0f\\x00\\x99\\x18?\\x10$\\x00\\xdb\\x00\\xc0\\x003\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf1@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1995-06-19T00:00:00", "modifydate": "1999-07-02T10:24:00", "lines": 219, "newlines": 192, "modlines": 51, "user": "SYS0011"}, "text": "//SYS0011G JOB (A,RESYS,CIC,00),'FDP',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS0011\n//******** *\n//ASM      EXEC PGM=ASMA90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS0011.LIB.ASM,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLVSCAN ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1995-05-12',     *\n               FUNC='SCAN FOR SPECIFIED MEMBER'\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         BCTR  R3,0\n         LA    R2,2(,R2)\n         MVC   BLDLMEM(8),0(R2)\nOPENIT   DS    0H\n         OPEN  (VTOCLST,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\nREADLST  DS    0H\n         GET   VTOCLST,LSTREC\n         CLC   LSTREC+1(7),=C'VOLSER='\n         BNE   CHKDSORG\n         MVC   OUTVOL(6),LSTREC+8\n         B     READLST\nCHKDSORG DS    0H\n         CLC   LSTREC+82(2),=C'PO'\n         BNE   READLST\n         CLC   LSTREC+1(11),=C'SYS2.JCLLIB'\n         BE    READLST\n         MVC   LSTDSN(44),LSTREC+1\n         MVC   DSNPARM(44),LSTREC+1\nALLOCDD  DS    0H\n         BAL   R6,DYNALLOC\nSCANDDS  DS    0H\n         OPEN  (SCANDD)\nSCANGET  DS    0H\n         GET   SCANDD,DIRREC\n         LA    R4,DIRREC\n         LH    R5,0(R4)\n         LTR   R5,R5\n         BZ    CLSSCAN\n         LA    R5,0(R4,R5)\nSCANLOOP DS    0H\n         CR    R4,R5\n         BNL   SCANGET\n         LA    R6,2(R4)\n         EX    R3,CHECK\n*        CLC   2(3,R4),0(R2)\n         BNE   SCANNEXT\n         MVI   FNDFLAG,C'1'\n         MVC   OUTDSN(44),LSTDSN\n         MVC   OUTMEM(8),2(R4)\n         PUT   REPORT,OUTPREC\nSCANNEXT DS    0H\n         CLC   LSTREC+88(2),=C'U '\n         BNE   SCANSRCE\n         LA    R4,36(R4)\n         B     SCANLOOP\nSCANSRCE DS    0H\n         LA    R4,42(R4)\n         B     SCANLOOP\nCLSSCAN  DS    0H\n*        DC    X'0000'\n         CLOSE SCANDD\n         BAL   R6,DEALLOC\n         B     READLST\nEOFVTOC  DS    0H\nFINIS    DS    0H\n         CLI   FNDFLAG,C'1'\n         BE    EXITRC\n         LA    R15,4\nEXITRC   DS    0H\n         CLOSE (VTOCLST)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n*\n         DS    F\nCHECK    CLC   0(0,R6),0(R2)\nDYNALLOC DS    0H\n         MVI   S99VERB,X'01'\n         MVI   S99TXTDS,X'00'\n         LA    R1,S99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZR   R6\nDYNERR   DS    0H\n         ST    R0,REG0SAVE\n         CLC   REG0SAVE(4),=X'17080000'\n         BE    DYNNCTLG\n         CLC   REG0SAVE(4),=X'17080002'\n         BE    DYNNCTLG\n         CLC   REG0SAVE(4),=X'02100000'\n         BE    DYNBUSY\n         B     DYNCRASH\nDYNNCTLG DS    0H\n         MVC   OUTDSN(44),LSTDSN\n         MVC   OUTMEM(8),=C'00000000'\n         MVC   OUTDESC(20),=C' NOT CATALOGUED.....'\n*        PUT   REPORT,OUTPREC\n         MVC   OUTDESC(20),=C'                    '\n         B     READLST\nDYNBUSY  DS    0H\n         MVC   OUTDSN(44),LSTDSN\n         MVC   OUTMEM(8),=C'00000000'\n         MVC   OUTDESC(20),=C' DATASET NOT AVAIL..'\n         PUT   REPORT,OUTPREC\n         MVC   OUTDESC(20),=C'                    '\n         B     READLST\nDYNCRASH DS    0H\n         DC    H'0'\n*\nDEALLOC  DS    0H\n         MVI   S99VERB,X'02'\n         MVI   S99TXTDS,X'80'\n         LA    R1,S99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZR   R6\n         DC    H'0'\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\nREG0SAVE DC    F'0'\nBLDLLST  DC    H'1'\n         DC    H'18'\nBLDLMEM  DC    CL8'TSTMEM  '\n         DC    10CL1'1'\nFNDFLAG  DC    CL1'0'\nLSTREC   DS    133CL1' '\nOUTPREC  DS    CL133\n         ORG   OUTPREC\n         DC    CL1' '\nOUTMEM   DS    CL8\n         DC    CL1' '\n         DC    CL16' FOUND IN DSN : '\nOUTDSN   DS    CL44\n         DC    CL13' ON VOLUME : '\nOUTVOL   DS    CL6\nOUTDESC  DC    44CL1' '\n         ORG   ,\nLSTDSN   DC    44CL1' '\nDIRREC   DC    256CL1' '\n         LTORG\n* -------------------------------------------------------------------\n*              DYNAMIC ALLOCATION\n* -------------------------------------------------------------------\n         DS    0F\nS99RBPTR DC    X'80'\n         DC    AL3(S99RB)\nS99RB    DC    X'14'\nS99VERB  DC    X'01'\nS99FLAG1 DC    X'40'\n         DC    X'00'\nS99INFO  DC    F'0'\n         DC    AL4(S99TXPTR)\n         DC    2F'0'\nS99TXPTR DC    AL4(DDNKEY)\nS99TXTDS DC    AL4(DSNKEY)\n         DC    X'80'\n         DC    AL3(STAKEY)\n*              DDNAME ALLOCATION\nDDNKEY   DC    X'0001'\nDDNNUM   DC    X'0001'\nDDNLEN   DC    X'0006'\nDDNPARM  DC    C'SCANDD'\n*              DSN ALLOCATION\nDSNKEY   DC    X'0002'\nDSNNUM   DC    X'0001'\nDSNLEN   DC    X'002C'\nDSNPARM  DC    44CL1' '\n*              DS-STAT ALLOCATION\nSTAKEY   DC    X'0004'\nSTANUM   DC    X'0001'\nSTALEN   DC    X'0001'\nSTAPARM  DC    X'08'                   .SHR\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nSCANDD   DCB   MACRF=(GM),DDNAME=SCANDD,DSORG=PS,RECFM=U,BLKSIZE=256,  *\n               EODAD=CLSSCAN\nVTOCLST  DCB   MACRF=(GM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=18354,  *\n               DDNAME=VTOCLST,EODAD=EOFVTOC\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n*\n         END\n/*\n//* ********************\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS0011.LIB.LOAD,DISP=SHR\n//SYSLMOD  DD  DSN=SYS0011.LIB.LOAD,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n NAME PTLVSCAN(R)\n/*\n//\n//PTLVSCAN EXEC PGM=PTLVSCAN,PARM='CHR',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS0011.LIB.LOAD,DISP=SHR\n//*SCANDD   DD   DSN=SYS2005.LIB.JCL,DISP=SHR,\n//*         DCB=(BLKSIZE=256,RECFM=U)\n//VTOCLST  DD   DSN=SYS2005.@VTOC2.LISTALL,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFCLST": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x01o\\x01\\x01\\x01o\\x144=^=^\\x00\\x00\\xc5\\xc4\\xd9\\xd6\\xe2\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-16T00:00:00", "modifydate": "2001-01-16T14:34:00", "lines": 15710, "newlines": 15710, "modlines": 0, "user": "EDROSS"}, "text": "./ ADD NAME=$$$COIBM 0101-01016-01016-1428-00001-00001-00000-RACFCLS\n//*\n./ ADD NAME=#ISPAUT  0101-01016-01016-1428-00097-00097-00000-RACFCLS\nPROC 0 PANEL()      /* ISPAUT */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREFIX\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    FREE FI(ISPCRTE)\n    CONTROL MSG\n    ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) USING(ISPCRTE) +\n        FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      FREE FI(ISPCRTE)\n      EXIT CODE(12)\n     END\n    FREE FI(ISPCRTE)\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@AUT)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(SMPTABL) SHR DA('&DSNAME.')\nALLOC FI(ISPLLIB) SHR DA( +\n                         'SYS1.ICEISPL'           /* DFSORT        */ +\n                         'SYS1.DGTLLIB'           /* DFDSS         */ +\n                         'GIM.SGIMLMD0')\nALLOC FI(ISPPLIB) SHR DA(                         /* SPFOPS        */ +\n                         'ISF.V1R5M0.SISFPLIB'       /* SDSF       */ +\n                         'ISP.V4R2M0.SISPPENU'       /* ISPF       */ +\n                         'SYS2.RACFPANL'           /* CUSTOM       */ +\n                         'SYS2.ISPPLIB'           /* CUSTOM        */ +\n                         'SYS1.ICEISPP'           /* DFSORT        */ +\n                         'SYS1.DGTPLIB'           /* DFDSS         */ +\n                         'EOY.SEOYPENU'           /* BOOKMANAGER   */ +\n                         'GIM.SGIMPENU'                            +\n                         'SYS3.&SHRNAME..IOAIV410.PANEL') /* IOA   */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'SYS1.ICEISPM'           /* DFSORT        */ +\n                         'SYS1.DGTMLIB'           /* DFDSS         */ +\n                         'EOY.SEOYMENU'           /* BOOKMANAGER   */ +\n                         'SYS3.&SHRNAME..IOAIV410.ISMSG' /* IOA    */ +\n                         'GIM.SGIMMENU'                              +\n                         'ISP.V4R2M0.SISPMENU')    /* ISPF        */\nALLOC FI(ISPTLIB) SHR DA( +\n                         '&DSNAME'                                    +\n                         'SYS1.ICEISPT'           /* DFSORT        */ +\n                         'SYS1.DGTTLIB'           /* DFP/DFDSS     */ +\n                         'EOY.SEOYTENU'           /* BOOKMANAGER   */ +\n                         'SYS3.&SHRNAME..IOAIV410.TLIB' /* IOA    */ +\n                         'ISF.V1R5M0.SISFTLIB'     /* SDSF      */ +\n                         'GIM.SGIMTENU'                            +\n                         'ISP.V4R2M0.SISPTENU')    /* ISPF      */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'SYS1.ICEISPS'           /* DFSORT        */ +\n                         'SYS1.DGTSLIB'           /* DFP/DFDSS     */ +\n                         'GIM.SGIMSENU'                           +\n                         'ISP.V4R2M0.SISPSLIB')    /* ISPF       */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n                         'SYS2.RACFCLST'           /* CUSTOMIZED   */ +\n                         'SYS2.CMDPROC'           /* CUSTOMIZED    */ +\n                         'SYS1.ICEISPC'           /* DFSORT        */ +\n                         'SYS1.DGTCLIB'           /* DFDSS         */ +\n                         'EOY.SEOYCLIB'           /* BOOKMANAGER   */ +\n                         'EDC.V2R2M0.SEDCLIST'    /* C/370         */ +\n                         'SYS3.&SHRNAME..IOAIV410.CLIST' /* IOA  */  +\n                          'GIM.SGIMCLS0')  /* SMP/E */\nERROR RETURN\nMURPHY\nPDF &PNL\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPCOMA 0101-01016-01016-1428-00086-00086-00000-RACFCLS\nPROC 0 PANEL()   /*ISPCOMA */\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210659     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST'     /* RACF ADMIN  */  +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@COMA)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL') /* RACF CHECKING */\nALLOC FI(ISPPLIB) SHR DA( +\n                         'SYS2.RACFPANL' /* RACF ADMIN   */ +\n                         'ISF.V1R5M0.SISFPLIB')  /* SDSF          */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'SYS2.RACFMENU' /* RACF ISPF    */ +\n                         'SYS1.HRFMSG') /* RACF ISPF    */\nALLOC FI(ISPTLIB) SHR DA( +\n                         'SYS2.RACFTABL' /* RACF TABLES  */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'ISF.V1R5M0.SISFTLIB')  /* SDSF          */\nALLOC FI(ISPSLIB) SHR DA('SYS2.RACFSLIB') /* ISPF        */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* ISPF        */\nERROR RETURN\nMURPHY\nPDF &PNL NEWAPPL(RACF)\nIF &SYSUID=POLADM4 THEN +\n   EX 'SYS2.RACFCLST(X1)'\nELSE +\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPCTD  0101-01016-01016-1428-00071-00071-00000-RACFCLS\nPROC 0 PANEL()     /* ISPCTD */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREFIX\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    FREE FI(ISPCRTE)\n    CONTROL MSG\n    ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) USING(ISPCRTE) +\n        FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      FREE FI(ISPCRTE)\n      EXIT CODE(12)\n     END\n    FREE FI(ISPCRTE)\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@CTD)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(SMPTABL) SHR DA('&DSNAME.')\nALLOC FI(ISPPLIB) SHR DA( +\n                         'ISF.V1R5M0.SISFPLIB'     /* SDSF       */ +\n                         'SYS2.RACFPANL' /*              */ +\n                         'ISP.V4R2M0.SISPPENU'     /* ISPF       */ +\n                         'SYS3.&SHRNAME..IOAIV410.PANEL') /* IOA   */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'SYS3.&SHRNAME..IOAIV410.ISMSG' /* IOA    */ +\n                         'ISP.V4R2M0.SISPMENU')    /* ISPF       */\nALLOC FI(ISPTLIB) SHR DA( +\n                         '&DSNAME'                                    +\n                         'SYS3.&SHRNAME..IOAIV410.TLIB' /* IOA    */ +\n                         'ISF.V1R5M0.SISFTLIB'     /* SDSF       */ +\n                         'ISP.V4R2M0.SISPTENU')    /* ISPF       */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'ISP.V4R2M0.SISPSLIB')    /* ISPF      */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n                         'SYS2.RACFCLST'     /* RACF    */ +\n                         'SYS3.&SHRNAME..IOAIV410.CLIST') /* IOA */\nERROR RETURN\nPDF &PNL\nCONTROL NOMSG NOLIST\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPDNS  0101-01016-01016-1428-00073-00073-00000-RACFCLS\nPROC 0 PANEL()        /*  ISPDNS  */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREFIX\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  FI(ISPPROF) +\n                   DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@DNS)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(ISPLLIB) SHR DA( +\n                         'SYS1.DGTLLIB'           /* DFP/DFDSS     */ +\n                         'ISP.V4R2M0.SISPLOAD')   /* ISPF          */\nALLOC FI(ISPPLIB) SHR DA( +\n                         'SYS2.RACFPANL'           /* RACF         */ +\n                         'SYS1.DGTPLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFPLIB'    /* SDSF          */ +\n                         'ISP.V4R2M0.SISPPENU')   /* ISPF          */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'SYS1.DGTMLIB'           /* DFP/DFDSS     */ +\n                         'ISP.V4R2M0.SISPMENU')   /* ISPF          */\nALLOC FI(ISPTLIB) SHR DA( +\n                         '&DSNAME'                /*               */ +\n                         'SYS1.DGTTLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFTLIB'    /* SDSF          */ +\n                         'ISP.V4R2M0.SISPTENU')   /* ISPF          */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'SYS1.DGTSLIB'           /* DFDSS         */ +\n                         'ISP.V4R2M0.SISPSLIB')   /* ISPF          */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n                         'SYS2.RACFCLST'         /* RACF CHECKING */ +\n                         'ISP.V4R2M0.SISPEXEC'    /* ORACLE + LMF  */ +\n                         'ISP.V4R2M0.SISPCLIB'    /* ORACLE + LMF  */ +\n                         'SYS1.DGTCLIB')          /* DFDSS         */\n/*                       'SYS2.LINKLIB')             USER TSP      */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nERROR RETURN\nMURPHY\nPDF &PNL\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPDNSA 0101-01016-01016-1428-00080-00080-00000-RACFCLS\nPROC 0 PANEL()\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210656     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nFREE FI(SYSPROC)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@ADMN)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL')         /* RACF CHECKING */\nALLOC FI(ISPLLIB) SHR DA('ISP.V4R2M0.SISPLOAD')   /* ISPF          */\nALLOC FI(ISPPLIB) SHR DA('SYS2.RACFPANL'          /* RACF CHECKING */ +\n                         'ISF.V1R5M0.SISFPLIB')   /* SDSF          */\nALLOC FI(ISPMLIB) SHR DA('SYS2.RACFMENU'          /* RACF ISPF     */ +\n                         'SYS1.HRFMSG')          /* RACF ISPF     */\nALLOC FI(ISPTLIB) SHR DA('SYS2.RACFTABL'          /* RACF TABLES   */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'ISF.V1R5M0.SISFTLIB')   /* SDSF          */\nALLOC FI(ISPSLIB) SHR DA('SYS2.RACFSLIB')         /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST'          /* RACF ADMIN  */  +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nPDF &PNL NEWAPPL(RACF)\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPGREN 0101-01016-01016-1428-00046-00046-00000-RACFCLS\nPROC 0 PANEL()   /*ISPGRENS */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID PREFIX(GRENS)\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST')\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    FREE FI(ISPCRTE)\n    CONTROL MSG\n    ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) USING(ISPCRTE) +\n        FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      FREE FI(ISPCRTE)\n      EXIT CODE(12)\n     END\n    FREE FI(ISPCRTE)\n  END\nCONTROL MSG\nERROR EXIT\nWRITE SEND OR RECEIVE THE FILE ... OR LOGOFF TO TERMINATE SESSION.\nERROR RETURN\n/* EX 'SYS2.RACFCLST(X)' */\n./ ADD NAME=#ISPKRI  0101-01016-01016-1428-00095-00095-00000-RACFCLS\nPROC 0 PANEL()\n/*********************************************************************/\n/* KRIM     ADMIN                                                    */\n/*********************************************************************/\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210656     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@KRI)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL')    /* RACF CHECKING */\nALLOC FI(ISPLLIB) SHR DA( +\n                         'ISP.V4R2M0.SISPLOAD')    /* ISPF     */\nALLOC FI(ISPPLIB) SHR DA( +\n                         'SYS2.RACFPANL'     /* RACF ADMIN    */ +\n                         'SYS1.DGTPLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFPLIB'    /* SDSF          */ +\n                         'ISP.V4R2M0.SISPPENU')    /* ISPF          */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'SYS2.RACFMENU'     /* RACF ISPF     */ +\n                         'SYS1.HRFMSG'      /* RACF ISPF     */ +\n                         'SYS1.DGTMLIB'           /* DFP/DFDSS     */ +\n                         'ISP.V4R2M0.SISPMENU')    /* ISPF          */\nALLOC FI(ISPTLIB) SHR DA( +\n                         'SYS2.RACFTABL'     /* RACF TABLES   */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'SYS1.DGTTLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFTLIB'    /* SDSF          */ +\n                         'ISP.V4R2M0.SISPTENU')    /* ISPF          */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'SYS2.RACFSLIB'     /* ISPF          */ +\n                         'ISP.V4R2M0.SISPSLIB')    /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST'      /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nPDF &PNL NEWAPPL(RACF)\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPMED  0101-01016-01016-1428-00085-00085-00000-RACFCLS\nPROC 0 PANEL() /* ISPMED */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREFIX\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) +\n    DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@MED)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(ISPLLIB) SHR DA( +\n                         'SYS1.ICEISPL')\nALLOC FI(ISPPLIB) SHR DA( +\n                         'SYS2.RACFPANL' /* RACF CHECKING */ +\n                         'SYS1.ICEISPP'           /* DFSORT        */ +\n                         'EOY.SEOYPENU' /* RACF CHECKING */ +\n                         'ISF.V1R5M0.SISFPLIB'  /* SDSF          */ +\n                         'SYS3.&SYSNAME..IOAIV410.PANEL' /* CONTROL */ +\n                         'SYS2.ISP.OPSPENU')   /* ISPF          */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'SYS1.ICEISPM'           /* DFSORT        */ +\n                         'EOY.SEOYMENU' /* RACF CHECKING */ +\n                         'SYS3.&SYSNAME..IOAIV410.ISMSG' /* CONTROL */ +\n                         'ISP.V4R2M0.SISPMENU')   /* ISPF          */\nALLOC FI(ISPTLIB) SHR DA( +\n                         '&DSNAME'                /*               */ +\n                         'SYS1.ICEISPT'           /* DFSORT        */ +\n                         'ISF.V1R5M0.SISFTLIB'  /* SDSF          */ +\n                         'EOY.SEOYTENU' /* RACF CHECKING */ +\n                         'SYS3.&SYSNAME..IOAIV410.PANEL' /* CONTROL */ +\n                         'ISP.V4R2M0.SISPTENU')   /* ISPF          */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'SYS1.ICEISPS'           /* DFSORT        */ +\n                         'ISP.V4R2M0.SISPSLIB')   /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* ISPF        */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n                         'SYS2.RACFCLST' /*              */ +\n                         'SYS2.CMDPROC' /* RACF CHECKING */ +\n                         'EOY.SEOYCLIB' /* RACF CHECKING */ +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB'     /* RACF ADMIN  */ +\n                         'SYS1.ICEISPC'           /* DFSORT        */ +\n                         'SYS3.&SYSNAME..IOAIV410.CLIST') /* CONTROL */\nERROR RETURN\nMURPHY\nPDF &PNL\nEX 'SYS2.RACFCLST(X1)'\n./ ADD NAME=#ISPMEDA 0101-01016-01016-1428-00080-00080-00000-RACFCLS\nPROC 0 PANEL()\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210656     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nFREE FI(SYSPROC)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@ADMN)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL')         /* RACF CHECKING */\nALLOC FI(ISPLLIB) SHR DA('ISP.V4R2M0.SISPLOAD')   /* ISPF          */\nALLOC FI(ISPPLIB) SHR DA('SYS2.RACFPANL'          /* RACF CHECKING */ +\n                         'ISF.V1R5M0.SISFPLIB')   /* SDSF          */\nALLOC FI(ISPMLIB) SHR DA('SYS2.RACFMENU'          /* RACF ISPF     */ +\n                         'SYS1.HRFMSG')          /* RACF ISPF     */\nALLOC FI(ISPTLIB) SHR DA('SYS2.RACFTABL'          /* RACF TABLES   */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'ISF.V1R5M0.SISFTLIB')   /* SDSF          */\nALLOC FI(ISPSLIB) SHR DA('SYS2.RACFSLIB')         /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST'          /* RACF ADMIN  */  +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nPDF &PNL NEWAPPL(RACF)\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPNET  0101-01016-01016-1428-00078-00078-00000-RACFCLS\nPROC 0 PANEL()\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREFIX\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL,ISRCFIL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) +\n     FI(ISPPROF)   DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@NET)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(ISPLLIB) SHR DA( +\n                         'SYS1.ICEISPL'           /* DFSORT        */ +\n                         'SYS2.TSPRINT.APFLIB'    /* TSP    */ +\n                         'SYS1.DGTLLIB'           /* DFP/DFDSS     */ +\n                         'ISP.V4R2M0.SISPLOAD')    /* ISPF      */\nALLOC FI(ISPPLIB) SHR DA(                         /* SPFNET        */ +\n                         'SYS2.RACFPANL'     /* CUSTOM        */ +\n                         'SYS2.ISP.NETPENU'      /* CUSTOM        */ +\n                         'SYS1.ICEISPP'           /* DFSORT        */ +\n                         'SYS1.DGTPLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFPLIB')    /* SDSF      */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'SYS1.ICEISPM'           /* DFSORT        */ +\n                         'SYS1.DGTMLIB'           /* DFP/DFDSS     */ +\n                         'ISP.V4R2M0.SISPMENU')    /* ISPF      */\nALLOC FI(ISPTLIB) SHR DA( +\n                         '&DSNAME'                                    +\n                         'SYS1.ICEISPT'           /* DFSORT        */ +\n                         'SYS1.DGTTLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFTLIB'     /* SDSF     */ +\n                         'ISP.V4R2M0.SISPTENU')    /* ISPF      */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'SYS1.ICEISPS'           /* DFSORT        */ +\n                         'SYS1.DGTSLIB'           /* DFDSS         */ +\n                         'ISP.V4R2M0.SISPSLIB')    /* ISPF      */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n                         'SYS2.RACFCLST'     /* RACF CHECKING */ +\n      /*                 'SYS2.CMDPROC'                       */ +\n                         'SYS1.ICEISPC'           /* DFSORT        */ +\n                         'SYS1.DGTCLIB')          /* DFDSS         */\nERROR RETURN\nMURPHY\nPDF &PNL\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPNETA 0101-01016-01016-1428-00080-00080-00000-RACFCLS\nPROC 0 PANEL()\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210656     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nFREE FI(SYSPROC)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@ADMN)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL')         /* RACF CHECKING */\nALLOC FI(ISPLLIB) SHR DA('ISP.V4R2M0.SISPLOAD')   /* ISPF          */\nALLOC FI(ISPPLIB) SHR DA('SYS2.RACFPANL'          /* RACF CHECKING */ +\n                         'ISF.V1R5M0.SISFPLIB')   /* SDSF          */\nALLOC FI(ISPMLIB) SHR DA('SYS2.RACFMENU'          /* RACF ISPF     */ +\n                         'SYS1.HRFMSG')          /* RACF ISPF     */\nALLOC FI(ISPTLIB) SHR DA('SYS2.RACFTABL'          /* RACF TABLES   */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'ISF.V1R5M0.SISFTLIB')   /* SDSF          */\nALLOC FI(ISPSLIB) SHR DA('SYS2.RACFSLIB')         /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST'          /* RACF ADMIN  */  +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nPDF &PNL NEWAPPL(RACF)\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPOPS  0101-01016-01016-1428-00119-00119-00000-RACFCLS\nPROC 0 PANEL()   /* ISPOPS */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    FREE FI(ISPCRTE)\n    CONTROL MSG\n    ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) USING(ISPCRTE) +\n        FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      FREE FI(ISPCRTE)\n      EXIT CODE(12)\n     END\n    FREE FI(ISPCRTE)\n  END\nCONTROL MSG\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@OPS)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nERROR RETURN\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\n/* ALLOC FI(SMPTABL) SHR DA('&DSNAME.')  */\nALLOC FI(ISPLLIB) SHR DA( +\n/*  'SYS1.DFQLLIB'                                   DFHSM       */  +\n    'SYS1.ICEISPL'                                /* DFSORT      */  +\n    'SYS1.DGTLLIB'                                /* DFP/DFDSS   */  +\n/*  'DIT.V1R1M0.SDITLOAD'                            DITTO       */  +\n/*  'DELPHI.V221.CMDLOAD'                            DELPHI      */  +\n    'SYS2.TSPRINT.APFLIB'               /* DELPHI      */ +\n/*  'SDF150.SDFLOAD')                                DELPHI      */ +\n/*  'SYS2.VPS.VPS.R62.TSO.LOAD')                 /*  VPS         */\nALLOC FI(ISPPLIB) SHR DA( +\n    'ISF.V1R5M0.SISFPLIB'                         /* SDSF        */  +\n    'SYS2.RACFPANL'                               /* CUSTOM      */  +\n    'SYS2.ISP.OPSPENU'                         /* ISPF        */  +\n    'SYS3.&SHRNAME..IOAIV410.PANEL'               /* IOA         */  +\n/*  'SYS2.ISPPLIB'                                   CUSTOM      */  +\n/*  'SYS1.DFQPLIB'                                   DFHSM       */  +\n    'SYS1.SERBPENU'                              /*  RMFIII      */  +\n/*  'SYS1.SBPXPENU'                                  OMVS        */  +\n    'SYS1.ICEISPP'                                /* DFSORT      */  +\n    'SYS1.DGTPLIB'                                /* DFP/DFDSS   */  +\n/*  'SYS1.SBLSPNL0'                                  IPCS        */  +\n    'EOY.SEOYPENU')                               /* BOOKMANAGER */\nALLOC FI(ISPMLIB) SHR DA( +\n    'ISP.V4R2M0.SISPMENU'                         /* ISPF        */  +\n    'ISF.V1R5M0.SISFMLIB'                         /* SDSF        */  +\n/*  'SYS1.DFQMLIB'                                   DFHSM       */  +\n/*  'SYS1.SBPXMENU'                                  OMVS        */  +\n    'SYS1.SERBMENU'                               /* RMFIII      */  +\n    'SYS1.ICEISPM'                                /* DFSORT      */  +\n    'SYS1.DGTMLIB'                                /* DFP/DFDSS   */  +\n/*  'SYS1.SBLSMSG0'                                  IPCS        */  +\n/*  'SYS2.ISPMENU'                                   CUSTOM      */  +\n    'EDC.V2R2M0.SEDCMSGP'                         /* C/370       */  +\n    'EOY.SEOYMENU'                                /* BOOKMANAGER */  +\n/*  'DELPHI.V221.MLIB'                               DELPHI      */  +\n    'SYS3.&SHRNAME..IOAIV410.ISMSG')              /* IOA         */\nALLOC FI(ISPTLIB) SHR DA('&DSNAME' +\n    'ISF.V1R5M0.SISFTLIB'                         /* SDSF        */  +\n    'SYS1.SERBTENU'                               /* RMFIII      */  +\n/*  'SYS1.SBPXTENU'                                  OMVS        */  +\n    'SYS1.ICEISPT'                                /* DFSORT      */  +\n    'SYS1.DGTTLIB'                                /* DFP/DFDSS   */  +\n/*  'SYS1.SBLSTBL0'                                  IPCS        */  +\n    'EOY.SEOYTENU'                                /* BOOKMANAGER */  +\n/*  'DELPHI.V221.CMDTAB'                             DELPHI      */  +\n    'SYS3.&SHRNAME..IOAIV410.TLIB'                /* IOA         */  +\n    'ISP.V4R2M0.SISPTENU')                        /* ISPF        */\nALLOC FI(ISPSLIB) SHR DA( +\n/*  'SYS1.SBLSKEL0'                                  IPCS        */  +\n    'SYS1.ICEISPS'                                /* DFSORT      */  +\n    'SYS1.DGTSLIB'                                /* DFDSS       */  +\n    'ISP.V4R2M0.SISPSLIB')                        /* ISPF        */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n    'ISP.V4R2M0.SISPEXEC'                         /* RACF ADMIN  */ +\n    'ISP.V4R2M0.SISPCLIB'                         /* RACF ADMIN  */ +\n    'SYS2.RACFCLST'                              /* CUSTOMIZED  */  +\n    'SYS2.CMDPROC'                               /* CUSTOMIZED  */  +\n/*  'SYS1.SBLSCLI0'                                 IPCS        */  +\n/*  'SYS1.SBPXEXEC'                                 OMVS        */  +\n    'SYS1.ICEISPC'                               /* DFSORT      */  +\n    'SYS1.DGTCLIB'                               /* DFDSS       */  +\n    'SYS1.SERBCLS'                               /* RMFIII      */  +\n    'EDC.V2R2M0.SEDCLIST'                        /* C/370       */  +\n    'EOY.SEOYCLIB'                               /* BOOKMANAGER */  +\n    'SYS3.&SHRNAME..IOAIV410.CLIST')             /* IOA         */\n/*  'SDF2.V1R4M0.SDGICMD') */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nERROR RETURN\nMURPHY\nPDF &PNL\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPOPSA 0101-01016-01016-1428-00080-00080-00000-RACFCLS\nPROC 0 PANEL()\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210656     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nFREE FI(SYSPROC)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@ADMN)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL') /* RACFCHECKING */\nALLOC FI(ISPLLIB) SHR DA('ISP.V4R2M0.SISPLOAD')   /* ISPF          */\nALLOC FI(ISPPLIB) SHR DA('SYS2.RACFPANL' /* RACFCHECKING */ +\n                         'ISF.V1R5M0.SISFPLIB')   /* SDSF          */\nALLOC FI(ISPMLIB) SHR DA('SYS2.RACFMENU' /* RACFISPF     */ +\n                         'SYS1.HRFMSG') /* RACFISPF     */\nALLOC FI(ISPTLIB) SHR DA('SYS2.RACFTABL' /* RACFTABLES   */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'ISF.V1R5M0.SISFTLIB')   /* SDSF          */\nALLOC FI(ISPSLIB) SHR DA('SYS2.RACFSLIB') /* ISPF        */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST' /* RACF ADMIN */  +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nPDF &PNL NEWAPPL(RACF)\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPPOL  0101-01016-01016-1428-00085-00085-00000-RACFCLS\nPROC 0 PANEL()    /* ISPPOL */\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU EXPERIENCE ANY PROBLEMS WITH THIS|)\nSET M3=&STR(               | USERIS, PLEASE CALL (012) 4210000       |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         EXT - 120656        |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREFIX\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) +\n    DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@POL)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(ISPPLIB) SHR DA( +\n                         'SYS2.RACFPANL'     /* RACF CHECKING */ +\n                         'ISF.V1R5M0.SISFPLIB'   /* SDSF          */ +\n                         'ISP.V4R2M0.SISPPENU')   /* ISPF          */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'ISP.V4R2M0.SISPMENU')   /* ISPF          */\nALLOC FI(ISPTLIB) SHR DA( +\n                         '&DSNAME'                /*               */ +\n                         'ISF.V1R5M0.SISFTLIB'   /* SDSF          */ +\n                         'ISP.V4R2M0.SISPTENU')   /* ISPF          */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'ISP.V4R2M0.SISPSLIB')   /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* ISPF        */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n     'SYS2.RACFCLST' +\n     'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n     'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nMURPHY\nPDF &PNL\nEX 'SYS2.RACFCLST(X1)'\n./ ADD NAME=#ISPPRG  0101-01016-01016-1428-00134-00134-00000-RACFCLS\nPROC 0 PANEL()   /*ISPPRG */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\n\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    FREE FI(ISPCRTE)\n    CONTROL MSG\n    ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) USING(ISPCRTE) +\n        FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      FREE FI(ISPCRTE)\n      EXIT CODE(12)\n     END\n    FREE FI(ISPCRTE)\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@PRG)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(ISPLLIB) SHR DA( +\n                         'MAINT.&SHRNAME..LIVE.LOAD' /* IN HOUSE   */ +\n                         'SYS1.ICEISPL'           /* DFSORT        */ +\n                         'SYS1.DGTLLIB'           /* DFP/DFDSS     */ +\n                      /* 'SDF150.SDFLOAD'            SDF           */ +\n                         'DELPHI.V221.CMDLOAD'    /* DELPHI        */ +\n                         'SYS2.TSPRINT.APFLIB'    /* DELPHI        */ +\n/*                       'SYS2.VPS.VPS.R62.TSO.LOAD' /*  VPS       */ +\n                         'ORA.V71C.CMDLOAD')      /* ORACLE        */\nALLOC FI(ISPPLIB) SHR DA( +\n                         'SYS2.LMF.PLIB'          /* IN HOUSE LMF  */ +\n                         'SYS2.ISP.PRGPENU'       /* ISPF          */ +\n                         'SYS2.RACFPANL'     /*               */ +\n                         'MAINT.LIVE.PLIB'        /* IN HOUSE      */ +\n                         'SYS1.ICEISPP'           /* DFSORT        */ +\n                         'SYS1.DGTPLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFPLIB'    /* SDSF          */ +\n                         'DELPHI.V221.PLIB'       /* DELPHI        */ +\n                         'SYS3.&SHRNAME..IOAIV410.PANEL' /* IOA    */ +\n                         'EOY.SEOYPENU')          /* BOOKMANAGER   */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'MAINT.LIVE.MLIB'        /* INHOUSE       */ +\n                         'ISP.V4R2M0.SISPMENU'    /* INHOUSE       */ +\n                         'SYS1.ICEISPM'           /* DFSORT        */ +\n                         'SYS1.DGTMLIB'           /* DFP/DFDSS     */ +\n                         'DELPHI.V221.MLIB'       /* DELPHI        */ +\n                         'EDC.V2R2M0.SEDCMSGP'    /* C/370         */ +\n                         'EOY.SEOYMENU'           /* BOOKMANAGER   */ +\n                         'SYS3.&SHRNAME..IOAIV410.ISMSG' /* IOA    */ +\n                         'ISP.V4R2M0.SISPMENU')   /* ISPF          */\nALLOC FI(ISPTLIB) SHR DA( +\n                         '&DSNAME'                /*               */ +\n                         'SYS1.ICEISPT'           /* DFSORT        */ +\n                         'SYS1.DGTTLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFTLIB'    /* SDSF          */ +\n                         'DELPHI.V221.CMDTAB'     /* DELPHI        */ +\n                         'EOY.SEOYTENU'           /* BOOKMANAGER   */ +\n                         'SYS3.&SHRNAME..IOAIV410.TLIB' /* IOA     */ +\n                         'ISP.V4R2M0.SISPTENU')   /* ISPF          */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'MAINT.LIVE.SLIB'        /* IN-HOUSE      */ +\n                         'SYS1.ICEISPS'           /* DFSORT        */ +\n                         'SYS1.DGTSLIB'           /* DFDSS         */ +\n                         'ISP.V4R2M0.SISPSLIB')   /* ISPF          */\nALLOC FI(ISRCFIL) SHR DA('SYSA.SPF.CFIL')         /* ISPFLMF       */\n /* ALLOC FI(DVDMSL)  SHR DA('SDF150.MSL')           SDF 150 */\n /* ALLOC FI(DVDMSLP) SHR DA('SDF150.MSLP')          SDF 150 */\n /* ALLOC FI(DVDMSLT) SHR DA('SDF150.MSLT')          SDF 150 */\n /* ALLOC FI(DVDTML)  SHR DA('SDF150.TML')           SDF 150 */\n /* ALLOC FI(DVDITF)  SHR DA('SDF150.ITF')           SDF 150 */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n                         'SYS2.RACFCLST'          /* RACF CHECKING */ +\n                         'SYS2.CMDPROC'           /* ORACLE + LMF  */ +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB'     /* RACF ADMIN  */ +\n                         'SYS1.ICEISPC'           /* DFSORT        */ +\n                         'SYS1.DGTCLIB'           /* DFDSS         */ +\n                         'SDF2.V1R4M0.SDGICMD'    /* SDF2          */ +\n                         'EDC.V2R2M0.SEDCLIST'    /* C/370         */ +\n                         'EOY.SEOYCLIB'           /* BOOKMANAGER   */ +\n                         'SYS3.&SHRNAME..IOAIV410.CLIST') /* IOA   */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nERROR RETURN\nMURPHY\nWRITE\nWRITE\nWRITE NB NB NB NB NB\nWRITE VAN JULLE DATASTELLE SE NAME HET VERANDER AGV NUWE MVS WEERGAWE\nWRITE\nWRITE DIE NUWE NAME SAL WEES :\nWRITE\nWRITE USERID.<<PRDC>>.JCL.LIB\nWRITE\nIF &SYSUID = PRG2053 THEN +\nDO\n  PDF PANEL(ISP@NAV)\n  EX 'SYS2.RACFCLST(X)'\nEND\nELSE +\n PDF &PNL\nEX 'SYS2.RACFCLST(X1)'\n./ ADD NAME=#ISPPRGA 0101-01016-01016-1428-00080-00080-00000-RACFCLS\nPROC 0 PANEL()\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210656     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nFREE FI(SYSPROC)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@PRGA)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL')         /* RACF CHECKING */\nALLOC FI(ISPLLIB) SHR DA('ISP.V4R2M0.SISPLOAD')   /* ISPF          */\nALLOC FI(ISPPLIB) SHR DA('SYS2.RACFPANL'          /* RACF CHECKING */ +\n                         'ISF.V1R5M0.SISFPLIB')   /* SDSF          */\nALLOC FI(ISPMLIB) SHR DA('SYS2.RACFMENU'          /* RACF ISPF     */ +\n                         'SYS1.HRFMSG')          /* RACF ISPF     */\nALLOC FI(ISPTLIB) SHR DA('SYS2.RACFTABL'          /* RACF TABLES   */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'ISF.V1R5M0.SISFTLIB')   /* SDSF          */\nALLOC FI(ISPSLIB) SHR DA('SYS2.RACFSLIB')         /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST'          /* RACF ADMIN  */  +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nPDF &PNL NEWAPPL(RACF)\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPRADA 0101-01016-01016-1428-00080-00080-00000-RACFCLS\nPROC 0 PANEL()\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210656     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nFREE FI(SYSPROC)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@ADMN)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL')         /* RACF CHECKING */\nALLOC FI(ISPLLIB) SHR DA('ISP.V4R2M0.SISPLOAD')   /* ISPF          */\nALLOC FI(ISPPLIB) SHR DA('SYS2.RACFPANL'          /* RACF CHECKING */ +\n                         'ISF.V1R5M0.SISFPLIB')   /* SDSF          */\nALLOC FI(ISPMLIB) SHR DA('SYS2.RACFMENU'          /* RACF ISPF     */ +\n                         'SYS1.HRFMSG')          /* RACF ISPF     */\nALLOC FI(ISPTLIB) SHR DA('SYS2.RACFTABL'          /* RACF TABLES   */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'ISF.V1R5M0.SISFTLIB')   /* SDSF          */\nALLOC FI(ISPSLIB) SHR DA('SYS2.RACFSLIB')         /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST'          /* RACF ADMIN  */  +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nPDF &PNL NEWAPPL(RACF)\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=#ISPTHE  0101-01016-01016-1428-00095-00095-00000-RACFCLS\nPROC 0 PANEL()   /* ISPTHE */\n/*********************************************************************/\n/* VHK @JST ADMIN                                                    */\n/*********************************************************************/\nSET M1=&STR(               +-----------------------------------------+)\nSET M2=&STR(               | IF YOU HAVE ANY PROBLEMS ADMINISTRATING |)\nSET M3=&STR(               | USER IDS, PLEASE CALL                   |)\nSET M4=&STR(               |                                         |)\nSET M5=&STR(               | EDWARD ROSS         (012) - 4210656     |)\nSET M6=&STR(               +-----------------------------------------+)\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE &M1\nWRITE &M2\nWRITE &M3\nWRITE &M4\nWRITE &M5\nWRITE &M6\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREF\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2)  +\n          DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@THE)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nALLOC FI(ISPTABL) SHR DA('SYS2.RACFTABL')    /* RACF CHECKING */\nALLOC FI(ISPLLIB) SHR DA( +\n                         'ISP.V4R2M0.SISPLOAD')   /* ISPF/PDF      */\nALLOC FI(ISPPLIB) SHR DA( +\n                         'SYS2.RACFPANL'     /* RACF ADMIN    */ +\n                         'SYS1.DGTPLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFPLIB'    /* SDSF          */ +\n                         'ISP.V4R2M0.SISPPENU')    /* ISPF          */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'SYS2.RACFMENU'     /* RACF ISPF     */ +\n                         'SYS1.HRFMSG'      /* RACF ISPF     */ +\n                         'SYS1.DGTMLIB'           /* DFP/DFDSS     */ +\n                         'ISP.V4R2M0.SISPMENU')   /* ISPF/PDF      */\nALLOC FI(ISPTLIB) SHR DA( +\n                         'SYS2.RACFTABL'     /* RACF TABLES   */ +\n                         '&DSNAME'                /* USER PROFILE  */ +\n                         'SYS1.DGTTLIB'           /* DFP/DFDSS     */ +\n                         'ISF.V1R5M0.SISFTLIB')   /* SDSF          */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'SYS2.RACFSLIB'     /* ISPF          */ +\n                         'ISP.V4R2M0.SISPSENU'    /* ISPF/PDF      */ +\n                         'ISP.V4R2M0.SISPSLIB')   /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA('SYS2.RACFCLST'     /* RACF ADMIN  */  +\n                         'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n                         'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nERROR RETURN\nPDF &PNL NEWAPPL(RACF)\nEX 'SYS2.RACFCLST(X)'\n./ ADD NAME=BLSCDDIR 0101-01016-01016-1428-00108-00108-00000-RACFCLS\n        /*** Start of specifications for BLSCDDIR ********************/\n        /*                                                           */\n        /* $MAC(BLSCDDIR) COMP(SC132) PROD(HBB4410): Dump directory  */\n        /*                allocation CLIST for IPCS                  */\n        /*                                                           */\n        /* PROPRIETARY STATEMENT:                                    */\n        /*                                                           */\n        /* LICENSED MATERIALS - PROPERTY OF IBM                      */\n        /* THIS MACRO IS \"RESTRICTED MATERIALS OF IBM\"               */\n        /* 5685-001 (C) COPYRIGHT IBM CORP. 1988,1990                */\n        /* SEE COPYRIGHT INSTRUCTIONS                                */\n        /*                                                           */\n        /* STATUS = HBB4410                                          */\n        /*                                                           */\n        /* EXTERNAL CLASSIFICATION: NONE                             */\n        /* END OF EXTERNAL CLASSIFICATION:                           */\n        /*                                                           */\n        /* --------------------------------------------------------- */\n        /*                                                           */\n        /* CHANGE ACTIVITY =                                         */\n        /*                                                           */\n        /*   Products = none                                         */\n        /*                                                           */\n        /* --------------------------------------------------------- */\n        /*                                                           */\n        /*   Design changes =                                        */\n        /* $D0=DC40302,HBB3310,87210,PDE1: Simplify dynamic creation */\n        /*     of an IPCS dump directory.                            */\n        /* $D1=DC40302,HBB3310,87210,PDE1: Same as D0, copied code   */\n        /*                                                           */\n        /* --------------------------------------------------------- */\n        /*                                                           */\n        /*   PTMs =                                                  */\n        /*    =PEO3797,HBB4410,900404,PDAX: Qualify \"I\" and \"D\" as a */\n        /*     separate qualifier.                                   */\n        /*                                                           */\n        /* --------------------------------------------------------- */\n        /*                                                           */\n        /*   Maintenance =                                           */\n        /* $01=OY62871,HBB3310,93209,PDE1: Do not specify control    */\n        /*     interval size to the VSAM DEFINE command.             */\n        /* $02=OW13537,HBB4430,95150,PDE1: Unfortunately, VSAM       */\n        /*     DEFINE does not choose well when given free rein for  */\n        /*     IPCS dump directory index CISIZE                      */\n        /* $03=OW13537,HBB4430,95150,PDE1: Support strategic DFSMS   */\n        /*     classes:  DATACLAS, MGMTCLAS and STORCLAS             */\n        /*                                                           */\n        /*** End of specifications for BLSCDDIR **********************/\n        PROC 0 DATACLAS() DSNAME() FILE() MGMTCLAS() NDXCISZ(4096) +\n            RECORDS() STORCLAS() VOLUME() /*                     @02C*/\n        CONTROL LIST ASIS           /*                           @D1P*/\n        IF &LENGTH(&DSNAME)=0 THEN +\n          IF &LENGTH(&SYSPREF)=0 THEN SET DSNAME=&SYSUID..DDIR\n          ELSE SET DSNAME=&SYSPREF..DDIR\n        IF &LENGTH(&FILE)=0 THEN SET FILE=IPCSDDIR\n        WRITE Dump directory name '&DSNAME.' will be used\n        SET DSNSTATUS=&SYSDSN('&DSNAME.')\n        IF &DSNSTATUS=&STR(DATASET NOT FOUND) THEN DO /* No directory*/\n          /*=========================================================*/\n          /* Define a new dump directory                             */\n          /*=========================================================*/\n          IF &LENGTH(&RECORDS)=0 THEN SET RECORDS=5000\n          WRITE Dump directory space will be allocated in units of +\n                &RECORDS records\n          IF &LENGTH(&DATACLAS)>0 THEN /* Data class specified   @03A*/+\n            SET CLASS=DATACLASS(&DATACLAS) /*                    @03A*/\n          IF &LENGTH(&MGMTCLAS)>0 THEN /* Management class       @03A*/+\n            SET CLASS=&CLASS MANAGEMENTCLASS(&MGMTCLAS) /*       @03A*/\n          IF &LENGTH(&STORCLAS)>0 THEN /* Storage class          @03A*/+\n            SET CLASS=&CLASS STORAGECLASS(&STORCLAS) /*          @03A*/\n          IF &LENGTH(&CLASS)=0 AND &LENGTH(&VOLUME)=0 THEN /*    @03C*/+\n            SET VOLUME=MVSF05\n          IF &LENGTH(&VOLUME)>0 THEN DO /*                       @03A*/\n            SET CLASS=&CLASS VOLUME(&VOLUME) /*                  @03A*/\n            WRITE Dump directory space will be allocated on volume +\n                  &VOLUME\n            END                     /*                           @03A*/\n          DEFINE CLUSTER(NAME('&DSNAME.') &CLASS INDEXED +\n              REUSE SHAREOPTIONS(1,3)) +\n              INDEX(NAME('&DSNAME..I') RECORDS(10,10) +\n              CONTROLINTERVALSIZE(&NDXCISZ)) +\n              DATA(NAME('&DSNAME..D') RECORDS(&RECORDS,&RECORDS) +\n              KEYS(128,0) RECORDSIZE(384 3072)) /*               @02C*/\n          IF &LASTCC>=12 THEN DO    /* Dump directory not defined    */\n            WRITE DEFINE failed for dump directory '&DSNAME.'\n            EXIT                    /*                           @D1P*/\n            END                     /* Dump directory not defined    */\n          /*=========================================================*/\n          /* Initialize the dump directory just defined              */\n          /*=========================================================*/\n          IPCSDDIR '&DSNAME'\n          IF &LASTCC>=12 THEN DO    /* Dump directory not usable     */\n            WRITE Initialization failed for dump directory '&DSNAME.'\n            EXIT                    /*                           @D1P*/\n            END                     /* Dump directory not usable     */\n          SET DSNSTATUS=OK\n          END                       /* No directory                  */\n        IF &DSNSTATUS^=OK THEN DO   /* Do not attempt allocation     */\n          WRITE Dump directory '&DSNAME.' is not usable - &DSNSTATUS\n          EXIT CODE(16)\n          END                       /* Do not attempt allocation     */\n        /*===========================================================*/\n        /* Allocate the dump directory for use by IPCS               */\n        /*===========================================================*/\n        ALLOCATE FILE(&FILE) REUSE DSNAME('&DSNAME.') SHR\n        IF &LASTCC>=12 THEN WRITE Unable to allocate dump directory +\n              '&DSNAME.'\n        ELSE WRITE Dump directory '&DSNAME.' allocated to FILE(&FILE)\n./ ADD NAME=BM       0101-01016-01016-1428-00005-00005-00000-RACFCLS\nISREDIT MACRO\n   ISREDIT C X'B4' X'40' ALL\n   ISREDIT C X'CA' X'60' ALL\n   ISREDIT C P'.' ' ' ALL\nEXIT CODE(0)\n./ ADD NAME=COMALST  0101-01016-01016-1428-00027-00027-00000-RACFCLS\nPROC 0 PRINTER() OUTCLASS()\nWRITE\nWRITE\nWRITE\nWRITE\nWRITE LIST ALL RACF USERS IN YOUR GROUP\nSET LYN = &STR(---------------------------------)\nWRITE &LYN\nWRITE\nWRITE JOBNAME            : &SYSUID.N\nWRITE OUTPUT DIRECTED TO : &PRINTER\nWRITE PRINTCLASS         : &OUTCLASS\nWRITE\nSET SLSPRNT = &STR(/*ROUTE PRINT )\nSUBMIT * END($$)\n//&SYSUID.L JOB (1,REOPS,OPS,01),'USERID LIST',MSGCLASS=Z,\n//             NOTIFY=&SYSUID,CLASS=B\n//*************************************\n//*  PRINTS A LISTING OF ALL USERIDS  *\n//*************************************\n&SLSPRNT.&PRINTER\n//LISTING  EXEC PGM=IKJEFT01,DYNAMNBR=20,PARM=LSTALL\n//SYSEXEC  DD  DSN=SYS2.RACFCLST,DISP=SHR\n//SYSTSPRT DD  SYSOUT=&OUTCLASS\n//SYSTSIN  DD  DUMMY\n$$\nXXX:WRITE\n./ ADD NAME=COMPRESS 0101-01016-01016-1428-00014-00014-00000-RACFCLS\n//XXXXXXXC JOB (1,YYYYY,YYY,01),'COMPRESS',\n//             CLASS=A,MSGCLASS=V,NOTIFY=XXXXXXX\n//****************************************\n//** REPLACE \"XXXXXXX\" WITH YOUR USERID **\n//** REPLACE \"YYYYY\" WITH YOUR ACCT     **\n//** AND SUBMIT JOB TO COMPRESS YOUR    **\n//** OWN DATASET                        **\n//****************************************\n//STEP1    EXEC PGM=IEBCOPY\n//IN       DD DSN=XXXXXXX.JCL.LIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUT3   DD SPACE=(CYL,(2,1)),UNIT=SYSDA\n//SYSUT4   DD SPACE=(CYL,(2,1)),UNIT=SYSDA\n  COPY INDD=IN,OUTDD=IN\n./ ADD NAME=COMRES   0101-01016-01016-1428-00229-00229-00000-RACFCLS\n/* REXX */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' PSW ':' TERM\n PARSE VALUE ID WITH ID2 3 DUMMY\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 3 IDNR1\n PARSE VALUE ID WITH DUMMY 4 IDNR2\n PARSE VALUE ID WITH DUMMY 5 IDNR3\n \"ALLOC DA (MAINT.RACF.USER) F(OUSR) MOD\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD2 3 DUMMY\n IDNR = \"XXX\"\n IF DATATYPE(IDNR1,'N') = 1 THEN IDNR = IDNR1\n ELSE\n  IF DATATYPE(IDNR2,'N') = 1 THEN IDNR = IDNR2\n  ELSE\n   IF DATATYPE(IDNR3,'N') = 1 THEN IDNR = IDNR3\n\n IF DATATYPE(IDNR,'N') = 0 THEN CALL MSG2\n\n IF NAME <> '' THEN NM = \"'\"NAME\"'\"\n\n IF TERM = '' THEN CALL TERM_ERR\n\n\n /**********/\n /* GROUP  */\n /**********/\n PR. =''\n PR.DBA = \"SYS2\"\n PR.SYS = \"SYS2\"\n PR.PEN = \"PERSAL\"\n PR.PE1 = \"PERSAL1\"\n PR.PE2 = \"PERSAL2\"\n PR.PE3 = \"PERSAL3\"\n PR.PE4 = \"PERSAL4\"\n PR.PE5 = \"PERSAL5\"\n PR.PE6 = \"PERSAL6\"\n PR.PE7 = \"PERSAL7\"\n PR.PE8 = \"PERSAL8\"\n PR.PE9 = \"PERSAL9\"\n PR.NET = \"PERSAL\"\n PR.VAS = \"VAS\"\n PR.VA1 = \"VAS1\"\n PR.VA2 = \"VAS2\"\n PR.ASS = \"ASSUPOL\"\n PR.SR0 = \"SPESREK\"\n PR.PF0 = \"POLFIN\"\n PR.PF1 = \"POLFIN\"\n PR.PF2 = \"POLFIN\"\n PR.PF3 = \"POLFIN\"\n PR.POL = \"POLFIN\"\n PR.PRG = \"PROGRAMR\"\n PR.PER = \"PERSAL1\"\n PR.RAD = \"RADIOB\"\n\n /*************************************************************/\n /* MAXIMUM USERS FOR EVERY ADMINISTRATOR                     */\n /* THE FOURTH CHARACTER IS THE TEST CAHARACTER FOR EVERY ADM */\n /*************************************************************/\n MAX. = 0\n MAX.DBA = 10\n MAX.PEN = 9999\n MAX.PE1 = 9999\n MAX.PE2 = 9999\n MAX.PE3 = 9999\n MAX.PE4 = 9999\n MAX.PE5 = 9999\n MAX.PE6 = 9999\n MAX.PE7 = 9999\n MAX.PE8 = 9999\n MAX.PE9 = 9999\n MAX.NET = 9999\n MAX.VAS = 9999\n MAX.VA1 = 9999\n MAX.VA2 = 9999\n MAX.ASS = 9999\n MAX.SR0 = 9999\n MAX.PF0 = 9999\n MAX.PF1 = 9999\n MAX.PF2 = 9999\n MAX.PF3 = 9999\n MAX.POL = 9999\n MAX.PRG = 100\n MAX.PER = 200\n MAX.SYS = 5\n MAX.RAD = 20\n\n\n FLAG = Y\n IF IDNR <= 0 OR IDNR >= 9999 THEN CALL MSG1\n IF (AD2 <> \"SY\") | (AD2 <> \"DB\") | (AD2 <> \"PR\") THEN FLAG = N\n IF (AD2 = \"PE\") & ((ID2 = \"NE\") | (ID2 = \"PE\")) THEN FLAG = N\n ELSE\n  IF (AD2 = \"PO\") & ((ID2 = \"PO\") | (ID2 = \"PF\") | (ID2= \"SR\")) THEN\n   FLAG = N\n  ELSE\n   IF (AD2 <> ID2) THEN\n    IF FLAG = Y THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DBA\" THEN NOP\n  WHEN ID3 = \"PEN\" THEN NOP\n  WHEN ID3 = \"PE1\" THEN NOP\n  WHEN ID3 = \"PE2\" THEN NOP\n  WHEN ID3 = \"PE3\" THEN NOP\n  WHEN ID3 = \"PE4\" THEN NOP\n  WHEN ID3 = \"PE5\" THEN NOP\n  WHEN ID3 = \"PE6\" THEN NOP\n  WHEN ID3 = \"PE7\" THEN NOP\n  WHEN ID3 = \"PE8\" THEN NOP\n  WHEN ID3 = \"PE9\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"VAS\" THEN NOP\n  WHEN ID3 = \"VA1\" THEN NOP\n  WHEN ID3 = \"VA2\" THEN NOP\n  WHEN ID3 = \"ASS\" THEN NOP\n  WHEN ID3 = \"SR0\" THEN NOP\n  WHEN ID3 = \"PF0\" THEN NOP\n  WHEN ID3 = \"PF1\" THEN NOP\n  WHEN ID3 = \"PF2\" THEN NOP\n  WHEN ID3 = \"PF3\" THEN NOP\n  WHEN ID3 = \"POL\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n  WHEN ID3 = \"PER\" THEN NOP\n  WHEN ID3 = \"SYS\" THEN NOP\n  WHEN ID3 = \"RAD\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n IF IDNR > MAX.ID3 THEN CALL MSG3\n\n IF NAME <> '' THEN\n  ALT = '\"ALTUSER ('ID') NAME('NM') PASSWORD('PSW') RESUME\"'\n ELSE\n  ALT = '\"ALTUSER ('ID') PASSWORD('PSW') RESUME\"'\n\n IF IDNR <= MAX.ID3 THEN\n DO\n  MS = MSG('OFF')\n  INTERPRET ALT\n  IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   IF NAME <> '' THEN\n   SAY \"                       NAME        :\" NAME\n   SAY \"                       PASSWORD    :\" PSW\n   SAY \"                       TERMINAL    :\" TERM\n   SAY \"                       SUCCESSFULLY CHANGED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT CHANGED DUE TO CONDITION CODE\"\n   SAY \"                       IT IS POSSIBLE THAT \"ID\" DOES NOT EXIST\"\n  END\n EXIT\n CALL WRITE_TER\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n WRITE_TER:\n S1 = ID\n S2 = TERM\n OUT.=\"   \" S1 \" \" S2\n \"EXECIO 1 DISKW OUSR (STEM OUT.\"\n \"FREE FI(OUSR)\"\n\n  TERM_ERR: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 SPECIFY THE    \u00f8 \"\n  SAY \"                       \u00f8 TERMINAL ID    \u00f8 \"\n  SAY \"                       \u00f8 (T00?????) ... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"              +------------------------------------------+\"\n  SAY \"              \u00f8 YOU ARE NOT AUTHORIZED TO CHANGE THIS ID \u00f8\"\n  SAY \"              \u00f8                                          \u00f8\"\n  IF AD2 = \"PO\" THEN\n   SAY \"              \u00f8 ONLY PF**** OR POL*** ALLOWED            \u00f8\"\n  ELSE\n  IF AD2 = \"PE\" THEN\n   SAY \"              \u00f8 ONLY PE**** OR NET*** ALLOWED            \u00f8\"\n  ELSE\n   SAY \"              \u00f8 ONLY \"AD2\"**** ALLOWED                      \u00f8\"\n  SAY \"              +------------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n  MSG3: SAY \"\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"               \u00f8 INVALID USERID - NUMERIC VALUE TO LARGE \u00f8\"\n  SAY \"               \u00f8                                         \u00f8\"\n  SAY \"               \u00f8   PLEASE CALL YOUR SYSTEM PROGRAMMER    \u00f8\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"\"\n  EXIT\n./ ADD NAME=COMUADD  0101-01016-01016-1428-00234-00234-00000-RACFCLS\n/* REXX */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' PSW\n PARSE VALUE ID WITH ID2 3 DUMMY\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 3 IDNR1\n PARSE VALUE ID WITH DUMMY 4 IDNR2\n PARSE VALUE ID WITH DUMMY 5 IDNR3\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD2 3 DUMMY\n IDNR = \"XXX\"\n IF DATATYPE(IDNR1,'N') = 1 THEN IDNR = IDNR1\n ELSE\n  IF DATATYPE(IDNR2,'N') = 1 THEN IDNR = IDNR2\n  ELSE\n   IF DATATYPE(IDNR3,'N') = 1 THEN IDNR = IDNR3\n\n IF DATATYPE(IDNR,'N') = 0 THEN CALL MSG2\n\n NM = \"'\"NAME\"'\"\n\n\n /**********/\n /* GROUP  */\n /**********/\n PR. =''\n PR.DBA = \"SYS2\"\n PR.PEN = \"PERSAL\"\n PR.PE1 = \"PERSAL1\"\n PR.PE2 = \"PERSAL2\"\n PR.PE3 = \"PERSAL3\"\n PR.PE4 = \"PERSAL4\"\n PR.PE5 = \"PERSAL5\"\n PR.PE6 = \"PERSAL6\"\n PR.PE7 = \"PERSAL7\"\n PR.PE8 = \"PERSAL8\"\n PR.PE9 = \"PERSAL9\"\n PR.NET = \"PERSAL\"\n PR.VAS = \"VAS\"\n PR.VA1 = \"VAS1\"\n PR.VA2 = \"VAS2\"\n PR.ASS = \"ASSUPOL\"\n PR.SR0 = \"SPESREK\"\n PR.PF0 = \"POLFIN\"\n PR.PF1 = \"POLFIN\"\n PR.PF2 = \"POLFIN\"\n PR.PF3 = \"POLFIN\"\n PR.POL = \"POLFIN\"\n PR.PRG = \"PROGRAMR\"\n PR.PER = \"PERSAL1\"\n PR.RAD = \"RADIOB\"\n\n\n /**********/\n /* OWNER  */\n /**********/\n OW. =''\n OW.DBA = \"SYS2\"\n OW.PEN = \"PERSAL\"\n OW.PE1 = \"PERSAL\"\n OW.PE2 = \"PERSAL\"\n OW.PE3 = \"PERSAL\"\n OW.PE4 = \"PERSAL\"\n OW.PE5 = \"PERSAL\"\n OW.PE6 = \"PERSAL\"\n OW.PE7 = \"PERSAL\"\n OW.PE8 = \"PERSAL\"\n OW.PE9 = \"PERSAL\"\n OW.NET = \"PERSAL\"\n OW.VAS = \"VAS\"\n OW.VA1 = \"VAS\"\n OW.VA2 = \"VAS\"\n OW.ASS = \"ASSUPOL\"\n OW.SR0 = \"SPESREK\"\n OW.PF0 = \"POLFIN\"\n OW.PF1 = \"POLFIN\"\n OW.PF2 = \"POLFIN\"\n OW.PF3 = \"POLFIN\"\n OW.POL = \"POLFIN\"\n OW.PRG = \"PROGRAMR\"\n OW.PER = \"PERSAL\"\n OW.RAD = \"RADIOB\"\n\n /*************************************************************/\n /* MAXIMUM USERS FOR EVERY ADMINISTRATOR                     */\n /* THE FOURTH CHARACTER IS THE TEST CAHARACTER FOR EVERY ADM */\n /*************************************************************/\n MAX. = 0\n MAX.DBA = 10\n MAX.PEN = 9999\n MAX.PE1 = 9999\n MAX.PE2 = 9999\n MAX.PE3 = 9999\n MAX.PE4 = 9999\n MAX.PE5 = 9999\n MAX.PE6 = 9999\n MAX.PE7 = 9999\n MAX.PE8 = 9999\n MAX.PE9 = 9999\n MAX.NET = 9999\n MAX.VAS = 9999\n MAX.VA1 = 9999\n MAX.VA2 = 9999\n MAX.ASS = 9999\n MAX.SR0 = 9999\n MAX.PF0 = 9999\n MAX.PF1 = 9999\n MAX.PF2 = 9999\n MAX.PF3 = 9999\n MAX.POL = 9999\n MAX.PRG = 100\n MAX.PER = 500\n MAX.RAD = 20\n\n FLAG = Y\n IF IDNR <= 0 OR IDNR >= 9999 THEN CALL MSG1\n IF (AD2 <> \"SY\") | (AD2 <> \"DB\") | (AD2 <> \"PR\") THEN FLAG = N\n IF (AD2 = \"PE\") & ((ID2 = \"NE\") | (ID2 = \"PE\")) THEN FLAG = N\n ELSE\n  IF (AD2 = \"PO\") & ((ID2 = \"PO\") | (ID2 = \"PF\") | (ID2= \"SR\")) THEN\n   FLAG = N\n  ELSE\n   IF (AD2 <> ID2) THEN\n    IF FLAG = Y THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DBA\" THEN NOP\n  WHEN ID3 = \"PEN\" THEN NOP\n  WHEN ID3 = \"PE1\" THEN NOP\n  WHEN ID3 = \"PE2\" THEN NOP\n  WHEN ID3 = \"PE3\" THEN NOP\n  WHEN ID3 = \"PE4\" THEN NOP\n  WHEN ID3 = \"PE5\" THEN NOP\n  WHEN ID3 = \"PE6\" THEN NOP\n  WHEN ID3 = \"PE7\" THEN NOP\n  WHEN ID3 = \"PE8\" THEN NOP\n  WHEN ID3 = \"PE9\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"ASS\" THEN NOP\n  WHEN ID3 = \"SR0\" THEN NOP\n  WHEN ID3 = \"PF0\" THEN NOP\n  WHEN ID3 = \"PF1\" THEN NOP\n  WHEN ID3 = \"PF2\" THEN NOP\n  WHEN ID3 = \"PF3\" THEN NOP\n  WHEN ID3 = \"POL\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n  WHEN ID3 = \"VAS\" THEN NOP\n  WHEN ID3 = \"VA1\" THEN NOP\n  WHEN ID3 = \"VA2\" THEN NOP\n  WHEN ID3 = \"PER\" THEN NOP\n  WHEN ID3 = \"RAD\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n IF IDNR > MAX.ID3 THEN CALL MSG3\n\n ADD = '\"ADDUSER ('ID') NAME('NM') DFLTGRP('PR.ID3')',\n        'PASSWORD('PSW')',\n        'OWNER('OW.ID3')\"'\n\n IF IDNR <= MAX.ID3 THEN\n DO\n  MS = MSG('OFF')\n  INTERPRET ADD\n  IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   SAY \"                       NAME        :\" NAME\n   SAY \"                       PASSWORD    :\" PSW\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY ADDED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT ADDED DUE TO CONDITION CODE\"\n   SAY \"                       IT IS POSSIBLE THAT \"ID\" ALREADY EXIST\"\n  END\n EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                         +----------------+ \"\n  SAY \"                         \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                         \u00f8                \u00f8 \"\n  SAY \"                         \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                         +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"               +---------------------------------------+\"\n  SAY \"               \u00f8 YOU ARE NOT AUTHORIZED TO ADD THIS ID \u00f8\"\n  SAY \"               \u00f8                                       \u00f8\"\n  IF AD2 = \"PO\" THEN\n   SAY \"               \u00f8 ONLY PF**** OR POL*** ALLOWED         \u00f8\"\n  ELSE\n  IF AD2 = \"PE\" THEN\n   SAY \"               \u00f8 ONLY PE**** OR NET*** ALLOWED         \u00f8\"\n  ELSE\n   SAY \"               \u00f8 ONLY \"AD2\"**** ALLOWED                   \u00f8\"\n  SAY \"               +---------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n  MSG3: SAY \"\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"               \u00f8 INVALID USERID - NUMERIC VALUE TO LARGE \u00f8\"\n  SAY \"               \u00f8                                         \u00f8\"\n  SAY \"               \u00f8   PLEASE CALL YOUR SYSTEM PROGRAMMER    \u00f8\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"\"\n  EXIT\n./ ADD NAME=COMUDEL  0101-01016-01016-1428-00201-00201-00000-RACFCLS\n/* REXX */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' PSW\n PARSE VALUE ID WITH ID2 3 DUMMY\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 3 IDNR1\n PARSE VALUE ID WITH DUMMY 4 IDNR2\n PARSE VALUE ID WITH DUMMY 5 IDNR3\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD2 3 DUMMY\n IDNR = \"XXX\"\n IF DATATYPE(IDNR1,'N') = 1 THEN IDNR = IDNR1\n ELSE\n  IF DATATYPE(IDNR2,'N') = 1 THEN IDNR = IDNR2\n  ELSE\n   IF DATATYPE(IDNR3,'N') = 1 THEN IDNR = IDNR3\n\n IF DATATYPE(IDNR,'N') = 0 THEN CALL MSG2\n\n IF NAME <> '' THEN NM = \"'\"NAME\"'\"\n\n\n /**********/\n /* GROUP  */\n /**********/\n PR. =''\n PR.DBA = \"SYS2\"\n PR.PEN = \"PERSAL\"\n PR.PE1 = \"PERSAL1\"\n PR.PE2 = \"PERSAL2\"\n PR.PE3 = \"PERSAL3\"\n PR.PE4 = \"PERSAL4\"\n PR.PE5 = \"PERSAL5\"\n PR.PE6 = \"PERSAL6\"\n PR.PE7 = \"PERSAL7\"\n PR.PE8 = \"PERSAL8\"\n PR.PE9 = \"PERSAL9\"\n PR.NET = \"PERSAL\"\n PR.VAS = \"VAS\"\n PR.VA1 = \"VAS1\"\n PR.VA2 = \"VAS2\"\n PR.ASS = \"ASSUPOL\"\n PR.SR0 = \"SPESREK\"\n PR.PF0 = \"POLFIN\"\n PR.PF1 = \"POLFIN\"\n PR.PF2 = \"POLFIN\"\n PR.PF3 = \"POLFIN\"\n PR.POL = \"POLFIN\"\n PR.PRG = \"PROGRAMR\"\n PR.PER = \"PERSAL1\"\n PR.RAD = \"RADIOB\"\n\n /*************************************************************/\n /* MAXIMUM USERS FOR EVERY ADMINISTRATOR                     */\n /* THE FOURTH CHARACTER IS THE TEST CAHARACTER FOR EVERY ADM */\n /*************************************************************/\n MAX. = 0\n MAX.DBA = 10\n MAX.PEN = 9999\n MAX.PE1 = 9999\n MAX.PE2 = 9999\n MAX.PE3 = 9999\n MAX.PE4 = 9999\n MAX.PE5 = 9999\n MAX.PE6 = 9999\n MAX.PE7 = 9999\n MAX.PE8 = 9999\n MAX.PE9 = 9999\n MAX.NET = 9999\n MAX.VAS = 9999\n MAX.VA1 = 9999\n MAX.VA2 = 9999\n MAX.ASS = 9999\n MAX.SR0 = 9999\n MAX.PF0 = 9999\n MAX.PF1 = 9999\n MAX.PF2 = 9999\n MAX.PF3 = 9999\n MAX.POL = 9999\n MAX.PRG = 50\n MAX.PER = 200\n MAX.RAD = 20\n\n\n\n FLAG = Y\n IF IDNR <= 0 OR IDNR >= 9999 THEN CALL MSG1\n IF (AD2 <> \"SY\") | (AD2 <> \"DB\") | (AD2 <> \"PR\") THEN FLAG = N\n IF (AD2 = \"PE\") & ((ID2 = \"NE\") | (ID2 = \"PE\")) THEN FLAG = N\n ELSE\n  IF (AD2 = \"PO\") & ((ID2 = \"PO\") | (ID2 = \"PF\") | (ID2= \"SR\")) THEN\n   FLAG = N\n  ELSE\n   IF (AD2 <> ID2) THEN\n    IF FLAG = Y THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DBA\" THEN NOP\n  WHEN ID3 = \"PEN\" THEN NOP\n  WHEN ID3 = \"PE1\" THEN NOP\n  WHEN ID3 = \"PE2\" THEN NOP\n  WHEN ID3 = \"PE3\" THEN NOP\n  WHEN ID3 = \"PE4\" THEN NOP\n  WHEN ID3 = \"PE5\" THEN NOP\n  WHEN ID3 = \"PE6\" THEN NOP\n  WHEN ID3 = \"PE7\" THEN NOP\n  WHEN ID3 = \"PE8\" THEN NOP\n  WHEN ID3 = \"PE9\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"VAS\" THEN NOP\n  WHEN ID3 = \"VA1\" THEN NOP\n  WHEN ID3 = \"VA2\" THEN NOP\n  WHEN ID3 = \"ASS\" THEN NOP\n  WHEN ID3 = \"SR0\" THEN NOP\n  WHEN ID3 = \"PF0\" THEN NOP\n  WHEN ID3 = \"PF1\" THEN NOP\n  WHEN ID3 = \"PF2\" THEN NOP\n  WHEN ID3 = \"PF3\" THEN NOP\n  WHEN ID3 = \"POL\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n  WHEN ID3 = \"PER\" THEN NOP\n  WHEN ID3 = \"RAD\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n IF IDNR > MAX.ID3 THEN CALL MSG3\n\n  DEL = '\"DELUSER ('ID')\"'\n\n IF IDNR <= MAX.ID3 THEN\n DO\n  MS = MSG('OFF')\n  INTERPRET DEL\n  IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY DELETED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT DELETED DUE TO CONDITION CODE\"\n   SAY \"                       IT IS POSSIBLE THAT \"ID\" DOES NOT EXIST\"\n  END\n EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"              +------------------------------------------+\"\n  SAY \"              \u00f8 YOU ARE NOT AUTHORIZED TO DELETE THIS ID \u00f8\"\n  SAY \"              \u00f8                                          \u00f8\"\n  IF AD2 = \"PO\" THEN\n   SAY \"              \u00f8 ONLY PF**** OR POL*** ALLOWED            \u00f8\"\n  ELSE\n  IF AD2 = \"PE\" THEN\n   SAY \"              \u00f8 ONLY PE**** OR NET*** ALLOWED            \u00f8\"\n  ELSE\n   SAY \"              \u00f8 ONLY \"AD2\"**** ALLOWED                      \u00f8\"\n  SAY \"              +------------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n  MSG3: SAY \"\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"               \u00f8 INVALID USERID - NUMERIC VALUE TO LARGE \u00f8\"\n  SAY \"               \u00f8                                         \u00f8\"\n  SAY \"               \u00f8   PLEASE CALL YOUR SYSTEM PROGRAMMER    \u00f8\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"\"\n  EXIT\n./ ADD NAME=COMULST  0101-01016-01016-1428-00181-00181-00000-RACFCLS\n/* REXX */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' PSW\n PARSE VALUE ID WITH ID2 3 DUMMY\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 3 IDNR1\n PARSE VALUE ID WITH DUMMY 4 IDNR2\n PARSE VALUE ID WITH DUMMY 5 IDNR3\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD2 3 DUMMY\n IDNR = \"XXX\"\n IF DATATYPE(IDNR1,'N') = 1 THEN IDNR = IDNR1\n ELSE\n  IF DATATYPE(IDNR2,'N') = 1 THEN IDNR = IDNR2\n  ELSE\n   IF DATATYPE(IDNR3,'N') = 1 THEN IDNR = IDNR3\n\n IF DATATYPE(IDNR,'N') = 0 THEN CALL MSG2\n\n IF NAME <> '' THEN NM = \"'\"NAME\"'\"\n\n\n /**********/\n /* GROUP  */\n /**********/\n PR. =''\n PR.DBA = \"SYS2\"\n PR.PEN = \"PERSAL\"\n PR.PE1 = \"PERSAL1\"\n PR.PE2 = \"PERSAL2\"\n PR.PE3 = \"PERSAL3\"\n PR.PE4 = \"PERSAL4\"\n PR.PE5 = \"PERSAL5\"\n PR.PE6 = \"PERSAL6\"\n PR.PE7 = \"PERSAL7\"\n PR.PE8 = \"PERSAL8\"\n PR.PE9 = \"PERSAL9\"\n PR.NET = \"PERSAL\"\n PR.VAS = \"VAS\"\n PR.VA1 = \"VAS1\"\n PR.VA2 = \"VAS2\"\n PR.ASS = \"ASSUPOL\"\n PR.SR0 = \"SPESREK\"\n PR.PF0 = \"POLFIN\"\n PR.PF1 = \"POLFIN\"\n PR.PF2 = \"POLFIN\"\n PR.PF3 = \"POLFIN\"\n PR.POL = \"POLFIN\"\n PR.PRG = \"PROGRAMR\"\n PR.PER = \"PERSAL1\"\n PR.RAD = \"RADIOB\"\n\n /*************************************************************/\n /* MAXIMUM USERS FOR EVERY ADMINISTRATOR                     */\n /* THE FOURTH CHARACTER IS THE TEST CAHARACTER FOR EVERY ADM */\n /*************************************************************/\n MAX. = 0\n MAX.DBA = 10\n MAX.PEN = 9999\n MAX.PE1 = 9999\n MAX.PE2 = 9999\n MAX.PE3 = 9999\n MAX.PE4 = 9999\n MAX.PE5 = 9999\n MAX.PE6 = 9999\n MAX.PE7 = 9999\n MAX.PE8 = 9999\n MAX.PE9 = 9999\n MAX.NET = 9999\n MAX.VAS = 9999\n MAX.VA1 = 9999\n MAX.VA2 = 9999\n MAX.ASS = 9999\n MAX.SR0 = 9999\n MAX.PF0 = 9999\n MAX.PF1 = 9999\n MAX.PF2 = 9999\n MAX.PF3 = 9999\n MAX.POL = 9999\n MAX.PRG = 50\n MAX.PER = 200\n MAX.RAD = 20\n\n\n FLAG = Y\n IF IDNR <= 0 OR IDNR >= 9999 THEN CALL MSG1\n IF (AD2 <> \"SY\") | (AD2 <> \"DB\") | (AD2 <> \"PR\") THEN FLAG = N\n IF (AD2 = \"PE\") & ((ID2 = \"NE\") | (ID2 = \"PE\")) THEN FLAG = N\n ELSE\n  IF (AD2 = \"PO\") & ((ID2 = \"PO\") | (ID2 = \"PF\") | (ID2= \"SR\")) THEN\n   FLAG = N\n  ELSE\n   IF (AD2 <> ID2) THEN\n    IF FLAG = Y THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DBA\" THEN NOP\n  WHEN ID3 = \"PEN\" THEN NOP\n  WHEN ID3 = \"PE1\" THEN NOP\n  WHEN ID3 = \"PE2\" THEN NOP\n  WHEN ID3 = \"PE3\" THEN NOP\n  WHEN ID3 = \"PE4\" THEN NOP\n  WHEN ID3 = \"PE5\" THEN NOP\n  WHEN ID3 = \"PE6\" THEN NOP\n  WHEN ID3 = \"PE7\" THEN NOP\n  WHEN ID3 = \"PE8\" THEN NOP\n  WHEN ID3 = \"PE9\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"VAS\" THEN NOP\n  WHEN ID3 = \"VA1\" THEN NOP\n  WHEN ID3 = \"VA2\" THEN NOP\n  WHEN ID3 = \"ASS\" THEN NOP\n  WHEN ID3 = \"SR0\" THEN NOP\n  WHEN ID3 = \"PF0\" THEN NOP\n  WHEN ID3 = \"PF1\" THEN NOP\n  WHEN ID3 = \"PF2\" THEN NOP\n  WHEN ID3 = \"PF3\" THEN NOP\n  WHEN ID3 = \"POL\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n  WHEN ID3 = \"PER\" THEN NOP\n  WHEN ID3 = \"RAD\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n IF IDNR > MAX.ID3 THEN CALL MSG3\n\n  LST = '\"LU ('ID')\"'\n  X = MSG('OFF')\n  INTERPRET LST\n  IF RC <> 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"DOES NOT EXIST\"\n  END\n EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"              +----------------------------------------+\"\n  SAY \"              \u00f8 YOU ARE NOT AUTHORIZED TO LIST THIS ID \u00f8\"\n  SAY \"              \u00f8                                        \u00f8\"\n  IF AD2 = \"PO\" THEN\n   SAY \"              \u00f8 ONLY PF**** OR POL*** ALLOWED          \u00f8\"\n  ELSE\n  IF AD2 = \"PE\" THEN\n   SAY \"              \u00f8 ONLY PE**** OR NET*** ALLOWED          \u00f8\"\n  ELSE\n   SAY \"              \u00f8 ONLY \"AD2\"**** ALLOWED                    \u00f8\"\n  SAY \"              +----------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n  MSG3: SAY \"\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"               \u00f8 INVALID USERID - NUMERIC VALUE TO LARGE \u00f8\"\n  SAY \"               \u00f8                                         \u00f8\"\n  SAY \"               \u00f8   PLEASE CALL YOUR SYSTEM PROGRAMMER    \u00f8\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"\"\n  EXIT\n./ ADD NAME=COMURES  0101-01016-01016-1428-00203-00203-00000-RACFCLS\n/* REXX */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n/* TO RACF USERID FOR USE BY COMPLETE  */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' PSW\n PARSE VALUE ID WITH ID2 3 DUMMY\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 3 IDNR1\n PARSE VALUE ID WITH DUMMY 4 IDNR2\n PARSE VALUE ID WITH DUMMY 5 IDNR3\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD2 3 DUMMY\n IDNR = \"XXX\"\n IF DATATYPE(IDNR1,'N') = 1 THEN IDNR = IDNR1\n ELSE\n  IF DATATYPE(IDNR2,'N') = 1 THEN IDNR = IDNR2\n  ELSE\n   IF DATATYPE(IDNR3,'N') = 1 THEN IDNR = IDNR3\n\n IF DATATYPE(IDNR,'N') = 0 THEN CALL MSG2\n\n IF NAME <> '' THEN NM = \"'\"NAME\"'\"\n\n\n /**********/\n /* GROUP  */\n /**********/\n PR. =''\n PR.DBA = \"SYS2\"\n PR.PEN = \"PERSAL\"\n PR.PE1 = \"PERSAL1\"\n PR.PE2 = \"PERSAL2\"\n PR.PE3 = \"PERSAL3\"\n PR.PE4 = \"PERSAL4\"\n PR.PE5 = \"PERSAL5\"\n PR.PE6 = \"PERSAL6\"\n PR.PE7 = \"PERSAL7\"\n PR.PE8 = \"PERSAL8\"\n PR.PE9 = \"PERSAL9\"\n PR.NET = \"PERSAL\"\n PR.VAS = \"VAS\"\n PR.VA1 = \"VAS1\"\n PR.VA2 = \"VAS2\"\n PR.ASS = \"ASSUPOL\"\n PR.SR0 = \"SPESREK\"\n PR.PF0 = \"POLFIN\"\n PR.PF1 = \"POLFIN\"\n PR.PF2 = \"POLFIN\"\n PR.PF3 = \"POLFIN\"\n PR.POL = \"POLFIN\"\n PR.PRG = \"PROGRAMR\"\n PR.PER = \"PERSAL1\"\n\n /*************************************************************/\n /* MAXIMUM USERS FOR EVERY ADMINISTRATOR                     */\n /* THE FOURTH CHARACTER IS THE TEST CAHARACTER FOR EVERY ADM */\n /*************************************************************/\n MAX. = 0\n MAX.DBA = 10\n MAX.PEN = 9999\n MAX.PE1 = 9999\n MAX.PE2 = 9999\n MAX.PE3 = 9999\n MAX.PE4 = 9999\n MAX.PE5 = 9999\n MAX.PE6 = 9999\n MAX.PE7 = 9999\n MAX.PE8 = 9999\n MAX.PE9 = 9999\n MAX.NET = 9999\n MAX.VAS = 9999\n MAX.VA1 = 9999\n MAX.VA2 = 9999\n MAX.ASS = 9999\n MAX.SR0 = 9999\n MAX.PF0 = 9999\n MAX.PF1 = 9999\n MAX.PF2 = 9999\n MAX.PF3 = 9999\n MAX.POL = 9999\n MAX.PRG = 100\n MAX.PER = 200\n\n\n FLAG = Y\n IF IDNR <= 0 OR IDNR >= 9999 THEN CALL MSG1\n IF (AD2 <> \"SY\") | (AD2 <> \"DB\") | (AD2 <> \"PR\") THEN FLAG = N\n IF (AD2 = \"PE\") & ((ID2 = \"NE\") | (ID2 = \"PE\")) THEN FLAG = N\n ELSE\n  IF (AD2 = \"PO\") & ((ID2 = \"PO\") | (ID2 = \"PF\") | (ID2= \"SR\")) THEN\n   FLAG = N\n  ELSE\n   IF (AD2 <> ID2) THEN\n    IF FLAG = Y THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DBA\" THEN NOP\n  WHEN ID3 = \"PEN\" THEN NOP\n  WHEN ID3 = \"PE1\" THEN NOP\n  WHEN ID3 = \"PE2\" THEN NOP\n  WHEN ID3 = \"PE3\" THEN NOP\n  WHEN ID3 = \"PE4\" THEN NOP\n  WHEN ID3 = \"PE5\" THEN NOP\n  WHEN ID3 = \"PE6\" THEN NOP\n  WHEN ID3 = \"PE7\" THEN NOP\n  WHEN ID3 = \"PE8\" THEN NOP\n  WHEN ID3 = \"PE9\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"VAS\" THEN NOP\n  WHEN ID3 = \"VA1\" THEN NOP\n  WHEN ID3 = \"VA2\" THEN NOP\n  WHEN ID3 = \"ASS\" THEN NOP\n  WHEN ID3 = \"SR0\" THEN NOP\n  WHEN ID3 = \"PF0\" THEN NOP\n  WHEN ID3 = \"PF1\" THEN NOP\n  WHEN ID3 = \"PF2\" THEN NOP\n  WHEN ID3 = \"PF3\" THEN NOP\n  WHEN ID3 = \"POL\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n  WHEN ID3 = \"PER\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n IF IDNR > MAX.ID3 THEN CALL MSG3\n\n IF NAME <> '' THEN\n  ALT = '\"ALTUSER ('ID') NAME('NM') PASSWORD('PSW') RESUME\"'\n ELSE\n  ALT = '\"ALTUSER ('ID') PASSWORD('PSW') RESUME\"'\n\n IF IDNR <= MAX.ID3 THEN\n DO\n  MS = MSG('OFF')\n  INTERPRET ALT\n  IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   IF NAME <> '' THEN\n   SAY \"                       NAME        :\" NAME\n   SAY \"                       PASSWORD    :\" PSW\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY CHANGED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT CHANGED DUE TO CONDITION CODE\"\n   SAY \"                       IT IS POSSIBLE THAT \"ID\" DOES NOT EXIST\"\n  END\n EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"              +------------------------------------------+\"\n  SAY \"              \u00f8 YOU ARE NOT AUTHORIZED TO CHANGE THIS ID \u00f8\"\n  SAY \"              \u00f8                                          \u00f8\"\n  IF AD2 = \"PO\" THEN\n   SAY \"              \u00f8 ONLY PF**** OR POL*** ALLOWED            \u00f8\"\n  ELSE\n  IF AD2 = \"PE\" THEN\n   SAY \"              \u00f8 ONLY PE**** OR NET*** ALLOWED            \u00f8\"\n  ELSE\n   SAY \"              \u00f8 ONLY \"AD2\"**** ALLOWED                      \u00f8\"\n  SAY \"              +------------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n  MSG3: SAY \"\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"               \u00f8 INVALID USERID - NUMERIC VALUE TO LARGE \u00f8\"\n  SAY \"               \u00f8                                         \u00f8\"\n  SAY \"               \u00f8   PLEASE CALL YOUR SYSTEM PROGRAMMER    \u00f8\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"\"\n  EXIT\n./ ADD NAME=EDITLU   0101-01016-01016-1428-00027-00027-00000-RACFCLS\n/* REXX */\n/* **************************************************************** */\n/* ** EDIT RACF LISTUSER LISTING                                  ** */\n/* **************************************************************** */\nSAY \"SEARCHING ...\"\n\"PROFILE NOPREFIX\"\n\n\"EXECIO * DISKR INPUT (FINIS STEM IN.\"\nTEL = 0\nDO WHILE TEL < IN.0\n TEL = TEL + 1\n PS = POS('USER=',IN.TEL)\n IF PS <> 0 THEN\n DO\n OUT. = IN.TEL\n \"EXECIO 1 DISKW OUTPUT (STEM OUT.\"\n  TEL = TEL + 2\n OUT. = IN.TEL\n \"EXECIO 1 DISKW OUTPUT (STEM OUT.\"\n  TEL = TEL + 2\n OUT. = IN.TEL\n \"EXECIO 1 DISKW OUTPUT (STEM OUT.\"\nEND\nEND\n \"EXECIO 0 DISKW OUTPUT (FINIS\"\nEXIT\n\n./ ADD NAME=GETSYSN  0101-01016-01016-1428-00016-00016-00000-RACFCLS\n/* REXX   */\nCVTADDR = STORAGE(00000010,4)\nCVTSNAME@=D2X(X2D(C2X(CVTADDR))+X2D(154))\nSNAME=STORAGE(CVTSNAME@,4)\nSAY \" \"\nSAY \"*** YOU ARE LOGGED ON TO SYSTEM\" SNAME \"***\"\nSAY \" \"\nIF SNAME = \"PRDA\" THEN EXIT(1)\nIF SNAME = \"PRDB\" THEN EXIT(2)\nIF SNAME = \"PRDC\" THEN EXIT(3)\nIF SNAME = \"PRDD\" THEN EXIT(4)\nIF SNAME = \"PRDE\" THEN EXIT(5)\nIF SNAME = \"TSTF\" THEN EXIT(6)\nIF SNAME = \"TSTG\" THEN EXIT(7)\nIF SNAME = \"TST1\" THEN EXIT(8)\nEXIT(0)\n./ ADD NAME=GETUID   0101-01016-01016-1428-00015-00015-00000-RACFCLS\n/* REXX */\nX = SUBSTR(SYSVAR(SYSUID),1,3)\n\nSELECT\n  WHEN X = 'SYS' THEN DO\n    \"EXEC 'SYS2.RACFCLST(ISPSYS)'\"\n  END\n  WHEN X = 'MED' THEN\n    \"EXEC 'SYS2.RACFCLST(ISPMED)'\"\n  OTHERWISE DO\n    \"EXEC 'SYS2.RACFCLST(ISPMED)'\"\n  END\nEND\n\nEXIT\n./ ADD NAME=HSMCMD   0101-01016-01016-1428-00037-00037-00000-RACFCLS\n/* REXX */\nARG INPUT\nPARSE VALUE INPUT WITH TYPE ':' DSN ':' GEN ':' VOL ':' UNIT ':' ANS,\n':' DSN2\nUID = SYSVAR(SYSUID)\nIF TYPE = \"LIST\" THEN\nDO\n X = MSG('OFF')\n DEL = '\"DEL 'UID'.HSMLIST\"'\n INTERPRET DEL\n LIST = '\"HLIST DATASET('DSN') BACKUPCONTROLDATASET',\n 'OUTDATASET('UID'.HSMLIST)\"'\n INTERPRET LIST\n BR = '\"ISPEXEC BROWSE DATASET('UID'.HSMLIST)\"'\n INTERPRET BR\n X = MSG('ON')\n EXIT\nEND\n\n IF TYPE = \"RECOVER\" THEN\n DO\n  IF ANS = \"Y\" THEN\n   IF (UNIT = '') & (VOL = '') THEN\n     REC = '\"HRECOVER 'DSN' GEN('GEN') REPLACE\"'\n   ELSE\n     REC = '\"HRECOVER 'DSN' GEN('GEN') TOVOLUME('VOL') UNIT('UNIT')',\n     'REPLACE\"'\n  ELSE\n   IF (UNIT = '') & (VOL = '') THEN\n     REC = '\"HRECOVER 'DSN' GEN('GEN') NEWNAME('DSN2')\"'\n   ELSE\n     REC = '\"HRECOVER 'DSN' GEN('GEN') TOVOLUME('VOL') UNIT('UNIT')',\n     'NEWNAME('DSN2')\"'\n  INTERPRET REC\n DEL = '\"DEL 'UID'.HSMLIST\"'\n INTERPRET DEL\n END\n./ ADD NAME=ISP      0101-01016-01016-1428-00001-00001-00000-RACFCLS\nPROFILE NOPREFIX\n./ ADD NAME=ISPBOOL  0101-01016-01016-1428-00166-00166-00000-RACFCLS\nPROC 0 PANEL()   /* ISPBOOL */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\nIF &SYSNUM = 8 THEN SET SYSNAME=TST1\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 8 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    FREE FI(ISPCRTE)\n    CONTROL MSG\n    ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) USING(ISPCRTE) +\n        FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      FREE FI(ISPCRTE)\n      EXIT CODE(12)\n     END\n    FREE FI(ISPCRTE)\n  END\nCONTROL MSG\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@BOOL)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nERROR RETURN\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(SMPTABL) SHR DA('&DSNAME.')\nMURPHY\nALLOC FI(ISPLLIB) SHR DA( +\n    'GIM.SGIMLMD0'                                /* SMP/E       */  +\n    'SYS1.SCBDHENU'                               /* HCD         */  +\n    'SYS1.DFQLLIB'                                /* DFHSM       */  +\n    'SYS1.ICEISPL'                                /* DFSORT      */  +\n    'SYS1.DGTLLIB'                                /* DFP/DFDSS   */  +\n    'CDCU.DCZDLOD'                                /* CDCU        */  +\n    'DIT.V1R1M0.SDITLOAD'                         /* DITTO       */  +\n    'DELPHI.V221.CMDLOAD'                         /* DELPHI      */  +\n    'SYS2.TSPRINT.APFLIB')                        /* DELPHI      */\n/*  'SDF150.SDFLOAD'                                 SDF150      */\n/*  'SYS3.ZHC240.ISPLOAD',                           HACC        */\n/*  'SYS3.ZHC240.LOAD',                              HACC        */\n/*  'VPS.VPS.R62.TSO.LOAD')                          VPS         */\nALLOC FI(ISPPLIB) SHR DA( +\n    'ISF.V1R5M0.SISFPLIB'                         /* SDSF        */  +\n    'SYS3.&SHRNAME..IOAIV410.PANEL'               /* IOA         */  +\n    'SYS3.IOA.PANEL'                              /* IOA SHARED  */  +\n    'SYS2.ISPPLIB'                                /* CUSTOM      */  +\n    'ISP.V4R2M0.SISPPENU'                         /* ISPF        */  +\n    'SYS2.RACFPANL'                               /* CUSTOM      */  +\n    'GIM.SGIMPENU'                                /* SMP/E       */  +\n    'SYS1.DFQPLIB'                                /* DFHSM       */  +\n    'SYS1.SCBDPENU'                               /* HCD         */  +\n    'SYS1.SERBPENU'                               /* RMFIII      */  +\n    'SYS1.SBPXPENU'                               /* OMVS        */  +\n    'SYS1.ICEISPP'                                /* DFSORT      */  +\n    'SYS1.DGTPLIB'                                /* DFP/DFDSS   */  +\n    'SYS1.HRFPANL'                                /* RACF        */  +\n    'SYS1.SBLSPNL0'                               /* IPCS        */  +\n    'EOY.SEOYPENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.PLIB'                            /* DELPHI      */  +\n    'CDCU.DCZDPLB'                                /* CDCU        */  +\n    'SYS3.ZHC240.ISPPLIB',                        /* HACC        */  +\n    'ICQ.ICQPLIB')                                /* ICQ         */\nALLOC FI(ISPMLIB) SHR DA( +\n    'ISP.V4R2M0.SISPMENU'                         /* ISPF        */  +\n    'ISF.V1R5M0.SISFMLIB'                         /* SDSF        */  +\n    'GIM.SGIMMENU'                                /* SMP/E       */  +\n    'SYS1.DFQMLIB'                                /* DFHSM       */  +\n    'SYS1.SCBDMENU'                               /* HCD         */  +\n    'SYS1.SBPXMENU'                               /* OMVS        */  +\n    'SYS1.SERBMENU'                               /* RMFIII      */  +\n    'SYS1.ICEISPM'                                /* DFSORT      */  +\n    'SYS1.DGTMLIB'                                /* DFP/DFDSS   */  +\n    'SYS1.HRFMSG'                                 /* RACF        */  +\n    'SYS1.SBLSMSG0'                               /* IPCS        */  +\n    'SYS2.ISPMENU'                                /* CUSTOM      */  +\n    'EDC.V2R2M0.SEDCMSGP'                         /* C/370       */  +\n    'EOY.SEOYMENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.MLIB'                            /* DELPHI      */  +\n    'CDCU.DCZDMLB'                                /* CDCU        */  +\n    'SYS3.&SHRNAME..IOAIV410.ISMSG'               /* IOA         */  +\n    'SYS3.IOA.ISMSG'                              /* IOA SHARED  */  +\n    'SYS3.ZHC240.ISPMLIB',                        /* HACC        */  +\n    'ICQ.ICQMLIB')                                /* ICQ         */\nALLOC FI(ISPTLIB) SHR DA('&DSNAME' +\n    'ISF.V1R5M0.SISFTLIB'                         /* SDSF        */  +\n    'GIM.SGIMTENU'                                /* SMP/E       */  +\n    'SYS1.SCBDTENU'                               /* HCD         */  +\n    'SYS1.SERBTENU'                               /* RMFIII      */  +\n    'SYS1.SBPXTENU'                               /* OMVS        */  +\n    'SYS1.ICEISPT'                                /* DFSORT      */  +\n    'SYS1.DGTTLIB'                                /* DFP/DFDSS   */  +\n    'SYS1.SBLSTBL0'                               /* IPCS        */  +\n    'EOY.SEOYTENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.CMDTAB'                          /* DELPHI      */  +\n    'ICQ.ICQTLIB'                                 /* ICQ         */  +\n    'CDCU.DCZDTLB'                                /* CDCU        */  +\n    'SYS3.&SHRNAME..IOAIV410.TLIB'                /* IOA         */  +\n    'SYS3.IOA.TLIB'                               /* IOA         */  +\n    'SYS3.ZHC240.ISPTLIB',                        /* HACC        */  +\n    'ISP.V4R2M0.SISPTENU')                        /* ISPF        */\nALLOC FI(ISPSLIB) SHR DA( +\n    'GIM.SGIMSENU'                                /* SMP/E       */  +\n    'SYS1.SBLSKEL0'                               /* IPCS        */  +\n    'SYS1.ICEISPS'                                /* DFSORT      */  +\n    'SYS1.DGTSLIB'                                /* DFDSS       */  +\n    'SYS1.HRFSKEL'                                /* RACF        */  +\n    'ICQ.ICQSLIB'                                 /* TSO/E       */  +\n    'CDCU.DCZDSLB'                                /* CDCU        */  +\n    'MAINT.LIVE.SLIB'                             /* MAKE        */  +\n    'ISP.V4R2M0.SISPSLIB')                        /* ISPF        */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n    'ISP.V4R2M0.SISPEXEC'                         /* RACF ADMIN  */ +\n    'ISP.V4R2M0.SISPCLIB'                         /* RACF ADMIN  */ +\n    'SYS1.HRFCLST'                               /* RACF        */  +\n    'SYS2.CMDPROC'                               /* CUSTOMIZED  */  +\n    'SYS2.RACFCLST'                              /* CUSTOMIZED  */  +\n    'GIM.SGIMCLS0'                               /* SMP/E CLISTS*/  +\n    'SYS1.SBLSCLI0'                              /* IPCS        */  +\n    'SYS1.SBPXEXEC'                              /* OMVS        */  +\n    'SYS1.SCBDCLST'                              /* HCD         */  +\n    'SYS1.ICEISPC'                               /* DFSORT      */  +\n    'SYS1.DGTCLIB'                               /* DFDSS       */  +\n    'SYS1.SERBCLS'                               /* RMFIII      */  +\n    'ICQ.ICQCCLIB'                               /* TSO/E ENU   */  +\n    'EDC.V2R2M0.SEDCLIST'                        /* C/370       */  +\n    'EOY.SEOYCLIB'                               /* BOOKMANAGER */  +\n    'CDCU.DCZDEXE'                                /* CDCU       */  +\n    'SYS3.&SHRNAME..IOAIV410.CLIST'              /* IOA         */  +\n    'SYS3.IOA.CLIST'                             /* IOA SHARED  */  +\n    'SYS3.ZHC240.ISPCLIB'                        /* HACC        */  +\n    'SDF2.V1R4M0.SDGICMD')\nALLOC FI(ICQAATAB) SHR DA('ICQ.ICQAATAB')         /* TSO/E       */\nALLOC FI(ICQABTAB) SHR DA('ICQ.ICQABTAB')         /* TSO/E       */\nALLOC FI(ICQANTAB) SHR DA('ICQ.ICQANTAB')         /* TSO/E       */\nALLOC FI(ICQAPTAB) SHR DA('ICQ.ICQAPTAB')         /* TSO/E       */\nALLOC FI(ICQAMTAB) SHR DA('ICQ.ICQAMTAB')         /* TSO/E       */\nALLOC FI(ICQCMTAB) SHR DA('ICQ.ICQCMTAB')         /* TSO/E       */\nALLOC FI(ISRCFIL)  SHR DA('SYSA.SPF.CFIL')        /* LMF         */\nALLOC FI(CISTABL)  SHR DA('SYS2.CIDTABL')         /* SMPE        */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nERROR RETURN\nPDF &PNL\n./ ADD NAME=ISPKHH   0101-01016-01016-1428-00755-00755-00000-RACFCLS\n/* ****************************Rexx**********************************/\n/* SAPD SHARED LOGON PROC */\n\n\"PROFILE NOPREF MODE WTPMSG MSGID\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nPROC = SYSVAR(SYSPROC)\nGETSYSN\nIF RC = 0 THEN SYSNAME=BIGERROR\nIF RC = 1 THEN SYSNAME=PRDA\nIF RC = 2 THEN SYSNAME=PRDB\nIF RC = 3 THEN SYSNAME=PRDC\nIF RC = 4 THEN SYSNAME=PRDD\nIF RC = 5 THEN SYSNAME=PRDE\nIF RC = 6 THEN SYSNAME=TSTF\nIF RC = 7 THEN SYSNAME=TSTG\nIF RC = 8 THEN SYSNAME=TST1\nSHRNAME = SYSNAME\nIF RC = 4 THEN SHRNAME=PRDE\nIF RC = 7 THEN SHRNAME=PRDE\nIF RC = 8 THEN SHRNAME=PRDE\n\nSAY 'HAVE A NICE DAY !!!'\nSAY 'BUSY ALLOCATING FILES, PLEASE WAIT .....'\nSAY ''\nMURPHY\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"COMADMN\") |,\n   (PROC = \"COMRESU\") |,\n   (PROC = \"SPFTHE\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n   SAY ' '\n   SAY '                 If you have any problems'\n   SAY '                 with administering USERIDs'\n   SAY '                 please phone'\n   SAY ' '\n   SAY '                 EDWARD ROSS ext 120656 or'\n   SAY '                             (012) 4210656'\n   SAY '                 FAX ===>>   ext 120606 or <<==='\n   SAY '                             (012) 4210606 <<==='\nEND\n\n/*****************************************/\n/* ALLOC ISPFPROF                        */\n/*****************************************/\nDSNAME = \"'\"UID\".\"SYSNAME\".ISPF.ISPPROF'\"\n\"FREE FI(ISPPROF)\"\nRC = LISTDSI(DSNAME)\nIF RC > 4 THEN\nDO\n X = MSG('ON')\n \"FREE FI(ISPCRTE)\"\n \"ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(18400)\"\n A1='\"ALLOC DA(' || DSNAME || ') SP(10,1) TRACKS DIR(10)',\n || 'USING(ISPCRTE) FI(ISPPROF)\"'\n SAY A1\n INTERPRET A1\n IF RC = 0 THEN\n  SAY  \"ISPF PROFILE DATA SET\" DSNAME \"HAS BEEN CREATED\"\n ELSE\n DO\n   SAY  \"UNABLE TO ALLOCATE ISPF PROFILE DATA SET\" DSNAME\n   \"FREE FI(ISPCRTE)\"\n   EXIT 12\n END\n \"FREE FI(ISPCRTE)\"\nEND\nA1 = '\"ALLOC FI(ISPPROF) SHR DA('||DSNAME||')\"'\nA2 = '\"ALLOC FI(ISPTABL) SHR DA('||DSNAME||')\"'\nA3 = '\"ALLOC FI(ISPTLIB) SHR DA('||DSNAME||')\"'\nINTERPRET A1\nINTERPRET A2\nINTERPRET A3\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSEXEC */\n/********************************/\nE_ISP = 'ISP.V4R2M0.SISPEXEC'\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSPROC */\n/********************************/\nC_ISP2 = 'ISP.V4R2M0.SISPCLIB'\nC_RAC3 = 'SYS1.HRFCLST'\nC_CUS1 = 'SYS2.CMDPROC'\nC_CUS2 = \"'SYS2.\"SHRNAME\".CMDPROC'\"\nC_CUS3 = 'SYS2.PRDC.CMDPROC'\nC_OPS1 = 'OPS.CMDPROC'\nC_OPS2 = \"'OPS.\"SHRNAME\".CMDPROC'\"\nC_RAC1 = 'SYS2.RACFCLST'\nC_RAC2 = \"'SYS2.\"SHRNAME\".RACFCLST'\"\nC_SMPE = 'GIM.SGIMCLS0'\nC_IPCS = 'SYS1.SBLSCLI0'\nC_HCD  = 'SYS1.SCBDCLST'\nC_DFSRT = 'SYS1.ICEISPC'\nC_DFDSS = 'SYS1.DGTCLIB'\nC_RMF  = 'SYS1.SERBCLS'\nC_ICQ  = 'ICQ.ICQCCLIB'\nC_EDC  = 'EDC.V2R2M0.SEDCLIST'\nC_BKM  = 'EOY.SEOYCLIB'\nC_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.CLIST'\"\nC_IOA2 = 'SYS3.IOA.CLIST'\nC_IOA3 = 'SYS3.IOA500.CLIST'\nC_HACC = 'SYS3.ZHC240.ISPCLIB'\nC_SDF  = 'SDF2.V1R4M0.SDGICMD'\nC_OMVS = 'SYS1.SBPXEXEC'\nC_CDCU = 'CDCU.DCZDEXE'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPLLIB */\n/********************************/\nL_SMP  = 'GIM.SGIMLMD0'\nL_HCD  = 'SYS1.SCBDHENU'\nL_HSM = 'SYS1.DFQLLIB'\nL_DFSRT = 'SYS1.ICEISPL'\nL_DFDSS = 'SYS1.DGTLLIB'\nL_CDCU  = 'CDCU.DCZDLOD'\nL_DITTO = 'DIT.V1R1M0.SDITLOAD'\nL_DELP = 'DELPHI.V221.CMDLOAD'\nL_TSP1 = 'SYS2.TSPRINT.APFLIB'\nL_HACC1 = 'SYS3.ZHC240.ISPLOAD'\nL_HACC2 = 'SYS3.ZHC240.LOAD'\nL_SDF = 'SDF150.SDFLOAD'\nL_ISP = 'ISP.V4R2M0.SISPLOAD'\nL_MAIN = \"'MAINT.\"SHRNAME\".LIVE.LOAD'\"\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPPLIB */\n/********************************/\nP_SDSF = 'ISF.V1R5M0.SISFPLIB'\nP_IOA = \"'SYS3.\"SHRNAME\".IOAIV410.PANEL'\"\nP_IOA1 = 'SYS3.IOA.PANEL'\nP_IOA2 = 'SYS3.IOA500.PANEL'\nP_CUS1 = 'SYS2.ISPPLIB'\nP_CUS2 = \"'SYS2.\"SHRNAME\".ISPPLIB'\"\nP_ISPF = 'ISP.V4R2M0.SISPPENU'\nP_CUS3 = 'SYS2.RACFPANL'\nP_CUS4 = \"'SYS2.\"SHRNAME\".RACFPANL'\"\nP_CUS5 = 'SYS2.ISP.OPSPENU'\nP_CUS6 = 'SYS2.ISP.PRGPENU'\nP_CUS7 = 'SYS2.ISP.NETPENU'\nP_SMP = 'GIM.SGIMPENU'\nP_HSM = 'SYS1.DFQPLIB'\nP_HCD = 'SYS1.SCBDPENU'\nP_RMF3 = 'SYS1.SERBPENU'\nP_OMVS = 'SYS1.SBPXPENU'\nP_DFSRT = 'SYS1.ICEISPP'\nP_DFDSS = 'SYS1.DGTPLIB'\nP_RACF  = 'SYS1.HRFPANL'\nP_IPCS = 'SYS1.SBLSPNL0'\nP_BKM = 'EOY.SEOYPENU'\nP_DELP = 'DELPHI.V221.PLIB'\nP_CDCU = 'CDCU.DCZDPLB'\nP_HACC = 'SYS3.ZHC240.ISPPLIB'\nP_ICQ = 'ICQ.ICQPLIB'\nP_LMF = 'SYS2.LMF.PLIB'\nP_MAIN = 'MAINT.LIVE.PLIB'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPMLIB */\n/********************************/\nM_ISPF = 'ISP.V4R2M0.SISPMENU'\nM_SDSF = 'ISF.V1R5M0.SISFMLIB'\nM_SMP  = 'GIM.SGIMMENU'\nM_HSM = 'SYS1.DFQMLIB'\nM_HCD = 'SYS1.SCBDMENU'\nM_OMVS = 'SYS1.SBPXMENU'\nM_RMF3 = 'SYS1.SERBMENU'\nM_DFSRT = 'SYS1.ICEISPM'\nM_DFDSS = 'SYS1.DGTMLIB'\nM_RACF = 'SYS1.HRFMSG'\nM_IPCS = 'SYS1.SBLSMSG0'\nM_CUS1 = 'SYS2.ISPMENU'\nM_C370 = 'EDC.V2R2M0.SEDCMSGP'\nM_BKM = 'EOY.SEOYMENU'\nM_DELP = 'DELPHI.V221.MLIB'\nM_CDCU = 'CDCU.DCZDMLB'\nM_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.ISMSG'\"\nM_IOA2 = 'SYS3.IOA.ISMSG'\nM_IOA3 = 'SYS3.IOA500.ISMSG'\nM_HACC = 'SYS3.ZHC240.ISPMLIB'\nM_ICQ = 'ICQ.ICQMLIB'\nM_MAIN = 'MAINT.LIVE.MLIB'\nM_RAC1 = 'SYS2.RACFMENU'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPTLIB */\n/********************************/\nT_SDSF = 'ISF.V1R5M0.SISFTLIB'\nT_SMP  = 'GIM.SGIMTENU' DSNAME\nT_HCD  = 'SYS1.SCBDTENU'\nT_RMF3 = 'SYS1.SERBTENU'\nT_OMVS = 'SYS1.SBPXTENU'\nT_DFSRT = 'SYS1.ICEISPT'\nT_DFDSS = 'SYS1.DGTTLIB'\nT_IPCS  = 'SYS1.SBLSTBL0'\nT_BKM  = 'EOY.SEOYTENU'\nT_DELP = 'DELPHI.V221.CMDTAB'\nT_ICQ = 'ICQ.ICQTLIB'\nT_CDCU  = 'CDCU.DCZDTLB'\nT_IOA1  = \"'SYS3.\"||SHRNAME||\".IOAIV410.TLIB'\"\nT_IOA2  = 'SYS3.IOA.TLIB'\nT_HACC  = 'SYS3.ZHC240.ISPTLIB'\nT_ISPF  = 'ISP.V4R2M0.SISPTENU'\nT_RAC1  = 'SYS2.RACFTABL'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPSLIB */\n/********************************/\nS_SMP  = 'GIM.SGIMSENU'\nS_IPCS = 'SYS1.SBLSKEL0'\nS_DFSRT = 'SYS1.ICEISPS'\nS_DFDSS = 'SYS1.DGTSLIB'\nS_RACF = 'SYS1.HRFSKEL'\nS_ICQ  = 'ICQ.ICQSLIB'\nS_CDCU = 'CDCU.DCZDSLB'\nS_CUS1 = 'MAINT.LIVE.SLIB'\nS_ISPF = 'ISP.V4R2M0.SISPSLIB'\nS_ISP2 = 'ISP.V4R2M0.SISPSENU'\nS_RAC1 = 'SYS2.RACFSLIB'\n\n/*******************************/\n/* SPECIFY DATASETS FOR SYSLOG */\n/*******************************/\nH_ISF  = \"'SYS0.\"SYSNAME\".HASPINDX'\"\n\n/*********************************/\n/*  SYSTEMS USERS                */\n/*********************************/\nIF (PROC = \"SPFBOOL\") THEN\nDO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA3 C_IOA2 C_IOA1 C_HACC C_SDF C_OMVS C_CDCU\n ELSE\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA1 C_IOA2 C_HACC C_SDF C_OMVS C_CDCU\n SYSEXEC = E_ISP\n IF SUBSTR(UID,1,4) = 'SYS0' THEN\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2 L_MAIN\n ELSE\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2 L_MAIN\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_LMF P_IOA2 P_IOA1 P_IOA P_CUS1 P_CUS3,\n    P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT P_DFDSS,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n ELSE\n    ISPPLIB = P_DFDSS P_SDSF P_LMF P_IOA P_IOA1 P_CUS1,\n    P_CUS3 P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU M_IOA3,\n    M_IOA2 M_IOA1 M_HACC M_ICQ\n ELSE\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU,\n    M_IOA1 M_IOA2 M_HACC M_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA2 T_IOA1 T_HACC,\n    T_ISPF T_RAC1\n ELSE\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA1 T_IOA2 T_HACC,\n    T_ISPF T_RAC1\n ISPSLIB = S_SMP S_IPCS S_DFSRT S_DFDSS S_RACF S_ICQ S_CDCU,\n    S_CUS1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@BOOL)'\n JOBTRAC = 'YES'\nEND\n\n/*********************************/\n/*  PROGRAMMERS                  */\n/*********************************/\nIF (PROC = \"PROGRAMR\") |,\n   (PROC = \"UNIXUSER\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n    C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA3 C_IOA2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n    C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_MAIN L_DFSRT L_DFDSS L_DELP L_TSP1 L_SDF\n ELSE\n    ISPLLIB = L_MAIN L_DFSRT L_DFDSS L_DELP L_TSP1 L_SDF\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_LMF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n    P_SDSF P_DELP P_IOA2 P_IOA1 P_BKM\n ELSE\n    ISPPLIB = P_LMF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n    P_SDSF P_DELP P_IOA P_BKM\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n    M_IOA3 M_IOA2 M_SDSF\n ELSE\n    ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n    M_IOA1 M_SDSF\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA2 T_ISPF\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA2 T_ISPF\n ISPSLIB = S_CUS1 S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@PRG)'\n JOBTRAC1 = 'YES'\nEND\n\n/**********************************/\n/*  OPERATORS USERS               */\n/**********************************/\nIF (PROC = \"OPERATOR\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA3 C_IOA1\n ELSE\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n ELSE\n    ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA2 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ELSE\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ISPMLIB = M_ISPF M_SDSF M_RMF3 M_DFSRT M_DFDSS M_C370 M_BKM,\n    M_IOA1\n ISPTLIB = T_SDSF T_RMF3 T_DFSRT T_DFDSS T_BKM T_IOA1 T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@OPS)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  DIENS KONTROLE               */\n/*********************************/\nIF (PROC = \"DIENSKRL\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2 C_DFDSS\n SYSEXEC = E_ISP\n ISPLLIB = L_DFDSS L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_DFDSS M_ISPF\n ISPTLIB = T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@DNS)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  NETWORK USERS               */\n/********************************/\nIF (PROC = \"NETWORK\")\nTHEN DO\n SYSPROC = C_RAC1 C_CUS1 C_DFSRT C_DFDSS C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1 L_ISP\n ISPPLIB = P_CUS3 P_CUS7 P_DFSRT P_DFDSS P_SDSF\n ISPMLIB = M_DFSRT M_DFDSS M_ISPF\n ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@NET)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  CONTROL USERS               */\n/********************************/\nIF (PROC = \"AUTOMATE\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA3 C_IOA2 C_IOA1 C_HACC C_SDF C_OMVS C_CDCU\n ELSE\n    SYSPROC = C_ISP2 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA1 C_IOA2 C_HACC C_SDF C_OMVS C_CDCU\n SYSEXEC = E_ISP\n IF SUBSTR(UID,1,4) = 'SYS0' THEN\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2 L_MAIN\n ELSE\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2 L_MAIN\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_LMF P_IOA2 P_IOA1 P_IOA P_CUS1 P_CUS3,\n    P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT P_DFDSS,\n    P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n ELSE\n    ISPPLIB = P_DFDSS P_SDSF P_LMF P_IOA P_IOA1 P_CUS1,\n    P_CUS3 P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT,\n    P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU M_IOA3,\n    M_IOA2 M_IOA1 M_HACC M_ICQ\n ELSE\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU,\n    M_IOA1 M_IOA2 M_HACC M_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA2 T_IOA1 T_HACC,\n    T_ISPF T_RAC1\n ELSE\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA1 T_IOA2 T_HACC,\n    T_ISPF T_RAC1\n ISPSLIB = S_SMP S_IPCS S_DFSRT S_DFDSS S_ICQ S_CDCU,\n    S_CUS1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@MVS)'\n JOBTRAC = 'YES'\nEND\n\n/******************************/\n/*  MEDIA USERS               */\n/******************************/\nIF (PROC = \"MEDIA\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA3 C_IOA2 C_IOA1 C_ISP2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS5 P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA2 P_IOA P_IOA1\n ELSE\n    ISPPLIB = P_SDSF P_CUS5 P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA P_IOA1\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA3 M_IOA2 M_ISPF\n ELSE\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA1 M_ISPF\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA2 T_SDSF T_ISPF\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@MED)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  ADMINISTRATOR                */\n/*********************************/\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@ADMN)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  VEILIGHEID ADMINISTRATOR     */\n/*********************************/\nIF (PROC = \"SPFTHE\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF\n ISPSLIB = S_RAC1 S_ISP2 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@THE)'\n JOBTRAC = 'NO'\nEND\n\n/*******************************/\n/*  POLFIN USERS               */\n/*******************************/\nIF (PROC = \"SPFPOL\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_TSP1\n ISPPLIB = P_CUS3 P_SDSF P_ISPF\n ISPMLIB = M_ISPF\n ISPTLIB = T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@POL)'\n JOBTRAC = 'NO'\nEND\n\n/****************************/\n/*  KRS USERS               */\n/****************************/\nIF (PROC = \"SPFKRI\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_RAC1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@KRI)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  READY PROMPT USERS           */\n/*********************************/\nIF (PROC = \"READY\") |,\n   (PROC = \"PDF\") THEN\nDO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3\n ISPMLIB = M_ISPF\n ISPTLIB = T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL()'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  COMPLETE ADMINISTRATORS      */\n/*********************************/\nIF (PROC = \"COMADMN\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1 M_RACF\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@COMA)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  COMPLETE ADMINISTRATORS      */\n/*********************************/\nIF (PROC = \"COMRESU\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1 M_RACF\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@COMR)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  CONTROL-D USERS              */\n/*********************************/\nIF (PROC = \"SPFCTD\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n else\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF P_ISPF P_IOA2 P_IOA\n ISPMLIB = M_IOA3 M_IOA1 M_ISPF\n ISPTLIB = T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@CTD)'\n JOBTRAC = 'NO'\nEND\n\n/***********************************/\n/** CHECK FOR UNKNOWN PROC        **/\n/***********************************/\nIF ISPPLIB = \"ISPPLIB\" THEN\nDO\n SAY ' '\n SAY ' '\n SAY 'YOUR LOGON PROCEDURE IS UNKNOWN TO TSO'\n SAY 'PLEASE VERIFY THAT YOUR LOGON PROCEDURE IS CORRECT'\n SAY ' '\n SAY 'OR CALL YOUR HELPDESK FOR HELP'\n EXIT 12\nEND\n\n/***********************************/\n/** JOBTRAC ADDITIONAL ALLOCATIONS */\n/***********************************/\nIF JOBTRAC = 'YES' THEN\nDO\n \"FREE FI(SMPTABL,ISRCFIL,CISTABL)\"\n \"FREE FI(ICQAATAB)\"\n \"FREE FI(ICQABTAB)\"\n \"FREE FI(ICQANTAB)\"\n \"FREE FI(ICQAPTAB)\"\n \"FREE FI(ICQAMTAB)\"\n \"FREE FI(ICQCMTAB)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n \"ALLOC FI(ICQAATAB) SHR DA(ICQ.ICQAATAB)\"\n \"ALLOC FI(ICQABTAB) SHR DA(ICQ.ICQABTAB)\"\n \"ALLOC FI(ICQANTAB) SHR DA(ICQ.ICQANTAB)\"\n \"ALLOC FI(ICQAPTAB) SHR DA(ICQ.ICQAPTAB)\"\n \"ALLOC FI(ICQAMTAB) SHR DA(ICQ.ICQAMTAB)\"\n \"ALLOC FI(ICQCMTAB) SHR DA(ICQ.ICQCMTAB)\"\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\n/*  \"ALLOC FI(DVDMSL) SHR DA(SDF150.MSL)\"      */\n/*  \"ALLOC FI(DVDMSLP) SHR DA(SDF150.MSLP)\"    */\n/*  \"ALLOC FI(DVDMSLT) SHR DA(SDF150.MSLT)\"    */\n/*  \"ALLOC FI(DVDTML) SHR DA(SDF150.TML)\"      */\n/*  \"ALLOC FI(DVDITF) SHR DA(SDF150.ITF)\"      */\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC1 = 'YES' THEN\nDO\n \"FREE FI(ISRCFIL)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC2 = 'YES' THEN\nDO\n \"FREE FI(SMPTABL)\"\n \"FREE FI(CISTABL)\"\n X=MSG('ON');\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n\n X=MSG('OFF');\nEND\n/******************************/\n/** STANDARD ISPF ALLOCTIONS **/\n/******************************/\n\"FREE FI(SYSPROC,SYSEXEC,ISPLLIB,ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB)\"\n\"FREE FI(HASPINDX)\"\n\nX = MSG('ON')\n\"ALLOC FI(SYSPROC) DA(\"SYSPROC\") SHR\"\n\"ALLOC FI(SYSEXEC) DA(\"SYSEXEC\") SHR\"\n\"ALLOC FI(ISPLLIB) DA(\"ISPLLIB\") SHR\"\n\"ALLOC FI(ISPPLIB) DA(\"ISPPLIB\") SHR\"\n\"ALLOC FI(ISPMLIB) DA(\"ISPMLIB\") SHR\"\n\"ALLOC FI(ISPTLIB) DA(\"ISPTLIB\") SHR\"\n\"ALLOC FI(ISPSLIB) DA(\"ISPSLIB\") SHR\"\n\"ALLOC FI(HASPINDX) DA(\"HASPINDX\") SHR\"\nX = MSG('ON')\n\n\"EXECUTIL SEARCHDD(YES)\"\nSIGNAL NO_COMMENT\n/*\n   THE ABOVE SIGNAL PREVENT INTERPRETATION OF LONG LINES OF COMMENTS,\n   SINCE IT BRANCHES AROUND THEM ALL\n*/\n/*--------------------------------------------------------------------+\n | IF THE USER HAS A DDIR, THEN ALLOC ALL FILES REQUIRED BY IPCS,     |\n |           THEN CALL IPCS.                                          |\n | SINCE IPCS DOES NOT SEEM TO RECOGNIZE REXX COMMANDS, WE PULL A     |\n |           JIPPO BY QUEUEING THE COMMAND 'PDF PANEL(XXXXXXXX)'      |\n |           BEFORE CALLING IPCS.  THIS WAY,  SINCE IPCS DOES NOT     |\n |           SEE ANY MORE CMDS IN THE EXEC (CLIST), IT PULL WHAT      |\n |           WAS IN THE COMMAND STACK.                                |\n +--------------------------------------------------------------------*/\nNO_COMMENT:\n\nCall USER_PROFILE\n\nddir = \"'\"userid()\".D\"sid\"0.DDIR'\"\nRC = LISTDSI(DDIR)\nIf rc > 4 then do        /* Check for the old one */\n   DDIR = \"'\"||UID||\".DDIR'\"\n   rc = listdsi(ddir)\n   end\nIF RC > 4 THEN\n   \"PDF\" PNL\nELSE DO\n   X = OUTTRAP(ON)\n   \"VFY DS(\"DDIR\")\"\n   X = OUTTRAP(X)\n   \"ALLOC FI(IPCSDDIR) DA(\"DDIR\") SHR\"\n   \"ALLOC FI(IPCSPARM) DA('SYS2.PARMLIB') SHR\"\n   \"ALLOC FI(IPCSPRNT) SYS(X) HOLD\"\n   QUEUE 'PDF' PNL\n   \"IPCS PARM(01)\"\nEND\n\nExit 0  /*-------------------------------------------------------*/\n\nUSER_PROFILE:\n\nuser_prof = \"'\"userid()\".A0.TSPROF(PROF000)'\"\nIf sysdsn(user_prof) = 'OK' then do\n   Say 'Executing' user_prof\n   'EXEC' user_prof 'EXEC'\n   end\n\nReturn\n./ ADD NAME=ISPKHHB  0101-01016-01016-1428-00689-00689-00000-RACFCLS\n/* ****************************Rexx**********************************/\n/* SAPD SHARED LOGON PROC */\n\n\"PROFILE NOPREF MODE WTPMSG MSGID\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nPROC = SYSVAR(SYSPROC)\nGETSYSN\nIF RC = 0 THEN SYSNAME=BIGERROR\nIF RC = 1 THEN SYSNAME=PRDA\nIF RC = 2 THEN SYSNAME=PRDB\nIF RC = 3 THEN SYSNAME=PRDC\nIF RC = 4 THEN SYSNAME=PRDD\nIF RC = 5 THEN SYSNAME=PRDE\nIF RC = 6 THEN SYSNAME=TSTF\nIF RC = 7 THEN SYSNAME=TSTG\nIF RC = 8 THEN SYSNAME=TST1\nSHRNAME = SYSNAME\nIF RC = 4 THEN SHRNAME=PRDE\nIF RC = 7 THEN SHRNAME=PRDE\nIF RC = 8 THEN SHRNAME=PRDE\n\nSAY 'HAVE A NICE DAY !!!'\nSAY 'BUSY ALLOCATING FILES, PLEASE WAIT .....'\nSAY ''\nMURPHY\n\n/*****************************************/\n/* ALLOC ISPFPROF                        */\n/*****************************************/\nDSNAME = \"'\"UID\".\"SYSNAME\".ISPF.ISPPROF'\"\n\"FREE FI(ISPPROF)\"\nRC = LISTDSI(DSNAME)\nIF RC > 4 THEN\nDO\n X = MSG('ON')\n \"FREE FI(ISPCRTE)\"\n \"ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(18400)\"\n A1='\"ALLOC DA(' || DSNAME || ') SP(10,1) TRACKS DIR(10)',\n || 'USING(ISPCRTE) FI(ISPPROF)\"'\n SAY A1\n INTERPRET A1\n IF RC = 0 THEN\n  SAY  \"ISPF PROFILE DATA SET\" DSNAME \"HAS BEEN CREATED\"\n ELSE\n DO\n   SAY  \"UNABLE TO ALLOCATE ISPF PROFILE DATA SET\" DSNAME\n   \"FREE FI(ISPCRTE)\"\n   EXIT 12\n END\n \"FREE FI(ISPCRTE)\"\nEND\nA1 = '\"ALLOC FI(ISPPROF) SHR DA('||DSNAME||')\"'\nA2 = '\"ALLOC FI(ISPTABL) SHR DA('||DSNAME||')\"'\nA3 = '\"ALLOC FI(ISPTLIB) SHR DA('||DSNAME||')\"'\nINTERPRET A1\nINTERPRET A2\nINTERPRET A3\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSEXEC */\n/********************************/\nE_ISP = 'ISP.V4R2M0.SISPEXEC'\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSPROC */\n/********************************/\nC_ISP2 = 'ISP.V4R2M0.SISPCLIB'\nC_RAC3 = 'SYS1.HRFCLST'\nC_CUS1 = 'SYS2.CMDPROC'\nC_CUS2 = \"'SYS2.\"SHRNAME\".CMDPROC'\"\nC_CUS3 = 'SYS2.PRDC.CMDPROC'\nC_OPS1 = 'OPS.CMDPROC'\nC_OPS2 = \"'OPS.\"SHRNAME\".CMDPROC'\"\nC_RAC1 = 'SYS2.RACFCLST'\nC_RAC2 = \"'SYS2.\"SHRNAME\".RACFCLST'\"\nC_SMPE = 'GIM.SGIMCLS0'\nC_IPCS = 'SYS1.SBLSCLI0'\nC_HCD  = 'SYS1.SCBDCLST'\nC_DFSRT = 'SYS1.ICEISPC'\nC_DFDSS = 'SYS1.DGTCLIB'\nC_RMF  = 'SYS1.SERBCLS'\nC_ICQ  = 'ICQ.ICQCCLIB'\nC_EDC  = 'EDC.V2R2M0.SEDCLIST'\nC_BKM  = 'EOY.SEOYCLIB'\nC_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.CLIST'\"\nC_IOA2 = 'SYS3.IOA.CLIST'\nC_IOA3 = 'SYS3.IOA500.CLIST'\nC_HACC = 'SYS3.ZHC240.ISPCLIB'\nC_SDF  = 'SDF2.V1R4M0.SDGICMD'\nC_OMVS = 'SYS1.SBPXEXEC'\nC_CDCU = 'CDCU.DCZDEXE'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPLLIB */\n/********************************/\nL_SMP  = 'GIM.SGIMLMD0'\nL_HCD  = 'SYS1.SCBDHENU'\nL_HSM = 'SYS1.DFQLLIB'\nL_DFSRT = 'SYS1.ICEISPL'\nL_DFDSS = 'SYS1.DGTLLIB'\nL_CDCU  = 'CDCU.DCZDLOD'\nL_DITTO = 'DIT.V1R1M0.SDITLOAD'\nL_DELP = 'DELPHI.V221.CMDLOAD'\nL_TSP1 = 'SYS2.TSPRINT.APFLIB'\nL_HACC1 = 'SYS3.ZHC240.ISPLOAD'\nL_HACC2 = 'SYS3.ZHC240.LOAD'\n/* L_SDF = 'SDF150.SDFLOAD' */\nL_ISP = 'ISP.V4R2M0.SISPLOAD'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPPLIB */\n/********************************/\nP_SDSF = 'ISF.V1R5M0.SISFPLIB'\nP_IOA = \"'SYS3.\"SHRNAME\".IOAIV410.PANEL'\"\nP_IOA1 = 'SYS3.IOA.PANEL'\nP_IOA2 = 'SYS3.IOA500.PANEL'\nP_CUS1 = 'SYS2.ISPPLIB'\nP_CUS2 = \"'SYS2.\"SHRNAME\".ISPPLIB'\"\nP_ISPF = 'ISP.V4R2M0.SISPPENU'\nP_CUS3 = 'SYS2.RACFPANL'\nP_CUS4 = \"'SYS2.\"SHRNAME\".RACFPANL'\"\nP_CUS5 = 'SYS2.ISP.OPSPENU'\nP_CUS6 = 'SYS2.ISP.PRGPENU'\nP_CUS7 = 'SYS2.ISP.NETPENU'\nP_SMP = 'GIM.SGIMPENU'\nP_HSM = 'SYS1.DFQPLIB'\nP_HCD = 'SYS1.SCBDPENU'\nP_RMF3 = 'SYS1.SERBPENU'\nP_OMVS = 'SYS1.SBPXPENU'\nP_DFSRT = 'SYS1.ICEISPP'\nP_DFDSS = 'SYS1.DGTPLIB'\nP_RACF  = 'SYS1.HRFPANL'\nP_IPCS = 'SYS1.SBLSPNL0'\nP_BKM = 'EOY.SEOYPENU'\nP_DELP = 'DELPHI.V221.PLIB'\nP_CDCU = 'CDCU.DCZDPLB'\nP_HACC = 'SYS3.ZHC240.ISPPLIB'\nP_ICQ = 'ICQ.ICQPLIB'\nP_LMF = 'SYS2.LMF.PLIB'\nP_MAIN = 'MAINT.LIVE.PLIB'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPMLIB */\n/********************************/\nM_ISPF = 'ISP.V4R2M0.SISPMENU'\nM_SDSF = 'ISF.V1R5M0.SISFMLIB'\nM_SMP  = 'GIM.SGIMMENU'\nM_HSM = 'SYS1.DFQMLIB'\nM_HCD = 'SYS1.SCBDMENU'\nM_OMVS = 'SYS1.SBPXMENU'\nM_RMF3 = 'SYS1.SERBMENU'\nM_DFSRT = 'SYS1.ICEISPM'\nM_DFDSS = 'SYS1.DGTMLIB'\nM_RACF = 'SYS1.HRFMSG'\nM_IPCS = 'SYS1.SBLSMSG0'\nM_CUS1 = 'SYS2.ISPMENU'\nM_C370 = 'EDC.V2R2M0.SEDCMSGP'\nM_BKM = 'EOY.SEOYMENU'\nM_DELP = 'DELPHI.V221.MLIB'\nM_CDCU = 'CDCU.DCZDMLB'\nM_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.ISMSG'\"\nM_IOA2 = 'SYS3.IOA.ISMSG'\nM_IOA3 = 'SYS3.IOA500.ISMSG'\nM_HACC = 'SYS3.ZHC240.ISPMLIB'\nM_ICQ = 'ICQ.ICQMLIB'\nM_MAIN = 'MAINT.LIVE.MLIB'\nM_RAC1 = 'SYS2.RACFMENU'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPTLIB */\n/********************************/\nT_SDSF = 'ISF.V1R5M0.SISFTLIB'\nT_SMP  = 'GIM.SGIMTENU' DSNAME\nT_HCD  = 'SYS1.SCBDTENU'\nT_RMF3 = 'SYS1.SERBTENU'\nT_OMVS = 'SYS1.SBPXTENU'\nT_DFSRT = 'SYS1.ICEISPT'\nT_DFDSS = 'SYS1.DGTTLIB'\nT_IPCS  = 'SYS1.SBLSTBL0'\nT_BKM  = 'EOY.SEOYTENU'\nT_DELP = 'DELPHI.V221.CMDTAB'\nT_ICQ = 'ICQ.ICQTLIB'\nT_CDCU  = 'CDCU.DCZDTLB'\nT_IOA1  = \"'SYS3.\"||SHRNAME||\".IOAIV410.TLIB'\"\nT_IOA2  = 'SYS3.IOA.TLIB'\nT_HACC  = 'SYS3.ZHC240.ISPTLIB'\nT_ISPF  = 'ISP.V4R2M0.SISPTENU'\nT_RAC1  = 'SYS2.RACFTABL'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPSLIB */\n/********************************/\nS_SMP  = 'GIM.SGIMSENU'\nS_IPCS = 'SYS1.SBLSKEL0'\nS_DFSRT = 'SYS1.ICEISPS'\nS_DFDSS = 'SYS1.DGTSLIB'\nS_RACF = 'SYS1.HRFSKEL'\nS_ICQ  = 'ICQ.ICQSLIB'\nS_CDCU = 'CDCU.DCZDSLB'\nS_CUS1 = 'MAINT.LIVE.SLIB'\nS_ISPF = 'ISP.V4R2M0.SISPSLIB'\nS_ISP2 = 'ISP.V4R2M0.SISPSENU'\nS_RAC1 = 'SYS2.RACFSLIB'\n\n/*******************************/\n/* SPECIFY DATASETS FOR SYSLOG */\n/*******************************/\nH_ISF  = \"'SYS0.\"SYSNAME\".HASPINDX'\"\n\n/*********************************/\n/*  SYSTEMS USERS                */\n/*********************************/\nIF (PROC = \"SPFBOOL\") THEN\nDO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA3 C_IOA2 C_IOA1 C_HACC C_SDF C_OMVS C_CDCU\n ELSE\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA1 C_IOA2 C_HACC C_SDF C_OMVS C_CDCU\n SYSEXEC = E_ISP\n IF SUBSTR(UID,1,4) = 'SYS0' THEN\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2\n ELSE\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_LMF P_IOA2 P_IOA1 P_IOA P_CUS1 P_CUS3,\n    P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT P_DFDSS,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n ELSE\n    ISPPLIB = P_DFDSS P_SDSF P_LMF P_IOA P_IOA1 P_CUS1,\n    P_CUS3 P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU M_IOA3,\n    M_IOA2 M_IOA1 M_HACC M_ICQ\n ELSE\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU,\n    M_IOA1 M_IOA2 M_HACC M_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA2 T_IOA1 T_HACC,\n    T_ISPF T_RAC1\n ELSE\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA1 T_IOA2 T_HACC,\n    T_ISPF T_RAC1\n ISPSLIB = S_SMP S_IPCS S_DFSRT S_DFDSS S_RACF S_ICQ S_CDCU,\n    S_CUS1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@BOOL)'\n JOBTRAC = 'YES'\nEND\n\n/*********************************/\n/*  PROGRAMMERS                  */\n/*********************************/\nIF PROC = \"PROGRAMR\" THEN\nDO\n SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_DELP,\n L_TSP1\n ISPPLIB = P_LMF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n P_SDSF P_DELP P_IOA P_BKM\n ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n M_IOA1 M_SDSF\n ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA1 T_ISPF\n ISPSLIB = S_CUS1 S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@PRG)'\n JOBTRAC1 = 'YES'\nEND\n\n/**********************************/\n/*  OPERATORS USERS               */\n/**********************************/\nIF (PROC = \"OPERATOR\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA3 C_IOA1\n ELSE\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n ELSE\n    ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA2 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ELSE\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ISPMLIB = M_ISPF M_SDSF M_RMF3 M_DFSRT M_DFDSS M_C370 M_BKM,\n    M_IOA1\n ISPTLIB = T_SDSF T_RMF3 T_DFSRT T_DFDSS T_BKM T_IOA1 T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@OPS)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  DIENS KONTROLE               */\n/*********************************/\nIF (PROC = \"DIENSKRL\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2 C_DFDSS\n SYSEXEC = E_ISP\n ISPLLIB = L_DFDSS L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_DFDSS M_ISPF\n ISPTLIB = T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@DNS)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  NETWORK USERS               */\n/********************************/\nIF (PROC = \"NETWORK\")\nTHEN DO\n SYSPROC = C_RAC1 C_CUS1 C_DFSRT C_DFDSS C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1 L_ISP\n ISPPLIB = P_CUS3 P_CUS7 P_DFSRT P_DFDSS P_SDSF\n ISPMLIB = M_DFSRT M_DFDSS M_ISPF\n ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@NET)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  CONTROL USERS               */\n/********************************/\nIF (PROC = \"AUTOMATE\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA3 C_IOA2 C_IOA1 C_SMPE\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA1 C_SMPE\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1 L_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_ISPF P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA2 P_IOA P_IOA1 P_SMP\n ELSE\n    ISPPLIB = P_SDSF P_ISPF P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA P_IOA1 P_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA3 M_IOA2 M_ISPF M_SMP\n ELSE\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA1 M_ISPF M_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA2 T_SDSF T_ISPF T_SMP\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA1 T_SDSF T_ISPF T_SMP\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF S_SMP\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@AUT)'\n JOBTRAC2 = 'YES'\nEND\n\n/******************************/\n/*  MEDIA USERS               */\n/******************************/\nIF (PROC = \"MEDIA\")\nTHEN DO\n SYSPROC = C_RAC1 C_CUS1 C_ISP2 C_DFSRT,\n C_IOA3 C_IOA1 C_BKM\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT\n ISPPLIB = P_CUS3 P_DFSRT P_SDSF P_IOA2 P_IOA P_CUS5 P_BKM\n ISPMLIB = M_DFSRT M_IOA3 M_IOA1 M_ISPF M_BKM\n ISPTLIB = T_DFSRT T_SDSF T_IOA1 T_ISPF T_BKM\n ISPSLIB = S_DFSRT S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@MED)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  ADMINISTRATOR                */\n/*********************************/\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@ADMN)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  VEILIGHEID ADMINISTRATOR     */\n/*********************************/\nIF (PROC = \"SPFTHE\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF\n ISPSLIB = S_RAC1 S_ISP2 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@THE)'\n JOBTRAC = 'NO'\nEND\n\n/*****************************/\n/*  UNIX USERS               */\n/*****************************/\nIF (PROC = \"UNIXUSER\") THEN\nDO\n SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_DELP L_TSP1\n ISPPLIB = P_LMF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n P_SDSF P_DELP P_IOA P_BKM\n ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n M_IOA1 M_SDSF\n ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA1 T_ISPF\n ISPSLIB = S_CUS1 S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@PRG)'\n JOBTRAC1 = 'YES'\nEND\n\n/*******************************/\n/*  POLFIN USERS               */\n/*******************************/\nIF (PROC = \"SPFPOL\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_TSP1\n ISPPLIB = P_CUS3 P_SDSF P_ISPF\n ISPMLIB = M_ISPF\n ISPTLIB = T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@POL)'\n JOBTRAC = 'NO'\nEND\n\n/****************************/\n/*  KRS USERS               */\n/****************************/\nIF (PROC = \"SPFKRI\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_RAC1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@KRI)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  READY PROMPT USERS           */\n/*********************************/\nIF (PROC = \"READY\") |,\n   (PROC = \"SPFTSO\") THEN\nDO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3\n ISPMLIB = M_ISPF\n ISPTLIB = T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL()'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  COMPLETE ADMINISTRATORS      */\n/*********************************/\nIF (PROC = \"COMADMN\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1 M_RACF\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@COMA)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  CONTROL-D USERS              */\n/*********************************/\nIF (PROC = \"SPFCTD\") THEN\nDO\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF P_ISPF P_IOA2 P_IOA\n ISPMLIB = M_IOA3 M_IOA1 M_ISPF\n ISPTLIB = T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@CTD)'\n JOBTRAC = 'NO'\nEND\n\n/***********************************/\n/** CHECK FOR UNKNOWN PROC        **/\n/***********************************/\nIF ISPPLIB = \"ISPPLIB\" THEN\nDO\n SAY ' '\n SAY ' '\n SAY 'YOUR LOGON PROCEDURE IS UNKNOWN TO TSO'\n SAY 'PLEASE VERIFY THAT YOUR LOGON PROCEDURE IS CORRECT'\n SAY ' '\n SAY 'OR CALL YOUR HELPDESK FOR HELP'\n EXIT 12\nEND\n\n/***********************************/\n/** JOBTRAC ADDITIONAL ALLOCATIONS */\n/***********************************/\nIF JOBTRAC = 'YES' THEN\nDO\n \"FREE FI(SMPTABL,ISRCFIL,CISTABL)\"\n \"FREE FI(ICQAATAB)\"\n \"FREE FI(ICQABTAB)\"\n \"FREE FI(ICQANTAB)\"\n \"FREE FI(ICQAPTAB)\"\n \"FREE FI(ICQAMTAB)\"\n \"FREE FI(ICQCMTAB)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n \"ALLOC FI(ICQAATAB) SHR DA(ICQ.ICQAATAB)\"\n \"ALLOC FI(ICQABTAB) SHR DA(ICQ.ICQABTAB)\"\n \"ALLOC FI(ICQANTAB) SHR DA(ICQ.ICQANTAB)\"\n \"ALLOC FI(ICQAPTAB) SHR DA(ICQ.ICQAPTAB)\"\n \"ALLOC FI(ICQAMTAB) SHR DA(ICQ.ICQAMTAB)\"\n \"ALLOC FI(ICQCMTAB) SHR DA(ICQ.ICQCMTAB)\"\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\n/*  \"ALLOC FI(DVDMSL) SHR DA(SDF150.MSL)\"      */\n/*  \"ALLOC FI(DVDMSLP) SHR DA(SDF150.MSLP)\"    */\n/*  \"ALLOC FI(DVDMSLT) SHR DA(SDF150.MSLT)\"    */\n/*  \"ALLOC FI(DVDTML) SHR DA(SDF150.TML)\"      */\n/*  \"ALLOC FI(DVDITF) SHR DA(SDF150.ITF)\"      */\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC1 = 'YES' THEN\nDO\n \"FREE FI(ISRCFIL)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n/*  \"ALLOC FI(DVDMSL) SHR DA(SDF150.MSL)\"      */\n/*  \"ALLOC FI(DVDMSLP) SHR DA(SDF150.MSLP)\"    */\n/*  \"ALLOC FI(DVDMSLT) SHR DA(SDF150.MSLT)\"    */\n/*  \"ALLOC FI(DVDTML) SHR DA(SDF150.TML)\"      */\n/*  \"ALLOC FI(DVDITF) SHR DA(SDF150.ITF)\"      */\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC2 = 'YES' THEN\nDO\n \"FREE FI(SMPTABL)\"\n \"FREE FI(CISTABL)\"\n X=MSG('ON');\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n\n X=MSG('OFF');\nEND\n/******************************/\n/** STANDARD ISPF ALLOCTIONS **/\n/******************************/\n\"FREE FI(SYSPROC,SYSEXEC,ISPLLIB,ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB)\"\n\"FREE FI(HASPINDX)\"\n\nX = MSG('ON')\n\"ALLOC FI(SYSPROC) DA(\"SYSPROC\") SHR\"\n\"ALLOC FI(SYSEXEC) DA(\"SYSEXEC\") SHR\"\n\"ALLOC FI(ISPLLIB) DA(\"ISPLLIB\") SHR\"\n\"ALLOC FI(ISPPLIB) DA(\"ISPPLIB\") SHR\"\n\"ALLOC FI(ISPMLIB) DA(\"ISPMLIB\") SHR\"\n\"ALLOC FI(ISPTLIB) DA(\"ISPTLIB\") SHR\"\n\"ALLOC FI(ISPSLIB) DA(\"ISPSLIB\") SHR\"\n\"ALLOC FI(HASPINDX) DA(\"HASPINDX\") SHR\"\nX = MSG('ON')\n\n\"EXECUTIL SEARCHDD(YES)\"\nSIGNAL NO_COMMENT\n/*\n   THE ABOVE SIGNAL PREVENT INTERPRETATION OF LONG LINES OF COMMENTS,\n   SINCE IT BRANCHES AROUND THEM ALL\n*/\n/*--------------------------------------------------------------------+\n | IF THE USER HAS A DDIR, THEN ALLOC ALL FILES REQUIRED BY IPCS,     |\n |           THEN CALL IPCS.                                          |\n | SINCE IPCS DOES NOT SEEM TO RECOGNIZE REXX COMMANDS, WE PULL A     |\n |           JIPPO BY QUEUEING THE COMMAND 'PDF PANEL(XXXXXXXX)'      |\n |           BEFORE CALLING IPCS.  THIS WAY,  SINCE IPCS DOES NOT     |\n |           SEE ANY MORE CMDS IN THE EXEC (CLIST), IT PULL WHAT      |\n |           WAS IN THE COMMAND STACK.                                |\n +--------------------------------------------------------------------*/\nNO_COMMENT:\n\nCall USER_PROFILE\n\nddir = \"'\"userid()\".D\"sid\"0.DDIR'\"\nRC = LISTDSI(DDIR)\nIf rc > 4 then do        /* Check for the old one */\n   DDIR = \"'\"||UID||\".DDIR'\"\n   rc = listdsi(ddir)\n   end\nIF RC > 4 THEN\n   \"PDF\" PNL\nELSE DO\n   X = OUTTRAP(ON)\n   \"VFY DS(\"DDIR\")\"\n   X = OUTTRAP(X)\n   \"ALLOC FI(IPCSDDIR) DA(\"DDIR\") SHR\"\n   \"ALLOC FI(IPCSPARM) DA('SYS2.PARMLIB') SHR\"\n   \"ALLOC FI(IPCSPRNT) SYS(X) HOLD\"\n   QUEUE 'PDF' PNL\n   \"IPCS PARM(01)\"\nEND\n\nExit 0  /*-------------------------------------------------------*/\n\nUSER_PROFILE:\n\nuser_prof = \"'\"userid()\".A0.TSPROF(PROF000)'\"\nIf sysdsn(user_prof) = 'OK' then do\n   Say 'Executing' user_prof\n   'EXEC' user_prof 'EXEC'\n   end\n\nReturn\n./ ADD NAME=ISPKHHBA 0101-01016-01016-1428-00727-00727-00000-RACFCLS\n/* ****************************Rexx**********************************/\n/* SAPD SHARED LOGON PROC */\n\n\"PROFILE NOPREF MODE WTPMSG MSGID\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nPROC = SYSVAR(SYSPROC)\nGETSYSN\nIF RC = 0 THEN SYSNAME=BIGERROR\nIF RC = 1 THEN SYSNAME=PRDA\nIF RC = 2 THEN SYSNAME=PRDB\nIF RC = 3 THEN SYSNAME=PRDC\nIF RC = 4 THEN SYSNAME=PRDD\nIF RC = 5 THEN SYSNAME=PRDE\nIF RC = 6 THEN SYSNAME=TSTF\nIF RC = 7 THEN SYSNAME=TSTG\nIF RC = 8 THEN SYSNAME=TST1\nSHRNAME = SYSNAME\nIF RC = 4 THEN SHRNAME=PRDE\nIF RC = 7 THEN SHRNAME=PRDE\nIF RC = 8 THEN SHRNAME=PRDE\n\nSAY 'HAVE A NICE DAY !!!'\nSAY 'BUSY ALLOCATING FILES, PLEASE WAIT .....'\nSAY ''\nMURPHY\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"COMADMN\") |,\n   (PROC = \"SPFTHE\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n   SAY ' '\n   SAY '                 If you have any problems'\n   SAY '                 with administering USERIDs'\n   SAY '                 please phone'\n   SAY ' '\n   SAY '                 EDWARD ROSS ext 120656 or'\n   SAY '                             (012) 4210656'\n   SAY '                 FAX ===>>   ext 120771 or'\n   SAY '                             (012) 4210771'\nEND\n\n/*****************************************/\n/* ALLOC ISPFPROF                        */\n/*****************************************/\nDSNAME = \"'\"UID\".\"SYSNAME\".ISPF.ISPPROF'\"\n\"FREE FI(ISPPROF)\"\nRC = LISTDSI(DSNAME)\nIF RC > 4 THEN\nDO\n X = MSG('ON')\n \"FREE FI(ISPCRTE)\"\n \"ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(18400)\"\n A1='\"ALLOC DA(' || DSNAME || ') SP(10,1) TRACKS DIR(10)',\n || 'USING(ISPCRTE) FI(ISPPROF)\"'\n SAY A1\n INTERPRET A1\n IF RC = 0 THEN\n  SAY  \"ISPF PROFILE DATA SET\" DSNAME \"HAS BEEN CREATED\"\n ELSE\n DO\n   SAY  \"UNABLE TO ALLOCATE ISPF PROFILE DATA SET\" DSNAME\n   \"FREE FI(ISPCRTE)\"\n   EXIT 12\n END\n \"FREE FI(ISPCRTE)\"\nEND\nA1 = '\"ALLOC FI(ISPPROF) SHR DA('||DSNAME||')\"'\nA2 = '\"ALLOC FI(ISPTABL) SHR DA('||DSNAME||')\"'\nA3 = '\"ALLOC FI(ISPTLIB) SHR DA('||DSNAME||')\"'\nINTERPRET A1\nINTERPRET A2\nINTERPRET A3\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSEXEC */\n/********************************/\nE_ISP = 'ISP.V4R2M0.SISPEXEC'\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSPROC */\n/********************************/\nC_ISP2 = 'ISP.V4R2M0.SISPCLIB'\nC_RAC3 = 'SYS1.HRFCLST'\nC_CUS1 = 'SYS2.CMDPROC'\nC_CUS2 = \"'SYS2.\"SHRNAME\".CMDPROC'\"\nC_CUS3 = 'SYS2.PRDC.CMDPROC'\nC_OPS1 = 'OPS.CMDPROC'\nC_OPS2 = \"'OPS.\"SHRNAME\".CMDPROC'\"\nC_RAC1 = 'SYS2.RACFCLST'\nC_RAC2 = \"'SYS2.\"SHRNAME\".RACFCLST'\"\nC_SMPE = 'GIM.SGIMCLS0'\nC_IPCS = 'SYS1.SBLSCLI0'\nC_HCD  = 'SYS1.SCBDCLST'\nC_DFSRT = 'SYS1.ICEISPC'\nC_DFDSS = 'SYS1.DGTCLIB'\nC_RMF  = 'SYS1.SERBCLS'\nC_ICQ  = 'ICQ.ICQCCLIB'\nC_EDC  = 'EDC.V2R2M0.SEDCLIST'\nC_BKM  = 'EOY.SEOYCLIB'\nC_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.CLIST'\"\nC_IOA2 = 'SYS3.IOA.CLIST'\nC_IOA3 = 'SYS3.IOA500.CLIST'\nC_HACC = 'SYS3.ZHC240.ISPCLIB'\nC_SDF  = 'SDF2.V1R4M0.SDGICMD'\nC_OMVS = 'SYS1.SBPXEXEC'\nC_CDCU = 'CDCU.DCZDEXE'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPLLIB */\n/********************************/\nL_SMP  = 'GIM.SGIMLMD0'\nL_HCD  = 'SYS1.SCBDHENU'\nL_HSM = 'SYS1.DFQLLIB'\nL_DFSRT = 'SYS1.ICEISPL'\nL_DFDSS = 'SYS1.DGTLLIB'\nL_CDCU  = 'CDCU.DCZDLOD'\nL_DITTO = 'DIT.V1R1M0.SDITLOAD'\nL_DELP = 'DELPHI.V221.CMDLOAD'\nL_TSP1 = 'SYS2.TSPRINT.APFLIB'\nL_SD2PC = 'SYS3.SD2.LINKLIB'\nL_HACC1 = 'SYS3.ZHC240.ISPLOAD'\nL_HACC2 = 'SYS3.ZHC240.LOAD'\nL_SDF = 'SDF150.SDFLOAD'\nL_ISP = 'ISP.V4R2M0.SISPLOAD'\nL_MAIN = \"'MAINT.\"SHRNAME\".LIVE.LOAD'\"\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPPLIB */\n/********************************/\nP_SDSF = 'ISF.V1R5M0.SISFPLIB'\nP_IOA = \"'SYS3.\"SHRNAME\".IOAIV410.PANEL'\"\nP_IOA1 = 'SYS3.IOA.PANEL'\nP_IOA2 = 'SYS3.IOA500.PANEL'\nP_CUS1 = 'SYS2.ISPPLIB'\nP_CUS2 = \"'SYS2.\"SHRNAME\".ISPPLIB'\"\nP_ISPF = 'ISP.V4R2M0.SISPPENU'\nP_CUS3 = 'SYS2.RACFPANL'\nP_CUS4 = \"'SYS2.\"SHRNAME\".RACFPANL'\"\nP_CUS5 = 'SYS2.ISP.OPSPENU'\nP_CUS6 = 'SYS2.ISP.PRGPENU'\nP_CUS7 = 'SYS2.ISP.NETPENU'\nP_SMP = 'GIM.SGIMPENU'\nP_HSM = 'SYS1.DFQPLIB'\nP_HCD = 'SYS1.SCBDPENU'\nP_RMF3 = 'SYS1.SERBPENU'\nP_OMVS = 'SYS1.SBPXPENU'\nP_DFSRT = 'SYS1.ICEISPP'\nP_DFDSS = 'SYS1.DGTPLIB'\nP_RACF  = 'SYS1.HRFPANL'\nP_IPCS = 'SYS1.SBLSPNL0'\nP_BKM = 'EOY.SEOYPENU'\nP_DELP = 'DELPHI.V221.PLIB'\nP_CDCU = 'CDCU.DCZDPLB'\nP_HACC = 'SYS3.ZHC240.ISPPLIB'\nP_ICQ = 'ICQ.ICQPLIB'\nP_LMF = 'SYS2.LMF.PLIB'\nP_MAIN = 'MAINT.LIVE.PLIB'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPMLIB */\n/********************************/\nM_ISPF = 'ISP.V4R2M0.SISPMENU'\nM_SDSF = 'ISF.V1R5M0.SISFMLIB'\nM_SMP  = 'GIM.SGIMMENU'\nM_HSM = 'SYS1.DFQMLIB'\nM_HCD = 'SYS1.SCBDMENU'\nM_OMVS = 'SYS1.SBPXMENU'\nM_RMF3 = 'SYS1.SERBMENU'\nM_DFSRT = 'SYS1.ICEISPM'\nM_DFDSS = 'SYS1.DGTMLIB'\nM_RACF = 'SYS1.HRFMSG'\nM_IPCS = 'SYS1.SBLSMSG0'\nM_CUS1 = 'SYS2.ISPMENU'\nM_C370 = 'EDC.V2R2M0.SEDCMSGP'\nM_BKM = 'EOY.SEOYMENU'\nM_DELP = 'DELPHI.V221.MLIB'\nM_CDCU = 'CDCU.DCZDMLB'\nM_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.ISMSG'\"\nM_IOA2 = 'SYS3.IOA.ISMSG'\nM_IOA3 = 'SYS3.IOA500.ISMSG'\nM_HACC = 'SYS3.ZHC240.ISPMLIB'\nM_ICQ = 'ICQ.ICQMLIB'\nM_MAIN = 'MAINT.LIVE.MLIB'\nM_RAC1 = 'SYS2.RACFMENU'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPTLIB */\n/********************************/\nT_SDSF = 'ISF.V1R5M0.SISFTLIB'\nT_SMP  = 'GIM.SGIMTENU' DSNAME\nT_HCD  = 'SYS1.SCBDTENU'\nT_RMF3 = 'SYS1.SERBTENU'\nT_OMVS = 'SYS1.SBPXTENU'\nT_DFSRT = 'SYS1.ICEISPT'\nT_DFDSS = 'SYS1.DGTTLIB'\nT_IPCS  = 'SYS1.SBLSTBL0'\nT_BKM  = 'EOY.SEOYTENU'\nT_DELP = 'DELPHI.V221.CMDTAB'\nT_ICQ = 'ICQ.ICQTLIB'\nT_CDCU  = 'CDCU.DCZDTLB'\nT_IOA1  = \"'SYS3.\"||SHRNAME||\".IOAIV410.TLIB'\"\nT_IOA2  = 'SYS3.IOA.TLIB'\nT_HACC  = 'SYS3.ZHC240.ISPTLIB'\nT_ISPF  = 'ISP.V4R2M0.SISPTENU'\nT_RAC1  = 'SYS2.RACFTABL'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPSLIB */\n/********************************/\nS_SMP  = 'GIM.SGIMSENU'\nS_IPCS = 'SYS1.SBLSKEL0'\nS_DFSRT = 'SYS1.ICEISPS'\nS_DFDSS = 'SYS1.DGTSLIB'\nS_RACF = 'SYS1.HRFSKEL'\nS_ICQ  = 'ICQ.ICQSLIB'\nS_CDCU = 'CDCU.DCZDSLB'\nS_CUS1 = 'MAINT.LIVE.SLIB'\nS_ISPF = 'ISP.V4R2M0.SISPSLIB'\nS_ISP2 = 'ISP.V4R2M0.SISPSENU'\nS_RAC1 = 'SYS2.RACFSLIB'\n\n/*******************************/\n/* SPECIFY DATASETS FOR SYSLOG */\n/*******************************/\nH_ISF  = \"'SYS0.\"SYSNAME\".HASPINDX'\"\n\n/*********************************/\n/*  SYSTEMS USERS                */\n/*********************************/\nIF (PROC = \"SPFBOOL\") THEN\nDO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA3 C_IOA2 C_IOA1 C_HACC C_SDF C_OMVS C_CDCU\n ELSE\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA1 C_IOA2 C_HACC C_SDF C_OMVS C_CDCU\n SYSEXEC = E_ISP\n IF SUBSTR(UID,1,4) = 'SYS0' THEN\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2 L_MAIN\n ELSE\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2 L_MAIN\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_LMF P_IOA2 P_IOA1 P_IOA P_CUS1 P_CUS3,\n    P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT P_DFDSS,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n ELSE\n    ISPPLIB = P_DFDSS P_SDSF P_LMF P_IOA P_IOA1 P_CUS1,\n    P_CUS3 P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU M_IOA3,\n    M_IOA2 M_IOA1 M_HACC M_ICQ\n ELSE\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU,\n    M_IOA1 M_IOA2 M_HACC M_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA2 T_IOA1 T_HACC,\n    T_ISPF T_RAC1\n ELSE\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA1 T_IOA2 T_HACC,\n    T_ISPF T_RAC1\n ISPSLIB = S_SMP S_IPCS S_DFSRT S_DFDSS S_RACF S_ICQ S_CDCU,\n    S_CUS1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@BOOL)'\n JOBTRAC = 'YES'\nEND\n\n/*********************************/\n/*  PROGRAMMERS                  */\n/*********************************/\nIF (PROC = \"PROGRAMR\") |,\n   (PROC = \"UNIXUSER\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n    C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA3 C_IOA2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n    C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_MAIN L_DFSRT L_DFDSS L_DELP L_TSP1 L_SDF\n ELSE\n    ISPLLIB = L_MAIN L_DFSRT L_DFDSS L_DELP L_TSP1 L_SDF\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_LMF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n    P_SDSF P_DELP P_IOA2 P_IOA1 P_BKM\n ELSE\n    ISPPLIB = P_LMF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n    P_SDSF P_DELP P_IOA P_BKM\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n    M_IOA3 M_IOA2 M_SDSF\n ELSE\n    ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n    M_IOA1 M_SDSF\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA2 T_ISPF\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA2 T_ISPF\n ISPSLIB = S_CUS1 S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@PRG)'\n JOBTRAC1 = 'YES'\nEND\n\n/**********************************/\n/*  OPERATORS USERS               */\n/**********************************/\nIF (PROC = \"OPERATOR\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA3 C_IOA1\n ELSE\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n ELSE\n    ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA2 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ELSE\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ISPMLIB = M_ISPF M_SDSF M_RMF3 M_DFSRT M_DFDSS M_C370 M_BKM,\n    M_IOA1\n ISPTLIB = T_SDSF T_RMF3 T_DFSRT T_DFDSS T_BKM T_IOA1 T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@OPS)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  DIENS KONTROLE               */\n/*********************************/\nIF (PROC = \"DIENSKRL\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2 C_DFDSS\n SYSEXEC = E_ISP\n ISPLLIB = L_DFDSS L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_DFDSS M_ISPF\n ISPTLIB = T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@DNS)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  NETWORK USERS               */\n/********************************/\nIF (PROC = \"NETWORK\")\nTHEN DO\n SYSPROC = C_RAC1 C_CUS1 C_DFSRT C_DFDSS C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1 L_ISP\n ISPPLIB = P_CUS3 P_CUS7 P_DFSRT P_DFDSS P_SDSF\n ISPMLIB = M_DFSRT M_DFDSS M_ISPF\n ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@NET)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  CONTROL USERS               */\n/********************************/\nIF (PROC = \"AUTOMATE\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA3 C_IOA2 C_IOA1 C_SMPE C_ISP2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA1 C_SMPE C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1 L_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_ISPF P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA2 P_IOA P_IOA1 P_SMP\n ELSE\n    ISPPLIB = P_SDSF P_ISPF P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA P_IOA1 P_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA3 M_IOA2 M_ISPF M_SMP\n ELSE\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA1 M_ISPF M_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA2 T_SDSF T_ISPF T_SMP\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA1 T_SDSF T_ISPF T_SMP\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF S_SMP\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@AUT)'\n JOBTRAC2 = 'YES'\nEND\n\n/******************************/\n/*  MEDIA USERS               */\n/******************************/\nIF (PROC = \"MEDIA\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA3 C_IOA2 C_IOA1 C_ISP2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS5 P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA2 P_IOA P_IOA1\n ELSE\n    ISPPLIB = P_SDSF P_CUS5 P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA P_IOA1\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA3 M_IOA2 M_ISPF\n ELSE\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA1 M_ISPF\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA2 T_SDSF T_ISPF\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@MED)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  ADMINISTRATOR                */\n/*********************************/\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@ADMN)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  VEILIGHEID ADMINISTRATOR     */\n/*********************************/\nIF (PROC = \"SPFTHE\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF\n ISPSLIB = S_RAC1 S_ISP2 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@THE)'\n JOBTRAC = 'NO'\nEND\n\n/*******************************/\n/*  POLFIN USERS               */\n/*******************************/\nIF (PROC = \"SPFPOL\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_TSP1\n ISPPLIB = P_CUS3 P_SDSF P_ISPF\n ISPMLIB = M_ISPF\n ISPTLIB = T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@POL)'\n JOBTRAC = 'NO'\nEND\n\n/****************************/\n/*  KRS USERS               */\n/****************************/\nIF (PROC = \"SPFKRI\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_RAC1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@KRI)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  READY PROMPT USERS           */\n/*********************************/\nIF (PROC = \"READY\") |,\n   (PROC = \"PDF\") THEN\nDO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3\n ISPMLIB = M_ISPF\n ISPTLIB = T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL()'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  READY PROMPT FOR SD2 PC      */\n/*********************************/\nIF (PROC = \"SD2\") THEN\nDO\n    ISPLLIB = L_SD2PC\nEND\n/*********************************/\n/*  COMPLETE ADMINISTRATORS      */\n/*********************************/\nIF (PROC = \"COMADMN\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1 M_RACF\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@COMA)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  CONTROL-D USERS              */\n/*********************************/\nIF (PROC = \"SPFCTD\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n else\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF P_ISPF P_IOA2 P_IOA\n ISPMLIB = M_IOA3 M_IOA1 M_ISPF\n ISPTLIB = T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@CTD)'\n JOBTRAC = 'NO'\nEND\n\n/***********************************/\n/** CHECK FOR UNKNOWN PROC        **/\n/***********************************/\nIF ISPPLIB = \"ISPPLIB\" THEN\nDO\n SAY ' '\n SAY ' '\n SAY 'YOUR LOGON PROCEDURE IS UNKNOWN TO TSO'\n SAY 'PLEASE VERIFY THAT YOUR LOGON PROCEDURE IS CORRECT'\n SAY ' '\n SAY 'OR CALL YOUR HELPDESK FOR HELP'\n EXIT 12\nEND\n\n/***********************************/\n/** JOBTRAC ADDITIONAL ALLOCATIONS */\n/***********************************/\nIF JOBTRAC = 'YES' THEN\nDO\n \"FREE FI(SMPTABL,ISRCFIL,CISTABL)\"\n \"FREE FI(ICQAATAB)\"\n \"FREE FI(ICQABTAB)\"\n \"FREE FI(ICQANTAB)\"\n \"FREE FI(ICQAPTAB)\"\n \"FREE FI(ICQAMTAB)\"\n \"FREE FI(ICQCMTAB)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n \"ALLOC FI(ICQAATAB) SHR DA(ICQ.ICQAATAB)\"\n \"ALLOC FI(ICQABTAB) SHR DA(ICQ.ICQABTAB)\"\n \"ALLOC FI(ICQANTAB) SHR DA(ICQ.ICQANTAB)\"\n \"ALLOC FI(ICQAPTAB) SHR DA(ICQ.ICQAPTAB)\"\n \"ALLOC FI(ICQAMTAB) SHR DA(ICQ.ICQAMTAB)\"\n \"ALLOC FI(ICQCMTAB) SHR DA(ICQ.ICQCMTAB)\"\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\n/*  \"ALLOC FI(DVDMSL) SHR DA(SDF150.MSL)\"      */\n/*  \"ALLOC FI(DVDMSLP) SHR DA(SDF150.MSLP)\"    */\n/*  \"ALLOC FI(DVDMSLT) SHR DA(SDF150.MSLT)\"    */\n/*  \"ALLOC FI(DVDTML) SHR DA(SDF150.TML)\"      */\n/*  \"ALLOC FI(DVDITF) SHR DA(SDF150.ITF)\"      */\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC1 = 'YES' THEN\nDO\n \"FREE FI(ISRCFIL)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC2 = 'YES' THEN\nDO\n \"FREE FI(SMPTABL)\"\n \"FREE FI(CISTABL)\"\n X=MSG('ON');\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n\n X=MSG('OFF');\nEND\n/******************************/\n/** STANDARD ISPF ALLOCTIONS **/\n/******************************/\n\"FREE FI(SYSPROC,SYSEXEC,ISPLLIB,ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB)\"\n\"FREE FI(HASPINDX)\"\n\nX = MSG('ON')\n\"ALLOC FI(SYSPROC) DA(\"SYSPROC\") SHR\"\n\"ALLOC FI(SYSEXEC) DA(\"SYSEXEC\") SHR\"\n\"ALLOC FI(ISPLLIB) DA(\"ISPLLIB\") SHR\"\n\"ALLOC FI(ISPPLIB) DA(\"ISPPLIB\") SHR\"\n\"ALLOC FI(ISPMLIB) DA(\"ISPMLIB\") SHR\"\n\"ALLOC FI(ISPTLIB) DA(\"ISPTLIB\") SHR\"\n\"ALLOC FI(ISPSLIB) DA(\"ISPSLIB\") SHR\"\n\"ALLOC FI(HASPINDX) DA(\"HASPINDX\") SHR\"\nX = MSG('ON')\n\n\"EXECUTIL SEARCHDD(YES)\"\nSIGNAL NO_COMMENT\n/*\n   THE ABOVE SIGNAL PREVENT INTERPRETATION OF LONG LINES OF COMMENTS,\n   SINCE IT BRANCHES AROUND THEM ALL\n*/\n/*--------------------------------------------------------------------+\n | IF THE USER HAS A DDIR, THEN ALLOC ALL FILES REQUIRED BY IPCS,     |\n |           THEN CALL IPCS.                                          |\n | SINCE IPCS DOES NOT SEEM TO RECOGNIZE REXX COMMANDS, WE PULL A     |\n |           JIPPO BY QUEUEING THE COMMAND 'PDF PANEL(XXXXXXXX)'      |\n |           BEFORE CALLING IPCS.  THIS WAY,  SINCE IPCS DOES NOT     |\n |           SEE ANY MORE CMDS IN THE EXEC (CLIST), IT PULL WHAT      |\n |           WAS IN THE COMMAND STACK.                                |\n +--------------------------------------------------------------------*/\nNO_COMMENT:\n\nCall USER_PROFILE\n\nddir = \"'\"userid()\".D\"sid\"0.DDIR'\"\nRC = LISTDSI(DDIR)\nIf rc > 4 then do        /* Check for the old one */\n   DDIR = \"'\"||UID||\".DDIR'\"\n   rc = listdsi(ddir)\n   end\nIF RC > 4 THEN\n   \"PDF\" PNL\nELSE DO\n   X = OUTTRAP(ON)\n   \"VFY DS(\"DDIR\")\"\n   X = OUTTRAP(X)\n   \"ALLOC FI(IPCSDDIR) DA(\"DDIR\") SHR\"\n   \"ALLOC FI(IPCSPARM) DA('SYS2.PARMLIB') SHR\"\n   \"ALLOC FI(IPCSPRNT) SYS(X) HOLD\"\n   QUEUE 'PDF' PNL\n   \"IPCS PARM(01)\"\nEND\n\nExit 0  /*-------------------------------------------------------*/\n\nUSER_PROFILE:\n\nuser_prof = \"'\"userid()\".A0.TSPROF(PROF000)'\"\nIf sysdsn(user_prof) = 'OK' then do\n   Say 'Executing' user_prof\n   'EXEC' user_prof 'EXEC'\n   end\n\nReturn\n./ ADD NAME=ISPSHARE 0101-01016-01016-1428-00140-00140-00000-RACFCLS\nPROC 0 PANEL()\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\nIF &SYSNUM = 8 THEN SET SYSNAME=TST1\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    FREE FI(ISPCRTE)\n    CONTROL MSG\n    ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) USING(ISPCRTE) +\n        FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      FREE FI(ISPCRTE)\n      EXIT CODE(12)\n     END\n    FREE FI(ISPCRTE)\n  END\nCONTROL MSG\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@BOOL)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nERROR RETURN\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(SMPTABL) SHR DA('&DSNAME.')\nMURPHY\nALLOC FI(ISPLLIB) SHR DA( +\n/*  'GIM.SGIMLMD0'                                   SMP/E       */  +\n/*  'SYS1.SCBDHENU'                                  HCD         */  +\n/*  'SYS1.DFQLLIB'                                   DFHSM       */  +\n    'SYS1.ICEISPL'                                /* DFSORT      */  +\n    'SYS1.DGTLLIB'                                /* DFP/DFDSS   */  +\n/*  'DIT.V1R1M0.SDITLOAD'                            DITTO       */  +\n    'DELPHI.V221.CMDLOAD'                         /* DELPHI      */  +\n    'SYS2.TSPRINT.APFLIB') /*                DELPHI      */\n/*  'SDF150.SDFLOAD'                               DELPHI      */\n/*  'VPS.VPS.R62.TSO.LOAD')                     VPS         */\nALLOC FI(ISPPLIB) SHR DA( +\n    'ISF.V1R5M0.SISFPLIB'                         /* SDSF        */  +\n/*  'SYS3.&SYSNAME..IOAIV410.PANEL'                  IOA         */  +\n    'SYS2.ISPPLIB'                                /* CUSTOM      */  +\n    'ISP.V4R2M0.SISPPENU'                         /* ISPF        */  +\n    'SYS2.RACFPANL'                               /* CUSTOM      */  +\n/*  'GIM.SGIMPENU'                                   SMP/E       */  +\n/*  'SYS1.DFQPLIB'                                   DFHSM       */  +\n/*  'SYS1.SCBDPENU'                                  HCD         */  +\n/*  'SYS1.SBPXPENU'                                  OMVS        */  +\n    'SYS1.ICEISPP'                                /* DFSORT      */  +\n    'SYS1.DGTPLIB'                                /* DFP/DFDSS   */  +\n/*  'SYS1.HRFPANL'                                   RACF        */  +\n/*  'SYS1.SBLSPNL0'                                  IPCS        */  +\n    'EOY.SEOYPENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.PLIB')                           /* DELPHI      */\n/*  'ICQ.ICQPLIB')                                /* ICQ         */\nALLOC FI(ISPMLIB) SHR DA( +\n    'ISP.V4R2M0.SISPMENU'                         /* ISPF        */  +\n    'ISF.V1R5M0.SISFMLIB'                         /* SDSF        */  +\n/*  'GIM.SGIMMENU'                                   SMP/E       */  +\n/*  'SYS1.DFQMLIB'                                   DFHSM       */  +\n/*  'SYS1.SCBDMENU'                                  HCD         */  +\n/*  'SYS1.SBPXMENU'                                  OMVS        */  +\n    'SYS1.ICEISPM'                                /* DFSORT      */  +\n    'SYS1.DGTMLIB'                                /* DFP/DFDSS   */  +\n/*  'SYS1.HRFMSG'                                    RACF        */  +\n/*  'SYS1.SBLSMSG0'                                  IPCS        */  +\n    'SYS2.ISPMENU'                                /* CUSTOM      */  +\n    'EDC.V2R2M0.SEDCMSGP'                         /* C/370       */  +\n    'EOY.SEOYMENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.MLIB')                           /* DELPHI      */\n/*  'SYS3.&SYSNAME..IOAIV410.ISMSG'                  IOA         */\n/*  'ICQ.ICQMLIB')                                   ICQ         */\nALLOC FI(ISPTLIB) SHR DA('&DSNAME' +\n    'ISF.V1R5M0.SISFTLIB'                         /* SDSF        */  +\n/*  'GIM.SGIMTENU'                                   SMP/E       */  +\n/*  'SYS1.SCBDTENU'                                  HCD         */  +\n/*  'SYS1.SBPXTENU'                                  OMVS        */  +\n    'SYS1.ICEISPT'                                /* DFSORT      */  +\n    'SYS1.DGTTLIB'                                /* DFP/DFDSS   */  +\n/*  'SYS1.SBLSTBL0'                                  IPCS        */  +\n    'EOY.SEOYTENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.CMDTAB'                          /* DELPHI      */  +\n/*  'ICQ.ICQTLIB'                                    ICQ         */  +\n/*  'SYS3.&SYSNAME..IOAIV410.TLIB'                   IOA         */  +\n    'ISP.V4R2M0.SISPTENU')                        /* ISPF        */\nALLOC FI(ISPSLIB) SHR DA( +\n/*  'GIM.SGIMSENU'                                   SMP/E       */  +\n/*  'SYS1.SBLSKEL0'                                  IPCS        */  +\n    'SYS1.ICEISPS'                                /* DFSORT      */  +\n    'SYS1.DGTSLIB'                                /* DFDSS       */  +\n/*  'SYS1.HRFSKEL'                                   RACF        */  +\n    'ICQ.ICQSLIB'                                 /* TSO/E       */  +\n    'MAINT.LIVE.SLIB'                             /* MAKE        */  +\n    'ISP.V4R2M0.SISPSLIB')                        /* ISPF        */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n    'ISP.V4R2M0.SISPEXEC'                         /* RACF ADMIN  */ +\n    'ISP.V4R2M0.SISPCLIB'                         /* RACF ADMIN  */ +\n/*  'SYS1.HRFCLST'                                  RACF        */  +\n    'SYS2.CMDPROC'                               /* CUSTOMIZED  */  +\n    'SYS2.RACFCLST'                              /* CUSTOMIZED  */  +\n/*  'GIM.SGIMCLS0'                                  SMP/E CLISTS*/  +\n/*  'SYS1.SBLSCLI0'                                 IPCS        */  +\n/*  'SYS1.SBPXEXEC'                                 OMVS        */  +\n/*  'SYS1.SCBDCLST'                                 HCD         */  +\n    'SYS1.ICEISPC'                               /* DFSORT      */  +\n    'SYS1.DGTCLIB'                               /* DFDSS       */  +\n/*  'ICQ.ICQCCLIB'                                  TSO/E ENU   */  +\n    'EDC.V2R2M0.SEDCLIST'                        /* C/370       */  +\n    'EOY.SEOYCLIB'                               /* BOOKMANAGER */  +\n/*  'SYS3.&SYSNAME..IOAIV410.CLIST'                 IOA         */  +\n    'SDF2.V1R4M0.SDGICMD')\n/* ALLOC FI(ICQAATAB) SHR DA('ICQ.ICQAATAB')            TSO/E       */\n/* ALLOC FI(ICQABTAB) SHR DA('ICQ.ICQABTAB')            TSO/E       */\n/* ALLOC FI(ICQANTAB) SHR DA('ICQ.ICQANTAB')            TSO/E       */\n/* ALLOC FI(ICQAPTAB) SHR DA('ICQ.ICQAPTAB')            TSO/E       */\n/* ALLOC FI(ICQAMTAB) SHR DA('ICQ.ICQAMTAB')            TSO/E       */\n/* ALLOC FI(ICQCMTAB) SHR DA('ICQ.ICQCMTAB')            TSO/E       */\nALLOC FI(ISRCFIL)  SHR DA('SYSA.SPF.CFIL')        /* LMF         */\n/* ALLOC FI(CISTABL)  SHR DA('SYS2.CIDTABL')            SMPE        */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* SDSF INDEX */\nERROR RETURN\nPDF &PNL\n./ ADD NAME=ISPSYS   0101-01016-01016-1428-00138-00138-00000-RACFCLS\nPROC 0 PANEL()   /* ISPSYS */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREFIX\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    FREE FI(ISPCRTE)\n    CONTROL MSG\n    ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160)\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) USING(ISPCRTE) +\n        FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      FREE FI(ISPCRTE)\n      EXIT CODE(12)\n     END\n    FREE FI(ISPCRTE)\n  END\nCONTROL MSG\nIF &PANEL = &STR() THEN +\n  SET &PNL = PANEL(ISP@BOOL)\nELSE +\n  SET &PNL = PANEL(&PANEL)\nERROR RETURN\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(SMPTABL) SHR DA('&DSNAME.')\nMURPHY\nALLOC FI(ISPLLIB) SHR DA( +\n    'GIM.SGIMLMD0'                                /* SMP/E       */  +\n    'SYS1.SCBDHENU'                               /* HCD         */  +\n    'SYS1.DFQLLIB'                                /* DFHSM       */  +\n    'SYS1.ICEISPL'                                /* DFSORT      */  +\n    'SYS1.DGTLLIB'                                /* DFP/DFDSS   */  +\n    'DIT.V1R1M0.SDITLOAD'                         /* DITTO       */  +\n    'DELPHI.V221.CMDLOAD'                         /* DELPHI      */  +\n    'SYS2.TSPRINT.APFLIB')              /* DELPHI      */\n/*  'SDF150.SDFLOAD')                                DELPHI      */\n/*  'VPS.VPS.R62.TSO.LOAD')                     VPS         */\nALLOC FI(ISPPLIB) SHR DA( +\n    'ISF.V1R5M0.SISFPLIB'                         /* SDSF        */  +\n    'SYS3.&SHRNAME..IOAIV410.PANEL'               /* IOA         */  +\n    'SYS2.ISPPLIB'                                /* CUSTOM      */  +\n    'ISP.V4R2M0.SISPPENU'                         /* ISPF        */  +\n    'SYS2.RACFPANL'                               /* CUSTOM      */  +\n    'GIM.SGIMPENU'                                /* SMP/E       */  +\n    'SYS1.DFQPLIB'                                /* DFHSM       */  +\n    'SYS1.SCBDPENU'                               /* HCD         */  +\n    'SYS1.SERBPENU'                               /* RMFIII      */  +\n    'SYS1.SBPXPENU'                               /* OMVS        */  +\n    'SYS1.ICEISPP'                                /* DFSORT      */  +\n    'SYS1.DGTPLIB'                                /* DFP/DFDSS   */  +\n    'SYS1.HRFPANL'                                /* RACF        */  +\n    'SYS1.SBLSPNL0'                               /* IPCS        */  +\n    'EOY.SEOYPENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.PLIB'                            /* DELPHI      */  +\n    'ICQ.ICQPLIB')                                /* ICQ         */\nALLOC FI(ISPMLIB) SHR DA( +\n    'ISP.V4R2M0.SISPMENU'                         /* ISPF        */  +\n    'ISF.V1R5M0.SISFMLIB'                         /* SDSF        */  +\n    'GIM.SGIMMENU'                                /* SMP/E       */  +\n    'SYS1.DFQMLIB'                                /* DFHSM       */  +\n    'SYS1.SCBDMENU'                               /* HCD         */  +\n    'SYS1.SBPXMENU'                               /* OMVS        */  +\n    'SYS1.SERBMENU'                               /* RMFIII      */  +\n    'SYS1.ICEISPM'                                /* DFSORT      */  +\n    'SYS1.DGTMLIB'                                /* DFP/DFDSS   */  +\n    'SYS1.HRFMSG'                                 /* RACF        */  +\n    'SYS1.SBLSMSG0'                               /* IPCS        */  +\n    'SYS2.ISPMENU'                                /* CUSTOM      */  +\n    'EDC.V2R2M0.SEDCMSGP'                         /* C/370       */  +\n    'EOY.SEOYMENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.MLIB'                            /* DELPHI      */  +\n    'SYS3.&SHRNAME..IOAIV410.ISMSG'               /* IOA         */  +\n    'ICQ.ICQMLIB')                                /* ICQ         */\nALLOC FI(ISPTLIB) SHR DA('&DSNAME' +\n    'ISF.V1R5M0.SISFTLIB'                         /* SDSF        */  +\n    'GIM.SGIMTENU'                                /* SMP/E       */  +\n    'SYS1.SCBDTENU'                               /* HCD         */  +\n    'SYS1.SERBTENU'                               /* RMFIII      */  +\n    'SYS1.SBPXTENU'                               /* OMVS        */  +\n    'SYS1.ICEISPT'                                /* DFSORT      */  +\n    'SYS1.DGTTLIB'                                /* DFP/DFDSS   */  +\n    'SYS1.SBLSTBL0'                               /* IPCS        */  +\n    'EOY.SEOYTENU'                                /* BOOKMANAGER */  +\n    'DELPHI.V221.CMDTAB'                          /* DELPHI      */  +\n    'ICQ.ICQTLIB'                                 /* ICQ         */  +\n    'SYS3.&SHRNAME..IOAIV410.TLIB'                /* IOA         */  +\n    'ISP.V4R2M0.SISPTENU')                        /* ISPF        */\nALLOC FI(ISPSLIB) SHR DA( +\n    'GIM.SGIMSENU'                                /* SMP/E       */  +\n    'SYS1.SBLSKEL0'                               /* IPCS        */  +\n    'SYS1.ICEISPS'                                /* DFSORT      */  +\n    'SYS1.DGTSLIB'                                /* DFDSS       */  +\n    'SYS1.HRFSKEL'                                /* RACF        */  +\n    'ICQ.ICQSLIB'                                 /* TSO/E       */  +\n    'MAINT.LIVE.SLIB'                             /* MAKE        */  +\n    'ISP.V4R2M0.SISPSLIB')                        /* ISPF        */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n    'ISP.V4R2M0.SISPEXEC'                         /* RACF ADMIN  */ +\n    'ISP.V4R2M0.SISPCLIB'                         /* RACF ADMIN  */ +\n    'SYS1.HRFCLST'                               /* RACF        */  +\n    'SYS2.CMDPROC'                               /* CUSTOMIZED  */  +\n    'SYS2.RACFCLST'                              /* CUSTOMIZED  */  +\n    'GIM.SGIMCLS0'                               /* SMP/E CLISTS*/  +\n    'SYS1.SBLSCLI0'                              /* IPCS        */  +\n    'SYS1.SBPXEXEC'                              /* OMVS        */  +\n    'SYS1.SCBDCLST'                              /* HCD         */  +\n    'SYS1.ICEISPC'                               /* DFSORT      */  +\n    'SYS1.DGTCLIB'                               /* DFDSS       */  +\n    'SYS1.SERBCLS'                               /* RMFIII      */  +\n    'ICQ.ICQCCLIB'                               /* TSO/E ENU   */  +\n    'EDC.V2R2M0.SEDCLIST'                        /* C/370       */  +\n    'EOY.SEOYCLIB'                               /* BOOKMANAGER */  +\n    'SYS3.&SHRNAME..IOAIV410.CLIST'              /* IOA         */  +\n    'SDF2.V1R4M0.SDGICMD')\nALLOC FI(ICQAATAB) SHR DA('ICQ.ICQAATAB')         /* TSO/E       */\nALLOC FI(ICQABTAB) SHR DA('ICQ.ICQABTAB')         /* TSO/E       */\nALLOC FI(ICQANTAB) SHR DA('ICQ.ICQANTAB')         /* TSO/E       */\nALLOC FI(ICQAPTAB) SHR DA('ICQ.ICQAPTAB')         /* TSO/E       */\nALLOC FI(ICQAMTAB) SHR DA('ICQ.ICQAMTAB')         /* TSO/E       */\nALLOC FI(ICQCMTAB) SHR DA('ICQ.ICQCMTAB')         /* TSO/E       */\n/* ALLOC FI(DVDMSL)   SHR DA('SDF150.MSL')              SDF150      */\n/* ALLOC FI(DVDMSLP)  SHR DA('SDF150.MSLP')             SDF150      */\n/* ALLOC FI(DVDMSLT)  SHR DA('SDF150.MSLT')             SDF150      */\n/* ALLOC FI(DVDTML)   SHR DA('SDF150.TML')              SDF150      */\n/* ALLOC FI(DVDITF)   SHR DA('SDF150.ITF')              SDF150      */\nALLOC FI(ISRCFIL)  SHR DA('SYSA.SPF.CFIL')        /* LMF         */\nALLOC FI(CISTABL)  SHR DA('SYS2.CIDTABL')         /* SMPE        */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SHRNAME..HASPINDX') /* SDSF INDEX */\nERROR RETURN\nPDF &PNL\n./ ADD NAME=ISP390   0101-01016-01016-1428-01049-01049-00000-RACFCLS\n/* ****************************Rexx**********************************/\n/* SAPD SHARED LOGON PROC */\n/* ****************************Rexx**********************************/\n\n\"PROFILE NOPREF MODE WTPMSG MSGID\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nPROC = SYSVAR(SYSPROC)\nTSOVER = SYSVAR(SYSTSOE)    /* TEST FOR OS/390 */\nGETSYSN\nIF RC = 0 THEN SYSNAME=BIGERROR\nIF RC = 1 THEN SYSNAME=PRDA\nIF RC = 2 THEN SYSNAME=PRDB\nIF RC = 3 THEN SYSNAME=PRDC\nIF RC = 4 THEN SYSNAME=PRDD\nIF RC = 5 THEN SYSNAME=PRDE\nIF RC = 6 THEN SYSNAME=TSTF\nIF RC = 7 THEN SYSNAME=TSTG\nIF RC = 8 THEN SYSNAME=TST1\nSHRNAME = SYSNAME\nIF RC = 4 THEN SHRNAME=PRDE\nIF RC = 7 THEN SHRNAME=PRDE\nIF RC = 8 THEN SHRNAME=PRDE\n\nSAY 'HAVE A NICE DAY !!!'\nSAY 'BUSY ALLOCATING FILES, PLEASE WAIT .....'\nSAY ''\nMURPHY\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"RADADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"COMADMN\") |,\n   (PROC = \"COMRESU\") |,\n   (PROC = \"SPFTHE\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n   SAY ' '\n   SAY '                 If you have any problems'\n   SAY '                 with administering USERIDs'\n   SAY '                 please phone'\n   SAY ' '\n   SAY '                 POTTIE      ext 120676 or'\n   SAY '                             (012) 4210676'\n   SAY '                 FAX ===>>   ext 120606 or <<==='\n   SAY '                             (012) 4210606 <<==='\nEND\n\n/*****************************************/\n/* ALLOC ISPFPROF                        */\n/*****************************************/\nDSNAME = \"'\"UID\".\"SYSNAME\".ISPF.ISPPROF'\"\n\"FREE FI(ISPPROF)\"\nRC = LISTDSI(DSNAME)\nIF RC > 4 THEN\nDO\n X = MSG('ON')\n \"FREE FI(ISPCRTE)\"\n \"ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(18400)\"\n A1='\"ALLOC DA(' || DSNAME || ') SP(10,1) TRACKS DIR(10)',\n || 'USING(ISPCRTE) FI(ISPPROF)\"'\n SAY A1\n INTERPRET A1\n IF RC = 0 THEN\n  SAY  \"ISPF PROFILE DATA SET\" DSNAME \"HAS BEEN CREATED\"\n ELSE\n DO\n   SAY  \"UNABLE TO ALLOCATE ISPF PROFILE DATA SET\" DSNAME\n   \"FREE FI(ISPCRTE)\"\n   EXIT 12\n END\n \"FREE FI(ISPCRTE)\"\nEND\nA1 = '\"ALLOC FI(ISPPROF) SHR DA('||DSNAME||')\"'\nA2 = '\"ALLOC FI(ISPTABL) SHR DA('||DSNAME||')\"'\nA3 = '\"ALLOC FI(ISPTLIB) SHR DA('||DSNAME||')\"'\nINTERPRET A1\nINTERPRET A2\nINTERPRET A3\n\nIF TSOVER = 2050 THEN DO\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSEXEC */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nE_SMC    = 'SYMCHK.EXEC.NEW'                  /* CHANGES FOR OS/390 */\nE_ISF    = 'ISF.SISFEXEC'                     /* CHANGES FOR OS/390 */\nE_BFS    = 'BFS.LS130.SBFSPROC'               /* CHANGES FOR OS/390 */\nE_EWX    = 'EWX.V5R2M0.SEWXEXEC'              /* CHANGES FOR OS/390 */\nE_ANF    = 'ANF.SANFEXEC'                     /* CHANGES FOR OS/390 */\nE_SOMMVS = 'SOMMVS.SGOSREXX'                  /* CHANGES FOR OS/390 */\nE_SBP    = 'SYS1.SBPXEXEC'                    /* CHANGES FOR OS/390 */\nE_DCE    = 'DCE.V1R1M0.SEUVEXEC'              /* CHANGES FOR OS/390 */\nE_SEDG   = 'SYS1.SEDGEXE1'                    /* CHANGES FOR OS/390 */\nE_FFST   = 'FFST.V120ESA.SEPWSRC1'            /* CHANGES FOR OS/390 */\nE_ISP    = 'ISP.SISPEXEC'                     /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSPROC */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nC_ISP2  = 'ISP.SISPCLIB'                      /* Changes for OS/390 */\nC_RAC3  = 'SYS1.HRFCLST'                      /* Changes for OS/390 */\nC_CUS1  = 'SYS2.CMDPROC'                      /* Changes for OS/390 */\nC_CUS2  = \"'SYS2.\"SHRNAME\".CMDPROC'\"          /* Changes for OS/390 */\nC_CUS3  = 'SYS2.PRDC.CMDPROC'                 /* Changes for OS/390 */\nC_OPS1  = 'OPS.CMDPROC'                       /* Changes for OS/390 */\nC_OPS2  = \"'OPS.\"SHRNAME\".CMDPROC'\"           /* Changes for OS/390 */\nC_RAC1  = 'SYS2.RACFCLST'                     /* Changes for OS/390 */\nC_RAC2  = \"'SYS2.\"SHRNAME\".RACFCLST'\"         /* Changes for OS/390 */\nC_SMPE  = 'GIM.SGIMCLS0'                      /* Changes for OS/390 */\nC_IPCS  = 'SYS1.SBLSCLI0'                     /* Changes for OS/390 */\nC_HCD   = 'SYS1.SCBDCLST'                     /* Changes for OS/390 */\nC_DFSRT = 'SYS1.ICEISPC'                      /* Changes for OS/390 */\nC_DFDSS = 'SYS1.DGTCLIB'                      /* Changes for OS/390 */\nC_RMF   = 'SYS1.SERBCLS'                      /* Changes for OS/390 */\nC_ICQ   = 'ICQ.ICQCCLIB'                      /* Changes for OS/390 */\nC_EDC   = 'EDC.V2R2M0.SEDCLIST'               /* Changes for OS/390 */\nC_BKM   = 'EOY.SEOYCLIB'                      /* Changes for OS/390 */\nC_IOA1  = \"'SYS3.\"SHRNAME\".IOAIV410.CLIST'\"   /* Changes for OS/390 */\nC_IOA2  = 'SYS3.IOA.CLIST'                    /* Changes for OS/390 */\nC_IOA3  = 'SYS3.IOA500.CLIST'                 /* Changes for OS/390 */\nC_HACC  = 'SYS3.ZHC240.ISPCLIB'               /* Changes for OS/390 */\nC_SDF   = 'SDF2.V1R4M0.SDGICMD'               /* Changes for OS/390 */\nC_OMVS  = 'SYS1.SBPXEXEC'                     /* Changes for OS/390 */\nC_OSTA  = 'SYS3.OSTAR.CLIST'                  /* Changes for OS/390 */\nC_CDCU  = ''                                  /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPLLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nL_ICE   = 'SYS1.ICEDGTL'                      /* CHANGES FOR OS/390 */\nL_CBC1  = 'CBC.SCBCCMP'                       /* CHANGES FOR OS/390 */\nL_CBC2  = 'CBC.SCLBDLL'                       /* CHANGES FOR OS/390 */\nL_SMP   = 'GIM.SGIMLMD0'                      /* Changes for OS/390 */\nL_HCD   = 'SYS1.SCBDHENU'                     /* Changes for OS/390 */\nL_HSM   = 'SYS1.DFQLLIB'                      /* Changes for OS/390 */\nL_DFSRT = 'SYS1.ICEISPL'                      /* Changes for OS/390 */\nL_DFDSS = 'SYS1.DGTLLIB'                      /* Changes for OS/390 */\nL_CDCU  = ''                                  /* Changes for OS/390 */\nL_DITTO = 'DIT.V1R1M0.SDITLOAD'               /* Changes for OS/390 */\nL_DELP  = 'DELPHI.V221.CMDLOAD'               /* Changes for OS/390 */\nL_HACC1 = 'SYS3.ZHC240.ISPLOAD'               /* Changes for OS/390 */\nL_HACC2 = 'SYS3.ZHC240.LOAD'                  /* Changes for OS/390 */\nL_SDF   = 'SDF150.SDFLOAD'                    /* Changes for OS/390 */\nL_ISP   = 'ISP.SISPLOAD'                      /* Changes for OS/390 */\nL_ISF   = ''                                  /* Changes for OS/390 */\nL_MAIN  = \"'MAINT.\"SHRNAME\".LIVE.LOAD'\"       /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPPLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nP_SMC    = 'SYMCHK.PANELS'                    /* CHANGES FOR OS/390 */\nP_IPO1   = 'IPO1.ISPPLIB'                     /* CHANGES FOR OS/390 */\nP_BFS    = 'BFS.LS130.SBFSPLIB'               /* CHANGES FOR OS/390 */\nP_EWX    = 'EWX.V5R2M0.SEWXPLIB'              /* CHANGES FOR OS/390 */\nP_ANF    = 'ANF.SANFPLIB'                     /* CHANGES FOR OS/390 */\nP_CBC    = 'CBC.SCBCPNL'                      /* CHANGES FOR OS/390 */\nP_SBDT   = 'SYS1.SBDTPNL0'                    /* CHANGES FOR OS/390 */\nP_SOMMVS = 'SOMMVS.SGOSPNLS'                  /* CHANGES FOR OS/390 */\nP_GDDM   = 'GDDM.SADMPNL'                     /* CHANGES FOR OS/390 */\nP_SEDG   = 'SYS1.SEDGPENU'                    /* CHANGES FOR OS/390 */\nP_ICE    = 'SYS1.ICEDGTP'                     /* CHANGES FOR OS/390 */\nP_TCPIP  = 'TCPIP.SEZAPENU'                   /* CHANGES FOR OS/390 */\nP_FFST   = 'FFST.V120ESA.SEPWPENU'            /* CHANGES FOR OS/390 */\nP_SDSF   = 'ISF.SISFPLIB'                     /* Changes for OS/390 */\nP_IOA    = \"'SYS3.\"SHRNAME\".IOAIV410.PANEL'\"  /* Changes for OS/390 */\nP_IOA1   = 'SYS3.IOA.PANEL'                   /* Changes for OS/390 */\nP_IOA2   = 'SYS3.IOA500.PANEL'                /* Changes for OS/390 */\nP_CUS1   = 'SYS2.ISPPLIB'                     /* Changes for OS/390 */\nP_CUS2   = \"'SYS2.\"SHRNAME\".ISPPLIB'\"         /* Changes for OS/390 */\nP_ISPF   = 'ISP.SISPPENU'                     /* Changes for OS/390 */\nP_CUS3   = 'SYS2.RACFPANL'                    /* Changes for OS/390 */\nP_CUS4   = \"'SYS2.\"SHRNAME\".RACFPANL'\"        /* Changes for OS/390 */\nP_CUS5   = 'SYS2.ISP.OPSPENU'                 /* Changes for OS/390 */\nP_CUS6   = 'SYS2.ISP.PRGPENU'                 /* Changes for OS/390 */\nP_CUS7   = 'SYS2.ISP.NETPENU'                 /* Changes for OS/390 */\nP_SMP    = 'GIM.SGIMPENU'                     /* Changes for OS/390 */\nP_HSM    = 'SYS1.DFQPLIB'                     /* Changes for OS/390 */\nP_HCD    = 'SYS1.SCBDPENU'                    /* Changes for OS/390 */\nP_RMF3   = 'SYS1.SERBPENU'                    /* Changes for OS/390 */\nP_OMVS   = 'SYS1.SBPXPENU'                    /* Changes for OS/390 */\nP_DFSRT  = 'SYS1.ICEISPP'                     /* Changes for OS/390 */\nP_DFDSS  = 'SYS1.DGTPLIB'                     /* Changes for OS/390 */\nP_RACF   = 'SYS1.HRFPANL'                     /* Changes for OS/390 */\nP_IPCS   = 'SYS1.SBLSPNL0'                    /* Changes for OS/390 */\nP_BKM    = 'EOY.SEOYPENU'                     /* Changes for OS/390 */\nP_DELP   = 'DELPHI.V221.PLIB'                 /* Changes for OS/390 */\nP_CDCU   = ''                                 /* Changes for OS/390 */\nP_HACC   = 'SYS3.ZHC240.ISPPLIB'              /* Changes for OS/390 */\nP_ICQ    = 'ICQ.ICQPLIB'                      /* Changes for OS/390 */\nP_LMF    = 'SYS2.LMF.PLIB'                    /* Changes for OS/390 */\nP_MAIN   = 'MAINT.LIVE.PLIB'                  /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPMLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nM_ANF    = 'ANF.SANFMLIB'                     /* Changes for OS/390 */\nM_CBC    = 'CBC.SCBCIMG'                      /* Changes for OS/390 */\nM_EWX    = 'EWX.V5R2M0.SEWXMLIB'              /* Changes for OS/390 */\nM_SBD    = 'SYS1.SBDTMSG'                     /* Changes for OS/390 */\nM_SOMMVS = 'SOMMVS.SGOSMSGS'                  /* Changes for OS/390 */\nM_GDDM   = 'GDDM.SADMMSG'                     /* Changes for OS/390 */\nM_SEDG   = 'SYS1.SEDGMENU'                    /* Changes for OS/390 */\nM_ICE    = 'SYS1.ICEDGTM'                     /* Changes for OS/390 */\nM_TCPIP  = 'TCPIP.SEZAMENU'                   /* Changes for OS/390 */\nM_ISPF   = 'ISP.SISPMENU'                     /* Changes for OS/390 */\nM_SDSF   = 'ISF.SISFMLIB'                     /* Changes for OS/390 */\nM_SMP    = 'GIM.SGIMMENU'                     /* Changes for OS/390 */\nM_HSM    = 'SYS1.DFQMLIB'                     /* Changes for OS/390 */\nM_HCD    = 'SYS1.SCBDMENU'                    /* Changes for OS/390 */\nM_OMVS   = 'SYS1.SBPXMENU'                    /* Changes for OS/390 */\nM_RMF3   = 'SYS1.SERBMENU'                    /* Changes for OS/390 */\nM_DFSRT  = 'SYS1.ICEISPM'                     /* Changes for OS/390 */\nM_DFDSS  = 'SYS1.DGTMLIB'                     /* Changes for OS/390 */\nM_RACF   = 'SYS1.HRFMSG'                      /* Changes for OS/390 */\nM_IPCS   = 'SYS1.SBLSMSG0'                    /* Changes for OS/390 */\nM_CUS1   = 'SYS2.ISPMENU'                     /* Changes for OS/390 */\nM_C370   = 'EDC.V2R2M0.SEDCMSGP'              /* Changes for OS/390 */\nM_BKM    = 'EOY.SEOYMENU'                     /* Changes for OS/390 */\nM_DELP   = 'DELPHI.V221.MLIB'                 /* Changes for OS/390 */\nM_CDCU   = ''                                 /* Changes for OS/390 */\nM_IOA1   = \"'SYS3.\"SHRNAME\".IOAIV410.ISMSG'\"  /* Changes for OS/390 */\nM_IOA2   = 'SYS3.IOA.ISMSG'                   /* Changes for OS/390 */\nM_IOA3   = 'SYS3.IOA500.ISMSG'                /* Changes for OS/390 */\nM_HACC   = 'SYS3.ZHC240.ISPMLIB'              /* Changes for OS/390 */\nM_ICQ    = 'ICQ.ICQMLIB'                      /* Changes for OS/390 */\nM_MAIN   = 'MAINT.LIVE.MLIB'                  /* Changes for OS/390 */\nM_RAC1   = 'SYS2.RACFMENU'                    /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPTLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nT_DGT   = 'SYS1.DGTTLIB'                      /* CHANGES FOR OS/390 */\nT_SERBT = 'SYS1.SERBT'                        /* CHANGES FOR OS/390 */\nT_BFS   = 'BFS.LS130.SBFSTLIB'                /* CHANGES FOR OS/390 */\nT_EWX   = 'EWX.V5R2M0.SEWXTLIB'               /* CHANGES FOR OS/390 */\nT_ICQ1  = 'ICQ.ICQTABLS'                      /* CHANGES FOR OS/390 */\nT_SEDG  = 'SYS1.SEDGTBL1'                     /* CHANGES FOR OS/390 */\nT_ICE   = 'SYS1.ICEDGTT'                      /* CHANGES FOR OS/390 */\nT_SDSF  = 'ISF.SISFTLIB'                      /* Changes for OS/390 */\nT_SMP   = 'GIM.SGIMTENU' DSNAME               /* Changes for OS/390 */\nT_HCD   = 'SYS1.SCBDTENU'                     /* Changes for OS/390 */\nT_RMF3  = 'SYS1.SERBTENU'                     /* Changes for OS/390 */\nT_OMVS  = 'SYS1.SBPXTENU'                     /* Changes for OS/390 */\nT_DFSRT = 'SYS1.ICEISPT'                      /* Changes for OS/390 */\nT_DFDSS = 'SYS1.DGTTLIB'                      /* Changes for OS/390 */\nT_IPCS  = 'SYS1.SBLSTBL0'                     /* Changes for OS/390 */\nT_BKM   = 'EOY.SEOYTENU'                      /* Changes for OS/390 */\nT_DELP  = 'DELPHI.V221.CMDTAB'                /* Changes for OS/390 */\nT_ICQ   = 'ICQ.ICQTLIB'                       /* Changes for OS/390 */\nT_CDCU  = ''                                  /* Changes for OS/390 */\nT_IOA1  = \"'SYS3.\"||SHRNAME||\".IOAIV410.TLIB'\"/* Changes for OS/390 */\nT_IOA2  = 'SYS3.IOA.TLIB'                     /* Changes for OS/390 */\nT_IOA3  = 'SYS3.IOA500.PANEL'                 /* Changes for OS/390 */\nT_HACC  = 'SYS3.ZHC240.ISPTLIB'               /* Changes for OS/390 */\nT_ISPF  = 'ISP.SISPTENU'                      /* Changes for OS/390 */\nT_RAC1  = 'SYS2.RACFTABL'                     /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPSLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nS_EWX    = 'EWX.V5R2M0.SEWXSLIB'              /* CHANGES FOR OS/390 */\nS_CBC    = 'CBC.SCBCSKL'                      /* CHANGES FOR OS/390 */\nS_SOMMVS = 'SOMMVS.SGOSSKEL'                  /* CHANGES FOR OS/390 */\nS_SEDG   = 'SYS1.SEDGSKL1'                    /* CHANGES FOR OS/390 */\nS_ICE    = 'SYS1.ICEDGTS'                     /* CHANGES FOR OS/390 */\nS_SMP    = 'GIM.SGIMSENU'                     /* Changes for OS/390 */\nS_IPCS   = 'SYS1.SBLSKEL0'                    /* Changes for OS/390 */\nS_DFSRT  = 'SYS1.ICEISPS'                     /* Changes for OS/390 */\nS_DFDSS  = 'SYS1.DGTSLIB'                     /* Changes for OS/390 */\nS_RACF   = 'SYS1.HRFSKEL'                     /* Changes for OS/390 */\nS_ICQ    = 'ICQ.ICQSLIB'                      /* Changes for OS/390 */\nS_CDCU   = ' '                                /* Changes for OS/390 */\nS_IOA    = 'SYS3.IOA500.JCL'                  /* Changes for OS/390 */\nS_CUS1   = 'MAINT.LIVE.SLIB'                  /* Changes for OS/390 */\nS_ISPF   = 'ISP.SISPSLIB'                     /* Changes for OS/390 */\nS_ISF    = 'ISF.SISFSLIB'                     /* Changes for OS/390 */\nS_ISP2   = 'ISP.SISPSENU'                     /* Changes for OS/390 */\nS_RAC1   = 'SYS2.RACFSLIB'                    /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSLOG */             /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\nH_ISF  = \"'SYS0.HASPINDX'\"                    /* Changes for OS/390 */\n\n/*******************************/             /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSLOG */             /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\nTCPIP_DATA = \"'TCPIP.DATA.TCPIP(\"SYSNAME\")'\"\n\nEND\nELSE DO\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSEXEC */\n/********************************/\nE_ISP    = 'ISP.V4R2M0.SISPEXEC'\nE_SMC    = ''\nE_ISF    = ''\nE_BFS    = ''\nE_EWX    = ''\nE_ANF    = ''\nE_SOMMVS = ''\nE_SBP    = ''\nE_DCE    = ''\nE_SEDG   = ''\nE_FFST   = ''\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSPROC */\n/********************************/\nC_ISP2  = 'ISP.V4R2M0.SISPCLIB'\nC_RAC3  = 'SYS1.HRFCLST'\nC_CUS1  = 'SYS2.CMDPROC'\nC_CUS2  = \"'SYS2.\"SHRNAME\".CMDPROC'\"\nC_CUS3  = 'SYS2.PRDC.CMDPROC'\nC_OPS1  = 'OPS.CMDPROC'\nC_OPS2  = \"'OPS.\"SHRNAME\".CMDPROC'\"\nC_RAC1  = 'SYS2.RACFCLST'\nC_RAC2  = \"'SYS2.\"SHRNAME\".RACFCLST'\"\nC_SMPE  = 'GIM.SGIMCLS0'\nC_IPCS  = 'SYS1.SBLSCLI0'\nC_HCD   = 'SYS1.SCBDCLST'\nC_DFSRT = 'SYS1.ICEISPC'\nC_DFDSS = 'SYS1.DGTCLIB'\nC_RMF   = 'SYS1.SERBCLS'\nC_ICQ   = 'ICQ.ICQCCLIB'\nC_EDC   = 'EDC.V2R2M0.SEDCLIST'\nC_BKM   = 'EOY.SEOYCLIB'\nC_IOA1  = \"'SYS3.\"SHRNAME\".IOAIV410.CLIST'\"\nC_IOA2  = 'SYS3.IOA.CLIST'\nC_IOA3  = 'SYS3.IOA500.CLIST'\nC_HACC  = 'SYS3.ZHC240.ISPCLIB'\nC_SDF   = 'SDF2.V1R4M0.SDGICMD'\nC_OMVS  = 'SYS1.SBPXEXEC'\nC_CDCU  = 'CDCU.DCZDEXE'\nC_OSTA  = 'SYS3.OSTAR.CLIST'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPLLIB */\n/********************************/\nL_ICE   = ''\nL_CBC1  = ''\nL_CBC2  = ''\nL_SMP   = 'GIM.SGIMLMD0'\nL_HCD   = 'SYS1.SCBDHENU'\nL_HSM   = 'SYS1.DFQLLIB'\nL_DFSRT = 'SYS1.ICEISPL'\nL_DFDSS = 'SYS1.DGTLLIB'\nL_CDCU  = 'CDCU.DCZDLOD'\nL_DITTO = 'DIT.V1R1M0.SDITLOAD'\nL_DELP  = 'DELPHI.V221.CMDLOAD'\nL_HACC1 = 'SYS3.ZHC240.ISPLOAD'\nL_HACC2 = 'SYS3.ZHC240.LOAD'\nL_SDF   = 'SDF150.SDFLOAD'\nL_ISP   = 'ISP.V4R2M0.SISPLOAD'\nL_ISF   = ''\nL_MAIN  = \"'MAINT.\"SHRNAME\".LIVE.LOAD'\"\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPPLIB */\n/********************************/\nP_smc    = ''\nP_IPO1   = ''\nP_BFS    = ''\nP_EWX    = ''\nP_ANF    = ''\nP_CBC    = ''\nP_SBDT   = ''\nP_SOMMVS = ''\nP_GDDM   = ''\nP_SEDG   = ''\nP_ICE    = ''\nP_TCPIP  = ''\nP_FFST   = ''\nP_SDSF   = 'ISF.V1R5M0.SISFPLIB'\nP_IOA    = \"'SYS3.\"SHRNAME\".IOAIV410.PANEL'\"\nP_IOA1   = 'SYS3.IOA.PANEL'\nP_IOA2   = 'SYS3.IOA500.PANEL'\nP_CUS1   = 'SYS2.ISPPLIB'\nP_CUS2   = \"'SYS2.\"SHRNAME\".ISPPLIB'\"\nP_ISPF   = 'ISP.V4R2M0.SISPPENU'\nP_CUS3   = 'SYS2.RACFPANL'\nP_CUS4   = \"'SYS2.\"SHRNAME\".RACFPANL'\"\nP_CUS5   = 'SYS2.ISP.OPSPENU'\nP_CUS6   = 'SYS2.ISP.PRGPENU'\nP_CUS7   = 'SYS2.ISP.NETPENU'\nP_SMP    = 'GIM.SGIMPENU'\nP_HSM    = 'SYS1.DFQPLIB'\nP_HCD    = 'SYS1.SCBDPENU'\nP_RMF3   = 'SYS1.SERBPENU'\nP_OMVS   = 'SYS1.SBPXPENU'\nP_DFSRT  = 'SYS1.ICEISPP'\nP_DFDSS  = 'SYS1.DGTPLIB'\nP_RACF   = 'SYS1.HRFPANL'\nP_IPCS   = 'SYS1.SBLSPNL0'\nP_BKM    = 'EOY.SEOYPENU'\nP_DELP   = 'DELPHI.V221.PLIB'\nP_CDCU   = 'CDCU.DCZDPLB'\nP_HACC   = 'SYS3.ZHC240.ISPPLIB'\nP_ICQ    = 'ICQ.ICQPLIB'\nP_LMF    = 'SYS2.LMF.PLIB'\nP_MAIN   = 'MAINT.LIVE.PLIB'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPMLIB */\n/********************************/\nM_ANF    = ''\nM_CBC    = ''\nM_EWX    = ''\nM_SBD    = ''\nM_SOMMVS = ''\nM_GDDM   = ''\nM_SEDG   = ''\nM_ICE    = ''\nM_TCPIP  = ''\nM_ISPF   = 'ISP.V4R2M0.SISPMENU'\nM_SDSF   = 'ISF.V1R5M0.SISFMLIB'\nM_SMP    = 'GIM.SGIMMENU'\nM_HSM    = 'SYS1.DFQMLIB'\nM_HCD    = 'SYS1.SCBDMENU'\nM_OMVS   = 'SYS1.SBPXMENU'\nM_RMF3   = 'SYS1.SERBMENU'\nM_DFSRT  = 'SYS1.ICEISPM'\nM_DFDSS  = 'SYS1.DGTMLIB'\nM_RACF   = 'SYS1.HRFMSG'\nM_IPCS   = 'SYS1.SBLSMSG0'\nM_CUS1   = 'SYS2.ISPMENU'\nM_C370   = 'EDC.V2R2M0.SEDCMSGP'\nM_BKM    = 'EOY.SEOYMENU'\nM_DELP   = 'DELPHI.V221.MLIB'\nM_CDCU   = 'CDCU.DCZDMLB'\nM_IOA1   = \"'SYS3.\"SHRNAME\".IOAIV410.ISMSG'\"\nM_IOA2   = 'SYS3.IOA.ISMSG'\nM_IOA3   = 'SYS3.IOA500.ISMSG'\nM_HACC   = 'SYS3.ZHC240.ISPMLIB'\nM_ICQ    = 'ICQ.ICQMLIB'\nM_MAIN   = 'MAINT.LIVE.MLIB'\nM_RAC1   = 'SYS2.RACFMENU'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPTLIB */\n/********************************/\nT_DGT    = ''\nT_SERBT  = ''\nT_BFS    = ''\nT_EWX    = ''\nT_ICQ1   = ''\nT_SEDG   = ''\nT_ICE    = ''\nT_SDSF   = 'ISF.V1R5M0.SISFTLIB'\nT_SMP    = 'GIM.SGIMTENU' DSNAME\nT_HCD    = 'SYS1.SCBDTENU'\nT_RMF3   = 'SYS1.SERBTENU'\nT_OMVS   = 'SYS1.SBPXTENU'\nT_DFSRT  = 'SYS1.ICEISPT'\nT_DFDSS  = 'SYS1.DGTTLIB'\nT_IPCS   = 'SYS1.SBLSTBL0'\nT_BKM    = 'EOY.SEOYTENU'\nT_DELP   = 'DELPHI.V221.CMDTAB'\nT_ICQ    = 'ICQ.ICQTLIB'\nT_CDCU   = 'CDCU.DCZDTLB'\nT_IOA1   = \"'SYS3.\"||SHRNAME||\".IOAIV410.TLIB'\"\nT_IOA2   = 'SYS3.IOA.TLIB'\nT_IOA3   = 'SYS3.IOA500.PANEL'\nT_HACC   = 'SYS3.ZHC240.ISPTLIB'\nT_ISPF   = 'ISP.V4R2M0.SISPTENU'\nT_RAC1   = 'SYS2.RACFTABL'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPSLIB */\n/********************************/\nS_EWX    = ''\nS_CBC    = ''\nS_SOMMVS = ''\nS_SEDG   = ''\nS_ICE    = ''\nS_ISF    = ''\nS_SMP    = 'GIM.SGIMSENU'\nS_IPCS   = 'SYS1.SBLSKEL0'\nS_DFSRT  = 'SYS1.ICEISPS'\nS_DFDSS  = 'SYS1.DGTSLIB'\nS_RACF   = 'SYS1.HRFSKEL'\nS_ICQ    = 'ICQ.ICQSLIB'\nS_CDCU   = 'CDCU.DCZDSLB'\nS_CUS1   = 'MAINT.LIVE.SLIB'\nS_IOA    = 'SYS3.IOA500.JCL'\nS_ISPF   = 'ISP.V4R2M0.SISPSLIB'\nS_ISP2   = 'ISP.V4R2M0.SISPSENU'\nS_RAC1   = 'SYS2.RACFSLIB'\n\n/*******************************/\n/* SPECIFY DATASETS FOR SYSLOG */\n/*******************************/\nH_ISF    = \"'SYS0.\"SYSNAME\".HASPINDX'\"\n\nEND\n\n/*********************************/\n/*  SYSTEMS USERS                */\n/*********************************/\nIF (PROC = \"SPFBOOL\") THEN\nDO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA3 C_IOA2 C_IOA1 C_HACC C_SDF C_OMVS C_CDCU C_OSTA\n ELSE\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA1 C_IOA2 C_HACC C_SDF C_OMVS C_CDCU C_OSTA\n SYSEXEC = E_ISP E_SMC E_ISF E_BFS E_EWX E_ANF E_SOMMVS E_SBP,\n    E_DCE E_SEDG E_FFST\n IF SUBSTR(UID,1,4) = 'SYS0' THEN\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_HACC1 L_HACC2 L_MAIN L_CBC1 L_CBC2 L_ICE L_ISF\n ELSE\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_HACC1 L_HACC2 L_MAIN L_CBC1 L_CBC2 L_ICE L_ISF\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_LMF P_IOA2 P_IOA1 P_IOA P_CUS1 P_CUS3,\n    P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT P_DFDSS,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ P_IPO1,\n    P_BFS P_EWX P_ANF P_CBC P_SBDT P_SOMMVS P_GDDM P_SEDG,\n    P_ICE P_TCPIP P_FFST P_SMC\n ELSE\n    ISPPLIB = P_DFDSS P_SDSF P_LMF P_IOA P_IOA1 P_CUS1,\n    P_CUS3 P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ P_IPO1,\n    P_BFS P_EWX P_ANF P_CBC P_SBDT P_SOMMVS P_GDDM P_SEDG,\n    P_ICE P_TCPIP P_FFST P_SMC\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU M_IOA3,\n    M_IOA2 M_IOA1 M_HACC M_ICQ M_ANF M_CBC M_EWX M_SBD M_SOMMVS,\n    M_GDDM M_SEDG M_ICE M_TCPIP\n ELSE\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU M_IOA3,\n    M_IOA1 M_IOA2 M_HACC M_ICQ M_ANF M_CBC M_EWX M_SBD M_SOMMVS,\n    M_GDDM M_SEDG M_ICE M_TCPIP\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA3 T_IOA2 T_IOA1 T_HACC,\n    T_ISPF T_RAC1 T_DGT T_SERBT T_BFS T_EWX T_ICQ1 T_SEDG T_ICE\n ELSE\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA1 T_IOA2 T_IOA3 T_HACC,\n    T_ISPF T_RAC1 T_DGT T_SERBT T_BFS T_EWX T_ICQ1 T_SEDG T_ICE\n ISPSLIB = S_SMP S_IPCS S_DFSRT S_DFDSS S_RACF S_ICQ S_CDCU,\n    S_CUS1 S_ISPF S_IOA S_EWX S_CBC S_SOMMVS S_SEDG S_ICE S_ISF\n HASPINDX = H_ISF\n if tsover = 2050 then\n  PNL = 'PANEL(ISP@390M)'\n else\n  PNL = 'PANEL(ISP@BOOL)'\n JOBTRAC = 'YES'\nEND\n\n/*********************************/\n/*  PROGRAMMERS                  */\n/*********************************/\nIF (PROC = \"PROGRAMR\") |,\n   (PROC = \"UNIXUSER\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n    C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA3 C_IOA2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n    C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_MAIN L_DFSRT L_DFDSS L_DELP L_SDF L_ISF\n ELSE\n    ISPLLIB = L_MAIN L_DFSRT L_DFDSS L_DELP L_SDF L_ISF\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_LMF P_ISPF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n    P_SDSF P_DELP P_IOA2 P_IOA1 P_BKM\n ELSE\n    ISPPLIB = P_LMF P_ISPF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n    P_SDSF P_DELP P_IOA P_BKM\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n    M_IOA3 M_IOA2 M_SDSF\n ELSE\n    ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n    M_IOA1 M_SDSF\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA2 T_ISPF\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA2 T_ISPF\n ISPSLIB = S_CUS1 S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@PRG)'\n JOBTRAC1 = 'YES'\nEND\n\n/**********************************/\n/*  OPERATORS USERS               */\n/**********************************/\nIF (PROC = \"OPERATOR\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA3 C_IOA1\n ELSE\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_DFSRT L_DFDSS L_ISF\n ELSE\n    ISPLLIB = L_DFSRT L_DFDSS L_ISF\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA2 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ELSE\n    ISPPLIB = P_ISPF P_SDSF P_CUS3 P_CUS5 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ISPMLIB = M_ISPF M_SDSF M_RMF3 M_DFSRT M_DFDSS M_C370 M_BKM,\n    M_IOA1\n ISPTLIB = T_SDSF T_RMF3 T_DFSRT T_DFDSS T_BKM T_IOA1 T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@OPS)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  DIENS KONTROLE               */\n/*********************************/\nIF (PROC = \"DIENSKRL\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2 C_DFDSS\n SYSEXEC = E_ISP\n ISPLLIB = L_DFDSS L_ISP L_ISF\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_DFDSS M_ISPF\n ISPTLIB = T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@DNS)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  NETWORK USERS               */\n/********************************/\nIF (PROC = \"NETWORK\")\nTHEN DO\n SYSPROC = C_RAC1 C_CUS1 C_DFSRT C_DFDSS C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_ISP L_ISF\n ISPPLIB = P_CUS3 P_CUS7 P_DFSRT P_DFDSS P_SDSF\n ISPMLIB = M_DFSRT M_DFDSS M_ISPF\n ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@NET)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  CONTROL USERS               */\n/********************************/\nIF (PROC = \"AUTOMATE\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA3 C_IOA2 C_IOA1 C_HACC C_SDF C_OMVS C_CDCU C_OSTA\n ELSE\n    SYSPROC = C_ISP2 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA1 C_IOA2 C_HACC C_SDF C_OMVS C_CDCU C_OSTA\n SYSEXEC = E_ISP\n IF SUBSTR(UID,1,4) = 'SYS0' THEN\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_HACC1 L_HACC2 L_MAIN L_ISF\n ELSE\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_HACC1 L_HACC2 L_MAIN L_ISF\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_LMF P_IOA2 P_IOA1 P_IOA P_CUS1 P_CUS3,\n    P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT P_DFDSS,\n    P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n ELSE\n    ISPPLIB = P_ISPF P_DFDSS P_SDSF P_LMF P_IOA P_IOA1 P_CUS1,\n    P_CUS3 P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT,\n    P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU M_IOA3,\n    M_IOA2 M_IOA1 M_HACC M_ICQ\n ELSE\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU,\n    M_IOA1 M_IOA2 M_HACC M_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA3 T_IOA2 T_IOA1 T_HACC,\n    T_ISPF T_RAC1\n ELSE\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA1 T_IOA2 T_IOA3 T_HACC,\n    T_ISPF T_RAC1\n ISPSLIB = S_SMP S_IPCS S_DFSRT S_DFDSS S_ICQ S_CDCU,\n    S_CUS1 S_ISPF S_IOA\n HASPINDX = H_ISF\n  PNL = 'PANEL(ISP@MVS)'\n JOBTRAC = 'YES'\nEND\n\n/******************************/\n/*  MEDIA USERS               */\n/******************************/\nIF (PROC = \"MEDIA\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA3 C_IOA2 C_IOA1 C_ISP2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_ISF\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS5 P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA2 P_IOA P_IOA1\n ELSE\n    ISPPLIB = P_SDSF P_CUS5 P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA P_IOA1\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA3 M_IOA2 M_ISPF\n ELSE\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA1 M_ISPF\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA2 T_SDSF T_ISPF\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@MED)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  ADMINISTRATOR                */\n/*********************************/\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@ADMN)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  VEILIGHEID ADMINISTRATOR     */\n/*********************************/\nIF (PROC = \"SPFTHE\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF\n ISPSLIB = S_RAC1 S_ISP2 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@THE)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  RADIOBEHEER ADMINISTRATOR    */\n/*********************************/\nIF (PROC = \"RADADMN\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF\n ISPSLIB = S_RAC1 S_ISP2 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@RDBA)'\n JOBTRAC = 'NO'\nEND\n/*******************************/\n/*  POLFIN USERS               */\n/*******************************/\nIF (PROC = \"SPFPOL\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPPLIB = P_CUS3 P_SDSF P_ISPF\n ISPMLIB = M_ISPF\n ISPTLIB = T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@POL)'\n JOBTRAC = 'NO'\nEND\n\n/****************************/\n/*  KRS USERS               */\n/****************************/\nIF (PROC = \"SPFKRI\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_RAC1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@KRI)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  READY PROMPT USERS           */\n/*********************************/\nIF (PROC = \"READY\") |,\n   (PROC = \"PDF\") THEN\nDO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3\n ISPMLIB = M_ISPF\n ISPTLIB = T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL()'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  COMPLETE ADMINISTRATORS      */\n/*********************************/\nIF (PROC = \"COMADMN\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1 M_RACF\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@COMA)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  COMPLETE ADMINISTRATORS      */\n/*********************************/\nIF (PROC = \"COMRESU\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1 M_RACF\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@COMR)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  CONTROL-D USERS              */\n/*********************************/\nIF (PROC = \"SPFCTD\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n else\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF P_ISPF P_IOA2 P_IOA\n ISPMLIB = M_IOA3 M_IOA1 M_ISPF\n ISPTLIB = T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@CTD)'\n JOBTRAC = 'NO'\nEND\n\n/***********************************/\n/** CHECK FOR UNKNOWN PROC        **/\n/***********************************/\nIF ISPPLIB = \"ISPPLIB\" THEN\nDO\n SAY ' '\n SAY ' '\n SAY 'YOUR LOGON PROCEDURE IS UNKNOWN TO TSO'\n SAY 'PLEASE VERIFY THAT YOUR LOGON PROCEDURE IS CORRECT'\n SAY ' '\n SAY 'OR CALL YOUR HELPDESK FOR HELP'\n EXIT 12\nEND\n\n/***********************************/\n/** JOBTRAC ADDITIONAL ALLOCATIONS */\n/***********************************/\nIF JOBTRAC = 'YES' THEN\nDO\n \"FREE FI(SMPTABL,ISRCFIL,CISTABL)\"\n \"FREE FI(ICQAATAB)\"\n \"FREE FI(ICQABTAB)\"\n \"FREE FI(ICQANTAB)\"\n \"FREE FI(ICQAPTAB)\"\n \"FREE FI(ICQAMTAB)\"\n \"FREE FI(ICQCMTAB)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n \"ALLOC FI(ICQAATAB) SHR DA(ICQ.ICQAATAB)\"\n \"ALLOC FI(ICQABTAB) SHR DA(ICQ.ICQABTAB)\"\n \"ALLOC FI(ICQANTAB) SHR DA(ICQ.ICQANTAB)\"\n \"ALLOC FI(ICQAPTAB) SHR DA(ICQ.ICQAPTAB)\"\n \"ALLOC FI(ICQAMTAB) SHR DA(ICQ.ICQAMTAB)\"\n \"ALLOC FI(ICQCMTAB) SHR DA(ICQ.ICQCMTAB)\"\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\n/*  \"ALLOC FI(DVDMSL) SHR DA(SDF150.MSL)\"      */\n/*  \"ALLOC FI(DVDMSLP) SHR DA(SDF150.MSLP)\"    */\n/*  \"ALLOC FI(DVDMSLT) SHR DA(SDF150.MSLT)\"    */\n/*  \"ALLOC FI(DVDTML) SHR DA(SDF150.TML)\"      */\n/*  \"ALLOC FI(DVDITF) SHR DA(SDF150.ITF)\"      */\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC1 = 'YES' THEN\nDO\n \"FREE FI(ISRCFIL)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC2 = 'YES' THEN\nDO\n \"FREE FI(SMPTABL)\"\n \"FREE FI(CISTABL)\"\n X=MSG('ON');\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n\n X=MSG('OFF');\nEND\n/******************************/\n/** STANDARD ISPF ALLOCTIONS **/\n/******************************/\n\"FREE FI(SYSPROC,SYSEXEC,ISPLLIB,ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB)\"\n\"FREE FI(HASPINDX)\"\n\nX = MSG('ON')\n\"ALLOC FI(SYSPROC) DA(\"SYSPROC\") SHR\"\n\"ALLOC FI(SYSEXEC) DA(\"SYSEXEC\") SHR\"\n\"ALLOC FI(ISPLLIB) DA(\"ISPLLIB\") SHR\"\n\"ALLOC FI(ISPPLIB) DA(\"ISPPLIB\") SHR\"\n\"ALLOC FI(ISPMLIB) DA(\"ISPMLIB\") SHR\"\n\"ALLOC FI(ISPTLIB) DA(\"ISPTLIB\") SHR\"\n\"ALLOC FI(ISPSLIB) DA(\"ISPSLIB\") SHR\"\n\"ALLOC FI(HASPINDX) DA(\"HASPINDX\") SHR\"\n\"ALLOC FI(SYSTCPD) DA(\"TCPIP_DATA\") SHR\"\nX = MSG('ON')\n\n\"EXECUTIL SEARCHDD(YES)\"\nSIGNAL NO_COMMENT\n/*\n   THE ABOVE SIGNAL PREVENT INTERPRETATION OF LONG LINES OF COMMENTS,\n   SINCE IT BRANCHES AROUND THEM ALL\n*/\n/*--------------------------------------------------------------------+\n | IF THE USER HAS A DDIR, THEN ALLOC ALL FILES REQUIRED BY IPCS,     |\n |           THEN CALL IPCS.                                          |\n | SINCE IPCS DOES NOT SEEM TO RECOGNIZE REXX COMMANDS, WE PULL A     |\n |           JIPPO BY QUEUEING THE COMMAND 'PDF PANEL(XXXXXXXX)'      |\n |           BEFORE CALLING IPCS.  THIS WAY,  SINCE IPCS DOES NOT     |\n |           SEE ANY MORE CMDS IN THE EXEC (CLIST), IT PULL WHAT      |\n |           WAS IN THE COMMAND STACK.                                |\n +--------------------------------------------------------------------*/\nNO_COMMENT:\n\nCall USER_PROFILE\n\nddir = \"'\"userid()\".D\"sid\"0.DDIR'\"\nRC = LISTDSI(DDIR)\nIf rc > 4 then do        /* Check for the old one */\n   DDIR = \"'\"||UID||\".DDIR'\"\n   rc = listdsi(ddir)\n   end\nIF RC > 4 THEN\n   \"PDF\" PNL\nELSE DO\n   X = OUTTRAP(ON)\n   \"VFY DS(\"DDIR\")\"\n   X = OUTTRAP(X)\n   \"ALLOC FI(IPCSDDIR) DA(\"DDIR\") SHR\"\n   \"ALLOC FI(IPCSPARM) DA('SYS2.PARMLIB') SHR\"\n   \"ALLOC FI(IPCSPRNT) SYS(X) HOLD\"\n   QUEUE 'PDF' PNL\n   \"IPCS PARM(01)\"\nEND\n\nExit 0  /*-------------------------------------------------------*/\n\nUSER_PROFILE:\n\nuser_prof = \"'\"userid()\".A0.TSPROF(PROF000)'\"\nIf sysdsn(user_prof) = 'OK' then do\n   Say 'Executing' user_prof\n   'EXEC' user_prof 'EXEC'\n   end\n\nReturn\n./ ADD NAME=ISP3901  0101-01016-01016-1428-00908-00908-00000-RACFCLS\n/* ****************************Rexx**********************************/\n/* SAPD SHARED LOGON PROC */\n/* ****************************Rexx**********************************/\n\n\"PROFILE NOPREF MODE WTPMSG MSGID\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nPROC = SYSVAR(SYSPROC)\nTSOVER = SYSVAR(SYSTSOE)    /* TEST FOR OS/390 */\nGETSYSN\nIF RC = 0 THEN SYSNAME=BIGERROR\nIF RC = 1 THEN SYSNAME=PRDA\nIF RC = 2 THEN SYSNAME=PRDB\nIF RC = 3 THEN SYSNAME=PRDC\nIF RC = 4 THEN SYSNAME=PRDD\nIF RC = 5 THEN SYSNAME=PRDE\nIF RC = 6 THEN SYSNAME=TSTF\nIF RC = 7 THEN SYSNAME=TSTG\nIF RC = 8 THEN SYSNAME=TST1\nSHRNAME = SYSNAME\nIF RC = 4 THEN SHRNAME=PRDE\nIF RC = 7 THEN SHRNAME=PRDE\nIF RC = 8 THEN SHRNAME=PRDE\n\nSAY 'HAVE A NICE DAY !!!'\nSAY 'BUSY ALLOCATING FILES, PLEASE WAIT .....'\nSAY ''\nMURPHY\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"COMADMN\") |,\n   (PROC = \"COMRESU\") |,\n   (PROC = \"SPFTHE\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n   SAY ' '\n   SAY '                 If you have any problems'\n   SAY '                 with administering USERIDs'\n   SAY '                 please phone'\n   SAY ' '\n   SAY '                 EDWARD ROSS ext 120656 or'\n   SAY '                             (012) 4210656'\n   SAY '                 FAX ===>>   ext 120606 or <<==='\n   SAY '                             (012) 4210606 <<==='\nEND\n\n/*****************************************/\n/* ALLOC ISPFPROF                        */\n/*****************************************/\nDSNAME = \"'\"UID\".\"SYSNAME\".ISPF.ISPPROF'\"\n\"FREE FI(ISPPROF)\"\nRC = LISTDSI(DSNAME)\nIF RC > 4 THEN\nDO\n X = MSG('ON')\n \"FREE FI(ISPCRTE)\"\n \"ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(18400)\"\n A1='\"ALLOC DA(' || DSNAME || ') SP(10,1) TRACKS DIR(10)',\n || 'USING(ISPCRTE) FI(ISPPROF)\"'\n SAY A1\n INTERPRET A1\n IF RC = 0 THEN\n  SAY  \"ISPF PROFILE DATA SET\" DSNAME \"HAS BEEN CREATED\"\n ELSE\n DO\n   SAY  \"UNABLE TO ALLOCATE ISPF PROFILE DATA SET\" DSNAME\n   \"FREE FI(ISPCRTE)\"\n   EXIT 12\n END\n \"FREE FI(ISPCRTE)\"\nEND\nA1 = '\"ALLOC FI(ISPPROF) SHR DA('||DSNAME||')\"'\nA2 = '\"ALLOC FI(ISPTABL) SHR DA('||DSNAME||')\"'\nA3 = '\"ALLOC FI(ISPTLIB) SHR DA('||DSNAME||')\"'\nINTERPRET A1\nINTERPRET A2\nINTERPRET A3\n\nIF TSOVER = 2050 THEN DO\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSEXEC */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nE_ISP = 'ISP.SISPEXEC'                        /* Changes for OS/390 */\nE_SYMC = 'SYMCHK.EXEC'                        /* CHANGES FOR OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSPROC */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nC_ISP2 = 'ISP.SISPCLIB'                       /* Changes for OS/390 */\nC_RAC3 = 'SYS1.HRFCLST'                       /* Changes for OS/390 */\nC_CUS1 = 'SYS2.CMDPROC'                       /* Changes for OS/390 */\nC_CUS2 = \"'SYS2.\"SHRNAME\".CMDPROC'\"           /* Changes for OS/390 */\nC_CUS3 = 'SYS2.PRDC.CMDPROC'                  /* Changes for OS/390 */\nC_OPS1 = 'OPS.CMDPROC'                        /* Changes for OS/390 */\nC_OPS2 = \"'OPS.\"SHRNAME\".CMDPROC'\"            /* Changes for OS/390 */\nC_RAC1 = 'SYS2.RACFCLST'                      /* Changes for OS/390 */\nC_RAC2 = \"'SYS2.\"SHRNAME\".RACFCLST'\"          /* Changes for OS/390 */\nC_SMPE = 'GIM.SGIMCLS0'                       /* Changes for OS/390 */\nC_IPCS = 'SYS1.SBLSCLI0'                      /* Changes for OS/390 */\nC_HCD  = 'SYS1.SCBDCLST'                      /* Changes for OS/390 */\nC_DFSRT = 'SYS1.ICEISPC'                      /* Changes for OS/390 */\nC_DFDSS = 'SYS1.DGTCLIB'                      /* Changes for OS/390 */\nC_RMF  = 'SYS1.SERBCLS'                       /* Changes for OS/390 */\nC_ICQ  = 'ICQ.ICQCCLIB'                       /* Changes for OS/390 */\nC_EDC  = 'EDC.V2R2M0.SEDCLIST'                /* Changes for OS/390 */\nC_BKM  = 'EOY.SEOYCLIB'                       /* Changes for OS/390 */\nC_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.CLIST'\"    /* Changes for OS/390 */\nC_IOA2 = 'SYS3.IOA.CLIST'                     /* Changes for OS/390 */\nC_IOA3 = 'SYS3.IOA500.CLIST'                  /* Changes for OS/390 */\nC_HACC = 'SYS3.ZHC240.ISPCLIB'                /* Changes for OS/390 */\nC_SDF  = 'SDF2.V1R4M0.SDGICMD'                /* Changes for OS/390 */\nC_OMVS = 'SYS1.SBPXEXEC'                      /* Changes for OS/390 */\nC_CDCU = ''                                   /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPLLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nL_SMP  = 'GIM.SGIMLMD0'                       /* Changes for OS/390 */\nL_HCD  = 'SYS1.SCBDHENU'                      /* Changes for OS/390 */\nL_HSM = 'SYS1.DFQLLIB'                        /* Changes for OS/390 */\nL_DFSRT = 'SYS1.ICEISPL'                      /* Changes for OS/390 */\nL_DFDSS = 'SYS1.DGTLLIB'                      /* Changes for OS/390 */\nL_CDCU  = ''                                  /* Changes for OS/390 */\nL_DITTO = 'DIT.V1R1M0.SDITLOAD'               /* Changes for OS/390 */\nL_DELP = 'DELPHI.V221.CMDLOAD'                /* Changes for OS/390 */\nL_TSP1 = 'SYS2.TSPRINT.APFLIB'                /* Changes for OS/390 */\nL_HACC1 = 'SYS3.ZHC240.ISPLOAD'               /* Changes for OS/390 */\nL_HACC2 = 'SYS3.ZHC240.LOAD'                  /* Changes for OS/390 */\nL_SDF = 'SDF150.SDFLOAD'                      /* Changes for OS/390 */\nL_ISP = 'ISP.SISPLOAD'                        /* Changes for OS/390 */\nL_MAIN = \"'MAINT.\"SHRNAME\".LIVE.LOAD'\"        /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPPLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nP_SYMC = 'SYMCHK.PANELS'                      /* CHANGES FOR OS/390 */\nP_SDSF = 'ISF.SISFPLIB'                       /* Changes for OS/390 */\nP_IOA = \"'SYS3.\"SHRNAME\".IOAIV410.PANEL'\"     /* Changes for OS/390 */\nP_IOA1 = 'SYS3.IOA.PANEL'                     /* Changes for OS/390 */\nP_IOA2 = 'SYS3.IOA500.PANEL'                  /* Changes for OS/390 */\nP_CUS1 = 'SYS2.ISPPLIB'                       /* Changes for OS/390 */\nP_CUS2 = \"'SYS2.\"SHRNAME\".ISPPLIB'\"           /* Changes for OS/390 */\nP_ISPF = 'ISP.SISPPENU'                       /* Changes for OS/390 */\nP_CUS3 = 'SYS2.RACFPANL'                      /* Changes for OS/390 */\nP_CUS4 = \"'SYS2.\"SHRNAME\".RACFPANL'\"          /* Changes for OS/390 */\nP_CUS5 = 'SYS2.ISP.OPSPENU'                   /* Changes for OS/390 */\nP_CUS6 = 'SYS2.ISP.PRGPENU'                   /* Changes for OS/390 */\nP_CUS7 = 'SYS2.ISP.NETPENU'                   /* Changes for OS/390 */\nP_SMP = 'GIM.SGIMPENU'                        /* Changes for OS/390 */\nP_HSM = 'SYS1.DFQPLIB'                        /* Changes for OS/390 */\nP_HCD = 'SYS1.SCBDPENU'                       /* Changes for OS/390 */\nP_RMF3 = 'SYS1.SERBPENU'                      /* Changes for OS/390 */\nP_OMVS = 'SYS1.SBPXPENU'                      /* Changes for OS/390 */\nP_DFSRT = 'SYS1.ICEISPP'                      /* Changes for OS/390 */\nP_DFDSS = 'SYS1.DGTPLIB'                      /* Changes for OS/390 */\nP_RACF  = 'SYS1.HRFPANL'                      /* Changes for OS/390 */\nP_IPCS = 'SYS1.SBLSPNL0'                      /* Changes for OS/390 */\nP_BKM = 'EOY.SEOYPENU'                        /* Changes for OS/390 */\nP_DELP = 'DELPHI.V221.PLIB'                   /* Changes for OS/390 */\nP_CDCU = ''                                   /* Changes for OS/390 */\nP_HACC = 'SYS3.ZHC240.ISPPLIB'                /* Changes for OS/390 */\nP_ICQ = 'ICQ.ICQPLIB'                         /* Changes for OS/390 */\nP_LMF = 'SYS2.LMF.PLIB'                       /* Changes for OS/390 */\nP_MAIN = 'MAINT.LIVE.PLIB'                    /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPMLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nM_ISPF = 'ISP.SISPMENU'                       /* Changes for OS/390 */\nM_SDSF = 'ISF.SISFMLIB'                       /* Changes for OS/390 */\nM_SMP  = 'GIM.SGIMMENU'                       /* Changes for OS/390 */\nM_HSM = 'SYS1.DFQMLIB'                        /* Changes for OS/390 */\nM_HCD = 'SYS1.SCBDMENU'                       /* Changes for OS/390 */\nM_OMVS = 'SYS1.SBPXMENU'                      /* Changes for OS/390 */\nM_RMF3 = 'SYS1.SERBMENU'                      /* Changes for OS/390 */\nM_DFSRT = 'SYS1.ICEISPM'                      /* Changes for OS/390 */\nM_DFDSS = 'SYS1.DGTMLIB'                      /* Changes for OS/390 */\nM_RACF = 'SYS1.HRFMSG'                        /* Changes for OS/390 */\nM_IPCS = 'SYS1.SBLSMSG0'                      /* Changes for OS/390 */\nM_CUS1 = 'SYS2.ISPMENU'                       /* Changes for OS/390 */\nM_C370 = 'EDC.V2R2M0.SEDCMSGP'                /* Changes for OS/390 */\nM_BKM = 'EOY.SEOYMENU'                        /* Changes for OS/390 */\nM_DELP = 'DELPHI.V221.MLIB'                   /* Changes for OS/390 */\nM_CDCU = ''                                   /* Changes for OS/390 */\nM_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.ISMSG'\"    /* Changes for OS/390 */\nM_IOA2 = 'SYS3.IOA.ISMSG'                     /* Changes for OS/390 */\nM_IOA3 = 'SYS3.IOA500.ISMSG'                  /* Changes for OS/390 */\nM_HACC = 'SYS3.ZHC240.ISPMLIB'                /* Changes for OS/390 */\nM_ICQ = 'ICQ.ICQMLIB'                         /* Changes for OS/390 */\nM_MAIN = 'MAINT.LIVE.MLIB'                    /* Changes for OS/390 */\nM_RAC1 = 'SYS2.RACFMENU'                      /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPTLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nT_SDSF = 'ISF.SISFTLIB'                       /* Changes for OS/390 */\nT_SMP  = 'GIM.SGIMTENU' DSNAME                /* Changes for OS/390 */\nT_HCD  = 'SYS1.SCBDTENU'                      /* Changes for OS/390 */\nT_RMF3 = 'SYS1.SERBTENU'                      /* Changes for OS/390 */\nT_OMVS = 'SYS1.SBPXTENU'                      /* Changes for OS/390 */\nT_DFSRT = 'SYS1.ICEISPT'                      /* Changes for OS/390 */\nT_DFDSS = 'SYS1.DGTTLIB'                      /* Changes for OS/390 */\nT_IPCS  = 'SYS1.SBLSTBL0'                     /* Changes for OS/390 */\nT_BKM  = 'EOY.SEOYTENU'                       /* Changes for OS/390 */\nT_DELP = 'DELPHI.V221.CMDTAB'                 /* Changes for OS/390 */\nT_ICQ = 'ICQ.ICQTLIB'                         /* Changes for OS/390 */\nT_CDCU  = ''                                  /* Changes for OS/390 */\nT_IOA1  = \"'SYS3.\"||SHRNAME||\".IOAIV410.TLIB'\"/* Changes for OS/390 */\nT_IOA2  = 'SYS3.IOA.TLIB'                     /* Changes for OS/390 */\nT_IOA3  = 'SYS3.IOA500.PANEL'                 /* Changes for OS/390 */\nT_HACC  = 'SYS3.ZHC240.ISPTLIB'               /* Changes for OS/390 */\nT_ISPF  = 'ISP.SISPTENU'                      /* Changes for OS/390 */\nT_RAC1  = 'SYS2.RACFTABL'                     /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPSLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nS_SMP  = 'GIM.SGIMSENU'                       /* Changes for OS/390 */\nS_IPCS = 'SYS1.SBLSKEL0'                      /* Changes for OS/390 */\nS_DFSRT = 'SYS1.ICEISPS'                      /* Changes for OS/390 */\nS_DFDSS = 'SYS1.DGTSLIB'                      /* Changes for OS/390 */\nS_RACF = 'SYS1.HRFSKEL'                       /* Changes for OS/390 */\nS_ICQ  = 'ICQ.ICQSLIB'                        /* Changes for OS/390 */\nS_CDCU = ''                                   /* Changes for OS/390 */\nS_IOA  = 'SYS3.IOA500.JCL'                    /* Changes for OS/390 */\nS_CUS1 = 'MAINT.LIVE.SLIB'                    /* Changes for OS/390 */\nS_ISPF = 'ISP.SISPSLIB'                       /* Changes for OS/390 */\nS_ISP2 = 'ISP.SISPSENU'                       /* Changes for OS/390 */\nS_RAC1 = 'SYS2.RACFSLIB'                      /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSLOG */             /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\nH_ISF  = \"'SYS0.HASPINDX'\"                    /* Changes for OS/390 */\n\nEND\nELSE DO\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSEXEC */\n/********************************/\nE_ISP = 'ISP.V4R2M0.SISPEXEC'\nE_SYMC = ''\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSPROC */\n/********************************/\nC_ISP2 = 'ISP.V4R2M0.SISPCLIB'\nC_RAC3 = 'SYS1.HRFCLST'\nC_CUS1 = 'SYS2.CMDPROC'\nC_CUS2 = \"'SYS2.\"SHRNAME\".CMDPROC'\"\nC_CUS3 = 'SYS2.PRDC.CMDPROC'\nC_OPS1 = 'OPS.CMDPROC'\nC_OPS2 = \"'OPS.\"SHRNAME\".CMDPROC'\"\nC_RAC1 = 'SYS2.RACFCLST'\nC_RAC2 = \"'SYS2.\"SHRNAME\".RACFCLST'\"\nC_SMPE = 'GIM.SGIMCLS0'\nC_IPCS = 'SYS1.SBLSCLI0'\nC_HCD  = 'SYS1.SCBDCLST'\nC_DFSRT = 'SYS1.ICEISPC'\nC_DFDSS = 'SYS1.DGTCLIB'\nC_RMF  = 'SYS1.SERBCLS'\nC_ICQ  = 'ICQ.ICQCCLIB'\nC_EDC  = 'EDC.V2R2M0.SEDCLIST'\nC_BKM  = 'EOY.SEOYCLIB'\nC_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.CLIST'\"\nC_IOA2 = 'SYS3.IOA.CLIST'\nC_IOA3 = 'SYS3.IOA500.CLIST'\nC_HACC = 'SYS3.ZHC240.ISPCLIB'\nC_SDF  = 'SDF2.V1R4M0.SDGICMD'\nC_OMVS = 'SYS1.SBPXEXEC'\nC_CDCU = 'CDCU.DCZDEXE'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPLLIB */\n/********************************/\nL_SMP  = 'GIM.SGIMLMD0'\nL_HCD  = 'SYS1.SCBDHENU'\nL_HSM = 'SYS1.DFQLLIB'\nL_DFSRT = 'SYS1.ICEISPL'\nL_DFDSS = 'SYS1.DGTLLIB'\nL_CDCU  = 'CDCU.DCZDLOD'\nL_DITTO = 'DIT.V1R1M0.SDITLOAD'\nL_DELP = 'DELPHI.V221.CMDLOAD'\nL_TSP1 = 'SYS2.TSPRINT.APFLIB'\nL_HACC1 = 'SYS3.ZHC240.ISPLOAD'\nL_HACC2 = 'SYS3.ZHC240.LOAD'\nL_SDF = 'SDF150.SDFLOAD'\nL_ISP = 'ISP.V4R2M0.SISPLOAD'\nL_MAIN = \"'MAINT.\"SHRNAME\".LIVE.LOAD'\"\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPPLIB */\n/********************************/\nP_SYMC = ''\nP_SDSF = 'ISF.V1R5M0.SISFPLIB'\nP_IOA = \"'SYS3.\"SHRNAME\".IOAIV410.PANEL'\"\nP_IOA1 = 'SYS3.IOA.PANEL'\nP_IOA2 = 'SYS3.IOA500.PANEL'\nP_CUS1 = 'SYS2.ISPPLIB'\nP_CUS2 = \"'SYS2.\"SHRNAME\".ISPPLIB'\"\nP_ISPF = 'ISP.V4R2M0.SISPPENU'\nP_CUS3 = 'SYS2.RACFPANL'\nP_CUS4 = \"'SYS2.\"SHRNAME\".RACFPANL'\"\nP_CUS5 = 'SYS2.ISP.OPSPENU'\nP_CUS6 = 'SYS2.ISP.PRGPENU'\nP_CUS7 = 'SYS2.ISP.NETPENU'\nP_SMP = 'GIM.SGIMPENU'\nP_HSM = 'SYS1.DFQPLIB'\nP_HCD = 'SYS1.SCBDPENU'\nP_RMF3 = 'SYS1.SERBPENU'\nP_OMVS = 'SYS1.SBPXPENU'\nP_DFSRT = 'SYS1.ICEISPP'\nP_DFDSS = 'SYS1.DGTPLIB'\nP_RACF  = 'SYS1.HRFPANL'\nP_IPCS = 'SYS1.SBLSPNL0'\nP_BKM = 'EOY.SEOYPENU'\nP_DELP = 'DELPHI.V221.PLIB'\nP_CDCU = 'CDCU.DCZDPLB'\nP_HACC = 'SYS3.ZHC240.ISPPLIB'\nP_ICQ = 'ICQ.ICQPLIB'\nP_LMF = 'SYS2.LMF.PLIB'\nP_MAIN = 'MAINT.LIVE.PLIB'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPMLIB */\n/********************************/\nM_ISPF = 'ISP.V4R2M0.SISPMENU'\nM_SDSF = 'ISF.V1R5M0.SISFMLIB'\nM_SMP  = 'GIM.SGIMMENU'\nM_HSM = 'SYS1.DFQMLIB'\nM_HCD = 'SYS1.SCBDMENU'\nM_OMVS = 'SYS1.SBPXMENU'\nM_RMF3 = 'SYS1.SERBMENU'\nM_DFSRT = 'SYS1.ICEISPM'\nM_DFDSS = 'SYS1.DGTMLIB'\nM_RACF = 'SYS1.HRFMSG'\nM_IPCS = 'SYS1.SBLSMSG0'\nM_CUS1 = 'SYS2.ISPMENU'\nM_C370 = 'EDC.V2R2M0.SEDCMSGP'\nM_BKM = 'EOY.SEOYMENU'\nM_DELP = 'DELPHI.V221.MLIB'\nM_CDCU = 'CDCU.DCZDMLB'\nM_IOA1 = \"'SYS3.\"SHRNAME\".IOAIV410.ISMSG'\"\nM_IOA2 = 'SYS3.IOA.ISMSG'\nM_IOA3 = 'SYS3.IOA500.ISMSG'\nM_HACC = 'SYS3.ZHC240.ISPMLIB'\nM_ICQ = 'ICQ.ICQMLIB'\nM_MAIN = 'MAINT.LIVE.MLIB'\nM_RAC1 = 'SYS2.RACFMENU'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPTLIB */\n/********************************/\nT_SDSF = 'ISF.V1R5M0.SISFTLIB'\nT_SMP  = 'GIM.SGIMTENU' DSNAME\nT_HCD  = 'SYS1.SCBDTENU'\nT_RMF3 = 'SYS1.SERBTENU'\nT_OMVS = 'SYS1.SBPXTENU'\nT_DFSRT = 'SYS1.ICEISPT'\nT_DFDSS = 'SYS1.DGTTLIB'\nT_IPCS  = 'SYS1.SBLSTBL0'\nT_BKM  = 'EOY.SEOYTENU'\nT_DELP = 'DELPHI.V221.CMDTAB'\nT_ICQ = 'ICQ.ICQTLIB'\nT_CDCU  = 'CDCU.DCZDTLB'\nT_IOA1  = \"'SYS3.\"||SHRNAME||\".IOAIV410.TLIB'\"\nT_IOA2  = 'SYS3.IOA.TLIB'\nT_IOA3  = 'SYS3.IOA500.PANEL'\nT_HACC  = 'SYS3.ZHC240.ISPTLIB'\nT_ISPF  = 'ISP.V4R2M0.SISPTENU'\nT_RAC1  = 'SYS2.RACFTABL'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPSLIB */\n/********************************/\nS_SMP  = 'GIM.SGIMSENU'\nS_IPCS = 'SYS1.SBLSKEL0'\nS_DFSRT = 'SYS1.ICEISPS'\nS_DFDSS = 'SYS1.DGTSLIB'\nS_RACF = 'SYS1.HRFSKEL'\nS_ICQ  = 'ICQ.ICQSLIB'\nS_CDCU = 'CDCU.DCZDSLB'\nS_CUS1 = 'MAINT.LIVE.SLIB'\nS_IOA  = 'SYS3.IOA500.JCL'\nS_ISPF = 'ISP.V4R2M0.SISPSLIB'\nS_ISP2 = 'ISP.V4R2M0.SISPSENU'\nS_RAC1 = 'SYS2.RACFSLIB'\n\n/*******************************/\n/* SPECIFY DATASETS FOR SYSLOG */\n/*******************************/\nH_ISF  = \"'SYS0.\"SYSNAME\".HASPINDX'\"\n\nEND\n\n/*********************************/\n/*  SYSTEMS USERS                */\n/*********************************/\nIF (PROC = \"SPFBOOL\") THEN\nDO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA3 C_IOA2 C_IOA1 C_HACC C_SDF C_OMVS C_CDCU\n ELSE\n    SYSPROC = C_ISP2 C_RAC3 C_CUS1 C_RAC1,\n    C_SMPE C_IPCS C_HCD C_DFSRT C_DFDSS C_RMF C_ICQ,\n    C_EDC C_BKM C_IOA1 C_IOA2 C_HACC C_SDF C_OMVS C_CDCU\n SYSEXEC = E_ISP E_SYMC\n IF SUBSTR(UID,1,4) = 'SYS0' THEN\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2 L_MAIN\n ELSE\n    ISPLLIB = L_SMP L_HCD L_HSM L_DFSRT L_DFDSS L_CDCU L_DITTO L_DELP,\n    L_TSP1 L_HACC1 L_HACC2 L_MAIN\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_LMF P_IOA2 P_IOA1 P_IOA P_CUS1 P_CUS3,\n    P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT P_DFDSS,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ P_SYMC\n ELSE\n    ISPPLIB = P_DFDSS P_SDSF P_LMF P_IOA P_IOA1 P_CUS1,\n    P_CUS3 P_ISPF P_SMP P_HSM P_HCD P_RMF3 P_OMVS P_DFSRT,\n    P_RACF P_IPCS P_BKM P_DELP P_CDCU P_HACC P_ICQ P_SYMC\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU M_IOA3,\n    M_IOA2 M_IOA1 M_HACC M_ICQ\n ELSE\n    ISPMLIB = M_ISPF M_SDSF M_SMP M_HSM M_HCD M_OMVS M_RMF3 M_DFSRT,\n    M_DFDSS M_RACF M_IPCS M_CUS1 M_C370 M_BKM M_DELP M_CDCU,\n    M_IOA1 M_IOA2 M_HACC M_ICQ\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA3 T_IOA2 T_IOA1 T_HACC,\n    T_ISPF T_RAC1\n ELSE\n    ISPTLIB = T_SDSF T_SMP T_HCD T_RMF3 T_OMVS T_DFSRT M_DFDSS,\n    T_IPCS T_BKM T_DELP T_ICQ T_CDCU T_IOA1 T_IOA2 T_IOA3 T_HACC,\n    T_ISPF T_RAC1\n ISPSLIB = S_SMP S_IPCS S_DFSRT S_DFDSS S_RACF S_ICQ S_CDCU,\n    S_CUS1 S_ISPF S_IOA\n HASPINDX = H_ISF\n if tsover = 2050 then\n  PNL = 'PANEL(ISP@390M)'\n else\n  PNL = 'PANEL(ISP@BOOL)'\n JOBTRAC = 'YES'\nEND\n\n/*********************************/\n/*  PROGRAMMERS                  */\n/*********************************/\nIF (PROC = \"PROGRAMR\") |,\n   (PROC = \"UNIXUSER\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n    C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA3 C_IOA2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_CUS3 C_ISP2,\n    C_DFSRT C_DFDSS C_SDF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_MAIN L_DFSRT L_DFDSS L_DELP L_TSP1 L_SDF\n ELSE\n    ISPLLIB = L_MAIN L_DFSRT L_DFDSS L_DELP L_TSP1 L_SDF\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_LMF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n    P_SDSF P_DELP P_IOA2 P_IOA1 P_BKM\n ELSE\n    ISPPLIB = P_LMF P_CUS6 P_CUS3 P_MAIN P_DFSRT P_DFDSS,\n    P_SDSF P_DELP P_IOA P_BKM\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n    M_IOA3 M_IOA2 M_SDSF\n ELSE\n    ISPMLIB = M_MAIN M_ISPF M_DFSRT M_DFDSS M_DELP M_C370 M_BKM,\n    M_IOA1 M_SDSF\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA2 T_ISPF\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_DELP T_BKM T_IOA2 T_ISPF\n ISPSLIB = S_CUS1 S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@PRG)'\n JOBTRAC1 = 'YES'\nEND\n\n/**********************************/\n/*  OPERATORS USERS               */\n/**********************************/\nIF (PROC = \"OPERATOR\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA3 C_IOA1\n ELSE\n    SYSPROC = C_ISP2 C_RAC1 C_CUS1 C_DFSRT C_DFDSS,\n    C_RMF C_EDC C_BKM C_IOA1\n SYSEXEC = E_ISP\n IF SYSNAME = 'PRDD' THEN\n    ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n ELSE\n    ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA2 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ELSE\n    ISPPLIB = P_SDSF P_CUS3 P_CUS5 P_IOA P_RMF3 P_DFSRT,\n    P_DFDSS P_BKM\n ISPMLIB = M_ISPF M_SDSF M_RMF3 M_DFSRT M_DFDSS M_C370 M_BKM,\n    M_IOA1\n ISPTLIB = T_SDSF T_RMF3 T_DFSRT T_DFDSS T_BKM T_IOA1 T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@OPS)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  DIENS KONTROLE               */\n/*********************************/\nIF (PROC = \"DIENSKRL\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2 C_DFDSS\n SYSEXEC = E_ISP\n ISPLLIB = L_DFDSS L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_DFDSS M_ISPF\n ISPTLIB = T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@DNS)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  NETWORK USERS               */\n/********************************/\nIF (PROC = \"NETWORK\")\nTHEN DO\n SYSPROC = C_RAC1 C_CUS1 C_DFSRT C_DFDSS C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1 L_ISP\n ISPPLIB = P_CUS3 P_CUS7 P_DFSRT P_DFDSS P_SDSF\n ISPMLIB = M_DFSRT M_DFDSS M_ISPF\n ISPTLIB = T_DFSRT T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@NET)'\n JOBTRAC = 'NO'\nEND\n\n/********************************/\n/*  CONTROL USERS               */\n/********************************/\nIF (PROC = \"AUTOMATE\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA3 C_IOA2 C_IOA1 C_SMPE C_ISP2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA1 C_SMPE C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1 L_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_ISPF P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA2 P_IOA P_IOA1 P_SMP\n ELSE\n    ISPPLIB = P_SDSF P_ISPF P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA P_IOA1 P_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA3 M_IOA2 M_ISPF M_SMP\n ELSE\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA1 M_ISPF M_SMP\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA2 T_SDSF T_ISPF T_SMP\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA1 T_SDSF T_ISPF T_SMP\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF S_SMP\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@AUT)'\n JOBTRAC2 = 'YES'\nEND\n\n/******************************/\n/*  MEDIA USERS               */\n/******************************/\nIF (PROC = \"MEDIA\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA3 C_IOA2 C_IOA1 C_ISP2\n ELSE\n    SYSPROC = C_RAC1 C_CUS1 C_OPS1 C_DFSRT,\n    C_DFDSS C_BKM C_EDC C_IOA1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_DFSRT L_DFDSS L_TSP1\n IF SYSNAME = 'PRDD' THEN\n    ISPPLIB = P_SDSF P_CUS5 P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA2 P_IOA P_IOA1\n ELSE\n    ISPPLIB = P_SDSF P_CUS5 P_CUS3 P_CUS1,\n    P_DFSRT P_DFDSS P_BKM P_IOA P_IOA1\n IF SYSNAME = 'PRDD' THEN\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA3 M_IOA2 M_ISPF\n ELSE\n    ISPMLIB = M_DFSRT M_DFDSS M_BKM M_IOA1 M_ISPF\n IF SYSNAME = 'PRDD' THEN\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA2 T_SDSF T_ISPF\n ELSE\n    ISPTLIB = T_DFSRT T_DFDSS T_BKM T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_DFSRT S_DFDSS S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@MED)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  ADMINISTRATOR                */\n/*********************************/\nIF (PROC = \"DIENADMN\") |,\n   (PROC = \"NETADMN\") |,\n   (PROC = \"OPERADMN\") |,\n   (PROC = \"MEDADMN\") |,\n   (PROC = \"PROGADMN\")\nTHEN DO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@ADMN)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  VEILIGHEID ADMINISTRATOR     */\n/*********************************/\nIF (PROC = \"SPFTHE\")\nTHEN DO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF\n ISPSLIB = S_RAC1 S_ISP2 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@THE)'\n JOBTRAC = 'NO'\nEND\n\n/*******************************/\n/*  POLFIN USERS               */\n/*******************************/\nIF (PROC = \"SPFPOL\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_TSP1\n ISPPLIB = P_CUS3 P_SDSF P_ISPF\n ISPMLIB = M_ISPF\n ISPTLIB = T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@POL)'\n JOBTRAC = 'NO'\nEND\n\n/****************************/\n/*  KRS USERS               */\n/****************************/\nIF (PROC = \"SPFKRI\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP L_TSP1\n ISPPLIB = P_CUS3 P_DFDSS P_SDSF P_ISPF\n ISPMLIB = M_RAC1 M_RACF M_DFDSS M_ISPF\n ISPTLIB = T_RAC1 T_DFDSS T_SDSF T_ISPF\n ISPSLIB = S_RAC1 S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@KRI)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  READY PROMPT USERS           */\n/*********************************/\nIF (PROC = \"READY\") |,\n   (PROC = \"PDF\") THEN\nDO\n SYSPROC = C_RAC1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3\n ISPMLIB = M_ISPF\n ISPTLIB = T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL()'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  COMPLETE ADMINISTRATORS      */\n/*********************************/\nIF (PROC = \"COMADMN\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1 M_RACF\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@COMA)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  COMPLETE ADMINISTRATORS      */\n/*********************************/\nIF (PROC = \"COMRESU\") THEN\nDO\n SYSPROC = C_RAC1 C_ISP2\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF\n ISPMLIB = M_RAC1 M_RACF\n ISPTLIB = T_RAC1 T_SDSF\n ISPSLIB = S_RAC1\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@COMR)'\n JOBTRAC = 'NO'\nEND\n\n/*********************************/\n/*  CONTROL-D USERS              */\n/*********************************/\nIF (PROC = \"SPFCTD\")\nTHEN DO\n IF SYSNAME = 'PRDD' THEN\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n else\n SYSPROC = C_RAC1 C_IOA3 C_IOA1\n SYSEXEC = E_ISP\n ISPLLIB = L_ISP\n ISPPLIB = P_CUS3 P_SDSF P_ISPF P_IOA2 P_IOA\n ISPMLIB = M_IOA3 M_IOA1 M_ISPF\n ISPTLIB = T_IOA1 T_SDSF T_ISPF\n ISPSLIB = S_ISPF\n HASPINDX = H_ISF\n PNL = 'PANEL(ISP@CTD)'\n JOBTRAC = 'NO'\nEND\n\n/***********************************/\n/** CHECK FOR UNKNOWN PROC        **/\n/***********************************/\nIF ISPPLIB = \"ISPPLIB\" THEN\nDO\n SAY ' '\n SAY ' '\n SAY 'YOUR LOGON PROCEDURE IS UNKNOWN TO TSO'\n SAY 'PLEASE VERIFY THAT YOUR LOGON PROCEDURE IS CORRECT'\n SAY ' '\n SAY 'OR CALL YOUR HELPDESK FOR HELP'\n EXIT 12\nEND\n\n/***********************************/\n/** JOBTRAC ADDITIONAL ALLOCATIONS */\n/***********************************/\nIF JOBTRAC = 'YES' THEN\nDO\n \"FREE FI(SMPTABL,ISRCFIL,CISTABL)\"\n \"FREE FI(ICQAATAB)\"\n \"FREE FI(ICQABTAB)\"\n \"FREE FI(ICQANTAB)\"\n \"FREE FI(ICQAPTAB)\"\n \"FREE FI(ICQAMTAB)\"\n \"FREE FI(ICQCMTAB)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n \"ALLOC FI(ICQAATAB) SHR DA(ICQ.ICQAATAB)\"\n \"ALLOC FI(ICQABTAB) SHR DA(ICQ.ICQABTAB)\"\n \"ALLOC FI(ICQANTAB) SHR DA(ICQ.ICQANTAB)\"\n \"ALLOC FI(ICQAPTAB) SHR DA(ICQ.ICQAPTAB)\"\n \"ALLOC FI(ICQAMTAB) SHR DA(ICQ.ICQAMTAB)\"\n \"ALLOC FI(ICQCMTAB) SHR DA(ICQ.ICQCMTAB)\"\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\n/*  \"ALLOC FI(DVDMSL) SHR DA(SDF150.MSL)\"      */\n/*  \"ALLOC FI(DVDMSLP) SHR DA(SDF150.MSLP)\"    */\n/*  \"ALLOC FI(DVDMSLT) SHR DA(SDF150.MSLT)\"    */\n/*  \"ALLOC FI(DVDTML) SHR DA(SDF150.TML)\"      */\n/*  \"ALLOC FI(DVDITF) SHR DA(SDF150.ITF)\"      */\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC1 = 'YES' THEN\nDO\n \"FREE FI(ISRCFIL)\"\n \"FREE FI(DVDMSL)\"\n \"FREE FI(DVDMSLT)\"\n \"FREE FI(DVDMSLP)\"\n \"FREE FI(DVDITF)\"\n \"FREE FI(DVDTML)\"\n X=MSG('ON');\n \"ALLOC FI(ISRCFIL) SHR DA(SYSA.SPF.CFIL)\"\n\n X=MSG('OFF');\nEND\n\nIF JOBTRAC2 = 'YES' THEN\nDO\n \"FREE FI(SMPTABL)\"\n \"FREE FI(CISTABL)\"\n X=MSG('ON');\n \"ALLOC FI(CISTABL) SHR DA(SYS2.CIDTABL)\"\nB4 = '\"ALLOC FI(SMPTABL) SHR DA('||DSNAME||')\"'\nINTERPRET B4\n\n X=MSG('OFF');\nEND\n/******************************/\n/** STANDARD ISPF ALLOCTIONS **/\n/******************************/\n\"FREE FI(SYSPROC,SYSEXEC,ISPLLIB,ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB)\"\n\"FREE FI(HASPINDX)\"\n\nX = MSG('ON')\n\"ALLOC FI(SYSPROC) DA(\"SYSPROC\") SHR\"\n\"ALLOC FI(SYSEXEC) DA(\"SYSEXEC\") SHR\"\n\"ALLOC FI(ISPLLIB) DA(\"ISPLLIB\") SHR\"\n\"ALLOC FI(ISPPLIB) DA(\"ISPPLIB\") SHR\"\n\"ALLOC FI(ISPMLIB) DA(\"ISPMLIB\") SHR\"\n\"ALLOC FI(ISPTLIB) DA(\"ISPTLIB\") SHR\"\n\"ALLOC FI(ISPSLIB) DA(\"ISPSLIB\") SHR\"\n\"ALLOC FI(HASPINDX) DA(\"HASPINDX\") SHR\"\nX = MSG('ON')\n\n\"EXECUTIL SEARCHDD(YES)\"\nSIGNAL NO_COMMENT\n/*\n   THE ABOVE SIGNAL PREVENT INTERPRETATION OF LONG LINES OF COMMENTS,\n   SINCE IT BRANCHES AROUND THEM ALL\n*/\n/*--------------------------------------------------------------------+\n | IF THE USER HAS A DDIR, THEN ALLOC ALL FILES REQUIRED BY IPCS,     |\n |           THEN CALL IPCS.                                          |\n | SINCE IPCS DOES NOT SEEM TO RECOGNIZE REXX COMMANDS, WE PULL A     |\n |           JIPPO BY QUEUEING THE COMMAND 'PDF PANEL(XXXXXXXX)'      |\n |           BEFORE CALLING IPCS.  THIS WAY,  SINCE IPCS DOES NOT     |\n |           SEE ANY MORE CMDS IN THE EXEC (CLIST), IT PULL WHAT      |\n |           WAS IN THE COMMAND STACK.                                |\n +--------------------------------------------------------------------*/\nNO_COMMENT:\n\nCall USER_PROFILE\n\nddir = \"'\"userid()\".D\"sid\"0.DDIR'\"\nRC = LISTDSI(DDIR)\nIf rc > 4 then do        /* Check for the old one */\n   DDIR = \"'\"||UID||\".DDIR'\"\n   rc = listdsi(ddir)\n   end\nIF RC > 4 THEN\n   \"PDF\" PNL\nELSE DO\n   X = OUTTRAP(ON)\n   \"VFY DS(\"DDIR\")\"\n   X = OUTTRAP(X)\n   \"ALLOC FI(IPCSDDIR) DA(\"DDIR\") SHR\"\n   \"ALLOC FI(IPCSPARM) DA('SYS2.PARMLIB') SHR\"\n   \"ALLOC FI(IPCSPRNT) SYS(X) HOLD\"\n   QUEUE 'PDF' PNL\n   \"IPCS PARM(01)\"\nEND\n\nExit 0  /*-------------------------------------------------------*/\n\nUSER_PROFILE:\n\nuser_prof = \"'\"userid()\".A0.TSPROF(PROF000)'\"\nIf sysdsn(user_prof) = 'OK' then do\n   Say 'Executing' user_prof\n   'EXEC' user_prof 'EXEC'\n   end\n\nReturn\n./ ADD NAME=KASTINIT 0101-01016-01016-1428-00019-00019-00000-RACFCLS\n//KASTINIT JOB  (1,REOPS,OPS,27),'KASTINIT',\n//         CLASS=A,MSGCLASS=X,\n//         USER=INIT,PASSWORD=KASTINIT\n//STEP1    EXEC PGM=IEHINITT\n//SYSUT1   DD   UNIT=(KAST,,DEFER),LABEL=(,SL)\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   DSN=TMS.KAST,DISP=OLD\n//*\n//STEP2    EXEC PGM=IEBGENER,COND=(08,LT,STEP1)\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSUT1   DD DSN=TMS.TEMPKAST,DISP=OLD\n//SYSUT2   DD DSN=TMS.KASTINIT,DISP=MOD\n//*\n//STEP3    EXEC PGM=IEBGENER,COND=(08,LT,STEP1)\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSUT1   DD DSN=TMS.TEMPKAST,DISP=OLD\n//SYSUT2   DD DSN=TMS.KASTINIT.DATA,DISP=MOD\n./ ADD NAME=KRIDLY   0101-01016-01016-1428-00106-00106-00000-RACFCLS\n/* REXX */\nTRACE NONE\n\"PROFILE NOPREFIX\"\n\"EXECIO * DISKR INDD (FINIS STEM INPUT1.\"\n\nCALL HEAD1\n\nMMM.1 = 0\nMMM.2 = 31\nMMM.3 = 59\nMMM.4 = 90\nMMM.5 = 120\nMMM.6 = 151\nMMM.7 = 181\nMMM.8 = 212\nMMM.9 = 243\nMMM.10 = 273\nMMM.11 = 304\nMMM.12 = 334\n\nTELR = 0\nTELW = 5\nCALL READ1\nDO WHILE TELR <= INPUT1.0\n IF STD = \"STD\" THEN\n DO\n  CALL JULIAN\n  IF DAYS <> 0 THEN\n    TELW = TELW + 1\n  IF DATEMM < 10 THEN DATEMM = \"0\" || DATEMM\n  DE = DATEYY || \"-\" || DATEMM || \"-\" || DATEDD\n  DE = JUSTIFY(DE,8)\n  SZ = JUSTIFY(SIZE,6)\n  DS = JUSTIFY(DAYS,3)\n  JR = JUSTIFY(JOBNR,8)\n  JN = JUSTIFY(JOBNAME,8)\n  PI = JUSTIFY(PID,8)\n\n  IF DAYS >= 0 THEN\n  IF STATUS = \"USER\" THEN\n   OUT1.TELW = \"|*\" || PI || \"*|\" JR \"|\" JN \"|\" SZ \"|\" DS \"|\" DE \"|\"\n  ELSE\n   OUT1.TELW = \"|\" PI \"|\" JR \"|\" JN \"|\" SZ \"|\" DS \"|\" DE \"|\"\n END\n CALL READ1\nEND\nCALL WRITE\nCALL KLAAR\n\nJULIAN:\nCUR_DATEJ = DATE('J')\nCUR_DATED = DATE('D')\nJOB_DATED = MMM.DATEMM + DATEDD\nJOB_DATEJ = DATEYY || JOB_DATED\nCUR_YY = SUBSTR(CUR_DATEJ,1,2)\nJOB_YY = SUBSTR(JOB_DATEJ,1,2)\n\nIF CUR_YY = JOB_YY THEN DAYS = CUR_DATED - JOB_DATED\nELSE DAYS = (365 - JOB_DATED) + CUR_DATED\nRETURN\n\n/*****************/\n/*** READ SDSF ***/\n/*****************/\nREAD1:\nTELR = TELR + 1\nJOBNAME = SUBSTR(INPUT1.TELR,6,8)\nJOBNR = SUBSTR(INPUT1.TELR,15,8)\nSTD = SUBSTR(INPUT1.TELR,40,3)\nPID = SUBSTR(INPUT1.TELR,54,8)\nSIZE = SUBSTR(INPUT1.TELR,74,8)\nDATE = SUBSTR(INPUT1.TELR,224,8)\nDATEM1 = SUBSTR(INPUT1.TELR,224,1)\nDATEM2 = SUBSTR(INPUT1.TELR,225,1)\nDATEMM = SUBSTR(INPUT1.TELR,224,2)\nIF DATEMM < 10 THEN DATEMM = DATEM2\nDATEDD = SUBSTR(INPUT1.TELR,227,2)\nDATEYY = SUBSTR(INPUT1.TELR,230,2)\nSTATUS = SUBSTR(INPUT1.TELR,122,4)\nRETURN\n\n/***********/\n/*** WRITE**/\n/*********/\nWRITE:\n \"EXECIO * DISKW OUTDD (STEM OUT1.\"\nRETURN\n\n/**************/\n/*** HEADING  */\n/**************/\nHEAD1:\nOUT1.1 = \"REPORT CREATED ON \" || DATE() TIME()\nOUT1.2 = \" \"\nOUT1.3 =\"+----------------------------------------------------------+\"\nOUT1.4 =\"| PRINTER  | JOBNR    | JOBNAME  | SIZE   | DAYS| CR DATE  |\"\nOUT1.5 =\"|----------------------------------------------------------|\"\nRETURN\n\nKLAAR:\nOUT1. =\"+----------------------------------------------------------+\"\n\"EXECIO 1 DISKW OUTDD (STEM OUT1.\"\n\n\"EXECIO 0 DISKW OUTDD (FINIS\"\nSAY \"ENDED \"\nEXIT\n./ ADD NAME=KRIPID   0101-01016-01016-1428-00092-00092-00000-RACFCLS\n/* REXX */\n/****************************/\n/**  ADD KRI PRINTERS      **/\n/****************************/\n\"PROF NOPREF\"\nARG INPUT\n PARSE VALUE INPUT WITH ACTION ':' PID ':' WEB ':' LOC\n\"ALLOC DA('MAINT.KRI.WEBNR') FI(XXX) OLD\"\nIF RC <> 0 THEN\nDO\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \"                          +--------------------+\"\n SAY \"                          \u00f8 DATASET IN USE BY  \u00f8\"\n SAY \"                          \u00f8 ANOTHER USER       \u00f8\"\n SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8\"\n SAY \"                          +--------------------+\"\n EXIT\nEND\n\n\"EXECIO * DISKR XXX (FINIS STEM IN.\"\n\"FREE FI(XXX)\"\n\nX = MSG('OFF')\n\nSELECT\nWHEN ACTION = \"ADD\" THEN\n CALL ADD\nWHEN ACTION = \"DEL\" THEN\n CALL DEL\nWHEN ACTION = \"LIST\" THEN\n \"ISPEXEC BROWSE DATASET('MAINT.KRI.WEBNR')\"\nWHEN ACTION = \"PRT\" THEN\nDO\n L = \"PRINTOFF 'MAINT.KRI.WEBNR' DEST(\"PID\")\"\n L = '\"'||L||'\"'\n INTERPRET L\n IF RC = 0 THEN SAY \"LISTING ROUTED TO\" PID\n ELSE SAY \"LISTING NOT ROUTED - PLEASE CALL FOR HELP - RC=\"||RC\nEND\nOTHERWISE NOP\nEND\nEXIT\n\nADD:\n\"ALLOC DA('MAINT.KRI.WEBNR') FI(XXX) OLD\"\nTEL=0\nDO UNTIL TEL >= IN.0\n TEL=TEL+1\n OUT. = IN.TEL\n IN_PID = SUBSTR(IN.TEL,1,8)\n IF PID <> IN_PID THEN\n  \"EXECIO 1 DISKW XXX (STEM OUT.\"\nEND\n\n\"EXECIO 0 DISKW XXX (FINIS\"\n\"FREE FI(XXX)\"\n\n\"ALLOC DA('MAINT.KRI.WEBNR') FI(XXX) MOD\"\n OUT. = PID WEB LOC\n\"EXECIO 1 DISKW XXX (FINIS STEM OUT.\"\n \"FREE FI(XXX)\"\n SAY PID WEB \" - ADDED SUCCESSFUL\"\n RETURN\n\nDEL:\nTEL=0\nFOUND=\"FALSE\"\n\"ALLOC DA('MAINT.KRI.WEBNR') FI(XXX) OLD\"\nDO UNTIL TEL >= IN.0\n TEL=TEL+1\n OUT. = IN.TEL\n IN_PID = SUBSTR(IN.TEL,1,8)\n IF PID <> IN_PID THEN\n \"EXECIO 1 DISKW XXX (STEM OUT.\"\n ELSE FOUND = \"TRUE\"\nEND\n\n \"EXECIO 0 DISKW XXX (FINIS\"\n \"FREE FI(XXX)\"\n\n IF FOUND = \"FALSE\" THEN SAY PID \"- NOT IN DATASET\"\n ELSE SAY PID \"- DELETED\"\n RETURN\n./ ADD NAME=KRIPRT   0101-01016-01016-1428-00207-00207-00000-RACFCLS\n/* REXX */\n/*****************************************************/\n/* LIST ALL INACTIVE PRINTERS FOR CERTAIN PERIOD     */\n/*****************************************************/\nTRACE NONE\n\"PROFILE NOPREFIX\"\n\nARG INPUT\n PARSE VALUE INPUT WITH ACTION ':' SDT ':' EDT\n \"ALLOC DA('MAINT.KRI.WEBNR') FI(IN2) SHR\"\n \"ALLOC DA('MAINT.KRI.INACTIVE.PRINTER.INT') FI(OUT1) SHR\"\n \"ALLOC DA('MAINT.KRI.ACTIVE.PRINTER.INT') FI(OUT2) SHR\"\n \"ALLOC DA('MAINT.KRI.ACTIVE.PRINTER') FI(IN1) SHR\"\nIF RC <> 0 THEN\nDO\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \"                          +--------------------+\"\n SAY \"                          \u00f8 DATASET IN USE BY  \u00f8\"\n SAY \"                          \u00f8 ANOTHER USER       \u00f8\"\n SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8\"\n SAY \"                          +--------------------+\"\n EXIT\nEND\n\n\nX = MSG('OFF')\n\nSELECT\nWHEN ACTION = \"ACT\" THEN\n CALL ACT\nWHEN ACTION = \"INACT\" THEN\n CALL INACT\nWHEN ACTION = \"PRT1\" THEN\nDO\n L = \"PRINTOFF 'MAINT.KRI.INACTIVE.PRINTER.INT' DEST(\"SDT\")\"\n L = '\"'||L||'\"'\n INTERPRET L\n IF RC = 0 THEN SAY \"LISTING ROUTED TO\" SDT\n ELSE SAY \"LISTING NOT ROUTED - PLEASE CALL FOR HELP - RC=\"||RC\nEND\nWHEN ACTION = \"PRT2\" THEN\nDO\n L = \"PRINTOFF 'MAINT.KRI.ACTIVE.PRINTER.INT' DEST(\"SDT\")\"\n L = '\"'||L||'\"'\n INTERPRET L\n IF RC = 0 THEN SAY \"LISTING ROUTED TO\" SDT\n ELSE SAY \"LISTING NOT ROUTED - PLEASE CALL FOR HELP - RC=\"||RC\nEND\nOTHERWISE NOP\nEND\n\"FREE FI(IN1)\"\n\"FREE FI(IN2)\"\n\"FREE FI(OUT1)\"\n\"FREE FI(OUT2)\"\nEXIT\n\nACT:\n/***********************************/\n/* ACTIVE PR MANAGEMENT            */\n/***********************************/\n\"EXECIO * DISKR IN1 (FINIS STEM IN.\"\n\"FREE FI(IN1)\"\n\n OUT.1 = \"ACTIVE PRINTERS\"\n OUT.2 = \"---------------\"\n OUT.3 = \" \"\n OUT.4 = \"REPORT CREATED ON \" DATE() TIME()\n OUT.5 = \" \"\n OUT.5 = \"FROM DATE -\" SDT  \" TO DATE - \" EDT\n OUT.6 = \" \"\n OUT.7 = \"\"\n \"EXECIO * DISKW OUT2 (STEM OUT.\"\nMMM.01 = 000\nMMM.02 = 031\nMMM.03 = 059\nMMM.04 = 090\nMMM.05 = 120\nMMM.06 = 151\nMMM.07 = 181\nMMM.08 = 212\nMMM.09 = 243\nMMM.10 = 273\nMMM.11 = 304\nMMM.12 = 334\n\nMS = SUBSTR(SDT,3,2)\nDD = SUBSTR(SDT,5,2)\nJULS = MMM.MS + DD\nJULS = RIGHT(JULS,3,'0')\nJULS = SUBSTR(SDT,1,2) || JULS\n\nME = SUBSTR(EDT,3,2)\nDD = SUBSTR(EDT,5,2)\nJULE = MMM.ME + DD\nJULE = RIGHT(JULE,3,'0')\nJULE = SUBSTR(EDT,1,2) || JULE\n\nTEL = 0\nDO WHILE TEL <= IN.0\n TEL = TEL + 1\n JULC = SUBSTR(IN.TEL,1,5)\n IF (JULC >= JULS) & (JULC <= JULE) THEN\n DO\n   OUT. = SUBSTR(IN.TEL,6,80)\n   \"EXECIO 1 DISKW OUT2 (STEM OUT.\"\n   TEL = TEL + 1\n END\n ELSE TEL = TEL + 1\nEND\n\"EXECIO 0 DISKW OUT2 (FINIS\"\n\"FREE FI(OUT1)\"\n\"FREE FI(OUT2)\"\n \"ISPEXEC BROWSE DATASET('MAINT.KRI.ACTIVE.PRINTER.INT')\"\nRETURN\n\nINACT:\n/***********************************/\n/* INACTIVE PR MANAGEMENT            */\n/***********************************/\n\"EXECIO * DISKR IN1 (FINIS STEM IN.\"\n\"FREE FI(IN1)\"\n\"EXECIO * DISKR IN2 (FINIS STEM IN2.\"\n\"FREE FI(IN2)\"\n\n OUT.1 = \"INACTIVE PRINTERS\"\n OUT.2 = \"-----------------\"\n OUT.3 = \" \"\n OUT.4 = \"REPORT CREATED ON \" DATE() TIME()\n OUT.5 = \" \"\n OUT.6 = \"FROM DATE -\" SDT  \" TO DATE - \" EDT\n OUT.7 = \" \"\n OUT.8 = \"\"\n \"EXECIO * DISKW OUT1 (STEM OUT.\"\n\nMMM.01 = 000\nMMM.02 = 031\nMMM.03 = 059\nMMM.04 = 090\nMMM.05 = 120\nMMM.06 = 151\nMMM.07 = 181\nMMM.08 = 212\nMMM.09 = 243\nMMM.10 = 273\nMMM.11 = 304\nMMM.12 = 334\n\nMS = SUBSTR(SDT,3,2)\nDD = SUBSTR(SDT,5,2)\nJULS = MMM.MS + DD\nJULS = RIGHT(JULS,3,'0')\nJULS = SUBSTR(SDT,1,2) || JULS\n\nME = SUBSTR(EDT,3,2)\nDD = SUBSTR(EDT,5,2)\nJULE = MMM.ME + DD\nJULE = RIGHT(JULE,3,'0')\nJULE = SUBSTR(EDT,1,2) || JULE\n\nTELW= 0\nDO WHILE TELW <= IN2.0\n TELW= TELW+ 1\n PID2 = SUBSTR(IN2.TELW,1,8)\n LOC2 = SUBSTR(IN2.TELW,19,60)\n CALL READ\n IF FOUND <> \"TRUE\" THEN\n DO\n   OUT. = IN2.TELW\n   \"EXECIO 1 DISKW OUT1 (STEM OUT.\"\n END\n TELW = TELW + 1\nEND\n\"EXECIO 0 DISKW OUT1 (FINIS\"\n\n\"FREE FI(OUT1)\"\n\"FREE FI(OUT2)\"\n \"ISPEXEC BROWSE DATASET('MAINT.KRI.INACTIVE.PRINTER.INT')\"\nRETURN\n\nREAD:\n/********************/\n/* READ WEB         */\n/********************/\nTEL = 0\nFOUND = \"FALSE\"\nDO WHILE TEL <= IN.0\n TEL = TEL + 1\n JULC = SUBSTR(IN.TEL,1,5)\n PID1 = SUBSTR(IN.TEL,7,8)\n IF (JULC >= JULS) & (JULC <= JULE) THEN\n DO\n  IF PID1 = PID2 THEN\n   FOUND = \"TRUE\"\n TEL = TEL + 1\n END\n ELSE TEL = TEL + 1\nEND\nRETURN\n./ ADD NAME=KRISDSF  0101-01016-01016-1428-00100-00100-00000-RACFCLS\n/* REXX */\n/* **************************************************************** */\n/* ** GENERATE JCL FOR KRI SDSF IN BATCH FOR PRINTER MAINT.       ** */\n/* **************************************************************** */\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \"                         +-------------------+\"\nSAY \"                         \u00f8   JOB SUBMITTED   \u00f8\"\nSAY \"                         \u00f8    PLEASE WAIT    \u00f8\"\nSAY \"                         +-------------------+\"\n\"PROFILE NOPREFIX\"\n\n X = MSG('OFF')\n ID = SYSVAR(SYSUID)\n AL1 =  '\"ALLOC DA('ID'.KRISDSF) SP(1,1) TRACKS',\n      'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) BLKSIZE(18400) FI(OUT1)\"'\n INTERPRET AL1\n\n CALL WRITE1\n CALL KLAAR\n\n/*******************************************/\n/*** WRITE */\n/*******************************************/\nWRITE1:\nOUT1.1= \"//KRI     JOB (1,RESYS,SYS,01),'SDSF B',CLASS=A,MSGCLASS=V, \"\nOUT1.2= \"//        NOTIFY=&SYSUID,REGION=8M\"\nOUT1.3= \"//* \"\nOUT1.4= \"//STEP1    EXEC PGM=SQLPLUS,REGION=0M\"\nOUT1.5= \"//DUMMY1   DD DSN=MAINT.KRI.WEBNR,DISP=(OLD,PASS)\"\nOUT1.6= \"//DUMMY2   DD DSN=MAINT.KRI.FAULTY.PRINTER,DISP=(OLD,PASS)\"\nOUT1.7= \"//DUMMY3   DD DSN=MAINT.KRI.FAULTY.PRINTER.SUM,DISP=OLD\"\nOUT1.8= \"//DUMMY4   DD DSN=MAINT.KRI.SDSF,DISP=(OLD,PASS)\"\nOUT1.9= \"//SYSUDUMP DD SYSOUT=*\"\nOUT1.10=\"//SQLLOGIN DD DSN=DVS.LIVE.CNTL(SQLLOGIN),DISP=SHR\"\nOUT1.11=\"//SYSOUT   DD SYSOUT=*\"\nOUT1.12=\"//SYSERR   DD SYSOUT=*,DCB=(LRECL=132,BLKSIZE=1320,RECFM=VB)\"\nOUT1.13=\"//ORA@MPM7 DD DUMMY\"\nOUT1.14=\"//SYSIN    DD *\"\nOUT1.15=\"OPS$DVS/X\"\nOUT1.16=\"SPOOL /DSN/MAINT.KRI.FAULT.OUTSTAND\"\nOUT1.17=\" \"\nOUT1.18=\"SELECT DISTINCT AL_REEKSNMR, AI_DIENSNMR\"\nOUT1.19=\"FROM   DVSB003_VW1\"\nOUT1.20=\"WHERE  AI_AFHANDEL_DAT  IS    NULL\"\nOUT1.21=\"AND    AL_REEKSNMR      LIKE  'WEB%'\"\nOUT1.22=\"ORDER BY AL_REEKSNMR\"\nOUT1.23=\"/\"\nOUT1.24=\"SPOOL OFF\"\nOUT1.25=\"/*\"\nOUT1.26=\"//*\"\nOUT1.27= \"//STEP2   EXEC PGM=IEBGENER\"\nOUT1.28= \"//SYSPRINT DD  SYSOUT=*\"\nOUT1.29= \"//SYSUT1   DD  DSN=MAINT.KRI.SDSF,DISP=SHR\"\nOUT1.30= \"//SYSUT2  DD  DUMMY,DCB=(LRECL=241,BLKSIZE=18316,RECFM=FBA)\"\nOUT1.31= \"//SYSIN    DD  DUMMY\"\nOUT1.32= \"//*\"\nOUT1.33= \"//STEP3   EXEC PGM=SDSF,PARM='++240,240'\"\nOUT1.34= \"//ISFOUT   DD  DSN=MAINT.KRI.SDSF,DISP=SHR\"\nOUT1.35= \"//ISFIN    DD  *\"\nOUT1.36= \"O\"\nOUT1.37= \"++ALL\"\nOUT1.38= \"/*\"\nOUT1.39=\"//*\"\nOUT1.40=\"//STEP4    EXEC PGM=IKJEFT01,PARM=KRIDLY,COND=(00,NE)\"\nOUT1.41=\"//SYSTSPRT DD   SYSOUT=* \"\nOUT1.42=\"//SYSEXEC  DD   DSN=SYS2.RACFCLST,DISP=SHR\"\nOUT1.43=\"//INDD     DD   DSN=MAINT.KRI.SDSF,DISP=SHR \"\nOUT1.44=\"//OUTDD    DD   DSN=MAINT.KRI.FAULTY.PRINTER,DISP=OLD \"\nOUT1.45=\"//SYSTSIN  DD   DUMMY\"\nOUT1.46=\"//*\"\nOUT1.47=\"//STEP5    EXEC PGM=IKJEFT01,PARM=KRISUM,COND=(00,NE)\"\nOUT1.48=\"//SYSTSPRT DD   SYSOUT=* \"\nOUT1.49=\"//SYSEXEC  DD   DSN=SYS2.RACFCLST,DISP=SHR\"\nOUT1.50=\"//INDD     DD   DSN=MAINT.KRI.FAULTY.PRINTER,DISP=SHR \"\nOUT1.51=\"//INPR     DD   DSN=MAINT.KRI.WEBNR,DISP=SHR \"\nOUT1.52=\"//INDKS    DD   DSN=MAINT.KRI.FAULT.OUTSTAND,DISP=SHR \"\nOUT1.53=\"//OUTDD    DD   DSN=MAINT.KRI.FAULTY.PRINTER.SUM,DISP=OLD \"\nOUT1.54=\"//SYSTSIN  DD   DUMMY\"\n\n\"EXECIO * DISKW OUT1 (STEM OUT1.\"\nRETURN\n\n\nKLAAR:\n\"EXECIO 0 DISKW OUT1 (FINIS\"\n\"FREE FI(OUT1)\"\nDSN1 = \"'\"ID\".KRISDSF'\"\nDEL1 = '\"DEL 'DSN1'\"'\nSUB1 = '\"SUB 'DSN1'\"'\nINTERPRET SUB1\nINTERPRET DEL1\nEXIT\n./ ADD NAME=KRISUM   0101-01016-01016-1428-00141-00141-00000-RACFCLS\n/* REXX */\nTRACE NONE\n\"PROFILE NOPREFIX\"\n\"EXECIO * DISKR INDD (FINIS STEM INPUT1.\"\n\"EXECIO * DISKR INPR (FINIS STEM INPUT2.\"\n\"EXECIO * DISKR INDKS (FINIS STEM INPUT3.\"\n\n OUT1.1 = \" REPORT CREATED ON \" DATE() TIME()\n OUT1.2 = \" \"\n \"EXECIO * DISKW OUTDD (STEM OUT1.\"\n\nPTEL = 0\nTELR = 0\nTELW = 0\nTELD = 0\nCALL READ1\n\nDO WHILE TELR <= INPUT1.0\n IF PID = PIDN THEN CALL READ1\n ELSE\n DO\n  IF PIDSUB = \"P00\" THEN CALL DKS\n  CALL READ1\n END\nEND\nCALL KLAAR\n\n/*********************/\n/*** FIND DKS ENTRY **/\n/*********************/\nDKS:\n TELD = 0\n TELR2 = 0\n OLDEST = OLDL\n\n /******************/\n /* FIND WEBNR     */\n /******************/\n WEB_CURRENT = \" \"\n DO UNTIL TELR2 >= INPUT2.0\n  IF PID = PID2 THEN\n  DO\n   WEB_CURRENT = WEB2\n   USER_CURRENT = USER\n  END\n CALL READ2\n END\n\n CALL READ3\n FOUND = \"FALSE\"\n\n DO WHILE TELD <= INPUT3.0\n  IF WEB <> WEB_CURRENT THEN CALL READ3\n  ELSE\n  DO\n   CALL WRITE1\n   FOUND = \"TRUE\"\n   TELD = INPUT3.0 + 1\n  END\n END\n\n IF FOUND = \"FALSE\" THEN\n DO\n  DIENSNR = \" ** FAULT NOT REPPORTED TO INFORMATION SYSTEMS **\"\n  CALL WRITE1\n END\n RETURN\n\n/*****************/\n/*** READ FAULT***/\n/*****************/\nREAD1:\nTELR = TELR + 1\nTELRN = TELR + 1\nPID = SUBSTR(INPUT1.TELR,3,8)\nPIDSUB = SUBSTR(INPUT1.TELR,3,3)\nPIDSUB1 = SUBSTR(INPUT1.TELR,3,1)\nPIDSUB2 = SUBSTR(INPUT1.TELR,4,7)\nPIDN = SUBSTR(INPUT1.TELRN,3,8)\nIF (DATATYPE(PIDSUB2,'X') = 1) & (PIDSUB1 = \"P\") THEN PTEL = PTEL + 1\nTELO = (TELR - PTEL) + 1\nOLDL = SUBSTR(INPUT1.TELO,45,4)\nRETURN\n\n\nREAD2:\n/*****************/\n/*** READ WEBNR***/\n/*****************/\nTELR2 = TELR2 + 1\nPID2 = SUBSTR(INPUT2.TELR2,1,8)\nWEB2 = SUBSTR(INPUT2.TELR2,10,8)\nUSER = SUBSTR(INPUT2.TELR2,19,60)\n/*IF PID = PID2 THEN TELR2 = INPUT2.0*/\nRETURN\n\nREAD3:\n/*****************/\n/*** READ DKSREP */\n/*****************/\nTELD = TELD + 1\nDIENSNR = SUBSTR(INPUT3.TELD,22,15)\nWEB = SUBSTR(INPUT3.TELD,1,8)\nRETURN\n\n/***********/\n/*** WRITE**/\n/*********/\nWRITE1:\nOUT1.1 = CENTER(PID,80,'-')\nOUT1.2 = PID\nOUT1.3 = \"NUMBER OF COPIES WAITING TO PRINT =\" PTEL\nOUT1.4 = \"OLDEST LISTING = \" || OLDEST ||\" DAYS\"\nOUT1.5 = \" \"\nOUT1.6 = \"\"\n\nPTEL = 0;\nFOUND=\"FALSE\"\nTELR2 = 0\nCALL READ2\n\nDO UNTIL TELR2 >= INPUT2.0\n IF PID = PID2 THEN\n DO\n  OUT1.6 = \"LOCATION OF PRINTER =\" USER_CURRENT\n  OUT1.7 = \"WEBNR =\" WEB_CURRENT\n  OUT1.8 = \"FAULTNR =\" DIENSNR\n  FOUND = \"TRUE\"\n END\n CALL READ2\nEND\n IF FOUND = \"FALSE\" THEN  OUT1.5 = \"* PRINTER INFORMATION IS UNKNOWN *\"\n \"EXECIO * DISKW OUTDD (STEM OUT1.\"\nRETURN\n\n\nKLAAR:\n\n\"EXECIO 0 DISKW OUTDD (FINIS\"\nSAY \"ENDED \"\nEXIT\n./ ADD NAME=KRIUTIL  0101-01016-01016-1428-00136-00136-00000-RACFCLS\n/* REXX */\n/****************************/\n/**THE PRINT MAINT         **/\n/****************************/\n\"PROF NOPREF\"\nARG INPUT\nPARSE VALUE INPUT WITH INPUT ':' PRN\n\nX = MSG('OFF')\n\nSELECT\nWHEN INPUT = \"CREATE\" THEN\n CALL KRISDSF\nWHEN INPUT = \"LIST\" THEN\nDO\n \"ALLOC DA('MAINT.KRI.FAULTY.PRINTER') FI(XXX) OLD\"\n IF RC <> 0 THEN\n DO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+\"\n  SAY \"                          \u00f8 CREATE FACILITY IS \u00f8\"\n  SAY \"                          \u00f8 STILL BUSY         \u00f8\"\n  SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8\"\n  SAY \"                          +--------------------+\"\n END\nELSE\nDO\n \"FREE FI(XXX)\"\n \"ISPEXEC BROWSE DATASET('MAINT.KRI.FAULTY.PRINTER')\"\nEND\nEND\nWHEN INPUT = \"SUMMARY\" THEN\nDO\n \"ALLOC DA('MAINT.KRI.FAULTY.PRINTER.SUM') FI(XXX) OLD\"\n IF RC <> 0 THEN\n DO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+\"\n  SAY \"                          \u00f8 CREATE FACILITY IS \u00f8\"\n  SAY \"                          \u00f8 STILL BUSY         \u00f8\"\n  SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8\"\n  SAY \"                          +--------------------+\"\n END\nELSE\nDO\n \"FREE FI(XXX)\"\n \"ISPEXEC BROWSE DATASET('MAINT.KRI.FAULTY.PRINTER.SUM')\"\nEND\nEND\nWHEN INPUT = \"PRINTER\" THEN\nDO\n \"ALLOC DA('MAINT.KRI.PRINTER') FI(XXX) OLD\"\n IF RC <> 0 THEN\n DO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+ \"\n  SAY \"                          \u00f8 CREATE FACILITY IS \u00f8 \"\n  SAY \"                          \u00f8 STILL BUSY         \u00f8 \"\n  SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8 \"\n  SAY \"                          +--------------------+ \"\n END\nELSE\nDO\n \"FREE FI(XXX)\"\n \"ISPEXEC EDIT DATASET('MAINT.KRI.PRINTER')\"\nEND\nEND\nWHEN INPUT = \"PRINT1\" THEN\nDO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+ \"\n  SAY \"                          \u00f8 LISTING ROUTED TO  \u00f8 \"\n  SAY \"                          \u00f8 \"PRN\"           \u00f8 \"\n  SAY \"                          +--------------------+ \"\n PR = '\"PRINTOFF MAINT.KRI.FAULTY.PRINTER DEST('PRN')\"'\n INTERPRET PR\nEND\nWHEN INPUT = \"PRINT2\" THEN\nDO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+ \"\n  SAY \"                          \u00f8 LISTING ROUTED TO  \u00f8 \"\n  SAY \"                          \u00f8 \"PRN\"           \u00f8 \"\n  SAY \"                          +--------------------+ \"\n PR = '\"PRINTOFF MAINT.KRI.FAULTY.PRINTER.SUM DEST('PRN')\"'\n INTERPRET PR\nEND\nOTHERWISE\nNOP\nEND\nEXIT\n./ ADD NAME=LMRKMAC  0101-01016-01016-1428-00018-00018-00000-RACFCLS\n/* rexx */\nADDRESS ISREDIT \"MACRO\"\nADDRESS ISPEXEC \"VGET (LSCIDSN LSCGCSI LSCTCSI LSCDSCSI)\"\nADDRESS ISPEXEC \"VGET (LSCGVSI LSCTVSI LSCDVSI LSCCAT)\"\nADDRESS ISPEXEC \"VGET (LSCGVSI LSCTVSI LSCDVSI LSCCAT)\"\nADDRESS ISPEXEC \"VGET (LSCMLQ LSCCMLQ LSCHLQ LSCCHLQ)\"\nADDRESS ISPEXEC \"VGET (LSCUNT LSCVOL LSCTVOL LSCGHOST)\"\nADDRESS ISREDIT \"COPY \"LSCGHOST\" BEFORE .ZL         \"\nADDRESS ISREDIT \"CHANGE 'LSCHLQ'  '\"LSCHLQ\"'  ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCMLQ'  '\"LSCMLQ\"'  ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCCMLQ' '\"LSCCMLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCCHLQ' '\"LSCCHLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCGCSI' '\"LSCGCSI\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCUNT'  '\"LSCUNT\"'  ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCVOL'  '\"LSCVOL\"'  ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCTVOL' '\"LSCTVOL\"' ALL\"\nADDRESS ISREDIT \"END\"\nRETURN\n./ ADD NAME=LMRKMAC0 0101-01016-01016-1428-00024-00024-00000-RACFCLS\n/* rexx */\nADDRESS ISREDIT\n\"MACRO\"\nADDRESS ISPEXEC\n\"VGET (LSCGCSI LSCGVSI LSCTCSI LSCTVSI LSCDCSI )\"\n\"VGET (LSCDVSI LSCCAT LSCVUNT LSCIDSN)\"\nADDRESS ISREDIT\n\"COPY TEMPCSI BEFORE .ZL                         \"\n\"CHANGE 'LSCGCSI' '\"LSCGCSI\"' ALL\"\n\"CHANGE 'LSCGVSI' '\"LSCGVSI\"' ALL\"\n\"CHANGE 'LSCTCSI' '\"LSCTCSI\"' ALL\"\n\"CHANGE 'LSCTVSI' '\"LSCTVSI\"' ALL\"\n\"CHANGE 'LSCDCSI' '\"LSCDCSI\"' ALL\"\n\"CHANGE 'LSCDVSI' '\"LSCDVSI\"' ALL\"\nIF LSCCAT = '' THEN DO\n    \"EXCLUDE ALL\"\n    \"FIND 'CATALOG(LSCCAT)' ALL\"\n    \"DELETE ALL NX\"\n    END\nELSE\n    \"CHANGE 'LSCCAT' '\"LSCCAT\"' ALL\"\n\"CHANGE 'LSCVUNT' '\"LSCVUNT\"' ALL\"\n\"END\"\nRETURN\n./ ADD NAME=LMRKMAC1 0101-01016-01016-1428-00033-00033-00000-RACFCLS\n/* rexx */\nADDRESS ISREDIT\n\"MACRO\"\nADDRESS ISPEXEC\n\"VGET (LSCIDSN LSCGCSI LSCTCSI LSCDSCSI)\"\n\"VGET (LSCMLQ LSCCMLQ )\"\n\"VGET (LSCGVSI LSCTVSI LSCDVSI LSCCAT LSCTVOL)\"\n\"VGET (LSCUNT LSCPUNT LSCHLQ LSCCHLQ LSCVOL LSCVUNT)\"\n\"VGET (NVG NVP TCE TCM TDB MVS TVT)\"\nADDRESS ISREDIT\n\"COPY TEMPPDS BEFORE .ZL                          \"\nIF NVG = 1 THEN\n    \"COPY #PDSNVG AFTER .ZL                          \"\nIF NVP = 1 THEN\n    \"COPY #PDSNVP AFTER .ZL                          \"\nIF TCE = 1 THEN\n    \"COPY #PDSTCE AFTER .ZL                          \"\nIF TCM = 1 THEN\n    \"COPY #PDSTCM AFTER .ZL                          \"\nIF TDB = 1 THEN\n    \"COPY #PDSTDB AFTER .ZL                          \"\nIF MVS = 1 THEN\n    \"COPY #PDSTMV AFTER .ZL                          \"\nIF TVT = 1 THEN\n    \"COPY #PDSTVT AFTER .ZL                          \"\n\"CHANGE 'LSCHLQ' '\"LSCHLQ\"' ALL\"\n\"CHANGE 'LSCMLQ' '\"LSCMLQ\"' ALL\"\n\"CHANGE 'LSCCMLQ' '\"LSCCMLQ\"' ALL\"\n\"CHANGE 'LSCCHLQ' '\"LSCCHLQ\"' ALL\"\n\"CHANGE 'LSCPUNT'                  '\"LSCPUNT\"' ALL\"\n\"CHANGE 'LSCVOL' '\"LSCVOL\"' ALL\"\n\"END\"\nreturn\n./ ADD NAME=LMRKMAC2 0101-01016-01016-1428-00092-00092-00000-RACFCLS\n/* rexx */\nADDRESS ISREDIT\n\"MACRO\"\nADDRESS ISPEXEC\n\"VGET (LSCIDSN LSCPFX LSCGCSI LSCTCSI LSCDCSI)\"\n\"VGET (LSCGVSI LSCTVSI LSCDVSI LSCCAT LSCTVOL)\"\n\"VGET (LSCUNT LSCPUNT LSCHLQ LSCCHLQ LSCVOL LSCVUNT)\"\n\"VGET (LSCMLQ LSCCMLQ)\"\n\"VGET (NVG NVP TCE TCM TDB MVS TVT)\"\nADDRESS ISREDIT\n\"COPY TEMPUCL BEFORE .ZL                          \"\nIF  TVT = 1 THEN DO\n    \"FIND PLACE FIRST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTVT AFTER .X                  \"\n    \"FIND PLACE LAST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTVT AFTER .X                  \"\nEND\nIF MVS = 1 THEN DO\n    \"FIND PLACE FIRST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTMV AFTER .X                  \"\n    \"FIND PLACE LAST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTMV AFTER .X                  \"\nEND\nIF  TDB = 1 THEN DO\n    \"FIND PLACE FIRST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTDB AFTER .X                  \"\n    \"FIND PLACE LAST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTDB AFTER .X                  \"\nEND\nIF  TCM = 1 THEN DO\n    \"FIND PLACE FIRST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTCM AFTER .X                  \"\n    \"FIND PLACE LAST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTCM AFTER .X                  \"\nEND\nIF TCE = 1 THEN DO\n    \"FIND PLACE FIRST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTCE AFTER .X                  \"\n    \"FIND PLACE LAST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLTCE AFTER .X                  \"\nEND\nIF  NVP = 1 THEN DO\n    \"FIND PLACE FIRST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLNVP AFTER .X                  \"\n    \"FIND PLACE LAST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLNVP AFTER .X                  \"\nEND\nIF  NVG = 1 THEN DO\n    \"FIND PLACE FIRST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLNVG AFTER .X                  \"\n    \"FIND PLACE LAST \"\n    MYLAB = '.X'\n    \"LABEL .ZCSR = (MYLAB)\"\n    \"COPY #UCLNVG AFTER .X                  \"\nEND\n\"CHANGE 'LSCHLQ' '\"LSCHLQ\"' ALL\"\n\"CHANGE 'LSCMLQ' '\"LSCMLQ\"' ALL\"\n\"CHANGE 'LSCCMLQ' '\"LSCCMLQ\"' ALL\"\n\"CHANGE 'LSCCHLQ' '\"LSCCHLQ\"' ALL\"\n\"CHANGE 'LSCTCSI' '\"LSCTCSI\"' ALL\"\n\"CHANGE 'LSCDCSI' '\"LSCDCSI\"' ALL\"\n\"CHANGE 'LSCPFX'                  '\"LSCPFX\"' ALL\"\n\"CHANGE 'LSCVOL' '\"LSCVOL\"' ALL\"\n\"CHANGE 'LSCPUNT' '\"LSCPUNT\"' ALL\"\n\"END\"\nreturn\n./ ADD NAME=LMRKMAC3 0101-01016-01016-1428-00009-00009-00000-RACFCLS\n/* rexx */\nADDRESS ISREDIT \"MACRO\"\nADDRESS ISPEXEC \"VGET (LSCCHLQ LSCCMLQ LSCVOL)\"\nADDRESS ISREDIT \"COPY TEMPCBA BEFORE .ZL         \"\nADDRESS ISREDIT \"CHANGE 'LSCCMLQ' '\"LSCCMLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCCHLQ' '\"LSCCHLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCVOL' '\"LSCVOL\"' ALL\"\nADDRESS ISREDIT \"END\"\nreturn\n./ ADD NAME=LMRKMAC4 0101-01016-01016-1428-00025-00025-00000-RACFCLS\n/* rexx */\nADDRESS ISREDIT \"MACRO\"\nADDRESS ISPEXEC \"VGET (LSCCHLQ LSCCMLQ LSCVOL)\"\nADDRESS ISPEXEC \"VGET (LSCHLQ LSCMLQ)\"\nADDRESS ISPEXEC \"VGET (MVS TVT TDB NVG TCM TCE)\"\nADDRESS ISREDIT \"COPY TEMPCBF BEFORE .ZL          \"\nIF  TDB = 1\n   THEN DO\nADDRESS ISREDIT \"COPY #CBFTDB AFTER .ZL         \"\nEND\nIF TCE = 1\n   THEN DO\nADDRESS ISREDIT \"COPY #CBFTCE AFTER .ZL         \"\nEND\nIF  TCM = 1\n   THEN DO\nADDRESS ISREDIT \"COPY #CBFTCM AFTER .ZL         \"\nEND\nADDRESS ISREDIT \"COPY #CBFEND AFTER .ZL         \"\nADDRESS ISREDIT \"CHANGE 'LSCCMLQ' '\"LSCCMLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCCHLQ' '\"LSCCHLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCMLQ' '\"LSCMLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCHLQ' '\"LSCHLQ\"' ALL\"\nADDRESS ISREDIT \"END\"\nreturn\n./ ADD NAME=LMRKMAC5 0101-01016-01016-1428-00029-00029-00000-RACFCLS\n/* REXX */\nADDRESS ISREDIT \"MACRO\"\nADDRESS ISPEXEC \"VGET (LSCIDSN LSCGCSI LSCTCSI LSCDSCSI)\"\nADDRESS ISPEXEC \"VGET (LSCMLQ LSCCMLQ )\"\nADDRESS ISPEXEC \"VGET (LSCGVSI LSCTVSI LSCDVSI LSCCAT LSCTVOL)\"\nADDRESS ISPEXEC \"VGET (LSCUNT LSCPUNT LSCHLQ LSCCHLQ LSCVOL LSCVUNT)\"\nADDRESS ISPEXEC \"VGET (NVG NVP TCE TCM TDB MVS TVT)\"\nADDRESS ISREDIT \"COPY REC BEFORE .ZL          \"\nIF (TCE = 1) | (TCM = 1) | (NVG = 1) THEN\n    ADDRESS ISREDIT \"COPY FLMDL120 AFTER .ZL          \"\nIF (MVS = 1) | (TCE = 1) | (TCM = 1) | (NVG = 1) THEN\n    ADDRESS ISREDIT \"COPY FLTCC100 AFTER .ZL          \"\nIF NVG = 1 THEN\n    ADDRESS ISREDIT \"COPY RECNVG AFTER .ZL          \"\nIF NVP = 1 THEN\n    ADDRESS ISREDIT \"COPY FLNVP100 AFTER .ZL          \"\nIF TCE = 1 THEN\n    ADDRESS ISREDIT \"COPY RECTCE AFTER .ZL          \"\nIF TCM = 1 THEN\n    ADDRESS ISREDIT \"COPY RECTCM AFTER .ZL          \"\nIF TDB = 1 THEN\n    ADDRESS ISREDIT \"COPY RECTDB AFTER .ZL          \"\nIF MVS = 1 THEN\n    ADDRESS ISREDIT \"COPY RECTMV AFTER .ZL          \"\nIF TVT = 1 THEN\n    ADDRESS ISREDIT \"COPY RECTVT AFTER .ZL          \"\nADDRESS ISREDIT \"COPY REC#END AFTER .ZL          \"\nADDRESS ISREDIT \"END \"\nRETURN\n./ ADD NAME=LMRKMAC6 0101-01016-01016-1428-00029-00029-00000-RACFCLS\n/* REXX */\nADDRESS ISREDIT \"MACRO\"\nADDRESS ISPEXEC \"VGET (LSCIDSN LSCGCSI LSCTCSI LSCDSCSI)\"\nADDRESS ISPEXEC \"VGET (LSCMLQ LSCCMLQ )\"\nADDRESS ISPEXEC \"VGET (LSCGVSI LSCTVSI LSCDVSI LSCCAT LSCTVOL)\"\nADDRESS ISPEXEC \"VGET (LSCUNT LSCPUNT LSCHLQ LSCCHLQ LSCVOL LSCVUNT)\"\nADDRESS ISPEXEC \"VGET (NVG NVP TCE TCM TDB MVS TVT)\"\nADDRESS ISREDIT \"COPY APP BEFORE .ZL          \"\nIF (TCE = 1) | (TCM = 1) | (NVG = 1) THEN\n    ADDRESS ISREDIT \"COPY FLMDL120 AFTER .ZL          \"\nIF (MVS = 1) | (TCE = 1) | (TCM = 1) | (NVG = 1) THEN\n    ADDRESS ISREDIT \"COPY FLTCC100 AFTER .ZL          \"\nIF NVG = 1 THEN\n    ADDRESS ISREDIT \"COPY APPNVG AFTER .ZL          \"\nIF NVP = 1 THEN\n    ADDRESS ISREDIT \"COPY FLNVP100 AFTER .ZL          \"\nIF TCE = 1 THEN\n    ADDRESS ISREDIT \"COPY APPTCE AFTER .ZL          \"\nIF TCM = 1 THEN\n    ADDRESS ISREDIT \"COPY APPTCM AFTER .ZL          \"\nIF TDB = 1 THEN\n    ADDRESS ISREDIT \"COPY APPTDB AFTER .ZL          \"\nIF MVS = 1 THEN\n    ADDRESS ISREDIT \"COPY APPTMV AFTER .ZL          \"\nIF TVT = 1 THEN\n    ADDRESS ISREDIT \"COPY APPTVT AFTER .ZL          \"\nADDRESS ISREDIT \"COPY APP#END AFTER .ZL          \"\nADDRESS ISREDIT \"END \"\nRETURN\n./ ADD NAME=LMRKMAC7 0101-01016-01016-1428-00029-00029-00000-RACFCLS\n/* REXX */\nADDRESS ISREDIT \"MACRO\"\nADDRESS ISPEXEC \"VGET (LSCIDSN LSCGCSI LSCTCSI LSCDSCSI)\"\nADDRESS ISPEXEC \"VGET (LSCMLQ LSCCMLQ )\"\nADDRESS ISPEXEC \"VGET (LSCGVSI LSCTVSI LSCDVSI LSCCAT LSCTVOL)\"\nADDRESS ISPEXEC \"VGET (LSCUNT LSCPUNT LSCHLQ LSCCHLQ LSCVOL LSCVUNT)\"\nADDRESS ISPEXEC \"VGET (NVG NVP TCE TCM TDB MVS TVT)\"\nADDRESS ISREDIT \"COPY ACC BEFORE .ZL          \"\nIF (TCE = 1) | (TCM = 1) | (NVG = 1) THEN\n    ADDRESS ISREDIT \"COPY FLMDL120 AFTER .ZL          \"\nIF (MVS = 1) | (TCE = 1) | (TCM = 1) | (NVG = 1) THEN\n    ADDRESS ISREDIT \"COPY FLTCC100 AFTER .ZL          \"\nIF NVG = 1 THEN\n    ADDRESS ISREDIT \"COPY ACCNVG AFTER .ZL          \"\nIF NVP = 1 THEN\n    ADDRESS ISREDIT \"COPY FLNVP100 AFTER .ZL          \"\nIF TCE = 1 THEN\n    ADDRESS ISREDIT \"COPY ACCTCE AFTER .ZL          \"\nIF TCM = 1 THEN\n    ADDRESS ISREDIT \"COPY ACCTCM AFTER .ZL          \"\nIF TDB = 1 THEN\n    ADDRESS ISREDIT \"COPY ACCTDB AFTER .ZL          \"\nIF MVS = 1 THEN\n    ADDRESS ISREDIT \"COPY ACCTMV AFTER .ZL          \"\nIF TVT = 1 THEN\n    ADDRESS ISREDIT \"COPY ACCTVT AFTER .ZL          \"\nADDRESS ISREDIT \"COPY ACC#END AFTER .ZL          \"\nADDRESS ISREDIT \"END \"\nRETURN\n./ ADD NAME=LMRKMAC8 0101-01016-01016-1428-00021-00021-00000-RACFCLS\n/* rexx */\nADDRESS ISREDIT \"MACRO\"\nADDRESS ISPEXEC \"VGET (LSCCHLQ LSCCMLQ )\"\nADDRESS ISPEXEC \"VGET (LSCHLQ LSCMLQ )\"\nADDRESS ISPEXEC \"VGET (MVS TVT TDB NVG TCM TCE)\"\nADDRESS ISREDIT \"COPY TEMPCBU BEFORE .ZL          \"\nIF  TDB = 1\n   THEN DO\nADDRESS ISREDIT \"COPY #CBUTDB AFTER .ZL         \"\nEND\nIF TCE = 1\n   THEN DO\nADDRESS ISREDIT \"COPY #CBUTCE AFTER .ZL         \"\nEND\nADDRESS ISREDIT \"COPY #CBUEND AFTER .ZL         \"\nADDRESS ISREDIT \"CHANGE 'LSCCMLQ' '\"LSCCMLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCCHLQ' '\"LSCCHLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCMLQ' '\"LSCMLQ\"' ALL\"\nADDRESS ISREDIT \"CHANGE 'LSCHLQ' '\"LSCHLQ\"' ALL\"\nADDRESS ISREDIT \"END\"\nreturn\n./ ADD NAME=LMRKPSWD 0101-01016-01016-1428-00928-00928-00000-RACFCLS\n/*REXX */\n/*\nFunction: this EXEC drives the Landmark product license assist\n          ISPF dialog.  The purpose of the dialog is to facilitate\n          the generation of the control statements for the Landmark\n          licence management utility, $APUTIL.\n\nInvocation: execname pdsname\n\n   where\n\n   execname: the name of this EXEC.  The EXEC may\n             be placed in one of the libraries of the user's SYSPROC\n             or SYSEXEC concatenation, or invoked directly using the\n             fully qualified name of the resident library.\n\nUsage notes: the panels (LMRLCPNL and LMRLHnnn members in the install\n             library) must be placed in one of the libraries\n             of the user's ISPPLIB; or this exec may be invoked\n             by a 'wrapper' EXEC that LIBDEFs the install library.\n*/\nADDRESS ISPEXEC\n\"CONTROL ERRORS RETURN\"\n\"VGET (SPFDEBUG) PROFILE\"\nPARSE SOURCE . . execname .\nIF (SPFDEBUG = execname) | (SPFDEBUG = 'Y') THEN DO\n   SAY 'DEBUG initiated for' execname\n   TRACE I\n   END\n/* */\nLMRODSN = \"\"\n\ncall InitTables\n\ncc = 0\nstatements = 0\nlmrsite = \"\"\n\n/* Mainline routine */\ndo while cc = 0\n   \"DISPLAY PANEL(LMRLIPNL)\"\n   cc = RC\n   if cc = 0 then call ProcessMain\nend\nexit\n\n/*\nSubroutine BuildControlStatements\n\nAttempts to create the control statements.\n\nInput: Rexx array 'product.'\n       variables set on the site info panel\nOutput: Rexx array 'cpu.', modified to refect user's changes\n        String of selected CPU Serial numbers\n\n*/\nBuildControlStatements:\nif statements = 0 then do\n   ZEDSMSG = \"Nothing to do\"\n   ZEDLMSG = \"Use option 3 to license products/features\"\n   \"SETMSG MSG(ISRZ001)\"\n   return\nend\n\ncall DSNChecks\nif cc > 0 then do\n   cc = 0\n   return\nend\n\n\"LMINIT DATAID(ID) DATASET(\" lmrodsn \") ENQ(SHRW)\"\ncc = RC\nif cc > 0 then do\n   ZEDSMSG = \"LMINIT Error\"\n   ZEDLMSG = \"LMINIT failed for\" lmrodsn || \", RC =\" cc\n   \"SETMSG MSG(ISRZ001)\"\n   return\nend\n\n\"LMOPEN DATAID(\" id \") OPTION(OUTPUT)\"\ncc = RC\nif cc > 0 then do\n   ZEDSMSG = \"LMOPEN Error\"\n   ZEDLMSG = \"LMOPEN failed for\" lmrodsn || \", RC =\" cc\n   \"SETMSG MSG(ISRZ001)\"\n   \"LMFREE DATAID(\" id \")\"\n   return\nend\n\ndo i = 1 to product.0\n   if product.i.!password <> \"\" then do\n      pcode = product.i.!code\n      pname = product.i.!name\n      fcode = \"\"\n      fname = \"\"\n      password = product.i.!password\n      expires = product.i.!expires\n      grace = product.i.!grace\n      license = product.i.!license\n      data = product.i.!data\n      call OutputLicense\n      if cc > 0 then return\n   end\n   if product.i.!features.0 > 0 then ,\n      do j = 1 to product.i.!features.0\n         if product.i.!features.j.!password <> \"\" then do\n            pcode = product.i.!code\n            pname = product.i.!name\n            fcode = product.i.!features.j.!code\n            fname = product.i.!features.j.!name\n            password = product.i.!features.j.!password\n            expires = product.i.!features.j.!expires\n            grace = product.i.!features.j.!grace\n            license = product.i.!features.j.!license\n            data = product.i.!features.j.!data\n            call OutputLicense\n            if cc > 0 then return\n         end\n      end\nend\n\nif lmromem <> \"\" then do\n   \"LMMREP DATAID(\" id \") MEMBER(\" lmromem \")\"\n   cc = RC\n   \"LMCLOSE DATAID(\" id \")\"\n   if cc > 8 then do\n      ZEDSMSG = \"LMMREP Error\"\n      ZEDLMSG = \"LMMREP failed for member\" lmromem || \", RC =\" cc\n      \"SETMSG MSG(ISRZ001)\"\n   end\n   else ,\n      \"EDIT DATAID(\" id \") MEMBER(\" lmromem \")\"\nend\nelse do\n   \"LMCLOSE DATAID(\" id \")\"\n   \"EDIT DATAID(\" id \")\"\nend\n\n\"LMFREE DATAID(\" id \")\"\ncc = 0\nreturn\n\n/*\nSubroutine DSNChecks\n\nEnsure that the dataset name/member name suppplied constitute a\nvalid target for the control statements.\n\nInput: LMRODSN, the output dataset\n       LMROMEM, the supplied member name\n       If LMRODSN is specififed wirh a member name, the member name\n          will be stripped out and LMROMEM will be set to that value.\n\nOutput: variable cc\n        if 0 - all is well\n        else there is a problem and messages were issued\n\n*/\nDSNChecks: procedure expose lmrodsn lmromem cc\n\nif LMRODSN = \"\" then do\n   ZEDSMSG = \"Missing DSN\"\n   ZEDLMSG = \"Supply the name of an output dataset\"\n   \"SETMSG MSG(ISRZ001)\"\n   cc = 8\n   return\nend\n\nthedsn = LMRODSN\nthemem = \"\"\ncall DSNParse\nIf cc <> 0 then return\nLMRODSN = thedsn\nif themem <> \"\" then LMROMEM = themem\n\nstatus = SYSDSN(lmrodsn)\nif status <> \"OK\" then do\n   ZEDSMSG = \"Invalid DSN\"\n   ZEDLMSG = lmrodsn \"-\" status\n   \"SETMSG MSG(ISRZ001)\"\n   cc = 8\n   return\nend\n\nx = LISTDSI(LMRODSN)\n\nif SYSDSORG <> \"PO\" then do\n   if lmromem <> \"\" then do\n      ZEDSMSG = \"Member invalid\"\n      ZEDLMSG = LMRODSN \"is not a PDS\"\n      \"SETMSG MSG(ISRZ001)\"\n      cc = 8\n      return\n   end\n   if SYSDSORG <> \"PS\" then do\n      ZEDSMSG = \"Invalid DSORG\"\n      ZEDLMSG = lmrodsn \"is DSORG\" sysdsorg ||\".  PS or PO only.\"\n      \"SETMSG MSG(ISRZ001)\"\n      cc = 8\n      return\n   end\nend\nelse do\n   if lmromem = \"\" then do\n      ZEDSMSG = \"Missing member\"\n      ZEDLMSG = \"Supply a member name for PDS\" lmrodsn\n      \"SETMSG MSG(ISRZ001)\"\n      cc = 8\n      return\n   end\nend\n\nif substr(SYSRECFM,1,1) ^= \"F\" then do\n   ZEDSMSG = \"Invalid RECFM\"\n   ZEDLMSG = \"The batch utility requires fixed record length input\"\n   \"SETMSG MSG(ISRZ001)\"\n   cc = 8\n   return\nend\n\nif SYSLRECL ^= 80 then do\n   ZEDSMSG = \"Invalid LRECL\"\n   ZEDLMSG = \"The batch utility requires card image (LRECL=80) input\"\n   \"SETMSG MSG(ISRZ001)\"\n   cc = 8\n   return\nend\n\nreturn\n\n/*\nSubroutine DSNParse\n\nBreak a dataset name entry down into DSN and member components.\n\nInput: thedsn - the dataset name\n\nOutput: variable cc\n        if 0 - all is well\n        else there is a problem and messages were issued\n        thedsn - just the dataset name\n        themem - if a member name was included, this is it.  Else NULL.\n\n*/\nDSNParse: procedure expose thedsn themem cc\n\ncc = 0\nthemem = \"\"\nmname = pos(\"(\", thedsn)\nif mname > 0 then do\n   mend = pos(\")\", thedsn)\n   if mend = 0 then do\n      ZEDSMSG = \"Syntax error\"\n      ZEDLMSG = \"No closing parentheses for member name\"\n      \"SETMSG MSG(ISRZ001)\"\n      cc = 8\n      return\n   end\n   mlen = mend - mname - 1\n   dlen = mname - 1\n   if mlen > 0 then ,\n      themem = strip(substr(thedsn,mname+1,mlen))\n   thedsn = substr(thedsn,1,dlen)\n   if substr(thedsn,1,1) = \"'\" then ,\n      thedsn = strip(thedsn) || \"'\"\nend\nreturn\n\n/*\nSubroutine GetCPUList\n\nAllows creation/modification of the CPU. array and returns the\nstring of selected CPUs.\n\nInput: Rexx array 'cpu.'\nOutput: Rexx array 'cpu.', modified to refect user's changes\n        String of selected CPU Serial numbers\n\n*/\nGetCPUList: procedure expose cpu.\n\n\"CONTROL DISPLAY SAVE\"\ntable = \"LMCTABLE\"\n\"TBCREATE\" table \"NAMES(LMRCSEL LMRCPU)\" NOWRITE REPLACE\ncc = RC\nif cc > 4 then do\n   ZEDSMSG = \"TBCreate Failed\"\n   ZEDLMSG = \"TBCreate failed for CPU table, RC =\" cc\n   \"CONTROL DISPLAY RESTORE\"\n   \"SETMSG MSG(ISRZ001)\"\n   return \"\"\nend\n\ndo i = 1 to cpu.0\n   lmrcpu = cpu.i\n   lmrcsel = \"\"\n   \"TBADD\" table\nend\ntop = 1\n\ndo while cc < 8\n   \"TBTOP\" table\n   \"TBSKIP\" table \"NUMBER(\" top \")\"\n   \"TBDISPL\" table \"PANEL(LMRLCPNL)\"\n   cc = RC\n   if cc < 8 then do\n      selects = ZTDSELS\n      top = ZTDTOP\n      do while selects > 0\n         selects = selects - 1\n         select\n            when lmrcsel = \"D\" then \"TBDELETE\" table\n            when lmrcsel = \"S\" then \"TBPUT\" table\n            otherwise do\n               lmrcsel = \"\"\n               \"TBPUT\" table\n            end\n         end\n         if selects > 0 then \"TBDISPL\" table\n      end\n      if lmicpu > \"\" then do\n         \"TBBOTTOM\" table\n         lmrcpu = right(lmicpu,4,\"0\")\n         lmrcsel = \"\"\n         \"TBADD\" table\n         lmicpu = \"\"\n      end\n      if lmicdsn > \"\" then do\n         thedsn = lmicdsn\n         themem = \"\"\n         call DSNParse\n         if cc = 0 then do\n            lmicdsn = thedsn\n            lmicmem = themem\n            call LoadCPUList\n            \"TBTOP\" table\n            \"TBSKIP\" table\n            cc = RC\n            do while cc = 0\n               \"TBDELETE\" table\n               \"TBTOP\" table\n               \"TBSKIP\" table\n               cc = RC\n            end\n            do i = 1 to CPU.0\n               lmrcpu = cpu.i\n               lmrcsel = \"\"\n               \"TBADD\" table\n            end\n            lmicdsn = \"\"\n            top = 1\n            cc = 0\n         end\n      end\n   end\nend\n\ndata = \"\"\n\"TBTOP\" table\n\"TBSKIP\" table\ncc = RC\ni = 0\ndo while cc = 0\n   i = i + 1\n   cpu.i = lmrcpu\n   if lmrcsel = \"S\" then data = data lmrcpu\n   \"TBSKIP\" table\n   cc = RC\nend\ncpu.0 = i\n\"TBEND\" table\n\"CONTROL DISPLAY RESTORE\"\nreturn data\n\n/*\nSubroutine GetLicenseInfo\n\nMain License routine panel and table management\n\nInput: Rexx arrays 'product.', 'cpu.', and the variable 'statements'\nOutput: Rexx array 'product.', modified to refect user's changes\n       'statements' is set to 1 if anything was licensed.\n\n*/\nGetLicenseInfo: procedure expose product. cpu. statements\n\ntable = \"LMPTABLE\"\n\"TBCREATE\" table \"NAMES(LMTSEL LMTPCODE LMTFCODE LMTNAME LMTPSWD\",\n   \"LMTEXPD LMTGRACE LMTLTYPE LMTLDATA LMTPNDX LMTFNDX)\",\n   \"NOWRITE REPLACE\"\ncc = RC\nif cc > 4 then do\n   ZEDSMSG = \"TBCreate Failed\"\n   ZEDLMSG = \"TBCreate failed for Product table, RC =\" cc\n   \"SETMSG MSG(ISRZ001)\"\n   return\nend\n /*..................................................................*/\n /* copy the product array to the ISPF table.                        */\n /*..................................................................*/\ndo i = 1 to product.0\n   lmtsel = \"\"\n   lmtpcode = product.i.!code\n   lmtfcode = \"\"\n   lmtname = product.i.!name\n   lmtpswd = product.i.!password\n   lmtexpd = product.i.!expires\n   lmtgrace = product.i.!grace\n   lmtltype = product.i.!license\n   lmtldata = product.i.!data\n   lmtpndx = i\n   lmtfndx = 0\n   \"TBADD\" table\n   if product.i.!features.0 > 0 then ,\n      do j = 1 to product.i.!features.0\n         lmtsel = \"\"\n         lmtpcode = product.i.!code\n         lmtfcode = product.i.!features.j.!code\n         lmtname = product.i.!features.j.!name\n         lmtpswd = product.i.!features.j.!password\n         lmtexpd = product.i.!features.j.!expires\n         lmtgrace = product.i.!features.j.!grace\n         lmtltype = product.i.!features.j.!license\n         lmtldata = product.i.!features.j.!data\n         lmtpndx = i\n         lmtfndx = j\n         \"TBADD\" table\n      end\nend\ntop = 1\n /*..................................................................*/\n /* Display loop.  Updates only the ISPF table.                      */\n /*..................................................................*/\ncc = 4\ndo while cc < 8\n   \"TBTOP\" table\n   \"TBSKIP\" table \"NUMBER(\" top \")\"\n   \"TBDISPL\" table \"PANEL(LMRLNPNL)\"\n   cc = RC\n   if cc < 8 then do\n      selects = ZTDSELS\n      top = ZTDTOP\n      do while selects > 0\n         selects = selects - 1\n         data = \"\"\n         if lmtsel = \"D\" then do\n            lmtpswd = \"\"\n            lmtexpd = \"\"\n            lmtgrace = \"\"\n            lmtltype = \"\"\n            lmtldata = \"\"\n         end\n         else if lmtsel = \"S\" then ,\n         select\n            when lmrtype = \"C\" then ,\n               do\n                  if cpu.0 = 0 then lmrdata = \"\"\n                  if lmrdata <> \"ALL\" then do\n                     data = GetCpuList()\n                     if data > \" \" then call UpdateProductTable\n                     else do\n                        ZEDSMSG = \"No CPUs\"\n                        ZEDLMSG = \"No CPUs were SELECTed from the \" ||,\n                                  \"CPU list\"\n                        \"SETMSG MSG(ISRZ001)\"\n                     end\n                  end\n                  else do\n                     do i = 1 to cpu.0\n                        data = data cpu.i\n                     end\n                     if data > \" \" then call UpdateProductTable\n                  end\n               end\n            when lmrtype = \"M\" then ,\n               do\n               data = right(lmrdata,4,\"0\")\n               call UpdateProductTable\n               end\n            when lmrtype = \"S\" then ,\n               do\n               data = right(lmrdata,4,\"0\")\n               call UpdateProductTable\n               end\n            when lmrtype = \"U\" then ,\n               do\n               data = \"\"\n               call UpdateProductTable\n               end\n            otherwise nop\n         end\n      lmtsel = \"\"\n      \"TBPUT\" table\n      if selects > 0 then \"TBDISPL\" table\n      end\n   end\nend\n /*..................................................................*/\n /* User hit end/return.                                             */\n /*                                                                  */\n /* Copy the ISPF table back to the product array.                   */\n /*..................................................................*/\n\"TBTOP\" table\n\"TBSKIP\" table\nstatements = 0\ncc = RC\ndo while cc = 0\n   if lmtpswd <> \"\" then do\n      if lmtfndx = 0 then do\n         product.lmtpndx.!password = lmtpswd\n         product.lmtpndx.!expires = lmtexpd\n         product.lmtpndx.!grace = lmtgrace\n         product.lmtpndx.!license = lmtltype\n         product.lmtpndx.!data = lmtldata\n         statements = 1\n      end\n      else do\n         product.lmtpndx.!features.lmtfndx.!password = lmtpswd\n         product.lmtpndx.!features.lmtfndx.!expires = lmtexpd\n         product.lmtpndx.!features.lmtfndx.!grace = lmtgrace\n         product.lmtpndx.!features.lmtfndx.!license = lmtltype\n         product.lmtpndx.!features.lmtfndx.!data = lmtldata\n         statements = 1\n      end\n   end\n   \"TBSKIP\" table\n   cc = RC\nend\n\"TBEND\" table\nreturn\n\n\n/*\nSubroutine InitTables\n\nInitialize the available Product/Feature table \"product.\"\n\nInput: none\nOutput: Rexx array 'product.'\n\n*/\nInitTables:\n\nproduct.0 = 7\nproduct.1.!name = \"The Monitor For CICS/ESA\"\nproduct.1.!code = \"TMCE\"\nproduct.1.!password = \"\"\nproduct.1.!expires = \"\"\nproduct.1.!grace = \"\"\nproduct.1.!license = \"\"\nproduct.1.!data = \"\"\nproduct.1.!features.0 = 0\n\nproduct.2.!name = \"The Monitor For CICS/MVS\"\nproduct.2.!code = \"TMCM\"\nproduct.2.!password = \"\"\nproduct.2.!expires = \"\"\nproduct.2.!grace = \"\"\nproduct.2.!license = \"\"\nproduct.2.!features.0 = 0\nproduct.2.!data = \"\"\n\nproduct.3.!name = \"The Monitor For DB2\"\nproduct.3.!code = \"TMDB\"\nproduct.3.!password = \"\"\nproduct.3.!expires = \"\"\nproduct.3.!grace = \"\"\nproduct.3.!license = \"\"\nproduct.3.!data = \"\"\nproduct.3.!features.0 = 1\n\nproduct.3.!features.1.!name = \"The Monitor for DB2 SQLC\"\nproduct.3.!features.1.!code = \"SQLC\"\nproduct.3.!features.1.!password = \"\"\nproduct.3.!features.1.!expires = \"\"\nproduct.3.!features.1.!grace = \"\"\nproduct.3.!features.1.!license = \"\"\nproduct.3.!features.1.!data = \"\"\n\nproduct.4.!name = \"The Monitor For MVS\"\nproduct.4.!code = \"TMVS\"\nproduct.4.!password = \"\"\nproduct.4.!expires = \"\"\nproduct.4.!grace = \"\"\nproduct.4.!license = \"\"\nproduct.4.!data = \"\"\nproduct.4.!features.0 = 0\n\nproduct.5.!name = \"The Monitor For VTAM\"\nproduct.5.!code = \"TMVT\"\nproduct.5.!password = \"\"\nproduct.5.!expires = \"\"\nproduct.5.!grace = \"\"\nproduct.5.!license = \"\"\nproduct.5.!data = \"\"\nproduct.5.!features.0 = 0\n\nproduct.6.!name = \"NaviGraph Host\"\nproduct.6.!code = \"TCPM\"\nproduct.6.!data = \"\"\nproduct.6.!password = \"\"\nproduct.6.!expires = \"\"\nproduct.6.!grace = \"\"\nproduct.6.!license = \"\"\nproduct.6.!features.0 = 4\n\nproduct.6.!features.1.!name = \"NaviGraph CICS Data\"\nproduct.6.!features.1.!code = \"TMON\"\nproduct.6.!features.1.!password = \"\"\nproduct.6.!features.1.!expires = \"\"\nproduct.6.!features.1.!grace = \"\"\nproduct.6.!features.1.!license = \"\"\nproduct.6.!features.1.!data = \"\"\n\nproduct.6.!features.2.!name = \"NaviGraph DB2 Data\"\nproduct.6.!features.2.!code = \"TMDB\"\nproduct.6.!features.2.!password = \"\"\nproduct.6.!features.2.!expires = \"\"\nproduct.6.!features.2.!grace = \"\"\nproduct.6.!features.2.!license = \"\"\nproduct.6.!features.2.!data = \"\"\n\nproduct.6.!features.3.!name = \"NaviGraph MVS Data\"\nproduct.6.!features.3.!code = \"TMVS\"\nproduct.6.!features.3.!data = \"\"\nproduct.6.!features.3.!password = \"\"\nproduct.6.!features.3.!expires = \"\"\nproduct.6.!features.3.!grace = \"\"\nproduct.6.!features.3.!license = \"\"\n\nproduct.6.!features.4.!name = \"NaviGraph VTAM Data\"\nproduct.6.!features.4.!code = \"TMVT\"\nproduct.6.!features.4.!data = \"\"\nproduct.6.!features.4.!password = \"\"\nproduct.6.!features.4.!expires = \"\"\nproduct.6.!features.4.!grace = \"\"\nproduct.6.!features.4.!license = \"\"\n\nproduct.7.!name = \"NaviPlex\"\nproduct.7.!code = \"NVPL\"\nproduct.7.!password = \"\"\nproduct.7.!expires = \"\"\nproduct.7.!grace = \"\"\nproduct.7.!license = \"\"\nproduct.7.!data = \"\"\nproduct.7.!features.0 = 1\n\nproduct.7.!features.1.!name = \"NaviPlex Users\"\nproduct.7.!features.1.!code = \"USER\"\nproduct.7.!features.1.!data = \"\"\nproduct.7.!features.1.!password = \"\"\nproduct.7.!features.1.!expires = \"\"\nproduct.7.!features.1.!grace = \"\"\nproduct.7.!features.1.!license = \"\"\n\ncpu.0 = 0\nreturn\n\n/*\nSubroutine LoadCPUList\n\nRead the specified dataset and use the information contained therein\nto populate the 'cpu.' array.  The input dataset must be formatted\nas follows:\n\n   No line numbers\n\n   Lines containing 1 or more 4 digit cpu serial numbers.  The\n      serial numbers must begin in column 1 and be delimited\n      by semicolons (';').  The last entry on a line must be\n      followed by a semicolon.  e.g. -\n\n         2FA0;\n         301E;2048;\n\n   Comments, if present, are lines with an asterisk ('*') in column 1.\n\nInput: lmicdsn - the name of the dataset to be read\n       lmicmem - the member name (or null if lmicdsn is PS)\n       Rexx array 'CPU.'\n       variable 'cc'\n\nOutput: if all is well, CPU. is populated with the information\n        and 'cc' is retuned as 0.\n        else 'cc' returns non zero and the CPU. array is in an\n        indeterminate state.\n\n        The file is always closed/freed\n\n*/\nLoadCPUList: procedure expose lmicdsn lmicmem cc cpu.\n\n\"LMINIT DATAID(ID) DATASET(\" lmicdsn \") ENQ(SHR)\"\ncc = RC\nif cc > 0 then do\n   ZEDSMSG = \"LMINIT Error\"\n   ZEDLMSG = \"LMINIT failed for\" lmicdsn || \", RC =\" cc\n   \"SETMSG MSG(ISRZ001)\"\n   return\nend\n\n\"LMOPEN DATAID(\" id \") OPTION(INPUT) LRECL(LRECL)\"\ncc = RC\nif cc > 0 then do\n   ZEDSMSG = \"LMOPEN Error\"\n   ZEDLMSG = \"LMOPEN failed for\" lmicdsn || \", RC =\" cc\n   \"SETMSG MSG(ISRZ001)\"\n   \"LMFREE DATAID(\" id \")\"\n   return\nend\n\nif lmicmem <> \"\" then do\n   \"LMMFIND DATAID(\" id \") MEMBER(\" lmicmem \")\"\n   cc = RC\n   if cc > 0 then do\n      ZEDSMSG = \"LMMFIND Error\"\n      ZEDLMSG = \"LMMFIND failed for\" lmicmem || \", RC =\" cc\n      \"SETMSG MSG(ISRZ001)\"\n      \"LMCLOSE DATAID(\" id \")\"\n      \"LMFREE DATAID(\" id \")\"\n      return\n   end\nend\n\ni = cpu.0\nRECORD = \"\"\ndo while cc = 0\n   \"LMGET DATAID(\"id\") MODE(INVAR) DATALOC(RECORD) DATALEN(JUNK) \",\n          \"MAXLEN(\"LRECL\")\"\n   cc = RC\n   if cc = 0 then do\n      record = strip(record)\n      if substr(record,1,1) ^= \"*\" then ,\n         do while record <> \"\"\n            parse var record cpun \";\" record\n            i = i + 1\n            cpu.i = right(cpun,4,\"0\")\n         end\n   end\nend\n\ncpu.0 = i\nif cc > 8 then do\n   ZEDSMSG = \"LMGET Error\"\n   ZEDLMSG = \"LMGET failed for\" lmicdsn || \", RC =\" cc\n   \"SETMSG MSG(ISRZ001)\"\nend\nelse cc = 0\n\"LMCLOSE DATAID(\" id \")\"\n\"LMFREE DATAID(\" id \")\"\nreturn\n\n/*\nSubroutine OutputLicense\n\nOutput the control statements to license a product/feature\n\nInput: variables set by caller\n          pcode    - product code\n          pname    - product name\n          fcode    - feature code (\"\") for a product\n          fname    - feature name\n          password - password for this license\n          expires  - expiration date for this license\n          license  - license type code\n          data     - license data\n       variable 'cc'\n       variable 'id'\n\nOutput: control statements to the output file\n        'cc' returns as 0 if all is well\n        else 'cc' returns non zero and the file is closed/freed\n\n*/\nOutputLicense:\nSTMT = substr(\"LICENSE( -\",1,80)\ncall PutOne\nif cc > 0 then return\n\nSTMT = substr(\"        PRODUCT( -\",1,80)\ncall PutOne\nif cc > 0 then return\n\nSTMT = substr(\"                ID(\" pcode \") -\",1,80)\ncall PutOne\nif cc > 0 then return\n\nif fcode = \"\" then do\n   STMT = substr(\"                NAME('\"|| pname ||\"') -\",1,80)\n   call PutOne\n   if cc > 0 then return\nend\n\nSTMT = substr(\"               ) -\",1,80)\ncall PutOne\nif cc > 0 then return\n\nif fcode <> \"\" then do\n   STMT = substr(\"        FEATURE( -\",1,80)\n   call PutOne\n   if cc > 0 then return\n\n   STMT = substr(\"                ID(\" fcode \") -\",1,80)\n   call PutOne\n   if cc > 0 then return\n\n   STMT = substr(\"                NAME('\"|| fname ||\"') -\",1,80)\n   call PutOne\n   if cc > 0 then return\n\n   STMT = substr(\"               ) -\",1,80)\n   call PutOne\n   if cc > 0 then return\nend\n\nSTMT = substr(\"        PASSWORD(\" password \") -\",1,80)\ncall PutOne\nif cc > 0 then return\n\nSTMT = substr(\"        EXPIRES(\" expires \") -\",1,80)\ncall PutOne\nif cc > 0 then return\n\nSTMT = substr(\"        GRACEDAYS(\" grace \") -\",1,80)\ncall PutOne\nif cc > 0 then return\n\nselect\n   when license = \"C\" then license = \"CPU\"\n   when license = \"M\" then license = \"MSU\"\n   when license = \"S\" then license = \"SEATS\"\n   when license = \"U\" then license = \"UNRESTRICTED\"\n   otherwise nop\nend\n\nif license <> \"UNRESTRICTED\" then do\n   STMT = substr(\"        TYPE(\" license \"( -\",1,80)\n   call PutOne\n   if cc > 0 then return\n\n   text = strip(data)\n   do while text <> \"\"\n      parse var text item \" \" text\n      STMT = substr(\"             \" item \" -\",1,80)\n      call PutOne\n      if cc > 0 then return\n   end\n\n   STMT = substr(\"                       ) -\",1,80)\n   call PutOne\n   if cc > 0 then return\n\n   STMT = substr(\"            ) -\",1,80)\n   call PutOne\n   if cc > 0 then return\nend\nelse do\n   STMT = substr(\"        TYPE(\" license \") -\",1,80)\n   call PutOne\n   if cc > 0 then return\nend\n\nSTMT = substr(\"       )\",1,80)\ncall PutOne\nreturn\n\n/*\nSubroutine ProcessMain\n\nTake action based on the user's input to the main panel\n\nInput: LMROPT, variable acquired from the panel\nOutput: none (to caller)\n\n*/\nProcessMain:\nselect\n   when lmropt = 1 then call GetCPUList\n   when lmropt = 2 then call GetLicenseInfo\n   when lmropt = 3 then call BuildControlStatements\n   otherwise do\n      if lmropt <> \"\" then do\n         ZEDSMSG = \"Invalid Option\"\n         ZEDLMSG = \"'\" || lmropt ||\"' is not a valid option\"\n         \"SETMSG MSG(ISRZ001)\"\n      end\n   end\nend\nreturn\n/*\nSubroutine PutOne\n\nOutput a control statement\n\nInput: 'STMT' - variable containing the control statement\n       'ID' - the LM services dataid returned by LMINIT\nOutput: if record is written, variable cc is 0\n        if not, variable cc is > 0 and the file is closed and freed\n\n*/\nPutOne:\n\"LMPUT DATAID(\" id \") MODE(INVAR) DATALOC(STMT) DATALEN(80)\"\ncc = RC\nif cc > 0 then do\n   ZEDSMSG = \"LMPUT Error\"\n   ZEDLMSG = \"LMPUT failed for\" lmrodsn || \", RC =\" cc\n   \"SETMSG MSG(ISRZ001)\"\n   \"LMFREE DATAID(\" id \")\"\n   return\nend\nreturn\n/*\nSubroutine UpdateProductTable\n\nUpdate an entry in the ISPF product table\n\nInput: variables from routine GetLicenseInfo\nOutput: updated table variables\n\n*/\nUpdateProductTable:\nlmtpswd = lmrpswd\nlmtexpd = lmrexpd\nlmtgrace = lmrgrace\nlmtltype = lmrtype\nlmtldata = strip(data)\nreturn\n./ ADD NAME=LMRKSMP  0101-01016-01016-1428-00163-00163-00000-RACFCLS\n /* REXX */\n /*------------------------------------------------------------------*/\n /* DISPLAY PANEL \"LMRKPNL\" FOR USER TO FILL IN VALUES.  PANEL       */\n /* WILL STORE SESSION VARIABLES USED BY EDIT MACROS.                */\n /*------------------------------------------------------------------*/\n /*                                                                  */\n /*  THIS EXEC SUPPORTS MULTIPLE RERUNS BY FIRST COPYING ONE OR      */\n /*  MORE \"GHOST\" MEMBERS, AND THEN EDITING THE ORIGINAL VARIABLE    */\n /*  STRINGS WITH THE CURRENT SESSION VARIABLE VALUES. THE FOLLOWING */\n /*  TABLE IDENTIFIES EACH MEMBER CHANGED, ALONG WITH THE GHOST      */\n /*  MEMBER(S) AND EDIT MACRO USED TO EFFECT THE CHANGE. IN THE      */\n /*  FOLLOWING TABLE, \"***\" REPRESENTS A PRODUCT-ID, AND \"...\"       */\n /*  INDICATES MULTIPLE OCCURRENCES.                                 */\n /*                                                                  */\n /* MEMBER CHANGED    GHOST MEMBER(S)           EDIT MACRO           */\n /* --------------    ------------              ----------           */\n /* CSIALLOC          TEMPCSI                   LMRKMAC0             */\n /* SMPLMRK           TEMPSMP                   LMRKMAC              */\n /* PDSALLOC          TEMPPDS,#PDS***...        LMRKMAC1             */\n /* UCLIN             TEMPUCL,#UCL***...        LMRKMAC2             */\n /* RECEIVE           REC,REC***...             LMRKMAC5             */\n /* APPLY             APP,APP***...             LMRKMAC6             */\n /* ACCEPT            ACC,ACC***...             LMRKMAC7             */\n /* CBFALLOC          TEMPCBA                   LMRKMAC3             */\n /* CBFPOP            TEMPCBF,#CBF***...        LMRKMAC4             */\n /* CBFUPD            TEMPCBU,#CBU***...        LMRKMAC8             */\n /* ASADDLIC          TEMPASAD                  LMRKMAC              */\n /* ASALLOC           TEMPASAL                  LMRKMAC              */\n /* ASDELLIC          TEMPASDL                  LMRKMAC              */\n /* ASINIT            TEMPASIN                  LMRKMAC              */\n /*------------------------------------------------------------------*/\nARG LIBNAME\nIF ARG() > 0 THEN DO\n    ADDRESS TSO \"ALTLIB ACTIVATE APPLICATION(EXEC) DSNAME('\"LIBNAME\"')\"\n    IF RC > 0 THEN DO\n        SAY \"ALTLIB ACTIVATE FAILED, RC=\"RC\n        SAY ZERRSM\n        SAY ZERRLM\n        SIGNAL ALLDONE\n        END\n    ADDRESS ISPEXEC \"LIBDEF ISPPLIB DATASET ID('\"LIBNAME\"')\"\n    IF RC > 0 THEN DO\n        SAY \"LIBDEF SET FAILED, RC=\"RC\n        SAY ZERRSM\n        SAY ZERRLM\n        SIGNAL ALLDONE\n        END\n    END\n /*------------------------------------------------------------------*/\nADDRESS ISPEXEC \"DISPLAY PANEL(LMRKPNL)\"\nIF RC > 0 THEN SIGNAL ALLDONE\nMSGSTAT = MSG('OFF')\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(CSIALLOC)' \"\n\"ALLOC DA('\"LSCIDSN\"(CSIALLOC)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(CSIALLOC)')\n                 MACRO(LMRKMAC0)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(SMPLMRK)' \"\n\"ALLOC DA('\"LSCIDSN\"(SMPLMRK)') F(MYJCL) SHR\"\nLSCGHOST = 'TEMPSMP'\nADDRESS ISPEXEC \"VPUT (LSCGHOST)\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(SMPLMRK)')\n                 MACRO(LMRKMAC)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(PDSALLOC)' \"\n\"ALLOC DA('\"LSCIDSN\"(PDSALLOC)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(PDSALLOC)')\n                 MACRO(LMRKMAC1)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(UCLIN)' \"\n\"ALLOC DA('\"LSCIDSN\"(UCLIN)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(UCLIN)')\n                 MACRO(LMRKMAC2)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(RECEIVE)' \"\n\"ALLOC DA('\"LSCIDSN\"(RECEIVE)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(RECEIVE)')\n                 MACRO(LMRKMAC5)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(APPLY)' \"\n\"ALLOC DA('\"LSCIDSN\"(APPLY)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(APPLY)')\n                 MACRO(LMRKMAC6)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(ACCEPT)' \"\n\"ALLOC DA('\"LSCIDSN\"(ACCEPT)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(ACCEPT)')\n                 MACRO(LMRKMAC7)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(CBFALLOC)' \"\n\"ALLOC DA('\"LSCIDSN\"(CBFALLOC)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(CBFALLOC)')\n                 MACRO(LMRKMAC3)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(CBFPOP)' \"\n\"ALLOC DA('\"LSCIDSN\"(CBFPOP)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(CBFPOP)')\n                 MACRO(LMRKMAC4)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(CBFUPD)' \"\n\"ALLOC DA('\"LSCIDSN\"(CBFUPD)') F(MYJCL) SHR\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(CBFUPD)')\n                 MACRO(LMRKMAC8)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(ASADDLIC)'\"\n\"ALLOC DA('\"LSCIDSN\"(ASADDLIC)') F(MYJCL) SHR\"\nLSCGHOST = 'TEMPASAD'\nADDRESS ISPEXEC \"VPUT (LSCGHOST)\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(ASADDLIC)')\n                 MACRO(LMRKMAC)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(ASALLOC)'\"\n\"ALLOC DA('\"LSCIDSN\"(ASALLOC)') F(MYJCL) SHR\"\nLSCGHOST = 'TEMPASAL'\nADDRESS ISPEXEC \"VPUT (LSCGHOST)\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(ASALLOC)')\n                 MACRO(LMRKMAC)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(ASDELLIC)'\"\n\"ALLOC DA('\"LSCIDSN\"(ASDELLIC)') F(MYJCL) SHR\"\nLSCGHOST = 'TEMPASDL'\nADDRESS ISPEXEC \"VPUT (LSCGHOST)\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(ASDELLIC)')\n                 MACRO(LMRKMAC)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\n\"DELETE '\"LSCIDSN\"(ASINIT)'\"\n\"ALLOC DA('\"LSCIDSN\"(ASINIT)') F(MYJCL) SHR\"\nLSCGHOST = 'TEMPASIN'\nADDRESS ISPEXEC \"VPUT (LSCGHOST)\"\nADDRESS ISPEXEC \"EDIT DATASET('\"LSCIDSN\"(ASINIT)')\n                 MACRO(LMRKMAC)\"\n\"FREE F(MYJCL)\"\n /*------------------------------------------------------------------*/\nALLDONE:\nIF ARG() > 0 THEN DO\n    ADDRESS TSO \"ALTLIB RESET\"\n    IF RC > 0 THEN DO\n        SAY \"ALTLIB RESET FAILED, RC=\"RC\n        SAY ZERRSM\n        SAY ZERRLM\n        END\n    ADDRESS ISPEXEC \"LIBDEF ISPPLIB DATASET ID('\"LIBNAME\"')\"\n    IF RC > 0 THEN DO\n        SAY \"LIBDEF CANCEL FAILED, RC=\"RC\n        SAY ZERRSM\n        SAY ZERRLM\n        END\n    END\n EXIT\n./ ADD NAME=LSTALL   0101-01016-01016-1428-00160-00160-00000-RACFCLS\n/* REXX */\n/* **************************************************************** */\n/* ** LIST RACF USERID BY GIVING FORCENUMBER                      ** */\n/* **************************************************************** */\n\"PROFILE NOPREFIX\"\n\n\"ALLOC DA('MAINT.RACF.LIST') FI(INPUT) SHR\"\n\"EXECIO * DISKR INPUT (FINIS STEM IN.\"\n\"FREE FI(INPUT)\"\n\nJJJ = 000\nDD = 00\nYY = 00\nMM = 00\nTEL = 00\n\nDO WHILE TEL < IN.0\n TEL = TEL + 1\n  USR2 = SUBSTR(IN.TEL,6,2)\n  USER = SUBSTR(IN.TEL,6,8)\n  NAME = SUBSTR(IN.TEL,19,20)\n  TEL = TEL + 1\n  ACT = SUBSTR(IN.TEL,13,7)\n  TEL = TEL + 1\n  LAST_ACCESS_DATE = SUBSTR(IN.TEL,14,6)\n  YY = SUBSTR(IN.TEL,14,2)\n  JJJ = SUBSTR(IN.TEL,17,3)\n  LAST_ACCESS_TIME = SUBSTR(IN.TEL,21,8)\n  IF DATATYPE(JJJ,'N') = 1 THEN\n   CALL JULIAN\n  IF USR2 = \"PE\" THEN\n  DO\n   SAY USER \"-\" NAME\n   IF ACT <> \"REVOKED\" THEN\n    SAY \"STATUS = ACTIVE\"\n   ELSE\n    SAY \"STATUS = REVOKED\"\n\n  IF DATATYPE(JJJ,'N') = 1 THEN\n   DO\n    SAY \"LAST ACCESS DATE = \" YY || \"/\" || MM || \"/\" || DD\n    SAY \"LAST ACCESS TIME = \" LAST_ACCESS_TIME\n   SAY      \" \"\n   END\n   ELSE\n   DO\n     SAY \"NEVER USED\"\n     SAY \" \"\n   END\n END\nEND\nEXIT\n\nJULIAN:\n  IF YY // 4 <> 0;\n  THEN;\n   SELECT;\n   WHEN (JJJ <= 31)  THEN DO\n                             MM = \"01\"\n                             DD=JJJ\n                          END\n   WHEN (JJJ <= 59)  THEN DO\n                             MM = \"02\"\n                             DD=JJJ-31\n                          END\n   WHEN (JJJ <= 90)  THEN DO\n                             MM = \"03\"\n                             DD=JJJ-59\n                          END\n   WHEN (JJJ <= 120) THEN DO\n                             MM = \"04\"\n                             DD=JJJ-90\n                          END\n   WHEN (JJJ <= 151) THEN DO\n                             MM = \"05\"\n                             DD=JJJ-120\n                          END\n   WHEN (JJJ <= 181) THEN DO\n                             MM = \"06\"\n                             DD=JJJ-151\n                          END\n   WHEN (JJJ <= 212) THEN DO\n                             MM = \"07\"\n                             DD=JJJ-181\n                          END\n   WHEN (JJJ <= 243) THEN DO\n                             MM = \"08\"\n                             DD=JJJ-212\n                          END\n   WHEN (JJJ <= 273) THEN DO\n                             MM = \"09\"\n                             DD=JJJ-243\n                          END\n   WHEN (JJJ <= 304) THEN DO\n                             MM = \"10\"\n                             DD=JJJ-273\n                          END\n   WHEN (JJJ <= 334) THEN DO\n                             MM = \"11\"\n                             DD=JJJ-304\n                          END\n   WHEN (JJJ <= 365) THEN DO\n                             MM = \"12\"\n                             DD=JJJ-334\n                          END\n   OTHERWISE NOP\n   END\n  ELSE\n   SELECT\n   WHEN (JJJ <= 31)  THEN DO\n                             MM = \"01\"\n                             DD=JJJ\n                          END\n   WHEN (JJJ <= 60)  THEN DO\n                             MM = \"02\"\n                             DD=JJJ-31\n                          END\n   WHEN (JJJ <= 91)  THEN DO\n                             MM = \"03\"\n                             DD=JJJ-60\n                          END\n   WHEN (JJJ <= 121) THEN DO\n                             MM = \"04\"\n                             DD=JJJ-90\n                          END\n   WHEN (JJJ <= 152) THEN DO\n                             MM = \"05\"\n                             DD=JJJ-120\n                          END\n   WHEN (JJJ <= 182) THEN DO\n                             MM = \"06\"\n                             DD=JJJ-151\n                          END\n   WHEN (JJJ <= 213) THEN DO\n                             MM = \"07\"\n                             DD=JJJ-181\n                          END\n   WHEN (JJJ <= 244) THEN DO\n                             MM = \"08\"\n                             DD=JJJ-212\n                          END\n   WHEN (JJJ <= 274) THEN DO\n                             MM = \"09\"\n                             DD=JJJ-243\n                          END\n   WHEN (JJJ <= 305) THEN DO\n                             MM = \"10\"\n                             DD=JJJ-273\n                          END\n   WHEN (JJJ <= 335) THEN DO\n                             MM = \"11\"\n                             DD=JJJ-304\n                          END\n   WHEN (JJJ <= 336) THEN DO\n                             MM = \"12\"\n                             DD=JJJ-334\n                          END\n   OTHERWISE NOP\n   END\n  RETURN\n./ ADD NAME=LSTFORCE 0101-01016-01016-1428-00159-00159-00000-RACFCLS\n/* REXX */\n/* **************************************************************** */\n/* ** LIST RACF USERID BY GIVING FORCENUMBER                      ** */\n/* **************************************************************** */\nARG NUM\nSAY \"SEARCHING ...\"\n\"PROFILE NOPREFIX\"\n\n\"ALLOC DA('MAINT.RACF.LIST') FI(INPUT) SHR\"\n\"EXECIO * DISKR INPUT (FINIS STEM IN.\"\n\"FREE FI(INPUT)\"\n\nJJJ = 000\nDD = 00\nYY = 00\nMM = 00\nTEL = 00\n\nDO WHILE TEL < IN.0\n TEL = TEL + 1\n PS = POS(NUM,IN.TEL)\n IF PS <> 0 THEN\n DO\n  USER = SUBSTR(IN.TEL,6,8)\n  NAME = SUBSTR(IN.TEL,19,20)\n  TEL = TEL + 2\n  LAST_ACCESS_DATE = SUBSTR(IN.TEL,14,6)\n  YY = SUBSTR(IN.TEL,14,2)\n  JJJ = SUBSTR(IN.TEL,17,3)\n  LAST_ACCESS_TIME = SUBSTR(IN.TEL,21,8)\n  IF LAST_ACCESS_DATE ^= \"UNKNOW\" THEN DO\n   CALL JULIAN\n   SAY      \" \"\n   SAY      \" \"\n   SAY USER \"-\" NAME\n   SAY \"LAST ACCESS DATE = \" YY || \"/\" || MM || \"/\" || DD\n   SAY \"LAST ACCESS TIME = \" LAST_ACCESS_TIME\n   END\n  ELSE\n  IF LAST_ACCESS_DATE = \"UNKNOW\" THEN DO\n   SAY      \" \"\n   SAY      \" \"\n   SAY USER \"-\" NAME\n   SAY \"LAST ACCESS DATE & TIME = NEVER BEEN USED\"\n  END\n  EXIT\n EXIT\n END\nEND\nSAY NUM \"NOT FOUND\"\nEXIT\n\nJULIAN:\n  IF YY // 4 <> 0;\n  THEN;\n   SELECT;\n   WHEN (JJJ <= 31)  THEN DO\n                             MM = \"01\"\n                             DD=JJJ\n                          END\n   WHEN (JJJ <= 59)  THEN DO\n                             MM = \"02\"\n                             DD=JJJ-31\n                          END\n   WHEN (JJJ <= 90)  THEN DO\n                             MM = \"03\"\n                             DD=JJJ-59\n                          END\n   WHEN (JJJ <= 120) THEN DO\n                             MM = \"04\"\n                             DD=JJJ-90\n                          END\n   WHEN (JJJ <= 151) THEN DO\n                             MM = \"05\"\n                             DD=JJJ-120\n                          END\n   WHEN (JJJ <= 181) THEN DO\n                             MM = \"06\"\n                             DD=JJJ-151\n                          END\n   WHEN (JJJ <= 212) THEN DO\n                             MM = \"07\"\n                             DD=JJJ-181\n                          END\n   WHEN (JJJ <= 243) THEN DO\n                             MM = \"08\"\n                             DD=JJJ-212\n                          END\n   WHEN (JJJ <= 273) THEN DO\n                             MM = \"09\"\n                             DD=JJJ-243\n                          END\n   WHEN (JJJ <= 304) THEN DO\n                             MM = \"10\"\n                             DD=JJJ-273\n                          END\n   WHEN (JJJ <= 334) THEN DO\n                             MM = \"11\"\n                             DD=JJJ-304\n                          END\n   WHEN (JJJ <= 365) THEN DO\n                             MM = \"12\"\n                             DD=JJJ-334\n                          END\n   OTHERWISE NOP\n   END\n  ELSE\n   SELECT\n   WHEN (JJJ <= 31)  THEN DO\n                             MM = \"01\"\n                             DD=JJJ\n                          END\n   WHEN (JJJ <= 60)  THEN DO\n                             MM = \"02\"\n                             DD=JJJ-31\n                          END\n   WHEN (JJJ <= 91)  THEN DO\n                             MM = \"03\"\n                             DD=JJJ-60\n                          END\n   WHEN (JJJ <= 121) THEN DO\n                             MM = \"04\"\n                             DD=JJJ-90\n                          END\n   WHEN (JJJ <= 152) THEN DO\n                             MM = \"05\"\n                             DD=JJJ-120\n                          END\n   WHEN (JJJ <= 182) THEN DO\n                             MM = \"06\"\n                             DD=JJJ-151\n                          END\n   WHEN (JJJ <= 213) THEN DO\n                             MM = \"07\"\n                             DD=JJJ-181\n                          END\n   WHEN (JJJ <= 244) THEN DO\n                             MM = \"08\"\n                             DD=JJJ-212\n                          END\n   WHEN (JJJ <= 274) THEN DO\n                             MM = \"09\"\n                             DD=JJJ-243\n                          END\n   WHEN (JJJ <= 305) THEN DO\n                             MM = \"10\"\n                             DD=JJJ-273\n                          END\n   WHEN (JJJ <= 335) THEN DO\n                             MM = \"11\"\n                             DD=JJJ-304\n                          END\n   WHEN (JJJ <= 336) THEN DO\n                             MM = \"12\"\n                             DD=JJJ-334\n                          END\n   OTHERWISE NOP\n   END\n  RETURN\n./ ADD NAME=NCPUTIL  0101-01016-01016-1428-00062-00062-00000-RACFCLS\n/* REXX */\n/*************************************/\n/* PROCEDURE TO CUSTOMIZE NCP MEMBER */\n/* IN VTAMLIST                       */\n/*************************************/\nSAY \"BEGINNING ...\"\nTRACE NONE\n\"PROFILE NOPREFIX\"\nARG INPUT\nPARSE VALUE INPUT WITH MEMBER ' ' DUMMY\nA1 = '\"ALLOC DA(SYS2.VTAMLST('MEMBER')) F(INCP) SHR REUSE\"'\nINTERPRET A1\n\"EXECIO * DISKR INCP (FINIS STEM INPUT.\"\n\"FREE FI(INCP)\"\nA2 = '\"ALLOC DA(SYS2.VTAMLST('MEMBER')) F(ONCP) SHR REUSE\"'\nINTERPRET A2\n\nTEL = 0\nCALL READ\nDO WHILE TEL <= INPUT.0\n\n CALL WRITE\n CALL READ\nEND\n\nCALL KLAAR\n/**********/\n/***  READ */\n/**********/\nREAD:\nTEL = TEL + 1\nTEL2 = TEL + 1\nDEST = SUBSTR(INPUT.TEL,1,71)\nLINE = SUBSTR(INPUT.TEL,1,72)\nLOCA = SUBSTR(INPUT.TEL,13,7)\nTTST = SUBSTR(INPUT.TEL,1,3)\nX = SUBSTR(INPUT.TEL,72,1)\nPARSE VALUE DEST WITH LLL1 '                            ' DUMMY\nDEST2 = SUBSTR(INPUT.TEL2,1,72)\nPARSE VALUE DEST2 WITH DUMMY '               ' LLL2 '          ' DUMMY\nIF (X = 'X') & (LOCA = \"LOCADDR\") & (TTST = \"T00\") THEN\n DO\n  OUT. = LLL1 || LLL2\n  TEL = TEL + 1\n END\n ELSE OUT. = LINE\n\nRETURN\n\n/***********/\n/*** WRITE**/\n/*********/\nWRITE:\n\n \"EXECIO 1 DISKW ONCP (STEM OUT.\"\nRETURN\n\nKLAAR:\n\"EXECIO 0 DISKW ONCP (FINIS\"\n\"FREE FI(ONCP)\"\nSAY \"ENDED \"\nEXIT\n./ ADD NAME=OFFBRWSE 0101-01016-01016-1428-00004-00004-00000-RACFCLS\n/*    REXX   */\nX1='ISPEXEC BROWSE DATASET('OPS.JES2.LOG')'\nA='\"'X1'\"'\nINTERPRET A\n./ ADD NAME=OFFLOAD1 0101-01016-01016-1428-00099-00099-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09',\n         '274/10305/11335/12366'\nARG INPUT\nPARSE VALUE INPUT WITH DAY\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=J1-32767          \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.JOB.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.OFFJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB OFFLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=OFFLOAD2 0101-01016-01016-1428-00101-00101-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\nMAANDTABEL = '\"/0131 /0260 /0391 /04121/05152/06182/07213/08244/09\",\n          \"274/10305/11335/12366\"'\nARG INPUT\nPARSE VALUE INPUT WITH DAY\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=S1-32767          \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.STC.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.OFFJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY STC OFFLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY STC OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=OFFLOAD3 0101-01016-01016-1428-00102-00102-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\n\nARG INPUT\nPARSE VALUE INPUT WITH JNUM ':' JNAM\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=J\" || JNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.JOB.J\"JNUM\".D\"JDT\"\"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.OFFJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB OFFLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=OFFLOAD4 0101-01016-01016-1428-00102-00102-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\n\nARG INPUT\nPARSE VALUE INPUT WITH SNUM ':' SNAM\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=S\" || SNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.STC.S\"SNUM\".D\"JDT\"\"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.OFFJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(SNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"STC=\" || S4 || \" SPECIFIC STC OFFLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(SNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"STC=\" || S4 || \" SPECIFIC STC OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=OFFLOG   0101-01016-01016-1428-00030-00030-00000-RACFCLS\n /* REXX */\n\n \"ALLOC DA(OPS.JES2.LOG) F(OOPS) MOD\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE(\"O\")\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n S5 = JUSTIFY(COMM,20,' ')\n OUT.=\"***********************************************************************\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\"+++++++++++++++++ THIS IS A SPECIFIC JOB OFFLOAD ++++++++++++++++++++++\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\":     DATE AND TIME      : USERID   : JOBNUMBER :       COMMENT       :\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\"-----------------------------------------------------------------------\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\":\" S1 \"AT \" S2 \" :\" S3 \":\" J\"\"S4   \"  :\" S5\":\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\nEXIT\n./ ADD NAME=OFFSPES  0101-01016-01016-1428-00121-00121-00000-RACFCLS\n/* REXX OM SPESIFIEKE OFFLOADS TE DOEN */\n\nARG INPUT\nPARSE VALUE INPUT WITH JNUM ':' COMM\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nD = DATE(\"STANDARD\")\nJDT = SUBSTR(D,3,6)\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=J\" || JNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=DLY.PRDB.OFFLOAD.JOB.J\" || JNUM || \".D\" || JDT || \"\"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n /* SUB = '\"SUB ' || UID || '.OFFJCL\"' */\n /* INTERPRET SUB */\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME(\"C\")\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n S5 = JUSTIFY(COMM,20,' ')\n OUT.=\" \"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n OUT.=\"+++++++++++++++++ THIS IS A SPESIFIC JOB OFFLOAD ++++++++++++++++++++++\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n OUT.=\":     DATE AND TIME      : USERID   : JOBNUMBER :       COMMENT       :\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n OUT.=\"-----------------------------------------------------------------------\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n OUT.=\":\" S1 \"AT\" S2 \" :\" S3 \":\" J\"\"S4   \"  :\" S5\":\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n OUT.=\"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME(\"C\")\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n S5 = JUSTIFY(COMM,20,' ')\n OUT.=\" \"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\"+++++++++++++++++ THIS IS A SPESIFIC JOB OFFLOAD ++++++++++++++++++++++\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\":     DATE AND TIME      : USERID   : JOBNUMBER :       COMMENT       :\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\"-----------------------------------------------------------------------\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\":\" S1 \"AT\" S2 \" :\" S3 \":\" J\"\"S4   \"  :\" S5\":\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n OUT.=\"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\nEXIT\n./ ADD NAME=OFF1     0101-01016-01016-1428-00100-00100-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09',\n         '274/10305/11335/12366'\nARG INPUT\nPARSE VALUE INPUT WITH DAY\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nFDP = '&SYSNAME.'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=J1-32767          \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\" || FDP || \".OFFLOAD.JOB.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.OFFJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB OFFLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=OFF2     0101-01016-01016-1428-00102-00102-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\nMAANDTABEL = '\"/0131 /0260 /0391 /04121/05152/06182/07213/08244/09\",\n          \"274/10305/11335/12366\"'\nARG INPUT\nPARSE VALUE INPUT WITH DAY\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nFDP = '&SYSNAME.'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=S1-32767          \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\" || FDP || \".OFFLOAD.STC.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.OFFJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY STC OFFLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY STC OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=OFF3     0101-01016-01016-1428-00103-00103-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\n\nARG INPUT\nPARSE VALUE INPUT WITH JNUM ':' JNAM\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nFDP = '&SYSNAME.'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=J\" || JNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\"FDP\".OFFLOAD.JOB.J\"JNUM\".D\"JDT\"\"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.OFFJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB OFFLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=OFF4     0101-01016-01016-1428-00103-00103-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\n\nARG INPUT\nPARSE VALUE INPUT WITH SNUM\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.OFFJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nFDP = '&SYSNAME.'\nDEL = '\"DEL ' || UID || '.OFFJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.ST,RANGE=S\" || SNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\"FDP\".OFFLOAD.STC.S\"SNUM\".D\"JDT\"\"\nCALL WRITE\nOUT. = \"  $SOFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=TRANSMIT          \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.OFFJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(SNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"STC=\" || S4 || \" SPECIFIC STC OFFLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(SNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"STC=\" || S4 || \" SPECIFIC STC OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=ONLOAD1  0101-01016-01016-1428-00105-00105-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\nARG INPUT INP2\nPARSE VALUE INPUT WITH DAY\nPARSE VALUE INP2  WITH JOBN\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nIF JOBN = \"\" THEN\n  OUT. = \"  $TOFF1.SR,RANGE=J1-32767          \"\nELSE\n  OUT. = \"  $TOFF1.SR,RANGE=J\"JOBN\"           \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.JOB.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=ONLOAD2  0101-01016-01016-1428-00105-00105-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\nARG INPUT INP2\nPARSE VALUE INPUT WITH DAY\nPARSE VALUE INP2  WITH JOBN\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nIF JOBN = \"\" THEN\n  OUT. = \"  $TOFF1.SR,RANGE=S1-32767          \"\nELSE\n  OUT. = \"  $TOFF1.SR,RANGE=S\"JOBN\"           \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.STC.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY STC ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY STC ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=ONLOAD3  0101-01016-01016-1428-00137-00137-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\n\nGGG.01 = 00\nGGG.02 = 31\nGGG.03 = 59\nGGG.04 = 90\nGGG.05 = 120\nGGG.06 = 151\nGGG.07 = 181\nGGG.08 = 212\nGGG.09 = 243\nGGG.10 = 273\nGGG.11 = 304\nGGG.12 = 334\n\n\nARG INPUT\n\nPARSE VALUE INPUT WITH JNUM ':' XX\nYY = SUBSTR(XX,1,2)\nMM = SUBSTR(XX,3,2)\nDD = SUBSTR(XX,5,2)\n\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18400) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nDATE = YY || MM || DD\n\nYEAR  = SUBSTR(DATE,1,2)\nMONTH = SUBSTR(DATE,3,2)\nDAY   = SUBSTR(DATE,5,2)\n\n\nJDATE = GGG.MM + DAY\n\n\nIF ((YY // 4 = 0) & (MM >= 2)) THEN JDATE = JDATE + 1\n\n\nIF LENGTH(JDATE) < 3 THEN JDATE = '0' || JDATE\n\nIF LENGTH(JDATE) < 3 THEN JDATE = '0' || JDATE\n\nJDT = YEAR||JDATE\n\nSAY JDT\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.JT,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.SR,RANGE=J\" || JNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.JOB.J\"JNUM\".D\"JDT\"\"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\nINTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nEXIT\n./ ADD NAME=ONLOAD4  0101-01016-01016-1428-00136-00136-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\n\nMMM.01 = 01\nMMM.02 = 31\nMMM.03 = 59\nMMM.04 = 90\nMMM.05 = 120\nMMM.06 = 151\nMMM.07 = 181\nMMM.08 = 212\nMMM.09 = 243\nMMM.10 = 273\nMMM.11 = 304\nMMM.12 = 334\n\n\n\nARG INPUT\nPARSE VALUE INPUT WITH SNUM ':' DD ':' MM ':' YY\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nDATE = DD\"/\" || MM\"/\" || YY\n\nDAY   = SUBSTR(DATE,1,2)\nMONTH = SUBSTR(DATE,3,3)\nMM    = SUBSTR(DATE,4,2)\nYEAR  = SUBSTR(DATE,7,2)\n\n\nIF (YEAR // 4 = 0) & (MM > 2) THEN\n   JDATE =  ((MMM.MM + 1) + DAY)\nELSE\n   JDATE =  MMM.MM + DAY\nIF LENGTH(JDATE) < 3 THEN JDATE = '0' || JDATE\n\nIF MM=01 THEN\nDO\n IF LENGTH(DAY) < 3 THEN DAY = '0' || DAY\n   JDT = YEAR||DAY\nEND\nELSE\n   JDT = YEAR||JDATE\n\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.SR,RANGE=S\" || SNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.STC.S\"SNUM\".D\"JDT\"\"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(SNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"STC=\" || S4 || \" SPECIFIC STC ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(SNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"STC=\" || S4 || \" SPECIFIC STC ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=ONLOAD5  0101-01016-01016-1428-00105-00105-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\nARG INPUT INP2\nPARSE VALUE INPUT WITH DAY\nPARSE VALUE INP2  WITH JOBN\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.JT                         \"\nCALL WRITE\nOUT. = \"  $POFF1.JR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nIF JOBN = \"\" THEN\n  OUT. = \"  $TOFF1.JR,RANGE=J1-32767          \"\nELSE\n  OUT. = \"  $TOFF1.JR,RANGE=J\"JOBN\"           \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.OFFLOAD.JOB.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.JR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=ONSPES   0101-01016-01016-1428-00133-00133-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\n\n\nMMM.01 = 01\nMMM.02 = 31\nMMM.03 = 59\nMMM.04 = 90\nMMM.05 = 120\nMMM.06 = 151\nMMM.07 = 181\nMMM.08 = 212\nMMM.09 = 243\nMMM.10 = 273\nMMM.11 = 304\nMMM.12 = 334\n\n\n\nARG INPUT\nPARSE VALUE INPUT WITH JNUM ':' DD ':' MM ':' YY\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nDATE = DD\"/\" || MM\"/\" || YY\n\nDAY   = SUBSTR(DATE,1,2)\nMONTH = SUBSTR(DATE,3,3)\nMM    = SUBSTR(DATE,4,2)\nYEAR  = SUBSTR(DATE,7,2)\n\n\nIF (YEAR//4 /= 0) & (MM > 2) THEN\n   JDATE =  MMM.MM - 1 + DAY\nELSE\n   JDATE =  MMM.MM + DAY\nIF LENGTH(JDATE) < 3 THEN JDATE = '0' || JDATE\n\nIF MM=01 THEN\nDO\n IF LENGTH(DAY) < 3 THEN DAY = '0' || DAY\n   JDT = YEAR||DAY\nEND\nELSE\n   JDT = YEAR||JDATE\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.SR,RANGE=J\" || JNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=DLY.PRDB.OFFLOAD.JOB.J\" || JNUM || \".D\" || JDT || \"\"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\nEXIT\n./ ADD NAME=ON1      0101-01016-01016-1428-00106-00106-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\nARG INPUT INP2\nPARSE VALUE INPUT WITH DAY\nPARSE VALUE INP2  WITH JOBN\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nFDP = '&SYSNAME.'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nIF JOBN = \"\" THEN\n  OUT. = \"  $TOFF1.SR,RANGE=J1-32767          \"\nELSE\n  OUT. = \"  $TOFF1.SR,RANGE=J\"JOBN\"           \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\" || FDP|| \".OFFLOAD.JOB.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=ON2      0101-01016-01016-1428-00106-00106-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\nARG INPUT INP2\nPARSE VALUE INPUT WITH DAY\nPARSE VALUE INP2  WITH JOBN\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nFDP = '&SYSNAME.'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST                         \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nIF JOBN = \"\" THEN\n  OUT. = \"  $TOFF1.SR,RANGE=S1-32767          \"\nELSE\n  OUT. = \"  $TOFF1.SR,RANGE=S\"JOBN\"           \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\" || FDP|| \".OFFLOAD.STC.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY STC ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY STC ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=ON3      0101-01016-01016-1428-00138-00138-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\n\nGGG.01 = 00\nGGG.02 = 31\nGGG.03 = 59\nGGG.04 = 90\nGGG.05 = 120\nGGG.06 = 151\nGGG.07 = 180\nGGG.08 = 212\nGGG.09 = 243\nGGG.10 = 273\nGGG.11 = 304\nGGG.12 = 334\n\n\nARG INPUT\n\nPARSE VALUE INPUT WITH JNUM ':' XX\nYY = SUBSTR(XX,1,2)\nMM = SUBSTR(XX,3,2)\nDD = SUBSTR(XX,5,2)\n\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18400) FI(OPRT) UNIT(SYSDA)\"'\nFDP = '&SYSNAME.'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nDATE = YY || MM || DD\n\nYEAR  = SUBSTR(DATE,1,2)\nMONTH = SUBSTR(DATE,3,2)\nDAY   = SUBSTR(DATE,5,2)\n\n\nJDATE = GGG.MM + DAY\n\n\nIF ((YY // 4 = 0) & (MM >= 2)) THEN JDATE = JDATE + 1\n\n\nIF LENGTH(JDATE) < 3 THEN JDATE = '0' || JDATE\n\nIF LENGTH(JDATE) < 3 THEN JDATE = '0' || JDATE\n\nJDT = YEAR||JDATE\n\nSAY JDT\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.JT,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.SR,RANGE=J\" || JNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\"FDP\".OFFLOAD.JOB.J\"JNUM\".D\"JDT\"\"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\nINTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nEXIT\n./ ADD NAME=ON4      0101-01016-01016-1428-00137-00137-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\n\nMMM.01 = 01\nMMM.02 = 31\nMMM.03 = 59\nMMM.04 = 90\nMMM.05 = 120\nMMM.06 = 151\nMMM.07 = 181\nMMM.08 = 212\nMMM.09 = 243\nMMM.10 = 273\nMMM.11 = 304\nMMM.12 = 334\n\n\n\nARG INPUT\nPARSE VALUE INPUT WITH SNUM ':' DD ':' MM ':' YY\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nFDP = '&SYSNAME.'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nDATE = DD\"/\" || MM\"/\" || YY\n\nDAY   = SUBSTR(DATE,1,2)\nMONTH = SUBSTR(DATE,3,3)\nMM    = SUBSTR(DATE,4,2)\nYEAR  = SUBSTR(DATE,7,2)\n\n\nIF (YEAR // 4 = 0) & (MM > 2) THEN\n   JDATE =  ((MMM.MM + 1) + DAY)\nELSE\n   JDATE =  MMM.MM + DAY\nIF LENGTH(JDATE) < 3 THEN JDATE = '0' || JDATE\n\nIF MM=01 THEN\nDO\n IF LENGTH(DAY) < 3 THEN DAY = '0' || DAY\n   JDT = YEAR||DAY\nEND\nELSE\n   JDT = YEAR||JDATE\n\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.ST,OFF1.JT                 \"\nCALL WRITE\nOUT. = \"  $POFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nOUT. = \"  $TOFF1.SR,RANGE=S\" || SNUM || \" \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\"FDP\".OFFLOAD.STC.S\"SNUM\".D\"JDT\"\"\nCALL WRITE\nOUT. = \"  $SOFF1.SR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(SNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"STC=\" || S4 || \" SPECIFIC STC ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(SNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"STC=\" || S4 || \" SPECIFIC STC ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=ON5      0101-01016-01016-1428-00106-00106-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\nMAANDTABEL = '/0131 /0260 /0391 /04121/05152/06182/07213/08244/09;\n          274/10305/11335/12366'\nARG INPUT INP2\nPARSE VALUE INPUT WITH DAY\nPARSE VALUE INP2  WITH JOBN\n \"ALLOC DA (MAINT.JES2.LOG) F(OPRG) MOD\"\n \"ALLOC DA (OPS.JES2.LOG) F(OOPS) MOD\"\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.ONJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nFDP = '&SYSNAME.'\nDEL = '\"DEL ' || UID || '.ONJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nJDT = DATE(\"JULIAN\")\n\nOUT. = \"//\" || UID || \"O JOB (1,RESYS,BAC,01),'DAILY OFFLOAD',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01  EXEC PGM=CMD@WAIT,PARM='00000100'  \"\nCALL WRITE\nOUT. = \"//SYSPRINT DD *                     \"\nCALL WRITE\nOUT. = \"//SYSIN    DD *                     \"\nCALL WRITE\nOUT. = \"  $POFF1.JT                         \"\nCALL WRITE\nOUT. = \"  $POFF1.JR                         \"\nCALL WRITE\nOUT. = \"  $POFFLOAD1                        \"\nCALL WRITE\nIF JOBN = \"\" THEN\n  OUT. = \"  $TOFF1.JR,RANGE=J1-32767          \"\nELSE\n  OUT. = \"  $TOFF1.JR,RANGE=J\"JOBN\"           \"\nCALL WRITE\nOUT. = \"  $TOFFLOAD1,DSN=TAPES.\" || FDP || \".OFFLOAD.JOB.\" || DAY || \" \"\nCALL WRITE\nOUT. = \"  $SOFF1.JR                         \"\nCALL WRITE\nOUT. = \"  $SOFFLOAD1,TYPE=RECEIVE           \"\nCALL WRITE\nOUT. = \"/*                                  \"\n\nCALL WRITE\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.ONJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"O\"\nSAY \"BEEN SUBMITTED\"\n\n CALL WRITE_JES\n CALL WRITE_OPS\n\n  /***************************/\n  /* WRITE TO MAINT.JES2.LOG */\n  /***************************/\n WRITE_JES:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB ONLOAD\"\n \"EXECIO 1 DISKW OPRG (STEM OUT.\"\n\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(DAY,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"DAY=\" || S4 || \" DAILY JOB ONLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n CALL KLAAR1\n\nKLAAR1:\n\"EXECIO 0 DISKW OPRG (FINIS\"\n\"FREE FI(OPRG)\"\n\"EXECIO 0 DISKW OOPS (FINIS\"\n\"FREE FI(OOPS)\"\n DEL = '\"DEL ' || UID || '.ONJCL\"'\n INTERPRET DEL\nEXIT\n./ ADD NAME=OPERMAIN 0101-01016-01016-1428-00021-00021-00000-RACFCLS\nPROC 0\n/*   PUSH DOWN THE CURRENT ISPF DISPLAY AND STACK ANOTHER ON TOP   */\nSET ID = &SUBSTR(1:3,&SYSUID)\nIF &ID NE OPS THEN +\nDO\n WRITE ACCESS DENIED\n WRITE YOU ARE NOT AUTHORIZED TO USE THIS FUNCTION\n EXIT\nEND\nISPEXEC CONTROL DISPLAY SAVE\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC SELECT PANEL(ISP@OPS) NEWAPPL(ISR)\nIF &LASTCC GT 4 THEN DO\n   ISPEXEC VGET (&ZERRMSG)\n   ISPEXEC GETMSG MSG(&ZERRMSG) SHORTMSG(MSG1) LONGMSG(MSG2)\n   WRITE CLIST NEXTISPF FAILED BECAUSE &MSG2\nEND\n/*   EXIT THE CURRENT ISPF DISPLAY AND POP THE PREVIOUS ONE          */\nISPEXEC CONTROL ERRORS\nISPEXEC CONTROL DISPLAY RESTORE\nEXIT\n./ ADD NAME=OPERSPF  0101-01016-01016-1428-00021-00021-00000-RACFCLS\nPROC 0\n/*   PUSH DOWN THE CURRENT ISPF DISPLAY AND STACK ANOTHER ON TOP   */\nSET ID = &SUBSTR(1:3,&SYSUID)\nIF &ID NE OPS THEN +\nDO\n WRITE ACCESS DENIED\n WRITE YOU ARE NOT AUTHORIZED TO USE THIS FUNCTION\n EXIT\nEND\nISPEXEC CONTROL DISPLAY SAVE\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC SELECT PANEL(ISP@OPS2) NEWAPPL(ISR)\nIF &LASTCC GT 4 THEN DO\n   ISPEXEC VGET (&ZERRMSG)\n   ISPEXEC GETMSG MSG(&ZERRMSG) SHORTMSG(MSG1) LONGMSG(MSG2)\n   WRITE CLIST NEXTISPF FAILED BECAUSE &MSG2\nEND\n/*   EXIT THE CURRENT ISPF DISPLAY AND POP THE PREVIOUS ONE          */\nISPEXEC CONTROL ERRORS\nISPEXEC CONTROL DISPLAY RESTORE\nEXIT\n./ ADD NAME=Q        0101-01016-01016-1428-00015-00015-00000-RACFCLS\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\n./ ADD NAME=RACFADM  0101-01016-01016-1428-00136-00136-00000-RACFCLS\n/* REXX */\n/* RACF ADMINISTRATOR ADD */\nUID = SYSVAR(SYSUID)\nIF UID != SUBSTRING(SYS0009,1,8)\nSAY \"INVALID USERID\"\nEXIT(0)\n\nSAY \"\"\nSAY \"\"\nSAY \"\"\nSAY \"\"\nSAY \"\"\nSAY \"\"\nSAY \"                       +----------------------------+ \"\nSAY \"                       \u00f8 ADD ADMINISTRATOR TO GROUP \u00f8 \"\nSAY \"                       +----------------------------+ \"\nINPUT:\nSAY \"\"\nSAY \"ENTER USERID  EG. (OPS0AD1)\"\nSAY \"THE FOURTH CHARACTER IS THE TEST CHARACTER\"\nPULL ID\nPARSE VALUE ID WITH ID3 4 IDNR\nSAY \"\"\nSAY \"ENTER ADMINISTRATOR DETAIL (255 CHARACTERS ALLOWED)\"\nSAY \"EG. NAME, PLACE PHONE NUMBER ETC.)\"\nPULL DATA\nDATA = \"'\"DATA\"'\"\n\n GR.0 = ''\n GR.DNS = \"DIENSKRL\"\n GR.NET = \"NETWORK\"\n GR.MED = \"MEDIA\"\n GR.OPS = \"OPERATOR\"\n GR.PRG = \"PROGRAMR\"\n\n SN.0 = ''\n SN.DNS = \"DIENADMN\"\n SN.NET = \"NETADMN\"\n SN.MED = \"MEDADMN\"\n SN.OPS = \"OPERADMN\"\n SN.PRG = \"PROGADMN\"\n\n AC.0 = ''\n AC.DNS = \"$REDNS\"\n AC.NET = \"$RENET\"\n AC.MED = \"$REMED\"\n AC.OPS = \"$REOPS\"\n AC.PRG = \"$REPRG\"\n\nSELECT\n WHEN ID3 = \"DNS\" THEN NOP\n WHEN ID3 = \"NET\" THEN NOP\n WHEN ID3 = \"MED\" THEN NOP\n WHEN ID3 = \"OPS\" THEN NOP\n WHEN ID3 = \"PRG\" THEN NOP\nOTHERWISE\n SAY \"\"\n SAY \"                       +----------------+ \"\n SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n SAY \"                       \u00f8                \u00f8 \"\n SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n SAY \"                       +----------------+ \"\nSAY \"\"\n CALL INPUT\nEND\nGRP = GR.ID3\nADD = '\"ADDUSER ('ID') NAME(ADMINISTRATOR) DFLTGRP('GRP') PASSWORD(A)',\n       'OWNER('UID') CLAUTH(FIELD USER TSOAUTH)',\n       'TSO (ACCTNUM('AC.ID3') PROC('SN.ID3') MAXSIZE(2048)',\n       'SIZE(2048) UNIT(SYSDA))\"'\n\nALT = '\"ALTUSER ('ID') DATA('DATA')\"'\n\nCON = '\"CONNECT ('ID') GROUP('GRP') OWNER('UID') RESUME',\n      'AUTHORITY(CONNECT)',\n      'SPECIAL UACC(NONE)\"'\n\nPER1 = '\"PERMIT USER.TSO.TLPROC CLASS(FIELD)',\n       'ID('ID') ACCESS(UPDATE)\"'\nPER2 = '\"PERMIT USER.TSO.TLSIZE CLASS(FIELD)',\n       'ID('ID') ACCESS(UPDATE)\"'\nPER3 = '\"PERMIT USER.TSO.TMSIZE CLASS(FIELD)',\n       'ID('ID') ACCESS(UPDATE)\"'\nPER4 = '\"PERMIT USER.TSO.TACCNT CLASS(FIELD)',\n       'ID('ID') ACCESS(UPDATE)\"'\nPER5 = '\"PERMIT USER.TSO.TUNIT  CLASS(FIELD)',\n       'ID('ID') ACCESS(UPDATE)\"'\nPER6 = '\"PERMIT JCL CLASS(TSOAUTH) ID('ID') ACCESS(UPDATE)\"'\nPER7 = '\"PERMIT OPER CLASS(TSOAUTH) ID('ID') ACCESS(NONE)\"'\nPER8 = '\"PERMIT 'SN.ID3' CLASS(TSOPROC) ID('ID') ACCESS(READ)\"'\nPER9 = '\"PERMIT 'AC.ID3' CLASS(ACCTNUM) ID('ID') ACCESS(READ)\"'\nALIAS = '\"DEF ALIAS (NAME('ID') RELATE (CAT.TSO.UCAT))',\n        'CAT(CATALOG.MVS522.MASTCAT)\"'\n\nSAY \"\"\nINTERPRET ADD\nIF RC = 0 THEN SAY ID \"ADDED SUCCESSFUL\"\nELSE SAY \"ADDUSER FAILED\"\nSAY \"\"\nINTERPRET ALT\nIF RC = 0 THEN SAY ID \"INSTALLATION DATA ADDED\"\nELSE SAY \"INSTALLATION DATA FAILED - ALTUSER\"\nINTERPRET CON\nIF RC = 0 THEN SAY ID \"CONNECTED SUCCESSFUL\"\nELSE SAY \"CONNECT FAILED\"\nINTERPRET PER1\nIF RC = 0 THEN SAY ID \"PER1 SUCCESSFUL\"\nELSE SAY \"PER1 FAILED\"\nINTERPRET PER2\nIF RC = 0 THEN SAY ID \"PER2 SUCCESSFUL\"\nELSE SAY \"PER2 FAILED\"\nINTERPRET PER3\nIF RC = 0 THEN SAY ID \"PER3 SUCCESSFUL\"\nELSE SAY \"PER3 FAILED\"\nINTERPRET PER4\nIF RC = 0 THEN SAY ID \"PER4 SUCCESSFUL\"\nELSE SAY \"PER4 FAILED\"\nINTERPRET PER5\nIF RC = 0 THEN SAY ID \"PER5 SUCCESSFUL\"\nELSE SAY \"PER5 FAILED\"\nINTERPRET PER6\nIF RC = 0 THEN SAY ID \"PER6 SUCCESSFUL\"\nELSE SAY \"PER6 FAILED\"\nINTERPRET PER7\nIF RC = 0 THEN SAY ID \"PER7 SUCCESSFUL\"\nELSE SAY \"PER7 FAILED\"\nINTERPRET PER8\nIF RC = 0 THEN SAY ID \"PER8 SUCCESSFUL\"\nELSE SAY \"PER8 FAILED\"\nINTERPRET PER9\nIF RC = 0 THEN SAY ID \"PER9 SUCCESSFUL\"\nELSE SAY \"PER9 FAILED\"\nINTERPRET ALIAS\nIF RC = 0 THEN SAY ID \"ALIAS ADDED SUCCESSFUL\"\nELSE SAY \"ALIAS FAILED\"\nEXIT\n./ ADD NAME=RACFEDIT 0101-01016-01016-1428-00006-00006-00000-RACFCLS\n/*    REXX   */\nPROFILE NOPREFIX\nARG DSN\nX1='ISPEXEC EDIT DATASET('DSN')'\nA='\"'X1'\"'\nINTERPRET A\n./ ADD NAME=RACFEXEC 0101-01016-01016-1428-00058-00058-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\nARG INPUT1 INPUT2\nPARSE VALUE INPUT1 WITH DAY\nPARSE VALUE INPUT2 WITH GROUP\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.EXEJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.EXEJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nGRP = JUSTIFY(GROUP,8,' ')\n\nOUT. = \"//\" || UID || \"E JOB (1,RESYS,BAC,01),'RACF LISTS',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=Z,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01 EXEC PGM=RACFDEFU,\"\nCALL WRITE\nOUT. = \"//   PARM=('\" ||DAY|| \"','\" ||GRP\"')  \"\nCALL WRITE\nOUT. = \"//STEPLIB  DD DSN=SYS0009.LINKLIB,DISP=SHR\"\nCALL WRITE\nOUT. = \"//SYSIN    DD DUMMY                 \"\nCALL WRITE\nOUT. = \"//UITLEER  DD SYSOUT=(A,INTRDR)\"\nCALL WRITE\n\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.EXEJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"E\"\nSAY \"BEEN SUBMITTED\"\n\nCALL KLAAR1\n\nKLAAR1:\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n/* INTERPRET DEL */\nEXIT\n./ ADD NAME=RACFEXE1 0101-01016-01016-1428-00058-00058-00000-RACFCLS\n/* REXX OM DAAGLIKSE OFFLOADS TE DOEN    */\nARG INPUT1 INPUT2\nPARSE VALUE INPUT1 WITH DAY\nPARSE VALUE INPUT2 WITH GROUP\n\n\"PROFILE NOPREFIX\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nALLOC = '\"ALLOC DA(' || UID || '.EXEJCL)',\n        'DIR(0) DSORG(PS) RECFM(F B) LRECL(80) SP(1,0) TRACKS',\n        'BLKSIZE(18534) FI(OPRT) UNIT(SYSDA)\"'\nDEL = '\"DEL ' || UID || '.EXEJCL\"'\nINTERPRET DEL\nINTERPRET ALLOC\n\nGRP = JUSTIFY(GROUP,8,' ')\n\nOUT. = \"//\" || UID || \"E JOB (1,RESYS,BAC,01),'RACF LISTS',\"\nCALL WRITE\nOUT. = \"//             CLASS=L,MSGCLASS=X,NOTIFY=\" || UID || \"\"\nCALL WRITE\nOUT. = \"//*\"\nCALL WRITE\nOUT. = \"//STEP01 EXEC PGM=RACFDEFU,\"\nCALL WRITE\nOUT. = \"//   PARM=('\" ||DAY|| \"','\" ||GRP\"')  \"\nCALL WRITE\nOUT. = \"//STEPLIB  DD DSN=SYS0009.LINKLIB,DISP=SHR\"\nCALL WRITE\nOUT. = \"//SYSIN    DD DUMMY                 \"\nCALL WRITE\nOUT. = \"//UITLEER  DD SYSOUT=(A,INTRDR)\"\nCALL WRITE\n\nCALL KLAAR\n\n/**********************/\n/*** WRITE USERID JCL */\n/**********************/\n\nWRITE:\n \"EXECIO 1 DISKW OPRT (STEM OUT.\"\nRETURN\n\nKLAAR:\n \"EXECIO 0 DISKW OPRT (FINIS\"\n \"FREE FI(OPRT)\"\n  SUB = '\"SUB ' || UID || '.EXEJCL\"'\n  INTERPRET SUB\nSAY \"JOB \" || UID || \"E\"\nSAY \"BEEN SUBMITTED\"\n\nCALL KLAAR1\n\nKLAAR1:\n DEL = '\"DEL ' || UID || '.OFFJCL\"'\n/* INTERPRET DEL */\nEXIT\n./ ADD NAME=READBKUP 0101-01016-01016-1428-00162-00162-00000-RACFCLS\n/* ****************************Rexx**********************************/\n/* SAPD READY LOGON PROC                                            */\n/* ****************************Rexx**********************************/\n\n\"PROFILE NOPREF MODE WTPMSG MSGID\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nPROC = SYSVAR(SYSPROC)\nTSOVER = SYSVAR(SYSTSOE)    /* TEST FOR OS/390 */\nGETSYSN\nIF RC = 0 THEN SYSNAME=BIGERROR\nIF RC = 1 THEN SYSNAME=PRDA\nIF RC = 2 THEN SYSNAME=PRDB\nIF RC = 3 THEN SYSNAME=PRDC\nIF RC = 4 THEN SYSNAME=PRDD\nIF RC = 5 THEN SYSNAME=PRDE\nIF RC = 6 THEN SYSNAME=TSTF\nIF RC = 7 THEN SYSNAME=TSTG\nIF RC = 8 THEN SYSNAME=TST1\nSHRNAME = SYSNAME\nIF RC = 4 THEN SHRNAME=PRDE\nIF RC = 7 THEN SHRNAME=PRDE\nIF RC = 8 THEN SHRNAME=PRDE\n\n/*****************************************/\n/* ALLOC ISPFPROF                        */\n/*****************************************/\nDSNAME = \"'\"UID\".\"SYSNAME\".ISPF.ISPPROF'\"\n\"FREE FI(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB,ISPPROF,ISPTABL)\"\nRC = LISTDSI(DSNAME)\nIF RC > 4 THEN\nDO\n X = MSG('ON')\n \"FREE FI(ISPCRTE)\"\n \"ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(18400)\"\n A1='\"ALLOC DA(' || DSNAME || ') SP(10,1) TRACKS DIR(10)',\n || 'USING(ISPCRTE) FI(ISPPROF)\"'\n SAY A1\n INTERPRET A1\n IF RC = 0 THEN\n  SAY  \"ISPF PROFILE DATA SET\" DSNAME \"HAS BEEN CREATED\"\n ELSE\n DO\n   SAY  \"UNABLE TO ALLOCATE ISPF PROFILE DATA SET\" DSNAME\n   \"FREE FI(ISPCRTE)\"\n   EXIT 12\n END\n \"FREE FI(ISPCRTE)\"\nEND\nA1 = '\"ALLOC FI(ISPPROF) SHR DA('||DSNAME||')\"'\nA2 = '\"ALLOC FI(ISPTABL) SHR DA('||DSNAME||')\"'\nA3 = '\"ALLOC FI(ISPTLIB) SHR DA('||DSNAME||')\"'\nINTERPRET A1\nINTERPRET A2\nINTERPRET A3\n\nIF TSOVER = 2050 THEN DO\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSPROC */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nC_RAC1 = 'SYS2.RACFCLST'                      /* Changes for OS/390 */\nC_ISP  = 'ISP.SISPEXEC'                       /* Changes for OS/390 */\nC_ISP2 = 'ISP.SISPCLIB'                       /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPPLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nP_CUS3 = 'SYS2.RACFPANL'                      /* Changes for OS/390 */\nP_ISPF = 'ISP.SISPPENU'                       /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPMLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nM_ISPF = 'ISP.SISPMENU'                       /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPTLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nT_ISPF = 'ISP.SISPTENU'                       /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPSLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nS_ISPF = 'ISP.SISPSLIB'                       /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSLOG */             /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\nH_ISF  = \"'SYS0.HASPINDX'\"                    /* Changes for OS/390 */\n\nEND\nELSE DO\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSPROC */\n/********************************/\nC_RAC1 = 'SYS2.RACFCLST'\nC_ISP  = 'ISP.V4R2M0.SISPEXEC'\nC_ISP2 = 'ISP.V4R2M0.SISPCLIB'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPPLIB */\n/********************************/\nP_CUS3 = 'SYS2.RACFPANL'\nP_ISPF = 'ISP.V4R2M0.SISPPENU'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPMLIB */\n/********************************/\nM_ISPF = 'ISP.V4R2M0.SISPMENU'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPTLIB */\n/********************************/\nT_ISPF = 'ISP.V4R2M0.SISPTENU'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPSLIB */\n/********************************/\nS_ISPF = 'ISP.V4R2M0.SISPSLIB'\n\n/*******************************/\n/* SPECIFY DATASETS FOR SYSLOG */\n/*******************************/\nH_ISF  = \"'SYS0.\"SYSNAME\".HASPINDX'\"\n\nEND\n\n/*********************************/\n/*  READY PROMPT USERS           */\n/*********************************/\nIF (PROC = \"READY\") THEN\nDO\n  SYSPROC  = C_RAC1 C_ISP  C_ISP2\n  ISPPLIB  = P_CUS3 P_ISPF\n  ISPMLIB  = M_ISPF\n  ISPTLIB  = T_ISPF\n  ISPSLIB  = S_ISPF\n  HASPINDX = H_ISF\n  PNL      = 'PANEL()'\nEND\n\n/******************************/\n/** STANDARD ISPF ALLOCTIONS **/\n/******************************/\n\"FREE FI(SYSPROC,SYSEXEC,ISPLLIB,ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB)\"\n\"FREE FI(HASPINDX)\"\n\nX = MSG('ON')\n\"ALLOC FI(SYSPROC) DA(\"SYSPROC\") SHR\"\n\"ALLOC FI(ISPPLIB) DA(\"ISPPLIB\") SHR\"\n\"ALLOC FI(ISPMLIB) DA(\"ISPMLIB\") SHR\"\n\"ALLOC FI(ISPTLIB) DA(\"ISPTLIB\") SHR\"\n\"ALLOC FI(ISPSLIB) DA(\"ISPSLIB\") SHR\"\n\"ALLOC FI(HASPINDX) DA(\"HASPINDX\") SHR\"\nX = MSG('ON')\nSAY \"WRITE SEND OR RECEIVE THE FILE.....OR ENTER LOGOFF TO TERMINATE.\"\n\n\nExit 0  /*-------------------------------------------------------*/\n\n./ ADD NAME=READY    0101-01016-01016-1428-00162-00162-00000-RACFCLS\n/* ****************************Rexx**********************************/\n/* SAPD READY LOGON PROC                                            */\n/* ****************************Rexx**********************************/\n\n\"PROFILE NOPREF MODE WTPMSG MSGID\"\nX = MSG('OFF')\nUID = SYSVAR(SYSUID)\nPROC = SYSVAR(SYSPROC)\nTSOVER = SYSVAR(SYSTSOE)    /* TEST FOR OS/390 */\nGETSYSN\nIF RC = 0 THEN SYSNAME=BIGERROR\nIF RC = 1 THEN SYSNAME=PRDA\nIF RC = 2 THEN SYSNAME=PRDB\nIF RC = 3 THEN SYSNAME=PRDC\nIF RC = 4 THEN SYSNAME=PRDD\nIF RC = 5 THEN SYSNAME=PRDE\nIF RC = 6 THEN SYSNAME=TSTF\nIF RC = 7 THEN SYSNAME=TSTG\nIF RC = 8 THEN SYSNAME=TST1\nSHRNAME = SYSNAME\nIF RC = 4 THEN SHRNAME=PRDE\nIF RC = 7 THEN SHRNAME=PRDE\nIF RC = 8 THEN SHRNAME=PRDE\n\n/*****************************************/\n/* ALLOC ISPFPROF                        */\n/*****************************************/\nDSNAME = \"'\"UID\".\"SYSNAME\".ISPF.ISPPROF'\"\n\"FREE FI(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB,ISPPROF,ISPTABL)\"\nRC = LISTDSI(DSNAME)\nIF RC > 4 THEN\nDO\n X = MSG('ON')\n \"FREE FI(ISPCRTE)\"\n \"ATTRIB ISPCRTE DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(18400)\"\n A1='\"ALLOC DA(' || DSNAME || ') SP(10,1) TRACKS DIR(10)',\n || 'USING(ISPCRTE) FI(ISPPROF)\"'\n SAY A1\n INTERPRET A1\n IF RC = 0 THEN\n  SAY  \"ISPF PROFILE DATA SET\" DSNAME \"HAS BEEN CREATED\"\n ELSE\n DO\n   SAY  \"UNABLE TO ALLOCATE ISPF PROFILE DATA SET\" DSNAME\n   \"FREE FI(ISPCRTE)\"\n   EXIT 12\n END\n \"FREE FI(ISPCRTE)\"\nEND\nA1 = '\"ALLOC FI(ISPPROF) SHR DA('||DSNAME||')\"'\nA2 = '\"ALLOC FI(ISPTABL) SHR DA('||DSNAME||')\"'\nA3 = '\"ALLOC FI(ISPTLIB) SHR DA('||DSNAME||')\"'\nINTERPRET A1\nINTERPRET A2\nINTERPRET A3\n\nIF TSOVER = 2050 THEN DO\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSPROC */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nC_RAC1 = 'SYS2.RACFDUM'                       /* CHANGES FOR OS/390 */\nC_ISP  = 'SYS2.RACFDUM'                       /* CHANGES FOR OS/390 */\nC_ISP2 = 'SYS2.RACFDUM'                       /* CHANGES FOR OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPPLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nP_CUS3 = 'SYS2.RACFDUM'                       /* CHANGES FOR OS/390 */\nP_ISPF = 'SYS2.RACFDUM'                       /* CHANGES FOR OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPMLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nM_ISPF = 'SYS2.RACFDUM'                       /* CHANGES FOR OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPTLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nT_ISPF = 'SYS2.RACFDUM'                       /* CHANGES FOR OS/390 */\n                                              /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR ISPSLIB */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nS_ISPF = 'SYS2.RACFDUM'                       /* CHANGES FOR OS/390 */\n                                              /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\n/* SPECIFY DATASETS FOR SYSLOG */             /* Changes for OS/390 */\n/*******************************/             /* Changes for OS/390 */\nH_ISF  = \"'SYS0.HASPINDX'\"                    /* Changes for OS/390 */\n\nEND\nELSE DO\n\n/********************************/\n/* SPECIFY DATASETS FOR SYSPROC */\n/********************************/\nC_RAC1 = 'SYS2.RACFDUM'\nC_ISP  = 'SYS2.RACFDUM'\nC_ISP2 = 'SYS2.RACFDUM'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPPLIB */\n/********************************/\nP_CUS3 = 'SYS2.RACFDUM'\nP_ISPF = 'SYS2.RACFDUM'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPMLIB */\n/********************************/\nM_ISPF = 'SYS2.RACFDUM'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPTLIB */\n/********************************/\nT_ISPF = 'SYS2.RACFDUM'\n\n/********************************/\n/* SPECIFY DATASETS FOR ISPSLIB */\n/********************************/\nS_ISPF = 'SYS2.RACFDUM'\n\n/*******************************/\n/* SPECIFY DATASETS FOR SYSLOG */\n/*******************************/\nH_ISF  = \"'SYS0.\"SYSNAME\".HASPINDX'\"\n\nEND\n\n/*********************************/\n/*  READY PROMPT USERS           */\n/*********************************/\nIF (PROC = \"READY\") THEN\nDO\n  SYSPROC  = 'SYS2.RACFDUM'\n  ISPPLIB  = 'SYS2.RACFDUM'\n  ISPMLIB  = 'SYS2.RACFDUM'\n  ISPTLIB  = 'SYS2.RACFDUM'\n  ISPSLIB  = 'SYS2.RACFDUM'\n  HASPINDX = H_ISF\n  PNL      = 'PANEL()'\nEND\n\n/******************************/\n/** STANDARD ISPF ALLOCTIONS **/\n/******************************/\n\"FREE FI(SYSPROC,SYSEXEC,ISPLLIB,ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB)\"\n\"FREE FI(HASPINDX)\"\n\nX = MSG('ON')\n\"ALLOC FI(SYSPROC) DA(\"SYSPROC\") SHR\"\n\"ALLOC FI(ISPPLIB) DA(\"ISPPLIB\") SHR\"\n\"ALLOC FI(ISPMLIB) DA(\"ISPMLIB\") SHR\"\n\"ALLOC FI(ISPTLIB) DA(\"ISPTLIB\") SHR\"\n\"ALLOC FI(ISPSLIB) DA(\"ISPSLIB\") SHR\"\n\"ALLOC FI(HASPINDX) DA(\"HASPINDX\") SHR\"\nX = MSG('ON')\nSAY \"WRITE SEND OR RECEIVE THE FILE.....OR ENTER LOGOFF TO TERMINATE.\"\n\n\nExit 0  /*-------------------------------------------------------*/\n\n./ ADD NAME=READY#   0101-01016-01016-1428-00061-00061-00000-RACFCLS\nPROC 0 PANEL()   /* READY */\nCONTROL NOFLUSH NOMSG MAIN\nPROFILE MODE WTPMSG MSGID NOPREFIX\nGETSYSN\nSET SYSNUM = &LASTCC\nIF &SYSNUM = 0 THEN SET SYSNAME=BIGERROR\nIF &SYSNUM = 1 THEN SET SYSNAME=PRDA\nIF &SYSNUM = 2 THEN SET SYSNAME=PRDB\nIF &SYSNUM = 3 THEN SET SYSNAME=PRDC\nIF &SYSNUM = 4 THEN SET SYSNAME=PRDD\nIF &SYSNUM = 5 THEN SET SYSNAME=PRDE\nIF &SYSNUM = 6 THEN SET SYSNAME=TSTF\nIF &SYSNUM = 7 THEN SET SYSNAME=TSTG\n\nSET SHRNAME = &SYSNAME\nIF &SYSNUM = 4 THEN SET SHRNAME=PRDE\nIF &SYSNUM = 7 THEN SET SHRNAME=PRDE\n\nFREE FILE(ISPLLIB,ISPPLIB,ISPMLIB,ISPTLIB,ISPSLIB, +\n          ISPPROF,ISPTABL,SMPTABL)\nSET &DSNAME = &SYSUID..&SYSNAME..ISPF.ISPPROF\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    RENAME &SYSUID..ISPF.ISPPROF &SYSUID..&SYSNAME..ISPF.ISPPROF\n  END\nALLOC FI(ISPPROF) SHR  DA('&DSNAME.')\nIF &LASTCC ^= 0 THEN +\n  DO\n    CONTROL MSG\n    ALLOC DA('&DSNAME.') SP(2,1) TRACKS DIR(2) +\n    DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(6160) FI(ISPPROF)\n    IF &LASTCC = 0 THEN +\n      WRITE *** ISPF PROFILE DATA SET '&DSNAME.' HAS BEEN CREATED\n    ELSE +\n     DO\n      WRITE  *** UNABLE TO ALLOCATE ISPF PROFILE DATA SET '&DSNAME.'\n      EXIT CODE(12)\n     END\n  END\nCONTROL MSG\nERROR EXIT\nALLOC FI(ISPTABL) SHR DA('&DSNAME.')\nALLOC FI(ISPPLIB) SHR DA( +\n                         'SYS2.RACFPANL'     /* RACF CHECKING */ +\n                         'ISP.V4R2M0.SISPPENU')   /* ISPF          */\nALLOC FI(ISPMLIB) SHR DA( +\n                         'ISP.V4R2M0.SISPMENU')   /* ISPF          */\nALLOC FI(ISPTLIB) SHR DA( +\n                         '&DSNAME'                /*               */ +\n                         'ISP.V4R2M0.SISPTENU')   /* ISPF          */\nALLOC FI(ISPSLIB) SHR DA( +\n                         'ISP.V4R2M0.SISPSLIB')   /* ISPF          */\nALLOC FI(HASPINDX) SHR DA('SYS0.&SYSNAME..HASPINDX') /* ISPF        */\nFREE FI(SYSPROC)\nALLOC FI(SYSPROC) SHR DA( +\n     'SYS2.RACFCLST'  +\n     'ISP.V4R2M0.SISPEXEC'     /* RACF ADMIN  */ +\n     'ISP.V4R2M0.SISPCLIB')    /* RACF ADMIN  */\nWRITE SEND OR RECEIVE THE FILE..... OR ENTER LOGOFF TO TERMINATE.\nERROR RETURN\n./ ADD NAME=S        0101-01016-01016-1428-00008-00008-00000-RACFCLS\n WRITE_OPS:\n UID = SYSVAR(SYSUID)\n S1 = DATE()\n S2 = TIME()\n S3 = JUSTIFY(UID,8,' ')\n S4 = JUSTIFY(JNUM,6,' ')\n OUT.=\"   \" S1 \" \" S2 \" USER=\" ||S3|| \"JOB=\" || S4 || \" SPECIFIC JOB OFFLOAD\"\n \"EXECIO 1 DISKW OOPS (STEM OUT.\"\n./ ADD NAME=SCROLL   0101-01016-01016-1428-00073-00073-00000-RACFCLS\nPROC 0\n/*********************************************************************/\n/*                  \"SCROLLABLE\" MENU EXAMPLE                        */\n/*                                                                   */\n/*  This CLIST is used with the CBIPO MASTER APPLICATION MENU        */\n/*  to perform vertical scrolling of the data within the dynamic     */\n/*  area defined in the panel.  The value of the dynamic area        */\n/*  variable is initialized in the panel )INIT section.              */\n/*  The variables used in this CLIST are as follows:                 */\n/*                                                                   */\n/* CUTP     - The dialog variable containing the truncation point    */\n/*            of the scrollable menu data.                           */\n/*                                                                   */\n/* MENU     - The dialog variable containing the scrollable menu     */\n/*            data.                                                  */\n/*                                                                   */\n/* LASTLN   - The dialog variable containing the number of the last  */\n/*            visible line of the dynamic area.                      */\n/*                                                                   */\n/* LINLEN   - The dialog variable containing the length of each line */\n/*            within the dynamic area.                               */\n/*                                                                   */\n/* ZVERB    - The ISPF system variable containing the command name   */\n/*                                                                   */\n/* ZSCROLLA - The ISPF system variable containing the scroll amount  */\n/*            field value (four characters)                          */\n/*                                                                   */\n/* ZSCROLLN - The ISPF system variable containing the numeric value  */\n/*            of the scroll amount                                   */\n/*                                                                   */\n/*  The values of these variables are retrieved from the SHARED      */\n/*  variable pool by the VGET service.                               */\n/*                                                                   */\n/*********************************************************************/\n/*                                                                   */\nISPEXEC VGET (CUTP MENU LASTLN LINLEN ZVERB ZSCROLLA ZSCROLLN)\n    SET BLN20 = &STR(                    )\n    SET BLN08 = &STR(        )\n    SET BLNKS = &STR(&BLN20&BLN20&BLN20&BLN08)\n    SET MK = &LENGTH(&STR(&MENU))\n    SET MRK = &MK // &LINLEN\n    SET MRK = &LINLEN - &MRK\n    IF &MRK > 0 THEN +\n        SET &MENU = &STR(&MENU&SUBSTR(1:&MRK,&BLNKS))\nIF &ZVERB = DOWN THEN DO                     /* IF DOWNWARD SCROLL,  */\n  IF &ZSCROLLA = MAX THEN DO                 /* CHECK FOR MAX SCROLL */\n/*                                                                   */\n/* position data so that last menu line is on last visible line      */\n/*                                                                   */\n    SET CUTP = &LENGTH(&STR(&MENU)) - (&LASTLN * &LINLEN)\n    IF &CUTP < 0 THEN SET CUTP = 0           /* ENSURE NON-NEGATIVE  */\n  END\n  ELSE DO                                   /* NOT MAX, USE ZSCROLLN */\n    SET CUTP = &CUTP + (&ZSCROLLN * &LINLEN)\n    IF &CUTP > (&LENGTH(&STR(&MENU)) - &LINLEN) THEN DO   /* SHOW AT */\n      SET CUTP = &LENGTH(&STR(&MENU)) - &LINLEN      /* LEAST 1 LINE */\n    END\n  END\nEND\nELSE DO                                    /* NOT DOWN, CHECK FOR UP */\n  IF &ZVERB = UP THEN DO\n    IF &ZSCROLLA = MAX THEN DO             /* CHECK FOR MAX SCROLL   */\n      SET CUTP = 0                         /* POSITION TO TOP        */\n    END\n    ELSE DO                                          /* USE ZSCROLLN */\n      SET CUTP = &CUTP - (&ZSCROLLN * &LINLEN)\n      IF &CUTP < 0 THEN SET CUTP = 0         /* ENSURE NON-NEGATIVE  */\n    END\n  END\n  ELSE                      /* NOT UP , NO OTHER CMDS SUPPORTED */\nEND\nISPEXEC VPUT (CUTP)         /* SAVE CUTOFF POINT IN SHARED POOL */\nEXIT\n./ ADD NAME=SD       0101-01016-01016-1428-00001-00001-00000-RACFCLS\nISPEXEC SELECT PANEL(ZSDSFOP2) NEWAPPL(ISF) SERVER(SDSFC0)\n./ ADD NAME=SENDMSG  0101-01016-01016-1428-00015-00015-00000-RACFCLS\n/* REXX OM DAAGLIKSE ONLOADS TE DOEN    */\n\n\"PROFILE NOPREFIX\"\n\nSAY \"ENTER USERID\"\nPULL UID\nSAY \"ENTER MESSAGE\"\nPULL MSG\nMSG = \"'\"MSG\"'\"\nSAY MSG\n  SUB = '\"SE \" || MSG || \",USER(\" || UID || \"),LOGON\"'\nINTERPRET SUB\nSAY \"MESSAGE HAS BEEN SENT TO\" UID\n\nEXIT\n./ ADD NAME=SENDMSG1 0101-01016-01016-1428-00009-00009-00000-RACFCLS\nPROC 2 UID MSG\n\nPROFILE NOPREFIX\n\nWRITE &MSG\nSE '&MSG',USER(&UID),LOGON\nWRITE MESSAGE HAS BEEN SENT TO &UID\n\nEXIT\n./ ADD NAME=T        0101-01016-01016-1428-00028-00028-00000-RACFCLS\n/* SPECIFY DATASETS FOR SYSPROC */            /* Changes for OS/390 */\n/********************************/            /* Changes for OS/390 */\nC_ISP2  = 'ISP.SISPCLIB'                      /* Changes for OS/390 */\nC_RAC3  = 'SYS1.HRFCLST'                      /* Changes for OS/390 */\nC_CUS1  = 'SYS2.CMDPROC'                      /* Changes for OS/390 */\nC_CUS2  = \"'SYS2.\"SHRNAME\".CMDPROC'\"          /* Changes for OS/390 */\nC_CUS3  = 'SYS2.PRDC.CMDPROC'                 /* Changes for OS/390 */\nC_OPS1  = 'OPS.CMDPROC'                       /* Changes for OS/390 */\nC_OPS2  = \"'OPS.\"SHRNAME\".CMDPROC'\"           /* Changes for OS/390 */\nC_RAC1  = 'SYS2.RACFCLST'                     /* Changes for OS/390 */\nC_RAC2  = \"'SYS2.\"SHRNAME\".RACFCLST'\"         /* Changes for OS/390 */\nC_SMPE  = 'GIM.SGIMCLS0'                      /* Changes for OS/390 */\nC_IPCS  = 'SYS1.SBLSCLI0'                     /* Changes for OS/390 */\nC_HCD   = 'SYS1.SCBDCLST'                     /* Changes for OS/390 */\nC_DFSRT = 'SYS1.ICEISPC'                      /* Changes for OS/390 */\nC_DFDSS = 'SYS1.DGTCLIB'                      /* Changes for OS/390 */\nC_RMF   = 'SYS1.SERBCLS'                      /* Changes for OS/390 */\nC_ICQ   = 'ICQ.ICQCCLIB'                      /* Changes for OS/390 */\nC_EDC   = 'EDC.V2R2M0.SEDCLIST'               /* Changes for OS/390 */\nC_BKM   = 'EOY.SEOYCLIB'                      /* Changes for OS/390 */\nC_IOA1  = \"'SYS3.\"SHRNAME\".IOAIV410.CLIST'\"   /* Changes for OS/390 */\nC_IOA2  = 'SYS3.IOA.CLIST'                    /* Changes for OS/390 */\nC_IOA3  = 'SYS3.IOA500.CLIST'                 /* Changes for OS/390 */\nC_HACC  = 'SYS3.ZHC240.ISPCLIB'               /* Changes for OS/390 */\nC_SDF   = 'SDF2.V1R4M0.SDGICMD'               /* Changes for OS/390 */\nC_OMVS  = 'SYS1.SBPXEXEC'                     /* Changes for OS/390 */\nC_CDCU  = ''                                  /* Changes for OS/390 */\n                                              /* Changes for OS/390 */\n./ ADD NAME=TEL      0101-01016-01016-1428-00054-00054-00000-RACFCLS\n/* REXX PROCEDURE TO FIND telephone numbers */\nSAY ' '\nSAY ' '\nSAY ' '\nSAY ' '\nBEGIN:\nARG NAME\nIF NAME = \"\" THEN\n  IF name = \"END\" THEN\n    EXIT\n  ELSE\n    DO\n      SAY ' '\n      SAY 'Enter persons name or END to finish'\n      PARSE UPPER EXTERNAL name\n      IF name = \"END\" THEN CALL klaar\n    END\nSTRING_LENGTH = LENGTH(name)\nIF STRING_LENGTH < 3 THEN\n  DO UNTIL STRING_LENGTH > 2                                            020006\n    IF STRING_LENGTH < 3 THEN                                           020006\n       SAY 'You must at least specify 3 characters!!!'                  020006\n       SAY 'Respecify the name or END?'                                 030006\n       PARSE UPPER EXTERNAL name                                        040000\n    IF name = \"END\" THEN EXIT\n       STRING_LENGTH = LENGTH(name)                                     000400\n  END                                                                   040000\n\"ALLOC FI(INPUT1) DA(maint.tellys) SHR REUSE\"\n\"EXECIO * DISKR INPUT1 (FINIS STEM INPUT1.\"\nI = 0\nFOUND = \"FALSE\"\nsay \"   VAN       NAAM                  UITBREIDING    KANTOOR GEBOU  PR\nOJEK\"\nsay \"===================================================================\n===========\"\nDO FOREVER\n  I = I + 1\n  MATCH = INDEX(INPUT1.I,name)\n  IF I = INPUT1.0 THEN\n    DO\n      SAY 'Unfortunately no match found or last match reached '\n      call klaar\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          say input1.i\n        END\n    END\nEND\nklaar:\n\"FREE FI(INPUT1)\"\nEXIT\n./ ADD NAME=THEADD   0101-01016-01016-1428-00103-00103-00000-RACFCLS\n/* REXX */\n/* TO ADD USERID */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' GROUP ':' PSW ':' CICSID\n\n NM = \"'\"NAME\"'\"\n X = MSG('OFF')\n\n UID = SYSVAR(SYSUID)\n/* PARSE VALUE UID WITH AD3 4 DUMMY */\n\n\n           IF (GROUP <> \"MID\")\n               THEN DO\n                  CALL MSG1\n                  EXIT\n               END\n\n ADD = '\"ADDUSER ('ID') NAME('NM'),\n        DFLTGRP(MID) PASSWORD('PSW') OWNER(MID)\"'\n INTERPRET ADD\n RRC=RC\n\n IF RRC = 0 THEN\n  CALL MSG2\n\n IF RRC <> 0 THEN\n  CALL MSG3\n\n ALT = '\"ALTUSER ('ID') CICS(OPIDENT('CICSID'))\"'\n INTERPRET ALT\n RRC=RC\n\n IF RRC = 0 THEN\n  CALL MSG5\n\n IF RRC <> 0 THEN\n  CALL MSG4\n\n EXIT\n\n\n MSG1: SAY \"\"\n   SAY \"               +---------------------------------------+\"\n   SAY \"               \u00f8        ---- INVALID GROUP ----        \u00f8\"\n   SAY \"               \u00f8                                       \u00f8\"\n   SAY \"               \u00f8            VALID GROUP IS MID         \u00f8\"\n   SAY \"               +---------------------------------------+\"\n   SAY \"\"\n RETURN\n\n MSG2: SAY \"\"\n   SAY \"                       --- RACF USER ---\"\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RRC\n   SAY \"\"\n   SAY \"                       USERID      :\" ID\n   SAY \"                       NAME        :\" NAME\n   SAY \"                       GROUP       :\" GROUP\n   SAY \"                       PASSWORD    :\" PSW\n   SAY \"                       OPIDENT     :\" CICSID\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY ADDED\"\n RETURN\n\n MSG3: SAY \"\"\n   SAY \"               +-----------------------------------------+\"\n   SAY \"               \u00f8            ---- ERROR ----              \u00f8\"\n   SAY \"               \u00f8                                         \u00f8\"\n   SAY \"               \u00f8 RACF USER NOT ADDED DUE TO CONDITION    \u00f8\"\n   SAY \"               \u00f8 CODE IT IS POSSIBLE THAT THE ID ALREADY \u00f8\"\n   SAY \"               \u00f8 EXITS                                   \u00f8\"\n   SAY \"               \u00f8       RETURN CODE :\" RRC \"              \u00f8\"\n   SAY \"               \u00f8                                         \u00f8\"\n   SAY \"               \u00f8 PLEASE CALL YOUR SYSTEM PROGRAMMER FOR  \u00f8\"\n   SAY \"               \u00f8 HELP ( ROSS )                           \u00f8\"\n   SAY \"               +-----------------------------------------+\"\n   SAY \"\"\n RETURN\n\n MSG4: SAY \"\"\n   SAY \"               +-----------------------------------------+\"\n   SAY \"               \u00f8            ---- ERROR ----              \u00f8\"\n   SAY \"               \u00f8                                         \u00f8\"\n   SAY \"               \u00f8 RACF USER'S OPIDENT SEGMENT FOR CICS    \u00f8\"\n   SAY \"               \u00f8          DIDN'T ADD CORRECTLY           \u00f8\"\n   SAY \"               \u00f8                                         \u00f8\"\n   SAY \"               \u00f8       RETURN CODE :\" RRC \"              \u00f8\"\n   SAY \"               \u00f8 PLEASE CALL YOUR SYSTEM PROGRAMMER FOR  \u00f8\"\n   SAY \"               \u00f8         HELP ( ROSS )                   \u00f8\"\n   SAY \"               +-----------------------------------------+\"\n   SAY \"\"\n RETURN\n\n MSG5: SAY \"\"\n   SAY \"                       RETURN CODE :\" RRC\n   SAY \"\"\n   SAY \"                       OPIDENT     :\" CICSID\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY ADDED\"\n RETURN\n\n./ ADD NAME=THEDEL   0101-01016-01016-1428-00070-00070-00000-RACFCLS\n/* REXX */\n ARG INPUT\n PARSE VALUE INPUT WITH ID\n PARSE VALUE ID WITH ID3 4 DUMMY\n\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD3 4 DUMMY\n\n\n NCI = '\"ALU ('ID') NOCICS\"'\n DEL = '\"DELUSER ('ID')\"'\n\n MS = MSG('OFF')\n INTERPRET NCI\n INTERPRET DEL\n IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       USERID      :\" ID\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY DELETED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT DELETED\"\n   SAY \"\"\n   SAY \"                       IT IS POSSIBLE THAT\"\n   SAY \"                       THE ID DOES NOT EXITS\"\n   SAY \"\"\n   SAY \"                       ELSE:\"\n   SAY \"                       PLEASE CALL YOUR\"\n   SAY \"                       SYSTEM PROGRAMMER\"\n   SAY \"                       FOR HELP\"\n  END\n  MS = MSG('ON')\n  EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"            +------------------------------------------+\"\n  SAY \"            \u00f8 YOU ARE NOT AUTHORIZED TO DELETE THIS ID \u00f8\"\n  SAY \"            +------------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n./ ADD NAME=THELST   0101-01016-01016-1428-00034-00034-00000-RACFCLS\n/* REXX */\n ARG INPUT\n PARSE VALUE INPUT WITH ID\n PARSE VALUE ID WITH ID3 2 DUMMY\n\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD3 4 DUMMY\n\n LST = '\"LISTUSER ('ID') CICS\"'\n\n MS = MSG('OFF')\n INTERPRET LST\n IF RC <> 0 THEN\n DO\n  SAY \"\"\n  SAY \"\"\n  SAY \"\"\n  SAY \"                       RETURN CODE :\" RC\n  SAY \"\"\n  SAY \"                       \"ID \"NOT LISTED\"\n  SAY \"\"\n  SAY \"                       IT IS POSSIBLE THAT\"\n  SAY \"                       THE ID DOES NOT EXITS\"\n  SAY \"\"\n  SAY \"                       ELSE:\"\n  SAY \"                       PLEASE CALL YOUR\"\n  SAY \"                       SYSTEM PROGRAMMER\"\n  SAY \"                       FOR HELP\"\n END\n  MS = MSG('ON')\n  EXIT\n./ ADD NAME=THEOPT   0101-01016-01016-1428-00051-00051-00000-RACFCLS\n/* REXX */\n/* REXX TO CHANGE PASSWORD, NAME OF EXISTING USERID */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' CICSID\n PARSE VALUE ID WITH ID3 4 DUMMY\n\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD3 4 DUMMY\n\n IF CICSID  <> '' THEN\n  ALT = '\"ALTUSER ('ID') CICS(OPIDENT('CICSID'))\"'\n ELSE\n  EXIT\n\n MS = MSG('OFF')\n INTERPRET ALT\n IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   SAY \"                       OPIDENT     :\" CICSID\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY CHANGED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT CHANGED\"\n   SAY \"\"\n   SAY \"                       \"IT IS POSSIBLE THAT\"\n   SAY \"                       \"THE ID DOES NOT EXITS\"\n   SAY \"\"\n   SAY \"                       ELSE:\"\n   SAY \"                       PLEASE CALL YOUR\"\n   SAY \"                       SYSTEM PROGRAMMER\"\n   SAY \"                       FOR HELP\"\n  END\n  MS = MSG('ON')\n  EXIT\n./ ADD NAME=THEPID   0101-01016-01016-1428-00092-00092-00000-RACFCLS\n/* REXX */\n/****************************/\n/**  ADD ISIS PRINTERS     **/\n/****************************/\n\"PROF NOPREF\"\nARG INPUT\n PARSE VALUE INPUT WITH ACTION ':' PID ':' WEB ':' LOC\n\"ALLOC DA('MAINT.ISIS.WEBNR') FI(XXX) OLD\"\nIF RC <> 0 THEN\nDO\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \" \"\n SAY \"                          +--------------------+\"\n SAY \"                          \u00f8 DATASET IN USE BY  \u00f8\"\n SAY \"                          \u00f8 ANOTHER USER       \u00f8\"\n SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8\"\n SAY \"                          +--------------------+\"\n EXIT\nEND\n\n\"EXECIO * DISKR XXX (FINIS STEM IN.\"\n\"FREE FI(XXX)\"\n\nX = MSG('OFF')\n\nSELECT\nWHEN ACTION = \"ADD\" THEN\n CALL ADD\nWHEN ACTION = \"DEL\" THEN\n CALL DEL\nWHEN ACTION = \"LIST\" THEN\n \"ISPEXEC BROWSE DATASET('MAINT.ISIS.WEBNR')\"\nWHEN ACTION = \"PRT\" THEN\nDO\n L = \"PRINTOFF 'MAINT.ISIS.WEBNR' DEST(\"PID\")\"\n L = '\"'||L||'\"'\n INTERPRET L\n IF RC = 0 THEN SAY \"LISTING ROUTED TO\" PID\n ELSE SAY \"LISTING NOT ROUTED - PLEASE CALL FOR HELP - RC=\"||RC\nEND\nOTHERWISE NOP\nEND\nEXIT\n\nADD:\n\"ALLOC DA('MAINT.ISIS.WEBNR') FI(XXX) OLD\"\nTEL=0\nDO UNTIL TEL >= IN.0\n TEL=TEL+1\n OUT. = IN.TEL\n IN_PID = SUBSTR(IN.TEL,1,8)\n IF PID <> IN_PID THEN\n  \"EXECIO 1 DISKW XXX (STEM OUT.\"\nEND\n\n\"EXECIO 0 DISKW XXX (FINIS\"\n\"FREE FI(XXX)\"\n\n\"ALLOC DA('MAINT.ISIS.WEBNR') FI(XXX) MOD\"\n OUT. = PID WEB LOC\n\"EXECIO 1 DISKW XXX (FINIS STEM OUT.\"\n \"FREE FI(XXX)\"\n SAY PID WEB \" - ADDED SUCCESSFUL\"\n RETURN\n\nDEL:\nTEL=0\nFOUND=\"FALSE\"\n\"ALLOC DA('MAINT.ISIS.WEBNR') FI(XXX) OLD\"\nDO UNTIL TEL >= IN.0\n TEL=TEL+1\n OUT. = IN.TEL\n IN_PID = SUBSTR(IN.TEL,1,8)\n IF PID <> IN_PID THEN\n \"EXECIO 1 DISKW XXX (STEM OUT.\"\n ELSE FOUND = \"TRUE\"\nEND\n\n \"EXECIO 0 DISKW XXX (FINIS\"\n \"FREE FI(XXX)\"\n\n IF FOUND = \"FALSE\" THEN SAY PID \"- NOT IN DATASET\"\n ELSE SAY PID \"- DELETED\"\n RETURN\n./ ADD NAME=THERES   0101-01016-01016-1428-00077-00077-00000-RACFCLS\n/* REXX */\n/* REXX TO CHANGE PASSWORD, NAME OF EXISTING USERID */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' PSW\n PARSE VALUE ID WITH ID3 4 DUMMY\n\n IF NAME <> '' THEN NM = \"'\"NAME\"'\"\n\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH AD3 4 DUMMY\n\n\n IF NAME  <> '' THEN\n  ALT = '\"ALTUSER ('ID') NAME('NM') PASSWORD('PSW') RESUME\"'\n ELSE\n  ALT = '\"ALTUSER ('ID') PASSWORD('PSW') RESUME\"'\n\n MS = MSG('OFF')\n INTERPRET ALT\n IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   IF NAME <> '' THEN\n   SAY \"                       NAME        :\" NAME\n   SAY \"                       PASSWORD    :\" PSW\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY CHANGED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT CHANGED\"\n   SAY \"\"\n   SAY \"                       \"IT IS POSSIBLE THAT\"\n   SAY \"                       \"THE ID DOES NOT EXITS\"\n   SAY \"\"\n   SAY \"                       ELSE:\"\n   SAY \"                       PLEASE CALL YOUR\"\n   SAY \"                       SYSTEM PROGRAMMER\"\n   SAY \"                       FOR HELP\"\n  END\n  MS = MSG('ON')\n  EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"            +------------------------------------------+\"\n  SAY \"            \u00f8 YOU ARE NOT AUTHORIZED TO CHANGE THIS ID \u00f8\"\n  SAY \"            +------------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n./ ADD NAME=THETSP   0101-01016-01016-1428-00254-00254-00000-RACFCLS\n/* THIS REXX PROCEDURE search for spesific printer in tsp  */\n\nBEGIN:\n\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nARG INPUT\nPARSE VALUE INPUT WITH LUNAME\n\nSTRING_LENGTH = LENGTH(LUNAME)\n\n    IF STRING_LENGTH < 4 | STRING_LEGTH > 8                             020006\n      THEN DO                                                           020006\n        CALL MSG1                                                       020006\n        EXIT                                                            020006\n      END\n\nELSE DO\n\n\"ALLOC FI(INPUT1) DA(TSPRINT.V4R2M0.CNTL(ASMJES1)) SHR REUSE\"\n\"ALLOC FI(INPUT2) DA(TSPRINT.V4R2M0.CNTL(ASMJES2)) SHR REUSE\"\n\"ALLOC FI(INPUT3) DA(TSPRINT.V4R2M0.CNTL(ASMJES3)) SHR REUSE\"\n\"ALLOC FI(INPUT4) DA(TSPRINT.V4R2M0.CNTL(ASMJES4)) SHR REUSE\"\n\"ALLOC FI(INPUT5) DA(TSPRINT.V4R2M0.CNTL(ASMJES5)) SHR REUSE\"\n\"ALLOC FI(INPUT6) DA(TSPRINT.V4R2M0.CNTL(ASMJES6)) SHR REUSE\"\n\"EXECIO * DISKR INPUT1 (FINIS STEM INPUT1.\"\n\"EXECIO * DISKR INPUT2 (FINIS STEM INPUT2.\"\n\"EXECIO * DISKR INPUT3 (FINIS STEM INPUT3.\"\n\"EXECIO * DISKR INPUT4 (FINIS STEM INPUT4.\"\n\"EXECIO * DISKR INPUT5 (FINIS STEM INPUT5.\"\n\"EXECIO * DISKR INPUT6 (FINIS STEM INPUT6.\"\n\"FREE FI(INPUT1)\"\n\"FREE FI(INPUT2)\"\n\"FREE FI(INPUT3)\"\n\"FREE FI(INPUT4)\"\n\"FREE FI(INPUT5)\"\n\"FREE FI(INPUT6)\"\nSAY 'NOTE: SEARCHING FOR 'LUNAME\nI = 1\nFOUND = \"FALSE\"\nDO FOREVER\n  MATCH = INDEX(INPUT1.I,LUNAME)\n  IF I = INPUT1.0 THEN\n    DO\n      SAY LUNAME || ' NOT FOUND IN TSPRINT1'\n      CALL TWO\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY LUNAME || ' FOUND IN TSPRINT1'\n          SAY ' '\n          SAY 'DO YOU WANT TO ACCESS TSPRINT1'\n          SAY '(Y)ES OR (N)O'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TSP1\n          ELSE\n            EXIT\n        END\n      ELSE\n        I = I + 1\n    END\nEND\n\nTWO:\nI = 1\nDO FOREVER\n  MATCH = INDEX(INPUT2.I,LUNAME)\n  IF I = INPUT2.0 THEN\n    DO\n      SAY LUNAME || ' NOT FOUND IN TSPRINT2'\n      CALL THREE\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY LUNAME || ' FOUND IN TSPRINT2'\n          SAY ' '\n          SAY 'DO YOU WANT TO ACCESS TSPRINT2'\n          SAY '(Y)ES OR (N)O'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TSP2\n          ELSE\n            EXIT\n        END\n      ELSE\n        I = I + 1\n    END\nEND\n\nTHREE:\nI = 1\nDO FOREVER\n  MATCH = INDEX(INPUT3.I,LUNAME)\n  IF I = INPUT3.0 THEN\n    DO\n      SAY LUNAME || ' NOT FOUND IN TSPRINT3'\n      CALL FOUR\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY LUNAME || ' FOUND IN TSPRINT3'\n          SAY ' '\n          SAY 'DO YOU WANT TO ACCESS TSPRINT3'\n          SAY '(Y)ES OR (N)O'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TSP3\n          ELSE\n            EXIT\n        END\n      ELSE\n        I = I + 1\n    END\nEND\n\nFOUR:\nI = 1\nDO FOREVER\n  MATCH = INDEX(INPUT4.I,LUNAME)\n  IF I = INPUT4.0 THEN\n    DO\n      SAY LUNAME || ' NOT FOUND IN TSPRINT4'\n      CALL FIVE\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY LUNAME || ' FOUND IN TSPRINT4'\n          SAY ' '\n          SAY 'DO YOU WANT TO ACCESS TSPRINT4'\n          SAY '(Y)ES OR (N)O'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TSP4\n          ELSE\n            EXIT\n        END\n      ELSE\n        I = I + 1\n    END\nEND\n\nFIVE:\nI = 1\nDO FOREVER\n  MATCH = INDEX(INPUT5.I,LUNAME)\n  IF I = INPUT5.0 THEN\n    DO\n      SAY LUNAME || ' NOT FOUND IN TSPRINT5'\n      CALL SIX\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY LUNAME || ' FOUND IN TSPRINT5'\n          SAY ' '\n          SAY 'DO YOU WANT TO ACCESS TSPRINT5'\n          SAY '(Y)ES OR (N)O'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TSP5\n          ELSE\n            EXIT\n        END\n      ELSE\n        I = I + 1\n    END\nEND\n\nSIX:\nI = 1\nDO FOREVER\n  MATCH = INDEX(INPUT6.I,LUNAME)\n  IF I = INPUT6.0 THEN\n    DO\n      SAY LUNAME || ' NOT FOUND IN TSPRINT6'\n      CALL MSG2\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY LUNAME || ' FOUND IN TSPRINT6'\n          SAY ' '\n          SAY 'DO YOU WANT TO ACCESS TSPRINT6'\n          SAY '(Y)ES OR (N)O'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TSP6\n          ELSE\n            EXIT\n        END\n      ELSE\n        I = I + 1\n    END\nEND\n\nMSG1: SAY \"\"\nSAY \"\"\nSAY \"----------------------------------------------------\"\nSAY \"\u00f8                                                  \u00f8\"\nSAY \"\u00f8  PRINTER ADRESS MUST BE MORE THE 4 CHARACTERS    \u00f8\"\nSAY \"\u00f8  AND LESS THEN 8                                 \u00f8\"\nSAY \"\u00f8                                                  \u00f8\"\nSAY \"----------------------------------------------------\"\nEXIT\n\nMSG2: SAY \"\"\nSAY \"----------------------------------------------------\"\nSAY \"\u00f8                                                  \u00f8\"\nSAY \"\u00f8  PRINTER ADRESS WAS NOT FOUND IN ANY TSPRINT     \u00f8\"\nSAY \"\u00f8  PLEASE CHECK YOUR INPUT                         \u00f8\"\nSAY \"\u00f8                                                  \u00f8\"\nSAY \"----------------------------------------------------\"\nEXIT\n\nTSP1:\nTSOEXEC TSPRINT\nEXIT\n\nTSP2:\nTSOEXEC TSP TSPRINT2\nEXIT\n\nTSP3:\nTSOEXEC TSP TSPRINT3\nEXIT\n\nTSP4:\nTSOEXEC TSP TSPRINT4\nEXIT\n\nTSP5:\nTSOEXEC TSP TSPRINT5\nEXIT\n\nTSP6:\nTSOEXEC TSP TSPRINT6\nEXIT\n\n./ ADD NAME=THEUTIL  0101-01016-01016-1428-00136-00136-00000-RACFCLS\n/* REXX */\n/****************************/\n/**THE PRINT MAINT         **/\n/****************************/\n\"PROF NOPREF\"\nARG INPUT\nPARSE VALUE INPUT WITH INPUT ':' PRN\n\nX = MSG('OFF')\n\nSELECT\nWHEN INPUT = \"CREATE\" THEN\n CALL ISISDSF\nWHEN INPUT = \"LIST\" THEN\nDO\n \"ALLOC DA('MAINT.ISIS.FAULTY.PRINTER') FI(XXX) OLD\"\n IF RC <> 0 THEN\n DO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+\"\n  SAY \"                          \u00f8 CREATE FACILITY IS \u00f8\"\n  SAY \"                          \u00f8 STILL BUSY         \u00f8\"\n  SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8\"\n  SAY \"                          +--------------------+\"\n END\nELSE\nDO\n \"FREE FI(XXX)\"\n \"ISPEXEC BROWSE DATASET('MAINT.ISIS.FAULTY.PRINTER')\"\nEND\nEND\nWHEN INPUT = \"SUMMARY\" THEN\nDO\n \"ALLOC DA('MAINT.ISIS.FAULTY.PRINTER.SUM') FI(XXX) OLD\"\n IF RC <> 0 THEN\n DO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+\"\n  SAY \"                          \u00f8 CREATE FACILITY IS \u00f8\"\n  SAY \"                          \u00f8 STILL BUSY         \u00f8\"\n  SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8\"\n  SAY \"                          +--------------------+\"\n END\nELSE\nDO\n \"FREE FI(XXX)\"\n \"ISPEXEC BROWSE DATASET('MAINT.ISIS.FAULTY.PRINTER.SUM')\"\nEND\nEND\nWHEN INPUT = \"PRINTER\" THEN\nDO\n \"ALLOC DA('MAINT.ISIS.PRINTER') FI(XXX) OLD\"\n IF RC <> 0 THEN\n DO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+ \"\n  SAY \"                          \u00f8 CREATE FACILITY IS \u00f8 \"\n  SAY \"                          \u00f8 STILL BUSY         \u00f8 \"\n  SAY \"                          \u00f8 PLEASE WAIT ....   \u00f8 \"\n  SAY \"                          +--------------------+ \"\n END\nELSE\nDO\n \"FREE FI(XXX)\"\n \"ISPEXEC EDIT DATASET('MAINT.ISIS.PRINTER')\"\nEND\nEND\nWHEN INPUT = \"PRINT1\" THEN\nDO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+ \"\n  SAY \"                          \u00f8 LISTING ROUTED TO  \u00f8 \"\n  SAY \"                          \u00f8 \"PRN\"           \u00f8 \"\n  SAY \"                          +--------------------+ \"\n PR = '\"PRINTOFF MAINT.ISIS.FAULTY.PRINTER DEST('PRN')\"'\n INTERPRET PR\nEND\nWHEN INPUT = \"PRINT2\" THEN\nDO\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\nSAY \" \"\n  SAY \"                          +--------------------+ \"\n  SAY \"                          \u00f8 LISTING ROUTED TO  \u00f8 \"\n  SAY \"                          \u00f8 \"PRN\"           \u00f8 \"\n  SAY \"                          +--------------------+ \"\n PR = '\"PRINTOFF MAINT.ISIS.FAULTY.PRINTER.SUM DEST('PRN')\"'\n INTERPRET PR\nEND\nOTHERWISE\nNOP\nEND\nEXIT\n./ ADD NAME=TSOALST  0101-01016-01016-1428-00045-00045-00000-RACFCLS\nPROC 0 PRINTER() OUTCLASS()\nWRITE\nWRITE\nWRITE\nSET PROCID = &SUBSTR(5:6,&SYSUID)\nSET SPROC =  &SUBSTR(5:&LENGTH(&SYSPROC),&SYSPROC)\nIF &PROCID NE AD AND &SPROC NE ADMN THEN +\nDO\n  WRITE\n  WRITE   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  WRITE   !!!!                  &SYSUID                      !!!!\n  WRITE   !!!!                  -------                      !!!!\n  WRITE   !!!!  YOU ARE NOT AUTHORIZED TO USE THIS FUNCTION  !!!!\n  WRITE   !!!!                                               !!!!\n  WRITE   !!!!  YOUR SYSTEM PROGRAMMERS ARE NOTIFIED OF THIS !!!!\n  WRITE   !!!!  ATTEMPT TO LIST USERID'S                     !!!!\n  WRITE   !!!!                                               !!!!\n  WRITE   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  SE '&SYSUID HET PROBEER OM USERIDS TE LIST',U(SYS0006),LOGON\n  SE '&SYSDATE &SYSTIME                     ',U(SYS0006),LOGON\n  GOTO XXX\nEND\nWRITE\nWRITE LIST ALL RACF USERS IN YOUR GROUP\nSET LYN = &STR(---------------------------------)\nWRITE &LYN\nWRITE\nWRITE JOBNAME            : &SYSUID.N\nWRITE OUTPUT DIRECTED TO : &PRINTER\nWRITE PRINTCLASS         : &OUTCLASS\nWRITE\nSET SLSPRNT = &STR(/*ROUTE PRINT )\nSUBMIT * END($$)\n//&SYSUID.L JOB (1,REOPS,OPS,01),'USERID LIST',MSGCLASS=V,\n//             NOTIFY=&SYSUID,CLASS=A\n//*************************************\n//*  PRINTS A LISTING OF ALL USERIDS  *\n//*************************************\n&SLSPRNT.&PRINTER\n//LISTING  EXEC PGM=IKJEFT01,DYNAMNBR=20\n//SYSTSPRT DD  SYSOUT=&OUTCLASS\n//SYSTSIN  DD  *\n   LISTUSER *\n$$\nXXX:WRITE\n./ ADD NAME=TSOKASTI 0101-01016-01016-1428-00257-00257-00000-RACFCLS\n/* REXX */\n/* TO INITIALIE CARTRIDGE */\n\n ARG INPUT\n PARSE VALUE INPUT WITH REQUEST ':' REASON ':' KAST1 ':' KAST2 ':',\n KAST3 ':' KAST4 ':' KAST5 ':' KAST6 ':' KAST7 ':' KAST8 ':' KAST9 ':',\n KAST10':' KAST11':' KAST12':' KAST13':' KAST14':' KAST15':' KAST16':',\n KAST17':' KAST18':' KAST19':' KAST20\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n X=MSG(OFF)\n\"ALLOC DA('TMS.KAST') F(KASTW1) OLD REUSE\"\nIF RC <> 0 THEN CALL BUSY\n\"ALLOC DA('TMS.TEMPKAST') F(KASTW2) OLD REUSE\"\nIF RC <> 0 THEN CALL BUSY\n\n\n TEL = 0\n IF DATATYPE(KAST1) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST2) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST3) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST4) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST5) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST6) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST7) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST8) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST9) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST10) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST11) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST12) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST13) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST14) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST15) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST16) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST17) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST18) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST19) = NUM THEN CALL FOUT1\n IF DATATYPE(KAST20) = NUM THEN CALL FOUT1\n\n IF KAST1 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST1\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST1\n  CALL WRITE1\n END\n IF KAST2 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST2\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST2\n  CALL WRITE1\n END\n IF KAST3 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST3\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST3\n  CALL WRITE1\n END\n IF KAST4 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST4\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST4\n  CALL WRITE1\n END\n IF KAST5 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST5\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST5\n  CALL WRITE1\n END\n IF KAST6 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST6\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST6\n  CALL WRITE1\n END\n IF KAST7 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST7\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST7\n  CALL WRITE1\n END\n IF KAST8 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST8\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST8\n  CALL WRITE1\n END\n IF KAST9 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST9\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST9\n  CALL WRITE1\n END\n IF KAST10 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST10\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST10\n  CALL WRITE1\n END\n IF KAST11 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST11\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST11\n  CALL WRITE1\n END\n IF KAST12 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST12\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST12\n  CALL WRITE1\n END\n IF KAST13 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST13\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST13\n  CALL WRITE1\n END\n IF KAST14 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST14\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST14\n  CALL WRITE1\n END\n IF KAST15 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST15\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST15\n  CALL WRITE1\n END\n IF KAST16 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST16\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST16\n  CALL WRITE1\n END\n IF KAST17 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST17\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST17\n  CALL WRITE1\n END\n IF KAST18 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST18\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST18\n  CALL WRITE1\n END\n IF KAST19 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST19\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST19\n  CALL WRITE1\n END\n IF KAST20 <> '' THEN\n DO\n  TEL = TEL + 1\n  VOL.TEL = KAST20\n  OUT1. = \"SYSUT1 INITT SER=\" || KAST20\n  CALL WRITE1\n END\n\nUSER = SYSVAR(SYSUID)\n\n/* WRITE TO STATS FILE */\n\nOUT2. = \"--------------------------------------------------------------\n-----------------------------------\"\nCALL WRITE2\nOUT2. = \" INIT JOB STARTED BY \"  USER \"  \" DATE(ORDERED) \"  \" TIME()\nCALL WRITE2\nOUT2. = \"REQUESTED BY : \" || REQUEST\nCALL WRITE2\nOUT2. = \"REASON       : \" || REASON\nCALL WRITE2\nOUT2. = \"CARTRIDGES INITIALIZED : \"\nCALL WRITE2\nA=1\nDO WHILE A <> TEL\n OUT2. = \"CARTRIDGE : \" || VOL.A\n CALL WRITE2\n A = A + 1\nEND\nOUT2. = \"\"\nCALL WRITE2\n\n\"EXECIO 0 DISKW KASTW1 (FINIS\"\n\"EXECIO 0 DISKW KASTW2 (FINIS\"\n\n\"FREE  FI(KASTW1)\"\n\"FREE  FI(KASTW2)\"\nCALL SUBMIT\n\n\nWRITE1:\n\"EXECIO 1 DISKW KASTW1 (STEM OUT1.\"\nRETURN\n\nWRITE2:\n\"EXECIO 1 DISKW KASTW2 (STEM OUT2.\"\nRETURN\n\nFOUT1:\nSAY \"                      +------------ WARNING --------------+ \"\nSAY \"                      |                                   | \"\nSAY \"                      | YOU ARE NOT ALLOWED TO INITIALIZE | \"\nSAY \"                      | ANY ROBOT CARTRIDGES              | \"\nSAY \"                      | THIS INIT JOB IS TERMINATED       | \"\nSAY \"                      |                                   | \"\nSAY \"                      +-----------------------------------+ \"\nEXIT\n\nBUSY:\nSAY \"                      +-----------------------------------+ \"\nSAY \"                      |                                   | \"\nSAY \"                      | INITITALIZATION DATASETS NOT      | \"\nSAY \"                      | AVAILABLE                         | \"\nSAY \"                      | ANOTHER INIT JOB IS RUNNING       | \"\nSAY \"                      | TRY LATER               .......   | \"\nSAY \"                      | ELSE CALL YOUR SYSTEM PROGRAMMER  | \"\nSAY \"                      | FOR HELP                          | \"\nSAY \"                      |                                   | \"\nSAY \"                      +-----------------------------------+ \"\nEXIT\n\nSUBMIT:\nSAY \"\"\nSAY \"\"\nSAY \"\"\nSAY \"                           +-------------------------+ \"\nSAY \"                           | KASTINIT JOB SUBMITTED  | \"\nSAY \"                           +-------------------------+ \"\nSAY \"\"\n\"SUBMIT ('SYS2.RACFCLST(KASTINIT)')\"\nEXIT\n./ ADD NAME=TSOUADD  0101-01016-01016-1428-00253-00253-00000-RACFCLS\n/* REXX */\n/* TO ADD USERID */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' PSW\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 4 TSTNR 5 IDNR\n\n\n NM = \"'\"NAME\"'\"\n\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH DUMMY 4 ADNR 5 DUMMY\n PARSE VALUE UID WITH AD3 4 DUMMY\n\n /**********/\n /* GROUP  */\n /**********/\n PR. =''\n /* PR.DNS = \"DIENSKRL\" */\n PR.DNSA = \"DNSA\"\n PR.DNSB = \"DNSB\"\n PR.DNSC = \"DNSC\"\n PR.DNSD = \"DNSD\"\n PR.DNSE = \"DNSE\"\n PR.DNSF = \"DNSF\"\n PR.DNSG = \"DNSG\"\n PR.DNSH = \"DNSH\"\n PR.DNSI = \"DNSI\"\n PR.DNSJ = \"DNSJ\"\n PR.DNSK = \"DNSK\"\n PR.KRI0 = \"KRS\"\n PR.NET0 = \"NETWORK\"\n PR.MED0 = \"MEDIA\"\n PR.OPS0 = \"OPERATOR\"\n PR.PRG0 = \"PROGRAMR\"\n PR.PRG1 = \"PROGRAMR\"\n PR.PRG2 = \"PROGRAMR\"\n PR.PRG3 = \"PROGRAMR\"\n\n /*************************************************************/\n /* MAXIMUM USERS FOR EVERY ADMINISTRATOR                     */\n /* THE FOURTH CHARACTER IS THE TEST CAHARACTER FOR EVERY ADM */\n /*************************************************************/\n MAX. = 0\n MAX.DNSA = 30\n MAX.DNSB = 30\n MAX.DNSC = 30\n MAX.DNSD = 30\n MAX.DNSE = 30\n MAX.DNSF = 30\n MAX.DNSG = 30\n MAX.DNSH = 30\n MAX.DNSE = 30\n MAX.DNSF = 30\n MAX.DNSI = 30\n MAX.DNSJ = 30\n MAX.DNSK = 30\n MAX.KRI0 = 30\n MAX.NET0 = 25\n MAX.MED0 = 15\n MAX.OPS0 = 50\n MAX.PRG0 = 07\n MAX.PRG1 = 75\n MAX.PRG2 = 75\n MAX.PRG3 = 75\n MAX.PRG4 = 00\n MAX.PRG5 = 00\n MAX.PRG6 = 00\n MAX.PRG7 = 00\n MAX.PRG8 = 00\n MAX.PRG9 = 00\n MAX.PRGA = 00\n\n /***************/\n /* SIGNON PROC */\n /***************/\n SN. = ''\n SN.DNS = \"DIENSKRL\"\n SN.KRI = \"SPFKRI\"\n SN.NET = \"NETWORK\"\n SN.MED = \"MEDIA\"\n SN.OPS = \"OPERATOR\"\n SN.PRG = \"PROGRAMR\"\n\n /**************/\n /* ACCOUNTING */\n /**************/\n AC. = ''\n AC.DNS = \"$REDNS\"\n AC.KRI = \"$REKRI\"\n AC.NET = \"$RENET\"\n AC.MED = \"$REMED\"\n AC.OPS = \"$REOPS\"\n AC.PRG = \"$REPRG\"\n\n /***********************/\n /* DEFAULT REGION SIZE */\n /***********************/\n RS. = 1024\n RS.DNS = 1024\n RS.KRI = 1024\n RS.NET = 2048\n RS.MED = 2048\n RS.OPS = 4096\n RS.PRG = 4096\n\n /***********************/\n /* MAXIMUM REGION SIZE */\n /***********************/\n RM. = 1024\n RM.DNS = 2048\n RM.KRI = 2048\n RM.NET = 2048\n RM.MED = 2048\n RM.OPS = 4096\n RM.PRG = 8192\n\n IF IDNR <= 0 OR IDNR >= 999 THEN CALL MSG1\n IF AD3 <> ID3 THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DNS\" THEN NOP\n  WHEN ID3 = \"KRI\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"MED\" THEN NOP\n  WHEN ID3 = \"OPS\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n IF TSTNR <> ADNR THEN CALL MSG2\n IF IDNR > MAX.ID4 THEN CALL MSG3\n\n DSN =  ID'.JCL.LIB'\n AT1 =  \"ALLOC FI(JCLLIB) SHR DA('\"ID\".JCL.LIB')\"\n AT2 =  \"ALLOC DA('\"ID\".JCL.LIB') SP(15,15) TRACKS DSNTYPE=LIBRARY\",\n     \"DIR(20) DSORG(PO) RECFM(F B) LRECL(80) BLKSIZE(18400) FI(JCLLIB)\"\n AL1 = '\"'AT1'\"'\n AL2 = '\"'AT2'\"'\n AD1 = '\"AD\" 'ID'\".* GENERIC UACC(NONE)\"'\n ADD = '\"ADDUSER ('ID') NAME('NM') DFLTGRP('PR.ID4')',\n        'PASSWORD('PSW')',\n        'OWNER('PR.ID4')',\n        'TSO (ACCTNUM('AC.ID3') PROC('SN.ID3') MAXSIZE('RM.ID3')',\n        'SIZE('RS.ID3') UNIT(SYSDA))\"'\n FR = '\"FREE FI(JCLLIB)\"'\n COPY1 = \"SMCOPY FROMDATASET('SYS2.RACFCLST($$$COIBM)')\",\n         \"TODATASET('\"ID\".JCL.LIB($$$COIBM)')\"\n COPY2 = \"SMCOPY FROMDATASET('SYS2.RACFCLST(COMPRESS)')\",\n         \"TODATASET('\"ID\".JCL.LIB(COMPRESS)')\"\n\n COPY1 = '\"'COPY1'\"'\n COPY2 = '\"'COPY2'\"'\n\n ALIAS = '\"DEFINE ALIAS (NAME('ID') REL(CAT.TSOUSER.UCAT))\"'\n IF IDNR <= MAX.ID4 THEN\n DO\n  MS = MSG('OFF')\n  INTERPRET ALIAS\n  IF ID3 <> DNS THEN\n  DO\n   INTERPRET AL1\n   IF RC <> 0 THEN INTERPRET AL2\n   IF RC = 0 THEN\n    SAY \"                       DATASET: '\"DSN\"' ALLOCATED\"\n   INTERPRET COPY1\n   INTERPRET COPY2\n  END\n\n  INTERPRET ADD\n  IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   SAY \"                       NAME        :\" NAME\n   SAY \"                       PASSWORD    :\" PSW\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY ADDED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT ADDED DUE TO CONDITION CODE\"\n   SAY \"                       IT IS POSSIBLE THAT \"ID\" ALREADY EXIST\"\n  END\n\n  INTERPRET AD1\n  IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   SAY \"\"\n   SAY \"                   DATASET SUCCESSFULLY ADDED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       DATASET NOT ADDED DUE TO CONDITION CODE\"\n   SAY \"                       PHONE SUPPORT\"\n  END\n\n  IF ID3 <> DNS THEN INTERPRET FR\n  MS = MSG('ON')\n  EXIT\n END\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"               +---------------------------------------+\"\n  SAY \"               \u00f8 YOU ARE NOT AUTHORIZED TO ADD THIS ID \u00f8\"\n  SAY \"               \u00f8                                       \u00f8\"\n  SAY \"               \u00f8 ONLY \"AD3||ADNR\"*** ALLOWED                  \u00f8\"\n  SAY \"               +---------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n  MSG3: SAY \"\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"               \u00f8 INVALID USERID - NUMERIC VALUE TO LARGE \u00f8\"\n  SAY \"               \u00f8                                         \u00f8\"\n  SAY \"               \u00f8   PLEASE CALL YOUR SYSTEM PROGRAMMER    \u00f8\"\n  SAY \"               +-----------------------------------------+ \"\n  SAY \"\"\n  EXIT\n./ ADD NAME=TSOUDEL  0101-01016-01016-1428-00109-00109-00000-RACFCLS\n/* REXX */\n ARG INPUT\n PARSE VALUE INPUT WITH ID\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 4 TSTNR 5 IDNR\n\n\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH DUMMY 4 ADNR 5 DUMMY\n PARSE VALUE UID WITH AD3 4 DUMMY\n\n IF IDNR <= 0 OR IDNR >= 999 THEN CALL MSG1\n IF AD3 <> ID3 THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DNS\" THEN NOP\n  WHEN ID3 = \"KRI\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"MED\" THEN NOP\n  WHEN ID3 = \"OPS\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n IF TSTNR <> ADNR THEN CALL MSG2\n\n DEL = '\"DELUSER ('ID')\"'\n DE1 = '\"DD\" 'ID'\".* GENERIC NOSET\"'\n\n MS = MSG('OFF')\n INTERPRET DE1\n IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       USERID      :\" ID\n   SAY \"\"\n   SAY \"            DATASET SUCCESSFULLY DELETED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"               DATASET \" ID \"NOT DELETED\"\n   SAY \"\"\n   SAY \"                 PHONE SYSTEM SUPPORT\"\n  END\n INTERPRET DEL\n IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       USERID      :\" ID\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY DELETED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT DELETED\"\n   SAY \"\"\n   SAY \"                       IT IS POSSIBLE THAT\"\n   SAY \"                       THE ID DOES NOT EXITS\"\n   SAY \"\"\n   SAY \"                       ELSE:\"\n   SAY \"                       PLEASE CALL YOUR\"\n   SAY \"                       SYSTEM PROGRAMMER\"\n   SAY \"                       FOR HELP\"\n  END\n  MS = MSG('ON')\n  EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"            +------------------------------------------+\"\n  SAY \"            \u00f8 YOU ARE NOT AUTHORIZED TO DELETE THIS ID \u00f8\"\n  SAY \"            \u00f8                                          \u00f8\"\n  SAY \"            \u00f8 ONLY \"AD3||ADNR\"*** ALLOWED                     \u00f8\"\n  SAY \"            +------------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n./ ADD NAME=TSOULST  0101-01016-01016-1428-00082-00082-00000-RACFCLS\n/* REXX */\n ARG INPUT\n PARSE VALUE INPUT WITH ID\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 4 TSTNR 5 IDNR\n\n\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH DUMMY 4 ADNR 5 DUMMY\n PARSE VALUE UID WITH AD3 4 DUMMY\n\n IF IDNR <= 0 OR IDNR >= 999 THEN CALL MSG1\n IF AD3 <> ID3 THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DNS\" THEN NOP\n  WHEN ID3 = \"KRI\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"MED\" THEN NOP\n  WHEN ID3 = \"OPS\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n  WHEN ID3 = \"RAD\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n\n LST = '\"LISTUSER ('ID') \"'\n\n MS = MSG('OFF')\n INTERPRET LST\n IF RC <> 0 THEN\n DO\n  SAY \"\"\n  SAY \"\"\n  SAY \"\"\n  SAY \"                       RETURN CODE :\" RC\n  SAY \"\"\n  SAY \"                       \"ID \"NOT LISTED\"\n  SAY \"\"\n  SAY \"                       IT IS POSSIBLE THAT\"\n  SAY \"                       THE ID DOES NOT EXITS\"\n  SAY \"\"\n  SAY \"                       ELSE:\"\n  SAY \"                       PLEASE CALL YOUR\"\n  SAY \"                       SYSTEM PROGRAMMER\"\n  SAY \"                       FOR HELP\"\n END\n  MS = MSG('ON')\n  EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"\"\n  SAY \"\"\n  SAY \"\"\n  SAY \"\"\n  SAY \"\"\n  SAY \"             +----------------------------------------+\"\n  SAY \"             \u00f8 YOU ARE NOT AUTHORIZED TO LIST THIS ID \u00f8\"\n  SAY \"             \u00f8                                        \u00f8\"\n  SAY \"             \u00f8 ONLY \"AD3||ADNR\"*** ALLOWED                   \u00f8\"\n  SAY \"             +----------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n./ ADD NAME=TSOURES  0101-01016-01016-1428-00098-00098-00000-RACFCLS\n/* REXX */\n/* REXX TO CHANGE PASSWORD, NAME OF EXISTING USERID */\n\n ARG INPUT\n PARSE VALUE INPUT WITH ID ':' NAME ':' PSW\n PARSE VALUE ID WITH ID3 4 DUMMY\n PARSE VALUE ID WITH ID4 5 DUMMY\n PARSE VALUE ID WITH DUMMY 4 TSTNR 5 IDNR\n\n IF NAME <> '' THEN NM = \"'\"NAME\"'\"\n\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n SAY \"\"\n\n UID = SYSVAR(SYSUID)\n PARSE VALUE UID WITH DUMMY 4 ADNR 5 DUMMY\n PARSE VALUE UID WITH AD3 4 DUMMY\n\n\n IF IDNR <= 0 OR IDNR >= 999 THEN CALL MSG1\n IF AD3 <> ID3  /* OR AD3 <> \"DOK\" */ THEN CALL MSG2\n\n SELECT\n  WHEN ID3 = \"DNS\" THEN NOP\n  WHEN ID3 = \"KRI\" THEN NOP\n  WHEN ID3 = \"NET\" THEN NOP\n  WHEN ID3 = \"MED\" THEN NOP\n  WHEN ID3 = \"OPS\" THEN NOP\n  WHEN ID3 = \"PRG\" THEN NOP\n OTHERWISE\n  CALL MSG1\n END\n\n /* IF TSTNR <> ADNR THEN CALL MSG2 */\n\n IF NAME  <> '' THEN\n  ALT = '\"ALTUSER ('ID') NAME('NM') PASSWORD('PSW') RESUME\"'\n ELSE\n  ALT = '\"ALTUSER ('ID') PASSWORD('PSW') RESUME\"'\n\n MS = MSG('OFF')\n INTERPRET ALT\n IF RC = 0 THEN\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"                       USERID      :\" ID\n   IF NAME <> '' THEN\n   SAY \"                       NAME        :\" NAME\n   SAY \"                       PASSWORD    :\" PSW\n   SAY \"\"\n   SAY \"                       SUCCESSFULLY CHANGED\"\n  END\n  ELSE\n  DO\n   SAY \"\"\n   SAY \"                       RETURN CODE :\" RC\n   SAY \"\"\n   SAY \"                       \"ID \"NOT CHANGED\"\n   SAY \"\"\n   SAY \"                       \"IT IS POSSIBLE THAT\"\n   SAY \"                       \"THE ID DOES NOT EXITS\"\n   SAY \"\"\n   SAY \"                       ELSE:\"\n   SAY \"                       PLEASE CALL YOUR\"\n   SAY \"                       SYSTEM PROGRAMMER\"\n   SAY \"                       FOR HELP\"\n  END\n  MS = MSG('ON')\n  EXIT\n\n  /***********/\n  /* MESAGES */\n  /***********/\n\n  MSG1: SAY \"\"\n  SAY \"                       +----------------+ \"\n  SAY \"                       \u00f8 INVALID USERID \u00f8 \"\n  SAY \"                       \u00f8                \u00f8 \"\n  SAY \"                       \u00f8 RESPECIFY .... \u00f8 \"\n  SAY \"                       +----------------+ \"\n  SAY \"\"\n  EXIT\n\n  MSG2: SAY \"\"\n  SAY \"            +------------------------------------------+\"\n  SAY \"            \u00f8 YOU ARE NOT AUTHORIZED TO CHANGE THIS ID \u00f8\"\n  SAY \"            \u00f8                                          \u00f8\"\n  SAY \"            \u00f8 ONLY \"AD3||ADNR\"*** ALLOWED                     \u00f8\"\n  SAY \"            +------------------------------------------+\"\n  SAY \"\"\n  EXIT\n\n./ ADD NAME=TSPDAREK 0101-01016-01016-1428-00345-00345-00000-RACFCLS\n/* THIS REXX PROCEDURE SEARCH FOR SPESIFIC PRINTER IN TSP BATCH */\nSAY ' '\nSAY ' '\nSAY ' '\nSAY ' '\nBEGIN:\nARG LUNAME\nIF LUNAME = \"\" THEN\n  IF LUNAME = \"END\" THEN\n    EXIT\n  ELSE\n    DO\n      SAY ' '\n      SAY 'Specify the VTAM LUNAME or END to finish?'\n      PARSE UPPER EXTERNAL LUNAME\n      IF LUNAME = \"END\" THEN CALL END\n    END\nSTRING_LENGTH = LENGTH(LUNAME)\nIF STRING_LENGTH < 4 | STRING_LENGTH > 8 THEN\n  DO UNTIL STRING_LENGTH > 3 & STRING_LENGTH < 9                        020006\n    IF STRING_LENGTH < 4 THEN                                           020006\n      SAY 'You must at least specify 4 characters!!!'                   020006\n    IF STRING_LENGTH > 8 THEN                                           020006\n      SAY 'The name can only be up to 8 characters - See...'            020006\n    SAY 'Guess what? - Respecify the VTAM LUNAME or END?'               030006\n    PARSE UPPER EXTERNAL LUNAME                                         040000\n    IF LUNAME = \"END\" THEN EXIT\n    STRING_LENGTH = LENGTH(LUNAME)                                      000400\n  END                                                                   040000\n\"ALLOC FI(INPUT1) DA(SYS2.TSPRINT.ASMJES1) SHR REUSE\"\n\"ALLOC FI(INPUT2) DA(SYS2.TSPRINT.ASMJES2) SHR REUSE\"\n\"ALLOC FI(INPUT3) DA(SYS2.TSPRINT.ASMJES3) SHR REUSE\"\n\"ALLOC FI(INPUT4) DA(SYS2.TSPRINT.ASMJES4) SHR REUSE\"\n\"ALLOC FI(INPUT5) DA(SYS2.TSPRINT.ASMJES5) SHR REUSE\"\n\"ALLOC FI(INPUT6) DA(SYS2.TSPRINT.ASMJES6) SHR REUSE\"\n\"ALLOC FI(INPUT7) DA(SYS2.TSPRINT.ASMJES7) SHR REUSE\"\n\"ALLOC FI(INPUT8) DA(SYS2.TSPRINT.ASMJES8) SHR REUSE\"\n\"ALLOC FI(INPUT9) DA(SYS2.TSPRINT.ASMJES9) SHR REUSE\"\n\"ALLOC FI(INPUT10) DA(SYS2.TSPRINT.ASMOFS) SHR REUSE\"\n\"ALLOC FI(INPUT0) DA(SYS2.JES2PRT) SHR REUSE\"\n\"EXECIO * DISKR INPUT1 (FINIS STEM INPUT1.\"\n\"EXECIO * DISKR INPUT2 (FINIS STEM INPUT2.\"\n\"EXECIO * DISKR INPUT3 (FINIS STEM INPUT3.\"\n\"EXECIO * DISKR INPUT4 (FINIS STEM INPUT4.\"\n\"EXECIO * DISKR INPUT5 (FINIS STEM INPUT5.\"\n\"EXECIO * DISKR INPUT6 (FINIS STEM INPUT6.\"\n\"EXECIO * DISKR INPUT7 (FINIS STEM INPUT7.\"\n\"EXECIO * DISKR INPUT8 (FINIS STEM INPUT8.\"\n\"EXECIO * DISKR INPUT9 (FINIS STEM INPUT9.\"\n\"EXECIO * DISKR INPUT0 (FINIS STEM INPUT0.\"\n\"EXECIO * DISKR INPUT10 (FINIS STEM INPUT10.\"\n\"FREE FI(INPUT1)\"\n\"FREE FI(INPUT2)\"\n\"FREE FI(INPUT3)\"\n\"FREE FI(INPUT4)\"\n\"FREE FI(INPUT5)\"\n\"FREE FI(INPUT6)\"\n\"FREE FI(INPUT7)\"\n\"FREE FI(INPUT8)\"\n\"FREE FI(INPUT9)\"\n\"FREE FI(INPUT0)\"\n\"FREE FI(INPUT10)\"\nSAY 'NOTE: You ask me to look for 'LUNAME\nI = 1\nFOUND = \"FALSE\"\nDO FOREVER\n  MATCH = INDEX(INPUT1.I,LUNAME)\n  IF I = INPUT1.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT1'\n      CALL TWO\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT1 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TWO\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nTWO:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT2.I,LUNAME)\n  IF I = INPUT2.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT2'\n      CALL THREE\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT2 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL THREE\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nTHREE:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT3.I,LUNAME)\n  IF I = INPUT3.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT3'\n      CALL FOUR\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT3 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL FOUR\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nFOUR:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT4.I,LUNAME)\n  IF I = INPUT4.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT4'\n      CALL FIVE\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT4 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL FIVE\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nFIVE:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT5.I,LUNAME)\n  IF I = INPUT5.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT5'\n      CALL SIX\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT5 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL SIX\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nSIX:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT6.I,LUNAME)\n  IF I = INPUT6.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT6'\n      CALL SEVEN\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT6 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL SEVEN\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nseven:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT7.I,LUNAME)\n  IF I = INPUT7.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT7'\n      CALL eight\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT7 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL eight\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\neight:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT8.I,LUNAME)\n  IF I = INPUT8.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT8'\n      CALL nine\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT8 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL nine\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nNINE:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT9.I,LUNAME)\n  IF I = INPUT9.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT9'\n      CALL TEN\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT9 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TEN\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nTEN:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT10.I,LUNAME)\n  IF I = INPUT10.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPOFS'\n      CALL JES2\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPOFS !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL JES2\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nJES2:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT0.I,LUNAME)\n  IF I = INPUT0.0 THEN\n    DO\n      SAY 'Unfortunately no match found in SYS2.JES2PRT'\n      CALL BEGIN\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in SYS2.JES2PRT !!'\n          CALL BEGIN\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nEND:\nEXIT\n./ ADD NAME=TSPFIND  0101-01016-01016-1428-00345-00345-00000-RACFCLS\n/* THIS REXX PROCEDURE SEARCH FOR SPESIFIC PRINTER IN TSP BATCH */\nSAY ' '\nSAY ' '\nSAY ' '\nSAY ' '\nBEGIN:\nARG LUNAME\nIF LUNAME = \"\" THEN\n  IF LUNAME = \"END\" THEN\n    EXIT\n  ELSE\n    DO\n      SAY ' '\n      SAY 'Specify the VTAM LUNAME or END to finish?'\n      PARSE UPPER EXTERNAL LUNAME\n      IF LUNAME = \"END\" THEN CALL END\n    END\nSTRING_LENGTH = LENGTH(LUNAME)\nIF STRING_LENGTH < 4 | STRING_LENGTH > 8 THEN\n  DO UNTIL STRING_LENGTH > 3 & STRING_LENGTH < 9                        020006\n    IF STRING_LENGTH < 4 THEN                                           020006\n      SAY 'You must at least specify 4 characters!!!'                   020006\n    IF STRING_LENGTH > 8 THEN                                           020006\n      SAY 'The name can only be up to 8 characters - See...'            020006\n    SAY 'Guess what? - Respecify the VTAM LUNAME or END?'               030006\n    PARSE UPPER EXTERNAL LUNAME                                         040000\n    IF LUNAME = \"END\" THEN EXIT\n    STRING_LENGTH = LENGTH(LUNAME)                                      000400\n  END                                                                   040000\n\"ALLOC FI(INPUT1) DA(SYS2.TSPRINT.ASMJES1) SHR REUSE\"\n\"ALLOC FI(INPUT2) DA(SYS2.TSPRINT.ASMJES2) SHR REUSE\"\n\"ALLOC FI(INPUT3) DA(SYS2.TSPRINT.ASMJES3) SHR REUSE\"\n\"ALLOC FI(INPUT4) DA(SYS2.TSPRINT.ASMJES4) SHR REUSE\"\n\"ALLOC FI(INPUT5) DA(SYS2.TSPRINT.ASMJES5) SHR REUSE\"\n\"ALLOC FI(INPUT6) DA(SYS2.TSPRINT.ASMJES6) SHR REUSE\"\n\"ALLOC FI(INPUT7) DA(SYS2.TSPRINT.ASMJES7) SHR REUSE\"\n\"ALLOC FI(INPUT8) DA(SYS2.TSPRINT.ASMJES8) SHR REUSE\"\n\"ALLOC FI(INPUT9) DA(SYS2.TSPRINT.ASMJES9) SHR REUSE\"\n\"ALLOC FI(INPUT10) DA(SYS2.TSPRINT.ASMOFS) SHR REUSE\"\n\"ALLOC FI(INPUT0) DA(SYS2.JES2PRT) SHR REUSE\"\n\"EXECIO * DISKR INPUT1 (FINIS STEM INPUT1.\"\n\"EXECIO * DISKR INPUT2 (FINIS STEM INPUT2.\"\n\"EXECIO * DISKR INPUT3 (FINIS STEM INPUT3.\"\n\"EXECIO * DISKR INPUT4 (FINIS STEM INPUT4.\"\n\"EXECIO * DISKR INPUT5 (FINIS STEM INPUT5.\"\n\"EXECIO * DISKR INPUT6 (FINIS STEM INPUT6.\"\n\"EXECIO * DISKR INPUT7 (FINIS STEM INPUT7.\"\n\"EXECIO * DISKR INPUT8 (FINIS STEM INPUT8.\"\n\"EXECIO * DISKR INPUT9 (FINIS STEM INPUT9.\"\n\"EXECIO * DISKR INPUT0 (FINIS STEM INPUT0.\"\n\"EXECIO * DISKR INPUT10 (FINIS STEM INPUT10.\"\n\"FREE FI(INPUT1)\"\n\"FREE FI(INPUT2)\"\n\"FREE FI(INPUT3)\"\n\"FREE FI(INPUT4)\"\n\"FREE FI(INPUT5)\"\n\"FREE FI(INPUT6)\"\n\"FREE FI(INPUT7)\"\n\"FREE FI(INPUT8)\"\n\"FREE FI(INPUT9)\"\n\"FREE FI(INPUT0)\"\n\"FREE FI(INPUT10)\"\nSAY 'NOTE: You ask me to look for 'LUNAME\nI = 1\nFOUND = \"FALSE\"\nDO FOREVER\n  MATCH = INDEX(INPUT1.I,LUNAME)\n  IF I = INPUT1.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT1'\n      CALL TWO\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT1 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TWO\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nTWO:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT2.I,LUNAME)\n  IF I = INPUT2.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT2'\n      CALL THREE\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT2 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL THREE\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nTHREE:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT3.I,LUNAME)\n  IF I = INPUT3.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT3'\n      CALL FOUR\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT3 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL FOUR\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nFOUR:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT4.I,LUNAME)\n  IF I = INPUT4.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT4'\n      CALL FIVE\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT4 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL FIVE\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nFIVE:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT5.I,LUNAME)\n  IF I = INPUT5.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT5'\n      CALL SIX\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT5 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL SIX\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nSIX:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT6.I,LUNAME)\n  IF I = INPUT6.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT6'\n      CALL SEVEN\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT6 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL SEVEN\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nseven:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT7.I,LUNAME)\n  IF I = INPUT7.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT7'\n      CALL eight\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT7 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL eight\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\neight:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT8.I,LUNAME)\n  IF I = INPUT8.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT8'\n      CALL nine\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT8 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL nine\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nNINE:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT9.I,LUNAME)\n  IF I = INPUT9.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPRINT9'\n      CALL TEN\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPRINT9 !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL TEN\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nTEN:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT10.I,LUNAME)\n  IF I = INPUT10.0 THEN\n    DO\n      SAY 'Unfortunately no match found in batch of TSPOFS'\n      CALL JES2\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in batch of TSPOFS !!'\n          SAY ' '\n          SAY 'Do you want to search throught the next TSPRINTS(Y/N)?'\n          PARSE UPPER EXTERNAL ANSWER\n          IF ANSWER = \"Y\" THEN\n            CALL JES2\n          ELSE\n            CALL JES2\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nJES2:\ni = 1\nDO FOREVER\n  MATCH = INDEX(INPUT0.I,LUNAME)\n  IF I = INPUT0.0 THEN\n    DO\n      SAY 'Unfortunately no match found in SYS2.JES2PRT'\n      CALL BEGIN\n    END\n  ELSE\n    DO\n      IF MATCH > 0 THEN\n        DO\n          SAY 'There is a match in SYS2.JES2PRT !!'\n          CALL BEGIN\n        END\n      ELSE\n        I = I + 1\n    END\nEND\nEND:\nEXIT\n./ ADD NAME=X        0101-01016-01016-1428-00037-00037-00000-RACFCLS\n/* REXX */\nX = MSG('OFF')\nCVTADDR   = STORAGE(00000010,4)\nCVTSNAME@ = D2X(X2D(C2X(CVTADDR))+X2D(154))\nSNAME     = STORAGE(CVTSNAME@,4)\nUID       = SYSVAR(SYSUID)\nSAY\"*** LOGGING OFF FROM SYSTEM\" SNAME \"***\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP0.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP1.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP2.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP3.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP4.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP5.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP6.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG0.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG1.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG2.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG3.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG4.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG5.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG6.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP0.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP1.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP2.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP3.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP4.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP5.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP6.LIST\"\n\"DELETE \"UID\".NETVAS1.ADD\"\n\"DELETE \"UID\".NETVAS2.ADD\"\n\"DELETE \"UID\".NETVAS3.ADD\"\n\"DELETE \"UID\".NETVAS4.ADD\"\n\"DELETE \"UID\".NETVAS1.LISTALL\"\n\"DELETE \"UID\".NETVAS2.LISTALL\"\n\"DELETE \"UID\".NETVAS3.LISTALL\"\n\"DELETE \"UID\".NETVAS4.LISTALL\"\n\"LOGOFF\"\n./ ADD NAME=X1       0101-01016-01016-1428-00036-00036-00000-RACFCLS\n/* REXX */\nX = MSG('OFF')\nCVTADDR   = STORAGE(00000010,4)\nCVTSNAME@ = D2X(X2D(C2X(CVTADDR))+X2D(154))\nSNAME     = STORAGE(CVTSNAME@,4)\nUID       = SYSVAR(SYSUID)\nSAY\"*** LOGGING OFF FROM SYSTEM\" SNAME \"***\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP0.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP1.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP2.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP3.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP4.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP5.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP6.CNTL\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG0.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG1.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG2.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG3.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG4.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG5.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFLOG6.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP0.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP1.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP2.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP3.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP4.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP5.LIST\"\n\"DELETE \"UID\".\"SNAME\".SPFTEMP6.LIST\"\n\"DELETE \"UID\".NETVAS1.ADD\"\n\"DELETE \"UID\".NETVAS2.ADD\"\n\"DELETE \"UID\".NETVAS3.ADD\"\n\"DELETE \"UID\".NETVAS4.ADD\"\n\"DELETE \"UID\".NETVAS1.LISTALL\"\n\"DELETE \"UID\".NETVAS2.LISTALL\"\n\"DELETE \"UID\".NETVAS3.LISTALL\"\n\"DELETE \"UID\".NETVAS4.LISTALL\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFPNLS": {"ttr": 8708, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x01o\\x01\\x01\\x01o\\x14\"\\rC\\rC\\x00\\x00\\xc5\\xc4\\xd9\\xd6\\xe2\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-16T00:00:00", "modifydate": "2001-01-16T14:22:00", "lines": 3395, "newlines": 3395, "modlines": 0, "user": "EDROSS"}, "text": "./ ADD NAME=COMP05   0101-01016-01016-1416-00027-00027-00000-RACFPNL\n)ATTR\n  \u00a2 TYPE(INPUT) INTENS(HIGH) PAD(NULLS)\n)BODY\n%-------------------------- RACF LISTING DEFAULTS  -----------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+LISTING DEFAULT OPTIONS\n+-----------------------\n+SYSOUT class    %===>_Z+             Default to Class V\n+Local printer ID%===>_Z       +      Default to LOCAL\n%                                                                              +\n%\n%   1 +ACCEPT      - Accept listing options\n%   X +EXIT        - Terminate without generate listing\n)INIT\n  .HELP = RACFH051\n  .ZVARS = '(LSTCLA LSTPID)'\n  IF (&LSTCLA = '')       &LSTCLA = 'V'\n  IF (&LSTPID = '')       &LSTPID = 'LOCAL'\n  .CURSOR = ZCMD\n\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n     1,'CMD(%COMALST PRINTER(&LSTPID) OUTCLASS(&LSTCLA))'\n     ' ',' '\n     X,'EXIT')\n)END\n./ ADD NAME=COMP06   0101-01016-01016-1416-00033-00033-00000-RACFPNL\n)ATTR\n  \u00a2 TYPE(INPUT) INTENS(HIGH) PAD(NULLS)\n)BODY\n%-------------------------- RACF LISTING DEFAULTS  -----------------------------\n%COMMAND ===>_ZCMD+                                                            +\n+\n+\n+\n+LAST ACCESS DATE   %===>_Z         +   Date in the form YYYY-MM-DD\n+GROUP to be listed %===>_Z       +     NO DEFAULT\n%                                                                              +\n% For a list of valid groups                                                   +\n%                                                                              +\n% Phone Supt E Ross      (012) 421-0654/5                                      +\n%       Supt H Potgieter (012) 421-0767                                        +\n%                                                                              +\n% OR FAX (012) 421-0606                                                        +\n%\n%   1 +ACCEPT      - Accept listing options\n%   X +EXIT        - Terminate without generate listing\n)INIT\n  .HELP = RACFH051\n  .ZVARS = '(LSTCLA LSTPID)'\n  IF (&LSTCLA = '')       &LSTCLA = '1990-01-01'\n  IF (&LSTPID = '')       &LSTPID = 'UNKNOWN'\n  .CURSOR = ZCMD\n\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n     1,'CMD(%RACFEXEC &LSTCLA &LSTPID)'\n     ' ',' '\n     X,'EXIT')\n)END\n./ ADD NAME=HSMUTIL  0101-01016-01016-1416-00058-00058-00000-RACFPNL\n)BODY\n%-----&ZSYSID--------------  HSM DATASET UTILITY  -------------------&ZSYSID----\n%OPTION  ===>_ZCMD                                                             +\n%\n%   L / Blank+- List HSM dataset          %R+- Recover HSM data set\n%\n%\n%\n+   DATA SET NAME %===>_DSN                                                    +\n%\n%\n%\n%   Required if recovering a dataset:\n+   ---------------------------------\n+   GENERATION    %===>_GEN+\n+   VOLUME SERIAL %===>_VOL   +%(Optional)\n+   UNIT NAME     %===>_UNT +  %(Optional)\n+\n+   REPLACE       %===>_A+\n+\n+   NEW DATA SET NAME %===>_DSN2                                               +\n+\n)INIT\n  .HELP = ISR32000\n  IF ( &DSN = ' ' )\n    &VOL = &Z\n  IF ( &DSN ^= ' ' )\n    .CURSOR = ZCMD\n  IF ( .CURSOR = ' ' )\n    .CURSOR = ZCMD\n  &a = 'N'\n  &gen = 000\n)PROC\n&ZQ = TRUNC(&ZCMD,'.')\nIF (&ZQ = ' ')\n  &ZQ = 'L'\n    ver (&dsn,nonblank)\n    ver (&dsn,dsname)\n    ver (&a,nonblank)\nif (&zq = 'R')\n if (&a = 'N')\n   ver (&gen,range,000,009)\n   ver (&gen,nonblank)\n   ver (&dsn2,nonblank)\n   ver (&dsn2,dsname)\n if (&zq = 'R')\n  if (&a = 'Y')\n   ver (&gen,range,000,009)\n   ver (&gen,nonblank)\n   ver (&a,nonblank)\nVPUT ( DSN ) PROFILE\n  &ZSEL = TRANS( &ZQ\n                L,'cmd(hsmcmd LIST:&dsn)'\n                R,'cmd(hsmcmd RECOVER:&dsn:&gen:&vol:&unt:&a:&dsn2)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=ISP@ADMN 0101-01016-01016-1416-00074-00074-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%-------- &zsysid ---------------+Administrator%---------------- &zsysid -------\n%OPTION ===>_ZCMD                                           +USERID   -%&ZUSER\n+                                                           +TIME     - &ZTIME\n+    USERID  :_UID    +                                     +TERMINAL - &ZTERM\n+    NAME    :_USNAME              +  %Name & Surname (20 Characters) +\n+    PASSWORD:$UPSW    +\n+\n+------- ENTER USERID AND PASSWORD ---------------------------------------------\n%\n%   1 +ADD      - Add a new RACF user\n%   2 +CHANGE   - Change a users password / name\n%   3 +DELETE   - Delete a user\n%   4 +LISTS    - List a user\n%   5 +LIST ALL - List all users\n%\n%   C +JOB OUTPUT    - Check job output\n%   X +EXIT          - Terminate ISPF using log and list defaults\n%\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = RACFH00     /* CHANGE THIS TO REFLECT HELP SCREEN*/\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = RACFH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = RACFH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &UID = ' '\n  &UPSW = ' '\n  &USNAME = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 1,2,3,4)\n     VER(&UID, NONBLANK)\n     VER(&UID, LEN, '=', 7)\n     &NR = TRUNC(&UID,3)\n     VER(&NR, PICT, AAA)\n  IF (&OPTN = 1)\n     VER(&USNAME,NONBLANK, MSG = ICHM413A)\n     VER(&USNAME,LEN, '<=', 21)\n     VER(&UPSW, NONBLANK)\n     &QNAME = TRUNC(&USNAME,1) /* get first char        @ZA85750*/\n     IF (&QNAME = '''')        /* is first char a quote @ZA85750*/\n       .MSG = ICHM413A         /* issue message         @ZA85750*/\n       .CURSOR = USNAME        /* point to name         @ZA85750*/\n  &VALCHK = ICHC41             /* check for end quote   @ZA91987*/\n  IF (&OPTN = 2)\n     VER(&UPSW, NONBLANK)\n  VPUT (UID NAME UPSW) PROFILE\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%TSOUADD &UID:&USNAME:&UPSW)'\n   2,'CMD(%TSOURES &UID:&USNAME:&UPSW)'\n   3,'CMD(%TSOUDEL &UID)'\n   4,'CMD(%TSOULST &UID)'\n   5,'PANEL(RACFP05)'\n   C,'PGM(isfisp) parm(H)'\n   ' ',' '\n   X,'exit'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@AUT  0101-01016-01016-1416-00087-00087-00000-RACFPNL\n)ATTR\n\u00a2 type(text) attn(on)\n^ area(dynamic) extend(on) scroll(on)\n$ type(dataout) intens(high)\n@ type(dataout) intens(low)\n)BODY\n%--- &ZSYSID --------------- MASTER APPLICATION MENU --------------- &ZSYSID -%\n%OPTION ===>_ZCMD                                     +SCROLL ===>_PSCR%\n%                                                                      %\n%                                                  +USERID - &ZUSER    %\n%                                                  +TIME   - &ZTIME    %\n+\n+ ^DYNAREA                                                           ^ +\n+                                                                      +\n+ Use UP and DOWN PF Keys or commands to scroll MENU.                  +\n+ Enter END command to terminate.                                      +\n)INIT\n  .HELP    = ISP00005     /* Help for this master menu  CBIPO      */\n  &ZPRIM   = YES          /* This is a primary option menu         */\n&LINLEN = 68         /* Length of dynamic area lines       */\n/* Normal primary option menu initialization               */\n  &ZHTOP = ISR00003    /* Tutorial table of contents         */\n  &ZHINDEX = ISR91000  /* Tutorial Index - 1st page          */\n  VPUT (ZHTOP,ZHINDEX) PROFILE\n/* Define data to be scrolled from products ordered.         */\n/* All lines must be same length as the dynamic area width   */\n/* in the panel body.                                        */\n/* Define data to be scrolled                                */\n/* All lines must be same length as the dynamic area width   */\n/* in the panel body.                                        */\n&MENU = '+\n$AL @ALLOC   @- Allocate PDS or PS                                  +\n$C5 @IOA 500 @- Integrated Operations Architecture (IOA)            +\n$C  @IOA     @- Integrated Operations Architecture (IOA)            +\n$CT @IOA     @- Integrated Operations Architecture (IOA CTT)        +\n$HS @DFHSM   @- DFHSM recovery utilities                            +\n$P  @PDF     @- ISPF/Program Development Facility                   +\n$RM @RMF     @- Resource Measurement Facility                       +\n$S  @DFSORT  @- Data Facility Sort                                  +\n$SD @SDSF    @- System Display and Search Facility                  +\n$SM @SMP/E   @- SMP/E Dialogs                                       +\n$V  @VPS     @- Control VPS 6.2 Printers                            +\n$X  @EXIT    @- Terminate ISPF using list/log defaults              '\n/* End of scrollable data                     */\nIF (&CUTP = ' ') &CUTP = 0   /* Initialize to display top of menu */\nIF (&PSCR = ' ') &PSCR = PAGE  /* Initialize scroll amount        */\n&JUNK = TRUNC(&MENU,&CUTP)     /* Truncate menu at cutoff point   */\n&DYNAREA = .TRAIL              /* Portion of menu to be displayed */\n)PROC\n  &LASTLN = LVLINE(DYNAREA)    /* Last visable line of dynamic area*/\n  IF (&ZCMD ^= ' ')            /* Make sure ZCMD value does not    */\n    &ZQ = TRUNC(&ZCMD,'.')     /*  begin with a period             */\n    IF (&ZQ = ' ')\n      .MSG = ISPD241\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n            /**** ALLOCATE ****************************/\n                AL,'PANEL(ALLOCDS)'\n            /**** IOA *********************************/\n                C,'cmd(%cttispfh)'\n            /**** IOA *********************************/\n               C5,'CMD(%IOAXTSO)'\n            /**** DFHSM *******************************/\n                HS,'PANEL(HSMUTIL)'\n            /***** PDF Primary Option Menu ************/\n                P,'PANEL(ISR@PRIM) NEWAPPL(PDF)'\n            /**** RMF *********************************/\n               RM,'PANEL(RMFPANEL)'\n            /**** CTT *********************************/\n               CT,'CMD(CTT)'\n            /**** DFSORT ******************************/\n                S,'PGM(ICEPMD01) PARM(&ZCMD) NEWAPPL(ICE) NOCHECK'\n            /**** VPS *********************************/\n            V,'PGM(VM62ISPF) PARM(&VMCOPT) NEWAPPL(VMCF) NOCHECK'\n            /**** SDSF ********************************/\n                SD,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'\n            /***** SMP/E ******************************/\n                SM,'PGM(GIMSTART) PARM(&ZCMD) NOCHECK NEWAPPL(SMPE)'\n            /**** JES2 ********************************/\n                J,'PANEL(J2OFON)'\n            /**** END OF PRODUCT LIST *****************/\n                X,'EXIT'\n                '  ','CMD(%SCROLL)'\n                *,'?' )\n            /**** SDSF ********************************/\n                IF (&ZCMD = 'SD')\n                   &ZSEL = 'PGM(ISFISP) NOCHECK NEWAPPL(ISF)'\n)END\n./ ADD NAME=ISP@COMA 0101-01016-01016-1416-00080-00080-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%-------- &ZSYSID -------+Complete - Racf Administrator%--------- &ZSYSID ------\n%OPTION ===>_ZCMD                                           +USERID   -%&ZUSER\n+                                                           +TIME     - &ZTIME\n+    USERID  :_UID   +                                      +TERMINAL - &ZTERM\n+    FORCENR :_NUM    +        %Forcenumber\n+    SURNAME :_USNAME      +   %Surname\n+    PASSWORD:$UPSW    +\n+\n+------- ENTER USERID AND PASSWORD ---------------------------------------------\n%\n%   1 +ADD      - Add a new RACF user\n%   2 +CHANGE   - Change a users password / name\n%   3 +DELETE   - Delete a user\n%   4 +LISTS    - List a user\n%   5 +LIST ALL - List all users\n%   6 +FIND     - Find spesific user by giving forcenumber\n%   7 %LAST LOG - List users with last logon before specified date\n%\n%   C +JOB OUTPUT    - Check job output\n%   X +EXIT          - Terminate ISPF using log and list defaults\n%\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = comH00     /* CHANGE THIS TO REFLECT HELP SCREEN*/\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = comH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = comH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &upsw = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 6)\n     VER(&NUM, NONBLANK)\n  IF (&OPTN = 1,2,3,4)\n     VER(&UID, NONBLANK)\n     VER(&UID, LEN, '=', 6)\n     &NR = TRUNC(&UID,2)\n     VER(&NR, PICT, AA)\n  IF (&OPTN = 1)\n     VER(&NUM,NONBLANK, MSG = ICHM413A)\n     VER(&USNAME,NONBLANK, MSG = ICHM413A)\n     VER(&USNAME,LEN, '<=', 21)\n     VER(&UPSW, NONBLANK)\n     &QNAME = TRUNC(&USNAME,1) /* get first char        @ZA85750*/\n     IF (&QNAME = '''')        /* is first char a quote @ZA85750*/\n       .MSG = ICHM413A         /* issue message         @ZA85750*/\n       .CURSOR = USNAME        /* point to name         @ZA85750*/\n  &VALCHK = ICHC41             /* check for end quote   @ZA91987*/\n  IF (&OPTN = 2)\n     VER(&UPSW, NONBLANK)\n  VPUT (UID NUM USNAME UPSW) PROFILE\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%comUADD &UID:&NUM &USNAME:&UPSW)'\n   2,'CMD(%comURES &UID:&NUM &USNAME:&UPSW)'\n   3,'CMD(%comUDEL &UID)'\n   4,'CMD(%comULST &UID)'\n   5,'PANEL(comP05)'\n   6,'cmd(%lstforce &NUM)'\n   7,'PANEL(comP06)'\n   C,'PGM(isfisp) parm(H)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@COMR 0101-01016-01016-1416-00069-00069-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%-------- &ZSYSID -------+Complete - Racf Administrator%--------- &ZSYSID ------\n%OPTION ===>_ZCMD+                                          +USERID   -%&ZUSER\n+                                                           +TIME     - &ZTIME\n+    USERID  :_UID   +                                      +TERMINAL - &ZTERM\n+    FORCENR :_NUM    +        %Forcenumber\n+    SURNAME :_USNAME      +   %Surname\n+    PASSWORD:$UPSW    +\n+\n+------- ENTER USERID AND PASSWORD ---------------------------------------------\n%\n%   1 +CHANGE   - Change a users password / name\n%   2 +LIST     - List a user\n%   3 +FIND     - Find spesific user by giving forcenumber\n%   4 %LAST LOG - List users with last logon before specified date\n%\n%   X +EXIT          - Terminate ISPF using log and list defaults\n%\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = comH00     /* CHANGE THIS TO REFLECT HELP SCREEN*/\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = comH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = comH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &upsw = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 3)\n     VER(&NUM, NONBLANK)\n  IF (&OPTN = 1,2)\n     VER(&UID, NONBLANK)\n     VER(&UID, LEN, '=', 6)\n     &NR = TRUNC(&UID,2)\n     VER(&NR, PICT, AA)\n  IF (&OPTN = 1)\n     VER(&USNAME,LEN, '<=', 21)\n     &QNAME = TRUNC(&USNAME,1) /* get first char        @ZA85750*/\n     IF (&QNAME = '''')        /* is first char a quote @ZA85750*/\n       .MSG = ICHM413A         /* issue message         @ZA85750*/\n       .CURSOR = USNAME        /* point to name         @ZA85750*/\n  &VALCHK = ICHC41             /* check for end quote   @ZA91987*/\n  IF (&OPTN = 1)\n     VER(&UPSW, NONBLANK)\n  VPUT (UID NUM USNAME UPSW) PROFILE\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%comURES &UID:&NUM &USNAME:&UPSW)'\n   2,'CMD(%comULST &UID)'\n   3,'cmd(%lstforce &NUM)'\n   4,'PANEL(COMP06)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@CTD  0101-01016-01016-1416-00041-00041-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%-------- &ZSYSID -------------------+CONTROL-D%---------------- &ZSYSID -------\n%OPTION ===>_ZCMD                                           +USERID   -%&ZUSER\n+                                                           +TIME     - &ZTIME\n%   C +CTD      - CONTROL-D\n%\n%   X +EXIT          - Terminate ISPF using log and list defaults\n%\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = RACFH00     /* CHANGE THIS TO REFLECT HELP SCREEN*/\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = RACFH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = RACFH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &UID = ' '\n  &UPSW = ' '\n  &USNAME = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  &ZSEL = TRANS( &ZQ\n   C,'CMD(%CTDISPFU)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@DNS  0101-01016-01016-1416-00033-00033-00000-RACFPNL\n%---- &zsysid ---------------+DIENSKONTROLE%------------------ &zsysid ---------\n%OPTION  ===>_ZCMD                                                             +\n%                                                           +USERID  %- &ZUSER\n%                                                           +DATE    %- &Zdate\n%                                                           +TIME    %- &Ztime\n%\n%   F +SDSF        - Spool Display And Search Facility\n%\n%   V +VPS         - Control VPS 6.2 Printers\n%\n%   X +EXIT        - Terminate ISPF using log and list defaults\n%\n+Enter%END+command to terminate ISPF.\n%\n)INIT\n  .HELP = DNSH0000\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                F,'panel(zsdsfop2) newappl(isf)'\n                V,'PGM(VM62ISPF) NOCHECK NEWAPPL(VMCF) PARM(&VMCOPT)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n IF (&ZCMD = 'F')\n   &ZSEL = 'PGM(ISFISP) NOCHECK NEWAPPL(ISF)'\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@KRI  0101-01016-01016-1416-00052-00052-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%-------- &ZSYSID ---------------+ PRINTER INFO  %------------- &ZSYSID --------\n%OPTION ===>_ZCMD+\n+\n%\n%   1 +CREATE %-+Create Reports\n%   2 +LIST   %-+List all outstanding listings to be printed\n%   3 +SUMMARY%-+Summary for printers\n%   4 +INFO   %-+Manage printer information\n%   5 +INACT  %-+Inactive printer management\n%\n%   6 +PRINT1 %-+Print list of all outstanding listings to be printed\n%   7 +PRINT2 %-+Print summary for printers\n%\n%   Your Printerid+===>_PRN     +\n%\n%\n%   X +EXIT          - Return to previous panel\n%\n+   Enter %END+ command to terminate.\n)INIT\n  &ZPFCTL = OFF\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n  VPUT ( PRN ) PROFILE\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 5,6)\n     VER(&prn, NONBLANK)\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%kriutil create)'\n   2,'CMD(%kriutil list)'\n   3,'CMD(%kriutil summary)'\n   4,'panel(isp@kric)'\n   5,'panel(isp@krid)'\n   6,'CMD(%kriutil print1:&prn)'\n   7,'CMD(%kriutil print2:&prn)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@KRIB 0101-01016-01016-1416-00050-00050-00000-RACFPNL\n%------- &ZSYSID ------------  Printer Information ------------ &ZSYSID --------\n%OPTION  ===>_ZCMD+ (Option = ADD/DEL/LST,PRT)                                 +\n%                                                           +USERID   -%&ZUSER\n%\n%   Printer id ==>_pid     + (Required field for%Add & Del)\n%   Webnr      ==>_web     + (Required field for%Add)\n%   Location   ==>_loc                                                         +\n%\n%  +ADD %- + To add or modify exiting printer information\n%  +DEL %- + To delete exiting printer information\n%  +LST %- + To list exiting printer information on screen\n%  +PRT %- + To print exiting printer information to your printer\n%\n%\n%   Your Printerid+===>_PRN     +\n%\n%\n+Enter%END+or%X +to exit.\n)INIT\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = ADD)\n     VER(&pid, NONBLANK)\n     VER(&web, NONBLANK)\n     VER(&pid, len, '=', 8)\n     VER(&web, len, '=', 8)\n     VER(&loc, NONBLANK)\n  IF (&OPTN = DEL)\n     VER(&pid, NONBLANK)\n     VER(&pid, len, '=', 8)\n  IF (&OPTN = PRT)\n     VER(&prn, NONBLANK)\n     VER(&prn, len, '=', 8)\n  &ZSEL = TRANS( &ZQ\n  ADD,'CMD(%kripid add:&pid:&web:&loc)'\n  DEL,'CMD(%kripid del:&pid)'\n  LST,'CMD(%kripid list)'\n  PRT,'CMD(%kripid prt:&prn)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@KRIC 0101-01016-01016-1416-00050-00050-00000-RACFPNL\n%------- &ZSYSID ------------  Printer Information ------------ &ZSYSID --------\n%OPTION  ===>_ZCMD+ (Option = ADD/DEL/LST,PRT)                                 +\n%                                                           +USERID   -%&ZUSER\n%\n%   Printer id ==>_pid     + (Required field for%Add & Del)\n%   Webnr      ==>_web     + (Required field for%Add)\n%   Location   ==>_loc                                                         +\n%\n%  +ADD %- + To add or modify exiting printer information\n%  +DEL %- + To delete exiting printer information\n%  +LST %- + To list exiting printer information on screen\n%  +PRT %- + To print exiting printer information to your printer\n%\n%\n%   Your Printerid+===>_PRN     +\n%\n%\n+Enter%END+or%X +to exit.\n)INIT\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = ADD)\n     VER(&pid, NONBLANK)\n     VER(&web, NONBLANK)\n     VER(&pid, len, '=', 8)\n     VER(&web, len, '=', 8)\n     VER(&loc, NONBLANK)\n  IF (&OPTN = DEL)\n     VER(&pid, NONBLANK)\n     VER(&pid, len, '=', 8)\n  IF (&OPTN = PRT)\n     VER(&prn, NONBLANK)\n     VER(&prn, len, '=', 8)\n  &ZSEL = TRANS( &ZQ\n  ADD,'CMD(%kripid add:&pid:&web:&loc)'\n  DEL,'CMD(%kripid del:&pid)'\n  LST,'CMD(%kripid list)'\n  PRT,'CMD(%kripid prt:&prn)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@KRID 0101-01016-01016-1416-00047-00047-00000-RACFPNL\n%------- &ZSYSID ------------ Inactive Printers --------------- &ZSYSID --------\n%OPTION  ===>_ZCMD+                                                            +\n%                                                           +USERID   -%&ZUSER\n%\n%   1 +INACTIVE%- + List all inactive printers for certain time period\n%   2 +ACTIVE  %- + List all active printers\n%\n%   3 +PRINT1  %- + Print all inactive printers generated by option 1\n%   4 +PRINT2  %- + Print all active printers generated by option 2\n%\n%\n%   Start Date ==>_SDT   +%(YYMMDD)\n%   End Date   ==>_EDT   +%(YYMMDD)\n%\n%\n%   Your Printer id ==>_pid     +%\n%\n+Enter%END+or%X +to exit.\n)INIT\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 1,2)\n     VER(&sdt, NONBLANK)\n     VER(&sdt, len, '=', 6)\n     VER(&sdt, pict, NNNNNN)\n     VER(&edt, NONBLANK)\n     VER(&edt, len, '=', 6)\n     VER(&edt, pict, NNNNNN)\n  IF (&OPTN = 3,4)\n     VER(&pid, NONBLANK)\n  &ZSEL = TRANS( &ZQ\n  1,'CMD(%kriprt inact:&sdt:&edt)'\n  2,'CMD(%kriprt act:&sdt:&edt)'\n  3,'CMD(%kriprt prt1:&pid)'\n  4,'CMD(%kriprt prt2:&pid)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@MED  0101-01016-01016-1416-00059-00059-00000-RACFPNL\n+--------%&ZSYSID+--------- %Media ISPF/PDF Main Menu+ ---------%&ZSYSID+-------\n%OPTION  ===>_ZCMD                                                             +\n%                                                           %USERID   -%&ZUSER\n%   0 +ISPF PARMS %-+Specify terminal and user parameters   %TIME     -%&ZTIME\n%   1 +BROWSE     %-+Display source data or output listings %TERMINAL -%&ZTERM\n%   2 +EDIT       %-+Create or change source data           %PF KEYS  -%&ZKEYS\n%   3 +UTILITIES  %-+Perform utility functions\n%   4 +COMMAND    %-+Enter TSO Command, CLIST, or REXX exec\n%   A +ALLOC      %-+Allocate Datasets\n%   BM+BOOKMAN    %-+Bookmanager\n%   C5+IOA 500    %-+IOA Automation product\n%   C +CONTROL    %-+IOA Automation product\n%   CN+CONSOLE    %-+Master Console Facility\n%   CI+CASTINIT   %-+Cartridge Initialization\n%   CT+CONTROL T  %-+Control T Tape Management\n%   F +SDSF       %-+Spool Display and Search Facility\n%   J +JES2       %-+JES2 Offload and Onload Facility\n%   S +DFSORT     %-+Data Facility Sort\n%\n%   X +EXIT       %-+Terminate ISPF session\n%\n+Enter%END+command to terminate ISPF.\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ) PROFILE /*             @L1C*/\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                0,'PANEL(ISPOPTA)'\n                1,'PGM(ISRBRO) PARM(ISRBRO01)'\n                2,'PGM(ISREDIT) PARM(P,ISREDM01)'\n                3,'PANEL(ISRUT1)'\n                4,'PGM(ISRPTC)'\n                T,'PANEL(ISP@TSP)'\n                A,'PANEL(ALLOCDS)'\n                BM,'CMD(%EOXVSTRT) MODE(FSCR) SUSPEND NEWAPPL(EOXR) NOCHECK'\n                C5,'CMD(%ioaxtso)'\n                C,'CMD(%ctmispf)'\n                CI,'panel(kastinit)'\n                CN,'CMD(CONSOLE1)'\n                CT,'CMD(CTT)'\n                F,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'\n                J,'PANEL(J2OFON)'\n                S,'PGM(ICEPMD01) PARM(&ZCMD) NEWAPPL(ICE) NOCHECK'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n                if (&zcmd = 'F')\n                   &zsel = 'pgm(isfisp) nocheck newappl(isf)'\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@NET  0101-01016-01016-1416-00040-00040-00000-RACFPNL\n%---- &ZSYSID -------       Networks Primary Menu        -------- &ZSYSID -----\n%OPTION  ===>_ZCMD                                                             +\n%                                                           +USERID   -%&ZUSER\n%                                                           +DATE     - &ZDATE\n%   E +EDIT        - Edit Datasets                          +PF KEYS  - &ZKEYS\n%   B +BROWSE      - Browse datasets\n%   C +COPY        - Copy datasets or members\n%   F +SDSF        - Spool Display and Search Facility\n%\n%   H +HELP        - TUTOR\n%\n%\n%   0 +ISPF PARMS  - Specify terminal and user parameters\n%   X +EXIT        - Terminate ISPF using log and list defaults\n%\n+Enter%END+command to terminate ISPF.\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n  &ZSEL = TRANS( &ZQ\n                0,'PANEL(ISPOPTA)'\n                E,'PANEL(NETPAN06)'\n                C,'PGM(ISRUMC)'\n                B,'PGM(ISRBRO) PARM(ISRBRO01)'\n                H,'PGM(ISpTUTOR) PARM(ISR00000)'\n                F,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n                if (&zcmd = 'F')\n                   &zsel = 'pgm(isfisp) nocheck newappl(isf)'\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@OPS  0101-01016-01016-1416-00098-00098-00000-RACFPNL\n)ATTR\n\u00a2 type(text) attn(on)\n^ area(dynamic) extend(on) scroll(on)\n$ type(dataout) intens(high)\n@ type(dataout) intens(low)\n)BODY\n%-------- &ZSYSID -------   Operator MAIN/PDF Menu    -------- &ZSYSID --------\n%OPTION ===>_ZCMD                                     +SCROLL ===>_PSCR%\n%                                                                      %\n%    +DATE -%&ZDATE        +TIME -%&ZTIME        +USERID -%&ZUSER      %\n%                                                                      %\n+ ^DYNAREA                                                           ^ +\n+                                                                      +\n+ Enter%END+command to terminate.                                      +\n)INIT\n  .HELP    = ISP00005     /* Help for this master menu  CBIPO      */\n  &ZPRIM   = YES          /* This is a primary option menu         */\n  &PMGHILV = OPS.AIM              /* ---> SET PREFIX FOR DATASETS */\n                                      /* if blank, LIBDEF is not used */\n  &P = PM                             /* ---> set MVS/PM option code. */\n  &PMGNAME = 'RESOLVE'                /* ---> set MVS/PM name.        */\n  &PMGDESC = 'MVS PERFORMANCE MANAGER'\n  &RTM = RTM                          /* ---> set REALTIME fastpath.  */\n  &RES = RES                          /* ---> set RESOLVE fastpath.   */\n  &JRN = JRN                          /* ---> set JOURNAL fastpath.   */\n  IF (&PMGTERM = ENTER) &ZCMD = X     /* Restore original X command.  */\n  &PMGTERM = &Z                       /* Set termination flag null    */\n&LINLEN = 68         /* Length of dynamic area lines       */\n/* Normal primary option menu initialization               */\n  &ZHTOP = ISR00003    /* Tutorial table of contents         */\n  &ZHINDEX = ISR91000  /* Tutorial Index - 1st page          */\n  VPUT (ZHTOP,ZHINDEX) PROFILE\n/* Define data to be scrolled from products ordered.         */\n/* All lines must be same length as the dynamic area width   */\n/* in the panel body.                                        */\n/* Define data to be scrolled                                */\n/* All lines must be same length as the dynamic area width   */\n/* in the panel body.                                        */\n&MENU = '+\n                                                                    +\n$A  @ALLOC   @- Allocate PDS or PS                                  +\n$BM @BOOKMAN @- BookManager READ                                    +\n$C  @CONTROL @- IOA Integrated Operations Architecture              +\n$CI @KASTINIT@- Cartridge Initialization                            +\n$J  @JES2    @- JES2 Offload and Onload Facility                    +\n$P  @PDF     @- ISPF/Program Development Facility                   +\n$RM @RMF     @- Resource Measurement Facility                       +\n$V  @VPS     @- Control VPS 6.2 Printers                            +\n$X  @EXIT    @- Terminate ISPF using list/log defaults              '\n/* End of scrollable data                     */\nIF (&CUTP = ' ') &CUTP = 0   /* Initialize to display top of menu */\nIF (&PSCR = ' ') &PSCR = PAGE  /* Initialize scroll amount        */\n&JUNK = TRUNC(&MENU,&CUTP)     /* Truncate menu at cutoff point   */\n&DYNAREA = .TRAIL              /* Portion of menu to be displayed */\n)PROC\n  &PMGTRL = TRUNC(&ZCMD,'.')          /* Truncate ZCMD.               */\n  IF (&PMGINIT ^= &Z)                 /* If we have initialized,      */\n    IF (&PMGTRL = X)                  /* and \"X\" entered ...          */\n      &PMGTERM = ENTER                /* ... set \"ENTER\",             */\n    IF (.RESP = END) &PMGTERM = END   /*  or \"END\" entered set \"END\". */\n    IF (&PMGTERM ^= &Z)               /*   If we're terminating,      */\n      .RESP = ENTER                   /*     simulate ENTER.          */\n      &ZCMD = '&P'                    /*     and invoke PMGLTERM.     */\n  &PMGTRL = .TRAIL                    /* Set trail variable to .TRAIL */\n  &LASTLN = LVLINE(DYNAREA)    /* Last visable line of dynamic area*/\n  IF (&ZCMD ^= ' ')            /* Make sure ZCMD value does not    */\n    &ZQ = TRUNC(&ZCMD,'.')     /*  begin with a period             */\n    IF (&ZQ = ' ')\n      .MSG = ISPD241\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n       /**** ALLOCATE ****************************/\n          A,'PANEL(ALLOCDS)'\n       /**** Bookmanager *************************/\n         BM,'CMD(%EOXVSTRT) MODE(FSCR) SUSPEND NEWAPPL(EOXR) NOCHECK'    /*L1A*/\n       /**** control *****************************/\n          C,'CMD(CTTISPFH)'\n       /**** kastinit*****************************/\n         CI,'PANEL(KASTINIT)'\n       /**** JES2 ********************************/\n          J,'PANEL(J2OFON)'\n       /***** PDF Primary Option Menu ************/\n          P,'PANEL(ISP@OPS2) NEWAPPL(PDF)'\n       /**** RMF *********************************/\n         RM,'CMD(RMFMON)'\n       /**** VPS *********************************/\n          V,'PGM(VM62ISPF) PARM(&VMCOPT) NEWAPPL(VMCF) NOCHECK'\n       /**** END OF PRODUCT LIST *****************/\n       /*    '&P','PGM(PMGLMAIN) NOCHECK PARM(NOTEST)' */\n       /*  '&RTM','PGM(PMGLMAIN) NOCHECK PARM(NOTEST,/1.1.&PMGTRL)' */\n       /*  '&RES','PGM(PMGLMAIN) NOCHECK PARM(NOTEST,/2.1.&PMGTRL)' */\n       /*  '&JRN','PGM(PMGLMAIN) NOCHECK PARM(NOTEST,/J.B)' */\n          X,'exit'\n           '  ','CMD(%SCROLL)'\n           *,'?' )\n       /**** SDSF ********************************/\n           IF (&ZCMD = 'SD')\n              &ZSEL = 'PGM(ISFISP) NOCHECK NEWAPPL(ISF)'\n)END\n./ ADD NAME=ISP@OPS2 0101-01016-01016-1416-00041-00041-00000-RACFPNL\n%------- A L F A -------    Operator ISPF/PDF Menu    -------- A L F A  --------\n%OPTION  ===>_ZCMD                                                             +\n%                                                           +USERID   -%&ZUSER\n%   0 +ISPF PARMS  - Specify terminal and user parameters   +TIME     - &ZTIME\n%   1 +BROWSE      - Display source data or output listings +TERMINAL - &ZTERM\n%   2 +EDIT        - Create or change source data           +PF KEYS  - &ZKEYS\n%   3 +UTILITIES   - Perform utility functions\n%   4 +COMMAND     - Enter TSO Command, CLIST, or REXX exec\n%   F +SDSF        - Spool Display and Search Facility\n%   C +CONSOLE     - MVS Master Console Facility\n%   X +EXIT        - Terminate ISPF using log and list defaults\n%\n+Enter%END+command to terminate ISPF.\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ) PROFILE /*             @L1C*/\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                0,'PANEL(ISPOPTA)'\n                1,'PGM(ISRBRO) PARM(ISRBRO01)'\n                2,'PGM(ISREDIT) PARM(P,ISREDM01)'\n                3,'PANEL(ISRUT1)'\n                4,'PGM(ISRPTC)'\n                C,'CMD(CONSOLE1)'\n                F,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n                if (&zcmd = 'F')\n                   &zsel = 'pgm(isfisp) nocheck newappl(isf)'\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@POL  0101-01016-01016-1416-00044-00044-00000-RACFPNL\n%------------------------+ DATASET BROWSE FACILITY   %--------------------------\n%\n%OPTION ===>_ZCMD                                                              +\n%                                                           +USERID - %&ZUSER\n%  +Choose one of the following options:                    +DATE   - %&ZDATE\n%  %------------------------------------                    +TIME   - %&ZTIME\n%\n%   B +BROWSE - Browse dataset with %REPOL +prefix\n%   X +EXIT   - Exit to ready prompt\n%\n%\n+\n+\n+\n+\n+\n+PARTITIONED OR SEQUENTAIL DATA SET NAME:\n+   DATA SET NAME %===>_DSN                                     +\n%\n%\n%\n%\n+   Enter%END+command to exit.\n%\n)INIT\n  .HELP = ALOCHLP1                    /* changed this to ALLOC0a */\n                                      /* if blank, LIBDEF is not used */\n&ZCMD = TRANS(&OPT b,x)\n  .CURSOR = ZCMD\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n ver (&dsn,nonblank)\n ver (&dsn,dsname)\nVPUT ( dsn ) PROFILE\n  &ZSEL = TRANS( &ZQ\n                B,'cmd(%polbr &dsn)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=ISP@PRGA 0101-01016-01016-1416-00074-00074-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%-------- &ZSYSID ---------+Programmer Administrator%----------- &ZSYSID -------\n%OPTION ===>_ZCMD+                                          +USERID   -%&ZUSER\n+                                                           +TIME     - &ZTIME\n+    USERID  :_UID    +                                     +TERMINAL - &ZTERM\n+    NAME    :_USNAME              +  %Name & Surname (20 Characters) +\n+    PASSWORD:$UPSW    +\n+\n+------- ENTER USERID AND PASSWORD ---------------------------------------------\n%\n%   1 +ADD      - Add a new RACF user\n%   2 +CHANGE   - Change a users password / name\n%   3 +DELETE   - Delete a user\n%   4 +LISTS    - List a user\n%   5 +LIST ALL - List all users\n%\n%   C +JOB OUTPUT    - Check job output\n%   X +EXIT          - Terminate ISPF using log and list defaults\n%\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = RACFH00     /* CHANGE THIS TO REFLECT HELP SCREEN*/\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = RACFH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = RACFH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &UID = ' '\n  &UPSW = ' '\n  &USNAME = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 1,2,3,4)\n     VER(&UID, NONBLANK)\n     VER(&UID, LEN, '=', 7)\n     &NR = TRUNC(&UID,3)\n     VER(&NR, PICT, AAA)\n  IF (&OPTN = 1)\n     VER(&USNAME,NONBLANK, MSG = ICHM413A)\n     VER(&USNAME,LEN, '<=', 21)\n     VER(&UPSW, NONBLANK)\n     &QNAME = TRUNC(&USNAME,1) /* get first char        @ZA85750*/\n     IF (&QNAME = '''')        /* is first char a quote @ZA85750*/\n       .MSG = ICHM413A         /* issue message         @ZA85750*/\n       .CURSOR = USNAME        /* point to name         @ZA85750*/\n  &VALCHK = ICHC41             /* check for end quote   @ZA91987*/\n  IF (&OPTN = 2)\n     VER(&UPSW, NONBLANK)\n  VPUT (UID NAME UPSW) PROFILE\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%TSOUADD &UID:&USNAME:&UPSW)'\n   2,'CMD(%TSOURES &UID:&USNAME:&UPSW)'\n   3,'CMD(%TSOUDEL &UID)'\n   4,'CMD(%TSOULST &UID)'\n   5,'PANEL(RACFP05)'\n   C,'PGM(isfisp) parm(H)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@RDBA 0101-01016-01016-1416-00080-00080-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%-------- &ZSYSID -------+Radiobeheer Administrator    %--------- &ZSYSID ------\n%OPTION ===>_ZCMD                                           +USERID   -%&ZUSER\n+                                                           +TIME     - &ZTIME\n+    USERID  :_UID     +                                    +TERMINAL - &ZTERM\n+    FORCENR :_NUM     +       %Forcenumber\n+    SURNAME :_USNAME      +   %Surname\n+    PASSWORD:$UPSW    +\n+\n+------- ENTER USERID AND PASSWORD ---------------------------------------------\n%\n%   1 +ADD      - Add a new RACF user\n%   2 +CHANGE   - Change a users password / name\n%   3 +DELETE   - Delete a user\n%   4 +LISTS    - List a user\n%   5 +LIST ALL - List all users\n%   6 +FIND     - Find spesific user by giving forcenumber\n%   7 %LAST LOG - List users with last logon before specified date\n%\n%   C +JOB OUTPUT    - Check job output\n%   X +EXIT          - Terminate ISPF using log and list defaults\n%\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = comH00     /* CHANGE THIS TO REFLECT HELP SCREEN*/\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = comH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = comH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &upsw = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 6)\n     VER(&NUM, NONBLANK)\n  IF (&OPTN = 1,2,3,4)\n     VER(&UID, NONBLANK)\n     VER(&UID, LEN, '=', 8)\n     &NR = TRUNC(&UID,2)\n     VER(&NR, PICT, AA)\n  IF (&OPTN = 1)\n     VER(&NUM,NONBLANK, MSG = ICHM413A)\n     VER(&USNAME,NONBLANK, MSG = ICHM413A)\n     VER(&USNAME,LEN, '<=', 21)\n     VER(&UPSW, NONBLANK)\n     &QNAME = TRUNC(&USNAME,1) /* get first char        @ZA85750*/\n     IF (&QNAME = '''')        /* is first char a quote @ZA85750*/\n       .MSG = ICHM413A         /* issue message         @ZA85750*/\n       .CURSOR = USNAME        /* point to name         @ZA85750*/\n  &VALCHK = ICHC41             /* check for end quote   @ZA91987*/\n  IF (&OPTN = 2)\n     VER(&UPSW, NONBLANK)\n  VPUT (UID NUM USNAME UPSW) PROFILE\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%comUADD &UID:&NUM &USNAME:&UPSW)'\n   2,'CMD(%comURES &UID:&NUM &USNAME:&UPSW)'\n   3,'CMD(%comUDEL &UID)'\n   4,'CMD(%comULST &UID)'\n   5,'PANEL(comP05)'\n   6,'cmd(%lstforce &NUM)'\n   7,'PANEL(comP06)'\n   C,'PGM(isfisp) parm(H)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@THE  0101-01016-01016-1416-00037-00037-00000-RACFPNL\n%------- &ZSYSID -------  ISPF/PDF PRIMARY OPTION MENU  ------- &ZSYSID --------\n%OPTION  ===>_ZCMD                                                             +\n%                                                           +USERID   -%&ZUSER\n%                                                           +TIME     - &ZTIME\n%                                                           +PF KEYS  - &ZKEYS\n%   F +SDSF        %-+Spool Display and Search Facility\n%   T +TSPRINT     %-+TSPRINT remote printer Facility\n+\n%   U +USER MAINT  %-+Userid maintenance\n%   P +PRINTER INFO%-+Printer information\n%   X +EXIT        %-+Terminate ISPF using log and list defaults\n%\n+Enter%END+command to terminate ISPF.\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ) PROFILE /*             @L1C*/\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                0,'PANEL(ISPOPTA)'\n                F,'PGM(ISFISP) PARM(H THE*)'\n                U,'PANEL(ISP@theA)'\n                P,'PANEL(ISP@theB)'\n                T,'PANEL(ISP@TSP)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@THEA 0101-01016-01016-1416-00081-00081-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%--------&ZSYSID-----------+THELIVE Racf Administrator%---------&ZSYSID---------\n%OPTION ===>_ZCMD+                                           USERID   -%&ZUSER\n+                                                           +TIME     - &ZTIME\n+    USERID  :_UID     +                                    +TERMINAL - &ZTERM\n+    NAME    :_USNAME              +  %(Name and Surname) +\n+    GROUP   :_GRPNME +               %(THELIVE,MID or MOD)+\n+    PASSWORD:$UPSW    +\n+    OPIDENT :_RG +                   %(C07,F08,ETC....)+\n+\n%    ----------------------------------------------------------------\n%   |%OPIDENT+field is the cics OPID created before hand in the cics%\u00f8\n%    ----------------------------------------------------------------\n+\n+------- ENTER USERID AND PASSWORD ---------------------------------------------\n%\n%   1 +ADD     %-+Add a new RACF user -\n%   2 +CHANGE  %-+Change a users password / name\n%   3 +DELETE  %-+Delete a user\n%   4 +LISTS   %-+List a user\n%   5 +CHANGE  %-+Change a users OPIDENT\n%\n%   X +EXIT          - Return to previous panel\n%\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = RACFH00     /* CHANGE THIS TO REFLECT HELP SCREEN*/\n  &ZHTOP = RACFH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = RACFH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     +L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &UPSW = ' '\n  &RG = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 1,2,3,4)\n     VER(&UID, NONBLANK)\n     &jst = TRUNC(&UID,3)     /* get third char for uid */\n     &just = TRUNC(&UID,4)    /* get fourth char for uid */\n  IF (&OPTN = 1)\n     VER(&USNAME,NONBLANK, MSG = ICHM413A)\n     VER(&USNAME,LEN, '<=', 21)\n     VER(&GRPNME, NONBLANK)\n     VER(&UPSW, NONBLANK)\n     if (&JST = JST)\n       VER(&RG, NONBLANK)\n     else\n     if (&JUST = JUST)\n        VER(&RG, NONBLANK)\n     &QNAME = TRUNC(&USNAME,1) /* get first char        +ZA85750*/\n     IF (&QNAME = '''')        /* is first char a quote +ZA85750*/\n       .MSG = ICHM413A         /* issue message         +ZA85750*/\n       .CURSOR = USNAME        /* point to name         +ZA85750*/\n  &VALCHK = ICHC41             /* check for end quote   +ZA91987*/\n  IF (&OPTN = 2)\n     VER(&UPSW, NONBLANK)\n  VPUT (UID NAME UPSW) PROFILE\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%THEADD &UID:&USNAME:&GRPNME:&UPSW:&RG)'\n   2,'CMD(%THERES &UID:&USNAME:&UPSW)'\n   3,'CMD(%THEDEL &UID)'\n   4,'CMD(%THELST &UID)'\n   5,'CMD(%THEOPT &UID:&RG)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@THEB 0101-01016-01016-1416-00052-00052-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%--------&ZSYSID-----------+   THELIVE PRINTER INFO   %---------&ZSYSID---------\n%OPTION ===>_ZCMD+\n+\n%\n%   1 +CREATE %-+Create Reports\n%   2 +LIST   %-+List all outstanding listings to be printed\n%   3 +SUMMARY%-+Summary for printers\n%   4 +INFO   %-+Manage printer information\n%   5 +INACT  %-+Inactive printer management\n%\n%   6 +PRINT1 %-+Print list of all outstanding listings to be printed\n%   7 +PRINT2 %-+Print summary for printers\n%\n%   Your Printerid+===>_PRN     +\n%\n%\n%   X +EXIT          - Return to previous panel\n%\n+   Enter %END+ command to terminate.\n)INIT\n  &ZPFCTL = OFF\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n  VPUT ( PRN ) PROFILE\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 5,6)\n     VER(&prn, NONBLANK)\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%THEutil create)'\n   2,'CMD(%THEutil list)'\n   3,'CMD(%THEutil summary)'\n   4,'panel(isp@thec)'\n   5,'panel(isp@thed)'\n   6,'CMD(%THEutil print1:&prn)'\n   7,'CMD(%THEutil print2:&prn)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@THEC 0101-01016-01016-1416-00050-00050-00000-RACFPNL\n%------- &ZSYSID ------------  Printer Information ------------ &ZSYSID --------\n%OPTION  ===>_ZCMD+ (Option = ADD/DEL/LST,PRT)                                 +\n%                                                           +USERID   -%&ZUSER\n%\n%   Printer id ==>_pid     + (Required field for%Add & Del)\n%   Webnr      ==>_web     + (Required field for%Add)\n%   Location   ==>_loc                                                         +\n%\n%  +ADD %- + To add or modify exiting printer information\n%  +DEL %- + To delete exiting printer information\n%  +LST %- + To list exiting printer information on screen\n%  +PRT %- + To print exiting printer information to your printer\n%\n%\n%   Your Printerid+===>_PRN     +\n%\n%\n+Enter%END+or%X +to exit.\n)INIT\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = ADD)\n     VER(&pid, NONBLANK)\n     VER(&web, NONBLANK)\n     VER(&pid, len, '=', 8)\n     VER(&web, len, '=', 8)\n     VER(&loc, NONBLANK)\n  IF (&OPTN = DEL)\n     VER(&pid, NONBLANK)\n     VER(&pid, len, '=', 8)\n  IF (&OPTN = PRT)\n     VER(&prn, NONBLANK)\n     VER(&prn, len, '=', 8)\n  &ZSEL = TRANS( &ZQ\n  ADD,'CMD(%THEpid add:&pid:&web:&loc)'\n  DEL,'CMD(%THEpid del:&pid)'\n  LST,'CMD(%THEpid list)'\n  PRT,'CMD(%THEpid prt:&prn)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@THED 0101-01016-01016-1416-00047-00047-00000-RACFPNL\n%------- &ZSYSID ------------ Inactive Printers --------------- &ZSYSID --------\n%OPTION  ===>_ZCMD+                                                            +\n%                                                           +USERID   -%&ZUSER\n%\n%   1 +INACTIVE%- + List all inactive printers for certain time period\n%   2 +ACTIVE  %- + List all active printers\n%\n%   3 +PRINT1  %- + Print all inactive printers generated by option 1\n%   4 +PRINT2  %- + Print all active printers generated by option 2\n%\n%\n%   Start Date ==>_SDT   +%(YYMMDD)\n%   End Date   ==>_EDT   +%(YYMMDD)\n%\n%\n%   Your Printer id ==>_pid     +%\n%\n+Enter%END+or%X +to exit.\n)INIT\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 1,2)\n     VER(&sdt, NONBLANK)\n     VER(&sdt, len, '=', 6)\n     VER(&sdt, pict, NNNNNN)\n     VER(&edt, NONBLANK)\n     VER(&edt, len, '=', 6)\n     VER(&edt, pict, NNNNNN)\n  IF (&OPTN = 3,4)\n     VER(&pid, NONBLANK)\n  &ZSEL = TRANS( &ZQ\n  1,'CMD(%isisprt inact:&sdt:&edt)'\n  2,'CMD(%isisprt act:&sdt:&edt)'\n  3,'CMD(%isisprt prt1:&pid)'\n  4,'CMD(%isisprt prt2:&pid)'\n   ' ',' '\n   X,'EXIT'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISP@TSP  0101-01016-01016-1416-00064-00064-00000-RACFPNL\n)BODY\n%---- &ZSYSID ----------------+TSPRINT FACILITY%------------------ &ZSYSID ----\n%OPTION  ===>_ZCMD                                                             +\n%                                                           +USERID  %- &ZUSER\n%                                                           +DATE    %- &Zdate\n%   S +TSPRINT     - Tsprint search facility\n%\n%  +ENTER PRINTER ADRESS\n%                   ===> _LUNAME  +  (Only if option %S+ was selected)\n%  T  +TSPRINT1    - Tsprint 1  Program Product\n%  T2 +TSPRINT2    - Tsprint 2  Program Product\n%  T3 +TSPRINT3    - Tsprint 3  Program Product\n%  T4 +TSPRINT4    - Tsprint 4  Program Product\n%  T5 +TSPRINT5    - Tsprint 5  Program Product\n%  T6 +TSPRINT6    - Tsprint 6  Program Product\n%  T7 +TSPRINT7    - Tsprint 7  Program Product\n%  T8 +TSPRINT8    - Tsprint 8  Program Product\n%  T9 +TSPRINT9    - Tsprint 9  Program Product\n%  T0 +TSPOFS      - Tsprint Orange Free State\n%\n%   X +EXIT        - Terminate TSPRINT\n%\n+Enter%END+command to terminate TSPRINT.\n%\n)INIT\n  .HELP = DNSH0000\n  &ZHTOP = RACFH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = RACFH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     +L1A*/\n  &ZPFCTL = OFF\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &LUNAME = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n        .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = S)\n      VER (&LUNAME, NONBLANK)\n     .CURSOR = LUNAME\n  &VALCHK = ICHC41\n  vput ( luname ) profile\n  &ZSEL = TRANS( &ZQ\n   T,'CMD(TSP)'\n   T2,'CMD(TSP TSPRINT2)'\n   T3,'CMD(TSP TSPRINT3)'\n   T4,'CMD(TSP TSPRINT4)'\n   T5,'CMD(TSP TSPRINT5)'\n   T6,'CMD(TSP TSPRINT6)'\n   T7,'CMD(TSP TSPRINT7)'\n   T8,'CMD(TSP TSPRINT8)'\n   T9,'CMD(TSP TSPRINT9)'\n   T0,'CMD(TSP TSPOFS)'\n    S,'CMD(TSPFIND &LUNAME)'\n    ' ',' '\n    X,'exit'\n    *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=ISPPFT01 0101-01016-01016-1416-00016-00016-00000-RACFPNL\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%-------------------  PRESS ENTER TO CONTINUE LOGGING OFF  ---------------------\n)PROC\n   &ZLOGFDDV = D\n &ZLOGFDSP = &ZLOGFDDV\n)END\n./ ADD NAME=ISPPFT02 0101-01016-01016-1416-00066-00066-00000-RACFPNL\n%-------------------  SPECIFY DISPOSITION OF LIST DATA SET ---------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+LOG DATA SET OPTIONS NOT AVAILABLE     LIST DATA SET DISPOSITION\n+----------------------------------     -------------------------\n+                                       Process option  %===>_ZLSTFDDV +\n+                                       SYSOUT class    %===>_ZLSTCLA        +\n+                                       Local printer ID%===>_ZLSTPID +\n+\n+VALID PROCESS OPTIONS:\n%    PD+- Print data set and delete\n%    D +- Delete data set without printing\n%    K +- Keep data set (allocate same data set in next session)\n%    KN+- Keep data set and allocate new data set in next session\n+\n+  Press%ENTER+key to complete ISPF termination.\n+  Enter%END+command to return to the primary option menu.\n+\n+JOB STATEMENT INFORMATION:  (Required for system printer)\n%  ===>_ZLLGJOB1\n%  ===>_ZLLGJOB2\n%  ===>_ZLLGJOB3\n%  ===>_ZLLGJOB4\n)INIT\n  .HELP = ISP90110\n  .CURSOR = ZLSTFDDV\n  If (&ZLSTFDSP = J,L)                  /* Initialize DISPLAY process option */\n    &ZLSTFDDV = PD\n  Else\n    If (&ZLSTFDSP = R)\n      &ZLSTFDDV = KN\n    Else\n      If (&ZLSTFDSP = D,K)\n        &ZLSTFDDV = &ZLSTFDSP\n      Else\n)REINIT\n  If (.CURSOR = ' ')\n    .CURSOR = ZLSTFDDV\n  Else\n)PROC\n If (.RESP = ENTER)\n   If (&ZVERB ^= ' ' )\n     .MSG = ISPZ002\n   Else\n     If (&ZCMD ^= ' ' )\n       .MSG = ISPZ001\n     Else\n Else\n Ver (&ZLSTFDDV NB LIST PD,D,K,KN)\n If (&ZLSTFDDV = 'PD')                  /* If print specified and            */\n   If (&ZLSTPID ^= ' ' )                /*   both local printer and          */\n     If (&ZLSTCLA ^= ' ')               /*   sysout class specified then     */\n       .MSG = ISPP032                   /*  error - duplicate specification  */\n     Else\n   Else                                 /* If print and neither local printer*/\n     If (&ZLSTCLA = ' ')                /*   or sysout class specified then  */\n       .MSG = ISPP031                   /*  error - must specify one parm    */\n     Else\n   &ZLSTFDDV = J\n Else\n   If (&ZLSTFDDV = 'KN')\n     &ZLSTFDDV = R\n   Else\n &ZLSTFDSP = &ZLSTFDDV\n)END\n/* 5685-054 (C) COPYRIGHT IBM CORP. 1980, 1990                              */\n./ ADD NAME=ISPPFT03 0101-01016-01016-1416-00102-00102-00000-RACFPNL\n%--------------  SPECIFY DISPOSITION OF LOG AND LIST DATA SETS  ----------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+LOG OPTIONS FOR THIS SESSION           LIST OPTIONS FOR THIS SESSION\n+----------------------------           -----------------------------\n+Process option  %===>_ZLOGFDDV+        Process option  %===>_ZLSTFDDV+\n+SYSOUT class    %===>_ZLOGCLA        + SYSOUT class    %===>_ZLSTCLA        +\n+Local printer ID%===>_ZLOGPID +        Local printer ID%===>_ZLSTPID +\n+\n+VALID PROCESS OPTIONS:\n%    PD+- Print data set and delete\n%    D +- Delete data set without printing\n%    K +- Keep data set (allocate same data set in next session)\n%    KN+- Keep data set and allocate new data set in next session\n+\n+  Press%ENTER+key to complete ISPF termination.\n+  Enter%END+command to return to the primary option menu.\n+\n+JOB STATEMENT INFORMATION:  (Required for system printer)\n%  ===>_ZLLGJOB1\n%  ===>_ZLLGJOB2\n%  ===>_ZLLGJOB3\n%  ===>_ZLLGJOB4\n)INIT\n  .HELP = ISP90110\n  If (&ZLOGFDSP = J,L)                  /* Initialize log process option     */\n    &ZLOGFDDV = PD\n  Else\n    If (&ZLOGFDSP = R)\n      &ZLOGFDDV = KN\n    Else\n      If (&ZLOGFDSP = D,K)\n        &ZLOGFDDV = &ZLOGFDSP\n      Else\n  If (&ZLSTFDSP = J,L)                  /* Initialize list process option    */\n    &ZLSTFDDV = PD\n  Else\n    If (&ZLSTFDSP = R)\n      &ZLSTFDDV = KN\n    Else\n      If (&ZLSTFDSP = D,K)\n        &ZLSTFDDV = &ZLSTFDSP\n      Else\n  If (&ZLOGFDDV ^= ' ')\n    If (&ZLSTFDDV = ' ')\n      .CURSOR = ZLSTFDDV\n    Else\n      .CURSOR = ZLOGFDDV\n  Else\n    .CURSOR = ZLOGFDDV\n)REINIT\n  If (.CURSOR = ' ')\n    .CURSOR = ZLOGFDDV\n    If (&ZLOGFDDV ^= ' ')\n      If (&ZLSTFDDV = ' ')\n        .CURSOR = ZLSTFDDV\n      Else\n    Else\n  Else\n)PROC\n If (.RESP = ENTER)\n   If (&ZVERB ^= ' ' )\n     .MSG = ISPZ002\n   Else\n     If (&ZCMD ^= ' ' )\n       .MSG = ISPZ001\n     Else\n Else\n Ver (&ZLOGFDDV NB LIST PD,D,K,KN)      /* Validate log options              */\n If (&ZLOGFDDV = 'PD')                  /* If print specified and            */\n   If (&ZLOGPID ^= ' ' )                /*   both local printer and          */\n     If (&ZLOGCLA ^= ' ')               /*   sysout class specified then     */\n       .MSG = ISPP032                   /*  error - duplicate specification  */\n     Else\n   Else                                 /* If print and neither local printer*/\n     If (&ZLOGCLA = ' ')                /*   or sysout class specified then  */\n       .MSG = ISPP031                   /*  error - must specify one parm    */\n     Else\n   &ZLOGFDDV = J\n Else\n   If (&ZLOGFDDV = 'KN')\n     &ZLOGFDDV = R\n   Else\n &ZLOGFDSP = &ZLOGFDDV\n Ver (&ZLSTFDDV NB LIST PD,D,K,KN)      /* Validate list process options     */\n If (&ZLSTFDDV = 'PD')                  /* If print specified and            */\n   If (&ZLSTPID ^= ' ' )                /*   both local printer and          */\n     If (&ZLSTCLA ^= ' ')               /*   sysout class specified then     */\n       .MSG = ISPP032                   /*  error - duplicate specification  */\n     Else\n   Else                                 /* If print and neither local printer*/\n     If (&ZLSTCLA = ' ')                /*   or sysout class specified then  */\n       .MSG = ISPP031                   /*  error - must specify one parm    */\n     Else\n   &ZLSTFDDV = J\n Else\n   If (&ZLSTFDDV = 'KN')\n     &ZLSTFDDV = R\n   Else\n &ZLSTFDSP = &ZLSTFDDV\n)END\n/* 5685-054 (C) COPYRIGHT IBM CORP. 1980, 1990                              */\n./ ADD NAME=ISPPFT04 0101-01016-01016-1416-00066-00066-00000-RACFPNL\n%-------------------  SPECIFY DISPOSITION OF LOG DATA SET  ---------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+LOG DATA SET DISPOSITION               LIST DATA SET OPTIONS NOT AVAILABLE\n+-------------------------              -----------------------------------\n+Process option  %===>_ZLOGFDDV +\n+SYSOUT class    %===>_ZLOGCLA        +\n+Local printer ID%===>_ZLOGPID +\n+\n+VALID PROCESS OPTIONS:\n%    PD+- Print data set and delete\n%    D +- Delete data set without printing\n%    K +- Keep data set (allocate same data set in next session)\n%    KN+- Keep data set and allocate new data set in next session\n+\n+  Press%ENTER+key to complete ISPF termination.\n+  Enter%END+command to return to the primary option menu.\n+\n+JOB STATEMENT INFORMATION:  (Required for system printer)\n%  ===>_ZLLGJOB1\n%  ===>_ZLLGJOB2\n%  ===>_ZLLGJOB3\n%  ===>_ZLLGJOB4\n)INIT\n  .HELP = ISP90110\n  .CURSOR = ZLOGFDDV\n  If (&ZLOGFDSP = J,L)                  /* Initialize DISPLAY process option */\n    &ZLOGFDDV = PD\n  Else\n    If (&ZLOGFDSP = R)\n      &ZLOGFDDV = KN\n    Else\n      If (&ZLOGFDSP = D,K)\n        &ZLOGFDDV = &ZLOGFDSP\n      Else\n)REINIT\n If (.CURSOR = ' ')\n   .CURSOR = ZLOGFDDV\n Else\n)PROC\n If (.RESP = ENTER)\n   If (&ZVERB ^= ' ' )\n     .MSG = ISPZ002\n   Else\n     If (&ZCMD ^= ' ' )\n       .MSG = ISPZ001\n     Else\n Else\n Ver (&ZLOGFDDV NB LIST PD,D,K,KN)\n If (&ZLOGFDDV = 'PD')                  /* If print specified and            */\n   If (&ZLOGPID ^= ' ' )                /*   both local printer and          */\n     If (&ZLOGCLA ^= ' ')               /*   sysout class specified then     */\n       .MSG = ISPP032                   /*  error - duplicate specification  */\n     Else\n   Else                                 /* If print and neither local printer*/\n     If (&ZLOGCLA = ' ')                /*   or sysout class specified then  */\n       .MSG = ISPP031                   /*  error - must specify one parm    */\n     Else\n   &ZLOGFDDV = J\n Else\n   If (&ZLOGFDDV = KN)\n     &ZLOGFDDV = R\n   Else\n &ZLOGFDSP = &ZLOGFDDV\n)END\n/* 5685-054 (C) COPYRIGHT IBM CORP. 1980, 1990                              */\n./ ADD NAME=ISPTERM  0101-01016-01016-1416-00050-00050-00000-RACFPNL\n)ATTR\n\u00a2 TYPE(&ZF3ATTR)\n)BODY\n%----------------------------  ISPF DIALOG ERROR  ------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%\n%******************************************************************************\n%*+                                                                          %*\n%*+ %&ZERRSM                 +                                               %*\n%*+ %&ZERRLM                                                                 %*\n%*+                                                                          %*\n%*+                                                                          %*\n%*+ &ZDESCR                                                                  %*\n%*+%&CSELINE                                                                 %*\n%*+                                                                          %*\n%*+                                                                          %*\n%*+ Enter%HELP+command for further information regarding this error.         %*\n%*+ Press%ENTER+key to terminate the dialog.                                 %*\n%*+                                                                          %*\n%*+ &ZF1                                                                     %*\n%*+                         %&ZF2\u00a2ZF3+&ZF4                                   %*\n%*+                                                                          %*\n%******************************************************************************\n)INIT\n  &ZCMD = ' '\n  &ZF3ATTR = 'OUTPUT'\n  .HELP = ISP94000\n  &ZDESCR = TRANS(&CSEDSC ' ',' '\n           P,'Panel line where error was detected:'\n           C,'Current dialog statement:'\n           S,'File tailoring input line:')\n  &ZF1 = ' '  &ZF2 = ' '  &ZF3 = ' ' &ZF4 = ' ' &ZF3ATTR = 'OUTPUT'\n  IF(&CSETEST = 'Y')\n    .CURSOR = ZF3\n    &ZF1 = 'OVERRIDE TERMINATION AND ATTEMPT TO CONTINUE'\n    &ZF2 = '===>'\n    &ZF3= 'NO'\n    &ZF4 = '(YES or NO)'\n    &ZF3ATTR = 'INPUT'\n)PROC\n  IF (.RESP = ENTER)\n    IF (&ZCMD ^= ' ')\n      .MSG = ISPZ001                      /* INVALID COMMAND            */\n  &ZF3 = TRUNC(&ZF3,1)\n  VER (&ZF3,LIST,Y,N)\n  IF (&ZF3 ^= Y) .RESP = ENTER\n  IF (&ZF3  = Y) .RESP = END\n)END\n/* 5685-054 (C) COPYRIGHT IBM CORP. 1980, 1990                              */\n./ ADD NAME=ISRUDA2  0101-01016-01016-1416-00055-00055-00000-RACFPNL\n)ATTR\n  ^ TYPE(INPUT) INTENS(NON)\n)BODY\n%----------------------------  DATA SET UTILITY  -------------------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%   C+- Catalog data set\n%   R+- Rename entire data set               %U+- Uncatalog data set\n%   D+- Delete entire data set               %S+- Data set information (short)\n%   blank+- Data set information\n+\n+ISPF LIBRARY:\n+   PROJECT%===>_PRJ0    +\n+   GROUP  %===>_LIB0    +\n+   TYPE   %===>_TYP0    +\n+\n+OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n+   DATA SET NAME %===>_DSN                                                    +\n+   VOLUME SERIAL %===>_VOL   +  (If not cataloged, required for option \"C\")\n+\n+DATA SET PASSWORD%===>^PSWD    +(If password protected)\n)INIT\n  .HELP = ISR32000\n  &ZCMD = TRANS(&OPT N,R E,D I,' ' V,U *,*)\n  IF ( &DSN = ' ' )\n    &VOL = &Z\n  IF ( &DSN ^= ' ' )\n    .CURSOR = ZCMD\n  IF ( .CURSOR = ' ' )\n    .CURSOR = ZCMD\n)PROC\n  &OPT = TRANS(&ZCMD N,# E,# I,# V,# R,N D,E ' ',I U,V *,*)\n  VER(&OPT,LIST,N,E,I,C,V,S)\n  IF ( &OPT = C )\n    VER(&VOL,NB)\n  IF ( &OPT = V )\n    IF (&VOL ^= ' ' )\n      .MSG = ISRU230\n  IF ( &DSN = ' ' )\n    VER(&PRJ0,NB)\n    VER(&LIB0,NB)\n    VER(&TYP0,NB)\n    IF ( &OPT ^= C )\n      IF (&VOL ^= ' ' )\n        .MSG = ISRU232\n  IF ( &DSN ^= ' ' )                    /* DSN SPECIFIED ??       @M1A*/\n    &ZFC = TRUNC(&DSN,1)                /* IF FIRST CHARACTER     @M1A*/\n    IF (&ZFC = '''')                    /*  OF DSN IS \"'\" CHECK   @M1A*/\n      &ZREM = .TRAIL                    /*  TO SEE IF LAST \"'\"    @M1A*/\n      &ZREM1 = TRUNC(&ZREM,'''')        /*  IS MISSING.           @M1A*/\n      IF (&ZREM1 = &ZREM)               /*  IF LAST \"'\" MISSING   @M1A*/\n        &DSN = '&DSN&ZFC'               /*    ADD IT TO THE END   @M1A*/\n    VER (&DSN,DSNAME)\n  VPUT ( PRJ0 LIB0 TYP0 ) PROFILE\n)END\n./ ADD NAME=ISRUD2   0101-01016-01016-1416-00061-00061-00000-RACFPNL\n)ATTR\n  ^ TYPE(INPUT) INTENS(NON)\n)BODY\n%----------------------------  DATA SET UTILITY  -------------------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%   C+- Catalog data set                     %U+- Uncatalog data set\n%   R+- Rename entire data set               %S+- Data set information (short)\n%   D+- Delete entire data set               %blank+- Data set information\n%\n+\n+ISPF LIBRARY:\n+   PROJECT%===>_PRJ0    +\n+   GROUP  %===>_LIB0    +\n+   TYPE   %===>_TYP0    +\n+\n+OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n+   DATA SET NAME %===>_DSN                                                    +\n+   VOLUME SERIAL %===>_VOL   +  (If not cataloged, required for option \"C\")\n+\n+DATA SET PASSWORD%===>^PSWD    +(If password protected)\n)INIT\n  .HELP = ISR32000\n  &ZCMD = TRANS(&OPT N,R E,D I,' ' V,U *,*)\n  IF ( &DSN = ' ' )\n    &VOL = &Z\n  IF ( &DSN ^= ' ' )\n    .CURSOR = ZCMD\n  IF ( .CURSOR = ' ' )\n    .CURSOR = ZCMD\n)PROC\n  &OPT = TRANS(&ZCMD N,# E,# I,# V,# R,N D,E ' ',I U,V *,*)\n  VER(&OPT,LIST,N,E,I,C,V,S)\n  IF ( &OPT = C )\n    VER(&VOL,NB)\n  IF ( &OPT = V )\n    IF (&VOL ^= ' ' )\n      .MSG = ISRU230\n  IF ( &DSN = ' ' )\n    VER(&PRJ0,NB)\n    VER(&LIB0,NB)\n    VER(&TYP0,NB)\n    IF ( &OPT ^= C )\n      IF (&VOL ^= ' ' )\n        .MSG = ISRU232\n  IF ( &DSN ^= ' ' )                    /* DSN SPECIFIED ??       @M1A*/\n    &ZFC = TRUNC(&DSN,1)                /* IF FIRST CHARACTER     @M1A*/\n    IF (&ZFC = '''')                    /*  OF DSN IS \"'\" CHECK   @M1A*/\n      &ZREM = .TRAIL                    /*  TO SEE IF LAST \"'\"    @M1A*/\n      &ZREM1 = TRUNC(&ZREM,'''')        /*  IS MISSING.           @M1A*/\n      IF (&ZREM1 = &ZREM)               /*  IF LAST \"'\" MISSING   @M1A*/\n        &DSN = '&DSN&ZFC'               /*    ADD IT TO THE END   @M1A*/\n    VER (&DSN,DSNAME)\n  VPUT ( PRJ0 LIB0 TYP0 ) PROFILE\n)END\n /*                                                                   */\n /* $SEG(ISRUDA2) COMP(UTILITY) PROD(MVS)                             */\n /*                                                                   */\n /* CHANGE ACTIVITY                                                   */\n /*  $M1= TRAILQ    M310     881102   641747 :                        */\n/* 5665-402 (C) COPYRIGHT IBM CORP 1980, 1989 */\n./ ADD NAME=ISRUMC1  0101-01016-01016-1416-00079-00079-00000-RACFPNL\n)ATTR\n  ^ TYPE(INPUT) INTENS(NON)\n)BODY\n%---------------------------  MOVE/COPY UTILITY  -------------------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%   C+- Copy data set or member(s)             %CP+- Copy and print\n%   M+- Move data set or member(s)             %MP+- Move and print\n+\n+\n+SPECIFY%\"FROM\"+DATA SET BELOW, THEN PRESS%ENTER+KEY\n+\n+FROM ISPF LIBRARY:        ------ Options C and CP only ---------------\n+   PROJECT%===>_PRJ1    + |                                          |\n+   GROUP  %===>_LIB1    % ===>_LIB2    % ===>_LIB3    % ===>_LIB4    %\n+   TYPE   %===>_TYP1    +\n+   MEMBER %===>_MEMB    +       (Blank or pattern for member selection list,\n+                                 '*' for all members)\n+\n+FROM OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n+   DATA SET NAME %===>_DSN1\n+   VOLUME SERIAL %===>_VOL1  +  (If not cataloged)\n+\n+DATA SET PASSWORD%===>^PSWD    +(If password protected)\n)INIT\n  &ZMLCSR = '        '                  /*                       @M3A*/\n  .HELP=ISR33020\n  &ZCMD = &ZOPT\n  &ZUMCSEL  = 'S'\n  &ZUMCNREP = 'NO-REPL'\n  IF ( &DSN1 ^= ' ' )\n    &MEMB = ' '                         /*                        @M1A*/\n    .CURSOR = DSN1\n  IF ( .CURSOR = ' ')\n    .CURSOR = ZCMD\n)REINIT                                 /*                       @M3A*/\n   IF (&ZMLCSR ^= ' ')                  /*                       @M3A*/\n     .CURSOR = &ZMLCSR                  /*                       @M3A*/\n)PROC\n  VER(&ZCMD,NB,LIST,M,C,MP,CP)\n  &ZOPT = &ZCMD\n  IF (&DSN1 = ' ')\n    VER (&PRJ1,NB)\n    VER (&LIB1,NB)\n /* VER (&LIB2,NAME)                                          @OY53789*/\n /* VER (&LIB3,NAME)                                          @OY53789*/\n /* VER (&LIB4,NAME)                                          @OY53789*/\n    VER (&TYP1,NB)\n  IF (&DSN1 ^= ' ')\n    &ZFC = TRUNC(&DSN1,1)               /* IF FIRST CHARACTER     @M2A*/\n    IF (&ZFC = '''')                    /*  OF DSN IS \"'\" CHECK   @M2A*/\n      &ZREM = .TRAIL                    /*  TO SEE IF LAST \"'\"    @M2A*/\n      &ZREM2 = TRUNC(&ZREM,'''')        /*  IS MISSING.           @M2A*/\n      IF (&ZREM2 = &ZREM)               /*  IF LAST \"'\" MISSING   @M2A*/\n        &DSN1 = '&DSN1&ZFC'             /*    ADD IT TO THE END   @M2A*/\n    &ZMLCSR = '********'                /*                        @M3A*/\n    &ZSPLAT = 'Y'                       /*                        @M3A*/\n    PANEXIT((DSN1,ZMLCSR,ZSPLAT),PGM,&ZMLVEXIT,&ZMLVDATA,MSG=ISRM040)\n                                                                /*@M3A*/\n  VPUT (PRJ1,LIB1,LIB2,LIB3,LIB4,TYP1) PROFILE\n)END\n /*                                                                   */\n /* $SEG(ISRUMC1) COMP(MOVECOPY) PROD(MVS)                            */\n /*                                                                   */\n /* CHANGE ACTIVITY                                                   */\n /*  $L0= UNFLAGED PRE230                    :                        */\n /*  $MN= MEMLIST   M230     860820   158590 :                        */\n /*  $M1=  MEMLIST  M230     870218   158590 : System Test PTM 1179   */\n /*  $S1= QUALITY   M230     870427   180194 : ST PTM#1491 - delete   */\n /*  setting of copy and move literals                                */\n /*  $L1= CONC33    M310     881027   020136 : Add libs 2-4           */\n /*  $M2= TRAILQ    M310     881102   641747 :                        */\n /*  $L8= DCR55     M310     890118   464449 : LMF clarification      */\n /*  $M3= QUALITY   M310     890127   641747 : ST PTM 26              */\n /*                                                                   */\n /*  CHANGED PANEL TEXT FOR PATTERN SUPPORT                       @MNA*/\n /*  OY53789 - 92/05/01  ALLOW MULTI-LEVEL QUALIFIERS IN GROUP2,      */\n /*  PLPPSD    GROUP3 AND GROUP4 FIELDS.                              */\n/* 5665-402 (C) COPYRIGHT IBM CORP 1980, 1989 */\n./ ADD NAME=ISRUT1   0101-01016-01016-1416-00043-00043-00000-RACFPNL\n%-------------------------  UTILITY SELECTION MENU  ----------------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%    1 +LIBRARY    - Compress or print data set.  Print index listing.\n+                      Print, rename, delete, or browse members\n%    2 +DATASET    - Rename, delete, catalog, uncatalog, or display\n+                      information of an entire data set\n%    3 +MOVE/COPY  - Move, copy, and print members or data sets\n%    4 +DSLIST     - Print or display (to process) list of data set names\n+                      Print or display VTOC information\n%    5 +HARDCOPY   - Initiate hardcopy output\n%    6 +OUTLIST    - Display, delete, or print held job output\n%    7 +SUPERC     - Compare data sets (Standard Dialog)\n%    8 +SUPERCE    - Compare data sets (Extended Dialog)\n%    9 +SEARCH-FOR - Search data sets for strings of data\n%\n%\n)INIT\n  .HELP = ISR30000\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'PGM(ISRUDA) PARM(ISRUDA1)'\n                2,'PGM(ISRUDA) PARM(ISRUDA2)'\n                3,'PGM(ISRUMC)'\n                4,'PGM(ISRUDL) PARM(ISRUDLP)'\n                5,'PGM(ISRUHC)'\n                6,'PGM(ISRUOLP)'\n                7,'PGM(ISRSSM)'\n                8,'PGM(ISRSEPRM) NOCHECK'\n                9,'PGM(ISRSFM)'\n              ' ',' '\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n /*                                                                  */\n /* $SEG(ISRUTIL) COMP(SUPERCD) PROD(MVS):                           */\n /* CHANGE ACTIVITY:                                                 */\n /*    PN = REASON    RELEASE   DATE    ORIGIN   COMMENT             */\n /*    --   --------  --------  ------  ------ : ------------------  */\n /*   $L1 = UNFLAGED  PRE230    100386  LUDLOW :                     */\n /*   $L1 = SUPERC    M230      100386  LUDLOW :                     */\n /*                                                                  */\n/* 5665-402 (C) COPYRIGHT IBM CORP 1980, 1991 */\n./ ADD NAME=ISRUT4   0101-01016-01016-1416-00047-00047-00000-RACFPNL\n%-------------------------  UTILITY SELECTION MENU  ----------------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%    1 +LIBRARY    - Compress or print data set.  Print index listing.\n+                      Print, rename, delete, or browse members\n%    2 +DATASET    - Rename, delete, catalog, uncatalog, or display\n+                      information of an entire data set\n%    3 +MOVE/COPY  - Move, copy, or promote members or data sets\n%    4 +DSLIST     - Print or display (to process) list of data set names\n+                      Print or display VTOC information\n%    5 +HARDCOPY   - Initiate hardcopy output\n%    6 +OUTLIST    - Display, delete, or print held job output\n%    7 +COMMANDS   - Create/change an application command table\n%    8 +CONVERT    - Convert old format menus/messages to new format\n%    9 +FORMAT     - Format definition for formatted data Edit/Browse\n%   10 +SUPERC     - Compare data sets                        (Standard Dialog)\n%   11 +SUPERCE    - Compare data sets and Search-for strings (Extended Dialog)\n%   12 +SEARCH-FOR - Search data sets for strings of data     (Standard Dialog)\n)INIT\n  .HELP = ISR30000\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'PGM(ISRUDA) PARM(ISRUDA1)'\n                2,'PGM(ISRUDA) PARM(ISRUD2)'\n                3,'PGM(ISRUMC)'\n                4,'PGM(ISRUDL) PARM(ISRUDLP)'\n                5,'PGM(ISRUHC)'\n                6,'PGM(ISRUOLP)'\n                7,'PANEL(ISPUCMA)'\n                8,'PGM(ISRQCM) PARM(ISRQCMP)'\n                9,'PGM(ISRFMT)'\n               10,'PGM(ISRSSM)'\n               11,'PGM(ISRSEPRM) NOCHECK'\n               12,'PGM(ISRSFM)'\n              ' ',' '\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n /*                                                                  */\n /* $SEG(ISRUTIL) COMP(SUPERCD) PROD(MVS):                           */\n /* CHANGE ACTIVITY:                                                 */\n /*    PN = REASON    RELEASE   DATE    ORIGIN   COMMENT             */\n /*    --   --------  --------  ------  ------ : ------------------  */\n /*   $L1 = UNFLAGED  PRE230    100386  LUDLOW :                     */\n /*   $L1 = SUPERC    M230      100386  LUDLOW :                     */\n /*                                                                  */\n/* 5665-402 (C) COPYRIGHT IBM CORP 1980, 1991 */\n./ ADD NAME=J2OFJD   0101-01016-01016-1416-00040-00040-00000-RACFPNL\n+---- &ZSYSID ------------%DAILY JOB OFFLOAD FACILITY+---------- &ZSYSID ------\n%                                                                              +\n%\n%                 MON+= MONDAY    / MAANDAG\n%                 TUE+= TUESDAY   / DINSDAG\n%                 WED+= WEDNESDAY / WOENSDAG\n%                 THU+= THURSDAY  / DONDERDAG\n%                 FRI+= FRIDAY    / VRYDAG\n%                 SAT+= SATURDAY  / SATERDAG\n%                 SUN+= SUNDAY    / SONDAG\n%\n%      +ENTER%CURRENT+DAY  ===>_DAY+                                           +\n%\n%       X +EXIT - Terminate OFFLOAD JOB\n%\n+  Enter%END+command to terminate OFFLOAD JOB.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n&ZQ = &Z\n  IF (&DAY ^= ' ')\n    &ZQ = TRUNC(&DAY,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            MON,'CMD(OFFLOAD1 &DAY)'\n            TUE,'CMD(OFFLOAD1 &DAY)'\n            WED,'CMD(OFFLOAD1 &DAY)'\n            THU,'CMD(OFFLOAD1 &DAY)'\n            FRI,'CMD(OFFLOAD1 &DAY)'\n            SAT,'CMD(OFFLOAD1 &DAY)'\n            SUN,'CMD(OFFLOAD1 &DAY)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2OFJS   0101-01016-01016-1416-00041-00041-00000-RACFPNL\n)ATTR\n@ TYPE(INPUT) INTENS(LOW)\n$ TYPE(INPUT) INTENS(LOW) JUST(RIGHT) PAD(0)\n)BODY\n+----- &ZSYSID ----------%SPECIFIC JOB OFFLOAD FACILITY+--------- &ZSYSID -----\n%                                                                              +\n+   OPTION ====>_zcmd+\n%\n%\n%      +ENTER%JOB+NUMBER   ===> %J$JNUM +                                      +\n%      +ENTER A %COMMENT+  ===> % @COMM               +\n%\n%       1 +ACCEPT - Accept the input for the OFFLOAD\n%\n%       X +EXIT - Terminate OFFLOAD JOB\n%\n%        PLEASE REMEMBER THAT THIS DOES NOT USE JOB RANGES.\n%\n%        FOR EACH RANGE YOU SHOULD SPECIFY THE JOB NUMBER.\n%\n+  Enter%END+command to terminate OFFLOAD JOB.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n ver(&jnum,nonblank,range,1,32767)\n ver(&comm,nonblank)\n&ZQ = &Z\n  IF (&zcmd ^= ' ')\n    &ZQ = TRUNC(&zcmd,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            1,'CMD(OFFLOAD3 &JNUM:&COMM)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2OFMN   0101-01016-01016-1416-00036-00036-00000-RACFPNL\n+------ &ZSYSID ------------%MAIN OFFLOAD FACILITY+--------------- &ZSYSID ----\n%OPTION  ===>_ZCMD  +                                                          +\n%\n%\n%\n%   1 +DAILY JOB'S   -%OFFLOAD+OF DAILY JOB'S TO CARTRIDGE\n%   2 +DAILY STC'S   -%OFFLOAD+OF DAILY STC'S TO CARTRIDGE\n%   3 +SPECIFIC JOB  -%OFFLOAD+OF A SPECIFIC JOB TO CARTRIDGE\n%   4 +SPECIFIC STC  -%OFFLOAD+OF A SPECIFIC STC TO CARTRIDGE\n%\n%\n%\n%   X +EXIT - Terminate OFFLOAD\n%\n+  Enter%END+command to terminate OFFLOAD.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OHO0002\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                1,'PANEL(J2OFJD)'\n                2,'PANEL(J2OFSD)'\n                3,'PANEL(J2OFJS)'\n                4,'PANEL(J2OFSS)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2OFON   0101-01016-01016-1416-00040-00040-00000-RACFPNL\n+----- &ZSYSID -------------%JES2 FACILITY MENU+----------------- &ZSYSID ------\n%OPTION  ===>_ZCMD  +                                                          +\n%\n%                                                +USERID -%&ZUSER\n%                                                +DATE   -%&Zdate\n%                                                +TIME   -%&Ztime\n%\n%   1 +OFFLOADS  - OFFLOAD FACILITY TO CARTRIDGE\n%   2 +RELOADS   - RELOAD FACILITY FROM CARTRIDGE\n%\n%   B +BROWSE    - BROWSE THE JES2 OFFLOAD / RELOAD LOG\n%\n%   X +EXIT      - Terminate%JES2 FACILITY.+\n%\n+  Enter%END+command to terminate JES2 FACILITY.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = OHO0001    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = OHO0001  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  .HELP = OHO0001\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                1,'PANEL(J2OFMN)'\n                2,'PANEL(J2ONMN)'\n                B,'CMD(OFFBRWSE)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2OFSD   0101-01016-01016-1416-00040-00040-00000-RACFPNL\n+---- &ZSYSID -------------%DAILY STC OFFLOAD FACILITY+--------- &ZSYSID ------\n%                                                                              +\n%\n%                 MON+= MONDAY    / MAANDAG\n%                 TUE+= TUESDAY   / DINSDAG\n%                 WED+= WEDNESDAY / WOENSDAG\n%                 THU+= THURSDAY  / DONDERDAG\n%                 FRI+= FRIDAY    / VRYDAG\n%                 SAT+= SATURDAY  / SATERDAG\n%                 SUN+= SUNDAY    / SONDAG\n%\n%      +ENTER%CURRENT+DAY  ===>_DAY+                                           +\n%\n%       X +EXIT - Terminate OFFLOAD STC\n%\n+  Enter%END+command to terminate OFFLOAD STC.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n&ZQ = &Z\n  IF (&DAY ^= ' ')\n    &ZQ = TRUNC(&DAY,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            MON,'CMD(OFFLOAD2 &DAY)'\n            TUE,'CMD(OFFLOAD2 &DAY)'\n            WED,'CMD(OFFLOAD2 &DAY)'\n            THU,'CMD(OFFLOAD2 &DAY)'\n            FRI,'CMD(OFFLOAD2 &DAY)'\n            SAT,'CMD(OFFLOAD2 &DAY)'\n            SUN,'CMD(OFFLOAD2 &DAY)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2OFSS   0101-01016-01016-1416-00042-00042-00000-RACFPNL\n)ATTR\n# TYPE(INPUT) INTENS(LOW)\n$ TYPE(INPUT) INTENS(LOW) JUST(RIGHT) PAD(0)\n)BODY\n+----- &ZSYSID -----------%SPECIFIC STC OFFLOAD FACILITY+------- &ZSYSID ------\n%                                                                              +\n+   OPTION ====>_zcmd+\n%\n%\n%      +ENTER%STC+NUMBER   ===> %S$SNUM +                                      +\n%      +ENTER A%COMMENT+   ===> %#COMM                +                        +\n%\n%\n%       1 +ACCEPT - Accept the input for the OFFLOAD\n%\n%       X +EXIT - Terminate OFFLOAD STC\n%\n%        PLEASE REMEMBER THAT THIS DOES NOT USE STC RANGES.\n%\n%        FOR EACH RANGE YOU SHOULD SPECIFY THE STC NUMBER.\n%\n+  Enter%END+command to terminate OFFLOAD STC.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n ver(&snum,nonblank,range,1,32767)\n ver(&comm,nonblank)\n&ZQ = &Z\n  IF (&zcmd ^= ' ')\n    &ZQ = TRUNC(&zcmd,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            1,'CMD(OFFLOAD4 &SNUM:&COMM)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2ONJD   0101-01016-01016-1416-00041-00041-00000-RACFPNL\n+------ &ZSYSID ----------%DAILY JOB RELOAD FACILITY+------------- &ZSYSID ----\n%                                                                              +\n%\n%                 MON+= MONDAY    / MAANDAG\n%                 TUE+= TUESDAY   / DINSDAG\n%                 WED+= WEDNESDAY / WOENSDAG\n%                 THU+= THURSDAY  / DONDERDAG\n%                 FRI+= FRIDAY    / VRYDAG\n%                 SAT+= SATURDAY  / SATERDAG\n%                 SUN+= SUNDAY    / SONDAG\n%\n%  ENTER THE DAY TO RELOAD FROM ===>_DAY+                                      +\n%  ENTER THE JOB NUMBER         ===>_JNUM1+   (Blank for all jobs)             +\n%\n%       X +EXIT - Terminate RELOAD JOB\n%\n+  Enter%END+command to terminate RELOAD JOB.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n&ZQ = &Z\n  IF (&DAY ^= ' ')\n    &ZQ = TRUNC(&DAY,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            MON,'CMD(ONLOAD1 &DAY &JNUM1)'\n            TUE,'CMD(ONLOAD1 &DAY &JNUM1)'\n            WED,'CMD(ONLOAD1 &DAY &JNUM1)'\n            THU,'CMD(ONLOAD1 &DAY &JNUM1)'\n            FRI,'CMD(ONLOAD1 &DAY &JNUM1)'\n            SAT,'CMD(ONLOAD1 &DAY &JNUM1)'\n            SUN,'CMD(ONLOAD1 &DAY &JNUM1)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2ONJS   0101-01016-01016-1416-00042-00042-00000-RACFPNL\n)ATTR\n# TYPE(INPUT) INTENS(LOW) JUST(RIGHT) PAD(_)\n$ TYPE(INPUT) INTENS(LOW) JUST(RIGHT) PAD(0)\n)BODY\n+----- &ZSYSID -----------%SPECIFIC JOB ONLOAD FACILITY+-------- &ZSYSID ------\n%                                                                              +\n+   OPTION ====>_zcmd+\n%\n%\n%      +ENTER%JOB+NUMBER   ===> J$JNUM +                                       +\n%      +ENTER%DATE+WHEN OFFLOAD TOOK PLACE ===> #DT    +  %(YYMMDD)+\n%\n%       1 +ACCEPT - Accept the input for the ONLOAD\n%\n%       X +EXIT - Terminate ONLOAD JOB\n%\n%\n%        PLEASE REMEMBER THAT THIS DOES NOT USE JOB RANGES.\n%\n%  THIS OPTION WILL ONLY WORK IF THE JOB WAS OFFLOADED USING OPTION \"1.3\"\n%\n+  Enter%END+command to terminate ONLOAD JOB.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n ver(&jnum,nonblank,range,1,32767)\n ver(&dt,nonblank)\n&ZQ = &Z\n  IF (&zcmd ^= ' ')\n    &ZQ = TRUNC(&zcmd,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            1,'CMD(ONLOAD3 &JNUM:&DT)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2ONMN   0101-01016-01016-1416-00036-00036-00000-RACFPNL\n+------ &ZSYSID -------------%MAIN RELOAD FACILITY+--------------- &ZSYSID ----\n%OPTION  ===>_ZCMD  +                                                          +\n%                                                                              +\n%                                                                              +\n%                                                                              +\n%   1 +DAILY JOB'S   -%RELOAD+OF DAILY JOBS FROM CARTRIDGE or                  +\n%                    -%RELOAD+OF SPECIFIC JOB FROM DAILY CARTRIDGE             +\n%   2 +DAILY STC'S   -%RELOAD+OF DAILY STC'S FROM CARTRIDGE or                 +\n%                    -%RELOAD+OF SPECIFIC STC FROM DAILY CARTRIDGE             +\n%   3 +SPECIFIC JOB  -%RELOAD+OF A SPECIFIC JOB FROM CARTRIDGE                 +\n%   4 +SPECIFIC STC  -%RELOAD+OF A SPECIFIC STC FROM CARTRIDGE                 +\n%\n%   X +EXIT - Terminate RELOAD\n%\n+  Enter%END+command to terminate RELOAD.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OHO0003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                1,'PANEL(J2ONJD)'\n                2,'PANEL(J2ONSD)'\n                3,'PANEL(J2ONJS)'\n                4,'PANEL(J2ONSS)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2ONSD   0101-01016-01016-1416-00042-00042-00000-RACFPNL\n+------ &ZSYSID -----------%DAILY STC RELOAD FACILITY+------------ &ZSYSID ----\n%                                                                              +\n%\n%                 MON+= MONDAY    / MAANDAG\n%                 TUE+= TUESDAY   / DINSDAG\n%                 WED+= WEDNESDAY / WOENSDAG\n%                 THU+= THURSDAY  / DONDERDAG\n%                 FRI+= FRIDAY    / VRYDAG\n%                 SAT+= SATURDAY  / SATERDAG\n%                 SUN+= SUNDAY    / SONDAG\n%\n%  ENTER THE DAY TO RELOAD FROM  ===>_DAY+                                     +\n%  ENTER THE STC NUMBER          ===>_JNUM1+   (Blank for all STC's)           +\n%\n%       X +EXIT - Terminate RELOAD STC\n%\n+  Enter%END+command to terminate RELOAD STC.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n&ZQ = &Z\n  IF (&DAY ^= ' ')\n    &ZQ = TRUNC(&DAY,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            MON,'CMD(ONLOAD2 &DAY &JNUM1)'\n            TUE,'CMD(ONLOAD2 &DAY &JNUM1)'\n            WED,'CMD(ONLOAD2 &DAY &JNUM1)'\n            THU,'CMD(ONLOAD2 &DAY &JNUM1)'\n            FRI,'CMD(ONLOAD2 &DAY &JNUM1)'\n            SAT,'CMD(ONLOAD2 &DAY &JNUM1)'\n            SUN,'CMD(ONLOAD2 &DAY &JNUM1)'\n            SUN,'CMD(ONLOAD2 &DAY &JNUM1)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=J2ONSS   0101-01016-01016-1416-00045-00045-00000-RACFPNL\n)ATTR\n# TYPE(INPUT) INTENS(LOW) JUST(RIGHT) PAD(_)\n$ TYPE(INPUT) INTENS(LOW) JUST(RIGHT) PAD(0)\n)BODY\n+----- &ZSYSID -----------%SPECIFIC STC ONLOAD FACILITY+-------- &ZSYSID ------\n%                                                                              +\n+   OPTION ====>_zcmd+\n%\n%\n%      +ENTER%STC+NUMBER   ===> %S$SNUM +                                      +\n%      +ENTER%DATE+WHEN OFFLOAD TOOK PLACE ===> #DT    +  %(YYMMDD)+\n%\n%       1 +ACCEPT - Accept the input for the ONLOAD\n%\n%       X +EXIT - Terminate ONLOAD STC\n%\n%\n%        PLEASE REMEMBER THAT THIS DOES NOT USE STC RANGES.\n%\n% THIS OPTION WILL ONLY WORK IF THE STC WAS OFFLOADED WITH OPTION \"1.4\"\n%\n%\n%\n+  Enter%END+command to terminate ONLOAD STC.\n%\n+  Press%PF1+/%PF13+for HELP.\n%\n)INIT\n  .CURSOR = ZCMD\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n ver(&snum,nonblank,range,1,32767)\n ver(&dt,nonblank)\n&ZQ = &Z\n  IF (&zcmd ^= ' ')\n    &ZQ = TRUNC(&zcmd,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            1,'CMD(ONLOAD4 &SNUM:&DT)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=KASTINIT 0101-01016-01016-1416-00108-00108-00000-RACFPNL\n)ATTR\n  \u00a2 TYPE(INPUT) INTENS(HIGH) PAD(NULLS)\n)BODY\n%------------------------ Cartridge Initialization -----------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n%Who requested this ? +: ====>_Z                                               +\n+--------------------\n+\n%What is the reason ?+ : ====>_Z                                               +\n+----------------------\n+\n%Specify cartriges to be initialized:           %(Robot cartridges not allowed)\n+------------------------------------\n+Cart. #1 %==>_Z     +    Cart. #2 %==>_Z     +    Cart. #3 %==>_Z     +\n+Cart. #4 %==>_Z     +    Cart. #5 %==>_Z     +    Cart. #6 %==>_Z     +\n+Cart. #7 %==>_Z     +    Cart. #8 %==>_Z     +    Cart. #9 %==>_Z     +\n+Cart. #10%==>_Z     +    Cart. #11%==>_Z     +    Cart. #12%==>_Z     +\n+Cart. #13%==>_Z     +    Cart. #14%==>_Z     +    Cart. #15%==>_Z     +\n+Cart. #16%==>_Z     +    Cart. #17%==>_Z     +    Cart. #18%==>_Z     +\n+Cart. #19%==>_Z     +    Cart. #20%==>_Z     +\n%\n%   1 +ACCEPT      - Accept options\n%   X +EXIT        - Terminate without adding\n+\n+   Use %TAB+ to EDIT VALUES.\n)INIT\n  &USERID = ' '\n  .HELP = RACFH07\n  .ZVARS = '(req reas ct1 ct2 ct3 ct4 ct5 ct6 ct7 ct8 ct9 ct10 +\n  ct11 ct12 ct13 ct14 ct15 ct16 ct17 ct18 ct19 ct20)'\n  IF (&ct1 = '')       &ct1 = ' '\n  IF (&ct2 = '')       &ct2 = ' '\n  IF (&ct3 = '')       &ct3 = ' '\n  IF (&ct4 = '')       &ct4 = ' '\n  IF (&ct5 = '')       &ct5 = ' '\n  IF (&ct6 = '')       &ct6 = ' '\n  IF (&ct7 = '')       &ct7 = ' '\n  IF (&ct8 = '')       &ct8 = ' '\n  IF (&ct9 = '')       &ct9 = ' '\n  IF (&ct10 = '')      &ct10 = ' '\n  IF (&ct11 = '')      &ct11 = ' '\n  IF (&ct12 = '')      &ct12 = ' '\n  IF (&ct13 = '')      &ct13 = ' '\n  IF (&ct14 = '')      &ct14 = ' '\n  IF (&ct15 = '')      &ct15 = ' '\n  IF (&ct16 = '')      &ct16 = ' '\n  IF (&ct17 = '')      &ct17 = ' '\n  IF (&ct18 = '')      &ct18 = ' '\n  IF (&ct19 = '')      &ct19 = ' '\n  IF (&ct20 = '')      &ct20 = ' '\n)REINIT\n)PROC\n  VER(&ZCMD, NONBLANK)\n  IF (&ZQ = ' ')\n     .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 1)\n     VER(&req, NONBLANK)\n     VER(&reas, NONBLANK)\n     VER(&ct1, NONBLANK)\n     IF (&CT1 ^= '')\n      VER(&ct1, LEN, '>', 3)\n     IF (&ct2 ^= '')\n      VER(&ct2, LEN, '>', 3)\n     IF (&CT3 ^= '')\n      VER(&ct3, LEN, '>', 3)\n     IF (&CT4 ^= '')\n      VER(&ct4, LEN, '>', 3)\n     IF (&CT5 ^= '')\n      VER(&ct5, LEN, '>', 3)\n     IF (&CT6 ^= '')\n      VER(&ct6, LEN, '>', 3)\n     IF (&CT7 ^= '')\n      VER(&ct7, LEN, '>', 3)\n     IF (&CT8 ^= '')\n      VER(&ct8, LEN, '>', 3)\n     IF (&CT9 ^= '')\n      VER(&ct9, LEN, '>', 3)\n     IF (&CT10 ^= '')\n      VER(&ct10, LEN, '>', 3)\n     IF (&CT11 ^= '')\n      VER(&ct11, LEN, '>', 3)\n     IF (&CT12 ^= '')\n      VER(&ct12, LEN, '>', 3)\n     IF (&CT13 ^= '')\n      VER(&ct13, LEN, '>', 3)\n     IF (&CT14 ^= '')\n      VER(&ct14, LEN, '>', 3)\n     IF (&CT15 ^= '')\n      VER(&ct15, LEN, '>', 3)\n     IF (&CT16 ^= '')\n      VER(&ct16, LEN, '>', 3)\n     IF (&CT17 ^= '')\n      VER(&ct17, LEN, '>', 3)\n     IF (&CT18 ^= '')\n      VER(&ct18, LEN, '>', 3)\n     IF (&CT19 ^= '')\n      VER(&ct19, LEN, '>', 3)\n     IF (&CT20 ^= '')\n      VER(&ct20, LEN, '>', 3)\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n   1,'CMD(%TSOKASTI &req:&reas:&ct1:&ct2:&ct3:&ct4:&ct5+\n                    :&ct6:&ct7:&ct8:&ct9:&ct10:&ct11:&ct12:&ct13:&ct14+\n                    :&ct15:&ct16:&ct17:&ct18:&ct19:&ct20)'\n     ' ',' '\n     X,'EXIT')\n)END\n./ ADD NAME=NETPANL  0101-01016-01016-1416-00046-00046-00000-RACFPNL\n%---- &ZSYSID -------       Networks Primary Menu        -------- &ZSYSID -----\n%OPTION  ===>_ZCMD                                                             +\n%                                                           +USERID   -%&ZUSER\n%                                                           +DATE     - &ZDATE\n%   E +EDIT        - Edit Datasets                          +PF KEYS  - &ZKEYS\n%   B +BROWSE      - Browse datasets\n%   C +COPY        - Copy datasets or members\n%   F +SDSF        - Spool Display and Search Facility\n%\n%   H +HELP        - TUTOR\n%\n%   T +TSPRINT     - Tsprint\n%   T2+TSPRINT2    - Tsprint2\n%   T3+TSPRINT2    - Tsprint3\n%\n%   0 +ISPF PARMS  - Specify terminal and user parameters\n%   X +EXIT        - Terminate ISPF using log and list defaults\n%\n+Enter%END+command to terminate ISPF.\n)INIT\n  .HELP = ISR00003\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR91000 /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n)PROC\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n  &ZSEL = TRANS( &ZQ\n                0,'PANEL(ISPOPTA)'\n                E,'PANEL(NETPAN06)'\n                C,'PGM(ISRUMC)'\n                B,'PGM(ISRBRO) PARM(ISRBRO01)'\n                H,'PGM(ISpTUTOR) PARM(ISR00000)'\n                F,'PANEL(ZSDSFOP2) NEWAPPL(ISF)'\n                T,'CMD(TSP)'\n                T2,'CMD(TSP TSPRINT2)'\n                T3,'CMD(TSP TSPRINT3)'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n                if (&zcmd = 'F')\n                   &zsel = 'pgm(isfisp) nocheck newappl(isf)'\n  &ZTRAIL = .TRAIL\n)END\n./ ADD NAME=NETPAN06 0101-01016-01016-1416-00069-00069-00000-RACFPNL\n%-----------------------------------EDIT----------------------------------------\n%OPTION  ===>_ZCMD                                                             +\n%                                                      +USERID - %&ZUSER\n%   0 +NETWORK Dataset  - %NET.JCL.LIB                 +TIME   - %&ztime\n%\n%   1 +User Net0001 Data  - %NET0001.JCL.LIB\n%   2 +User Net0002 Data  - %NET0002.JCL.LIB\n%   3 +User Net0003 Data  - %NET0003.JCL.LIB\n%   4 +User Net0004 Data  - %NET0004.JCL.LIB\n%   5 +User Net0005 Data  - %NET0005.JCL.LIB\n%   6 +User Net0006 Data  - %NET0006.JCL.LIB\n%   7 +User Net0007 Data  - %NET0007.JCL.LIB\n%   8 +User Net0008 Data  - %NET0008.JCL.LIB\n%   9 +User Net0009 Data  - %NET0009.JCL.LIB\n%  10 +User Net0010 Data  - %NET0010.JCL.LIB\n%  11 +User Net0011 Data  - %NET0011.JCL.LIB\n%  12 +User Net0012 Data  - %NET0012.JCL.LIB\n%  13 +User Net0013 Data  - %NET0013.JCL.LIB\n%  14 +User Net0014 Data  - %NET0014.JCL.LIB\n%  15 +User Net0015 Data  - %NET0015.JCL.LIB\n%\n+Enter%END+command to exit.\n%\n)INIT\n  .HELP = RACFH602\n                                      /* if blank, LIBDEF is not used */\n)PROC\n&DS0 = 'NET.JCL.LIB'\n&DS1 = 'NET0001.JCL.LIB'\n&DS2 = 'NET0002.JCL.LIB'\n&DS3 = 'NET0003.JCL.LIB'\n&DS4 = 'NET0004.JCL.LIB'\n&DS5 = 'NET0005.JCL.LIB'\n&DS6 = 'NET0006.JCL.LIB'\n&DS7 = 'NET0007.JCL.LIB'\n&DS8 = 'NET0008.JCL.LIB'\n&DS9 = 'NET0009.JCL.LIB'\n&DS10 = 'NET0010.JCL.LIB'\n&DS11 = 'NET0011.JCL.LIB'\n&DS12 = 'NET0012.JCL.LIB'\n&DS13 = 'NET0013.JCL.LIB'\n&DS14 = 'NET0014.JCL.LIB'\n&DS15 = 'NET0015.JCL.LIB'\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n                0,'CMD(%RACFEDIT &DS0)'\n                1,'CMD(%RACFEDIT &DS1)'\n                2,'CMD(%RACFEDIT &DS2)'\n                3,'CMD(%RACFEDIT &DS3)'\n                4,'CMD(%RACFEDIT &DS4)'\n                5,'CMD(%RACFEDIT &DS5)'\n                6,'CMD(%RACFEDIT &DS6)'\n                7,'CMD(%RACFEDIT &DS7)'\n                8,'CMD(%RACFEDIT &DS8)'\n                9,'CMD(%RACFEDIT &DS9)'\n               10,'CMD(%RACFEDIT &DS10)'\n               11,'CMD(%RACFEDIT &DS11)'\n               12,'CMD(%RACFEDIT &DS12)'\n               13,'CMD(%RACFEDIT &DS13)'\n               14,'CMD(%RACFEDIT &DS14)'\n               15,'CMD(%RACFEDIT &DS15)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=OFFH0001 0101-01016-01016-1416-00034-00034-00000-RACFPNL\n)ATTR\n   ! TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(RIGHT) PAD(' ')\n)BODY\n%HELP                   HELP FOR OFFLOADS\n%COMMAND ===>_ZCMD                                                             +\n  The OFFLOADS are done by means of the JES2 SPOOL OFFLOAD\n  facility.\n\n    o By using option (1) all JOB's are offloaded.\n    o By using option (2) all STC's are offloaded.\n    o Please bear in mind that they only offload job's or stc's\n        for the present day, i.e TODAY.\n    o The day that you specify has valid ranges, as shown on the panel\n        when you would like to specify a day.\n    o Option's (3) and (4) lets you specify which job or stc\n        should be offloaded by means of specifying a job or stc number.\n    o When using option (3) or (4) do not specify the \"J\" or \"S\" on the\n        job number or the stc number.\n\n      ENTER = Proceed                    !ENDPF+= End help\n      !UPPF+= Previous help menu         !LFTPF+= Previous help page\n)INIT\n  &LFTPF = PFK(LEFT)\n  &UPPF  = PFK(UP)\n  &ENDPF = PFK(END)\n\n  IF (&LFTPF = ' ') &LFTPF = 'BACK'\n  IF (&UPPF  = ' ') &UPPF  = 'UP'\n  IF (&ENDPF = ' ') &ENDPF = 'END'\n\n)PROC\n &ZSEL = TRANS( &ZCMD\n        *,'?')\n)END\n./ ADD NAME=OFFH0002 0101-01016-01016-1416-00040-00040-00000-RACFPNL\n)ATTR\n   ! TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(RIGHT) PAD(' ')\n)BODY\n%HELP                   HELP FOR ONLOADS\n%COMMAND ===>_ZCMD                                                             +\n  The ONLOADS are done by means of the JES2 SPOOL ONLOAD\n  facility.\n\n    o By using option (1) all JOB's are onloaded.\n    o By using option (2) all STC's are onloaded.\n    o Please bear in mind that they only onload job's or stc's\n        for the present day, i.e TODAY.\n    o The day that you specify has valid ranges, as shown on the panel\n        when you would like to specify a day.\n    o Option's (3) and (4) lets you specify which job or stc\n        should be onloaded by means of specifying a job or stc number.\n    o When using option (3) or (4) do not specify the \"J\" or \"S\" on the\n        job number or the stc number.\n\n      !UPPF+= Previous help menu         !LFTPF+= Previous help page\n     !ENDPF+= End help\n)INIT\n  &ZPRIM = NO         /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = ISR00003   /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = ISR00003 /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &LFTPF = PFK(LEFT)\n  &UPPF  = PFK(UP)\n  &ENDPF = PFK(END)\n\n  IF (&LFTPF = ' ') &LFTPF = 'BACK'\n  IF (&UPPF  = ' ') &UPPF  = 'UP'\n  IF (&ENDPF = ' ') &ENDPF = 'END'\n\n)PROC\n &ZSEL = TRANS( &ZCMD\n        *,'?')\n)END\n./ ADD NAME=OFFH1001 0101-01016-01016-1416-00032-00032-00000-RACFPNL\n)ATTR\n   ! TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(RIGHT) PAD(' ')\n)BODY\n%HELP                   HELP FOR OFFLOADS\n%COMMAND ===>_ZCMD                                                             +\n  The OFFLOADS are done by means of the JES2 SPOOL OFFLOAD\n  facility.\n\n    o By using option (1) all JOB's are offloaded.\n    o By using option (2) all STC's are offloaded.\n    o Please bear in mind that they only offload job's or stc's\n        for the present day, i.e TODAY.\n    o The day that you specify has valid ranges, as shown on the panel\n        when you would like to specify a day.\n    o Option's (3) and (4) lets you specify which job or stc\n        should be offloaded by means of specifying a job or stc number.\n    o When using option (3) or (4) do not specify the \"J\" or \"S\" on the\n        job number or the stc number.\n\n      ENTER = Proceed                    !ENDPF+= End help\n      !UPPF+= Previous help menu         !LFTPF+= Previous help page\n)INIT\n  &LFTPF = PFK(LEFT)\n  &UPPF  = PFK(UP)\n  &ENDPF = PFK(END)\n\n  IF (&LFTPF = ' ') &LFTPF = 'BACK'\n  IF (&UPPF  = ' ') &UPPF  = 'UP'\n  IF (&ENDPF = ' ') &ENDPF = 'END'\n\n)PROC\n)END\n./ ADD NAME=OFH0000  0101-01016-01016-1416-00040-00040-00000-RACFPNL\n%OFFLOADS --------------------- HELP TUTORIAL ------------------------- TUTORIAL\n%COMMAND ===>_ZCMD+                                                            +\n+\n+  From your main menu you will be able to select one of the following\n+  topics you may enter one of the following in the command/option field\n+\n     o To do a daily offload of all the job's you will select option 1\n       from your offload menu.                                          c.\n\n        %1 +DAILY OFFLOADS  -%OFFLOAD OF DAILY JOB'S TO CASETTE\n     o You have to specify a valid date (EX MON TUE WED THU FRI SAT SUN)\n\n     o To do a daily offload of all the stc's you will select option 2\n       from your offload menu\n\n        %2 +DAILY OFFLOADS  -%OFFLOAD OF DAILY STC'S TO CASETTE\n\n\n\n+  You may use the following keys whenever you are in the tutorial:\n      %ENTER+- to display the next sequential page.\n      %HELP+ - to redisplay this page for \"help\" information.\n      %END+  - to terminate the tutorial.\n      %UP+   - to display a higher level list of topics (instead of typing%UP+).\n      %DOWN+ - to skip to the next topic (instead of typing%SKIP+).\n      %RIGHT+- to display the next page (instead of pressing%ENTER+).\n      %LEFT+ - To display the previous page (instead of typing%BACK+).\n\n+\n)init\n  &LFTPF = PFK(LEFT)\n  &UPPF  = PFK(UP)\n  &ENDPF = PFK(END)\n\n  IF (&LFTPF = ' ') &LFTPF = 'BACK'\n  IF (&UPPF  = ' ') &UPPF  = 'UP'\n  IF (&ENDPF = ' ') &ENDPF = 'END'\n)PROC\n)END\n/* 5685-054 (C) COPYRIGHT IBM CORP. 1980, 1990                              */\n./ ADD NAME=OHO0001  0101-01016-01016-1416-00037-00037-00000-RACFPNL\n)ATTR\n   ! TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(RIGHT) PAD(' ')\n)BODY\n%HELP                     OFFLOAD HELP OPTIONS\n%OPTION ===>_ZCMD+                                                             +\n+\n+\n+\n+\n         The following topics will be presented in sequence, or can be\n         selected by number:\n\n        %1+ OFFLOADS   Help for using JES2 OFFLOADS\n        %2+ ONLOADS    Help for using JES2 ONLOADS\n\n\n\n        %X+ EXIT       Terminate help\n\n        ENTER = Proceed                    !ENDPF+= End help\n)INIT\n  &LFTPF = PFK(LEFT)\n  &UPPF  = PFK(UP)\n  &ENDPF = PFK(END)\n\n  IF (&LFTPF = ' ') &LFTPF = 'BACK'\n  IF (&UPPF  = ' ') &UPPF  = 'UP'\n  IF (&ENDPF = ' ') &ENDPF = 'END'\n\n\n)PROC\n &ZSEL = TRANS( &ZCMD\n        1,OHO0002\n        2,OHO0003\n        X,EXIT\n        *,'?')\n)END\n./ ADD NAME=OHO0002  0101-01016-01016-1416-00034-00034-00000-RACFPNL\n)ATTR\n   ! TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(RIGHT) PAD(' ')\n)BODY\n%HELP                   HELP FOR OFFLOADS\n%COMMAND ===>_ZCMD+                                                            +\n  The OFFLOADS are done by means of the JES2 SPOOL OFFLOAD\n  facility.\n\n    o By using option (1) all JOB's are offloaded.\n    o By using option (2) all STC's are offloaded.\n    o Please bear in mind that they only offload job's or stc's\n        for the present day, i.e TODAY.\n    o The day that you specify has valid ranges, as shown on the panel\n        when you would like to specify a day.\n    o Option's (3) and (4) lets you specify which job or stc\n        should be offloaded by means of specifying a job or stc number.\n    o When using option (3) or (4) do not specify the \"J\" or \"S\" on the\n        job number or the stc number.\n\n      ENTER = Proceed                    !ENDPF+= End help\n      !UPPF+= Previous help menu         !LFTPF+= Previous help page\n)INIT\n  &LFTPF = PFK(LEFT)\n  &UPPF  = PFK(UP)\n  &ENDPF = PFK(END)\n\n  IF (&LFTPF = ' ') &LFTPF = 'BACK'\n  IF (&UPPF  = ' ') &UPPF  = 'UP'\n  IF (&ENDPF = ' ') &ENDPF = 'END'\n\n)PROC\n &ZSEL = TRANS( &ZCMD\n        *,'?')\n)END\n./ ADD NAME=OHO0003  0101-01016-01016-1416-00036-00036-00000-RACFPNL\n)ATTR\n   ! TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) JUST(RIGHT) PAD(' ')\n)BODY\n%HELP                   HELP FOR ONLOADS\n%COMMAND ===>_ZCMD+                                                            +\n  The ONLOADS are done by means of the JES2 SPOOL ONLOAD\n  facility.\n\n    o By using option (1) all JOB's are onloaded.\n    o By using option (2) all STC's are onloaded.\n    o Please bear in mind that they only onload job's or stc's\n        for the present day, i.e TODAY.\n    o The day that you specify has valid ranges, as shown on the panel\n        when you would like to specify a day.\n    o Option's (3) and (4) lets you specify which job or stc\n        should be onloaded by means of specifying a job or stc number.\n    o When using option (3) or (4) do not specify the \"J\" or \"S\" on the\n        job number or the stc number.\n\n      !UPPF+= Previous help menu         !LFTPF+= Previous help page\n     !ENDPF+= End help\n)INIT\n  &LFTPF = PFK(LEFT)\n  &UPPF  = PFK(UP)\n  &ENDPF = PFK(END)\n\n  IF (&LFTPF = ' ') &LFTPF = 'BACK'\n  IF (&UPPF  = ' ') &UPPF  = 'UP'\n  IF (&ENDPF = ' ') &ENDPF = 'END'\n  IF (&ZCMD = ' ') &ZCMD = 'END'\n\n)PROC\n &ZSEL = TRANS( &ZCMD\n        *,'?')\n  IF (&ZCMD = ' ') &ZCMD = 'END'\n)END\n./ ADD NAME=ORADBALG 0101-01016-01016-1416-00040-00040-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%--- &ZSYSID --------------- ORACLE LOGIN INFORMATION -------------- &ZSYSID ---\n%OPTION ===>_ZCMD\n+\n+       C H A N G E   C O N T R O L   S Y S T E M\n+\n+\n+       LIBRARY DETAILS:\n+\n+           PROJECT ===> _UPROJ   +\n+\n+           MEMBER  ===> _UMEM    +\n+\n+\n+       ORACLE USER ACCOUNT DETAIL:\n+\n+           USERID   ===> _UID        +\n+\n+           PASSWORD ===> $UPSW       +\n+\n+\n+\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = ORAHELP\n)PROC\n  VER(&UPROJ, NONBLANK)\n  VER(&UPROJ, NAME)\n  VER(&UMEM,  NONBLANK)\n  VER(&UMEM,  NAME)\n  VER(&UID,   NONBLANK)\n  VER(&UPSW,  NONBLANK)\n  VPUT (UPROJ UMEM) PROFILE\n  &ZCMD = ' '\n)END\n./ ADD NAME=ORALOGIN 0101-01016-01016-1416-00038-00038-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%--- &ZSYSID --------------- ORACLE LOGIN INFORMATION -------------- &ZSYSID ---\n%OPTION ===>_ZCMD\n+\n+\n+       LIBRARY DETAILS:\n+\n+           PROJECT ===> _UPROJ   +\n+\n+\n+       ORACLE USER ACCOUNT DETAIL:\n+\n+           USERID   ===> _UID        +\n+\n+           PASSWORD ===> $UPSW       +\n+\n+           DATABASE ===> _UDB +\n+\n+\n+\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = ORAHELP\n)PROC\n  VER(&UPROJ, NONBLANK)\n  VER(&UPROJ, NAME)\n  VER(&UID,   NONBLANK)\n  VER(&UPSW,  NONBLANK)\n  VER(&UDB,   NONBLANK)\n  VER(&UDB,   LEN, '>=', 3)\n  VPUT (UPROJ UID UPSW UDB) PROFILE\n  &ZCMD = ' '\n)END\n./ ADD NAME=ORAMAIN  0101-01016-01016-1416-00047-00047-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%--- &ZSYSID ---------------- ORACLE UTILITIES MENU ---------------- &ZSYSID ---\n%OPTION ===>_ZCMD\n+\n+\n+   %S+  SQL       - SQL*PLUS\n+   %F+  FORMS     - SQL*FORMS V2.3\n+   %F3+ FORMS3    - SQL*FORMS V3.0\n+   %V+  CVT       - CONVERT FORMS TO CICS READABLE FORMAT\n+   %D+  DBA       - SQL*DBA\n+   %O+  ORAMON    - ORACLE MONITOR\n+   %P+  DELPHI    - DELPHI PERFORMANCE MONITOR\n+\n+\n+           OOOOOOO  RRRRRRRR  AAAAAAAA  CCCCCCCC  LLL        EEEEEEEE\n+         OOOOOOOOO RRRRRRRRR AAAAAAAAA CCCCCCCCC LLL        EEEEEEEE\n+        OOO   OOO RRR   RRR AAA   AAA CCC       LLL        EEE\n+       OOO   OOO RRRRRRRR  AAA   AAA CCC       LLL        EEE\n+      OOO   OOO RRR  RRR  AAAAAAAAA CCC       LLL        EEEEEEEE\n+     OOO   OOO RRR   RRR AAA   AAA CCC       LLL        EEE\n+    OOOOOOOOO RRR   RRR AAA   AAA CCCCCCCCC LLLLLLLLL  EEEEEEEEE\n+    OOOOOOO  RRR   RRR AAA   AAA CCCCCCCCC LLLLLLLLL  EEEEEEEEE\n+\n+\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = ORAHELP\n)PROC\n  &ZCMD = TRUNC(&ZCMD, ' ')\n  &ZSEL = TRANS(TRUNC(&ZCMD, '.')\n        S, 'CMD(%SQL) MODE(FSCR)'\n        F, 'CMD(%FORMS) MODE(FSCR)'\n        F3, 'CMD(%FORMS3) MODE(FSCR)'\n        V, 'CMD(%ORACVTM &UPROJ) NOCHECK'\n        D, 'CMD(%DBA PROJ(&UPROJ.) DB(&UDB.)) MODE(FSCR)'\n        O, 'PANEL(ORAMON)'\n        P, 'CMD(%DELPHI)'\n        C, 'CMD(%CASE PROJ(&UPROJ.) USER(&UID) PSW(&UPSW) DB(&UDB.)) MODE(FSCR)'\n      ' ', ' '\n        *, '?'\n               )\n)END\n./ ADD NAME=ORAMON   0101-01016-01016-1416-00041-00041-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%--- &ZSYSID ------------------- ORACLE MONITOR -------------------- &ZSYSID ---\n%OPTION ===>_ZCMD\n+\n+\n+\n+\n+\n+\n+\n+\n+              Enter the database to monitor:   _UDB +\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = ORAHELP\n  .CURSOR = UDB\n)PROC\n  VER(&UDB, PICT, AAAx)\n  VPUT (UDB) PROFILE\n  &ZCMD = TRUNC(&ZCMD, ' ')\n  &ZSEL = TRANS(TRUNC(&ZCMD, '.')\n      ' ', 'CMD(ORAMON &UDB)'\n        *, '?'\n               )\n)END\n./ ADD NAME=RACFP05  0101-01016-01016-1416-00027-00027-00000-RACFPNL\n)ATTR\n  \u00a2 TYPE(INPUT) INTENS(HIGH) PAD(NULLS)\n)BODY\n%-------------------------- RACF LISTING DEFAULTS  -----------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+LISTING DEFAULT OPTIONS\n+-----------------------\n+SYSOUT class    %===>_Z+             Default to Class V\n+Local printer ID%===>_Z       +      Default to LOCAL\n%                                                                              +\n%\n%   1 +ACCEPT      - Accept listing options\n%   X +EXIT        - Terminate without generate listing\n)INIT\n  .HELP = RACFH051\n  .ZVARS = '(LSTCLA LSTPID)'\n  IF (&LSTCLA = '')       &LSTCLA = 'V'\n  IF (&LSTPID = '')       &LSTPID = 'LOCAL'\n  .CURSOR = ZCMD\n\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n     1,'CMD(%TSOALST PRINTER(&LSTPID) OUTCLASS(&LSTCLA))'\n     ' ',' '\n     X,'EXIT')\n)END\n./ ADD NAME=SENDMSG  0101-01016-01016-1416-00038-00038-00000-RACFPNL\n)ATTR\n_ TYPE(INPUT) INTENS(LOW) JUST(LEFT)\n)BODY\n+----- &ZSYSID -----------%TSO MESSAGE SENDING FACILITY+-------- &ZSYSID ------\n%                                                                              +\n+   OPTION ====>_zcmd+\n%\n%\n%      +ENTER%TSO+USERID   ===> _uid    +                                      +\n%      +ENTER MESSAGE%(MAX 60 CHAR)\n% ==> _msg                                                         +\n%\n%       1 +ACCEPT - Accept the input for the MESSAGE\n%\n%       X +EXIT - Terminate MESSAGE FACILITY\n%\n%\n%\n+  Enter%END+command to terminate MESSAGE FACILITY.\n%\n%\n)INIT\n  .HELP = OFFH0001\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n)PROC\n ver(&uid,nonblank)\n ver(&msg,nonblank)\n&ZQ = &Z\n  IF (&zcmd ^= ' ')\n    &ZQ = TRUNC(&zcmd,'.')\n    IF (&ZQ = '   ')\n      .MSG = ISRU000\n  &ZSEL = TRANS( &ZQ\n            1,'CMD(sendmsg &uid &msg)'\n              ' ',' '\n                X,'exit'\n                *,'?' )\n)END\n./ ADD NAME=USRCNS   0101-01016-01016-1416-00048-00048-00000-RACFPNL\n)ATTR\n _ TYPE(INPUT) INTENS(HIGH)  PADC(NULLS) JUST(LEFT) CAPS(ON)\n % TYPE(OUTPUT) INTENS(HIGH) PAD(' ')  JUST(ASIS) CAPS(ON)\n ? TYPE(OUTPUT) INTENS(HIGH) PAD('-')  JUST(ASIS) CAPS(ON)\n \u00a2 TYPE(OUTPUT) INTENS(HIGH) PAD(' ')  JUST(LEFT) CAPS(ON)\n + TYPE(OUTPUT) INTENS(LOW)  PAD(' ')  JUST(ASIS) CAPS(ON)\n \\ TYPE(OUTPUT) INTENS(LOW)  PAD(' ')  JUST(LEFT) CAPS(ON)\n | TYPE(TEXT) INTENS(HIGH)   PAD(' ')  JUST(ASIS) CAPS(ON)\n ! TYPE(TEXT) INTENS(LOW)    PAD(' ')  JUST(ASIS) CAPS(ON)\n)BODY\n|------------------------- LIST MCS COMMAND OUTPUT -----------------------------\n|C =>_ZCMD                                                           |S =>_A   |\n|Mode:\\MOD  |%SID     |\n|Long C =>_OCMD\n                                            !&ZTIME &ZDATE |&CER\n|Display ===>  !Time Stamp _Z! System Name _Z! Job Name  _Z| Hold ===> _Z| (Y/N)\n?ZX\n)MODEL\n&CVAR\n)INIT\n  .ZVARS = '(CDTS CDSN CDJN CDHD)'\n  &ZX = '----'\n  &OCMD = ' '\n)REINIT\n)PROC\n  VER (&CDTS,LIST,Y,N)\n  VER (&CDSN,LIST,Y,N)\n  VER (&CDJN,LIST,Y,N)\n  VER (&CDHD,LIST,Y,N)\n  IF (&ZCMD = ' ')\n    IF (&OCMD ^= ' ')\n      &SCMD = &OCMD\n      &ZCMD = &OCMD\n  IF (&ZCMD = 'RETL')\n    IF (&SCMD ^= ' ')\n      &ZCMD = ' '\n      &OCMD = &SCMD\n      REFRESH (OCMD ZCMD)\n      &ZEDSMSG = 'O.K.'\n      &ZEDLMSG = 'Enter / Modify retrieved command'\n      .MSG = ISRZ000\n    ELSE\n      &ZCMD = ' '\n      REFRESH ZCMD\n      &ZEDSMSG = 'Nothing Saved'\n      &ZEDLMSG = 'Nothing to retrieve - Long commands have not been used'\n      .MSG = ISRZ001\n)END\n./ ADD NAME=USRTERM  0101-01016-01016-1416-00077-00077-00000-RACFPNL\n)ATTR\n% type(text)  intens(high)\n+ type(text)  intens(low)\n$ type(input) intens(non)\n_ type(input) intens(high)\n)BODY\n%-------- &zsysid ---------------+Administrator%---------------- &zsysid -------\n%OPTION ===>_ZCMD                                           +USERID   -%&ZUSER\n+                                                           +TIME     - &ZTIME\n+    USERID  :_UID    +                                     +TERMINAL - &ZTERM\n+    NAME    :_USNAME              +  %Name & Surname (20 Characters) +\n+    PASSWORD:$UPSW    +\n+    TERMINAL:_TERM    + %Terminal ID of the user (REQUIRED)+\n+\n+------- ENTER USERID AND PASSWORD ---------------------------------------------\n%\n%   1 +ADD      - Add a new RACF user\n%   2 +CHANGE   - Change a users password / name\n%   3 +DELETE   - Delete a user\n%   4 +LISTS    - List a user\n%   5 +LIST ALL - List all users\n%\n%   C +JOB OUTPUT    - Check job output\n%   X +EXIT          - Terminate ISPF using log and list defaults\n%\n+   Enter %END+ command to terminate.\n)INIT\n  .HELP = RACFH00     /* CHANGE THIS TO REFLECT HELP SCREEN*/\n  &ZPRIM = YES        /* ALWAYS A PRIMARY OPTION MENU      */\n  &ZHTOP = RACFH00    /* TUTORIAL TABLE OF CONTENTS        */\n  &ZHINDEX = RACFH00  /* TUTORIAL INDEX - 1ST PAGE         */\n  &ZSCLMPRJ = &Z      /* TUTORIAL INDEX - 1ST PAGE     @L1A*/\n  &ZPFCTL = OFF\n  VPUT (ZHTOP,ZHINDEX,ZSCLMPRJ,ZPFCTL) PROFILE\n  &UID = ' '\n  &UPSW = ' '\n  &USNAME = ' '\n  .CURSOR = ZCMD\n)PROC\n  VER(&ZCMD, NONBLANK)\n  VER(&TERM, NONBLANK)\n&ZQ = &Z\n  IF (&ZCMD ^= ' ')\n    &ZQ = TRUNC(&ZCMD,'.')\n    IF (&ZQ = ' ')\n      .MSG = ISRU000\n  &OPTN = TRUNC(&ZCMD,'.')\n  IF (&OPTN = 1,2,3,4)\n     VER(&UID, NONBLANK)\n     VER(&UID, LEN, '=', 7)\n     VER(&TERM, LEN, '=', 8)\n     &NR = TRUNC(&UID,3)\n     VER(&NR, PICT, AAA)\n  IF (&OPTN = 1)\n     VER(&USNAME,NONBLANK, MSG = ICHM413A)\n     VER(&USNAME,LEN, '<=', 21)\n     VER(&UPSW, NONBLANK)\n     &QNAME = TRUNC(&USNAME,1) /* get first char        @ZA85750*/\n     IF (&QNAME = '''')        /* is first char a quote @ZA85750*/\n       .MSG = ICHM413A         /* issue message         @ZA85750*/\n       .CURSOR = USNAME        /* point to name         @ZA85750*/\n  &VALCHK = ICHC41             /* check for end quote   @ZA91987*/\n  IF (&OPTN = 2)\n     VER(&UPSW, NONBLANK)\n  VPUT (UID NAME UPSW) PROFILE\n  &ZSEL = TRANS( &ZQ\n   1,'CMD(%TSOUADD &UID:&USNAME:&UPSW)'\n   2,'CMD(%COMRES &UID:&USNAME:&UPSW:&TERM)'\n   3,'CMD(%TSOUDEL &UID)'\n   4,'CMD(%TSOULST &UID)'\n   5,'PANEL(RACFP05)'\n   C,'PGM(isfisp) parm(H)'\n   ' ',' '\n   X,'exit'\n   *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGEQU": {"ttr": 9992, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x83\\x13\\x0f\\x00\\x95\\x15\\x0f\\x15\\x06\\x00\\x19\\x00\\x19\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1983-05-10T00:00:00", "modifydate": "1995-05-30T15:06:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "SYS0007"}, "text": "         MACRO\n         REGEQU\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "S": {"ttr": 9994, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x96$\\x0f\\x00\\x96(/\\x160\\x00\\x89\\x00\\x01\\x00\\x89\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1996-08-27T00:00:00", "modifydate": "1996-10-08T16:30:00", "lines": 137, "newlines": 1, "modlines": 137, "user": "SYS0015"}, "text": "         MVC   DSNPARM(44),LSTREC+1\nALLOCDD  DS    0H\n         BAL   R6,DYNALLOC\nSCANDDS  DS    0H\n         OPEN  (SCANDD)\nSCANGET  DS    0H\n         GET   SCANDD,DIRREC\n         LA    R4,DIRREC\n         LH    R5,0(R4)\n         LTR   R5,R5\n         BZ    CLSSCAN\n         LA    R5,0(R4,R5)\nSCANLOOP DS    0H\n         CR    R4,R5\n         BNL   SCANGET\n         LA    R6,2(R4)\n         EX    R3,CHECK\n*        CLC   2(3,R4),0(R2)\n         BNE   SCANNEXT\n         MVI   FNDFLAG,C'1'\n         MVC   OUTDSN(44),LSTDSN\n         MVC   OUTMEM(8),2(R4)\n         PUT   REPORT,OUTPREC\nSCANNEXT DS    0H\n         CLC   LSTREC+88(2),=C'U '\n         BNE   SCANSRCE\n         LA    R4,36(R4)\n         B     SCANLOOP\nSCANSRCE DS    0H\n         LA    R4,42(R4)\n         B     SCANLOOP\nCLSSCAN  DS    0H\n*        DC    X'0000'\n         CLOSE SCANDD\n         BAL   R6,DEALLOC\n         B     READLST\nEOFVTOC  DS    0H\nFINIS    DS    0H\n         CLI   FNDFLAG,C'1'\n         BE    EXITRC\n         LA    R15,4\nEXITRC   DS    0H\n         CLOSE (VTOCLST)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n*\n         DS    F\nCHECK    CLC   0(0,R6),0(R2)\nDYNALLOC DS    0H\n         MVI   S99VERB,X'01'\n         MVI   S99TXTDS,X'00'\n         LA    R1,S99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZR   R6\nDYNERR   DS    0H\n         ST    R0,REG0SAVE\n         CLC   REG0SAVE(4),=X'17080000'\n         BE    DYNNCTLG\n         CLC   REG0SAVE(4),=X'17080002'\n         BE    DYNNCTLG\n         CLC   REG0SAVE(4),=X'02100000'\n         BE    DYNBUSY\n         B     DYNCRASH\nDYNNCTLG DS    0H\n         MVC   OUTDSN(44),LSTDSN\n         MVC   OUTMEM(8),=C'00000000'\n         MVC   OUTDESC(20),=C' NOT CATALOGUED.....'\n*        PUT   REPORT,OUTPREC\n         MVC   OUTDESC(20),=C'                    '\n         B     READLST\nDYNBUSY  DS    0H\n         MVC   OUTDSN(44),LSTDSN\n         MVC   OUTMEM(8),=C'00000000'\n         MVC   OUTDESC(20),=C' DATASET NOT AVAIL..'\n         PUT   REPORT,OUTPREC\n         MVC   OUTDESC(20),=C'                    '\n         B     READLST\nDYNCRASH DS    0H\n         DC    H'0'\n*\nDEALLOC  DS    0H\n         MVI   S99VERB,X'02'\n         MVI   S99TXTDS,X'80'\n         LA    R1,S99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZR   R6\n         DC    H'0'\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\nREG0SAVE DC    F'0'\nBLDLLST  DC    H'1'\n         DC    H'18'\nBLDLMEM  DC    CL8'TSTMEM  '\n         DC    10CL1'1'\nDIRREC   DC    256CL1' '\n         LTORG\n* -------------------------------------------------------------------\n*              DYNAMIC ALLOCATION\n* -------------------------------------------------------------------\n         DS    0F\nS99RBPTR DC    X'80'\n         DC    AL3(S99RB)\nS99RB    DC    X'14'\nS99VERB  DC    X'01'\nS99FLAG1 DC    X'40'\n         DC    X'00'\nS99INFO  DC    F'0'\n         DC    AL4(S99TXPTR)\n         DC    2F'0'\nS99TXPTR DC    AL4(DDNKEY)\nS99TXTDS DC    AL4(DSNKEY)\n         DC    X'80'\n         DC    AL3(STAKEY)\n*              DDNAME ALLOCATION\nDDNKEY   DC    X'0001'\nDDNNUM   DC    X'0001'\nDDNLEN   DC    X'0006'\nDDNPARM  DC    C'SCANDD'\n*              DSN ALLOCATION\nDSNKEY   DC    X'0002'\nDSNNUM   DC    X'0001'\nDSNLEN   DC    X'002C'\nDSNPARM  DC    44CL1' '\n*              DS-STAT ALLOCATION\nSTAKEY   DC    X'0004'\nSTANUM   DC    X'0001'\nSTALEN   DC    X'0001'\nSTAPARM  DC    X'08'                   .SHR\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nSCANDD   DCB   MACRF=(GM),DDNAME=SCANDD,DSORG=PS,RECFM=U,BLKSIZE=256,  *\n               EODAD=CLSSCAN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCAN": {"ttr": 9997, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00\\x00\\x00\\x97'o\\x00\\x99\\x18?\\x10%\\x00\\x14\\x00\\x11\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf1@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "1997-10-03T00:00:00", "modifydate": "1999-07-02T10:25:00", "lines": 20, "newlines": 17, "modlines": 0, "user": "SYS0011"}, "text": "//SYS0011S JOB (A,RESYS,CIC,00),'CHRIS',REGION=0M,TIME=1440,\n//             CLASS=A,\n//             MSGCLASS=V,\n//*            USER=SYS0010,\n//*            PASSWORD=DOEP1,\n//             NOTIFY=&SYSUID\n//VTOCALL EXEC PGM=VTOC@ALL\n//STEPLIB  DD  DSN=SYS0011.LIB.LOAD,DISP=SHR\n//OUTP01   DD  SYSOUT=V\n//OUTP02   DD  DSN=SYS0011.@VTOCALL.OUTPUT,DISP=(NEW,CATLG),\n//      UNIT=SYSDA,SPACE=(TRK,(300,150),RLSE),BLKSIZE=27930,RECFM=FBA\n//*\n//PTLVSCA1 EXEC PGM=PTLVSCAN,PARM='SLSKDE',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS0011.LIB.LOAD,DISP=SHR\n//VTOCLST  DD   DSN=SYS0011.@VTOCALL.OUTPUT,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=V\n//SYSIN    DD   DUMMY\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMFEXTR": {"ttr": 10241, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95!O\\x00\\x95!O\\x16\\x13\\x02\\xf3\\x02\\xf3\\x00\\x00\\xe2\\xe8\\xe2\\xf2\\xf0\\xf0\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-08-02T00:00:00", "modifydate": "1995-08-02T16:13:00", "lines": 755, "newlines": 755, "modlines": 0, "user": "SYS2005"}, "text": "         TITLE 'SMFEXTR '\n         SPACE 3\n*\n*        PERFORM HOUSEKEEPING REQUIRED FOR A REENTRANT ROUTINE.\n*\nSMFEXTR  CSECT\n         SAVE  (14,12),,*                SAVE CALLER'S REGISTERS\n         LR    R12,R15                   GET ENTRY POINT ADDRESS\n         USING SMFEXTR,R12               ESTABLISH ADDRESSABILITY\n         B     P000050                   BRANCH AROUND EYE-CATCHER\n         DC    C'****&SYSDATE****&SYSTIME****'\n         SPACE 3\nP000050  DS    0H\n         GETMAIN R,LV=WORKSZ             GETMAIN A WORK AREA\n         ST    R1,8(R13)                 ESTABLISH BACKWARD CHAIN\n         LR    R2,R1                     SAVE WORK AREA ADDR\n         LA    R3,WORKSZ                 SIZE OF WORK AREA\n         LA    R6,X                      ADDR OF WORK AREA TEMPLATE\n         LA    R7,WORKSZ                 SIZE OF WORK AREA\n         MVCL  R2,R6                     INITIALIZE WORK AREA\n         ST    R13,4(R1)                 ESTABLISH FORWARD CHAIN\n         LR    R13,R1                    POINT R13 TO MY SAVE AREA\n         SPACE 3\n*\n*        OPEN THE INPUT AND OUTPUT FILES.\n*\nP000100  DS    0H\n         LA    R10,INDCB-X(,R13)         ADDR OF INPUT FILE\n         LA    R11,OUTDCB-X(,R13)        ADDR OF OUTPUT FILE\n         OPEN  ((R10),INPUT,(R11),OUTPUT),MF=(E,OPENFI-X(,R13))\n         TM    DCBOFLGS-IHADCB(R10),DCBOFOPN  WAS FILE OPENED?\n         BO    P000200                   +YES, SKIP NEXT SECTION\n         ABEND 1137,,,,REASON=0          ELSE, ABEND U1137\n         SPACE 3\nP000200  DS    0H\n         TM    DCBOFLGS-IHADCB(R11),DCBOFOPN  WAS FILE OPENED?\n         BO    P000250                   +YES, SKIP NEXT SECTION\n         ABEND 1237,,,,REASON=0          ELSE, ABEND U1237\n         SPACE 3\n*\n*        OBTAIN THE CURRENT DATE AND TIME VIA THE TIME MACRO.\n*\nP000250  DS    0H\n         TIME  DEC                       GET CURRENT TIME AND DATE\n         BAL   R9,P001400                PERFORM CONVERSION ROUTINE\n         MVC   TIME-X(8,R13),HHMMSS-X(R13)  MOVE TIME TO HEADING\n         MVC   DATE-X(8,R13),GREGDATE-X(R13)  MOVE DATE TO HEADING\n         SPACE 3\n*\n*        THIS SECTION CONSTITUTES THE MAIN PROCESSING LOOP OF THE\n*        ROUTINE.\n*\nP000300  DS    0H\n         GET   (R10)                     GET A RECORD - QSAM (GL)\n         LR    R3,R1                     R3 POINTS TO THE RECORD\n         USING SMFRCD0,R3                ESTABLISH ADDRESSABILITY\n         CLI   SMF0RTY,X'FF'\n         BNE   P000300\n         PUT   (R11),(R3)                PUT A RECORD - QSAM (PM)\n         B     P000300\nENDINPT  DS    0H\n         CLOSE ((R10),,(R11)),MF=(E,CLOSFI-X(,R13))  CLOSE FILES\n         L     R8,4(R13)                 SAVE ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKSZ,A=(R13)    FREE THE WORK AREA\n         LR    R13,R8                    ADDR CALLER'S SAVE AREA\n         LR    R15,R3                    LOAD RETURN CODE           @02\n         RETURN (14,12),,RC=(15)         RESTORE REGS AND RETURN\n* **********************************************************\n         CLI   SMF0RTY,X'02'             SMF DUMP HEADER RECORD?\n         BE    P000300                   +YES, GET ANOTHER RECORD\n         CLI   SMF0RTY,X'03'             SMF DUMP TRAILER RECORD?\n         BE    P000300                   +YES, GET ANOTHER RECORD\n         L     R1,TOTCNT-X(,R13)         GET TOTAL RECORD COUNT     @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,TOTCNT-X(,R13)         SAVE TOTAL RECORD COUNT    @02\n         LA    R4,SMF0JWT+2              BUMP OVER IBM SMF HEADER\n         DROP  R3                        DROP ADDRESSABILITY\n         USING C#RDW,R4                  ESTABLISH ADDRESSABILITY   @01\n         CLC   C#PRDFM1(2),=AL2(C@PFC1CM)  GOOD PROD FAMILY CODE?   @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDID1(2),=AL2(C@PID1OB)  GOOD PROD ID CODE?       @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDFM2(2),=AL2(C@PFC2CM)  GOOD PROD FAMILY?        @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDID2(2),=AL2(C@PID2OB)  GOOD PROD ID?            @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         LA    R5,C#CMNLEN(,R4)          BUMP OVER CANDLE COMMON HEADER\n         DROP  R4                        DROP ADDRESSABILITY\n         USING A#AUDIT,R5                ESTABLISH ADDRESSABILITY\n         CLI   A#TYPE,A@COMMND           COMMAND-TYPE RECORD?\n         BNE   P003000                   +NO, PROCESS ERROR\n         MVC   JOBNAME-X(8,R13),A#CNJOB  MOVE JOB NAME\n         MVC   PRSTPNM-X(8,R13),A#CSTEP  MOVE PROCSTEP NAME\n         MVC   STPNM-X(8,R13),A#CSTEP+8  MOVE STEP NAME\n         MVC   USERID-X(8,R13),A#USERID  MOVE USERID\n         MVC   UNIT-X(8,R13),A#LUNAME    MOVE UNIT\n         MVC   SYSID-X(4,R13),A#SYSID    MOVE SYSID\n         MVC   JOBID-X(8,R13),A#JOBID    MOVE JOBID\n         SPACE 3                                                    @02\nP000350  DS    0H                                                   @02\n         OI    MISCSW-X(R13),SPIEACT     INDICATE SPIE ACTIVE       @02\n         SPIE  P003000,(7),MF=(E,STOP0C7-X(R13))  ESTABLISH SPIE    @02\n         ICM   R0,B'1111',A#TIME         GET TIME\n         ICM   R1,B'1111',A#DATE         GET DATE\n         BAL   R9,P001400                PERFORM CONVERSION ROUTINE\n         SPACE 3                                                    @02\nP000360  DS    0H                                                   @02\n         SPIE  0,MF=(E,STOP0C7-X(R13))   CANCEL SPIE                @02\n         NI    MISCSW-X(R13),255-SPIEACT  RESET SWITCH              @02\n         SPACE 3                                                    @02\nP000365  DS    0H                                                   @02\n         TM    MISCSW-X(R13),ERROR       DID AN ERROR OCCURR?       @02\n         BNO   P000370                   +NO, CONTINUE PROCESSING   @02\n         NI    MISCSW-X(R13),255-ERROR   ELSE, RESET ERROR SWITCH   @02\n         B     P000300                   ...AND, GET ANOTHER RECORD @02\n         SPACE 3                                                    @02\nP000370  DS    0H                                                   @02\n         MVC   REPTIME-X(8,R13),HHMMSS-X(R13)  MOVE TIME INTO DETAIL\n         MVC   REPDATE-X(8,R13),GREGDATE-X(R13)  MOVE DATE INTO DETAIL\n         LA    R7,COMMTBL                POINT TO COMMAND TYPE TABLE\n         LA    R8,CTBLSZ                 # OF ENTRIES IN TABLE\n         SPACE 3\n*\n*        COMMAND TYPE TABLE LOOK-UP LOOP.\n*\nP000400  DS    0H\n         CLC   A#STYPE(1),0(R7)          DO WE HAVE A MATCH?\n         BE    P000500                   +YES, SKIP NEXT SECTION\n         LA    R7,16(,R7)                ELSE, BUMP POINTER\n         BCT   R8,P000400                LOOP THROUGH TABLE\n         MVC   CMTYPE-X(15,R13),=CL15'*** UNKNOWN ***'  NOT FOUND\n         B     P000600                   SKIP NEXT SECTION\n         SPACE 3\nP000500  DS    0H\n         MVC   CMTYPE-X(15,R13),1(R7)    MOVE COMM TYPE INTO DETAIL\n         SPACE 3\nP000600  DS    0H\n         LA    R7,DISPTBL                POINT TO DISPOSITION TABLE\n         LA    R8,DTBLSZ                 # OF ENTRIES IN TABLE\n         SPACE 3\n*\n*        DISPOSITION TABLE LOOK-UP LOOP.\n*\nP000700  DS    0H\n         CLC   A#DISP(1),0(R7)           DO WE HAVE A MATCH?\n         BE    P000800                   +YES, SKIP NEXT SECTION\n         LA    R7,24(,R7)                ELSE, BUMP POINTER\n         BCT   R8,P000700                LOOP THROUGH TABLE\n         MVC   DISP-X(23,R13),=CL23'    *** UNKNOWN ***    '  NOT FOUND\n         B     P000900                   SKIP NEXT SECTION\n         SPACE 3\nP000800  DS    0H\n         MVC   DISP-X(23,R13),1(R7)      MOVE DISP INTO DETAIL\n         SPACE 3\n*\n*        PROCESS COMMAND INFORMATION.\n*\nP000900  DS    0H\n         MVI   COMMAND-X(R13),C' '       USING BLANKS...\n         MVC   COMMAND+1-X(8,R13),COMMAND-X(R13)  ...CLEAR THE FIELD\n         MVI   ASSOCMAJ-X(R13),C' '      USING BLANKS...\n         MVC   ASSOCMAJ+1-X(15,R13),ASSOCMAJ-X(R13)  ...CLEAR THE FIELD\n         CLI   A#STYPE,A@MINCOM          IS THIS A MINOR?\n         BE    P000925                   +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          IS THIS A GENERALIZED MINOR?\n         BNE   P000975                   +NO, SKIP NEXT SECTION\n         SPACE 3\nP000925  DS    0H\n         MVC   COMMAND+1-X(4,R13),A#COMMND+4  MOVE MINOR\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000985                   +YES, SKIP NEXT SECTION\n         MVC   MAJCMD-X(4,R13),A#COMMND  MOVE ASSOCIATED MAJOR\n         MVC   ASSOCMAJ-X(16,R13),MAJTAG-X(R13)  MOVE MAJOR ADDENDUM\n         MVI   AUXBUFF-X(R13),C' '       USING BLANKS...\n         MVC   AUXBUFF+1-X(79,R13),AUXBUFF-X(R13)  ...CLEAR THE FIELD\n         LH    R3,A#BUFLN2               LENGTH OF AUX BUFFER\n         CH    R3,=H'80'                 IS LENGHTH LE 80?\n         BNH   P000950                   +YES, SKIP NEXT SECTION\n         LH    R3,=H'80'                 ELSE, SET LENGTH AT 80\n         SPACE 3\nP000950  DS    0H\n         BCTR  R3,0                      DECREMENT FOR EXECUTE\n         EX    R3,MVCBUFAU               MOVE THE AUX BUFFER\n*\n*        IF YOUR PRINTER CANNOT HANDLE LOWER-CASE CHARACTERS, UNCOMMENT\n*        THE FOLLOWING COMMAND IN ORDER TO FORCE ALL UPPER-CASE\n*        CHARACTERS.\n*\n*        EX    R3,OCBUFAU                FORCE UPPER-CASE CHARACTERS\n         B     P000985                   SKIP NEXT SECTION\n         SPACE 3\nP000975  DS    0H\n         MVC   COMMAND+1-X(8,R13),A#COMMND  MOVE COMMAND TO DETAIL\n         CLI   A#STYPE,A@ILCCOM          INFO-LINE COMMAND?\n         BNE   P000985                   +NO, SKIP NEXT SECTION\n         MVI   COMMAND-X(R13),C'/'       ELSE, STUFF A SLASH\n         TR    A#BUFPR(16),TRTABLE       AND, ELIMINATE UNDERSCORES\n         SPACE 3\nP000985  DS    0H\n         MVI   PRMBUFF-X(R13),C' '       USING BLANKS...\n         MVC   PRMBUFF+1-X(79,R13),PRMBUFF-X(R13)  ...CLEAR THE FIELD\n         LH    R3,A#BUFLN1               LENGTH OF PRM BUFFER\n         BCTR  R3,0                      DECREMENT FOR EXECUTE\n         EX    R3,MVCBUFPR               MOVE THE PRM BUFFER\n         L     R1,GOODCNT-X(,R13)        GET GOOD RECORD COUNT      @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,GOODCNT-X(,R13)        STORE GOOD RECORD COUNT    @02\n         SPACE 3\n*\n*        PREPARE THE DATA FOR THE FORMATTING AND OUTPUT PROCESSING\n*        SUBROUTINES.\n*\nP000990  DS    0H\n         CLI   A#STYPE,A@MINCOM          MINOR COMMAND?\n         BE    P000990A                  +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          GENERALIZED MINOR COMMAND?\n         BNE   P000991                   +NO, SKIP NEXT SECTION\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000991                   +YES, SKIP NEXT SECTION\n         SPACE 3\nP000990A DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'9'  ENOUGH ROOM LEFT ON PAGE?\n         B     P000992                   MERGE\n         SPACE 3\nP000991  DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'8'  ENOUGH ROOM LEFT ON PAGE?\n         SPACE 3\nP000992  DS    0H\n         BNL   P000993                   +YES, SKIP NEXT SECTION\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQUIRED\n         SPACE 3\nP000993  DS    0H\n         LA    R8,LINE1-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE2-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE3-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,BLANKS-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         CLI   A#STYPE,A@MINCOM          MINOR COMMAND?\n         BE    P000994                   +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          GENERALIZED MINOR COMMAND?\n         BNE   P000995                   +NO, SKIP NEXT SECTION\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000995                   +YES, SKIP NEXT SECTION\n         SPACE 3\nP000994  DS    0H\n         LA    R8,LINE4A-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         SPACE 3\nP000995  DS    0H\n         LA    R8,LINE4B-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE5-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         B     P000300                   GET ANOTHER RECORD!\n         SPACE 3\n*\n*        FORMATTING AND OUTPUT PROCESSING SUBROUTINES.\n*\nP001010  DS    0H\n         TM    MISCSW-X(R13),PGEJECT     PAGE EJECT INDICATED?\n         BNO   P001015                   +NO, SKIP NEXT SECTION\n         NI    MISCSW-X(R13),255-PGEJECT  TURN OFF PAGE EJECT SWITCH\n         AP    PGCOUNT-X(8,R13),=PL8'1'  INCREMENT PAGE COUNT\n*\n*        TO CHANGE THE LINE COUNT, PLACE THE VALUE OF THE DESIRED\n*        LINE COUNT IN THE LITERAL IN THE FOLLOWING INSTRUCTION.\n*\n         ZAP   LNCOUNT-X(2,R13),=PL2'55'  <-- SPECIFY LINE COUNT\n         MVC   PAGE-X(8,R13),=XL8'4020202020202020'  SET PATTERN\n         ED    PAGE-X(8,R13),PGCOUNT+4-X(R13)  FORMAT PAGE COUNT\n         LA    R6,HEADING-X(,R13)        POINT TO OUTPUT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         LA    R6,BLANKS-X(,R13)         POINT TO OUTPUT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         SPACE 3\nP001015  DS    0H\n         LR    R6,R8                     POINT TO REPORT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         BR    R9                        RETURN\n         SPACE 3\nP001200  DS    0H\n         CLI   0(R6),C'-'                SPACE 3 LINES?\n         BNE   P001210                   +NO, SKIP NEXT SECTION\n         SP    LNCOUNT-X(2,R13),=PL2'3'  ELSE, DECREMENT LINE COUNT 3\n         B     P001220                   MERGE\n         SPACE 3\nP001210  DS    0H\n         SP    LNCOUNT-X(2,R13),=PL2'1'  ELSE, DECREMENT LINE COUNT 1\n         SPACE 3\nP001220  DS    0H\n         PUT   (R11),(R6)                PUT A RECORD - QSAM (PM)\n         BR    R7                        RETURN\n         SPACE 3\n*\n*        TIME AND DATE CONVERSION SUBROUTINE.  TIME MUST BE IN\n*        REGISTER 0 (HHMMSSTH) AND DATE MUST BE IN REGISTER 1\n*        (00YYDDDF).\n*\nP001400  DS    0H\n         SRL   R0,4                      TIME - 0HHMMSST\n         O     R0,=X'0000000F'           TIME - 0HHMMSSF\n         STCM  R0,B'1111',TIMEWORK+6-X(R13)  STORE IN WORK AREA\n         UNPK  TIMEWORK-X(6,R13),TIMEWORK+6-X(4,R13)  UNPACK IT!\n         MVC   HH-X(2,R13),TIMEWORK-X(R13)  MOVE HOURS\n         MVC   MM-X(2,R13),TIMEWORK+2-X(R13)  MOVE MINUTES\n         MVC   SS-X(2,R13),TIMEWORK+4-X(R13)  MOVE SECONDS\n         LR    R7,R1                     SAVE JULIAN DATE\n         SRL   R7,12                     DATE - 00000YYD\n         O     R7,=X'0000000F'           DATE - 00000YYF\n         STCM  R7,B'0011',DATEWORK+6-X(R13)  STORE YEAR PORTION\n         UNPK  YR-X(2,R13),DATEWORK+6-X(2,R13)  UNPACK IT!\n         LA    R2,TABLE1                 ASSUME NOT A LEAP YEAR\n         DP    DATEWORK+5-X(3,R13),=PL1'4'  DIVIDE YEAR BY 4\n         CP    DATEWORK+7-X(1,R13),=PL1'0'  ZERO REMAINDER?\n         BNE   P001500                   +NO, NOT A LEAP YEAR\n         LA    R2,TABLE2                 ELSE, USE LEAP YEAR TABLE\n         SPACE 3\nP001500  DS    0H\n         N     R1,=X'0000FFFF'           ZERO YEAR PORTION OF DATE\n         SPACE 3\nP001600  DS    0H\n         CLM   R1,B'0011',0(R2)          COMPARE JULIAN DATE IN TABLE\n         BH    P001700                   BRANCH IF HIGH\n         S     R2,=F'4'                  ELSE, POINT TO PREVIOUS ENTRY\n         MVC   MO-X(2,R13),2(R2)         GET MONTH\n         XC    DATEWORK-X(8,R13),DATEWORK-X(R13)  CLEAR WORK AREA\n         STCM  R1,B'0011',DATEWORK-X(R13)  STORE JULIAN DATE\n         SP    DATEWORK-X(2,R13),0(2,R2)  SUBTRACT FOR DATE OF MONTH\n         OI    DATEWORK+1-X(R13),X'0F'   FIX THE SIGN\n         UNPK  DA-X(2,R13),DATEWORK-X(2,R13)  UNPACK IT!\n         B     P001800                   ALL DONE, PREPARE TO EXIT\n         SPACE 3\nP001700  DS    0H\n         LA    R2,4(,R2)                 BUMP TABLE POINTER\n         B     P001600                   KEEP CHECKING\n         SPACE 3\nP001800  DS    0H\n         BR    R9                        RETURN\n         SPACE 3\n*\n*        TERMINATION, VALIDATION, AND SUMMARIZATION.\n*\nP002000  DS    0H\n         XR    R3,R3                     CLEAR R3 TO ZEROS          @02\n         CLC   TOTCNT-X(4,R13),=F'0'     WERE ANY RCDS PROCESSED?   @02\n         BNE   P002010                   +YES, SKIP NEXT SECTION    @02\n         LA    R3,4                      ELSE, SET RC=4             @02\n         SPACE 3                                                    @02\nP002010  DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'5'  ENOUGH ROOM LEFT ON PAGE?  @02\n         BNL   P002020                   +YES, SKIP NEXT SECTION    @02\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQ'D  @02\n         SPACE 3                                                    @02\nP002020  DS    0H                                                   @02\n         L     R6,GOODCNT-X(,R13)        GET GOOD COUNT             @02\n         L     R7,BADCNT-X(,R13)         GET BAD COUNT              @02\n         ALR   R6,R7                     GET TOTAL COUNT            @02\n         CL    R6,TOTCNT-X(,R13)         DO TOTALS AGREE?           @02\n         BE    P002025                   +THEY DARN WELL BETTER!    @02\n         ABEND 4000,,,,REASON=0          ELSE, ADIOS...             @02\n         SPACE 3                                                    @02\nP002025  DS    0H                                                   @02\n         L     R6,GOODCNT-X(,R13)        GET GOOD COUNT             @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  GOODNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER  @02\n         LA    R8,TERMLN1-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         ICM   R6,B'1111',BADCNT-X(R13)  GET BAD COUNT              @02\n         BZ    P002027                   ZERO, SKIP RC SETTING      @02\n         LA    R3,8                      SET RETURN CODE            @02\n         SPACE 3                                                    @02\nP002027  DS    0H                                                   @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  BADNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER   @02\n         LA    R8,TERMLN2-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         L     R6,TOTCNT-X(,R13)         GET TOTAL COUNT            @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  TOTNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER   @02\n         LA    R8,TERMLN3-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         SPACE 3                                                    @02\nP002030  DS    0H                                                   @02\n         CLOSE ((R10),,(R11)),MF=(E,CLOSFI-X(,R13))  CLOSE FILES\n         L     R8,4(R13)                 SAVE ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKSZ,A=(R13)    FREE THE WORK AREA\n         LR    R13,R8                    ADDR CALLER'S SAVE AREA\n         LR    R15,R3                    LOAD RETURN CODE           @02\n         RETURN (14,12),,RC=(15)         RESTORE REGS AND RETURN\n         SPACE 3\n*                                                                   @02\n*        ERROR ROUITNE.                                             @02\n*                                                                   @02\nP003000  DS    0H                                                   @02\n         TM    MISCSW-X(R13),SPIEACT     ENTERED BECAUSE OF 0C7?    @02\n         BO    P003005                   +YES, SKIP NEXT SECTION    @02\n         LA    R14,P000365               RETURN POINT (NO SPIE)     @02\n         B     P003007                   MERGE                      @02\n         SPACE 3                                                    @02\nP003005  DS    0H                                                   @02\n         LR    R2,R1                     SAVE ADDR OF PIE           @02\n         USING PIE,R2                    ESTABLISH ADDRESSABILITY   @02\n         SPACE 3                                                    @02\nP003007  DS    0H                                                   @02\n         ST    R14,SPIESAVE-X(,R13)      SAVE REGISTER 14           @02\n         OI    MISCSW-X(R13),ERROR       INDICATE ERROR DETECTED    @02\n         CP    LNCOUNT-X(2,R13),=PL2'6'  ENOUGH ROOM LEFT ON PAGE?  @02\n         BNL   P003010                   +YES, SKIP NEXT SECTION    @02\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQ'D  @02\n         SPACE 3                                                    @02\nP003010  DS    0H                                                   @02\n         L     R1,TOTCNT-X(,R13)         GET RUNNING TOTAL COUNT    @02\n         CVD   R1,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  RECNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPACK THE NUMBER @02\n         LA    R8,ERRORLN1-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN2-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN3-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN4-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         L     R1,BADCNT-X(,R13)         GET BAD RECORD COUNT       @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,BADCNT-X(,R13)         SAVE BAD RECORD COUNT      @02\n         TM    MISCSW-X(R13),SPIEACT     SPIE ACTIVE?               @02\n         BNO   P003020                   +NO, SKIP NEXT SECTION     @02\n         MVC   PIEPSW+5(3),=AL3(P000360)  RETURN POINT IN MAINLINE  @02\n         DROP  R2                        DROP ADDRESSABILITY        @02\n         SPACE 3                                                    @02\nP003020  DS    0H                                                   @02\n         L     R14,SPIESAVE-X(,R13)      RESTORE REGSITER 14        @02\n         BR    R14                       RETURN                     @02\n         SPACE 3                                                    @02\n*\n*        EXECUTED INSTRUCTIONS.\n*\nMVCBUFAU MVC   AUXBUFF-X(*-*,R13),A#BUFAU  MOVE AUX BUFFER\nMVCBUFPR MVC   PRMBUFF-X(*-*,R13),A#BUFPR  MOVE PRM BUFFER\n         DROP  R5                        DROP ADDRESSABILITY\nOCBUFAU  OC    AUXBUFF-X(*-*,R13),=80X'40' FORCE UPPER-CASE AUX BUFFER\n         SPACE 3\n*\n*        TABLE OF COMMAND TYPES.\n*\nCOMMTBL  DS    0F\n         DC    AL1(A@IMMCOM),CL15'IMMEDIATE      '\n         DC    AL1(A@MAJCOM),CL15'MAJOR          '\n         DC    AL1(A@MINCOM),CL15'MINOR          '\n         DC    AL1(A@GENMIN),CL15'GENERAL MINOR  '\n         DC    AL1(A@ILCCOM),CL15'INFO-LINE      '\n         DC    AL1(A@SUPCOM),CL15'SUPERSEDED     '\nCTBLSZ   EQU   (*-COMMTBL)/16\n         SPACE 3\n*\n*        TABLE OF COMMAND DISPOSITIONS.\n*\nDISPTBL  DS    0F\n         DC    AL1(A@ALLOW),CL23'ACCESS ALLOWED         '\n         DC    AL1(A@DISALW),CL23'ACCESS DENIED          '\n         DC    AL1(A@ASFTSF),CL23'SPECIAL ACCESS ALLOWED '\nDTBLSZ   EQU   (*-DISPTBL)/24\n         SPACE 3\n*\n*        NON-LEAP YEAR TABLE.\n*\nTABLE1   DC    XL2'000F',CL2'01'         JAN\n         DC    XL2'031F',CL2'02'         FEB\n         DC    XL2'059F',CL2'03'         MAR\n         DC    XL2'090F',CL2'04'         APR\n         DC    XL2'120F',CL2'05'         MAY\n         DC    XL2'151F',CL2'06'         JUN\n         DC    XL2'181F',CL2'07'         JUL\n         DC    XL2'212F',CL2'08'         AUG\n         DC    XL2'243F',CL2'09'         SEP\n         DC    XL2'273F',CL2'10'         OCT\n         DC    XL2'304F',CL2'11'         NOV\n         DC    XL2'334F',CL2'12'         DEC\n         DC    XL2'365F'\n         SPACE 3\n*\n*        LEAP YEAR TABLE.\n*\nTABLE2   DC    XL2'000F',CL2'01'         JAN\n         DC    XL2'031F',CL2'02'         FEB\n         DC    XL2'060F',CL2'03'         MAR\n         DC    XL2'091F',CL2'04'         APR\n         DC    XL2'121F',CL2'05'         MAY\n         DC    XL2'152F',CL2'06'         JUN\n         DC    XL2'182F',CL2'07'         JUL\n         DC    XL2'213F',CL2'08'         AUG\n         DC    XL2'244F',CL2'09'         SEP\n         DC    XL2'274F',CL2'10'         OCT\n         DC    XL2'305F',CL2'11'         NOV\n         DC    XL2'335F',CL2'12'         DEC\n         DC    XL2'366F'\n         SPACE 3\n*\n*        TRANSLATE TABLE FOR TRANSLATING UNDERSCORES TO BLANKS.\n*\nTRTABLE  DS    0F\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'808182838485868788898A8B8C8D8E8F'\n         DC    XL16'909192939495969798999A9B9C9D9E9F'\n         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         ORG   TRTABLE+C'_'\n         DC    C' '\n         ORG   ,\n         SPACE 3\n*\n*        LITERAL POOL.\n*\n         LTORG ,\n*\n*        GETMAINED WORK AREA TEMPLATE BEGINS HERE!\n*\nX        DS    0D\nSAVEAREA DS    18F\n*\nHEADING  DS    0CL133\n         DC    CL1'1'\nDATE     DS    CL8\n         DC    CL4' '\nTIME     DS    CL8\n         DC    CL23' '\n         DC    CL40'O M E G A M O N  SECURITY  AUDIT  REPORT'\n         DC    CL36' '\n         DC    CL5'PAGE '\nPAGE     DS    CL8\n*\nLINE1    DS    0CL133\n         DC    CL1'-'\n         DC    CL13' '\n         DC    CL6'JOB:  '\nJOBNAME  DS    CL8\n         DC    CL3'  ('\nJOBID    DS    CL8\n         DC    CL5')    '\nPRSTPNM  DS    CL8\n         DC    CL4' '\nSTPNM    DS    CL8\n         DC    CL6' '\n         DC    CL9'SYSTEM:  '\nSYSID    DS    CL4\n         DC    CL50' '\n*\nLINE2    DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL7'DATE:  '\nREPDATE  DS    CL8\n         DC    CL4' '\n         DC    CL7'TIME:  '\nREPTIME  DS    CL8\n         DC    CL4' '\n         DC    CL9'USERID:  '\nUSERID   DS    CL7\n         DC    CL4' '\n         DC    CL7'UNIT:  '\nUNIT     DS    CL8\n         DC    CL46' '\n*\nLINE3    DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL10'COMMAND:  '\nCOMMAND  DS    CL9\nASSOCMAJ DS    CL16\n         DC    CL6' '\n         DC    CL7'TYPE:  '\nCMTYPE   DS    CL15                                                 @03\n         DC    CL6' '\n         DC    CL14'DISPOSITION:  '\nDISP     DS    CL7\n         DC    CL29' '                                              @03\n*\nLINE4A   DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL31'COMMAND OUTPUT IMAGE (MAJOR)>  '\nAUXBUFF  DS    CL80\n         DC    CL8' '\n*\nLINE4B   DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL31'COMMAND INPUT IMAGE -------->  '\nPRMBUFF  DS    CL80\n         DC    CL8' '\n*\nLINE5    DS    0CL133\n         DC    CL1' '\n         DC    CL44' '\n         DC    CL10'....+....1'\n         DC    CL10'....+....2'\n         DC    CL10'....+....3'\n         DC    CL10'....+....4'\n         DC    CL10'....+....5'\n         DC    CL10'....+....6'\n         DC    CL10'....+....7'\n         DC    CL10'....+....8'\n         DC    CL8' '\n*\nBLANKS   DS    0CL133\n         DC    CL1' '\n         DC    CL132' '\n*\nERRORLN1 DS    0CL133                                               @02\n         DC    CL1'-'                                               @02\n         DC    CL13' '                                              @02\n         DC    CL16'*** WARNING *** '                               @02\n         DC    CL61'AN ERROR WAS DETECTED DURING THE PROCESSING OF RECOX\n               RD NUMBER '                                          @02\nRECNUM   DS    CL7                                                  @02\n         DC    CL3'.  '                                             @02\n         DC    CL32'POSSIBLE CAUSES ARE AS FOLLOWS: '               @02\n*\nERRORLN2 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL89'1)  INCORRECT SMF NUMBER SPECIFICATION IN EXTRACTIOX\n               N STEP OR IN OMEGAMON SECURITY UPDATE.'              @02\n         DC    CL14' '                                              @02\n*\nERRORLN3 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL76'2)  USE OF OMEGAMON''S SECURITY AUDIT SMF NUMBER BYX\n                ANOTHER APPLICATION.'                               @02\n         DC    CL27' '                                              @02\n*\nERRORLN4 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL43'3)  CORRUPTION OF THE SYSTEM SMF DATA SETS.'    @02\n         DC    CL60' '                                              @02\n*\nTERMLN1  DS    0CL133                                               @02\n         DC    CL1'-'                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'RECORDS PROCESSED SUCCESSFULLY:  '              @02\nGOODNUM  DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nTERMLN2  DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'RECORDS PROCESSED IN ERROR:      '              @02\nBADNUM   DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nTERMLN3  DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'TOTAL RECORDS PROCESSED:         '              @02\nTOTNUM   DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nMAJTAG   DS    0CL16\n         DC    CL11'  (MAJOR:  '\nMAJCMD   DS    CL4\n         DC    CL1')'\nLNCOUNT  DC    PL2'0'\nPGCOUNT  DC    PL8'0'\nPATTERN  DC    XL6'402020202120'\nTIMEWORK DS    XL10\nDATEWORK DS    D\nGREGDATE DS    0CL8\nMO       DS    CL2\n         DC    CL1'/'\nDA       DS    CL2\n         DC    CL1'/'\nYR       DS    CL2\nHHMMSS   DS    0CL8\nHH       DS    CL2\n         DC    CL1':'\nMM       DS    CL2\n         DC    CL1':'\nSS       DS    CL2\nMISCSW   DC    X'00'\nPGEJECT  EQU   X'80'\nERROR    EQU   X'40'                                                @02\nSPIEACT  EQU   X'20'                                                @02\nSPIESAVE DS    F                                                    @02\nTOTCNT   DC    F'0'                                                 @02\nGOODCNT  DC    F'0'                                                 @02\nBADCNT   DC    F'0'                                                 @02\nDOUBLE   DS    D                                                    @02\nOPENFI   OPEN  (0,,0),MF=L\nCLOSFI   CLOSE (0,,0),MF=L\nSTOP0C7  SPIE  ,,MF=L                                               @02\n*\n*        INPUT FILE DCB.\n*\nINDCB    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,RECFM=VBS,               X\n               LRECL=32767,BLKSIZE=4096,EODAD=P002000,BFTEK=A\n*\n*        OUTPUT FILE DCB.\n*\nOUTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=VB,             X\n               LRECL=32756,BLKSIZE=32760\n*\n*        GETMAINED WORK AREA TEMPLATE ENDS HERE!\n*\nWORKSZ   EQU   *-X\n         SPACE 3\n*\n*        MAPPING MACROS AND DSECTS.\n*\n         DCBD  DEVD=DA,DSORG=PS          DCB MAPPING MACRO\n         DSECT\n         IFASMFR 0                       SMF COMMON HEADER\n         $CANHDR DSECT=YES               CANDLE COMMON HEADER\n         $AUDIT ,                        OMEGAMON/BASE SECURITY AUDIT\n         IHAPIE ,                        PROGRAM INTERRUPT ELEMENT  @02\n*\n*        STANDARD REGISTER EQUATES.\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         DROP  ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMFRPT": {"ttr": 10500, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x95!O\\x00\\x95!O\\x17\\x03\\x03i\\x03f\\x00\\x06\\xe2\\xe8\\xe2\\xf2\\xf0\\xf0\\xf5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1995-08-02T00:00:00", "modifydate": "1995-08-02T17:03:00", "lines": 873, "newlines": 870, "modlines": 6, "user": "SYS2005"}, "text": "         TITLE 'SMFRPT - OMEGAMON SMF SECURITY AUDIT POST-PROCESSOR ANDX\n                REPORT GENERATOR'\n***********************************************************************\n*                                                                     *\n*                         S M F R P T                                 *\n*                                                                     *\n* ******************************************************************* *\n* *                                                                 * *\n* *  N   =====> PLEASE NOTE THAT THIS CODE IS *NOT* SUPPORTED BY    * *\n* *      =====> CANDLE.  IT IS MERELY AN EXAMPLE OF A WORKING SMF   * *\n* *  O   =====> POST-PROCESSOR AND REPORT GENERATOR WHICH MAY BE    * *\n* *      =====> USED IN CONJUNCTION WITH OMEGAMON'S SMF SECURITY    * *\n* *  T   =====> AUDIT FEATURE.  PLEASE FEEL FREE TO MODIFY OR       * *\n* *      =====> EMBELLISH THIS PROGRAM AS YOU SEE FIT TO SUIT       * *\n* *  E   =====> THE NEEDS OF YOUR INSTALLATION.                     * *\n* *                                                                 * *\n* ******************************************************************* *\n*                                                                     *\n*                                                                     *\n*        PROGRAM NAME:                                                *\n*                                                                     *\n*        SMFRPT.                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        FUNCTION ABSTRACT:                                           *\n*                                                                     *\n*        THIS PROGRAM WILL FORMAT A REPORT BASED ON SMF DATA DERIVED  *\n*        FROM THE OMEGAMON/BASE AUDIT PROCESS.                        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        CALLING CONVENTIONS:                                         *\n*                                                                     *\n*        //SMFRPT EXEC PGM=SMFRPT                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        INPUT (SYSIN):                                               *\n*                                                                     *\n*        OMEGAMON/BASE SECURITY AUDIT SMF RECORDS, SORTED AND         *\n*        EXTRACTED VIA IFASMFDP.  DCB ATTRIBUTES ARE RECFM=VBS,       *\n*        LRECL=32767,BLKSIZE=4096.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        OUTPUT (SYSPRINT):                                           *\n*                                                                     *\n*        FORMATTED OMEGAMON SECURITY AUDIT REPORT.  DCB ATTRIBUTES    *\n*        ARE RECFM=FBA,LRECL=133,BLKSIZE=25*133.                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        ATTRIBUTES:                                                  *\n*                                                                     *\n*        REFRESHABLE, REENTRANT, REUSABLE, RMODE(24), AMODE(24)       *\n*        (MAY BE PLACED IN PLPA, IF DESIRED).                         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        USER ABENDS:                                                 *\n*                                                                     *\n*        1137 - INPUT FILE FAILED TO OPEN.                            *\n*        1237 - OUTPUT FILE FAILED TO OPEN.                           *\n*        4000 - INTERNAL LOGIC ERROR (SHOULD NEVER OCCUR).            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES CALLED:                                          *\n*                                                                     *\n*        NONE.                                                        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        MACROS USED:                                                 *\n*                                                                     *\n*        (IBM)                                                        *\n*        ABEND, CLOSE, DCB, DCBD, FREEMAIN, GET, GETMAIN, IFASMFR,    *\n*        IHAPIE, OPEN, PUT, RETURN, SAVE, SPIE, TIME.                 *\n*                                                                     *\n*        (CANDLE)                                                     *\n*        $AUDIT, $CANHDR.                                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        RETURN CODES:                                                *\n*                                                                     *\n*        0 - SUCCESSFUL COMPLETION.                                   *\n*        4 - NO ELIGIBLE SMF RECORDS WERE PROCESSED.                  *\n*        8 - AT LEAST ONE RECORD IN ERROR WAS PROCESSED.              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*                                                                     *\n*        R0  - USED TO PASS TIME TO FORMATTING SUBROUTINE.            *\n*        R1  - USED TO PASS DATE TO FORMATTING SUBROUTINE.            *\n*        R2  - WORK.                                                  *\n*        R3  - BASE FOR IBM SMF HEADER (IFASMFR).                     *\n*        R4  - BASE FOR CANDLE COMMON HEADER ($CANHDR)                *\n*              (NOTE: ONLY SELECTED $CANHDR FIELDS NECESSARY TO       *\n*              IDENTIFY OMEGAMON/BASE SECURITY AUDIT SMF RECORDS      *\n*              WILL BE PRESENT).                                      *\n*        R5  - BASE FOR SECURITY AUDIT RECORD ($AUDIT).               *\n*        R6  - WORK.                                                  *\n*        R7  - WORK.                                                  *\n*        R8  - WORK/SUBROUTINE LINKAGE.                               *\n*        R9  - WORK/SUBROUTINE LINKAGE.                               *\n*        R10 - ADDR OF INPUT DCB.                                     *\n*        R11 - ADDR OF OUTPUT DCB.                                    *\n*        R12 - CSECT BASE REGISTER.                                   *\n*        R13 - ADDR OF GETMAINED WORK AREA (EXPLICIT BASE).           *\n*        R14 - RETURN ADDRESS.                                        *\n*        R15 - ENTRY POINT ADDRESS.                                   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*| NO. |             CHANGE DESCRIPTION             |   DATE   | WHO |*\n*|     |                                            |          |     |*\n*| @00 | INITIAL CODING                             | 04/22/88 | ASG |*\n*| @01 | STANDARDIZE $CANHDR FIELD ASSIGNMENTS      | 07/08/88 | ASG |*\n*| @02 | ENHANCE RECORD VALIDATION PROCESS          | 08/22/88 | ASG |*\n*| @03 | FIX MINOR FORMATTING PROBLEM               | 01/27/89 | ASG |*\n*|     |                                            |          |     |*\n***********************************************************************\n         SPACE 3\n*\n*        PERFORM HOUSEKEEPING REQUIRED FOR A REENTRANT ROUTINE.\n*\nOMSMFRPT CSECT\n         SAVE  (14,12),,*                SAVE CALLER'S REGISTERS\n         LR    R12,R15                   GET ENTRY POINT ADDRESS\n         USING OMSMFRPT,R12              ESTABLISH ADDRESSABILITY\n         B     P000050                   BRANCH AROUND EYE-CATCHER\n         DC    C'****&SYSDATE****&SYSTIME****'\n         SPACE 3\nP000050  DS    0H\n         GETMAIN R,LV=WORKSZ             GETMAIN A WORK AREA\n         ST    R1,8(R13)                 ESTABLISH BACKWARD CHAIN\n         LR    R2,R1                     SAVE WORK AREA ADDR\n         LA    R3,WORKSZ                 SIZE OF WORK AREA\n         LA    R6,X                      ADDR OF WORK AREA TEMPLATE\n         LA    R7,WORKSZ                 SIZE OF WORK AREA\n         MVCL  R2,R6                     INITIALIZE WORK AREA\n         ST    R13,4(R1)                 ESTABLISH FORWARD CHAIN\n         LR    R13,R1                    POINT R13 TO MY SAVE AREA\n         SPACE 3\n*\n*        OPEN THE INPUT AND OUTPUT FILES.\n*\nP000100  DS    0H\n         LA    R10,INDCB-X(,R13)         ADDR OF INPUT FILE\n         LA    R11,OUTDCB-X(,R13)        ADDR OF OUTPUT FILE\n         OPEN  ((R10),INPUT,(R11),OUTPUT),MF=(E,OPENFI-X(,R13))\n         TM    DCBOFLGS-IHADCB(R10),DCBOFOPN  WAS FILE OPENED?\n         BO    P000200                   +YES, SKIP NEXT SECTION\n         ABEND 1137,,,,REASON=0          ELSE, ABEND U1137\n         SPACE 3\nP000200  DS    0H\n         TM    DCBOFLGS-IHADCB(R11),DCBOFOPN  WAS FILE OPENED?\n         BO    P000250                   +YES, SKIP NEXT SECTION\n         ABEND 1237,,,,REASON=0          ELSE, ABEND U1237\n         SPACE 3\n*\n*        OBTAIN THE CURRENT DATE AND TIME VIA THE TIME MACRO.\n*\nP000250  DS    0H\n         TIME  DEC                       GET CURRENT TIME AND DATE\n         BAL   R9,P001400                PERFORM CONVERSION ROUTINE\n         MVC   TIME-X(8,R13),HHMMSS-X(R13)  MOVE TIME TO HEADING\n         MVC   DATE-X(8,R13),GREGDATE-X(R13)  MOVE DATE TO HEADING\n         SPACE 3\n*\n*        THIS SECTION CONSTITUTES THE MAIN PROCESSING LOOP OF THE\n*        ROUTINE.\n*\nP000300  DS    0H\n         GET   (R10)                     GET A RECORD - QSAM (GL)\n         LR    R3,R1                     R3 POINTS TO THE RECORD\n         USING SMFRCD0,R3                ESTABLISH ADDRESSABILITY\n         CLI   SMF0RTY,X'FF'\n         BNE   P000300\n         CLI   SMF0RTY,X'02'             SMF DUMP HEADER RECORD?\n         BE    P000300                   +YES, GET ANOTHER RECORD\n         CLI   SMF0RTY,X'03'             SMF DUMP TRAILER RECORD?\n         BE    P000300                   +YES, GET ANOTHER RECORD\n         L     R1,TOTCNT-X(,R13)         GET TOTAL RECORD COUNT     @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,TOTCNT-X(,R13)         SAVE TOTAL RECORD COUNT    @02\n         LA    R4,SMF0BUF+2              BUMP OVER IBM SMF HEADER\n         DROP  R3                        DROP ADDRESSABILITY\n         USING C#RDW,R4                  ESTABLISH ADDRESSABILITY   @01\n*        DC    X'0000'\n         CLC   C#PRDFM1(2),=AL2(C@PFC1CM)  GOOD PROD FAMILY CODE?   @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDID1(2),=AL2(C@PID1OB)  GOOD PROD ID CODE?       @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDFM2(2),=AL2(C@PFC2CM)  GOOD PROD FAMILY?        @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         CLC   C#PRDID2(2),=AL2(C@PID2OB)  GOOD PROD ID?            @01\n         BNE   P003000                   +NO, PROCESS ERROR         @01\n         LA    R5,C#CMNLEN(,R4)          BUMP OVER CANDLE COMMON HEADER\n         DROP  R4                        DROP ADDRESSABILITY\n         USING A#AUDIT,R5                ESTABLISH ADDRESSABILITY\n         CLI   A#TYPE,A@COMMND           COMMAND-TYPE RECORD?\n         BNE   P003000                   +NO, PROCESS ERROR\n         MVC   JOBNAME-X(8,R13),A#CNJOB  MOVE JOB NAME\n         MVC   PRSTPNM-X(8,R13),A#CSTEP  MOVE PROCSTEP NAME\n         MVC   STPNM-X(8,R13),A#CSTEP+8  MOVE STEP NAME\n         MVC   USERID-X(8,R13),A#USERID  MOVE USERID\n         MVC   UNIT-X(8,R13),A#LUNAME    MOVE UNIT\n         MVC   SYSID-X(4,R13),A#SYSID    MOVE SYSID\n         MVC   JOBID-X(8,R13),A#JOBID    MOVE JOBID\n         SPACE 3                                                    @02\nP000350  DS    0H                                                   @02\n         OI    MISCSW-X(R13),SPIEACT     INDICATE SPIE ACTIVE       @02\n         SPIE  P003000,(7),MF=(E,STOP0C7-X(R13))  ESTABLISH SPIE    @02\n         ICM   R0,B'1111',A#TIME         GET TIME\n         ICM   R1,B'1111',A#DATE         GET DATE\n         BAL   R9,P001400                PERFORM CONVERSION ROUTINE\n         SPACE 3                                                    @02\nP000360  DS    0H                                                   @02\n         SPIE  0,MF=(E,STOP0C7-X(R13))   CANCEL SPIE                @02\n         NI    MISCSW-X(R13),255-SPIEACT  RESET SWITCH              @02\n         SPACE 3                                                    @02\nP000365  DS    0H                                                   @02\n         TM    MISCSW-X(R13),ERROR       DID AN ERROR OCCURR?       @02\n         BNO   P000370                   +NO, CONTINUE PROCESSING   @02\n         NI    MISCSW-X(R13),255-ERROR   ELSE, RESET ERROR SWITCH   @02\n         B     P000300                   ...AND, GET ANOTHER RECORD @02\n         SPACE 3                                                    @02\nP000370  DS    0H                                                   @02\n         MVC   REPTIME-X(8,R13),HHMMSS-X(R13)  MOVE TIME INTO DETAIL\n         MVC   REPDATE-X(8,R13),GREGDATE-X(R13)  MOVE DATE INTO DETAIL\n         LA    R7,COMMTBL                POINT TO COMMAND TYPE TABLE\n         LA    R8,CTBLSZ                 # OF ENTRIES IN TABLE\n         SPACE 3\n*\n*        COMMAND TYPE TABLE LOOK-UP LOOP.\n*\nP000400  DS    0H\n         CLC   A#STYPE(1),0(R7)          DO WE HAVE A MATCH?\n         BE    P000500                   +YES, SKIP NEXT SECTION\n         LA    R7,16(,R7)                ELSE, BUMP POINTER\n         BCT   R8,P000400                LOOP THROUGH TABLE\n         MVC   CMTYPE-X(15,R13),=CL15'*** UNKNOWN ***'  NOT FOUND\n         B     P000600                   SKIP NEXT SECTION\n         SPACE 3\nP000500  DS    0H\n         MVC   CMTYPE-X(15,R13),1(R7)    MOVE COMM TYPE INTO DETAIL\n         SPACE 3\nP000600  DS    0H\n         LA    R7,DISPTBL                POINT TO DISPOSITION TABLE\n         LA    R8,DTBLSZ                 # OF ENTRIES IN TABLE\n         SPACE 3\n*\n*        DISPOSITION TABLE LOOK-UP LOOP.\n*\nP000700  DS    0H\n         CLC   A#DISP(1),0(R7)           DO WE HAVE A MATCH?\n         BE    P000800                   +YES, SKIP NEXT SECTION\n         LA    R7,24(,R7)                ELSE, BUMP POINTER\n         BCT   R8,P000700                LOOP THROUGH TABLE\n         MVC   DISP-X(23,R13),=CL23'    *** UNKNOWN ***    '  NOT FOUND\n         B     P000900                   SKIP NEXT SECTION\n         SPACE 3\nP000800  DS    0H\n         MVC   DISP-X(23,R13),1(R7)      MOVE DISP INTO DETAIL\n         SPACE 3\n*\n*        PROCESS COMMAND INFORMATION.\n*\nP000900  DS    0H\n         MVI   COMMAND-X(R13),C' '       USING BLANKS...\n         MVC   COMMAND+1-X(8,R13),COMMAND-X(R13)  ...CLEAR THE FIELD\n         MVI   ASSOCMAJ-X(R13),C' '      USING BLANKS...\n         MVC   ASSOCMAJ+1-X(15,R13),ASSOCMAJ-X(R13)  ...CLEAR THE FIELD\n         CLI   A#STYPE,A@MINCOM          IS THIS A MINOR?\n         BE    P000925                   +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          IS THIS A GENERALIZED MINOR?\n         BNE   P000975                   +NO, SKIP NEXT SECTION\n         SPACE 3\nP000925  DS    0H\n         MVC   COMMAND+1-X(4,R13),A#COMMND+4  MOVE MINOR\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000985                   +YES, SKIP NEXT SECTION\n         MVC   MAJCMD-X(4,R13),A#COMMND  MOVE ASSOCIATED MAJOR\n         MVC   ASSOCMAJ-X(16,R13),MAJTAG-X(R13)  MOVE MAJOR ADDENDUM\n         MVI   AUXBUFF-X(R13),C' '       USING BLANKS...\n         MVC   AUXBUFF+1-X(79,R13),AUXBUFF-X(R13)  ...CLEAR THE FIELD\n         LH    R3,A#BUFLN2               LENGTH OF AUX BUFFER\n         CH    R3,=H'80'                 IS LENGHTH LE 80?\n         BNH   P000950                   +YES, SKIP NEXT SECTION\n         LH    R3,=H'80'                 ELSE, SET LENGTH AT 80\n         SPACE 3\nP000950  DS    0H\n         BCTR  R3,0                      DECREMENT FOR EXECUTE\n         EX    R3,MVCBUFAU               MOVE THE AUX BUFFER\n*\n*        IF YOUR PRINTER CANNOT HANDLE LOWER-CASE CHARACTERS, UNCOMMENT\n*        THE FOLLOWING COMMAND IN ORDER TO FORCE ALL UPPER-CASE\n*        CHARACTERS.\n*\n*        EX    R3,OCBUFAU                FORCE UPPER-CASE CHARACTERS\n         B     P000985                   SKIP NEXT SECTION\n         SPACE 3\nP000975  DS    0H\n         MVC   COMMAND+1-X(8,R13),A#COMMND  MOVE COMMAND TO DETAIL\n         CLI   A#STYPE,A@ILCCOM          INFO-LINE COMMAND?\n         BNE   P000985                   +NO, SKIP NEXT SECTION\n         MVI   COMMAND-X(R13),C'/'       ELSE, STUFF A SLASH\n         TR    A#BUFPR(16),TRTABLE       AND, ELIMINATE UNDERSCORES\n         SPACE 3\nP000985  DS    0H\n         MVI   PRMBUFF-X(R13),C' '       USING BLANKS...\n         MVC   PRMBUFF+1-X(79,R13),PRMBUFF-X(R13)  ...CLEAR THE FIELD\n         LH    R3,A#BUFLN1               LENGTH OF PRM BUFFER\n         BCTR  R3,0                      DECREMENT FOR EXECUTE\n         EX    R3,MVCBUFPR               MOVE THE PRM BUFFER\n         L     R1,GOODCNT-X(,R13)        GET GOOD RECORD COUNT      @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,GOODCNT-X(,R13)        STORE GOOD RECORD COUNT    @02\n         SPACE 3\n*\n*        PREPARE THE DATA FOR THE FORMATTING AND OUTPUT PROCESSING\n*        SUBROUTINES.\n*\nP000990  DS    0H\n         CLI   A#STYPE,A@MINCOM          MINOR COMMAND?\n         BE    P000990A                  +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          GENERALIZED MINOR COMMAND?\n         BNE   P000991                   +NO, SKIP NEXT SECTION\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000991                   +YES, SKIP NEXT SECTION\n         SPACE 3\nP000990A DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'9'  ENOUGH ROOM LEFT ON PAGE?\n         B     P000992                   MERGE\n         SPACE 3\nP000991  DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'8'  ENOUGH ROOM LEFT ON PAGE?\n         SPACE 3\nP000992  DS    0H\n         BNL   P000993                   +YES, SKIP NEXT SECTION\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQUIRED\n         SPACE 3\nP000993  DS    0H\n         LA    R8,LINE1-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE2-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE3-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,BLANKS-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         CLI   A#STYPE,A@MINCOM          MINOR COMMAND?\n         BE    P000994                   +YES, SKIP NEXT SECTION\n         CLI   A#STYPE,A@GENMIN          GENERALIZED MINOR COMMAND?\n         BNE   P000995                   +NO, SKIP NEXT SECTION\n         CLC   A#COMMND(4),=4X'00'       GENERALIZED MINOR W/O MAJOR?\n         BE    P000995                   +YES, SKIP NEXT SECTION\n         SPACE 3\nP000994  DS    0H\n         LA    R8,LINE4A-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         SPACE 3\nP000995  DS    0H\n         LA    R8,LINE4B-X(,R13)         POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         LA    R8,LINE5-X(,R13)          POINT TO REPORT LINE\n         BAL   R9,P001010                PERFORM FORMATTING SUBROUTINE\n         B     P000300                   GET ANOTHER RECORD!\n         SPACE 3\n*\n*        FORMATTING AND OUTPUT PROCESSING SUBROUTINES.\n*\nP001010  DS    0H\n         TM    MISCSW-X(R13),PGEJECT     PAGE EJECT INDICATED?\n         BNO   P001015                   +NO, SKIP NEXT SECTION\n         NI    MISCSW-X(R13),255-PGEJECT  TURN OFF PAGE EJECT SWITCH\n         AP    PGCOUNT-X(8,R13),=PL8'1'  INCREMENT PAGE COUNT\n*\n*        TO CHANGE THE LINE COUNT, PLACE THE VALUE OF THE DESIRED\n*        LINE COUNT IN THE LITERAL IN THE FOLLOWING INSTRUCTION.\n*\n         ZAP   LNCOUNT-X(2,R13),=PL2'55'  <-- SPECIFY LINE COUNT\n         MVC   PAGE-X(8,R13),=XL8'4020202020202020'  SET PATTERN\n         ED    PAGE-X(8,R13),PGCOUNT+4-X(R13)  FORMAT PAGE COUNT\n         LA    R6,HEADING-X(,R13)        POINT TO OUTPUT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         LA    R6,BLANKS-X(,R13)         POINT TO OUTPUT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         SPACE 3\nP001015  DS    0H\n         LR    R6,R8                     POINT TO REPORT LINE\n         BAL   R7,P001200                PERFORM OUTPUT SUBROUTINE\n         BR    R9                        RETURN\n         SPACE 3\nP001200  DS    0H\n         CLI   0(R6),C'-'                SPACE 3 LINES?\n         BNE   P001210                   +NO, SKIP NEXT SECTION\n         SP    LNCOUNT-X(2,R13),=PL2'3'  ELSE, DECREMENT LINE COUNT 3\n         B     P001220                   MERGE\n         SPACE 3\nP001210  DS    0H\n         SP    LNCOUNT-X(2,R13),=PL2'1'  ELSE, DECREMENT LINE COUNT 1\n         SPACE 3\nP001220  DS    0H\n         PUT   (R11),(R6)                PUT A RECORD - QSAM (PM)\n         BR    R7                        RETURN\n         SPACE 3\n*\n*        TIME AND DATE CONVERSION SUBROUTINE.  TIME MUST BE IN\n*        REGISTER 0 (HHMMSSTH) AND DATE MUST BE IN REGISTER 1\n*        (00YYDDDF).\n*\nP001400  DS    0H\n         SRL   R0,4                      TIME - 0HHMMSST\n         O     R0,=X'0000000F'           TIME - 0HHMMSSF\n         STCM  R0,B'1111',TIMEWORK+6-X(R13)  STORE IN WORK AREA\n         UNPK  TIMEWORK-X(6,R13),TIMEWORK+6-X(4,R13)  UNPACK IT!\n         MVC   HH-X(2,R13),TIMEWORK-X(R13)  MOVE HOURS\n         MVC   MM-X(2,R13),TIMEWORK+2-X(R13)  MOVE MINUTES\n         MVC   SS-X(2,R13),TIMEWORK+4-X(R13)  MOVE SECONDS\n         LR    R7,R1                     SAVE JULIAN DATE\n         SRL   R7,12                     DATE - 00000YYD\n         O     R7,=X'0000000F'           DATE - 00000YYF\n         STCM  R7,B'0011',DATEWORK+6-X(R13)  STORE YEAR PORTION\n         UNPK  YR-X(2,R13),DATEWORK+6-X(2,R13)  UNPACK IT!\n         LA    R2,TABLE1                 ASSUME NOT A LEAP YEAR\n         DP    DATEWORK+5-X(3,R13),=PL1'4'  DIVIDE YEAR BY 4\n         CP    DATEWORK+7-X(1,R13),=PL1'0'  ZERO REMAINDER?\n         BNE   P001500                   +NO, NOT A LEAP YEAR\n         LA    R2,TABLE2                 ELSE, USE LEAP YEAR TABLE\n         SPACE 3\nP001500  DS    0H\n         N     R1,=X'0000FFFF'           ZERO YEAR PORTION OF DATE\n         SPACE 3\nP001600  DS    0H\n         CLM   R1,B'0011',0(R2)          COMPARE JULIAN DATE IN TABLE\n         BH    P001700                   BRANCH IF HIGH\n         S     R2,=F'4'                  ELSE, POINT TO PREVIOUS ENTRY\n         MVC   MO-X(2,R13),2(R2)         GET MONTH\n         XC    DATEWORK-X(8,R13),DATEWORK-X(R13)  CLEAR WORK AREA\n         STCM  R1,B'0011',DATEWORK-X(R13)  STORE JULIAN DATE\n         SP    DATEWORK-X(2,R13),0(2,R2)  SUBTRACT FOR DATE OF MONTH\n         OI    DATEWORK+1-X(R13),X'0F'   FIX THE SIGN\n         UNPK  DA-X(2,R13),DATEWORK-X(2,R13)  UNPACK IT!\n         B     P001800                   ALL DONE, PREPARE TO EXIT\n         SPACE 3\nP001700  DS    0H\n         LA    R2,4(,R2)                 BUMP TABLE POINTER\n         B     P001600                   KEEP CHECKING\n         SPACE 3\nP001800  DS    0H\n         BR    R9                        RETURN\n         SPACE 3\n*\n*        TERMINATION, VALIDATION, AND SUMMARIZATION.\n*\nP002000  DS    0H\n         XR    R3,R3                     CLEAR R3 TO ZEROS          @02\n         CLC   TOTCNT-X(4,R13),=F'0'     WERE ANY RCDS PROCESSED?   @02\n         BNE   P002010                   +YES, SKIP NEXT SECTION    @02\n         LA    R3,4                      ELSE, SET RC=4             @02\n         SPACE 3                                                    @02\nP002010  DS    0H\n         CP    LNCOUNT-X(2,R13),=PL2'5'  ENOUGH ROOM LEFT ON PAGE?  @02\n         BNL   P002020                   +YES, SKIP NEXT SECTION    @02\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQ'D  @02\n         SPACE 3                                                    @02\nP002020  DS    0H                                                   @02\n         L     R6,GOODCNT-X(,R13)        GET GOOD COUNT             @02\n         L     R7,BADCNT-X(,R13)         GET BAD COUNT              @02\n         ALR   R6,R7                     GET TOTAL COUNT            @02\n         CL    R6,TOTCNT-X(,R13)         DO TOTALS AGREE?           @02\n         BE    P002025                   +THEY DARN WELL BETTER!    @02\n         ABEND 4000,,,,REASON=0          ELSE, ADIOS...             @02\n         SPACE 3                                                    @02\nP002025  DS    0H                                                   @02\n         L     R6,GOODCNT-X(,R13)        GET GOOD COUNT             @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  GOODNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER  @02\n         LA    R8,TERMLN1-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         ICM   R6,B'1111',BADCNT-X(R13)  GET BAD COUNT              @02\n         BZ    P002027                   ZERO, SKIP RC SETTING      @02\n         LA    R3,8                      SET RETURN CODE            @02\n         SPACE 3                                                    @02\nP002027  DS    0H                                                   @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  BADNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER   @02\n         LA    R8,TERMLN2-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         L     R6,TOTCNT-X(,R13)         GET TOTAL COUNT            @02\n         CVD   R6,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  TOTNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPK THE NUMBER   @02\n         LA    R8,TERMLN3-X(,R13)        POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         SPACE 3                                                    @02\nP002030  DS    0H                                                   @02\n         CLOSE ((R10),,(R11)),MF=(E,CLOSFI-X(,R13))  CLOSE FILES\n         L     R8,4(R13)                 SAVE ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKSZ,A=(R13)    FREE THE WORK AREA\n         LR    R13,R8                    ADDR CALLER'S SAVE AREA\n         LR    R15,R3                    LOAD RETURN CODE           @02\n         RETURN (14,12),,RC=(15)         RESTORE REGS AND RETURN\n         SPACE 3\n*                                                                   @02\n*        ERROR ROUITNE.                                             @02\n*                                                                   @02\nP003000  DS    0H                                                   @02\n         TM    MISCSW-X(R13),SPIEACT     ENTERED BECAUSE OF 0C7?    @02\n         BO    P003005                   +YES, SKIP NEXT SECTION    @02\n         LA    R14,P000365               RETURN POINT (NO SPIE)     @02\n         B     P003007                   MERGE                      @02\n         SPACE 3                                                    @02\nP003005  DS    0H                                                   @02\n         LR    R2,R1                     SAVE ADDR OF PIE           @02\n         USING PIE,R2                    ESTABLISH ADDRESSABILITY   @02\n         SPACE 3                                                    @02\nP003007  DS    0H                                                   @02\n         ST    R14,SPIESAVE-X(,R13)      SAVE REGISTER 14           @02\n         OI    MISCSW-X(R13),ERROR       INDICATE ERROR DETECTED    @02\n         CP    LNCOUNT-X(2,R13),=PL2'6'  ENOUGH ROOM LEFT ON PAGE?  @02\n         BNL   P003010                   +YES, SKIP NEXT SECTION    @02\n         OI    MISCSW-X(R13),PGEJECT     INDICATE PAGE EJECT REQ'D  @02\n         SPACE 3                                                    @02\nP003010  DS    0H                                                   @02\n         L     R1,TOTCNT-X(,R13)         GET RUNNING TOTAL COUNT    @02\n         CVD   R1,DOUBLE-X(,R13)         CONVERT TO DECIMAL         @02\n         OI    DOUBLE+7-X(R13),X'0F'     FIX THE SIGN               @02\n         UNPK  RECNUM-X(7,R13),DOUBLE+4-X(4,R13)  UNPACK THE NUMBER @02\n         LA    R8,ERRORLN1-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN2-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN3-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         LA    R8,ERRORLN4-X(,R13)       POINT TO REPORT LINE       @02\n         BAL   R9,P001010                PERFORM FORMATTING SUBRTN  @02\n         L     R1,BADCNT-X(,R13)         GET BAD RECORD COUNT       @02\n         LA    R1,1(,R1)                 BUMP THE COUNT             @02\n         ST    R1,BADCNT-X(,R13)         SAVE BAD RECORD COUNT      @02\n         TM    MISCSW-X(R13),SPIEACT     SPIE ACTIVE?               @02\n         BNO   P003020                   +NO, SKIP NEXT SECTION     @02\n         MVC   PIEPSW+5(3),=AL3(P000360)  RETURN POINT IN MAINLINE  @02\n         DROP  R2                        DROP ADDRESSABILITY        @02\n         SPACE 3                                                    @02\nP003020  DS    0H                                                   @02\n         L     R14,SPIESAVE-X(,R13)      RESTORE REGSITER 14        @02\n         BR    R14                       RETURN                     @02\n         SPACE 3                                                    @02\n*\n*        EXECUTED INSTRUCTIONS.\n*\nMVCBUFAU MVC   AUXBUFF-X(*-*,R13),A#BUFAU  MOVE AUX BUFFER\nMVCBUFPR MVC   PRMBUFF-X(*-*,R13),A#BUFPR  MOVE PRM BUFFER\n         DROP  R5                        DROP ADDRESSABILITY\nOCBUFAU  OC    AUXBUFF-X(*-*,R13),=80X'40' FORCE UPPER-CASE AUX BUFFER\n         SPACE 3\n*\n*        TABLE OF COMMAND TYPES.\n*\nCOMMTBL  DS    0F\n         DC    AL1(A@IMMCOM),CL15'IMMEDIATE      '\n         DC    AL1(A@MAJCOM),CL15'MAJOR          '\n         DC    AL1(A@MINCOM),CL15'MINOR          '\n         DC    AL1(A@GENMIN),CL15'GENERAL MINOR  '\n         DC    AL1(A@ILCCOM),CL15'INFO-LINE      '\n         DC    AL1(A@SUPCOM),CL15'SUPERSEDED     '\nCTBLSZ   EQU   (*-COMMTBL)/16\n         SPACE 3\n*\n*        TABLE OF COMMAND DISPOSITIONS.\n*\nDISPTBL  DS    0F\n         DC    AL1(A@ALLOW),CL23'ACCESS ALLOWED         '\n         DC    AL1(A@DISALW),CL23'ACCESS DENIED          '\n         DC    AL1(A@ASFTSF),CL23'SPECIAL ACCESS ALLOWED '\nDTBLSZ   EQU   (*-DISPTBL)/24\n         SPACE 3\n*\n*        NON-LEAP YEAR TABLE.\n*\nTABLE1   DC    XL2'000F',CL2'01'         JAN\n         DC    XL2'031F',CL2'02'         FEB\n         DC    XL2'059F',CL2'03'         MAR\n         DC    XL2'090F',CL2'04'         APR\n         DC    XL2'120F',CL2'05'         MAY\n         DC    XL2'151F',CL2'06'         JUN\n         DC    XL2'181F',CL2'07'         JUL\n         DC    XL2'212F',CL2'08'         AUG\n         DC    XL2'243F',CL2'09'         SEP\n         DC    XL2'273F',CL2'10'         OCT\n         DC    XL2'304F',CL2'11'         NOV\n         DC    XL2'334F',CL2'12'         DEC\n         DC    XL2'365F'\n         SPACE 3\n*\n*        LEAP YEAR TABLE.\n*\nTABLE2   DC    XL2'000F',CL2'01'         JAN\n         DC    XL2'031F',CL2'02'         FEB\n         DC    XL2'060F',CL2'03'         MAR\n         DC    XL2'091F',CL2'04'         APR\n         DC    XL2'121F',CL2'05'         MAY\n         DC    XL2'152F',CL2'06'         JUN\n         DC    XL2'182F',CL2'07'         JUL\n         DC    XL2'213F',CL2'08'         AUG\n         DC    XL2'244F',CL2'09'         SEP\n         DC    XL2'274F',CL2'10'         OCT\n         DC    XL2'305F',CL2'11'         NOV\n         DC    XL2'335F',CL2'12'         DEC\n         DC    XL2'366F'\n         SPACE 3\n*\n*        TRANSLATE TABLE FOR TRANSLATING UNDERSCORES TO BLANKS.\n*\nTRTABLE  DS    0F\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'808182838485868788898A8B8C8D8E8F'\n         DC    XL16'909192939495969798999A9B9C9D9E9F'\n         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         ORG   TRTABLE+C'_'\n         DC    C' '\n         ORG   ,\n         SPACE 3\n*\n*        LITERAL POOL.\n*\n         LTORG ,\n*\n*        GETMAINED WORK AREA TEMPLATE BEGINS HERE!\n*\nX        DS    0D\nSAVEAREA DS    18F\n*\nHEADING  DS    0CL133\n         DC    CL1'1'\nDATE     DS    CL8\n         DC    CL4' '\nTIME     DS    CL8\n         DC    CL23' '\n         DC    CL40'O M E G A M O N  SECURITY  AUDIT  REPORT'\n         DC    CL36' '\n         DC    CL5'PAGE '\nPAGE     DS    CL8\n*\nLINE1    DS    0CL133\n         DC    CL1'-'\n         DC    CL13' '\n         DC    CL6'JOB:  '\nJOBNAME  DS    CL8\n         DC    CL3'  ('\nJOBID    DS    CL8\n         DC    CL5')    '\nPRSTPNM  DS    CL8\n         DC    CL4' '\nSTPNM    DS    CL8\n         DC    CL6' '\n         DC    CL9'SYSTEM:  '\nSYSID    DS    CL4\n         DC    CL50' '\n*\nLINE2    DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL7'DATE:  '\nREPDATE  DS    CL8\n         DC    CL4' '\n         DC    CL7'TIME:  '\nREPTIME  DS    CL8\n         DC    CL4' '\n         DC    CL9'USERID:  '\nUSERID   DS    CL7\n         DC    CL4' '\n         DC    CL7'UNIT:  '\nUNIT     DS    CL8\n         DC    CL46' '\n*\nLINE3    DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL10'COMMAND:  '\nCOMMAND  DS    CL9\nASSOCMAJ DS    CL16\n         DC    CL6' '\n         DC    CL7'TYPE:  '\nCMTYPE   DS    CL15                                                 @03\n         DC    CL6' '\n         DC    CL14'DISPOSITION:  '\nDISP     DS    CL7\n         DC    CL29' '                                              @03\n*\nLINE4A   DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL31'COMMAND OUTPUT IMAGE (MAJOR)>  '\nAUXBUFF  DS    CL80\n         DC    CL8' '\n*\nLINE4B   DS    0CL133\n         DC    CL1' '\n         DC    CL13' '\n         DC    CL31'COMMAND INPUT IMAGE -------->  '\nPRMBUFF  DS    CL80\n         DC    CL8' '\n*\nLINE5    DS    0CL133\n         DC    CL1' '\n         DC    CL44' '\n         DC    CL10'....+....1'\n         DC    CL10'....+....2'\n         DC    CL10'....+....3'\n         DC    CL10'....+....4'\n         DC    CL10'....+....5'\n         DC    CL10'....+....6'\n         DC    CL10'....+....7'\n         DC    CL10'....+....8'\n         DC    CL8' '\n*\nBLANKS   DS    0CL133\n         DC    CL1' '\n         DC    CL132' '\n*\nERRORLN1 DS    0CL133                                               @02\n         DC    CL1'-'                                               @02\n         DC    CL13' '                                              @02\n         DC    CL16'*** WARNING *** '                               @02\n         DC    CL61'AN ERROR WAS DETECTED DURING THE PROCESSING OF RECOX\n               RD NUMBER '                                          @02\nRECNUM   DS    CL7                                                  @02\n         DC    CL3'.  '                                             @02\n         DC    CL32'POSSIBLE CAUSES ARE AS FOLLOWS: '               @02\n*\nERRORLN2 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL89'1)  INCORRECT SMF NUMBER SPECIFICATION IN EXTRACTIOX\n               N STEP OR IN OMEGAMON SECURITY UPDATE.'              @02\n         DC    CL14' '                                              @02\n*\nERRORLN3 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL76'2)  USE OF OMEGAMON''S SECURITY AUDIT SMF NUMBER BYX\n                ANOTHER APPLICATION.'                               @02\n         DC    CL27' '                                              @02\n*\nERRORLN4 DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL29' '                                              @02\n         DC    CL43'3)  CORRUPTION OF THE SYSTEM SMF DATA SETS.'    @02\n         DC    CL60' '                                              @02\n*\nTERMLN1  DS    0CL133                                               @02\n         DC    CL1'-'                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'RECORDS PROCESSED SUCCESSFULLY:  '              @02\nGOODNUM  DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nTERMLN2  DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'RECORDS PROCESSED IN ERROR:      '              @02\nBADNUM   DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nTERMLN3  DS    0CL133                                               @02\n         DC    CL1' '                                               @02\n         DC    CL45' '                                              @02\n         DC    CL33'TOTAL RECORDS PROCESSED:         '              @02\nTOTNUM   DS    CL7                                                  @02\n         DC    CL47' '                                              @02\n*\nMAJTAG   DS    0CL16\n         DC    CL11'  (MAJOR:  '\nMAJCMD   DS    CL4\n         DC    CL1')'\nLNCOUNT  DC    PL2'0'\nPGCOUNT  DC    PL8'0'\nPATTERN  DC    XL6'402020202120'\nTIMEWORK DS    XL10\nDATEWORK DS    D\nGREGDATE DS    0CL8\nMO       DS    CL2\n         DC    CL1'/'\nDA       DS    CL2\n         DC    CL1'/'\nYR       DS    CL2\nHHMMSS   DS    0CL8\nHH       DS    CL2\n         DC    CL1':'\nMM       DS    CL2\n         DC    CL1':'\nSS       DS    CL2\nMISCSW   DC    X'00'\nPGEJECT  EQU   X'80'\nERROR    EQU   X'40'                                                @02\nSPIEACT  EQU   X'20'                                                @02\nSPIESAVE DS    F                                                    @02\nTOTCNT   DC    F'0'                                                 @02\nGOODCNT  DC    F'0'                                                 @02\nBADCNT   DC    F'0'                                                 @02\nDOUBLE   DS    D                                                    @02\nOPENFI   OPEN  (0,,0),MF=L\nCLOSFI   CLOSE (0,,0),MF=L\nSTOP0C7  SPIE  ,,MF=L                                               @02\n*\n*        INPUT FILE DCB.\n*\nINDCB    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,RECFM=VBS,               X\n               LRECL=32767,BLKSIZE=4096,EODAD=P002000,BFTEK=A\n*\n*        OUTPUT FILE DCB.\n*\nOUTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBA,            X\n               LRECL=133,BLKSIZE=25*133\n*\n*        GETMAINED WORK AREA TEMPLATE ENDS HERE!\n*\nWORKSZ   EQU   *-X\n         SPACE 3\n*\n*        MAPPING MACROS AND DSECTS.\n*\n         DCBD  DEVD=DA,DSORG=PS          DCB MAPPING MACRO\n         DSECT\n         IFASMFR 0                       SMF COMMON HEADER\n         $CANHDR DSECT=YES               CANDLE COMMON HEADER\n         $AUDIT ,                        OMEGAMON/BASE SECURITY AUDIT\n         IHAPIE ,                        PROGRAM INTERRUPT ELEMENT  @02\n*\n*        STANDARD REGISTER EQUATES.\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         DROP  ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPFMACS": {"ttr": 10760, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         EJECT\n***********************************************************************\n*\n*  THIS IS A SET OF MACROS INTENDED TO REDUCE THE AMOUNT OF CODING\n*  REQUIRED FOR ISPF/PDF APPLICATIONS. THIS MEMBER SHOULD BE COPIED\n*  INTO YOUR PROGRAM.\n*\n*  MACROS INCLUDED ARE:\n*\n*   NAME        EXAMPLE\n*\n*  CONTROL      CONTROL  DISPLAY,SAVE\n*  DISPLAY      DISPLAY  PANEL-NAME,MESSAGE-NAME,CURSOR-FIELD\n*  PDFBROWS     PDFBROWS DSNAME,VOLSER\n*  PDFEDIT      PDFEDIT  DSNAME,VOLSER\n*  PQUERY       PQUERY   PLF2P2,ZDATA\n*  SELECT       SELECT   PANEL(ABC)\n*  SETMSG       SETMSG   MESSAGE-NAME\n*  TBADD        TBADD    TABLE-NAME\n*  TBBOTTOM     TBBOTTOM TABLE-NAME\n*  TBCLOSE      TBCLOSE  TABLE-NAME\n*  TBCREATE     TBCREATE TABLE-NAME,ENTRY1,ENTRY2,ENTRY3,ENTRY4\n*  TBDELETE     TBDELETE TABLE-NAME\n*  TBDISPL      TBDISPL  TABLE-NAME,PANEL-NAME,MESSAGE-NAME\n*  TBEND        TBEND    TABLE-NAME\n*  TBGET        TBGET    TABLE-NAME\n*  TBPUT        TBPUT    TABLE-NAME\n*  TBSKIP       TBSKIP   TABLE-NAME,AMTFLD\n*  TBTOP        TBTOP    TABLE-NAME\n*  TBVCLEAR     TBVCLEAR TABLE-NAME\n*  TLDSECT      TLDSECT\n*  VCOPY        VCOPY    FIELD-NAME,LENGTH,OUTPUT-FIELD,MODE\n*  VDEFINE      VDEFINE  FIELD-NAME,LENGTH\n*  VDELETE      VDELETE FIELD-NAME1,FIELD-NAME2,FIELD-NAME3,FIELD-NAME4\n*  VGET         VGET     FIELD-NAME\n*  VPUT         VPUT    FIELD-NAME1,FIELD-NAME2,FIELD-NAME3,FIELD-NAME4\n*  VREPLACE     VREPLACE VARIABLE-NAME,FULL-WORD-LENGTH,DATA-AREA\n*\n*\n*  NOTE THAT ALL SERVICE-NAMES AND VARIABLE NAMES ARE GENERATED AS\n*  LITERALS; THIS MAY AFFECT YOUR PLACEMENT OF \"LTORG\" STATEMENTS.\n*\n*\n*  NOTE ALSO THAT THE \"CALL\" MACRO EXPANSION INCLUDES \"MF=(E,ISPARMS)\",\n*  SO YOU MUST HAVE ISPARMS DEFINED AS A SET OF FULL-WORDS IN YOUR PGM.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*  CONTROL      UP TO 4 PARAMETERS ARE ALLOWED\n*\n***********************************************************************\n         MACRO\n&NAME    CONTROL &CTL1,&CTL2,&CTL3,&CTL4\n         AIF   ('&CTL4' EQ '').TCTL3\n         CALL  ISPLINK,                                                X\n               (=CL8'CONTROL',                                         X\n               =CL8'&CTL1',=CL8'&CTL2',=CL8'&CTL3',=CL8'&CTL4'),       X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TCTL3  ANOP\n         AIF   ('&CTL3' EQ '').TCTL2\n         CALL  ISPLINK,                                                X\n               (=CL8'CONTROL',                                         X\n               =CL8'&CTL1',=CL8'&CTL2',=CL8'&CTL3'),                   X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TCTL2  ANOP\n         AIF   ('&CTL2' EQ '').TCTL1\n         CALL  ISPLINK,                                                X\n               (=CL8'CONTROL',                                         X\n               =CL8'&CTL1',=CL8'&CTL2'),                               X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TCTL1  ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'CONTROL',                                         X\n               =CL8'&CTL1'),                                           X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  DISPLAY      THE FIRST PARAMETER IS PANEL-NAME. OPTIONAL PARAMETERS\n*               ARE MESSAGE-NAME AND CURSOR FIELD-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    DISPLAY &DPNL,&DMSG,&DCURS,&ENDKEY=NONE\n         AIF   ('&DCURS' EQ '').NOCURS\n         CALL  ISPLINK,                                                X\n               (=CL8'DISPLAY',                                         X\n               =CL8'&DPNL',=CL8'&DMSG',=CL8'&DCURS'),                  X\n               VL,MF=(E,ISPARMS)\n         AGO   .PF3\n.NOCURS ANOP\n         AIF   ('&DMSG' EQ '').NOMSG\n         CALL  ISPLINK,                                                X\n               (=CL8'DISPLAY',                                         X\n               =CL8'&DPNL',=CL8'&DMSG'),                               X\n               VL,MF=(E,ISPARMS)\n         AGO   .PF3\n.NOMSG  ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'DISPLAY',                                         X\n               =CL8'&DPNL'),                                           X\n               VL,MF=(E,ISPARMS)\n.PF3    ANOP\n         AIF   ('&ENDKEY' EQ 'NONE').ZZZ\n         LA    14,8       END KEY?\n         CR    15,14      END KEY?\n         BE    &ENDKEY\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  PDFBROWS     PARAMETERS ARE DSNAME AND VOLSER\n*\n***********************************************************************\n         MACRO\n&NAME    PDFBROWS &BDSN,&BVOL\n         AIF   ('&BVOL' EQ '').NOVOL\n         CALL  ISPLINK,                                                X\n               (=CL8'BROWSE',                                          X\n               &BDSN,&BVOL),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.NOVOL  ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'BROWSE',                                          X\n               &BDSN),                                                 X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  PDFEDIT      PARAMETERS ARE DSNAME AND VOLSER\n*\n***********************************************************************\n         MACRO\n&NAME    PDFEDIT &EDSN,&EVOL\n         AIF   ('&EVOL' EQ '').NOVOL\n         CALL  ISPLINK,                                                X\n               (=CL8'EDIT',                                            X\n               &EDSN,&EVOL),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.NOVOL  ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'EDIT',                                            X\n               &EDSN),                                                 X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  PQUERY       PARAMETERS ARE :\n*\n*               1. PANEL-NAME\n*               2. AREA-NAME\n* \"AREATYP\"     3. VARIABLE-NAME THAT WILL BE SET TO DYNAMIC OR GRAPHIC\n* \"COLS\"        4. VARIABLE-NAME THAT WILL BE SET TO AREA-WIDTH (COLS)\n* \"ROWS\"        5. VARIABLE-NAME THAT WILL BE SET TO AREA-LENGTH (ROWS)\n* \"TLROW\"       6. VARIABLE-NAME THAT WILL BE SET TO TOP LEFT ROW NUM\n* \"TLCOL\"       7. VARIABLE-NAME THAT WILL BE SET TO TOP LEFT COL NUM\n*\n*\n* BEFORE ISSUING \"PQUERY\", VDEFINES MUST BE DONE FOR 3 THROUGH 7.\n*\n*\n***********************************************************************\n         MACRO\n&NAME    PQUERY  &QPNL,&QAREA\n         CALL  ISPLINK,                                                X\n               (=CL8'PQUERY',                                          X\n               =CL8'&QPNL',=CL8'&QAREA',=CL8'AREATYP',                 X\n               =CL8'COLS',=CL8'ROWS',=CL8'TLROW',=CL8'TLCOL'),         X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  SELECT       UP TO 3 PARAMETERS\n*\n*\n***********************************************************************\n         MACRO\n&NAME    SELECT  &SELDAT1,&SELDAT2,&SELDAT3\n         CALL  ISPLINK,                                                X\n               (=CL8'SELECT',                                          X\n               =F'40',                                                 X\n               =CL40'&SELDAT1 &SELDAT2 &SELDAT3             '),        X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  SETMSG       THE ONLY PARAMETER IS MESSAGE-NAME\n*\n***********************************************************************\n         MACRO\n&NAME    SETMSG &MSG\n         CALL  ISPLINK,                                                X\n               (=CL8'SETMSG',                                          X\n               =CL8'&MSG'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBADD        THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBADD &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBADD',                                           X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBBOTTOM     THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBBOTTOM &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBBOTTOM',                                        X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBCLOSE      THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBCLOSE &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCLOSE',                                         X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBCLOSE      THE FIRST PARAMETER IS TABLE-NAME, FOLLOWED BY 1 TO 4\n*               VARIABLE NAMES. THE NAME LIST IS GENERATED AS A LITERAL\n*               WITH THE NAMES ENCLOSED IN PARENTHESES.\n*\n***********************************************************************\n         MACRO\n&NAME    TBCREATE &TABC,&EN1,&EN2,&EN3,&EN4,&EN5,&EN6,&KEY=()\n         AIF   ('&EN6' EQ '').TRY5\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1. &EN2. &EN3. &EN4. &EN5. &EN6)',               X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY5   ANOP\n         AIF   ('&EN5' EQ '').TRY4\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1. &EN2. &EN3. &EN4. &EN5.)',                    X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY4   ANOP\n         AIF   ('&EN4' EQ '').TRY3\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1. &EN2. &EN3. &EN4.)',                          X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY3   ANOP\n         AIF   ('&EN3' EQ '').TRY2\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1. &EN2. &EN3.)',                                X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY2   ANOP\n         AIF   ('&EN2' EQ '').TRY1\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1. &EN2.)',                                      X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY1   ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1.)',                                            X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBDELETE     THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBDELETE &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBDELETE',                                        X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBDISPL      THE FIRST PARAMETER IS TABLE-NAME. OPTIONAL PARAMETERS\n*               ARE PANEL-NAME AND MESSAGE-NUMBER.\n*\n***********************************************************************\n         MACRO\n&NAME    TBDISPL &TAB,&PAN,&MSG,&ENDKEY=NONE\n         AIF   ('&PAN' EQ '').NOPAN\n         AIF   ('&MSG' EQ '').CCC\n.BBB     ANOP\n         CALL  ISPLINK,(=CL8'TBDISPL',                                 X\n               =CL8'&TAB',=CL8'&PAN',=CL8'&MSG'),                      X\n               VL,MF=(E,ISPARMS)\n         AGO   .XXX\n.CCC     ANOP\n         CALL  ISPLINK,(=CL8'TBDISPL',=CL8'&TAB',=CL8'&PAN'),          X\n               VL,MF=(E,ISPARMS)\n         AGO   .XXX\n.NOPAN   ANOP\n         CALL  ISPLINK,(=CL8'TBDISPL',=CL8'&TAB'),                     X\n               VL,MF=(E,ISPARMS)\n         AGO   .XXX\n.XXX     ANOP\n         AIF   ('&ENDKEY' EQ 'NONE').ZZZ\n         LA    14,8       END KEY?\n         CR    15,14      END KEY?\n         BE    &ENDKEY\n.ZZZ     ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBEND        THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBEND &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBEND',                                           X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBGET        THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBGET &TABG\n         CALL  ISPLINK,                                                X\n               (=CL8'TBGET',                                           X\n               =CL8'&TABG'),                                           X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBBUT        THE FIRST PARAMETER IS TABLE-NAME, THE SECOND IS\n*               VARIABLE-NAME, GENERATED IN NAME-LIST FORMAT.\n*\n***********************************************************************\n         MACRO\n&NAME    TBPUT &TABP,&PNAME\n         CALL  ISPLINK,                                                X\n               (=CL8'TBPUT',                                           X\n               =CL8'&TABP',,=CL10'(&PNAME)'),                          X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBSKIP       PARAMETERS ARE TABLE-NAME AND AMOUNT FIELD\n*\n***********************************************************************\n         MACRO\n&NAME    TBSKIP &TABSK,&AMTFLD\n         CALL  ISPLINK,                                                X\n               (=CL8'TBSKIP',                                          X\n               =CL8'&TABSK',&AMTFLD),                                  X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBTOP        THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBTOP &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBTOP',                                           X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBVCLEAR     THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBVCLEAR &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBVCLEAR',                                        X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TLDSECT      NO PARAMETERS, JUST PROVIDES THE ISPF/PDF TLD\n*\n***********************************************************************\n         MACRO\n         TLDSECT\n*                      ISPF/PDF  TERMINAL DATA CONTROL BLOCK\nTLDSECT  DSECT\n         DS    CL4        EYE-CATCHER \"TLD0\" (OR TLD1, ETC)\n         DS    4F\nTHISTLD  DS    F           THIS TLD POINTER\n         DS    7F\nSPFSUBPT DS    F           SPF SUBS POINTER\n         DS    10F\nSPFSCRN  DS    F           ADDRESS OF LOGICAL SCREEN\n         DS    11F\nSPFFUNC  DS    0XL8\nSPFFUNC1 DS    X\nSPFFUNC2 DS    X\nHELP     EQU   X'10'        PF1 = HELP\nRETURN   EQU   X'08'        PF3 = END\nSPFFUNC3 DS    X\nENDKEY   EQU   X'80'        PF3 = END\nSPFFUNC4 DS    X                   SCROLL KEY BYTE\nENTER    EQU   X'00'        ENTER\nFIND     EQU   X'08'        PF5 = FIND\nCHANGE   EQU   X'04'        PF6 = CHANGE\nUP       EQU   X'80'        PF7 = SCROLL UP\nDOWN     EQU   X'40'        PF8 = SCROLL DOWN\nLEFT     EQU   X'10'        PF10= SCROLL LEFT\nRIGHT    EQU   X'20'        PF11= SCROLL RIGHT\n         DS    XL4\nSPFENABL DS    XL8                 ENABLE FUNCTIONS BITS\n         DS    F\nSPFCURSR DS    F                   RELATIVE CURSOR POSITION\n         DS    2F\nSPFGTSIZ DS    F                   MAXIMUN SCREEN SIZE\nSPFMAXLN DS    F                   MAXIMUM NUMBER OF LINES ON TERMINAL\nSPFMXLEN DS    F                   MAXIMUN LINE WIDTH ON TERMINAL\nSPFDLINE DS    F                   CURRENT NUMBER OF LINES FOR SPFDISP\nSPFDLLEN DS    F                   CURRENT LINE WIDTH FOR SPFDISP\n         DS    2F\nSPFSPLIT DS    F                   MAX LINES IF IN SPLIT SCREEN\n         DS    11F\nSPFSCROL DS    F                   SCROLL INPUT BYTE POINTER\nSPFAPPID DS    CL8                 APP KEYWORD FOR SAVING\n         DS    3F\nSPFPREQ  DS    X                   REQUEST BITS\n         DS    3X\n         DS    X\nSPFPSTAT DS    X                   STATUS FLAGS\n         DS    2X\n         DS    19F\nSPFHELP  DS    CL8                 HELP MENU NAME\n*\n*                         FIELD ATTRIBUTE BYTES FOR SPF DISPLAY\n*\nATTRONON EQU   X'04'               OUTPUT NON-DISPLAY\nATTROLOW EQU   X'05'               OUTPUT LOW INTENSITY\nATTROHI  EQU   X'07'               OUTPUT HIGH INTENSITY\nATTRIAN  EQU   X'10'               INPUT ASIS NON-DISPLAY\nATTRIAL  EQU   X'11'               INPUT ASIS LOW INTENSITY\nATTRIAH  EQU   X'13'               INPUT ASIS HIGH INTENSITY\nATTRICN  EQU   X'1C'               INPUT CAPS (BLANK-PAD) NON-DISPLAY\nATTRICL  EQU   X'1D'               INPUT CAPS (BLANK-PAD) LOW INTENSITY\nATTRICH  EQU   X'1F'               INPUT CAPS (BLANK-PAD) HIGH INT\n*\nSPFSUBRS DSECT\n         DS    24F\nSPFDISPL DS    F                   ISPF/PDF DISPLAY ROUTINE\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VCOPY        PARAMETERS ARE FIELD-NAME, LENGTH, OUTPUT FIELD-NAME,\n*               AND MODE.\n*\n***********************************************************************\n         MACRO\n&NAME    VCOPY &ZFLD,&LEN,&OFLD,&MODE\n         AIF   ('&MODE' EQ '').MOVE\n         CALL  ISPLINK,(=CL8'VCOPY',                                   X\n               =CL10'(&ZFLD)',&LEN,&OFLD,=CL8'&MODE'),                 X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.MOVE   ANOP\n         CALL  ISPLINK,(=CL8'VCOPY',                                   X\n               =CL10'(&ZFLD)',&LEN,&OFLD,=CL8'MOVE'),                  X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VDEFINE      PARAMETERS ARE FIELD-NAME AND LENGTH. THE FIELD-NAME\n*               MUST MATCH THE NAME CODED ON A PANEL, AND MUST BE\n*               DEFINED AS A DATA AREA IN YOUR PROGRAM.\n*\n*               FOR EXAMPLE:\n*\n*                       VDEFINE ENTRYNM,8\n*                       .\n*                       .\n*                       .\n*                       .\n*               ENTRYNM DS    CL8\n*\n***********************************************************************\n         MACRO\n&NAME    VDEFINE &FLD,&LEN,&FMT=CHAR,&OPT=\n         AIF   ('&OPT' EQ '').NOOPT\n         CALL  ISPLINK,(=CL8'VDEFINE',                                 X\n               =CL10'(&FLD)',&FLD,=CL8'&FMT',=F'&LEN.',                X\n               =CL10'(&OPT)'),                                         X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.NOOPT  ANOP\n         CALL  ISPLINK,(=CL8'VDEFINE',                                 X\n               =CL10'(&FLD)',&FLD,=CL8'&FMT',=F'&LEN.'),               X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VDELETE      PARAMETERS ARE 1 TO 4 VARIABLE-NAMES. THESE ARE\n*               GENERATED IN NAME-LIST FORMAT IN THE LITERAL POOL.\n*\n***********************************************************************\n         MACRO\n&NAME    VDELETE &VD1,&VD2,&VD3,&VD4\n         AIF   ('&VD4' EQ '').TRY3\n         CALL  ISPLINK,                                                X\n               (=CL8'VDELETE',                                         X\n               =C'(&VD1. &VD2. &VD3. &VD4.)'),                         X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY3   ANOP\n         AIF   ('&VD3' EQ '').TRY2\n         CALL  ISPLINK,                                                X\n               (=CL8'VDELETE',                                         X\n               =C'(&VD1. &VD2. &VD3.)'),                               X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY2   ANOP\n         AIF   ('&VD2' EQ '').TRY1\n         CALL  ISPLINK,                                                X\n               (=CL8'VDELETE',                                         X\n               =C'(&VD1. &VD2.)'),                                     X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY1   ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'VDELETE',                                         X\n               =C'(&VD1.)'),                                           X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VGET         THE ONLY PARAMETER IS VARIABLE-NAME. THIS MUST HAVE\n*               BEEN PREVIOUSLY DEFINED BY A \"VDEFINE\" MACRO.\n*\n***********************************************************************\n         MACRO\n&NAME    VGET &FLD,&POOL=PROFILE\n         CALL  ISPLINK,(=CL8'VGET',                                    X\n               =CL10'(&FLD)',=CL8'&POOL'),                             X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VPUT         PARAMETERS ARE 1 TO 4 VARIABLE-NAMES. THEY MUST HAVE\n*               BEEN PREVIOUSLY DEFINED BY A \"VDEFINE\" MACRO.\n*\n***********************************************************************\n         MACRO\n&NAME    VPUT  &VP1,&VP2,&VP3,&VP4,&POOL=PROFILE\n         AIF   ('&VP4' EQ '').TRY3\n         CALL  ISPLINK,                                                X\n               (=CL8'VPUT',                                            X\n               =C'(&VP1. &VP2. &VP3. &VP4.)',                          X\n               =CL8'&POOL'),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY3   ANOP\n         AIF   ('&VP3' EQ '').TRY2\n         CALL  ISPLINK,                                                X\n               (=CL8'VPUT',                                            X\n               =C'(&VP1. &VP2. &VP3.)',                                X\n               =CL8'&POOL'),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY2   ANOP\n         AIF   ('&VP2' EQ '').TRY1\n         CALL  ISPLINK,                                                X\n               (=CL8'VPUT',                                            X\n               =C'(&VP1. &VP2.)',                                      X\n               =CL8'&POOL'),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY1   ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'VPUT',                                            X\n               =C'(&VP1.)',                                            X\n               =CL8'&POOL'),                                           X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VREPLACE     THE FIRST PARAMETER IS VARIABLE-NAME, SECOND A FULLWORD\n*               LENGTH, THIRD THE DATA.\n*\n***********************************************************************\n         MACRO\n&NAME    VREPLACE &FLD,&LEN,&DATA\n         CALL  ISPLINK,(=CL8'VREPLACE',                                X\n               =CL10'(&FLD)',&LEN,&DATA),                              X\n               VL,MF=(E,ISPARMS)\n         MEND\n         MACRO\n&NAME    LMINIT &DATAID,&DDNAME\n         CALL  ISPLINK,(=CL8'LMINIT',&DATAID,&DDNAME),                 +\n               VL,MF=(E,ISPARMS)\n         MEND\n         MACRO\n&NAME    LMBROWSE &DATAID\n         CALL  ISPLINK,                                                X\n               (=CL8'BROWSE',=CL8' ',=CL8' ',=CL8' ',=CL8' ',          X\n               &DATAID),                                               X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SS": {"ttr": 11017, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x96(/\\x00\\x96(/\\x161\\x00\\xe6\\x00\\xe6\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-10-08T00:00:00", "modifydate": "1996-10-08T16:31:00", "lines": 230, "newlines": 230, "modlines": 0, "user": "SYS0015"}, "text": "//SYS0015A JOB (A,RESYS,CIC,00),'CHRIS',\n//             CLASS=A,\n//             MSGCLASS=V,\n//             NOTIFY=SYS0015\n//******** *\n//ASM      EXEC PGM=IEV90,REGION=4M,PARM='DECK,NOOBJECT,LIST,NOALIGN'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.MACLIB2,DISP=SHR\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(1700,(400,400))\n//SYSPUNCH DD  DSN=&&LOADSET,UNIT=SYSDA,DISP=(,PASS),\n//             SPACE=(400,(100,100,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD *\nPTLMAC01 ENTER BASE=(12),AUTH='CHRIS OPPERMAN',DATEW='1996-08-26',     *\n               FUNC='REPORT NEXT-FORM CHAIN'\nGETPARM  DS    0H\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         LA    R2,2(,R2)\n         MVC   BLDLMEM(8),0(R2)\n         MVC   STRTMEM(8),0(R2)\nOPENIT   DS    0H\n         OPEN  (PDSINP01,(INPUT))\n         OPEN  (REPORT,(OUTPUT))\n         MVC   OUTPREC(18),=C' PTLMAC01 ENTERED.'\n         PUT   REPORT,OUTPREC\n*\n         LA    R8,MEMTABLE\n         ST    R8,R8POINTR\n         MVI   FRSTTIME,C'1'\nSTRTPROC DS    0H\n         BAL   R11,CHECKMEM\n         BAL   R11,FINDMEM\nREADBLK  DS    0H\n         BAL   R11,READMEM\n         BAL   R11,SCANBLK\n         B     READBLK\n*\nEOFPDS   DS    0H\n         CLI   FRSTTIME,C'1'\n         BNE   BLDCHAIN\n         LA    R3,MEMTABLE\n         MVI   FRSTTIME,C'0'\n         B     BLDCHAIN\nBLDCHAIN DS    0H\n         CLC   0(8,R3),=C'########'\n         BE    PRTCHAIN\n         MVC   BLDLMEM(8),0(R3)\n         OC    BLDLMEM(8),UCMASK\n         L     R8,8(R3)\n         LA    R3,12(,R3)\n         B     STRTPROC\nPRTCHAIN DS    0H\n         LA    R9,OUTPREC+1\n         MVC   0(8,R9),STRTMEM\n         LA    R9,8(,R9)\n         LA    R3,MEMTABLE\nPRTLOOP1 DS    0H\n         MVC   0(8,R9),0(R3)\n         L     R3,8(R3)\n         LA    R9,8(,R9)\n         PUT   REPORT,OUTPREC\n         B     PRTLOOP1\nEXITRC   DS    0H\n         CLOSE (PDSINP01)\n         CLOSE (REPORT)\n         EXIT  RC=(15)\n* ------------------------------------------------------------------\nCHECKMEM DS    0H\n         MVC   NXMEMMSG+9(8),BLDLMEM\n         XC    OUTPREC,OUTPREC\n         MVC   OUTPREC(35),NXMEMMSG\n         PUT   REPORT,OUTPREC\n         XC    OUTPREC,OUTPREC\n*        WTO   TEXT=(NXMEMMSG,C)\n         BLDL  PDSINP01,BLDLLST\n         LTR   R15,R15\n         BZR   R11\n         MVC   NOMEMMSG+9(8),BLDLMEM\n         WTO   TEXT=(NOMEMMSG,C)\n         B     EXITRC\n* ------------------------------------------------------------------\nFINDMEM  DS    0H\n         FIND  PDSINP01,BLDLMEM,D\n         LTR   R15,R15\n         BZR   R11\n         WTO   ' START OF MEMBER NOT FOUND.'\n         B     EXITRC\n* ------------------------------------------------------------------\nSCANBLK  DS    0H\n         LH    R4,INAREA                     .LENGTH OF BLOCK\n         LA    R6,INAREA\n*        GET A SOLUTION FOR 'NO CALL' CONDITION\n*        MVC   0(8,R8),BLDLMEM\n*        LA    R8,8(,R8)\nSCANNXT  DS    0H\n         CLC   0(9,R6),NEWFRMUC\n         BE    MEMBUILD\n         CLC   0(9,R6),NEWFRMLC\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTU\n         BE    MEMBUILD\n         CLC   0(5,R6),CALLTXTL\n         BE    MEMBUILD\n         LA    R6,1(,R6)\n         BCT   R4,SCANNXT\n         BR    R11\n*\nMEMBUILD DS    0H\n         CLI   0(R6),X'7D'                     .START QUOTE\n         BE    MEMFOUND\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         B     MEMBUILD\nMEMFOUND DS    0H\n         MVI   FOUNDIND,C'1'\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         LA    R7,8\nMEMSCAN  DS    0H\n         CLI   0(R6),X'7D'                      .END QUOTE\n         BE    MEMEND\n         MVC   0(1,R8),0(R6)\n         LA    R8,1(,R8)\nMEMSTEP  DS    0H\n         LA    R6,1(,R6)\n         BCTR  R4,0\n         BCTR  R7,0\n         B     MEMSCAN\nMEMEND   DS    0H\n         EX    R7,MOVBLANK\n         LA    R8,0(R7,R8)\n         STORAGE OBTAIN,LENGTH=MEMTABLN,ADDR=(R5),LOC=RES\n         ST    R5,0(R8)\n         MVI   0(R5),C'#'\n         MVC   1(MEMTABLN-1,R5),0(R5)\n         LA    R8,4(,R8)\n         B     SCANNXT\n* ------------------------------------------------------------------\nREADMEM  DS    0H\n         MVI   FOUNDIND,C'0'\n         READ  DECB01,SF,PDSINP01,INAREA,'S'\n         CHECK DECB01,DSORG=ALL\n         BR    R11\n* -------------------------------------------------------------------\nLOADTST  DS    0H\n         LOAD  EP=PTLMAC01,LOADPT=PGMADDR\n         MVC   CALLMEM(8),BLDLMEM\n         LA    R1,CALLPARM\n         L     R15,PGMADDR\n*        DC    H'0'\n         BALR  R14,R15\n         DELETE EP=PTLMAC01\n         B     EXITRC\n* -------------------------------------------------------------------\nMOVBLANK MVC   0(0,R8),BLANK\n*\n* -------------------------------------------------------------------\n*              STORAGE AREAS\n* -------------------------------------------------------------------\n*\nBLDLLST  DC    H'1'\n         DC    H'18'\nBLDLMEM  DC    CL8'TSTMEM  '\n         DC    10CL1'1'\n*\nR8POINTR DS    F\nPGMADDR  DS    A\n*\n         DS    0F\nCALLPARM DC    AL4(CALLLEN)\nCALLLEN  DC    H'8'\nCALLMEM  DS    CL8\n*\nFRSTTIME DC    CL1'1'\nFOUNDIND DC    CL1'0'\nSTRTMEM  DC    8CL1' '\nPREVMEM  DC    8CL1' '\nBLANK    DC    CL8'        '\nUCMASK   DC    8XL1'40'\nOUTPREC  DS    CL133\n*\nCALLTXTU DC    CL5'CALL('\nCALLTXTL DC    XL5'838193934D'\nNEWFRMUC DC    CL9'NEW_FORM('\nNEWFRMLC DC    XL9'9585A66D869699944D'\nCALLQRYU DC    CL11'CALL_QUERY('\nCALLQRYL DC    XL11'838193936D98A48599A84D'\nNOMEMMSG DC    CL35'  MEMBER XXXXXXXX NOT FOUND.       '\nNXMEMMSG DC    CL35'  MEMBER XXXXXXXX TO BE FOUND.     '\nEQMEMMSG DC    CL35'  MEMBER XXXXXXXX EQ START XXXXXXXX '\n         DS    0F\nMEMTABLE DC    30CL12'############'      30*(8+4) (30X (MEM + POINTER)\nMEMTABLN EQU   30*12\n         LTORG\n* -------------------------------------------------------------------\n*              DCB' S\n* -------------------------------------------------------------------\nPDSINP01 DCB   MACRF=(R),DSORG=PO,RECFM=VB,LRECL=250,BLKSIZE=18254,    *\n               DDNAME=PDSINP01,EODAD=EOFPDS\nREPORT   DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=1330,   *\n               DDNAME=PRINTER\n*\nINAREA   DC    18254CL1' '\n         END\n/*\n//*\n//LKED     EXEC PGM=IEWL,REGION=4M,COND=(4,LT,ASM),\n//             PARM='LIST,LET,XREF'\n//SYSLIB   DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSLMOD  DD  DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,DCB=BLKSIZE=1024,SPACE=(1024,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY PTLMAC01\n NAME PTLMAC01(R)\n/*\n//*\n//PTLMAC01 EXEC PGM=PTLMAC01,PARM='CHR1    ',COND=(0,NE)\n//STEPLIB  DD   DSN=SYS2005.PRDA.LIB.LOAD2,DISP=SHR\n//PDSINP01 DD   DSN=SYS0015.TEST.INP,DISP=SHR\n//PRINTER  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSUDUMP DD   SYSOUT=*\n//SYSIN    DD   DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STRING": {"ttr": 11268, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*/IBMUSERM JOB (ACCT#),STRING,\n*/ NOTIFY=&SYSUID,\n*/ CLASS=A,MSGCLASS=X,COND=(0,NE)\n*/ASMH EXEC PGM=IEV90,PARM=(OBJECT,NODECK,NOESD,NORLD,\n*/ NOXREF)\n***********************************************************************\n*                                                                     *\n* MACRO NAME = STRING                                                 *\n*                                                                     *\n* DESCRIPTIVE NAME = STRING MACRO INSTRUCTION.                        *\n*                                                                     *\n* FUNCTION = PROVIDE CAPABILITIES SIMILAR TO PUT EDIT (OF PL/I)       *\n*            OR STRING (OF COBOL) TO ASSEMBLER PROGRAMS.              *\n*                                                                     *\n* STATUS = R503                                                       *\n*                                                                     *\n* AUTHOR = GILBERT SAINT-FLOUR                                        *\n*                                                                     *\n* ENVIRONMENT = SEE BELOW                                             *\n*                                                                     *\n*     AMODE = ANY                                                     *\n*     SCP   = MVS/ESA OR OS/390                                       *\n*     KEY   = ANY                                                     *\n*     MODE  = ANY                                                     *\n*     APF   = OFF                                                     *\n*                                                                     *\n* OPERATION = SEE DOCUMENTATION AT THE END OF THIS FILE               *\n*                                                                     *\n* INVOCATION = SEE DOCUMENTATION AT THE END OF THIS FILE              *\n*                                                                     *\n* NOTES = SEE DOCUMENTATION AT THE END OF THIS FILE                   *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*  $301  FIX BUGS WITH (XYZ,,L8) AND INTO=((R1),(R2))                 *\n*  $302  GENERATE $DEBUG BOOT-STRAP IN FINAL_CALL INVOCATION          *\n*  $303  REPLACE @STRPAD WITH @STRBLANKS                              *\n*  $304  USE @00-@15 INSTEAD OF R0-R15 FOR REGISTER EQUATES           *\n*  $306  TAILOR @STRING CSECT TO PROGRAM'S REQUIREMENTS               *\n*        LITERALS CAN BE CODED AS 'ABC' OR C'ABC' OR X'C1C2C3'        *\n*        USE L'PSATOLD AS IMPLICIT LENGTH FOR (PSATOLD-PSA,,X)        *\n*  $307  FINAL_CALL OPTION CHANGED TO GENERATE                        *\n*        ADD NOCSECT AND LOCTR OPTIONS TO GENERATE CALL               *\n*  $308  USE L'RBCDE AS IMPLICIT LENGTH FOR (PRB.RBCDE,,X)            *\n*        PREVENT S0C4 WHEN ADDR IS BAD AND LENGTH IS ZERO             *\n*  $400  REORG THE CODE TO SIMPLIFY FEATURE SELECTION                 *\n*        BLANKS NO LONGER USED OR GENERATED                           *\n*  $401  GENERATE @STRHEXT WHEN ((REG),,X) ONLY HEX FIELD             *\n*  $502  @STRING ROUTINE REWRITTEN FOR MVS/ESA:                       *\n*        -  USE LINKAGE STACK TO STORE CALLER'S REGISTERS             *\n*        -  ADD SUPPORT FOR AR MODE                                   *\n*  $503  DATE CONVERSION TO YYYY-MM-DD FORMAT (ISO STANDARD)          *\n*        IMPROVE SUPPORT FOR AR MODE                                  *\n***********************************************************************\n         MACRO\n&NAME    STRING &INTO=,&PRINT=NOGEN\n         GBLC  &STRING_MACRO_VERSION\n&STRING_MACRO_VERSION SETC '503'       current version\n         AIF   ('&PRINT' EQ 'NOGEN').NOGEN\n         PUSH  PRINT\n         PRINT GEN\n.NOGEN   GBLA  &$_LIT\n         GBLB  &$_FEAT(16)             FEATURES\n.*                                       1 LITERALS\n.*                                       2 REGISTER (BIN)\n.*                                       3 REGISTER (HEX)\n.*                                       4 PACKED\n.*                                       5 JDATE\n.*                                       6 BINARY\n.*                                       7 HEX\n.*                                       8 NUMERIC\n.*                                       9 LEFT JUST (NUMERIC)\n.*                                       10 LEADING ZEROES\n.*                                       11 TRUNCATE (CHAR STRING)\n.*                                       12 %TIME\n         GBLC  &$_LITS(9999)           LITERALS\n         LCLA  &I,&J,&N\n         AIF   (N'&SYSLIST EQ 1 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'FULL' AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'LOCTR' AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'NOCSECT' AND T'&INTO EQ 'O').GENL\n&LABEL   SETC  'IHB&SYSNDX'            STEM FOR LOCAL LABELS\n&LQ      SETC  'L'''                   LENGTH ATTRIBUTE\n&STR     SETC  '  R&STRING_MACRO_VERSION'\n&NAME    BAS   R14,$STRING&STR         CALL @STRING SUB-ROUTINE\n         AIF   (N'&SYSLIST EQ 0).ERR1  NO POSITIONAL OPERANDS, ERROR\n         AIF   (T'&INTO EQ 'O').ERR2   NO RECEIVING FIELD, ERROR\n         AIF   (N'&INTO GT 2).ERR2     INTO=(A,32,BLURB)\n         DC    AL2(&LABEL.P-*)         OFFSET TO FIELD DESCRIPTORS\n         AIF   (D'$LITERAL).LOCTR2     NOT FIRST TIME, JUMP\n$LTORG   LOCTR                         ADDRESSABLE CONSTANTS\n$FARRTNE LOCTR                         FAR ROUTINES\n.LOCTR2  ANOP\n$LITERAL LOCTR                         NON-ADDRESSABLE CONSTANTS\n&TO1     SETC  '&INTO(1)'\n&TO2     SETC  '&LQ&INTO'\n         AIF   (N'&INTO EQ 1).PUNTO8            JUMP IF INTO=XXX\n         AIF   ('&INTO(1)'(1,1) NE '(').PUNTO3  JUMP IF INTO=(XXX,44)\n&TO1     SETC  '0&INTO(1)'                              INTO=((R3),44)\n.PUNTO3  ANOP\n&TO2     SETC  '&INTO(2)'                               INTO=(XXX,LL)\n         AIF   ('&INTO(2)'(1,1) NE '(').PUNTO8  JUMP IF INTO=(XXX,44)\n&TO2     SETC  '0&INTO(2)'                              INTO=(XXX,(R1))\n.PUNTO8  ANOP\n&LABEL.P DC    S(&TO1,&TO2)\n.*--------------------------------------------------------------------*\n.*-------      FIELDS       ------------------------------------------*\n.*--------------------------------------------------------------------*\n         LCLB  &LAST,&BIN,&HEX,&REG,&PACKED,&LEFT,&ZERO,&TRUNC\n&I       SETA  1\n.*LOOP\n.LOOP1   ANOP\n         AIF   (N'&SYSLIST(&I) GT 3).FLD990   TOO MANY SUB-OPERANDS\n&LAST    SETB  (&I EQ N'&SYSLIST)                LOOP\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').LIT00\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').LIT01\n.*--------------------------------------------------------------------*\n.*       PROCESS FIRST SUBPARAMETER (ADDRESS)                         *\n.*--------------------------------------------------------------------*\n&P1S     SETC  '&SYSLIST(&I,1)'\n&P2L     SETC  '0'                     INPUT LENGTH\n&P3L     SETC  '0'                     OUTPUT LENGTH\n         AIF   ('&SYSLIST(&I)'(1,1) GE '0').FLD180 SPACES\n         AIF   ('&SYSLIST(&I)' EQ '%TIME').FLD190 %TIME\n         AIF   ('&SYSLIST(&I,1)'(1,1) NE '(').FLD115 (R2)\n         AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD250\n&P1S     SETC  '0&SYSLIST(&I,1)'       CHANGE (R1) TO 0(R1)\n.FLD115  ANOP\n.*\n.*       EXTRACT RBCDE FROM PRB.RBCDE (HLASM)\n.*\n&L       SETA  1\n.*--LOOP\n.FLD131  AIF   ('&P1S'(&L,1) EQ '.').FLD133\n&L       SETA  &L+1\n         AIF   (&L LT K'&P1S).FLD131\n.*--ENDLOOP\n&P2L     SETC  '&P1S'                    ABCDEF FROM ABCDEF\n         AGO   .FLD134\n.FLD133  ANOP\n&P2L     SETC  '&P1S'(&L+1,K'&P1S-&L)    RBCDE FROM PRB.RBCDE\n.FLD134  ANOP\n.*\n         AIF   (T'&SYSLIST(&I,2) NE 'O').FLD200\n.*\n         AIF   (NOT D'&P2L).FLD140\n&P2C     SETC  T'&P2L\n.*MNOTE *,'&P1 &P2C'\n         AIF   ('&P2C' EQ 'F' OR '&P2C' EQ 'H' OR '&P2C' EQ 'P').FLD220\n         AIF   ('&P2C' EQ 'G').FLD210  FL2\n.FLD140  ANOP\n.*\n.*       EXTRACT PSATOLD FROM PSATOLD-PSA\n.*\n&L       SETA  1\n.*--LOOP\n.FLD141  AIF   ('&P2L'(&L,1) EQ '-').FLD143\n         AIF   ('&P2L'(&L,1) EQ '+').FLD143\n&L       SETA  &L+1\n         AIF   (&L LT K'&P2L).FLD141\n.*--ENDLOOP\n&P2L     SETC  '&LQ&P2L'               L'ABCDEF\n         AGO   .FLD300\n.FLD143  ANOP\n&P2L     SETC  '&LQ'.'&P2L'(1,&L-1)    L'PSATOLD FROM PSATOLD-PSA\n         AGO   .FLD300\n.*\n.FLD180  AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) NE 'X').FLD800\n&P2L     SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1) 12\n&J       SETA  X'4000'+&LAST*X'8000'\n         DC    AL2(0,&P2L,&J)          BLANKS\n&$_FEAT(1) SETB 1                      LITERAL\n         AGO   .LIT99\n.*\n.FLD190  ANOP                          %TIME\n&P1S     SETC  '1(14)'                 %TIME\n&$_FEAT(12) SETB 1                     %TIME\n         AGO   .FLD800\n.*--------------------------------------------------------------------*\n.*       PROCESS SECOND SUBPARAMETER (LENGTH/TYPE)                    *\n.*--------------------------------------------------------------------*\n.FLD200  AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD300 NO LENGTH SPECIFIED\n&P2C     SETC  '&SYSLIST(&I,2)'\n         AGO   .FLD220\n.*T'&P1=G\n.FLD210  ANOP\n&L       SETA  L'&SYSLIST(&I)          T'&P1 = 'G'\n&P2C     SETC  'FL&L'                  T'&P1 = 'G'\n.*\n.FLD220  ANOP\n&P2L     SETC  '0&P2C'                 (R2) LENGTH\n         AIF   ('&P2C'(1,1) EQ '(').FLD300\n&P2L     SETC  '&P2C'                  3(R2) LENGTH\n         AIF   ('&P2C'(K'&P2C,1) EQ ')').FLD300\n&P2L     SETC  '0'\n&PACKED  SETB  ('&P2C' EQ 'P')\n         AIF   (&PACKED).FLD300\n&P2L     SETC  '1'\n         AIF   ('&P2C' EQ 'FL1').FLD240\n&P2L     SETC  '3'\n         AIF   ('&P2C' EQ 'FL2' OR '&P2C' EQ 'H').FLD240\n&P2L     SETC  '7'\n         AIF   ('&P2C' EQ 'FL3').FLD240\n&P2L     SETC  '15'\n         AIF   ('&P2C' EQ 'F').FLD240\n&P2L     SETC  '&P2C'                  IMMEDIATE LENGTH, FIELD\n         AGO   .FLD300\n.*\n.FLD240  ANOP                          BINARY VARIABLE\n&BIN     SETB  1\n         AGO   .FLD300\n.*\n.FLD250  ANOP                          REGISTER CONTENT\n&REG     SETB  1\n.*--------------------------------------------------------------------*\n.*       PROCESS THIRD SUBPARAMETER (OUTPUT FORMAT)                   *\n.*--------------------------------------------------------------------*\n.FLD300  AIF   (T'&SYSLIST(&I,3) EQ 'O').FLD800\n&HEX     SETB  ('&SYSLIST(&I,3)' EQ 'X') HEXADECIMAL\n&TRUNC   SETB  ('&SYSLIST(&I,3)' EQ 'T') TRUNCATE\n         AIF   (&HEX OR &TRUNC).FLD800\n.*\n&P3C     SETC  '&SYSLIST(&I,3)'\n&P3L     SETC  '248'\n         AIF   ('&P3C' EQ 'YYYY-MM-DD' AND &PACKED).FLD308\n&P3L     SETC  '249'\n         AIF   ('&P3C' EQ 'YYYYMMDD' AND &PACKED).FLD308\n&P3L     SETC  '250'\n         AIF   ('&P3C' EQ 'YY/MM/DD' AND &PACKED).FLD308\n&P3L     SETC  '251'\n         AIF   ('&P3C' EQ 'DD/MM/YY' AND &PACKED).FLD308\n&P3L     SETC  '252'\n         AIF   ('&P3C' EQ 'MM/DD/YY' AND &PACKED).FLD308\n&P3L     SETC  '253'\n         AIF   ('&P3C' EQ 'YYMMDD'   AND &PACKED).FLD308\n&P3L     SETC  '0'\n         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD310\n         MNOTE 8,'EDIT PATTERN NOT ALLOWED WITH CHARACTER STRING'\n         AGO   .FLD310\n.FLD308  ANOP\n&$_FEAT(5) SETB 1                      JDATE\n         AGO   .FLD800\n.*--LOOP\n.FLD310  AIF   ('&P3C'(1,1) EQ 'R').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) EQ 'B').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) NE 'L').FLD311\n&LEFT    SETB  1\n         AGO   .FLD318\n.FLD311  AIF   ('&P3C'(1,1) NE 'Z').FLD312\n&ZERO    SETB  1\n         AGO   .FLD318\n.FLD312  AIF   ('&P3C'(1,1) LT '0').FLD993\n&P3L     SETC  '&P3L'.'&P3C'(1,1)\n.FLD318  ANOP\n.*MNOTE *,'&SYSLIST(&I) P3C=/&P3C/ P3L=/&P3L/'\n&P3C     SETC  '&P3C'(2,K'&P3C-1)     STRIP OFF FIRST CHARACTER\n         AIF   (K'&P3C GT 0).FLD310\n.*--ENDLOOP\n.*--------------------------------------------------------------------*\n.FLD800  ANOP\n&NUMERIC SETB  (&BIN OR &PACKED OR (&REG AND NOT &HEX))\n&TRUNC   SETB  (&TRUNC OR (&LEFT AND NOT &NUMERIC))\n&LEFT    SETB  (&LEFT AND &NUMERIC)\n         AIF   (NOT &NUMERIC).FLD810\n         AIF   (&LEFT OR '&P3L' NE '0').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH ((R3))\n         AIF   (&REG).FLD810\n&P3L     SETC  '3'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'FL1').FLD810\n&P3L     SETC  '5'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'H' OR '&P2C' EQ 'FL2').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH\n.FLD810  ANOP\n&FLAG    SETA  &LAST*128+&HEX*8+&BIN*4+&PACKED*2+&REG*1\n&LEN2    SETA  &TRUNC*128+&LEFT*128+&ZERO*64+&P3L\n         DC    S(&P1S,&P2L),AL1(&FLAG,&LEN2)\n&$_FEAT(2) SETB (&$_FEAT(2) OR (&REG AND NOT &HEX))   REGISTER (BIN)\n&$_FEAT(3) SETB (&$_FEAT(3) OR (&REG AND &HEX))       REGISTER (HEX)\n&$_FEAT(4) SETB (&$_FEAT(4) OR &PACKED)               PACKED\n&$_FEAT(6) SETB (&$_FEAT(6) OR &BIN)                  BINARY\n&$_FEAT(7) SETB (&$_FEAT(7) OR (&HEX AND NOT &REG))   HEX\n&$_FEAT(8) SETB (&$_FEAT(8) OR &NUMERIC)              BIN,PACKED\n&$_FEAT(9) SETB (&$_FEAT(9) OR (&LEFT AND &NUMERIC))\n&$_FEAT(10) SETB (&$_FEAT(10) OR &ZERO)\n&$_FEAT(11) SETB (&$_FEAT(11) OR &TRUNC)\n&BIN     SETB  0                    RESET FLAGS\n&HEX     SETB  0                    RESET FLAGS\n&REG     SETB  0                    RESET FLAGS\n&PACKED  SETB  0                    RESET FLAGS\n&LEFT    SETB  0                    RESET FLAGS\n&ZERO    SETB  0                    RESET FLAGS\n&TRUNC   SETB  0                    RESET FLAGS\n         AGO   .LIT99\n.FLD990  MNOTE 12,'OPERAND &I HAS TOO MANY SUB-OPERANDS'\n         AGO   .LIT99\n.FLD993  MNOTE 8,'THIRD SUBPARAMETER IS INVALID: ''&SYSLIST(&I,3)'''\n         AGO   .LIT99\n.*--------------------------------------------------------------------*\n.*------------ LITERALS ----------------------------------------------*\n.*--------------------------------------------------------------------*\n.LIT00   ANOP\n&LIT     SETC  'C&SYSLIST(&I)'\n         AGO   .LIT09\n.LIT01   ANOP\n&LIT     SETC  '&SYSLIST(&I)'\n.LIT09   AIF   (&$_LIT EQ 0).LIT50\n&N       SETA  1\n         ACTR  &$_LIT*3+200\n.LIT10   AIF   (&N GT &$_LIT).LIT50                  LOOP\n&L       SETA  &N+1000                               LOOP\n         AIF   ('&LIT' EQ '&$_LITS(&N)').LIT80 LOOP\n&N       SETA  &N+1                                  LOOP\n         AGO   .LIT10                                LOOP\n.LIT50   ANOP\n&$_LIT   SETA  &$_LIT+1\n&$_LITS(&$_LIT) SETC '&LIT'\n&L       SETA  &$_LIT+1000\n.LIT80   ANOP\n&J       SETA  X'4000'+&LAST*X'8000'\n         DC    AL2($LIT&L-*,&LQ.$LIT&L,&J)\n&$_FEAT(1) SETB 1                      LITERAL\n.LIT99   ANOP\n.*--------------------------------------------------------------------*\n&I       SETA  1+&I                              LOOP\n         AIF   (&I LE N'&SYSLIST).LOOP1          LOOP\n.*ENDLOOP\n&SYSLOC  LOCTR\n         AGO   .MEND\n.ERR1    MNOTE 12,'AT LEAST ONE INPUT FIELD MUST BE SPECIFIED'\n         AGO   .MEND\n.ERR2    MNOTE 12,'INVALID OUTPUT AREA SPECIFICATION'\n         AGO   .MEND\n.**********************************************************************\n.*       GENERATE: GENERATE LITERALS AND PROCESSING ROUTINE           *\n.**********************************************************************\n.GENL    ANOP\n&STRBLANKS SETA 2\n         AIF   ('&SYSLIST(2)' NE 'FULL').GENL1F\n&$_FEAT(1) SETB 1,1,1,1,1,1,1,1,1,1,1,1\n.GENL1F  ANOP\n&ALLFEAT SETC  '&$_FEAT(1)&$_FEAT(2)&$_FEAT(3)&$_FEAT(4)'\n&ALLFEAT SETC  '&ALLFEAT&$_FEAT(5)&$_FEAT(7)&$_FEAT(6)&$_FEAT(8)'\n&ALLFEAT SETC  '&ALLFEAT&$_FEAT(9)&$_FEAT(10)&$_FEAT(11)&$_FEAT(12)'\n&STR     SETC  '&STRING_MACRO_VERSION'\n         MNOTE *,'STRING/ESA R&STR - FEATURES GENERATED: &ALLFEAT'\n         AIF   (&$_LIT EQ 0).GENL3\n$LITERAL LOCTR\n.GENL2   ANOP                                LOOP\n&N       SETA  &N+1                          LOOP\n&I       SETA  &N+1000                       LOOP\n$LIT&I   DC    &$_LITS(&N)\n         AIF   (&N LT &$_LIT).GENL2          LOOP\n.GENL3   ANOP\n         AIF   ('&SYSLIST(2)' EQ 'NOCSECT').GENL8\n.**********************************************************************\n.*                                                                    *\n.*       STRING SUB-ROUTINE                                           *\n.*                                                                    *\n.*             CAUTION: BYTES 49-72 OF THE CALLER'S SAVE AREA         *\n.*                      (R7-R12 SLOTS) ARE USED AS WORK SPACE         *\n.*                                                                    *\n.**********************************************************************\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL4L\n@STRING  CSECT\n@STRING  RMODE ANY\n         AGO   .GENL4X\n.GENL4L  PUSH  USING                   GENERATE,LOCTR\n         DROP\n@STRING@ LOCTR\n@STRING  DS    0H                      ALIGNMENT\n.GENL4X  ANOP\n@00      EQU   0                       WORK REGISTER\n@01      EQU   1                       WORK REGISTER\n@02      EQU   2                       WORK REGISTER\n@03      EQU   3                       WORK REGISTER\n@04      EQU   4                       WORK REGISTER\n@05      EQU   5                       WORK REGISTER\n@06      EQU   6                       WORK REGISTER\n@07      EQU   7                       WORK REGISTER\n@08      EQU   8                       WORK REGISTER\n@09      EQU   9                       WORK REGISTER\n@10      EQU   10                      WORK REGISTER\n@11      EQU   11                      WORK REGISTER\n@12      EQU   12                      WORK REGISTER\n@13      EQU   13                      CALLER'S SAVE AREA\n@14      EQU   14                      WORK REGISTER\n@15      EQU   15                      BASE REG\n         USING @STRING,@15\n         USING @STRSAVE,@13\n         B     @STR003                 BRANCH AROUND EYE-CATCHER\n         DC    C'@STRING R&STRING_MACRO_VERSION &ALLFEAT',0H'0'\n@STR002  DC    H'2'\n@STR003  STM   @14,R12,12(@13)         SAVE REGS (DEBUGGING ONLY)\n         AH    @14,@STR002-@STRING(@15) POINT PARM PARM-LIST OFFSET\n         BAKR  @14,0                   SAVE REGS AND RETURN ADDRESS\n         BCTR  @14,0                   ADJUST ADDR OF PARM LIST OFFSET\n         BCTR  @14,0                   ADJUST ADDR OF PARM LIST OFFSET\n         LAE   @06,0                   R6=0 AR6=0\n         CPYA  @14,@06                 AR14=0\n         CPYA  @15,@06                 AR15=0\n         ICM   @06,B'0011',0(@14)      PICK UP PARM-LIST OFFSET\n         ALR   @06,@14                 R6 NOW POINTS TO PARM LIST\n         USING @STRPARM,@06\n         LAE   @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         LAE   @04,0(,@02)             KEEP ADDRESS OF \"INTO\" FIELD\n         EREG  @14,@14                 RESTORE ADDR OF STRING MACRO\n         OI    0(@04),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         LAE   @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         LR    @05,@02                 KEEP LENGTH OF \"INTO\" FIELD\n         CR    @05,@04                 END ADDRESS?\n         BL    @STR282                 NO, JUMP\n         SR    @05,@04                 CALCULATE LENGTH\n@STR282  MSTA  @04                     SAVE R4,R5 ON LINKAGE STACK\n.*SLAC   DC    X'B247,0040'            SLAC assembler error\n.**********************************************************************\n.*       MOVE FIELDS TO OUTPUT AREA                                   *\n.**********************************************************************\n         LAE   @06,@STRFLAG            POINT TO 1ST FIELD DESC\n.*LOOP\n@STR310  EQU   *\n         AIF   (NOT &$_FEAT(1)).FEAT1A\n         TM    @STRFLAG,@STRLIT        IS THIS A LITERAL?\n         BO    @STR372                 YES, JUMP\n.FEAT1A  ANOP\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(3)).FEAT23A\n         TM    @STRFLAG,@STRREG        REGISTER?\n         BO    @STR323                 YES, JUMP\n.FEAT23A ANOP\n         AIF   (NOT &$_FEAT(12)).FEAT12A\n         CLI   @STRSCON,X'E0'          IS IT %TIME ?\n         BE    @STR378                 YES, JUMP\n.FEAT12A ANOP\n.*\n.*       IT'S A FIELD (SCON)\n.*\n         LAE   @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         AIF   (&$_FEAT(9)).FEAT9E1    (LEFT JUSTIFICATION, NUMERIC)\n         LTR   @03,@02                 KEEP/TEST LENGTH\n         BZ    @STR398                 ZERO LENGTH, DO NOT EDIT\n         AGO   .FEAT9E2\n.FEAT9E1 LTR   @03,@02                 KEEP/TEST LENGTH\n         BP    @STR313                 LENGTH POSITIVE, JUMP\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR398                 NO, ZERO LENGTH IS NOT OK\n@STR313  EQU   *\n.FEAT9E2 ANOP\n         LAE   @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         EREG  @14,@14                 RESTORE ADDR OF STRING MACRO\n         CLI   0(@02),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         CR    @03,@02                 END ADDRESS?\n         BL    @STR314                 NO, JUMP\n         LA    @00,X'0080'             PSA ADDRESS\n         CLR   @02,@00                 PSA REFERENCE?\n         BL    @STR314                 YES, JUMP\n         SR    @03,@02                 CALCULATE LENGTH\n@STR314  EQU   *\n         AIF   (NOT &$_FEAT(6)).FEAT6A\n         TM    @STRFLAG,@STRBIN        BINARY FIELD?\n         BO    @STR328                 YES, JUMP\n.FEAT6A  ANOP\n         AIF   (NOT &$_FEAT(4)).FEAT4A\n         TM    @STRFLAG,@STRPACK       PACKED FIELD?\n         BO    @STR351                 YES, JUMP\n.FEAT4A  ANOP\n         AIF   (NOT &$_FEAT(7)).FEAT7A\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BO    @STR376                 YES, JUMP\n.FEAT7A  ANOP\n.*\n.*       TRUNCATE CHARACTER STRING\n.*\n         AIF   (NOT &$_FEAT(11)).FEAT11A\n         CLI   @STRLEN2,@STRLEFT       CHECK JUSTIFICATION, OUTPUT LEN\n         BNE   @STR390                 NO STRING TRUNCATION, JUMP\n         LAE   @01,0(@03,@02)          FIRST BYTE AFTER FIELD\n@STR318  BCTR  @01,0                   DOWN 1 BYTE                 LOOP\n         CLI   0(@01),C' '             IS IT A SPACE ?             LOOP\n         BNE   @STR390                 LAST NON-BLANK BYTE         LOOP\n         BCT   @03,@STR318             LOOP UNTIL 1ST NON-BLANK    LOOP\n         B     @STR398                 BLANK FIELD, DO NOT EDIT\n         AGO   .FEAT11B\n.FEAT11A ANOP\n         AIF (&$_FEAT(2)+&$_FEAT(3)+&$_FEAT(4)+&$_FEAT(6) EQ 0).FEAT11B\n         B     @STR390                 EDIT\n.FEAT11B ANOP\n.*\n.*       REGISTER (R0-R13)\n.*\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(3)).FEAT23B\n@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31\n         CLI   @STRSCON+1,@06          IS THIS R7-R13?\n         BH    @STR323R                YES, JUMP\n         LR    @07,@01                 SAVE R1 (R)\n         LAE   @10,0(,@04)             SAVE R4\n         LR    @11,@05                 SAVE R5\n         LAE   @12,0(,@06)             SAVE R6\n         EREG  @00,@06                 RELOAD CALLER'S R0-R6\n         EX    @07,@STR323L            COPY R0-R6 VALUE\n         LAE   @04,0(,@10)             RESTORE R4\n         LR    @05,@11                 RESTORE R5\n         LAE   @06,0(,@12)             RESTORE R6\n         B     @STR323T\n@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT\n@STR323R EQU   *\n         EREG  @07,@12                 RESTORE CALLER'S R7-R12\n         EX    @01,@STR323L            COPY R7-R13 INTO R0\n@STR323T EQU   *\n         AIF   (NOT &$_FEAT(3)).FEAT3R REG,HEX\n         AIF   (NOT &$_FEAT(2)).FEAT2H REG,BIN\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BNO   @STR330                 NO, EDIT FWD\n.FEAT2H  ANOP\n         STCM  @00,B'1111',@STRDWD-1   STORE IT FOR CVD/UNPK\n         LA    @03,8                   OUTPUT LENGTH\n         B     @STR376X                EDIT IN HEX\n.FEAT3R  ANOP\n         AIF   (NOT &$_FEAT(6)).FEAT23B\n         B     @STR330                 EDIT R0\n.FEAT23B ANOP\n.*\n.*       BINARY VARIABLE: @03 CONTAINS THE ICM MASK (1 3 7 F)\n.*\n         AIF   (NOT &$_FEAT(6)).FEAT6B\n@STR328M ICM   @00,*-*,0(@02)          **EXECUTED INSTRUCTION**\n@STR328  SLR   @00,@00\n         EX    @03,@STR328M            LOAD THE BINARY VARIABLE\n.FEAT6B  ANOP\n.*\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(6)).FEAT6C\n@STR330  CVD   @00,@STRDWD             CONVERT VALUE TO DECIMAL\n         AIF   (NOT &$_FEAT(4)).FEAT6C\n         B     @STR361                 EDIT DWD\n.FEAT6C  ANOP\n.*\n.*       PACKED FIELD\n.*\n         AIF   (NOT &$_FEAT(4)).FEAT4B\n@STRZAP  ZAP   @STRDWD,0(*-*,@02)      MOVE TO @STRDWD\n@STR351  LAE   @03,0(,@02)             FIRST BYTE OF PACKED FIELD\n         BALR  @14,0\n         TM    0(@03),X'0C'            IS THIS THE SIGN BYTE?\n         LA    @03,1(,@03)              (NEXT BYTE)\n         BNOR  @14                     NO, LOOP MORE\n         SLR   @03,@02                 GET LENGTH OF PACKED FIELD\n         BCTR  @03,0\n         EX    @03,@STRZAP             EXECUTE ZAP\n         AIF   (NOT &$_FEAT(5)).FEAT4B\n         CLI   @STRLEN2,248            JULIAN-TO-YYMMDD CONV?\n         BNL   @STR375                 YES, JUMP\n.FEAT4B  ANOP                          PACKED\n.*\n.*       EDIT @STRDWD (BIN, REG, PACKED)\n.*\n         AIF   (NOT &$_FEAT(8)).FEAT8B\n@STR361  IC    @00,@STRLEN2            OUTPUT LENGTH\n         LA    @03,X'003F'             MASK FOR \"AND\"\n         NR    @03,@00                 OUTPUT LENGTH\n         MVC   @STRWK16(16),@STRMASK   EDIT MASK\n.*\n.*       LEFT-JUSTIFICATION (NUMERIC)\n.*\n         AIF   (NOT &$_FEAT(9)).FEAT9B\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR367                 NO, JUMP\n         LAE   @01,@STRWK16+15         PREVENT BAD R1\n         EDMK  @STRWK16(16),@STRDWD    ZONED DECIMAL\n         LAE   @02,0(,@01)             FIRST STRING POSITION\n         LTR   @03,@03                 CHECK OUTPUT LENGTH\n         BNZ   @STR363                 JUMP IF NOT ZERO\n.*       L0    (LEFT JUSTIFIED, NO PADDING)\n         LAE   @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n.*       L1-L63 (LEFT JUSTIFIED, PADDING)\n@STR363  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR364                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR364  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         LAE   @08,0(,@04)             POINTER IN OUTPUT LINE\n         LR    @09,@03                 LENGTH WITH PADDING\n         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR392                 MOVE FIELD TO OUTPUT LINE\n@STR367  EQU   *\n.FEAT9B  ANOP\n         AIF   (NOT &$_FEAT(10)).FEAT10B\n         TM    @STRLEN2,@STRZERO       LEADING ZEROES REQ'D?\n         BNO   @STR368                 NO, JUMP\n         MVI   @STRWK16,C'0'           YES, CHANGE X'40' TO C'0'\n@STR368  EQU   *\n.FEAT10B ANOP\n         ED    @STRWK16(16),@STRDWD    ZONED DECIMAL\n         LAE   @02,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @02,@03                 FIRST STRING POSITION\n.FEAT8B  ANOP\n.*\n.*       LITERAL (@STRSCON IS A 16-BIT OFFSET)\n.*       BLANKS  (@STRSCON=ZERO)\n.*\n         AIF   (NOT &$_FEAT(1)).FEAT1B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR372  SLR   @02,@02\n         SAR   @02,@02                 AR2=0\n         ICM   @02,B'0011',@STRSCON    LOAD LITERAL OFFSET\n         BZ    @STR372L                BLANKS, JUMP\n         LAE   @02,@STRSCON(@02)       CONVERT OFFSET TO FULL ADDRESS\n@STR372L LH    @03,@STRFLEN            GET LITERAL LENGTH\n.FEAT1B  ANOP\n.*\n.*       CONVERT JULIAN DATE TO YYMMDD\n.*\n         AIF   (NOT &$_FEAT(5)).FEAT5F\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR375  LA    @00,248                 MASK FOR 'SLR'\n         SLR   @01,@01\n         IC    @01,@STRLEN2            248-255\n         SLR   @01,@00                 000-007\n         LA    @00,12                  L'@STR375W\n         MR    @00,@00                 COMPUTE OFFSET\n         LAE   @01,@STR375W(@01)       ENTRY IN \"TR\" MASK TABLE\n         SLR   @03,@03\n         IC    @03,0(,@01)             LENGTH OF DATE (6 OR 8)\n         ZAP   @STRDWD,@STRDWD         DATE=0000000?               @JDT\n         BNZ   @STR375B                NO, JUMP                    @JDT\n@STR375Z LAE   @02,@STRBLANKS          WORK AREA\n&STRBLANKS SETA 8                      WE NEED AT LEAST 8 BLANKS\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n@STR375W DC    AL1(10,C'-',0,1,2,3,8,4,5,8,6,7) YYYY-MM-DD   248\n         DC    AL1(8,C' ',0,1,2,3,4,5,6,7,8,8)  YYYYMMDD//   249\n         DC    AL1(8,C'/',2,3,8,4,5,8,6,7,8,8)  YY/MM/DD//   250\n         DC    AL1(8,C'/',6,7,8,4,5,8,2,3,8,8)  DD/MM/YY//   251\n         DC    AL1(8,C'/',4,5,8,6,7,8,2,3,8,8)  MM/DD/YY//   252\n         DC    AL1(6,C' ',2,3,4,5,6,7,8,8,8,8)  YYMMDD       253\n.*       DC    AL1(6,C' ',6,7,4,5,2,3,8,8,8,8)  DDMMYY       254\n.*       DC    AL1(6,C' ',4,5,6,7,2,3,8,8,8,8)  MMDDYY       255\n@STR375T DC    P'59,31,29,31,30,31,30,31,31,30,31,30,31'\n@STR375B CLI   @STRDWD+4,X'01'         YEAR 2000 OR ABOVE?\n         BH    @STR375C                CC>01, JUMP (MUST BE 19 OR 20)\n         MVI   @STRDWD+4,X'20'         CC=01, CHANGE TO CC=20\n         BE    @STR375C                CC=01, USE CC=20\n         CLI   @STRDWD+4+1,X'50'       YY<50?\n         BL    @STR375C                YES, USE CC=20\n         MVI   @STRDWD+4,X'19'         NO, FORCE CC=19\n@STR375C UNPK  @STRWK16(5),@STRDWD+4(3) CCYY?\n         ZAP   @STRDWD+1(2),@STR375T+9(1) INIT MONTH COUNTER\n         LAE   @02,@STR375T            TABLE OF MONTHS (NUMBER OF DAYS)\n         TM    @STRDWD+4+1,X'01'       ODD YEARS\n         BO    @STR375N                  AREN'T LEAP YEARS\n         TM    @STRDWD+4+1,X'12'       ZEROES IN 1980, ALL ONES IN 1992\n         BNM   @STR375L                MIXED IN 1982/1990\n.*       IF IT'S NOT A LEAP YEAR AND DDD>59, THEN ADD 1 TO DDD\n@STR375N CP    @STRDWD+4+2(2),@STR375T ARE WE PAST FEB 28 (DDD>59) ?\n         BNH   @STR375L                NO, JUMP\n         AP    @STRDWD+4+2(2),@STR375T+3(1) ADD 1 (FROM 31) TO DDD\n.*--LOOP WHILE DDD > 0\n@STR375L AP    @STRDWD+1(2),@STR375T+3(1)   ADD 1 (FROM 31) TO MONTH\n         LA    @02,2(,@02)             NEXT ENTRY IN \"MONTHS\" TABLE\n         SP    @STRDWD+4+2(2),0(2,@02) SUB DAYS-IN-MONTH FROM DDD\n         BP    @STR375L\n.*--ENDLOOP\n         AP    @STRDWD+4+2(2),0(2,@02) UNDO LAST \"SP\" INSTRUCTION\n         UNPK  @STRWK16+4(2),@STRDWD+1(2) FYFYFYFY,FMCM??\n         UNPK  @STRWK16+6(2),@STRDWD+6(2) FYFYFYFY,FMCMFDCD\n         MVZ   @STRWK16+1(7),@STRWK16     FYFYFYFY,FMCMFDCD\n         MVC   @STRWK16+8(1),1(@01)    SEPARATOR\n         LAE   @02,@STRWK16+9          WORK AREA\n         MVC   0(10,@02),2(@01)        MOVE CORRESPONDING MASK\n         TR    0(10,@02),@STRWK16      CONVERT DATE TO THE RIGHT FORMAT\n.FEAT5F  ANOP                          JDATE\n.*\n.*       HEX STRING\n.*\n         AIF   (NOT &$_FEAT(7)).FEAT7B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR376M MVC   @STRDWD-1(*-*),0(@02)   PREVENT S0C4 IN UNPK\n@STR376  LA    @00,8                   MAX LENGTH\n         CLR   @03,@00                 CHECK LENGTH\n         BNH   @STR376B                JUMP IF LE 8\n         LR    @03,@00                 TRUNCATE TO MAXIMUM LENGTH\n@STR376B LR    @01,@03                 INPUT LENGTH\n         BCTR  @01,0\n         EX    @01,@STR376M            MOVE DATA TO SAFE STORAGE\n         ALR   @03,@03                 OUTPUT LENGTH\n         AGO   .FEAT37B\n.FEAT7B  ANOP\n         AIF   (NOT &$_FEAT(3)).FEAT37C\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n.FEAT37B ANOP\n@STR376X LAE   @02,@STRWK16            WORK AREA\n         UNPK  0(9,@02),@STRDWD-1(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         UNPK  8(9,@02),@STRDWD+3(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         TR    0(16,@02),@STRHEXT-240  =C'0123456789ABCDEF'\n.FEAT37C ANOP\n.*\n.*       %TIME\n.*\n         AIF   (NOT &$_FEAT(12)).FEAT12B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STRTIME DC    X'4021207A20207A20207A20204000'    0X.XX.XX.XX\n@STR378  TIME  DEC                     GET HHMMSSHH\n         EREG  @14,@15                 RESTORE BASE REG\n         CPYA  @15,@06                 AR15=0\n         ST    @00,@STRDWD             STORE HHMMSSHH\n         MVC   @STRWK16(13),@STRTIME   MOVE EDIT MASK\n         ED    @STRWK16(13),@STRDWD    EDIT HH:MM:SS:HH\n         LAE   @02,@STRWK16+1          WORK AREA\n         LA    @03,12                  HH:MM:SS:HH+ SPACE\n.FEAT12B ANOP\n.*MOVE\n@STR390  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR391                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR391  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         LAE   @08,0(,@04)             POINTER IN OUTPUT LINE\n         LR    @09,@03                 PASS REMAINING LENGTH\n         LTR   @02,@02                 BLANKS?\n         BNZ   @STR392                 NO, JUMP\n         SLR   @03,@03                 YES, ZERO LENGTH\n@STR392  ICM   @03,B'1000',@STRBLANKS  PAD WITH BLANKS\n         MVCL  @08,@02                 MOVE FIELD TO OUTPUT LINE\n         LR    @04,@08                 NEW POINTER IN OUTPUT LINE\n@STR398  TM    @STRFLAG,@STRLAST       TEST LAST-ENTRY INDICATOR\n         LA    @06,@STRNEXT            BUMP UP TO NEXT ENTRY\n         BNO   @STR310                 PROCESS NEXT ENTRY\n.*ENDLOOP\n.*\n.*       END-OF-LINE PROCESSING - PAD WITH BLANKS\n.*\n         SLR   @01,@01                 SET UP R1 FOR PADDING\n         ICM   @01,B'1000',@STRBLANKS  SET UP R1 FOR PADDING\n.***     DROP  @06,@13,@15\n         LA    @15,3                   MODIFIABLE AREA\n         ESTA  @14,@15                 R14 = START OF OUTPUT AREA\n         LR    @15,@04                 END OF OUTPUT AREA\n         SR    @15,@14                 R15 = LENGTH USED IN OUTPUT AREA\n         MVCL  @04,@00                 PAD WITH BLANKS\n         EREG  @00,@14                 RESTORE WORK REGISTERS\n         STM   @14,@12,12(@13)         MAKE SAVE AREA LOOK NORMAL\n         OI    15(@13),1               SIMULATE \"T\" OPTION OF RETURN\n         PR                            RETURN TO CALLER\n.*\n         AIF   (NOT (&$_FEAT(3) OR &$_FEAT(7))).FEAT37T\n@STRHEXT DC    C'0123456789ABCDEF'     HEX-TO-EBCDIC CONVERSION\n.FEAT37T ANOP\n         AIF   (NOT &$_FEAT(8)).FEAT8T\n@STRMASK DC    X'4020202020202020,2020202020202120'\n.FEAT8T  ANOP\n.**********************************************************************\n.*       CONVERT S-CON TO 31-BIT ADDRESS (RESULT RETURNED IN R2)      *\n.**********************************************************************\n@STRS2A  SLR   @00,@00\n         ICM   @00,B'0011',0(@02)      R0 = 0000BDDD\n         SRDL  @00,12                  R0 = 0000000B, R1= DDD.....\n         SRL   @01,20                  R1 = 00000DDD (DISPLACEMENT)\n         SLL   @00,2                   MULT BY 4\n         CLI   0(@02),@07*16           R7-R13?\n         BNL   @STRS2A7                YES, JUMP\n.*BASE REG IS R0-R6\n@STRS2A4 LTR   @02,@00                 IS R0 THE BASE REG?\n         BNZ   @STRS2A5                NO, JUMP\n         LTR   @02,@01                 IS THIS A PSA ADDRESS?\n         BNZR  @14                     YES, GOBACK\n         EREG  @00,@00                 POP R0\n         SAR   @02,@02                 AR2=0\n         LR    @02,@00                 PASS R0 VALUE\n         LA    @02,0(,@02)             CLEAN UP\n         BR    @14                     GOBACK\n@STRS2A5 LR    @07,@00                 SAVE R0 (B*4)\n         LR    @08,@01                 SAVE R1 (DDD)\n         LR    @09,@03                 SAVE R3\n         LAE   @10,0(,@04)             SAVE R4\n         LR    @11,@05                 SAVE R5\n         LAE   @12,0(,@06)             SAVE R6\n         EREG  @01,@06                 RELOAD CALLER'S R1-R6\n         EX    0,@STRS2A9-4(@07)       ADD BASE REG VALUE TO DISPL\n         LR    @03,@09                 RESTORE R3\n         LAE   @04,0(,@10)             RESTORE R4\n         LR    @05,@11                 RESTORE R5\n         LAE   @06,0(,@12)             RESTORE R6\n         BR    @14                     GOBACK\n.*BASE REG IS R7-R13\n@STRS2A7 LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)\n         EREG  @07,@12                 RESTORE CALLER'S R7-R12\n         EX    0,@STRS2A9-4(@02)       ADD BASE REG VALUE TO DISPL\n         BR    R14                     GOBACK\n@STRS2A9 LAE   @02,0(@08,@01)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@02)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@03)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@04)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@05)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@06)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@07)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@08)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@09)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@10)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@11)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@12)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@13)          ADD BASE REG VALUE TO DISPL\n&STR     SETC  '&STRBLANKS'\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL7L\n@STRBLANKS DC  CL((((*+&STRBLANKS+7-@STRING)/8)*8)-(*-@STRING))' '\n         AGO   .GENL7X\n.GENL7L  ANOP\n@STRBLANKS DC  CL&STRBLANKS.' '\n.GENL7X  ANOP\n@STRING_SIZE EQU *-@STRING             SIZE OF GENERATED CSECT\n.**********************************************************************\n.*       WORK AREA (CALLER'S SAVE AREA)                               *\n.**********************************************************************\n@STRSAVE DSECT                         24-BYTE WORK AREA\n         DS    A(0,@STRSAVE,@STRSAVE,14,15,0,1,2,3,4,5,6)\n@STRWK16 DS    F'7,8,9,10'             WORK AREA\n@STRDWD  DS    D'1112'                 WORK AREA\n@STRPARM DSECT\n@STRSCON DS    S                   +0  FIELD ADDRESS\n@STRFLEN DS    S                   +2  FIELD LENGTH\n@STRFLAG DS    B                   +4  FORMAT, FLAGS\n@STRLAST EQU   X'80'                     LAST ENTRY\n@STRLIT  EQU   X'40'                     LITERAL, @STRSCON IS AN OFFSET\n@STRJDT  EQU   X'20'                     JULIAN DATE\n.*             X'3F'                   CONVERSION REQUIRED\n@STRHEX  EQU   X'08'                     HEXADECIMAL\n@STRBIN  EQU   X'04'                     BINARY\n@STRPACK EQU   X'02'                     PACKED\n@STRREG  EQU   X'01'                     REGISTER\n@STRLEN2 DS    B                   +5  FORMAT, OUTPUT LENGTH\n@STRLEFT EQU   X'80'                     LEFT JUSTIFICATION\n@STRZERO EQU   X'40'                     LEADING ZEROES\n.*             X'3F'                     OUTPUT LENGTH, 0 MEANS TRUNC.\n@STRNEXT EQU   *                   +6\n$LTORG   LOCTR\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL9L\n         CNOP  0,4\n$STRING  BALR  @15,0                   LOCAL BASE\n         L     @15,6(@15,0)            ROUTINE ADDRESS           00\n         BR    @15                     GO TO @STRING             04\n         AGO   .GENL9\n.GENL8   ANOP                          GENERATE,NOCSECT\n$LTORG   LOCTR\n         CNOP  0,4\n$STRING  BALR  R15,0                   LOCAL BASE\n         L     R15,6(R15,0)            ROUTINE ADDRESS           00\n         BR    R15                     GO TO @STRING             04\n.GENL9   ANOP\n         DC    V(@STRING)              ROUTINE ADDRESS           06\n         AGO   .MEND\n.GENL9L  POP   USING                   GENERATE,LOCTR\n$STRING  BAL   R15,=X'4AFF,0000,07FF'\n         DC    Y(@STRING-*)            OFFSET TO @STRING ROUTINE\n.MEND    AIF   ('&PRINT' EQ 'NOGEN').MEND99\n         POP   PRINT\n.MEND99  MEND\n         EJECT\n**********************************************************************\n**********************************************************************\n********* TEST PROGRAM FOR THE 'STRING' MACRO ************************\n**********************************************************************\n**********************************************************************\nTESTPGM  START X'027000'\n         BALR  R12,0\n         USING *,R12\n*-DEL- EP=SYSDEBUG\n*-DEL- R15,R0\n*-DEL- R14,R15\n*STRING 1X,INTO=XXX\n         OPEN  (SYSPRINT,OUTPUT)\nRBPREFIX EQU   *\nRBINTCOD EQU   *+6,2,C'H'\nASCBASID EQU   *+8,2,C'X'\n         L     R1,PSATOLD-PSA\n         L     R1,0(,R1)               TCBRBP\n         STRING 'SVC',(RBINTCOD-RBPREFIX(R1),H,R3Z),                   X\n               1X,(WWWW,,T),' - ',     VV.MM OF SVC RTNE               X\n               ((R8),,X),1X,           COM-REG ADDR                    X\n               (ASCBASID,,X),1X,       ASID                            X\n               PARM1,1X,               MAIN PGM NAME                   X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n*\n         LA    R2,XXX\n         STRING 1X,INTO=((R2),8)\n         MACRO                                       JDATE MACRO\n        @JDATE &DATE                                 JDATE MACRO\n         LA    R1,=P'&DATE'                          JDATE MACRO\n*** STRING ((R1),P),2X,((R1),P),INTO=XXX\n         STRING ((R1),P),2X,((R1),P,YYMMDD),INTO=XXX,                  X\n               3X,((R1),P,YY/MM/DD),                                   X\n               3X,((R1),P,DD/MM/YY),                                   X\n               3X,((R1),P,MM/DD/YY),                                   X\n               3X,((R1),P,YYYYMMDD),                                   X\n               3X,((R1),P,YYYY-MM-DD)\n         PUT   SYSPRINT,XXX                          JDATE MACRO\n         MEND                                        JDATE MACRO\n        @JDATE 90058\n        @JDATE 91059\n        @JDATE 93060\n        @JDATE 94365\n        @JDATE 80058\n        @JDATE 84059\n        @JDATE 88060\n        @JDATE 92061\n        @JDATE 00366\n         LA    R2,1234\n         STRING 'CVTPTR=X''',(CVTPTR,4,X),'''',INTO=XXX,               X\n               ' 1234=',((R2),,R4Z)\n         PUT   SYSPRINT,XXX\n         L     R1,CVTPTR\n         STRING 'CVTDATE=',(56(R1),P,YYMMDD),INTO=XXX\n         PUT   SYSPRINT,XXX\n         LA    R0,1000\n         LA    R3,0033\n         STRING 'D1=/',D1,'/,WWWW=/',WWWW,'/',                         X\n               ((R3),,L),'/',((R3),,X),'/',((R0),,L),'/',              X\n               ((R3),,R9B),'/',INTO=XXX\n         LR    R4,R15                   LENGTH USED\n         PUT   SYSPRINT,XXX\n         STRING WWWW,                                                  X\n               (4(R13),4,X),'''',(4(R13),F),'''',                      X\n               (4(R13),F,L),'''',                                      X\n               (4(R13),F,L11),'''',                                    X\n               (4(R13),F,Z9),'''',                                     X\n               8X,'R4=',((R4),,L),      LENGTH USED                    X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         STRING %TIME,D1,'B12345678B',5X,(CTR1,P),1X,PARM1,1X,PARM2,   X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         LA    R3,22\n         STRING INTO=XXX,'CCC1234A',(D1,(R3)),'.',(CTR1,P,R7Z)\n         PUT   SYSPRINT,XXX\n         STRING C'DDN2(',(D1,,T),')',X'40C1C2C3C4',                    +\n               ' PSATOLD=',(PSATOLD-PSA,,X),                           +\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         AIF   ('&SYSPARM' NE 'HLASM').HLASM99\nPSABASE  USING PSA,R0\n         STRING 'PSATOLD=',(PSABASE.PSATOLD,,X),                       +\n               ' PSATOLD=',(PSATOLD-PSA,,X),                           +\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n.HLASM99 ANOP\n         BALR  R0,0\n         STRING 'R0=',((R0),,X),'   16(R0)=',(16(R0),4,X),INTO=XXX\n         PUT   SYSPRINT,XXX\n*\nAMODE31  LA    R12,0(,R12)             BALR->BASR\n         L     R15,=A(*+X'80000006')   AMODE=31\n         BSM   0,R15                   AMODE=31\n         DSPSERV CREATE,                                               X\n               NAME==CL8'STRING00',    C'STRING00'                     X\n               BLOCKS=HDRBLKS,         SIZE IN PAGES                   X\n               STOKEN=DSPCSTKN,                                        X\n               ORIGIN=DSPCORG\n         ALESERV ADD,STOKEN=DSPCSTKN,ALET=DSPCALET\n         LAM   R8,R8,DSPCALET          POINT TO THE DATA SPACE\n         L     R8,DSPCORG              SPACE ORIGIN (0 OR 4096)\n         SAC   512                     MODE=AR\n LAM R14,R6,TESTPGM+40                 S0E0-28\n         STRING WWWW,INTO=(2048(R8),100)\n*\n.EXIT    SLR   R15,R15\n         SVC   3                       GOBACK\nD1       DC    C'D1-----D1    '\nWWWW     DC    C'WWWW'\nCTR1     DC    P'1'\nPARM1    DC    C'<-PARM1->'\nPARM2    DC    C'<-PARM2->'\nXXX      DS    CL132\nDSPCSTKN DS    XL8                  0  AS TOKEN\nDSPCALET DS    F                    8  ALET\nDSPCORG  DS    F                   12  ORIGIN\nHDRBLKS  DC    F'100'\nCVTPTR   EQU   0016,4,C'A'\nSYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FB,LRECL=121\nXYZ      DSECT\n         STRING GENERATE,LOCTR\n**       STRING GENERATE\n         YREGS\nPSA      DSECT\nPSATOLD  EQU   *+X'21C',4,C'A'\n         END\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//GO      EXEC PGM=LOADER,PARM=NOPRINT\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)\n//SYSPRINT DD SYSOUT=*\n//ABNLTERM DD SYSOUT=*\n//ABNLIGNR DD DUMMY\n//SYSDEBUG DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n\n          +----------------------------------------+\n          +                                        +\n          +   Documentation for the STRING macro   +\n          +                                        +\n          +       Last update: 09 Sep 1996         +\n          +----------------------------------------+\n\n  The STRING macro is functionally similar to the COBOL DISPLAY\n  or PL/I PUT EDIT instructions.\n\n  Using STRING, you can concatenate any number of fields, edit\n  each of them if necessary, and get the result in the work area\n  you specify.\n\n  Formats:\n\n    (1) label  STRING {field_specification1}\n                      {,field_specification2}...\n                      ,INTO=workarea\u00a8(workarea,length)\n                      {,PRINT=GEN\u00a8NOGEN}\n\n    (2) label  STRING GENERATE\n                      {,PRINT=GEN\u00a8NOGEN}\n\n\n  field_specification\n\n    Each field to be printed is described as a positional\n    operand.  Each operand specifies the field address, its\n    length, and its formatting requirements.\n\n    Four field description formats are supported:\n\n      1.   symbol\n      2.   (symbol,length,format)\n      3.   (d(r)\u00a8(r),length,format)\n      4.   ((r),,format)\n      5.   'character string'\n\n  Symbol specifies the field address.  It must be an\n    S-type (relocatable) address.\n\n  d(r) may be used to specify the field address in S/370\n    base-displacement format.  If d is zero, it may be omitted.\n    If d(r) or (r) is used, length must also be specified.  R14\n    and R15 may not be used.  If d(0) is used, it is handled the\n    way the assembler does, i.e. R0 as a base register is assumed\n    to contain zero: 16(0) is equivalent to 16, CVTPTR or, X'10'.\n\n  ((r),,format) specifies that (r) contains the value\n    itself, not an address.  R14 and R15 may not be used.\n\n  'character string' specifies a literal enclosed in single quotes\n    as specified in a DC instruction.  Hex strings or character\n    strings are supported.  The following expressions are equivalent:\n    'ABC' C'ABC' X'C1C2C3'\n\n  Length specifies the length and/or the type of the input field.\n    It may be specified as an integer, a symbol, a register, or a\n    constant.  When used with symbol, it overrides the assembled\n    length and/or type.  Length is required if field is specified\n    as d(r) or (r).  If a zero length is specified, the field is\n    ignored.\n\n        nn   field length in bytes\n        H    half-word\n        F    full-word\n        FL1  1-byte binary integer\n        FL3  3-byte binary integer\n        P    packed field\n        (r)  length of character string (R0 thru R12)\n        d(r) length of character string (R1 thru R12)\n\n  Notes:  If the field address is specified as a symbol that\n          has been defined previously in the program, the symbol\n          type is known and there is no need to specify it.\n\n          If the length is specified as (r) or d(r) and the value\n          is greater than the address itself, (r) or d(r) is\n          considered to be the end address +1 instead of the length.\n\n          The length is not specified for packed fields.  The\n          @STRING subroutine scans the field left-to-right until it\n          finds a byte with a valid sign in the low-order 4 bits.\n\n          If symbol is an arithmetic expression and no length is coded,\n          the implicit length will be that of the first symbol in the\n          expression;  for example, if symbol is coded as PSATOLD-PSA,\n          then the implicit length will be L'PSATOLD.\n\n          All numeric items are assumed positive.\n\n  format  optionally indicates editing options that must\n          be applied to a field.\n\n      L        left justified\n      R        right justified\n      nn       output length\n      0        adjust length\n      Z        leading zeroes\n      B        leading/trailing blanks\n      T        truncate character string after last non-blank\n      X        display in hexadecimal\n      YYMMDD   convert julian date to YYMMDD\n      YY/MM/DD convert julian date to YY/MM/DD\n      DD/MM/YY convert julian date to DD/MM/YY\n      MM/DD/YY convert julian date to MM/DD/YY\n      YYYYMMDD convert julian date to YYYYMMDD\n      YYYY-MM-DD convert julian date to YYYY-MM-DD\n\n    The default format depends on the field type:\n\n        Type                   Default Format\n\n        character string             L\n        FL1                          R3B\n        H or FL2                     R5B\n        other numeric fields         R7B\n\n    Note: L0 and T are equivalent for character strings.\n\n  'character string' is any character string enclosed in\n  single quotes.  Blank spaces may be specified as nnX,\n  where nn is the number of X'40' bytes you want to be\n  inserted in the output line.  %TIME may be specified to\n  obtain the current time in hh.mm.ss.hh format.\n\nINTO=workarea\u00a8(workarea,length)\n\n  INTO indicates the address and length of the output work area\n  into which the result of the concatenation should be placed\n  (left justified).  If the work area is too small, truncation\n  will occur.  If it is too large, it is padded with blanks.\n\n  The address may be a symbol, d(r) (S-type address) or (r).\n\n  The length may be specified as an integer, a symbol, a register,\n  or a constant; it is required if the address is coded as d(r) or\n  (r).  If length is not specified for a symbol-type address, the\n  assembled length of the symbol is used.\n\n  Upon return from STRING, R15 contains the length actually used\n  in the output work area (before padding).\n\nPRINT=GEN\u00a8NOGEN\n\n  This operand allows you to temporarily override the PRINT\n  specification (GEN or NOGEN).\n\nGENERATE (format 2)\n\n  The GENERATE format must be specified once at the end of the\n  program.  It generates the literals used in previous invocations\n  and the @STRING sub-routine.\n\n  The @STRING CSECT contains optional functions (such as %TIME or\n  julian date conversion) that are only generated if they have\n  been specified in the previous invocations of the STRING macro.\n  Specifying GENERATE,FULL on the final invocation of STRING\n  ensures generation of a @STRING CSECT that supports all\n  optional functions.\n\nExamples:\n\n     STRING 'ERROR===>',LINE1,'<=== POS ',((R6),,L0),INTO=WORKAREA\n\n     STRING 8X,C'ERRORS FOUND: ',(ERRORS,,L0),INTO=((R7),44)\n\n     STRING 'CVT ADDR IS ',(CVTPTR,4,X),X'40C1C2C3C4',INTO=LINE\n\n     LA    R5,WORK+16              end addr +1\n     STRING 'R4=',((R4),,X),INTO=(WORK,(R5)),PRINT=GEN\n\n     STRING '//JOBLIB DD DSN=',(DSN1,,T),',DISP=SHR',INTO=((R2),72)\n\n     PUT31 SYSLIN\n     LH    R0,SYSLIN+82            LRECL\n     STRING '   NAME  ',(4(R3),8,T),'(R)',INTO=((R1),(R0))\n\n     STRING GENERATE         Generate literals and sub-routine\n\n\nProgramming Notes:\n\n  A STRING macro generates only 6 bytes that need to be covered by\n  base registers.  More code is generated at the end of the\n  current CSECT (using LOCTR pseudo instruction), but this code\n  does not require addressability.  This is particularly useful\n  when STRING calls specify a large number of literals.\n\n  Additionally, STRING does not use A-type constants (ACON), but\n  S-type constants (SCON) which require symbols to be addressable\n  at the point in the program where STRING is issued.\n\n  While this reduces the number of base registers required to\n  cover the program's code and makes it easier to write reentrant\n  programs, it will produce assembly errors in the following\n  situations:\n\n  a.  STRING is used in more than one CSECT in the same assembly\n\n  b.  the CSECT in which STRING is used is longer than 64K\n\n  c.  symbols are not addressable at the point in the program\n      where STRING is issued\n\n  d.  the $STRING symbol (generated in the $LTORG LOCTR during the\n      GENERATE invocation of the STRING macro) is not addressable\n      in some of the STRING calls.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STRINGXA": {"ttr": 11780, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    STRING &INTO=,&PRINT=NOGEN\n         GBLC  &STRING_MACRO_VERSION\n&STRING_MACRO_VERSION SETC '402'       current version (STRING/XA)\n         AIF   ('&PRINT' EQ 'NOGEN').NOGEN\n         PUSH  PRINT\n         PRINT GEN\n.NOGEN   GBLA  &$_LIT\n         GBLB  &$_FEAT(16)             FEATURES\n         GBLC  &$_LITS(9999)           LITERALS\n         LCLA  &I,&J,&N\n         AIF   (N'&SYSLIST EQ 1 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'FULL' AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'LOCTR' AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'NOCSECT' AND T'&INTO EQ 'O').GENL\n&LABEL   SETC  'IHB&SYSNDX'            STEM FOR LOCAL LABELS\n&LQ      SETC  'L'''                   LENGTH ATTRIBUTE\n&STR     SETC  '  R&STRING_MACRO_VERSION'\n&NAME    BAS   R14,$STRING&STR         CALL @STRING SUB-ROUTINE\n         AIF   (N'&SYSLIST EQ 0).ERR1  NO POSITIONAL OPERANDS, ERROR\n         AIF   (T'&INTO EQ 'O').ERR2   NO RECEIVING FIELD, ERROR\n         AIF   (N'&INTO GT 2).ERR2     INTO=(A,32,BLURB)\n         DC    AL2(&LABEL.P-*)         OFFSET TO FIELD DESCRIPTORS\n         AIF   (D'$LITERAL).LOCTR2     NOT FIRST TIME, JUMP\n$LTORG   LOCTR                         ADDRESSABLE CONSTANTS\n$FARRTNE LOCTR                         FAR ROUTINES\n.LOCTR2  ANOP\n$LITERAL LOCTR                         NON-ADDRESSABLE CONSTANTS\n&TO1     SETC  '&INTO(1)'\n&TO2     SETC  '&LQ&INTO'\n         AIF   (N'&INTO EQ 1).PUNTO8            JUMP IF INTO=XXX\n         AIF   ('&INTO(1)'(1,1) NE '(').PUNTO3  JUMP IF INTO=(XXX,44)\n&TO1     SETC  '0&INTO(1)'                              INTO=((R3),44)\n.PUNTO3  ANOP\n&TO2     SETC  '&INTO(2)'                               INTO=(XXX,LL)\n         AIF   ('&INTO(2)'(1,1) NE '(').PUNTO8  JUMP IF INTO=(XXX,44)\n&TO2     SETC  '0&INTO(2)'                              INTO=(XXX,(R1))\n.PUNTO8  ANOP\n&LABEL.P DC    S(&TO1,&TO2)\n         LCLB  &LAST,&BIN,&HEX,&REG,&PACKED,&LEFT,&ZERO,&TRUNC\n&I       SETA  1\n.LOOP1   ANOP\n         AIF   (N'&SYSLIST(&I) GT 3).FLD990   TOO MANY SUB-OPERANDS\n&LAST    SETB  (&I EQ N'&SYSLIST)                LOOP\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').LIT00\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').LIT01\n&P1S     SETC  '&SYSLIST(&I,1)'\n&P2L     SETC  '0'                     INPUT LENGTH\n&P3L     SETC  '0'                     OUTPUT LENGTH\n         AIF   ('&SYSLIST(&I)'(1,1) GE '0').FLD180 SPACES\n         AIF   ('&SYSLIST(&I)' EQ '%TIME').FLD190 %TIME\n         AIF   ('&SYSLIST(&I,1)'(1,1) NE '(').FLD115 (R2)\n         AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD250\n&P1S     SETC  '0&SYSLIST(&I,1)'       CHANGE (R1) TO 0(R1)\n.FLD115  ANOP\n&L       SETA  1\n.FLD131  AIF   ('&P1S'(&L,1) EQ '.').FLD133\n&L       SETA  &L+1\n         AIF   (&L LT K'&P1S).FLD131\n&P2L     SETC  '&P1S'                    ABCDEF FROM ABCDEF\n         AGO   .FLD134\n.FLD133  ANOP\n&P2L     SETC  '&P1S'(&L+1,K'&P1S-&L)    RBCDE FROM PRB.RBCDE\n.FLD134  ANOP\n         AIF   (T'&SYSLIST(&I,2) NE 'O').FLD200\n         AIF   (NOT D'&P2L).FLD140\n&P2C     SETC  T'&P2L\n         AIF   ('&P2C' EQ 'F' OR '&P2C' EQ 'H' OR '&P2C' EQ 'P').FLD220\n         AIF   ('&P2C' EQ 'G').FLD210  FL2\n.FLD140  ANOP\n&L       SETA  1\n.FLD141  AIF   ('&P2L'(&L,1) EQ '-').FLD143\n         AIF   ('&P2L'(&L,1) EQ '+').FLD143\n&L       SETA  &L+1\n         AIF   (&L LT K'&P2L).FLD141\n&P2L     SETC  '&LQ&P2L'               L'ABCDEF\n         AGO   .FLD300\n.FLD143  ANOP\n&P2L     SETC  '&LQ'.'&P2L'(1,&L-1)    L'PSATOLD FROM PSATOLD-PSA\n         AGO   .FLD300\n.FLD180  AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) NE 'X').FLD800\n&P2L     SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1) 12\n&J       SETA  X'4000'+&LAST*X'8000'\n         DC    AL2(0,&P2L,&J)          BLANKS\n&$_FEAT(1) SETB 1                      LITERAL\n         AGO   .LIT99\n.FLD190  ANOP                          %TIME\n&P1S     SETC  '1(14)'                 %TIME\n&$_FEAT(12) SETB 1                     %TIME\n         AGO   .FLD800\n.FLD200  AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD300 NO LENGTH SPECIFIED\n&P2C     SETC  '&SYSLIST(&I,2)'\n         AGO   .FLD220\n.FLD210  ANOP\n&L       SETA  L'&SYSLIST(&I)          T'&P1 = 'G'\n&P2C     SETC  'FL&L'                  T'&P1 = 'G'\n.FLD220  ANOP\n&P2L     SETC  '0&P2C'                 (R2) LENGTH\n         AIF   ('&P2C'(1,1) EQ '(').FLD300\n&P2L     SETC  '&P2C'                  3(R2) LENGTH\n         AIF   ('&P2C'(K'&P2C,1) EQ ')').FLD300\n&P2L     SETC  '0'\n&PACKED  SETB  ('&P2C' EQ 'P')\n         AIF   (&PACKED).FLD300\n&P2L     SETC  '1'\n         AIF   ('&P2C' EQ 'FL1').FLD240\n&P2L     SETC  '3'\n         AIF   ('&P2C' EQ 'FL2' OR '&P2C' EQ 'H').FLD240\n&P2L     SETC  '7'\n         AIF   ('&P2C' EQ 'FL3').FLD240\n&P2L     SETC  '15'\n         AIF   ('&P2C' EQ 'F').FLD240\n&P2L     SETC  '&P2C'                  IMMEDIATE LENGTH, FIELD\n         AGO   .FLD300\n.FLD240  ANOP                          BINARY VARIABLE\n&BIN     SETB  1\n         AGO   .FLD300\n.FLD250  ANOP                          REGISTER CONTENT\n&REG     SETB  1\n.FLD300  AIF   (T'&SYSLIST(&I,3) EQ 'O').FLD800\n&HEX     SETB  ('&SYSLIST(&I,3)' EQ 'X') HEXADECIMAL\n&TRUNC   SETB  ('&SYSLIST(&I,3)' EQ 'T') TRUNCATE\n         AIF   (&HEX OR &TRUNC).FLD800\n&P3C     SETC  '&SYSLIST(&I,3)'\n&P3L     SETC  '248'\n         AIF   ('&P3C' EQ 'YYYY-MM-DD' AND &PACKED).FLD308\n&P3L     SETC  '249'\n         AIF   ('&P3C' EQ 'YYYYMMDD' AND &PACKED).FLD308\n&P3L     SETC  '250'\n         AIF   ('&P3C' EQ 'YY/MM/DD' AND &PACKED).FLD308\n&P3L     SETC  '251'\n         AIF   ('&P3C' EQ 'DD/MM/YY' AND &PACKED).FLD308\n&P3L     SETC  '252'\n         AIF   ('&P3C' EQ 'MM/DD/YY' AND &PACKED).FLD308\n&P3L     SETC  '253'\n         AIF   ('&P3C' EQ 'YYMMDD'   AND &PACKED).FLD308\n&P3L     SETC  '0'\n         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD310\n         MNOTE 8,'EDIT PATTERN NOT ALLOWED WITH CHARACTER STRING'\n         AGO   .FLD310\n.FLD308  ANOP\n&$_FEAT(5) SETB 1                      JDATE\n         AGO   .FLD800\n.FLD310  AIF   ('&P3C'(1,1) EQ 'R').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) EQ 'B').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) NE 'L').FLD311\n&LEFT    SETB  1\n         AGO   .FLD318\n.FLD311  AIF   ('&P3C'(1,1) NE 'Z').FLD312\n&ZERO    SETB  1\n         AGO   .FLD318\n.FLD312  AIF   ('&P3C'(1,1) LT '0').FLD993\n&P3L     SETC  '&P3L'.'&P3C'(1,1)\n.FLD318  ANOP\n&P3C     SETC  '&P3C'(2,K'&P3C-1)     STRIP OFF FIRST CHARACTER\n         AIF   (K'&P3C GT 0).FLD310\n.FLD800  ANOP\n&NUMERIC SETB  (&BIN OR &PACKED OR (&REG AND NOT &HEX))\n&TRUNC   SETB  (&TRUNC OR (&LEFT AND NOT &NUMERIC))\n&LEFT    SETB  (&LEFT AND &NUMERIC)\n         AIF   (NOT &NUMERIC).FLD810\n         AIF   (&LEFT OR '&P3L' NE '0').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH ((R3))\n         AIF   (&REG).FLD810\n&P3L     SETC  '3'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'FL1').FLD810\n&P3L     SETC  '5'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'H' OR '&P2C' EQ 'FL2').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH\n.FLD810  ANOP\n&FLAG    SETA  &LAST*128+&HEX*8+&BIN*4+&PACKED*2+&REG*1\n&LEN2    SETA  &TRUNC*128+&LEFT*128+&ZERO*64+&P3L\n         DC    S(&P1S,&P2L),AL1(&FLAG,&LEN2)\n&$_FEAT(2) SETB (&$_FEAT(2) OR (&REG AND NOT &HEX))   REGISTER (BIN)\n&$_FEAT(3) SETB (&$_FEAT(3) OR (&REG AND &HEX))       REGISTER (HEX)\n&$_FEAT(4) SETB (&$_FEAT(4) OR &PACKED)               PACKED\n&$_FEAT(6) SETB (&$_FEAT(6) OR &BIN)                  BINARY\n&$_FEAT(7) SETB (&$_FEAT(7) OR (&HEX AND NOT &REG))   HEX\n&$_FEAT(8) SETB (&$_FEAT(8) OR &NUMERIC)              BIN,PACKED\n&$_FEAT(9) SETB (&$_FEAT(9) OR (&LEFT AND &NUMERIC))\n&$_FEAT(10) SETB (&$_FEAT(10) OR &ZERO)\n&$_FEAT(11) SETB (&$_FEAT(11) OR &TRUNC)\n&BIN     SETB  0                    RESET FLAGS\n&HEX     SETB  0                    RESET FLAGS\n&REG     SETB  0                    RESET FLAGS\n&PACKED  SETB  0                    RESET FLAGS\n&LEFT    SETB  0                    RESET FLAGS\n&ZERO    SETB  0                    RESET FLAGS\n&TRUNC   SETB  0                    RESET FLAGS\n         AGO   .LIT99\n.FLD990  MNOTE 12,'OPERAND &I HAS TOO MANY SUB-OPERANDS'\n         AGO   .LIT99\n.FLD993  MNOTE 8,'THIRD SUBPARAMETER IS INVALID: ''&SYSLIST(&I,3)'''\n         AGO   .LIT99\n.LIT00   ANOP\n&LIT     SETC  'C&SYSLIST(&I)'\n         AGO   .LIT09\n.LIT01   ANOP\n&LIT     SETC  '&SYSLIST(&I)'\n.LIT09   AIF   (&$_LIT EQ 0).LIT50\n&N       SETA  1\n         ACTR  &$_LIT*3+200\n.LIT10   AIF   (&N GT &$_LIT).LIT50                  LOOP\n&L       SETA  &N+1000                               LOOP\n         AIF   ('&LIT' EQ '&$_LITS(&N)').LIT80 LOOP\n&N       SETA  &N+1                                  LOOP\n         AGO   .LIT10                                LOOP\n.LIT50   ANOP\n&$_LIT   SETA  &$_LIT+1\n&$_LITS(&$_LIT) SETC '&LIT'\n&L       SETA  &$_LIT+1000\n.LIT80   ANOP\n&J       SETA  X'4000'+&LAST*X'8000'\n         DC    AL2($LIT&L-*,&LQ.$LIT&L,&J)\n&$_FEAT(1) SETB 1                      LITERAL\n.LIT99   ANOP\n&I       SETA  1+&I                              LOOP\n         AIF   (&I LE N'&SYSLIST).LOOP1          LOOP\n&SYSLOC  LOCTR\n         AGO   .MEND\n.ERR1    MNOTE 12,'AT LEAST ONE INPUT FIELD MUST BE SPECIFIED'\n         AGO   .MEND\n.ERR2    MNOTE 12,'INVALID OUTPUT AREA SPECIFICATION'\n         AGO   .MEND\n.GENL    ANOP\n&STRBLANKS SETA 2\n         AIF   ('&SYSLIST(2)' NE 'FULL').GENL1F\n&$_FEAT(1) SETB 1,1,1,1,1,1,1,1,1,1,1,1\n.GENL1F  ANOP\n&ALLFEAT SETC  '&$_FEAT(1)&$_FEAT(2)&$_FEAT(3)&$_FEAT(4)'\n&ALLFEAT SETC  '&ALLFEAT&$_FEAT(5)&$_FEAT(7)&$_FEAT(6)&$_FEAT(8)'\n&ALLFEAT SETC  '&ALLFEAT&$_FEAT(9)&$_FEAT(10)&$_FEAT(11)&$_FEAT(12)'\n&STR     SETC  '&STRING_MACRO_VERSION'\n         MNOTE *,'STRING/XA R&STR - FEATURES GENERATED: &ALLFEAT'\n         AIF   (&$_LIT EQ 0).GENL3\n$LITERAL LOCTR\n.GENL2   ANOP                                LOOP\n&N       SETA  &N+1                          LOOP\n&I       SETA  &N+1000                       LOOP\n$LIT&I   DC    &$_LITS(&N)\n         AIF   (&N LT &$_LIT).GENL2          LOOP\n.GENL3   ANOP\n         AIF   ('&SYSLIST(2)' EQ 'NOCSECT').GENL8\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL4L\n@STRING  CSECT\n@STRING  RMODE ANY\n         AGO   .GENL4X\n.GENL4L  ANOP\n@STRING@ LOCTR\n@STRING  DS    0H                      ALIGNMENT\n.GENL4X  ANOP\n@00      EQU   0                       WORK REGISTER\n@01      EQU   1                       WORK REGISTER\n@02      EQU   2                       WORK REGISTER\n@03      EQU   3                       WORK REGISTER\n@04      EQU   4                       WORK REGISTER\n@05      EQU   5                       WORK REGISTER\n@06      EQU   6                       WORK REGISTER\n@13      EQU   13                      CALLER'S SAVE AREA\n@14      EQU   14                      WORK REGISTER\n@15      EQU   15                      BASE REG\n         SAVE  (14,6),,'@STRING/XA R&STRING_MACRO_VERSION &ALLFEAT'\n         USING @STRING,@15\n         USING @STRSAVE,@13\n         LR    @06,@14                 KEEP ADDRESS OF PARMLIST OFFSET\n         USING @STRPARM,@06\n         SLR   @00,@00\n         ICM   @00,B'0011',0(@06)      PICK UP PARM LIST OFFSET\n         ALR   @06,@00                 GET PARM LIST ADDRESS\n         LA    @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         LR    @04,@02                 KEEP ADDRESS OF \"INTO\" FIELD\n         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO\n         OI    0(@04),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         LA    @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         LR    @05,@02                 KEEP LENGTH OF \"INTO\" FIELD\n         CR    @05,@04                 END ADDRESS?\n         BL    @STR282                 NO, JUMP\n         SR    @05,@04                 CALCULATE LENGTH\n@STR282  ST    @04,8(,@13)             SAVE ADDRESS FOR LATER\n         LA    @06,@STRFLAG            POINT TO 1ST FIELD DESC\n@STR310  EQU   *\n         AIF   (NOT &$_FEAT(1)).FEAT1A\n         TM    @STRFLAG,@STRLIT        IS THIS A LITERAL?\n         BO    @STR372                 YES, JUMP\n.FEAT1A  ANOP\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(3)).FEAT23A\n         TM    @STRFLAG,@STRREG        REGISTER?\n         BO    @STR323                 YES, JUMP\n.FEAT23A ANOP\n         AIF   (NOT &$_FEAT(12)).FEAT12A\n         CLI   @STRSCON,X'E0'          IS IT %TIME ?\n         BE    @STR378                 YES, JUMP\n.FEAT12A ANOP\n         LA    @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         AIF   (&$_FEAT(9)).FEAT9E1    (LEFT JUSTIFICATION, NUMERIC)\n         LTR   @03,@02                 KEEP/TEST LENGTH\n         BZ    @STR398                 ZERO LENGTH, DO NOT EDIT\n         AGO   .FEAT9E2\n.FEAT9E1 LTR   @03,@02                 KEEP/TEST LENGTH\n         BP    @STR313                 LENGTH POSITIVE, JUMP\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR398                 NO, ZERO LENGTH IS NOT OK\n@STR313  EQU   *\n.FEAT9E2 ANOP\n         LA    @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         L     @14,12(,@13)            RESTORE ADDR OF STRING MACRO\n         CLI   0(@02),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         CR    @03,@02                 END ADDRESS?\n         BL    @STR314                 NO, JUMP\n         LA    @00,X'0080'             PSA ADDRESS\n         CLR   @02,@00                 PSA REFERENCE?\n         BL    @STR314                 YES, JUMP\n         SR    @03,@02                 CALCULATE LENGTH\n@STR314  EQU   *\n         AIF   (NOT &$_FEAT(6)).FEAT6A\n         TM    @STRFLAG,@STRBIN        BINARY FIELD?\n         BO    @STR328                 YES, JUMP\n.FEAT6A  ANOP\n         AIF   (NOT &$_FEAT(4)).FEAT4A\n         TM    @STRFLAG,@STRPACK       PACKED FIELD?\n         BO    @STR351                 YES, JUMP\n.FEAT4A  ANOP\n         AIF   (NOT &$_FEAT(7)).FEAT7A\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BO    @STR376                 YES, JUMP\n.FEAT7A  ANOP\n         AIF   (NOT &$_FEAT(11)).FEAT11A\n         CLI   @STRLEN2,@STRLEFT       CHECK JUSTIFICATION, OUTPUT LEN\n         BNE   @STR390                 NO STRING TRUNCATION, JUMP\n         LA    @01,0(@03,@02)          FIRST BYTE AFTER FIELD\n@STR318  BCTR  @01,0                   DOWN 1 BYTE                 LOOP\n         CLI   0(@01),C' '             IS IT A SPACE ?             LOOP\n         BNE   @STR390                 LAST NON-BLANK BYTE         LOOP\n         BCT   @03,@STR318             LOOP UNTIL 1ST NON-BLANK    LOOP\n         B     @STR398                 BLANK FIELD, DO NOT EDIT\n         AGO   .FEAT11B\n.FEAT11A ANOP\n         AIF (&$_FEAT(2)+&$_FEAT(3)+&$_FEAT(4)+&$_FEAT(6) EQ 0).FEAT11B\n         B     @STR390                 EDIT\n.FEAT11B ANOP\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(3)).FEAT23B\n@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT\n@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31\n         EX    @01,@STR323L            COPY R7-R13 INTO R0\n         CLI   @STRSCON+1,@06+1        IS THIS R7-R13?\n         BNL   @STR323T                YES, JUMP\n         SLL   @01,2                   R1= 000000BB BASE * 4\n         L     @00,20(@01,@13)         PICK UP VALUE FOR R0-R6\n@STR323T EQU   *\n         AIF   (NOT &$_FEAT(3)).FEAT3R REG,HEX\n         AIF   (NOT &$_FEAT(2)).FEAT2H REG,BIN\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BNO   @STR330                 NO, EDIT FWD\n.FEAT2H  ANOP\n         STCM  @00,B'1111',@STRDWD-1   STORE IT FOR CVD/UNPK\n         LA    @03,8                   OUTPUT LENGTH\n         B     @STR376X                EDIT IN HEX\n.FEAT3R  ANOP\n         AIF   (NOT &$_FEAT(6)).FEAT23B\n         B     @STR330                 EDIT R0\n.FEAT23B ANOP\n         AIF   (NOT &$_FEAT(6)).FEAT6B\n@STR328M ICM   @00,*-*,0(@02)          **EXECUTED INSTRUCTION**\n@STR328  SLR   @00,@00\n         EX    @03,@STR328M            LOAD THE BINARY VARIABLE\n.FEAT6B  ANOP\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(6)).FEAT6C\n@STR330  CVD   @00,@STRDWD             CONVERT VALUE TO DECIMAL\n         AIF   (NOT &$_FEAT(4)).FEAT6C\n         B     @STR361                 EDIT DWD\n.FEAT6C  ANOP\n         AIF   (NOT &$_FEAT(4)).FEAT4B\n@STRZAP  ZAP   @STRDWD,0(*-*,@02)      MOVE TO @STRDWD\n@STR351  LR    @03,@02                 FIRST BYTE OF PACKED FIELD\n         BALR  @14,0\n         TM    0(@03),X'0C'            IS THIS THE SIGN BYTE?\n         LA    @03,1(,@03)              (NEXT BYTE)\n         BNOR  @14                     NO, LOOP MORE\n         SLR   @03,@02                 GET LENGTH OF PACKED FIELD\n         BCTR  @03,0\n         EX    @03,@STRZAP             EXECUTE ZAP\n         AIF   (NOT &$_FEAT(5)).FEAT4B\n         CLI   @STRLEN2,248            JULIAN-TO-YYMMDD CONV?\n         BNL   @STR375                 YES, JUMP\n.FEAT4B  ANOP                          PACKED\n         AIF   (NOT &$_FEAT(8)).FEAT8B\n@STR361  IC    @00,@STRLEN2            OUTPUT LENGTH\n         LA    @03,X'003F'             MASK FOR \"AND\"\n         NR    @03,@00                 OUTPUT LENGTH\n         MVC   @STRWK16(16),@STRMASK   EDIT MASK\n         AIF   (NOT &$_FEAT(9)).FEAT9B\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR367                 NO, JUMP\n         LA    @01,@STRWK16+15         PREVENT BAD R1\n         EDMK  @STRWK16(16),@STRDWD    ZONED DECIMAL\n         LR    @02,@01                 FIRST STRING POSITION\n         LTR   @03,@03                 CHECK OUTPUT LENGTH\n         BNZ   @STR363                 JUMP IF NOT ZERO\n         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n@STR363  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR364                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR364  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         LR    @00,@04                 POINTER IN OUTPUT LINE\n         LR    @01,@03                 LENGTH WITH PADDING\n         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR392                 MOVE FIELD TO OUTPUT LINE\n@STR367  EQU   *\n.FEAT9B  ANOP\n         AIF   (NOT &$_FEAT(10)).FEAT10B\n         TM    @STRLEN2,@STRZERO       LEADING ZEROES REQ'D?\n         BNO   @STR368                 NO, JUMP\n         MVI   @STRWK16,C'0'           YES, CHANGE X'40' TO C'0'\n@STR368  EQU   *\n.FEAT10B ANOP\n         ED    @STRWK16(16),@STRDWD    ZONED DECIMAL\n         LA    @02,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @02,@03                 FIRST STRING POSITION\n.FEAT8B  ANOP\n         AIF   (NOT &$_FEAT(1)).FEAT1B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR372  SLR   @02,@02\n         ICM   @02,B'0011',@STRSCON    LOAD LITERAL OFFSET\n         BZ    @STR372L                BLANKS, JUMP\n         LA    @02,@STRSCON(@02)       CONVERT OFFSET TO FULL ADDRESS\n@STR372L LH    @03,@STRFLEN            GET LITERAL LENGTH\n.FEAT1B  ANOP\n         AIF   (NOT &$_FEAT(5)).FEAT5F\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR375  LA    @00,248                 MASK FOR 'SLR'\n         SLR   @01,@01\n         IC    @01,@STRLEN2            248-255\n         SLR   @01,@00                 000-007\n         LA    @00,12                  L'@STR375W\n         MR    @00,@00                 COMPUTE OFFSET\n         LAE   @01,@STR375W(@01)       ENTRY IN \"TR\" MASK TABLE\n         SLR   @03,@03\n         IC    @03,0(,@01)             LENGTH OF DATE (6 OR 8)\n         ZAP   @STRDWD,@STRDWD         DATE=0000000?               @JDT\n         BNZ   @STR375B                NO, JUMP                    @JDT\n@STR375Z LAE   @02,@STRBLANKS          WORK AREA\n&STRBLANKS SETA 8                      WE NEED AT LEAST 8 BLANKS\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n@STR375W DC    AL1(10,C'-',0,1,2,3,8,4,5,8,6,7) YYYY-MM-DD   248\n         DC    AL1(8,C' ',0,1,2,3,4,5,6,7,8,8)  YYYYMMDD//   249\n         DC    AL1(8,C'/',2,3,8,4,5,8,6,7,8,8)  YY/MM/DD//   250\n         DC    AL1(8,C'/',6,7,8,4,5,8,2,3,8,8)  DD/MM/YY//   251\n         DC    AL1(8,C'/',4,5,8,6,7,8,2,3,8,8)  MM/DD/YY//   252\n         DC    AL1(6,C' ',2,3,4,5,6,7,8,8,8,8)  YYMMDD       253\n@STR375T DC    P'59,31,29,31,30,31,30,31,31,30,31,30,31'\n@STR375B CLI   @STRDWD+4,X'01'         YEAR 2000 OR ABOVE?\n         BH    @STR375C                CC>01, JUMP (MUST BE 19 OR 20)\n         MVI   @STRDWD+4,X'20'         CC=01, CHANGE TO CC=20\n         BE    @STR375C                CC=01, USE CC=20\n         CLI   @STRDWD+4+1,X'50'       YY<50?\n         BL    @STR375C                YES, USE CC=20\n         MVI   @STRDWD+4,X'19'         NO, FORCE CC=19\n@STR375C UNPK  @STRWK16(5),@STRDWD+4(3) CCYY?\n         ZAP   @STRDWD+1(2),@STR375T+9(1) INIT MONTH COUNTER\n         LAE   @02,@STR375T            TABLE OF MONTHS (NUMBER OF DAYS)\n         TM    @STRDWD+4+1,X'01'       ODD YEARS\n         BO    @STR375N                  AREN'T LEAP YEARS\n         TM    @STRDWD+4+1,X'12'       ZEROES IN 1980, ALL ONES IN 1992\n         BNM   @STR375L                MIXED IN 1982/1990\n@STR375N CP    @STRDWD+4+2(2),@STR375T ARE WE PAST FEB 28 (DDD>59) ?\n         BNH   @STR375L                NO, JUMP\n         AP    @STRDWD+4+2(2),@STR375T+3(1) ADD 1 (FROM 31) TO DDD\n@STR375L AP    @STRDWD+1(2),@STR375T+3(1)   ADD 1 (FROM 31) TO MONTH\n         LA    @02,2(,@02)             NEXT ENTRY IN \"MONTHS\" TABLE\n         SP    @STRDWD+4+2(2),0(2,@02) SUB DAYS-IN-MONTH FROM DDD\n         BP    @STR375L\n         AP    @STRDWD+4+2(2),0(2,@02) UNDO LAST \"SP\" INSTRUCTION\n         UNPK  @STRWK16+4(2),@STRDWD+1(2) FYFYFYFY,FMCM??\n         UNPK  @STRWK16+6(2),@STRDWD+6(2) FYFYFYFY,FMCMFDCD\n         MVZ   @STRWK16+1(7),@STRWK16     FYFYFYFY,FMCMFDCD\n         MVC   @STRWK16+8(1),1(@01)    SEPARATOR\n         LAE   @02,@STRWK16+9          WORK AREA\n         MVC   0(10,@02),2(@01)        MOVE CORRESPONDING MASK\n         TR    0(10,@02),@STRWK16      CONVERT DATE TO THE RIGHT FORMAT\n.FEAT5F  ANOP                          JDATE\n         AIF   (NOT &$_FEAT(7)).FEAT7B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR376M MVC   @STRDWD-1(*-*),0(@02)   PREVENT S0C4 IN UNPK\n@STR376  LA    @00,8                   MAX LENGTH\n         CLR   @03,@00                 CHECK LENGTH\n         BNH   @STR376B                JUMP IF LE 8\n         LR    @03,@00                 TRUNCATE TO MAXIMUM LENGTH\n@STR376B LR    @01,@03                 INPUT LENGTH\n         BCTR  @01,0\n         EX    @01,@STR376M            MOVE DATA TO SAFE STORAGE\n         ALR   @03,@03                 OUTPUT LENGTH\n         AGO   .FEAT37B\n.FEAT7B  ANOP\n         AIF   (NOT &$_FEAT(3)).FEAT37C\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n.FEAT37B ANOP\n@STR376X LA    @02,@STRWK16            WORK AREA\n         UNPK  0(9,@02),@STRDWD-1(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         UNPK  8(9,@02),@STRDWD+3(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         TR    0(16,@02),@STRHEXT-240  =C'0123456789ABCDEF'\n.FEAT37C ANOP\n         AIF   (NOT &$_FEAT(12)).FEAT12B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STRTIME DC    X'4021207A20207A20207A20204000'    0X.XX.XX.XX\n@STR378  TIME  DEC                     GET HHMMSSHH\n         L     @15,16(,@13)            RESTORE BASE REG\n         ST    @00,@STRDWD             STORE HHMMSSHH\n         MVC   @STRWK16(13),@STRTIME   MOVE EDIT MASK\n         ED    @STRWK16(13),@STRDWD    EDIT HH:MM:SS:HH\n         LA    @02,@STRWK16+1          WORK AREA\n         LA    @03,12                  HH:MM:SS:HH+ SPACE\n.FEAT12B ANOP\n@STR390  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR391                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR391  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         LR    @00,@04                 POINTER IN OUTPUT LINE\n         LR    @01,@03                 PASS REMAINING LENGTH\n         LTR   @02,@02                 BLANKS?\n         BNZ   @STR392                 NO, JUMP\n         SLR   @03,@03                 YES, ZERO LENGTH\n@STR392  ICM   @03,B'1000',@STRBLANKS  PAD WITH BLANKS\n         MVCL  @00,@02                 MOVE FIELD TO OUTPUT LINE\n         LR    @04,@00                 NEW POINTER IN OUTPUT LINE\n@STR398  TM    @STRFLAG,@STRLAST       TEST LAST-ENTRY INDICATOR\n         LA    @06,@STRNEXT            BUMP UP TO NEXT ENTRY\n         BNO   @STR310                 PROCESS NEXT ENTRY\n         LA    @14,2                   INCREMENT\n         AL    @14,12(,@13)            RETURN ADDRESS\n         SLR   @01,@01                 SET UP R1 FOR PADDING\n         ICM   @01,B'1000',@STRBLANKS  SET UP R1 FOR PADDING\n         LR    @15,@04                 CURRENT POINTER IN OUTPUT FIELD\n         SL    @15,8(,@13)             CALCULATE LENGTH USED\n         MVCL  @04,@00                 PAD WITH BLANKS\n         LM    @00,@06,20(@13)         RESTORE WORK REGISTERS\n         STM   @06+1,@13-1,48(@13)     MAKE SAVE AREA LOOK NORMAL\n         OI    15(@13),1               SIMULATE \"T\" OPTION OF RETURN\n         BSM   0,@14                   RETURN TO CALLER\n         AIF   (NOT (&$_FEAT(3) OR &$_FEAT(7))).FEAT37T\n@STRHEXT DC    C'0123456789ABCDEF'     HEX-TO-EBCDIC CONVERSION\n.FEAT37T ANOP\n         AIF   (NOT &$_FEAT(8)).FEAT8T\n@STRMASK DC    X'4020202020202020,2020202020202120'\n.FEAT8T  ANOP\n@STRS2A  SLR   @00,@00\n         ICM   @00,B'0011',0(@02)      R0 = 0000BDDD\n         SRDL  @00,12                  R0 = 0000000B, R1= DDD.....\n         SRL   @01,20                  R1 = 00000DDD (DISPLACEMENT)\n         CLI   0(@02),(@06+1)*16       R7-R13?\n         BL    @STRS2A5                NO, JUMP\n         LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)\n         EX    @02,@STRS2A4            ADD BASE REG VALUE TO DISPL\n         B     @STRS2A7                CLEAN UP ADDRESS\n@STRS2A4 LA    @02,0(*-*,@01)          ADD BASE REG VALUE TO DISPL\n@STRS2A5 LTR   @02,@00                 IS R0 THE BASE REG?\n         BNZ   @STRS2A6                NO, JUMP\n         LTR   @02,@01                 IS THIS A PSA ADDRESS?\n         BNZR  @14                     YES, GOBACK\n@STRS2A6 SLL   @02,2                   R2= 000000BB BASE * 4\n         L     @02,20(@02,@13)         PICK UP BASE REG VALUE\n         LA    @02,0(@02,@01)          ADD BASE REG VALUE TO DISPL\n@STRS2A7 TM    12(@13),X'80'           CALLER'S IN AMODE31?\n         BOR   @14                     YES, GOBACK\n         ICM   @02,B'1000',16          NO, ZERO HI-ORDER BYTE\n         BR    @14\n&STR     SETC  '&STRBLANKS'\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL7L\n@STRBLANKS DC  CL((((*+&STRBLANKS+7-@STRING)/8)*8)-(*-@STRING))' '\n         AGO   .GENL7X\n.GENL7L  ANOP\n@STRBLANKS DC  CL&STRBLANKS.' '\n.GENL7X  ANOP\n@STRING_SIZE EQU *-@STRING             SIZE OF GENERATED CSECT\n@STRSAVE DSECT                         24-BYTE WORK AREA\n         DS    A(0,@STRSAVE,@STRSAVE,14,15,0,1,2,3,4,5,6)\n@STRWK16 DS    F'7,8,9,10'             WORK AREA\n@STRDWD  DS    D'1112'                 WORK AREA\n@STRPARM DSECT\n@STRSCON DS    S                   +0  FIELD ADDRESS\n@STRFLEN DS    S                   +2  FIELD LENGTH\n@STRFLAG DS    B                   +4  FORMAT, FLAGS\n@STRLAST EQU   X'80'                     LAST ENTRY\n@STRLIT  EQU   X'40'                     LITERAL, @STRSCON IS AN OFFSET\n@STRJDT  EQU   X'20'                     JULIAN DATE\n@STRHEX  EQU   X'08'                     HEXADECIMAL\n@STRBIN  EQU   X'04'                     BINARY\n@STRPACK EQU   X'02'                     PACKED\n@STRREG  EQU   X'01'                     REGISTER\n@STRLEN2 DS    B                   +5  FORMAT, OUTPUT LENGTH\n@STRLEFT EQU   X'80'                     LEFT JUSTIFICATION\n@STRZERO EQU   X'40'                     LEADING ZEROES\n@STRNEXT EQU   *                   +6\n$LTORG   LOCTR\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL9L\n         CNOP  0,4\n$STRING  BALR  @15,0                   LOCAL BASE\n         L     @15,6(,@15)             ROUTINE ADDRESS           00\n         BSM   0,@15                   GO THERE WITH AMODE31     04\n         AGO   .GENL9\n.GENL8   ANOP                          GENERATE,NOCSECT\n         EXTRN @STRING\n$LTORG   LOCTR\n         CNOP  0,4\n$STRING  BALR  15,0                    LOCAL BASE\n         L     15,6(,15)               ROUTINE ADDRESS           00\n         BSM   0,15                    GO THERE WITH AMODE31     04\n.GENL9   ANOP\n         DC    A(@STRING+X'80000000')  ROUTINE ADDRESS           06\n         AGO   .MEND\n.GENL9L  ANOP                          GENERATE,LOCTR\n$STRING  BAL   R15,=X'4AF0,F000,07FF'\n         DC    Y(@STRING-*)            OFFSET TO @STRING ROUTINE\n.MEND    AIF   ('&PRINT' EQ 'NOGEN').MEND99\n         POP   PRINT\n.MEND99  MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VTC@DETB": {"ttr": 12036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x00\\x00\\x94!_\\x00\\x99\\x01\\x8f\\x14C\\x00\\x1e\\x00!\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1994-08-03T00:00:00", "modifydate": "1999-01-18T14:43:00", "lines": 30, "newlines": 33, "modlines": 0, "user": "SYS0007"}, "text": "         MACRO\n         VTC@DETB\nDET_BUFF DSECT                          .MAPPING FOR BUFFER AREA\nDET_DSN  DS    CL44                     .DATA SET NAME\nDET_SEQ  DS    H                        .FILE SEQ NUMBER\nDET_BLKS DS    H                        .BLKSIZE\nDET_LREC DS    H                        .LRECL\nDET_CYLA DS    H                        .CYL ALLOC.\nDET_TRKA DS    H                        .TRACK ALLOC.\nDET_EXT  DS    H                        .# OF EXTENTS\nDET_REFY DS    H                        .LAST REF DATE\nDET_REFM DS    H                        .LAST REF DATE\nDET_REFD DS    H                        .LAST REF DATE\nDET_CREY DS    H                        .CREATION DATE\nDET_CREM DS    H                        .CREATION DATE\nDET_CRED DS    H                        .CREATION DATE\nDET_EXPY DS    H                        .EXPIRY DATE\nDET_EXPM DS    H                        .EXPIRY DATE\nDET_EXPD DS    H                        .EXPIRY DATE\nDET_DSOI DS    0CL4                     .DSORG\nDET_DSO  DS    CL2                      .DSORG\nDET_DSO1 DS    CL2                      .DSORG\nDET_RECI DS    0CL3                     .RECFM\nDET_REC1 DS    CL1                      .RECFM\nDET_REC2 DS    CL1                      .RECFM\nDET_REC3 DS    CL1                      .RECFM\nDET_RACF DS    CL3                      .RACF INDICATOR\n         DS    0H                       .ALIGNMENT OF DATA AREA\nDET_LEN  EQU   *-DET_BUFF               .LENGTH OF WORKAREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTC@HDRB": {"ttr": 12038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x00\\x94!_\\x00\\x96\\x13\\x0f\\x12A\\x00\\x1d\\x006\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1994-08-03T00:00:00", "modifydate": "1996-05-09T12:41:00", "lines": 29, "newlines": 54, "modlines": 0, "user": "SYS0007"}, "text": "         MACRO\n         VTC@HDRB\nHDR_BUFF DSECT                          .MAPPING FOR BUFFER AREA\nHDR_UCBA DS    F                        .STORAGE AREA FOR UCB ADDRESS\nHDR_DEVS DS    XL4                      .NUMCYL\nHDR_TRKS DS    XL2                      .TRKSIZE\nHDR_DTRK DS    H                        .DSCB/TRK\nHDR_DIRT DS    H                        .DIR.BLKS/TRK\nHDR_NUMD DS    H                        .NUM DSCBS\nHDR_AVAD DS    H                        .AVAIL DSCBS\nHDR_NUMA DS    XL2                      .NUMALT\nHDR_ALTT DS    XL4                      .ALTERNATE TRACK\nHDR_TRKT DS    H                        .AVAILABLE - TOTAL TRKS\nHDR_CYLF DS    H                        .AVAILABLE - FULL CYLS\nHDR_TRKF DS    H                        .AVAILABLE - FULL TRKS\nHDR_EXTF DS    H                        .AVAILABLE - # EXTENTS\nHDR_CYLC DS    H                        .CONTIGUOUS CYL\nHDR_TRKC DS    H                        .CONTIGUOUS TRK\nHDR_FRAG DS    H                        .FRAGMENTATION INDEX\nHDR_VIRS DS    H                        .FREE VIRS\nHDR_CYLA DS    H                        .CYLS IN VTOC\nHDR_TRKA DS    H                        .TRKS IN VTOC\nHDR_VTOC DS    XL8                      .VTOC LOCATION\nHDR_SMSI DS    H                        .SMS INDICATOR\nHDR_IDX1 DS    CL30                     .INDEXED ?\nHDR_IDX2 DS    CL30                     .INDEXED ?\n         DS    0H                       .ALIGNMENT OF DATA AREA\nHDR_LEN  EQU   *-HDR_BUFF               .LENGTH OF WORKAREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTC@MAPB": {"ttr": 12040, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95\\x11\\x0f\\x00\\x95\\x11\\x0f\\x108\\x00\\x0c\\x00\\x0b\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-04-20T00:00:00", "modifydate": "1995-04-20T10:38:00", "lines": 12, "newlines": 11, "modlines": 0, "user": "SYS0007"}, "text": "         MACRO\n         VTC@MAPB\nMAP_BUFF DSECT                          .MAPPING FOR MAP AREA\nMAP_VTOC DS    CL8                      .VTOC LOCATION\nMAP_CYLA DS    H                        .# CYLS\nMAP_TRKA DS    H                        .# TRKS\nMAP_EXT  DS    H                        .# OF EXTENTS\nMAP_EXTN DS    H                        .EXTENT NUMBER\nMAP_DSN  DS    CL44                     .DATA SET NAME\n         DS    0H                       .ALIGNMENT OF DATA AREA\nMAP_LEN  EQU   *-MAP_BUFF               .LENGTH OF WORKAREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC@ALL": {"ttr": 12042, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01Q\\x00\\x00\\x00\\x95\\x12\\x8f\\x00\\x99\\x18?\\t'\\x02`\\x02P\\x00\\x00\\xe2\\xe8\\xe2\\xf0\\xf0\\xf1\\xf1@@@\"", "ispf": {"version": "01.81", "flags": 0, "createdate": "1995-05-08T00:00:00", "modifydate": "1999-07-02T09:27:00", "lines": 608, "newlines": 592, "modlines": 0, "user": "SYS0011"}, "text": "/* **************************************************************** */\n/* * Print a list of all volumes & a VTOC listing per volume      * */\n/* **************************************************************** */\n\n#pragma runopts (PLIST(MVS))         /* MVS type parameter received */\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n#pragma linkage (VTOC_UCB, OS)       /* Get all online DASD devices */\n#pragma linkage (VTOC_HDR, OS)       /* Format 4 DSCB & free space  */\n#pragma linkage (VTOC_LST, OS)       /* Get a DSCB & map list       */\n\n/* **************************************************************** */\n/* * UCB info layout returned from assembler program.             * */\n/* **************************************************************** */\ntypedef struct _ucb_inf              /* table with volser,type & UCB*/\n{\n  char ucb_vols ??( 6 ??);           /* length of volser table entry*/\n  char z001;                         /* binary zeroes ............. */\n  char ucb_utyp;                     /* hex unit type               */\n  unsigned short int ucb_addr;       /* UCB address of volser       */\n} struc_ucb_inf;\n\n/* **************************************************************** */\n/* * VTOC header info layout returned from assembler program.     * */\n/* *      (DSCB4 and free space information)                      * */\n/* **************************************************************** */\ntypedef struct _hdr_inf              /* table with header info      */\n{\n  unsigned long  int hdr_ucba;       /* storage area for UCB address*/\n  unsigned short int hdr_numc;       /* numcyl                      */\n  unsigned short int hdr_tcyl;       /* # trks/cyl                  */\n  unsigned short int hdr_trks;       /* trksize                     */\n  unsigned short int hdr_dtrk;       /* dscb/trk                    */\n  unsigned short int hdr_dirt;       /* dir.blks/trk                */\n  unsigned short int hdr_numd;       /* num dscbs                   */\n  unsigned short int hdr_avad;       /* avail dscbs                 */\n  unsigned short int hdr_numa;       /* numalt                      */\n  unsigned short int hdr_nexc;       /* nextalt - cyl               */\n  unsigned short int hdr_next;       /* nextalt - trk               */\n  unsigned short int hdr_trkt;       /* available - total trks      */\n  unsigned short int hdr_cylf;       /* available - full cyls       */\n  unsigned short int hdr_trkf;       /* available - full trks       */\n  unsigned short int hdr_extf;       /* available - # extents       */\n  unsigned short int hdr_cylc;       /* contiguous cyl              */\n  unsigned short int hdr_trkc;       /* contiguous trk              */\n  unsigned short int hdr_frag;       /* fragmentation index         */\n  unsigned short int hdr_virs;       /* free virs                   */\n  unsigned short int hdr_cyla;       /* cyls in VTOC                */\n  unsigned short int hdr_trka;       /* trks in VTOC                */\n  unsigned short int hdr_vtcs;       /* VTOC location - start cyl   */\n  unsigned short int hdr_vtts;       /* VTOC location - start trk   */\n  unsigned short int hdr_vtce;       /* VTOC location - end cyl     */\n  unsigned short int hdr_vtte;       /* VTOC location - end trk     */\n  unsigned short int hdr_smsi;       /* SMS indicator               */\n  char  hdr_idx  ??( 60 ??);         /* indexed ?                   */\n} struc_hdr_inf;\n\n/* **************************************************************** */\n/* * Detail line info layout returned from assembler program.     * */\n/* **************************************************************** */\ntypedef struct _dsn_inf              /* table with detail line info */\n{\n  char det_dsn  ??( 44 ??);          /* data set name               */\n  unsigned short int det_seq;        /* file seq number             */\n  unsigned short int det_blks;       /* block size                  */\n  unsigned short int det_lrec;       /* lrecl                       */\n  unsigned short int det_cyla;       /* cyls allocated              */\n  unsigned short int det_trka;       /* tracks allocated            */\n  unsigned short int det_ext;        /* # of extents                */\n  unsigned short int det_refy;       /* last ref date               */\n  unsigned short int det_refm;       /* last ref date               */\n  unsigned short int det_refd;       /* last ref date               */\n  unsigned short int det_crey;       /* creation date               */\n  unsigned short int det_crem;       /* creation date               */\n  unsigned short int det_cred;       /* creation date               */\n  unsigned short int det_expy;       /* expiry date                 */\n  unsigned short int det_expm;       /* expiry date                 */\n  unsigned short int det_expd;       /* expiry date                 */\n  char det_dso  ??( 4 ??) ;          /* data set organization       */\n  char det_recf ??( 3 ??) ;          /* record format               */\n  char det_racf ??( 3 ??) ;          /* racf indicator              */\n} struc_dsn_inf;\n\n/* **************************************************************** */\n/* * Map line info layout returned from assembler program.        * */\n/* **************************************************************** */\ntypedef struct _map_inf              /* table for allocation map    */\n{\n  unsigned short int map_vtcs;       /* VTOC location - start cyl   */\n  unsigned short int map_vtts;       /* VTOC location - start trk   */\n  unsigned short int map_vtce;       /* VTOC location - end cyl     */\n  unsigned short int map_vtte;       /* VTOC location - end trk     */\n  unsigned short int map_cyla;       /* # cyls                      */\n  unsigned short int map_trka;       /* # trks                      */\n  unsigned short int map_ext;        /* # of extents                */\n  unsigned short int map_extn;       /* extent number               */\n  char map_dsn  ??( 44 ??);          /* DSN                         */\n} struc_map_inf;\n\n/* **************************************************************** */\n/* * Function definitions                                         * */\n/* **************************************************************** */\nint comp_dsn (const void *, const void *); /* compare dsn (char)    */\nint comp_map (const void *, const void *); /* compare structure map */\nvoid calc_space (unsigned short int);      /* calculate free space  */\nvoid pr_free ();                           /* print free space info */\nvoid pr_det_hdr (char ??( 6 ??));          /* print detail page hdr */\nvoid pr_map_hdr (char ??( 6 ??), unsigned int);  /* map page header */\nvoid pr_map_det (unsigned short int, unsigned short int, /* map     */\n                 unsigned short int, unsigned short int, /*  detail */\n                 unsigned short int, unsigned short int, /* map     */\n                 unsigned short int, unsigned short int, /*  detail */\n                 char ??( 44 ??) );              /* map detail line */\n\n/* **************************************************************** */\n/* * Global variables - free space info and output files          * */\n/* **************************************************************** */\nunsigned short int FreeVtcs;         /* VTOC location - start cyl   */\nunsigned short int FreeVtts;         /* VTOC location - start trk   */\nunsigned short int FreeVtce;         /* VTOC location - end cyl     */\nunsigned short int FreeVtte;         /* VTOC location - end trk     */\nunsigned short int FreeExt;          /* # of extents                */\nunsigned short int FreeExtn;         /* extent number               */\nsigned short int FreeCyla;           /* # unallocated cyls          */\nsigned short int FreeTrka;           /* # unallocated trks          */\nFILE * outp01;                       /* define file                 */\nFILE * outp02;                       /* define file                 */\n\n/* **************************************************************** */\n/* * Main routine for VTOC listing                                * */\n/* **************************************************************** */\nint main(int arg_count,char *arg_list ??( ??) )\n{\n  struc_ucb_inf tmp_v ??( 1 ??);              /* Temp. work stor.   */\n  struc_ucb_inf tab_v ??( 1000 ??);           /* max. 1000 VOLSER's */\n  struc_ucb_inf *ptr_v, *ptr_vv;              /*         & pointers */\n  char system_id ??( 9 ??);                   /* system id          */\n  char dev_t ??( 5 ??);                       /* device type - char */\n\n  struc_hdr_inf tab_h;                        /* header information */\n  struc_hdr_inf *ptr_h;                       /*         & pointer  */\n  char sms_ind ??( 18 ??);                    /* SMS indicator      */\n\n  struc_dsn_inf tab_d ??( 3000 ??);           /* max. 3000 DSN's    */\n  struc_dsn_inf *ptr_d;                       /*         & pointer  */\n  unsigned int len_d, tot_d;                  /* length & amount    */\n\n  struc_map_inf tmp_m ??( 1 ??);              /* Temp. work stor.   */\n  struc_map_inf tab_m ??( 9000 ??);           /* max. 9000 ext's    */\n  struc_map_inf *ptr_m, *ptr_mm;              /*         & pointers */\n  unsigned int len_m, tot_m;                  /* length & amount    */\n\n  unsigned int ctr_lpp, ctr_dsn, ctr_pn;      /* counters           */\n  unsigned int k=1, l, m=0;                   /* counter/flag & len */\n\n  int dat_yy, dat_mm, dat_dd, tim_hh, tim_mm; /* date & time parts  */\n  time_t ltime;                               /* date & time        */\n  struct tm *dat_tim;                         /* date & time        */\n\n                                              /* open files         */\n  outp01 = fopen(\"dd:OUTP01\",\"w, RECFM=FBA,LRECL=133,BLKSIZE=18354\");\n  outp02 = fopen(\"dd:OUTP02\",\"w, RECFM=FBA,LRECL=133,BLKSIZE=18354\");\n\n  time(&ltime);                               /* get date & time    */\n  dat_tim = localtime(&ltime);                /* local time         */\n  dat_yy  = dat_tim->tm_year;                 /* convert year       */\n  dat_mm  = dat_tim->tm_mon + 1;              /* convert month      */\n  dat_dd  = dat_tim->tm_mday;                 /* convert day        */\n  tim_hh  = dat_tim->tm_hour;                 /* convert hours      */\n  tim_mm  = dat_tim->tm_min;                  /* convert minutes    */\n\n  if (dat_yy > 95) {dat_yy = dat_yy + 1900;}\n  else {dat_yy  = dat_yy + 2000;}\n\n/* **************************************************************** */\n/* * Get a list of all online DASD volumes.                       * */\n/* **************************************************************** */\nptr_v = tab_v;                                /* set table pointer  */\nVTOC_UCB(ptr_v,&system_id);                   /* Get online DASD    */\n\n/* **************************************************************** */\n/* * Set up volume list if VOLSER's were specified in the JCL.    * */\n/* **************************************************************** */\nif (strncmp(arg_list ??( 1 ??), \"MAP\", 3) == 0) { /* check MAP parm */\n  k++;                                        /* next entry         */\n  arg_count--;                                /* one less volser    */\n}                                             /* end if             */\n\nptr_vv = tab_v;                               /* set table pointer  */\nwhile (arg_count > 1) {                       /* input from JCL     */\n  ptr_v = ptr_vv;                             /* start search at... */\n  l = strlen(arg_list ??( k ??));             /* length of volser   */\n  while ( *(ptr_v->ucb_vols) < 0xFF &         /* do while volumes   */\n    (strncmp(arg_list ??( k ??), ptr_v->ucb_vols, l)) != 0) {\n    ptr_v++;                                  /* increment pointer  */\n  }\n  if ( *(ptr_v->ucb_vols) != 0xFF) {          /* valid VOLSER found */\n    *tmp_v  = *ptr_vv;                        /* exchange values    */\n    *ptr_vv = *ptr_v;                         /* exchange values    */\n    *ptr_v  = *tmp_v;                         /* exchange values    */\n    ptr_vv++;                                 /* set table pointer  */\n    m = 1;                                    /* Valid volser found */\n  }                                           /* end if ...         */\n  else {                                      /* last VOLSER reached*/\n    if (m==0)                                 /* no volser found    */\n      fprintf(outp01,\"##### Invalid or offline VOLSER or generic ==> \"\n              \"%s <== #####\\n\", arg_list ??( k ??) );\n    else {                                    /* VOLSER fully qual. */\n      fprintf(outp01,\"*** Volume(s) processed for name / generic ==> \"\n              \"%s ***\\n\", arg_list ??( k ??) );\n      m=0;                                    /* reset found flag   */\n    }\n    arg_count--; k++;                         /* Next volser        */\n  }                                           /* end if ...         */\n}                                             /* end while          */\nif (ptr_v != ptr_vv) *(ptr_vv->ucb_vols) = 0xFF;\n                                              /* set end of table   */\n\n/* **************************************************************** */\n/* * List of all online volumes & a VTOC listing per volume.      * */\n/* **************************************************************** */\nfprintf(outp01,\"*** LIST OF DASD VOLUMES ***  DATE=\"      /* header */\n        \"%.4i/%.2i/%.2i  TIME=%.2i:%.2i  SYSTEM=%s\\n\",\n        dat_yy, dat_mm, dat_dd, tim_hh, tim_mm, system_id);\n\nptr_h  = &tab_h;                              /* set table pointer  */\nptr_v  = tab_v;                               /* set table pointer  */\nptr_vv = ptr_v;                               /* set table pointer  */\nwhile ( *(ptr_v->ucb_vols) < 0xFF) {          /* do while volumes   */\n  switch(ptr_v->ucb_utyp) {                        /* convert dev.  */\n    case (0x0F): { strcpy(dev_t, \"3390\"); break;}  /* 3390 device   */\n    case (0x0E): { strcpy(dev_t, \"3380\"); break;}  /* 3380 device   */\n    case (0x0D): { strcpy(dev_t, \"3350\"); break;}  /* 3350 device   */\n    default: strcpy(dev_t, \"????\");                /* unlisted      */\n  }                                                /* end switch    */\n  fprintf(outp01,\"%s  %s  %.4X\\n\",            /* print volser list  */\n          ptr_v->ucb_vols, dev_t, ptr_v->ucb_addr);\n\n  /* ************************************************************** */\n  /* * Print header for a VTOC listing.                           * */\n  /* ************************************************************** */\n  VTOC_HDR(ptr_v,ptr_h);                  /* get DSCB4 & free space */\n\n  switch(ptr_h->hdr_smsi) {                        /* convert dev.  */\n    case (1): { strcpy(sms_ind, \"SMS-MANAGED VOLUME\"); break;}\n    case (2): { strcpy(sms_ind, \"SMS INITIAL STATUS\"); break;}\n    default: strcpy(sms_ind, \"NOT SMS-MANAGED   \");\n  }                                                /* end switch    */\n\n  fprintf(outp02,\"\\fVOLSER=%s  DEVTYP=%s  NUMCYL=%4i  TRKS/CYL\"\n         \"=%2i  TRKSIZE=%5i  DSCB/TRK=%2i  DIR.BLKS/TRK=%2i     \"\n         \"DATE=%.4i/%.2i/%.2i  TIME=%.2i:%.2i\\n\",\n         ptr_v->ucb_vols, dev_t, ptr_h->hdr_numc, ptr_h->hdr_tcyl,\n         ptr_h->hdr_trks, ptr_h->hdr_dtrk, ptr_h->hdr_dirt,\n         dat_yy, dat_mm, dat_dd, tim_hh, tim_mm);\n  fprintf(outp02,\"VTOC INFORMATION:  NUM DSCBS=%5i   AVAIL DSCBS=%5i\"\n         \"   VTOC LOCATION=%4.4i.%4.4i-%4.4i.%4.4i  NUMALT=%2i\"\n         \"  NEXTALT=%4.4i.%4.4i\\n\",\n         ptr_h->hdr_numd, ptr_h->hdr_avad, ptr_h->hdr_vtcs,\n         ptr_h->hdr_vtts, ptr_h->hdr_vtce, ptr_h->hdr_vtte,\n         ptr_h->hdr_numa, ptr_h->hdr_nexc, ptr_h->hdr_next);\n  fprintf(outp02,\"AVAILABLE SPACE: %5i TRACKS, CONSISTING OF %4i \"\n         \"FULL CYLINDERS AND %5i TRACKS IN %4i EXTENTS \"\n         \"                    UNIT=%.4X\\n\",\n         ptr_h->hdr_trkt, ptr_h->hdr_cylf, ptr_h->hdr_trkf,\n         ptr_h->hdr_extf, ptr_v->ucb_addr);\n  fprintf(outp02,\"LARGEST CONTIGUOUS SPACE: %4i FULL CYLINDERS AND \"\n         \"%4i TRACKS.  FRAGMENTATION INDEX: %4i \"\n         \"    %s    VOLSER=%s\\n\",\n         ptr_h->hdr_cylc, ptr_h->hdr_trkc,\n         ptr_h->hdr_frag, sms_ind, ptr_v->ucb_vols);\n  fprintf(outp02,\"%.60s    FREE VOLUME INDEX RECORDS: %4i\"\n         \"                     SYSTEM=%s \\n \\n\",\n         ptr_h->hdr_idx, ptr_h->hdr_virs, system_id);\n  pr_det_hdr(ptr_v->ucb_vols);         /* print detail page header  */\n\n  /* ************************************************************** */\n  /* * Set up first entry (VTOC) and get rest of listing          * */\n  /* ************************************************************** */\n  ptr_d = tab_d;                       /* set detail table pointer  */\n  ptr_m = tab_m;                       /* set map table pointer     */\n  if (strncmp(arg_list ??( 1 ??), \"MAP\", 3) != 0) /* if not MAP     */\n    len_m = 0;                                   /* set no-map flag */\n  else {                                         /* else setup map  */\n    ptr_m->map_vtcs = ptr_h->hdr_vtcs;           /* The VTOC is the */\n    ptr_m->map_vtts = ptr_h->hdr_vtts;           /*     first map   */\n    ptr_m->map_vtce = ptr_h->hdr_vtce;           /*     entry.      */\n    ptr_m->map_vtte = ptr_h->hdr_vtte;           /* Initialize the  */\n    ptr_m->map_cyla = ptr_h->hdr_cyla;           /*     VTOC alloc. */\n    ptr_m->map_trka = ptr_h->hdr_trka;           /*     variables.  */\n    ptr_m->map_extn = 1;                         /* The VTOC can    */\n    ptr_m->map_ext  = 1;                         /*     only be in  */\n    strcpy(ptr_m->map_dsn,                       /*     one extent. */\n           \"**** VTOC **** VTOC **** VTOC **** VTOC ****\");\n    len_m = 1;                                   /* MAP wanted      */\n  }\n  VTOC_LST(ptr_v,ptr_d,&tot_d,&len_d,ptr_m,&tot_m,&len_m,ptr_h);\n\n  /* ************************************************************** */\n  /* * Sort the VTOC listing in data set sequence                 * */\n  /* ************************************************************** */\n  if (tot_d > 1)                              /* if sort needed     */\n    qsort(ptr_d, tot_d, len_d, comp_dsn);     /*    call qsort      */\n\n  /* ************************************************************** */\n  /* * Print the VTOC listing                                     * */\n  /* ************************************************************** */\n  ctr_lpp=8; ctr_dsn=0; ctr_pn=1;             /* init. counters     */\n  while (ctr_dsn < tot_d) {                   /* while data sets    */\n    if (ctr_lpp > 60) {                       /* if lpp>60 new page */\n      fprintf(outp02,\"\\n                                           \"\n             \"               ### PAGE:%i ###\\f\", ctr_pn); /* pg end */\n      pr_det_hdr(ptr_v->ucb_vols);            /* print page header  */\n      ctr_lpp=2; ctr_pn++;                    /* 2 header lines.    */\n    }                                         /* end if             */\n    fprintf(outp02,\"\\n\"\n           \"%.44s  %.2i/%.2i/%.2i  %3i  %.2i/%.2i/%.2i  %.2i/\"\n           \"%.2i/%.2i  %.4s  %.3s   %5i  %5i   %.3s  %5i  %5i %3i\",\n           ptr_d->det_dsn,  ptr_d->det_refy, ptr_d->det_refm,\n           ptr_d->det_refd, ptr_d->det_seq,  ptr_d->det_crey,\n           ptr_d->det_crem, ptr_d->det_cred, ptr_d->det_expy,\n           ptr_d->det_expm, ptr_d->det_expd, ptr_d->det_dso,\n           ptr_d->det_recf, ptr_d->det_blks, ptr_d->det_lrec,\n           ptr_d->det_racf, ptr_d->det_cyla, ptr_d->det_trka,\n           ptr_d->det_ext);\n    ptr_d++; ctr_lpp++; ctr_dsn++;            /* increment          */\n  }                                           /* end while          */\n  /* ************************************************************** */\n  /* * Print end of VTOC.                                         * */\n  /* ************************************************************** */\n  fprintf(outp02,\"\\n### PAGE:%i ###                      >>>>> END \"\n         \"OF VTOC. *** %i DATA SETS ON VOLUME %s <<<<<\",\n         ctr_pn, tot_d, ptr_v->ucb_vols);\n\n  /* ************************************************************** */\n  /* * Print a map of data set allocation on the device is req.   * */\n  /* ************************************************************** */\n  if (strncmp(arg_list ??( 1 ??), \"MAP\", 3) == 0) { /* if MAP ...   */\n    /* ************************************************************ */\n    /* * Sort the VTOC map in allocation sequence                 * */\n    /* ************************************************************ */\n    if (tot_m > 1)                            /* sort needed ?      */\n      qsort(ptr_m, tot_m, len_m, comp_map);   /* call qsort         */\n\n    /* ************************************************************ */\n    /* * Print the allocation map header.                         * */\n    /* ************************************************************ */\n    ctr_pn = 1; ctr_lpp=4;                  /* set counters         */\n    fprintf(outp02,\"\\f          >>>>> ALLOCATION MAP \"\n           \"FOR VOLSER %s    ---  DEVICE TYPE=%s <<<<<\\n\",\n           ptr_v->ucb_vols, dev_t);         /* print map header     */\n    pr_map_hdr(ptr_v->ucb_vols, ctr_pn);    /* print map page hdr   */\n\n    /* ************************************************************ */\n    /* * Determine and calculate free space at start of vtoc      * */\n    /* ************************************************************ */\n    FreeExtn = 0;                           /* init extent number   */\n    FreeExt  = ptr_h->hdr_extf;             /* # of free extents    */\n    k = 0;                                  /* free space flag      */\n\n    if (ptr_m->map_vtcs != 0) k=1;          /* 1st alloc not cyl 0  */\n    if ((ptr_m->map_vtcs == 0) &&           /* 1st alloc cyl 0 but  */\n        (ptr_m->map_vtts != 1)) k=1;        /*     not track 1      */\n    if (k) {                                /* if free space        */\n      FreeExtn++;                           /* next extent number   */\n      FreeVtcs = 0;                         /* start cyl = 0        */\n      FreeVtts = 0;                         /* start trk = 0        */\n      FreeVtce = ptr_m->map_vtcs;           /* end cyl - 1st alloc  */\n      FreeVtte = ptr_m->map_vtts;           /* end trk - 1st alloc  */\n      calc_space(ptr_h->hdr_tcyl-1);        /* calc # free space    */\n      pr_free();                            /* print free space info*/\n      ctr_lpp++; k=0;                       /* incr & reset flag    */\n    }\n\n    /* ************************************************************ */\n    /* * Print the allocation map detail.                         * */\n    /* ************************************************************ */\n    ctr_dsn=1;                              /* set count - 1st dsn  */\n\n    /* ************************************************************ */\n    /* * Do while map entries                                     * */\n    /* ************************************************************ */\n    while (ctr_dsn < tot_m) {                 /* while map entries  */\n      if (ctr_lpp > 61) {                     /* if lpp>61 new page */\n        ctr_lpp=3; ctr_pn++;                  /* 2 header lines.    */\n        fprintf(outp02,\"\\f\");                 /* next page          */\n        pr_map_hdr(ptr_v->ucb_vols, ctr_pn);  /* print page hdr     */\n      }                                       /* end if             */\n\n      if (k) {\n        /* ******************************************************** */\n        /* * Calculate and print free space info                  * */\n        /* ******************************************************** */\n        FreeExtn++;                         /* next extent number   */\n        FreeVtcs = ptr_mm->map_vtce;        /* start cyl            */\n        FreeVtts = ptr_mm->map_vtte;        /* start trk            */\n        FreeVtce = ptr_m->map_vtcs;         /* end cyl              */\n        FreeVtte = ptr_m->map_vtts;         /* end trk              */\n        calc_space(ptr_h->hdr_tcyl-1);      /* calc free space      */\n        pr_free();                          /* print free space info*/\n        ctr_lpp++; k=0;                     /* incr & reset flag    */\n      }\n      else {\n        /* ******************************************************** */\n        /* * Print map detail                                     * */\n        /* ******************************************************** */\n        pr_map_det(ptr_m->map_vtcs, ptr_m->map_vtts,  /* print map  */\n                   ptr_m->map_vtce, ptr_m->map_vtte,  /*    detail  */\n                   ptr_m->map_cyla, ptr_m->map_trka,  /*    line    */\n                   ptr_m->map_ext,  ptr_m->map_extn, ptr_m->map_dsn);\n        ptr_mm = ptr_m;                             /* set pointer  */\n        ptr_m++; ctr_dsn++; ctr_lpp++;              /* increment    */\n\n        /* ******************************************************** */\n        /* * Determine if free space                              * */\n        /* ******************************************************** */\n        if ((ptr_m->map_vtcs - ptr_mm->map_vtce) > 1) k=1;    /*free*/\n        if ((ptr_m->map_vtcs == ptr_mm->map_vtce) &&\n            ((ptr_m->map_vtts - ptr_mm->map_vtte) > 1)) k=1;  /*free*/\n        if (((ptr_m->map_vtcs - ptr_mm->map_vtce) == 1) &&\n            ((ptr_m->map_vtts != 0) \u00a6\u00a6\n             (ptr_mm->map_vtte != (ptr_h->hdr_tcyl-1)))) k=1; /*free*/\n      }                                       /* end if             */\n    }                                         /* end while          */\n\n    /* ************************************************************ */\n    /* * Process end of map                                       * */\n    /* ************************************************************ */\n    if (ctr_lpp > 58) {                       /* if lpp>58 new page */\n      ctr_pn++;                               /* next page          */\n      fprintf(outp02,\"\\f\");                   /* next page          */\n      pr_map_hdr(ptr_v->ucb_vols, ctr_pn); /* print map page hdr */\n    }                                         /* end if             */\n\n    /* ************************************************************ */\n    /* * Calculate and print free space info                      * */\n    /* ************************************************************ */\n    if (k) {\n      FreeExtn++;                           /* next extent number   */\n      FreeVtcs = ptr_mm->map_vtce;          /* start cyl            */\n      FreeVtts = ptr_mm->map_vtte;          /* start trk            */\n      FreeVtce = ptr_m->map_vtcs;           /* end cyl              */\n      FreeVtte = ptr_m->map_vtts;           /* end trk              */\n      calc_space(ptr_h->hdr_tcyl-1);        /* calc free space      */\n      pr_free();                            /* print free space info*/\n      k = 0;                                /* reset flag           */\n    }\n\n    /* ************************************************************ */\n    /* * Print last entry of map                                  * */\n    /* ************************************************************ */\n    pr_map_det(ptr_m->map_vtcs, ptr_m->map_vtts,  /* print map      */\n               ptr_m->map_vtce, ptr_m->map_vtte,  /*    detail line */\n               ptr_m->map_cyla, ptr_m->map_trka,\n               ptr_m->map_ext,  ptr_m->map_extn, ptr_m->map_dsn);\n\n    /* ************************************************************ */\n    /* * Determine and calculate free space at end of volume      * */\n    /* ************************************************************ */\n    if (ptr_m->map_vtce != (ptr_h->hdr_numc-1)) k=1;    /*free space*/\n    if ((ptr_m->map_vtce == (ptr_h->hdr_numc-1)) &&\n        (ptr_m->map_vtte != (ptr_h->hdr_tcyl-1))) k=1;  /*free space*/\n    if (k) {\n      FreeExtn++;                           /* next extent number   */\n      FreeVtcs = ptr_m->map_vtce;           /* start cyl            */\n      FreeVtts = ptr_m->map_vtte;           /* start trk            */\n      FreeVtce = ptr_h->hdr_numc - 1;       /* end cyl              */\n      FreeVtte = ptr_h->hdr_tcyl;           /* end trk              */\n      calc_space(ptr_h->hdr_tcyl-1);        /* calc free space      */\n      pr_free();                            /* print free space info*/\n    }\n\n    /* ************************************************************ */\n    /* * Print end of allocation map.                             * */\n    /* ************************************************************ */\n    fprintf(outp02,\"\\n          >>>>> END OF ALLOCATION MAP \"\n           \"FOR VOLSER %s <<<<<\",\n           ptr_v->ucb_vols);\n  }                                           /* end if             */\n  ptr_v++;                                    /* Next volser        */\n}                                             /* end while          */\n\n/* **************************************************************** */\n/* * end of volume listing and VTOC lists.                        * */\n/* **************************************************************** */\nfprintf(outp01,\"%s%i %s\\n\",\n        \"*** NUMBER OF VOLUMES: \", ptr_v-ptr_vv, \"***\");\nfclose(outp01);                               /* close file         */\nfclose(outp02);                               /* close file         */\nreturn 0;\n}                                             /* end of main        */\n\n/* **************************************************************** */\n/* * Compare 2 values and return result (for qsort)               * */\n/* **************************************************************** */\nint comp_dsn (const void *s1, const void *s2) {\n  return (strncmp((char *)s1, (char *)s2, 44));\n}\n\nint comp_map (const void *s1, const void *s2) {\n  struc_map_inf *p1, *p2;                     /* declare struc      */\n  p1=s1; p2=s2;                               /* assign pointers    */\n  if (p1->map_vtcs > p2->map_vtcs)            /* CYLS not sorted ?  */\n    return 1;                                 /*   then sort        */\n  if ((p1->map_vtcs == p2->map_vtcs) &&       /* CYLS equal and     */\n      (p1->map_vtts > p2->map_vtts))          /* trks not sorted ?  */\n    return 1;                                 /*   then sort        */\n  return -1;\n}\n\n/* **************************************************************** */\n/* * Calculate free space                                         * */\n/* **************************************************************** */\nvoid calc_space (unsigned short num_trk_cyl) {\n  /* ************************************************************** */\n  /* * Free space starts just after last allocated space          * */\n  /* ************************************************************** */\n  if (FreeVtts == num_trk_cyl) {              /* end of cyl ?       */\n    FreeVtcs++;                               /* start cyl=next cyl */\n    FreeVtts = 0;                             /* start track=0      */\n  }\n  else                                        /* not on cyl boundary*/\n    FreeVtts++;                               /* start trk=next trk */\n\n  /* ************************************************************** */\n  /* * Free space ends just before next allocated space.          * */\n  /* ************************************************************** */\n  if (FreeVtte == 0) {                        /* start of new cyl ? */\n    FreeVtce--;                               /* end cyl=prev cyl   */\n    FreeVtte = num_trk_cyl;                   /* end trk=trks/cyl-1 */\n  }\n  else                                        /* not on cyl boundary*/\n    FreeVtte--;                               /* end trk=prev trk   */\n\n  /* ************************************************************** */\n  /* * Calculate the size of the free space area                  * */\n  /* ************************************************************** */\n  FreeCyla = FreeVtce - FreeVtcs;             /* free cyls          */\n  if ((FreeVtts==0) && (FreeVtte == num_trk_cyl)) { /* full cyl ?   */\n    FreeCyla++;                               /* incr. free cyls    */\n    FreeTrka = 0;                             /* 0 free trks        */\n  }\n  else {                                      /* not full cyl       */\n    FreeTrka = FreeVtte - FreeVtts + 1;       /* calc # trks        */\n    if ((FreeTrka <= 0) \u00a6\u00a6                    /* end trk < start trk*/\n        ((FreeVtts != 0) && (FreeVtte != num_trk_cyl) &&\n         (FreeCyla != 0)) ) {                 /* # cyls not 0       */\n      FreeCyla--;                             /* decr. free cyls    */\n      FreeTrka = FreeTrka + num_trk_cyl + 1;  /* calc # trks        */\n    }\n  }\n  return;                                     /* end space calc     */\n}\n\n/* **************************************************************** */\n/* * Print detail line page header                                * */\n/* **************************************************************** */\nvoid pr_det_hdr (char volser ??( 6 ??)) {\n  fprintf(outp02,\"D A T A   S E T   N A M E           (%s)  \"\n         \"LAST REF  SEQ   CREDT     EXPDT    DSO  RECFM  BLKSZ  \"\n         \"LRECL  RACF  CYLAL  TRKAL  EX\\n\", volser);\n  fprintf(outp02,\"--------------------------------------------  \"\n         \"--------  ---  --------  --------  ---  -----  -----  \"\n         \"-----  ----  -----  -----  --\");\n}\n\n/* **************************************************************** */\n/* * Print map page header                                        * */\n/* **************************************************************** */\nvoid pr_map_hdr (char volser ??( 6 ??), unsigned int page_num) {\n  fprintf(outp02,\"     LOCATION DEC.        LOCATION HEX.     \"\n         \"   SPACE        EXTENT                              \"\n         \"  ### PAGE:%i ###\\n\", page_num);\n  fprintf(outp02,\"  CYL. TRK. CYL. TRK.  CYL. TRK. CYL. TRK.  \"\n         \"CYLS.  TRKS.  NUM OF TOT  D A T A   S E T   N A M E\"\n         \"        (%s)\\n\", volser);\n  fprintf(outp02,\"  ---- ---- ---- ----  ---- ---- ---- ----  \"\n         \"-----  -----  ----------  -------------------------\");\n}\n\n/* **************************************************************** */\n/* * Print free space info                                        * */\n/* **************************************************************** */\nvoid pr_free () {\n  fprintf(outp02,\"\\n  %4.4i.%4.4i-%4.4i.%4.4i  %4.4X.%4.4X-\"   /*   */\n         \"%4.4X.%4.4X  %5i  %5i  %3i OF %3i  *** FREE ***\",    /*   */\n         FreeVtcs, FreeVtts, FreeVtce, FreeVtte,               /*   */\n         FreeVtcs, FreeVtts, FreeVtce, FreeVtte,               /*   */\n         FreeCyla, FreeTrka, FreeExtn, FreeExt);               /*   */\n}\n\n/* **************************************************************** */\n/* * Print map detail line                                        * */\n/* **************************************************************** */\nvoid pr_map_det (unsigned short int vtcs, unsigned short int vtts,\n                 unsigned short int vtce, unsigned short int vtte,\n                 unsigned short int cyla, unsigned short int trka,\n                 unsigned short int ext, unsigned short int extn,\n                 char dsn ??( 44 ??) ) {\n  fprintf(outp02,\"\\n  %4.4i.%4.4i-%4.4i.%4.4i  %4.4X.%4.4X-\"\n         \"%4.4X.%4.4X  %5i  %5i  %3i OF %3i  %.44s\",\n         vtcs, vtts, vtce, vtte, vtcs, vtts, vtce, vtte,\n         cyla, trka, extn, ext, dsn);\n}\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VTOC@HDR": {"ttr": 12294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x00\\x00\\x94\\x19_\\x00\\x99\\x01\\x8f\\x14\\x02\\x01\\x14\\x00}\\x01\\x14\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1994-07-14T00:00:00", "modifydate": "1999-01-18T14:02:00", "lines": 276, "newlines": 125, "modlines": 276, "user": "SYS0007"}, "text": "VTOC@HDR CSECT\nVTOC@HDR AMODE 31\nVTOC@HDR RMODE ANY\n***=================================================================***\n***  GET LIST OF THE DSCB4 AND FREE SPACE INFO OF A VOLUME.\n***=================================================================***\n         EDCPRLG BASEREG=((12))         .HOUSEKEEPING FOR C INTERFACE\n*\n         LM    R03,R04,0(R01)           .VOLSER AND DSCB AREA.\n         USING HDR_BUFF,R04             .MAP RETURN BUFFER\n         MVC   VOLSER,0(R03)            .SAVE VOLSER\n         LA    R11,BUF_WORK             .BUFFER FOR DSCB4\n         XC    RET_CODE,RET_CODE        .CLEAR RETURN CODE FIELD\n*\n***=================================================================***\n***  GET THE UCB ADDRESS FOR THE VTOC READ.\n***=================================================================***\n         LA    R10,HDR_UCBA             .LOAD UCB COMMON SEGMENT ADDR.\n         MODESET KEY=ZERO,MODE=SUP      .SET SUPERVISOR STATE & KEY 0\n         UCBLOOK VOLSER=(R03),          .GET UCB ADDRESS               +\n               UCBPTR=(R10),            .WHERE TO PUT UCB ADDRESS      +\n               NOPIN,                   .DO NOT PIN UCB - NO UPDATES   +\n               LOC=ANY,                 .ALSO UCB ABOVE 16M LINE       +\n               DYNAMIC=YES,             .ALSO HCD DEVICES              +\n               RANGE=ALL,               .INCLUDE 4-DIGIT DEVICE ADDR'S +\n               DEVCLASS=DASD            .ONLY DASD\n         LTR   R15,R15                  .SAVE RETURN CODE\n         BNZ   ERR_UCB                  .NO - SET ERROR\n         MODESET KEY=NZERO,MODE=PROB    .RETURN TO PROBLEM STATE\n         L     R10,HDR_UCBA             .LOAD UCB ADDRESS\n*\n***=================================================================***\n***  SET UP BUFFER LIST HEADER AND ENTRY.\n***=================================================================***\n         XC    BFLHDR(BFLHLN),BFLHDR    .CLEAR BUFFER HEADER\n         OI    BFLHFL,BFLHDSCB          .DESCRIBES DSCB ENTRIES\n         MVI   BFLHNOE,X'01'            .NUMBER OF DSCB'S IN BUFFER\n         XC    BUF_WORK,BUF_WORK        .CLEAR WORK AREA\n*\n         LA    R02,BFLE                 .BUFFER LIST ENTRY\n         USING BFLE,R02                 .MAP BUFFER LIST ENTRY\n         XC    BFLE(BFLELN),BFLE        .CLEAR BUFFER ENTRY\n         ST    R11,BFLEBUF              .STORE DSCB BUFFER ADDRESS\n         MVI   BFLELTH,DSCB_LEN         .FULL DSCB LENGTH\n         DROP  R02                      .END OF ADRESSABILITY\n*\n***=================================================================***\n***  READ THE VTOC.\n***=================================================================***\n         CVAFSEQ ACCESS=GTEQ,           .READ ONLY DSCB4               +\n               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +\n               DSN=0,                   .PHYSICAL SEQUENTIAL READ      +\n               UCB=(R10),               .UCB ADRESS FROM UCBLOOK MACRO +\n               MF=(E,CVPL_MAP)          .POINTER TO LIST FORM MACRO\n         LTR   R15,R15                  .CHECK RETURN CODE\n         BNZ   ERR_SEQ                  .MORE DATA TO READ\n*\n***=================================================================***\n***  MOVE DSCB4 INFORMATION TO BUFFER.\n***=================================================================***\n         LA    R11,44(,R11)             .OFFSET FOR DATA SET NAME\n         USING IECSDSL4,R11             .SET ADDRESSABILITY TO DSCB4\n*\n         XR    R03,R03                  .CLEAR\n         IC    R03,DS4DEVDT             .LOAD # OF DSCBS/TRK\n         STH   R03,HDR_DTRK             .     AND STORE\n         IC    R03,DS4DEVDB             .LOAD # OF DIR.BLKS/TRK\n         STH   R03,HDR_DIRT             .     AND STORE\n         MVC   HDR_VTOC,DS4VTOCE+2      .MOVE VTOC ADDRESS\n         MVC   HDR_TRKS,DS4DEVTK        .SIZE OF TRACK\n         MVC   HDR_DEVS,DS4DEVSZ        .# CYLS & TRKS/CYL\n         MVC   HDR_NUMA,DS4NOATK        .# OF ALT. TRKS\n         MVC   HDR_ALTT,DS4HCCHH        .ALT TRK ADDRESS\n*\n         LA    R03,1                    .SMS-MANAGED\n         TM    DS4SMSFG,DS4SMS          .SMS-MANAGED\n         BO    FOUNDSMS\n         LA    R03,2                    .SMS INITIAL STATUS\n         TM    DS4SMSFG,DS4SMSCV        .SMS INITIAL STATUS\n         BO    FOUNDSMS\n         XR    R03,R03                  .NOT SMS-MANAGED\nFOUNDSMS EQU   *\n         STH   R03,HDR_SMSI             .STORE SMS STATUS\n*\n***=================================================================***\n***  CALCULATE ALLOCATED SPACE FOR THE VTOC\n***=================================================================***\n         XR    R05,R05                  .CLEAR FOR TOTAL # TRKS\n         XR    R09,R09                  .CLEAR FOR TOTAL # CYLS\n         LH    R08,HDR_DEVS+2           .LOAD # TRKS/CYL\n         LH    R06,HDR_VTOC             .START CYL ADDR.\n         LH    R07,HDR_VTOC+4           .END CYL ADDR.\n*\n         SR    R07,R06                  .CALC # FULL CYLS USED\n         BZ    TRKONE                   .START + END ON SAME CYL\n         BCT   R07,CYLADD               .ADD CYL TO TOTAL\n         B     TRKBEG                   .START + END ON ADJ. CYL\nCYLADD   EQU   *\n         AR    R09,R07                  .ADD TO TOTAL # CYLS\nTRKBEG   EQU   *\n         LH    R06,HDR_VTOC+2           .START TRK ADDR.\n         LTR   R06,R06                  .START TRK ADDRESS=0 ?\n         BNZ   CALCBEG                  .NO, CALCULATE TRKS\n         LA    R09,1(,R09)              .ANOTHER FULL CYLINDER\n         B     TRKEND                   .DO END TRK CALC.\nCALCBEG  EQU   *\n         LR    R07,R08                  .# TRKS/CYL\n         SR    R07,R06                  .CALC # TRKS\n         AR    R05,R07                  .ADD TO TOTAL TRKS\nTRKEND   EQU   *\n         LH    R07,HDR_VTOC+6           .END TRK ADDR.\n         LA    R07,1(,R07)              .CORRECTION FOR CALCULATION\n         CR    R07,R08                  .END TRK ADDRESS=TRKS/CYL ?\n         BNE   CALCEND                  .NO, CALCULATE TRKS\n         LA    R09,1(,R09)              .ANOTHER FULL CYLINDER\n         B     CALCEND1                 .DO NEXT CALCULATION\nCALCEND  EQU   *\n         AR    R05,R07                  .ADD TO TOTAL TRKS\n         B     CALCEND1                 .DO NEXT CALCULATION\nTRKONE   EQU   *\n         LH    R06,HDR_VTOC+2           .START TRK ADDR.\n         LH    R07,HDR_VTOC+6           .END TRK ADDR.\n         LA    R07,1(,R07)              .CORRECTION FOR CALCULATION\n         LTR   R06,R06                  .START TRK ADDRESS=0 ?\n         BNZ   CALCONE                  .NO, CALCULATE TRKS\n         CR    R07,R08                  .END TRK ADDRESS=TRKS/CYL ?\n         BNZ   CALCONE                  .NO, CALCULATE TRKS\n         LA    R09,1(,R09)              .ONE FULL CYLINDER\n         B     CALCEND1                 .DO NEXT CALCULATION\nCALCONE  EQU   *\n         SR    R07,R06                  .CALC # TRKS\n         AR    R05,R07                  .ADD TO TOTAL TRKS\nCALCEND1 EQU   *\n         STH   R05,HDR_TRKA             .SAVE # TRKS IN VTOC\n         STH   R09,HDR_CYLA             .SAVE # CYLS IN VTOC\n*\nEND_VTOC EQU   *\n         XR    R06,R06                  .CLEAR EVEN REGISTER\n         LR    R07,R09                  .# OF CYLS\n         MR    R06,R08                  .# OF TRKS FROM CYLS\n         AR    R07,R05                  .CALC. # OF TRKS\n         LH    R08,HDR_DTRK             .# DSCB'S/TRK\n         MR    R06,R08                  .CALC # OF DSCB'S\n         STH   R07,HDR_NUMD             .SAVE TOTAL # OF DSCB'S\n*\n         DROP  R11                      .END OF ADRESSABILITY\n*\n***=================================================================***\n***  GET FREE SPACE INFORMATION.\n***=================================================================***\n         XC    BUF_WORK,BUF_WORK        .CLEAR BUFFER AREA\n         LA    R11,BUF_WORK             .BUFFER FOR FREE SPACE INFO\n         LA    R02,LSPA                 .MF=L FORM OF MACRO\n         LSPACE MF=(E,(R02)),           .GET FREE SPACE INFO           X\n               UCB=(R10),               .UCB ADDRESS                   X\n               DATA=(R11)               .DATA RETURN AREA\n         LTR   R15,R15                  .CHECK RETURN CODE\n         BNZ   ERR_FREE                 .ERROR ON FREE LSPACE\n         USING LSPD,R11                 .MAPPING DATA RETURN AREA\n*\n         L     R03,LSPDF0S              .LOAD # OF AVAILABLE DSCBS\n         STH   R03,HDR_AVAD             .     AND STORE\n         L     R03,LSPDLCYL             .LOAD LARGEST FREE CYL EXT\n         STH   R03,HDR_CYLC             .     AND STORE\n         L     R03,LSPDLTRK             .LOAD LARGEST FREE TRKS\n         STH   R03,HDR_TRKC             .     AND STORE\n         L     R03,LSPDFRAG             .LOAD FRAGMENTATION INDEX\n         STH   R03,HDR_FRAG             .     AND STORE\n         L     R03,LSPDNEXT             .LOAD # OF FREE EXTENTS\n         STH   R03,HDR_EXTF             .     AND STORE\n         L     R03,LSPDTCYL             .LOAD # OF FREE CYLS\n         STH   R03,HDR_CYLF             .     AND STORE\n         L     R03,LSPDTTRK             .LOAD # OF FREE TRKS\n         STH   R03,HDR_TRKF             .     AND STORE\n*\n         L     R09,LSPDTCYL             .# FREE CYLINDERS\n         XR    R08,R08                  .CLEAR EVEN REGISTER\n         LH    R06,HDR_DEVS+2           .LOAD # TRKS/CYL\n         MR    R08,R06                  .# OF FREE TRKS IN CYLS\n         AR    R03,R09                  .TOTAL # OF FREE TRKS\n         STH   R03,HDR_TRKT             .     AND STORE\n*\n         TM    LSPDSTAT,LSPDIXDS        .INDEXED VTOC ?\n         BZ    IDX_NOT                  .NO\n         MVC   HDR_IDX1,=CL30'THE VTOC IS IN INDEXED FORMAT '\n         TM    LSPDSTAT,LSPDIXAC        .INDEX ACTIVE ?\n         BO    IDX_YES                  .YES\n         MVC   HDR_IDX2,=CL30', BUT THE INDEX IS NOT ACTIVE.'\n         B     IDX_VIRS                 .CALC. VIRS\nIDX_YES  EQU   *\n         MVC   HDR_IDX2,=CL30'AND THE INDEX IS ACTIVE.      '\n*\nIDX_VIRS EQU   *\n         L     R03,LSPDVIRS             .LOAD # OF FREE VIRS\n         STH   R03,HDR_VIRS             .     AND STORE\n         B     IDX_END\n*\nIDX_NOT  EQU   *\n         MVC   HDR_IDX1,=CL30'THE VTOC IS NOT INDEXED.      '\n         MVC   HDR_IDX2,=CL30'                              '\n         XC    HDR_VIRS,HDR_VIRS        .NO INDEX\n*\nIDX_END  EQU   *\n         DROP  R11                      .END OF ADRESSABILITY\n*\n***=================================================================***\n***  ERROR ROUTINES\n***=================================================================***\n         B     END_PROG                 .END OF PROGRAM\nERR_FREE EQU   *\n         ST    R15,RET_CODE             .SAVE RETURN CODE\n         LA    R01,WTO_FREE             .MOVE VOLSER INTO MESSAGE\n         MVC   20(6,R01),VOLSER         .MOVE VOLSER\nWTO_FREE EQU   *\n         WTO   '*** VOLSER: ......  --- RETURN CODE > 0 FROM LSPACE '\n         B     END_PROG                 .END OF PROGRAM\n*\nERR_SEQ  EQU   *\n         ST    R15,RET_CODE             .SAVE RETURN CODE\n         LA    R01,WTO_SEQ              .MOVE VOLSER INTO MESSAGE\n         MVC   20(6,R01),VOLSER         .MOVE VOLSER\nWTO_SEQ  EQU   *\n         WTO   '*** VOLSER: ......  --- RETURN CODE > 0 FROM CVAFSEQ'\n         B     END_PROG                 .END OF PROGRAM\n*\nERR_UCB  EQU   *\n         A     R15,=F'40'               .UCB NOT FOUND\n         ST    R15,RET_CODE             .SAVE RETURN CODE\n         MODESET KEY=NZERO,MODE=PROB    .RETURN TO PROBLEM STATE\n         LA    R01,WTO_UCB              .MOVE VOLSER INTO MESSAGE\n         MVC   20(6,R01),VOLSER         .MOVE VOLSER\nWTO_UCB  EQU   *\n         WTO   '*** VOLSER: ......  --- RETURN CODE > 0 FROM UCBLOOK'\n*\n***=================================================================***\n***  END OF PROGRAM.\n***=================================================================***\nEND_PROG EQU   *\n         L     R15,RET_CODE             .SET RETURN CODE\n         EDCEPIL                        .PROGRAM EPILOG FOR C\n*\n***=================================================================***\n***  VARIABLES, CONSTANTS AND UCB\n***=================================================================***\n         LTORG\n         EQUATES1\n*\nRET_CODE DS    F                        .RETURN CODE\nVOLSER   DS    CL6                      .VOLSER\n*\nBUF_WORK DS    CL(DSCB_LEN)             .DATA FOR DSCB4 STORAGE\n*\nCVPL_MAP CVAFSEQ ACCESS=GTEQ,           .ALL DSCB'S FROM BEGINNING     +\n               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +\n               DSN=0,                   .PHYSICAL SEQUENTIAL READ      +\n               UCB=(R10),               .UCB ADRESS FROM UCBLOOK MACRO +\n               MF=L                     .LIST FORM OF MACRO\n         ORG   CVPL_MAP\n         ICVAFPL DSECT=NO\n*\n         ORG   ,                        .RESET POINTER\n         ICVAFBFL DSECT=NO              .BUFFER LIST\n*\nLSPA     LSPACE MF=L\nLSPD     LSPACE MF=(D,DATA)\n*\n         EDCDSAD                        .SAVE AREA FOR C INTERFACE\n*\n         VTC@HDRB                       .MAPPING FOR BUFFER AREA\n*\n         DSECT                          .DSCB\n         IECSDSL1 (1)                   .DSCB1\nDSCB_LEN EQU   *-IECSDSL1               .LENGTH OF DSCB\n         IECSDSL1 (4)                   .DSCB4\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC@LST": {"ttr": 12299, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01I\\x00\\x00\\x00\\x94$?\\x00\\x99\\x01\\x8f\\x14\\x02\\x02K\\x02l\\x02K\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.73", "flags": 0, "createdate": "1994-08-31T00:00:00", "modifydate": "1999-01-18T14:02:00", "lines": 587, "newlines": 620, "modlines": 587, "user": "SYS0007"}, "text": "VTOC@LST CSECT\nVTOC@LST AMODE 31\nVTOC@LST RMODE ANY\n***=================================================================***\n***  GET LIST OF ALL DSCB'S ON A GIVEN DASD DEVICE.\n***=================================================================***\n         EDCPRLG BASEREG=((12))         .HOUSEKEEPING FOR C INTERFACE\n*\n         LM    R03,R10,0(R01)           .VOLSER, BUFFER, NUM & LENGTH\n         MVC   VOLSER,0(R03)            .SAVE VOLSER\n         ST    R05,@DSN_#AD             .SAVE ADDRESS OF # DSN'S\n         USING HDR_BUFF,R10\n         LH    R01,HDR_DEVS+2           .LOAD # TRKS/CYL\n         ST    R01,TRKS_CYL             .SAVE # TRKS/CYL\n         L     R10,HDR_UCBA             .LOAD UCB ADDRESS\n         ST    R10,@UCB_ADD             .SAVE UCB ADDRESS\n         DROP  R10\n*\n         LA    R01,DET_LEN              .LOAD LENGTH OF DETAIL LINE\n         ST    R01,0(R06)               .STORE LENGTH OF DETAIL LINE\n*\n         XC    STAT_MAP,STAT_MAP        .CLEAR MAP STATUS FIELD\n         L     R01,0(R09)               .LOAD MAP INDICATOR\n         LTR   R01,R01                  .WANT A MAP ?\n         BZ    NO_MAP                   .NO\n*\n         MVI   STAT_MAP,X'01'           .YES - SET FLAG\n         USING MAP_BUFF,R07             .AND MAP DSECT\n         LA    R07,MAP_LEN(0,R07)       .NEXT ENTRY\n         ST    R07,@MAP_ADD             .SAVE ADDRESS OF MAP AREA\n         ST    R08,@MAP_#AD             .SAVE ADDRESS OF # MAP ENTRIES\n         LA    R01,MAP_LEN              .LOAD LENGTH OF MAP LINE\n         ST    R01,0(R09)               .STORE LENGTH OF MAP LINE\n         MVC   @MAP_NUM,=F'1'           .FIRST ENTRY IS VTOC\n*\nNO_MAP   EQU   *\n         GETMAIN R,LV=LEN_BUF           .GET MAIN - DSCB BUFFER\n         ST    R01,@BUF_ADD             .BUFFER LIST FOR CVAFFILT\n         XC    RET_CODE,RET_CODE        .CLEAR RETURN CODE AREA\n         XC    @DSN_NUM,@DSN_NUM        .SET # DSN'S TO ZERO\n***=================================================================***\n***  SET UP FILTER LIST HEADER, BUFFER LIST HEADER AND ALL ENTRIES.\n***=================================================================***\n         LA    R06,FCL_LIST             .FILTER LIST ADDRESS\n         USING FCLID,R06                .FILTER LIST ADDRESS\n         LA    R03,FCL_DSN              .DSN FILTER LIST ADDRESS\n         USING FCLDSN,R03               .DSN FILTER LIST ADDRESS\n         XC    FCL_LIST,FCL_LIST        .CLEAR FCL_LIST\n         XC    FCL_DSN,FCL_DSN          .CLEAR FCL_DSN\n         MVC   FCLID,=C'FCL '           .EYECATCHER\n         MVC   FCLCOUNT,=H'1'           .ONLY ONE DSN FILTER\n         MVI   FCLDSNLG,X'02'           .TWO CHARACTERS LONG (**)\n         LA    R01,=C'**'               .ADRESS OF DSN FILTER\n         ST    R01,FCLDSNA              .DSN FILTER ADDRESS\n         DROP  R06,R03                  .END OF ADRESSABILITY\n*\n         XC    BFLHDR(BFLHLN),BFLHDR    .CLEAR BUFFER HEADER\n         OI    BFLHFL,BFLHDSCB          .DESCRIBES DSCB ENTRIES\n         MVI   BFLHNOE,DSCB_NUM         .NUMBER OF DSCB'S IN BUFFER\n*\n         LA    R06,BFLE                 .FIRST BUFFER LIST ENTRY\n         USING BFLE,R06                 .MAP BUFFER LIST ENTRY\n         LA    R03,DSCB_NUM             .NUMBER OF DSCB'S\n         L     R07,@BUF_ADD             .START OF DSCB BUFFER\nENT_BUF  EQU   *\n         XC    0(DSCB_LEN,R07),0(R07)   .CLEAR DSCB AREA\n         XC    BFLE(BFLELN),BFLE        .CLEAR BUFFER ENTRY\n         OI    BFLEFL,BFLECHR           .RETURN CCHHR\n         MVI   BFLELTH-BFLE(R06),DSCB_LEN  .FULL DSCB LENGTH\n         ST    R07,BFLEBUF-BFLE(,R06)   .STORE DSCB BUFFER ADDRESS\n         LA    R06,BFLELN(,R06)         .NEXT BUFFER LIST ENTRY ADDR.\n         LA    R07,DSCB_LEN(,R07)       .NEXT DSCB ADDRESS\n         BCT   R03,ENT_BUF              .DO FOR ALL BUFFERS\n         DROP  R06                      .END OF ADRESSABILITY\n*\n***=================================================================***\n***  READ THE VTOC - FIRST TIME\n***=================================================================***\n         XC    CVIRCDS(40),CVIRCDS      .CLEAR CVPL ADRESSES.\n         CVAFFILT ACCESS=READ,          .ALL DSCB'S FROM BEGINNING     +\n               FLTAREA=KEEP,            .KEEP FILTER AREA              +\n               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +\n               FCL=FCL_LIST,            .ALL DSN'S                     +\n               UCB=(R10),               .UCB ADRESS FROM UCBLOOK MACRO +\n               MF=(E,CVPL_MAP)          .POINTER TO LIST FORM MACRO\n         LTR   R15,R15                  .CHECK RETURN CODE\n         BZ    NEX_FILT                 .SUCCESFULL\n         TM    CVSTAT,STAT064           .MORE DSCB'S TO READ ?\n         BO    NEX_FILT                 .YES\n         TM    CVSTAT,STAT073           .MORE DSCB'S TO READ ?\n         BO    NEX_FILT                 .YES\n         B     ERR_FLT                  .SOMETHING WRONG\n*\n***=================================================================***\n***  SET UP OUTPUT LINE FOR ALL DSN'S\n***=================================================================***\nNEX_FILT EQU   *\n         XR    R10,R10                  .CLEAR DSCB COUNTER\n         LA    R06,FCL_LIST             .FILTER LIST ADDRESS\n         USING FCLID,R06                .FILTER LIST ADDRESS\n         LH    R10,FCLDSCBR             .NUMBER OF DSCB'S\n         DROP  R06                      .DROP FCL ADDR.\n         L     R11,@BUF_ADD             .START OF DSCB BUFFER\n         USING IECSDSL1,R11             .MAPPING FOR DSCB1 BUFFER\n         USING DET_BUFF,R04             .MAPPING FOR RETURN BUFFER\nNEX_DSCB EQU   *\n         DROP  R11                      .USE SAME REGISTER - DSCB1/3\n         USING IECSDSL1,R11             .MAPPING FOR DSCB1 BUFFER\n         CLI   DS1FMTID,X'F1'           .FORMAT 1 ?\n         BNE   LAST_ENT                 .NO - LAST DSCB PROCESSED\n         MVC   DET_DSOI,=C'PS  '\n         TM    DS1DSORG,DS1DSGPS        .SEQUENTIAL ?\n         BO    GOTDSORG                 .YES, BRANCH.\n         MVC   DET_DSO,=C'PO'\n         TM    DS1DSORG,DS1DSGPO        .PDS ?\n         BO    GOTDSORG                 .YES, BRANCH.\n         MVC   DET_DSO,=C'VS'\n         MVC   DET_RECI,=C'.  '         .NO RECFM\n         TM    DS1DSORG+1,DS1ORGAM      .VSAM ?\n         BO    NEXTOUT                  .YES, BRANCH.\n         MVC   DET_DSO,=C'DA'\n         TM    DS1DSORG,DS1DSGDA        .DIRECT ACCESS ?\n         BO    GOTDSORG                 .YES, BRANCH.\n         MVC   DET_DSO,=C'IS'\n         TM    DS1DSORG,DS1DSGIS        .ISAM ?\n         BO    GOTDSORG                 .YES, BRANCH.\n         MVC   DET_DSO,=C'CX'\n         TM    DS1DSORG,DS1DSGCX        .BTAM/QTAM ?\n         BO    GOTDSORG                 .YES, BRANCH.\n         MVC   DET_DSO,=C'GS'\n         TM    DS1DSORG+1,DS1DSGGS      .GRAPHICS ?\n         BO    GOTDSORG                 .YES, BRANCH.\n         MVC   DET_DSO,=C'TX'\n         TM    DS1DSORG+1,DS1DSGTX      .TCAM LINE GROUP ?\n         BO    GOTDSORG                 .YES, BRANCH.\n         MVC   DET_DSO,=C'TQ'\n         TM    DS1DSORG+1,DS1DSGTQ      .TCAM MESSAGE QUEUE ?\n         BO    GOTDSORG                 .YES, BRANCH.\n         MVC   DET_DSO,=C' ?'           .UNKNOWN DSORG.\n*\nGOTDSORG EQU   *\n         MVC   DET_DSO1,=C'U '\n         TM    DS1DSORG,DS1DSGU         .UNMOVABLE ?\n         BO    SETRECM                  .YES, BRANCH.\n******** MVC   DET_DSO1,=C'-H'\n         TM    DS1SMSFG,DS1PDSEX        .HFS ?\n         BNO   TESTPDSE                 .NO, TEST FOR PDSE\n         MVC   DET_DSOI,=C'HFS '        .YES, SET DSORG\n         B     SETRECM                  .BRANCH.\nTESTPDSE EQU   *\n         MVC   DET_DSO1,=C'-E'\n         TM    DS1SMSFG,DS1PDSE         .PDSE ?\n         BO    SETRECM                  .YES, BRANCH.\n         MVC   DET_DSO1,=C'  '\n*\nSETRECM  EQU    *\n         MVC   DET_RECI,=C'U  '\n         TM    DS1RECFM,DS1RECFU        .UNDEFINED LENGTH\n         BO    NEXTOUT\n         MVC   DET_REC1,=C'F'\n         TM    DS1RECFM,DS1RECFF        .FIXED LENGTH\n         BO    CHKBLKED\n         MVC   DET_REC1,=C'V'\n         TM    DS1RECFM,DS1RECFV        .VARIABLE LENGTH\n         BO    CHKBLKED\n         MVC   DET_REC1,=C'T'\n         TM    DS1RECFM,DS1RECFT        .TRACK OVERFLOW\n         BO    CHKBLKED\n         MVC   DET_REC1,=C'?'\n*\nCHKBLKED EQU   *\n         TM    DS1RECFM,DS1RECFB        .BLOCKED RECORDS\n         BNO   TSTSPAN\n         MVC   DET_REC2,=C'B'\n*\nTSTSPAN  EQU   *\n         TM    DS1RECFM,DS1RECFS        .SPANNED RECORDS\n         BNO   TSTANSI\n         CLC   DET_REC2,=C'B'\n         BNE   SETSPAN\n         MVC   DET_REC3,=C'S'\n         B     NEXTOUT\nSETSPAN  EQU   *\n         MVC   DET_REC2,=C'S'\n         B     NEXTOUT\n*\nTSTANSI  EQU   *\n         TM    DS1RECFM,DS1RECFA        .ANSI RECORDS\n         BNO   TSTMC\n         CLC   DET_REC2,=C'B'\n         BNE   SETANSI\n         MVC   DET_REC3,=C'A'\n         B     NEXTOUT\nSETANSI  EQU   *\n         MVC   DET_REC2,=C'A'\n         B     NEXTOUT\n*\nTSTMC    EQU   *\n         TM    DS1RECFM,DS1RECMC        .MACHINE CONTROL\n         BNO   NEXTOUT\n         CLC   DET_REC2,=C'B'\n         BNE   SETMC\n         MVC   DET_REC3,=C'M'\n         B     NEXTOUT\nSETMC    EQU   *\n         MVC   DET_REC2,=C'M'\n*\nNEXTOUT  EQU   *\n         TM    DS1DSIND,DS1IND40        .RACF DEFINED ?\n         BO    SETRACF                  .YES, BRANCH.\n         MVC   DET_RACF,=C' NO'         .NOT RACF DEFINED\n         B     OUTEXTV\nSETRACF  EQU   *\n         MVC   DET_RACF,=C'YES'         .RACF DEFINED\n*\nOUTEXTV EQU    *\n         MVC   DET_DSN(44),DS1DSNAM     .MOVE DATA SET NAME\n*\n         XR    R03,R03                  .CLEAR\n         IC    R03,DS1NOEPV             .# OF EXTENTS ON VOLUME\n         LR    R02,R03                  .# OF EXTENT FOR CALC.\n         STH   R03,DET_EXT              .  AND STORE\n*\n         MVC   DET_SEQ,DS1VOLSQ         .VOLUME SEQUENCE NUMBER\n         MVC   DET_BLKS,DS1BLKL         .BLOCK SIZE\n         MVC   DET_LREC,DS1LRECL        .LRECL\n*\n         XR    R03,R03                  .CLEAR\n         IC    R03,DS1REFD              .YEAR PART OF REFERENCE DATE\n         STH   R03,DET_REFY             .YEAR PART OF REFERENCE DATE\n         LH    R09,DS1REFD+1            .DAYS OF REFERENCE DATE\n         BAL   R14,JULGREGC\n         STH   R07,DET_REFM             .MONTH OF YEAR\n         STH   R09,DET_REFD             .DAY OF MONTH\n*\n         IC    R03,DS1CREDT             .YEAR PART OF CREATION DATE\n         STH   R03,DET_CREY             .YEAR PART OF CREATION DATE\n         LH    R09,DS1CREDT+1           .DAYS OF CREATION DATE\n         BAL   R14,JULGREGC\n         STH   R07,DET_CREM             .MONTH OF YEAR\n         STH   R09,DET_CRED             .DAY OF MONTH\n*\n         IC    R03,DS1EXPDT             .YEAR PART OF EXPIRY DATE\n         STH   R03,DET_EXPY             .YEAR PART OF EXPIRY DATE\n         LA    R01,DS1EXPDT+1           .DAYS OF EXPIRY DATE\n         LH    R09,0(R01)               .DAYS OF EXPIRY DATE\n         BAL   R14,JULGREGC\n         STH   R07,DET_EXPM             .MONTH OF YEAR\n         STH   R09,DET_EXPD             .DAY OF MONTH\n*\n         L     R08,TRKS_CYL             .LOAD # TRKS/CYL\n         XR    R05,R05                  .CLEAR FOR TOTAL # TRKS\n         XR    R09,R09                  .CLEAR FOR TOTAL # CYLS\n         LTR   R02,R02                  .CHECK # EXTENTS\n         BZ    NO_SPACE                 .NO SPACE SPECIFIED\n         LA    R03,DS1EXT1              .ADDRESS OF 1ST EXTENT\n         BAL   R14,CALCUSED             .CALC USED SPACE\n         LA    R03,DS1EXT2              .ADDRESS OF 2ND EXTENT\n         BAL   R14,CALCUSED             .CALC USED SPACE\n         LA    R03,DS1EXT3              .ADDRESS OF 3RD EXTENT\n         BAL   R14,CALCUSED             .CALC USED SPACE\n*\n         LA    R11,DSCB_LEN(0,R11)      .NEXT DSCB - MUST BE F3\n         BCT   R10,GETDSCB3             .DECREMENT AND BRANCH\n         B     ERR_VTOC                 .SOMETHING ROTTEN.....\n*\nGETDSCB3 EQU   *\n         DROP  R11                      .USE SAME REGISTER - DSCB1/3\n         USING IECSDSL3,R11             .MAPPING FOR DSCB3 BUFFER\n         CLI   DS3FMTID,X'F3'           .FORMAT 3 ?\n         BE    DSCB3_A                  .YES, ADDRESS DSCB3\n         CLI   DS3FMTID,X'F2'           .FORMAT 2 ?\n         BNE   NEX_DSCB                 .MUST BE NEXT F1 DSCB\n         LA    R11,DSCB_LEN(0,R11)      .NEXT DSCB\n         BCT   R10,GETDSCB3             .DECREMENT AND BRANCH\n         B     LAST_ENT                 .ONLY IF LAST DSCB\n*\nNO_SPACE EQU   *\n         MVC   DET_CYLA,=H'0'           .ZERO SPACE ALLOCATION\n         MVC   DET_TRKA,=H'0'           .ZERO SPACE ALLOCATION\n         B     END_DSCB                 .PRINT OUTPUT\n*\nDSCB3_A  EQU   *\n         LA    R03,DS3EXTNT             .ADDR. OF 1ST OF 4 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 2ND OF 4 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 3RD OF 4 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 4TH OF 4 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n*\n         LA    R03,DS3ADEXT             .ADDR. OF 1ST OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 2ND OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 3RD OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 4TH OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 5TH OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 6TH OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 7TH OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 8TH OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n         LA    R03,10(,R03)             .ADDR. OF 9TH OF 9 EXTENTS\n         BAL   R14,CALCUSED             .CALC. USED SPACE\n*\n         LA    R11,DSCB_LEN(0,R11)      .NEXT DSCB - MUST BE F3\n         BCT   R10,GETDSCB3             .DECREMENT AND BRANCH\n         B     ERR_VTOC                 .SOMETHING ROTTEN.....\n*\nCALCEND1 EQU   *\n         STH   R05,DET_TRKA             .TRKS ALLOCATED\n         STH   R09,DET_CYLA             .CYLS ALLOCATED\n*\nEND_DSCB EQU   *\n         LA    R11,DSCB_LEN(0,R11)      .NEXT DSCB\n         L     R01,@DSN_NUM             .# OF DSN'S\n         LA    R01,1(,R01)              .INCREMENT # DSN'S\n         ST    R01,@DSN_NUM             .# OF DSN'S\n         LA    R04,DET_LEN(0,R04)       .NEXT DETAIL LINE\n         BCT   R10,NEX_DSCB             .DECREMENT AND BRANCH\n*\nLAST_ENT EQU   *\n         TM    CVSTAT,STAT064           .MORE DSCB'S TO READ ?\n         BO    NEXT_LOT                 .YES\n         TM    CVSTAT,STAT073           .MORE DSCB'S TO READ ?\n         BO    NEXT_LOT                 .YES\n         B     END_PROG                 .END OF PROGRAM\n*\nNEXT_LOT EQU   *\n         L     R10,@UCB_ADD             .LOAD UCB ADDRESS\n         CVAFFILT ACCESS=RESUME,        .NEXT LOT OF DSCB'S            +\n               FLTAREA=KEEP,            .KEEP FILTER AREA              +\n               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +\n               FCL=FCL_LIST,            .ALL DSN'S                     +\n               UCB=(R10),               .UCB ADRESS FROM UCBLOOK MACRO +\n               MF=(E,CVPL_MAP)          .POINTER TO LIST FORM MACRO\n         LTR   R15,R15                  .CHECK RETURN CODE\n         BZ    NEX_FILT                 .LAST LOT OF DSCB'S\n         TM    CVSTAT,STAT064           .MORE DSCB'S TO READ ?\n         BO    NEX_FILT                 .YES\n         TM    CVSTAT,STAT073           .MORE DSCB'S TO READ ?\n         BO    NEX_FILT                 .YES\n         B     ERR_FLTR                 .SOMETHING WRONG\n*\n***=================================================================***\n***  ERROR ROUTINES\n***=================================================================***\nERR_VTOC EQU    *\n         ST    R15,RET_CODE             .SAVE RETURN CODE\n         MVC   WTO_VTOC+20(6),VOLSER    .MOVE VOLSER\nWTO_VTOC EQU   *\n         WTO   '*** VOLSER: ...... --- VTOC SEQUENCE ERROR      '\n         B     END_PROG\n*\nERR_FLT  EQU    *\n         ST    R15,RET_CODE             .SAVE RETURN CODE\n         MVC   WTO_FLT+20(6),VOLSER     .MOVE VOLSER\nWTO_FLT  EQU   *\n         WTO   '*** VOLSER: ...... --- RC > 0 FROM CVAFFILT READ'\n         B     END_PROG\n*\nERR_FLTR EQU    *\n         ST    R15,RET_CODE             .SAVE RETURN CODE\n         MVC   WTO_FLTR+20(6),VOLSER    .MOVE VOLSER\nWTO_FLTR EQU   *\n         WTO   '*** VOLSER: ...... --- RC > 0 FROM CVAFFILT RESUME'\n         B     END_PROG\n*\n***=================================================================***\n***  END OF PROGRAM.\n***=================================================================***\nEND_PROG EQU   *\n         TM    STAT_MAP,STAT_YES        .WANT A MAP ?\n         BNO   END_REAL                 .NO\n         L     R06,@MAP_#AD             .ADDR. OF # MAP ENTRIES\n         MVC   0(4,R06),@MAP_NUM        .MOVE TO OUTPUT\n*\nEND_REAL EQU   *\n         L     R06,@DSN_#AD             .ADDR. OF # DSN'S PROCESSED\n         MVC   0(4,R06),@DSN_NUM        .MOVE TO OUTPUT\n         L     R01,@BUF_ADD             .BUFFER ADDRESS\n         FREEMAIN R,LV=LEN_BUF,A=(R01)  .FREE STORAGE\n*\n         CVAFFILT ACCESS=RLSE,          .RELEASE ACCESS LIST           +\n               FLTAREA=NOKEEP,          .FREE FILTER AREA              +\n               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +\n               FCL=FCL_LIST,            .ALL DSN'S                     +\n               MF=(E,CVPL_MAP)          .POINTER TO LIST FORM MACRO\n         L     R15,RET_CODE             .SET RETURN CODE\n         EDCEPIL                        .PROGRAM EPILOG FOR C\n*\n***=================================================================***\n***  CONVERT JULIAN TO GREGORIAN DATE\n***=================================================================***\nJULGREGC EQU   *\n         XR    R07,R07                  .CLEAR\n         LTR   R09,R09                  .DATE ZEROES ?\n         BNZ   VALDAT                   .NO ? CONVERT DATE\n         BR    R14\n***=================================================================***\n***  CHECK FOR LEAP YEAR\n***=================================================================***\nVALDAT   EQU   *\n         STC   R03,##WORK               .STORE YEAR FOR TEST\n         MVC   CALNDR,CALENDR           .MOVE #DAYS TO WORKAREA\n         TM    ##WORK,X'03'             .YEAR MULTIPLE OF 4 ?\n         BNZ   DATCONV                  .NO, NOT LEAP YEAR\n         TM    ##WORK,X'FF'             .CENTURY BOUNDARY ?\n         BNZ   LEAPYR                   .NO, LEAP YEAR\n***      TM    ##WORK,X'03'             .CENTURY MULTIPLE OF 4 ?\n***      BNZ   DATCONV                  .NO, NOT LEAP YEAR\nLEAPYR   MVI   FEB,X'1D'                .SET NO OF DAYS IN FEB=29\n*\n***=================================================================***\n***  CALCULATE MONTH OF YEAR AND DAY OF MONTH\n***=================================================================***\nDATCONV  EQU   *\n         XR    R06,R06                  .CLEAR\n         LA    R07,1                    .MONTH COUNTER = 1\n         LA    R08,CALNDR               .CALENDAR POINTER TO JANUARY\nCALCMON  EQU   *\n         IC    R06,0(R08)               .STORE NUMBER OF DAYS IN MONTH\n         SR    R09,R06                  .SUBTRACT FROM DAY OF YEAR\n         BNP   LASTMON                  .DONE IF RESULT <= 0\n         LA    R07,1(R07)               .INCREMENT MONTH COUNTER BY 1\n         LA    R08,1(R08)               .CALENDAR POINTER = NEXT MONTH\n         B     CALCMON                  .DO NEXT CALCULATION\nLASTMON  EQU   *\n         AR    R09,R06                  .ADD LAST MONTH\n         BR    R14\n*\n***=================================================================***\n***  SET UP DASD MAPPING AND CALCULATE ALLOCATED SPACE FOR A DATA SET\n***=================================================================***\nCALCUSED EQU   *\n         ST    R05,SAVR05               .SAVE TOTAL # TRKS\n         ST    R09,SAVR09               .SAVE TOTAL # CYLS\n         ST    R14,SAVR14               .SAVE RETURN ADDRESS\n         XR    R05,R05                  .CLEAR FOR TOTAL # TRKS\n         XR    R09,R09                  .CLEAR FOR TOTAL # CYLS\nCALC_NOM EQU   *\n         LH    R06,2(R03)               .START CYL ADDR.\n         LH    R07,6(R03)               .END CYL ADDR.\n         SR    R07,R06                  .CALC # FULL CYLS USED\n         BZ    TRKONE                   .START + END ON SAME CYL\n         BCT   R07,CYLADD               .ADD CYL TO TOTAL\n         B     TRKBEG                   .START + END ON ADJ. CYL\nCYLADD   EQU   *\n         AR    R09,R07                  .ADD TO TOTAL # CYLS\nTRKBEG   EQU   *\n         LH    R06,4(R03)               .START TRK ADDR.\n         LTR   R06,R06                  .START TRK ADDRESS=0 ?\n         BNZ   CALCBEG                  .NO, CALCULATE TRKS\n         LA    R09,1(,R09)              .ANOTHER FULL CYLINDER\n         B     TRKEND                   .DO END TRK CALC.\nCALCBEG  EQU   *\n         LR    R07,R08                  .# TRKS/CYL\n         SR    R07,R06                  .CALC # TRKS\n         AR    R05,R07                  .ADD TO TOTAL TRKS\nTRKEND   EQU   *\n         LH    R07,8(R03)               .END TRK ADDR.\n         LA    R07,1(,R07)              .CORRECTION FOR CALCULATION\n         CR    R07,R08                  .END TRK ADDRESS=TRKS/CYL ?\n         BNE   CALCEND                  .NO, CALCULATE TRKS\n         LA    R09,1(,R09)              .ANOTHER FULL CYLINDER\n         B     CALC_MAP                 .DO NEXT CALCULATION\nCALCEND  EQU   *\n         AR    R05,R07                  .ADD TO TOTAL TRKS\n         B     CALC_MAP                 .DO NEXT CALCULATION\nTRKONE   EQU   *\n         LH    R06,4(R03)               .START TRK ADDR.\n         LH    R07,8(R03)               .END TRK ADDR.\n         LA    R07,1(,R07)              .CORRECTION FOR CALCULATION\n         LTR   R06,R06                  .START TRK ADDRESS=0 ?\n         BNZ   CALCONE                  .NO, CALCULATE TRKS\n         CR    R07,R08                  .END TRK ADDRESS=TRKS/CYL ?\n         BNZ   CALCONE                  .NO, CALCULATE TRKS\n         LA    R09,1(,R09)              .ONE FULL CYLINDER\n         B     CALC_MAP                 .DO NEXT CALCULATION\nCALCONE  EQU   *\n         SR    R07,R06                  .CALC # TRKS\n         AR    R05,R07                  .ADD TO TOTAL TRKS\n*\nCALC_MAP EQU   *\n         TM    STAT_MAP,STAT_YES        .WANT A MAP ?\n         BNO   CALC_END                 .NO\n         LR    R06,R03                  .GET CCHHR POINTER\n         L     R07,@MAP_ADD             .LOAD MAP ADDRESS\n         USING MAP_BUFF,R07             .    AND MAP DSECT\n*\n         XR    R03,R03                  .CLEAR\n         IC    R03,1(R06)               .EXTENT NUMBER\n         LA    R03,1(,R03)              .    NUMBERED 0-14 - CHANGE\n         STH   R03,MAP_EXTN             .    AND STORE\n*\n         MVC   MAP_VTOC(8),2(R06)       .VTOC ADDRESS\n*\n         STH   R05,MAP_TRKA             .STORE TRKS ALLOCATED\n         STH   R09,MAP_CYLA             .STORE CYLS ALLOCATED\n         LH    R03,DET_EXT              .LOAD # EXTENTS\n         STH   R03,MAP_EXT              .     AND STORE TO MAP\n         MVC   MAP_DSN,DET_DSN          .MOVE DATA SET NAME\n*\n         DROP  R07                      .END ADDRESSABILITY\n         LA    R07,MAP_LEN(0,R07)       .NEXT ENTRY\n         ST    R07,@MAP_ADD             .STORE NEW ADDRESS\n         L     R01,@MAP_NUM             .# OF MAP ENTRIES\n         LA    R01,1(,R01)              .INCREMENT # MAP ENTRIES\n         ST    R01,@MAP_NUM             .# OF MAP ENTRIES\n         LR    R03,R06                  .RESTORE OFFSET\n*\nCALC_END EQU   *\n         L     R06,SAVR05               .TOTAL # TRKS\n         AR    R05,R06                  .TOTAL # TRKS\n         L     R06,SAVR09               .TOTAL # CYLS\n         AR    R09,R06                  .TOTAL # CYLS\n         L     R14,SAVR14               .LOAD RETURN ADDRESS\n         BCTR  R02,R14                  .RETURN IF MORE EXTENTS\n         B     CALCEND1                 .END OF FREE SPACE\n*\n***=================================================================***\n***  VARIABLES, CONSTANTS AND UCB\n***=================================================================***\n         LTORG\n         EQUATES1\nDSCB_NUM EQU   255                      .NUMBER OF DSCB'S\nLEN_BUF  EQU   DSCB_LEN*DSCB_NUM        .LENGTH OF DSCB BUFFER\n*\n@DSN_NUM DS    F                        .# DSN'S\n@DSN_#AD DS    F                        .ADDR OF # DSN'S\n@MAP_NUM DS    F                        .# MAP ENTRIES\n@MAP_#AD DS    F                        .ADDR OF # MAP ENTRIES\n@BUF_ADD DS    F                        .BUFFER ADDRESS\n@MAP_ADD DS    F                        .ADDR OF MAP\n@UCB_ADD DS    F                        .STORAGE AREA FOR UCB ADDRESS\n*\nRET_CODE DS    F                        .RETURN CODE\nSAVR05   DS    F                        .FOR TRK CALC\nSAVR09   DS    F                        .FOR CYL CALC\nSAVR14   DS    F                        .RETURN ADDRESS FOR BAL\nTRKS_CYL DS    F                        .# TRKS/CYL\nVOLSER   DS    CL6                      .VOLSER\nCALENDR  DC    X'1F1C1F1E1F1E1F1F1E1F1E1F'  .# DAYS ON YEAR\nSTAT_MAP DS    XL1                      .MAP STATUS TESTING\nSTAT_YES EQU   X'01'                    .MAP STATUS TESTING\n*\n##WORK   DS    XL1                      .WORKAREA\n*\nCALNDR   DS    0XL12                    .LENGTH OF CALENDER\n         DS    XL1                      .# DAYS IN JAN\nFEB      DS    XL1                      .# DAYS IN FEB\n         DS    XL10                     .# DAYS IN REST OF YEAR\n*\nFCL_LIST DS    XL16                     .FILTER CRITERIA LIST\nFCL_DSN  DS    XL8                      .FILTER CRITERIA LIST\n*\nCVPL_MAP CVAFFILT ACCESS=READ,          .ALL DSCB'S FROM BEGINNING     +\n               FLTAREA=KEEP,            .KEEP FILTER AREA              +\n               BUFLIST=BFLHDR,          .STORE DSCB'S IN HERE          +\n               FCL=FCL_LIST,            .ALL DSN'S                     +\n               MF=L                     .LIST FORM OF MACRO\n         ORG   CVPL_MAP\n         ICVAFPL DSECT=NO\n*\n         ORG   ,                        .RESET POINTER\n         ICVAFBFL DSECT=NO              .BUFFER LIST\n         DS    CL((DSCB_NUM-1)*BFLELN)  .REST OF ENTRIES\n*\n         EDCDSAD                        .SAVE AREA FOR C INTERFACE\n*\n         ICVFCL DSECT=YES               .FILTER CRITERIA LIST MAPPING\n*\n         VTC@MAPB                       .MAPPING FOR ALLOCATION MAP\n         VTC@DETB                       .MAPPING FOR DSN LIST\n         VTC@HDRB                       .MAPPING FOR HEADER INFO AREA\n*\n         DSECT                          .DSCB\n         IECSDSL1 (1)                   .FORMAT 1 DSCB\nDSCB_LEN EQU   *-IECSDSL1               .LENGTH OF DSCB\n         IECSDSL1 (3)                   .FORMAT 3 DSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOC@UCB": {"ttr": 12554, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01<\\x00\\x00\\x00\\x94\\x18\\x8f\\x00\\x99\\x01\\x8f\\x14\\x02\\x00H\\x009\\x00H\\xe2\\xe8\\xe2\\xf0\\xf0\\xf0\\xf7@@@'", "ispf": {"version": "01.60", "flags": 0, "createdate": "1994-07-07T00:00:00", "modifydate": "1999-01-18T14:02:00", "lines": 72, "newlines": 57, "modlines": 72, "user": "SYS0007"}, "text": "VTOC@UCB CSECT\nVTOC@UCB AMODE 31\nVTOC@UCB RMODE ANY\n***=================================================================***\n***      GET LIST OF ALL ONLINE DASD DEVICES\n***=================================================================***\n         EDCPRLG BASEREG=((12))         .HOUSEKEEPING FOR C INTERFACE\n*\n         LM    R03,R04,0(R01)           .SAVE START OF VOLSER TABLE\n         USING UCB_BUFF,R03             .MAPPING OF RETURN AREA\n         LA    R10,UCB_AREA             .AREA FOR UCB COPY\n         USING UCBCMSEG,R10             .COPY OF UCB\n         XC    WRK_AREA,WRK_AREA        .CLEAR WORKAREA BEFORE CALL\n*\nNEXT_UCB EQU   *\n         UCBSCAN COPY,                  .OBTAIN COPY OF UCB            +\n               WORKAREA=WRK_AREA,       .WORKAREA ADDRESS              +\n               UCBAREA=UCB_AREA,        .UCB AREA                      +\n               DYNAMIC=YES,             .ALSO HCD DEVICES              +\n               RANGE=ALL,               .INCLUDE 4-DIGIT DEVICES       +\n               DEVCLASS=DASD            .ONLY DASD\n         LTR   R15,R15                  .VALID DASD UCB FOUND ?\n         BNZ   END_PROG                 .NO - END OF ROUTINE\n         TM    UCBSTAT,UCBONLI          .DEVICE ONLINE ?\n         BZ    NEXT_UCB                 .NO, GET NEXT UCB.\n         TM    UCBFLA,UCBBOX            .DEVICE BOXED ?\n         BNZ   NEXT_UCB                 .YES, GET NEXT UCB.\n*\n         XC    UCB_BUFF(UCB_DLEN),UCB_BUFF   .CLEAR BUFFER\n         MVC   UCB_VOLS,UCBVOLI         .VOLSER\n         MVC   UCB_UTYP,UCBUNTYP        .UNIT TYPE 0F-3390, 0E-3380\n         MVC   UCB_ADDR,UCBCHAN         .ADDRESS OF DEVICE\n         LA    R03,UCB_DLEN(,R03)       .NEXT ENTRY\n         B     NEXT_UCB                 .NEXT ENTRY\n*\nEND_PROG EQU   *\n         MVI   0(R03),X'FF'             .END OF TABLE INDICATOR\n         L     R11,CVTPTR               .GET CVT ADDRESS\n         USING CVTMAP,R11               .AND GET ADRESSABILITY\n         USING SID_BUFF,R04             .GET ADRESSABILITY\n         XC    SID_NULL,SID_NULL        .END OF STRING\n         MVC   SID_SID,CVTSNAME         .GET SYSTEM ID\n         XR    R15,R15                  .SET RC=00\n         EDCEPIL                        .PROGRAM EPILOG FOR C\n*\n***=================================================================***\n***      VARIABLES, CONSTANTS AND UCB\n***=================================================================***\n         LTORG\n         EQUATES1\n*\nWRK_AREA DS    CL100\n         DS    0F\nUCB_AREA DS    CL48\n         IEFUCBOB PREFIX=YES,LIST=YES,DEVCLAS=DA\n*\n         EDCDSAD                        .SAVE AREA FOR C INTERFACE\n*\nUCB_BUFF DSECT                          .UCBPING FOR UCB AREA\nUCB_VOLS DS    CL6                      .VOLSER\n         DS    CL1                      .....BINARY ZEROES.....\nUCB_UTYP DS    XL1                      .UNIT TYPE\nUCB_ADDR DS    FL2                      .DEVICE ADDRESS\n         DS    0H                       ALIGMENT\nUCB_DLEN EQU   *-UCB_BUFF               .LENGTH OF AREA\n*\nSID_BUFF DSECT                          .UCBPING FOR UCB AREA\nSID_SID  DS    CL8                      .SYSTEM ID\nSID_NULL DS    CL1                      .....BINARY ZEROES.....\n*\n         CVT   DSECT=YES,PREFIX=YES,LIST=YES   .FOR SYSTEM ID\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT499/FILE499.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT499", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}