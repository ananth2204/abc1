{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012439000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE605.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE605.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x05'", "DS1TRBAL": "b'\\x90\\xa2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04h\\x00\\x07\\x04h\\x00\\x0c\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x047\\x00\\x00\\x01\\x023?\\x01\\x023?\\x110\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf5@@@'", "ispf": {"version": "04.55", "flags": 0, "createdate": "2002-11-29T00:00:00", "modifydate": "2002-11-29T11:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-455"}, "text": "REGULAR CBT TAPE - VERSION 455    FILE:  605\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT455.FILE605\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 17 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,813 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/29/02    11:30:05    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$WARNING": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00Y\\x01\\x02(_\\x01\\x02(_\"Y\\x00*\\x00\\x0f\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-10-12T00:00:00", "modifydate": "2002-10-12T22:59:59", "lines": 42, "newlines": 15, "modlines": 0, "user": "SOMITCW"}, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*    This PDS contains old sloppy code written for one use.\n* The purpose was to save ACF2 log on id passwords to allow\n* us to switch to RACF without us having to change the\n* passwords for any users.\n*\n*    These programs were able to obtain the needed data, but the\n* data had to be manually editted before it could be used.\n*\n*    It's been a few years since I used it, but seem to remember\n* that I started with exit LGNIXIT which didn't give what I wanted.\n* At the last minute, I had to switch to exit SEVPRE ?\n* That could be backwards.\n*\n*    Use at your own risk.  Buyer beware.\n*\n*    You can send questions to somitcw@erols.com\n* There is no promise that I can help.\n*\n*    LGNPARMS, LGNPXIT, and NEWPXIT are not mine.\n* They are samples or information from elsewhere.\n*\n*    Members:\n* $WARNING - This member.\n* CVTUSER  - DSECT for SEVPRE and other routines\n* LGNIXIT  - ACF2 Logon Prevalidation Exit\n* LGNPARMS - Research information\n* LGNPXIT  - Research information\n* NEWPXIT  - Research information\n* PRTPSWD  - Program to read the saved password data set\n* PRTPSWDJ - JCL to read the saved password data set\n* PRTPSWD2 - Program to format the saved password data set\n* R        - PROC to starta reader to read in a JOB\n* SAVE#JOB - JOB JCL that gets read in by PROC R, rename to SAVEPSWD\n* SAVEPROC - Sample PROC JCL.  It can be executed as part of a JOB,\n*            STC, or subsystem.\n* SAVEPSWD - Source to create ECSA area and copy ECSA to a data set.\n* SAVEPSWJ - JCL like SAVE#JOB and SAVEPROC\n* SEVPRE   - ACF2 System Entry Validation Preprocessing Exit\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE605": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x047\\x00\\x00\\x01\\x023?\\x01\\x023?\\x11(\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf5@@@'", "ispf": {"version": "04.55", "flags": 0, "createdate": "2002-11-29T00:00:00", "modifydate": "2002-11-29T11:28:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CBT-455"}, "text": "//***FILE 605 is a group of programs designed to help with a        *   FILE 605\n//*           conversion from ACF2 to RACF.  This package will      *   FILE 605\n//*           assist in capturing all the ACF2 passwords.           *   FILE 605\n//*                                                                 *   FILE 605\n//*      This PDS contains old sloppy code written for one use.     *   FILE 605\n//*      The purpose was to save ACF2 log on id passwords to        *   FILE 605\n//*      allow us to switch to RACF without us having to change     *   FILE 605\n//*      the passwords for any users.                               *   FILE 605\n//*                                                                 *   FILE 605\n//*      These programs were able to obtain the needed data, but    *   FILE 605\n//*      the data had to be manually edited before it could be      *   FILE 605\n//*      used.                                                      *   FILE 605\n//*                                                                 *   FILE 605\n//*      It's been a few years since I used it, but seem to         *   FILE 605\n//*      remember that I started with exit LGNIXIT which didn't     *   FILE 605\n//*      give what I wanted.  At the last minute, I had to          *   FILE 605\n//*      switch to exit SEVPRE ?  That could be backwards.          *   FILE 605\n//*                                                                 *   FILE 605\n//*      Use at your own risk.  Buyer beware.                       *   FILE 605\n//*                                                                 *   FILE 605\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CVTUSER": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00B\\x00\\x94\\x18\\x7f\\x01\\x02\\x14/\\x17$\\x00\\x14\\x00\\x03\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1994-07-06T00:00:00", "modifydate": "2002-05-22T17:24:42", "lines": 20, "newlines": 3, "modlines": 0, "user": "SOMITCW"}, "text": "*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*  MPF exit SYS1.SORCPROD(IEC507D)  uses CVTUSER.\n*  MPF exit SYS1.SORCPROD(IOS000I)  uses CVTUSER.\n* ACF2 exit SYS1.SORCPROD(LGNIXIT)  uses CVTUSER. old, delete programs\n* Batch PGM SYS1.SORCPROD(SAVEPSWD) uses CVTUSER. old, delete programs\n*  MPF exit SYS1.SORCPROD(DFHJC450) uses CVTUSER.\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nXCVTUSER DSECT ,\nXCVTUEYE DS    CL8                7 bytes of 'CVTUSER' and 1 byte X'01'\nXCVTUVOL DS    XL6                VOLSER from message used by IEC507D\n         DS    XL2                Space available for expansion\nXCVTUTIM DS    XL6                CYYDDDHHMMSS Century, Year,Day, Hour,\n*                                 Minute, and Second, used by IOS000I\n         DS    XL2                Space available for expansion\nXCVTPSWD DS    F                  ACF2 LGNIXIT anchor, used by SAVEPSWD\nXCVTJOUR DS    F                  DFHJC4508 Journal PRIM or SECO\n         DS    XL16               Space available for expansion\nXCVTUSIZ EQU   *-XCVTUSER         Length of area pointed to by CVTUSER\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LGNIXIT": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x04\\x00\\x98\"\\x9f\\x01\\x02\\x14/\\x17\\x16\\x00\\xba\\x00#\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1998-08-17T00:00:00", "modifydate": "2002-05-22T17:16:04", "lines": 186, "newlines": 35, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWL JOB (xxxxxxxx,xxxx,1439,9999),LGNIXIT-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,COND=(0,NE)\n//LGNIXIT EXEC HLASMCL,PARM.C=(NODECK,OBJECT,RENT),\n//             PARM.L='REFR,RENT,REUS,AC=1,LIST,MAP'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.CAI.CAIMAC,DISP=SHR\n//         DD  DSN=SYS1.SORCPROD,DISP=SHR  For the VCCS CVTUSER DSECT\n//* SYS1.SORCPROD must be after MACLIB with the WTO MACRO\nPASS     TITLE 'LGNIXIT - Record ACF2 Passwords'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*   Title: LGNIXIT\n*\n*   Author: I ain't saying.\n*\n*   Date-written:  8-17-1998\n*\n*   Change Log:\n*\n* xx-xx-xx x\n*  x.x.x.\n*\n*   Remarks:\n*\n*        This exit gets control when a user logs on to ACF2.\n*   It saves a user's userid, password, new-password, date, and\n*   time in a table in ECSA.\n*   Program SAVEPSWD will write the data to disk file.\n*\n* 7.10 Logon Prevalidation Exit (LGNIXIT)\n*\n* The Logon Prevalidation exit (LGNIXIT) enables you to inspect and\n* modify the system entry validation data in the ACVALD parameter\n* list.  You can use this exit to alter logon source information,\n* validate TSO passwords to ensure conformity to your standards, or\n* change the logonid used in logon processing.  LGNIXIT also enables\n* you to abort the logon.\n*\n* LGNIXIT is a self-contained load module residing in the link pack\n* area (LPA).  Specify the name of the module in the LGNIXIT field of\n* the GSO EXITS record.\n*\n* When LGNIXIT receives control, it is passed the addresses of the\n* logon preprompt parameters and the ACVALD parameter list.  You can\n* modify the ACVALD parameter list but not the logon preprompt\n* parameters.  CA-ACF2 performs this updating.\n*\n* Specification:  GSO EXITS record, LGNIXIT field.\n*\n* Attributes:  AMODE 31, RMODE ANY\n*\n* Input:  The Logon Prevalidation exit is entered in the\n* problem state and must be reentrant.  It receives the\n* following parameters upon entry:\n* R0   The address of ACVALD, the CA-ACF2 system entry validation\n*      parameter list.\n* R1   The address of the logon preprompt parameters.\n*\n* Output:  The Logon Prevalidation exit must restore registers\n*      R2-R14 and set a return code in R15.\n*\n* R15  Set one of the following return codes:\n*      0       Continue the logon.\n*      nonzero Abort the logon attempt.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nLGNIXIT  CSECT ,\nLGNIXIT  AMODE 31\nLGNIXIT  RMODE ANY\n         SAVE  (14,12),,LGNIXIT.&SYSDATE..&SYSTIME  Save caller's regs.\n         LR    R12,R15            Load address of entry point\n         USING LGNIXIT,R12        Give assembler program's base reg.\n         LR    R11,R0             Load the address of the ACVALD\n         USING ACVALD,R11         Addressing ACVALD\n         L     R9,16              Load the address of the CVT\n         ICM   R8,B'1111',CVTUSER-CVT(R9)  Address CVTUSER points to\n         BZ    RETURN             If no CVTUSER cannot save, get out\nGOTUSER  DS    0H\n         USING XCVTUSER,R8        Tell assembler about DSECT\n         CLC   XCVTUEYE,CCVTUSER  See if the CVTUSER area is mine\n         BNE   BADUSER            If someone else has CVTUSER, go tell\n         ICM   R8,B'1111',XCVTPSWD  Address CVTUSER points to\n         USING SAVEPW,R8          Tell assembler about DSECT\n         BZ    RETURN             No CVT Anchor, SAVEPSWD not run yet\n         CLC   EYECATCH,CLGNIXIT  See if the save area starts okay\n         BNE   BADANCH            Bad CVT Anchor, should not occur\nRETRY    DS    0H\n         CLC   FULL,NEXTSAVE      See if table is full\n         BL    ITISFULL           Table is full, go tell and exit\n         CLC   NEARFULL,NEXTSAVE  See if table is 75% full\n         BE    DUMPIT             Close to full, go dump it\nSAVEUSER DS    0H\n         L     R9,NEXTSAVE        Load address of next save space\n         LA    R7,ENTRYSZ(,R9)    Calculate the next entry address\n         CS    R9,R7,NEXTSAVE     Change the current address to next\n         BNZ   RETRY              If change failed, go try again\n         MVC   0(24,R9),MASK      Mask userid, password, & new-password\n         XC    0(24,R9),ACVLID    Save userid, password, & new password\n         DROP  R11                Don't need ACF2 ACVALD anymore\n         TIME  DEC                Get date and time\n         X     R1,MASK            Mask the date\n         ST    R1,24(,R9)         Store the date\n         X     R0,MASK            Mask the time\n         ST    R0,28(,R9)         Store the time\n*        B     RETURN             Go to exit, message first line okay\n         DROP  R8                 Drop pointer to area for SAVEPW table\nRETURN   DS    0H\n         SLR   R15,R15            Set a return code of zero\n         RETURN (14,12),RC=(15)   Return to caller, return code zero\n*\nBADUSER  DS    0H\n         WTO   'ACF2 exit LGNIXIT found a bad CVTUSER area',ROUTCDE=11\n         B     RETURN             Exit the exit quick\n*\nBADANCH  DS    0H\n         WTO   'ACF2 exit LGNIXIT found a bad ANCHOR area',ROUTCDE=11\n         B     RETURN             Exit the exit quick\n*\nDUMPIT   DS    0H\n         WTO   'ACF2 exit LGNIXIT area is near full',ROUTCDE=(1,11)\n         WTO   'Exit will issue command: S R,Q=SAVE#JOB',ROUTCDE=(1,11)\n         SLR   R0,R0              Set console zero\n         LA    R1,STARTCMD        Load addr. of the command for SVC 34\n         SVC   34                 Issue command: S R,Q=SAVE#JOB\n         B     SAVEUSER           Return to save user and password data\n*\nITISFULL DS    0H\n         WTO   'ACF2 exit LGNIXIT save storage area is full',ROUTCDE=11\n         WTO   'May need to run: S R,Q=SAVE#JOB',ROUTCDE=(1,11)\n         B     RETURN             Exit the exit quick\n*\nCCVTUSER DC    CL7'CVTUSER',XL1'1' Constant to init and check CVTUSER\nCLGNIXIT DC    CL7'LGNIXIT',XL1'1' Constant to init and check SAVEPW\nSTARTCMD DC    AL2(23),AL2(0),CL19'START R,Q=SAVE#JOB '\n         DS    0F                 Align mask for 'X' op-code\nMASK     DC    CL24'vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'  Encryption mask\n*\n         COPY  CVTUSER            VCCS user DSECT in SYS1.SORCPROD\n*\n* XCVTUSER DSECT ,\n* XCVTUEYE DS    CL8              7 bytes of 'CVTUSER' and 1 byte X'01'\n* XCVTUVOL DS    XL6              VOLSER from message used by IEC507D\n*          DS    XL2              Space available for expansion\n* XCVTUTIM DS    XL6              CYYDDDHHMMSS Century, Year,Day, Hour,\n*                                 Minute, and Second, used by IOS000I\n*          DS    XL2              Space available for expansion\n* XCVTPSWD DS    F                ACF2 LGNIXIT anchor, used by SAVEPSWD\n*          DS    XL20             Space available for expansion\n* XCVTUSIZ EQU   *-XCVTUSER       Length of area pointed to by CVTUSER\n*\n*\n*\nSAVEPW   DSECT ,\nEYECATCH DS    CL8                7 bytes of 'LGNIXIT' and 1 byte X'01'\nNEXTSAVE DS    F                  Address of current available entry\nNEARFULL DS    F                  Addr. of end of 75% pswd storage area\nFULL     DS    F                  Addr. of end of password storage area\nENTRIES  DS    XL32680            Location to save passwords in\nENTRYSZ  EQU   32                 Thirty-Two bytes per entry\nSAVEPWSZ EQU   *-SAVEPW           Length of the password entry storage\n*\n         ACVALD DSECT=YES         ACF2 exit parameter list from reg.0\n*\n         CVT   DSECT=YES          MVS's Communications Vector Table\n*\nR0       EQU   0\nR1       EQU   1                  R\nR2       EQU   2                    E\nR3       EQU   3                      G\nR4       EQU   4                        I\nR5       EQU   5                          S\nR6       EQU   6                            T\nR7       EQU   7                              E\nR8       EQU   8                                R\nR9       EQU   9                  E\nR10      EQU   10                   Q\nR11      EQU   11                     U\nR12      EQU   12                       A\nR13      EQU   13                         T\nR14      EQU   14                           E\nR15      EQU   15                             S\n         END   ,\n//L.SYSLMOD DD DSN=SYS1.LOADPROD,DISP=SHR,SPACE=\n NAME LGNIXIT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LGNPARMS": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x00\\x98\"\\x9f\\x00\\x98)\\x9f\\x14V\\x018\\x018\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-08-17T00:00:00", "modifydate": "1998-10-26T14:56:54", "lines": 312, "newlines": 312, "modlines": 0, "user": "SOMITCW"}, "text": "*          DATA SET LGNPARMS   AT LEVEL 001 AS OF 10/24/85\nLGNPARMS CSECT\n**********************************************************************\n* NAME       -   LGNPARMS                                            *\n*                                                                    *\n* AUTHOR     -   T. BRYANT                                           *\n*                                                                    *\n* FUNCTION   -   THE LOGON PARAMETER EXIT (LGNPARMS) ALLOWS AN       *\n*                INSTALLATION TO EXAMINE AND ALTER THE LOGONID       *\n*                PARAMETERS THROUGH ACF2.  IN OUR CASE, THE TSO      *\n*                PROJECT CODE ENTERED BY THE TSO USER WILL BE        *\n*                APPENDED TO THE IN-STORAGE TSO ACCOUNTING FIELD     *\n*                (FLDACCT).  ACF2 WILL THEN USE THIS INFORMATION     *\n*                TO BUILD THE JCL IN THE LOGON WORK AREA (LWA).      *\n* INPUT                                                              *\n* PARAMETER                                                          *\n* REGISTER   -   R1  -    ADDRESS OF THE ACFLDWA CONTROL BLOCK       *\n*                                                                    *\n* SYSTEM     -   MVS/SP AND MVS/XA                                   *\n*                                                                    *\n* DATE       -   10/24/85                                            *\n*                                                                    *\n* MACROS     -   FREEMAIN,GETMAIN,STFSMODE,TGET,TPUT                 *\n*                                                                    *\n* REGISTERS  -   R0   -   *** USED BY MVS ***                        *\n*                R1   -   ADDRESS OF LOGON WORK AREA                 *\n*                R2   -   USED BY TRANSLATE AND TEST INSTRUCTION     *\n*                R3   -   ADDRESS OF GETMAINED SCREEN STORAGE        *\n*                R4   -   ADDRESS OF GETMAINED SCREEN STORAGE LENGTH *\n*                R5   -   ADDRESS OF PROJECT CODE REPLY BUFFER       *\n*                R6   -   ADDRESS OF ACFLDWA                         *\n*                R7   -   LENGTH OF TSO PROJECT CODE                 *\n*                R8   -   LGNPARMS RETURN CODE TO ACF2               *\n*                R9   -   *** UNUSED BY THIS PROGRAM ***             *\n*               R10   -   *** UNUSED BY THIS PROGRAM ***             *\n*               R11   -   *** UNUSED BY THIS PROGRAM ***             *\n*               R12   -   BASE REGISTER                              *\n*               R13   -   SYSTEM SAVE AREA ADDRESS                   *\n*               R14   -   RETURN ADDRESS                             *\n*               R15   -   ENTRY POINT AND RETURN CODES               *\n**********************************************************************\n         USING LGNPARMS,R15            TEMPORARY ADDRESSABILITY\n         B     STMREGS                 BRANCH AROUND EYECATCHER\n         DC    C'LGNPARMS'             LGNPARMS PROGRAM\n         DC    C' '\n         DC    C'&SYSDATE'             GREGORIAN DATE\n         DC    C' '\n         DC    C'&SYSTIME'             GREGORIAN DATE\n         DS    0H                      RE-ESTABLISH ALIGNMENT\nSTMREGS  EQU   *\n         DROP  R15                     DONE WITH ADDRESSABILITY\n*****************************************\n*  PERFORM REENTRANT ENTRY              *\n*  HOUSEKEEPING.                        *\n*****************************************\n         STM   R14,R12,12(R13)              SAVE REGISTERS\n         LR    R12,R15                      SET BASE REGISTER\n         USING LGNPARMS,R12                 SET ADDRESSABILITY\n         GETMAIN R,LV=72                    GETMAIN OUR SAVE AREA\n         ST    R13,4(R1)                    SYSTEM S/A INTO OUR S/A\n         ST    R1,8(R13)                    OUR S/A INTO SYSTEM S/A\n         LR    R13,R1                       OUR S/A ADDRESS IN R13\n         L     R1,4(R13)                    RELOAD SYSTEM S/A ADDRESS\n         LM    R0,R1,20(R1)                 RELOAD REGS 0 AND 1\n*****************************************\n*  SET ADDRESSABILITY TO THE ACFLDWA    *\n*  LWA EXIT PARAMETER LIST.             *\n*****************************************\n         LR    R6,R1                        SAVE ACFLDWA ADDRESS\n         USING ACFLDWA,R6                   SET ADDRESSABILITY TO IT\n*****************************************\n*  WAIT ONE SECOND TO ALLOW ACF01137    *\n*  LAST LOGON ACCESS MESSAGE TO APPEAR. *\n*****************************************\n         STIMER WAIT,BINTVL=ONESEC          WAIT 1 SECOND\n*****************************************\n*  INFORM VTAM THAT WE ARE USING        *\n*  3270 FULLSCREEN SUPPORT.  GETMAIN    *\n*  WORK STORAGE TO BUILD SCREEN.        *\n*****************************************\n         STFSMODE ON,INITIAL=YES            SET VTAM FULLSCREEN MODE\n         LA    R0,SCRLNTH                   SCREEN LENGTH\n         GETMAIN R,LV=(0)                   GET STORAGE\n         LR    R3,R1                        STORAGE ADDRESS\n         MVC   0(SCRLNTH,R3),SCREEN         MOVE SCREEN FORMAT\n         LA    R4,SCRLNTH                   SCREEN LENGTH\n         LA    R5,PROJCDE(R3)               LOCATE PROJECT CODE\n*****************************************\n*  CHECK PROJECT CODE FOR VALID         *\n*  ALPHANUMERIC FIELDS.  IF NOT BUILD   *\n*  ERROR MESSAGE INTO CURRENT SCREEN    *\n*  AND REISSUE SCREEN.                  *\n*                                       *\n*  FREE SCREEN STORAGE AFTER USER HAS   *\n*  ENTERED PROJECT CODE.                *\n*****************************************\nFUL3270  TPUT  (3),(4),FULLSCR              ISSUE FULLSCREEN MESSAGE\n         TGET  (5),12,EDIT,WAIT             WAIT FOR RESPONSE\n         LTR   R8,R15                       WAS PA1 ENTERED?\n         BNZ   EXIT                         FAIL LOGON NOW!\n*****************************************\n*  CHECK THE PROJECT CODE ENTERED TO SEE*\n*  IF IT IS AT LEAST SIX (6) DIGITS IN  *\n*  LENGTH AND VALID ALPHANUERMIC.  IF   *\n*  NOT BUILD ERROR MESSAGE INTO CURRENT *\n*  SCREEN AND REISSUE MESSAGE TO USER.  *\n*****************************************\n         SR    R2,R2             CLEAR TRT-USED REGISTER 2\n         TRT   0(6,R5),TABLANK   LOOK FOR BLANK CHARACTER\n         BNZ   LESS6             LESS THAN 6 POS - ISSUE MESSAGE\n         OC    0(12,R5),UPPERCSE FLIP TO UPPER CASE\n         TRT   0(12,R5),TABCDE ANY NON-ALPHANUMERICS FOUND?\n         BZ    PROCESS           IF NONE - APPEND CODE TO FLDACCT\n         B     NOALPHA            IF SOME FOUND THEN EXIT\n*****************************************\n*  APPEND THE PROJECT CODE TO THE       *\n*  END OF THE IN-STORAGE LOGONID        *\n*  FLDACCT FIELD.                       *\n*****************************************\nPROCESS  TPUT  CLRSCR,CLRSCRL,FULLSCR       FORCE CLEARING OF SCREEN\n         STFSMODE ON,INITIAL=NO             SET VTAM LINE MODE\n         SR    R7,R7                        CLEAR REGISTER 2\n         LR    R15,R5                       ADDRESS OF PROJECT CODE\n         LA    R14,12                       BCT VALUE\n         BCTR  R15,0                        MINUS 1 FOR INCR LOOP\nINCR     LA    R15,1(R15)                   POINT TO NEXT CHARACTER\n         CLI   0(R15),BLANK                 VALUE OF X'40'?\n         BNE   GOINCR                        NO, GET NEXT DIGIT\n         B     APPEND                        YES, BUILD JCL AND SUBMIT\nGOINCR   AH    R7,H1                        ADD 1\n         BCT   R14,INCR                     GET NEXT DIGIT\n*****************************************\n*  AT THIS POINT WE HAVE A VALID TSO    *\n*  PROJECT CODE.  APPEND THIS CODE ONTO *\n*  THE END OF THE ACF2 IN-STORAGE       *\n*  FLDACCT FIELD.                       *\n*****************************************\nAPPEND   L     R15,FLDACCT                  IN-STORAGE LIDREC\n         LA    R15,81+13(R15)               END OF FLDACCT\n         MVI   0(15),T                      POS. 14 LETTER T\n         LR    R1,R7                        GET PROJECT CODE LENGTH\n         BCTR  R1,0                         DECREMENT FOR EXECUTE\n         EX    R1,MVCACCT                   APPEND TO END OF FLDACCT\n         SR    R8,R8                        INDICATE ZERO RETURN CODE\n*****************************************\n*  PERFORM REENTRANT EXIT HOUSEKEEPING. *\n*  AND SET RETURN CODE FROM REGISTER 8. *\n*****************************************\nEXIT     FREEMAIN R,LV=(4),A=(3)            FREE WORK AREA\n         LR    R1,R13                       LOAD OUR S/A ADDRESS\n         L     R13,4(,R13)                  RESTORE SYSTEM S/A ADDRESS\n         FREEMAIN R,LV=72,A=(1)             FREE S/A\n         LR    R15,R8                       ==> SET RETURN CODE\n         LM    R0,R12,20(R13)               RESTORE ALL EXCEPT 14,15\n         L     R14,12(R13)                  RESTORE RETURN ADDRESS\n         BR    R14                          RETURN TO CALLER\n*******************************************************************\n*        E X E C U T E D    I N S T R U C T I O N S               *\n*******************************************************************\nMVCACCT  MVC   1(0,R15),0(R5)               FLDACCT+14\n*******************************************************************\n*        E R R O R                                                *\n*        R O U T I N E                                            *\n*        S E C T I O N                                            *\n*******************************************************************\n*****************************************\n*  THE TSO USER HAS ENTERED LESS THAN   *\n*  A SIX (6) DIGIT PROJECT CODE.        *\n*  BUILD ERROR MESSAGE INTO CURRENT     *\n*  FULLSCREEN AND REISSUE SCREEN TO TSO *\n*  USER.                                *\n*****************************************\nLESS6    LA    R1,ERRDSPL(R3)               ERROR MESSAGE BUFFER\n         XC    0(L'PADCHAR,R1),0(R1)        SET TO BINARY ZEROES\n         MVC   0(L6MSGL,R1),L6MSG           WRITE ERROR MESSAGE\n         MVC   0(L'UPPERCSE,R5),UPPERCSE    INITIALIZE TO BLANKS\n         B     FUL3270                      REFRESH FULLSCREEN MESSAGE\n*****************************************\n*  THE TSO USER HAS ENTERED AT LEAST    *\n*  ONE (1) NON-ALPHANUMERIC FIELD.      *\n*  BUILD ERROR MESSAGE INTO CURRENT     *\n*  FULLSCREEN AND REISSUE SCREEN TO TSO *\n*  USER SHOWING BAD VALUE TO CORRECT.   *\n*****************************************\nNOALPHA  LA    R1,ERRDSPL(R3)               ERROR MESSAGE BUFFER\n         XC    0(L'PADCHAR,R1),0(R1)        SET TO BINARY ZEROES\n         MVC   0(ALPHAMGL,R1),ALPHAMG       WRITE ERROR MESSAGE\n         MVC   ALPHACDL(12,R1),0(R5)        SHOW BAD PROJECT CODE\n         MVC   0(L'UPPERCSE,R5),UPPERCSE    INITIALIZE TO BLANKS\n         B     FUL3270                      REFRESH FULLSCREEN MESSAGE\n*******************************************************************\n*        M E S S A G E                                            *\n*        S E C T I O N                                            *\n*******************************************************************\nH1       DC    H'1'\nONESEC   DC    F'100'    1 SECOND DELAY\n*****************************************\n*  TSO PROJECT CODE PROMPT SCREEN.      *\n*****************************************\nSCREEN   DS    0F                             ALIGN SCREEN TO FULLWORD\n         DC    X'F1'                          WCC-ERASE WRITE\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4040'                        SBA AT ROW 1  COLUMN 1\n         DC    X'3C'                          REPEAT TO ADDR (CLEAR)\n         DC    X'5D7F'                        ROW 24 COLUMN 80\n         DC    X'00'                          FILL CHARACTER\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4A5A'                        ROW 9  COLUMN 27\n         DC    X'13'                          INSERT CURSOR FOR CLEAR\n*****************************************\n*  TUTORIAL FOR PROJECT CODE.           *\n*****************************************\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'C5C1'                        ROW 5 COLUMN 3\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\n         DC    C'PROJECT CODE MUST BE AN ALPHANUMERIC VALUE'\n         DC    X'1D'                          START FIELD\n         DC    X'F8'                          ATTRIB-(P S H)\n         DC    C'6'\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\n         DC    C'TO'\n         DC    X'1D'                          START FIELD\n         DC    X'F8'                          ATTRIB-(P S H)\n         DC    C'12'\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\n         DC    C'DIGITS'\n         DC    X'1D'                          START FIELD\n         DC    X'F8'                          ATTRIB-(P S H)\n         DC    C' (A-Z 0-9 # OR -)'\n**********************************************\n*  ASK USER FOR PROJECT CODE.                *\n**********************************************\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4AC1'                        ROW 9 COLUMN 2\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\n         DC    C'ENTER PROJECT CODE ===>'\n         DC    X'1D'                          START FIELD\n         DC    X'C8'                          ATTRIB-(U S H)\nPROJCDE  EQU   *-SCREEN                PROJECT CODE DISPLACEMENT\n         DC    12X'40'                        PROJECT CODE\n         DC    X'1D'                          START FIELD\n         DC    X'F0'                          ATTRIB-(P S)\nERRDSPL  EQU   *-SCREEN                ERROR MESSAGE DISPLACEMENT\nPADCHAR  DC    XL70'00'                       ** PAD CHARACTERS **\n*\nSCRLNTH  EQU   *-SCREEN             SCREEN LENGTH DISPLACEMENT\nUPPERCSE DC    XL12'404040404040404040404040'\n*****************************************\n* CLEAR TSO PROJECT CODE PROMPT SCREEN. *\n*****************************************\nCLRSCR   DS    0F                             ALIGN SCREEN TO FULLWORD\n         DC    X'F1'                          WCC-ERASE WRITE\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4040'                        SBA AT ROW 1  COLUMN 1\n         DC    X'3C'                          REPEAT TO ADDR (CLEAR)\n         DC    X'5D7F'                        ROW 24 COLUMN 80\n         DC    X'00'                          FILL CHARACTER\n         DC    X'11'                          SET BUFFER ADDRESS\n         DC    X'4040'                        ROW 1  COLUMN  1\n         DC    X'13'                          INSERT CURSOR FOR CLEAR\nCLRSCRL  EQU   *-CLRSCR\n*******************************************************************\n*        E R R O R                                                *\n*        M E S S A G E S                                          *\n*******************************************************************\nL6MSG    DC    X'1150D11DF8',C'PROJECT CODE MUST BE AT LEAST '\n         DC    C'6 DIGITS IN LENGTH'\nL6MSGL   EQU   *-L6MSG\nALPHAMG  DC    X'1150D11DF8',C'PROJECT CODE              NOT A VALID'\n         DC    C' ALPHANUMERIC VALUE'\nALPHAMGL EQU   *-ALPHAMG\nALPHACDL EQU   18                   PROJECT CODE MESSAGE DISPLACEMENT\n*******************************************************************\n*        E M E R G E N C Y                                        *\n*        M E S S A G E S                                          *\n*******************************************************************\nTABCDE   DC    256X'FF'         *** REVERSE TRANSLATE TABLE ***\n         ORG   TABCDE+X'40'                     BLANK CHARACTER\n         DC    X'00'\n         ORG   TABCDE+X'60'                     -   CHARACTER\n         DC    X'00'\n         ORG   TABCDE+X'7B'                     #   CHARACTER\n         DC    X'00'\n         ORG   TABCDE+X'C1'                     A-I CHARACTERS\n         DC    9X'00'\n         ORG   TABCDE+X'D1'                     J-R CHARACTERS\n         DC    9X'00'\n         ORG   TABCDE+X'E2'                     S-Z CHARACTERS\n         DC    8X'00'\n         ORG   TABCDE+X'F0'                     0-9 CHARACTERS\n         DC    10X'00'\n         ORG\nTABLANK  DC    256X'00'         *** TRANSLATE TABLE TO CHECK BLANK ***\n         ORG   TABLANK+X'40'\n         DC    X'FF'\n         ORG\nBLANK    EQU   X'40'\n*******************************************************************\n*        D S E C T S                                              *\n*******************************************************************\n         TITLE 'LGNPARMS: PARAMETER LIST FOR LWAEXIT'\n         ACFLDWA DSECT\n         TITLE 'LGNPARMS: IN-STORAGE LOGONID'\n         LIDREC DSECT=YES\n         REGISTER            REGISTER EQUATES\nT        EQU    C'T'         LETTER T IN POSITION 14\n         END    LGNPARMS\n\u001a\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LGNPXIT": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x11\\x00\\x98\"\\x9f\\x00\\x98)\\x9f\\x14W\\x01\\n\\x01\\n\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-08-17T00:00:00", "modifydate": "1998-10-26T14:57:11", "lines": 266, "newlines": 266, "modlines": 0, "user": "SOMITCW"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "NEWPXIT": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x00\\x98\"\\x9f\\x00\\x98)\\x9f\\x14V\\x00C\\x00C\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-08-17T00:00:00", "modifydate": "1998-10-26T14:56:21", "lines": 67, "newlines": 67, "modlines": 0, "user": "SOMITCW"}, "text": " 7.18 New Password Exit (NEWPXIT)\n\n This exit gains control when a new password is supplied at system\n entry time and when the PASSWORD field is specified through the ACF\n CHANGE or INSERT subcommands.  It is a self-contained load module\n that must reside in the link pack area (LPA).  Specify the module\n name in the NEWPXIT field of the GSO EXITS record.\n\n Specification:  GSO EXITS record, NEWPXIT field\n\n Attributes:  AMODE 31, RMODE ANY\n\n Environment:  Key 0, supervisor state\n Step-must-complete status\n Reserve (if shared DASD).\n\n Called by:  System entry validation\n Logonid record modification.\n\n Input:  Uses a standard OS calling sequence:\n  R1   Standard parameter list:\n     +0 Address of ACVALD or ACALT parameter list\n     +4 Address of eight-character new password\n     +8 Address of logonid record.\n\n Output\n  R15   Set one of the following return codes:\n      0  Continue, password is valid.\n      4  Invalid password, message returned in ACVMSG or ACAMSG area.\n         If you issue your own message, a return code of 255 appears\n         in the Invalid Password/Authority Log (ACFRPTPW).\n\n     8  Invalid password, use CA-ACF2 message.\n         The ACF01037 NEW PASSWORD DENIED BY INSTALLATION EXIT\n         message is issued during system entry validation.\n         The ACF00156 PASSWORD REJECTED BY INSTALLATION EXIT\n         message is issued for an invalid logonid update.\n\n     12 Invalid password, message returned in the ACVMSG or  ACAMSG\n         area.  The logonid record is written back to the logonid\n         database with any the exit may have made.   Return 255\n         appears in the Invalid Password Authority Log (ACFRPTPW).\n\n     16 Invalid password, use CA-ACF2 message.  The logonid record\n        is written back to the logonid database with any updates the\n        exit may have made.\n\n Note:  Return codes 12 and 16 may be used, for example, to maintain\n        counter of attempts at setting a new password.  Care must be\n        taken in using return codes 12 and 16; installation\n        programming error exit could cause corruption of the logonid\n        record.  Also be aware additional I/O incurred by return\n        codes 12 and 16 may affect performance.\n\n You cannot use the New Password exit to prompt a user to reenter his\n password.  Use the CA-ACF2 Logon Prevalidation exit for that purpose.\n Also, you cannot use the New Password exit to make any CA-ACF2 SVC\n call that requires a logonid record to be read from or written to the\n Logonid database.  This causes an S138 abend.\n\n If the password was never set in the user's logonid record, such as\n during the first logon attempt, NEWPXIT receives a new password of\n hexadecimal zeros or blanks.   In this case, the exit should validate\n the ACVPSWD field in the ACVALD parameter list.  Ignore the password\n supplied in the parameter list.  This situation can occur only during\n system entry validation, never for ACF command-originated PASSWORD\n field modifications.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRTPSWD": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x19\\x00\\x99\\t\\x8f\\x01\\x02\\x14/\\x17\\x19\\x00\\xa0\\x00\\xb6\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1999-04-08T00:00:00", "modifydate": "2002-05-22T17:19:19", "lines": 160, "newlines": 182, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWP JOB (xxxxxxxx,xxxx,1439,9999,9999),PRTPSWD-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=&SYSUID,COND=(0,NE)\n//PRTPSWD EXEC HLASMCL,PARM.C=(NODECK,OBJECT,RENT),\n//             PARM.L='REFR,RENT,REUS,AC=1,LIST,MAP'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\nPASS     TITLE 'PRTPSWD - Copies and decrypts ACF2 log on ids and pswd'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*   Title: PRTPSWD\n*\n*   Author: I ain't saying.\n*\n*   Date-written:  1998-10-26\n*\n*   Change Log:\n*\n* xx-xx-xx x\n*  x.x.x.\n*\n*   Remarks:\n*\n*        Copies and decrypts ACF2 log on ids and passwords.\n*\n*\n* Attributes:  AMODE 31, RMODE ANY, RENT\n*\n* Input:  ACF2 Log on ID and Password table\n* Outputs: SYSOUT or a data set\n*\n* Sample JCL:\n* //PRTPSWD EXEC PGM=PRTPSWD,TIME=9999\n* //INPUT    DD  DSN=SYS1.SAVEPSWD,DISP=MOD\n* //OUTPUT   DD  SYSOUT=*\n* //SYSUDUMP DD  SYSOUT=*\n*\n*  R12 = Base register\n*  R13 = Register save area and work area\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nPRTPSWD  CSECT ,\nPRTPSWD  AMODE 31\nPRTPSWD  RMODE ANY\n         SAVE  (14,12),,PRTPSWD.&SYSDATE..&SYSTIME Save caller's regs.\n         LR    R12,R15            Load address of entry point\n         USING PRTPSWD,R12        Give assembler program's base reg.\n         GETMAIN R,LV=SAVESIZE,LOC=BELOW  Get storage to put DCB in\n         XC    0(CLEARSIZ,R1),0(R1)  Clear first part of save/work area\n         ST    R1,8(,R13)         Save new save area addr.in old area\n         ST    R13,4(,R1)         Save old save area addr.in new area\n         LR    R13,R1             Replace old save area with new one\n         USING SAVEAREA,R13       Tell assembler about save area\n         MVC   DCB(HALF),PROTO    Copy half of DCBs,DCBEs,etc\n         MVC   DCB+HALF(HALF),PROTO+HALF Copy other half of proto\n         LA    R1,DCB+DCBEIN      Load address of input DCBE\n         ST    R1,DCB             Update input DCB with DCBE address\n         LA    R1,DCB+DCBEOUT     Load address of output DCBE\n         ST    R1,DCB+DCBOUT      Update output DCB with DCBE address\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         OPEN  (DCB,INPUT),MODE=31,MF=(E,(1))  Open INPUT DCB\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         OPEN  (DCB+DCBOUT,OUTPUT),MODE=31,MF=(E,(1)) Open OUTPUT DCB\nGETLOOP  DS    0H\n         GET   DCB                Get a record\n         MVC   RECORD,MASKREC     Move the output mask to record area\n         XC    USERID,00(R1)      Decrypt the userid\n         OC    USERID,SPACES      Upper case the userid for sort\n         XC    PASSWORD,08(R1)    Decrypt the password\n         XC    NEWPASS,16(R1)     Decrypt the new password\n         MVC   FWORK,MASKREC+1    Move decryption mask for date\n         XC    FWORK,24(R1)       Decrypt the date\n         AP    FWORK,P1900000     Set century part of year\n         ED    DATE,FWORK         Edit date into the output area\n         MVC   FWORK,MASKREC+1    Move decryption mask for time\n         XC    FWORK,28(R1)       Decrypt the time\n         MVO   DWORK(5),FWORK(4)  Move time and shift four bits\n         OI    DWORK+4,X'0F'      Put a sign in for ED\n         MVC   TIMEEDIT,MASKTIME  Put the time edit mask in a work area\n         ED    TIMEEDIT,DWORK     Edit time into the output area\n         MVC   TIME,TIMEEDIT+2    Put editted time in output record\n         PUT   DCB+DCBOUT,RECORD  Write a table entry\n         B     GETLOOP            Go back to process next entry\nEODAD    DS    0H\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         CLOSE DCB+DCBOUT,MODE=31,MF=(E,(1)) Close OUTPUT DCB\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         CLOSE DCB,MODE=31,MF=(E,(1))  Close INPUT DCB\n         LR    R1,R13             Save new save area addr. for FREEMAIN\n         L     R13,4(,R13)        Restore old save area address\n         FREEMAIN R,LV=SAVESIZE,A=(1)  Release save and DCB storage\n         SLR   R15,R15            Set a return code of zero\n         RETURN (14,12),RC=(15)   Return to caller, return code zero\n*\nPROTO    DS    0D                 Insure a double word alignment\nDCBIN    EQU   *-PROTO            Displacement for input DCB\n         DCB   DDNAME=INPUT,DSORG=PS,MACRF=GL,RECFM=FB,LRECL=32,       X\n               DCBE=*-*  DUMDCBEI\nDCBEIN   EQU   *-PROTO            Displacement for input DCBE\n         DCBE  RMODE31=BUFF,EODAD=EODAD  DCBE for the INPUT DCB\n* Note: A DCBE with EODAD must be in modifiable storage.  i.e. GETMAIN\nDCBOUT   EQU   *-PROTO            Displacement for output DCB\n         DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=48,      X\n               DCBE=*-*  DUMDCBEO\nDCBEOUT  EQU   *-PROTO            Displacement for output DCBE\n         DCBE  RMODE31=BUFF       DCBE for the OUTPUT DCB\nOCPL     EQU   *-PROTO            Displacement for output DCBE\n         OPEN  (*-*),MF=L,MODE=31 OPEN/CLOSE parameter list\nDCBASIZE EQU   *-PROTO            Size of DCBs, DCBEs, and Parm-List\nHALF     EQU   DCBASIZE/2         Half size of DCBs,DCBEs,ParmList Area\n*\nMASKREC  DC    CL48' vvvvvvvv vvvvvvvv vvvvvvvv yyyy.ddd hh:mm:ss.th'\n*                    123456789 123456789 123456789 123456789 12345678\n         ORG   MASKREC+DATE-RECORD    Overlay date field with edit mask\n         DC    XL08'202020204B202020'  Mask for date yyyy.ddd\n         ORG   ,                  Reset the location counter\nSPACES   DC    CL8' '             Spaces to upper case userid\nP1900000 DC    PL4'1900000'       To change relative century to century\nMASKTIME DC XL13'402021207A20207A20204B2020'  Mask for time hh:mm:ss.th\n*\nSAVEAREA DSECT ,                  Register save area and work area\n         DS    18F                Register save area\nCLEARSIZ EQU   *-SAVEAREA         Save and work area size\nDCB      DS    XL(DCBASIZE)       DCB, DCBE, and O/C parm-list\nRECORD   DS    0CL48              Output record build area\n         DS    C                  Blank in first position\nUSERID   DS    CL8                Output user id\n         DS    C                  Blank to separate USERID and PASSWORD\nPASSWORD DS    CL8                Output password\n         DS    C                  Blank to separate PASSWORD & NEWPASS\nNEWPASS  DS    CL8                Output new password\n         DS    C                  Blank to separate NEWPASS and DATE\nDATE     DS    CL8                Output Date yyyy.ddd\n         DS    C                  Blank to separate DATE and time\nTIME     DS    CL11               Output time hh:mm:ss.th\n* End of RECORD DS 0CL48\nDWORK    DS    D                  Double word work area\nFWORK    DS    F                  Full word work area\nTIMEEDIT DS    CL13               Work area to edit time\nSAVESIZE EQU   *-SAVEAREA         Save and work area size\n*\nR0       EQU   0\nR1       EQU   1                  R\nR2       EQU   2                    E\nR3       EQU   3                      G\nR4       EQU   4                        I\nR5       EQU   5                          S\nR6       EQU   6                            T\nR7       EQU   7                              E\nR8       EQU   8                                R\nR9       EQU   9                  E\nR10      EQU   10                   Q\nR11      EQU   11                     U\nR12      EQU   12                       A\nR13      EQU   13                         T\nR14      EQU   14                           E\nR15      EQU   15                             S\n         END   ,\n//L.SYSLMOD DD DSN=SYS1.LOADPROD,DISP=SHR,SPACE=\n NAME PRTPSWD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRTPSWDJ": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00#\\x00\\x99\\t\\x8f\\x01\\x02\\x14/\\x17\\x17\\x00\\x15\\x00\\x07\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-04-08T00:00:00", "modifydate": "2002-05-22T17:17:23", "lines": 21, "newlines": 7, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWP JOB (xxxxxxxx,xxxx,1439,9999,9999),PRTPSWDJ-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,COND=(0,NE)\n//PRTPSWD EXEC PGM=PRTPSWD,TIME=9999\n//CHK1DSN  DD  DSN=SYS1.SAVEPSWD.PRINT3,DISP=SHR   Make sure it exists\n//CHK2DSN  DD  DSN=SYS1.SAVEPSWD.ALTUSER3,DISP=SHR Make sure it exists\n//INPUT    DD  DSN=SYS1.SAVEPSWD.THIRD,DISP=MOD\n//OUTPUT   DD  UNIT=VIO,SPACE=(CYL,(50,50)),DISP=(,PASS),\n//             RECFM=FB,LRECL=48\n//SYSUDUMP DD  SYSOUT=*\n//SORT    EXEC PGM=SORT,TIME=9999\n//SYSOUT   DD  SYSOUT=*\n SORT FIELDS=(2,8,CH,A,29,20,CH,D)\n//SORTIN   DD  DSN=*.PRTPSWD.OUTPUT,DISP=(OLD,DELETE)\n//SORTOUT  DD  UNIT=VIO,SPACE=(CYL,(50,50)),DISP=(,PASS),\n//             RECFM=FB,LRECL=48\n//PRTPSWD2 EXEC PGM=PRTPSWD2,TIME=9999\n//INPUT    DD  DSN=*.SORT.SORTOUT,DISP=(OLD,DELETE)\n//OUTPUT   DD  DSN=SYS1.SAVEPSWD.PRINT3,DISP=SHR\n//ALTUSER  DD  DSN=SYS1.SAVEPSWD.ALTUSER3,DISP=SHR\n//SYSUDUMP DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRTPSWD2": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x03\\x00\\x99$\\x7f\\x01\\x02\\x14/\\x17\\x19\\x00\\xd8\\x00\\xac\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1999-09-04T00:00:00", "modifydate": "2002-05-22T17:19:03", "lines": 216, "newlines": 172, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWP JOB (xxxxxxxx,xxxx,1439,9999,9999),PRTPSWD2-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,COND=(0,NE)\n//PRTPSWD2 EXEC HLASMCL,PARM.C=(NODECK,OBJECT,RENT),\n//             PARM.L='REFR,RENT,REUS,AC=1,LIST,MAP' ? AC=1 ? Why ?\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR ? SYS1.MODGEN ? Why ?\nPASS     TITLE 'PRTPSWD2 - Prints a space between userids'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*   Title: PRTPSWD2\n*\n*   Author: I ain't saying.\n*\n*   Date-written:  1999-08-04\n*\n*   Change Log:\n*\n* 99-12-30  Added ALTUSER DCB, logic, etc.\n*  W.A.M.\n*\n*   Remarks:\n*\n*        Copies the sorted output of PRTPSWD and puts a\n*   blank record everytime a new userid is encountered.\n*   Also creates a file with possible ALTUSER commands to\n*   change passwords.\n*\n* Attributes:  AMODE 31, RMODE ANY, RENT\n*\n* Input:  ACF2 Log on ID and Password table\n* Outputs: Sorted and formatted log on id and password table.\n*\n* Sample JCL:\n* //PRTPSWD EXEC PGM=PRTPSWD,TIME=9999\n* //CHECKDSN DD  DSN=SYS1.SAVEPSWD.PRINT,DISP=SHR  Make sure it exists\n* //INPUT    DD  DSN=SYS1.SAVEPSWD,DISP=MOD\n* //OUTPUT   DD  UNIT=VIO,SPACE=(CYL,(50,50)),DISP=(,PASS),\n* //             RECFM=FB,LRECL=48\n* //SYSUDUMP DD  SYSOUT=*\n* //SORT    EXEC PGM=SORT,TIME=9999\n* //SYSOUT   DD  SYSOUT=*\n*  SORT FIELDS=(2,8,CH,A,29,20,CH,D)\n* //SORTIN   DD  DSN=*.PRTPSWD.OUTPUT,DISP=(OLD,DELETE)\n* //SORTOUT  DD  UNIT=VIO,SPACE=(CYL,(50,50)),DISP=(,PASS),\n* //             RECFM=FB,LRECL=48\n* //PRTPSWD2 EXEC PGM=PRTPSWD2,TIME=9999\n* //INPUT    DD  DSN=*.SORT.SORTOUT,DISP=(OLD,DELETE)\n* //OUTPUT   DD  DSN=SYS1.SAVEPSWD.PRINT,DISP=SHR\n* //ALTUSER  DD  DSN=SYS1.SAVEPSWD.ALTUSER,DISP=SHR\n* //SYSUDUMP DD  SYSOUT=*\n*\n*  R10 = Input/output record location\n*  R11 = Branch and link return address\n*  R12 = Base register\n*  R13 = Register save area and work area\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nPRTPSWD2 CSECT ,\nPRTPSWD2 AMODE 31\nPRTPSWD2 RMODE ANY\n         SAVE  (14,12),,PRTPSWD2.&SYSDATE..&SYSTIME Save caller's regs.\n         LR    R12,R15            Load address of entry point\n         USING PRTPSWD2,R12       Give assembler program's base reg.\n         GETMAIN R,LV=SAVESIZE,LOC=BELOW  Get storage to put DCB in\n         XC    0(CLEARSIZ,R1),0(R1)  Clear first part of save/work area\n         ST    R1,8(,R13)         Save new save area addr.in old area\n         ST    R13,4(,R1)         Save old save area addr.in new area\n         LR    R13,R1             Replace old save area with new one\n         USING SAVEAREA,R13       Tell assembler about save area\n         MVC   ALTCMD,ALTR        Move ALTUSER command templet record\n         MVC   DCB(HALF),PROTO    Copy half of DCBs,DCBEs,etc\n         MVC   DCB+HALF(HALF),PROTO+HALF Copy other half of proto\n         LA    R1,DCB+DCBEIN      Load address of input DCBE\n         ST    R1,DCB             Update input DCB with DCBE address\n         LA    R1,DCB+DCBEOUT     Load address of output DCBE\n         ST    R1,DCB+DCBOUT      Update output DCB with DCBE address\n         LA    R1,DCB+DCBEALT     Load address of ALTUSER DCBE\n         ST    R1,DCB+DCBALT      Update ALTUSER DCB with DCBE address\n         MVI   SAVENAME,X'FF'     Insure previous userid is invalid\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         OPEN  (DCB,INPUT),MODE=31,MF=(E,(1))  Open INPUT DCB\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         OPEN  (DCB+DCBOUT,OUTPUT),MODE=31,MF=(E,(1)) Open OUTPUT DCB\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         OPEN  (DCB+DCBALT,OUTPUT),MODE=31,MF=(E,(1)) Open ALTUSER DCB\n         PUT   DCB+DCBALT,ALTREXX Write initial ALTUSER record\n         LA    R10,HEADING0       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,HEADING1       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,HEADING2       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,HEADING3       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,HEADING4       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,HEADING5       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,BLANKS         Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,HEADING7       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,HEADING8       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,BLANKS         Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R10,HEADING9       Load address of new output record\n         BAL   R11,PUT            Go write the record\n         LA    R11,GET            Set the new PUT return address\nGET      DS    0H\n         GET   DCB                Get a record\n         LR    R10,R1             Save the record address\n         CLC   SAVENAME,1(R10)    See if the same userid as last one\n         BNE   NEWUSER            Not same, go insert blank line\nPUT      DS    0H\n         PUT   DCB+DCBOUT,(R10)   Write an input record to output\n         BR    R11                Go to get the next record\nNEWUSER  DS    0H\n         MVC   SAVENAME,1(R10)    Save the new userid\n         PUT   DCB+DCBOUT,BLANKS  Write a line of blanks\n         MVC   ALTCMD+ALTUSRID(8),1(R10) Put userid in ALTUSER RECORD\n         CLI   19(R10),X'00'      See if a new password\n         BE    OLDPSWD            New password, go move it\n         CLI   19(R10),X'FF'      See if a new password\n         BE    OLDPSWD            New password, go move it\n         CLI   19(R10),C' '       See if a new password\n         BH    NEWPSWD            New password, go move it\nOLDPSWD  DS    0H\n         MVC   ALTCMD+ALTPSWD(8),10(R10)  Move the password to record\nPUTALT   DS    0H\n         PUT   DCB+DCBALT,ALTCMD  Write an ALTUSER record\n         B     PUT                Go back to write the input record\nNEWPSWD  DS    0H\n         MVC   ALTCMD+ALTPSWD(8),19(R10)  Move new password to record\n         B     PUTALT             Go back to write the ALTUSER record\nEODAD    DS    0H\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         CLOSE DCB+DCBALT,MODE=31,MF=(E,(1)) Close ALTUSER DCB\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         CLOSE DCB+DCBOUT,MODE=31,MF=(E,(1)) Close OUTPUT DCB\n         LA    R1,DCB+OCPL        Find Open/Close parameter list\n         CLOSE DCB,MODE=31,MF=(E,(1))  Close INPUT DCB\n         LR    R1,R13             Save new save area addr. for FREEMAIN\n         L     R13,4(,R13)        Restore old save area address\n         FREEMAIN R,LV=SAVESIZE,A=(1)  Release save and DCB storage\n         SLR   R15,R15            Set a return code of zero\n         RETURN (14,12),RC=(15)   Return to caller, return code zero\n*\nPROTO    DS    0D                 Insure a double word alignment\nDCBIN    EQU   *-PROTO            Displacement for input DCB\n         DCB   DDNAME=INPUT,DSORG=PS,MACRF=GL,RECFM=FB,LRECL=48,       X\n               DCBE=*-*  Address of copy of DCBEIN\nDCBEIN   EQU   *-PROTO            Displacement for input DCBE\n         DCBE  RMODE31=BUFF,EODAD=EODAD  DCBE for the INPUT DCB\n* Note: A DCBE with EODAD must be in modifiable storage.  i.e. GETMAIN\nDCBOUT   EQU   *-PROTO            Displacement for output DCB\n         DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=48,      X\n               DCBE=*-*  Address of copy of DCBEOUT\nDCBEOUT  EQU   *-PROTO            Displacement for output DCBE\n         DCBE  RMODE31=BUFF       DCBE for the OUTPUT DCB\nALTLRECL EQU   48                 LRECL for ALTUSER\nDCBALT   EQU   *-PROTO            Displacement for ALTUSER DCB\n         DCB   DDNAME=ALTUSER,DSORG=PS,MACRF=PM,RECFM=FB,              X\n               LRECL=ALTLRECL,DCBE=*-*  ADDRESS of copy of DCBEALT\nDCBEALT  EQU   *-PROTO            Displacement for ALTUSER DCBE\n         DCBE  RMODE31=BUFF       DCBE for the OUTPUT DCB\nOCPL     EQU   *-PROTO            Displacement for OPEN/CLOSE parm list\n         OPEN  (*-*),MF=L,MODE=31 OPEN/CLOSE parameter list\nDCBASIZE EQU   *-PROTO            Size of DCBs, DCBEs, and Parm-List\nHALF     EQU   DCBASIZE/2         Half size of DCBs,DCBEs,ParmList Area\n*\nHEADING0 DC    CL48'     The following list is in order by user id. '\nHEADING1 DC    CL48'  Each userid is separate with a blank line.    '\nHEADING2 DC    CL48'  Use a find command to find: i.e. F '' '' 2      '\nHEADING3 DC    CL48'  Each userid is sorted in reverse order by date'\nHEADING4 DC    CL48'  and time.                                     '\nHEADING5 DC    CL48'  i.e. the top password is the last attempted.  '\nBLANKS   DC    CL48'  '            A blank line to separate log on ids\nHEADING7 DC    CL48'  Warning: Passwords are the ones that a user   '\nHEADING8 DC    CL48'  entered, they may NOT have worked.            '\n* BLANKS DC    CL48'  '            A blank line\nHEADING9 DC    CL48' User-id  Password New-Pswd  Date     Time      '\nALTREXX  DC CL(ALTLRECL)' /* Rexx: TSO EX ''SYS1.SAVEPSWD.ALTUSER'' */'\nALTR DC CL(ALTLRECL)'''ALTUSER xxxxxxxx PASSWORD(XXXXXXXX) NOEXPIRED'''\n*                     123456789 123456789 123456789 123456789 1234567\nALTUSRID EQU   9,8,C'C'           Displacement of ALTUSER userid\nALTPSWD  EQU   27,8,C'C'          Displacement of ALTUSER password\n*\nSAVEAREA DSECT ,                  Register save area and work area\n         DS    18F                Register save area\nCLEARSIZ EQU   *-SAVEAREA         Save and work area size\nALTCMD   DS    XL(ALTLRECL)       ALTUSER output record area\nDCB      DS    XL(DCBASIZE)       DCB, DCBE, and O/C parm-list\nSAVENAME DS    CL8                Area to save user id for compare\nSAVESIZE EQU   *-SAVEAREA         Save and work area size\n*\nR0       EQU   0\nR1       EQU   1                  R\nR2       EQU   2                    E\nR3       EQU   3                      G\nR4       EQU   4                        I\nR5       EQU   5                          S\nR6       EQU   6                            T\nR7       EQU   7                              E\nR8       EQU   8                                R\nR9       EQU   9                  E\nR10      EQU   10                   Q\nR11      EQU   11                     U\nR12      EQU   12                       A\nR13      EQU   13                         T\nR14      EQU   14                           E\nR15      EQU   15                             S\n         END   ,\n//L.SYSLMOD DD DSN=SYS1.LOADTEST,DISP=SHR,SPACE=\n NAME PRTPSWD2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x13\\x01\\x001\\x8f\\x01\\x02\\x14/\\x17#\\x00\\x14\\x00\\x14\\x00\\x05\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-11-13T00:00:00", "modifydate": "2002-05-22T17:23:13", "lines": 20, "newlines": 20, "modlines": 5, "user": "SOMITCW"}, "text": "//R       PROC CLASS='Z',          DEFAULT MSGCLASS OF SUBMITTED JOB\n//             LIST='Z',           LISTING OF SUBMITTED JOB\n//             D='SYS1.JCLLIB',\n//             Q=XXXXXXX   NAME OF JOB - MEMBER IN SYS1.JCLLIB\n//* LIB: SYS1.PROCLIB(JOB)\n//* GDE: CBIPO MVS CUSTOMIZATION\n//* DOC: THIS PROCEDURE CAN BE USED TO START A JOBSTREAM FROM A\n//*      PARTITIONED DATA SET.  IF THE PROCEDURE IS NOT MODIFIED\n//*      THE PDS DEFAULT IS 'SYS1.JCLLIB'. MODIFY N=XXXXXXX\n//*      TO A VALID JOB (MEMBER NAME) IN SYS1.JCLLIB.   THE JOB\n//*      PROCEDURE USES IEBEDIT TO SEND THE JOBSTREAM TO AN\n//*      INTERNAL READER.\n//*\n//IEFPROC EXEC PGM=IEBEDIT\n//SYSPRINT DD  SYSOUT=&LIST\n//SYSUT1   DD  DDNAME=IEFRDER\n//SYSUT2   DD  SYSOUT=(&CLASS,INTRDR),DCB=BLKSIZE=80\n//SYSIN    DD  DUMMY\n//IEFRDER  DD  DISP=SHR,\n//             DSN=&D.(&Q.)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAVE#JOB": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00U\\x00\\x99\\to\\x01\\x02\\x14/\\x17#\\x00\\x06\\x00\\x06\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-04-06T00:00:00", "modifydate": "2002-05-22T17:23:55", "lines": 6, "newlines": 6, "modlines": 0, "user": "SOMITCW"}, "text": "//SAVEPSWD J0B (xxxxxxxx,xxxx,99,99),OPERATOR,\n//        CLASS=x,MSGCLASS=x,NOTIFY=SOMITCW,COND=(0,NE)\n//*\n//SAVEPSWD EXEC PGM=SAVEPSWD\n//OUTPUT   DD  DSN=SYS1.SAVEPSWD,DISP=MOD\n//SYSUDUMP DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAVEPROC": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x005\\x00\\x98)\\x9f\\x01\\x001\\x8f\"Y\\x00\\x02\\x00\\x02\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-10-26T00:00:00", "modifydate": "2000-11-13T22:59:35", "lines": 2, "newlines": 2, "modlines": 0, "user": "SOMITCW"}, "text": "//SAVEPSWD EXEG PGM=SAVEPSWD,TIME=9999\n//SAVEPSWD DD  DSNAME=SYS1.SAVEPSWD,DISP=MOD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAVEPSWD": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01&\\x00#\\x00\\x98)\\x9f\\x01\\x02\\x14/\\x17(\\x00\\xe8\\x00\\xba\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.38", "flags": 0, "createdate": "1998-10-26T00:00:00", "modifydate": "2002-05-22T17:28:23", "lines": 232, "newlines": 186, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWS JOB (xxxxxxxx,xxxx,1439,9999,9999),SAVEPSWD-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,COND=(0,NE)\n//SAVEPSWD EXEC HLASMCL,PARM.C=(NODECK,OBJECT,RENT),\n//             PARM.L='REFR,RENT,REUS,AC=1,LIST,MAP'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.SORCPROD,DISP=SHR  For the VCCS CVTUSER DSECT\n//* SYS1.SORCPROD must be after MACLIB with the WTO macro in it\nPASS     TITLE 'SAVEPSWD - Copies ACF2 ids/Pswd from CSA to Data Set'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*   Title: SAVEPSWD\n*\n*   Author: I ain't saying.\n*\n*   Date-written:  1998-10-26\n*\n*   Change Log:\n*\n* xx-xx-xx x\n*  x.x.x.\n*\n*   Remarks:\n*\n*        Copies the ACF2 userids and passwords from ECSA\n*   to a data set.  A new table in ECSA is acquired.\n*   The old table is freed.\n*\n*\n* Attributes:  AMODE 31, RMODE ANY, RENT\n*\n* Input:  ACF2 Log on ID and Password table in ECSA\n* Outputs: Data set SYS1.SAVEPSWD\n*          A new empty table in ECSA\n*\n* Sample JCL:\n* //SAVEPSWD EXEC PGM=SAVEPSWD,TIME=9999\n* //OUTPUT   DD  DSN=SYS1.SAVEPSWD,DISP=MOD\n* //SYSUDUMP DD  SYSOUT=*\n*\n*  R9  = CVT Address\n*  R8  = CVTUSER Area Address\n*  R7  = Password Save Area Start Address\n*  R6  = Address of the Current Save Password Entry\n*  R5  = Address after the last save Password table Entry\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nSAVEPSWD CSECT ,\nSAVEPSWD AMODE 31\nSAVEPSWD RMODE ANY\n         SAVE  (14,12),,SAVEPSWD.&SYSDATE..&SYSTIME Save caller's regs.\n         LR    R12,R15            Load address of entry point\n         USING SAVEPSWD,R12       Give assembler program's base reg.\n         GETMAIN R,LV=SAVESIZE,LOC=BELOW  Get storage to put DCB in\n         XC    0(SAVESIZE,R1),0(R1)  Clear the save/work area\n         ST    R1,8(,R13)         Save new save area addr.in old area\n         ST    R13,4(,R1)         Save old save area addr.in new area\n         LR    R13,R1             Replace old save area with new one\n         USING SAVEAREA,R13       Tell assembler about save area\n         MVC   DCB(DCBASIZE),DUMDCB Copy proto DCB, DCBE, Parm-list\n         LA    R1,DCB+DCBSIZE     Find DCBE location\n         ST    R1,DCB             Store DCBE address in DCB\n         LA    R1,DCB+DCBSIZE2    Find Open/Close parameter list\n         OPEN  (DCB,EXTEND),MODE=31,MF=(E,(1)) Open OUTPUT as DISP=MOD\n*  Note: Early OPEN was for less of a chance of abending after\n*        partially modifing CVTUSER, SAVEPW area, etc.\n         L     R9,16              Load the address of the CVT\n         ICM   R8,B'1111',CVTUSER-CVT(R9)  Address CVTUSER points to\n         USING XCVTUSER,R8        Tell assembler about dsect\n         BNZ   GOTUSER            Have CVTUSER, go process it\n* else, get a CVTUSER area\n         MODESET KEY=ZERO         Get key zero for CVT storage\n         LTR   R15,R15            See if MODESET worked\n         BNZ   NOKEY0             Cannot get key zero, go exit\n         GETMAIN RU,LV=XCVTUSIZ,SP=245 Get 48 byte CVTUSER SQA area\n*                                 CSA would make more sense than SQA,\n*                                 but someday we may need fixed storage\n* Warning:  The area pointed to by the CVTUSER field is used both by\n*           LGNIXIT and MPF program IOS000I.\n         LR    R8,R1              Save address of storage gotten\n         XC    XCVTUSER(XCVTUSIZ),XCVTUSER  Clear CVTUSER pointed area\n         MVC   XCVTUEYE,CCVTUSER  Move 'CVTUSERn' to CVTUSER area\n         SLR   R7,R7              Clear a register for the 'CS' inst.\n* CS - If R7 and CVTUSER are equal, then R8 is stored in CVTUSER\n* CS - If R7 and CVTUSER are not equal, then CVTUSER is loaded to R7\n         CS    R7,R8,CVTUSER-CVT(R9)  Set CVTUSER address in CVT\n         BE    KEYNZERO           Got CVTUSER now, go back to non-0 key\n* Some other user put CVTUSER in CVT first, free the new one\n         FREEMAIN RU,LV=XCVTUSIZ,A=(R8),SP=245  Free extra SQA storage\n         LR    R8,R7              Use the first CVTUSER area address\nKEYNZERO DS    0H\n         MODESET KEY=NZERO        Back to user key\nGOTUSER  DS    0H\n         CLC   XCVTUEYE,CCVTUSER  See if the CVTUSER area is mine\n         BNE   BADUSERA           If someone else has CVTUSER, go tell\n         ICM   R7,B'1111',XCVTPSWD  Load address for Password save area\n         USING SAVEPW,R7          Tell assembler about DSECT\n         BZ    OLDZERO            No address, must be first time/IPL\n         CLC   EYECATCH,CLGNIXIT  See if the save area starts okay\n         BNE   BADANCH            Bad CVT Anchor, should not occur\nOLDZERO  DS    0H\n* Need new ACF2 user id and password table\n         MODESET MODE=SUP,KEY=ZERO  Get supervisor for ECSA Getmain\n         LTR   R15,R15            See if MODESET worked\n         BNZ   NOSUP              Cannot get key zero, go exit\n         SETLOCK OBTAIN,TYPE=CPU,REGS=STDSAVE  Get lock for GETMAIN\n         GETMAIN RU,LV=32700,SP=231,KEY=8,BRANCH=(YES,GLOBAL)\n*                                 Get password storage in ECSA\n         LR    R7,R1              Save address of new password area\n         SETLOCK RELEASE,TYPE=CPU,REGS=STDSAVE  Release lock\n         MODESET KEY=NZERO        Get to user key for normal stuff\n         MVC   EYECATCH,CLGNIXIT  Put eye catcher in pswd save area\n         LA    R1,ENTRIES         Calculate address to put entries\n         ST    R1,NEXTSAVE        Set the first entry address\n         A     R1,TWENTY4K        Find near-end-of-table address\n         ST    R1,NEARFULL        Set the near-end-of-table address\n         A     R1,EIGHTK          Find end-of-table address\n         ST    R1,FULL            Set the near-end-of-table address\n         MODESET KEY=ZERO         Get key zero for CVT storage\n         LTR   R15,R15            See if MODESET worked\n         BNZ   NOKEY0             Cannot get key zero, go exit\n         L     R6,XCVTPSWD        Save  address of old table\n         ST    R7,XCVTPSWD        Store address of new table\n         DROP  R8                 Don't need CVTUSER address anymore\n         MODESET KEY=NZERO        Get to user key for normal stuff\n         LTR   R7,R6              See if a previous table\n         BZ    RETURN             If no previous table, go exit\n         LA    R6,ENTRIES         Load address of first entry written\n         L     R5,NEXTSAVE        Load address after last entry written\nLOOP     DS    0H\n         CR    R6,R5              See if table all entries dumped\n         BNL   DATAEND            At end, go close the file\n         PUT   DCB,(R6)           Write a table entry\n         LA    R6,ENTRYSZ(,R6)    Bump to next entry\n         B     LOOP               Go back to process next entry\nDATAEND  DS    0H\n         FREEMAIN RU,LV=32700,SP=231,A=(R7)  Free storage in ECSA\n         DROP  R7                 Save Password Area Addr. freed\n         MODESET MODE=PROB        Back to problem state\nRETURN   DS    0H\n         LA    R1,DCB+DCBSIZE2    Find OPEN/CLOSE Parameter list addr.\n         CLOSE DCB,MODE=31,MF=(E,(1))  Close the output DCB\n         LR    R1,R13             Save old save area addr. for FREEMAIN\n         L     R13,4(,R13)        Restore old save area address\n         FREEMAIN R,LV=SAVESIZE,A=(1)  Release save and DCB storage\n         SLR   R15,R15            Set a return code of zero\n         RETURN (14,12),RC=(15)   Return to caller, return code zero\n*\nNOSUP    DS    0H\n         WTO   'Program SAVEPSWD MODESET Supervisor failed',ROUTCDE=11\n         B     RETURN             Exit the exit quick\n*\nNOKEY0   DS    0H\n         WTO   'Program SAVEPSWD MODESET key zero failed',ROUTCDE=11\n         B     RETURN             Exit the exit quick\n*\nBADUSERA DS    0H\n         WTO   'Program SAVEPSWD found a bad CVTUSER area',ROUTCDE=11\n         ABEND 3001,DUMP          Abend with a dump\n*\nBADANCH  DS    0H\n         WTO   'Program SAVEPSWD found a bad ANCHOR area',ROUTCDE=11\n         ABEND 3002,DUMP          Abend with a dump\n*\nCCVTUSER DC    CL7'CVTUSER',XL1'1' Constant to init and check CVTUSER\nCLGNIXIT DC    CL7'LGNIXIT',XL1'1' Constant to init and check SAVEPW\nTWENTY4K DC    A(ENTRYSZ*750)     Constant to warn near end of table\nEIGHTK   DC    A(ENTRYSZ*250)     Constant to warn at end of table\n*\n*\n         DS    0D                 Insure a double word alignment\nDUMDCB   DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=PM,RECFM=FB,LRECL=ENTRYSZ, X\n               DCBE=*-*\nDCBSIZE  EQU   *-DUMDCB           Size of OUTPUT DCB\nDUMDCBE  DCBE  RMODE31=BUFF       DCBE for the OUTPUT DCB\nDCBSIZE2 EQU   *-DUMDCB           Size of OUTPUT DCB and DCBE\nDUMOCPL  OPEN  (*-*),MF=L,MODE=31 OPEN/CLOSE parameter list\nDCBASIZE EQU   *-DUMDCB           Size of DCB, DCBE, PARM-LIST Area\n*\nSAVEAREA DSECT ,                  Register save area and work area\n         DS    18F                Register save area\nDCB      DS    XL(DCBASIZE)       DCB, DCBE, and O/C parm-list\nSAVESIZE EQU   *-SAVEAREA         Save and work area size\n*\n         COPY  CVTUSER            VCCS user DSECT in SYS1.SORCPROD\n*\n* XCVTUSER DSECT ,\n* XCVTUEYE DS    CL8              7 bytes of 'CVTUSER' and 1 byte X'01'\n* XCVTUVOL DS    XL6              VOLSER from message used by IEC507D\n*          DS    XL2              Space available for expansion\n* XCVTUTIM DS    XL6              CYYDDDHHMMSS Century, Year,Day, Hour,\n*                                 Minute, and Second, used by IOS000I\n*          DS    XL2              Space available for expansion\n* XCVTPSWD DS    F                ACF2 LGNIXIT anchor, used by PSWDSAVE\n*          DS    XL20             Space available for expansion\n* XCVTUSIZ EQU   *-XCVTUSER       Length of area pointed to by CVTUSER\n*\n*\n*\nSAVEPW   DSECT ,\nEYECATCH DS    CL8                7 bytes of 'LGNIXIT' and 1 byte X'01'\nNEXTSAVE DS    F                  Address of current available entry\nNEARFULL DS    F                  Addr. of end of 75% pswd storage area\nFULL     DS    F                  Addr. of end of password storage area\nENTRIES  DS    XL32680            Location to save passwords in\nENTRYSZ  EQU   32                 Thirty-Two bytes per entry\nSAVEPWSZ EQU   *-SAVEPW           Length of the password entry storage\n*\n         IHAPSA ,                 Prefix Storage Area\n*\n         CVT   DSECT=YES          MVS's Communications Vector Table\n*\nR0       EQU   0\nR1       EQU   1                  R\nR2       EQU   2                    E\nR3       EQU   3                      G\nR4       EQU   4                        I\nR5       EQU   5                          S\nR6       EQU   6                            T\nR7       EQU   7                              E\nR8       EQU   8                                R\nR9       EQU   9                  E\nR10      EQU   10                   Q\nR11      EQU   11                     U\nR12      EQU   12                       A\nR13      EQU   13                         T\nR14      EQU   14                           E\nR15      EQU   15                             S\n         END   ,\n//L.SYSLMOD DD DSN=SYS1.LOADPROD,DISP=SHR,SPACE=\n NAME SAVEPSWD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAVEPSWJ": {"ttr": 1043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\t/\\x01\\x02\\x14/\\x17\"\\x00\\x07\\x00\\x06\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-04-02T00:00:00", "modifydate": "2002-05-22T17:22:00", "lines": 7, "newlines": 6, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWS JOB (xxxxxxxx,xxxx,1439,9999,9999),SAVEPSWJ-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,COND=(0,NE)\n//SAVEPSWD EXEC PGM=SAVEPSWD\n//* STEPLIB  DD  DSN=SYS1.LOADTEST,DISP=SHR\n//OUTPUT   DD  DSN=SYS1.SAVEPSWD,DISP=MOD\n//SYSUDUMP DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEVPRE": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x01\\x00\\x99\\x10/\\x01\\x02(_\"\\x12\\x00\\xe0\\x00\\xe1\\x00\\x00\\xe2\\xd6\\xd4\\xc9\\xe3\\xc3\\xe6@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-04-12T00:00:00", "modifydate": "2002-10-12T22:12:01", "lines": 224, "newlines": 225, "modlines": 0, "user": "SOMITCW"}, "text": "//SOMITCWS JOB (xxxxxxxx,xxxx,1439,9999,9999),SEVPRE-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,COND=(0,NE)\n//SEVPRE  EXEC HLASMCL,PARM.C=(NODECK,OBJECT,RENT),\n//             PARM.L='REFR,RENT,REUS,AC=1,LIST,MAP'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.CAI.CAIMAC,DISP=SHR\n//         DD  DSN=SYS1.SORCPROD,DISP=SHR  For the VCCS CVTUSER DSECT\n//* SYS1.SORCPROD must be after MACLIB with the WTO MACRO\nPASS     TITLE 'SEVPRE - Record ACF2 Passwords'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*   Title: SEVPRE\n*\n*   Author: I ain't saying.\n*\n*   Date-written:  1999-4-12\n*\n*   Change Log:\n*\n* xx-xx-xx x\n*  x.x.x.\n*\n*   Remarks:\n*\n*        This exit gets control on any ACVALD request to ACF2.\n*   If the request is a logonid/password validate request, then\n*   it saves a user's userid, password, new-password, date, and\n*   time in a table in ECSA.  If not validate, no action is taken.\n*   Program SAVEPSWD will write the data to disk file.\n*\n* 7.25 System Entry Validation Preprocessing Exit (SEVPRE)\n*\n* The System Entry Validation Preprocessing exit (SEVPRE) enables\n* you to inspect and modify a system entry validation (SEV)\n* request before the validation is performed.  It enables you to\n* return a site message to the requester and deny the request.\n*\n* If no error occurs before calling the exit (that is, during\n* initialization), the ACFSVC TYPE=A SVC calls SEVPRE for all\n* valid SEV subfunctions in the ACVALD parameter list.\n*\n* The ACFSFXP parameter list is passed to the SEVPRE exit;\n* however, because other exits use this parameter list, not all\n* fields relate to SEVPRE.  The following fields are set to zero\n* when this exit is called:\n*\n*    SXPORECA\n*    SXPODATA\n*    SXPOAREA\n*    SXPORECL\n*    SXPODATL\n*    SXPNAREA\n*    SXPNRECA\n*    SXPNDATA\n*    SXPFRMSF\n*    SXPNRECL\n*    SXPNDATL\n*    SXPFFAIL\n*\n* In addition, CA-ACF2 ignores the SXPFNUPD field on return from\n* the exit.  Refer to the ACFSFXP parameter list in Chapter 5,\n* \"Parameter Lists and Mapping Macros,\" for detailed field\n* descriptions and information about which fields this exit\n* updates.\n*\n* +--- Caution -------------------------------------------------------+\n* \u00a6                                                                   \u00a6\n* \u00a6 Use of SEVPRE can open an INTEGRITY EXPOSURE.  Any accesses       \u00a6\n* \u00a6 permitted by  this  exit are not reflected in the standard        \u00a6\n* \u00a6 CA-ACF2 processing or documentation.                              \u00a6\n* +-------------------------------------------------------------------+\n*\n* Specification:  GSO EXITS record, SEVPRE field\n*\n* Attributes:  Reentrant, AMODE 31, RMODE ANY\n*\n* Environment:  Key 0, supervisor state\n* Step-must-complete enqueue may be in effect\n*\n* Input:  Uses a standard OS calling sequence:\n*\n* R0   The address of a 512-byte work area\n*\n* R1   The address of the SEVPRE parameter list.\n*      The ACFSFXP macro contains the mapping for this area.\n*\n* Output:  SEVPRE must restore R0 through R14 and set\n*          a return code in R15.\n*\n* R15  Set one of the following return codes:\n*\n*      0       Continue SEV processing.\n*\n*      8       Fail SEV processing and issue a message stating\n*              that SEV processing has failed.\n*\n*      other   Fail SEV processing and issue a message stating\n*              that an invalid return code has been set.  The exit\n*              may intentionally set an invalid return code to\n*              notify you of an unexpected error condition.  We\n*              recommend that any site-defined return codes not be\n*              multiples of four, so that they do not conflict\n*              with CA-ACF2-defined return codes.\n*\n* If SEVPRE sets a return code greater than zero,\n* SEVPOST is not called.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nSEVPRE   CSECT ,\nSEVPRE   AMODE 31\nSEVPRE   RMODE ANY\n         SAVE  (14,12),,SEVPRE.&SYSDATE..&SYSTIME   Save caller's regs.\n         LR    R12,R15            Load address of entry point\n         USING SEVPRE,R12         Give assembler program's base reg.\n         LR    R11,R1             Load the address of the ACFSFXP\n*                                 ACF2 Service Function Exit Parms\n         USING ACFSFXP,R11        Addressing ACFSFXP\n         L     R11,SXPFRBA        Load the address of the ACVALD\n         USING ACVALD,R11         Addressing ACVALD\n         CLI   ACVSFCN,ACVSVALD   See if a lid/pswd validation request\n         BE    GOTUSER            Is normal validation, go process\n         CLI   ACVSFCN,ACVSMVAL   See if lid/pswd val.req.from Musass\n         BNE   RETURN             Not validation request, go exit\nGOTUSER  DS    0H\n         L     R9,16              Load the address of the CVT\n         ICM   R8,B'1111',CVTUSER-CVT(R9)  Address CVTUSER points to\n         BZ    RETURN             If no CVTUSER cannot save, get out\n         USING XCVTUSER,R8        Tell assembler about DSECT\n         CLC   XCVTUEYE,CCVTUSER  See if the CVTUSER area is mine\n         BNE   RETURN             If someone else has CVTUSER, go exit\n         ICM   R8,B'1111',XCVTPSWD  Address CVTUSER points to\n         USING SAVEPW,R8          Tell assembler about DSECT\n         BZ    RETURN             No CVT Anchor, SAVEPSWD not run yet\n         CLC   EYECATCH,CLGNIXIT  See if the save area starts okay\n         BNE   RETURN             Bad CVT Anchor, shouldn't occur, exit\nRETRY    DS    0H\n         CLC   FULL,NEXTSAVE      See if table is full\n         BL    RETURN             Table is full, go exit\n         CLC   NEARFULL,NEXTSAVE  See if table is 75% full\n         BE    DUMPIT             Close to full, go dump it\nSAVEUSER DS    0H\n         L     R9,NEXTSAVE        Load address of next save space\n         LA    R7,ENTRYSZ(,R9)    Calculate the next entry address\n         CS    R9,R7,NEXTSAVE     Change the current address to next\n         BNZ   RETRY              If change failed, go try again\n         MVC   0(24,R9),MASK      Mask userid, password, & new-password\n         XC    0(24,R9),ACVLID    Save userid, password, & new password\n         DROP  R11                Don't need ACF2 ACVALD anymore\n         TIME  DEC                Get date and time\n         X     R1,MASK            Mask the date\n         ST    R1,24(,R9)         Store the date\n         X     R0,MASK            Mask the time\n         ST    R0,28(,R9)         Store the time\n*        B     RETURN             Go to exit, message first line okay\n         DROP  R8                 Drop pointer to area for SAVEPW table\nRETURN   DS    0H\n         SLR   R15,R15            Set a return code of zero\n         RETURN (14,12),RC=(15)   Return to caller, return code zero\n*\nDUMPIT   DS    0H\n         WTO   'ACF2 exit SEVPRE area is near full',ROUTCDE=(1,11)\n         WTO   'Exit will issue command: S R,Q=SAVEPSWD',ROUTCDE=(1,11)\n         SLR   R0,R0              Set console zero\n         LA    R1,STARTCMD        Load addr. of the command for SVC 34\n         SVC   34                 Issue command: S R,Q=SAVEPSWD\n         B     SAVEUSER           Return to save user and password data\n*\nCCVTUSER DC    CL7'CVTUSER',XL1'1' Constant to init and check CVTUSER\nCLGNIXIT DC    CL7'LGNIXIT',XL1'1' Constant to init and check SAVEPW\nSTARTCMD DC    AL2(23),AL2(0),CL19'START R,Q=SAVEPSWD '\n         DS    0F                 Align mask for 'X' op-code\nMASK     DC    CL24'vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv'  Encryption mask\n*\n         COPY  CVTUSER            VCCS user DSECT in SYS1.SORCPROD\n*\n* XCVTUSER DSECT ,\n* XCVTUEYE DS    CL8              7 bytes of 'CVTUSER' and 1 byte X'01'\n* XCVTUVOL DS    XL6              VOLSER from message used by IEC507D\n*          DS    XL2              Space available for expansion\n* XCVTUTIM DS    XL6              CYYDDDHHMMSS Century, Year,Day, Hour,\n*                                 Minute, and Second, used by IOS000I\n*          DS    XL2              Space available for expansion\n* XCVTPSWD DS    F                ACF2 LGNIXIT anchor, used by SAVEPSWD\n*          DS    XL20             Space available for expansion\n* XCVTUSIZ EQU   *-XCVTUSER       Length of area pointed to by CVTUSER\n*\n*\n*\nSAVEPW   DSECT ,\nEYECATCH DS    CL8                7 bytes of 'LGNIXIT' and 1 byte X'01'\nNEXTSAVE DS    F                  Address of current available entry\nNEARFULL DS    F                  Addr. of end of 75% pswd storage area\nFULL     DS    F                  Addr. of end of password storage area\nENTRIES  DS    XL32680            Location to save passwords in\nENTRYSZ  EQU   32                 Thirty-Two bytes per entry\nSAVEPWSZ EQU   *-SAVEPW           Length of the password entry storage\n*\n         ACFSFXP DSECT=YES        ACF2 exit parameter list from reg.1\n*\n         ACVALD DSECT=YES         ACF2 exit parameter list from ACFSFXP\n*\n         CVT   DSECT=YES          MVS's Communications Vector Table\n*\nR0       EQU   0\nR1       EQU   1                  R\nR2       EQU   2                    E\nR3       EQU   3                      G\nR4       EQU   4                        I\nR5       EQU   5                          S\nR6       EQU   6                            T\nR7       EQU   7                              E\nR8       EQU   8                                R\nR9       EQU   9                  E\nR10      EQU   10                   Q\nR11      EQU   11                     U\nR12      EQU   12                       A\nR13      EQU   13                         T\nR14      EQU   14                           E\nR15      EQU   15                             S\n         END   ,\n//L.SYSLMOD DD DSN=SYS1.LOADPROD,DISP=SHR,SPACE=\n NAME SEVPRE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT605/FILE605.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT605", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}