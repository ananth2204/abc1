*PROCESS M,OPT(TIME),S,GN;
 /*
//PGMVCI  JOB 'IBI','V CHERNYAK',REGION=1000K,NOTIFY=PGMVC,CLASS=A,
//        MSGCLASS=A,MSGLEVEL=(1,1)
//PROCLIB  JCLLIB ORDER=PGMVYC.REASM.PLI
//        EXEC PLIXCL,PARM.LKED='LET,NCAL'
//PLI.SYSIN     DD DSN=PGMVYC.REASM.PLI(REASMLIV),DISP=SHR
//PLI.SYSLIB    DD DSN=PGMVYC.REASM.PLI,DISP=SHR
//LKED.SYSLMOD  DD DSN=PGMVYC.REASM.SUBLOAD(REASMLIV),DISP=SHR
//
 */
 %SKIP;
 /*********************************************************************/
 /*  FILL LIVSHIC - BLOCK                                             */
 /*********************************************************************/
 $INTLIV:
      PROC(N,LBLOCK_START,CONTROL);
 DCL  N            CHAR(8),
      LBLOCK_START PTR,
      CONTROL      CHAR(8),
      P            PTR,
      NULL         BUILTIN;
 DCL  REASMLD      ENTRY(CHAR(8), BIN FIXED(31), CHAR(8))
                   EXT OPTIONS(ASM INTER);
 %NOPRINT;
 %INCLUDE REASMBAS;
 %PRINT;

     P=LBLOCK_START;
     DO WHILE(P ¬= NULL);
        IF P->LBLOCK.NAME=N THEN  RETURN;
        P= P->LBLOCK.NEXT;
     END;

     ALLOCATE LBLOCK;
     LBLOCK.NEXT   = LBLOCK_START;
     LBLOCK_START  = LBLOCK_PTR;
     LBLOCK.NAME   = N;
     CALL REASMLD(N,LBLOCK.ADR,CONTROL);
     LBLOCK.ADUMMY = NULL;
     LBLOCK.MACRO  = '';
 END $INTLIV;

*PROCESS M,OPT(TIME),S,GN;
 /*********************************************************************/
 /*  DELETE LIVSHIC BLOCK                                             */
 /*********************************************************************/
 $DELLIV:
      PROC(N,LBLOCK_START);
 DCL  N            CHAR(8),
      LBLOCK_START PTR,
      NULL         BUILTIN,
      (P,Q)        PTR INIT(NULL);
 DCL  REASMDL ENTRY(CHAR(8)) EXT OPTIONS(ASM INTER);
 %NOPRINT;
 %INCLUDE REASMBAS;
 %PRINT;

     LBLOCK_PTR = LBLOCK_START;
     DO WHILE(LBLOCK_PTR ¬= NULL);
        IF LBLOCK.NAME = N THEN DO;
           IF P ¬= NULL THEN P->LBLOCK.NEXT = LBLOCK.NEXT;
                        ELSE LBLOCK_START   = LBLOCK.NEXT;
           CALL REASMDL(N);
           P = LBLOCK.ADUMMY;
           DO WHILE(P ¬= NULL);
              Q = P;
              P = P->DUMMY.NEXT;
              FREE Q->DUMMY;
           END;
           FREE LBLOCK;
           RETURN;
        END;
        P = LBLOCK_PTR;
        LBLOCK_PTR = LBLOCK.NEXT;
     END;
 END $DELLIV;

*PROCESS M,OPT(TIME),S,GN;
 /*********************************************************************/
 /*  FIND LAME IN LIVSHIC BLOCK BY OFFSET                             */
 /*********************************************************************/
 $LFIND:
     PROC(LBLOCK_PTR,OFFSET,$XREF,#COM,$PUTXRF)
          RETURNS(CHAR(20) VAR);
 DCL    OFFSET       BIN FIXED,
        $XREF        BIT(1),
        #COM         CHAR(*) VAR,
        $PUTXRF      ENTRY(CHAR(*)),
        (I,K)        BIN FIXED INIT(0),
        (CUR,TOTAL)  BIN FIXED INIT(0),
        INITOFF      BIN FIXED INIT(0),    /* INITIAL OFFSET */
        ROFF         BIN FIXED,
        GPTR         BIN FIXED(31) INIT(0),
        CM           CHAR(80) VAR;

 DCL 1   LEL BASED(LEL_PTR) ALIGNED,
      2  NAME          CHAR(12),
      2  LTYPE         CHAR(1),
      2  RS01          CHAR(1),
      2  ENTOFF        BIN FIXED,    /* OFFSET FOR ENTRY ELEMENT */
      2  LEN           BIN FIXED,
      2  OFF           BIN FIXED,
      2  COMLEN        BIN FIXED(31),
      2  COMMENT       CHAR(80),
         LEL_PTR       PTR,
         LEL_START     PTR,
         #LEL_PTR BIN FIXED(31) BASED(#PTR01),
         $DSECT        CHAR(1) STATIC INT INIT('J'),
         $ENTRY        CHAR(1) STATIC INT INIT('%'),
         #PTR01        PTR;

 DCL     $NEXTEL  ENTRY(CHAR(*) VAR) EXT RETURNS(CHAR(100) VAR),
         $DIGIT   ENTRY(BIN FIXED(31)) EXT RETURNS(CHAR(16) VAR),
         (INDEX,SUBSTR,UNSPEC,ADDR,LENGTH,TRANSLATE) BUILTIN;
 %NOPRINT;
 %INCLUDE REASMBAS;
 %PRINT;

     #PTR01 = ADDR(LEL_PTR);

     IF LBLOCK.ADR ¬= 0 THEN DO;
        #LEL_PTR=LBLOCK.ADR;
        IF LTYPE ¬= $DSECT &  LTYPE ¬= $ENTRY &
           LTYPE ¬= '9'    &  LTYPE ¬= 'N'    &  LTYPE ¬= 'U'
           THEN RETURN('');

        #LEL_PTR = LBLOCK.ADR;
        DO WHILE ((LTYPE ¬= $DSECT) & (LTYPE ¬= $ENTRY));
           IF COMLEN<0 THEN DO;
              SIGNAL ERROR;
              ON ERROR SNAP SYSTEM;
              STOP;
           END;
           K=20+4+COMLEN;
           #LEL_PTR = #LEL_PTR + K;
        END;

        TOTAL = LEL.LEN;
        IF LTYPE = $ENTRY THEN INITOFF = ENTOFF;
        IF COMLEN>0 THEN LBLOCK.MACRO = SUBSTR(COMMENT,1,COMLEN);
        LEL_START = LEL_PTR;

        DO WHILE(CUR < TOTAL);
           ROFF = LEL.OFF - INITOFF;
           IF LTYPE ¬= 'U'   &  LTYPE ¬= 'N' &  LTYPE ¬= 'L' &
              LTYPE ¬= $DSECT & LTYPE ¬= $ENTRY &
              OFFSET >= ROFF  &  OFFSET < ROFF+LEL.LEN
              THEN DO;
                 GPTR = #LEL_PTR;
                 IF OFFSET=ROFF & LEL_START¬=LEL_PTR THEN
                    CUR = TOTAL;
              END;
           IF COMLEN<0 THEN DO;
              SIGNAL ERROR;
              ON ERROR SNAP SYSTEM;
              STOP;
           END;
           K = 20+4+COMLEN;
           CUR = CUR + K;
           #LEL_PTR = #LEL_PTR+K;
        END;

        IF GPTR ¬= 0 THEN DO;
           #LEL_PTR = GPTR;
           ROFF = LEL.OFF - INITOFF;
           CM = SUBSTR(COMMENT,1,COMLEN);
           /************************************/
           /*               NON-FORMALS        */
           /************************************/
           CM=TRANSLATE(CM,'     ','_-.,;');
           /*************************************/
           IF CM ¬= '' THEN DO;
              DO WHILE(SUBSTR(CM,LENGTH(CM),1)=' ');
                 CM=SUBSTR(CM,1,LENGTH(CM)-1);
              END;
              DO WHILE(SUBSTR(CM,1,1)=' ');
                 CM=SUBSTR(CM,2);
              END;
              I=INDEX(CM,'  ');
              DO WHILE(I & CM¬='');
                 SUBSTR(CM,I,2) = ' ';
                 I=INDEX(CM,'  ');
              END;
           END;
           ELSE  CM='';
           #COM = CM;
           IF $XREF THEN
              CALL $PUTXRF(LEL.NAME);
           IF OFFSET > ROFF THEN
              RETURN($NEXTEL(LEL.NAME) || '+' ||
                     $DIGIT(OFFSET-ROFF) );
           ELSE
              RETURN($NEXTEL(LEL.NAME));
        END;
     END;

     IF OFFSET=0 THEN DO;
        IF $XREF THEN
           CALL $PUTXRF(SUBSTR(LBLOCK.NAME,2));
        RETURN($NEXTEL(SUBSTR(LBLOCK.NAME,2)));
     END;

     RETURN('');

 END $LFIND;
