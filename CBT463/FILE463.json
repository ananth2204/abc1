{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012117000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE463.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE463.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x15'", "DS1TRBAL": "b'L\\xc4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03i\\x00\\x05\\x03i\\x00\\x07\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"BR": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE BR COMMAND IS AN ISPF COMMAND. IT MAY ONLY BE USED WHILE UNDER\n ISPF AND THEN ONLY FROM A COMMAND LINE. IT WILL INVOKE THE PDF BROWSE\n AGAINST A DATASET. THE COMMAND MAY BE ENTERED FROM ANY SCREEN ALLOWING\n A USER TO INVOKE THE BROWSE UTILITY FROM ANY SCREEN.\n\n)X SYNTAX\n     BR  DSNAME             +\n         VOLUME( )          +\n         PASSWORD( )\n\n     REQUIRED    - DSNAME\n\n)O OPERANDS\n))DSNAME         - A VALID MVS DSNAME IN TSO SYNTAX.\n))VOLUME(      ) - A VOLSER. THIS PARAMTER DIRECTS PDF BROWSE NOT TO\n                   SEARCH THE CATALOG. IT WILL BROWSE THE DATASET ON THE\n                   SPECIFIED VOLUME.\n))PASSWORD(    ) - A DATASET PASSWORD MAY BE SPECIFIED.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ED": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE ED COMMAND IS AN ISPF COMMAND. IT MAY ONLY BE USED WHILE UNDER\n ISPF AND THEN ONLY FROM A COMMAND LINE. IT WILL INVOKE THE PDF EDIT\n AGAINST A DATASET. THE COMMAND MAY BE ENTERED FROM ANY SCREEN ALLOWING\n A USER TO INVOKE THE EDIT UTILITY FROM ANY SCREEN.\n\n)X SYNTAX\n     ED  DSNAME             +\n         VOLUME( )          +\n         PASSWORD( )        +\n         PROFILE( )         +\n         MACRO( )\n\n     REQUIRED    - DSNAME\n\n)O OPERANDS\n))DSNAME         - A VALID MVS DSNAME IN TSO SYNTAX.\n))VOLUME(      ) - A VOLSER. THIS PARAMTER DIRECTS PDF EDIT NOT TO\n                   SEARCH THE CATALOG. IT WILL EDIT THE DATASET ON THE\n                   SPECIFIED VOLUME.\n))PASSWORD(    ) - A DATASET PASSWORD MAY BE SPECIFIED.\n))PROFILE(    )  - AN EDIT PROFILE MAY BE SPECIFIED.\n))MACRO(    )    - AN INITIAL EDIT MACRO MAY BE SPECIFIED.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KBR": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE KBR COMMAND IS AN ISPF COMMAND. IT MAY ONLY BE USED WHILE UNDER\n ISPF AND THEN ONLY FROM A COMMAND LINE. IT WILL INVOKE THE PDF BROWSE\n AGAINST THE DATASET(S) ALLOCATED TO A GIVEN DDNAME. THE DATASET MAY BE\n TEMPORARY AS LONG AS IT IS NOT ALLOCATED TO VIO (A VOLSER IS REQUIRED).\n\n)X SYNTAX\n     KBR  DDNAME/DDNAME(MEMBER)     +\n          FIRST\n\n     REQUIRED    - DDNAME OR DDNAME(MEMBER)\n     DEFAULT     - PROFILE - LAST NODE OF DSNAME.\n                 - MACRO   - NONE.\n\n)O OPERANDS\n))DDNAME         - A VALID MVS DDNAME.\n))DDNAME(MEMBER) - A DDNAME FOLLOWED BY A MEMBER NAME IN PARENTHESIS.\n                   THIS SYNTAX ASSUMES THAT THE DDNAME IS ALLOCATED TO A\n                   PDS OR TO A CONCATENATION OF PDS.\n))FIRST          - THIS KEYWORD INDICATES THAT ONLY THE FIRST LIBRARY IN\n                   A CONCATENATION (OR THE FIRST LIBRARY CONTAINING A\n                   MEMBER IN CONCATENATION) SHOULD BE BROWSED.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KDDN": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE KDDN COMMAND ACQUIRES A LIST OF DDNAMES CURRENTLY ALLOCATED TO ANY\n GIVEN DATASET NAME.  THE COMMAND CAN THEN DISPLAY THE INFORMATION, OR\n SAVE THE INFORMATION FOR OTHER PURPOSES.\n\n)X SYNTAX\n     KDDN   ('DSNAME-LIST')   SAVE\n\n     REQUIRED    - 'DSNAME-LIST'\n     SPECIAL DSNS- 'TERMFILE' = DDNAMES ALLOCATED TO \"DA(*)\"\n                   'NULLFILE' = DDNAMES ALLOCATED TO \"DUMMY\"\n                   'SYSOUTFILE' = DDNAMES ALLOCATED TO \"SYSOUT\"\n     DEFAULT     - DISPLAY THE COMMAND RESULTS ON THE TERMINAL\n     RETURN-CODES:  0  SUCCESSFUL DISPLAY\n                   20  UNUSUAL COMMAND FAILURE\n                  100  DATASET NOT FOUND (WITH 'SAVE' KEYWORD)\n                100+N  DATASET FOUND     (WITH 'SAVE' KEYWORD;\n                                          SEE SPECIAL NOTES BELOW)\n)O OPERANDS\n))'DSNAME-LIST' -\n             ONE OR MORE DSNAMES TO INTERROGATE (STANDARD TSO SYNTAX);\n             PARENDS REQUIRED ONLY WHEN MORE THAN ONE DSNAME ENTERED.\n))SAVE     - ROUTE DDNAME INFORMATION TO A DYNAMICALLY-CREATED\n             TEMPORARY DATASET.\n\n SPECIAL NOTES:\n \"SAVE\" PROCESSING CREATES AN TEMPORARY DATASET, DYNAMICALLY ALLOCATED\n TO THE DDNAME \"KDDNXX..\" (WHERE \"..\" REPRESENTS A NUMBER FROM \"1 \" TO\n \"99\").  THERE WILL BE ONE DATASET FOR EACH ENTRY IN 'DSNLIST'.  THIS\n INFORMATION WILL BE LOST IF THE USER PERFORMS A \"FREE ALL\" FUNCTION\n BEFORE INTERROGATING THE DATASET(S).\n\n EACH DATASET CONTAINS AT LEAST 2 RECORDS, IN THE FOLLOWING FORMAT:\n (RECORD 1:)\n BYTES 1-44 : DATASET NAME    (WITH TRAILING BLANKS)\n (RECORDS 2 THRU N:)\n BYTES 1-8  : DDNAME\n BYTES 11-13: CONCATENATION SEQUENCE NUMBER (OR BLANK)\n\n SAMPLE CLIST TO RETRIEVE 1ST ALLOCATED DDNAME FOR PROCESSING:\n   KDDN &DSNAME SAVE\n   SET &LCC = &LASTCC - 100\n   IF &LCC > 0 THEN DO\n     OPENFILE KDDNXX&LCC\n     GETFILE  KDDNXX&LCC                    /* GET FIRST RECORD */\n     GETFILE  KDDNXX&LCC                    /* GET SECOND RECORD */\n     SET &X = &&KDDNXX&LCC                  /* COPY SECOND RECORD */\n     CLOSFILE KDDNXX&LCC\n     FREE FI(KDDNXX&LCC)                    /* CLEAN UP \"SAVE\" DS */\n     SET &DDN1 = &SUBSTR(1:8,&X)            /* EXTRACT DDNAME  */\n     END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KDSN": {"ttr": 524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE KDSN COMMAND ACQUIRES A LIST OF DATASET NAMES CURRENTLY ALLOCATED\n TO ANY GIVEN DDNAME.  THE COMMAND CAN THEN DISPLAY THE INFORMATION, OR\n SAVE THE INFORMATION FOR USE IN REALLOCATING THE DDNAME.\n\n)X SYNTAX\n     KDSN   ('DDLIST')   SAVE   RESET\n\n     REQUIRED    - 'DDNAME-LIST'\n     DEFAULT     - DISPLAY THE COMMAND RESULTS ON THE TERMINAL\n     RESTRICTION - \"SAVE\" AND \"RESET\" ARE MUTUALLY EXCLUSIVE.\n     RETURN-CODES:  0  SUCCESSFUL DISPLAY\n                   20  UNUSUAL COMMAND FAILURE\n                  100  DATASET NOT FOUND (WITH 'SAVE' KEYWORD)\n                100+N  DATASET FOUND     (WITH 'SAVE' KEYWORD;\n                                          SEE SPECIAL NOTES BELOW)\n     SPECIAL DSNS- 'TERMFILE' = DDNAMES ALLOCATED TO \"DA(*)\"\n                   'NULLFILE' = DDNAMES ALLOCATED TO \"DUMMY\"\n                   'SYSOUTFILE' = DDNAMES ALLOCATED TO \"SYSOUT\"\n)O OPERANDS\n))'DDLIST' - ONE OR MORE DDNAMES TO INTERROGATE.  PARENDS REQUIRED ONLY\n             WHEN MORE THAN ONE DDNAME IS ENTERED.\n))SAVE     - ROUTE DATASET-NAME INFORMATION TO A DYNAMICALLY-CREATED\n             TEMPORARY DATASET.\n))RESET    - USE THE INFORMATION STORED BY A PREVIOUS \"KDSN ... SAVE\"\n             TO RE-ESTABLISH THE ORIGNAL DATASET ALLOCATION(S) TO THE\n             'DDLIST' DDNAMES.  NOTE: IF THERE WAS NO PRECEDING \"SAVE\"\n             FOR A DDNAME, OR IF THE \"SAVED\" ALLOCATION CANNOT BE\n             RESTORED, THE CURRENT ALLOCATION IS RETAINED.\n\n SPECIAL NOTES:\n \"SAVE\" PROCESSING CREATES AN TEMPORARY DATASET, DYNAMICALLY ALLOCATED\n TO THE DDNAME \"KDSNXX..\" (WHERE \"..\" REPRESENTS A NUMBER FROM \"1 \" TO\n \"99\").  THERE WILL BE ONE DATASET FOR EACH ENTRY IN 'DDLIST'.  THIS\n INFORMATION WILL BE LOST IF THE USER PERFORMS A \"FREE ALL\" FUNCTION\n BETWEEN THE TIME OF A \"KDSN/SAVE\" AND A \"KDSN/RESET\".\n\n THERE IS ONE VARIABLE-LENGTH RECORD ON EACH DATASET,\n IN THE FOLLOWING FORMAT:\n BYTES 1-8  : ORIGINAL DDNAME (WITH TRAILING BLANKS)\n BYTES 9-228: DATASET NAMES (STANDARD TSO SYNTAX) SEPARATED BY BLANKS\n              (\"*\" FOR TERMINAL ALLOCATIONS).\n\n SAMPLE CLIST TO RECREATE DDNAME1-ALLOCATION UNDER DDNAME2:\n   KDSN DDNAME1 SAVE\n   SET &LCC = &LASTCC - 100\n   IF &LCC > 0 THEN DO\n     OPENFILE KDSNXX&LCC\n     GETFILE  KDSNXX&LCC                    /* GET FIRST RECORD */\n     SET &X = &&KDSNXX&LCC                  /* COPY FIRST RECORD */\n     CLOSFILE KDSNXX&LCC\n     FREE FI(KDSNXX&LCC)                    /* CLEAN UP \"SAVE\" DS */\n     SET &DSNS = &SUBSTR(9:&LENGTH(&X),&X)  /* EXTRACT DSNAMES */\n     ALLOC FI(DDNAME2) DA(&DSNS) SHR REUSE\n     END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KED": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE KED COMMAND IS AN ISPF COMMAND. IT MAY ONLY BE USED WHILE UNDER\n ISPF AND THEN ONLY FROM A COMMAND LINE. IT WILL INVOKE THE PDF EDIT\n AGAINST THE DATASET(S) ALLOCATED TO A GIVEN DDNAME. THE DATASET MAY BE\n TEMPORARY AS LONG AS IT IS NOT ALLOCATED TO VIO (A VOLSER IS REQUIRED).\n\n)X SYNTAX\n     KED  DDNAME/DDNAME(MEMBER)     +\n          PROFILE('EDIT PROFILE') +\n          MACRO  ('EDIT MACRO')     +\n          FIRST\n\n     REQUIRED    - DDNAME OR DDNAME(MEMBER)\n     DEFAULT     - PROFILE - LAST NODE OF DSNAME.\n                 - MACRO   - NONE.\n\n)O OPERANDS\n))DDNAME         - A VALID MVS DDNAME.\n))DDNAME(MEMBER) - A DDNAME FOLLOWED BY A MEMBER NAME IN PARENTHESIS.\n                   THIS SYNTAX ASSUMES THAT THE DDNAME IS ALLOCATED TO A\n                   PDS OR TO A CONCATENATION OF PDS.\n))PROFILE(     ) - SPECIFY A VALID EDIT PROFILE TYPE.\n))MACRO(     )   - SPECIFY A VALID EDIT MACRO.\n))FIRST          - THIS KEYWORD INDICATES THAT ONLY THE FIRST LIBRARY IN\n                   A CONCATENATION (OR THE FIRST LIBRARY CONTAINING A\n                   MEMBER IN CONCATENATION) SHOULD BE EDITED.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KLIB": {"ttr": 528, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE KLIB COMMAND ACQUIRES A LIST OF DATASET NAMES CONTAINING A\n SPECIFIED MEMBER, CURRENTLY ALLOCATED TO ANY GIVEN DDNAME.  THE COMMAND\n CAN THEN DISPLAY THE INFORMATION, OR SAVE THE INFORMATION FOR ALTERNATE\n PROCESSING.\n\n)X SYNTAX\n     KLIB   ('DDNAME(MEMBER) LIST')  SAVE\n\n     REQUIRED    - 'DDNAME(MEMBER)'\n     DEFAULT     - DISPLAY THE COMMAND RESULTS ON THE TERMINAL\n     RETURN-CODES:  0  SUCCESSFUL DISPLAY\n                   20  UNUSUAL COMMAND FAILURE\n                  100  MEMBER NOT FOUND (WITH 'SAVE' KEYWORD)\n                100+N  MEMBER FOUND     (WITH 'SAVE' KEYWORD;\n                                         SEE SPECIAL NOTES BELOW)\n)O OPERANDS\n))'DDNAME(MEMBER)' -\n             ONE OR MORE DDNAME(MEMBERNAME) OPERANDS.  OUTER PARENDS\n             REQUIRED ONLY WHEN MORE THAN ONE PAIR IS ENTERED.\n))SAVE     - ROUTE DATASET-NAME INFORMATION TO A DYNAMICALLY-CREATED\n             TEMPORARY DATASET.\n\n SPECIAL NOTES:\n \"SAVE\" PROCESSING CREATES AN TEMPORARY DATASET, DYNAMICALLY ALLOCATED\n TO THE DDNAME \"KLIBXX..\" (WHERE \"..\" REPRESENTS A NUMBER FROM \"1 \" TO\n \"99\").  THERE WILL BE ONE DATASET FOR EACH ENTRY IN THE \"PAIRS\" LIST\n THIS INFORMATION WILL BE LOST IF THE USER PERFORMS A \"FREE ALL\"\n FUNCTION AFTER THE TIME OF A \"KLIB ... SAVE\".\n\n EACH DATASET CONTAINS AT LEAST 2 RECORDS, IN THE FOLLOWING FORMAT:\n (RECORD 1:)\n BYTES 1-8  : MEMBER NAME     (WITH TRAILING BLANKS)\n BYTES 9-16 : ORIGINAL DDNAME (WITH TRAILING BLANKS)\n (RECORDS 2 THRU N:)\n BYTES 1-47 : ONE DATASET NAME, FULLY QUALIFIED (WITHOUT QUOTES).\n\n SAMPLE CLIST TO RETRIEVE 1ST DSNAME FOR PROCESSING:\n   KLIB &DDNAME(&MEMBER) SAVE\n   SET &LCC = &LASTCC - 100\n   IF &LCC > 0 THEN DO\n     OPENFILE KLIBXX&LCC\n     GETFILE  KLIBXX&LCC                    /* GET FIRST RECORD */\n     GETFILE  KLIBXX&LCC                    /* GET SECOND RECORD */\n     SET &X = &&KLIBXX&LCC                  /* COPY SECOND RECORD */\n     CLOSFILE KLIBXX&LCC\n     FREE FI(KLIBXX&LCC)                    /* CLEAN UP \"SAVE\" DS */\n     SET &SYSDVAL = &SUBSTR(1:&LENGTH(&X),&X)  /* EXTRACT DSNAME  */\n     READDVAL &DSN1                         /* TRUNCATE EXTRA BLANKS */\n     SET &DSN1 = &STR('&DSN1')\n     END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOGMSG": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE LOGMSG COMMAND IS AN ISPF COMMAND. IT MAY ONLY BE USED WHILE UNDER\n ISPF AND THEN ONLY FROM A COMMAND LINE. IT WILL ALLOW A USER TO LOG A\n MESSAGE INTO HIS ISPF LOG.\n\n)X SYNTAX\n     LOGMSG   TEXT\n\n     REQUIRED    - NOTHING\n     ALIAS       - LOG\n     DEFAULT     - DISPLAY A DATA ENTRY PANEL.\n\n         IF THE USER TYPES \"LOG  \" WITH NO TEXT, HE WILL GET A DATA\n         ENTRY SCREEN TO TYPE THE TEXT. IF HE TYPES \"LOG FDSJFJ\" HE\n         WILL LOG \"FDSJFJ\" AND CONTINUE (NO DATA ENTRY SCREEN IS\n         PRESENTED).\n\n)O OPERANDS\n))TEXT           - ANY TEXT THE USER WISHES TO LOG.\n                   IF APOS ARE TYPED, THEY MUST BE DOUBLED. (ISPF BUG).\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOCMD": {"ttr": 532, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F FUNCTION\n THE TSOCMD COMMAND IS AN ISPF COMMAND. IT MAY ONLY BE USED WHILE UNDER\n ISPF AND THEN ONLY FROM A COMMAND LINE. IT WILL INVOKE THE OPTION 6\n SCREEN YOU NORMALLY GET WHEN ACCESSING OPTION 6 FROM THE PRIMAY OPTION\n MENU.\n\n)X SYNTAX\n     TSOCMD  PARMS\n\n     REQUIRED    - NONE.\n\n)O OPERANDS\n))PARMS          - ANY TSO COMMAND TO BE INVOKED ON OPTION 6.\n                   THIS WILL PRE-FILL THE TSO COMMAND LINE AND HIT\n                   ENTER FOR YOU.\n                   NOTE - THIS PARAMETER ONLY WORKS IF THE OPTION 6 FROM\n                          THE GUIDE ISPF TAPE HAS ALSO BEEN INSTALLED.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT463/FILE463.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT463", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}