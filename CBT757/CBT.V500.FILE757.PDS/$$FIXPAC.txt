                 +----------------------------------+
                 | CBT Tape - File 757 Fix Pack Log |
                 +----------------------------------+


 CBT757  21 July 2012  V1R1M17 - Fix Pack 17
 ===========================================

  (1)-Fixed bug when user program specified the LOG=OFF parm in a
  LPGMNTRY statement. If a user specified LOG=OFF to disable
  logging and explicitly specified LOG=OFF in all subprograms to
  not generate output for log points, and if the Logger Services
  object library was not in the //SYSLIB concatenantion, the
  link-edit for the user's program would fail with RC=08 and
  issue the IEW2456E error message.

   IEW2456E 9207 SYMBOL LGMHLRCE UNRESOLVED.
   IEW2456E 9207 SYMBOL LGMHLRCI UNRESOLVED.
   IEW2456E 9207 SYMBOL LGMHLRCT UNRESOLVED

  The LOG=OFF parameter was not being properly recognized by
  Logger Services, and Logger Services was including a Vcon
  reference during assembly to Logger Services programs when it
  was not necessary to do so with LOG=OFF. If there was not a
  member name in the //SYSLIB or in the designated call library
  for Logger Services programs, the Binder during auto-call
  processing would encounter an error when attempting to include
  the Logger Services module. However, with LOG=OFF the modules
  are not required, and the link-edit should end successfully
  even if the Logger Services object library is not in the
  //SYSLIB. To correct this defect a fix was made to copybook
  LGCPLOGR.

  (2)-Fixed bug in diagnostic abend report. If an abend should
  occur in an Assembler program using Logger Services, then abend
  recovery would be directed by program LGMHESTA to program
  LGMHRTRY to process a diagnostic report displaying a Register
  Summary Report section. During abend report processing the
  register report checks if a general purpose register points to
  a valid storage area. The Register Summary Report was
  indicating an invalid 64-bit address as belonging within the
  addressable range of the usable area of an above-the-bar memory
  object in the user's address space. Error was due to a test
  performed to check the high-half of a register where the test
  result would cause a branch to the wrong section of the
  program. This was causing a branch around a required second
  validity check on the storage address in a register to
  correctly direct further processing. To correct this defect a
  fix was made to the DRVS0000 Rsect of programs LGMHRTRY and
  LGMHRTRX.

  (3)-Added support for log record buffering above-the-bar. Now
  if a user specifies the LPGMNTRY entry with the new
  LOGOUT=BUF64 option the log records will be directed to storage
  above-the-bar for buffering of log records. Change was the
  development of a new Assembler source member named LGMHLB64
  which was added to the Logger Services package. This new
  LGMHLB64 program is dedicated to the processing of log records
  to memory objects using the IARV64 GETSTOR, CHANGEGUARD, and
  DETACH services to obtain, manage, and release above-the-bar
  storage used for buffering of log records. When a user
  specifies the new LOGOUT=BUF64 option on the LPGMNTRY TYPE=MAIN
  entry, the new LGMHLB64 program will be called instead of the
  old LGMHLRCB program. The old LGMHLRCB program and its
  associated L0GOUT=BUFR option still remains, and will continue
  to be supported by Logger Services for the above-the-line
  buffering option. Changes to support buffering records
  above-the-bar were also made to programs LGMHLRCB, LGMHESTA,
  LGMHESTX, LGMHLRCE, LGMHRTRY, and LGMHRTRX, and to copybooks
  LGCPLOGR and LGCPLSWA. The JCL members ASMLOGGR and ASMLOGG2
  were updated to add the new LGMHLB64 member name to the SYSIN.

  (4)-Added support for 20-bit displacements to the designated
  base register used for a data area specified in a #LGPOINT.
  Previously if a user specified a #LGPOINT with a SHOW=, WATCH=,
  or MSG= keyword where the address parameter was specified as a
  program label, the storage location offset of that program
  label was required to be within the 4k addressable range of the
  designated base register in order for Logger Services to
  resolve the address using 12-bit displacement. This required
  the user to ensure that the program label parameter specified
  in the the SHOW=, WATCH=, or MSG= keyword was within the 4K
  addressable range of the base register or there would be an
  assembly error. This limitation is removed, and Logger Services
  now supports a 20-bit displacement of up to one megabyte (-512K
  to +512K) of addressability from the address in the base
  register for the program label specified with SHOW=, WATCH=, or
  MSG= keywords. Change was made to programs LGMHLRCE, LGMHRTRY,
  LGMHRTRX, and to copybook LGCPLOGR.

  (5)To expand the documention formats supported for Logger
  Services a new Adobe Acrobat PDF version of Logger Services
  documentation is now available. This new documentation file is
  named $$DOCPDF. To read the PDF format documentation in the
  $$DOCPDF file you will need to obtain the free ADOBE Acrobat
  PDF Reader software downloadable from the Adobe web site at
  http://www.adobe.com/. The Adobe Acrobat PDF version contains
  the same exact information as the Microsoft Word DOC version,
  just in a different format.

  (6)-Updated documentaion in the $$DOC text file, the $$DOCWRD
  Microsoft Word file, and the $$DOCPDF Adobe Acrobat PDF file.
  Added new messages LGA01115 through LGA01134 with descriptions
  explaining IARV64 related error conditions.


 CBT757  27 Jan  2012  V1R1M16 - Fix Pack 16
 ===========================================

  (1)-Fixed Logpoint design to reduce the footprint in a user's
  program. If a user specifies a #LGPOINT command in their
  program, the Logpoint parameter data area will now reside in a
  different part of the control section outside of the user's
  in-line code so it does not use up the addressable range of a
  base register. The executable instructions of a Logpoint that
  are used for calling Logger Services and the data area for that
  Logpoint will remain in their logical sequence for easier
  reading of the Assembler listing. The change which was made is
  that the executable instructions of a Logpoint will still
  remain within the in-line source code, but the data area
  generated for each Logpoint will be preceded by a LOCTR
  Assembler directive identifying a different location counter
  under which the Logpoint parameter data area is to be
  assembled. This change is intended to reduce the size of the
  #LGPOINT data area that was expanding within the addressable
  range of a user program, and squeezing the user program for
  remaining addressability to a base register if many Logpoints
  were inserted within the same RSECT of a user program. Intent
  is to give relief to a user program by reducing the previous
  footprint of 100 or more bytes to only 48 bytes for each
  #LGPOINT generated in a user program. This will help increase
  base register addressability that will be available to the user
  program when adding Logpoints. Changes were made to the
  LGCPLOGR copybook, and programs LGMHLRCE, LGMHRTRY, and
  LGMHRTRX.

  (2)-For the diagnostic abend report, added new RSECT DBRK0000
  to the Logger Services abend retry program to process the
  Breaking Event Address, and create a new report section named
  'Breaking Event Before Abend'. This new routine will attempt to
  find where in the user's program does the address in the BEAR
  point to, and display the module name, Csect name, and offset.
  The routine will determine the instruction at the Breaking
  Event Address, and show the detailed characteristics of the
  instruction. Then the machine code around the area of the
  Breaking Event Address will be disassembled, and the Assembler
  language source statements preceding and following the Breaking
  Event Address will be displayed. Change is new Rsect DBRK0000
  was added to programs LGMHRTRY and LGMHRTRX.

  (3)-For the diagnostic abend report, updated RSECT DRBT0000 in
  the Logger Services abend retry program to display additional
  information on the attributes of an abending SVC in the section
  named 'Last Interrupt Event in Program Before Abend'. The
  report will now show additional information about the SVC type,
  show the module name that the SVC calls, and the show the SVC
  entry point name if entry is not at the first byte of the first
  Csect of the module that the SVC calls. Changes were made to
  programs LGMHRTRY and LGMHRTRX.

  (4)-Updated $$DOC text file and $$DOCWRD Word file.


 CBT757  30 Sept 2011  V1R1M15 - Fix Pack 15
 ===========================================

  (1)Fixed bug in calls made to DFSMS services. A new test was
  added in z/OS V1R13 on calls for DFSMS services to enforce
  64-bit and AR mode rules in DFSMS macros. This new rule will
  not allow for the expansion of the DFSMS macros during assembly
  based on SYSSTATE settings not matching the expected execution
  environment required for calling DFSMS services. In some
  instances this would result in a return code of 8 being set by
  the High Level Assembler on the assembly of Logger Services
  programs at z/OS V1R13 where at z/OS V1R12 or lower the
  assembly would end with RC=00. Logger Services starts execution
  in all AMODE64, remains in AMODE64 unless a system service
  requires AMODE31, and changes AMODEs only when necessary for a
  very short period of time when invoking a service or program
  which is AMODE 64 intolerant. To remedy this tightening, fix
  was to modify Logger Services code to accommodate for the new
  stricter enforcement of 64-bit and AR rules. Change was made to
  Logger Services programs to wrap a SYSSTATE AMODE64=NO/YES
  sequence around any PUTs in order to conform to new DFSMS macro
  changes in z/OS V1R13. Fix was to programs LGMHRTRY, LGMHRTRX,
  LGMHLRCI, LGMHLRCX, LGMHLRCE, and LGMHLRCT.

  (2)-Fixed bug in diagnostic abend report. If an abend should
  occur in an Assembler program using Logger Services, then abend
  recovery would be directed by program LGMHESTA to program
  LGMHRTRY to process a diagnostic report displaying a Register
  Summary Report section. During abend report processing a check
  is made if the abending instruction was an Execute instruction
  and if so the target of the Execute would also be displayed.
  The registers identified in the report as being used by the
  abending instruction would be for the target instruction of the
  Execute, not the Execute. There was some confusion as to which
  instruction was the subject of the Register Summary report
  section. A new message has been added to the bottom of the
  Register Summary report section indicating when the registers
  flagged as being used by the instruction are actually for the
  target instruction of an Execute Instruction. Fix was to Rsect
  DREG0000 of programs LGMHRTRY and LGMHRTRX.

  (3)-S0C4-11 abends may occur in LGMHESTA program when less than
  z/OS V1R11. If an abend should occur in a user program using
  Logger Services, the LOGGRASM ESTAEX recovery routine LGMHESTA
  would be taken to intercept the abend. Abend recovery would
  then be directed by program LGMHESTA to either the retry
  program LGMHRTRY to process a diagnostic report before
  proceeding with percolation, or to the retry address supplied
  by Logger Services to recover fully from the abend. After the
  interception of the first user program abend a second S0C4-11
  abend could occur in the LGMHESTA recovery routine before the
  SETRP could be invoked to direct processing to the retry
  routine LGMHRTRY for diagnostic processing and percolation. The
  AMODE64 recovery program LGMHESTA requires the LGES1000 routine
  in LGMHESTA for redirection to LGMHRTRY when a z/OS V1R10 or
  lower system. Previously LGMHESTA only checked the SDWA was at
  a sufficient level that it contained the SDWARC4 extension.
  Fix was to add another check of the ECVTPSEQ for the z/OS level
  to ensure proper redirection when user program which abended
  was in 64-bit addressing mode and executing on less than z/OS
  V1R11. Fix was to programs LGMHESTA and LGMHESTX.

  (4)-For the diagnostic abend report, added new RSECT DIVC0000
  in the Logger Services abend retry program to disassemble from
  a storage area the hex machine code instructions in the
  vicinity of an abending instruction. A new section named
  'Instructions in Vicinity of Abend' was added to the abend
  report to disassemble the machine code in a memory area, and
  convert to assembler source code instructions. This new report
  section will include the display of up to 20+ assembler source
  statements ahead of, and the 6 assembler source statements
  following the location of the abending instruction in a load
  module. The detail lines in the report section will display the
  hex offset, the hex machine code, the assembler source
  statement, and the instruction attributes for each listed
  instruction preceding and after the failing instruction. Change
  was new Rsect DIVC0000 was added to programs LGMHRTRY and
  LGMHRTRX.

  (5)-For the diagnostic abend report, added new RSECT DRBT0000
  to the Logger Services abend retry program to create a new
  report section named 'Last interrupt event incurred by program
  before abend'. This is where an abend occurred in an SVC, and
  the abend most likely occurring from the user passing a bad
  parameter list. Logger Services will have previously reported
  the abend in the SVC, and where the abend occurred in the SVC.
  This new routine will attempt to determine the location in the
  user's program where the abending SVC was called from by
  displaying the module name, Csect name, and offset where the
  SVC was called from. The report will show the address in the
  user's program where the called SVC was coded, and then as a
  further diagnostic aid disassemble the machine code in the load
  module to display the assembler instructions the user coded in
  their program preceding the call to the abending SVC. Change is
  new Rsect DRBT0000 was added to programs LGMHRTRY and LGMHRTRX.

  (6)-For the diagnostic abend report when processing the
  Register Summary section, added support to display storage
  subpool information for CSA, SQA, and LSQA if a register
  address pointed into these subpools. Previously in order to
  process the register report a check was made if a register
  pointed to storage in the Private area. To do this a call was
  made to VSMLIST to obtain storage information on only the
  private area subpools. The contents of the work area returned
  by VSMLIST would include the allocated block descriptors and
  the free space descriptors associated with each subpool for the
  private area. Now additional logic has been added to analyze
  the returned work area from VSMLIST against the contents of the
  registers for not just the Private area but also for the CSA
  subpools, the SQA subpools, and the LSQA subpools. Change was
  to Rsect DRVS0000 in programs LGMHRTRY and LGMHRTRX.

  (7)-For the diagnostic abend report, the 'Abend Summary'
  section was reformatted from a horizontal expansion to a
  vertical expansion with more detailed descriptions for various
  fields. The 'Abend Summary' section was also relocated from
  after the 'Abend Instruction Summary' section to before the
  'Abend Instruction Summary' which will display this information
  earlier in the report. The new report section 'Instructions in
  Vicinity of Abend' will now follow the 'Abending Instruction
  Summary' section in the report. Change was to Rsect DSWA0000 in
  programs LGMHRTRY and LGMHRTRX.

  (8)-Updated $$DOC text file and $$DOCWRD Word file.


 CBT757  23 April 2011  V1R1M14 - Fix Pack 14
 ============================================

  (1)-Fixed bug in diagnostic abend report. If an abend should
  occur in an Assembler program using Logger Services, then abend
  recovery would be directed by program LGMHESTA to program
  LGMHRTRY to process a diagnostic report displaying the Program
  Status Word (PSW) attributes. During abend report processing
  the incorrect address space mode and condition code were
  displayed when analyzing bits 16-19 of the PSW where the report
  was indicating secondary-space mode and a non-zero condition
  code when the user program was actually in access-register mode
  and a condition code of zero. Fix was to programs LGMHRTRY and
  LGMHRTRX.

  (2)-For the diagnostic abend report, added new RSECT DXMC0000 in
  the Logger Services abend retry program to disassemble the hex
  machine code instruction from a storage area into an assembler
  language source statement. The storage area containing the hex
  machine code of an abending instruction is disassembled showing
  the symbolic assembler op-code for the machine instruction such
  as L, STH, or MVC. The registers, base displacement, bit masks,
  immediate values, shift amounts, or data lengths from the
  machine code are extracted, and then formatted into the
  corresponding assembler operands that were used to code the
  assembler language source statement. Change was to programs
  LGMHRTRY and LGMHRTRX.

  (3)-For the diagnostic abend report, updated the Logger Services
  zArchitecture Machine Code Instruction Table to conform with the
  new instruction format names described in IBM publication
  "z/Achitecture Principles of Operations, Ninth Edition". Also,
  updated instruction descriptions in machine instruction table,
  added new fields to the instruction table entry to designate
  register use attributes for instructions, added new fields to
  flag instructions with variations in operand use for the same
  instruction format, and added new SVC table. Expanded Dsect
  OP@CODES to map new changes in zArchitecture Machine Code
  Instruction Table. Change was to programs LGMHRTRY and LGMHRTRX.

  (4)-Added new JCL member ASMALLOC as a batch job to allocate the
  installation data sets for LOGGRASM.

  (5)-Added new Format-7 save area mapping, and added equates for
  access registers. Change was made to copybook LGCPLOGR.

  (6)-Added equates to designate access registers when used in
  instruction operands for preserving and restoring the access
  registers on entry and exit to Logger Service calls. Change was
  to program LGMHLRCE.

  (7)-Updated $$DOC text file and $$DOCWRD Word file.


 CBT757  08 Jan 2011  V1R1M13 - Fix Pack 13
 ==========================================

  (1)-Fixed bug in diagnostic abend report. If an abend should
  occur in an Assembler program using Logger Services, then abend
  recovery would be directed by program LGMHESTA to program
  LGMHRTRY to process a diagnostic report displaying a Register
  Summary Report section. During abend report processing a check
  is made if the abending instruction was an Execute instruction
  and if so the address of the target of the Execute would be
  placed in a designated field for later processing. However,
  registers were not being correctly indentified in the Register
  Summary report section when the field containing the target
  instruction address of an Execute was null due to the
  abending instruction not being an Execute, and the field was
  still referenced for an address. Fix was to verify if the field
  containing the target instruction address of an Execute is all
  zeros before checking for the instruction Op Code. Fix was to
  Csect DRUS0000 in programs LGMHRTRY and LGMHRTRX.

  (2)-Fixed bug in diagnostic abend report. If an abend should
  occur in an Assembler program using Logger Services, then abend
  recovery would be directed by program LGMHESTA to program
  LGMHRTRY to process a diagnostic report displaying a Register
  Summary Report section. During abend report processing an
  incorrect designated register number would be flagged in the
  Register Summary section when identifying the R3 register in a
  RRF3/RRF-a-b format instruction. Fix was to Csect DRUS0000 in
  programs LGMHRTRY and LGMHRTRX.

  (3)-Fixed bug when user program specified the WATCH= parm in a
  #LGPOINT entry. If a user specified a watch point to analyze a
  range of storage bytes for any changes while their program was
  executing, and the storage area key was very large, and the
  change very small, the watch point program would sometimes
  indicate that no change had occurred to the storage area when
  an actual changed occurred. This was due to insufficient
  uniform distribution of the generated hash tokens which
  increased the risk of some collisions because the generation of
  hash token values would sometimes bunch up around a narrow
  range for a mix of similar input key values. Fix was to improve
  the avalanche effect through enhancing the shift process before
  mixing of the character data bytes in the key with the bit
  patterns in the mix box during the 1st stage compression
  process. Fix was to program LGMHWTCH.

  (4)-Fixed bug in diagnostic abend report. If an abend should
  occur in an Assembler program using Logger Services, then abend
  recovery would be directed by program LGMHESTA to program
  LGMHRTRY to process a diagnostic report, and retry would be
  attempted when the contents of SDWAGRSV, SDWAG64, SDWAARER, and
  SDWAEC1 were not available in the SDWA. In addition, if the
  Logger Services recovery routine was not the first to get
  control, then the error did not occur in the user's mainline
  program using Logger Services which activates its own ESTAEX
  recovery routine. This means retry would be attempted to
  capture diagnostic information for an error already processed
  by a previous recovery routine. Fix was to verify if registers
  and the PSW are available in the SDWA, and to check if the
  Logger Services ESTAE was the first recovery routine to get
  control. Fix was to programs LGMHESTA and LGMHESTX.

  (5)-Added additional logic in diagnostic abend report
  processing to detect when an instruction address may be
  improperly aligned, the instruction length code for the
  instruction being processed is the wrong length, or the
  instruction address may be pointing at a halfword boundary in a
  data area with a starting byte that matches a valid op code but
  fails to conform to the designated instruction format, and is
  not an instruction. Changes were made to programs LGMHRTRY and
  LGMHRTRX.

  (6)-Added support for new CPU instructions introduced by the
  IBM zEnterprise 196 series of processors. Updated the Logger
  Services zArchitecture Machine Code Table with new instructions
  for the High-Word Facility, Interlocked-Access Facility,
  Load/Store-on-Condition Facility, Distinct-Operands Facility,
  Population-Count Facility, Floating-Point-Extension Facility,
  Message-Security Assist Extension 3, and Message-Security
  Assist Extension 4. Changes were made to programs LGMHRTRY and
  LGMHRTRX.

  (7)-Added support for the display of the 128-bit z/Architecture
  format Program Status Word (PSW) in diagnostic report when
  processing the abending program ESA/390 PSW at time of abend.
  Change was made to programs LGMHRTRY and LGMHRTRX.

  (8)-Added support for the display in the Logger Report of the
  CPU state, PSW key, and addressing mode in effect for each time
  the user's program performs program entry and program exit.
  Changes were made to copybook LGCPLOGR and program LGMHLRCE.

  (9)-Added support for the display of the CPU state, PSW key,
  Addressing Mode, Condition Code, and Address Space mode in
  diagnostic report when processing the abending program PSW at
  time of abend. Change was made to programs LGMHRTRY and
  LGMHRTRX.

  (10)Added support in the diagnostic abend report for the
  display of the Load Module name and the offset within the
  module where the last successful 'branch from' instruction
  occurred based on the contents of the Breaking Event Address
  (BEA) field in the System Diagnostic Work Area (SDWA). Changes
  were made to programs LGMHRTRY and LGMHRTRX.

  (11)Added the display of subpool storage number information to
  the section named 'Private Area Subpools Allocated' in the
  diagnostic abend report. Changes were made to programs LGMHRTRY
  and LGMHRTRX.

  (12)Moved capture of certain log point information from within
  the log point generated in a user program to Logger Services
  program LGMHLRCE. This was done in order to reduce the
  footprint for each log point in a user program by 8 bytes, and
  reduce the LCA prefix area for each user program RSECT by 16
  bytes. This was to help increase base register addressability
  that would be available to the user program by making each log
  point and LCA prefix in a user program slightly smaller.
  Changes were made to copybook LGCPLOGR and to program LGMHLRCE.

  (13)-Tested on z/OS V1R12.

  (14)-Updated $$DOC text file and $$DOCWRD Word file.


 CBT757  06 Mar 2010  V1R1M12 - Fix Pack 12
 ==========================================

  (1)-Fixed bug in date processing where the incorrect Gregorian
  date was being displayed in the Logger report printed to
  //LGRECOUT. When processing the binary STCKE TOD value, the
  wrong day of the year was calculated for odd numbered non-leap
  decade years (e.g., 1990, 2010) which resulted in Gregorian
  date displays being off by 1 day starting with March forward
  when printing the date entry and the day of week entry in the
  Logger report. Fix was to programs LGMHLRCI and LGMHLRCX.

  (2)-Fixed bug in diagnostic abend report where in certain
  instances the characteristics of the target instruction of an
  Execute instruction were not being displayed. If an abend
  should occur in an Assembler program using Logger Services,
  then abend recovery would be directed by program LGMHESTA to
  program LGMHRTRY to process a diagnostic report where the
  characteristics of both the Execute instruction and the valid
  target of the Execute are displayed. If a user program abended
  on an Execute instruction, and if in the user program the base
  register B2 used for the address of the target instruction to
  be executed by the EX instruction was a register number of 8 or
  greater, the target instruction would not be displayed in the
  report. When Logger Services abend report processing analyzed
  the EX instruction to determine the address of the target
  instruction, the contents of the B2 and D2 fields of the RX
  type instruction for the Execute were extracted with a halfword
  instruction where the B2 would be dropped so only the D2 value
  would remain for calculating the displacment. When the B2 value
  was 8 or greater the halfword instruction would internally
  expand the second operand by sign extension when placed into a
  work register, and the drop of the B2 was only partially
  clearing the register. This caused an invalid displacement
  value which when added to the base and index registers to
  determine the target instruction address resulted in a not
  found condition, and the attributes of the target instruction
  were not displayed. The correction was a one instruction fix to
  replace the algebraic LGH instruction with a LLGH instruction.
  Fix was to programs LGMHRTRY and LGMHRTRX.

  (3)-Fixed bug in diagnostic abend report where the included
  Register Summary Report was intermittently displaying some
  register addresses with an incorrect storage type. If an abend
  should occur in an Assembler program using Logger Services,
  then abend recovery would be directed by program LGMHESTA to
  program LGMHRTRY to process a diagnostic report displaying a
  Register Summary Report section. During abend report processing
  the value in a register was analyzed to determine if it
  contained an address pointing to an allocated in-use storage
  area or a free-space area. If a user program had fragmented
  storage, and if low private subpool space was allocated from
  the low end of the DQE for a partial page, and if space for
  another request was satisfied partially from the free space at
  the high end of the existing DQE, and if the original
  allocation request from the low end of the DQE was released,
  the register summary report analysis of the VSMLIST area was
  not properly calculating from the DQE/FQE the start of the
  remaining allocated in-use area. This caused the in-use area to
  be displayed in error as a free-space area, or would in error
  cause a not-found condition and incorrectly display a blank
  line when the address in a register actually pointed to a valid
  in-use allocated storage area. Fix was to programs LGMHRTRY and
  LGMHRTRX.

  (4)-Changed the sample program USERPGM2 where at program end an
  intentional abend was added to show an example of defined log
  points, and to show an example of the diagnostic abend report
  produced by Logger Services.

  (5)-Increased the default size of initial stacked LCA from 8K
  to 32K. Increases the number of subprograms which may be
  created within the user's program and still use the stacking
  LCA from the main program without having the subprograms incur
  the overhead of automatically obtaining and releasing their own
  storage to maintain re-entrant status. Change was made to
  copybook LGCPLOGR.

  (6)-Updated $$DOC text file and $$DOCWRD Word file.


 CBT757  06 Feb 2010  V1R1M11 - Fix Pack 11 - PTF 1
 ==================================================

  (1)-Minor cosmetic changes, additional comments, and spelling
  corrections.


 CBT757  23 Oct 2009  V1R1M11 - Fix Pack 11
 ==========================================

  (1)-LOGGRASM tested on z/OS V1R11.

  (2)-S0C4-11 abends occur in LGMHESTA program when z/OS V1R7. If
  an abend should occur in a user program using Logger Services,
  the LOGGRASM ESTAEX recovery routine LGMHESTA would be taken to
  intercept the abend. Abend recovery would then be directed by
  program LGMHESTA to either the retry program LGMHRTRY to
  process a diagnostic report before proceeding with percolation,
  or to the retry address supplied by Logger Services to recover
  fully from the abend. After the interception of the first user
  program abend a second S0C4-11 abend would occur in the
  LGMHESTA recovery routine before the SETRP could be invoked to
  direct processing to the retry routine LGMHRTRY for diagnostic
  processing and percolation. The AMODE64 recovery program
  LGMHESTA would use the LGES3000 routine in LGMHESTA for
  redirection to LGMHRTRY on a z/OS V1R7 system where the RTM
  Level was not all 64-Bit. Correction was to set the minimum
  level from z/OS V1R7 to z/OS V1R8 for using routine LGES3000
  which has a different recovery exit process. Fix was to
  programs LGMHESTA and LGMHESTX.

  (3)-Fixed bug in diagnostic abend report where register summary
  report was processing some register addresses to an incorrect
  load module name. When searching the load list representing a
  chain of Load List Elements (LLE) control blocks or when
  performing a secondary search of the Link Pack Area Queue, an
  improper test for presence of a minor CDE resulted in loading
  the address of a CDE from the CDXLMJP which was all zeros. Fix
  was to programs LGMHRTRY and LGMHRTRX.

  (4)-Fixed bug in diagnostic abend report where registers were
  not being correctly indentified in Register Summary report
  section for an EX instruction when the target instruction
  address pointed to a null area. Fix was to programs LGMHRTRY
  and LGMHRTRX.

  (5)-Fixed bug in Logger Services report where an odd numbered
  Csect entry offset value and return offset value were displayed
  when a new addressing mode change for Amode-64 branch entry
  into a program. This occurred with BASSM from a calling program
  when Bit 63 of general register R2 was set to one. If bit 63
  was set to one, then the branch address generated would be from
  the contents of the register, except with bit 63 of the
  register would be treated as a zero under the new 64-bit
  addressing mode change. Bit 63 of the general purpose register
  would remain unchanged and this bit may be one upon entry to
  the called program resulting in an odd numbered offset value
  being calculated from the contents of the register. The intent
  is the offset reported should be an actual positional value,
  and not serve double duty as an Amode 64 indictor which would
  result in turning a bug into a feature. Fix was to program
  LGMHLRCE.

  (6)-Added program LGMHPSTX as an amended copy of original
  program LGMHPSTG to support assembly on levels less than z/OS
  V1R10. The LGMGPTSX program is the same as the standard program
  LGMHSTPG except it uses hard coding of instruction masks and
  offsets not defined by equates and variable names which are
  available on higher level z/OS macros in order to prevent
  assembly errors on z/OS systems that are less than V1R10.
  Program LGMHLRCX was also updated with additional hardcodeed
  values where required.

  (7)Added new JCL member ASMLOGG2 which includes those LOGGRASM
  programs suffixed with an X to support assembly on systems
  less than z/OS level V1R10.

  (8)-Added to the private area storage display new detail lines
  showing the above-the-bar memory allocations for common memory
  objects with the introduction of IARV64 REQUEST=GETCOMMON
  starting with z/OS V1R10. Also added new detail line showing
  count of current large pages which was supported starting with
  z/OS V1R9 and z10. Change was made to programs LGMHPSTG and
  LGMHPSTX.

  (9)-Added to the General Purpose Register Summary report the
  abending instruction being analyzed. Any general purpose
  register used as a designated, index, base, or implied register
  in the abending instruction is identifed in the register
  summary report, but the specific instruction which was
  associated with the analysis was not shown. In any instance
  where the abend occurred on an Execute instruction, by design
  the registers identified in the report as being used in the
  abending instruction were for the target instruction of the
  Execute, not the Execute. Even though the target instruction is
  identified earlier in a different section of the overall
  report, there was some confusion as to which instruction was
  the subject of the Register Summary report section. The actual
  instruction mneumonic used in the Register Summary report is
  now displayed to make this more clear. Change was made to
  programs LGMHRTRY and LGMHRTRX.

  (10)-Updated $$DOC text file and $$DOCWRD Word file.


 CBT757  23 May 2009  V1R1M10 - Fix Pack 10
 ==========================================

  (1)-Fixed bug in build of search argument used for machine
  instruction table when the abending instruction format involved
  a contiguous 16-bit extended op code. Resulted in some valid
  instructions not being found when searching table based on
  instruction op code. Fix was to programs LGMHRTRY and LGMHRTRX.

  (2)-Fixed S0C4 in load module search routine. The high half of
  register was not cleared before loading register to check for
  last LLE in the Load List when searching the chain of Load List
  Element (LLE) control blocks. Fix was to programs LGMHLRCE,
  LGMHRTRY, and LGMHRTRX.

  (3)-Added support for new register analysis summary section in
  diagnostic abend report. Report process extracts register
  value, determines if the register value is within addressable
  range of a load module, and if so the module name and offset is
  displayed. If the register value is determined to be pointing
  to a storage area, the subpool number, storage key, the TCB
  associated with the storage, and the addressable range of the
  storage area starting from the address in the register is
  displayed. When no valid storage area, the hex value in the
  register is displayed as decimal number. Also, any general
  purpose register used as a designated, index, base, or implied
  register in the abending instruction is identifed in the
  register summary report. Changes were made to programs LGMHRTRY
  and LGMHRTRX.


 CBT757  10 Jan 2009  V1R1M09 - Fix Pack 9
 =========================================

  (1)-Fixed bug when user program specified the #LGPOINT entry.
  If a user in their Assembler source program interposed a log
  point between an instruction which sets the condition code and
  the conditional branch instruction which tests for the result,
  the condition code bits of the current PSW for the user's
  program were not preserved across the call to Logger Services.
  Fix was to copybook LGCPLOGR.

  (2)-Fixed bug in retry process when an abend in user's program
  where invalid register values were displayed in the Save Area
  trace. If a user program not using Logger Services called an
  Assembler program using Logger Services, and if the called user
  program with Logger Services abended, abend recovery would be
  directed by program LGMHESTA to retry program LGMHRTRY to
  process a diagnostic report showing the save area trace before
  proceeding with percolation. Upon parsing the caller provided
  save area of the program not using Logger Services which was
  calling the program with Logger Services, invalid register
  values were displayed when (a) a mix of various save area
  formats and (b) the user program using Logger Servies was not
  the JSTCB. This was due to a logic error when attempting to
  determine when the TCBFSA and the LCA First Save Area were
  being encountered when running the save area chain. Fix was to
  copybook LGCPLSWA and programs LGMHRTRY, LGMHRTRX, LGMHLRCI,
  LGMHLRCX, and LGMHLRCE.

  (3)-Added support for the display of the addressing mode of
  user program and the current value of the condition code at the
  time of abend when processing the abending program PSW. Changes
  were made to programs LGMHRTRY and LGMHRTRX.

  (4)-Added support for the display of the system completion code
  or user completion code and reason code when user program
  abends. On 0Cx abends a description of the PIC (Program
  Interrupt Code) is displayed to help identify an exception
  which occurred during user program execution. In addition, a
  list of common causes for the 0Cx abend is listed to further
  aid in diagnosis. Changes were made to programs LGMHRTRY and
  LGMHRTRX.

  (5)-Added support for the display of the machine instruction
  characteristics of the abending instruction when user program
  abends. A new machine instruction table is used to determine
  the abending instruction from the failing instruction address.
  At abend the characteristics of the abending instruction are
  displayed including the address of abending instruction, the
  abending instruction machine code, the instruction op code, the
  instruction mnemonic, the instruction mnemonic description, the
  instruction format, the instruction format type, the
  instruction attributes, and any dependence the instruction may
  have on extended facilities. In addition the characteristics of
  the target instruction of an abending execute instruction (EX,
  EXRL) are also displayed. Changes were made to programs
  LGMHRTRY and LGMHRTRX.

  (6)-Added support for the display of the module address and
  size when user program abends. The Module/Csect address and
  Module/Csect length of called programs are displayed when
  processing the trace of the save area chain. Changes were made
  to programs LGMHRTRY and LGMHRTRX.

  (7)-Updated $$DOC text file and $$DOCWRD Word file.


 CBT757  10 OCT 2008  V1R1M08 - Fix Pack 8
 =========================================

  (1)-Fixed bug in the DFA version displayed in the Logger
  Services environmental report. When running on z/OS V1R10 the
  DFSMS version display had garbage characters in the release
  field. Appears that when parsing IHADFA time had caught up with
  a shortcut of using an UNPK instruction on bytes 1-3 defining
  the DFA version, release, and modification levels when field
  DFARLSE rolled over to X'0A' with z/OS V1R10. Fix was to
  programs LGMHLRCI amd LGMHLRCX.

  (2)-Fixed bug when user program specified the WATCH= parm in a
  #LGPOINT entry. If a user specified a watch point to analyze a
  range of storage bytes for any changes while their program was
  executing and the storage area was all binary zeros, the watch
  point program would still indicate that a change had occurred
  to the storage area when no actual changed occurred. In
  addition, the hash algorithym was not producing sufficent
  uniform distribution to avoid some collisions. To fix this the
  mix boxes were revised, the hashing algorithym was changed, and
  the watch point token was expanded an additional 32 bits to
  produce a 128-bit output hash token value instead of the
  previous 96-bit token. Fix was to program LGMHWTCH.

  (3)-Fixed bug in calculating private-area storage use in the
  storage configuration display. If a user specified the
  PVTAREA=YES option on a #LGPOINT command coded in their source
  Assembler program to display private-area storage use, and if
  the user program after job step initiation issued an ATTACH
  macro resulting in the ATTACH routine creating a new TCB, and
  if a new subtask dynamically acquired or released its own
  storage through GETMAIN/FREEMAIN or STORAGE, the storage
  acquired or released by the non-terminated subtask was not
  being accounted for by Logger Services. This means when a
  #LGPOINT PVTAREA=YES command was encountered in the program
  path to analyze the SPQE, SPQA, DQE, and FQE control blocks and
  display a report while the user's Assembler program was
  executing, the storage owned by any new subtask(s) was not
  included. Fix was to add logic to run the TCB chain through the
  parse of the SPQE, SPQA, DQE's, and FQE's associated with the
  JSTCB and for each TCB found in the chain after the JSTCB, and
  not just the JSTCB. Fix was to program LGMHPSTG.

  (4)-Added support for the display of a new subpool summary
  report in the private-area storage analysis program LGMHPSTG.
  If a user now specifies the #LGPOINT PVTAREA=YES command in
  their program, in addition to the previous storage
  configuration display for below-the-bar and above-the-bar which
  was available, a new routine was added to analyze storage
  information to produce a subpool summary report which will show
  how all of the allocated and free space storage amounts in the
  private area below-the-bar are distributed among the various
  subpools. Allows user to see a more detailed report of their
  changing storage use for debugging while their Assembler
  program is executing. Changes were made to programs LGMHLRCE,
  LGMHPSTG, LGMHRTRY, LGMHRTRX, and copybook LGCPLSWA.

  (5)-Added support for the display of access registers in a Log
  Point. If a user specifies the REG= option on a #LGPOINT
  command coded in their source program to display the general
  purpose registers while their Assembler program is executing,
  any combination of the 16 32-bit access registers numbered 0-15
  will also be displayed corresponding with the same numbered
  64-bit general purpose registers requested by the user. Changes
  were made to program LGMHLRCE and copybook LGCPLSWA.

  (6)-Added support for the display of access registers at abend.
  Logger Services abend retry processing will now display from
  the SDWA the 16 32-bit access registers numbered 0-15 along
  with the general purposes registers when an abend in a user's
  Assembler program. Changes were made to programs LGMHRTRY and
  LGMHRTRX.

  (7)-Added support for the display of CPU model type, number of
  processors, MIPS, and MSU ratings in the Logger Services
  environmental report. Changes were made to programs LGMHLRCI
  and LGMHLRCX.

  (8)-Updated $$DOC text file and $$DOCWRD Word file.


 CBT757  24 May 2008  V1R1M07 - Fix Pack 7
 =========================================

  (1)-Complete rewrite of abend retry program to position for
  further expansion and inclusion of additional fixes. Change was
  made to programs LGMHRTRY and LGMHRTRX.

  (2)-Added support for display of mixed format save area trace
  during abend retry. Retry processing did not support a mix of
  save area formats in the save area chain, and would assume
  invalid chain pointers in the save area resulting in the
  diagnostic information for the immediatly preceding calling
  program or all programs to not be printed with the consequence
  of an incomplete display of the save area chain. Change was to
  Rsect DIAG0000 and the add of new Rsects DSWA000, DSTD0000 and
  DESX0000 to programs LGMHRTRY and LGMHRTRX.

  (3)-Added support for log record recovery during abend retry.
  If the user specified the LPGMNTRY entry with the LOGOUT=BUFR
  option to direct the buffering of Logger records to memory,
  there was no recovery of the Logger records which had
  accumulated in the buffer area, and the Logger records were not
  printed as part of the diagnostic report before allowing the
  abend to percolate. Change was add of new Rsect PBFR0000 to
  programs LGMHRTRY and LGMHRTRX.

  (4)-Added support for the display of private area storage
  allocations during abend retry. This change includes the build
  of new Rsect PSTO0000 which adds support for analyzing virtual
  storage allocations, and printing in the diagnostic report the
  virtual storage use of the user program's private area before
  allowing the abend to percolate. Change was to programs
  LGMHRTRY and LGMHRTRX.

  (5)-Added support for the display of data set allocations
  during abend retry. This change includes the build of new Rsect
  DSKA0000 which adds support for analyzing the data set
  allocations, and printing the DDname, EXCP count, data set
  name, data set disposition status, and volume serial for all
  data sets allocated in the user's job before allowing the abend
  to percolate. Change was to programs LGMHRTRY and LGMHRTRX.

  (6)-Fixed bug in close processing during abend retry. During
  cleanup processing the DCB address for CLOSE was not being
  updated when searching for Data Control Blocks in the TCB DEB
  chain for open data sets. Fix was to the abend cleanup routine
  CLNU0000 in programs LGMHRTRY and LGMHRTRX.

  (7)-Fixed bug in WTO error message processing. Corrected return
  and reason codes displayed to be consistent with the format
  documented in IBM reference manuals for hex or decimal
  representation. Added new message LGA01109A indicating when an
  error in obtaining work area storage, and added new message
  LGA01108A to indicate when an error in establishing recovery
  environment. Renumbered old message LGA01108I to new number
  LGA01110I in program LGMHLRCT, and renumbered old messages
  LGA01109A through LGA01112A to new numbers LGA01111A through
  LGA01114A in program LGMHLRCB. Fix code was to programs
  LGMHLRCI and LGMHLRCX.

  (8)-Updated $$DOC text file and $$DOCWRD Word file. Added new
  section documenting Logger Services messages LGA01101A through
  LGA01114A, and added a new secion on basic problem solving.


 CBT757  23 Feb 2008  V1R1M06 - Fix Pack 6
 =========================================

  (1)-S0C4-11 abends occur in LGMHESTA program on z/OS V1R9. If
  an abend should occur in a user program using Logger Services,
  the LOGGRASM ESTAEX recovery routine LGMHESTA would be taken to
  intercept the abend. Abend recovery would then be directed by
  program LGMHESTA to either the retry program LGMHRTRY to
  process a diagnostic report before proceeding with percolation,
  or to the retry address supplied by Logger Services to recover
  fully from the abend. However, on z/OS V1R9 the AMODE64
  recovery program LGMHESTA abends with a S0C4 when it attempts
  to save the 64-bit entry registers with a store multiple grande
  (STMG) instruction to only a 72-byte save area when LGMHESTA
  expected a 144-byte save area to be supplied in R13 by the
  Recovery Termination Manager (RTM). After the interception of
  the first abend a second S0C4-11 abend would occur in the
  LGMHESTA recovery routine before the SETRP could be invoked to
  direct processing to either the retry routine LGMHRTRY for
  diagnostic processing and percolation, or to the retry address
  supplied by Logger Services for recovery. In the second
  instance if there were an abend in Logger Services it would
  preclude Logger Services from recovering, and prevent the user
  program from proceeding to normal completion. There are no
  component fixes to LOGGRASM. To correct this S0C4 abend, you
  need to apply the following IBM APAR to your z/OS V1R9 system:

    OA23937 - RTM FAILS TO PROVIDE A 144 BYTE SAVE AREA AT
              HBB7740

  (2)-Fixed bug when specifying LOGOUT=BUFR option. If a user
  specified the LPGMNTRY entry with LOGOUT=BUFR to direct the
  buffering of Logger records, and the user set the region size
  to 0M not subject to an IEFUSI, and if a sufficiently large
  private area allowed a volume of more than 8 million Logger
  records to accumulate in the above-the-line memory buffers,
  this would fill the Logger primary index block for the record
  buffers causing the LGA01109A block overrun WTO message to be
  issued. However, on subsequent requests to insert Logger
  records this message was not being suppressed leading to a
  severe WTO Buffer shortage from LGA01109A messages. Problem was
  due to a return code field being overlaid, and a return code
  not being set high enough for the severity of the overrun
  condition resulting in a bit flag not being set. Fix was
  increasing the return code severity for this condition from an
  8 to a 12, and preserving the return code in a storage field
  for later return to calling program LGMHLRCE to set the overrun
  bit flag, and then clearing the return code to ensure it is not
  propagated back to impact the user program. This will allow the
  user program to proceed to normal completion without further
  messages producing a truncated Logger report. Fixed component
  was program LGMHLRCB.

  (3)-Fixed bug when specifying LOGTRIM option. If a user
  specified the LPGMNTRY entry with LOGTRIM=YES, the initial
  flower box header lines were still being printed instead of
  being suppressed in the output Logger report. Fixed components
  were programs LGMHLRCI and LGMHLRCX.

  (4)-Added job step CPU time used information when requesting
  PVTAREA=YES, and added job step CPU time used information to end
  of Logger report. Change was was made to programs LGMHPSTG and
  LGMHLRCT.

  (5)-Added job start date and time information to environmental
  section of Logger report to display day of week, Gregorian
  calendar date, and time of day upon start of program execution.
  Change was made to programs LGMHLRCI and LGMGLRCX.

  (6)-Added GMT local time zone offset information when
  processing environmental section of Logger report to display
  number of hours local time is East or West of GMT. Change was
  made to programs LGMHLRCI and LGMGLRCX.

  (7)-Moved environmental report processing showing z/OS system
  information to a separate Rsect to position for further
  expansion. Change was made to programs LGMHLRCI and LGMGLRCX.

  (8)-Updated $$DOC file and $$DOCWRD file.


 CBT757  12 Jan 2008  V1R1M05 - Fix Pack 5
 =========================================

  (1)-Fixed date processing error where on leap years the
  incorrect ordinal date was being displayed in the Logger report
  printed to //LGRECOUT. When processing the binary STCKE TOD
  value, the wrong day of year was calculated at the end of year
  when going into a new leap year which resulted in only
  leap-year date displays being off by 1 day when printing the
  date/time-stamp entry on the right hand side of the Logger
  report. Fixed components were programs LGMHLRCE and LGMHLRCT.

  (2)-Fixed bug when specifying addressing mode. If a user
  specified the LPGMNTRY entry with AMOD=31 or AMOD=64 and did
  not specify the RMOD= keyword, the residence mode of the
  program would be correctly set to the intended default of RMODE
  31. However, if a user specified the LPGMNTRY entry with
  AMOD=31 or AMOD=64 and explicitly specified the RMOD= keyword
  without including any of the parameter values (e.g.,
  AMOD=64,RMOD=,), the residence mode for the program would be
  set to RMODE 24 instead of the intended default of RMODE 31.
  Fix was to copybook LGCPLOGR for only the RMOD= parameter. In
  addition documentation was improved with a more detailed
  description of command syntax and default processing. For
  default processing there is a requirement to either take the
  default by omitting the parameter or explictly code the
  parameter with a valid value to override it.

  (3)-Added z/OS and JES version information when processing
  environmental report to display version, FMID, product level,
  and service level. Change was made to programs LGMHLRCI and
  LGMGLRCX.

  (4)-Updated $$DOC file.

  (5)-Added new file $$DOCWD as a Microsoft Word version of the
  $$DOC EBCDIC text file. It is a LOGGRASM user's reference, and
  contains some screen shots , graphical illustrations, and
  additional information not available in the $$DOC text file.


 CBT757  04 Nov 2007  V1R1M04 - Fix Pack 4
 =========================================

  (1)-Fixed S0C4-38 abend when a user program is in 64-bit
  addressing mode, and upon exiting the user program left
  residual data in the high-half of R14. Upon user program exit
  the high-half of 64-bit register R14 was not being cleared by
  LOGGRASM when calculating the LCA end pointer address to ensure
  a user program did not overlay their LCA RENT area for the
  current RSECT. Fix was to LPGMEXIT in copybook LGCPLOGR.

  (2)-Fixed S0C4-11 abend in recovery process when an abend in a
  user program. If an abend should occur in a user program using
  Logger Services, and if the JCL did not include a //LGRECOUT DD
  which is allowed, abend recovery would be directed by program
  LGMHESTA to program LGMHRTRY to process a summary report to a
  //SYSPRINT DD if it was available before proceeding with
  percolation. LGMHRTRY would parse the TIOT chain which would
  result in a secondary S0C4 abend in LGMHRTRY due to an RX
  format instruction was used instead of an RR format which
  placed an invalid address in a register. Fix was to subroutine
  PRPT0000 in programs LGMHRTRY and LGMHRTRX.

  (3)-Fixed hang condition in recovery process when an abend in a
  user program. If a subordinate Assembler program RSECT using
  Logger Services (e.g., LPGMNTRY TYPE=SUB) was called from
  another Assembler program RSECT also using Logger Services, and
  if the called user program then called another program not
  using Logger Services, and if the called program not using
  Logger Services abended, a loop would occur preventing normal
  percolation of the abend in the user's program. Abend recovery
  would be directed by program LGMHESTA to program LGMHRTRY to
  process a diagnostic report showing the abending load module
  name before proceeding with percolation. LGMHRTRY would
  continuously loop attempting to determine the abending load
  module name when processing the Logger Services LCA save area
  chain due to an incorrect register being loaded. Fix results in
  exit from the loop when a not-found condition in the LCA, and
  allows recovery processing to proceed with searching the JPAQ
  and LPA to resolve the address at abend to a load module name.
  Fix was to subroutine LNME0000 in programs LGMHRTRY and
  LGMHRTRX.

  (4)-Fixed bug in recovery process when an abend in user's
  program. If an abend should occur in an Assembler program using
  Logger Services, abend recovery would be directed by program
  LGMHESTA to program LGMHRTRY to process a diagnostic report
  showing the original system completion code and the original
  reason code before proceeding with percolation. Logger Services
  abend recovery was not passing this information to the ABEND
  macro resulting in the IEF450I message not displaying the
  system completion code and reason code that existed when the
  system gave control to the Logger recovery routine. Fix was to
  programs LGMHRTRY and LGMHRTRX.

  (5)-Fixed bug when using multiple 'SHOW=' or 'WATCH=' entries.
  If more than one entry was specified using the 'SHOW=' or
  'WATCH=' parameter within a single #LGPOINT, and if the first
  'SHOW=' or 'WATCH=' entry in the list of entries for a #LGPOINT
  used register notation for the length of the storage area, and
  if the next 'SHOW=' or 'WATCH=' entry in the list was the same
  type as the previous one (i.e., back to back SHOW=), and if
  that next 'SHOW=' or 'WATCH=' concatenated entry used
  non-register notation for the storage area length, a flag byte
  was not being properly set during the build of the Logpoint.
  This would result in the contents of a storage area not being
  printed when the following concatenated list entry defined a
  storage length using an equated value or a hard coded numeric
  expression. Fix was to #LGPOINT in copybook LGCPLOGR.

  (6)-Fixed incorrect length attribute on Job Number Entry Field
  used in the Logger Services environmental report. Fix was to
  programs LGMHLRCI and LGMHLRCX.

  (7)-Fixed bug when user program specified the PVTAREA=YES parm
  in a #LGPOINT entry. When printing the private area map, a
  storage work area was not being entirely cleared to blanks
  leaving garbage characters in output. A test was added to
  detect when a padding operation for a storage area was only
  partially completed because a CPU-determined number of bytes
  had been moved without reaching the end of the target storage
  area. Fix was to program LGMHPSTG.

  (8)-Added new Assembler source program examples USERPGM4,
  USERPGM5, USERPGM6, and added sample JCL USERJOB4. Shows an
  example of how to use LOGGRASM to break out the three RSECTS
  defined in sample program USERPGM2 and place them in different
  members where three groups in a class can work on their
  separate piece, and then have to bring them together into one
  workable load module at link-edit and run time.

  (9)-Updated $$DOC file.


 CBT757  01 Jul 2007  V1R1M03 - Fix Pack 3
 =========================================

  (1)Fixed S0C9 abend in LGMHLRCE program. If an abend should
  occur in the user program, the LOGGRASM ESTAEX retry routine
  LGMHESTA would be taken to intercept the abend. Abend recovery
  would then be directed by program LGMHESTA to program LGMHRTRY
  to process a diagnostic report before proceeding with
  percolation. LGMHRTRY would then call LGMHLRCE to show selected
  storage areas at time of abend. This would result in a
  secondary S0C9 abend in LGMHLRCE due to a logic error from a
  bit not being properly set to correctly direct recovery
  processing. Fix components changed are LGCPLOGR copybook and
  program LGMHLRCE.

  (2)Fixed bug in LGCPLOGR copybook to correct a LPGMSUBE
  processing error. Logger was reporting an incorrect subroutine
  entry point address which was off by two bytes. Changed
  LPGMSUBE to account for added halfword length in 64-bit grande
  instruction.

  (3)Updated sample Assembler program USERPGM3 and JCL for USERJOB3.

  (4)Updated the $$DOC text file.


 CBT757  10 Jun 2007  V1R1M02 - Fix Pack 2
 =========================================

  (1)Fixed bug in LGCPLOGR copybook to correct a LPGMEXIT
  processing error. Changed LPGMEXIT to test for program type and
  use proper 64-bit grande instruction to conform to current save
  area format in use during program exit from called program.
  Corrects program exit errors when using the LPGMEXIT entry with
  RC= parm and with LPGMNTRY=SUB.

  (2)Added new sample assembler program USERPGM3 for 64-bit, and
  added new sample JCL USERJOB3.

  (3)Updated the $$DOC text file.


 CBT757  12 May 2007  V1R1M01 - Fix Pack 1
 =========================================

  (1)Added LOGTRIM= option to trim log record output by
  suppressing card ruler header, environmental report, and
  time/stamp suffix area. May be useful in reducing noise due to
  timestamp differences when comparing two different logs through
  compare utility. Changes to LGCPLOGR, LGMHLRCI, LGMHLRCT, and
  LGMHLRCE.

  (2)Corrected $$DOC to change file references to conform to CBT
  Tape naming conventions. Updated $$DOC to document LOGTRIM=
  option. Updated $$DOC with added information on parameter use.

  (3)Minor cosmetic changes to log output.

  (4)Added new file $$FIXPAC to log changes and fixes.


 CBT757  20 Apr 2007  V1R1M00
 ============================

  First Release at V1.R1.M00

