         TITLE 'IFMTLJST - LEFT JUSTIFY DATA IN FIELD'
* ******************************************************************* *
*                                                                     *
*    IIII   FFFFFFF M     M TTTTTTTT LL           JJ  SSSSS TTTTTTTT  *
*     II    FF      MM   MM    TT    LL           JJ SS   SS   TT     *
*     II    FF      MMM MMM    TT    LL           JJ SS        TT     *
*     II    FFFFF   MMMMMMM    TT    LL           JJ  SSSSS    TT     *
*     II    FF      MM M MM    TT    LL           JJ      SS   TT     *
*     II    FF      MM   MM    TT    LL      JJ   JJ SS   SS   TT     *
*     II    FF      MM   MM    TT    LL      JJ   JJ SS   SS   TT     *
*    IIII   FF      MM   MM    TT    LLLLLLL  JJJJJ   SSSSS    TT     *
*                                                                     *
* ******************************************************************* *
* THIS SUBROUTINE LEFT JUSTIFIES THE DATA IN AN INPUT FIELD (DISPLAY  *
* FORMAT) BY LOCATING THE FIRST NON-BLANK CHARACTER AND THEN MOVING   *
* THE CONTENTS OF THE FIELD FROM THAT POSITION TO THE END OF THE      *
* FIELD INTO THE LEFT-MOST BYT OF THE FIELD. THE REMAINDER OF THE     *
* FIELD IS THEN FILLED WITH BLANKS.                                   *
*                                                                     *
* NONE OF THE INITIALIZED VARIABLES ARE CHANGED DURING THE ROUTINE'S  *
* EXECUTION AND THERE ARE NO INTERNAL DATA FIELDS. ALL MANIPULATION   *
* IS DONE THROUGH REGISTERS. THE ROUTINE IS COMPLETELY REENTRANT.     *
*                                                                     *
* TWO FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:                 *
*                                                                     *
*   1. A FIELD OF VARYING LENGTH CONTAINING THE INPUT DATA, AND       *
*   2. A 2 BYTE FIELD (IN BINARY FORMAT) CONTAINING THE LENGTH OF     *
*      THE FIRST FIELD PASSED.                                        *
*                                                                     *
* SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                           *
*                                                                     *
*              CALL IFMTLJST,(INFIELD,INLENGTH)                       *
*                 . . .                                               *
*     INFIELD  DS   CL12'   128.25   '                                *
*     INLENGTH DS   H'12'                                             *
*                                                                     *
* SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                         *
*                                                                     *
*     01  INPUT-FIELD           PIC X(12) VALUE '   128.25   '.       *
*     01  INPUT-FIELD-LENGTH    PIC S9(4) COMP VALUE 12.              *
*                                                                     *
*     CALL 'IFMTLJST' USING INPUT FIELD, INPUT-FIELD-LENGTH.          *
*                                                                     *
* POSSIBLE RETURN CODE VALUES:                                        *
*     0 - FIELD SUCCESSFULLY LEFT-JUSTIFIED                           *
* ******************************************************************* *
* ******************************************************************* *
         EJECT
         PRINT NOGEN
IFMTLJST CSECT
         EYEC  'LEFT JUSTIFY DATA IN INPUT FIELD'
BEGIN    SAVE  (14,12)                 SAVE CALLER'S REGISTERS
*
         BALR  BASE,0                  ESTABLISH BASE REGISTER
         USING *,BASE                  ASSUME BASE REGISTER
*
         LM    INREG,LGTHREG,0(R1)     LOAD ADDRESSES OF PARAMETERS
*
         LH    LGTHREG,0(,LGTHREG)     GET LENGTH OF INPUT FIELD
         LTR   LGTHREG,LGTHREG         IS FIELD LENGTH ZERO?
         BZ    RETURN                    IF YES, RETURN TO CALLER
*
         CLI   0(INREG),C' '           IS FIRST CHARACTER BLANK
         BNE   RETURN                    IF NOT, RETURN TO CALLER
*
         LR    R7,LGTHREG              LENGTH OF FIELD
         BCTR  R7,0                    DECREASE BY 1 FOR EXECUTE
         EX    R7,FINDNB               FIND FIRST NON-BLANK
         BC    0,RETURN                  IF ALL BLANKS, RETURN
*
*    COMPUTE LENGTH OF DATA TO MOVE LEFT
*
         AR    R7,INREG                ADD BEGINNING OF FIELD ADDRESS
         SR    R7,R1                   SUBTRACT 1ST NON-BLANK ADDRESS
         EX    R7,VARMOVE              MOVE NON-BLANK CONTENTS LEFT
         LA    R7,1(,R7)               RESTORE ACTUAL LENGTH OF DATA
*
*    COMPUTE ADDRESS TO BEGIN BLANK FILLING REMAINDER OF FIELD
*
         LR    R8,INREG                BEGINNING OF FIELD ADDRESS
         AR    R8,R7                   ADD SIGNIFICANT CHARACTERS
         MVI   0(R8),C' '              MOVE FIRST BLANK
*
*    COMPUTE NUMBER OF BLANKS TO BE INSERTED
*
         LR    R9,LGTHREG              LENGTH OF INPUT FIELD
         SR    R9,R7                   SUBTRACT SIGNIFICANT CHARACTERS
         BCTR  R9,0                    DECREASE BY THE FIRST BLANK
         LTR   R9,R9                   CHECK FOR ZERO LENGTH
         BZ    RETURN                     IF ZERO, JUST RETURN
         BCTR  R9,0                    DECREASE BY 1 FOR EXECUTE
         EX    R9,BLANKS               MOVE BLANKS TO FILL FIELD
*
*    RETURN TO CALLER WITH RETURN CODE (0) IN REGISTER 15
*
RETURN   RETURN (14,12),RC=0
*
*    TRT PERFORMED VIA EXECUTE FROM ABOVE TO FIND 1ST NON-BLANK
*
FINDNB   TRT   0(0,INREG),TRTABLE       SCAN FOR NON-BLANK CHARACTERS
*
*    MVC PERFORMED VIA EXECUTE FROM ABOVE TO MOVE DATA LEFT IN FIELD
*
VARMOVE  MVC   0(0,INREG),0(R1)         MOVE NON-BLANK PORTION LEFT
*
*    MVC PERFORMED VIA EXECUTE FROM ABOVE TO BLANK REMAINDER OF FIELD
*
BLANKS   MVC   1(0,R8),0(R8)            BLANK REMAINDER OF FIELD
*
* ******************************************************************* *
* *************************** CONSTANTS ***************************** *
* ******************************************************************* *
TRTABLE  DC    64X'01'                 TABLE TO FIND NON-BLANK
         DC    X'00'
         DC    191X'01'
         LTORG
         EJECT
* ******************************************************************* *
* ***************************** EQUATES ***************************** *
* ******************************************************************* *
R0       EQU   0                       REGISTER 0
R1       EQU   1                       REGISTER 1
R2       EQU   2                       REGISTER 2
R3       EQU   3                       REGISTER 3
R4       EQU   4                       REGISTER 4
INREG    EQU   5                       INPUT FIELD
LGTHREG  EQU   6                       INPUT FIELD LENGTH
R7       EQU   7                       REGISTER 7
R8       EQU   8                       REGISTER 8
R9       EQU   9                       REGISTER 9
R10      EQU   10                      REGISTER 10
R11      EQU   11                      REGISTER 11
BASE     EQU   12                      BASE REGISTER
R13      EQU   13                      REGISTER 13
R14      EQU   14                      REGISTER 14
R15      EQU   15                      REGISTER 15
         END
