{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012706000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE737.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE737.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x04'", "DS1TRBAL": "b'\\xcc\\xee'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x07\\x00\\t\\x05\\x08\\x00\\x01\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x06\\x02\\x7f\\x01\\x06\\x02\\x7f\\tS\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2006-01-27T00:00:00", "modifydate": "2006-01-27T09:53:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-471"}, "text": "REGULAR CBT TAPE - VERSION 471    FILE:  737\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT471.FILE737\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 15 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,976 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/27/06    09:53:26    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x11\\x01\\x06\\x02\\x7f\\x01\\x06\\x02\\x7f\\tS\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2006-01-27T00:00:00", "modifydate": "2006-01-27T09:53:11", "lines": 22, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:   Package - Clear D/R DASD after the exercise\nFrom   :   Bob.Glover@fnf.com\nDate   :   27 Jan 2006  09:05:22 -0500\nTo     :   sbgolob@cbttape.org\n\n\nSam - Attached is a file containing 12 source members.  It\nmay take a few tries but it works fine for us.\n\nIt is based upon our experiences using SUNGARD.  Users at IBM\nrecovery centers will have to make a few minor changes.\n\nThe end goal of this package is to clear all D/R volumes to low\nvalues AFTER the excercise is complete.\n\nFinally, 3390 MOD-54 support is not in the package.  We will\nupdate the package for their support as soon as we order them.\nIt curently supports 3390 MOD-3,9,L(27).\n\nRegards,  Bob\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOCINFO": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00U\\x01\\x05\\x13\\x1f\\x01\\x06\\x02\\x7f\\x08B\\x00Y\\x00H\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2005-05-11T00:00:00", "modifydate": "2006-01-27T08:42:55", "lines": 89, "newlines": 72, "modlines": 0, "user": "TS0710"}, "text": "                           BACKGROUND\n\nThis package supports the following DASD types at SUNGARD:\n\n  3390 Mod-3\n  3390 Mod-9\n  3390 Mod-L\n\nA seldom used RACF feature is the \"ERASE on SCRATCH\". When RACF is set\nup correctly, it will write lo-vals on every track of its target data\nset when its scratched. DRCLEAR is a REXX that creates two sets of jobs\nthat affect every UCB in the D/R excercise. These jobs are submitted by\nthe technician after he has cleared off the VTOCS. The first set of jobs\ncreate dummy datasets on all the UCBs and the second set does the\nscratching.\nIn a typical D/R this procedure cleared to lo-vals in App 1 hour the\nfollowing:  121 MOD-3, 121 MOD-9, 126 MOD-L\n\n                           STEPS TO INSTALL\n\n1. Copy all members to a SOURCE PDS dataset.\n2. NOTE: Its easier to keep all members (except the LMOD) in the SAME\n   ----  dataset. We keep it in our DISASTER INSTLIB.\n3. Assemble pgm DRSPACE using member ASMSPACE. Output loadlib must be\n   catalogued AND accessible to the D/R floor system, usually in LNKLST.\n4. Copy REXXs DRCLEAR & DRICK to a your D/R instlib.\n5. Copy member ICKIN to your D/R instlib, you must edit the JOB card.\n6. Copy members MODLALLC & MODLSCRT to your D/R instlib.\n   Do not change anything in them unless you intend to alter DRCLEAR.\n7. Copy the POOL members to the D/R library.\n8. CHANGE REXXs DRCLEAR & DRICK : find\n                CDRSDS ='DISASTER.MVS.'Sysname'.INSTLIB'\n   and change it to your disaster instlib name. Both REXXs assume that\n   your SYSID is part of its name, If you don't wish to adhere to this\n   you can change the REXXs.\n9. CHANGE REXX DRCLEAR  : find routine \"READMODL\" and change 2 JOB cards\n   to your standards.\n\n\n                 STEPS FOR PROCESSING AT YOUR SITE (TESTING)\n\n1. Populate the POOL members with the D/R UCBs. POOL3 for 3390-3, etc.\n2. To test at your site  prior to the excerise you must prep the RACF\n   environment:\n    (\"ERASE-ON-SCRATCH\") :\n    For this process to work, SETROPTS ERASE(NOSECLEVEL) must be set.\n    In addition, the rule IBMUSER.DR*.*  (see DSNAME in the MODELS)\n    must be created for the above setting with the \"ERASE ON DELETE\"\n    option turned on - where dsname HLQ is IBMUSER. IBMUSER is the ONLY\n    HLQ at SUNGARD that is previously set to accomplish our task.\n3. To execute :\n   > \"TSO ALTLIB ACT APPL(EXEC) DAT('--YOUR D/R INSTLIB--')\n   > \"TSO DRICK\"- This generates VTOC clearing ICKDSF JCL for all the\n      UCBs found in the POOL members and saves them in member ICKOUT.\n   > View member ICKOUT, created by DRICK. This wipes out\n     all VTOC info. It MUST run prior to DRCLEAR since DRCLEAR\n     assumes an empty VTOC.\n\n      TEST PHASE\n\n   > Make sure LMOD DRSPACE is accessible\n   > Pick a few sacrificial UCB's to test with, THEY WILL BE CLEARED !\n   > Populate the POOL members with test UCBs\n   > Run the ICKDSF clears : REXX DRICK produces member ICKOUT. Submit\n     ICKOUT.\n   > \"TSO ALTLIB ACT APPL(EXEC) DAT('--YOUR D/R INSTLIB--')\"\n   > \"TSO DRCLEAR\"\n   > enter your SYSID when prompted\n   > enter 'TEST' instead of 'PROD' until you get a clean run\n   > enter total no. initiators you will provide\n   > REXX runs & produces rpt -NO ALLOC/SCRATCH members created IN 'TEST'\n\n      PROD PHASE\n\n   > Same as above but answer w/ 'PROD'\n   > Once 'PROD' is used the REXX creates the 2 JCL members per device\n     type. It supports 3 types (3390-3, 3390-9, 3390-L). The members\n     are named ALLOCx & SCRATx where x=3 or 9 or L. There are multiple\n     JOBS in each member.\n   > REXX runs & produces rpt\n   > Submit all ALLOCx members to define dummy datasets on all POOL UCBs\n   > Submit all SCRATx members to delete/erase the dummy datasets\n   > The more inits used, the faster the process goes\n\n                           STEPS FOR PROCESSING AT D/R\n\n1. Populate POOL members with SUNGARD UCB ranges\n2. The RACF environment is already set correctly for HLQ IBMUSER\n3. Repeat the same steps as in the 'TEST & PROD' phases above\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DOCMEM": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x05\\x13\\x1f\\x01\\x05\\x13\\x1f\\x13\\x19\\x00\\x0e\\x00\\x0c\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-05-11T00:00:00", "modifydate": "2005-05-11T13:19:06", "lines": 14, "newlines": 12, "modlines": 0, "user": "TS0710"}, "text": "                               CONTENTS\n\n$DOCINFO - Background DRCLEAR info\n$DOCMEM  - List of all DATASETS MEMBERS\nASMSPACE - JCL to ASMLK DRSPACE\nDRCLEAR  - Main REXX\nDRICK    - REXX to generate member ICKOUT\nDRSPACE  - Pgm DRSPACE Source\nICKIN    - ICKDSF MODEL JCL\nMODLALLC - Dataset allocation model stmnt\nMODLSCRT - Dataset scratch model stmnt\nPOOLL    - 3390-L UCB ranges\nPOOL3    - 3390-3 UCB ranges\nPOOL9    - 3390-9 UCB ranges\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE737": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x06\\x02\\x7f\\x01\\x06\\x02\\x7f\\tS\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2006-01-27T00:00:00", "modifydate": "2006-01-27T09:53:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "CBT-471"}, "text": "//***FILE 737 is from Bob Glover and contains a package to be able  *   FILE 737\n//*           to clear DASD, in bulk, to low-values after a D/R     *   FILE 737\n//*           test.                                                 *   FILE 737\n//*                                                                 *   FILE 737\n//*           email:  Bob.Glover@fnf.com                            *   FILE 737\n//*                                                                 *   FILE 737\n//*                       BACKGROUND                                *   FILE 737\n//*                                                                 *   FILE 737\n//*     This package supports the following DASD types at           *   FILE 737\n//*     SUNGARD:                                                    *   FILE 737\n//*                                                                 *   FILE 737\n//*       3390 Mod-3                                                *   FILE 737\n//*       3390 Mod-9                                                *   FILE 737\n//*       3390 Mod-L                                                *   FILE 737\n//*                                                                 *   FILE 737\n//*     A seldom used RACF feature is the \"ERASE on SCRATCH\".       *   FILE 737\n//*     When RACF is set up correctly, it will write lo-vals on     *   FILE 737\n//*     every track of its target data set when its scratched.      *   FILE 737\n//*     DRCLEAR is a REXX that creates two sets of jobs that        *   FILE 737\n//*     affect every UCB in the D/R exercise. These jobs are        *   FILE 737\n//*     submitted by the technician after he has cleared off        *   FILE 737\n//*     the VTOCS. The first set of jobs create dummy datasets      *   FILE 737\n//*     on all the UCBs and the second set does the scratching.     *   FILE 737\n//*                                                                 *   FILE 737\n//*     In a typical D/R this procedure cleared to lo-vals in       *   FILE 737\n//*     approximately 1 hour the following:  121 MOD-3, 121         *   FILE 737\n//*     MOD-9, 126 MOD-L                                            *   FILE 737\n//*                                                                 *   FILE 737\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMSPACE": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00'\\x01\\x04%\\x1f\\x01\\x06\\x02\\x7f\\x08&\\x002\\x002\\x00\\x04\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-09-07T00:00:00", "modifydate": "2006-01-27T08:26:27", "lines": 50, "newlines": 50, "modlines": 4, "user": "TS0710"}, "text": "//---- YOUR JOB CARD HERE ----\n//*\n//* ASMLK PGM W/OUT SMPE (NAME=DRSPACE)\n//*\n//* ASSEMBLE AND LINK USING PDS INPUT\n//ASMLK  PROC  AREGION=2M,\n//             LREGION=2M,\n//             UNIT='SYSDA',\n//             CLASS='*',\n//             SYSLIB1='SYS1.MACLIB',\n//             SYSLIB2='SYS1.MODGEN',\n//             SYSLIB3='SYS1.MODGEN',\n//             SRCLIB=TEMPNAME,\n//             LODLIB=TEMPNAME,\n//             RENT='NO',\n//             SRCMOD='TEMPNAME',\n//             LODMOD='TEMPNAME'\n//*\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT,&RENT.RENT',\n//             REGION=&AREGION\n//SYSLIB   DD  DSN=&SYSLIB1.,DISP=SHR\n//         DD  DSN=&SYSLIB2.,DISP=SHR\n//         DD  DSN=&SYSLIB3.,DISP=SHR\n//SYSIN    DD  DSN=&SRCLIB.(&SRCMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=(&UNIT.,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD SYSOUT=&CLASS.,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//*\n//LNK  EXEC  PGM=IEWL,\n//  PARM='MAP,LET,LIST,NCAL,&RENT.RENT,AMODE=24,RMODE=24',\n//             REGION=&LREGION.,COND=(4,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LODLIB.(&LODMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=&UNIT.,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=&CLASS.,DCB=(RECFM=FB,BLKSIZE=3509)\n// PEND\n//*\n//STEP1 EXEC ASMLK,CLASS='*',\n//           RENT='NO',   /* ''=RENT, 'NO'=NON-RENT */\n//           SRCLIB='--- YOUR SOURCELIB -------',    < -- SOURCE LIB\n//           LODLIB='--- YOUR LOADLIB ---------',    < -- TARGET LL\n//           SRCMOD=DRSPACE,\n//           LODMOD=DRSPACE\n//*-------------------------------------\n//LNK.SYSIN  DD *\n  NAME DRSPACE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DRCLEAR": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00$\\x01\\x025\\x1f\\x01\\x05\\x13\\x8f\\x13\\x16\\x07\\\\\\x05\\xb3\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2002-12-17T00:00:00", "modifydate": "2005-05-18T13:16:24", "lines": 1884, "newlines": 1459, "modlines": 0, "user": "TS0710"}, "text": "/* REXX */\n/*-------------------------------------------------------------------*/\n/* DRCLEAR  > REXX used to create JCL that clears DASD at POST-DR.   */\n/*            OBJECTIVE - write lo-vals on all D/R DASD vols         */\n/*          > REXX creates 2 jobs for each 3390 type - ALLOC & SCRAT */\n/*          > CALLS PROGRAM DRSPACE to obtain DASD information.      */\n/*                                                                   */\n/*  V3      : Base calcs on #OPS instead of #devices        05/13/05 */\n/*  V2      : Automatically calcs the #JOBS per INITIATOR   08/23/04 */\n/*  V1      : INITIAL REXX                                  07/27/04 */\n/*-------------------------------------------------------------------*/\n/*         |********* K E Y  V A L U E S - START *********|          */\n#A3INITS = 10                        /* ALLOC MOD-3 JES2 inits avail */\n#A9INITS = 10    /* A L L O C */     /* ALLOC MOD-9 JES2 inits avail */\n#ALINITS = 10                        /* ALLOC MOD-L JES2 inits avail */\n/*-------------------------------------------------------------------*/\n#S3INITS = ??                        /* SCRAT MOD-3 JES2 inits avail */\n#S9INITS = ??   /* S C R A T C H */  /* SCRAT MOD-9 JES2 inits avail */\n#SLINITS = ??                        /* SCRAT MOD-L JES2 inits avail */\n/*         |********* K E Y  V A L U E S - END   *********|          */\n/*-------------------------------------------------------------------*/\n/*  Both files are written to the DR INSTLIB as members named :      */\n/*     ALLOCX & SCRATX where \"X\" = mod type (3,9,L).                 */\n/*  1. ALLOCX : JCL to allocate scratch datasets on all D/R volumes. */\n/*     > Allocate a ds (max 50085 tracks or 3339 cyls) in this way:  */\n/*      > if vol space <= 3339 cyls, alloc 1 50085 trk (or less) DS. */\n/*      > if vol space > 3339, create as many 50085 trk DSs as needed*/\n/*        with the last alloc being < 50085.                         */\n/*      > Multi-file defines kept together in same job for same vol. */\n/*  2. SCRATX : JCL to IEHPROGM scratch the above datasets.          */\n/*      > Multi-file scratches kept together in same job for same vol*/\n/*  3. There is code to throw out any DASD that does not have at     */\n/*     least a MINIMUM amount of free space available. Field MINPCT  */\n/*     can be set (0-100). This is a precaution used to flag any     */\n/*     DASD that was not initialized properly. A zero value means    */\n/*     that ALL DASD will be processed, regardless. Zero=default.    */\n/*-------------------------------------------------------------------*/\n/*  N O T E ::: This REXX performs the JOBS per INIT calcs for you   */\n/*  -------     The number of OPS per step is fixed (see \"R\" ratio). */\n/*  The number of steps/JOB and the number of JOBS is dependent on   */\n/*  the number of each device type and the no. initiators assigned.  */\n/*-------------------------------------------------------------------*/\n/* NOTES on ALL calculations :                                       */\n/*     ALL calcs are based upon all volumes being EMPTY              */\n/*     GOAL IS --> to spread the work as evenly as possible. EX. an  */\n/*     initiator executing 1 MOD-L scratch JOB may have 10 operations*/\n/*     in 1 step whereas a MOD-3 scratch JOB will have 1 operation   */\n/*     per step in a 10 step JOB. Both should run roughly the same.  */\n/*  >  KEY #1 is the fact : NO alloc can exceed 65535 trk (4369 cyls)*/\n/*  >  KEY #2 is the value of 50085 tracks per 1 mod-3 (3339 cyls).  */\n/*       This value has been ARBITRARILY assigned a factor value of 1*/\n/*       ALL MOD-3's are done w/ 1 alloc   -> 1 MOD-3 = 3339   CYLS  */\n/*       ALL MOD-9's are done w/ 3 allocs  -> 1 MOD-9 = 10,016 CYLS  */\n/*       ALL MOD-L's are done w/ 10 allocs -> 1 MOD-L = 32,759 CYLS  */\n/*  >  KEY #3 is using the above 1:3:10 ratio as THE factor for      */\n/*       calculating the number of 'OPERATIONS' per step. See fields */\n/*       (R3, R9, RL).                                               */\n/*  >  KEY #4 is to assign an equivalent no. operations per JOB.     */\n/*      This REXX does that - #steps/JOB are normalized by devtype   */\n/*    > CALCS used to assign # JOBS (and INITS) per DEVTYPE follow:  */\n/*        1. an \"OP\" is a single DASD extent to be cleared           */\n/*        2. #OPS per STEP  = R factor (ratio value of 1:3:10)       */\n/*        3. Calc total #OPS per DEVTYPE: (# typ-UCBs * R factor)    */\n/*        4. Total UP #OPS for ALL DASD.                             */\n/*        5. Find \"IFACTOR\" by dividing #INITIATORS BY TOTAL #OPS    */\n/*        6. Multiply \"IFACTOR\" against each set of #OPS/DEVTYPE     */\n/*        7. Assign the No. inits accordingly (to #SxINITS fields).  */\n/*  > KEY #5 : None of this works unless you have \"ERASE-ON-SCRATCH\" */\n/*             turned on in RACF SETROPTS                            */\n/*-------------------------------------------------------------------*/\n/* NOTES  (\"ERASE-ON-SCRATCH\") :                                     */\n/*  For this process to work, SETROPTS ERASE(NOSECLEVEL) must be set.*/\n/*  In addition, the rule IBMUSER.DR*.*  (see DSNAME in the MODELS)  */\n/*  must be created for the above setting with the \"ERASE ON DELETE\" */\n/*  option turned on - where dsname HLQ is IBMUSER. SUNGARD already  */\n/*  is set up for this.                                              */\n/*-------------------------------------------------------------------*/\nCALL msg('OFF')\nCVTSYSAD    = D2x(C2d(Storage(10,4)) + 48)      /* Point to CVTSYSAD */\nCVTECVT     = D2X(C2d(Storage(10,4)) + 140)     /* Point to CVTECVT  */\nCVTSNAME    = D2X(C2d(Storage(10,4)) + 340)     /* Point to CVTSNAME */\nSysid       = strip(Storage(CVTSNAME,8))        /* sysid             */\nuid         = sysvar(sysuid)                    /* user id           */\nmydate      = date('U')                         /* DATE MM/DD/YY     */\nmytime      = time()                            /* TOD HH:MM:SS      */\n#MOD3DEV    = 0                                 /* total MOD3 devs   */\n#MOD9DEV    = 0                                 /* total MOD9 devs   */\n#MODLDEV    = 0                                 /* total MODL devs   */\n/* ================== W O R K I N G   S T O R A G E ================ */\n/* MOD-3 : 1  50085 TRK files/vol -  or 1  ALLOC  per UCB            */\n/* MOD-9 : 3  50085 TRK files/vol -  or 3  ALLOCS per UCB            */\n/* MOD-L : 10 50085 TRK files/vol -  or 10 ALLOCS per UCB            */\n/*                           (1:3:10 ratio)                          */\n/*-------------------------------------------------------------------*/\nR3=1                                 /* --------->  MOD-3 RATIO VALUE*/\nR9=3                                 /* --------->  MOD-9 RATIO VALUE*/\nRL=10                                /*---------->  MOD-L RATIO VALUE*/\n/*-------------------------------------------------------------------*/\nMINPCT      = 0                                 /* 0 recommended     */\nUCBPOOL3    = POOL3                             /* 3390-3  UCB POOL  */\nUCBPOOL9    = POOL9                             /* 3390-9  UCB POOL  */\nUCBPOOLL    = POOLL                             /* 3390-L  UCB POOL  */\nALLOC3      = ALLOC3                            /* DEF SCR / MOD-3   */\nSCRAT3      = SCRAT3                            /* DEL SCR / MOD-3   */\nALLOC9      = ALLOC9                            /* DEF SCR / MOD-9   */\nSCRAT9      = SCRAT9                            /* DEL SCR / MOD-9   */\nALLOCL      = ALLOCL                            /* DEF SCR / MOD-L   */\nSCRATL      = SCRATL                            /* DEL SCR / MOD-L   */\nMODLALLC    = MODLALLC                          /* ALLOCATE MODEL    */\nMODLSCRT    = MODLSCRT                          /* SCRATCH MODEL     */\n#sg3        = 0                                 /* #SUNGARD MOD3's   */\n#sg9        = 0                                 /* #SUNGARD MOD9's   */\n#sgL        = 0                                 /* #SUNGARD MODL's   */\n#pmax       = 6                                 /* Max entries/pt lin*/\nbump1       = x2d(1)                            /* ucb bumper        */\nz3          = 1                                 /* slot subscr MOD-3 */\nz9          = 1                                 /* slot subscr MOD-9 */\nzL          = 1                                 /* slot subscr MOD-L */\nHOTUCB      = '????'                            /* UCB IN PROCESS    */\nHOTVOL      = '??????'                          /* UCB VOLSER        */\nHOTTRKS     = '????????'                        /* UCB AVAIL TRKS    */\nMAXTRKS     = '????????'                        /* UCB MAX CYCLS     */\nHOTRC       = '??'                              /* DRSPACE RC        */\nHOTMSG      = '                                                  '\nHOTMSG      = HOTMSG||'                              ' /* DRSPACE MSG*/\nKTRACKS     = 50085                             /* 3339 cylinders    */\ndashes      = '--------------------------------------------------'\ndashes      = dashes||'-----------------------------'\ndash7       = substr(dashes,1,7)\nblanks      = '                                                  '\nblanks      = blanks||'                             '\nsay ' '\nsay ' '\nsay ' '\nsay ' '\nvers        = V3                                /* VERSION #         */\nsay 'DRCLEAR (Version='vers') Revision Date: 05/16/2005 - RGG'\n/* ===================== M A I N L I N E =========================== */\nCALL GETSYS              /* Get sysid for dsname build               */\nCALL UPDYN               /* Production or test ?                     */\nCALL CLEANUP             /* Free up any lingering ds holds           */\nCALL ALLOCATE            /* Allocate datasets                        */\nCALL OKVALUES            /* IF USER OK's - display what data is used */\nCALL VERIFY3             /* READ/VERIFY MOD-3 UCB POOL               */\nCALL VERIFY9             /* READ/VERIFY MOD-9 UCB POOL               */\nCALL VERIFYL             /* READ/VERIFY MOD-L UCB POOL               */\nCALL BLDSLOT3            /* BUILD MOD-3 UCB IN-CORE POOL             */\nCALL BLDSLOT9            /* BUILD MOD-9 UCB IN-CORE POOL             */\nCALL BLDSLOTL            /* BUILD MOD-L UCB IN-CORE POOL             */\nCALL ASKINITS            /* Prompt for # avail initiators            */\nCALL CALCJOBS            /* ASSIGN JOBS to INITIATORS                */\nCALL READMODL            /* READ both INPUT MODELS                   */\nCALL CALCVALS            /* Calculate critical JOB values            */\nCALL HSKP3               /* Setup MOD-3 headers                      */\nCALL PROCESS3            /* PROCESS MOD-3 DASD                       */\nCALL HSKP9               /* Setup MOD-9 headers                      */\nCALL PROCESS9            /* PROCESS MOD-9 DASD                       */\nCALL HSKPL               /* Setup MOD-L headers                      */\nCALL PROCESSL            /* PROCESS MOD-L DASD                       */\nCALL SHOWRPT             /* Display process report                   */\nCALL SHOWERR             /* Display ERRORS  report                   */\nexit                     /* we are done                              */\n/* ===================== S U B - R T N S =========================== */\n/*---*/\nGETSYS:\n  say ' '\n  say ' '\n  say ' '\n  do forever\n    say 'Please enter your target SYSTEM name (ie; SYSA, SYSJ, etc.)'\n    parse upper pull Sysname\n    if datatype(Sysname,A) /= 1 then\n      do\n        say '-- RESPONSE invalid --'\n        say '-- REENTER --'\n        say ' '\n        iterate\n      end         */\n    CDRSDS ='DISASTER.MVS.'Sysname'.INSTLIB'    /* DISASTER  DATASET */\nreturn\n/*---*/\nUPDYN:\n  say 'This can be a TEST or a PROD execution...'\n  say ' \"TEST\" will alter (NO) files ...'\n  do forever\n    say 'Do you request TEST or PROD ?'\n    parse upper pull update\n    if update /= 'TEST' then\n    if update /= 'PROD' then\n      do\n        say '-- RESPONSE invalid --'\n        say '-- REENTER --'\n        say ' '\n        iterate\n      end\n  return\n/*---*/\nCLEANUP:\n  ADDRESS TSO\n  \"DELETE ('\"uid\".\"Sysid\".SCREPORT')\"\n  \"DELETE ('\"uid\".\"Sysid\".SCERRORS')\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL3\"))\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL9\"))\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOLL\"))\"\n  \"FREE DA(\"CDRSDS\"(\"ALLOC3\"))\"\n  \"FREE DA(\"CDRSDS\"(\"SCRAT3\"))\"\n  \"FREE DA(\"CDRSDS\"(\"ALLOC9\"))\"\n  \"FREE DA(\"CDRSDS\"(\"SCRAT9\"))\"\n  \"FREE DA(\"CDRSDS\"(\"ALLOCL\"))\"\n  \"FREE DA(\"CDRSDS\"(\"SCRATL\"))\"\n  \"FREE DA(\"CDRSDS\"(\"MODLALLC\"))\"\n  \"FREE DA(\"CDRSDS\"(\"MODLSCRT\"))\"\n  \"FREE FI(REPORT,ERRORS,CDRSDS,MODLALLC,MODLSCRT)\"\n  \"FREE FI(UCBPOOL3,UCBPOOL9,UCBPOOLL)\"\n  \"FREE FI(ALLOC3,ALLOC9,ALLOCL)\"\n  \"FREE FI(SCRAT3,SCRAT9,SCRATL)\"\nreturn\n/*---*/\nALLOCATE:\n  ADDRESS TSO\n  \"ALLOC FI(REPORT) DA('\"UID\".\"SYSID\".SCREPORT') NEW CATALOG\n       SPACE(1,1) CYLINDERS RECFM(F B) LRECL(80) BLKSIZE(27920)\"\n  if rc \u00ac= 0 then\n    do\n      say '('UID'.'SYSID'.SCREPORT) NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(ERRORS) DA('\"UID\".\"SYSID\".SCERRORS') NEW CATALOG\n       SPACE(1,1) CYLINDERS RECFM(F B) LRECL(80) BLKSIZE(27920)\"\n  if rc \u00ac= 0 then\n    do\n      say '('UID'.'SYSID'.SCERRORS) NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(UCBPOOL3) DA(\"CDRSDS\"(\"UCBPOOL3\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('UCBPOOL3') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(UCBPOOL9) DA(\"CDRSDS\"(\"UCBPOOL9\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('UCBPOOL9') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(UCBPOOLL) DA(\"CDRSDS\"(\"UCBPOOLL\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('UCBPOOLL') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(MODLALLC) DA(\"CDRSDS\"(\"MODLALLC\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('MODLALLC') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(MODLSCRT) DA(\"CDRSDS\"(\"MODLSCRT\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('MODLSCRT') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(ALLOC3) DA(\"CDRSDS\"(\"ALLOC3\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('ALLOC3') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(SCRAT3) DA(\"CDRSDS\"(\"SCRAT3\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('SCRAT3') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(ALLOC9) DA(\"CDRSDS\"(\"ALLOC9\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('ALLOC9') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(SCRAT9) DA(\"CDRSDS\"(\"SCRAT9\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('SCRAT9') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(ALLOCL) DA(\"CDRSDS\"(\"ALLOCL\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('ALLOCL') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"ALLOC FI(SCRATL) DA(\"CDRSDS\"(\"SCRATL\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('SCRATL') NOT ALLOCATED .... Check error'\n      exit\n    end\nreturn\n/*---*/\nOKVALUES:\n  say 'Dataset to be used in this REXX is :'\n  say CDRSDS\n  say ' '\n  say 'SUNGARD 3390 MOD-3 UCB used are :'\n  call read3\n  say 'SUNGARD 3390 MOD-9 UCB used are :'\n  call read9\n  say 'SUNGARD 3390 MOD-L UCB used are :'\n  call readL\n  say ' '\n  say 'Are these values correct ? (Y/N)'\n  do forever\n    parse upper pull YN\n    if YN /= 'Y' then\n    if YN /= 'N' then\n      do\n        say '-- RESPONSE invalid --'\n        say '-- REENTER --'\n        say ' '\n        iterate\n      end\n   if yn = 'N' then\n     do\n       say 'DRCLEAR cancelled - fix and rerun'\n       call cleanup\n       exit\n     end\n   else\n     do\n       say 'Values accepted'\n       say ' '\n       return\n     end\n  end\nreturn\n/*---*/\nREAD3:\n  \"EXECIO * DISKR UCBPOOL3 (STEM read3. FINIS)\"\n  do x=1 to read3.0\n    if substr(read3.x,1,1) ='*' then\n      iterate\n    tmpx=pos(' ',read3.x)\n    tmpread=substr(read3.x,1,tmpx)\n    say tmpread\n  end\n  say ' '\n  drop read3.\nreturn\n/*---*/\nREAD9:\n  \"EXECIO * DISKR UCBPOOL9 (STEM read9. FINIS)\"\n  do x=1 to read9.0\n    if substr(read9.x,1,1) ='*' then\n      iterate\n    tmpx=pos(' ',read9.x)\n    tmpread=substr(read9.x,1,tmpx)\n    say tmpread\n  end\n  say ' '\n  drop read9.\nreturn\n/*---*/\nREADL:\n  \"EXECIO * DISKR UCBPOOLL (STEM readl. FINIS)\"\n  do x=1 to readl.0\n    if substr(readl.x,1,1) ='*' then\n      iterate\n    tmpx=pos(' ',readl.x)\n    tmpread=substr(readl.x,1,tmpx)\n    say tmpread\n  end\n  say ' '\n  drop readl.\nreturn\n/*---*/\nVERIFY3:\n  \"EXECIO * DISKR UCBPOOL3 (STEM CDRS3. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL3\"))\"\n  hotdsn=CDRSDS'('UCBPOOL3')'\n  do x=1 to CDRS3.0\n    if substr(cdrs3.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrs3.x,1,4)\n    hirange=substr(cdrs3.x,6,4)\n    if datatype(lorange,'x') /= 1 then\n      do\n        call rangerr3\n        exit\n      end\n    if datatype(hirange,'x') /= 1 then\n      do\n        call rangerr3\n        exit\n      end\n    hiranged=x2d(hirange)\n    loranged=x2d(lorange)\n    #MOD3DEV=#MOD3DEV + ((hiranged-loranged) + 1)\n  end\nreturn\n/*---*/\nVERIFY9:\n  \"EXECIO * DISKR UCBPOOL9 (STEM CDRS9. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL9\"))\"\n  hotdsn=CDRSDS'('UCBPOOL9')'\n  do x=1 to CDRS9.0\n    if substr(cdrs9.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrs9.x,1,4)\n    hirange=substr(cdrs9.x,6,4)\n    if datatype(lorange,'x') /= 1 then\n      do\n        call rangerr9\n        exit\n      end\n    if datatype(hirange,'x') /= 1 then\n      do\n        call rangerr9\n        exit\n      end\n    hiranged=x2d(hirange)\n    loranged=x2d(lorange)\n    #MOD9DEV=#MOD9DEV + ((hiranged-loranged) + 1)\n  end\nreturn\n/*---*/\nVERIFYL:\n  \"EXECIO * DISKR UCBPOOLL (STEM CDRSL. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOLL\"))\"\n  hotdsn=CDRSDS'('UCBPOOLL')'\n  do x=1 to CDRSL.0\n    if substr(cdrsL.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrsL.x,1,4)\n    hirange=substr(cdrsL.x,6,4)\n    if datatype(lorange,'x') /= 1 then\n      do\n        call rangerrL\n        exit\n      end\n    if datatype(hirange,'x') /= 1 then\n      do\n        call rangerrL\n        exit\n      end\n    hiranged=x2d(hirange)\n    loranged=x2d(lorange)\n    #MODLDEV=#MODLDEV + ((hiranged-loranged) + 1)\n  end\nreturn\n/*---*/\nBLDSLOT3:\n  do x=1 to CDRS3.0\n    if substr(cdrs3.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrs3.x,1,4)\n    hirange=substr(cdrs3.x,6,4)\n    lorangex=x2d(lorange)\n    hirangex=x2d(hirange)\n    slotrang=(hirangex-lorangex) + 1\n    #sg3=#sg3+slotrang\n    currucb=x2d(lorange)\n    do y=1 to slotrang\n      currucbd=d2x(currucb)\n      currucbd=right(currucbd,4,0)\n      slot3.z3=currucbd\n      z3=z3+1\n      currucb=currucb + bump1\n    end\n  end\n  slot3.0=z3-1\nreturn\n/*---*/\nBLDSLOT9:\n  do x=1 to CDRS9.0\n    if substr(cdrs9.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrs9.x,1,4)\n    hirange=substr(cdrs9.x,6,4)\n    lorangex=x2d(lorange)\n    hirangex=x2d(hirange)\n    slotrang=(hirangex-lorangex) + 1\n    #sg9=#sg9+slotrang\n    currucb=x2d(lorange)\n    do y=1 to slotrang\n      currucbd=d2x(currucb)\n      currucbd=right(currucbd,4,0)\n      slot9.z9=currucbd\n      z9=z9+1\n      currucb=currucb + bump1\n    end\n  end\n  slot9.0=z9-1\nreturn\n/*---*/\nBLDSLOTL:\n  do x=1 to CDRSL.0\n    if substr(cdrsL.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrsL.x,1,4)\n    hirange=substr(cdrsL.x,6,4)\n    lorangex=x2d(lorange)\n    hirangex=x2d(hirange)\n    slotrang=(hirangex-lorangex) + 1\n    #sgL=#sgL+slotrang\n    currucb=x2d(lorange)\n    do y=1 to slotrang\n      currucbd=d2x(currucb)\n      currucbd=right(currucbd,4,0)\n      slotL.zL=currucbd\n      zL=zL+1\n      currucb=currucb + bump1\n    end\n  end\n  slotL.0=zL-1\nreturn\n/*---*/\nASKINITS:\n  do forever\n    say 'Please enter the total number of JES2 INITIATORS you will use'\n    parse upper pull #INITS\n    if datatype(#INITS,W) = 0 then\n      do\n        say '-- RESPONSE invalid, please enter a NUMERIC value --'\n        say '-- REENTER --'\n        say ' '\n        iterate\n      end\n    say 'No. JES2 inits being used is '#INITS\n    say ' '\n    leave\n  end\nreturn\n/*---*/\nCALCJOBS:\n  #MOD3OPS=#MOD3DEV * R3\n  #MOD9OPS=#MOD9DEV * R9\n  #MODLOPS=#MODLDEV * RL\n  #MODOPTOT=#MOD3OPS+#MOD9OPS+#MODLOPS\n  ifactor=#INITS/#MODOPTOT\n  #S3INITS=trunc((#MOD3OPS * ifactor) + 0.5)\n  #S9INITS=trunc((#MOD9OPS * ifactor) + 0.5)\n  #SLINITS=trunc((#MODLOPS * ifactor) + 0.5)\n  if #S3INITS < 1 then #S3INITS=1\n  if #S9INITS < 1 then #S9INITS=1\n  if #SLINITS < 1 then #SLINITS=1\n  say #S3INITS' initiators needed to clear '#MOD3DEV' MOD-3 devices'\n  say '   with '#MOD3OPS' projected operations'\n  say #S9INITS' initiators needed to clear '#MOD9DEV' MOD-9 devices'\n  say '   with '#MOD9OPS' projected operations'\n  say #SLINITS' initiators needed to clear '#MODLDEV' MOD-L devices'\n  say '   with '#MODLOPS' projected operations'\nreturn\n/*---*/\nREADMODL:\n  \"EXECIO * DISKR MODLALLC (stem allcin. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"MODLALLC\"))\"\n  \"EXECIO * DISKR MODLSCRT (stem scrtin. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"MODLSCRT\"))\"\n  JOBA.1=\"//TSAX0001 JOB (0000,0000),'06DRCLEAR',CLASS=A,MSGCLASS=R  \"\n  JOBA.1=JOBA.1||'                     '\n  JOBA.2='//*'\n  JOBA.3='//* ALLOCATE ENTIRE VOLS W/ SCRATCH DATASET(S)'\n  JOBS.1=\"//TSSX0001 JOB (0000,0000),'06DRCLEAR',CLASS=A,MSGCLASS=R  \"\n  JOBS.1=JOBS.1||'                     '\n  JOBS.2='//*'\n  JOBS.3='//* SCRATCH DUMMY DATASETS HOLDING DASD TRACKS'\nreturn\n/*---*/\nRANGERR3:\n  say cdrs3.x\n  say 'CDRS UCB range line has incorrect format'\n  say 'Dsname = 'hotdsn\n  call cleanup\nreturn\n/*---*/\nRANGERR9:\n  say cdrs9.x\n  say 'CDRS UCB range line has incorrect format'\n  say 'Dsname = 'hotdsn\n  call cleanup\nreturn\n/*---*/\nRANGERRL:\n  say cdrsL.x\n  say 'CDRS UCB range line has incorrect format'\n  say 'Dsname = 'hotdsn\n  call cleanup\nreturn\n/*---*/\nCALCVALS:\n  #maxallc3=trunc(((slot3.0) / #A3INITS) + 0.5)\n  #maxscrt3=trunc(((slot3.0) / #S3INITS) + 0.5)\n  #maxallc9=trunc(((slot9.0) / #A9INITS) + 0.5)\n  #maxscrt9=trunc(((slot9.0) / #S9INITS) + 0.5)\n  #maxallcL=trunc(((slotL.0) / #ALINITS) + 0.5)\n  #maxscrtL=trunc(((slotL.0) / #SLINITS) + 0.5)\n  if #maxscrt3 < 1 then\n    #maxscrt3=1\n  if #maxscrt9 < 1 then\n    #maxscrt9=1\n  if #maxscrtl < 1 then\n    #maxscrtl=1\n  if #maxscrt3 > 255 then\n    do\n      say 'Max steps/JOB exceeded for MOD-3'\n      say 'Value set to 255'\n      say 'REXX continues'\n      #maxscrt3=255\n    end\n  if #maxscrt9 > 255 then\n    do\n      say 'Max steps/JOB exceeded for MOD-9'\n      say 'Value set to 255'\n      say 'REXX continues'\n      #maxscrt9=255\n    end\n  if #maxscrtl > 255 then\n    do\n      say 'Max steps/JOB exceeded for MOD-L'\n      say 'Value set to 255'\n      say 'REXX continues'\n      #maxscrtl=255\n    end\n  #A3OPS=(slot3.0 * R3)\n  #S3OPS=(slot3.0 * R3)\n  #A9OPS=(slot9.0 * R9)\n  #S9OPS=(slot9.0 * R9)\n  #ALOPS=(slotL.0 * RL)\n  #SLOPS=(slotL.0 * RL)\n/*----------------------------*/\n  slota3=format(slot3.0,6,0)\n  inita3=format(#A3INITS,3,0)\n  maxa3=format(#maxallc3,3,0)\n  opsa3=format(#A3OPS,7,0)\n/*----------------------------*/\n  slots3=format(slot3.0,6,0)\n  inits3=format(#S3INITS,3,0)\n  maxs3=format(#maxscrt3,3,0)\n  opss3=format(#A3OPS,7,0)\n/*----------------------------*/\n  slota9=format(slot9.0,6,0)\n  inita9=format(#A9INITS,3,0)\n  maxa9=format(#maxallc9,3,0)\n  opsa9=format(#A9OPS,7,0)\n/*----------------------------*/\n  slots9=format(slot9.0,6,0)\n  inits9=format(#S9INITS,3,0)\n  maxs9=format(#maxscrt9,3,0)\n  opss9=format(#A9OPS,7,0)\n/*----------------------------*/\n  slotal=format(slotl.0,6,0)\n  inital=format(#ALINITS,3,0)\n  maxal=format(#maxallcL,3,0)\n  opsal=format(#ALOPS,7,0)\n/*----------------------------*/\n  slotsl=format(slotL.0,6,0)\n  initsl=format(#SLINITS,3,0)\n  maxsl=format(#maxscrtl,3,0)\n  opssl=format(#ALOPS,7,0)\n/*----------------------------*/\nreturn\n/*-------------------------------------------------------------------*/\n/*---------------------- MAIN PROCESS (MOD-3) -----------------------*/\n/*-------------------------------------------------------------------*/\n/*---*/\nHSKP3:\n  pe=1\n  px=1\n  pt.px=dashes\n  px=px+1\n  pt.px='                                     D R C L E A R            '\n  px=px+1\n  pt.px='                         *-- J O B   P R O J E C T I O N S --*'\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px='*****************'\n  px=px+1\n  pt.px='#JES2 INITS: '#INITS' *'\n  px=px+1\n  pt.px='*****************'\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=' ALLOC MOD-3 UCBs 'slota3', #Ops ('opsa3'), '\n  pt.px=pt.px||'JES INITS : 'inita3', Steps/JOB : 'maxa3\n  px=px+1\n  pt.px=' SCRAT MOD-3 UCBs 'slots3', #Ops ('opss3'), '\n  pt.px=pt.px||'JES INITS : 'inits3', Steps/JOB : 'maxs3\n  px=px+1\n  pt.px=' ALLOC MOD-9 UCBs 'slota9', #Ops ('opsa9'), '\n  pt.px=pt.px||'JES INITS : 'inita9', Steps/JOB : 'maxa9\n  px=px+1\n  pt.px=' SCRAT MOD-9 UCBs 'slots9', #Ops ('opss9'), '\n  pt.px=pt.px||'JES INITS : 'inits9', Steps/JOB : 'maxs9\n  px=px+1\n  pt.px=' ALLOC MOD-L UCBs 'slotaL', #Ops ('opsaL'), '\n  pt.px=pt.px||'JES INITS : 'initaL', Steps/JOB : 'maxaL\n  px=px+1\n  pt.px=' SCRAT MOD-L UCBs 'slotsL', #Ops ('opssL'), '\n  pt.px=pt.px||'JES INITS : 'initsL', Steps/JOB : 'maxsL\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='                      D/R DASD CLEARING JCL CREATE REPORT'\n  pt.px=pt.px||'     'mydate' 'mytime'     '\n  px=px+1\n  pt.px='                              No. 3390 MOD-3 ('slot3.0')  '\n  pt.px=pt.px||'                          '\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px=' UCB  VOLSER  UCB  VOLSER  UCB  VOLSER  '\n  pt.px=pt.px||'UCB  VOLSER  UCB  VOLSER  UCB  VOLSER    '\n  px=px+1\n  pt.px=' ---- ------  ---- ------  ---- ------  ---- ------  '\n  pt.px=pt.px||'---- ------  ---- ------ '\n  px=px+1\n  pt.px=' '\n  pr.pe=dashes\n  pe=pe+1\n  pr.pe='                        D/R DASD CLEARING ERRORS REPORT  '\n  pr.pe=pr.pe||'     'mydate' 'mytime'     '\n  pe=pe+1\n  pr.pe=dashes\n  pe=pe+1\n  pr.pe=' '\nreturn\n/*---*/\nPROCESS3:\n  tmpaj=joba.1\n  m=6\n  l=overlay('3',tmpaj,m,1)\n  tmpaj=l\n  tmpsj=jobs.1\n  m=6\n  l=overlay('3',tmpsj,m,1)\n  tmpsj=l\n  alloc3.1=tmpaj\n  alloc3.2=joba.2\n  alloc3.3=joba.3\n  scrat3.1=tmpsj\n  scrat3.2=jobs.2\n  scrat3.3=jobs.3\n  a3=4\n  s3=4\n  p#=0\n  #errs3 = 0\n  dsctra = 1\n  dsctrs = 1\n  ds3atot= 0\n  ds3stot= 0\n  genjoba='N'\n  genjobs='N'\n  #mod3aops=0\n  #mod3sops=0\n  #mod3asteps=0\n  #mod3ssteps=0\n  #tot3aops=0\n  #tot3sops=0\n  #tot3asteps=0\n  #tot3ssteps=0\n  #allc3jobs = 1\n  #scrt3jobs = 1\n  say 'Create jobs for clearing all DASD with lo-vals'\n  say ' '\n  /*------------------- U C B  L O O P - M O D 3 --------------------*/\n  do x=1 to slot3.0\n    hotucb=substr(slot3.x,1,4)\n    dsctra=1\n    dsctrs=1\n    hotvol='VOL=??'\n    hottrks='AVAIL=??'\n    maxtrks='MAXNO=??'\n    hotrc='RC'\n    hotmsg=blanks\n    address linkpgm \"DRSPACE hotucb hotvol hottrks maxtrks hotrc hotmsg\"\n    if rc /= 0 | hottrks='00000000' then\n      do\n        #errs3=#errs3+1\n        pe=pe+1\n        pr.pe=' '\n        pe=pe+1\n        pr.pe='*************************************************'\n        pe=pe+1\n        pr.pe='UCB='HOTUCB' Space search error. RC='HOTRC\n        pe=pe+1\n        pr.pe='Volid='HOTVOL\n        pe=pe+1\n        pr.pe='MAX Trks in UCB='maxtrks\n        pe=pe+1\n        pr.pe='Avail Trks='HOTTRKS\n        pe=pe+1\n        pr.pe='Ermsg='HOTMSG\n        if pos('0C010009',HOTMSG) /= 0 then\n          do\n            pe=pe+1\n            pr.pe='-> UCB IS NOT ONLINE ! <-'\n          end\n        pe=pe+1\n        pr.pe='Volume WILL NOT be cleared...Process continues'\n        pe=pe+1\n        pr.pe='*************************************************'\n        pe=pe+1\n        pr.pe=' '\n        iterate\n      end\n    actual=(hottrks/maxtrks)\n    numeric digits 3\n    actual=trunc(actual * 100)\n    numeric digits\n    if actual < minpct then\n      do\n        #errs3=#errs3+1\n        /****************************************************/\n        /* ERROR CONDITION 02 - UCB has < minpct free space */\n        /****************************************************/\n        call ERRORPCT\n        iterate             /* drop vol from any processing */\n      end\n    WORKTRKS=HOTTRKS\n    pt.px=pt.px||HOTUCB||' '||HOTVOL||'  '\n    p#=p#+1\n    if p#=#pmax then\n      do\n        p#=0\n        px=px+1\n        pt.px=' '\n      end\n /* Calculate No. Extents to alloc FOR THIS UCB .......  */\n /*  MAX xtent size allowed is 3339 cyls or 50085 tracks */\n /*  MAX xtent size allowed by MVS is 65535 tracks       */\n    #xtents=worktrks/ktracks\n    #xtentsr=worktrks//ktracks\n    if #xtentsr > 0 then\n      #xtents=#xtents + 1.0\n    #xtents=trunc(#xtents)\n  /* --- ALLOCATE MOD-3 code --- */\n    if genjoba='Y' then\n      do\n        genjoba='N'\n        #allc3jobs=#allc3jobs+1\n        #a3jobctr=right(#allc3jobs,4,'0')\n        #mod3aops=0\n        #mod3asteps=0\n        j=7\n        l=overlay(#a3jobctr,tmpaj,j,4)\n        tmpaj=l\n        alloc3.a3=tmpaj\n        a3=a3+1\n        alloc3.a3=joba.2\n        a3=a3+1\n        alloc3.a3=joba.3\n        a3=a3+1\n      end\n    drop3='NO'\n    do #XTENTS\n      do y=1 to allcin.0\n        alctmp=allcin.y\n        if pos('PGM=IEF',alctmp) /= 0 then\n          do\n            if drop3='YES' then\n              iterate\n            else\n              drop3='YES'\n          end\n        if pos('.DS',alctmp) /= 0 then\n          do\n            u=pos('.DS',alctmp)\n            dscnt=right(dsctra,6,'0')\n            k=overlay(dscnt,alctmp,U+3,6)\n            dsctra=dsctra+1\n            alloc3.a3=k\n            alctmp=alloc3.a3\n            ds3atot=ds3atot+1\n          end\n        if pos('DRUUUU',alctmp) /= 0 then\n          do\n            u=pos('DRUUUU',ALctmp)\n            k=overlay(HOTUCB,alctmp,u+2,4)\n            alloc3.a3=k\n            a3=a3+1\n            iterate\n          end\n        if pos('UUUUU',alctmp) /= 0 then\n          do\n            u=pos('UUUUU',alctmp)\n            k=overlay(HOTUCB,alctmp,u+1,4)\n            alloc3.a3=k\n            a3=a3+1\n            iterate\n          end\n        if pos('SER=VVVVVV',alctmp) /= 0 then\n          do\n            u=pos('VVVVVV',alctmp)\n            k=overlay(HOTVOL,alctmp,u,6)\n            alloc3.a3=k\n            a3=a3+1\n            iterate\n          end\n        if pos('TTTTTTTT',alctmp) /= 0 then\n          do\n            u=pos('TTTTTTTT',alctmp)\n            if worktrks > KTRACKS then\n              do\n                worktrks=worktrks-ktracks\n                ktracks=right(ktracks,8,'0')\n                k=overlay(Ktracks,alctmp,u,8)\n              end\n            else\n              do\n                worktrks=right(worktrks,8,'0')\n                k=overlay(worktrks,alctmp,u,8)\n              end\n            alloc3.a3=k\n            a3=a3+1\n            iterate\n          end\n        alloc3.a3=alctmp\n        a3=a3+1\n      end\n      #mod3aops=#mod3aops+1\n      #tot3aops=#tot3aops+1\n    end\n    #tot3asteps=#tot3asteps+1\n    #mod3asteps=#mod3asteps+1\n    if #mod3asteps >= #maxallc3 then\n      genjoba='Y'\n  /* --- SCRATCH MOD-3 code --- */\n  /*===============================================================*/\n    if genjobS='Y' then\n      do\n        genjobs='N'\n        #scrt3jobs=#scrt3jobs+1\n        #s3jobctr=right(#scrt3jobs,4,'0')\n        #mod3sops=0\n        #mod3ssteps=0\n        j=7\n        l=overlay(#s3jobctr,tmpsj,j,4)\n        tmpsj=l\n        scrat3.s3=tmpsj\n        s3=s3+1\n        scrat3.s3=jobs.2\n        s3=s3+1\n        scrat3.s3=jobs.3\n        s3=s3+1\n      end\n    do y=1 to scrtin.0\n      if pos('UUUUU',scrtin.y) /= 0 then\n        do\n          u=pos('UUUUU',scrtin.y)\n          k=overlay(HOTUCB,scrtin.y,u+1,4)\n          scrat3.s3=k\n          s3=s3+1\n          iterate\n        end\n      if pos('SER=VVVVVV',scrtin.y) /= 0 then\n        do\n          u=pos('VVVVVV',scrtin.y)\n          k=overlay(HOTVOL,scrtin.y,u,6)\n          scrat3.s3=k\n          s3=s3+1\n          iterate\n        end\n      /* S P E C I A L */\n      if pos('SCRATCH',scrtin.y) /= 0 then\n        do #XTENTS\n          scrtmp=scrtin.y\n          if pos('VVVVVV',scrtmp) /= 0 then\n            do\n              u=pos('VVVVVV',scrtmp)\n              k=overlay(HOTVOL,scrtmp,u,6)\n              scrat3.s3=k\n              scrtmp=scrat3.s3\n            end\n          if pos('DRUUUU',scrtmp) /= 0 then\n            do\n              u=pos('DRUUUU',scrtmp)\n              k=overlay(HOTUCB,scrtmp,u+2,4)\n              scrat3.s3=k\n              scrtmp=scrat3.s3\n            end\n          if pos('.DS',scrtmp) /= 0 then\n            do\n              u=pos('.DS',scrtmp)\n              dscnt=right(dsctrs,6,'0')\n              k=overlay(dscnt,scrtmp,U+3,6)\n              scrat3.s3=k\n              s3=s3+1\n              dsctrs=dsctrs+1\n              ds3stot=ds3stot+1\n            end\n          #mod3sops=#mod3sops+1\n          #tot3sops=#tot3sops+1\n        end\n      else\n        do\n          scrat3.s3=scrtin.y\n          s3=s3+1\n        end\n    end\n    #tot3ssteps=#tot3ssteps+1\n    #mod3ssteps=#mod3ssteps+1\n    if #mod3ssteps >= #maxscrt3 then\n      genjobs='Y'\n  end\n  if update='PROD' then\n    do\n      \"EXECIO * DISKW ALLOC3 (STEM ALLOC3. FINIS)\"\n      \"EXECIO * DISKW SCRAT3 (STEM SCRAT3. FINIS)\"\n    end\n  say ' '\n  say dashes\n  mymsg='('#allc3jobs') MOD-3 JOBS with ('#tot3asteps') STEPS '\n  mymsg=mymsg||'with ('#tot3aops') OPS created for ALLOC'\n  say mymsg\n  say dashes\n  say '    See member 'CDRSDS'('ALLOC3')'\n  say dashes\n  mymsg='('#scrt3jobs') MOD-3 JOBS with ('#tot3ssteps') STEPS '\n  mymsg=mymsg||'with ('#tot3sops') OPS created for SCRAT'\n  say mymsg\n  say dashes\n  say '    See member 'CDRSDS'('SCRAT3')'\n  say dashes\n  say '('slot3.0') MOD-3 UCBs input to be scratched'\n  say '('#errs3') MOD-3 UCBs skipped due to errors'\n  total3=slot3.0-#errs3\n  say dash7\n  say '('total3') MOD-3 UCBs scheduled to be scratched'\n  say dashes\n  say '('ds3atot') MOD-3 scratch datasets to be allocated'\n  say '('ds3stot') MOD-3 scratch datasets to be scratched'\n  say ' '\n  say '/////////////////////////////////////////////////////////////'\n  say '///////////////////// E N D  M O D - 3 //////////////////////'\n  say '/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('#allc3jobs') MOD-3 JOBS with ('#tot3asteps') '\n  pt.px=pt.px||'STEPS with ('#tot3aops') OPS created for ALLOCATING'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='    See member 'CDRSDS'('ALLOC3')'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('#scrt3jobs') MOD-3 JOBS with ('#tot3ssteps') '\n  pt.px=pt.px||'STEPS with ('#tot3sops') OPS created for SCRATCHING'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='    See member 'CDRSDS'('SCRAT3')'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('slot3.0') MOD-3 UCBs input to be scratched'\n  px=px+1\n  pt.px='('#errs3') MOD-3 UCBs skipped due to errors'\n  px=px+1\n  pt.px=dash7\n  px=px+1\n  pt.px='('total3') MOD-3 UCBs scheduled to be scratched'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('ds3atot') MOD-3 scratch datasets to be allocated'\n  px=px+1\n  pt.px='('ds3stot') MOD-3 scratch datasets to be scratched'\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px='/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px='///////////////////// E N D  M O D - 3 //////////////////////'\n  px=px+1\n  pt.px='/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px=' '\nreturn\n/*-------------------------------------------------------------------*/\n/*---------------------- MAIN PROCESS (MOD-9) -----------------------*/\n/*-------------------------------------------------------------------*/\n/*---*/\nHSKP9:\n  pt.px=dashes\n  px=px+1\n  pt.px='                      D/R DASD CLEARING JCL CREATE REPORT'\n  pt.px=pt.px||'     'mydate' 'mytime'     '\n  px=px+1\n  pt.px='                              No. 3390 MOD-9 ('slot9.0')  '\n  pt.px=pt.px||'                          '\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px=' UCB  VOLSER  UCB  VOLSER  UCB  VOLSER  '\n  pt.px=pt.px||'UCB  VOLSER  UCB  VOLSER  UCB  VOLSER    '\n  px=px+1\n  pt.px=' ---- ------  ---- ------  ---- ------  ---- ------  '\n  pt.px=pt.px||'---- ------  ---- ------ '\n  px=px+1\n  pt.px=' '\nreturn\n/*---*/\nPROCESS9:\n  tmpaj=joba.1\n  m=6\n  l=overlay('9',tmpaj,m,1)\n  tmpaj=l\n  tmpsj=jobs.1\n  m=6\n  l=overlay('9',tmpsj,m,1)\n  tmpsj=l\n  alloc9.1=tmpaj\n  alloc9.2=joba.2\n  alloc9.3=joba.3\n  scrat9.1=tmpsj\n  scrat9.2=jobs.2\n  scrat9.3=jobs.3\n  a9=4\n  s9=4\n  p#=0\n  #errs9 = 0\n  dsctra = 1\n  dsctrs = 1\n  ds9atot= 0\n  ds9stot= 0\n  genjoba='N'\n  genjobs='N'\n  #mod9aops=0\n  #mod9sops=0\n  #mod9asteps=0\n  #mod9ssteps=0\n  #tot9aops=0\n  #tot9sops=0\n  #tot9asteps=0\n  #tot9ssteps=0\n  #allc9jobs = 1\n  #scrt9jobs = 1\n  say ' '\n  /*------------------- U C B  L O O P - M O D 9 --------------------*/\n  do x=1 to slot9.0\n    hotucb=substr(slot9.x,1,4)\n    dsctra=1\n    dsctrs=1\n    hotvol='VOL=??'\n    hottrks='AVAIL=??'\n    maxtrks='MAXNO=??'\n    hotrc='RC'\n    hotmsg=blanks\n    address linkpgm \"DRSPACE hotucb hotvol hottrks maxtrks hotrc hotmsg\"\n    if rc /= 0 | hottrks='00000000' then\n      do\n        #errs9=#errs9+1\n        pe=pe+1\n        pr.pe=' '\n        pe=pe+1\n        pr.pe='*************************************************'\n        pe=pe+1\n        pr.pe='UCB='HOTUCB' Space search error. RC='HOTRC\n        pe=pe+1\n        pr.pe='Volid='HOTVOL\n        pe=pe+1\n        pr.pe='MAX Trks in UCB='maxtrks\n        pe=pe+1\n        pr.pe='Avail Trks='HOTTRKS\n        pe=pe+1\n        pr.pe='Ermsg='HOTMSG\n        if pos('0C010009',HOTMSG) /= 0 then\n          do\n            pe=pe+1\n            pr.pe='-> UCB IS NOT ONLINE ! <-'\n          end\n        pe=pe+1\n        pr.pe='Volume WILL NOT be cleared...Process continues'\n        pe=pe+1\n        pr.pe='*************************************************'\n        pe=pe+1\n        pr.pe=' '\n        iterate\n      end\n    numeric digits 3\n    actual=trunc(actual * 100)\n    numeric digits\n    if actual < minpct then\n      do\n        #errs9=#errs9+1\n        /****************************************************/\n        /* ERROR CONDITION 02 - UCB has < minpct free space */\n        /****************************************************/\n        call ERRORPCT\n        iterate             /* drop vol from any processing */\n      end\n    WORKTRKS=HOTTRKS\n    pt.px=pt.px||HOTUCB||' '||HOTVOL||'  '\n    p#=p#+1\n    if p#=#pmax then\n      do\n        p#=0\n        px=px+1\n        pt.px=' '\n      end\n /* Calculate No. Extents to alloc FOR THIS UCB .......  */\n /*  MAX xtent size allowed is 3339 cyls or 50085 tracks */\n /*  MAX xtent size allowed by MVS is 65535 tracks       */\n    #xtents=worktrks/ktracks\n    #xtentsr=worktrks//ktracks\n    if #xtentsr > 0 then\n      #xtents=#xtents + 1.0\n    #xtents=trunc(#xtents)\n  /* --- ALLOCATE MOD-9 code --- */\n    if genjoba='Y' then\n      do\n        genjoba='N'\n        #allc9jobs=#allc9jobs+1\n        #a9jobctr=right(#allc9jobs,4,'0')\n        #mod9asteps=0\n        #mod9aops=0\n        j=7\n        l=overlay(#a9jobctr,tmpaj,j,4)\n        tmpaj=l\n        alloc9.a9=tmpaj\n        a9=a9+1\n        alloc9.a9=joba.2\n        a9=a9+1\n        alloc9.a9=joba.3\n        a9=a9+1\n      end\n    drop9='NO'\n    do #XTENTS\n      do y=1 to allcin.0\n        alctmp=allcin.y\n        if pos('PGM=IEF',alctmp) /= 0 then\n          do\n            if drop9='YES' then\n              iterate\n            else\n              drop9='YES'\n          end\n        if pos('.DS',alctmp) /= 0 then\n          do\n            u=pos('.DS',alctmp)\n            dscnt=right(dsctra,6,'0')\n            k=overlay(dscnt,alctmp,U+3,6)\n            dsctra=dsctra+1\n            alloc9.a9=k\n            alctmp=alloc9.a9\n            ds9atot=ds9atot+1\n          end\n        if pos('DRUUUU',alctmp) /= 0 then\n          do\n            u=pos('DRUUUU',ALctmp)\n            k=overlay(HOTUCB,alctmp,u+2,4)\n            alloc9.a9=k\n            a9=a9+1\n            iterate\n          end\n        if pos('SER=VVVVVV',alctmp) /= 0 then\n          do\n            u=pos('VVVVVV',alctmp)\n            k=overlay(HOTVOL,alctmp,u,6)\n            alloc9.a9=k\n            a9=a9+1\n            iterate\n          end\n        if pos('UUUUU',alctmp) /= 0 then\n          do\n            u=pos('UUUUU',alctmp)\n            k=overlay(HOTUCB,alctmp,u+1,4)\n            alloc9.a9=k\n            a9=a9+1\n            iterate\n          end\n        if pos('TTTTTTTT',alctmp) /= 0 then\n          do\n            u=pos('TTTTTTTT',alctmp)\n            if worktrks > KTRACKS then\n              do\n                worktrks=worktrks-ktracks\n                ktracks=right(ktracks,8,'0')\n                k=overlay(Ktracks,alctmp,u,8)\n              end\n            else\n              do\n                worktrks=right(worktrks,8,'0')\n                k=overlay(worktrks,alctmp,u,8)\n              end\n            alloc9.a9=k\n            a9=a9+1\n            iterate\n          end\n        alloc9.a9=alctmp\n        a9=a9+1\n      end\n      #mod9aops=#mod9aops+1\n      #tot9aops=#tot9aops+1\n    end\n    #tot9asteps=#tot9asteps+1\n    #mod9asteps=#mod9asteps+1\n    if #mod9asteps >= #maxallc9 then\n      genjoba='Y'\n  /* --- SCRATCH MOD-9 code --- */\n  /*===============================================================*/\n    if genjobs='Y' then\n      do\n        genjobs='N'\n        #scrt9jobs=#scrt9jobs+1\n        #s9jobctr=right(#scrt9jobs,4,'0')\n        #mod9sops=0\n        #mod9ssteps=0\n        j=7\n        l=overlay(#s9jobctr,tmpsj,j,4)\n        tmpsj=l\n        scrat9.s9=tmpsj\n        s9=s9+1\n        scrat9.s9=jobs.2\n        s9=s9+1\n        scrat9.s9=jobs.3\n        s9=s9+1\n      end\n    do y=1 to scrtin.0\n      if pos('UUUUU',scrtin.y) /= 0 then\n        do\n          u=pos('UUUUU',scrtin.y)\n          k=overlay(HOTUCB,scrtin.y,u+1,4)\n          scrat9.s9=k\n          s9=s9+1\n          iterate\n        end\n      if pos('SER=VVVVVV',scrtin.y) /= 0 then\n        do\n          u=pos('VVVVVV',scrtin.y)\n          k=overlay(HOTVOL,scrtin.y,u,6)\n          scrat9.s9=k\n          s9=s9+1\n          iterate\n        end\n      /* S P E C I A L */\n      if pos('SCRATCH',scrtin.y) /= 0 then\n        do #XTENTS\n          scrtmp=scrtin.y\n          if pos('VVVVVV',scrtmp) /= 0 then\n            do\n              u=pos('VVVVVV',scrtmp)\n              k=overlay(HOTVOL,scrtmp,u,6)\n              scrat9.s9=k\n              scrtmp=scrat9.s9\n            end\n          if pos('DRUUUU',scrtmp) /= 0 then\n            do\n              u=pos('DRUUUU',scrtmp)\n              k=overlay(HOTUCB,scrtmp,u+2,4)\n              scrat9.s9=k\n              scrtmp=scrat9.s9\n            end\n          if pos('.DS',scrtmp) /= 0 then\n            do\n              u=pos('.DS',scrtmp)\n              dscnt=right(dsctrs,6,'0')\n              k=overlay(dscnt,scrtmp,U+3,6)\n              scrat9.s9=k\n              s9=s9+1\n              dsctrs=dsctrs+1\n              ds9stot=ds9stot+1\n            end\n          #mod9sops=#mod9sops+1\n          #tot9sops=#tot9sops+1\n        end\n      else\n        do\n          scrat9.s9=scrtin.y\n          s9=s9+1\n        end\n    end\n    #tot9ssteps=#tot9ssteps+1\n    #mod9ssteps=#mod9ssteps+1\n    if #mod9ssteps >= #maxscrt9 then\n      genjobs='Y'\n  end\n  if update ='PROD' then\n    do\n      \"EXECIO * DISKW ALLOC9 (STEM ALLOC9. FINIS)\"\n      \"EXECIO * DISKW SCRAT9 (STEM SCRAT9. FINIS)\"\n    end\n  say ' '\n  say dashes\n  mymsg='('#allc9jobs') MOD-9 JOBS with ('#tot9asteps') STEPS '\n  mymsg=mymsg||'with ('#tot9aops') OPS created for ALLOC'\n  say mymsg\n  say dashes\n  say '    See member 'CDRSDS'('ALLOC9')'\n  say dashes\n  mymsg='('#scrt9jobs') MOD-9 JOBS with ('#tot9ssteps') STEPS '\n  mymsg=mymsg||'with ('#tot9sops') OPS created for SCRAT'\n  say mymsg\n  say dashes\n  say '    See member 'CDRSDS'('SCRAT9')'\n  say dashes\n  say '('slot9.0') MOD-9 UCBs input to be scratched'\n  say '('#errs9') MOD-9 UCBs skipped due to errors'\n  total9=slot9.0-#errs9\n  say dash7\n  say '('total9') MOD-9 UCBs scheduled to be scratched'\n  say dashes\n  say '('ds9atot') MOD-9 scratch datasets to be allocated'\n  say '('ds9stot') MOD-9 scratch datasets to be scratched'\n  say ' '\n  say '/////////////////////////////////////////////////////////////'\n  say '///////////////////// E N D  M O D - 9 //////////////////////'\n  say '/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('#allc9jobs') MOD-9 JOBS with ('#tot9asteps') '\n  pt.px=pt.px||'STEPS with ('#tot9aops') OPS created for ALLOCATING'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='    See member 'CDRSDS'('ALLOC9')'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('#scrt9jobs') MOD-9 JOBS with ('#tot9ssteps') '\n  pt.px=pt.px||'STEPS with ('#tot9sops') OPS created for SCRATCHING'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='    See member 'CDRSDS'('SCRAT9')'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('slot9.0') MOD-9 UCBs input to be scratched'\n  px=px+1\n  pt.px='('#errs9') MOD-9 UCBs skipped due to errors'\n  px=px+1\n  pt.px=dash7\n  px=px+1\n  pt.px='('total9') MOD-9 UCBs scheduled to be scratched'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px='('ds9atot') MOD-9 scratch datasets to be allocated'\n  px=px+1\n  pt.px='('ds9stot') MOD-9 scratch datasets to be scratched'\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px='/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px='///////////////////// E N D  M O D - 9 //////////////////////'\n  px=px+1\n  pt.px='/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px=' '\nreturn\n/*-------------------------------------------------------------------*/\n/*---------------------- MAIN PROCESS (MOD-L) -----------------------*/\n/*-------------------------------------------------------------------*/\n/*---*/\nHSKPL:\n  pt.px=dashes\n  px=px+1\n  pt.px='                      D/R DASD CLEARING JCL CREATE REPORT'\n  pt.px=pt.px||'     'mydate' 'mytime'     '\n  px=px+1\n  pt.px='                              No. 3390 MOD-L ('slotL.0')  '\n  pt.px=pt.px||'                          '\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px=' UCB  VOLSER  UCB  VOLSER  UCB  VOLSER  '\n  pt.px=pt.px||'UCB  VOLSER  UCB  VOLSER  UCB  VOLSER    '\n  px=px+1\n  pt.px=' ---- ------  ---- ------  ---- ------  ---- ------  '\n  pt.px=pt.px||'---- ------  ---- ------ '\n  px=px+1\n  pt.px=' '\nreturn\n/*---*/\nPROCESSL:\n  tmpaj=joba.1\n  m=6\n  l=overlay('L',tmpaj,m,1)\n  tmpaj=l\n  tmpsj=jobs.1\n  m=6\n  l=overlay('L',tmpsj,m,1)\n  tmpsj=l\n  allocl.1=tmpaj\n  allocl.2=joba.2\n  allocl.3=joba.3\n  scratl.1=tmpsj\n  scratl.2=jobs.2\n  scratl.3=jobs.3\n  al=4\n  sl=4\n  p#=0\n  #errsl = 0\n  dsctra = 1\n  dsctrs = 1\n  dslatot= 0\n  dslstot= 0\n  genjoba='N'\n  genjobs='N'\n  #modlaops=0\n  #modlsops=0\n  #modlasteps=0\n  #modlssteps=0\n  #totlasteps=0\n  #totlaops=0\n  #totlsops=0\n  #totlssteps=0\n  #allcljobs=1\n  #scrtljobs=1\n  say ' '\n  /*------------------- U C B  L O O P - M O D L --------------------*/\n  do x=1 to slotl.0\n    hotucb=substr(slotl.x,1,4)\n    dsctra=1\n    dsctrs=1\n    hotvol='VOL=??'\n    hottrks='AVAIL=??'\n    maxtrks='MAXNO=??'\n    hotrc='RC'\n    hotmsg=blanks\n    address linkpgm \"DRSPACE hotucb hotvol hottrks maxtrks hotrc hotmsg\"\n    if rc /= 0 | hottrks='00000000' then\n      do\n        #errsl=#errsl+1\n        pe=pe+1\n        pr.pe=' '\n        pr=pe+1\n        pr.pe='*************************************************'\n        pe=pe+1\n        pr.pe='UCB='HOTUCB' Space search error. RC='HOTRC\n        pe=pe+1\n        pr.pe='Volid='HOTVOL\n        pe=pe+1\n        pr.pe='MAX Trks in UCB='maxtrks\n        pe=pe+1\n        pr.pe='Avail Trks='HOTTRKS\n        pe=pe+1\n        pr.pe='Ermsg='HOTMSG\n        if pos('0C010009',HOTMSG) /= 0 then\n          do\n            pe=pe+1\n            pr.pe='-> UCB IS NOT ONLINE ! <-'\n          end\n        pe=pe+1\n        pr.pe='Volume WILL NOT be cleared...Process continues'\n        pe=pe+1\n        pr.pe='*************************************************'\n        pe=pe+1\n        pr.pe=' '\n        iterate\n      end\n    actual=(hottrks/maxtrks)\n    numeric digits 3\n    actual=trunc(actual * 100)\n    numeric digits\n    if actual < minpct then\n      do\n        #errsl=#errsl+1\n        /****************************************************/\n        /* ERROR CONDITION 02 - UCB has < minpct free space */\n        /****************************************************/\n        call ERRORPCT\n        iterate             /* drop vol from any processing */\n      end\n    WORKTRKS=HOTTRKS\n    pt.px=pt.px||HOTUCB||' '||HOTVOL||'  '\n    p#=p#+1\n    if p#=#pmax then\n      do\n        p#=0\n        px=px+1\n        pt.px=' '\n      end\n /* Calculate No. Extents to alloc FOR THIS UCB .......  */\n /*  MAX xtent size allowed is 3339 cyls or 50085 tracks */\n /*  MAX xtent size allowed by MVS is 65535 tracks       */\n    #xtents=worktrks/ktracks\n    #xtentsr=worktrks//ktracks\n    if #xtentsr > 0 then\n      #xtents=#xtents + 1.0\n    #xtents=trunc(#xtents)\n  /* --- ALLOCATE MOD-L code --- */\n    if genjoba='Y' then\n      do\n        genjoba='N'\n        #allcljobs=#allcljobs+1\n        #aljobctr=right(#allcljobs,4,'0')\n        #modlaops=0\n        #modlasteps=0\n        j=7\n        l=overlay(#aljobctr,tmpaj,j,4)\n        tmpaj=l\n        allocl.al=tmpaj\n        al=al+1\n        allocl.al=joba.2\n        al=al+1\n        allocl.al=joba.3\n        al=al+1\n      end\n    dropl='NO'\n    do #XTENTS\n      do y=1 to allcin.0\n        alctmp=allcin.y\n        if pos('PGM=IEF',alctmp) /= 0 then\n          do\n            if dropl='YES' then\n              iterate\n            else\n              dropl='YES'\n          end\n        if pos('.DS',alctmp) /= 0 then\n          do\n            u=pos('.DS',alctmp)\n            dscnt=right(dsctra,6,'0')\n            k=overlay(dscnt,alctmp,U+3,6)\n            dsctra=dsctra+1\n            allocl.al=k\n            alctmp=allocl.al\n            dslatot=dslatot+1\n          end\n        if pos('DRUUUU',alctmp) /= 0 then\n          do\n            u=pos('DRUUUU',ALctmp)\n            k=overlay(HOTUCB,alctmp,u+2,4)\n            allocl.al=k\n            al=al+1\n            iterate\n          end\n        if pos('SER=VVVVVV',alctmp) /= 0 then\n          do\n            u=pos('VVVVVV',alctmp)\n            k=overlay(HOTVOL,alctmp,u,6)\n            allocl.al=k\n            al=al+1\n            iterate\n          end\n        if pos('UUUUU',alctmp) /= 0 then\n          do\n            u=pos('UUUUU',alctmp)\n            k=overlay(HOTUCB,alctmp,u+1,4)\n            allocl.al=k\n            al=al+1\n            iterate\n          end\n        if pos('TTTTTTTT',alctmp) /= 0 then\n          do\n            u=pos('TTTTTTTT',alctmp)\n            if worktrks > KTRACKS then\n              do\n                worktrks=worktrks-ktracks\n                ktracks=right(ktracks,8,'0')\n                k=overlay(Ktracks,alctmp,u,8)\n              end\n            else\n              do\n                worktrks=right(worktrks,8,'0')\n                k=overlay(worktrks,alctmp,u,8)\n              end\n            allocl.al=k\n            al=al+1\n            iterate\n          end\n        allocl.al=alctmp\n        al=al+1\n      end\n      #modlaops=#modlaops+1\n      #totlaops=#totlaops+1\n    end\n    #totlasteps=#totlasteps+1\n    #modlasteps=#modlasteps+1\n    if #modlasteps >= #maxallcL then\n      genjoba='Y'\n  /* --- SCRATCH MOD-L code --- */\n  /*===============================================================*/\n    if genjobS='Y' then\n      do\n        genjobs='N'\n        #scrtljobs=#scrtljobs+1\n        #sljobctr=right(#scrtljobs,4,'0')\n        #modlsops=0\n        #modlssteps=0\n        j=7\n        l=overlay(#sljobctr,tmpsj,j,4)\n        tmpsj=l\n        scratl.sl=tmpsj\n        sl=sl+1\n        scratl.sl=jobs.2\n        sl=sl+1\n        scratl.sl=jobs.3\n        sl=sl+1\n      end\n    do y=1 to scrtin.0\n      if pos('UUUUU',scrtin.y) /= 0 then\n        do\n          u=pos('UUUUU',scrtin.y)\n          k=overlay(HOTUCB,scrtin.y,u+1,4)\n          scratl.sl=k\n          sl=sl+1\n          iterate\n        end\n      if pos('SER=VVVVVV',scrtin.y) /= 0 then\n        do\n          u=pos('VVVVVV',scrtin.y)\n          k=overlay(HOTVOL,scrtin.y,u,6)\n          scratl.sl=k\n          sl=sl+1\n          iterate\n        end\n      /* S P E C I A L */\n      if pos('SCRATCH',scrtin.y) /= 0 then\n        do #XTENTS\n          scrtmp=scrtin.y\n          if pos('VVVVVV',scrtmp) /= 0 then\n            do\n              u=pos('VVVVVV',scrtmp)\n              k=overlay(HOTVOL,scrtmp,u,6)\n              scratl.sl=k\n              scrtmp=scratl.sl\n            end\n          if pos('DRUUUU',scrtmp) /= 0 then\n            do\n              u=pos('DRUUUU',scrtmp)\n              k=overlay(HOTUCB,scrtmp,u+2,4)\n              scratl.sl=k\n              scrtmp=scratl.sl\n            end\n          if pos('.DS',scrtmp) /= 0 then\n            do\n              u=pos('.DS',scrtmp)\n              dscnt=right(dsctrs,6,'0')\n              k=overlay(dscnt,scrtmp,U+3,6)\n              scratl.sl=k\n              sl=sl+1\n              dsctrs=dsctrs+1\n              dslstot=dslstot+1\n            end\n          #modlsops=#modlsops+1\n          #totlsops=#totlsops+1\n        end\n      else\n        do\n          scratl.sl=scrtin.y\n          sl=sl+1\n        end\n    end\n    #totlssteps=#totlssteps+1\n    #modlssteps=#modlssteps+1\n    if #modlssteps >= #maxscrtl then\n      genjobs='Y'\n  end\n  if update='PROD' then\n    do\n      \"EXECIO * DISKW ALLOCL (STEM ALLOCL. FINIS)\"\n      \"EXECIO * DISKW SCRATL (STEM SCRATL. FINIS)\"\n    end\n  say ' '\n  say dashes\n  mymsg='('#allcljobs') MOD-L JOBS with ('#totlasteps') STEPS '\n  mymsg=mymsg||'with ('#totlaops') OPS created for ALLOC'\n  say mymsg\n  say dashes\n  say '    See member 'CDRSDS'('ALLOCL')'\n  say dashes\n  mymsg='('#scrtljobs') MOD-L JOBS with ('#totlssteps') STEPS '\n  mymsg=mymsg||'with ('#totlsops') OPS created for SCRAT'\n  say mymsg\n  say dashes\n  say '    See member 'CDRSDS'('SCRATL')'\n  say dashes\n  say '('slotl.0') MOD-L UCBs input to be scratched'\n  say '('#errsl') MOD-L UCBs skipped due to errors'\n  totall=slotl.0-#errsl\n  say dash7\n  say '('totall') MOD-L UCBs scheduled to be scratched'\n  say dashes\n  say '('dslatot') MOD-L scratch datasets to be allocated'\n  say '('dslstot') MOD-L scratch datasets to be scratched'\n  say ' '\n  say '/////////////////////////////////////////////////////////////'\n  say '///////////////////// E N D  M O D - L //////////////////////'\n  say '/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('#allcljobs') MOD-L JOBS with ('#totlasteps') '\n  pt.px=pt.px||'STEPS with ('#totlaops') OPS created for ALLOCATING'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='    See member 'CDRSDS'('ALLOCL')'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('#scrtljobs') MOD-L JOBS with ('#totlssteps') '\n  pt.px=pt.px||'STEPS with ('#totlsops') OPS created for SCRATCHING'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='    See member 'CDRSDS'('SCRATL')'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('slotl.0') MOD-L UCBs input to be scratched'\n  px=px+1\n  pt.px='('#errsl') MOD-L UCBs skipped due to errors'\n  px=px+1\n  pt.px=dash7\n  px=px+1\n  pt.px='('totall') MOD-L UCBs scheduled to be scratched'\n  px=px+1\n  pt.px=dashes\n  px=px+1\n  pt.px='('dslatot') MOD-L scratch datasets to be allocated'\n  px=px+1\n  pt.px='('dslstot') MOD-L scratch datasets to be scratched'\n  px=px+1\n  pt.px=' '\n  px=px+1\n  pt.px='/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px='/////////////////////// E N D  M O D - L ////////////////////'\n  px=px+1\n  pt.px='/////////////////////////////////////////////////////////////'\n  px=px+1\n  pt.px=' '\nreturn\n/*---*/\nERRORPCT:\n  pr=pe+1\n  pr.pe='*************************************************'\n  pe=pe+1\n  pr.pe='UCB='HOTUCB'  VOL='HOTVOL' Space FREE% ('actual')  '\n  pe=pe+1\n  pr.pe='UCB must have MIN. ('minpct')% space FREE B4 clearing  '\n  pe=pe+1\n  pr.pe='Volume will NOT be cleared .. Process Continues  '\n  pe=pe+1\n  pr.pe='*************************************************'\n  pe=pe+1\n  pr.pe=' '\nreturn\n/*---*/\nSHOWRPT:\n  \"EXECIO * DISKW REPORT (STEM pt. FINIS)\"\n  \"ISPEXEC BROWSE DATASET('\"uid\".\"Sysid\".SCREPORT')\"\nreturn\n/*---*/\nSHOWERR:\n  if #errs3+#errs9+#errsl=0 then\n    do\n      pe=pe+1\n      pr.pe=' *** NO ERRORS FOUND ***'\n    end\n  \"EXECIO * DISKW ERRORS (STEM pr. FINIS)\"\n  \"ISPEXEC BROWSE DATASET('\"uid\".\"Sysid\".SCERRORS')\"\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DRICK": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\x05\\x13\\x1f\\x01\\x05\\x13\\x1f\\x13\\x15\\x01\\xc6\\x01\\xc6\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-05-11T00:00:00", "modifydate": "2005-05-11T13:15:29", "lines": 454, "newlines": 454, "modlines": 0, "user": "TS0710"}, "text": "/* REXX */\n/*    C R E A T E S  I C K D S F  J C L  a t  D / R              */\n/*===============================================================*/\nmsg_status = MSG('OFF')                     /* show no alloc msgs*/\nCVTSYSAD   = D2x(C2d(Storage(10,4)) + 48)   /* Point to CVTSYSAD */\nCVTECVT    = D2X(C2d(Storage(10,4)) + 140)  /* Point to CVTECVT  */\nCVTSNAME   = D2X(C2d(Storage(10,4)) + 340)  /* Point to CVTSNAME */\nmyid=sysvar(SYSUID)                         /* obtain tso userid */\nhotdsn='NO ACTIVE DATASET'\nokdevices = \"0003\",\n            \"0009\",\n            \"000L\"\n/*==============================================================*/\nUCBPOOL3=POOL3       /* SUNGARD available 3390-MOD3 UCBs        */\nUCBPOOL9=POOL9       /* SUNGARD available 3390-MOD9 UCBs        */\nUCBPOOLL=POOLL       /* SUNGARD available 3390-MODL UCBs        */\nbump1=x2d(1)         /* ucb bumper                              */\nz3=1                 /* slot subscript - MOD3s                  */\nz9=1                 /* slot subscript - MOD9s                  */\nzL=1                 /* slot subscript - MODLs                  */\nze=1                 /* slot subscript - explicit               */\n#sg3=0               /* #SUNGARD MOD3's                         */\n#sg9=0               /* #SUNGARD MOD9's                         */\n#sgL=0               /* #SUNGARD MODL's                         */\n/*---*/\nICKIN=ICKIN          /* ICKDSF INIT JCL for test-end            */\nICKOUT=ICKOUT        /* Member name of ICKDSF input jobs        */\nADDRESS TSO \"PROFILE NOPREFIX\"  /* NEEDED for batch runs        */\n/*================== M A I N L I N E ===========================*/\ncall getsys          /* get sys id / build dsnames              */\ncall okvalues        /* display DASD & datasets involved in D/R */\ncall cleanup         /* clean up residual stuff                 */\nstartime=time()\nsay '... Executing MVS phase ... '||startime\ncall allocpool3      /* allocate    CDRS MOD3 UCB range mbr     */\ncall verify3         /* read/verify CDRS MOD3 UCB range mbr     */\ncall allocpool9      /* allocate    CDRS MOD9 UCB range mbr     */\ncall verify9         /* read/verify CDRS MOD9 UCB range mbr     */\ncall allocpoolL      /* allocate    CDRS MODL UCB range mbr     */\ncall verifyL         /* read/verify CDRS MODL UCB range mbr     */\ncall bldslot3        /* create UCB table - MOD3s                */\ncall bldslot9        /* create UCB table - MOD9s                */\ncall bldslotL        /* create UCB table - MODLs                */\ncall movetabs        /* merge all tables into 1                 */\ncall allocick\ncall genick\nexit                 /* E X I T                                 */\n/*--------------------------------------------------------------*/\n/*========================== S U B R O U T I N E S ==================*/\n/*---*/\nGETSYS:\n  do forever\n    say 'Please enter your target SYSTEM name (ie; SYSA, SYSJ, etc.)'\n    parse upper pull Sysname\n    if datatype(Sysname,A) /= 1 then\n      do\n        say '-- RESPONSE invalid --'\n        say '-- REENTER --'\n        say ' '\n        iterate\n      end\n  CDRSDS ='DISASTER.MVS.'Sysname'.INSTLIB'\n  return\n/*---*/\nOKVALUES:\n  say 'Datasets to be modified by this REXX IS :'\n  say CDRSDS\n  say ' '\n  say 'SUNGARD 3390 MOD-3 UCB used are :'\n  call allocpool3\n  call read3\n  say 'SUNGARD 3390 MOD-9 UCB used are :'\n  call allocpool9\n  call read9\n  say 'SUNGARD 3390 MOD-L UCB used are :'\n  call allocpoolL\n  call readL\n  say 'Are these values correct ? (Y/N)'\n  do forever\n    parse upper pull YN\n    if YN /= 'Y' then\n    if YN /= 'N' then\n      do\n        say '-- RESPONSE invalid --'\n        say '-- REENTER --'\n        say ' '\n        iterate\n      end\n   if yn = 'N' then\n     do\n       say 'DRICK cancelled - fix and rerun'\n       call cleanup\n       exit\n     end\n   else\n     do\n       say 'Values accepted'\n       say ' '\n       call cleanup\n       return\n     end\n  end\nreturn\n/*---*/\nALLOCPOOL3:\n  ADDRESS TSO\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL3\"))\"\n  \"ALLOC FI(CDRSDS) DA(\"CDRSDS\"(\"UCBPOOL3\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('UCBPOOL3') NOT ALLOCATED .... Check error'\n      exit\n    end\nreturn\n/*---*/\nREAD3:\n  \"EXECIO * DISKR CDRSDS (STEM read3. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL3\"))\"\n  do x=1 to read3.0\n    if substr(read3.x,1,1) ='*' then\n      iterate\n    say read3.x\n  end\n  drop read3.\nreturn\n/*---*/\nALLOCPOOL9:\n  ADDRESS TSO\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL9\"))\"\n  \"ALLOC FI(CDRSDS) DA(\"CDRSDS\"(\"UCBPOOL9\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('UCBPOOL9') NOT ALLOCATED .... Check error'\n      exit\n    end\nreturn\n/*---*/\nREAD9:\n  \"EXECIO * DISKR CDRSDS (STEM read9. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL9\"))\"\n  do x=1 to read9.0\n    if substr(read9.x,1,1) ='*' then\n      iterate\n    say read9.x\n  end\n  drop read9.\nreturn\n/*---*/\nALLOCPOOLL:\n  ADDRESS TSO\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOLL\"))\"\n  \"ALLOC FI(CDRSDS) DA(\"CDRSDS\"(\"UCBPOOLL\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('UCBPOOLL') NOT ALLOCATED .... Check error'\n      exit\n    end\nreturn\n/*---*/\nREADL:\n  \"EXECIO * DISKR CDRSDS (STEM readL. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOLL\"))\"\n  do x=1 to readL.0\n    if substr(readL.x,1,1) ='*' then\n      iterate\n    say readL.x\n  end\n  drop readL.\nreturn\n/*---*/\nVERIFY3:\n  \"EXECIO * DISKR CDRSDS (STEM CDRS3. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL3\"))\"\n  hotdsn=CDRSDS'('UCBPOOL3')'\n  do x=1 to CDRS3.0\n    if substr(cdrs3.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrs3.x,1,4)\n    hirange=substr(cdrs3.x,6,4)\n    if datatype(lorange,'x') /= 1 then\n      do\n        call rangerr3\n        exit\n      end\n    if datatype(hirange,'x') /= 1 then\n      do\n        call rangerr3\n        exit\n      end\n  end\nreturn\n/*---*/\nVERIFY9:\n  \"EXECIO * DISKR CDRSDS (STEM CDRS9. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL9\"))\"\n  hotdsn=CDRSDS'('UCBPOOL9')'\n  do x=1 to CDRS9.0\n    if substr(cdrs9.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrs9.x,1,4)\n    hirange=substr(cdrs9.x,6,4)\n    if datatype(lorange,'x') /= 1 then\n      do\n        call rangerr9\n        exit\n      end\n    if datatype(hirange,'x') /= 1 then\n      do\n        call rangerr9\n        exit\n      end\n  end\nreturn\n/*---*/\nVERIFYL:\n  \"EXECIO * DISKR CDRSDS (STEM CDRSL. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOLL\"))\"\n  hotdsn=CDRSDS'('UCBPOOLL')'\n  do x=1 to CDRSL.0\n    if substr(cdrsL.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrsL.x,1,4)\n    hirange=substr(cdrsL.x,6,4)\n    if datatype(lorange,'x') /= 1 then\n      do\n        call rangerrL\n        exit\n      end\n    if datatype(hirange,'x') /= 1 then\n      do\n        call rangerrL\n        exit\n      end\n  end\nreturn\n/*---*/\nBLDSLOT3:\n  do x=1 to CDRS3.0\n    if substr(cdrs3.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrs3.x,1,4)\n    hirange=substr(cdrs3.x,6,4)\n    lorangex=x2d(lorange)\n    hirangex=x2d(hirange)\n    slotrang=(hirangex-lorangex) + 1\n    #sg3=#sg3+slotrang\n    currucb=x2d(lorange)\n    do y=1 to slotrang\n      currucbd=d2x(currucb)\n      currucbd=right(currucbd,4,0)\n      slot3.z3=currucbd||'VVVVVV'||'03UI'\n      z3=z3+1\n      currucb=currucb + bump1\n    end\n  end\n  slot3.0=z3-1\n  drop cdrs3.\nreturn\n/*---*/\nBLDSLOT9:\n  do x=1 to CDRS9.0\n    if substr(cdrs9.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrs9.x,1,4)\n    hirange=substr(cdrs9.x,6,4)\n    lorangex=x2d(lorange)\n    hirangex=x2d(hirange)\n    slotrang=(hirangex-lorangex) + 1\n    #sg9=#sg9+slotrang\n    currucb=x2d(lorange)\n    do y=1 to slotrang\n      currucbd=d2x(currucb)\n      currucbd=right(currucbd,4,0)\n      slot9.z9=currucbd||'VVVVVV'||'09UI'\n      z9=z9+1\n      currucb=currucb + bump1\n    end\n  end\n  slot9.0=z9-1\n  drop cdrs9.\nreturn\n/*---*/\nBLDSLOTL:\n  do x=1 to CDRSL.0\n    if substr(cdrsL.x,1,1) ='*' then\n      iterate\n    lorange=substr(cdrsL.x,1,4)\n    hirange=substr(cdrsL.x,6,4)\n    lorangex=x2d(lorange)\n    hirangex=x2d(hirange)\n    slotrang=(hirangex-lorangex) + 1\n    #sgL=#sgL+slotrang\n    currucb=x2d(lorange)\n    do y=1 to slotrang\n      currucbd=d2x(currucb)\n      currucbd=right(currucbd,4,0)\n      slotL.zL=currucbd||'VVVVVV'||'0LUI'\n      zL=zL+1\n      currucb=currucb + bump1\n    end\n  end\n  slotL.0=zL-1\n  drop cdrsL.\nreturn\n/*---*/\nMOVETABS:\n  xd=1\n  do x3=1 to slot3.0\n    DASD.xd = slot3.x3\n    xd=xd+1\n  end\n  do x9=1 to slot9.0\n    DASD.xd = slot9.x9\n    xd=xd+1\n  end\n  do xL=1 to slotL.0\n    DASD.xd = slotL.xL\n    xd=xd+1\n  end\n  DASD.0=xd-1\n  drop slot3.\n  drop slot9.\n  drop slotL.\nreturn\n/*---*/\nCLEANUP:\n  ADDRESS TSO\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL3\"))\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOL9\"))\"\n  \"FREE DA(\"CDRSDS\"(\"UCBPOOLL\"))\"\n  \"FREE DA(\"myid\".CD.SYSIN) DELETE\"\n  \"FREE DA(\"myid\".CD.SYSPRINT) DELETE\"\nreturn\n/*---*/\nRANGERR3:\n  say cdrs3.x\n  say 'CDRS UCB range line has incorrect format'\n  say 'Dsname = 'hotdsn\n  call cleanup\nreturn\n/*---*/\nRANGERR9:\n  say cdrs9.x\n  say 'CDRS UCB range line has incorrect format'\n  say 'Dsname = 'hotdsn\n  call cleanup\nreturn\n/*---*/\nRANGERRL:\n  say cdrsL.x\n  say 'CDRS UCB range line has incorrect format'\n  say 'Dsname = 'hotdsn\n  call cleanup\nreturn\n/*===============================================================*/\n/*                  CLOBBER ROUTINES                             */\n/*===============================================================*/\n/*---*/\nALLOCICK:\n  ADDRESS TSO\n  \"FREE DA(\"CDRSDS\"(\"ICKIN\"))\"\n  \"ALLOC FI(ICKIN) DA(\"CDRSDS\"(\"ICKIN\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('ICKIN') NOT ALLOCATED .... Check error'\n      exit\n    end\n  \"FREE DA(\"CDRSDS\"(\"ICKOUT\"))\"\n  \"ALLOC FI(ICKOUT) DA(\"CDRSDS\"(\"ICKOUT\")) SHR\"\n  if rc \u00ac= 0 then\n    do\n      say CDRSDS'('ICKOUT') NOT ALLOCATED .... Check error'\n      exit\n    end\nreturn\n/*---*/\nGENICK:\n  #dsfjobs=1\n  #dsfsteps=0\n  #maxdsf=30    /* # ickdsf steps per job - #DASD/JOB */\n  #maxdsfj=500  /* Max # ICKDSF JOBS - 01/31/03       */\n  \"EXECIO * DISKR ICKIN (STEM ick. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"ICKIN\"))\"\n  jc.1=ick.1\n  jc.2=ick.2\n  jc.3=ick.3\n  jc.4=ick.4\n  jc.5=ick.5\n  jc.6=ick.6\n  iout.1=jc.1\n  iout.2=jc.2\n  iout.3=jc.3\n  iout.4=jc.4\n  iout.5=jc.5\n  iout.6=jc.6\n  posi=7\n  poso=7\n  do x=1 to dasd.0 by 1\n    do y=7 to ick.0 by 1\n      if #dsfsteps = #maxdsf then\n        do\n          #dsfsteps=0\n          #dsfjobs=#dsfjobs+1\n          if #dsfjobs > #maxdsfj  then /* max jobs exceeded ? 01/31/03 */\n            do\n              say 'Have exceeded MAX No. DSFINIT JOBS'\n              say ' used when leaving CDRS, max='#maxdsfj      /*01/31/03*/\n              say 'Increase #MAXDSF or #MAXDSFJ value in REXX' /*01/31/03*/\n              say 'REXX Terminates . . .'\n              exit\n            end\n          a=9\n          j=overlay(#dsfjobs,JC.1,a,2)\n          iout.poso=j\n          poso=poso+1\n          iout.poso=jc.2\n          poso=poso+1\n          iout.poso=jc.3\n          poso=poso+1\n          iout.poso=jc.4\n          poso=poso+1\n          iout.poso=jc.5\n          poso=poso+1\n          iout.poso=jc.6\n          poso=poso+1\n        end\n        if pos('UUUU',ick.posi) /= 0 then\n          do\n            hotucb=substr(dasd.x,1,4)\n            u=pos('UUUU',ick.posi)\n            k=overlay(hotucb,ick.posi,u,4)\n            iout.poso=k\n            posi=posi+1\n            poso=poso+1\n            if posi > ick.0 then\n              posi=7\n          end\n        else\n          do\n            iout.poso=ick.posi\n            posi=posi+1\n            poso=poso+1\n            if posi > ick.0 then\n              posi=7\n          end\n    end\n    #dsfsteps=#dsfsteps+1\n  end\n  say #dsfjobs 'ICKDSF clear Jobs created in 'CDRSDS'('\"ICKOUT\"')'\n  iout.0=poso-1\n  \"EXECIO * DISKW ICKOUT (STEM IOUT. FINIS)\"\n  \"FREE DA(\"CDRSDS\"(\"ICKOUT\"))\"\n  drop iout.\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DRSPACE": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x01\\x04%\\x1f\\x01\\x04%\\x1f\\x16\\x15\\x01B\\x01B\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-07T00:00:00", "modifydate": "2004-09-07T16:15:22", "lines": 322, "newlines": 322, "modlines": 0, "user": "TS0710"}, "text": "         TITLE 'DRSPACE - CALC AVAIL #TRKS IN A DASD UCB'\n**********************************************************************\n* DRSPACE IS USED AT THE END OF D/R TO CLEAR ALL VOLS TO LO-VALS     *\n* ------------------------------------------------------------       *\n*   ARGS PASSED : ARG1 = UNPACKED 4 BYTE UCB,                 (INPUT)*\n*                 ARG2 = UNPACKED 6 BYTES VOLSER              (OUTPT)*\n*                 ARG3 = UNPACKED 8 BYTES NUMBER (AVAIL TRKS) (OUTPT)*\n*                 ARG4 = UNPACKED 8 BYTES MAX TRACKS IN UCB   (OUTPT)*\n*                 ARG5 = UNPACKED 2 BYTE RETURN CODE          (OUTPT)*\n*                 ARG6 = 80 BYTE ERROR MESSAGE                (OUTPT)*\n* A UCB ADDR (4 BYTES) IS PASSED. THE PROGRAM CALCULATES # AVAILABLE *\n* TRACKS IN THE VOLUME BY :                                          *\n*  > FINDING MAX AVAILABLE TRACKS                                    *\n*  > MULTIPLYING MAX AVAIL CYL * TRACKS/CYL                          *\n*  > ADDING ANY REMAINING AVAIL TRACKS                               *\n* THE RESULTS PASSED BACK ARE :                                      *\n*     ARG2 = VOLSER                                                  *\n*     ARG3 = AVAILABLE TRACKS                                        *\n*     ARG4 = MAXIMUM   TRACKS                                        *\n*     ARG5 = RETURN CODE                                             *\n*     ARG6 = ERROR MESSAGE                                           *\n**********************************************************************\nDRSPACE  CSECT\n         USING *,R15\n         B     AROUND\n         DC    CL8'DRSPACE'\n         DC    CL9'&SYSDATE'\n         DC    CL5'&SYSTIME'\nAROUND   DS    0H\n         STM   R14,R12,12(R13)\n         ST    R13,SAVEAREA+4\n         LA    R7,SAVEAREA\n         ST    R7,8(R13)\n         LA    R13,SAVEAREA\n         DROP  R15\n         USING SAVEAREA,R13\n         USING UCB,R8\n         B     BEGIN\nSAVEAREA DC    18F'0'\nBEGIN    DS    0H\n*\n******** LM    R2,R7,TSTARGS           ********** TEST ONLY **********\n         LM    R2,R7,0(R1)             R2=UCB, R3=VOL, R4=AVAIL TRKS\n         STM   R2,R7,ARGS              R5=MAXTRKS, R6=RC, R7=ERRMSG\n         MVC   HOTUCBD(4),0(R2)        SAVE UCB - DECIMAL\n         MVC   HOTUCBB(4),0(R2)        SAVE UCB - BIN\n         TRT   HOTUCBD(4),TABLE1       VALIDATE UCB\n         BZ    UCBVAL                  ITS OK\n         BAL   R11,UCBUNVAL            ITS NOT..ERROR OUT\nUCBVAL   EQU   *\n         TR    HOTUCBB(4),TABLE2       CUUU (XYXYXYXY=0Y0Y0Y0Y)\n         PACK  WORK3(3),HOTUCBB(5)     (YYYY??)\n         MVC   HOTUNIT(2),WORK3\n         BAL   R11,GETUCB              FIND COPY OF THE U C B\n*****\n*   GET UCB # TRKS/ CYL\n*****\n          DEVTYPE ,,UCBLIST=(UCBADDR,1),MF=(E,DEVTYPE2)\n          LTR   R15,R15\n          BZ    DEVTYPOK\n          BAL   R11,DEVTPERR\nDEVTYPOK  EQU   *\n          LH    R1,DEVCC               R1 = MAX CYLS\n          MH    R1,DEVHH               R1 = MAX CYLS * TRKS/CYL=MAX TRK\n          CVD   R1,DOUB                MAKE VISIBLE\n          UNPK  WORK9(9),DOUB+3(5)\n          OI    WORK9+8,240            DITTO\n          L     R1,ARGMAX\n          MVC   0(8,R1),WORK9+1        MAX TRACKS BACK TO CALLER\n*****\n*   GET FREE SPACE INFO FOR UCB\n*****\n         LSPACE F4DSCB=DSCB4,                                          X\n               UCB=(R8),                                               X\n               EXPMSG=EXPMSG,                                          X\n               SMF=NONE,                                               X\n               MF=I\n         LTR   R15,R15                 LSPACE OK ?\n         BZ    LSPACEOK                YES\n         BAL   R11,LSPACERR            NO...ERROR OUT\nLSPACEOK EQU   *\n         PACK  CYLPAK(6),FREECYLS(6)   FREE CYLS\n         PACK  TRKPAK(4),FREETRKS(6)   FREE TRKS\n         LH    R1,DEVHH                R1=#TRKS/CYL\n         CVD   R1,DOUB                 TRKS/CYL IN DECIMAL\n         MP    CYLPAK(6),DOUB+6(2)     FREE CYLS * TRKS/CYL = FREE TRKS\n         AP    CYLPAK(6),TRKPAK(4)     TACK ON ANY SUB-CYL FREE TRACKS\n         UNPK  TOTTRKS(9),CYLPAK+1(5)  MAKE READABLE\n         OI    TOTTRKS+8,X'F0'         MAKE PRETTY\n         L     R1,ARGTRKS              RETURN AVAIL TRACKS TO CALLER\n         MVC   0(8,R1),TOTTRKS+1       *\n         B     EXIT0                   GOBACK - NORMALLY\n         EJECT\n***********************************************************************\n*                      S U B R O U T I N E S                          *\n***********************************************************************\n         SPACE\n*****\n* FIND D/R UCB IN THE SYSTEM\n*****\n         SPACE\n         DC    CL8'GETUCB',F'0'\nGETUCB   ST    R11,*-4\n         L     R8,=A(UCBAREA)          R8=A(UCB)\nUCBLOOP  EQU   *\n         PUSH  PRINT\n         PRINT GEN\n         UCBSCAN COPY,                                                 X\n               WORKAREA=UCBWORK,                                       X\n               UCBAREA=UCBAREA,                                        X\n               DEVN=0,                                                 X\n               DYNAMIC=YES,                                            X\n               RANGE=ALL,                                              X\n               DEVCLASS=DASD\n         POP   PRINT\n         LTR   R15,R15                 END OF DASD DEVICES ?\n         BNZ   UCBNFND                 YES...\n         CLC   UCBCHAN(2),HOTUNIT      IS THIS THE RIGHT UCB ?\n         BE    UCBHIT                  YES...\n         B     UCBLOOP                 NO..GET NEXT ONE\nUCBNFND  EQU   *\n         BAL   R11,UCBNF               UCB NOT FOUND .. ERROR OUT\nUCBHIT   EQU   *\n         L     R1,ARGVOL\n         MVC   0(6,R1),UCBVOLI         VOLSER TO USER\n         L     R11,GETUCB-4\n         BALR  R11,R11\n*****\n* EXIT0 - NORMAL RC=0 RETURN\n*****\nEXIT0    EQU   *\n         XR    R15,R15\n         B     EXIT\n*****\n* EXIT8 - ABNORMAL RC=8 RETURN\n*****\nEXIT8    EQU   *\n         LA    R15,8\n         B     EXIT\n*****\n* EXIT - COMMON EXIT POINT\n*****\nEXIT     EQU   *\n         CVD   R15,DOUB\n         UNPK  MYRC(3),DOUB+6(2)\n         OI    MYRC+2,X'F0'\n         L     R1,ARGRC\n         MVC   0(2,R1),MYRC+1\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n         SPACE 3\n*****\n* UCBUNVAL - INVALID UCB PASSED TO DRSPACE\n*****\n         DC    CL8'UCBUNVAL',F'0'\nUCBUNVAL ST    R11,*-4\n         MVC   UNVALMSG+4(4),HOTUCBD\n         L     R1,ARGMSG\n         MVC   0(L'UNVALMSG,R1),UNVALMSG\n         B     EXIT8\n         SPACE 3\n*****\n* UCBNF - PASSED UCB NOT FOUND\n*****\n         DC    CL8'UCBNF',F'0'\nUCBNF    ST    R11,*-4\n         MVC   UCBNFMSG+4(4),HOTUCBD\n         L     R1,ARGMSG\n         MVC   0(L'UCBNFMSG,R1),UCBNFMSG\n         B     EXIT8\n         SPACE 3\n*****\n* DEVTPERR - ERROR ISSUING DEVTYPE MACRO\n*****\n         DC    CL8'DEVTPERR',F'0'\nDEVTPERR ST    R11,*-4\n         MVC   DEVTPMSG+4(4),HOTUCBD\n         CVD   R15,DOUB\n         UNPK  WORK7(7),DOUB+5(4)\n         MVZ   WORK7(7),=7X'00'\n         TR    WORK7(7),TABLE0\n         MVC   DEVTPMSG+26(4),WORK7+1      RETURN CODE\n         CVD   R0,DOUB\n         UNPK  WORK7(7),DOUB+5(4)\n         MVZ   WORK7(7),=7X'00'\n         TR    WORK7(7),TABLE0\n         MVC   DEVTPMSG+34(4),WORK7+1      REASON CODE\n         MVC   0(L'DEVTPMSG,R5),DEVTPMSG\n         L     R1,ARGMSG\n         MVC   0(L'DEVTPMSG,R1),DEVTPMSG   ERMSG TO CALLER\n         B     EXIT8\n*****\n* LSPACERR - ERROR ISSUING LSPACE MACRO\n*****\n         DC    CL8'LSPACERR',F'0'\nLSPACERR ST    R11,*-4\n         MVC   LSPACMSG+4(4),HOTUCBD\n         CVD   R15,DOUB\n         UNPK  WORK7(7),DOUB+5(4)\n         MVZ   WORK7(7),=7X'00'\n         TR    WORK7(7),TABLE0\n         MVC   LSPACMSG+25(4),WORK7+1      RETURN CODE\n         ST    R0,WORK0\n         UNPK  WORK9(9),WORK0(5)\n         MVZ   WORK9(8),=8X'00'\n         TR    WORK9(8),TABLE0\n         MVC   LSPACMSG+33(8),WORK9        REASON CODE\n         L     R1,ARGMSG\n         MVC   0(L'LSPACMSG,R1),LSPACMSG\n         B     EXIT8\n         SPACE 5\n         LTORG\n         EJECT\n***********************************************************************\n*                      W O R K I N G   S T O R A G E                  *\n***********************************************************************\n         SPACE 3\nHOTUCBD  DC    CL4'????'\nHOTUCBB  DC    CL4'????'\nHOTUNIT  DC    H'0'\nDOUB     DS    D\nWORK0    DS    F\n         DC    X'0F'         KEEP THIS HERE\nWORK3    DS    CL3\nWORK7    DS    CL7\nWORK9    DS    CL9\nCYLPAK   DS    6P\nTRKPAK   DS    4P\nTOTTRKS  DS    9P            TOTAL #TRACKS THIS DEVICE\nMYRC     DS    CL3\nARGS     DS    6F\n         ORG   ARGS\nARGUCB   DS    F             A(CALLER UCB)\nARGVOL   DS    F             A(CALLER UCB VOLSER)\nARGTRKS  DS    F             A(CALLER TOT TRKS)\nARGMAX   DS    F             A(CALLER MAX TRKS)\nARGRC    DS    F             A(CALLER RC)\nARGMSG   DS    F             A(CALLER ERRMSG)\nUCBADDR  DC    A(UCBAREA)\nUCBAREA  DC    12F'0'        UCB COPY\nUCBWORK  DC    XL100'00'\nUCBNAME4 DS    CL5\nDEVTYPE2 DEVTYPE ,(DEVINFO,6*4),UCBLIST=YES,MF=L\nDEVINFO  DC    6F'0'\n         ORG   DEVINFO+8\nDEVCC    DS    H             # PHYSICAL CYLINDERS\nDEVHH    DS    H             # TRACKS / CYLINDER\n         ORG\nDSCB4    DC    XL96'00'\n*****\n* FREE SPACE INFO\n*****\nEXPMSG   DC    XL40'00'\n         ORG   EXPMSG\n         DS    CL6      SPACE=\nFREECYLS DS    CL6      CCCCCC\n         DS    C        ,\nFREETRKS DS    CL6      HHHHHH\n         DS    C        ,\nFREEXTNT DS    CL6      EEEEEE\n         DS    C        /\nLARGCYL  DS    CL6      CCCCCC\n         DS    C        ,\nLARGTRK  DS    CL6      HHHHHH\n*\n***** ERROR MESSAGES *****\nUNVALMSG DC    C'UCB XXXX VALUE IS INVALID'\nUCBNFMSG DC    C'UCB XXXX NOT FOUND IN SYSTEM'\nDEVTPMSG DC    C'UCB XXXX DEVTYPE ERROR,RC=XXXX,RS=XXXX'\nLSPACMSG DC    C'UCB XXXX LSPACE ERROR,RC=XXXX,RS=XXXXXXXX'\n***************************\n* TEST ONLY ***************\nTSTARGS  DC    A(TSTUCB,TSTVOL,TSTATRKS,TSTMTRKS,TSTRC,TSTMSG)\nTSTUCB   DC    C'3107'\nTSTVOL   DC    C'VOL=??'\nTSTATRKS DC    C'AVAIL=??'\nTSTMTRKS DC    C'MAXNO=??'\nTSTRC    DC    C'??'\nTSTMSG   DC    80C' '\n***************************\nTABLE0   DC    C'0123456789ABCDEF'\n*\nTABLE1   DS    0CL256\n         DC    193X'FF'\n         DC    6X'00'        A-F\n         DC    41X'FF'\n         DC    10X'00'       0-9\n         DC    6X'FF'\n*\nTABLE2   DS    0CL256\n         DC    193X'FF'\n         DC    XL6'0A0B0C0D0E0F'             A-F\n         DC    41X'FF'\n         DC    XL10'00010203040506070809'    0-9\n         DC    6X'FF'\n         SPACE 3\n***********************************************************************\n*                      D S E C T S                                    *\n***********************************************************************\n         SPACE 3\nUCB      DSECT\n         IEFUCBOB\n***\n*   REGISTER EQUATES\n***\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICKIN": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x10\\x01\\x05\\x13\\x1f\\x01\\x05\\x13\\x1f\\x13\\x18\\x00\\t\\x00\\t\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-05-11T00:00:00", "modifydate": "2005-05-11T13:18:10", "lines": 9, "newlines": 9, "modlines": 0, "user": "TS0710"}, "text": "//YOURJOB  JOB (XXXX,XXXX),'XXXXXXXXXXXXXXXXXXXX',\n//         CLASS=D,NOTIFY=XXXXXX,\n//         MSGCLASS=X\n//DSF1     EXEC PGM=ICKDSF\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n       INIT  UNITADDRESS(UUUU) -\n             VOLID(SGUUUU) NOVERIFY -\n             NOINDEX  VTOC(0,1,1)  PURGE   MAP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MODLALLC": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x06\\x01\\x04\\x18\\x9f\\x01\\x04#o\\x08@\\x00\\n\\x00\\n\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2004-07-07T00:00:00", "modifydate": "2004-08-23T08:40:06", "lines": 10, "newlines": 10, "modlines": 0, "user": "TS0710"}, "text": "//*\n//UUUUU   EXEC PGM=IEFBR14\n//DD1     DD   DSN=IBMUSER.DRUUUU.DSNNNNNN,\n//             DSORG=PS,\n//             DISP=(NEW,KEEP),\n//             VOL=SER=VVVVVV,\n//             SPACE=(TRK,(TTTTTTTT)),\n//             RECFM=F,\n//             BLKSIZE=27998,\n//             LRECL=27998\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MODLSCRT": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x12\\x01\\x04\\x18\\x9f\\x01\\x04#o\\x08@\\x00\\x07\\x00\\n\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2004-07-07T00:00:00", "modifydate": "2004-08-23T08:40:12", "lines": 7, "newlines": 10, "modlines": 0, "user": "TS0710"}, "text": "//*\n//UUUUU    EXEC PGM=IEHPROGM\n//SYSPRINT DD SYSOUT=*\n//DD1      DD VOL=SER=VVVVVV,DISP=SHR,UNIT=3390\n//SYSIN    DD *\n  SCRATCH DSNAME=IBMUSER.DRUUUU.DSNNNNNN,VOL=3390=VVVVVV\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "POOLL": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x05\\x01\\x04\\x04/\\x01\\x06\\x02\\x7f\\x08$\\x00\\x1f\\x00\\x02\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2004-02-11T00:00:00", "modifydate": "2006-01-27T08:24:05", "lines": 31, "newlines": 2, "modlines": 0, "user": "TS0710"}, "text": "* SUNGARD (3390-L) DASD UCB RANGES AVAILABLE\n6A00-6A07\n6B00-6B07\n6C00-6C07\n6D00-6D07\n6E00-6E07\n6F00-6F07\n7000-7007\n7100-7107\n7200-7207\n7300-7307\n7400-7407\n7500-7507\n7600-7607\n7700-7707\n7800-7807\n7900-7907\n7A00-7A07\n7B00-7B07\n7C00-7C07\n7D00-7D07\n7E00-7E07\n7F00-7F07\n8000-8007\n8100-8107\n8200-8207\n8300-8307\n8400-8407\n8500-8507\n8600-8607\n8700-8707\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "POOL3": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01.\\x00\\x12\\x00\\x99\\x07\\x0f\\x01\\x06\\x02\\x7f\\x08$\\x00\\x13\\x00\\x07\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.46", "flags": 0, "createdate": "1999-03-11T00:00:00", "modifydate": "2006-01-27T08:24:12", "lines": 19, "newlines": 7, "modlines": 0, "user": "TS0710"}, "text": "* SUNGARD (3390-3) DASD UCB RANGES AVAILABLE\n4000-4027\n4100-4127\n4200-4227\n4300-4327\n4400-4427\n4500-4527\n4600-4627\n4700-4727\n4800-4827\n4900-4927\n4A00-4A27\n4B00-4B27\n4C00-4C27\n4D00-4D27\n4E00-4E27\n4F00-4F27\n5000-5027\n5100-5126\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "POOL9": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00\"\\x00\\x99\\x07\\x0f\\x01\\x06\\x02\\x7f\\x08$\\x00\\x19\\x00\\x03\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "1999-03-11T00:00:00", "modifydate": "2006-01-27T08:24:22", "lines": 25, "newlines": 3, "modlines": 0, "user": "TS0710"}, "text": "* SUNGARD (3390-9) DASD UCB RANGES AVAILABLE\n5200-520B\n5300-530B\n5400-540B\n5500-550B\n5600-560B\n5700-570B\n5800-580B\n5900-590B\n5A00-5A0B\n5B00-5B0B\n5C00-5C0B\n5D00-5D0B\n5E00-5E0B\n5F00-5F0B\n6000-600B\n6100-610B\n6200-620B\n6300-630B\n6400-640B\n6500-650B\n6600-660B\n6700-670B\n6800-680B\n6900-690B\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT737/FILE737.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT737", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}