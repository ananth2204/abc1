/* REXX */
/*    C R E A T E S  I C K D S F  J C L  a t  D / R              */
/*===============================================================*/
msg_status = MSG('OFF')                     /* show no alloc msgs*/
CVTSYSAD   = D2x(C2d(Storage(10,4)) + 48)   /* Point to CVTSYSAD */
CVTECVT    = D2X(C2d(Storage(10,4)) + 140)  /* Point to CVTECVT  */
CVTSNAME   = D2X(C2d(Storage(10,4)) + 340)  /* Point to CVTSNAME */
myid=sysvar(SYSUID)                         /* obtain tso userid */
hotdsn='NO ACTIVE DATASET'
okdevices = "0003",
            "0009",
            "000L"
/*==============================================================*/
UCBPOOL3=POOL3       /* SUNGARD available 3390-MOD3 UCBs        */
UCBPOOL9=POOL9       /* SUNGARD available 3390-MOD9 UCBs        */
UCBPOOLL=POOLL       /* SUNGARD available 3390-MODL UCBs        */
bump1=x2d(1)         /* ucb bumper                              */
z3=1                 /* slot subscript - MOD3s                  */
z9=1                 /* slot subscript - MOD9s                  */
zL=1                 /* slot subscript - MODLs                  */
ze=1                 /* slot subscript - explicit               */
#sg3=0               /* #SUNGARD MOD3's                         */
#sg9=0               /* #SUNGARD MOD9's                         */
#sgL=0               /* #SUNGARD MODL's                         */
/*---*/
ICKIN=ICKIN          /* ICKDSF INIT JCL for test-end            */
ICKOUT=ICKOUT        /* Member name of ICKDSF input jobs        */
ADDRESS TSO "PROFILE NOPREFIX"  /* NEEDED for batch runs        */
/*================== M A I N L I N E ===========================*/
call getsys          /* get sys id / build dsnames              */
call okvalues        /* display DASD & datasets involved in D/R */
call cleanup         /* clean up residual stuff                 */
startime=time()
say '... Executing MVS phase ... '||startime
call allocpool3      /* allocate    CDRS MOD3 UCB range mbr     */
call verify3         /* read/verify CDRS MOD3 UCB range mbr     */
call allocpool9      /* allocate    CDRS MOD9 UCB range mbr     */
call verify9         /* read/verify CDRS MOD9 UCB range mbr     */
call allocpoolL      /* allocate    CDRS MODL UCB range mbr     */
call verifyL         /* read/verify CDRS MODL UCB range mbr     */
call bldslot3        /* create UCB table - MOD3s                */
call bldslot9        /* create UCB table - MOD9s                */
call bldslotL        /* create UCB table - MODLs                */
call movetabs        /* merge all tables into 1                 */
call allocick
call genick
exit                 /* E X I T                                 */
/*--------------------------------------------------------------*/
/*========================== S U B R O U T I N E S ==================*/
/*---*/
GETSYS:
  do forever
    say 'Please enter your target SYSTEM name (ie; SYSA, SYSJ, etc.)'
    parse upper pull Sysname
    if datatype(Sysname,A) /= 1 then
      do
        say '-- RESPONSE invalid --'
        say '-- REENTER --'
        say ' '
        iterate
      end
  CDRSDS ='DISASTER.MVS.'Sysname'.INSTLIB'
  return
/*---*/
OKVALUES:
  say 'Datasets to be modified by this REXX IS :'
  say CDRSDS
  say ' '
  say 'SUNGARD 3390 MOD-3 UCB used are :'
  call allocpool3
  call read3
  say 'SUNGARD 3390 MOD-9 UCB used are :'
  call allocpool9
  call read9
  say 'SUNGARD 3390 MOD-L UCB used are :'
  call allocpoolL
  call readL
  say 'Are these values correct ? (Y/N)'
  do forever
    parse upper pull YN
    if YN /= 'Y' then
    if YN /= 'N' then
      do
        say '-- RESPONSE invalid --'
        say '-- REENTER --'
        say ' '
        iterate
      end
   if yn = 'N' then
     do
       say 'DRICK cancelled - fix and rerun'
       call cleanup
       exit
     end
   else
     do
       say 'Values accepted'
       say ' '
       call cleanup
       return
     end
  end
return
/*---*/
ALLOCPOOL3:
  ADDRESS TSO
  "FREE DA("CDRSDS"("UCBPOOL3"))"
  "ALLOC FI(CDRSDS) DA("CDRSDS"("UCBPOOL3")) SHR"
  if rc ¬= 0 then
    do
      say CDRSDS'('UCBPOOL3') NOT ALLOCATED .... Check error'
      exit
    end
return
/*---*/
READ3:
  "EXECIO * DISKR CDRSDS (STEM read3. FINIS)"
  "FREE DA("CDRSDS"("UCBPOOL3"))"
  do x=1 to read3.0
    if substr(read3.x,1,1) ='*' then
      iterate
    say read3.x
  end
  drop read3.
return
/*---*/
ALLOCPOOL9:
  ADDRESS TSO
  "FREE DA("CDRSDS"("UCBPOOL9"))"
  "ALLOC FI(CDRSDS) DA("CDRSDS"("UCBPOOL9")) SHR"
  if rc ¬= 0 then
    do
      say CDRSDS'('UCBPOOL9') NOT ALLOCATED .... Check error'
      exit
    end
return
/*---*/
READ9:
  "EXECIO * DISKR CDRSDS (STEM read9. FINIS)"
  "FREE DA("CDRSDS"("UCBPOOL9"))"
  do x=1 to read9.0
    if substr(read9.x,1,1) ='*' then
      iterate
    say read9.x
  end
  drop read9.
return
/*---*/
ALLOCPOOLL:
  ADDRESS TSO
  "FREE DA("CDRSDS"("UCBPOOLL"))"
  "ALLOC FI(CDRSDS) DA("CDRSDS"("UCBPOOLL")) SHR"
  if rc ¬= 0 then
    do
      say CDRSDS'('UCBPOOLL') NOT ALLOCATED .... Check error'
      exit
    end
return
/*---*/
READL:
  "EXECIO * DISKR CDRSDS (STEM readL. FINIS)"
  "FREE DA("CDRSDS"("UCBPOOLL"))"
  do x=1 to readL.0
    if substr(readL.x,1,1) ='*' then
      iterate
    say readL.x
  end
  drop readL.
return
/*---*/
VERIFY3:
  "EXECIO * DISKR CDRSDS (STEM CDRS3. FINIS)"
  "FREE DA("CDRSDS"("UCBPOOL3"))"
  hotdsn=CDRSDS'('UCBPOOL3')'
  do x=1 to CDRS3.0
    if substr(cdrs3.x,1,1) ='*' then
      iterate
    lorange=substr(cdrs3.x,1,4)
    hirange=substr(cdrs3.x,6,4)
    if datatype(lorange,'x') /= 1 then
      do
        call rangerr3
        exit
      end
    if datatype(hirange,'x') /= 1 then
      do
        call rangerr3
        exit
      end
  end
return
/*---*/
VERIFY9:
  "EXECIO * DISKR CDRSDS (STEM CDRS9. FINIS)"
  "FREE DA("CDRSDS"("UCBPOOL9"))"
  hotdsn=CDRSDS'('UCBPOOL9')'
  do x=1 to CDRS9.0
    if substr(cdrs9.x,1,1) ='*' then
      iterate
    lorange=substr(cdrs9.x,1,4)
    hirange=substr(cdrs9.x,6,4)
    if datatype(lorange,'x') /= 1 then
      do
        call rangerr9
        exit
      end
    if datatype(hirange,'x') /= 1 then
      do
        call rangerr9
        exit
      end
  end
return
/*---*/
VERIFYL:
  "EXECIO * DISKR CDRSDS (STEM CDRSL. FINIS)"
  "FREE DA("CDRSDS"("UCBPOOLL"))"
  hotdsn=CDRSDS'('UCBPOOLL')'
  do x=1 to CDRSL.0
    if substr(cdrsL.x,1,1) ='*' then
      iterate
    lorange=substr(cdrsL.x,1,4)
    hirange=substr(cdrsL.x,6,4)
    if datatype(lorange,'x') /= 1 then
      do
        call rangerrL
        exit
      end
    if datatype(hirange,'x') /= 1 then
      do
        call rangerrL
        exit
      end
  end
return
/*---*/
BLDSLOT3:
  do x=1 to CDRS3.0
    if substr(cdrs3.x,1,1) ='*' then
      iterate
    lorange=substr(cdrs3.x,1,4)
    hirange=substr(cdrs3.x,6,4)
    lorangex=x2d(lorange)
    hirangex=x2d(hirange)
    slotrang=(hirangex-lorangex) + 1
    #sg3=#sg3+slotrang
    currucb=x2d(lorange)
    do y=1 to slotrang
      currucbd=d2x(currucb)
      currucbd=right(currucbd,4,0)
      slot3.z3=currucbd||'VVVVVV'||'03UI'
      z3=z3+1
      currucb=currucb + bump1
    end
  end
  slot3.0=z3-1
  drop cdrs3.
return
/*---*/
BLDSLOT9:
  do x=1 to CDRS9.0
    if substr(cdrs9.x,1,1) ='*' then
      iterate
    lorange=substr(cdrs9.x,1,4)
    hirange=substr(cdrs9.x,6,4)
    lorangex=x2d(lorange)
    hirangex=x2d(hirange)
    slotrang=(hirangex-lorangex) + 1
    #sg9=#sg9+slotrang
    currucb=x2d(lorange)
    do y=1 to slotrang
      currucbd=d2x(currucb)
      currucbd=right(currucbd,4,0)
      slot9.z9=currucbd||'VVVVVV'||'09UI'
      z9=z9+1
      currucb=currucb + bump1
    end
  end
  slot9.0=z9-1
  drop cdrs9.
return
/*---*/
BLDSLOTL:
  do x=1 to CDRSL.0
    if substr(cdrsL.x,1,1) ='*' then
      iterate
    lorange=substr(cdrsL.x,1,4)
    hirange=substr(cdrsL.x,6,4)
    lorangex=x2d(lorange)
    hirangex=x2d(hirange)
    slotrang=(hirangex-lorangex) + 1
    #sgL=#sgL+slotrang
    currucb=x2d(lorange)
    do y=1 to slotrang
      currucbd=d2x(currucb)
      currucbd=right(currucbd,4,0)
      slotL.zL=currucbd||'VVVVVV'||'0LUI'
      zL=zL+1
      currucb=currucb + bump1
    end
  end
  slotL.0=zL-1
  drop cdrsL.
return
/*---*/
MOVETABS:
  xd=1
  do x3=1 to slot3.0
    DASD.xd = slot3.x3
    xd=xd+1
  end
  do x9=1 to slot9.0
    DASD.xd = slot9.x9
    xd=xd+1
  end
  do xL=1 to slotL.0
    DASD.xd = slotL.xL
    xd=xd+1
  end
  DASD.0=xd-1
  drop slot3.
  drop slot9.
  drop slotL.
return
/*---*/
CLEANUP:
  ADDRESS TSO
  "FREE DA("CDRSDS"("UCBPOOL3"))"
  "FREE DA("CDRSDS"("UCBPOOL9"))"
  "FREE DA("CDRSDS"("UCBPOOLL"))"
  "FREE DA("myid".CD.SYSIN) DELETE"
  "FREE DA("myid".CD.SYSPRINT) DELETE"
return
/*---*/
RANGERR3:
  say cdrs3.x
  say 'CDRS UCB range line has incorrect format'
  say 'Dsname = 'hotdsn
  call cleanup
return
/*---*/
RANGERR9:
  say cdrs9.x
  say 'CDRS UCB range line has incorrect format'
  say 'Dsname = 'hotdsn
  call cleanup
return
/*---*/
RANGERRL:
  say cdrsL.x
  say 'CDRS UCB range line has incorrect format'
  say 'Dsname = 'hotdsn
  call cleanup
return
/*===============================================================*/
/*                  CLOBBER ROUTINES                             */
/*===============================================================*/
/*---*/
ALLOCICK:
  ADDRESS TSO
  "FREE DA("CDRSDS"("ICKIN"))"
  "ALLOC FI(ICKIN) DA("CDRSDS"("ICKIN")) SHR"
  if rc ¬= 0 then
    do
      say CDRSDS'('ICKIN') NOT ALLOCATED .... Check error'
      exit
    end
  "FREE DA("CDRSDS"("ICKOUT"))"
  "ALLOC FI(ICKOUT) DA("CDRSDS"("ICKOUT")) SHR"
  if rc ¬= 0 then
    do
      say CDRSDS'('ICKOUT') NOT ALLOCATED .... Check error'
      exit
    end
return
/*---*/
GENICK:
  #dsfjobs=1
  #dsfsteps=0
  #maxdsf=30    /* # ickdsf steps per job - #DASD/JOB */
  #maxdsfj=500  /* Max # ICKDSF JOBS - 01/31/03       */
  "EXECIO * DISKR ICKIN (STEM ick. FINIS)"
  "FREE DA("CDRSDS"("ICKIN"))"
  jc.1=ick.1
  jc.2=ick.2
  jc.3=ick.3
  jc.4=ick.4
  jc.5=ick.5
  jc.6=ick.6
  iout.1=jc.1
  iout.2=jc.2
  iout.3=jc.3
  iout.4=jc.4
  iout.5=jc.5
  iout.6=jc.6
  posi=7
  poso=7
  do x=1 to dasd.0 by 1
    do y=7 to ick.0 by 1
      if #dsfsteps = #maxdsf then
        do
          #dsfsteps=0
          #dsfjobs=#dsfjobs+1
          if #dsfjobs > #maxdsfj  then /* max jobs exceeded ? 01/31/03 */
            do
              say 'Have exceeded MAX No. DSFINIT JOBS'
              say ' used when leaving CDRS, max='#maxdsfj      /*01/31/03*/
              say 'Increase #MAXDSF or #MAXDSFJ value in REXX' /*01/31/03*/
              say 'REXX Terminates . . .'
              exit
            end
          a=9
          j=overlay(#dsfjobs,JC.1,a,2)
          iout.poso=j
          poso=poso+1
          iout.poso=jc.2
          poso=poso+1
          iout.poso=jc.3
          poso=poso+1
          iout.poso=jc.4
          poso=poso+1
          iout.poso=jc.5
          poso=poso+1
          iout.poso=jc.6
          poso=poso+1
        end
        if pos('UUUU',ick.posi) /= 0 then
          do
            hotucb=substr(dasd.x,1,4)
            u=pos('UUUU',ick.posi)
            k=overlay(hotucb,ick.posi,u,4)
            iout.poso=k
            posi=posi+1
            poso=poso+1
            if posi > ick.0 then
              posi=7
          end
        else
          do
            iout.poso=ick.posi
            posi=posi+1
            poso=poso+1
            if posi > ick.0 then
              posi=7
          end
    end
    #dsfsteps=#dsfsteps+1
  end
  say #dsfjobs 'ICKDSF clear Jobs created in 'CDRSDS'('"ICKOUT"')'
  iout.0=poso-1
  "EXECIO * DISKW ICKOUT (STEM IOUT. FINIS)"
  "FREE DA("CDRSDS"("ICKOUT"))"
  drop iout.
return
