{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012117000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2880514, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE464.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2880514, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2880514, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE464.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00/\\n'", "DS1TRBAL": "b'N\\x18'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03i\\x00\\x08\\x03l\\x00\\n\\x000'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"#DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                         ISPF Dialog Manager Assembler Macros\n                                     Version 2.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                   Bob Zimmerman\n                                                   Development Technical Support\n                                                   CNA Insurance\n                                                   CNA Plaza - 8cs\n                                                   Chicago, Illinois 60685\n                                                   (312) 822 - 5719\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page i\n\n\n\n\n                                                               TABLE OF CONTENTS\n+                                                              _________________\n\n\n\n\n\n\n\n      ISPF Dialog Manager Assembler Macros - Overview . . . . . . . . . . . .  1\n\n           About Version 2.0  . . . . . . . . . . . . . . . . . . . . . . . .  2\n\n           Compatability and Restrictions . . . . . . . . . . . . . . . . . .  3\n\n\n\n      ISPF Dialog Manager Assembler Macros - General Syntax . . . . . . . . .  4\n\n           General Syntax . . . . . . . . . . . . . . . . . . . . . . . . . .  5\n\n           Macro Format (Standard, List and Execute form) . . . . . . . . . .  6\n\n           Accessing ISPLINK and ISPEXEC (CALL, LINK or LOAD) . . . . . . . .  7\n\n\n\n      ISPF Dialog Manager Assembler Macros - ISPF Macro . . . . . . . . . . .  8\n\n           Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n\n           ISPF DELETE  . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n\n           ISPF LOAD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n\n           ISPF PARMS . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n\n           ISPF SET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n\n           ISPF SUPPRESS  . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n\n\n\n      ISPF Dialog Manager Assembler Macros - Macro Syntax . . . . . . . . . . 20\n\n           BROWSE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n\n           CONTROL  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n\n           DISPLAY  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n\n           EDIT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n\n           FTCLOSE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n\n           FTERASE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page ii\n\n\n\n\n           FTINCL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n\n           FTOPEN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n\n           GETMSG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n\n           ISPEXEC  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n\n           ISREDIT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n\n           LOG  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n\n           SELECT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n\n           SETMSG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n\n           TBADD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n\n           TBBOTTOM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n\n           TBCLOSE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n\n           TBCREATE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n\n           TBDELETE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n\n           TBDISPL  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n\n           TBEND  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50\n\n           TBERASE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n\n           TBEXIST  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n\n           TBGET  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n\n           TBMOD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n\n           TBOPEN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n\n           TBPUT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56\n\n           TBQUERY  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n\n           TBSARG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58\n\n           TBSAVE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n\n           TBSCAN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\n\n           TBSKIP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62\n\n           TBSORT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n\n           TBSTATS  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\n1\n\n\n      ISPF Dialog Manager Assembler Macros                              Page iii\n\n\n\n\n           TBTOP  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n\n           TBVCLEAR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67\n\n           VCOPY  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n\n           VDEFINE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70\n\n           VDELETE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72\n\n           VGET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n\n           VPUT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n\n           VREPLACE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75\n\n           VRESET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76\n\n\n\n      ISPF Dialog Manager Assembler Macros - Library Access Services  . . . . 77\n\n           LMCLOSE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78\n\n           LMERASE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79\n\n           LMFREE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80\n\n           LMGET  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n\n           LMINIT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n\n           LMMADD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n\n           LMMDEL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85\n\n           LMMFIND  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86\n\n           LMMLIST  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87\n\n           LMMREN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n\n           LMMREP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89\n\n           LMOPEN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90\n\n           LMPUT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n\n           LMQUERY  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92\n\n\n\n      ISPF Dialog Manager Assembler Macros - Appendices . . . . . . . . . . . 94\n\n           Appendix A - Example Program . . . . . . . . . . . . . . . . . . . 95\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page iv\n\n\n\n\n           Appendix B - Using the macros with existing programs . . . . . . . 97\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 1\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |            ISPF Dialog Manager Assembler Macros - Overview            |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 2\n      About Version 2.0\n\n\n\n      _______________________\n      |                     |\n      |                     |\n      |  About Version 2.0  |\n      |                     |\n      |_____________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      Because this is Version 2.0 of these macros, I am attempting to use them\n      as often as possible in my own installation, so I may \"debug\" them as\n      thoroughly as possible.  As IBM will attest, no amount of testing can take\n      out all of the bugs in a given product. Therefore, I encourage any users\n      making modifications or finding a bug to contact me.\n\n      The following is a history of the modifications throughout releases:\n\n            1.1 - Corrected internal dummy paramter problem.\n                  In ISPF Version II, when passing a dummy parameter that is\n                  expected to be numeric, for example, the TBSKIP operand, you\n                  must pass 4 bytes of spaces. This was corrected wherever\n                  applicable.\n\n            2.0 - Add all LAS and ISPF Version II services and support Keywords.\n                  TBSTATS, TBSORT and all LAS services are now supported.\n\n                  A user now specifies the macro using keywords, not positional\n                  parameters.  For example, instead of knowing the the 9th posi-\n                  tional parameter of the LMINIT service is the dataset name, a\n                  user can code DSN=.\n\n\n                  In addition, all services are now invoked using keywords.\n                  Instead of a user coding\n\n                       TBQUERY ,,,,,,,,CRP\n\n                  to retrieve the current CRP value, he must now code\n\n                       TBQUERY POSITION=CRP\n\n                  similar to the ISPEXEC interface.  The syntax of all macros\n                  are now identical to CLIST syntax.  For compatability with\n                  Version 1 of these macros, see the new macro ISPF SET in this\n                  manual.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 3\n      Compatability and Restrictions\n\n\n\n      ____________________________________\n      |                                  |\n      |                                  |\n      |  Compatability and Restrictions  |\n      |                                  |\n      |__________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      The syntax of these macros has been designed so they are extremely flexi-\n      ble, and can be used with existing applications with no modification to\n      existing code.\n\n      There is one restriction with the use of these macros:  Assembler Version\n      H or later must be used because the internal symbols (global and local)\n      are longer than 8 bytes. I used these long symbols to simplify mainte-\n      nance.  In addition, they should not conflict with any other macro symbols\n      currently in use at an installation.\n\n\n      These macros support ISPF Version 2. They are fully compatible with ISPF\n      Version 1.  The macro set with this release does not include all of the\n      services available in ISPF Version 2. These services will be included in\n      future releases.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 4\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |         ISPF Dialog Manager Assembler Macros - General Syntax         |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 5\n      General Syntax\n\n\n\n      ____________________\n      |                  |\n      |                  |\n      |  General Syntax  |\n      |                  |\n      |__________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      The ISPF Dialog Manager Assembler Macro syntax follows IBM conventions\n      found in XA Supervisor Services and Macro Instructions (GC28-1154-0).  A\n      synopsis of the important rules follows.\n\n\n          1.  All parameters listed in lowercase are to be replaced with a user\n              value.\n\n          2.  All parameters listed in uppercase are coded as shown. No user\n              symbol or value may be used.\n\n          3.  All parameters aligned on the left margin are required.\n\n          4.  All parameters indented from the left margin are optional.\n\n          5.  When a dataset name is required as an operand, the macro expects\n              standard TSO dsname syntax; i.e., dsname is either fully qualified\n              within apostrophes or unquoted (TSO prefix is automatically\n              inserted).\n\n\n      NOTE: This manual does not include description of the ISPF service func-\n            tions with the syntax of each macro.  For a full description of ISPF\n            Services, see the IBM manual Interactive System Productivity Facil-\n            ity - Dialog Management Services (SC34-2137-0).\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 6\n      Macro Format (Standard, List and Execute form)\n\n\n\n      ____________________________________________________\n      |                                                  |\n      |                                                  |\n      |  Macro Format (Standard, List and Execute form)  |\n      |                                                  |\n      |__________________________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      Standard form of the macros generates an in-line parameter list for all\n      calls to ISPLINK, like standard IBM macros.\n\n      The list form of all ISPF macros would be a standard \"CALL\" parameter-\n      list.  To simplify coding, the ISPF PARMS macro is provided to generate a\n      common parameter-list for all of the ISPF macros.  See the documentation\n      of ISPF PARMS macro in this manual for a full description of its uses.\n\n      The execute form of any macro may be selected by using the MF=E or\n      MF=(E,parmlist) keywords.  Parmlist is a symbol representing a list of\n      fullwords used to create a standard parameter-list.  If parmlist is omit-\n      ted, the default symbol SPFPARMS will be used.  This symbol is automati-\n      cally generated, with the appropriate number of fullwords, when using the\n      ISPF PARMS macro (documented elsewhere in this manual).\n\n      The parmlist option of MF=(E,parmlist) is available for compatability rea-\n      sons (in case you would like to incorporate these macros with existing\n      code).\n\n       ********  NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE  *********\n       *                                                                    *\n       *                                                                    *\n       *   In general, only request the execute form of the macro if you    *\n       *   are coding a reentrant program, or addressing a relocatable      *\n       *   storage area; then I recommend the MF=E format of the macro.     *\n       *   The MF=(E,parmlist) format was supplied for only to allow adding *\n       *   these macros to existing programs!!!!                            *\n       *                                                                    *\n       *                                                                    *\n       **********************************************************************\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 7\n      Accessing ISPLINK and ISPEXEC (CALL, LINK or LOAD)\n\n\n\n      ________________________________________________________\n      |                                                      |\n      |                                                      |\n      |  Accessing ISPLINK and ISPEXEC (CALL, LINK or LOAD)  |\n      |                                                      |\n      |______________________________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      When invoking an ISPF service from a dialog program, ISPLINK or ISPEXEC\n      may be accessed via a CALL, LINK, or LOAD.  Using the CALL macro requires\n      the ISPLINK module to be included in the load module composite.  Most\n      installations already have ISPLINK in its LPA and therefore this technique\n      can be a waste of storage.  In addition, if in a future release of ISPF,\n      ISPLINK is changed, you would have to relink all the existing dialogs.\n\n      Using the LINK or LOAD macro eliminates the above problem.  My recommenda-\n      tion is to do an initial LOAD of ISPLINK and save the entry address.\n\n      I have designed each macro with the special keyword LOAD to specify where\n      you have stored the entry address of the ISPLINK module.\n\n      In addition, the ISPF LOAD and ISPF DELETE macros (documented in this man-\n      ual) will LOAD and DELETE the ISPLINK module. Appendix A has a complete\n      example of how a typical program would LOAD ISPLINK, access ISPF services\n      and DELETE the ISPLINK module.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 8\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |           ISPF Dialog Manager Assembler Macros - ISPF Macro           |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                                Page 9\n      Overview\n\n\n\n      ______________\n      |            |\n      |            |\n      |  Overview  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      Certain common needs are found when coding any Dialog Program.  One need\n      is the access to the ISPF interfaces ISPLINK and ISPEXEC.  The ISPF macro\n      is designed as an 'environment' macro.  Some of its functions are listed\n      below.\n\n\n          1.  LOAD and DELETE the ISPF modules ISPLINK and ISPEXEC.\n\n          2.  Generate the List form of all ISPF macros.\n\n          3.  Supply all 'working-storage' needed for the ISPF environment.\n\n          4.  Suppress the generation of constants for compatability with exist-\n              ing programs.\n              (e.g. DISPLAY DC CL8'DISPLAY')\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 10\n      ISPF DELETE\n\n\n\n      _________________\n      |               |\n      |               |\n      |  ISPF DELETE  |\n      |               |\n      |_______________|\n\n\n\n\n      This ISPF macro will issue a DELETE for the ISPLINK and ISPEXEC modules.\n      This macro complements the ISPF LOAD macro used to LOAD the ISPLINK and\n      ISPEXEC modules for program access.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      DELETE             DELETE: Required keyword coded as shown.\n\n          ,ISPLINK=NO    default: YES\n          ,ISPLINK=YES\n\n          ,ISPEXEC=NO    default: NO\n          ,ISPEXEC=YES\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      DELETE             This keyword identifies the function of the ISPF\n                         macro.\n\n      ,ISPLINK=NO\n      ,ISPLINK=YES       This parameter specifies whether the ISPLINK module\n                         should be deleted or not. If it was never loaded it\n                         must not be deleted.\n\n                         The default is ISPLINK=YES. This corresponds to the\n                         default for the ISPF LOAD macro. See Appendix A for\n                         an example.\n\n      ,ISPEXEC=NO\n      ,ISPEXEC=YES       This parameter specifies whether the ISPEXEC module\n                         should be deleted or not. If it was never loaded it\n                         must not be deleted.\n\n                         The default is ISPEXEC=NO. This corresponds to the\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 11\n      ISPF DELETE\n\n\n\n                         default for the ISPF LOAD macro. See Appendix A for\n                         an example.\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Delete the ISPLINK module.\n\n                                 ISPF DELETE\n\n      Example 2:         Operation: Delete only the ISPEXEC module.\n\n                                 ISPF DELETE,ISPLINK=NO,ISPEXEC=YES\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 12\n      ISPF LOAD\n\n\n\n      _______________\n      |             |\n      |             |\n      |  ISPF LOAD  |\n      |             |\n      |_____________|\n\n\n\n\n      This ISPF macro will issue a LOAD for the ISPLINK and ISPEXEC modules. In\n      addition it will store the entry address(es) of ISPLINK and ISPEXEC into\n      fullwords.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      LOAD               LOAD: Required keyword coded as shown.\n\n          ,ISPLINK=NO\n          ,ISPLINK=(YES,symbol)\n                         symbol: Address of a fullword used to store ISPLINK\n                         entry address.\n                         default: (YES,ISPLINK)\n\n          ,ISPEXEC=NO\n          ,ISPEXEC=(YES,symbol)\n                         symbol: Address of a fullword used to store ISPEXEC\n                         entry address.\n                         default: NO\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      LOAD               This keyword identifies the function of the ISPF\n                         macro.\n\n      ,ISPLINK=NO\n      ,ISPLINK=(YES,symbol)\n                         This parameter specifies whether the ISPLINK module\n                         should be loaded or not. After it is loaded, it will\n                         store the entry address into the fullword at the\n                         location of 'symbol'.\n\n                         The default is ISPLINK=(YES,ISPLINK). The symbol\n                         ISPLINK is generated by the ISPF PARMS macro. See\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 13\n      ISPF LOAD\n\n\n\n                         See Appendix A for an example.\n\n      ,ISPEXEC=NO\n      ,ISPEXEC=(YES,symbol)\n                         This parameter specifies whether the ISPEXEC module\n                         should be loaded or not. After it is loaded, it will\n                         store the entry address into the fullword at the\n                         location of 'symbol'.\n\n                         The default is ISPEXEC=NO. The symbol ISPEXEC is\n                         generated by the ISPF PARMS macro. See Appendix A\n                         for an example.\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Load ISPLINK and store its entry point\n                         into the fullword labeled ISPLINK.\n\n                                 ISPF LOAD\n\n      Example 2:         Operation: Load only the ISPEXEC module. Store its\n                         entry point into the fullword labeled ISPFEP.\n\n                                 ISPF LOAD,ISPLINK=NO,ISPEXEC=(YES,ISPFEP)\n                         ISPFEP  DS   A               ISPEXEC ENTRY POINT\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 14\n      ISPF PARMS\n\n\n\n      ________________\n      |              |\n      |              |\n      |  ISPF PARMS  |\n      |              |\n      |______________|\n\n\n\n\n      For any dialog program, certain common working storage areas are required;\n      for example, a fullword for the ISPLINK entry address.  In addition, a\n      parameter-list is required when the execute form of any macros in this\n      manual are used.  This macro generates all common working storage areas.\n\n      NOTE: The parameter-list fields are only generated when an execute form of\n            an ISPF Service macro is used. Then, it is generated to the length\n            required by the largest parameter list required. See the description\n            of the  MINIMUM keyword that follows for more.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      PARMS              PARMS: Required keyword coded as shown.\n\n          ,LIST=symbol\n                         symbol: Symbol used as label for parameter-list.\n                         default: SPFPARMS.\n\n          ,ISPLINK=NO\n          ,ISPLINK=(YES,symbol)\n                         symbol: Symbol used as label of fullword for ISPLINK\n                         entry address.\n                         default: (YES,ISPLINK)\n\n          ,ISPEXEC=NO\n          ,ISPEXEC=(YES,symbol)\n                         symbol: Symbol used as label of fullword for ISPEXEC\n                         entry address.\n                         default: NO\n\n          ,MINIMUM=number\n                         number: Numeric value.\n\n          ,LASTCC=symbol\n                         symbol: Symbol used in equate to register 15.\n\n          ,COUNT=number\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 15\n      ISPF PARMS\n\n\n\n          ,FULL=NO\n          ,FULL=YES      default: NO\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      PARMS              This keyword identifies the function of the ISPF\n                         macro.\n\n      ,LIST=symbol\n                         This symbol specifies the label used for the\n                         parameter list generated (if any).\n\n                         When any macro in this manual is issued in its\n                         execute form, it defaults to use the parameter-list\n                         labeled SPFPARMS. Therefore the default value is\n                         SPFPARMS.\n\n      ,ISPLINK=NO\n      ,ISPLINK=(YES,symbol)\n                         Specifies whether or not to generate the fullword\n                         used to store the ISPLINK entry point address.  See\n                         the ISPF LOAD macro for more information.\n\n                         The default is ISPLINK=(YES,ISPLINK). This corres-\n                         ponds with the ISPF LOAD macro default.  See\n                         Appendix A for an example.\n\n      ,ISPEXEC=NO\n      ,ISPEXEC=(YES,symbol)\n                         Specifies whether or not to generate the fullword\n                         used to store the ISPEXEC entry point address.  See\n                         the ISPF LOAD macro for more information.\n\n                         The default is ISPEXEC=NO. This corresponds with the\n                         ISPF LOAD macro default.  See Appendix A for an\n                         example.\n\n      ,MINIMUM=number\n                         Normally, this macro will only generate a parameter\n                         list when it is needed (i.e., when an execute form\n                         of these macros has been used). When it does generate\n                         the parameter-list, it will only generate the amount\n                         of fullwords required by the used programs. For\n                         example, if the largest execute form macro used was\n                         the SELECT macro, it requires only 3 fullwords. If\n                         the largest execute form was the VDEFINE macro, it\n                         requires 7 fullwords.\n\n                         This keyword allows you to specify the minimum number\n                         of fullwords to be used. In addition, it will force\n                         the generation of the paramter list even if no\n                         execute form of a macro has been used.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 16\n      ISPF PARMS\n\n\n\n      ,LASTCC=symbol\n                         This parameter is supplied to support earlier\n                         versions of this macro.\n                         It will generate an equate for the symbol to register\n                         15. This allows the coding of \"LTR symbol,symbol\" as\n                         apposed to \"LTR 15,15\".\n\n      ,COUNT=number\n                         This parameter should not be used. It is supplied to\n                         support earlier versions of this macro.\n\n      ,FULL=NO\n      ,FULL=YES\n                         This parameter should not be used. It is supplied to\n                         support earlier versions of this macro.\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Request the default working-storage areas.\n\n                                 ISPF PARMS\n\n      Example 2:         Operation: Request a minimum of 4 fullwords in the\n                         parameter list. Request the label for the ISPEXEC\n                         module to be generated.\n\n                                 ISPF PARMS,MINIMUM=4,ISPEXEC=YES\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 17\n      ISPF SET\n\n\n\n      ______________\n      |            |\n      |            |\n      |  ISPF SET  |\n      |            |\n      |____________|\n\n\n\n\n      In Version 2.0 of these macros, all services now support keyword. For\n      example, to display a panel, the user codes\n\n           DISPLAY PANEL='panel name'.\n\n      In Version 1.0 of these macros, these same services were positional. The\n      display of a panel would be coded as\n\n           DISPLAY 'panel name'.\n\n      This macro will allow the user to continue to maintain old programs using\n      the Version 1.0 syntax. Its intended use is only for compatability.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      SET                SET: Required keyword coded as shown.\n\n      ,LEVEL=1           LEVEL=1: Required as shown.\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      SET                This keyword identifies the function of the ISPF\n                         macro.\n\n      ,LEVEL=1           This parameter specifies the version of these macros\n                         that are being used in this assembly.\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Allow assembly of a program coded under\n                         version 1.0 using the version 2.0 macros.\n\n                               ISPF SET,LEVEL=1\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 18\n      ISPF SUPPRESS\n\n\n\n      ___________________\n      |                 |\n      |                 |\n      |  ISPF SUPPRESS  |\n      |                 |\n      |_________________|\n\n\n\n\n      Normally, when using any macro documented in this manual, that macro will\n      generate a constant for the service invoked. For example, when issuing the\n      DISPLAY macro, it will generate the constant\n\n           DISPLAY DC CL8'DISPLAY'\n\n      The ISPF SUPPRESS macro suppresses the automatic generation of a constant\n      for compatability with existing programs.  Otherwise, its use is not\n      recommended.\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPF.\n      ISPF\n      b                  one or more blanks must follow ISPF.\n\n      _________________________________________________________________________\n\n      SUPPRESS           SUPPRESS: Required keyword coded as shown.\n\n      ,LIST=(keywords)   keywords: Any ISPF keyword supported by these macros.\n      ,LIST=ALL          For example, DISPLAY, CANCEL, TBDISPL, etc.\n                         ALL: will suppress all generation.\n\n\n      _________________________________________________________________________\n\n                         The parameters are explained as follows:\n\n      SUPPRESS           This keyword identifies the function of the ISPF\n                         macro.\n\n      ,LIST=(keywords)\n      ,LIST=ALL          This parameter specifies what constants should be\n                         suppressed by the ISPF macro. Keyword may be listed\n                         in a standard list form such as\n                         ISPF SUPPRESS,LIST=(keyword1,keyword2,keyword3).\n                         LIST=ALL suppresses all keywords.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 19\n      ISPF SUPPRESS\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Suppress the generation of the CONTROL,\n                         ERRORS and CANCEL constants.\n\n                               ISPF SUPPRESS,LIST=(CONTROL,ERRORS,CANCEL)\n\n      Example 2:         Operation: Suppress the list of all constants.\n\n                                 ISPF SUPPRESS,LIST=ALL\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 20\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |             ISPF Dialog Manager Assembler Macros - Syntax             |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 21\n      BROWSE\n\n\n\n      ____________\n      |          |\n      |          |\n      |  BROWSE  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede BROWSE.\n      BROWSE\n      b                  one or more blanks must follow BROWSE.\n\n      _________________________________________________________________________\n\n          DATASET=dsn    dsn: Dsname enclosed in apostrophes or a\n                         symbol addressing a 56 byte Dsname (TSO Syntax).\n\n          ,VOLUME=vol    vol: Volser enclosed in apostrophes or a symbol\n                         addressing a 6 byte volser.\n\n          ,PASSWORD=pass pass: Password enclosed in apostrophes or a symbol\n                         addressing an 8 byte password.\n\n          ,PANEL=panel   panel: Panel name enclosed in apostrophes or a symbol\n                         addressing an 8 byte panel name.\n\n          ,DATAID=id     id: Dataid name enclosed in apostrophes or a symbol\n                         addressing an 8 byte data id.\n\n          ,MEMBER=member member: Member name enclosed in apostrophes or a\n                         symbol addressing an 8 byte member.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 22\n      BROWSE\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Invoke ISPF Browse against the dataset\n                         'SYS1.MACLIB' which is in the system catalog.\n\n                                 BROWSE DATASET='''SYS1.MACLIB'''\n\n      Example 2:         Operation: Invoke ISPF Browse against the dataset\n                         'userid.MY.DATA' on volume TESTE1 and use the execute\n                         form of the macro. The default parmlist generated by\n                         the ISPF PARMS macro will be used.\n\n                                 BROWSE DATASET=DSNAME,VOLUME='TESTE1',  X\n                                     MF=E\n                         DSNAME  DC   CL56'MY.DATA'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 23\n      CONTROL\n\n\n\n      _____________\n      |           |\n      |           |\n      |  CONTROL  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede CONTROL.\n      CONTROL\n      b                  one or more blanks must follow CONTROL.\n\n      _________________________________________________________________________\n\n      type               type: Valid ISPF CONTROL type.\n                         Examples: DISPLAY, NONDISPL, or ERRORS.\n\n      ,mode              mode: Valid \"mode\" for CONTROL \"type\" specified.\n                         Example: END or ENTER for CONTROL DISPLAY.\n\n          ,linenum       linenum: Numeric value or symbol addressing a\n                         fullword. Valid only for DISPLAY \"type\".\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Invoke the equivalent of\n                         ISPEXEC CONTROL ERRORS CANCEL.\n\n                                 CONTROL ERRORS,CANCEL\n\n      Example 2:         Operation: Invoke the equivalent of\n                         ISPEXEC CONTROL DISPLAY LINE START(4)\n\n                                 CONTROL DISPLAY,LINE,4\n                         or\n                                 CONTROL DISPLAY,LINE,F4\n                         F4      DC  F'4'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 24\n      DISPLAY\n\n\n\n      _____________\n      |           |\n      |           |\n      |  DISPLAY  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede DISPLAY.\n      DISPLAY\n      b                  one or more blanks must follow DISPLAY.\n\n      _________________________________________________________________________\n\n          PANEL=panel    panel: Panel name enclosed in apostrophes or a symbol\n                         addressing an 8 byte panel name.\n\n          ,MSG=msg       msg: Message name enclosed in apostrophes or a symbol\n                         addressing an 8 byte message name.\n\n          ,CURSOR=field  field: Field name enclosed in apostrophes or a symbol\n                         addressing an 8 byte field name.\n\n          ,CSRPOS=csrpos csrpos: Numeric cursor position or a symbol\n                         addressing a fullword containing the cursor position.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Display panel named ABC.\n\n                         LOOP    DISPLAY PANEL='ABC'\n\n      Example 2:         Operation: Display panel ABC with the message name\n                         found at label MSG.\n\n                                 DISPLAY PANEL='ABC',MSG=MSG\n                         MSG     DC  CL8'MSG001'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 25\n      EDIT\n\n\n\n      __________\n      |        |\n      |        |\n      |  EDIT  |\n      |        |\n      |________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede EDIT.\n      EDIT\n      b                  one or more blanks must follow EDIT.\n\n      _________________________________________________________________________\n\n          DATASET=dsn    dsn: Dsname enclosed in apostrophes or a symbol\n                         addressing a 56 byte Dsname (TSO Syntax).\n\n          ,VOLUME=vol    vol: Volser enclosed in apostrophes or a symbol\n                         addressing a 6 byte volser.\n\n          ,PASSWORD=pass pass: Password enclosed in apostrophes or a symbol\n                         addressing an 8 byte password.\n\n          ,PANEL=panel   panel: Panel name enclosed in apostrophes or a symbol\n                         addressing an 8 byte panel name.\n\n          ,MACRO=macro   macro: Macro name enclosed in apostrophes or a symbol\n                         addressing an 8 byte initial macro.\n\n          ,PROFILE=prof  prof: Edit profile name enclosed in apostrophes or a\n                         symbol addressing an 8 byte edit profile.\n\n          ,DATAID=id     id: Dataid name enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 26\n      EDIT\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Invoke ISPF EDIT against 'SYS1.MACLIB'.\n                         Use the \"ASMB\" profile name.\n\n                                 EDIT DATASET='''SYS1.MACLIB''',         X\n                                      PROFILE='ASMB'\n\n      Example 2:         Operation: Invoke ISPF Edit against the dataset\n                         'userid.MY.DATA' on volume TESTE1 and use the execute\n                         form of the macro. The default parmlist generated by\n                         the ISPF PARMS macro will be used. The default\n                         profile will be used as well.\n\n                                 EDIT  DATASET=DSNAME,VOLUME='TESTE1',MF=E\n                         DSNAME  DC   CL56'MY.DATA'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 27\n      FTCLOSE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  FTCLOSE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede FTCLOSE.\n      FTCLOSE\n      b                  one or more blanks must follow FTCLOSE.\n\n      _________________________________________________________________________\n\n          NAME=member    member: Member name enclosed in apostrophes or a\n                         symbol addressing an 8 byte member name.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,NOREPL=keyw   keyw: Keyword NOREPL enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Close a File Tailoring output file that\n                         was open with FTOPEN TEMP.\n\n                                 FTCLOSE\n\n\n      Example 2:         Operation: Close a File Tailoring output file. The\n                         output should be routed to DDname 'OUTPUT' and the\n                         member name should be ABC. If the member currently\n                         exists, do not replace it.\n\n                                 FTCLOSE NAME='ABC',LIBRARY=DDNAME,      X\n                                      NOREPL='NOREPL'\n                         DDNAME  DC   CL8'OUTPUT'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 28\n      FTERASE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  FTERASE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede FTERASE.\n      FTERASE\n      b                  one or more blanks must follow FTERASE.\n\n      _________________________________________________________________________\n\n      member             member: Member name enclosed in apostrophes or a\n                         symbol addressing an 8 byte member name.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Erase the member ABC from the file\n                         currently allocated to ISPFILE.\n\n                                 FTERASE 'ABC'\n\n      Example 2:         Operation: Erase the member DEF from the file\n                         allocated to DDname 'OUTPUT'. Using the execute form\n                         of the macro.\n\n                                 FTERASE MEMBER,LIBRARY=DDNAME,MF=E\n                         MEMBER  DC   CL8'DEF'\n                         DDNAME  DC   CL8'OUTPUT'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 29\n      FTINCL\n\n\n\n      ____________\n      |          |\n      |          |\n      |  FTINCL  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede FTINCL.\n      FTINCL\n      b                  one or more blanks must follow FTINCL.\n\n      _________________________________________________________________________\n\n      skeleton           skeleton: Skeleton name enclosed in apostrophes or a\n                         symbol addressing an 8 byte skeleton name.\n\n          ,NOFT=keyw     keyw: Keyword NOFT enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Include the skeleton ABC with File\n                         Tailoring.\n\n                                 FTINCL 'ABC'\n\n      Example 2:         Operation: Include member ABC without File Tailoring.\n\n                                 FTINCL SKELETN,NOFT=NOFTVAL\n                         SKELETN DC   CL8'ABC'\n                         NOFTVAL DC   CL8'NOFT'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 30\n      FTOPEN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  FTOPEN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede FTOPEN.\n      FTOPEN\n      b                  one or more blanks must follow FTOPEN.\n\n      _________________________________________________________________________\n\n          ,TEMP=keyw     keyw: Keyword TEMP enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Open a temporary file tailoring file.\n\n                                 FTOPEN TEMP='TEMP'\n\n      Example 2:         Operation: Open the file tailoring file. Use the\n                         file currently allocated to ISPFILE.\n\n                                 FTOPEN ,\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 31\n      GETMSG\n\n\n\n      ____________\n      |          |\n      |          |\n      |  GETMSG  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede GETMSG.\n      GETMSG\n      b                  one or more blanks must follow GETMSG.\n\n      _________________________________________________________________________\n\n      MSG=msg            msg: Message name enclosed in apostrophes or a\n                         symbol addressing an 8 byte message name.\n\n          ,SHORTMSG=smsg smsg: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LONGMSG=lmsg  lmsg: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ALARM=alarm   alarm: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,HELP=help     help: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 32\n      GETMSG\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Get the short and long message text for\n                         the message called MSG001. Place the short message in\n                         variable SHORT, the long message text in variable\n                         LONG and the help panel name in HELP. No request for\n                         the alarm status is desired.\n\n                                 GETMSG MSG='MSG001',                    X\n                                     SHORTMSG='SHORT',                   X\n                                     LONGMSG='LONG',                     X\n                                     HELP='HELP'\n\n      Example 2:         Operation: Get the alarm status for message msg002.\n                         Store its value in variable alarm. Use the execute\n                         form of the macro.\n\n                                 GETMSG MSG='MSG002',ALARM='ALARM',MF=E\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 33\n      ISPEXEC\n\n\n\n      _____________\n      |           |\n      |           |\n      |  ISPEXEC  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISPEXEC.\n      ISPEXEC\n      b                  one or more blanks must follow ISPEXEC.\n\n      _________________________________________________________________________\n\n          length         length: Numeric value or symbol addressing a\n                         fullword. Valid only when buffer is coded as a\n                         symbol. Leave blank when coding the buffer parameter\n                         as a literal. The macro will calculate the length\n                         (see examples).\n\n          ,buffer        buffer: ISPF ISPEXEC service keywords enclosed in\n                         apostrophes or a symbol addressing a buffer area.\n                         When coding a symbol, the length field (above) is\n                         required.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 34\n      ISPEXEC\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Display the panel PANEL1.\n\n                                 ISPEXEC ,'DISPLAY PANEL(PANEL1)'\n\n      Example 2:         Operation: Issue the ISPF CONTROL command to inhibit\n                         split screen operation.\n\n                                 ISPEXEC 80,THEBUFER\n                         THEBUFER DC   CL80'CONTROL SPLIT DISABLE'\n\n      Example 3:         Operation: Issue the ISPF CONTROL command to inhibit\n                         split screen operation. This is the same as above.\n                         In this example, the assembler will calculate the\n                         length of the select buffer.\n\n                                 ISPEXEC BUFLEN,BUFTEXT\n                         BUFTEXT DC   C'CONTROL SPLIT DISABLE'\n                         TEMP    EQU  *-BUFTEXT\n                         BUFLEN  DC   A(TEMP)\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 35\n      ISREDIT\n\n\n\n      _____________\n      |           |\n      |           |\n      |  ISREDIT  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede ISREDIT.\n      ISREDIT\n      b                  one or more blanks must follow ISREDIT.\n\n      _________________________________________________________________________\n\n          length         length: Numeric value or symbol addressing a\n                         fullword. Valid only when buffer is coded as a\n                         symbol. Leave blank when coding the buffer parameter\n                         as a literal. The macro will calculate the length\n                         (see examples).\n\n          ,buffer        buffer: ISPF ISREDIT service keywords enclosed in\n                         apostrophes or a symbol addressing a buffer area.\n                         When coding a symbol, the length field (above) is\n                         required.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Issue equivalent to CLIST ISREDIT MACRO.\n\n                                 ISREDIT ,'MACRO (FLD1 FLD2) NOPROCESS'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 36\n      LOG\n\n\n\n      _________\n      |       |\n      |       |\n      |  LOG  |\n      |       |\n      |_______|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LOG.\n      LOG\n      b                  one or more blanks must follow LOG.\n\n      _________________________________________________________________________\n\n      MSG=msg            msg: Message name enclosed in apostrophes or a\n                         symbol addressing an 8 byte message name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Log the message called MSG001.\n\n                                 LOG MSG='MSG001'\n\n      Example 2:         Operation: Log the message called MSG001. Same as\n                         above example using a symbol to address the message\n                         name.\n\n                                 LOG MSG=MESSAGE\n                         MESSAGE DC   CL8'MSG001'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 37\n      SELECT\n\n\n\n      ____________\n      |          |\n      |          |\n      |  SELECT  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede SELECT.\n      SELECT\n      b                  one or more blanks must follow SELECT.\n\n      _________________________________________________________________________\n\n          length         length: Numeric value or symbol addressing a\n                         fullword. Valid only when buffer is coded as a\n                         symbol. Leave blank when coding the buffer parameter\n                         as a literal. The macro will calculate the length\n                         (see examples).\n\n          ,buffer        buffer: ISPF Select service keywords enclosed in\n                         apostrophes or a symbol addressing a buffer area.\n                         When coding a symbol, the length field (above) is\n                         required.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 38\n      SELECT\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Select the program called PGMA1.\n\n                                 SELECT  ,'PGM(PGMA1)'\n\n      Example 2:         Operation: Invoke the TSO command XYZ and specify\n                         that a new shared pool is to be created.\n\n                                 SELECT 80,SELBUF\n                         SELBUF  DC   CL80'CMD(XYZ) NEWPOOL'\n\n      Example 3:         Operation: Invoke the TSO command XYZ and specify\n                         that a new shared pool is to be created. This is the\n                         same as above. In this example, the assembler will\n                         calculate the length of the select buffer.\n\n                                 SELECT BUFLEN,BUFTEXT\n                         BUFTEXT DC   C'CMD(XYZ) NEWPOOL'\n                         TEMP    EQU  *-BUFTEXT\n                         BUFLEN  DC   A(TEMP)\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 39\n      SETMSG\n\n\n\n      ____________\n      |          |\n      |          |\n      |  SETMSG  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede SETMSG.\n      SETMSG\n      b                  one or more blanks must follow SETMSG.\n\n      _________________________________________________________________________\n\n      MSG=msg            msg: Message name enclosed in apostrophes or a symbol\n                         addressing an 8 byte message name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Add message ABC001 to the next panel\n                         displayed to the user.\n\n                                 SETMSG MSG='ABC001'\n\n      Example 2:         Operation: Add message ISPX001 to the next panel\n                         displayed to a user. Use the execute form of the\n                         macro.\n\n                                 SETMSG MSG='ISPX001',MF=E\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 40\n      TBADD\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBADD  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBADD.\n      TBADD\n      b                  one or more blanks must follow TBADD.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVE=names    names: Name-list enclosed in apostrophes or a symbol\n                         addressing a name-list.\n\n          ,ORDER=keyw    ORDER: Keyword ORDER enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Add a row to the table TEMPTAB.\n\n                                 TBADD 'TEMPTAB'\n\n      Example 2:         Operation: Add a row to the table TEMPTAB. Use the\n                         execute form of the macro. In addition, specify the\n                         variable MYVAR as an extension variable and request\n                         that the row be added in sort order.\n\n                                 SETMSG TABLE,SAVE='(MYVAR)',            X\n                                     ORDER=ORDER,MF=E\n                         TABLE   DC   CL8'TEMPTAB'\n                         ORDER   DC   CL8'ORDER'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 41\n      TBBOTTOM\n\n\n\n      ______________\n      |            |\n      |            |\n      |  TBBOTTOM  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBBOTTOM.\n      TBBOTTOM\n      b                  one or more blanks must follow TBBOTTOM.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVENAME=sn   sn: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,ROWID=rn      rn: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,NOREAD=keyw   keyw: Keyword NOREAD enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 42\n      TBBOTTOM\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Set the CRP of MYTAB to the bottom. In\n                         addition, store the CRP into variable XYZ.\n\n                                 TBBOTTOM TABLE,POSITION='XYZ'\n                         TABLE   DC   CL8'MYTABL'\n\n      Example 2:         Operation: Set the CRP of MYTAB to the bottom.\n                         Requests that no variables are to be\n                         retrieved.\n\n                                 TBBOTTOM 'MYTAB',SAVE=VARNAME,          X\n                                     NOREAD='NOREAD'\n                         VARNAME DC   CL8' '\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 43\n      TBCLOSE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBCLOSE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBCLOSE.\n      TBCLOSE\n      b                  one or more blanks must follow TBCLOSE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,REPLCOPY      REPLCOPY: Optional keyword coded as shown.\n          ,NEWCOPY       NEWCOPY:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,NAME=,alt     alt: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,PAD=percent   percent: Numeric value or symbol addressing a\n                         fullword.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 44\n      TBCLOSE\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Close the table. Save the member in the\n                         file allocated to OUTPUT.\n\n                                 TBCLOSE TABLE,LIBRARY='OUTPUT'\n                         TABLE   DC   CL8'MYTABL'\n\n      Example 2:         Operation: Close the table as a new member.\n                         Pad the member by 10 percent.\n\n                                 TBCLOSE 'MYTAB',NEWCOPY,PAD=10\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 45\n      TBCREATE\n\n\n\n      ______________\n      |            |\n      |            |\n      |  TBCREATE  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBCREATE.\n      TBCREATE\n      b                  one or more blanks must follow TBCREATE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,KEYS=keylist  keylist: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,NAMES=names   names: Name-list enclosed in apostrophes or a symbol\n                         addressing a name-list.\n\n          ,WRITE=keyw    keyw: Keyword WRITE or NOWRITE enclosed in apos-\n                         trophes or a symbol addressing an 8 byte keyword.\n\n          ,REPLACE=kyw   kyw: Keyword REPLACE enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,SHARE=shr     shr: Keyword SHARE enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 46\n      TBCREATE\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Create a table called MYTAB. The table is\n                         keyed by EMPLNO. The table contains the variable\n                         NAME, ADDRESS and CITY.\n\n                                 TBCREATE 'MYTAB',KEYS=KEYLIST,          X\n                                     NAMES='(NAME ADDRESS CITY)',        X\n                                     NOWRITE='NOWRITE'\n                         KEYLIST DC    C'(EMPLNO)'\n\n      Example 2:         Operation: Create a permanent table called MYTAB\n                         with only the variable XYZ in it. There are no keys.\n\n                                 TBCREATE 'MYTAB',NAMES='(XYZ)'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 47\n      TBDELETE\n\n\n\n      ______________\n      |            |\n      |            |\n      |  TBDELETE  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBDELETE.\n      TBDELETE\n      b                  one or more blanks must follow TBDELETE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Delete the current row from table XYZ.\n\n                                 TBDELETE 'XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 48\n      TBDISPL\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBDISPL  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBDISPL.\n      TBDISPL\n      b                  one or more blanks must follow TBDISPL.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,PANEL=panel   panel: Panel enclosed in apostrophes or a symbol\n                         addressing an 8 byte panel name.\n\n          ,MSG=msg       msg: Message name enclosed in apostrophes or a symbol\n                         addressing an 8 byte message name.\n\n          ,CURSOR=field  field: Field name enclosed in apostrophes or a symbol\n                         addressing an 8 byte field name.\n\n          ,CSRROW=rownum rownum: Numeric value or symbol addressing a\n                         fullword.\n\n          ,CSRPOS=csrpos csrpos: Numeric value or symbol addressing a\n                         fullword.\n\n          ,AUTOSEL=keyw  keyw: Keywords YES or NO enclosed in apostrophes or\n                         a symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWID=rowid   rowid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 49\n      TBDISPL\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Display table TAB1 using panel PAN1.  MSG\n                         will contain the name of any error messages that\n                         should be issuted.\n\n                                 TBDISPL 'TAB1',PANEL='PAN1',MSG=MSG\n                         MSG     DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 50\n      TBEND\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBEND  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBEND.\n      TBEND\n      b                  one or more blanks must follow TBEND.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: End the table TAB1.\n\n                                 TBEND 'TAB1'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 51\n      TBERASE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBERASE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBERASE.\n      TBERASE\n      b                  one or more blanks must follow TBERASE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Erase member XYZ.\n\n                                 TBERASE MEMNAME\n                         MEMNAME DC    CL8'XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 52\n      TBEXIST\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBEXIST  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBEXIST.\n      TBEXIST\n      b                  one or more blanks must follow TBEXIST.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Determine if a row exists in a keyed\n                         table MYTAB.\n\n                                 TBEXIST 'MYTAB'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 53\n      TBGET\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBGET  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBGET.\n      TBGET\n      b                  one or more blanks must follow TBGET.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVENAME=var  var: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWID=rowid   rowid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,NOREAD=keyw   keyw: Keyword NOREAD enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Get a row in the table MYTAB. Use the\n                         execute form of the macros.\n\n                                 TBGET 'MYTAB',MF=E\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 54\n      TBMOD\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBMOD  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBMOD.\n      TBMOD\n      b                  one or more blanks must follow TBMOD.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVE=namelist namelist: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,ORDER=keyw    keyw: Keyword ORDER enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Modify a row in the table MYTAB. The\n                         variables XY and ZZ are extension variables. Two\n                         coding examples follow. The first generates all\n                         storage constants for you.\n\n                                 TBMOD 'MYTAB',SAVE='(XY ZZ)'\n\n                                 TBMOD TABLE,SAVE=NAMES\n                         TABLE   DC   CL8'MYTAB'\n                         NAMES   DC   C'(XY ZZ)'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 55\n      TBOPEN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBOPEN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBOPEN.\n      TBOPEN\n      b                  one or more blanks must follow TBOPEN.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,WRITE=keyw    WRITE: Keywords WRITE or NOWRITE enclosed in apos-\n                         trophes or a symbol addressing the keyword.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,SHARE=keyw2   keyw2: Keyword SHARE enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Open the table named MYTAB for read only\n                         and allow sharing between split screens.\n\n                                 TBOPEN 'MYTAB',WRITE='NOWRITE',         X\n                                     SHARE='SHARE'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 56\n      TBPUT\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBPUT  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBPUT.\n      TBPUT\n      b                  one or more blanks must follow TBPUT.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,SAVE=namelist namelist: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,ORDER=keyw    keyw: Keyword ORDER enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Update the current row in the table MYTAB.\n\n                                 TBPUT 'MYTAB'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 57\n      TBQUERY\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBQUERY  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBQUERY.\n      TBQUERY\n      b                  one or more blanks must follow TBQUERY.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,KEYS=keyname  keyname: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,NAMES=varname varname: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWNUM=rownum rownum: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,KEYNUM=keynum keynum: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,NAMENUM=namen namen: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,POSITION=crp  crp: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Return the current CRP for table XYZ in\n                         variable CRPVAR.\n\n                                 TBQUERY 'XYZ',POSITION='CRPVAR'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 58\n      TBSARG\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSARG  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSARG.\n      TBSARG\n      b                  one or more blanks must follow TBSARG.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,ARGLIST=names names: Name-list enclosed in apostrophes or a symbol\n                         addressing a name-list.\n\n          ,DIRECTION=dir dir: Keywords NEXT or PREVIOUS enclosed in apos-\n                         trophes or a symbol addressing the keyword.\n\n          ,NAMECOND=nc   nc: Condition list enclosed in apostrophes or a\n                         symbol addressing a condition list.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Set a search argument in table MYTAB.\n                         Scan the table backwards.\n\n                                 TBSARG 'MYTAB',DIRECTION='PREVIOUS'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 59\n      TBSAVE\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSAVE  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSAVE.\n      TBSAVE\n      b                  one or more blanks must follow TBSAVE.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,REPLCOPY      REPLCOPY: Optional keyword coded as shown.\n          ,NEWCOPY       NEWCOPY:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,NAME=altname  altname: Member name enclosed in apostrophes or a\n                         symbol addressing an 8 byte member name.\n\n          ,PAD=percent   percent: Numeric value or symbol addressing a\n                         fullword.\n\n          ,LIBRARY=lib   lib: DDname enclosed in apostrophes or a symbol\n                         addressing an 8 byte DDname.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Save the current table MYTAB. If it\n                         currently exists, replace it with this version and\n                         pad 25 percent space to the new version. Use the\n                         execute form of the macro.\n\n                                 TBSAVE 'MYTAB',REPLCOPY,PAD=PERCENT\n                         PERCENT DC    F'25'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 60\n      TBSCAN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSCAN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSCAN.\n      TBSCAN\n      b                  one or more blanks must follow TBSCAN.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,ARGLIST=args  args: Name-list enclosed in apostrophes or a symbol\n                         addressing a name-list.\n\n          ,SAVENAME=sn   sn: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,ROWID=rowid   rowid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,DIRECTION=dir dir: Keywords NEXT or PREVIOUS enclosed in apos-\n                         trophes or a symbol addressing the keyword.\n\n          ,NOREAD=keyw   keyw: Keyword NOREAD enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,CONDLIST=cl   cl: Condition list enclosed in apostrophes or a\n                         symbol addressing a condition list.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 61\n      TBSCAN\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Scan the table MYTAB using the variables\n                         XY and ZZ. Default all other values. Use the execute\n                         form of the macro.\n\n                                 TBSCAN 'MYTAB',SAVE='(XY ZZ)',MF=E\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 62\n      TBSKIP\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSKIP  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSKIP.\n      TBSKIP\n      b                  one or more blanks must follow TBSKIP.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,NUMBER=number number: Numeric value or symbol addressing a\n                         fullword. For negative values, the symbol form must\n                         be used.\n\n          ,SAVENAME=sn   sn: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,ROWID=rowid   rowid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROW=row       row: Numeric value or symbol addressing a fullword.\n\n          ,NOREAD=keyw   keyw: Keyword NOREAD enclosed in apostrophes or a\n                         symbol addressing the keyword.\n\n          ,POSITION=pos  pos: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Skip forward 2 rows in table MYTAB.\n\n                                 TBSKIP 'MYTAB',NUMBER=2\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 63\n      TBSORT\n\n\n\n      ____________\n      |          |\n      |          |\n      |  TBSORT  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSORT.\n      TBSORT\n      b                  one or more blanks must follow TBSORT.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n      ,FIELDS=sort-list  sort-list: List of Sort keys as described in the\n                         ISPF Dialog Manager manual. The actual list may be\n                         specified enclosed in apostrophes or a symbol that\n                         addresses a sort-list may be specified.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Sort table ABC on fields ZIP and Name.\n\n                                 TBSORT 'ABC',                          X\n                                         FIELDS='(ZIP,N,A,NAME,C,A)\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 64\n      TBSTATS\n\n\n\n      _____________\n      |           |\n      |           |\n      |  TBSTATS  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBSTATS.\n      TBSTATS\n      b                  one or more blanks must follow TBSTATS.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,CDATE=cdate   cdate: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,CTIME=ctime   ctime: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,UDATE=udate   udate: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,UTIME=utime   utime: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,USER=user     user: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWCREAT=rowv rowv: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWCURR=rowcu rowcu: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ROWUPD=rowupd rowupd: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,TABLEUPD=tabu tabu: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,SERVICE=serv  serv: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,RETCODE=rc    rc: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 65\n      TBSTATS\n\n\n\n          ,STATUS1=s1    s1: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,STATUS2=s2    s2: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,STATUS3=s3    s3: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LIBRARY=dd    dd: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Determine if table ABC is open in write\n                         mode.\n\n                                 TBSTATS 'ABC',STATUS1='ST1',           X\n                                       STATUS2='ST2'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 66\n      TBTOP\n\n\n\n      ___________\n      |         |\n      |         |\n      |  TBTOP  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBTOP.\n      TBTOP\n      b                  one or more blanks must follow TBTOP.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Set the current CRP of table MYTAB to top\n                         of the table.\n\n                                 TBTOP TABLE\n                         TABLE   DC    CL8'MYTAB'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 67\n      TBVCLEAR\n\n\n\n      ______________\n      |            |\n      |            |\n      |  TBVCLEAR  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede TBVCLEAR.\n      TBVCLEAR\n      b                  one or more blanks must follow TBVCLEAR.\n\n      _________________________________________________________________________\n\n      table              table: Table name enclosed in apostrophes or a symbol\n                         addressing an 8 byte table name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Clear the current row in table MYTAB.\n\n                                 TBVCLEAR 'MYTAB'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 68\n      VCOPY\n\n\n\n      ___________\n      |         |\n      |         |\n      |  VCOPY  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VCOPY.\n      VCOPY\n      b                  one or more blanks must follow VCOPY.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n      ,(lengths)         (lengths): Numeric value or a list of numeric values;\n                         or a symbol addressing an array of fullwords.\n\n                         NOTE: The VCOPY service updates this array to reflect\n                         the length of data copied! This macro is not reusable\n                         when coding numeric values in place of a symbol.\n\n      ,value-array       value-array: Symbol addressing storage area mapping\n                         the variables in the name-list.\n\n          ,MOVE          MOVE: Optional keyword coded as shown.\n          ,LOCATE        LOCATE:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 69\n      VCOPY\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Copy the variable ZUSER from the ISPF\n                         pools into program storage. Copy only the address\n                         of the variable.\n\n                                 VCOPY '(ZUSER)',F4,ZUSERADD,LOCATE\n                         ZUSERADD DS   A\n                         F4       DC   F'4'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 70\n      VDEFINE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  VDEFINE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VDEFINE.\n      VDEFINE\n      b                  one or more blanks must follow VDEFINE.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n      ,storage           storage: Symbol addressing storage area mapping the\n                         variables in the name-list.\n\n      ,CHAR              CHAR: Optional keyword coded as shown.\n      ,FIXED             FIXED:  Optional keyword coded as shown.\n      ,BIT               BIT:  Optional keyword coded as shown.\n      ,HEX               HEX:  Optional keyword coded as shown.\n      ,USER              USER:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n      ,length            length: Numeric value or symbol addressing a\n                         fullword.\n\n          ,options       options: Option-list enclosed in apostrophes or a\n                         symbol addressing an option list.\n\n          ,userdata      userdata: Symbol addressing the user exit.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 71\n      VDEFINE\n\n\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VDEFINE the variables XX and UYZ. They\n                         are character format. They are 10 bytes in length.\n                         Request the COPY option of the Vdefine service.\n\n                                 VDEFINE '(XX UYZ)',WORKAREA,            X\n                                       CHAR,10,'(COPY)'\n                         WORKAREA EQU  *\n                         XX       DC   CL10' '\n                         UYZ      DC   CL10' '\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 72\n      VDELETE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  VDELETE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VDELETE.\n      VDELETE\n      b                  one or more blanks must follow VDELETE.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VDELETE variables XX and UYZ.\n\n                                 VDELETE '(XX UYZ)'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 73\n      VGET\n\n\n\n      __________\n      |        |\n      |        |\n      |  VGET  |\n      |        |\n      |________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VGET.\n      VGET\n      b                  one or more blanks must follow VGET.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,ASIS          ASIS: Optional keyword coded as shown.\n          ,SHARED        SHARED: Optional keyword coded as shown.\n          ,PROFILE       PROFILE: Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VGET variables XX and UYZ from the profile\n                         pool.\n\n                                 VGET '(XX UYZ)',PROFILE\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 74\n      VPUT\n\n\n\n      __________\n      |        |\n      |        |\n      |  VPUT  |\n      |        |\n      |________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VPUT.\n      VPUT\n      b                  one or more blanks must follow VPUT.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n          ,ASIS          ASIS: Optional keyword coded as shown.\n          ,SHARED        SHARED: Optional keyword coded as shown.\n          ,PROFILE       PROFILE: Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VPUT variables XX and UYZ into the profile\n                         pool.\n\n                                 VPUT '(XX UYZ)',PROFILE\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 75\n      VREPLACE\n\n\n\n      ______________\n      |            |\n      |            |\n      |  VREPLACE  |\n      |            |\n      |____________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VREPLACE.\n      VREPLACE\n      b                  one or more blanks must follow VREPLACE.\n\n      _________________________________________________________________________\n\n      name-list          name-list: Name-list enclosed in apostrophes or a\n                         symbol addressing a name-list.\n\n      ,(lengths)         (lengths): Numeric value or a list of numeric values;\n                         or a symbol addressing an array of fullwords.\n\n      ,value-array       value-array: Symbol addressing storage area mapping\n                         the variables in the name-list.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: VREPLACE variables XX and UYZ into the\n                         function pool.\n\n                                 VREPLACE '(XX UYZ)',(10,5),WORKAREA\n                         WORKAREA EQU *\n                         XX       DS  CL10\n                         UYZ      DS  CL5\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 76\n      VRESET\n\n\n\n      ____________\n      |          |\n      |          |\n      |  VRESET  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede VRESET.\n      VRESET\n      b                  one or more blanks must follow VRESET.\n\n      _________________________________________________________________________\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Reset all variables in the current\n                         function pool.\n\n                                 VRESET ,\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 77\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |     ISPF Dialog Manager Assembler Macros - Library Access Services    |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 78\n      LMCLOSE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMCLOSE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMCLOSE.\n      LMCLOSE\n      b                  one or more blanks must follow LMCLOSE.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte dataid name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Close the dataid found at symbol DATAID.\n\n                                 LMCLOSE DATAID=DATAID\n                         DATAID  DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 79\n      LMERASE\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMERASE  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMERASE.\n      LMERASE\n      b                  one or more blanks must follow LMERASE.\n\n      _________________________________________________________________________\n\n      PROJECT=project    project: Project name enclosed in apostrophes or a\n                         symbol addressing an 8 byte project name.\n\n      ,GROUP=group       group: Group name enclosed in apostrophes or a\n                         symbol addressing an 8 byte group name.\n\n      ,TYPE=type         type: Type name enclosed in apostrophes or a\n                         symbol addressing an 8 byte type name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Erase the file called 'A.B.C'\n\n                                 LMERASE PROJECT='A',GROUP='B',TYPE='C'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 80\n      LMFREE\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMFREE  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMFREE.\n      LMFREE\n      b                  one or more blanks must follow LMFREE.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte dataid name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Free the dataid found at symbol DATAID.\n\n                                 LMFREE DATAID=DATAID\n                         DATAID  DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 81\n      LMGET\n\n\n\n      ___________\n      |         |\n      |         |\n      |  LMGET  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMGET.\n      LMGET\n      b                  one or more blanks must follow LMGET.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte dataid.\n\n      ,MODE=mode         mode: Mode enclosed in apostrophes or a symbol\n                         addressing an 8 byte mode.\n\n      ,DATALOC=dataloc   dataloc: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n      ,DATALEN=datalen   datalen: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n      ,MAXLEN=maxlen     maxlen: Numeric value or a symbol addressing a\n                         fullword.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Get the record for dataid ABC. The record\n                         should be stored in variable REC and the length of\n                         the record should be stored in variable RECLEN. The\n                         largest amount of data retrieved should be 80 bytes.\n\n                                 LMGET DATAID='ABC',MODE='INVAR',        X\n                                       DATALOC='REC',DATALEN='RECLEN',   X\n                                       MAXLEN=80\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 82\n      LMINIT\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMINIT  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMINIT.\n      LMINIT\n      b                  one or more blanks must follow LMINIT.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,PROJECT=proj  proj: Project name enclosed in apostrophes or a\n                         symbol addressing an 8 byte project name.\n\n          ,GROUP1=g1     g1: Group name enclosed in apostrophes or a symbol\n                         addressing an 8 byte group name.\n\n          ,GROUP2=g2     g2: Group name enclosed in apostrophes or a symbol\n                         addressing an 8 byte group name.\n\n          ,GROUP3=g3     g3: Group name enclosed in apostrophes or a symbol\n                         addressing an 8 byte group name.\n\n          ,GROUP4=g4     g4: Group name enclosed in apostrophes or a symbol\n                         addressing an 8 byte group name.\n\n          ,TYPE=type     type: Type name enclosed in apostrophes or a symbol\n                         addressing an 8 byte type name.\n\n          ,DATASET=dsn   dsn: Dataset name enclosed in apostrophes or a\n                         symbol addressing a 56 byte dataset name.\n\n          ,DDNAME=ddname ddname: DDname name enclosed in apostrophes or a\n                         symbol addressing an 8 byte DDname name.\n\n          ,VOLUME=vol    vol: Volser enclosed in apostrophes or a symbol\n                         addressing a 6 byte volser.\n\n          ,PASSWORD=pass pass: Password enclosed in apostrophes or a symbol\n                         addressing an 8 byte password.\n\n          ,ENQ=enq       enq: Enq type enclosed in apostrophes or a symbol\n                         addressing an 8 byte enq type.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 83\n      LMINIT\n\n\n\n          ,ORG=orgvar    orgvar: Variable enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Issue an LMINIT for the libraries that are\n                         currently allocated to ISPPLIB.\n\n                                 LMINIT DATAID='PLIB',DDNAME='ISPPLIB'\n\n      Example 2:         Operation: Invoke LMINIT for the dataset A.B.C. Use\n                         the execute form of the macro.\n\n                                 LMINIT DATAID='DSNID',DATASET=DSNAME,MF=E\n                         DSNAME  DC   CL56'A.B.C'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 84\n      LMMADD\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMMADD  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMADD.\n      LMMADD\n      b                  one or more blanks must follow LMMADD.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,STATS=stats   stats: YES or NO enclosed in apostrophes or a symbol\n                         addressing an 8 byte field containing YES or NO.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Add member 'XYZ' to file.\n\n                                 LMMADD DATAID='ABC',MEMBER='XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 85\n      LMMDEL\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMMDEL  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMDEL.\n      LMMDEL\n      b                  one or more blanks must follow LMMDEL.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Delete member 'XYZ'.\n\n                                 LMMDEL DATAID='ABC',MEMBER='XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 86\n      LMMFIND\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMMFIND  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMFIND.\n      LMMFIND\n      b                  one or more blanks must follow LMMFIND.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,LOCK='LOCK'   'LOCK': LOCK parameter enclosed in apostrophes as\n                         shown.\n\n          ,LRECL=lrecl   lrecl: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,RECFM=recfm   recfm: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,GROUP=group   group: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,STATS=stats   stats: YES or NO enclosed in apostrophes or a symbol\n                         addressing an 8 byte field containing YES or NO.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Check to see if member XYZ exists.\n\n                                 LMMFIND DATAID='ABC',MEMBER='XYZ'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 87\n      LMMLIST\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMMLIST  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMLIST.\n      LMMLIST\n      b                  one or more blanks must follow LMMLIST.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,OPTION=opt    opt: Option enclosed in apostrophes or a symbol\n                         addressing an 8 byte option.\n\n          ,MEMBER=memvar memvar: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,STATS=stats   stats: YES or NO enclosed in apostrophes or a symbol\n                         addressing an 8 byte field containing YES or NO.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Request a member name be returned in the\n                         variable MEMNAME and all ISPF statistics be returned\n                         as well.\n\n                                 LMMLIST DATAID='ABC',MEMBER='MEMNAME',  X\n                                     STATUS='YES'\n\n      Example 2:         Operation: Request all storage for the previous\n                         LMMLIST be freed.\n\n                                 LMMLIST DATAID='ABC',OPTION='FREE'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 88\n      LMMREN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMMREN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMREN.\n      LMMREN\n      b                  one or more blanks must follow LMMREN.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,NEWNAME=new   new: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Rename member 'XYZ' to 'ABC'.\n\n                                 LMMREN DATAID='ABC',MEMBER='XYZ',       X\n                                       NEWNAME='ABC'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 89\n      LMMREP\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMMREP  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMMREP.\n      LMMREP\n      b                  one or more blanks must follow LMMREP.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid enclosed in apostrophes or a symbol\n                         addressing an 8 byte dataid.\n\n          ,MEMBER=mem    mem: Member name enclosed in apostrophes or a symbol\n                         addressing an 8 byte member name.\n\n          ,STATS=stats   stats: YES or NO enclosed in apostrophes or a symbol\n                         addressing an 8 byte field containing YES or NO.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Replace member 'xyz'\n\n                                 LMMREP DATAID='ABC',MEMBER='XYZ',       X\n                                       STATS='ON'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 90\n      LMOPEN\n\n\n\n      ____________\n      |          |\n      |          |\n      |  LMOPEN  |\n      |          |\n      |__________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMOPEN.\n      LMOPEN\n      b                  one or more blanks must follow LMOPEN.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte Dataid name.\n\n          ,OPTION=INPUT  INPUT: Optional keyword coded as shown.\n          ,OPTION=OUTPUT OUTPUT:  Optional keyword coded as shown.\n                         Do not enclose in apostrophes.\n                         Select only one of these keywords.\n                         Default: see ISPF Dialog Management Services manual.\n\n          ,LRECL=lrecl   lrecl: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,RECFM=recfm   recfm: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ORG=org       org: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Open a dataset for output. The dataid of\n                         the dataset is found at symbol DATAID.\n\n                                 LMOPEN DATAID=DATAID,OPTION=OUTPUT\n                         DATAID  DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 91\n      LMPUT\n\n\n\n      ___________\n      |         |\n      |         |\n      |  LMPUT  |\n      |         |\n      |_________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMPUT.\n      LMPUT\n      b                  one or more blanks must follow LMPUT.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte Dataid name.\n\n      ,MODE=mode         mode: Mode enclosed in apostrophes or a symbol\n                         addressing an 8 byte mode.\n\n      ,DATALOC=dataloc   dataloc: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n      ,DATALEN=datalen   datalen: Numeric value or symbol address a fullword.\n\n      ,NOBSCAN='NOBSCAN' NOBSCAN: Must be coded as shown in apostrophes.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Write to a dataset the current userid.\n\n                                 LMPUT DATAID=DATAID,DATALOC='ZUSER',    X\n                                       DATALEN=8\n                         DATAID  DS    CL8\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 92\n      LMQUERY\n\n\n\n      _____________\n      |           |\n      |           |\n      |  LMQUERY  |\n      |           |\n      |___________|\n\n\n\n\n      _________________________________________________________________________\n\n          name           name: symbol. Begin \"name\" in column 1.\n\n      b                  one or more blanks must precede LMQUERY.\n      LMQUERY\n      b                  one or more blanks must follow LMQUERY.\n\n      _________________________________________________________________________\n\n      DATAID=dataid      dataid: Dataid name enclosed in apostrophes or a\n                         symbol addressing an 8 byte dataid name.\n\n          ,PROJECT=proj  proj: Project name enclosed in apostrophes or a\n                         symbol addressing an 8 byte project name.\n\n          ,GROUP1=g1     g1: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,GROUP2=g2     g2: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,GROUP3=g3     g3: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,GROUP4=g4     g4: Variable name enclosed in apostrophes or a symbol\n                         addressing an 8 byte variable name.\n\n          ,TYPE=type     type: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,DATASET=dsn   dsn: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,DDNAME=ddname ddname: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,VOLUME=vol    vol: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,ENQ=enq       enq: Variable name enclosed in apostrophes or a\n                         symbol addressing an 8 byte variable name.\n\n          ,LOAD=address  address: A symbol addressing a 4 byte adcon of the\n                         ISPLINK entry address.\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 93\n      LMQUERY\n\n\n\n                         Default symbol ISPLINK is generated by ISPF macro.\n\n          ,MF=E          MF=E: Requests the execute form of the macro.\n          ,MF=(E,parms)  parms: Address of a parmlist for the execute form.\n                         Default symbol SPFPARMS is generated by ISPF macro.\n\n      _________________________________________________________________________\n\n      Example 1:         Operation: Query the ddname for dataid ISR00009. The\n                         ddname, if any, should be returned in variable \"DDN\".\n\n                                 LMQUERY DATAID='ISR00009',DDNAME='DDN'\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 94\n\n\n\n\n\n\n\n\n\n\n      _________________________________________________________________________\n      |                                                                       |\n      |                                                                       |\n      |           ISPF Dialog Manager Assembler Macros - Appendices           |\n      |                              Version 2.0                              |\n      |                                                                       |\n      |_______________________________________________________________________|\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 95\n      Appendix A - Example Program\n\n\n\n      __________________________________\n      |                                |\n      |                                |\n      |  Appendix A - Example Program  |\n      |                                |\n      |________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      The following is an example dialog program including macro expansions.  It\n      will display a panel called PANLEL1 and do some processing based on the\n      display.\n\n\n        *\n        *\n        * (standard entry code)\n        *\n        *\n                  ISPF  LOAD                     LOAD THE ISPLINK MODULE\n        +         CNOP  0,4                      * GENERATED BY LOAD MACRO *\n        +         LA    0,*+8                    LOAD PARAMETER INTO REG 0\n        +         B     *+12                     BRANCH AROUND CONSTANT(S)\n        +         DC    CL8'ISPLINK'             ENTRY POINT NAME\n        +         SR    1,1                      SHOW NO DCB PRESENT\n        +         SVC   8\n        +         ST    0,ISPLINK                STORE ISPLINK ADDRESS\n\n                  CONTROL ERRORS,CANCEL          SET ISPF ERROR MODE TO CANCEL\n        +         B     SPF0003\n        +CONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n        +ERRORS   DC    CL8'ERRORS'              CONTROL KEYWORD FOR ISPF\n        +CANCEL   DC    CL8'CANCEL'              CONTROL KEYWORD FOR ISPF\n        +SPF0003  DS    0H\n        +         CNOP  0,4\n        +         BAL   1,SPFE0003               BRANCH AROUND PARMLIST\n        +         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n        +         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n        +         DC    A(CANCEL+X'80000000')    ADDRESS OF CANCEL OPERAND\n        +SPFE0003 DS    0H\n        +         L     15,ISPLINK               GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n         LOOP     DISPLAY PANEL='PANELA'         DISPLAY PANEL CALLED PANELA\n        +LOOP     DS    0H\n        +         B     SPF0004\n        +DISPLAY  DC    CL8'DISPLAY'             DISPLAY KEYWORD FOR ISPF\n        +SPFP0005 DC    CL8'PANELA'              DISPLAY THIS PANEL\n        +SPFNULLC DC    CL8' '                   DUMMY ISPF FIELD\n        +SPFNULLF DC    F'0'                     DUMMY ISPF FIELD\n        +SPF0004  DS    0H\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 96\n      Appendix A - Example Program\n\n\n\n        +         CNOP  0,4\n        +         BAL   1,SPFE0004               BRANCH AROUND PARMLIST\n        +         DC    A(DISPLAY)               DISPLAY KEYWORD\n        +         DC    A(SPFP0004)              ADDRESS OF GENERATED PANEL\n        +         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n        +         DC    A(SPFNULLC)              DUMMY PARM FOR FIELD\n        +         DC    A(SPFNULLF+X'80000000')  DUMMY PARM FOR CSRPOS\n        +SPFE0004 DS    0H\n        +         L     15,ISPLINK               GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n                  LTR   15,15                    WAS END KEY HIT\n                  BNZ   EXITPGM                  IF SO, EXIT PROGRAM\n\n                  CONTROL ERRORS,RETURN          SET ISPF ERROR MODE TO CANCEL\n        +         B     SPF0005\n        +RETURN   DC    CL8'RETURN'              CONTROL KEYWORD FOR ISPF\n        +SPF0005  DS    0H\n        +         CNOP  0,4\n        +         BAL   1,SPFE0005               BRANCH AROUND PARMLIST\n        +         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n        +         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n        +         DC    A(RETURN+X'80000000')    ADDRESS OF CANCEL OPERAND\n        +SPFE0005 DS    0H\n        +         L     15,ISPLINK               GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n        *\n        * (other processing code)\n        * (go to display loop)\n\n        *\n        *         EXIT  PROGRAM CODE\n\n         EXITPGM  ISPF  DELETE\n        +         BAL   0,*+12                   LOAD ADDRESS OF EP SYMBOL\n        +         DC    CL8'ISPLINK'             EP SYMBOL\n        +         SVC   9                        ISSUE DELETE SVC\n\n        *\n        * (standard exit code)\n\n        *\n        *         WORKING STORAGE\n                  ISPF  PARMS                    GENERATE ISPF WORKING STORAGE\n        +ISPLINK  DS    A                        USED FOR ISPLINK ENTRY POINT\n1\n\n\n      ISPF Dialog Manager Assembler Macros                               Page 97\n      Appendix B - Using the macros with existing programs\n\n\n\n      __________________________________________________________\n      |                                                        |\n      |                                                        |\n      |  Appendix B - Using the macros with existing programs  |\n      |                                                        |\n      |________________________________________________________|\n\n\n\n\n      _________________________________________________________________________\n\n\n      The following is an example dialog program.  The ISPLINK entry point is\n      already loaded into the address ISPADD.  The parameter-list is already\n      coded and labeled PARMLIST.  The execute form of the macro will be used.\n\n\n        *\n        *\n        * (regular program code)\n        *\n        *\n                  ISPF  SUPPRESS,LIST=(CONTROL,ERRORS,CANCEL)\n                  CONTROL ERRORS,CANCEL,LOAD=ISPADD\n        +         CNOP  0,4\n        +         BAL   1,SPFE0003               BRANCH AROUND PARMLIST\n        +         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n        +         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n        +         DC    A(CANCEL+X'80000000')    ADDRESS OF CANCEL OPERAND\n        +SPFE0003 DS    0H\n        +         L     15,ISPADD                GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n\n                  ISPF  SUPPRESS,LIST=DISPLAY\n                  DISPLAY PANEL='PANELA',MF=(E,PARMLIST)\n        +         B     SPF0004\n        +SPFP0005 DC    CL8'PANELA'              DISPLAY THIS PANEL\n        +SPFNULLC DC    CL8' '                   DUMMY ISPF FIELD\n        +SPFNULLF DC    F'0'                     DUMMY ISPF FIELD\n        +SPF0004  DS    0H\n        +         LA    14,DISPLAY               GET DISPLAY KEYWORD ADDRESS\n        +         LA    15,SPFP0004              GET GENERATED PANEL ADDRESS\n        +         LA    0,SPFNULLC               DUMMY PARM FOR MSG\n        +         LA    1,SPFNULLC               DUMMY PARM FOR FIELD\n        +         STM   14,1,PARMLIST            STORE INTO PARMLIST\n        +         LA    14,SPFNULLF              DUMMY PARM FOR CSRPOS\n        +         ST    14,PARMLIST+16           STORE INTO PARMLIST\n        +         OI    PARMLIST+16,X'80'        MARK LAST PARM\n        +         LA    1,PARMLIST               GET PARAMETER LIST ADDRESS\n        +         L     15,ISPADD                GET ISPLINK ENTRY POINT\n        +         BALR  14,15                    CALL ISPF\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@": {"ttr": 2311, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         @     &LETTERS\n.* THIS MACRO IS USEFUL FOR INSERTING INTERESTING BLOCK-LETTER\n.* COMMENTS INTO YOUR ASSEMBLY PROGRAM.  TRY IT--YOU'LL LIKE IT.\n.**********************************************************************\n.*\n.* AIR FORCE DATA SERVICES CENTER--SYSTEMS SUPPORT DIRECTORATE\n.* ROOM 1D987, THE PENTAGON, WASHINGTON, DC 20330\n.* TELEPHONE: (AUTOVON) 225-1274/2478/1889\n.*     COMMERCIAL (703) 695-1274/2478/1889\n.*\n.**********************************************************************\n.* DATE INSTALLED: 790523\n.**********************************************************\n.** => CHANGE LOG: ENTER AUTHOR, DATE, SUMMARY OF CHANGE **\n.**********************************************************\n.* DATE OF LAST CHANGE:\n.*\n.**********************************************************************\n         LCLC  &A(50)\n         LCLC  &B(62),&C(62),&D(62),&E(62),&F(62),&G(62)\n         LCLA  &I,&J,&K\n&B(01)   SETC  'A'\n&B(02)   SETC  'B'\n&B(03)   SETC  'C'\n&B(04)   SETC  'D'\n&B(05)   SETC  'E'\n&B(06)   SETC  'F'\n&B(07)   SETC  'G'\n&B(08)   SETC  'H'\n&B(09)   SETC  'I'\n&B(10)   SETC  'J'\n&B(11)   SETC  'K'\n&B(12)   SETC  'L'\n&B(13)   SETC  'M'\n&B(14)   SETC  'N'\n&B(15)   SETC  'O'\n&B(16)   SETC  'P'\n&B(17)   SETC  'Q'\n&B(18)   SETC  'R'\n&B(19)   SETC  'S'\n&B(20)   SETC  'T'\n&B(21)   SETC  'U'\n&B(22)   SETC  'V'\n&B(23)   SETC  'W'\n&B(24)   SETC  'X'\n&B(25)   SETC  'Y'\n&B(26)   SETC  'Z'\n&B(27)   SETC  '#'\n&B(28)   SETC  ','\n&B(29)   SETC  '$'\n&B(30)   SETC  '0'\n&B(31)   SETC  '1'\n&B(32)   SETC  '2'\n&B(33)   SETC  '3'\n&B(34)   SETC  '4'\n&B(35)   SETC  '5'\n&B(36)   SETC  '6'\n&B(37)   SETC  '7'\n&B(38)   SETC  '8'\n&B(39)   SETC  '9'\n&B(40)   SETC  '@'\n&B(41)   SETC  '%'\n&B(42)   SETC  '*'\n&B(43)   SETC  '/'\n&B(44)   SETC  '-'\n&B(45)   SETC  '('\n&B(46)   SETC  ')'\n&B(47)   SETC  '&&'\n&B(48)   SETC  '+'\n&B(49)   SETC  '_'\n&B(50)   SETC  '\u00a2'\n&B(51)   SETC  '|'\n&B(52)   SETC  '>'\n&B(53)   SETC  ':'\n&B(54)   SETC  ';'\n&B(55)   SETC  '.'\n&B(56)   SETC  '?'\n&B(57)   SETC  '\"'\n&B(58)   SETC  '='\n&B(59)   SETC  '!'\n&B(60)   SETC  '<'\n&B(61)   SETC  '\u00ac'\n&B(62)   SETC  ' '\n&C(01)   SETC  '  A  '\n&D(01)   SETC  ' A A '\n&E(01)   SETC  'A   A'\n&F(01)   SETC  'AAAAA'\n&G(01)   SETC  'A   A'\n&C(02)   SETC  'BBBB '\n&D(02)   SETC  'B   B'\n&E(02)   SETC  'BBBB '\n&F(02)   SETC  'B   B'\n&G(02)   SETC  'BBBB '\n&C(03)   SETC  ' CCCC'\n&D(03)   SETC  'C    '\n&E(03)   SETC  'C    '\n&F(03)   SETC  'C    '\n&G(03)   SETC  ' CCCC'\n&C(04)   SETC  'DDDD '\n&D(04)   SETC  'D   D'\n&E(04)   SETC  'D   D'\n&F(04)   SETC  'D   D'\n&G(04)   SETC  'DDDD '\n&C(05)   SETC  'EEEEE'\n&D(05)   SETC  'E    '\n&E(05)   SETC  'EEEE '\n&F(05)   SETC  'E    '\n&G(05)   SETC  'EEEEE'\n&C(06)   SETC  'FFFFF'\n&D(06)   SETC  'F    '\n&E(06)   SETC  'FFFF '\n&F(06)   SETC  'F    '\n&G(06)   SETC  'F    '\n&C(07)   SETC  ' GGGG'\n&D(07)   SETC  'G    '\n&E(07)   SETC  'G  GG'\n&F(07)   SETC  'G   G'\n&G(07)   SETC  ' GGGG'\n&C(08)   SETC  'H   H'\n&D(08)   SETC  'H   H'\n&E(08)   SETC  'HHHHH'\n&F(08)   SETC  'H   H'\n&G(08)   SETC  'H   H'\n&C(09)   SETC  ' III '\n&D(09)   SETC  '  I  '\n&E(09)   SETC  '  I  '\n&F(09)   SETC  '  I  '\n&G(09)   SETC  ' III '\n&C(10)   SETC  '  JJJ'\n&D(10)   SETC  '   J '\n&E(10)   SETC  '   J '\n&F(10)   SETC  'J  J '\n&G(10)   SETC  ' JJ  '\n&C(11)   SETC  'K  K '\n&D(11)   SETC  'K K  '\n&E(11)   SETC  'KK   '\n&F(11)   SETC  'K K  '\n&G(11)   SETC  'K  K '\n&C(12)   SETC  'L    '\n&D(12)   SETC  'L    '\n&E(12)   SETC  'L    '\n&F(12)   SETC  'L    '\n&G(12)   SETC  'LLLLL'\n&C(13)   SETC  'M   M'\n&D(13)   SETC  'MM MM'\n&E(13)   SETC  'M M M'\n&F(13)   SETC  'M   M'\n&G(13)   SETC  'M   M'\n&C(14)   SETC  'N   N'\n&D(14)   SETC  'NN  N'\n&E(14)   SETC  'N N N'\n&F(14)   SETC  'N  NN'\n&G(14)   SETC  'N   N'\n&C(15)   SETC  'OOOOO'\n&D(15)   SETC  'O   O'\n&E(15)   SETC  'O   O'\n&F(15)   SETC  'O   O'\n&G(15)   SETC  'OOOOO'\n&C(16)   SETC  'PPPP '\n&D(16)   SETC  'P   P'\n&E(16)   SETC  'PPPP '\n&F(16)   SETC  'P    '\n&G(16)   SETC  'P    '\n&C(17)   SETC  ' QQQ '\n&D(17)   SETC  'Q   Q'\n&E(17)   SETC  'Q Q Q'\n&F(17)   SETC  'Q  Q '\n&G(17)   SETC  ' QQ Q'\n&C(18)   SETC  'RRRR '\n&D(18)   SETC  'R   R'\n&E(18)   SETC  'RRRR '\n&F(18)   SETC  'R  R '\n&G(18)   SETC  'R   R'\n&C(19)   SETC  ' SSSS'\n&D(19)   SETC  'S    '\n&E(19)   SETC  ' SSS '\n&F(19)   SETC  '    S'\n&G(19)   SETC  'SSSS '\n&C(20)   SETC  'TTTTT'\n&D(20)   SETC  '  T  '\n&E(20)   SETC  '  T  '\n&F(20)   SETC  '  T  '\n&G(20)   SETC  '  T  '\n&C(21)   SETC  'U   U'\n&D(21)   SETC  'U   U'\n&E(21)   SETC  'U   U'\n&F(21)   SETC  'U   U'\n&G(21)   SETC  ' UUU '\n&C(22)   SETC  'V   V'\n&D(22)   SETC  'V   V'\n&E(22)   SETC  'V   V'\n&F(22)   SETC  ' V V '\n&G(22)   SETC  '  V  '\n&C(23)   SETC  'W   W'\n&D(23)   SETC  'W   W'\n&E(23)   SETC  'W W W'\n&F(23)   SETC  'WW WW'\n&G(23)   SETC  'W   W'\n&C(24)   SETC  'X   X'\n&D(24)   SETC  ' X X '\n&E(24)   SETC  '  X  '\n&F(24)   SETC  ' X X '\n&G(24)   SETC  'X   X'\n&C(25)   SETC  'Y   Y'\n&D(25)   SETC  ' Y Y '\n&E(25)   SETC  '  Y  '\n&F(25)   SETC  '  Y  '\n&G(25)   SETC  '  Y  '\n&C(26)   SETC  'ZZZZZ'\n&D(26)   SETC  '   Z '\n&E(26)   SETC  '  Z  '\n&F(26)   SETC  ' Z   '\n&G(26)   SETC  'ZZZZZ'\n&C(27)   SETC  ' # # '\n&D(27)   SETC  '#####'\n&E(27)   SETC  ' # # '\n&F(27)   SETC  '#####'\n&G(27)   SETC  ' # # '\n&C(28)   SETC  '     '\n&D(28)   SETC  '     '\n&E(28)   SETC  '     '\n&F(28)   SETC  ' ,,  '\n&G(28)   SETC  '  ,  '\n&C(29)   SETC  ' $$$$'\n&D(29)   SETC  '$ $  '\n&E(29)   SETC  ' $$$ '\n&F(29)   SETC  '  $ $'\n&G(29)   SETC  '$$$$ '\n&C(30)   SETC  ' 000 '\n&D(30)   SETC  '0   0'\n&E(30)   SETC  '0   0'\n&F(30)   SETC  '0   0'\n&G(30)   SETC  ' 000 '\n&C(31)   SETC  '  1  '\n&D(31)   SETC  ' 11  '\n&E(31)   SETC  '  1  '\n&F(31)   SETC  '  1  '\n&G(31)   SETC  ' 111 '\n&C(32)   SETC  '2222 '\n&D(32)   SETC  '    2'\n&E(32)   SETC  '   2 '\n&F(32)   SETC  '  2  '\n&G(32)   SETC  '22222'\n&C(33)   SETC  '3333 '\n&D(33)   SETC  '    3'\n&E(33)   SETC  ' 333 '\n&F(33)   SETC  '    3'\n&G(33)   SETC  '3333 '\n&C(34)   SETC  '4  4 '\n&D(34)   SETC  '4  4 '\n&E(34)   SETC  '44444'\n&F(34)   SETC  '   4 '\n&G(34)   SETC  '   4 '\n&C(35)   SETC  '55555'\n&D(35)   SETC  '5    '\n&E(35)   SETC  '5555 '\n&F(35)   SETC  '    5'\n&G(35)   SETC  '5555 '\n&C(36)   SETC  ' 666 '\n&D(36)   SETC  '6    '\n&E(36)   SETC  '6666 '\n&F(36)   SETC  '6   6'\n&G(36)   SETC  ' 666 '\n&C(37)   SETC  '77777'\n&D(37)   SETC  '   7 '\n&E(37)   SETC  '  7  '\n&F(37)   SETC  '  7  '\n&G(37)   SETC  '  7  '\n&C(38)   SETC  ' 888 '\n&D(38)   SETC  '8   8'\n&E(38)   SETC  ' 888 '\n&F(38)   SETC  '8   8'\n&G(38)   SETC  ' 888 '\n&C(39)   SETC  ' 999 '\n&D(39)   SETC  '9   9'\n&E(39)   SETC  ' 9999'\n&F(39)   SETC  '    9'\n&G(39)   SETC  ' 999 '\n&C(40)   SETC  '@@@@ '\n&D(40)   SETC  '    @'\n&E(40)   SETC  '@@@ @'\n&F(40)   SETC  '@ @ @'\n&G(40)   SETC  '@@@@ '\n&C(41)   SETC  '%%  %'\n&D(41)   SETC  '   % '\n&E(41)   SETC  '  %  '\n&F(41)   SETC  ' %   '\n&G(41)   SETC  '%  %%'\n&C(42)   SETC  '* * *'\n&D(42)   SETC  ' *** '\n&E(42)   SETC  '*****'\n&F(42)   SETC  ' *** '\n&G(42)   SETC  '* * *'\n&C(43)   SETC  '    /'\n&D(43)   SETC  '   / '\n&E(43)   SETC  '  /  '\n&F(43)   SETC  ' /   '\n&G(43)   SETC  '/    '\n&C(44)   SETC  '     '\n&D(44)   SETC  '     '\n&E(44)   SETC  '-----'\n&F(44)   SETC  '     '\n&G(44)   SETC  '     '\n&C(45)   SETC  '   ( '\n&D(45)   SETC  '  (  '\n&E(45)   SETC  '  (  '\n&F(45)   SETC  '  (  '\n&G(45)   SETC  '   ( '\n&C(46)   SETC  ' )   '\n&D(46)   SETC  '  )  '\n&E(46)   SETC  '  )  '\n&F(46)   SETC  '  )  '\n&G(46)   SETC  ' )   '\n&C(47)   SETC  ' &&&&&& '\n&D(47)   SETC  '&&    '\n&E(47)   SETC  ' &&&&  '\n&F(47)   SETC  '&&   &&'\n&G(47)   SETC  ' &&&&&&&&'\n&C(48)   SETC  '  +  '\n&D(48)   SETC  '  +  '\n&E(48)   SETC  '+++++'\n&F(48)   SETC  '  +  '\n&G(48)   SETC  '  +  '\n&C(49)   SETC  '     '\n&D(49)   SETC  '     '\n&E(49)   SETC  '     '\n&F(49)   SETC  '     '\n&G(49)   SETC  '_____'\n&C(50)   SETC  '  *  '\n&D(50)   SETC  ' C*C '\n&E(50)   SETC  'C *  '\n&F(50)   SETC  ' C*C '\n&G(50)   SETC  '  *  '\n&C(51)   SETC  '  |  '\n&D(51)   SETC  '  |  '\n&E(51)   SETC  '  |  '\n&F(51)   SETC  '  |  '\n&G(51)   SETC  '  |  '\n&C(52)   SETC  ' >   '\n&D(52)   SETC  '  >  '\n&E(52)   SETC  '   > '\n&F(52)   SETC  '  >  '\n&G(52)   SETC  ' >   '\n&C(53)   SETC  ' ..  '\n&D(53)   SETC  ' ..  '\n&E(53)   SETC  '     '\n&F(53)   SETC  ' ..  '\n&G(53)   SETC  ' ..  '\n&C(54)   SETC  ' ..  '\n&D(54)   SETC  ' ..  '\n&E(54)   SETC  '     '\n&F(54)   SETC  ' ,,  '\n&G(54)   SETC  '  ,  '\n&C(55)   SETC  '     '\n&D(55)   SETC  '     '\n&E(55)   SETC  '     '\n&F(55)   SETC  ' ..  '\n&G(55)   SETC  ' ..  '\n&C(56)   SETC  ' ??? '\n&D(56)   SETC  '?   ?'\n&E(56)   SETC  '   ? '\n&F(56)   SETC  '  ?  '\n&G(56)   SETC  '  ?  '\n&C(57)   SETC  ' '' '' '\n&D(57)   SETC  '     '\n&E(57)   SETC  '     '\n&F(57)   SETC  '     '\n&G(57)   SETC  '     '\n&C(58)   SETC  '     '\n&D(58)   SETC  '====='\n&E(58)   SETC  '     '\n&F(58)   SETC  '====='\n&G(58)   SETC  '     '\n&C(59)   SETC  ' ||  '\n&D(59)   SETC  ' ||  '\n&E(59)   SETC  ' ||  '\n&F(59)   SETC  '     '\n&G(59)   SETC  ' ..  '\n&C(60)   SETC  '   < '\n&D(60)   SETC  '  <  '\n&E(60)   SETC  ' <   '\n&F(60)   SETC  '  <  '\n&G(60)   SETC  '   < '\n&C(61)   SETC  '     '\n&D(61)   SETC  '     '\n&E(61)   SETC  '\u00ac\u00ac\u00ac\u00ac\u00ac'\n&F(61)   SETC  '    \u00ac'\n&G(61)   SETC  '     '\n&C(62)   SETC  '     '\n&D(62)   SETC  '     '\n&E(62)   SETC  '     '\n&F(62)   SETC  '     '\n&G(62)   SETC  '     '\n&J       SETA  1\n&K       SETA  1\n         AIF   ('&LETTERS'(1,1) NE '''').JLOOP\n.LLOOP   ANOP\n&J       SETA  &J+1\n.JLOOP   AIF   (K'&LETTERS LT &J).END\n         AIF   (K'&LETTERS EQ &J AND '&LETTERS'(&J,1) EQ '''').END\n&I       SETA  1\n.COMP    AIF   ('&B(&I)' EQ '&LETTERS'(&J,1)).FND\n&I       SETA  &I+1\n         AIF   (&I LT 62).COMP\n.FND     ANOP\n&A(&K)   SETC  '&C(&I)'\n&A(&K+1) SETC  '&D(&I)'\n&A(&K+2) SETC  '&E(&I)'\n&A(&K+3) SETC  '&F(&I)'\n&A(&K+4) SETC  '&G(&I)'\n&K       SETA  &K+5\n         AIF   (&K LT 51).LLOOP\n.END     ANOP\n         SPACE 2\n         MNOTE *,'******************************************************\n               ****************'\n         MNOTE *,' '\n&I       SETA  1\n.REDO    MNOTE *,' &A(&I)  &A(&I+5)  &A(&I+10)  &A(&I+15)  &A(&I+20)  &*\n               A(&I+25)  &A(&I+30)  &A(&I+35)  &A(&I+40)  &A(&I+45)'\n&I       SETA  &I+1\n         AIF   (&I LT 6).REDO\n         MNOTE *,' '\n         MNOTE *,'******************************************************\n               ****************'\n         MEXIT\n         SPACE 4\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@BROWSE": {"ttr": 2565, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @BROWSE &DSN,                  TSO DSNAME                     *\n               &VOL,                    VOLUME                         *\n               &PASS,                   PASSWORD                       *\n               &PANEL,                  PANEL ID                       *\n               &DATAID,                 DATA ID                        *\n               &MEMBER,                 MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFBROWSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&DSN' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFBROWSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DSN'(1,1) EQ '''').GENLIT\n         AIF   ('&VOL' EQ '').CNT1\n         AIF   ('&VOL'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&PASS' EQ '').CNT2\n         AIF   ('&PASS'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&DATAID' EQ '').CNT4\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.CNT4    AIF   ('&MEMBER' EQ '').CNT5\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT5    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFBROWSE).BYP20\nBROWSE   DC    CL8'BROWSE'              BROWSE LITERAL FOR ISPF\n&SPFBROWSE SETB 1\n.BYP20   ANOP\n         AIF   ('&DSN'(1,1) NE '''').BYP30\nSPFD&NDX DC    CL56&DSN                 BROWSE THIS DATASET NAME\n.BYP30   ANOP\n         AIF   ('&VOL' EQ '').BYP40\n         AIF   ('&VOL'(1,1) NE '''').BYP40\nSPFV&NDX DC    CL6&VOL                  GENERATED VOLSER\n.BYP40   ANOP\n         AIF   ('&PASS' EQ '').BYP50\n         AIF   ('&PASS'(1,1) NE '''').BYP50\nSPFP&NDX DC    CL8&PASS                 GENERATED PASSWORD\n.BYP50   ANOP\n         AIF   ('&PANEL' EQ '').BYP60\n         AIF   ('&PANEL'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&PANEL                GENERATED PANEL ID\n.BYP60   ANOP\n         AIF   ('&DATAID' EQ '').BYP62\n         AIF   ('&DATAID'(1,1) NE '''').BYP62\nSPFA&NDX DC    CL8&DATAID               GENERATED DATAID\n.BYP62   ANOP\n         AIF   ('&MEMBER' EQ '').BYP64\n         AIF   ('&MEMBER'(1,1) NE '''').BYP64\nSPFM&NDX DC    CL8&MEMBER               GENERATED MEMBER\n.BYP64   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,BROWSE                GET ADDRESS OF BROWSE KEYWORD\n         AIF   ('&DSN'(1,1) NE '''').BYP80\n         LA    15,SPFD&NDX              GET ADDRESS OF GENERATED DSN\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&DSN                  GET ADDRESS OF DATASET NAME\n.BYP90   ANOP\n         AIF   ('&VOL' EQ '').BYP100\n         AIF   ('&VOL'(1,1) EQ '''').BYP110\n         LA    0,&VOL                   GET ADDRESS OF VOLSER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VOLSER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLSER\n.BYP120  ANOP\n         AIF   ('&PASS' EQ '').BYP140\n         AIF   ('&PASS'(1,1) NE '''').BYP130\n         LA    1,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&PASS                  GET ADDRESS OF PASSWORD\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PANEL' EQ '').BYP170\n         AIF   ('&PANEL'(1,1) EQ '''').BYP160\n         LA    14,&PANEL                GET ADDRESS OF PANEL ID\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PANEL ID\n.BYP180  ANOP\n         AIF   ('&DATAID' EQ '').BYP172\n         AIF   ('&DATAID'(1,1) EQ '''').BYP162\n         LA    15,&DATAID               GET ADDRESS OF DATA ID\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    15,SPFA&NDX              GET ADDRESS OF GENNED DATAID\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR DATA ID\n.BYP182  ANOP\n         AIF   ('&MEMBER' EQ '').BYP174\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP164\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER\n         AGO   .BYP184\n.BYP164  ANOP\n         LA    0,SPFM&NDX               GET ADDRESS OF GENNED MEMBER\n         AGO   .BYP184\n.BYP174  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n.BYP184  ANOP\n         STM   14,0,&TEMP+16            STORE AS FIFTH PARM\n         OI    &TEMP+24,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 7).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 7).BYPVARS\n&SPFVARS SETA  7\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(BROWSE)                BROWSE LITERAL\n         AIF   ('&DSN'(1,1) NE '''').BYP280\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DSN\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&DSN)                  ADDRESS OF DATASET NAME\n.BYP290  ANOP\n         AIF   ('&VOL' EQ '').BYP200\n         AIF   ('&VOL'(1,1) EQ '''').BYP210\n         DC    A(&VOL)                  ADDRESS OF VOLSER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VOLSER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VOLSER\n.BYP220  ANOP\n         AIF   ('&PASS' EQ '').BYP240\n         AIF   ('&PASS'(1,1) NE '''').BYP230\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASS\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&PASS)                 ADDRESS OF PASSWORD\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASSWORD\n.BYP250  ANOP\n         AIF   ('&PANEL' EQ '').BYP270\n         AIF   ('&PANEL'(1,1) EQ '''').BYP260\n         DC    A(&PANEL)                ADDRESS OF PANEL ID\n         AGO   .BYP300\n.BYP260  ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL ID\n.BYP300  ANOP\n         AIF   ('&DATAID' EQ '').BYP320\n         AIF   ('&DATAID'(1,1) EQ '''').BYP310\n         DC    A(&DATAID)               ADDRESS OF DATA ID\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENNED DATAID\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA ID\n.BYP330  ANOP\n         AIF   ('&MEMBER' EQ '').BYP374\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP364\n         DC    A(&MEMBER.+X'80000000')  ADDRESS OF MEMBER\n         AGO   .BYP384\n.BYP364  ANOP\n         DC    A(SPFM&NDX+X'80000000')  ADDRESS OF GENNED MEMBER\n         AGO   .BYP184\n.BYP374  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP384  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'BROWSE REQUIRES A VALID DSNAME PARAMETER - MISSING'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@DISPLAY": {"ttr": 2570, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @DISPLAY &PANEL,               PANEL NAME                     *\n               &MSG,                    MESSAGE ID                     *\n               &FIELD,                  FIELD FOR CURSOR               *\n               &CURPOS,                 POSITION WITHIN FIELD          *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFDISPLAY,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFDISPLAY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&FIELD' EQ '').CNT2\n         AIF   ('&FIELD'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   (T'&CURPOS EQ 'N').GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFDISPLAY).BYP20\nDISPLAY  DC    CL8'DISPLAY'             DISPLAY LITERAL FOR ISPF\n&SPFDISPLAY SETB 1\n.BYP20   ANOP\n         AIF   ('&PANEL' EQ '').BYP30\n         AIF   ('&PANEL'(1,1) NE '''').BYP30\nSPFP&NDX DC    CL8&PANEL                DISPLAY THIS PANEL\n.BYP30   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MSG                  GENERATED MSG\n.BYP40   ANOP\n         AIF   ('&FIELD' EQ '').BYP50\n         AIF   ('&FIELD'(1,1) NE '''').BYP50\nSPFF&NDX DC    CL8&FIELD                GENERATED FIELD POSITION\n.BYP50   ANOP\n         AIF   (T'&CURPOS NE 'N').BYP62\nSPFC&NDX DC    F'&CURPOS'               GENERATED CSRPOS\n.BYP62   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,DISPLAY               GET ADDRESS OF DISPLAY KEYWORD\n         AIF   ('&PANEL' EQ '').BYP80A\n         AIF   ('&PANEL'(1,1) NE '''').BYP80\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&PANEL                GET ADDRESS OF PANEL NAME\n         AGO   .BYP90\n.BYP80A  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR PANEL\n.BYP90   ANOP\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    0,&MSG                   GET ADDRESS OF MSG\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFM&NDX               GET ADDRESS OF GENERATED MSG\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MSG\n.BYP120  ANOP\n         AIF   ('&FIELD' EQ '').BYP140\n         AIF   ('&FIELD'(1,1) NE '''').BYP130\n         LA    1,SPFF&NDX               GET ADDRESS OF GENERATED FIELD\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&FIELD                 GET ADDRESS OF FIELD\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR FIELD\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&CURPOS' EQ '').BYP172\n         AIF   (T'&CURPOS EQ 'N').BYP162\n         LA    14,&CURPOS               GET ADDRESS OF CSRPOS\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED CSRPOS\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR CSRPOS\n.BYP182  ANOP\n         ST    14,&TEMP+16              STORE AS FIFTH PARM\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(DISPLAY)               DISPLAY LITERAL\n         AIF   ('&PANEL' EQ '').BYP282\n         AIF   ('&PANEL'(1,1) NE '''').BYP280\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&PANEL)                ADDRESS OF PANEL\n         AGO   .BYP290\n.BYP282  ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY PANEL\n.BYP290  ANOP\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG)                  ADDRESS OF MSG\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n.BYP220  ANOP\n         AIF   ('&FIELD' EQ '').BYP240\n         AIF   ('&FIELD'(1,1) NE '''').BYP230\n         DC    A(SPFF&NDX)              ADDRESS OF GENERATED FIELD\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&FIELD)                ADDRESS OF FIELD\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR FIELD\n.BYP250  ANOP\n         AIF   ('&CURPOS' EQ '').BYP320\n         AIF   (T'&CURPOS EQ 'N').BYP310\n         DC    A(&CURPOS+X'80000000')   ADDRESS OF CSRPOS\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENNED CSRPOS\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CSRPOS\n.BYP330  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@EDIT": {"ttr": 2817, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @EDIT &DSN,                    DATASET NAME                   *\n               &VOL,                    VOLUME                         *\n               &PASS,                   PASSWORD                       *\n               &PANEL,                  PANEL ID                       *\n               &MACRO,                  MACRO NAME                     *\n               &PROF,                   PROFILE NAME                   *\n               &DATAID,                 DATA ID                        *\n               &MEMBER,                 MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFEDIT,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n.*       AIF   ('&DSN' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFEDIT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DSN' EQ '').CNT0\n         AIF   ('&DSN'(1,1) EQ '''').GENLIT\n.CNT0    AIF   ('&VOL' EQ '').CNT1\n         AIF   ('&VOL'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&PASS' EQ '').CNT2\n         AIF   ('&PASS'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&DATAID' EQ '').CNT4\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.CNT4    AIF   ('&MEMBER' EQ '').CNT5\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT5    AIF   ('&MACRO' EQ '').CNT6\n         AIF   ('&MACRO'(1,1) EQ '''').GENLIT\n.CNT6    AIF   ('&PROF' EQ '').CNT7\n         AIF   ('&PROF'(1,1) EQ '''').GENLIT\n.CNT7    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFEDIT).BYP20\nEDIT     DC    CL8'EDIT'                EDIT LITERAL FOR ISPF\n&SPFEDIT SETB 1\n.BYP20   ANOP\n         AIF   ('&DSN' EQ '').BYP30\n         AIF   ('&DSN'(1,1) NE '''').BYP30\nSPFD&NDX DC    CL56&DSN                 EDIT THIS DATASET NAME\n.BYP30   ANOP\n         AIF   ('&VOL' EQ '').BYP40\n         AIF   ('&VOL'(1,1) NE '''').BYP40\nSPFV&NDX DC    CL6&VOL                  GENERATED VOLSER\n.BYP40   ANOP\n         AIF   ('&PASS' EQ '').BYP50\n         AIF   ('&PASS'(1,1) NE '''').BYP50\nSPFP&NDX DC    CL8&PASS                 GENERATED PASSWORD\n.BYP50   ANOP\n         AIF   ('&PANEL' EQ '').BYP60\n         AIF   ('&PANEL'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&PANEL                GENERATED PANEL ID\n.BYP60   ANOP\n         AIF   ('&DATAID' EQ '').BYP62\n         AIF   ('&DATAID'(1,1) NE '''').BYP62\nSPFA&NDX DC    CL8&DATAID               GENERATED DATAID\n.BYP62   ANOP\n         AIF   ('&MEMBER' EQ '').BYP64\n         AIF   ('&MEMBER'(1,1) NE '''').BYP64\nSPFM&NDX DC    CL8&MEMBER               GENERATED MEMBER\n.BYP64   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\n         AIF   ('&MACRO' EQ '').AYP60\n         AIF   ('&MACRO'(1,1) NE '''').AYP60\nSPFX&NDX DC    CL8&MACRO                GENERATED DATAID\n.AYP60   ANOP\n         AIF   ('&PROF' EQ '').AYP70\n         AIF   ('&PROF'(1,1) NE '''').AYP70\nSPFY&NDX DC    CL8&PROF                 GENERATED DATAID\n.AYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,EDIT                  GET ADDRESS OF EDIT KEYWORD\n         AIF   ('&DSN' EQ '').BYP85\n         AIF   ('&DSN'(1,1) NE '''').BYP80\n         LA    15,SPFD&NDX              GET ADDRESS OF GENERATED DSN\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&DSN                  GET ADDRESS OF DATASET NAME\n         AGO   .BYP90\n.BYP85   ANOP\n         LA    15,SPFNULLC              GET DUMMY ADDRESS FOR DSN\n.BYP90   ANOP\n         AIF   ('&VOL' EQ '').BYP100\n         AIF   ('&VOL'(1,1) EQ '''').BYP110\n         LA    0,&VOL                   GET ADDRESS OF VOLSER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VOLSER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLSER\n.BYP120  ANOP\n         AIF   ('&PASS' EQ '').BYP140\n         AIF   ('&PASS'(1,1) NE '''').BYP130\n         LA    1,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&PASS                  GET ADDRESS OF PASSWORD\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PANEL' EQ '').BYP170\n         AIF   ('&PANEL'(1,1) EQ '''').BYP160\n         LA    14,&PANEL                GET ADDRESS OF PANEL ID\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PANEL ID\n.BYP180  ANOP\n         AIF   ('&MACRO' EQ '').BYP172\n         AIF   ('&MACRO'(1,1) EQ '''').BYP162\n         LA    15,&MACRO                GET ADDRESS OF MACRO\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    15,SPFX&NDX              GET ADDRESS OF GENNED MACRO\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MACRO\n.BYP182  ANOP\n         AIF   ('&PROF' EQ '').BYP174\n         AIF   ('&PROF'(1,1) EQ '''').BYP164\n         LA    0,&PROF                  GET ADDRESS OF PROFILE\n         AGO   .BYP184\n.BYP164  ANOP\n         LA    0,SPFY&NDX               GET ADDRESS OF GENNED PROFILE\n         AGO   .BYP184\n.BYP174  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PROFILE\n.BYP184  ANOP\n         AIF   ('&DATAID' EQ '').AYP100\n         AIF   ('&DATAID'(1,1) EQ '''').AYP110\n         LA    1,&DATAID                GET ADDRESS OF DATAID\n         AGO   .AYP120\n.AYP100  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM OF DATAID\n         AGO   .AYP120\n.AYP110  ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENNED DATAID\n.AYP120  ANOP\n         STM   14,1,&TEMP+16            STORE PARMS\n         AIF   ('&MEMBER' EQ '').AYP170\n         AIF   ('&MEMBER'(1,1) EQ '''').AYP160\n         LA    14,&MEMBER               GET ADDRESS OF MEMBER\n         AGO   .AYP180\n.AYP160  ANOP\n         LA    14,SPFM&NDX              GET ADDRESS OF GENNED MEMBER\n         AGO   .AYP180\n.AYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.AYP180  ANOP\n         ST    14,&TEMP+32              STORE THE MEMBER PARMS\n         OI    &TEMP+32,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 9).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 9).BYPVARS\n&SPFVARS SETA  9\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(EDIT)                  EDIT LITERAL\n         AIF   ('&DSN' EQ '').BYP285\n         AIF   ('&DSN'(1,1) NE '''').BYP280\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DSN\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&DSN)                  ADDRESS OF DATASET NAME\n         AGO   .BYP290\n.BYP285  ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY DSN\n.BYP290  ANOP\n         AIF   ('&VOL' EQ '').BYP200\n         AIF   ('&VOL'(1,1) EQ '''').BYP210\n         DC    A(&VOL)                  ADDRESS OF VOLSER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VOLSER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VOLSER\n.BYP220  ANOP\n         AIF   ('&PASS' EQ '').BYP240\n         AIF   ('&PASS'(1,1) NE '''').BYP230\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASS\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&PASS)                 ADDRESS OF PASSWORD\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASSWORD\n.BYP250  ANOP\n         AIF   ('&PANEL' EQ '').BYP270\n         AIF   ('&PANEL'(1,1) EQ '''').BYP260\n         DC    A(&PANEL)                ADDRESS OF PANEL ID\n         AGO   .BYP300\n.BYP260  ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL ID\n.BYP300  ANOP\n         AIF   ('&MACRO' EQ '').CYP320\n         AIF   ('&MACRO'(1,1) EQ '''').CYP310\n         DC    A(&MACRO)                ADDRESS OF MACRO\n         AGO   .CYP330\n.CYP310  ANOP\n         DC    A(SPFX&NDX)              ADDRESS OF GENNED MACRO\n         AGO   .CYP330\n.CYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MACRO\n.CYP330  ANOP\n         AIF   ('&PROF' EQ '').DYP320\n         AIF   ('&PROF'(1,1) EQ '''').DYP310\n         DC    A(&MACRO)                ADDRESS OF PROFILE\n         AGO   .DYP330\n.DYP310  ANOP\n         DC    A(SPFY&NDX)              ADDRESS OF GENNED PROFILE\n         AGO   .DYP330\n.DYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PROFILE\n.DYP330  ANOP\n         AIF   ('&DATAID' EQ '').BYP320\n         AIF   ('&DATAID'(1,1) EQ '''').BYP310\n         DC    A(&DATAID)               ADDRESS OF DATA ID\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENNED DATAID\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA ID\n.BYP330  ANOP\n         AIF   ('&MEMBER' EQ '').BYP374\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP364\n         DC    A(&MEMBER.+X'80000000')  ADDRESS OF MEMBER\n         AGO   .BYP384\n.BYP364  ANOP\n         DC    A(SPFM&NDX+X'80000000')  ADDRESS OF GENNED MEMBER\n         AGO   .BYP384\n.BYP374  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP384  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'REQUIRED DSNAME PARAMETER MISSING'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FTCLOSE": {"ttr": 2823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @FTCLOSE &MEM,                 MEMBER NAME                    *\n               &LIB,                    LIBRARY NAME                   *\n               &NOREPLL,                NOREPL KEYWORD                 *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTCLOSE,&SPFNULLC,&SPFDEBUG,&SPFVAR,&SPFNOREPL\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&NOREPLL' NE '' AND                                   *\n               '&NOREPLL' NE 'NOREPL').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIB' EQ '').CNT2\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&NOREPLL' NE '' AND NOT &SPFNOREPL).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTCLOSE).BYP20\nFTCLOSE  DC    CL8'FTCLOSE'             ISPF KEYWORD\n&SPFFTCLOSE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&LIB' EQ '').BYP50\n         AIF   ('&LIB'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   ('&NOREPLL' EQ '').BYP60\n         AIF   (&SPFNOREPL).BYP60\nNOREPL   DC    CL8'NOREPL'              ISPF KEYWORD\n&SPFNOREPL SETB 1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTCLOSE               GET ADDRESS OF FTCLOSE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIB' EQ '').BYP140\n         AIF   ('&LIB'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIB                   GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         AIF   ('&NOREPLL' EQ '').BYP170\n         LA    1,NOREPL                 GET ADDRESS OF NOREPL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NOREPL\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTCLOSE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIB' EQ '').BYP240\n         AIF   ('&LIB'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIB)                  ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\n         AIF   ('&NOREPLL' EQ '').BYP270\n         DC    A(NOREPL+X'80000000')    ADDRESS OF NOREPL KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR NOREPL\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR NOREPL - FOUND ''&NOREPLL'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FTERASE": {"ttr": 2827, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @FTERASE &MEM,                 MEMBER NAME                    *\n               &LIB,                    LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTERASE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MEM' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIB' EQ '').CNT2\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTERASE).BYP20\nFTERASE  DC    CL8'FTERASE'             ISPF KEYWORD\n&SPFFTERASE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&LIB' EQ '').BYP50\n         AIF   ('&LIB'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTERASE               GET ADDRESS OF FTERASE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIB' EQ '').BYP140\n         AIF   ('&LIB'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIB                   GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTERASE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIB' EQ '').BYP240\n         AIF   ('&LIB'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIB+X'80000000')      ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'MEMBER NAME REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FTINCL": {"ttr": 3076, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @FTINCL &SKEL,                 MEMBER NAME                    *\n               &NOFTL,                  NOFT KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTINCL,&SPFDEBUG,&SPFVAR,&SPFNOFT\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&NOFTL' NE '' AND                                     *\n               '&NOFTL' NE 'NOFT').ERR1\n         AIF   ('&SKEL' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTINCL).GENLIT\n         AIF   ('&SKEL' EQ '').CNT1\n         AIF   ('&SKEL'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&NOFTL' NE '' AND NOT &SPFNOFT).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTINCL).BYP20\nFTINCL   DC    CL8'FTINCL'              ISPF KEYWORD\n&SPFFTINCL SETB 1\n.BYP20   ANOP\n         AIF   ('&SKEL' EQ '').BYP40\n         AIF   ('&SKEL'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SKEL                 GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&NOFTL' EQ '').BYP60\n         AIF   (&SPFNOFT).BYP60\nNOFT     DC    CL8'NOFT'                ISPF KEYWORD\n&SPFNOFT SETB  1\n.BYP60   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTINCL                GET ADDRESS OF FTINCL KEYWORD\n         AIF   ('&SKEL' EQ '').BYP100\n         AIF   ('&SKEL'(1,1) EQ '''').BYP110\n         LA    15,&SKEL                 GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&NOFTL' EQ '').BYP170\n         LA    0,NOFT                   GET ADDRESS OF NOFT\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NOFT\n.BYP180  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTINCL)                BROWSE LITERAL\n         AIF   ('&SKEL' EQ '').BYP200\n         AIF   ('&SKEL'(1,1) EQ '''').BYP210\n         DC    A(&SKEL)                 ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&NOFTL' EQ '').BYP270\n         DC    A(NOFT+X'80000000')      ADDRESS OF NOFT KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR NOFT\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR NOFT PARAMETER - FOUND ''&NOFTL'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'SKELETON NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FTOPEN": {"ttr": 3080, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @FTOPEN &TEMPL,                TEMP KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTOPEN,&SPFDEBUG,&SPFVAR,&SPFTEMP\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEM\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TEMPL' NE '' AND                                     *\n               '&TEMPL' NE 'TEMP').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEM     SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEM     SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTOPEN).GENLIT\n         AIF   ('&TEMPL' NE '' AND NOT &SPFTEMP).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTOPEN).BYP20\nFTOPEN   DC    CL8'FTOPEN'              ISPF KEYWORD\n&SPFFTOPEN SETB 1\n.BYP20   ANOP\n         AIF   ('&TEMPL' EQ '').BYP60\n         AIF   (&SPFTEMP).BYP60\nTEMP     DC    CL8'TEMP'                ISPF KEYWORD\n&SPFTEMP SETB  1\n.BYP60   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTOPEN                GET ADDRESS OF FTOPEN KEYWORD\n         AIF   ('&TEMPL' EQ '').BYP170\n         LA    15,TEMP                  GET ADDRESS OF TEMP\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TEMP\n.BYP180  ANOP\n         STM   14,15,&TEM               STORE PARAMETERS\n         OI    &TEM+4,X'80'             MARK LAST PARM\n         LA    1,&TEM                   GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTOPEN)                BROWSE LITERAL\n         AIF   ('&TEMPL' EQ '').BYP270\n         DC    A(TEMP+X'80000000')      ADDRESS OF TEMP KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TEMP\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR TEMP PARM - FOUND ''&TEMPL'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@GETMSG": {"ttr": 3083, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME   @GETMSG &MSG,                   MESSAGE NAME                   *\n               &SMSG,                   VAR FOR SHORT MESSAGE          *\n               &LMSG,                   VAR FOR LONG MESSAGE           *\n               &ALARM,                  VAR FOR ALARM VALUE            *\n               &HELP,                   VAR FOR HELP PANEL             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFGETMSG,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&MSG' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFGETMSG).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SMSG' EQ '').CNT2\n         AIF   ('&SMSG'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&LMSG' EQ '').CNT3\n         AIF   ('&LMSG'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ALARM' EQ '').CNT4\n         AIF   ('&ALARM'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&HELP' EQ '').CNT5\n         AIF   ('&HELP'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFGETMSG).BYP20\nGETMSG   DC    CL8'GETMSG'              ISPF KEYWORD\n&SPFGETMSG SETB 1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP30\n         AIF   ('&MSG'(1,1) NE '''').BYP30\nSPFM&NDX DC    CL8&MSG                  GENERATED MESSAGE NAME\n.BYP30   ANOP\n         AIF   ('&SMSG' EQ '').BYP40\n         AIF   ('&SMSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SMSG                 GENERATED SHORT MESSAGE\n.BYP40   ANOP\n         AIF   ('&LMSG' EQ '').BYP50\n         AIF   ('&LMSG'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LMSG                 GENERATED LONG MESSAGE\n.BYP50   ANOP\n         AIF   ('&ALARM' EQ '').BYP60\n         AIF   ('&ALARM'(1,1) NE '''').BYP60\nSPFA&NDX DC    CL8&ALARM                GENERATED ALARM VAR FIELD\n.BYP60   ANOP\n         AIF   ('&HELP' EQ '').BYP70\n         AIF   ('&HELP'(1,1) NE '''').BYP70\nSPFH&NDX DC    CL8&HELP                 GENERATED HELP VAR FIELD\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,GETMSG                GET ADDRESS OF GETMSG KEYWORD\n.*\n         AIF   ('&MSG' EQ '').BYP1000\n         AIF   ('&MSG'(1,1) EQ '''').BYP1010\n         LA    15,&MSG                  GET ADDRESS OF MSG NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MSG\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MSG\n.BYP1050 ANOP\n.*\n         AIF   ('&SMSG' EQ '').BYP1100\n         AIF   ('&SMSG'(1,1) EQ '''').BYP1110\n         LA    0,&SMSG                  GET ADDRESS OF SHORT MSG\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SHORT MSG\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SHORT\n.BYP1150 ANOP\n.*\n         AIF   ('&LMSG' EQ '').BYP1200\n         AIF   ('&LMSG'(1,1) EQ '''').BYP1210\n         LA    1,&LMSG                  GET ADDRESS OF LONG MSG NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LONG MSG\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LONG\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ALARM' EQ '').BYP1300\n         AIF   ('&ALARM'(1,1) EQ '''').BYP1310\n         LA    14,&ALARM                GET ADDRESS OF ALARM NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ALARM\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFA&NDX              GET ADDRESS OF GENERATED ALARM\n.BYP1350 ANOP\n.*\n         AIF   ('&HELP' EQ '').BYP1400\n         AIF   ('&HELP'(1,1) EQ '''').BYP1410\n         LA    15,&HELP                 GET ADDRESS OF HELP NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR HELP\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENERATED HELP\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(GETMSG)                GETMSG LITERAL\n.*\n         AIF   ('&MSG' EQ '').BYP2000\n         AIF   ('&MSG'(1,1) EQ '''').BYP2010\n         DC    A(&MSG)                  ADDRESS OF MSG NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n.BYP2050 ANOP\n.*\n         AIF   ('&SMSG' EQ '').BYP2100\n         AIF   ('&SMSG'(1,1) EQ '''').BYP2110\n         DC    A(&SMSG)                 ADDRESS OF SHORT MSG\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SMSG SHORT MSG\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SHORT MSG\n.BYP2150 ANOP\n.*\n         AIF   ('&LMSG' EQ '').BYP2200\n         AIF   ('&LMSG'(1,1) EQ '''').BYP2210\n         DC    A(&LMSG)                 ADDRESS OF LONG MESSAGE\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LONG MESSAGE\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LONG MES\n.BYP2250 ANOP\n.*\n         AIF   ('&ALARM' EQ '').BYP2300\n         AIF   ('&ALARM'(1,1) EQ '''').BYP2310\n         DC    A(&ALARM)                ADDRESS OF ALARM NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ALARM\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ALARM\n.BYP2350 ANOP\n.*\n         AIF   ('&HELP' EQ '').BYP2800\n         AIF   ('&HELP'(1,1) EQ '''').BYP2810\n         DC    A(&HELP+X'80000000')     ADDRESS OF HELP NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR HELP\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFH&NDX+X'80000000')  ADDRESS OF GENERATED HELP\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE MESSAGE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@LOG": {"ttr": 3331, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @LOG &MSG,                     MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLOG,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MSG' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLOG).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFLOG).BYP20\nLOG      DC    CL8'LOG'                 ISPF KEYWORD\n&SPFLOG SETB   1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&MSG                  GENERATED MEMBER NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,LOG                   GET ADDRESS OF LOG KEYWORD\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    15,&MSG                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(LOG)                   BROWSE LITERAL\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG+X'80000000')      ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'MSG NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@SETMSG": {"ttr": 3334, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @SETMSG &MSG,                  MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFSETMSG,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MSG' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFSETMSG).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFSETMSG).BYP20\nSETMSG   DC    CL8'SETMSG'              ISPF KEYWORD\n&SPFSETMSG SETB 1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&MSG                  GENERATED MEMBER NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,SETMSG                GET ADDRESS OF SETMSG KEYWORD\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    15,&MSG                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(SETMSG)                BROWSE LITERAL\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG+X'80000000')      ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'MSG NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBADD": {"ttr": 3337, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBADD &TABLE,                 TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ORDER,                  ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBADD,&SPFDEBUG,&SPFVAR,&SPFORDER,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' NE '' AND                                     *\n               '&ORDER' NE 'ORDER').ERR1\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBADD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' NE '' AND NOT &SPFORDER).GENLIT\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBADD).BYP20\nTBADD    DC    CL8'TBADD'               ISPF KEYWORD\n&SPFTBADD SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   (&SPFORDER).BYP60\nORDER    DC    CL8'ORDER'               ISPF KEYWORD\n&SPFORDER SETB  1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBADD                 GET ADDRESS OF TBADD KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         LA    1,ORDER                  GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBADD)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         DC    A(ORDER+X'80000000')     ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'EXPECTED ORDER KEYWORD - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBBOTTO": {"ttr": 3341, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBBOTTO &TABLE,               TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ROWID,                  ROW ID NAME                    *\n               &NOREAD,                 NOREAD KEYWORD                 *\n               &POS,                    POSITION NUMBER                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBBOTTOM,&SPFNULLC,&SPFDEBUG,&SPFVAR,&SPFNOREAD\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' NE '' AND                                    *\n               '&NOREAD' NE 'NOREAD').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBBOTTOM).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&ROWID' EQ '').CNT3\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&NOREAD' NE '' AND NOT &SPFNOREAD).GENLIT\n         AIF   ('&POS' EQ '').CNT4\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&POS' EQ '').CNT5\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBBOTTOM).BYP20\nTBBOTTOM DC    CL8'TBBOTTOM'            ISPF KEYWORD\n&SPFTBBOTTOM SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&SAVE' EQ '').BYP40\n         AIF   ('&SAVE'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SAVE                 GENERATED SAVE NAME-LIST\n.BYP40   ANOP\n         AIF   ('&ROWID' EQ '').BYP50\n         AIF   ('&ROWID'(1,1) NE '''').BYP50\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP50   ANOP\n         AIF   ('&NOREAD' EQ '').BYP60\n         AIF   (&SPFNOREAD).BYP60\nNOREAD   DC    CL8'NOREAD'              GENERATED NOREAD KEYWORD\n&SPFNOREAD SETB 1\n.BYP60   ANOP\n         AIF   ('&POS' EQ '').BYP70\n         AIF   ('&POS'(1,1) NE '''').BYP70\nSPFP&NDX DC    CL8&POS                  GENERATED POSITION VAR\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBBOTTOM              GET ADDRESS OF TBBOTTOM KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP1100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP1110\n         LA    0,&SAVE                  GET ADDRESS OF SAVE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SAVE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n.BYP1150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1210\n         LA    1,&ROWID                 GET ADDRESS OF ROWID NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWID\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFR&NDX               GET ADDRESS OF GENERATED ROWID\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NOREAD' EQ '').BYP1300\n         LA    14,NOREAD                GET ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR NOREAD\n.BYP1350 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP1400\n         AIF   ('&POS'(1,1) EQ '''').BYP1410\n         LA    15,&POS                  GET ADDRESS OF POS NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR POS\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED POS\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBBOTTOM)              TBBOTTOM LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP2100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP2110\n         DC    A(&SAVE)                 ADDRESS OF SAVE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SAVE NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SAVE\n.BYP2150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2210\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2250 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2300\n         DC    A(NOREAD)                ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n.BYP2350 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP2400\n         AIF   ('&POS'(1,1) EQ '''').BYP2410\n         DC    A(&POS+X'80000000')      ADDRESS OF POS NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR POS\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFP&NDX+X'80000000')  ADDRESS OF GENERATED POS\n.BYP2450 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NOREAD KEYWORD EXPECTED - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBCLOSE": {"ttr": 3589, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBCLOSE &TABLE,               TABLE NAME                     *\n               &NEWCOPY,                NEWCOPY OR REPLCOPY            *\n               &ALT,                    ALTERNATE NAME FOR SAVE        *\n               &PER,                    PERCENT                        *\n               &LIB,                    LIBRARY                        *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBCLOSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEWCOPY,&SPFREPLCOPY\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEWCOPY' NE '' AND '&NEWCOPY' NE 'NEWCOPY' AND       *\n               '&NEWCOPY' NE 'REPLCOPY').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NEWCOPY' EQ 'NEWCOPY' AND NOT &SPFNEWCOPY).GENLIT\n         AIF   ('&NEWCOPY' EQ 'REPLCOPY' AND NOT &SPFREPLCOPY).GENLIT\n         AIF   ('&ALT' EQ '').CNT3\n         AIF   ('&ALT'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   (T'&PER EQ 'N').GENLIT\n         AIF   ('&LIB' EQ '').CNT5\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBCLOSE).BYP20\nTBCLOSE  DC    CL8'TBCLOSE'             ISPF KEYWORD\n&SPFTBCLOSE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&NEWCOPY' EQ '').BYP40\n         AIF   ('&NEWCOPY' NE 'NEWCOPY' OR &SPFNEWCOPY).BYP35\nNEWCOPY  DC    CL8'NEWCOPY'             ISPF KEYWORD\n&SPFNEWCOPY SETB 1\n.BYP35   ANOP\n         AIF   ('&NEWCOPY' NE 'REPLCOPY' OR &SPFREPLCOPY).BYP40\nREPLCOPY DC    CL8'REPLCOPY'            ISPF KEYWORD\n&SPFREPLCOPY SETB 1\n.BYP40   ANOP\n         AIF   ('&ALT' EQ '').BYP50\n         AIF   ('&ALT'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&ALT                  GENERATED ALT NAME\n.BYP50   ANOP\n         AIF   (T'&PER NE 'N').BYP60\nSPFP&NDX DC    F'&PER'                  GENERATED PERCENTAGE\n.BYP60   ANOP\n         AIF   ('&LIB' EQ '').BYP70\n         AIF   ('&LIB'(1,1) NE '''').BYP70\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBCLOSE               GET ADDRESS OF TBCLOSE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP1100\n         LA    0,&NEWCOPY               GET ADDRESS OF COPY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR COPY\n.BYP1150 ANOP\n.*\n         AIF   ('&ALT' EQ '').BYP1200\n         AIF   ('&ALT'(1,1) EQ '''').BYP1210\n         LA    1,&ALT                   GET ADDRESS OF ALT NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ALT\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED ALT\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PER' EQ '').BYP1300\n         AIF   (T'&PER EQ 'N').BYP1310\n         LA    14,&PER                  GET ADDRESS OF PERCENT\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PERCENT\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFP&NDX              GET ADDRESS OF GENERATED PERCT\n.BYP1350 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP1400\n         AIF   ('&LIB'(1,1) EQ '''').BYP1410\n         LA    15,&LIB                  GET ADDRESS OF LIB NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR LIB\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENERATED LIB\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBCLOSE)               TBCLOSE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP2100\n         DC    A(&NEWCOPY)              ADDRESS OF COPY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR COPY NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&ALT' EQ '').BYP2200\n         AIF   ('&ALT'(1,1) EQ '''').BYP2210\n         DC    A(&ALT)                  ADDRESS OF ALT NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ALT\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ALT\n.BYP2250 ANOP\n.*\n         AIF   ('&PER' EQ '').BYP2300\n         AIF   (T'&PER EQ 'N').BYP2310\n         DC    A(&PER)                  ADDRESS OF PERCENT\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PERCENT\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PERCENT\n.BYP2350 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP2400\n         AIF   ('&LIB'(1,1) EQ '''').BYP2410\n         DC    A(&LIB+X'80000000')      ADDRESS OF LIB NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIB\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIB\n.BYP2450 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEWCOPY OR REPLCOPY EXPECTED AS KEYWORD - FOUND ''&N*\n               EWCOPY'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBCREAT": {"ttr": 3594, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LBL     @TBCREAT &TABLE,               TABLE NAME                     *\n               &KEYS,                   KEYS NAME LIST                 *\n               &NAME,                   NAMES NAME LIST                *\n               &WRITE,                  WRITE NOWRITE KEYWORD          *\n               &REP,                    REPLACE KEYWORD                *\n               &LIB,                    LIBRARY                        *\n               &SHARE,                  SHARE STATUS                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBCREATE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFREPLACE,&SPFSHARE,&SPFWRITE,&SPFNOWRITE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LBL' EQ '').BYP10\n&LBL     DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&REP' NE '' AND '&REP' NE 'REPLACE').ERR2\n         AIF   ('&SHARE' NE '' AND '&SHARE' NE 'SHARE').ERR3\n         AIF   ('&WRITE' NE '' AND '&WRITE' NE 'WRITE' AND             *\n               '&WRITE' NE 'NOWRITE').ERR4\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBCREATE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&KEYS' EQ '').CNT2\n         AIF   ('&KEYS'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NAME' EQ '').CNT3\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&WRITE' EQ 'WRITE' AND NOT &SPFWRITE).GENLIT\n         AIF   ('&WRITE' EQ 'NOWRITE' AND NOT &SPFNOWRITE).GENLIT\n.CNT4    ANOP\n         AIF   ('&REP' NE '' AND NOT &SPFREPLACE).GENLIT\n         AIF   ('&LIB' EQ '').CNT6\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&SHARE' NE '' AND NOT &SPFSHARE).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBCREATE).BYP20\nTBCREATE DC    CL8'TBCREATE'            ISPF KEYWORD\n&SPFTBCREATE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&KEYS' EQ '').BYP40\n         AIF   ('&KEYS'(1,1) NE '''').BYP40\nSPFK&NDX DC    C&KEYS                   GENERATED KEYS NAME LIST\n.BYP40   ANOP\n         AIF   ('&NAME' EQ '').BYP50\n         AIF   ('&NAME'(1,1) NE '''').BYP50\nSPFN&NDX DC    C&NAME                   GENERATED NAMELIST\n.BYP50   ANOP\n         AIF   ('&WRITE' EQ '').BYP60\n         AIF   ('&WRITE' NE 'WRITE' OR &SPFWRITE).BYP55\nWRITE    DC    CL8'WRITE'               ISPF KEYWORD\n&SPFWRITE SETB 1\n.BYP55   ANOP\n         AIF   ('&WRITE' NE 'NOWRITE' OR &SPFNOWRITE).BYP60\nNOWRITE  DC    CL8'NOWRITE'             ISPF KEYWORD\n&SPFNOWRITE SETB 1\n.BYP60   ANOP\n         AIF   ('&REP' EQ '').BYP70\n         AIF   (&SPFREPLACE).BYP70\nREPLACE  DC    CL8'REPLACE'             GENERATED REPLACE KEYWORD\n.BYP70   ANOP\n         AIF   ('&LIB' EQ '').BYP80\n         AIF   ('&LIB'(1,1) NE '''').BYP80\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP80   ANOP\n         AIF   ('&SHARE' EQ '').BYP90\n         AIF   (&SPFSHARE).BYP90\nSHARE    DC    CL8'SHARE'               GENERATED SHARE KEYWORD\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBCREATE              GET ADDRESS OF TBCREATE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP1100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP1110\n         LA    0,&KEYS                  GET ADDRESS OF KEYS NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR KEYS\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFK&NDX               GET ADDRESS OF GENERATED KEYS\n.BYP1150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP1200\n         AIF   ('&NAME'(1,1) EQ '''').BYP1210\n         LA    1,&NAME                  GET ADDRESS OF NAME NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFN&NDX               GET ADDRESS OF GENERATED NAME\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&WRITE' EQ '').BYP1300\n         LA    14,&WRITE                GET ADDRESS OF WRITE NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR WRITE\n.BYP1350 ANOP\n.*\n         AIF   ('&REP' EQ '').BYP1400\n         LA    15,REPLACE               GET ADDRESS OF REPLACE KEYWORD\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR REPLACE\n.BYP1450 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP1500\n         AIF   ('&LIB'(1,1) EQ '''').BYP1510\n         LA    0,&LIB                   GET ADDRESS OF LIB NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIB\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n.BYP1550 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP1600\n         LA    1,SHARE                  GET ADDRESS OF SHARE NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR SHARE\n         AGO   .BYP1650\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBCREATE)              TBCREATE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP2100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP2110\n         DC    A(&KEYS)                 ADDRESS OF KEYS NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEYS NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFK&NDX)              ADDRESS OF GENERATED KEYS\n.BYP2150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP2200\n         AIF   ('&NAME'(1,1) EQ '''').BYP2210\n         DC    A(&NAME)                 ADDRESS OF NAME LIST\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NAME\n.BYP2250 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP2300\n         DC    A(&WRITE)                ADDRESS OF WRITE KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR WRITE\n.BYP2350 ANOP\n.*\n         AIF   ('&REP' EQ '').BYP2400\n         DC    A(REPLACE)               ADDRESS OF REPLACE KEYWORD\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR REP\n.BYP2450 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP2500\n         AIF   ('&LIB'(1,1) EQ '''').BYP2510\n         DC    A(&LIB)                  ADDRESS OF LIB NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIB\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIB\n.BYP2550 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP2800\n         DC    A(SHARE+X'80000000')     ADDRESS OF SHARE KEYWORD\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SHARE\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'REPLACE KEYWORD EXPECTED - FOUND ''&REP'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'SHARE KEYWORD EXPECTED - FOUND ''&SHARE'''\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'WRITE/NOWRITE KEYWORD EXPECTED - FOUND ''&WRITE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBDISPL": {"ttr": 3845, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBDISPL &TABLE,               TABLE NAME                     *\n               &PANEL,                  PANEL NAME                     *\n               &MSG,                    MESSAGE ID                     *\n               &FIELD,                  FIELD FOR CURSOR               *\n               &ROW,                    TABLE ROW NUMBER               *\n               &CSRPOS,                 CURSOR POSITION                *\n               &AUTOSEL,                AUTOSEL INDICATOR              *\n               &CRPROW,                 ROW POINTED TO BY CRP          *\n               &ROWID,                  SPECIAL ROWN NUMBER            *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBDISPL,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFYES,&SPFNO\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&AUTOSEL' NE '' AND '&AUTOSEL' NE 'YES' AND           *\n               '&AUTOSEL' NE 'NO').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBDISPL).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&PANEL' EQ '').CNT2\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&MSG' EQ '').CNT3\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&FIELD' EQ '').CNT4\n         AIF   ('&FIELD'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&ROW' EQ '').CNT5\n         AIF   ('&ROW'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&CSRPOS' EQ '').CNT6\n         AIF   ('&CSRPOS'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&AUTOSEL' EQ 'YES' AND NOT &SPFYES).GENLIT\n         AIF   ('&AUTOSEL' EQ 'NO' AND  NOT &SPFNO).GENLIT\n.CNT7    ANOP\n         AIF   ('&CRPROW' EQ '').CNT8\n         AIF   ('&CRPROW'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&ROWID' EQ '').CNT9\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBDISPL).BYP20\nTBDISPL  DC    CL8'TBDISPL'             ISPF KEYWORD\n&SPFTBDISPL SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&PANEL' EQ '').BYP40\n         AIF   ('&PANEL'(1,1) NE '''').BYP40\nSPFP&NDX DC    CL8&PANEL                GENERATED PANEL NAME\n.BYP40   ANOP\n         AIF   ('&MSG' EQ '').BYP50\n         AIF   ('&MSG'(1,1) NE '''').BYP50\nSPFM&NDX DC    CL8&MSG                  GENERATED MSG NAME\n.BYP50   ANOP\n         AIF   ('&FIELD' EQ '').BYP60\n         AIF   ('&FIELD'(1,1) NE '''').BYP60\nSPFF&NDX DC    CL8&FIELD                GENERATED FIELD NAME\n.BYP60   ANOP\n         AIF   ('&ROW' EQ '').BYP70\n         AIF   ('&ROW'(1,1) NE '''').BYP70\nSPFR&NDX DC    CL8&ROW                  GENERATED ROW NAME\n.BYP70   ANOP\n         AIF   ('&CSRPOS' EQ '').BYP80\n         AIF   ('&CSRPOS'(1,1) NE '''').BYP80\nSPFC&NDX DC    CL8&CSRPOS               GENERATED CSRPOS\n.BYP80   ANOP\n         AIF   ('&AUTOSEL' EQ '').BYP90\n         AIF   ('&AUTOSEL' NE 'YES' OR &SPFYES).BYP85\nYES      DC    CL8'YES'                 ISPF KEYWORD\n&SPFYES  SETB  1\n.BYP85   ANOP\n         AIF   ('&AUTOSEL' NE 'NO' OR &SPFNO).BYP90\nNO       DC    CL8'NO'                  ISPF KEYWORD\n&SPFNO   SETB  1\n.BYP90   ANOP\n         AIF   ('&CRPROW' EQ '').BYP100\n         AIF   ('&CRPROW'(1,1) NE '''').BYP100\nSPFW&NDX DC    CL8&CRPROW               GENERATED CRPROW VALUE\n.BYP100  ANOP\n         AIF   ('&ROWID' EQ '').BYP110\n         AIF   ('&ROWID'(1,1) NE '''').BYP110\nSPFI&NDX DC    CL8&ROWID                GENERATED ROWID VALUE\n.BYP110  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBDISPL               GET ADDRESS OF TBDISPL KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&PANEL' EQ '').BYP1100\n         AIF   ('&PANEL'(1,1) EQ '''').BYP1110\n         LA    0,&PANEL                 GET ADDRESS OF PANEL NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PANEL\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFP&NDX               GET ADDRESS OF GENERATED PANEL\n.BYP1150 ANOP\n.*\n         AIF   ('&MSG' EQ '').BYP1200\n         AIF   ('&MSG'(1,1) EQ '''').BYP1210\n         LA    1,&MSG                   GET ADDRESS OF MSG NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR MSG\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFM&NDX               GET ADDRESS OF GENERATED MSG\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&FIELD' EQ '').BYP1300\n         AIF   ('&FIELD'(1,1) EQ '''').BYP1310\n         LA    14,&FIELD                GET ADDRESS OF FIELD NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR FIELD\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFF&NDX              GET ADDRESS OF GENERATED FIELD\n.BYP1350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP1400\n         AIF   ('&ROW'(1,1) EQ '''').BYP1410\n         LA    15,&ROW                  GET ADDRESS OF ROW NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&CSRPOS' EQ '').BYP1500\n         AIF   ('&CSRPOS'(1,1) EQ '''').BYP1510\n         LA    0,&CSRPOS                GET ADDRESS OF CSRPOS NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CSRPOS\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFC&NDX               GET ADDRESS OF GENERATED CSRPOS\n.BYP1550 ANOP\n.*\n         AIF   ('&AUTOSEL' EQ '').BYP1600\n         LA    1,&AUTOSEL               GET ADDRESS OF AUTOSEL NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR AUTOSEL\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         AIF   ('&CRPROW' EQ '').BYP1700\n         AIF   ('&CRPROW'(1,1) EQ '''').BYP1710\n         LA    14,&CRPROW               GET ADDRESS OF CRPROW NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR CRPROW\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFW&NDX              GET ADDRESS OF GENERATED CRPROW\n.BYP1750 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1800\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1810\n         LA    15,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFI&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1850 ANOP\n         STM   14,15,&TEMP+32           STORE PARAMETERS INTO LIST\n         OI    &TEMP+36,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 10).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 10).BYPVARS\n&SPFVARS SETA  10\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBDISPL)               TBDISPL LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&PANEL' EQ '').BYP2100\n         AIF   ('&PANEL'(1,1) EQ '''').BYP2110\n         DC    A(&PANEL)                ADDRESS OF PANEL NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PANEL\n.BYP2150 ANOP\n.*\n         AIF   ('&MSG' EQ '').BYP2200\n         AIF   ('&MSG'(1,1) EQ '''').BYP2210\n         DC    A(&MSG)                  ADDRESS OF MSG NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n.BYP2250 ANOP\n.*\n         AIF   ('&FIELD' EQ '').BYP2300\n         AIF   ('&FIELD'(1,1) EQ '''').BYP2310\n         DC    A(&FIELD)                ADDRESS OF FIELD NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR FIELD\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFF&NDX)              ADDRESS OF GENERATED FIELD\n.BYP2350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP2400\n         AIF   ('&ROW'(1,1) EQ '''').BYP2410\n         DC    A(&ROW)                  ADDRESS OF ROW NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&CSRPOS' EQ '').BYP2500\n         AIF   ('&CSRPOS'(1,1) EQ '''').BYP2510\n         DC    A(&CSRPOS)               ADDRESS OF CSRPOS NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFC&NDX)              ADDRESS OF GENERATED CSRPOS\n.BYP2550 ANOP\n.*\n         AIF   ('&AUTOSEL' EQ '').BYP2600\n         DC    A(&AUTOSEL)              ADDRESS OF AUTOSEL NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR AUTOSEL\n.BYP2650 ANOP\n.*\n         AIF   ('&CRPROW' EQ '').BYP2700\n         AIF   ('&CRPROW'(1,1) EQ '''').BYP2710\n         DC    A(&CRPROW)               ADDRESS OF CRPROW NAME\n         AGO   .BYP2750\n.BYP2700 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CRPROW\n         AGO   .BYP2750\n.BYP2710 ANOP\n         DC    A(SPFW&NDX)              ADDRESS OF GENERATED CRPROW\n.BYP2750 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2800\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2810\n         DC    A(&ROWID+X'80000000')    ADDRESS OF ROWID NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ROWID\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFI&NDX+X'80000000')  ADDRESS OF GENERATED ROWID\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID AUTOSEL VALUE - FOUND ''&AUTOSEL'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBERASE": {"ttr": 3852, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBERASE &MEM,                 MEMBER NAME                    *\n               &LIB,                    LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBERASE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MEM' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIB' EQ '').CNT2\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBERASE).BYP20\nTBERASE  DC    CL8'TBERASE'             ISPF KEYWORD\n&SPFTBERASE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&LIB' EQ '').BYP50\n         AIF   ('&LIB'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBERASE               GET ADDRESS OF TBERASE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIB' EQ '').BYP140\n         AIF   ('&LIB'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIB                   GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBERASE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIB' EQ '').BYP240\n         AIF   ('&LIB'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIB+X'80000000')      ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'MEMBER NAME REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBGET": {"ttr": 4100, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBGET &TABLE,                 TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ROWID,                  ROW ID NAME                    *\n               &NOREAD,                 NOREAD KEYWORD                 *\n               &POS,                    POSITION NUMBER                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBGET,&SPFNULLC,&SPFDEBUG,&SPFVAR,&SPFNOREAD\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' NE '' AND                                    *\n               '&NOREAD' NE 'NOREAD').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBGET).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&ROWID' EQ '').CNT3\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&NOREAD' NE '' AND NOT &SPFNOREAD).GENLIT\n         AIF   ('&POS' EQ '').CNT4\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&POS' EQ '').CNT5\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBGET).BYP20\nTBGET DC       CL8'TBGET'               ISPF KEYWORD\n&SPFTBGET SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&SAVE' EQ '').BYP40\n         AIF   ('&SAVE'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SAVE                 GENERATED SAVE NAME-LIST\n.BYP40   ANOP\n         AIF   ('&ROWID' EQ '').BYP50\n         AIF   ('&ROWID'(1,1) NE '''').BYP50\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP50   ANOP\n         AIF   ('&NOREAD' EQ '').BYP60\n         AIF   (&SPFNOREAD).BYP60\nNOREAD   DC    CL8'NOREAD'              GENERATED NOREAD KEYWORD\n&SPFNOREAD SETB 1\n.BYP60   ANOP\n         AIF   ('&POS' EQ '').BYP70\n         AIF   ('&POS'(1,1) NE '''').BYP70\nSPFP&NDX DC    CL8&POS                  GENERATED POSITION VAR\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBGET                 GET ADDRESS OF TBGET KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP1100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP1110\n         LA    0,&SAVE                  GET ADDRESS OF SAVE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SAVE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n.BYP1150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1210\n         LA    1,&ROWID                 GET ADDRESS OF ROWID NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWID\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFR&NDX               GET ADDRESS OF GENERATED ROWID\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NOREAD' EQ '').BYP1300\n         LA    14,NOREAD                GET ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR NOREAD\n.BYP1350 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP1400\n         AIF   ('&POS'(1,1) EQ '''').BYP1410\n         LA    15,&POS                  GET ADDRESS OF POS NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR POS\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED POS\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBGET)                 TBGET LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP2100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP2110\n         DC    A(&SAVE)                 ADDRESS OF SAVE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SAVE NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SAVE\n.BYP2150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2210\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2250 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2300\n         DC    A(NOREAD)                ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n.BYP2350 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP2400\n         AIF   ('&POS'(1,1) EQ '''').BYP2410\n         DC    A(&POS+X'80000000')      ADDRESS OF POS NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR POS\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFP&NDX+X'80000000')  ADDRESS OF GENERATED POS\n.BYP2450 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NOREAD KEYWORD EXPECTED - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBMOD": {"ttr": 4105, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBMOD &TABLE,                 TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ORDER,                  ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBMOD,&SPFDEBUG,&SPFVAR,&SPFORDER,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' NE '' AND                                     *\n               '&ORDER' NE 'ORDER').ERR1\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBMOD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' NE '' AND NOT &SPFORDER).GENLIT\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBMOD).BYP20\nTBMOD    DC    CL8'TBMOD'               ISPF KEYWORD\n&SPFTBMOD SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   (&SPFORDER).BYP60\nORDER    DC    CL8'ORDER'               ISPF KEYWORD\n&SPFORDER SETB  1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBMOD                 GET ADDRESS OF TBMOD KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         LA    1,ORDER                  GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBMOD)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         DC    A(ORDER+X'80000000')     ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'ORDER KEYWORD EXPECTED - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBOPEN": {"ttr": 4109, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBOPEN &TABLE,                TABLE NAME                     *\n               &WRITE,                  WRITE/NOWRITE PARM             *\n               &LIB,                    LIBRARY                        *\n               &SHARE,                  SHARE OPERAND                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBOPEN,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFSHARE,&SPFWRITE,&SPFNOWRITE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&SHARE' NE '' AND '&SHARE' NE 'SHARE').ERR2\n         AIF   ('&WRITE' NE '' AND '&WRITE' NE 'WRITE' AND             *\n               '&WRITE' NE 'NOWRITE').ERR3\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBOPEN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&WRITE' EQ 'WRITE' AND NOT &SPFWRITE).GENLIT\n         AIF   ('&WRITE' EQ 'NOWRITE' AND NOT &SPFNOWRITE).GENLIT\n         AIF   ('&LIB' EQ '').CNT3\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&SHARE' EQ '').CNT4\n         AIF   ('&SHARE'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBOPEN).BYP20\nTBOPEN   DC    CL8'TBOPEN'              ISPF KEYWORD\n&SPFTBOPEN SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&WRITE' EQ '').BYP40\n         AIF   ('&WRITE' NE 'WRITE' OR &SPFWRITE).BYP35\nWRITE    DC    CL8'WRITE'               ISPF KEYWORD\n&SPFWRITE SETB 1\n.BYP35   ANOP\n         AIF   ('&WRITE' NE 'NOWRITE' OR &SPFNOWRITE).BYP40\nNOWRITE  DC    CL8'NOWRITE'             ISPF KEYWORD\n&SPFNOWRITE SETB 1\n.BYP40   ANOP\n         AIF   ('&LIB' EQ '').BYP50\n         AIF   ('&LIB'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIB                  GENERATED LIB NAME\n.BYP50   ANOP\n         AIF   ('&SHARE' EQ '' OR &SPFSHARE).BYP60\nSHARE    DC    CL8'SHARE'               ISPF KEYWORD\n&SPFSHARE SETB 1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBOPEN                GET ADDRESS OF TBOPEN KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP1100\n         LA    0,&WRITE                 GET ADDRESS OF WRITE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR WRITE\n.BYP1150 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP1200\n         AIF   ('&LIB'(1,1) EQ '''').BYP1210\n         LA    1,&LIB                   GET ADDRESS OF LIB NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LIB\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&SHARE' EQ '').BYP1300\n         LA    14,SHARE                 GET ADDRESS OF FIELD NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR FIELD\n.BYP1350 ANOP\n.*\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBOPEN)                TBOPEN LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP2100\n         DC    A(&WRITE)                ADDRESS OF WRITE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR WRITE NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP2200\n         AIF   ('&LIB'(1,1) EQ '''').BYP2210\n         DC    A(&LIB)                  ADDRESS OF LIB NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIB\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIB\n.BYP2250 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP2300\n         DC    A(SHARE+X'80000000')     ADDRESS OF SHARE NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SHARE\n.BYP2350 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'SHARE KEYWORD EXPECTED - FOUND ''&SHARE'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'WRITE NOWRITE KEYWORD EXPECTED - FOUND ''&WRITE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBPUT": {"ttr": 4357, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBPUT &TABLE,                 TABLE NAME                     *\n               &SAVE,                   SAVE NAME-LIST                 *\n               &ORDER,                  ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBPUT,&SPFDEBUG,&SPFVAR,&SPFORDER,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' NE '' AND                                     *\n               '&ORDER' NE 'ORDER').ERR1\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBPUT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' NE '' AND NOT &SPFORDER).GENLIT\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBPUT).BYP20\nTBPUT    DC    CL8'TBPUT'               ISPF KEYWORD\n&SPFTBPUT SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   (&SPFORDER).BYP60\nORDER    DC    CL8'ORDER'               ISPF KEYWORD\n&SPFORDER SETB  1\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBPUT                 GET ADDRESS OF TBPUT KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         LA    1,ORDER                  GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBPUT)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         DC    A(ORDER+X'80000000')     ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'ORDER KEYWORD EXPECTED - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBQUERY": {"ttr": 4361, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBQUERY &TABLE,               TABLE NAME                     *\n               &KEY,                    KEY NAME                       *\n               &VAR,                    VAR NAME                       *\n               &ROW,                    NUMBER OF ROWS                 *\n               &KEYN,                   NUMBER OF KEYS                 *\n               &VARN,                   NUMBER OF NAMES                *\n               &CRP,                    CURRENT CRP                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBQUERY,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBQUERY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&KEY' EQ '').CNT2\n         AIF   ('&KEY'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&VAR' EQ '').CNT3\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROW' EQ '').CNT4\n         AIF   ('&ROW'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&KEYN' EQ '').CNT5\n         AIF   ('&KEYN'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&VARN' EQ '').CNT6\n         AIF   ('&VARN'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&CRP' EQ '').CNT7\n         AIF   ('&CRP'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBQUERY).BYP20\nTBQUERY  DC    CL8'TBQUERY'             ISPF KEYWORD\n&SPFTBQUERY SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&KEY' EQ '').BYP40\n         AIF   ('&KEY'(1,1) NE '''').BYP40\nSPFK&NDX DC    CL8&KEY                  GENERATED KEY VAR NAME\n.BYP40   ANOP\n         AIF   ('&VAR' EQ '').BYP50\n         AIF   ('&VAR'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&VAR                  GENERATED VAR NAME\n.BYP50   ANOP\n         AIF   ('&ROW' EQ '').BYP60\n         AIF   ('&ROW'(1,1) NE '''').BYP60\nSPFR&NDX DC    CL8&ROW                  GENERATED ROWNUM VAR\n.BYP60   ANOP\n         AIF   ('&KEYN' EQ '').BYP70\n         AIF   ('&KEYN'(1,1) NE '''').BYP70\nSPFE&NDX DC    CL8&KEYN                 GENERATED KEYNUM VAR\n.BYP70   ANOP\n         AIF   ('&VARN' EQ '').BYP80\n         AIF   ('&VARN'(1,1) NE '''').BYP80\nSPFA&NDX DC    CL8&VARN                 GENERATED VARNUM VAR\n.BYP80   ANOP\n         AIF   ('&CRP' EQ '').BYP90\n         AIF   ('&CRP'(1,1) NE '''').BYP90\nSPFC&NDX DC    CL8&CRP                  GENERATED CRP VAR\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBQUERY               GET ADDRESS OF TBQUERY KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&KEY' EQ '').BYP1100\n         AIF   ('&KEY'(1,1) EQ '''').BYP1110\n         LA    0,&KEY                   GET ADDRESS OF KEY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR KEY\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFK&NDX               GET ADDRESS OF GENERATED KEY\n.BYP1150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP1200\n         AIF   ('&VAR'(1,1) EQ '''').BYP1210\n         LA    1,&VAR                   GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROW' EQ '').BYP1300\n         AIF   ('&ROW'(1,1) EQ '''').BYP1310\n         LA    14,&ROW                  GET ADDRESS OF ROW NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1350 ANOP\n.*\n         AIF   ('&KEYN' EQ '').BYP1400\n         AIF   ('&KEYN'(1,1) EQ '''').BYP1410\n         LA    15,&KEYN                 GET ADDRESS OF KEYNUM NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR KEYNUM\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFE&NDX              GET ADDRESS OF GENERATED KEY\n.BYP1450 ANOP\n.*\n         AIF   ('&VARN' EQ '').BYP1500\n         AIF   ('&VARN'(1,1) EQ '''').BYP1510\n         LA    0,&VARN                  GET ADDRESS OF VARN NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VARN\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENERATED VARN\n.BYP1550 ANOP\n.*\n         AIF   ('&CRP' EQ '').BYP1600\n         AIF   ('&CRP'(1,1) EQ '''').BYP1610\n         LA    1,&CRP                   GET ADDRESS OF CRP NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR CRP\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFC&NDX               GET ADDRESS OF GENERATED CRP\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBQUERY)               TBQUERY LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&KEY' EQ '').BYP2100\n         AIF   ('&KEY'(1,1) EQ '''').BYP2110\n         DC    A(&KEY)                  ADDRESS OF KEY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEY NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFK&NDX)              ADDRESS OF GENERATED KEY\n.BYP2150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP2200\n         AIF   ('&VAR'(1,1) EQ '''').BYP2210\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP2300\n         AIF   ('&ROW'(1,1) EQ '''').BYP2310\n         DC    A(&ROW)                  ADDRESS OF ROW NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2350 ANOP\n.*\n         AIF   ('&KEYN' EQ '').BYP2400\n         AIF   ('&KEYN'(1,1) EQ '''').BYP2410\n         DC    A(&KEYN)                 ADDRESS OF KEYN NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEYN\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFE&NDX)              ADDRESS OF GENERATED KEYN\n.BYP2450 ANOP\n.*\n         AIF   ('&VARN' EQ '').BYP2500\n         AIF   ('&VARN'(1,1) EQ '''').BYP2510\n         DC    A(&VARN)                 ADDRESS OF VARN NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VARN\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED VARN\n.BYP2550 ANOP\n.*\n         AIF   ('&CRP' EQ '').BYP2600\n         AIF   ('&CRP'(1,1) EQ '''').BYP2610\n         DC    A(&CRP+X'80000000')      ADDRESS OF CRP NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CRP\n         AGO   .BYP2650\n.BYP2610 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED AUTOSE\n.BYP2650 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBSARG": {"ttr": 4611, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBSARG &TABLE,                TABLE NAME                     *\n               &VAR,                    NAME LIST                      *\n               &NEXT,                   NEXT OR PREVIOUS               *\n               &COND,                   NAME COND PAIRS                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSARG,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEXT,&SPFPREVIOUS\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEXT' NE '' AND '&NEXT' NE 'NEXT' AND                *\n               '&NEXT' NE 'PREVIOUS').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSARG).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&VAR' EQ '').CNT2\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NEXT' EQ 'NEXT' AND NOT &SPFNEXT).GENLIT\n         AIF   ('&NEXT' EQ 'PREVIOUS' AND NOT &SPFPREVIOUS).GENLIT\n         AIF   ('&COND' EQ '').CNT4\n         AIF   ('&COND'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSARG).BYP20\nTBSARG   DC    CL8'TBSARG'              ISPF KEYWORD\n&SPFTBSARG SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&VAR' EQ '').BYP40\n         AIF   ('&VAR'(1,1) NE '''').BYP40\nSPFV&NDX DC    C&VAR                    GENERATED NAMELIST\n.BYP40   ANOP\n         AIF   ('&NEXT' EQ '').BYP50\n         AIF   ('&NEXT' NE 'NEXT' OR &SPFNEXT).BYP45\nNEXT     DC    CL8'NEXT'                ISPF KEYWORD\n&SPFNEXT SETB  1\n.BYP45   ANOP\n         AIF   ('&NEXT' NE 'PREVIOUS' OR &SPFPREVIOUS).BYP50\nPREVIOUS DC    CL8'PREVIOUS'            ISPF KEYWORD\n&SPFPREVIOUS SETB  1\n.BYP50   ANOP\n         AIF   ('&COND' EQ '').BYP60\n         AIF   ('&COND'(1,1) NE '''').BYP60\nSPFC&NDX DC    C&COND                   GENERATED CONDITIONS\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSARG                GET ADDRESS OF TBSARG KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP1100\n         AIF   ('&VAR'(1,1) EQ '''').BYP1110\n         LA    0,&VAR                   GET ADDRESS OF VAR NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1150 ANOP\n.*\n         AIF   ('&NEXT' EQ '').BYP1200\n         LA    1,&NEXT                  GET ADDRESS OF KEYWORD\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&COND' EQ '').BYP1300\n         AIF   ('&COND'(1,1) EQ '''').BYP1310\n         LA    14,&COND                 GET ADDRESS OF COND NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR COND\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED COND\n.BYP1350 ANOP\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSARG)                TBSARG LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP2100\n         AIF   ('&VAR'(1,1) EQ '''').BYP2110\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2150 ANOP\n.*\n         AIF   ('&NEXT' EQ '').BYP2200\n         DC    A(&NEXT)                 ISPF KEYWORD\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n.BYP2250 ANOP\n.*\n         AIF   ('&COND' EQ '').BYP2300\n         AIF   ('&COND'(1,1) EQ '''').BYP2310\n         DC    A(&COND+X'80000000')     ADDRESS OF COND NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR COND\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED COND\n.BYP2350 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEXT/PREVIOUS KEYWORD EXPECTED - FOUND ''&NEXT'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBSAVE": {"ttr": 4616, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBSAVE &TABLE,                TABLE NAME                     *\n               &NEWCOPY,                NEWCOPY OR REPLCOPY            *\n               &ALT,                    ALTERNATE NAME FOR SAVE        *\n               &PER,                    PERCENT                        *\n               &LIB,                    LIBRARY                        *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSAVE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEWCOPY,&SPFREPLCOPY\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEWCOPY' NE '' AND '&NEWCOPY' NE 'NEWCOPY' AND       *\n               '&NEWCOPY' NE 'REPLCOPY').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSAVE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NEWCOPY' EQ 'NEWCOPY' AND NOT &SPFNEWCOPY).GENLIT\n         AIF   ('&NEWCOPY' EQ 'REPLCOPY' AND NOT &SPFREPLCOPY).GENLIT\n         AIF   ('&ALT' EQ '').CNT3\n         AIF   ('&ALT'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   (T'&PER EQ 'N').GENLIT\n         AIF   ('&LIB' EQ '').CNT5\n         AIF   ('&LIB'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSAVE).BYP20\nTBSAVE   DC    CL8'TBSAVE'              ISPF KEYWORD\n&SPFTBSAVE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&NEWCOPY' EQ '').BYP40\n         AIF   ('&NEWCOPY' NE 'NEWCOPY' OR &SPFNEWCOPY).BYP35\nNEWCOPY  DC    CL8'NEWCOPY'             ISPF KEYWORD\n&SPFNEWCOPY SETB 1\n.BYP35   ANOP\n         AIF   ('&NEWCOPY' NE 'REPLCOPY' OR &SPFREPLCOPY).BYP40\nREPLCOPY DC    CL8'REPLCOPY'            ISPF KEYWORD\n&SPFREPLCOPY SETB 1\n.BYP40   ANOP\n         AIF   ('&ALT' EQ '').BYP50\n         AIF   ('&ALT'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&ALT                  GENERATED ALT NAME\n.BYP50   ANOP\n         AIF   (T'&PER NE 'N').BYP60\nSPFP&NDX DC    F'&PER'                  GENERATED PERCENTAGE\n.BYP60   ANOP\n         AIF   ('&LIB' EQ '').BYP70\n         AIF   ('&LIB'(1,1) NE '''').BYP70\nSPFL&NDX DC    CL8&LIB                  GENERATED LIBRARY\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSAVE                GET ADDRESS OF TBSAVE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP1100\n         LA    0,&NEWCOPY               GET ADDRESS OF COPY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR COPY\n.BYP1150 ANOP\n.*\n         AIF   ('&ALT' EQ '').BYP1200\n         AIF   ('&ALT'(1,1) EQ '''').BYP1210\n         LA    1,&ALT                   GET ADDRESS OF ALT NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ALT\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED ALT\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PER' EQ '').BYP1300\n         AIF   (T'&PER EQ 'N').BYP1310\n         LA    14,&PER                  GET ADDRESS OF PERCENT\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PERCENT\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFP&NDX              GET ADDRESS OF GENERATED PERCT\n.BYP1350 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP1400\n         AIF   ('&LIB'(1,1) EQ '''').BYP1410\n         LA    15,&LIB                  GET ADDRESS OF LIB NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR LIB\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENERATED LIB\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSAVE)                TBSAVE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP2100\n         DC    A(&NEWCOPY)              ADDRESS OF COPY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR COPY NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&ALT' EQ '').BYP2200\n         AIF   ('&ALT'(1,1) EQ '''').BYP2210\n         DC    A(&ALT)                  ADDRESS OF ALT NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ALT\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ALT\n.BYP2250 ANOP\n.*\n         AIF   ('&PER' EQ '').BYP2300\n         AIF   (T'&PER EQ 'N').BYP2310\n         DC    A(&PER)                  ADDRESS OF PERCENT\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PERCENT\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PERCENT\n.BYP2350 ANOP\n.*\n         AIF   ('&LIB' EQ '').BYP2400\n         AIF   ('&LIB'(1,1) EQ '''').BYP2410\n         DC    A(&LIB+X'80000000')      ADDRESS OF LIB NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIB\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIB\n.BYP2450 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEWCOPY/REPLCOPY EXPECTED - FOUND ''&NEWCOPY'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBSCAN": {"ttr": 4621, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBSCAN &TABLE,                TABLE NAME                     *\n               &ARG,                    ARGLIST                        *\n               &VAR,                    EXTENSION VAR LIST             *\n               &ROWID,                  SAVE THE ROWID                 *\n               &NEXT,                   NEXT OR PREVIOUS               *\n               &NOREAD,                 NOREAD KEYWORD                 *\n               &POS,                    POSITION OF CRP                *\n               &COND,                   CONDITIONS FOR SEARCH          *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSCAN,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEXT,&SPFPREVIOUS,&SPFNOREAD\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEXT' NE '' AND '&NEXT' NE 'NEXT' AND                *\n               '&NEXT' NE 'PREVIOUS').ERR2\n         AIF   ('&NOREAD' NE '' AND '&NOREAD' NE 'NOREAD').ERR3\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSCAN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&ARG' EQ '').CNT2\n         AIF   ('&ARG'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&VAR' EQ '').CNT3\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWID' EQ '').CNT4\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&NEXT' EQ 'NEXT' AND NOT &SPFNEXT).GENLIT\n         AIF   ('&NEXT' EQ 'PREVIOUS' AND NOT &SPFPREVIOUS).GENLIT\n         AIF   ('&NOREAD' EQ 'NOREAD' AND NOT &SPFNOREAD).GENLIT\n         AIF   ('&POS' EQ '').CNT8\n         AIF   ('&POS'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&COND' EQ '').CNT9\n         AIF   ('&COND'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSCAN).BYP20\nTBSCAN   DC    CL8'TBSCAN'              ISPF KEYWORD\n&SPFTBSCAN SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&ARG' EQ '').BYP40\n         AIF   ('&ARG'(1,1) NE '''').BYP40\nSPFA&NDX DC    C&ARG                    GENERATED ARG-LIST\n.BYP40   ANOP\n         AIF   ('&VAR' EQ '').BYP50\n         AIF   ('&VAR'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&VAR                  GENERATED VARIABLE NAME\n.BYP50   ANOP\n         AIF   ('&ROWID' EQ '').BYP60\n         AIF   ('&ROWID'(1,1) NE '''').BYP60\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP60   ANOP\n         AIF   ('&NEXT' EQ '').BYP70\n         AIF   ('&NEXT' NE 'NEXT' OR &SPFNEXT).BYP65\nNEXT     DC    CL8'NEXT'                ISPF KEYWORD\n&SPFNEXT SETB  1\n.BYP65   ANOP\n         AIF   ('&NEXT' NE 'PREVIOUS' OR &SPFPREVIOUS).BYP70\nPREVIOUS DC    CL8'PREVIOUS'            ISPF KEYWORD\n&SPFPREVIOUS SETB  1\n.BYP70   ANOP\n         AIF   ('&NOREAD' EQ '' OR &SPFNOREAD).BYP80\nNOREAD   DC    CL8'NOREAD'              GENERATED CSRPOS\n.BYP80   ANOP\n         AIF   ('&POS' EQ '').BYP100\n         AIF   ('&POS'(1,1) NE '''').BYP100\nSPFP&NDX DC    CL8&POS                  GENERATED POSITION VAR\n.BYP100  ANOP\n         AIF   ('&COND' EQ '').BYP110\n         AIF   ('&COND'(1,1) NE '''').BYP110\nSPFC&NDX DC    C&COND                   GENERATED COND LIST\n.BYP110  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSCAN                GET ADDRESS OF TBSCAN KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&ARG' EQ '').BYP1100\n         AIF   ('&ARG'(1,1) EQ '''').BYP1110\n         LA    0,&ARG                   GET ADDRESS OF ARG LIST\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR ARG\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENERATED ARG\n.BYP1150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP1200\n         AIF   ('&VAR'(1,1) EQ '''').BYP1210\n         LA    1,&VAR                   GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWID' EQ '').BYP1300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1310\n         LA    14,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFR&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1350 ANOP\n.*\n         AIF   ('&NEXT' EQ '').BYP1400\n         LA    15,&NEXT                 GET ADDRESS OF KEYWORD\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP1500\n         LA    0,&NOREAD                GET ADDRESS OF KEYWORD\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CSRPOS\n.BYP1550 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP1600\n         AIF   ('&POS'(1,1) EQ '''').BYP1610\n         LA    1,&POS                   GET ADDRESS OF POS VAR NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR POS VAR\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFP&NDX               GET GENERATED POS VAR NAME\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         AIF   ('&COND' EQ '').BYP1700\n         AIF   ('&COND'(1,1) EQ '''').BYP1710\n         LA    14,&COND                 GET ADDRESS OF COND NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR COND\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED COND\n.BYP1750 ANOP\n.*\n         ST    14,&TEMP+32              STORE PARAMETERS INTO LIST\n         OI    &TEMP+32,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 9).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 9).BYPVARS\n&SPFVARS SETA  9\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSCAN)                TBSCAN LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&ARG' EQ '').BYP2100\n         AIF   ('&ARG'(1,1) EQ '''').BYP2110\n         DC    A(&ARG)                  ADDRESS OF ARG NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ARG NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ARG\n.BYP2150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP2200\n         AIF   ('&VAR'(1,1) EQ '''').BYP2210\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2310\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2350 ANOP\n.*\n         AIF   ('&NEXT' EQ '').BYP2400\n         DC    A(&NEXT)                 ADDRESS OF ISPF KEYWORD\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2500\n         DC    A(&NOREAD)               ADDRESS OF ISPF KEYWORD\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n.BYP2550 ANOP\n.*\n         AIF   ('&POS' EQ '').BYP2600\n         AIF   ('&POS'(1,1) EQ '''').BYP2610\n         DC    A(&POS)                  ADDRESS OF POS NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY PARM\n         AGO   .BYP2650\n.BYP2610 ANOP\n         DC    A(SPFP&NDX)              GENERATED POS VAR NAME\n.BYP2650 ANOP\n.*\n         AIF   ('&COND' EQ '').BYP2800\n         AIF   ('&COND'(1,1) EQ '''').BYP2810\n         DC    A(&COND+X'80000000')     ADDRESS OF COND NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR COND\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED COND\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEXT/PREVIOUS KEYWORDS EXPECTED - FOUND ''&NEXT'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'EXPECTED NOREAD KEYWORD - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@TBSKIP": {"ttr": 4870, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    @TBSKIP &TABLE,                TABLE NAME                     *\n               &NUM,                    NUMBER                         *\n               &VAR,                    VARIABLE FOR EXT VARS          *\n               &ROWID,                  VARIABLE NAME FOR ROWID        *\n               &ROW,                    ROWID TO GET                   *\n               &NOREAD,                 NOREAD KEYWORD                 *\n               &CRP,                    CRP VARIABLE                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSKIP,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNOREAD,&SPFF1\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' NE '' AND '&NOREAD' NE 'NOREAD').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSKIP).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   (T'&NUM EQ 'N').GENLIT\n         AIF   ('&NUM' EQ '' AND NOT &SPFF1).GENLIT\n         AIF   ('&VAR' EQ '').CNT3\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWID' EQ '').CNT4\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   (T'&ROW EQ 'N').CNT5\n         AIF   ('&NOREAD' EQ 'NOREAD' AND NOT &SPFNOREAD).GENLIT\n         AIF   ('&CRP' EQ '').CNT8\n         AIF   ('&CRP'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSKIP).BYP20\nTBSKIP   DC    CL8'TBSKIP'              ISPF KEYWORD\n&SPFTBSKIP SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   (T'&NUM NE 'N').BYP40\nSPFN&NDX DC    F'&NUM'                  GENERATED NUMBER\n.BYP40   ANOP\n         AIF   ('&NUM' NE '' OR &SPFF1).BYP45\nSPFF1    DC    F'1'\n&SPFF1   SETB  1\n.BYP45   ANOP\n         AIF   ('&VAR' EQ '').BYP50\n         AIF   ('&VAR'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&VAR                  GENERATED EXT VAR NAME\n.BYP50   ANOP\n         AIF   ('&ROWID' EQ '').BYP60\n         AIF   ('&ROWID'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP60   ANOP\n         AIF   (T'&ROW NE 'N').BYP70\nSPFR&NDX DC    F'&ROW'                  GENERATED ROWID\n.BYP70   ANOP\n         AIF   ('&NOREAD' NE 'NOREAD' OR &SPFNOREAD).BYP80\nNOREAD   DC    CL8'NOREAD'              ISPF KEYWORD\n&SPFNOREAD SETB 1\n.BYP80   ANOP\n         AIF   ('&CRP' EQ '').BYP100\n         AIF   ('&CRP'(1,1) NE '''').BYP100\nSPFC&NDX DC    CL8&CRP                  GENERATED CRP VARIABLE NAME\n.BYP100  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSKIP                GET ADDRESS OF TBSKIP KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NUM' EQ '').BYP1100\n         AIF   (T'&NUM EQ 'N').BYP1110\n         LA    0,&NUM                   GET ADDRESS OF NUM FIELD\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFF1                  GET DUMMY PARM FOR NUM\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFN&NDX               GET ADDRESS OF GENERATED NUM\n.BYP1150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP1200\n         AIF   ('&VAR'(1,1) EQ '''').BYP1210\n         LA    1,&VAR                   GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWID' EQ '').BYP1300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1310\n         LA    14,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP1400\n         AIF   (T'&ROW EQ 'N').BYP1410\n         LA    15,&ROW                  GET ADDRESS OF ROW NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP1500\n         LA    0,&NOREAD                GET ADDRESS OF NOREAD\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NOREAD\n.BYP1550 ANOP\n.*\n         AIF   ('&CRP' EQ '').BYP1600\n         AIF   ('&CRP'(1,1) EQ '''').BYP1610\n         LA    1,&AUTOSEL               GET ADDRESS OF CRP NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR AUTOSEL\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFC&NDX               GET DUMMY PARM FOR AUTOSEL\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSKIP)                TBSKIP LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NUM' EQ '').BYP2100\n         AIF   ('&NUM'(1,1) EQ '''').BYP2110\n         DC    A(&NUM)                  ADDRESS OF NUM NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFF1)                 DUMMY PARM FOR NUM NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NUM\n.BYP2150 ANOP\n.*\n         AIF   ('&VAR' EQ '').BYP2200\n         AIF   ('&VAR'(1,1) EQ '''').BYP2210\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2310\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP2400\n         AIF   ('&ROW'(1,1) EQ '''').BYP2410\n         DC    A(&ROW)                  ADDRESS OF ROW NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2500\n         DC    A(&NOREAD)               ADDRESS OF NOREAD\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n.BYP2550 ANOP\n.*\n         AIF   ('&CRP' EQ '').BYP2800\n         AIF   ('&CRP'(1,1) EQ '''').BYP2810\n         DC    A(&CRP+X'80000000')      ADDRESS OF CRP NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CRP\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFI&NDX+X'80000000')  ADDRESS OF GENERATED CRP\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'EXPECTED NOREAD KEYWORD - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BROWSE": {"ttr": 5121, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    BROWSE &P1,                                                   *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &DATASET=,               TSO DSNAME                     *\n               &VOLUME=,                VOLUME                         *\n               &PASSWORD=,              PASSWORD                       *\n               &PANEL=,                 PANEL ID                       *\n               &DATAID=,                DATA ID                        *\n               &MEMBER=,                MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFBROWSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         GBLC  &SPFLVL\n         LCLC  &NDX,&TEMP\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @BROWSE &P1,&P2,&P3,&P4,&P5,&P6,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFBROWSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATASET' EQ '').CNT0\n         AIF   ('&DATASET'(1,1) EQ '''').GENLIT\n.CNT0    AIF   ('&VOLUME' EQ '').CNT1\n         AIF   ('&VOLUME'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&PASSWORD' EQ '').CNT2\n         AIF   ('&PASSWORD'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&DATAID' EQ '').CNT4\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.CNT4    AIF   ('&MEMBER' EQ '').CNT5\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT5    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFBROWSE).BYP20\nBROWSE   DC    CL8'BROWSE'              BROWSE LITERAL FOR ISPF\n&SPFBROWSE SETB 1\n.BYP20   ANOP\n         AIF   ('&DATASET' EQ '').BYP30\n         AIF   ('&DATASET'(1,1) NE '''').BYP30\nSPFD&NDX DC    CL56&DATASET             BROWSE THIS DATASET NAME\n.BYP30   ANOP\n         AIF   ('&VOLUME' EQ '').BYP40\n         AIF   ('&VOLUME'(1,1) NE '''').BYP40\nSPFV&NDX DC    CL6&VOLUME               GENERATED VOLUME\n.BYP40   ANOP\n         AIF   ('&PASSWORD' EQ '').BYP50\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP50\nSPFP&NDX DC    CL8&PASSWORD             GENERATED PASSWORD\n.BYP50   ANOP\n         AIF   ('&PANEL' EQ '').BYP60\n         AIF   ('&PANEL'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&PANEL                GENERATED PANEL ID\n.BYP60   ANOP\n         AIF   ('&DATAID' EQ '').BYP62\n         AIF   ('&DATAID'(1,1) NE '''').BYP62\nSPFA&NDX DC    CL8&DATAID               GENERATED DATAID\n.BYP62   ANOP\n         AIF   ('&MEMBER' EQ '').BYP64\n         AIF   ('&MEMBER'(1,1) NE '''').BYP64\nSPFM&NDX DC    CL8&MEMBER               GENERATED MEMBER\n.BYP64   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,BROWSE                GET ADDRESS OF BROWSE KEYWORD\n         AIF   ('&DATASET' EQ '').BYP85\n         AIF   ('&DATASET'(1,1) NE '''').BYP80\n         LA    15,SPFD&NDX              GET ADDRESS OF GENERATED DSN\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&DATASET              GET ADDRESS OF DATASET NAME\n         AGO   .BYP90\n.BYP85   ANOP\n         LA    15,SPFNULLC              DUMMY PARM FOR DATASET NAME\n.BYP90   ANOP\n         AIF   ('&VOLUME' EQ '').BYP100\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP110\n         LA    0,&VOLUME                GET ADDRESS OF VOLUME\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VOL\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLUME\n.BYP120  ANOP\n         AIF   ('&PASSWORD' EQ '').BYP140\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP130\n         LA    1,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&PASSWORD              GET ADDRESS OF PASSWORD\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PANEL' EQ '').BYP170\n         AIF   ('&PANEL'(1,1) EQ '''').BYP160\n         LA    14,&PANEL                GET ADDRESS OF PANEL ID\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PANEL ID\n.BYP180  ANOP\n         AIF   ('&DATAID' EQ '').BYP172\n         AIF   ('&DATAID'(1,1) EQ '''').BYP162\n         LA    15,&DATAID               GET ADDRESS OF DATA ID\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    15,SPFA&NDX              GET ADDRESS OF GENNED DATAID\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR DATA ID\n.BYP182  ANOP\n         AIF   ('&MEMBER' EQ '').BYP174\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP164\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER\n         AGO   .BYP184\n.BYP164  ANOP\n         LA    0,SPFM&NDX               GET ADDRESS OF GENNED MEMBER\n         AGO   .BYP184\n.BYP174  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n.BYP184  ANOP\n         STM   14,0,&TEMP+16            STORE AS FIFTH PARM\n         OI    &TEMP+24,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 7).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 7).BYPVARS\n&SPFVARS SETA  7\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(BROWSE)                BROWSE LITERAL\n         AIF   ('&DATASET' EQ '').BYP285\n         AIF   ('&DATASET'(1,1) NE '''').BYP280\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DATASET\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&DATASET)              ADDRESS OF DATASET NAME\n         AGO   .BYP290\n.BYP285  ANOP\n         DC    A(SPFNULLC)              DUMMY  DATASET NAME\n.BYP290  ANOP\n         AIF   ('&VOLUME' EQ '').BYP200\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP210\n         DC    A(&VOLUME)               ADDRESS OF VOLUME\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VOLUME\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VOLUME\n.BYP220  ANOP\n         AIF   ('&PASSWORD' EQ '').BYP240\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP230\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASSWORD\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&PASSWORD)             ADDRESS OF PASSWORD\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASSWORD\n.BYP250  ANOP\n         AIF   ('&PANEL' EQ '').BYP270\n         AIF   ('&PANEL'(1,1) EQ '''').BYP260\n         DC    A(&PANEL)                ADDRESS OF PANEL ID\n         AGO   .BYP300\n.BYP260  ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL ID\n.BYP300  ANOP\n         AIF   ('&DATAID' EQ '').BYP320\n         AIF   ('&DATAID'(1,1) EQ '''').BYP310\n         DC    A(&DATAID)               ADDRESS OF DATA ID\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENNED DATAID\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA ID\n.BYP330  ANOP\n         AIF   ('&MEMBER' EQ '').BYP374\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP364\n         DC    A(&MEMBER.+X'80000000')  ADDRESS OF MEMBER\n         AGO   .BYP384\n.BYP364  ANOP\n         DC    A(SPFM&NDX+X'80000000')  ADDRESS OF GENNED MEMBER\n         AGO   .BYP184\n.BYP374  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP384  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONTROL": {"ttr": 5127, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    CONTROL &TYPE,                 CONTROL TYPE                   *\n               &MODE,                   MODE WITHIN TYPE               *\n               &LINENUM,                LINENUM OF LINE START FUNC     *\n               &MF=I,                   MACRO FORMAT                   *\n               &LOAD=ISPLINK            ADDRESS OF ISPF MODULE\n.*\n.*********************************************************************\n.*       GLOBALS\n.*********************************************************************\n.*\n         GBLB  &SPFCONTROL,&SPFDISPLAY,&SPFNONDISPL\n         GBLB  &SPFLOCK,&SPFLINE,&SPFSM,&SPFREFRESH\n         GBLB  &SPFENTER,&SPFEND,&SPFCANCEL,&SPFRETURN\n         GBLB  &SPFNULLF,&SPFVAR\n         GBLB  &SPFERRORS,&SPFSPLIT,&SPFNOCMD\n         GBLB  &SPFSAVE,&SPFRESTORE\n         GBLB  &SPFENABLE,&SPFDISABLE,&SPFDEBUG\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYPTEMA\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYPTEMB\n.BYPTEMA ANOP\n&TEMP    SETC  '&MF(2)'\n.BYPTEMB ANOP\n         AIF   ('&NAME' EQ '').BYP0\n&NAME    DS    0H\n.BYP0    ANOP\n.*\n.*********************************************************************\n.*       GENERAL EDITS\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n.*\n.*********************************************************************\n.*       EDIT THE &TYPE FIELD\n.*********************************************************************\n.*\n         AIF   ('&TYPE' EQ 'DISPLAY').DISP\n         AIF   ('&TYPE' EQ 'NONDISPL').NOND\n         AIF   ('&TYPE' EQ 'ERRORS').ERRO\n         AIF   ('&TYPE' EQ 'SPLIT').SPLI\n         AIF   ('&TYPE' EQ 'NOCMD').NOCM\n         AGO   .ERR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY\n.*********************************************************************\n.*\n.DISP    ANOP\n         AIF   ('&MODE' EQ 'LOCK').DISPLOCK\n         AIF   ('&MODE' EQ 'LINE').DISPLINE\n         AIF   ('&MODE' EQ 'SM').DISPSM\n         AIF   ('&MODE' EQ 'REFRESH').DISPREFR\n         AIF   ('&MODE' EQ 'SAVE').DISPSAVE\n         AIF   ('&MODE' EQ 'RESTORE').DISPREST\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LOCK\n.*********************************************************************\n.*\n.DISPLOCK ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN1\n         AIF   (NOT &SPFDISPLAY).GEN1\n         AIF   (NOT &SPFLOCK).GEN1\n         AGO   .BYPLIT1\n.GEN1    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP10   ANOP\n         AIF   (&SPFDISPLAY).BYP20\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP20   ANOP\n         AIF   (&SPFLOCK).BYP30\n&SPFLOCK SETB  1\nLOCK     DC    CL8'LOCK'                CONTROL KEYWORD FOR ISPF\n.BYP30   ANOP\nSPF&NDX  DS    0H\n.BYPLIT1 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LOCK   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,LOCK                   GET ADDRESS OF LOCK OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BYVAR1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n.BYPVAR1 ANOP\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LOCK   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(LOCK+X'80000000')      ADDRESS OF LOCK OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LINE\n.*********************************************************************\n.*\n.DISPLINE ANOP\n         AIF   (NOT &SPFCONTROL).GEN2\n         AIF   (NOT &SPFDISPLAY).GEN2\n         AIF   (NOT &SPFLINE).GEN2\n         AIF   (T'&LINENUM EQ 'N').GEN2\n         AIF   ('&LINENUM' EQ '' AND NOT &SPFNULLF).GEN2\n         AGO   .BYPLIT2\n.GEN2    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP110\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP110  ANOP\n         AIF   (&SPFDISPLAY).BYP120\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP120  ANOP\n         AIF   (&SPFLINE).BYP130\n&SPFLINE SETB  1\nLINE     DC    CL8'LINE'                CONTROL KEYWORD FOR ISPF\n.BYP130  ANOP\n         AIF   (T'&LINENUM NE 'N').BYP140\nSPFL&NDX DC    F'&LINENUM'              GENERATED SCREEN LINE NUMBER\n         AGO   .BYP150\n.BYP140  ANOP\n         AIF   ('&LINENUM' NE '').BYP150\n         AIF   (&SPFNULLF).BYP150\n&SPFNULLF SETB 1\nSPFNULLF DC    F'0'                     ISPF DUMMY FULLWORD GENERATED\n.BYP150  ANOP\nSPF&NDX  DS    0H\n.BYPLIT2 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LINE   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF2\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,LINE                   GET ADDRESS OF LINE OPERAND\n         AIF   (T'&LINENUM EQ 'N').BYP160\n         AIF   ('&LINENUM' EQ '').BYP170\n         LA    1,&LINENUM               GET ADDRESS OF LINE NUMBER\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LINE #\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLF               GET DUMMY FULLWORD FOR LINE #\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+12,X'80'           SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR2\n         AIF   (&SPFVARC LT 4).ERRVAR\n.BYVAR2  AIF   (&SPFVARS GE 4).BYPVAR1\n&SPFVARS SETA  4\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY LINE   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF2  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(LINE)                  ADDRESS OF LINE OPERAND\n         AIF   (T'&LINENUM EQ 'N').BYP185\n         AIF   ('&LINENUM' EQ '').BYP190\n         DC    A(&LINENUM+X'80000000')  ADDRESS OF LINE NUMBER\n         AGO   .BYP195\n.BYP185  ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LINE #\n         AGO   .BYP195\n.BYP190  ANOP\n         DC    A(SPFNULLF+X'80000000')  DUMMY FULLWORD FOR LINE #\n.BYP195  ANOP\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SM\n.*********************************************************************\n.*\n.DISPSM  ANOP\n         AIF   (NOT &SPFCONTROL).GEN3\n         AIF   (NOT &SPFDISPLAY).GEN3\n         AIF   (NOT &SPFSM).GEN3\n         AIF   (T'&LINENUM EQ 'N').GEN3\n         AIF   ('&LINENUM' EQ '' AND NOT &SPFNULLF).GEN3\n         AGO   .BYPLIT3\n.GEN3    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP210\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP210  ANOP\n         AIF   (&SPFDISPLAY).BYP220\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP220  ANOP\n         AIF   (&SPFSM).BYP230\n&SPFSM   SETB  1\nSM       DC    CL8'SM'                  CONTROL KEYWORD FOR ISPF\n.BYP230  ANOP\n         AIF   (T'&LINENUM NE 'N').BYP240\nSPFL&NDX DC    F'&LINENUM'              GENERATED SCREEN LINE NUMBER\n         AGO   .BYP250\n.BYP240  ANOP\n         AIF   ('&LINENUM' NE '').BYP250\n         AIF   (&SPFNULLF).BYP250\n&SPFNULLF SETB 1\nSPFNULLF DC    F'0'                     ISPF DUMMY FULLWORD GENERATED\n.BYP250  ANOP\nSPF&NDX  DS    0H\n.BYPLIT3 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SM     CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF3\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,SM                     GET ADDRESS OF SM OPERAND\n         AIF   (T'&LINENUM EQ 'N').BYP260\n         AIF   ('&LINENUM' EQ '').BYP270\n         LA    1,&LINENUM               GET ADDRESS OF LINE NUMBER\n         AGO   .BYP280\n.BYP260  ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LINE #\n         AGO   .BYP280\n.BYP270  ANOP\n         LA    1,SPFNULLF               GET DUMMY FULLWORD FOR LINE #\n.BYP280  ANOP\n         STM   14,1,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+12,X'80'           SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR3\n         AIF   (&SPFVARC LT 4).ERRVAR\n.BYVAR3  AIF   (&SPFVARS GE 4).BYPVAR1\n&SPFVARS SETA  4\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SM     CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF3  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(SM)                    ADDRESS OF SM OPERAND\n         AIF   (T'&LINENUM EQ 'N').BYP285\n         AIF   ('&LINENUM' EQ '').BYP290\n         DC    A(&LINENUM+X'80000000')  ADDRESS OF LINE NUMBER\n         AGO   .BYP295\n.BYP285  ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LINE #\n         AGO   .BYP295\n.BYP290  ANOP\n         DC    A(SPFNULLF+X'80000000')  DUMMY FULLWORD FOR LINE #\n.BYP295  ANOP\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY REFRESH\n.*********************************************************************\n.*\n.DISPREFR ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN4\n         AIF   (NOT &SPFDISPLAY).GEN4\n         AIF   (NOT &SPFREFRESH).GEN4\n         AGO   .BYPLIT4\n.GEN4    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP310\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP310  ANOP\n         AIF   (&SPFDISPLAY).BYP320\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP320  ANOP\n         AIF   (&SPFREFRESH).BYP330\n&SPFREFRESH SETB 1\nREFRESH  DC    CL8'REFRESH'             CONTROL KEYWORD FOR ISPF\n.BYP330  ANOP\nSPF&NDX  DS    0H\n.BYPLIT4 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY REFRESH CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF4\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,REFRESH                GET ADDRESS OF REFRESH OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR4\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BYVAR4  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY REFRESH CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF4  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(REFRESH+X'80000000')   ADDRESS OF REFRESH OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SAVE\n.*********************************************************************\n.*\n.DISPSAVE ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN5\n         AIF   (NOT &SPFDISPLAY).GEN5\n         AIF   (NOT &SPFSAVE).GEN5\n         AGO   .BYPLIT5\n.GEN5    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP410\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP410  ANOP\n         AIF   (&SPFDISPLAY).BYP420\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP420  ANOP\n         AIF   (&SPFSAVE).BYP430\n&SPFSAVE SETB  1\nSAVE     DC    CL8'SAVE'                CONTROL KEYWORD FOR ISPF\n.BYP430  ANOP\nSPF&NDX  DS    0H\n.BYPLIT5 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SAVE   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF5\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,SAVE                   GET ADDRESS OF SAVE OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR5\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BYVAR5  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY SAVE   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF5  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(SAVE+X'80000000')      ADDRESS OF SAVE OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY RESTORE\n.*********************************************************************\n.*\n.DISPREST ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN6\n         AIF   (NOT &SPFDISPLAY).GEN6\n         AIF   (NOT &SPFRESTORE).GEN6\n         AGO   .BYPLIT6\n.GEN6    ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYP510\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYP510  ANOP\n         AIF   (&SPFDISPLAY).BYP520\n&SPFDISPLAY SETB 1\nDISPLAY  DC    CL8'DISPLAY'             CONTROL KEYWORD FOR ISPF\n.BYP520  ANOP\n         AIF   (&SPFRESTORE).BYP530\n&SPFRESTORE SETB 1\nRESTORE  DC    CL8'RESTORE'             CONTROL KEYWORD FOR ISPF\n.BYP530  ANOP\nSPF&NDX  DS    0H\n.BYPLIT6 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY RESTORE CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').DISMF6\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,DISPLAY               GET ADDRESS OF DISPLAY OPERAND\n         LA    0,RESTORE                GET ADDRESS OF RESTORE OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR6\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BYVAR6  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL DISPLAY RESTORE CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.DISMF6  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(DISPLAY)               ADDRESS OF DISPLAY OPERAND\n         DC    A(RESTORE+X'80000000')   ADDRESS OF RESTORE OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL\n.*********************************************************************\n.*\n.NOND    ANOP\n         AIF   ('&MODE' EQ '').NONDENTE\n         AIF   ('&MODE' EQ 'ENTER').NONDENTE\n         AIF   ('&MODE' EQ 'END').NONDEND\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL ENTER\n.*********************************************************************\n.*\n.NONDENTE ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN10\n         AIF   (NOT &SPFNONDISPL).GEN10\n         AIF   (NOT &SPFENTER).GEN10\n         AGO   .BYPLIT10\n.GEN10   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYA10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYA10   ANOP\n         AIF   (&SPFNONDISPL).BYA20\n&SPFNONDISPL SETB 1\nNONDISPL DC    CL8'NONDISPL'            CONTROL KEYWORD FOR ISPF\n.BYA20   ANOP\n         AIF   (&SPFENTER).BYA30\n&SPFENTER SETB 1\nENTER    DC    CL8'ENTER'               CONTROL KEYWORD FOR ISPF\n.BYA30   ANOP\nSPF&NDX  DS    0H\n.BYPLIT10 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL ENTER CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').NONMF1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,NONDISPL              GET ADDRESS OF NONDISPL\n         LA    0,ENTER                  GET ADDRESS OF ENTER OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BAVAR1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BAVAR1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISP ENTER  CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.NONMF1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(NONDISPL)              ADDRESS OF NONDISPL OPERAND\n         DC    A(ENTER+X'80000000')     ADDRESS OF ENTER OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL END\n.*********************************************************************\n.*\n.NONDEND ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN20\n         AIF   (NOT &SPFNONDISPL).GEN20\n         AIF   (NOT &SPFEND).GEN20\n         AGO   .BYPLIT20\n.GEN20   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYB10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYB10   ANOP\n         AIF   (&SPFNONDISPL).BYB20\n&SPFNONDISPL SETB 1\nNONDISPL DC    CL8'NONDISPL'            CONTROL KEYWORD FOR ISPF\n.BYB20   ANOP\n         AIF   (&SPFEND).BYB30\n&SPFEND  SETB  1\nEND      DC    CL8'END'                 CONTROL KEYWORD FOR ISPF\n.BYB30   ANOP\nSPF&NDX  DS    0H\n.BYPLIT20 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISPL END   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').NONMF2\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,NONDISPL              GET ADDRESS OF NONDISPL\n         LA    0,END                    GET ADDRESS OF END OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BAVAR2\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BAVAR2  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NONDISP END    CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.NONMF2  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(NONDISPL)              ADDRESS OF NONDISPL OPERAND\n         DC    A(END+X'80000000')       ADDRESS OF END OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS\n.*********************************************************************\n.*\n.ERRO    ANOP\n         AIF   ('&MODE' EQ '').ERROCANC\n         AIF   ('&MODE' EQ 'CANCEL').ERROCANC\n         AIF   ('&MODE' EQ 'RETURN').ERRORETU\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL\n.*********************************************************************\n.*\n.ERROCANC ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN30\n         AIF   (NOT &SPFERRORS).GEN30\n         AIF   (NOT &SPFCANCEL).GEN30\n         AGO   .BYPLIT30\n.GEN30   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYC10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYC10   ANOP\n         AIF   (&SPFERRORS).BYC20\n&SPFERRORS SETB 1\nERRORS   DC    CL8'ERRORS'              CONTROL KEYWORD FOR ISPF\n.BYC20   ANOP\n         AIF   (&SPFCANCEL).BYC30\n&SPFCANCEL SETB 1\nCANCEL   DC    CL8'CANCEL'              CONTROL KEYWORD FOR ISPF\n.BYC30   ANOP\nSPF&NDX  DS    0H\n.BYPLIT30 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL  CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRMF1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,ERRORS                GET ADDRESS OF ERRORS OPERAND\n         LA    0,CANCEL                 GET ADDRESS OF CANCEL OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAR1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BBVAR1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL  CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRMF1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n         DC    A(CANCEL+X'80000000')    ADDRESS OF CANCEL OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS RETURN\n.*********************************************************************\n.*\n.ERRORETU ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEN40\n         AIF   (NOT &SPFERRORS).GEN40\n         AIF   (NOT &SPFRETURN).GEN40\n         AGO   .BYPLIT40\n.GEN40   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BYB40\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BYB40   ANOP\n         AIF   (&SPFERRORS).BYB50\n&SPFERRORS SETB 1\nERRORS   DC    CL8'ERRORS'              CONTROL KEYWORD FOR ISPF\n.BYB50   ANOP\n         AIF   (&SPFRETURN).BYB60\n&SPFRETURN SETB 1\nRETURN   DC    CL8'RETURN'              CONTROL KEYWORD FOR ISPF\n.BYB60   ANOP\nSPF&NDX  DS    0H\n.BYPLIT40 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL  CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRMF2\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,ERRORS                GET ADDRESS OF ERRORS OPERAND\n         LA    0,RETURN                 GET ADDRESS OF RETURN OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAR2\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BBVAR2  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL ERRORS CANCEL  CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRMF2  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(ERRORS)                ADDRESS OF ERRORS OPERAND\n         DC    A(RETURN+X'80000000')    ADDRESS OF RETURN OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT\n.*********************************************************************\n.*\n.SPLI    ANOP\n         AIF   ('&MODE' EQ '').SPLIENAB\n         AIF   ('&MODE' EQ 'ENABLE').SPLIENAB\n         AIF   ('&MODE' EQ 'DISABLE').SPLIDISA\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT ENABLE\n.*********************************************************************\n.*\n.SPLIENAB ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEC30\n         AIF   (NOT &SPFSPLIT).GEC30\n         AIF   (NOT &SPFENABLE).GEC30\n         AGO   .BYPLIC30\n.GEC30   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BCC10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BCC10   ANOP\n         AIF   (&SPFSPLIT).BCC20\n&SPFSPLIT SETB  1\nSPLIT    DC    CL8'SPLIT'               CONTROL KEYWORD FOR ISPF\n.BCC20   ANOP\n         AIF   (&SPFENABLE).BCC30\n&SPFENABLE SETB 1\nENABLE   DC    CL8'ENABLE'              CONTROL KEYWORD FOR ISPF\n.BCC30   ANOP\nSPF&NDX  DS    0H\n.BYPLIC30 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT ENABLE   CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRMC1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,SPLIT                 GET ADDRESS OF SPLIT OPERAND\n         LA    0,ENABLE                 GET ADDRESS OF ENABLE OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAC1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BBVAC1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT ENABLE   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRMC1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(SPLIT)                 ADDRESS OF SPLIT OPERAND\n         DC    A(ENABLE+X'80000000')    ADDRESS OF ENABLE OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT DISABLE\n.*********************************************************************\n.*\n.SPLIDISA ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GED30\n         AIF   (NOT &SPFSPLIT).GED30\n         AIF   (NOT &SPFDISABLE).GED30\n         AGO   .BYPLID30\n.GED30   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BCD10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BCD10   ANOP\n         AIF   (&SPFSPLIT).BCD20\n&SPFSPLIT SETB  1\nSPLIT    DC    CL8'SPLIT'               CONTROL KEYWORD FOR ISPF\n.BCD20   ANOP\n         AIF   (&SPFDISABLE).BCD30\n&SPFDISABLE SETB 1\nDISABLE  DC    CL8'DISABLE'             CONTROL KEYWORD FOR ISPF\n.BCD30   ANOP\nSPF&NDX  DS    0H\n.BYPLID30 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT DISABLE  CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRMD1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,SPLIT                 GET ADDRESS OF SPLIT OPERAND\n         LA    0,DISABLE                GET ADDRESS OF DISABLE OPERAND\n         STM   14,0,&TEMP               STORE PARAMETER LIST\n         OI    &TEMP+8,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAD1\n         AIF   (&SPFVARC LT 3).ERRVAR\n.BBVAD1  AIF   (&SPFVARS GE 3).BYPVAR1\n&SPFVARS SETA  3\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT DISABLE  CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRMD1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(SPLIT)                 ADDRESS OF SPLIT OPERAND\n         DC    A(DISABLE+X'80000000')   ADDRESS OF DISABLE OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NOCMD\n.*********************************************************************\n.*\n.NOCM    ANOP\n         AIF   ('&MODE' EQ '').NOCMD\n         AGO   .ERR2\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NOCMD\n.*********************************************************************\n.*\n.NOCMD   ANOP\n         AIF   ('&LINENUM' NE '').ERR3\n         AIF   (NOT &SPFCONTROL).GEE30\n         AIF   (NOT &SPFNOCMD).GEE30\n         AGO   .BYPE30\n.GEE30   ANOP\n         B     SPF&NDX\n         AIF   (&SPFCONTROL).BCE10\n&SPFCONTROL SETB 1\nCONTROL  DC    CL8'CONTROL'             CONTROL KEYWORD FOR ISPF\n.BCE10   ANOP\n         AIF   (&SPFNOCMD).BCE20\n&SPFNOCMD SETB  1\nNOCMD    DC    CL8'NOCMD'               CONTROL KEYWORD FOR ISPF\n.BCE20   ANOP\nSPF&NDX  DS    0H\n.BYPE30 ANOP\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL NOCMD          CALL ISPLINK AREA\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').ERRME1\n         LA    14,CONTROL               GET ADDRESS OF CONTROL KEYWORD\n         LA    15,NOCMD                 GET ADDRESS OF NOCMD OPERAND\n         STM   14,15,&TEMP              STORE PARAMETER LIST\n         OI    &TEMP+4,X'80'            SET VL BIT ON\n         LA    1,&TEMP                  GET ADDRESS OF PARMS\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BBVAE1\n         AIF   (&SPFVARC LT 2).ERRVAR\n.BBVAE1  AIF   (&SPFVARS GE 2).BYPVAR1\n&SPFVARS SETA  2\n         AGO   .BYPVAR1\n         MEXIT\n.*\n.*********************************************************************\n.*       ISPEXEC CONTROL SPLIT ENABLE   CALL ISPLINK AREA WITH MF=I\n.*********************************************************************\n.*\n.ERRME1  ANOP\n         CNOP  0,4                      FULLWORD ALLIGNMENT\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(CONTROL)               ADDRESS OF CONTROL KEYWORD\n         DC    A(NOCMD+X'80000000')     ADDRESS OF NOCMD OPERAND\nSPFE&NDX DS    0H\n         L     15,&LOAD                 GET ISPLINK ADDRESS\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.*********************************************************************\n.*       MACRO ERROR MESSAGES\n.*********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID SERVICE FOR CONTROL - FOUND ''&TYPE'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MODE FOR &TYPE SERVICE - FOUND ''&MODE'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'LINENUM NOT ALLOWED FOR &TYPE - FOUND ''&LINENUM'''\n         MEXIT\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISPLAY": {"ttr": 5635, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    DISPLAY &P1,                                                  *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &PANEL=,                 PANEL NAME                     *\n               &MSG=,                   MESSAGE ID                     *\n               &CURSOR=,                CURSOR NAME                    *\n               &CSRPOS=,                POSITION WITHIN CURSOR         *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFDISPLAY,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @DISPLAY &P1,&P2,&P3,&P4,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFDISPLAY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&CURSOR' EQ '').CNT2\n         AIF   ('&CURSOR'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   (T'&CSRPOS EQ 'N').GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFDISPLAY).BYP20\nDISPLAY  DC    CL8'DISPLAY'             DISPLAY LITERAL FOR ISPF\n&SPFDISPLAY SETB 1\n.BYP20   ANOP\n         AIF   ('&PANEL' EQ '').BYP30\n         AIF   ('&PANEL'(1,1) NE '''').BYP30\nSPFP&NDX DC    CL8&PANEL                DISPLAY THIS PANEL\n.BYP30   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MSG                  GENERATED MSG\n.BYP40   ANOP\n         AIF   ('&CURSOR' EQ '').BYP50\n         AIF   ('&CURSOR'(1,1) NE '''').BYP50\nSPFF&NDX DC    CL8&CURSOR               GENERATED CURSOR POSITION\n.BYP50   ANOP\n         AIF   (T'&CSRPOS NE 'N').BYP62\nSPFC&NDX DC    F'&CSRPOS'               GENERATED CSRPOS\n.BYP62   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF CURSOR\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,DISPLAY               GET ADDRESS OF DISPLAY KEYWORD\n         AIF   ('&PANEL' EQ '').BYP80A\n         AIF   ('&PANEL'(1,1) NE '''').BYP80\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&PANEL                GET ADDRESS OF PANEL NAME\n         AGO   .BYP90\n.BYP80A  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR PANEL\n.BYP90   ANOP\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    0,&MSG                   GET ADDRESS OF MSG\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFM&NDX               GET ADDRESS OF GENERATED MSG\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MSG\n.BYP120  ANOP\n         AIF   ('&CURSOR' EQ '').BYP140\n         AIF   ('&CURSOR'(1,1) NE '''').BYP130\n         LA    1,SPFF&NDX               GET ADDRESS OF GENERATED CURSOR\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&CURSOR                GET ADDRESS OF CURSOR\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR CURSOR\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&CSRPOS' EQ '').BYP172\n         AIF   (T'&CSRPOS EQ 'N').BYP162\n         LA    14,&CSRPOS               GET ADDRESS OF CSRPOS\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED CSRPOS\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR CSRPOS\n.BYP182  ANOP\n         ST    14,&TEMP+16              STORE AS FIFTH PARM\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(DISPLAY)               DISPLAY LITERAL\n         AIF   ('&PANEL' EQ '').BYP282\n         AIF   ('&PANEL'(1,1) NE '''').BYP280\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&PANEL)                ADDRESS OF PANEL\n         AGO   .BYP290\n.BYP282  ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY PANEL\n.BYP290  ANOP\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG)                  ADDRESS OF MSG\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n.BYP220  ANOP\n         AIF   ('&CURSOR' EQ '').BYP240\n         AIF   ('&CURSOR'(1,1) NE '''').BYP230\n         DC    A(SPFF&NDX)              ADDRESS OF GENERATED CURSOR\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&CURSOR)               ADDRESS OF CURSOR\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CURSOR\n.BYP250  ANOP\n         AIF   ('&CSRPOS' EQ '').BYP320\n         AIF   (T'&CSRPOS EQ 'N').BYP310\n         DC    A(&CSRPOS+X'80000000')   ADDRESS OF CSRPOS\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENNED CSRPOS\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CSRPOS\n.BYP330  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EDIT": {"ttr": 5640, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    EDIT &P1,                                                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &P8,                                                    *\n               &DATASET=,               DATASET NAME                   *\n               &VOLUME=,                VOLUME                         *\n               &PASSWORD=,              PASSWORD                       *\n               &PANEL=,                 PANEL ID                       *\n               &MACRO=,                 MACRO NAME                     *\n               &PROFILE=,               PROFILE NAME                   *\n               &DATAID=,                DATA ID                        *\n               &MEMBER=,                MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFEDIT,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         GBLC  &SPFLVL\n         LCLC  &NDX,&TEMP\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @EDIT &P1,&P2,&P3,&P4,&P5,&P6,&P7,&P8,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AIF   ('&P8' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n.*       AIF   ('&DATASET' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFEDIT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATASET' EQ '').CNT0\n         AIF   ('&DATASET'(1,1) EQ '''').GENLIT\n.CNT0    AIF   ('&VOLUME' EQ '').CNT1\n         AIF   ('&VOLUME'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&PASSWORD' EQ '').CNT2\n         AIF   ('&PASSWORD'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&PANEL' EQ '').CNT3\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&DATAID' EQ '').CNT4\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.CNT4    AIF   ('&MEMBER' EQ '').CNT5\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT5    AIF   ('&MACRO' EQ '').CNT6\n         AIF   ('&MACRO'(1,1) EQ '''').GENLIT\n.CNT6    AIF   ('&PROFILE' EQ '').CNT7\n         AIF   ('&PROFILE'(1,1) EQ '''').GENLIT\n.CNT7    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFEDIT).BYP20\nEDIT     DC    CL8'EDIT'                EDIT LITERAL FOR ISPF\n&SPFEDIT SETB 1\n.BYP20   ANOP\n         AIF   ('&DATASET' EQ '').BYP30\n         AIF   ('&DATASET'(1,1) NE '''').BYP30\nSPFD&NDX DC    CL56&DATASET             EDIT THIS DATASET\n.BYP30   ANOP\n         AIF   ('&VOLUME' EQ '').BYP40\n         AIF   ('&VOLUME'(1,1) NE '''').BYP40\nSPFV&NDX DC    CL6&VOLUME               GENERATED VOLUME\n.BYP40   ANOP\n         AIF   ('&PASSWORD' EQ '').BYP50\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP50\nSPFP&NDX DC    CL8&PASSWORD             GENERATED PASSWORD\n.BYP50   ANOP\n         AIF   ('&PANEL' EQ '').BYP60\n         AIF   ('&PANEL'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&PANEL                GENERATED PANEL ID\n.BYP60   ANOP\n         AIF   ('&DATAID' EQ '').BYP62\n         AIF   ('&DATAID'(1,1) NE '''').BYP62\nSPFA&NDX DC    CL8&DATAID               GENERATED DATAID\n.BYP62   ANOP\n         AIF   ('&MEMBER' EQ '').BYP64\n         AIF   ('&MEMBER'(1,1) NE '''').BYP64\nSPFM&NDX DC    CL8&MEMBER               GENERATED MEMBER\n.BYP64   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\n         AIF   ('&MACRO' EQ '').AYP60\n         AIF   ('&MACRO'(1,1) NE '''').AYP60\nSPFX&NDX DC    CL8&MACRO                GENERATED DATAID\n.AYP60   ANOP\n         AIF   ('&PROFILE' EQ '').AYP70\n         AIF   ('&PROFILE'(1,1) NE '''').AYP70\nSPFY&NDX DC    CL8&PROFILE              GENERATED DATAID\n.AYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,EDIT                  GET ADDRESS OF EDIT KEYWORD\n         AIF   ('&DATASET' EQ '').BYP85\n         AIF   ('&DATASET'(1,1) NE '''').BYP80\n         LA    15,SPFD&NDX              GET ADDRESS OF GENERATED DSN\n         AGO   .BYP90\n.BYP80   ANOP\n         LA    15,&DATASET              GET ADDRESS OF DATASET\n         AGO   .BYP90\n.BYP85   ANOP\n         LA    15,SPFNULLC              GET DUMMY ADDRESS FOR DATASET\n.BYP90   ANOP\n         AIF   ('&VOLUME' EQ '').BYP100\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP110\n         LA    0,&VOLUME                GET ADDRESS OF VOLUME\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VOLUME\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLUME\n.BYP120  ANOP\n         AIF   ('&PASSWORD' EQ '').BYP140\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP130\n         LA    1,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    1,&PASSWORD              GET ADDRESS OF PASSWORD\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n.BYP150  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PANEL' EQ '').BYP170\n         AIF   ('&PANEL'(1,1) EQ '''').BYP160\n         LA    14,&PANEL                GET ADDRESS OF PANEL ID\n         AGO   .BYP180\n.BYP160  ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED PANEL\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PANEL ID\n.BYP180  ANOP\n         AIF   ('&MACRO' EQ '').BYP172\n         AIF   ('&MACRO'(1,1) EQ '''').BYP162\n         LA    15,&MACRO                GET ADDRESS OF MACRO\n         AGO   .BYP182\n.BYP162  ANOP\n         LA    15,SPFX&NDX              GET ADDRESS OF GENNED MACRO\n         AGO   .BYP182\n.BYP172  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MACRO\n.BYP182  ANOP\n         AIF   ('&PROFILE' EQ '').BYP174\n         AIF   ('&PROFILE'(1,1) EQ '''').BYP164\n         LA    0,&PROFILE               GET ADDRESS OF PROFILE\n         AGO   .BYP184\n.BYP164  ANOP\n         LA    0,SPFY&NDX               GET ADDRESS OF GENNED PROFILE\n         AGO   .BYP184\n.BYP174  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PROFILE\n.BYP184  ANOP\n         AIF   ('&DATAID' EQ '').AYP100\n         AIF   ('&DATAID'(1,1) EQ '''').AYP110\n         LA    1,&DATAID                GET ADDRESS OF DATAID\n         AGO   .AYP120\n.AYP100  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM OF DATAID\n         AGO   .AYP120\n.AYP110  ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENNED DATAID\n.AYP120  ANOP\n         STM   14,1,&TEMP+16            STORE PARMS\n         AIF   ('&MEMBER' EQ '').AYP170\n         AIF   ('&MEMBER'(1,1) EQ '''').AYP160\n         LA    14,&MEMBER               GET ADDRESS OF MEMBER\n         AGO   .AYP180\n.AYP160  ANOP\n         LA    14,SPFM&NDX              GET ADDRESS OF GENNED MEMBER\n         AGO   .AYP180\n.AYP170  ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.AYP180  ANOP\n         ST    14,&TEMP+32              STORE THE MEMBER PARMS\n         OI    &TEMP+32,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 9).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 9).BYPVARS\n&SPFVARS SETA  9\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(EDIT)                  EDIT LITERAL\n         AIF   ('&DATASET' EQ '').BYP285\n         AIF   ('&DATASET'(1,1) NE '''').BYP280\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DATASET\n         AGO   .BYP290\n.BYP280  ANOP\n         DC    A(&DATASET)              ADDRESS OF DATASET\n         AGO   .BYP290\n.BYP285  ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY DATASET\n.BYP290  ANOP\n         AIF   ('&VOLUME' EQ '').BYP200\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP210\n         DC    A(&VOLUME)               ADDRESS OF VOLUMESER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VOLUME\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VOLUME\n.BYP220  ANOP\n         AIF   ('&PASSWORD' EQ '').BYP240\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP230\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASSWORD\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&PASSWORD)             ADDRESS OF PASSWORD\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASSWORD\n.BYP250  ANOP\n         AIF   ('&PANEL' EQ '').BYP270\n         AIF   ('&PANEL'(1,1) EQ '''').BYP260\n         DC    A(&PANEL)                ADDRESS OF PANEL ID\n         AGO   .BYP300\n.BYP260  ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED PANEL\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL ID\n.BYP300  ANOP\n         AIF   ('&MACRO' EQ '').CYP320\n         AIF   ('&MACRO'(1,1) EQ '''').CYP310\n         DC    A(&MACRO)                ADDRESS OF MACRO\n         AGO   .CYP330\n.CYP310  ANOP\n         DC    A(SPFX&NDX)              ADDRESS OF GENNED MACRO\n         AGO   .CYP330\n.CYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MACRO\n.CYP330  ANOP\n         AIF   ('&PROFILE' EQ '').DYP320\n         AIF   ('&PROFILE'(1,1) EQ '''').DYP310\n         DC    A(&MACRO)                ADDRESS OF PROFILE\n         AGO   .DYP330\n.DYP310  ANOP\n         DC    A(SPFY&NDX)              ADDRESS OF GENNED PROFILE\n         AGO   .DYP330\n.DYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PROFILE\n.DYP330  ANOP\n         AIF   ('&DATAID' EQ '').BYP320\n         AIF   ('&DATAID'(1,1) EQ '''').BYP310\n         DC    A(&DATAID)               ADDRESS OF DATA ID\n         AGO   .BYP330\n.BYP310  ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENNED DATAID\n         AGO   .BYP330\n.BYP320  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA ID\n.BYP330  ANOP\n         AIF   ('&MEMBER' EQ '').BYP374\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP364\n         DC    A(&MEMBER.+X'80000000')  ADDRESS OF MEMBER\n         AGO   .BYP384\n.BYP364  ANOP\n         DC    A(SPFM&NDX+X'80000000')  ADDRESS OF GENNED MEMBER\n         AGO   .BYP384\n.BYP374  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP384  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'REQUIRED DATASET PARAMETER MISSING'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EDREC": {"ttr": 5891, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    EDREC &TYPE,                   TYPE OF RECOVERY               *\n               &PASS,                   PASSWORD                       *\n               &DATA,                   DATA ID                        *\n               &CMD,                    COMMAND NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFEDREC,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TYPE' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFEDREC).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TYPE' EQ '').CNT1\n         AIF   ('&TYPE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&PASS' EQ '').CNT2\n         AIF   ('&PASS'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&DATA' EQ '').CNT3\n         AIF   ('&DATA'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&CMD' EQ '').CNT4\n         AIF   ('&CMD'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFEDREC).BYP20\nEDREC    DC    CL8'EDREC'               ISPF KEYWORD\n&SPFEDREC SETB 1\n.BYP20   ANOP\n         AIF   ('&TYPE' EQ '').BYP30\n         AIF   ('&TYPE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TYPE                 GENERATED RECOVERY TYPE\n.BYP30   ANOP\n         AIF   ('&PASS' EQ '').BYP40\n         AIF   ('&PASS'(1,1) NE '''').BYP40\nSPFP&NDX DC    CL8&PASS                 GENERATED PASSWORD\n.BYP40   ANOP\n         AIF   ('&DATA' EQ '').BYP50\n         AIF   ('&DATA'(1,1) NE '''').BYP50\nSPFD&NDX DC    CL8&DATA                 GENERATED DATA ID\n.BYP50   ANOP\n         AIF   ('&CMD' EQ '').BYP60\n         AIF   ('&CMD'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&CMD                  GENERATED COMMAND NAME\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,EDREC                 GET ADDRESS OF EDREC KEYWORD\n.*\n         AIF   ('&TYPE' EQ '').BYP1000\n         AIF   ('&TYPE'(1,1) EQ '''').BYP1010\n         LA    15,&TYPE                 GET ADDRESS OF TYPE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TYPE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TYPE\n.BYP1050 ANOP\n.*\n         AIF   ('&PASS' EQ '').BYP1100\n         AIF   ('&PASS'(1,1) EQ '''').BYP1110\n         LA    0,&PASS                  GET ADDRESS OF PASSWORD\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFP&NDX               GET ADDRESS OF GENERATED PASS\n.BYP1150 ANOP\n.*\n         AIF   ('&DATA' EQ '').BYP1200\n         AIF   ('&DATA'(1,1) EQ '''').BYP1210\n         LA    1,&DATA                  GET ADDRESS OF DATA NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR DATA\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFD&NDX               GET ADDRESS OF GENERATED DATA\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&CMD' EQ '').BYP1300\n         AIF   ('&CMD'(1,1) EQ '''').BYP1310\n         LA    14,&CMD                  GET ADDRESS OF CMD NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR CMD\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED CMD\n.BYP1350 ANOP\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(EDREC)                 EDREC LITERAL\n.*\n         AIF   ('&TYPE' EQ '').BYP2000\n         AIF   ('&TYPE'(1,1) EQ '''').BYP2010\n         DC    A(&TYPE)                 ADDRESS OF TYPE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TYPE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TYPE\n.BYP2050 ANOP\n.*\n         AIF   ('&PASS' EQ '').BYP2100\n         AIF   ('&PASS'(1,1) EQ '''').BYP2110\n         DC    A(&PASS)                 ADDRESS OF PASS NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PASS NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PASS\n.BYP2150 ANOP\n.*\n         AIF   ('&DATA' EQ '').BYP2200\n         AIF   ('&DATA'(1,1) EQ '''').BYP2210\n         DC    A(&DATA)                 ADDRESS OF DATA NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR DATA\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFD&NDX)              ADDRESS OF GENERATED DATA\n.BYP2250 ANOP\n.*\n         AIF   ('&CMD' EQ '').BYP2800\n         AIF   ('&CMD'(1,1) EQ '''').BYP2810\n         DC    A(&CMD+X'80000000')      ADDRESS OF CMD NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CMD\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED CMD\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TYPE OF EDIT RECOVERY IS MISSING'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FTCLOSE": {"ttr": 5896, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   FTCLOSE &P1,                                                  *\n               &P2,                                                    *\n               &P3,                                                    *\n               &NAME=,                  MEMBER                         *\n               &LIBRARY=,               LIBRARY                        *\n               &NOREPL=,                ISPF KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTCLOSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         GBLC  &SPFLVL\n         LCLC  &NDX,&TEMP\n         AIF   ('&SPFLVL' NE '1').NL1\n&LABEL   @FTCLOSE &P1,&P2,&P3,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n         AIF   ('&NOREPL' EQ '').K1\n         AIF   ('&NOREPL'(1,1) NE '''' OR '&NOREPL' EQ '''NOREPL''').K1\n         MNOTE 4,'WARNING - NOREPL KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&NAME' EQ '').CNT1\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIBRARY' EQ '').CNT2\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&NOREPL' EQ '').CNT3\n         AIF   ('&NOREPL'(1,1) EQ '''').GENLIT\n.CNT3    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTCLOSE).BYP20\nFTCLOSE  DC    CL8'FTCLOSE'             ISPF KEYWORD\n&SPFFTCLOSE SETB 1\n.BYP20   ANOP\n         AIF   ('&NAME' EQ '').BYP40\n         AIF   ('&NAME'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&NAME                 GENERATED MEMBER\n.BYP40   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP50\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   ('&NOREPL' EQ '').BYP60\n         AIF   ('&NOREPL'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&NOREPL               ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTCLOSE               GET ADDRESS OF FTCLOSE KEYWORD\n         AIF   ('&NAME' EQ '').BYP100\n         AIF   ('&NAME'(1,1) EQ '''').BYP110\n         LA    15,&NAME                 GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP140\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIBRARY               GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         AIF   ('&NOREPL' EQ '').BYP170\n         AIF   ('&NOREPL'(1,1) EQ '''').BYP175\n         LA    1,&NOREPL                GET ADDRESS OF KEYWORD\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR KEYWORD\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    1,SPFX&NDX               GET GENNED NOREPL\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTCLOSE)               BROWSE LITERAL\n         AIF   ('&NAME' EQ '').BYP200\n         AIF   ('&NAME'(1,1) EQ '''').BYP210\n         DC    A(&NAME)                 ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP240\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIBRARY)              ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\n         AIF   ('&NOREPL' EQ '').BYP270\n         AIF   ('&NOREPL'(1,1) EQ '''').BYP275\n         DC    A(&NOREPL+X'80000000')   ADDRESS OF KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR KEYWORD\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED NOREPL KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FTERASE": {"ttr": 5900, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    FTERASE &MEM,                  MEMBER NAME (POSITIONAL)       *\n               &P2,                                                    *\n               &LIBRARY=,               LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTERASE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @FTERASE &MEM,&P2,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MEM' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIBRARY' EQ '').CNT2\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTERASE).BYP20\nFTERASE  DC    CL8'FTERASE'             ISPF KEYWORD\n&SPFFTERASE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED NAME\n.BYP40   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP50\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTERASE               GET ADDRESS OF FTERASE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP140\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIBRARY               GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTERASE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP240\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'MEMBER NAME REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FTINCL": {"ttr": 6148, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    FTINCL &SKEL,                  (POSITIONAL MEMBER NAME)       *\n               &P2,                                                    *\n               &NOFT=,                  NOFT KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTINCL,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @FTINCL &SKEL,&P2,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&SKEL' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n         AIF   ('&NOFT' EQ '').K1\n         AIF   ('&NOFT'(1,1) NE '''' OR '&NOFT' EQ '''NOFT''').K1\n         MNOTE 4,'WARNING - NOFT KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTINCL).GENLIT\n         AIF   ('&SKEL' EQ '').CNT1\n         AIF   ('&SKEL'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NOFT' EQ '').CNT2\n         AIF   ('&NOFT'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTINCL).BYP20\nFTINCL   DC    CL8'FTINCL'              ISPF KEYWORD\n&SPFFTINCL SETB 1\n.BYP20   ANOP\n         AIF   ('&SKEL' EQ '').BYP40\n         AIF   ('&SKEL'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SKEL                 GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&NOFT' EQ '').BYP60\n         AIF   ('&NOFT'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&NOFT                 NOFT KEYWORD\n.BYP60   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTINCL                GET ADDRESS OF FTINCL KEYWORD\n         AIF   ('&SKEL' EQ '').BYP100\n         AIF   ('&SKEL'(1,1) EQ '''').BYP110\n         LA    15,&SKEL                 GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&NOFT' EQ '').BYP170\n         AIF   ('&NOFT'(1,1) EQ '''').BYP175\n         LA    0,&NOFT                  GET ADDRESS OF NOFT\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NOFT\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    0,SPFX&NDX               GET GENNED NOFT KWYWORD\n.BYP180  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTINCL)                BROWSE LITERAL\n         AIF   ('&SKEL' EQ '').BYP200\n         AIF   ('&SKEL'(1,1) EQ '''').BYP210\n         DC    A(&SKEL)                 ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&NOFT' EQ '').BYP270\n         AIF   ('&NOFT'(1,1) EQ '''').BYP275\n         DC    A(&NOFT+X'80000000')     ADDRESS OF NOFT KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR NOFT\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED NOFT KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'SKELETON NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FTOPEN": {"ttr": 6152, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    FTOPEN &P1,&TEMP=,             TEMP KEYWORD                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFFTOPEN,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEM\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @FTOPEN &P1,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEM     SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEM     SETC  '&MF(2)'\n.BYP17   ANOP\n         AIF   ('&TEMP' EQ '').K1\n         AIF   ('&TEMP'(1,1) NE '''' OR '&TEMP' EQ '''TEMP''').K1\n         MNOTE 4,'WARNING - TEMP KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFFTOPEN).GENLIT\n         AIF   ('&TEMP' EQ '').CNT1\n         AIF   ('&TEMP'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFFTOPEN).BYP20\nFTOPEN   DC    CL8'FTOPEN'              ISPF KEYWORD\n&SPFFTOPEN SETB 1\n.BYP20   ANOP\n         AIF   ('&TEMP' EQ '').BYP60\n         AIF   ('&TEMP'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&TEMP                 ISPF TEMP KEYWORD\n.BYP60   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,FTOPEN                GET ADDRESS OF FTOPEN KEYWORD\n         AIF   ('&TEMP' EQ '').BYP170\n         AIF   ('&TEMP'(1,1) EQ '''').BYP175\n         LA    15,&TEMP                 GET ADDRESS OF TEMP\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TEMP\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    15,SPFX&NDX              GET GENNED TEMP KEYWORD\n.BYP180  ANOP\n         STM   14,15,&TEM               STORE PARAMETERS\n         OI    &TEM+4,X'80'             MARK LAST PARM\n         LA    1,&TEM                   GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(FTOPEN)                BROWSE LITERAL\n         AIF   ('&TEMP' EQ '').BYP270\n         AIF   ('&TEMP'(1,1) EQ '''').BYP275\n         DC    A(&TEMP+X'80000000')     ADDRESS OF TEMP KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TEMP\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED TEMP KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR TEMP PARM - FOUND ''&TEMP'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETMSG": {"ttr": 6155, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    GETMSG &P1,                                                   *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &MSG=,                   MESSAGE NAME                   *\n               &SHORTMSG=,              VAR FOR SHORT MESSAGE          *\n               &LONGMSG=,               VAR FOR LONG MESSAGE           *\n               &ALARM=,                 VAR FOR ALARM VALUE            *\n               &HELP=,                  VAR FOR HELP PANEL             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFGETMSG,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @GETMSG &P1,&P2,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&MSG' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFGETMSG).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SHORTMSG' EQ '').CNT2\n         AIF   ('&SHORTMSG'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&LONGMSG' EQ '').CNT3\n         AIF   ('&LONGMSG'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ALARM' EQ '').CNT4\n         AIF   ('&ALARM'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&HELP' EQ '').CNT5\n         AIF   ('&HELP'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFGETMSG).BYP20\nGETMSG   DC    CL8'GETMSG'              ISPF KEYWORD\n&SPFGETMSG SETB 1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP30\n         AIF   ('&MSG'(1,1) NE '''').BYP30\nSPFM&NDX DC    CL8&MSG                  GENERATED MESSAGE NAME\n.BYP30   ANOP\n         AIF   ('&SHORTMSG' EQ '').BYP40\n         AIF   ('&SHORTMSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SHORTMSG             GENERATED SHORT MESSAGE\n.BYP40   ANOP\n         AIF   ('&LONGMSG' EQ '').BYP50\n         AIF   ('&LONGMSG'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LONGMSG              GENERATED LONG MESSAGE\n.BYP50   ANOP\n         AIF   ('&ALARM' EQ '').BYP60\n         AIF   ('&ALARM'(1,1) NE '''').BYP60\nSPFA&NDX DC    CL8&ALARM                GENERATED ALARM VAR FIELD\n.BYP60   ANOP\n         AIF   ('&HELP' EQ '').BYP70\n         AIF   ('&HELP'(1,1) NE '''').BYP70\nSPFH&NDX DC    CL8&HELP                 GENERATED HELP VAR FIELD\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,GETMSG                GET ADDRESS OF GETMSG KEYWORD\n.*\n         AIF   ('&MSG' EQ '').BYP1000\n         AIF   ('&MSG'(1,1) EQ '''').BYP1010\n         LA    15,&MSG                  GET ADDRESS OF MESSAGE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MSG\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MSG\n.BYP1050 ANOP\n.*\n         AIF   ('&SHORTMSG' EQ '').BYP1100\n         AIF   ('&SHORTMSG'(1,1) EQ '''').BYP1110\n         LA    0,&SHORTMSG              GET ADDRESS OF SHORT MSG\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SHORT MSG\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SHORT\n.BYP1150 ANOP\n.*\n         AIF   ('&LONGMSG' EQ '').BYP1200\n         AIF   ('&LONGMSG'(1,1) EQ '''').BYP1210\n         LA    1,&LONGMSG               GET ADDRESS OF LONG MSG NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LONG MSG\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LONG\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ALARM' EQ '').BYP1300\n         AIF   ('&ALARM'(1,1) EQ '''').BYP1310\n         LA    14,&ALARM                GET ADDRESS OF ALARM NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ALARM\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFA&NDX              GET ADDRESS OF GENERATED ALARM\n.BYP1350 ANOP\n.*\n         AIF   ('&HELP' EQ '').BYP1400\n         AIF   ('&HELP'(1,1) EQ '''').BYP1410\n         LA    15,&HELP                 GET ADDRESS OF HELP NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR HELP\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENERATED HELP\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(GETMSG)                GETMSG LITERAL\n.*\n         AIF   ('&MSG' EQ '').BYP2000\n         AIF   ('&MSG'(1,1) EQ '''').BYP2010\n         DC    A(&MSG)                  ADDRESS OF MESSAGE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n.BYP2050 ANOP\n.*\n         AIF   ('&SHORTMSG' EQ '').BYP2100\n         AIF   ('&SHORTMSG'(1,1) EQ '''').BYP2110\n         DC    A(&SHORTMSG)             ADDRESS OF SHORT MSG\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SHORT MSG\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SHORT MSG\n.BYP2150 ANOP\n.*\n         AIF   ('&LONGMSG' EQ '').BYP2200\n         AIF   ('&LONGMSG'(1,1) EQ '''').BYP2210\n         DC    A(&LONGMSG)              ADDRESS OF LONG MESSAGE\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LONG MESSAGE\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LONG MES\n.BYP2250 ANOP\n.*\n         AIF   ('&ALARM' EQ '').BYP2300\n         AIF   ('&ALARM'(1,1) EQ '''').BYP2310\n         DC    A(&ALARM)                ADDRESS OF ALARM NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ALARM\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ALARM\n.BYP2350 ANOP\n.*\n         AIF   ('&HELP' EQ '').BYP2800\n         AIF   ('&HELP'(1,1) EQ '''').BYP2810\n         DC    A(&HELP+X'80000000')     ADDRESS OF HELP NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR HELP\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFH&NDX+X'80000000')  ADDRESS OF GENERATED HELP\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE MESSAGE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GRTERM": {"ttr": 6404, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    GRTERM &LOAD=ISPLINK,          ISPF ADDRESS                   *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFGRTERM,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFGRTERM).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFGRTERM).BYP20\nGRTERM   DC    CL8'GRTERM'              ISPF KEYWORD\n&SPFGRTERM SETB 1\n.BYP20   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,GRTERM                GET ADDRESS OF GRTERM KEYWORD\n         ST    14,&TEMP                 STORE PARAMETERS INTO LIST\n         OI    &TEMP,X'80'              MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 0).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 0).BYPVARS\n&SPFVARS SETA  0\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(GRTERM+X'80000000')    GRTERM LITERAL\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPEXEC": {"ttr": 6407, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ISPEXEC &BUFLEN,               MEMBER NAME                    *\n               &BUF,                    LIBRARY NAME                   *\n               &LOAD=ISPEXEC,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         LCLA  &LEN\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&BUF' EQ '').ERR1\n         AIF   ('&BUF'(1,1) EQ '''' AND '&BUFLEN' NE '').WARN\n.CONT    ANOP\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (T'&BUFLEN EQ 'N').GENLIT\n.CNT1    AIF   ('&BUF' EQ '').CNT2\n         AIF   ('&BUF'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   ('&BUFLEN' EQ '').BYP40\n         AIF   (T'&BUFLEN NE 'N').BYP40\n         AIF   ('&BUF'(1,1) EQ '''').BYP40\nSPFL&NDX DC    F'&BUFL'                 BUFFER LENGTH GENERATED\n.BYP40   ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP50\n         CNOP  0,4\n&LEN     SETA  K'&BUF+3\n&LEN     SETA  &LEN/4*4\nSPFB&NDX DC    CL&LEN&BUF               GENERATED ISPEXEC BUFFER\nSPFL&NDX DC    F'&LEN'                  GENERATED ISPEXEC LENGTH\n.BYP50   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         AIF   ('&BUFLEN' EQ '').BYP100\n         AIF   ('&BUF'(1,1) EQ '''').BYP100\n         AIF   (T'&BUF EQ 'N').BYP100\n         LA    15,&BUFLEN               GET ADDRESS OF BUFFER LENGTH\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENNED LENGTH\n.BYP120  ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP130\n         LA    0,SPFB&NDX               GET ADDRESS OF GENERATED BUF\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&BUF                   GET ADDRESS OF BUFFER\n         AGO   .BYP150\n.BYP150  ANOP\n         STM   15,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         AIF   ('&BUFLEN' EQ '').BYP200\n         AIF   ('&BUF'(1,1) EQ '''').BYP200\n         AIF   (T'&BUFLEN EQ 'N').BYP200\n         DC    A(&BUFLEN)               ADDRESS OF BUFFER LENGTH\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENNED LENGTH\n.BYP220  ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP230\n         DC    A(SPFB&NDX+X'80000000')  ADDRESS OF GENERATED BUFFER\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&BUF+X'80000000')      ADDRESS OF BUFFER\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'BUFFER FOR ISPEXEC COMMAND IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.WARN    ANOP\n         MNOTE 4,'BUFFER LENGTH IS IGNORED FOR LITERAL BUFFER'\n         AGO   .CONT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPF": {"ttr": 6411, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ISPF  &FUNC,                   FUNCTION REQUESTED             *\n               &LIST=SPFPARMS,          FOR ALL FUNCTIONS              *\n               &COUNT=,                 COUNT OF PARM ADDRESSES        *\n               &MINIMUM=,               MINIMUM COUNT OF PARMS         *\n               &ISPLINK=(YES,ISPLINK),  GENERATE ISPLINK FULLWORD      *\n               &ISPEXEC=(NO),           GENERATE ISPEXEC FULLWORD      *\n               &FULL=NO,                GENERATE UNSTRING WORK AREA    *\n               &LEVEL=2,                LEVEL OF MACROS IN USE         *\n               &LASTCC=                 GENERATE EQUATE IN PARMS\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLOAD,&SPFDELETE,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         GBLC  &SPFLVL\n         LCLC  &NDX,&TEMP\n         LCLA  &CNT,&LMT\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       EDIT  GENERAL PARAMETERS\n.**********************************************************************\n.*\n         AIF   ('&COUNT' NE '' AND                                     *\n               T'&COUNT NE 'N').ERROR5\n         AIF   ('&MINIMUM' NE '' AND                                   *\n               T'&MINIMUM NE 'N').ERROR5A\n         AIF   ('&ISPLINK(1)' NE 'YES' AND                             *\n               '&ISPLINK(1)' NE 'NO').ERROR6\n         AIF   ('&ISPEXEC(1)' NE 'YES' AND                             *\n               '&ISPEXEC(1)' NE 'NO').ERROR7\n         AIF   ('&FULL' NE 'YES' AND                                   *\n               '&FULL' NE 'NO').ERROR8\n         AIF   ('&MINIMUM' EQ '' OR &MINIMUM LE &SPFVARS).CONT11\n&SPFVARS SETA  &MINIMUM\n.CONT11  ANOP\n.*\n.**********************************************************************\n.*       EDIT FUNCTION\n.**********************************************************************\n.*\n         AIF   ('&FUNC' EQ 'PARMS').PARMS\n         AIF   ('&FUNC' EQ 'LOAD').LOAD\n         AIF   ('&FUNC' EQ 'DELETE').DEL\n         AIF   ('&FUNC' EQ 'DEBUG').DEBUG\n         AIF   ('&FUNC' EQ 'DEBUGOFF').DEBUGOFF\n         AIF   ('&FUNC' EQ 'SUPPRESS').SUPRESS\n         AIF   ('&FUNC' EQ 'RESET').RESET\n         AIF   ('&FUNC' EQ 'SET').SET\n         AGO   .ERROR1\n.*\n.**********************************************************************\n.*       ISPF PARMS FUNCTION\n.**********************************************************************\n.*\n.PARMS   ANOP\n         AIF   (&SPFLOAD AND &SPFDELETE).PARMSG\n         MNOTE 4,'        NO ISPF LOAD AND DELETE HAS BEEN DONE'\n.*\n.**********************************************************************\n.*       GENERATE ISPF PARMS AREA\n.**********************************************************************\n.*\n.PARMSG  AIF   ('&NAME' EQ '').BYP0\n&NAME    DS    0H\n.BYP0    AIF   ('&LIST' EQ '').BYP1\n         AIF   ('&COUNT' NE '').PARMSD\n         AIF   (&SPFVARS EQ 0).DONTGEN\n&LIST    DS    &SPFVARS.F               ISPF PARAMETER LIST\n.DONTGEN ANOP\n&SPFVARC SETA  &SPFVARS\n&SPFVAR  SETB  1\n         AGO   .BYP1\n.PARMSD  ANOP\n         AIF   (&COUNT LT &SPFVARS).ERRVAR\n&LIST    DS    &COUNT.F                 ISPF PARAMETER LIST\n&SPFVARC SETA  &COUNT\n&SPFVAR  SETB  1\n.BYP1    ANOP\n         AIF   ('&ISPLINK(1)' EQ 'NO').BYP2\n&TEMP    SETC  '&ISPLINK(2)'\n         AIF   ('&TEMP' NE '').CONT1\n&TEMP    SETC  'ISPLINK'\n.CONT1   ANOP\n&TEMP    DS    A                        CONTAINS ISPLINK ADDRESS\n.BYP2    ANOP\n         AIF   ('&ISPEXEC(1)' EQ 'NO').BYP3\n&TEMP    SETC  '&ISPEXEC(2)'\n         AIF   ('&TEMP' NE '').CONT2\n&TEMP    SETC  'ISPEXEC'\n.CONT2   ANOP\n&TEMP    DS    A                        CONTAINS ISPEXEC ADDRESS\n.BYP3    ANOP\n         AIF   ('&FULL' EQ 'NO').BYP4\nSPFCMD   DS    CL80                     COMMAND RETURNED FROM UNSTRING\nSPFCMDP  DS    19CL80                   PARMS RETURNED FROM UNSTRING\nSPFCOUNT DS    F                        NUMBER OF PARMS RETURNED\n.BYP4    ANOP\n         AIF   ('&LASTCC' EQ '').BYP5\n&LASTCC  EQU   15                       EQUATE REG 15 TO LASTCC\n.BYP5    ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF LOAD FUNCTION\n.**********************************************************************\n.*\n.LOAD    ANOP\n.*\n.**********************************************************************\n.*       GENERATE ISPF LOAD AREA\n.**********************************************************************\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n&SPFLOAD SETB  1\n         AIF   ('&ISPLINK(1)' NE 'YES').BYP11\n         LOAD  EP=ISPLINK               LOAD ISPLINK\n         AIF   ('&ISPLINK(2)' EQ '').BYP11\n         ST    0,&ISPLINK(2)            STORE ISPLINK ADDRESS\n.BYP11   ANOP\n         AIF   ('&ISPEXEC(1)' NE 'YES').BYP12\n         LOAD  EP=ISPEXEC               LOAD ISPEXEC\n         AIF   ('&ISPEXEC(2)' EQ '').BYP12\n         ST    0,&ISPEXEC(2)            STORE ISPEXEC ADDRESS\n.BYP12   ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF DELETE FUNCTION\n.**********************************************************************\n.*\n.DEL     ANOP\n.*\n.**********************************************************************\n.*       GENERATE ISPF LOAD AREA\n.**********************************************************************\n.*\n         AIF   ('&NAME' EQ '').BYP20\n&NAME    DS    0H\n.BYP20   ANOP\n&SPFDELETE SETB  1\n         AIF   ('&ISPLINK(1)' NE 'YES').BYP21\n         DELETE EP=ISPLINK              DEL ISPLINK\n.BYP21   ANOP\n         AIF   ('&ISPEXEC(1)' NE 'YES').BYP22\n         DELETE EP=ISPEXEC              LOAD ISPLINK\n.BYP22   ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF DEBUG FUNCTION\n.**********************************************************************\n.*\n.DEBUG   ANOP\n&SPFDEBUG SETB 1\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF DEBUGOFF FUNCTION\n.**********************************************************************\n.*\n.DEBUGOFF ANOP\n&SPFDEBUG SETB 0\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF SUPRESS AND GENERATE CODE\n.**********************************************************************\n.*\n.SUPRESS ANOP\n&CNT     SETA  1\n&LMT     SETA  N'&LIST\n.SUPLOOP ANOP\n         AIF   (&CNT GT &LMT).SUPEXIT\n         ISPFSUPP &LIST(&CNT)\n&CNT     SETA  &CNT+1\n         AGO   .SUPLOOP\n.SUPEXIT ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF RESET CODE\n.**********************************************************************\n.*\n.RESET   ANOP\n&CNT     SETA  1\n&LMT     SETA  N'&LIST\n.SUPLOO2 ANOP\n         AIF   (&CNT GT &LMT).SUPEXI2\n         ISPFREST &LIST(&CNT)\n&CNT     SETA  &CNT+1\n         AGO   .SUPLOO2\n.SUPEXI2 ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       ISPF SET LEVEL CODE\n.**********************************************************************\n.*\n.SET     ANOP\n&SPFLVL  SETC  '&LEVEL'\n         MEXIT\n.*\n.**********************************************************************\n.*       ERRORS ISSUED FROM MACRO\n.**********************************************************************\n.*\n.ERROR1  ANOP\n         MNOTE 16,'INVALID ISPF FUNCTION - FOUND ''&FUNC'''\n         MEXIT\n.ERROR5  ANOP\n         MNOTE 16,'COUNT= VALUE MUST BE NUMERIC - FOUND ''&COUNT'''\n         MEXIT\n.ERROR5A ANOP\n         MNOTE 16,'MINIMUM= VALUE MUST BE NUMERIC - FOUND ''&MINIMUM'''\n         MEXIT\n.ERROR6  ANOP\n         MNOTE 16,'ISPLINK= VALUE MUST BE YES OR NO - FOUND ''&ISPLINK(*\n               1)'''\n         MEXIT\n.ERROR7  ANOP\n         MNOTE 16,'ISPEXEC= VALUE MUST BE YES OR NO - FOUND ''&ISPEXEC(*\n               1)'''\n         MEXIT\n.ERROR8  ANOP\n         MNOTE 16,'FULL= VALUE MUST BE YES OR NO - FOUND ''&FULL'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'COUNT= COUNT IS NOT LARGE ENOUGH FOR LARGEST LIST'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPFREST": {"ttr": 6659, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ISPFREST &VAR\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFASIS\n         GBLB  &SPFBIT\n         GBLB  &SPFBROWSE\n         GBLB  &SPFCANCEL\n         GBLB  &SPFCHAR\n         GBLB  &SPFCONTROL\n         GBLB  &SPFDISABLE\n         GBLB  &SPFDISPLAY\n         GBLB  &SPFEDIT\n         GBLB  &SPFEDREC\n         GBLB  &SPFENABLE\n         GBLB  &SPFENTER\n         GBLB  &SPFEND\n         GBLB  &SPFERRORS\n         GBLB  &SPFFIXED\n         GBLB  &SPFFTCLOSE\n         GBLB  &SPFFTERASE\n         GBLB  &SPFFTINCL\n         GBLB  &SPFFTOPEN\n         GBLB  &SPFGETMSG\n         GBLB  &SPFGRTERM\n         GBLB  &SPFHEX\n         GBLB  &SPFISPEXEC\n         GBLB  &SPFISREDIT\n         GBLB  &SPFLINE\n         GBLB  &SPFLOCK\n         GBLB  &SPFLOG\n         GBLB  &SPFLOCATE\n         GBLB  &SPFMOVE\n         GBLB  &SPFNEWCOPY\n         GBLB  &SPFNEXT\n         GBLB  &SPFNO\n         GBLB  &SPFNOCMD\n         GBLB  &SPFNOFT\n         GBLB  &SPFNONDISPL\n         GBLB  &SPFNOREAD\n         GBLB  &SPFNOREPL\n         GBLB  &SPFNOWRITE\n         GBLB  &SPFORDER\n         GBLB  &SPFPREVIOUS\n         GBLB  &SPFPROFILE\n         GBLB  &SPFREFRESH\n         GBLB  &SPFREPLCOPY\n         GBLB  &SPFREPLACE\n         GBLB  &SPFRESTORE\n         GBLB  &SPFRETURN\n         GBLB  &SPFSAVE\n         GBLB  &SPFSELECT\n         GBLB  &SPFSETMSG\n         GBLB  &SPFSHARE\n         GBLB  &SPFSHARED\n         GBLB  &SPFSM\n         GBLB  &SPFSPLIT\n         GBLB  &SPFTBADD\n         GBLB  &SPFTBBOTTOM\n         GBLB  &SPFTBCLOSE\n         GBLB  &SPFTBCREATE\n         GBLB  &SPFTBDELETE\n         GBLB  &SPFTBDISPL\n         GBLB  &SPFTBEND\n         GBLB  &SPFTBERASE\n         GBLB  &SPFTBEXIST\n         GBLB  &SPFTBGET\n         GBLB  &SPFTBMOD\n         GBLB  &SPFTBOPEN\n         GBLB  &SPFTBPUT\n         GBLB  &SPFTBQUERY\n         GBLB  &SPFTBSARG\n         GBLB  &SPFTBSAVE\n         GBLB  &SPFTBSCAN\n         GBLB  &SPFTBSKIP\n         GBLB  &SPFTBSORT\n         GBLB  &SPFTBSTATS\n         GBLB  &SPFTBTOP\n         GBLB  &SPFTBVCLEAR\n         GBLB  &SPFTEMP\n         GBLB  &SPFUSER\n         GBLB  &SPFVCOPY\n         GBLB  &SPFVDEFINE\n         GBLB  &SPFVDELETE\n         GBLB  &SPFVGET\n         GBLB  &SPFVPUT\n         GBLB  &SPFVREPLACE\n         GBLB  &SPFVRESET\n         GBLB  &SPFWRITE\n         GBLB  &SPFYES\n.*\n.**********************************************************************\n.*       AIF CODE\n.**********************************************************************\n.*\n         AIF   ('&VAR' NE 'ASIS' AND '&VAR' NE 'ALL').B50\n&SPFASIS SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B50     ANOP\n.*\n         AIF   ('&VAR' NE 'BIT' AND '&VAR' NE 'ALL').B60\n&SPFBIT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B60     ANOP\n.*\n         AIF   ('&VAR' NE 'BROWSE' AND '&VAR' NE 'ALL').B100\n&SPFBROWSE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B100    ANOP\n.*\n         AIF   ('&VAR' NE 'CANCEL' AND '&VAR' NE 'ALL').B110\n&SPFCANCEL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B110    ANOP\n.*\n         AIF   ('&VAR' NE 'CHAR' AND '&VAR' NE 'ALL').B115\n&SPFCHAR SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B115    ANOP\n.*\n         AIF   ('&VAR' NE 'CONTROL' AND '&VAR' NE 'ALL').B200\n&SPFCONTROL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B200    ANOP\n.*\n         AIF   ('&VAR' NE 'DISABLE' AND '&VAR' NE 'ALL').B210\n&SPFDISABLE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B210    ANOP\n.*\n         AIF   ('&VAR' NE 'DISPLAY' AND '&VAR' NE 'ALL').B300\n&SPFDISPLAY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B300    ANOP\n.*\n         AIF   ('&VAR' NE 'EDIT' AND '&VAR' NE 'ALL').B400\n&SPFEDIT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B400    ANOP\n.*\n         AIF   ('&VAR' NE 'EDREC' AND   '&VAR' NE 'ALL').B500\n&SPFEDREC SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B500    ANOP\n.*\n         AIF   ('&VAR' NE 'END' AND     '&VAR' NE 'ALL').B510\n&SPFEND SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B510    ANOP\n.*\n         AIF   ('&VAR' NE 'ENABLE' AND  '&VAR' NE 'ALL').B515\n&SPFENABLE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B515    ANOP\n.*\n         AIF   ('&VAR' NE 'ENTER' AND   '&VAR' NE 'ALL').B520\n&SPFENTER SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B520    ANOP\n.*\n         AIF   ('&VAR' NE 'ERRORS' AND  '&VAR' NE 'ALL').B525\n&SPFERRORS SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B525    ANOP\n.*\n         AIF   ('&VAR' NE 'FIXED' AND   '&VAR' NE 'ALL').B550\n&SPFFIXED SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B550    ANOP\n.*\n         AIF   ('&VAR' NE 'FTCLOSE' AND '&VAR' NE 'ALL').B600\n&SPFFTCLOSE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B600    ANOP\n.*\n         AIF   ('&VAR' NE 'FTERASE' AND '&VAR' NE 'ALL').B700\n&SPFFTERASE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B700    ANOP\n.*\n         AIF   ('&VAR' NE 'FTINCL' AND '&VAR' NE 'ALL').B800\n&SPFFTINCL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B800    ANOP\n.*\n         AIF   ('&VAR' NE 'FTOPEN' AND '&VAR' NE 'ALL').B900\n&SPFFTOPEN SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B900    ANOP\n.*\n         AIF   ('&VAR' NE 'GETMSG' AND '&VAR' NE 'ALL').B1000\n&SPFGETMSG SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1000   ANOP\n.*\n         AIF   ('&VAR' NE 'GRTERM' AND '&VAR' NE 'ALL').B1100\n&SPFGRTERM SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1100   ANOP\n.*\n         AIF   ('&VAR' NE 'HEX' AND '&VAR' NE 'ALL').B1125\n&SPFHEX SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1125   ANOP\n.*\n         AIF   ('&VAR' NE 'ISPEXEC' AND '&VAR' NE 'ALL').B1150\n&SPFISPEXEC SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1150   ANOP\n.*\n         AIF   ('&VAR' NE 'ISREDIT' AND '&VAR' NE 'ALL').B1200\n&SPFISREDIT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1200   ANOP\n.*\n         AIF   ('&VAR' NE 'LINE' AND '&VAR' NE 'ALL').B1250\n&SPFLINE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1250   ANOP\n.*\n         AIF   ('&VAR' NE 'LOCK' AND '&VAR' NE 'ALL').B1275\n&SPFLOCK SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1275   ANOP\n.*\n         AIF   ('&VAR' NE 'LOG' AND '&VAR' NE 'ALL').B1300\n&SPFLOG SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1300   ANOP\n.*\n         AIF   ('&VAR' NE 'LOCATE' AND '&VAR' NE 'ALL').B1310\n&SPFLOCATE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1310   ANOP\n.*\n         AIF   ('&VAR' NE 'MOVE' AND '&VAR' NE 'ALL').B1320\n&SPFMOVE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1320   ANOP\n.*\n         AIF   ('&VAR' NE 'NEWCOPY' AND '&VAR' NE 'ALL').B1400\n&SPFNEWCOPY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1400   ANOP\n.*\n         AIF   ('&VAR' NE 'NEXT' AND '&VAR' NE 'ALL').B1410\n&SPFNEXT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1410   ANOP\n.*\n         AIF   ('&VAR' NE 'NO' AND '&VAR' NE 'ALL').B1500\n&SPFNO SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1500   ANOP\n.*\n         AIF   ('&VAR' NE 'NOCMD' AND '&VAR' NE 'ALL').B1510\n&SPFNOCMD SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1510   ANOP\n.*\n         AIF   ('&VAR' NE 'NOFT' AND '&VAR' NE 'ALL').B1515\n&SPFNOFT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1515   ANOP\n.*\n         AIF   ('&VAR' NE 'NONDISPL' AND '&VAR' NE 'ALL').B1520\n&SPFNONDISPL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1520   ANOP\n.*\n         AIF   ('&VAR' NE 'NOREAD' AND '&VAR' NE 'ALL').B1522\n&SPFNOREAD SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1522   ANOP\n.*\n         AIF   ('&VAR' NE 'NOREPL' AND '&VAR' NE 'ALL').B1524\n&SPFNOREPL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1524   ANOP\n.*\n         AIF   ('&VAR' NE 'NOWRITE' AND '&VAR' NE 'ALL').B1600\n&SPFNOWRITE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1600   ANOP\n.*\n         AIF   ('&VAR' NE 'ORDER' AND '&VAR' NE 'ALL').B1601\n&SPFORDER SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1601   ANOP\n.*\n         AIF   ('&VAR' NE 'PREVIOUS' AND '&VAR' NE 'ALL').B1605\n&SPFPREVIOUS SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1605   ANOP\n.*\n         AIF   ('&VAR' NE 'PROFILE' AND '&VAR' NE 'ALL').B1607\n&SPFPROFILE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1607   ANOP\n.*\n         AIF   ('&VAR' NE 'REFRESH' AND '&VAR' NE 'ALL').B1610\n&SPFREFRESH SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1610   ANOP\n.*\n         AIF   ('&VAR' NE 'REPLCOPY' AND '&VAR' NE 'ALL').B1612\n&SPFREPLCOPY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1612   ANOP\n.*\n         AIF   ('&VAR' NE 'REPLACE' AND '&VAR' NE 'ALL').B1614\n&SPFREPLACE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1614   ANOP\n.*\n         AIF   ('&VAR' NE 'RESTORE' AND '&VAR' NE 'ALL').B1620\n&SPFRESTORE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1620   ANOP\n.*\n         AIF   ('&VAR' NE 'SAVE' AND '&VAR' NE 'ALL').B1630\n&SPFSAVE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1630   ANOP\n.*\n         AIF   ('&VAR' NE 'SELECT' AND '&VAR' NE 'ALL').B1700\n&SPFSELECT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1700   ANOP\n.*\n         AIF   ('&VAR' NE 'SETMSG' AND '&VAR' NE 'ALL').B1800\n&SPFSETMSG SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1800   ANOP\n.*\n         AIF   ('&VAR' NE 'SHARE' AND '&VAR' NE 'ALL').B1805\n&SPFSHARE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1805   ANOP\n.*\n         AIF   ('&VAR' NE 'SHARED' AND '&VAR' NE 'ALL').B1807\n&SPFSHARED SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1807   ANOP\n.*\n         AIF   ('&VAR' NE 'SPLIT' AND '&VAR' NE 'ALL').B1810\n&SPFSPLIT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1810   ANOP\n.*\n         AIF   ('&VAR' NE 'TBADD' AND '&VAR' NE 'ALL').B1900\n&SPFTBADD SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1900   ANOP\n.*\n         AIF   ('&VAR' NE 'TBBOTTOM' AND '&VAR' NE 'ALL').B2000\n&SPFTBBOTTOM SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2000   ANOP\n.*\n         AIF   ('&VAR' NE 'TBCLOSE' AND '&VAR' NE 'ALL').B2100\n&SPFTBCLOSE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2100   ANOP\n.*\n         AIF   ('&VAR' NE 'TBCREATE' AND '&VAR' NE 'ALL').B2200\n&SPFTBCREATE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2200   ANOP\n.*\n         AIF   ('&VAR' NE 'TBDELETE' AND '&VAR' NE 'ALL').B2300\n&SPFTBDELETE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2300   ANOP\n.*\n         AIF   ('&VAR' NE 'TBDISPL' AND '&VAR' NE 'ALL').B2400\n&SPFTBDISPL SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2400   ANOP\n.*\n         AIF   ('&VAR' NE 'TBEND' AND '&VAR' NE 'ALL').B2500\n&SPFTBEND SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2500   ANOP\n.*\n         AIF   ('&VAR' NE 'TBERASE' AND '&VAR' NE 'ALL').B2600\n&SPFTBERASE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2600   ANOP\n.*\n         AIF   ('&VAR' NE 'TBEXIST' AND '&VAR' NE 'ALL').B2700\n&SPFTBEXIST SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2700   ANOP\n.*\n         AIF   ('&VAR' NE 'TBGET' AND '&VAR' NE 'ALL').B2800\n&SPFTBGET SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2800   ANOP\n.*\n         AIF   ('&VAR' NE 'TBMOD' AND '&VAR' NE 'ALL').B2900\n&SPFTBMOD SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2900   ANOP\n.*\n         AIF   ('&VAR' NE 'TBOPEN' AND '&VAR' NE 'ALL').B3000\n&SPFTBOPEN SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3000   ANOP\n.*\n         AIF   ('&VAR' NE 'TBPUT' AND '&VAR' NE 'ALL').B3100\n&SPFTBPUT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3100   ANOP\n.*\n         AIF   ('&VAR' NE 'TBQUERY' AND '&VAR' NE 'ALL').B3200\n&SPFTBQUERY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3200   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSARG' AND '&VAR' NE 'ALL').B3300\n&SPFTBSARG SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3300   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSAVE' AND '&VAR' NE 'ALL').B3400\n&SPFTBSAVE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3400   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSCAN' AND '&VAR' NE 'ALL').B3500\n&SPFTBSCAN SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3500   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSKIP' AND '&VAR' NE 'ALL').B3600\n&SPFTBSKIP SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3600   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSORT' AND '&VAR' NE 'ALL').B3700\n&SPFTBSORT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3700   ANOP\n         AIF   ('&VAR' NE 'TBSTATS' AND '&VAR' NE 'ALL').B3750\n&SPFTBSTATS SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3750   ANOP\n.*\n         AIF   ('&VAR' NE 'TBTOP' AND '&VAR' NE 'ALL').B3800\n&SPFTBTOP SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3800   ANOP\n.*\n         AIF   ('&VAR' NE 'TBVCLEAR' AND '&VAR' NE 'ALL').B3900\n&SPFTBVCLEAR SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3900   ANOP\n.*\n         AIF   ('&VAR' NE 'TEMP' AND '&VAR' NE 'ALL').B3950\n&SPFTEMP SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3950   ANOP\n.*\n         AIF   ('&VAR' NE 'USER' AND '&VAR' NE 'ALL').B3955\n&SPFUSER SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3955   ANOP\n.*\n         AIF   ('&VAR' NE 'VCOPY' AND '&VAR' NE 'ALL').B4000\n&SPFVCOPY SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4000   ANOP\n.*\n         AIF   ('&VAR' NE 'VDEFINE' AND '&VAR' NE 'ALL').B4100\n&SPFVDEFINE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4100   ANOP\n.*\n         AIF   ('&VAR' NE 'VDELETE' AND '&VAR' NE 'ALL').B4200\n&SPFVDELETE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4200   ANOP\n.*\n         AIF   ('&VAR' NE 'VGET' AND '&VAR' NE 'ALL').B4300\n&SPFVGET SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4300   ANOP\n.*\n         AIF   ('&VAR' NE 'VPUT' AND '&VAR' NE 'ALL').B4400\n&SPFVPUT SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4400   ANOP\n.*\n         AIF   ('&VAR' NE 'VREPLACE' AND '&VAR' NE 'ALL').B4500\n&SPFVREPLACE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4500   ANOP\n.*\n         AIF   ('&VAR' NE 'VRESET' AND '&VAR' NE 'ALL').B4600\n&SPFVRESET SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4600   ANOP\n.*\n         AIF   ('&VAR' NE 'WRITE' AND '&VAR' NE 'ALL').B4700\n&SPFWRITE SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4700   ANOP\n.*\n         AIF   ('&VAR' NE 'YES' AND '&VAR' NE 'ALL').B4800\n&SPFYES SETB 0\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4800   ANOP\n.*\n.*\n.**********************************************************************\n.*       CHECK FOR ERRORS\n.**********************************************************************\n.*\n         AIF   ('&VAR' NE 'ALL').ERR1\n.EXIT    MEXIT\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR LIST - FOUND ''&VAR'''\n         AGO   .EXIT\n         MEND\nX        CSECT\n         ISPF  SUPPRESS,LIST=CONTROL\n         CONTROL ERRORS,CANCEL\n         ISPF  RESET,LIST=CONTROL\n         CONTROL ERRORS,CANCEL\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPFSUPP": {"ttr": 6913, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ISPFSUPP &VAR\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFASIS\n         GBLB  &SPFBIT\n         GBLB  &SPFBROWSE\n         GBLB  &SPFCANCEL\n         GBLB  &SPFCHAR\n         GBLB  &SPFCONTROL\n         GBLB  &SPFDISABLE\n         GBLB  &SPFDISPLAY\n         GBLB  &SPFEDIT\n         GBLB  &SPFEDREC\n         GBLB  &SPFENABLE\n         GBLB  &SPFENTER\n         GBLB  &SPFEND\n         GBLB  &SPFERRORS\n         GBLB  &SPFFIXED\n         GBLB  &SPFFTCLOSE\n         GBLB  &SPFFTERASE\n         GBLB  &SPFFTINCL\n         GBLB  &SPFFTOPEN\n         GBLB  &SPFGETMSG\n         GBLB  &SPFGRTERM\n         GBLB  &SPFHEX\n         GBLB  &SPFINPUT\n         GBLB  &SPFISPEXEC\n         GBLB  &SPFISREDIT\n         GBLB  &SPFLINE\n         GBLB  &SPFLOCK\n         GBLB  &SPFLOG\n         GBLB  &SPFLOCATE\n         GBLB  &SPFMOVE\n         GBLB  &SPFNEWCOPY\n         GBLB  &SPFNEXT\n         GBLB  &SPFNO\n         GBLB  &SPFNOCMD\n         GBLB  &SPFNOFT\n         GBLB  &SPFNONDISPL\n         GBLB  &SPFNOREAD\n         GBLB  &SPFNOREPL\n         GBLB  &SPFNOWRITE\n         GBLB  &SPFORDER\n         GBLB  &SPFOUTPUT\n         GBLB  &SPFPREVIOUS\n         GBLB  &SPFPROFILE\n         GBLB  &SPFREFRESH\n         GBLB  &SPFREPLCOPY\n         GBLB  &SPFREPLACE\n         GBLB  &SPFRESTORE\n         GBLB  &SPFRETURN\n         GBLB  &SPFSAVE\n         GBLB  &SPFSELECT\n         GBLB  &SPFSETMSG\n         GBLB  &SPFSHARE\n         GBLB  &SPFSHARED\n         GBLB  &SPFSM\n         GBLB  &SPFSPLIT\n         GBLB  &SPFTBADD\n         GBLB  &SPFTBBOTTOM\n         GBLB  &SPFTBCLOSE\n         GBLB  &SPFTBCREATE\n         GBLB  &SPFTBDELETE\n         GBLB  &SPFTBDISPL\n         GBLB  &SPFTBEND\n         GBLB  &SPFTBERASE\n         GBLB  &SPFTBEXIST\n         GBLB  &SPFTBGET\n         GBLB  &SPFTBMOD\n         GBLB  &SPFTBOPEN\n         GBLB  &SPFTBPUT\n         GBLB  &SPFTBQUERY\n         GBLB  &SPFTBSARG\n         GBLB  &SPFTBSAVE\n         GBLB  &SPFTBSCAN\n         GBLB  &SPFTBSKIP\n         GBLB  &SPFTBSORT\n         GBLB  &SPFTBSTATS\n         GBLB  &SPFTBTOP\n         GBLB  &SPFTBVCLEAR\n         GBLB  &SPFTEMP\n         GBLB  &SPFUSER\n         GBLB  &SPFVCOPY\n         GBLB  &SPFVDEFINE\n         GBLB  &SPFVDELETE\n         GBLB  &SPFVGET\n         GBLB  &SPFVPUT\n         GBLB  &SPFVREPLACE\n         GBLB  &SPFVRESET\n         GBLB  &SPFWRITE\n         GBLB  &SPFYES\n.*\n         GBLB  &SPFLMCLOSE\n         GBLB  &SPFLMERASE\n         GBLB  &SPFLMFREE\n         GBLB  &SPFLMGET\n         GBLB  &SPFLMINIT\n         GBLB  &SPFLMMADD\n         GBLB  &SPFLMMDEL\n         GBLB  &SPFLMMFIND\n         GBLB  &SPFLMMLIST\n         GBLB  &SPFLMMREN\n         GBLB  &SPFLMMREP\n         GBLB  &SPFLMOPEN\n         GBLB  &SPFLMPUT\n         GBLB  &SPFLMQUERY\n         GBLB  &SPFLMRENAME\n.*\n.**********************************************************************\n.*       AIF CODE\n.**********************************************************************\n.*\n         AIF   ('&VAR' NE 'ASIS' AND '&VAR' NE 'ALL').B50\n&SPFASIS SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B50     ANOP\n.*\n         AIF   ('&VAR' NE 'BIT' AND '&VAR' NE 'ALL').B60\n&SPFBIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B60     ANOP\n.*\n         AIF   ('&VAR' NE 'BROWSE' AND '&VAR' NE 'ALL').B100\n&SPFBROWSE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B100    ANOP\n.*\n         AIF   ('&VAR' NE 'CANCEL' AND '&VAR' NE 'ALL').B110\n&SPFCANCEL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B110    ANOP\n.*\n         AIF   ('&VAR' NE 'CHAR' AND '&VAR' NE 'ALL').B115\n&SPFCHAR SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B115    ANOP\n.*\n         AIF   ('&VAR' NE 'CONTROL' AND '&VAR' NE 'ALL').B200\n&SPFCONTROL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B200    ANOP\n.*\n         AIF   ('&VAR' NE 'DISABLE' AND '&VAR' NE 'ALL').B210\n&SPFDISABLE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B210    ANOP\n.*\n         AIF   ('&VAR' NE 'DISPLAY' AND '&VAR' NE 'ALL').B300\n&SPFDISPLAY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B300    ANOP\n.*\n         AIF   ('&VAR' NE 'EDIT' AND '&VAR' NE 'ALL').B400\n&SPFEDIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B400    ANOP\n.*\n         AIF   ('&VAR' NE 'EDREC' AND   '&VAR' NE 'ALL').B500\n&SPFEDREC SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B500    ANOP\n.*\n         AIF   ('&VAR' NE 'END' AND     '&VAR' NE 'ALL').B510\n&SPFEND SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B510    ANOP\n.*\n         AIF   ('&VAR' NE 'ENABLE' AND  '&VAR' NE 'ALL').B515\n&SPFENABLE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B515    ANOP\n.*\n         AIF   ('&VAR' NE 'ENTER' AND   '&VAR' NE 'ALL').B520\n&SPFENTER SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B520    ANOP\n.*\n         AIF   ('&VAR' NE 'ERRORS' AND  '&VAR' NE 'ALL').B525\n&SPFERRORS SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B525    ANOP\n.*\n         AIF   ('&VAR' NE 'FIXED' AND   '&VAR' NE 'ALL').B550\n&SPFFIXED SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B550    ANOP\n.*\n         AIF   ('&VAR' NE 'FTCLOSE' AND '&VAR' NE 'ALL').B600\n&SPFFTCLOSE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B600    ANOP\n.*\n         AIF   ('&VAR' NE 'FTERASE' AND '&VAR' NE 'ALL').B700\n&SPFFTERASE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B700    ANOP\n.*\n         AIF   ('&VAR' NE 'FTINCL' AND '&VAR' NE 'ALL').B800\n&SPFFTINCL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B800    ANOP\n.*\n         AIF   ('&VAR' NE 'FTOPEN' AND '&VAR' NE 'ALL').B900\n&SPFFTOPEN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B900    ANOP\n.*\n         AIF   ('&VAR' NE 'GETMSG' AND '&VAR' NE 'ALL').B1000\n&SPFGETMSG SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1000   ANOP\n.*\n         AIF   ('&VAR' NE 'GRTERM' AND '&VAR' NE 'ALL').B1100\n&SPFGRTERM SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1100   ANOP\n.*\n         AIF   ('&VAR' NE 'HEX' AND '&VAR' NE 'ALL').B1125\n&SPFHEX SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1125   ANOP\n.*\n         AIF   ('&VAR' NE 'INPUT' AND '&VAR' NE 'ALL').B1140\n&SPFINPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1140   ANOP\n.*\n         AIF   ('&VAR' NE 'ISPEXEC' AND '&VAR' NE 'ALL').B1150\n&SPFISPEXEC SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1150   ANOP\n.*\n         AIF   ('&VAR' NE 'ISREDIT' AND '&VAR' NE 'ALL').B1200\n&SPFISREDIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1200   ANOP\n.*\n         AIF   ('&VAR' NE 'LINE' AND '&VAR' NE 'ALL').B1250\n&SPFLINE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1250   ANOP\n.*\n         AIF   ('&VAR' NE 'LOCK' AND '&VAR' NE 'ALL').B1275\n&SPFLOCK SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1275   ANOP\n.*\n         AIF   ('&VAR' NE 'LOG' AND '&VAR' NE 'ALL').B1300\n&SPFLOG SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1300   ANOP\n.*\n         AIF   ('&VAR' NE 'LOCATE' AND '&VAR' NE 'ALL').B1310\n&SPFLOCATE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1310   ANOP\n.*\n         AIF   ('&VAR' NE 'MOVE' AND '&VAR' NE 'ALL').B1320\n&SPFMOVE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1320   ANOP\n.*\n         AIF   ('&VAR' NE 'NEWCOPY' AND '&VAR' NE 'ALL').B1400\n&SPFNEWCOPY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1400   ANOP\n.*\n         AIF   ('&VAR' NE 'NEXT' AND '&VAR' NE 'ALL').B1410\n&SPFNEXT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1410   ANOP\n.*\n         AIF   ('&VAR' NE 'NO' AND '&VAR' NE 'ALL').B1500\n&SPFNO SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1500   ANOP\n.*\n         AIF   ('&VAR' NE 'NOCMD' AND '&VAR' NE 'ALL').B1510\n&SPFNOCMD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1510   ANOP\n.*\n         AIF   ('&VAR' NE 'NOFT' AND '&VAR' NE 'ALL').B1515\n&SPFNOFT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1515   ANOP\n.*\n         AIF   ('&VAR' NE 'NONDISPL' AND '&VAR' NE 'ALL').B1520\n&SPFNONDISPL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1520   ANOP\n.*\n         AIF   ('&VAR' NE 'NOREAD' AND '&VAR' NE 'ALL').B1522\n&SPFNOREAD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1522   ANOP\n.*\n         AIF   ('&VAR' NE 'NOREPL' AND '&VAR' NE 'ALL').B1524\n&SPFNOREPL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1524   ANOP\n.*\n         AIF   ('&VAR' NE 'NOWRITE' AND '&VAR' NE 'ALL').B1600\n&SPFNOWRITE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1600   ANOP\n.*\n         AIF   ('&VAR' NE 'ORDER' AND '&VAR' NE 'ALL').B1601\n&SPFORDER SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1601   ANOP\n.*\n         AIF   ('&VAR' NE 'OUTPUT' AND '&VAR' NE 'ALL').B1602\n&SPFOUTPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1602   ANOP\n.*\n         AIF   ('&VAR' NE 'PREVIOUS' AND '&VAR' NE 'ALL').B1605\n&SPFPREVIOUS SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1605   ANOP\n.*\n         AIF   ('&VAR' NE 'PROFILE' AND '&VAR' NE 'ALL').B1607\n&SPFPROFILE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1607   ANOP\n.*\n         AIF   ('&VAR' NE 'REFRESH' AND '&VAR' NE 'ALL').B1610\n&SPFREFRESH SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1610   ANOP\n.*\n         AIF   ('&VAR' NE 'REPLCOPY' AND '&VAR' NE 'ALL').B1612\n&SPFREPLCOPY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1612   ANOP\n.*\n         AIF   ('&VAR' NE 'REPLACE' AND '&VAR' NE 'ALL').B1614\n&SPFREPLACE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1614   ANOP\n.*\n         AIF   ('&VAR' NE 'RESTORE' AND '&VAR' NE 'ALL').B1620\n&SPFRESTORE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1620   ANOP\n.*\n         AIF   ('&VAR' NE 'SAVE' AND '&VAR' NE 'ALL').B1630\n&SPFSAVE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1630   ANOP\n.*\n         AIF   ('&VAR' NE 'SELECT' AND '&VAR' NE 'ALL').B1700\n&SPFSELECT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1700   ANOP\n.*\n         AIF   ('&VAR' NE 'SETMSG' AND '&VAR' NE 'ALL').B1800\n&SPFSETMSG SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1800   ANOP\n.*\n         AIF   ('&VAR' NE 'SHARE' AND '&VAR' NE 'ALL').B1805\n&SPFSHARE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1805   ANOP\n.*\n         AIF   ('&VAR' NE 'SHARED' AND '&VAR' NE 'ALL').B1807\n&SPFSHARED SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1807   ANOP\n.*\n         AIF   ('&VAR' NE 'SPLIT' AND '&VAR' NE 'ALL').B1810\n&SPFSPLIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1810   ANOP\n.*\n         AIF   ('&VAR' NE 'TBADD' AND '&VAR' NE 'ALL').B1900\n&SPFTBADD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B1900   ANOP\n.*\n         AIF   ('&VAR' NE 'TBBOTTOM' AND '&VAR' NE 'ALL').B2000\n&SPFTBBOTTOM SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2000   ANOP\n.*\n         AIF   ('&VAR' NE 'TBCLOSE' AND '&VAR' NE 'ALL').B2100\n&SPFTBCLOSE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2100   ANOP\n.*\n         AIF   ('&VAR' NE 'TBCREATE' AND '&VAR' NE 'ALL').B2200\n&SPFTBCREATE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2200   ANOP\n.*\n         AIF   ('&VAR' NE 'TBDELETE' AND '&VAR' NE 'ALL').B2300\n&SPFTBDELETE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2300   ANOP\n.*\n         AIF   ('&VAR' NE 'TBDISPL' AND '&VAR' NE 'ALL').B2400\n&SPFTBDISPL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2400   ANOP\n.*\n         AIF   ('&VAR' NE 'TBEND' AND '&VAR' NE 'ALL').B2500\n&SPFTBEND SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2500   ANOP\n.*\n         AIF   ('&VAR' NE 'TBERASE' AND '&VAR' NE 'ALL').B2600\n&SPFTBERASE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2600   ANOP\n.*\n         AIF   ('&VAR' NE 'TBEXIST' AND '&VAR' NE 'ALL').B2700\n&SPFTBEXIST SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2700   ANOP\n.*\n         AIF   ('&VAR' NE 'TBGET' AND '&VAR' NE 'ALL').B2800\n&SPFTBGET SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2800   ANOP\n.*\n         AIF   ('&VAR' NE 'TBMOD' AND '&VAR' NE 'ALL').B2900\n&SPFTBMOD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B2900   ANOP\n.*\n         AIF   ('&VAR' NE 'TBOPEN' AND '&VAR' NE 'ALL').B3000\n&SPFTBOPEN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3000   ANOP\n.*\n         AIF   ('&VAR' NE 'TBPUT' AND '&VAR' NE 'ALL').B3100\n&SPFTBPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3100   ANOP\n.*\n         AIF   ('&VAR' NE 'TBQUERY' AND '&VAR' NE 'ALL').B3200\n&SPFTBQUERY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3200   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSARG' AND '&VAR' NE 'ALL').B3300\n&SPFTBSARG SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3300   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSAVE' AND '&VAR' NE 'ALL').B3400\n&SPFTBSAVE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3400   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSCAN' AND '&VAR' NE 'ALL').B3500\n&SPFTBSCAN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3500   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSKIP' AND '&VAR' NE 'ALL').B3600\n&SPFTBSKIP SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3600   ANOP\n.*\n         AIF   ('&VAR' NE 'TBSORT' AND '&VAR' NE 'ALL').B3700\n&SPFTBSORT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3700   ANOP\n         AIF   ('&VAR' NE 'TBSTATS' AND '&VAR' NE 'ALL').B3750\n&SPFTBSTATS SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3750   ANOP\n.*\n         AIF   ('&VAR' NE 'TBTOP' AND '&VAR' NE 'ALL').B3800\n&SPFTBTOP SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3800   ANOP\n.*\n         AIF   ('&VAR' NE 'TBVCLEAR' AND '&VAR' NE 'ALL').B3900\n&SPFTBVCLEAR SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3900   ANOP\n.*\n         AIF   ('&VAR' NE 'TEMP' AND '&VAR' NE 'ALL').B3950\n&SPFTEMP SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3950   ANOP\n.*\n         AIF   ('&VAR' NE 'USER' AND '&VAR' NE 'ALL').B3955\n&SPFUSER SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B3955   ANOP\n.*\n         AIF   ('&VAR' NE 'VCOPY' AND '&VAR' NE 'ALL').B4000\n&SPFVCOPY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4000   ANOP\n.*\n         AIF   ('&VAR' NE 'VDEFINE' AND '&VAR' NE 'ALL').B4100\n&SPFVDEFINE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4100   ANOP\n.*\n         AIF   ('&VAR' NE 'VDELETE' AND '&VAR' NE 'ALL').B4200\n&SPFVDELETE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4200   ANOP\n.*\n         AIF   ('&VAR' NE 'VGET' AND '&VAR' NE 'ALL').B4300\n&SPFVGET SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4300   ANOP\n.*\n         AIF   ('&VAR' NE 'VPUT' AND '&VAR' NE 'ALL').B4400\n&SPFVPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4400   ANOP\n.*\n         AIF   ('&VAR' NE 'VREPLACE' AND '&VAR' NE 'ALL').B4500\n&SPFVREPLACE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4500   ANOP\n.*\n         AIF   ('&VAR' NE 'VRESET' AND '&VAR' NE 'ALL').B4600\n&SPFVRESET SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4600   ANOP\n.*\n         AIF   ('&VAR' NE 'WRITE' AND '&VAR' NE 'ALL').B4700\n&SPFWRITE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4700   ANOP\n.*\n         AIF   ('&VAR' NE 'YES' AND '&VAR' NE 'ALL').B4800\n&SPFYES SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4800   ANOP\n.*\n         AIF   ('&VAR' NE 'LMCLOSE' AND '&VAR' NE 'ALL').B4900\n&SPFLMCLOSE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B4900   ANOP\n.*\n         AIF   ('&VAR' NE 'LMERASE' AND '&VAR' NE 'ALL').B5000\n&SPFLMERASE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5000   ANOP\n.*\n         AIF   ('&VAR' NE 'LMFREE' AND  '&VAR' NE 'ALL').B5100\n&SPFLMFREE SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5100   ANOP\n.*\n         AIF   ('&VAR' NE 'LMGET' AND   '&VAR' NE 'ALL').B5200\n&SPFLMGET SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5200   ANOP\n.*\n         AIF   ('&VAR' NE 'LMINIT' AND  '&VAR' NE 'ALL').B5300\n&SPFLMINIT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5300   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMADD' AND  '&VAR' NE 'ALL').B5400\n&SPFLMMADD SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5400   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMDEL' AND  '&VAR' NE 'ALL').B5500\n&SPFLMMDEL SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5500   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMFIND' AND '&VAR' NE 'ALL').B5600\n&SPFLMMFIND SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5600   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMLIST' AND '&VAR' NE 'ALL').B5700\n&SPFLMMLIST SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5700   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMREN' AND  '&VAR' NE 'ALL').B5800\n&SPFLMMREN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5800   ANOP\n.*\n         AIF   ('&VAR' NE 'LMMREP' AND  '&VAR' NE 'ALL').B5900\n&SPFLMMREP SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B5900   ANOP\n.*\n         AIF   ('&VAR' NE 'LMOPEN' AND  '&VAR' NE 'ALL').B6000\n&SPFLMOPEN SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B6000   ANOP\n.*\n         AIF   ('&VAR' NE 'LMPUT' AND   '&VAR' NE 'ALL').B6100\n&SPFLMPUT SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B6100   ANOP\n.*\n         AIF   ('&VAR' NE 'LMQUERY' AND '&VAR' NE 'ALL').B6200\n&SPFLMQUERY SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B6200   ANOP\n.*\n         AIF   ('&VAR' NE 'LMRENAME' AND '&VAR' NE 'ALL').B6300\n&SPFLMRENAME SETB 1\n         AIF   ('&VAR' NE 'ALL').EXIT\n.B6300   ANOP\n.*\n.*\n.**********************************************************************\n.*       CHECK FOR ERRORS\n.**********************************************************************\n.*\n         AIF   ('&VAR' NE 'ALL').ERR1\n.EXIT    MEXIT\n.ERR1    ANOP\n         MNOTE 16,'INVALID VALUE FOR LIST - FOUND ''&VAR'''\n         AGO   .EXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISREDIT": {"ttr": 7170, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    ISREDIT &BUFLEN,               MEMBER NAME                    *\n               &BUF,                    LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFISREDIT,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         LCLA  &LEN\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&BUF' EQ '').ERR1\n         AIF   ('&BUF'(1,1) EQ '''' AND '&BUFLEN' NE '').WARN\n.CONT    ANOP\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFISREDIT).GENLIT\n         AIF   (T'&BUFLEN EQ 'N').GENLIT\n.CNT1    AIF   ('&BUF' EQ '').CNT2\n         AIF   ('&BUF'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFISREDIT).BYP20\nISREDIT  DC    CL8'ISREDIT'             ISPF KEYWORD\n&SPFISREDIT SETB 1\n.BYP20   ANOP\n         AIF   ('&BUFLEN' EQ '').BYP40\n         AIF   (T'&BUFLEN NE 'N').BYP40\n         AIF   ('&BUF'(1,1) EQ '''').BYP40\nSPFL&NDX DC    F'&BUFLEN'               BUFFER LENGTH GENERATED\n.BYP40   ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP50\n         CNOP  0,4\n&LEN     SETA  K'&BUF+3\n&LEN     SETA  &LEN/4*4\nSPFB&NDX DC    CL&LEN&BUF               GENERATED ISREDIT BUFFER\nSPFL&NDX DC    F'&LEN'                  GENERATED ISREDIT LENGTH\n.BYP50   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,ISREDIT               GET ADDRESS OF ISREDIT KEYWORD\n         AIF   ('&BUFLEN' EQ '').BYP100\n         AIF   ('&BUF'(1,1) EQ '''').BYP100\n         AIF   (T'&BUFLEN EQ 'N').BYP100\n         LA    15,&BUFLEN               GET ADDRESS OF BUFFER LENGTH\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENNED LENGTH\n.BYP120  ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP130\n         LA    0,SPFB&NDX               GET ADDRESS OF GENERATED BUF\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&BUF                   GET ADDRESS OF BUFFER\n         AGO   .BYP150\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(ISREDIT)               BROWSE LITERAL\n         AIF   ('&BUFLEN' EQ '').BYP200\n         AIF   ('&BUF'(1,1) EQ '''').BYP200\n         AIF   (T'&BUFLEN EQ 'N').BYP200\n         DC    A(&BUFLEN)               ADDRESS OF BUFFER LENGTH\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENNED LENGTH\n.BYP220  ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP230\n         DC    A(SPFB&NDX+X'80000000')  ADDRESS OF GENERATED BUFFER\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&BUF+X'80000000')      ADDRESS OF BUFFER\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'BUFFER FOR ISREDIT COMMAND IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.WARN    ANOP\n         MNOTE 4,'BUFFER LENGTH IS IGNORED FOR LITERAL BUFFER'\n         AGO   .CONT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMCLOSE": {"ttr": 7174, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMCLOSE &DATAID=,              DATAID NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMCLOSE              GLOBAL FOR LMCLOSE LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMCLOSE).BYP20\nLMCLOSE  DC    CL8'LMCLOSE'             ISPF KEYWORD\n&SPFLMCLOSE SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMCLOSE               GET ADDRESS OF LMCLOSE KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         STM   14,15,&TEMP              STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMCLOSE)               GET ADDRESS OF LMCLOSE KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID+X'80000000')   GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX+X'80000000')  GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMERASE": {"ttr": 7178, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMERASE &PROJECT=,             PROJECT NAME                   *\n               &GROUP=,                 VARIABLE FOR GROUP             *\n               &TYPE=,                  LOCK OPTION                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMERASE              GLOBAL FOR LMERASE LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&PROJECT' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&PROJECT'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&GROUP' EQ '').CNT2\n         AIF   ('&GROUP'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&TYPE' EQ '').CNT6\n         AIF   ('&TYPE'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMERASE).BYP20\nLMERASE  DC    CL8'LMERASE'             ISPF KEYWORD\n&SPFLMERASE SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP30\n         AIF   ('&PROJECT'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&PROJECT              GENERATED PROJECT NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BYP50\n         AIF   ('&GROUP'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&GROUP                GROUP NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP90\n         AIF   ('&TYPE'(1,1) NE '''').BYP90\nSPFB&NDX DC    CL8&TYPE                 TYPE OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMERASE               GET ADDRESS OF LMERASE KEYWORD\n.*\n.*\n         AIF   ('&PROJECT'(1,1) EQ '''').BYP1010\n         LA    15,&PROJECT              GET ADDRESS OF PROJECT NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED PROJECT\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BYP1200\n         AIF   ('&GROUP'(1,1) EQ '''').BYP1210\n         LA    0,&GROUP                 GET ADDRESS OF GROUP VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR GROUP\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED GROUP\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP1100\n         AIF   ('&TYPE'(1,1) EQ '''').BYP1110\n         LA    1,&TYPE                  GET ADDRESS OF &TYPE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR TYPE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED TYPE\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMERASE)               GET ADDRESS OF LMERASE KEYWORD\n.*\n.*\n         AIF   ('&PROJECT'(1,1) EQ '''').BY1010\n         DC    A(&PROJECT)              GET ADDRESS OF PROJECT NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED PROJECT\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BY1200\n         AIF   ('&GROUP'(1,1) EQ '''').BY1210\n         DC    A(&GROUP)                GET ADDRESS OF GROUP VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED GROUP\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BY1600\n         AIF   ('&TYPE'(1,1) EQ '''').BY1610\n         DC    A(&TYPE+X'80000000')     GET ADDRESS OF TYPE VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR TYPE\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFB&NDX+X'80000000')  GET ADDRESS OF GENNED TYPE\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'PROJECT NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMFREE": {"ttr": 7183, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMFREE &DATAID=,               DATAID NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMFREE               GLOBAL FOR LMFREE LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMFREE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMFREE).BYP20\nLMFREE   DC    CL8'LMFREE'              ISPF KEYWORD\n&SPFLMFREE SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMFREE                GET ADDRESS OF LMFREE KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         STM   14,15,&TEMP              STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMFREE)                GET ADDRESS OF LMFREE KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID+X'80000000')   GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX+X'80000000')  GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMGET": {"ttr": 7428, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMGET &DATAID=,                DATAID NAME                    *\n               &MODE=,                  MODE                           *\n               &DATALOC=,                                              *\n               &DATALEN=,                                              *\n               &MAXLEN=,                                               *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMGET                GLOBAL FOR LMGET LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMGET).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&MODE' EQ '').CNT2\n         AIF   ('&MODE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&DATALOC' EQ '').CNT3\n         AIF   ('&DATALOC'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&DATALEN' EQ '').CNT4\n         AIF   ('&DATALEN'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   (T'&MAXLEN EQ 'N').GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMGET).BYP20\nLMGET    DC    CL8'LMGET'               ISPF KEYWORD\n&SPFLMGET SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BYP40\n         AIF   ('&MODE'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&MODE                 MODE TYPE\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BYP50\n         AIF   ('&DATALOC'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&DATALOC              DATALOC VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BYP60\n         AIF   ('&DATALEN'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&DATALEN              DATALEN VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   (T'&MAXLEN NE 'N').BYP70\nSPFD&NDX DC    F'&MAXLEN'               MAXLEN\n.BYP70   ANOP\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMGET                 GET ADDRESS OF LMGET KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BYP1100\n         AIF   ('&MODE'(1,1) EQ '''').BYP1110\n         LA    0,&MODE                  GET ADDRESS OF &MODE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MODE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET GENNED MODE\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BYP1200\n         AIF   ('&DATALOC'(1,1) EQ '''').BYP1210\n         LA    1,&DATALOC               GET ADDRESS OF DATALOC VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR DATALOC\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED DATALOC\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BYP1300\n         AIF   ('&DATALEN'(1,1) EQ '''').BYP1310\n         LA    14,&DATALEN              GET ADDRESS OF DATALEN VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR DATALEN\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED DATALEN\n.BYP1350 ANOP\n.*\n.*\n         AIF   (T'&MAXLEN EQ 'N').BYP1410\n         AIF   ('&MAXLEN' EQ '').BYP1400\n         LA    15,&MAXLEN               GET ADDRESS OF MAXLEN\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MAXLEN\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED MAXLEN\n.BYP1450 ANOP\n.*\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMGET)                 GET ADDRESS OF LMGET KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BY1100\n         AIF   ('&MODE'(1,1) EQ '''').BY1110\n         DC    A(&MODE)                 GET ADDRESS OF &MODE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MODE\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET GENNED MODE\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BY1200\n         AIF   ('&DATALOC'(1,1) EQ '''').BY1210\n         DC    A(&DATALOC)              GET ADDRESS OF DATALOC VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATALOC\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED DATALOC\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BY1300\n         AIF   ('&DATALEN'(1,1) EQ '''').BY1310\n         DC    A(&DATALEN)              GET ADDRESS OF DATALEN VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATALEN\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED DATALEN\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&MAXLEN' EQ '').BY1400\n         AIF   (T'&MAXLEN EQ 'N').BY1410\n         DC    A(&MAXLEN+X'80000000')   GET ADDRESS OF MAXLEN VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR MAXLEN\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX+X'80000000')  GET ADDRESS OF GENNED MAXLEN\n.BY1450 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMINIT": {"ttr": 7434, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMINIT &DATAID=,               DATAID NAME                    *\n               &PROJECT=,               PROJECT NAME                   *\n               &GROUP1=,                GROUP 1 NAME                   *\n               &GROUP2=,                GROUP 2 NAME                   *\n               &GROUP3=,                GROUP 3 NAME                   *\n               &GROUP4=,                GROUP 4 NAME                   *\n               &TYPE=,                  TYPE                           *\n               &DATASET=,               DATASET NAME                   *\n               &DDNAME=,                DDNAME                         *\n               &VOLUME=,                VOL SER                        *\n               &PASSWORD=,              PASSWORD                       *\n               &ENQ=,                   ENQ TYPE                       *\n               &ORG=,                   ORGANIZATION                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMINIT               GLOBAL FOR LMINIT LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMINIT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&PROJECT' EQ '').CNT1\n         AIF   ('&PROJECT'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&GROUP1' EQ '').CNT2\n         AIF   ('&GROUP1'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&GROUP2' EQ '').CNT3\n         AIF   ('&GROUP2'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&GROUP3' EQ '').CNT4\n         AIF   ('&GROUP3'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&GROUP4' EQ '').CNT5\n         AIF   ('&GROUP4'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&TYPE' EQ '').CNT6\n         AIF   ('&TYPE'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&DATASET' EQ '').CNT7\n         AIF   ('&DATASET'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AIF   ('&DDNAME' EQ '').CNT8\n         AIF   ('&DDNAME'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&VOLUME' EQ '').CNT9\n         AIF   ('&VOLUME'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AIF   ('&PASSWORD' EQ '').CNT10\n         AIF   ('&PASSWORD'(1,1) EQ '''').GENLIT\n.CNT10   ANOP\n         AIF   ('&ENQ' EQ '').CNT11\n         AIF   ('&ENQ'(1,1) EQ '''').GENLIT\n.CNT11   ANOP\n         AIF   ('&ORG' EQ '').CNT12\n         AIF   ('&ORG'(1,1) EQ '''').GENLIT\n.CNT12   ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMINIT).BYP20\nLMINIT   DC    CL8'LMINIT'              ISPF KEYWORD\n&SPFLMINIT SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP40\n         AIF   ('&PROJECT'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&PROJECT              PROJECT VARIABLE NAME\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BYP50\n         AIF   ('&GROUP1'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&GROUP1               GROUP1 VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BYP60\n         AIF   ('&GROUP2'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&GROUP2               GROUP2 VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BYP70\n         AIF   ('&GROUP3'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&GROUP3               GROUP3 VARIABLE NAME\n.BYP70   ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BYP80\n         AIF   ('&GROUP4'(1,1) NE '''').BYP80\nSPFE&NDX DC    CL8&GROUP4               USERE VARIABLE NAME\n.BYP80   ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP90\n         AIF   ('&TYPE'(1,1) NE '''').BYP90\nSPFF&NDX DC    CL8&TYPE                 TYPE VARIABLE NAME\n.BYP90   ANOP\n.*\n.*\n         AIF   ('&DATASET' EQ '').BYP100\n         AIF   ('&DATASET'(1,1) NE '''').BYP100\nSPFG&NDX DC    CL56&DATASET             DATASET NAME\n.BYP100  ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BYP110\n         AIF   ('&DDNAME'(1,1) NE '''').BYP110\nSPFH&NDX DC    CL8&DDNAME               DDNAME VARIABLE NAME\n.BYP110  ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BYP120\n         AIF   ('&VOLUME'(1,1) NE '''').BYP120\nSPFI&NDX DC    CL6&VOLUME               VOLUME VARIABLE NAME\n.BYP120  ANOP\n.*\n.*\n         AIF   ('&PASSWORD' EQ '').BYP130\n         AIF   ('&PASSWORD'(1,1) NE '''').BYP130\nSPFJ&NDX DC    CL8&PASSWORD             PASSWORD VARIABLE NAME\n.BYP130  ANOP\n.*\n.*\n         AIF   ('&ENQ' EQ '').BYP140\n         AIF   ('&ENQ'(1,1) NE '''').BYP140\nSPFK&NDX DC    CL8&ENQ                  ENQ VARIABLE NAME\n.BYP140  ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BYP150\n         AIF   ('&ORG'(1,1) NE '''').BYP150\nSPFL&NDX DC    CL8&ORG                  ORG VARIABLE NAME\n.BYP150  ANOP\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMINIT                GET ADDRESS OF LMINIT KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP1100\n         AIF   ('&PROJECT'(1,1) EQ '''').BYP1110\n         LA    0,&PROJECT               GET ADDRESS OF PROJECT VARIABLE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PROJECT\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED PROJECT\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BYP1200\n         AIF   ('&GROUP1'(1,1) EQ '''').BYP1210\n         LA    1,&GROUP1                GET ADDRESS OF GROUP1 VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR GROUP1\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED GROUP1\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BYP1300\n         AIF   ('&GROUP2'(1,1) EQ '''').BYP1310\n         LA    14,&GROUP2               GET ADDRESS OF GROUP2 VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR GROUP2\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED GROUP2\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BYP1400\n         AIF   ('&GROUP3'(1,1) EQ '''').BYP1410\n         LA    15,&GROUP3               GET ADDRESS OF GROUP3 VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR GROUP3\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED GROUP3\n.BYP1450 ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BYP1500\n         AIF   ('&GROUP4'(1,1) EQ '''').BYP1510\n         LA    0,&GROUP4                GET ADDRESS OF GROUP4 VARIABLE\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR GROUP4\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFE&NDX               GET ADDRESS OF GENNED GROUP4\n.BYP1550 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP1600\n         AIF   ('&TYPE'(1,1) EQ '''').BYP1610\n         LA    1,&TYPE                  ADDRESS OF TYPE VARIABLE\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR TYPE\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFF&NDX               GET ADDRESS OF GENNED TYPE\n.BYP1650 ANOP\n.*\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&DATASET' EQ '').BYP1700\n         AIF   ('&DATASET'(1,1) EQ '''').BYP1710\n         LA    14,&DATASET              ADDRESS OF DATASET NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR DATASET\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFG&NDX              GET ADDRESS OF GENNED DATASET\n.BYP1750 ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BYP1800\n         AIF   ('&DDNAME'(1,1) EQ '''').BYP1810\n         LA    15,&DDNAME               ADDRESS OF DDNAME VARIABLE\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR DDNAME\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENNED DDNAME\n.BYP1850 ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BYP1900\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP1910\n         LA    0,&VOLUME                ADDRESS OF VOLUME VARIABLE\n         AGO   .BYP1950\n.BYP1900 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLUME\n         AGO   .BYP1950\n.BYP1910 ANOP\n         LA    0,SPFI&NDX               GET ADDRESS OF GENNED VOLUME\n.BYP1950 ANOP\n.*\n.*\n         AIF   ('&PASSWORD' EQ '').BYP2000\n         AIF   ('&PASSWORD'(1,1) EQ '''').BYP2010\n         LA    1,&PASSWORD              ADDRESS OF PASSWORD VARIABLE\n         AGO   .BYP2050\n.BYP2000 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR PASSWORD\n         AGO   .BYP2050\n.BYP2010 ANOP\n         LA    1,SPFJ&NDX               GET ADDRESS OF GENNED PASSWORD\n.BYP2050 ANOP\n.*\n.*\n         STM   14,1,&TEMP+32            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&ENQ' EQ '').BYP2100\n         AIF   ('&ENQ'(1,1) EQ '''').BYP2110\n         LA    14,&ENQ                  ADDRESS OF ENQ VARIABLE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ENQ\n         AGO   .BYP2150\n.BYP2110 ANOP\n         LA    14,SPFK&NDX              GET ADDRESS OF GENNED ENQ\n.BYP2150 ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BYP2200\n         AIF   ('&ORG'(1,1) EQ '''').BYP2210\n         LA    15,&ORG                  ADDRESS OF ORG VARIABLE\n         AGO   .BYP2250\n.BYP2200 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ORG\n         AGO   .BYP2250\n.BYP2210 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENNED ORG\n.BYP2250 ANOP\n.*\n.*\n         STM   14,15,&TEMP+48           STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+52,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 14).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 14).BYPVARS\n&SPFVARS SETA  14\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMINIT)                GET ADDRESS OF LMINIT KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BY1100\n         AIF   ('&PROJECT'(1,1) EQ '''').BY1110\n         DC    A(&PROJECT)              GET ADDRESS OF PROJECT VARIABLE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR PROJECT\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED PROJECT\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BY1200\n         AIF   ('&GROUP1'(1,1) EQ '''').BY1210\n         DC    A(&GROUP1)               GET ADDRESS OF GROUP1 VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP1\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED GROUP1\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BY1300\n         AIF   ('&GROUP2'(1,1) EQ '''').BY1310\n         DC    A(&GROUP2)               GET ADDRESS OF GROUP2 VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP2\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED GROUP2\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BY1400\n         AIF   ('&GROUP3'(1,1) EQ '''').BY1410\n         DC    A(&GROUP3)               GET ADDRESS OF GROUP3 VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP3\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX)              GET ADDRESS OF GENNED GROUP3\n.BY1450 ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BY1500\n         AIF   ('&GROUP4'(1,1) EQ '''').BY1510\n         DC    A(&GROUP4)               GET ADDRESS OF GROUP4 VARIABLE\n         AGO   .BY1550\n.BY1500 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP4\n         AGO   .BY1550\n.BY1510 ANOP\n         DC    A(SPFE&NDX)              GET ADDRESS OF GENNED GROUP4\n.BY1550 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BY1600\n         AIF   ('&TYPE'(1,1) EQ '''').BY1610\n         DC    A(&TYPE)                 ADDRESS OF TYPE VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR TYPE\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFF&NDX)              GET ADDRESS OF GENNED TYPE\n.BY1650 ANOP\n.*\n.*\n         AIF   ('&DATASET' EQ '').BY1700\n         AIF   ('&DATASET'(1,1) EQ '''').BY1710\n         DC    A(&DATASET)              ADDRESS OF DATASET NAME\n         AGO   .BY1750\n.BY1700 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATASET\n         AGO   .BY1750\n.BY1710 ANOP\n         DC    A(SPFG&NDX)              GET ADDRESS OF GENNED DATASET\n.BY1750 ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BY1800\n         AIF   ('&DDNAME'(1,1) EQ '''').BY1810\n         DC    A(&DDNAME)               ADDRESS OF DDNAME VARIABLE\n         AGO   .BY1850\n.BY1800 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DDNAME\n         AGO   .BY1850\n.BY1810 ANOP\n         DC    A(SPFH&NDX)              GET ADDRESS OF GENNED DDNAME\n.BY1850 ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BY1900\n         AIF   ('&VOLUME'(1,1) EQ '''').BY1910\n         DC    A(&VOLUME)               ADDRESS OF VOLUME VARIABLE\n         AGO   .BY1950\n.BY1900 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR VOLUME\n         AGO   .BY1950\n.BY1910 ANOP\n         DC    A(SPFI&NDX)              GET ADDRESS OF GENNED VOLUME\n.BY1950 ANOP\n.*\n.*\n         AIF   ('&PASSWORD' EQ '').BY2000\n         AIF   ('&PASSWORD'(1,1) EQ '''').BY2010\n         DC    A(&PASSWORD)             ADDRESS OF PASSWORD VARIABLE\n         AGO   .BY2050\n.BY2000 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR PASSWORD\n         AGO   .BY2050\n.BY2010 ANOP\n         DC    A(SPFJ&NDX)              GET ADDRESS OF GENNED PASSWORD\n.BY2050 ANOP\n.*\n.*\n         AIF   ('&ENQ' EQ '').BY2100\n         AIF   ('&ENQ'(1,1) EQ '''').BY2110\n         DC    A(&ENQ)                  ADDRESS OF ENQ VARIABLE\n         AGO   .BY2150\n.BY2100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR ENQ\n         AGO   .BY2150\n.BY2110 ANOP\n         DC    A(SPFK&NDX)              GET ADDRESS OF GENNED ENQ\n.BY2150 ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BY2200\n         AIF   ('&ORG'(1,1) EQ '''').BY2210\n         DC    A(&ORG+X'80000000')      ADDRESS OF ORG VARIABLE\n         AGO   .BY2250\n.BY2200 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR ORG\n         AGO   .BY2250\n.BY2210 ANOP\n         DC    A(SPFL&NDX+X'80000000')  GET ADDRESS OF GENNED ORG\n.BY2250 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMMADD": {"ttr": 7688, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMMADD &DATAID=,               DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &STATS=,                 LOCK OPTION                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMADD               GLOBAL FOR LMMADD LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMADD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&STATS' EQ '').CNT6\n         AIF   ('&STATS'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMADD).BYP20\nLMMADD   DC    CL8'LMMADD'              ISPF KEYWORD\n&SPFLMMADD SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP90\n         AIF   ('&STATS'(1,1) NE '''').BYP90\nSPFB&NDX DC    CL8&STATS                STATS OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMADD                GET ADDRESS OF LMMADD KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP1100\n         AIF   ('&STATS'(1,1) EQ '''').BYP1110\n         LA    1,&STATS                 GET ADDRESS OF &STATS\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR STATS\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED STATS\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMADD)                GET ADDRESS OF LMMADD KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BY1600\n         AIF   ('&STATS'(1,1) EQ '''').BY1610\n         DC    A(&STATS+X'80000000')    GET ADDRESS OF STATS VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR STATS\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFB&NDX+X'80000000')  GET ADDRESS OF GENNED STATS\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMMDEL": {"ttr": 7937, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMMDEL &DATAID=,               DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMDEL               GLOBAL FOR LMMDEL LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMDEL).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMDEL).BYP20\nLMMDEL   DC    CL8'LMMDEL'              ISPF KEYWORD\n&SPFLMMDEL SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMDEL                GET ADDRESS OF LMMDEL KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         STM   14,0,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMDEL)                GET ADDRESS OF LMMDEL KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER+X'80000000')   GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX+X'80000000')  GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMMFIND": {"ttr": 7941, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMMFIND &DATAID=,              DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &LOCK=,                  LOCK OPTION                    *\n               &LRECL=,                 VARIABLE FOR LRECL             *\n               &RECFM=,                 VARIABLE FOR RECFM             *\n               &GROUP=,                 VARIABLE FOR GROUP             *\n               &STATS=,                 VARIABLE FOR STATS             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMFIND              GLOBAL FOR LMMFIND LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMFIND).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&LOCK' EQ '').CNT1\n         AIF   ('&LOCK'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&LRECL' EQ '').CNT3\n         AIF   ('&LRECL'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&RECFM' EQ '').CNT4\n         AIF   ('&RECFM'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&GROUP' EQ '').CNT5\n         AIF   ('&GROUP'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&STATS' EQ '').CNT6\n         AIF   ('&STATS'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMFIND).BYP20\nLMMFIND  DC    CL8'LMMFIND'             ISPF KEYWORD\n&SPFLMMFIND SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&LOCK' EQ '').BYP40\n         AIF   ('&LOCK'(1,1) NE '''').BYP40\nSPFB&NDX DC    CL8&LOCK                 LOCK OPTION\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BYP60\n         AIF   ('&LRECL'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&LRECL                LRECL VARIABLE NAME\n.BYP60   ANOP\n         AIF   ('&RECFM' EQ '').BYP70\n         AIF   ('&RECFM'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&RECFM                RECFM VARIABLE NAME\n.BYP70   ANOP\n         AIF   ('&GROUP' EQ '').BYP80\n         AIF   ('&GROUP'(1,1) NE '''').BYP80\nSPFE&NDX DC    CL8&GROUP                GROUP VARIABLE NAME\n.BYP80   ANOP\n         AIF   ('&STATS' EQ '').BYP90\n         AIF   ('&STATS'(1,1) NE '''').BYP90\nSPFF&NDX DC    CL8&STATS                STATS OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMFIND               GET ADDRESS OF LMMFIND KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&LOCK' EQ '').BYP1100\n         AIF   ('&LOCK'(1,1) EQ '''').BYP1110\n         LA    1,&LOCK                  GET ADDRESS OF &LOCK\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LOCK\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED LOCK\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&LRECL' EQ '').BYP1300\n         AIF   ('&LRECL'(1,1) EQ '''').BYP1310\n         LA    14,&LRECL                GET ADDRESS OF LRECL VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR LRECL\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED LRECL\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&RECFM' EQ '').BYP1400\n         AIF   ('&RECFM'(1,1) EQ '''').BYP1410\n         LA    15,&RECFM                GET ADDRESS OF RECFM VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR RECFM\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED RECFM\n.BYP1450 ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BYP1500\n         AIF   ('&GROUP'(1,1) EQ '''').BYP1510\n         LA    0,&GROUP                 GET ADDRESS OF GROUP VARIABLE\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR GROUP\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFE&NDX               GET ADDRESS OF GENNED GROUP\n.BYP1550 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP1600\n         AIF   ('&STATS'(1,1) EQ '''').BYP1610\n         LA    1,&STATS                 GET ADDRESS OF STATS KEYWORD\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR STATS\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFF&NDX               GET ADDRESS OF GENNED STATS\n.BYP1650 ANOP\n.*\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMFIND)               GET ADDRESS OF LMMFIND KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&LOCK' EQ '').BY1100\n         AIF   ('&LOCK'(1,1) EQ '''').BY1110\n         DC    A(&LOCK)                 GET ADDRESS OF &LOCK\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR LOCK\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFB&NDX)              GENNED LOCK\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BY1300\n         AIF   ('&LRECL'(1,1) EQ '''').BY1310\n         DC    A(&LRECL)                GET ADDRESS OF LRECL VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR LRECL\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED LRECL\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&RECFM' EQ '').BY1400\n         AIF   ('&RECFM'(1,1) EQ '''').BY1410\n         DC    A(&RECFM)                GET ADDRESS OF RECFM VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR RECFM\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX)              GET ADDRESS OF GENNED RECFM\n.BY1450 ANOP\n.*\n.*\n         AIF   ('&GROUP' EQ '').BY1500\n         AIF   ('&GROUP'(1,1) EQ '''').BY1510\n         DC    A(&GROUP)                GET ADDRESS OF GROUP VARIABLE\n         AGO   .BY1550\n.BY1500 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP\n         AGO   .BY1550\n.BY1510 ANOP\n         DC    A(SPFE&NDX)              GET ADDRESS OF GENNED GROUP\n.BY1550 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BY1600\n         AIF   ('&STATS'(1,1) EQ '''').BY1610\n         DC    A(&STATS+X'80000000')    GET ADDRESS OF STATS VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR STATS\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFF&NDX+X'80000000')  GET ADDRESS OF GENNED STATS\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMMLIST": {"ttr": 7948, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMMLIST &DATAID=,              DATAID NAME                    *\n               &OPTION=,                OPTION OF INPUT OR OUTPUT      *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &STATS=,                 VARIABLE FOR STATS             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMLIST              GLOBAL FOR LMMLIST LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMLIST).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&OPTION' EQ '').CNT1\n         AIF   ('&OPTION'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&STATS' EQ '').CNT3\n         AIF   ('&STATS'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMLIST).BYP20\nLMMLIST  DC    CL8'LMMLIST'             ISPF KEYWORD\n&SPFLMMLIST SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BYP40\n         AIF   ('&OPTION'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&OPTION               OPTION TYPE\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&MEMBER               MEMBER VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP60\n         AIF   ('&STATS'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&STATS                STATS VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMLIST               GET ADDRESS OF LMMLIST KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BYP1100\n         AIF   ('&OPTION'(1,1) EQ '''').BYP1110\n         LA    0,&OPTION                GET ADDRESS OF &OPTION\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR OPTION\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GENNED OPTION\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    1,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP1300\n         AIF   ('&STATS'(1,1) EQ '''').BYP1310\n         LA    14,&STATS                GET ADDRESS OF STATS VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR STATS\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED STATS\n.BYP1350 ANOP\n.*\n.*\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMLIST)               GET ADDRESS OF LMMLIST KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BY1100\n         AIF   ('&OPTION'(1,1) EQ '''').BY1110\n         DC    A(&OPTION)               GET ADDRESS OF &OPTION\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR OPTION\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GENNED OPTION\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BY1300\n         AIF   ('&STATS'(1,1) EQ '''').BY1310\n         DC    A(&STATS+X'80000000')    GET ADDRESS OF STATS VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR STATS\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX+X'80000000')  GET ADDRESS OF GENNED STATS\n.BY1350 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID OPTION - EXPECTED INPUT OR OUTPUT - FOUND ''*\n               &OPTION'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMMREN": {"ttr": 8197, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMMREN &DATAID=,               DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &NEWNAME=,               LOCK OPTION                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMREN               GLOBAL FOR LMMREN LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMREN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NEWNAME' EQ '').CNT6\n         AIF   ('&NEWNAME'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMREN).BYP20\nLMMREN   DC    CL8'LMMREN'              ISPF KEYWORD\n&SPFLMMREN SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&NEWNAME' EQ '').BYP90\n         AIF   ('&NEWNAME'(1,1) NE '''').BYP90\nSPFB&NDX DC    CL8&NEWNAME              NEWNAME OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMREN                GET ADDRESS OF LMMREN KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&NEWNAME' EQ '').BYP1100\n         AIF   ('&NEWNAME'(1,1) EQ '''').BYP1110\n         LA    1,&NEWNAME               GET ADDRESS OF &NEWNAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NEWNAME\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED NEWNAME\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMREN)                GET ADDRESS OF LMMREN KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&NEWNAME' EQ '').BY1600\n         AIF   ('&NEWNAME'(1,1) EQ '''').BY1610\n         DC    A(&NEWNAME+X'80000000')  GET ADDRESS OF NEWNAME VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR NEWNAME\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFB&NDX+X'80000000')  GET ADDRESS OF GENNED NEWNAME\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMMREP": {"ttr": 8202, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMMREP &DATAID=,               DATAID NAME                    *\n               &MEMBER=,                VARIABLE FOR MEMBER            *\n               &STATS=,                 LOCK OPTION                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMMREP               GLOBAL FOR LMMREP LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMMREP).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n.*\n         AIF   ('&MEMBER' EQ '').CNT2\n         AIF   ('&MEMBER'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&STATS' EQ '').CNT6\n         AIF   ('&STATS'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMMREP).BYP20\nLMMREP   DC    CL8'LMMREP'              ISPF KEYWORD\n&SPFLMMREP SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP50\n         AIF   ('&MEMBER'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&MEMBER               MEMBER NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP90\n         AIF   ('&STATS'(1,1) NE '''').BYP90\nSPFB&NDX DC    CL8&STATS                STATS OPTION\n.BYP90   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMMREP                GET ADDRESS OF LMMREP KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BYP1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BYP1210\n         LA    0,&MEMBER                GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MEMBER\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED MEMBER\n.BYP1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BYP1100\n         AIF   ('&STATS'(1,1) EQ '''').BYP1110\n         LA    1,&STATS                 GET ADDRESS OF &STATS\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR STATS\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    1,SPFB&NDX               GENNED STATS\n.BYP1150 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMMREP)                GET ADDRESS OF LMMREP KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MEMBER' EQ '').BY1200\n         AIF   ('&MEMBER'(1,1) EQ '''').BY1210\n         DC    A(&MEMBER)               GET ADDRESS OF MEMBER VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MEMBER\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED MEMBER\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&STATS' EQ '').BY1600\n         AIF   ('&STATS'(1,1) EQ '''').BY1610\n         DC    A(&STATS+X'80000000')    GET ADDRESS OF STATS VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR STATS\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFB&NDX+X'80000000')  GET ADDRESS OF GENNED STATS\n.BY1650 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMOPEN": {"ttr": 8452, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMOPEN &DATAID=,               DATAID NAME                    *\n               &OPTION=,                OPTION OF INPUT OR OUTPUT      *\n               &LRECL=,                 VARIABLE FOR LRECL             *\n               &RECFM=,                 VARIABLE FOR RECFM             *\n               &ORG=,                   VARIABLE FOR DSORG             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMOPEN               GLOBAL FOR LMOPEN LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMOPEN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&OPTION' EQ '').CNT1\n         AIF   ('&OPTION'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&LRECL' EQ '').CNT2\n         AIF   ('&LRECL'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&RECFM' EQ '').CNT3\n         AIF   ('&RECFM'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ORG' EQ '').CNT4\n         AIF   ('&ORG'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMOPEN).BYP20\nLMOPEN   DC    CL8'LMOPEN'              ISPF KEYWORD\n&SPFLMOPEN SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BYP40\n         AIF   ('&OPTION'(1,1) NE '''').BYP40\nSPFX&NDX DC    CL8&OPTION               OPTION KEYWORD\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BYP50\n         AIF   ('&LRECL'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&LRECL                LRECL VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&RECFM' EQ '').BYP60\n         AIF   ('&RECFM'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&RECFM                RECFM VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BYP70\n         AIF   ('&ORG'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&ORG                  ORG VARIABLE NAME\n.BYP70   ANOP\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMOPEN                GET ADDRESS OF LMOPEN KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BYP1100\n         AIF   ('&OPTION'(1,1) EQ '''').BYP1110\n         LA    0,&OPTION                GET ADDRESS OF OPTION\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR OPTION\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFX&NDX               GET ADDRESS OF GENNED OPTION\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BYP1200\n         AIF   ('&LRECL'(1,1) EQ '''').BYP1210\n         LA    1,&LRECL                 GET ADDRESS OF LRECL VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LRECL\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED LRECL\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&RECFM' EQ '').BYP1300\n         AIF   ('&RECFM'(1,1) EQ '''').BYP1310\n         LA    14,&RECFM                GET ADDRESS OF RECFM VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR RECFM\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED RECFM\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BYP1400\n         AIF   ('&ORG'(1,1) EQ '''').BYP1410\n         LA    15,&ORG                  GET ADDRESS OF ORG VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ORG\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED ORG\n.BYP1450 ANOP\n.*\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMOPEN)                GET ADDRESS OF LMOPEN KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&OPTION' EQ '').BY1100\n         AIF   ('&OPTION'(1,1) EQ '''').BY1110\n         DC    A(&OPTION)               GET ADDRESS OF OPTION\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR OPTION\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFX&NDX)              GET ADDRESS OF GENNED OPTION\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&LRECL' EQ '').BY1200\n         AIF   ('&LRECL'(1,1) EQ '''').BY1210\n         DC    A(&LRECL)                GET ADDRESS OF LRECL VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR LRECL\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED LRECL\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&RECFM' EQ '').BY1300\n         AIF   ('&RECFM'(1,1) EQ '''').BY1310\n         DC    A(&RECFM)                GET ADDRESS OF RECFM VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR RECFM\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED RECFM\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&ORG' EQ '').BY1400\n         AIF   ('&ORG'(1,1) EQ '''').BY1410\n         DC    A(&ORG+X'80000000')      GET ADDRESS OF ORG VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR ORG\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX+X'80000000')  GET ADDRESS OF GENNED ORG\n.BY1450 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID OPTION - EXPECTED INPUT OR OUTPUT - FOUND ''*\n               &OPTION'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMPUT": {"ttr": 8458, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMPUT &DATAID=,                DATAID NAME                    *\n               &MODE=,                  MODE                           *\n               &DATALOC=,                                              *\n               &DATALEN=,                                              *\n               &NOBSCAN=,                                              *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMPUT                GLOBAL FOR LMPUT LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMPUT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&MODE' EQ '').CNT2\n         AIF   ('&MODE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&DATALOC' EQ '').CNT3\n         AIF   ('&DATALOC'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&DATALEN' EQ '').CNT4\n         AIF   (T'&DATALEN EQ 'N').GENLIT\n.CNT4    ANOP\n         AIF   ('&NOBSCAN' EQ '').CNT5\n         AIF   ('&NOBSCAN'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMPUT).BYP20\nLMPUT    DC    CL8'LMPUT'               ISPF KEYWORD\n&SPFLMPUT SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BYP40\n         AIF   ('&MODE'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&MODE                 MODE TYPE\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BYP50\n         AIF   ('&DATALOC'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&DATALOC              DATALOC VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BYP60\n         AIF   (T'&DATALEN NE 'N').BYP60\nSPFC&NDX DC    F'&DATALEN'              DATALEN VALUE\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&NOBSCAN' EQ '').BYP70\n         AIF   ('&NOBSCAN'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&NOBSCAN              NOSCAN KEYWORD\n.BYP70   ANOP\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMPUT                 GET ADDRESS OF LMPUT KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BYP1100\n         AIF   ('&MODE'(1,1) EQ '''').BYP1110\n         LA    0,&MODE                  GET ADDRESS OF &MODE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR MODE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET GENNED MODE\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BYP1200\n         AIF   ('&DATALOC'(1,1) EQ '''').BYP1210\n         LA    1,&DATALOC               GET ADDRESS OF DATALOC VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR DATALOC\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED DATALOC\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BYP1300\n         AIF   (T'&DATALEN EQ 'N').BYP1310\n         LA    14,&DATALEN              GET ADDRESS OF DATALEN\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR DATALEN\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED DATALEN\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&NOBSCAN' EQ '').BYP1400\n         AIF   ('&NOBSCAN'(1,1) EQ '''').BYP1410\n         LA    15,&NOBSCAN              GET ADDRESS OF NOBSCAN\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR NOBSCAN\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED NOBSCAN\n.BYP1450 ANOP\n.*\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMPUT)                 GET ADDRESS OF LMPUT KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&MODE' EQ '').BY1100\n         AIF   ('&MODE'(1,1) EQ '''').BY1110\n         DC    A(&MODE)                 GET ADDRESS OF &MODE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR MODE\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET GENNED MODE\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&DATALOC' EQ '').BY1200\n         AIF   ('&DATALOC'(1,1) EQ '''').BY1210\n         DC    A(&DATALOC)              GET ADDRESS OF DATALOC VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATALOC\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED DATALOC\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&DATALEN' EQ '').BY1300\n         AIF   (T'&DATALEN EQ 'N').BY1310\n         DC    A(&DATALEN)              GET ADDRESS OF DATALEN\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATALEN\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED DATALEN\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&NOBSCAN' EQ '').BY1400\n         AIF   ('&NOBSCAN'(1,1) EQ '''').BY1410\n         DC    A(&NOBSCAN+X'80000000')  GET ADDRESS OF NOBSCAN VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR NOBSCAN\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX+X'80000000')  GET ADDRESS OF GENNED NOBSCAN\n.BY1450 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LMQUERY": {"ttr": 8708, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   LMQUERY &DATAID=,              DATAID NAME                    *\n               &PROJECT=,               PROJECT NAME                   *\n               &GROUP1=,                GROUP 1 NAME                   *\n               &GROUP2=,                GROUP 2 NAME                   *\n               &GROUP3=,                GROUP 3 NAME                   *\n               &GROUP4=,                GROUP 4 NAME                   *\n               &TYPE=,                  TYPE                           *\n               &DATASET=,               DATASET NAME                   *\n               &DDNAME=,                DDNAME                         *\n               &VOLUME=,                VOL SER                        *\n               &ENQ=,                   ENQ TYPE                       *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLMQUERY              GLOBAL FOR LMQUERY LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&DATAID' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLMQUERY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&DATAID'(1,1) EQ '''').GENLIT\n         AIF   ('&PROJECT' EQ '').CNT1\n         AIF   ('&PROJECT'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&GROUP1' EQ '').CNT2\n         AIF   ('&GROUP1'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&GROUP2' EQ '').CNT3\n         AIF   ('&GROUP2'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&GROUP3' EQ '').CNT4\n         AIF   ('&GROUP3'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&GROUP4' EQ '').CNT5\n         AIF   ('&GROUP4'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&TYPE' EQ '').CNT6\n         AIF   ('&TYPE'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&DATASET' EQ '').CNT7\n         AIF   ('&DATASET'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AIF   ('&DDNAME' EQ '').CNT8\n         AIF   ('&DDNAME'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&VOLUME' EQ '').CNT9\n         AIF   ('&VOLUME'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AIF   ('&ENQ' EQ '').CNT11\n         AIF   ('&ENQ'(1,1) EQ '''').GENLIT\n.CNT11   ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFLMQUERY).BYP20\nLMQUERY  DC    CL8'LMQUERY'             ISPF KEYWORD\n&SPFLMQUERY SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&DATAID' EQ '').BYP30\n         AIF   ('&DATAID'(1,1) NE '''').BYP30\nSPFZ&NDX DC    CL8&DATAID               GENERATED DATAID NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP40\n         AIF   ('&PROJECT'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&PROJECT              PROJECT VARIABLE NAME\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BYP50\n         AIF   ('&GROUP1'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&GROUP1               GROUP1 VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BYP60\n         AIF   ('&GROUP2'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&GROUP2               GROUP2 VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BYP70\n         AIF   ('&GROUP3'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&GROUP3               GROUP3 VARIABLE NAME\n.BYP70   ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BYP80\n         AIF   ('&GROUP4'(1,1) NE '''').BYP80\nSPFE&NDX DC    CL8&GROUP4               USERE VARIABLE NAME\n.BYP80   ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP90\n         AIF   ('&TYPE'(1,1) NE '''').BYP90\nSPFF&NDX DC    CL8&TYPE                 TYPE VARIABLE NAME\n.BYP90   ANOP\n.*\n.*\n         AIF   ('&DATASET' EQ '').BYP100\n         AIF   ('&DATASET'(1,1) NE '''').BYP100\nSPFG&NDX DC    CL8&DATASET              DATASET VARIABLE NAME\n.BYP100  ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BYP110\n         AIF   ('&DDNAME'(1,1) NE '''').BYP110\nSPFH&NDX DC    CL8&DDNAME               DDNAME VARIABLE NAME\n.BYP110  ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BYP120\n         AIF   ('&VOLUME'(1,1) NE '''').BYP120\nSPFI&NDX DC    CL8&VOLUME               VOLUME VARIABLE NAME\n.BYP120  ANOP\n.*\n.*\n         AIF   ('&ENQ' EQ '').BYP140\n         AIF   ('&ENQ'(1,1) NE '''').BYP140\nSPFK&NDX DC    CL8&ENQ                  ENQ VARIABLE NAME\n.BYP140  ANOP\n.*\n.*\n.*\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,LMQUERY               GET ADDRESS OF LMQUERY KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BYP1010\n         LA    15,&DATAID               GET ADDRESS OF DATAID NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFZ&NDX              GET ADDRESS OF GENERATED DATAID\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BYP1100\n         AIF   ('&PROJECT'(1,1) EQ '''').BYP1110\n         LA    0,&PROJECT               GET ADDRESS OF PROJECT VARIABLE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PROJECT\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED PROJECT\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BYP1200\n         AIF   ('&GROUP1'(1,1) EQ '''').BYP1210\n         LA    1,&GROUP1                GET ADDRESS OF GROUP1 VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR GROUP1\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED GROUP1\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BYP1300\n         AIF   ('&GROUP2'(1,1) EQ '''').BYP1310\n         LA    14,&GROUP2               GET ADDRESS OF GROUP2 VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR GROUP2\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED GROUP2\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BYP1400\n         AIF   ('&GROUP3'(1,1) EQ '''').BYP1410\n         LA    15,&GROUP3               GET ADDRESS OF GROUP3 VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR GROUP3\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED GROUP3\n.BYP1450 ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BYP1500\n         AIF   ('&GROUP4'(1,1) EQ '''').BYP1510\n         LA    0,&GROUP4                GET ADDRESS OF GROUP4 VARIABLE\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR GROUP4\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFE&NDX               GET ADDRESS OF GENNED GROUP4\n.BYP1550 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BYP1600\n         AIF   ('&TYPE'(1,1) EQ '''').BYP1610\n         LA    1,&TYPE                  ADDRESS OF TYPE VARIABLE\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR TYPE\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFF&NDX               GET ADDRESS OF GENNED TYPE\n.BYP1650 ANOP\n.*\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&DATASET' EQ '').BYP1700\n         AIF   ('&DATASET'(1,1) EQ '''').BYP1710\n         LA    14,&DATASET              ADDRESS OF DATASET VARIABLE\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR DATASET\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFG&NDX              GET ADDRESS OF GENNED DATASET\n.BYP1750 ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BYP1800\n         AIF   ('&DDNAME'(1,1) EQ '''').BYP1810\n         LA    15,&DDNAME               ADDRESS OF DDNAME VARIABLE\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR DDNAME\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENNED DDNAME\n.BYP1850 ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BYP1900\n         AIF   ('&VOLUME'(1,1) EQ '''').BYP1910\n         LA    0,&VOLUME                ADDRESS OF VOLUME VARIABLE\n         AGO   .BYP1950\n.BYP1900 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VOLUME\n         AGO   .BYP1950\n.BYP1910 ANOP\n         LA    0,SPFI&NDX               GET ADDRESS OF GENNED VOLUME\n.BYP1950 ANOP\n.*\n.*\n         LA    1,SPFNULLC               GET DUMMY PARM 1\n         STM   14,1,&TEMP+32            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         LA    14,SPFNULLC              GET DUMMY PARM 2\n         LA    15,SPFNULLC              GET DUMMY PARM 3\n         LA    0,SPFNULLC               GET DUMMY PARM 4\n.*\n.*\n         AIF   ('&ENQ' EQ '').BYP2100\n         AIF   ('&ENQ'(1,1) EQ '''').BYP2110\n         LA    1,&ENQ                   ADDRESS OF ENQ VARIABLE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ENQ\n         AGO   .BYP2150\n.BYP2110 ANOP\n         LA    1,SPFK&NDX               GET ADDRESS OF GENNED ENQ\n.BYP2150 ANOP\n.*\n.*\n         STM   14,1,&TEMP+48            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+60,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 16).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 16).BYPVARS\n&SPFVARS SETA  16\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(LMQUERY)               GET ADDRESS OF LMQUERY KEYWORD\n.*\n.*\n         AIF   ('&DATAID'(1,1) EQ '''').BY1010\n         DC    A(&DATAID)               GET ADDRESS OF DATAID NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFZ&NDX)              GET ADDRESS OF GENERATED DATAID\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&PROJECT' EQ '').BY1100\n         AIF   ('&PROJECT'(1,1) EQ '''').BY1110\n         DC    A(&PROJECT)              GET ADDRESS OF PROJECT VARIABLE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR PROJECT\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED PROJECT\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&GROUP1' EQ '').BY1200\n         AIF   ('&GROUP1'(1,1) EQ '''').BY1210\n         DC    A(&GROUP1)               GET ADDRESS OF GROUP1 VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP1\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED GROUP1\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&GROUP2' EQ '').BY1300\n         AIF   ('&GROUP2'(1,1) EQ '''').BY1310\n         DC    A(&GROUP2)               GET ADDRESS OF GROUP2 VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP2\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED GROUP2\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&GROUP3' EQ '').BY1400\n         AIF   ('&GROUP3'(1,1) EQ '''').BY1410\n         DC    A(&GROUP3)               GET ADDRESS OF GROUP3 VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP3\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX)              GET ADDRESS OF GENNED GROUP3\n.BY1450 ANOP\n.*\n.*\n         AIF   ('&GROUP4' EQ '').BY1500\n         AIF   ('&GROUP4'(1,1) EQ '''').BY1510\n         DC    A(&GROUP4)               GET ADDRESS OF GROUP4 VARIABLE\n         AGO   .BY1550\n.BY1500 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR GROUP4\n         AGO   .BY1550\n.BY1510 ANOP\n         DC    A(SPFE&NDX)              GET ADDRESS OF GENNED GROUP4\n.BY1550 ANOP\n.*\n.*\n         AIF   ('&TYPE' EQ '').BY1600\n         AIF   ('&TYPE'(1,1) EQ '''').BY1610\n         DC    A(&TYPE)                 ADDRESS OF TYPE VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR TYPE\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFF&NDX)              GET ADDRESS OF GENNED TYPE\n.BY1650 ANOP\n.*\n.*\n         AIF   ('&DATASET' EQ '').BY1700\n         AIF   ('&DATASET'(1,1) EQ '''').BY1710\n         DC    A(&DATASET)              ADDRESS OF DATASET VARIABLE\n         AGO   .BY1750\n.BY1700 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DATASET\n         AGO   .BY1750\n.BY1710 ANOP\n         DC    A(SPFG&NDX)              GET ADDRESS OF GENNED DATASET\n.BY1750 ANOP\n.*\n.*\n         AIF   ('&DDNAME' EQ '').BY1800\n         AIF   ('&DDNAME'(1,1) EQ '''').BY1810\n         DC    A(&DDNAME)               ADDRESS OF DDNAME VARIABLE\n         AGO   .BY1850\n.BY1800 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR DDNAME\n         AGO   .BY1850\n.BY1810 ANOP\n         DC    A(SPFH&NDX)              GET ADDRESS OF GENNED DDNAME\n.BY1850 ANOP\n.*\n.*\n         AIF   ('&VOLUME' EQ '').BY1900\n         AIF   ('&VOLUME'(1,1) EQ '''').BY1910\n         DC    A(&VOLUME)               ADDRESS OF VOLUME VARIABLE\n         AGO   .BY1950\n.BY1900 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR VOLUME\n         AGO   .BY1950\n.BY1910 ANOP\n         DC    A(SPFI&NDX)              GET ADDRESS OF GENNED VOLUME\n.BY1950 ANOP\n.*\n.*\n         DC    A(SPFNULLC)              DUMMY PARM 1\n         DC    A(SPFNULLC)              DUMMY PARM 2\n         DC    A(SPFNULLC)              DUMMY PARM 3\n         DC    A(SPFNULLC)              DUMMY PARM 4\n.*\n.*\n         AIF   ('&ENQ' EQ '').BY2100\n         AIF   ('&ENQ'(1,1) EQ '''').BY2110\n         DC    A(&ENQ+X'80000000')      ADDRESS OF ENQ VARIABLE\n         AGO   .BY2150\n.BY2100 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR ENQ\n         AGO   .BY2150\n.BY2110 ANOP\n         DC    A(SPFK&NDX+X'80000000')  GET ADDRESS OF GENNED ENQ\n.BY2150 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'DATAID NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOG": {"ttr": 8961, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    LOG   &P1,&MSG=,               MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFLOG,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @LOG &P1,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MSG' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFLOG).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFLOG).BYP20\nLOG      DC    CL8'LOG'                 ISPF KEYWORD\n&SPFLOG SETB   1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&MSG                  GENERATED MEMBER NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,LOG                   GET ADDRESS OF LOG KEYWORD\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    15,&MSG                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(LOG)                   BROWSE LITERAL\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG+X'80000000')      ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'MSG NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SELECT": {"ttr": 8964, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SELECT &BUFLEN,                BUFFER LENGTH (POS)            *\n               &BUF,                    BUFFER ADDRESS (POS)           *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFSELECT               WAS A SELECT GENERATED\n         GBLB  &SPFDEBUG                DEBUG MODE SWITCH\n         GBLB  &SPFVAR                  WAS ISPF PARMS ISSUED\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS REQUIRED\n         GBLA  &SPFVARC                 NUMBER OF FULLWORDS USED\n         LCLC  &NDX                     REDEFINE MACRO INDEX SYSNDX\n         LCLC  &P1                      INTERNAL- FIRST CALL PARM\n         LCLC  &P2                      INTERNAL- SECOND CALL PARM\n         LCLA  &LEN                     INTERNAL- LENGTH OF BUFFER GEN\n.*\n.**********************************************************************\n.*       SET INTERNAL GLOBALS\n.**********************************************************************\n.*\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&BUF' EQ '').ERR1\n         AIF   ('&BUF'(1,1) EQ '''' AND '&BUFLEN' NE '').WARN\n.CONT    AIF   ('&MF(1)' NE 'I' AND '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFSELECT).GENLIT\n         AIF   ('&BUFLEN' EQ '').CNT1\n         AIF   (T'&BUFLEN EQ 'N' AND '&BUFLEN'(1,1) NE '(').GENLIT\n.CNT1    AIF   ('&BUF' EQ '').CNT2\n         AIF   ('&BUF'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFSELECT).BYP20\nSELECT   DC    CL8'SELECT'              ISPF KEYWORD\n&SPFSELECT SETB 1\n.BYP20   ANOP\n         AIF   ('&BUFLEN' EQ '').BYP40\n         AIF   (T'&BUFLEN NE 'N' OR '&BUFLEN'(1,1) EQ '(').BYP40\n         AIF   ('&BUF'(1,1) EQ '''').BYP40\nSPFL&NDX DC    F'&BUFLEN'               BUFFER LENGTH GENERATED\n.BYP40   ANOP\n         AIF   ('&BUF'(1,1) NE '''').BYP50\n         CNOP  0,4\n&LEN     SETA  K'&BUF+3\n&LEN     SETA  &LEN/4*4\nSPFB&NDX DC    CL&LEN&BUF               GENERATED SELECT BUFFER\nSPFL&NDX DC    F'&LEN'                  GENERATED SELECT LENGTH\n.BYP50   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&BUFLEN' EQ '').BYP100\n         AIF   ('&BUF'(1,1) EQ '''').BYP100\n         AIF   (T'&BUFLEN EQ 'N' AND '&BUFLEN'(1,1) NE '(').BYP100\n&P1      SETC  '&BUFLEN'\n         AGO   .BYP120\n.BYP100  ANOP\n&P1      SETC  'SPFL&NDX'\n.BYP120  ANOP\n         AIF   ('&BUF'(1,1) EQ '(').BYP130\n         AIF   ('&BUF'(1,1) NE '''').BYP130\n&P2      SETC  'SPFB&NDX'\n         AGO   .BYP150\n.BYP130  ANOP\n&P2      SETC  '&BUF'\n.BYP150  ANOP\n         L     15,&LOAD                 LOAD ADDRESS OF ISPLINK\n         AIF   ('&MF(1)' EQ 'E' AND '&MF(2)' EQ '').CALL2\n         CALL  (15),(SELECT,&P1,&P2),VL,MF=&MF\n         AGO   .VARIT\n.CALL2   ANOP\n         CALL  (15),(SELECT,&P1,&P2),VL,MF=(E,SPFPARMS)\n.VARIT   AIF   (NOT &SPFVAR).BYVAR      WAS ISPF PARMS ISSUED\n         AIF   (&SPFVARC LT 3).ERRVAR   WAS PARMLIST TOO LITTLE\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS  SET PARMLIST SIZE TO AT LEAST\n&SPFVARS SETA  3                        3 FULLWORDS\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'BUFFER FOR SELECT COMMAND IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR5    ANOP\n         MNOTE 16,'SELECT BUFFER MAY BE REGISTER ONLY WHEN MF=E'\n         MEXIT\n.WARN    ANOP\n         MNOTE 4,'BUFFER LENGTH IS IGNORED FOR LITERAL BUFFER'\n         AGO   .CONT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETMSG": {"ttr": 8967, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    SETMSG &P1,&MSG=,              MEMBER NAME                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFSETMSG,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @SETMSG &P1,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P1' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MSG' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFSETMSG).GENLIT\n         AIF   ('&MSG' EQ '').CNT1\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT1    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFSETMSG).BYP20\nSETMSG   DC    CL8'SETMSG'              ISPF KEYWORD\n&SPFSETMSG SETB 1\n.BYP20   ANOP\n         AIF   ('&MSG' EQ '').BYP40\n         AIF   ('&MSG'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&MSG                  GENERATED MEMBER NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,SETMSG                GET ADDRESS OF SETMSG KEYWORD\n         AIF   ('&MSG' EQ '').BYP100\n         AIF   ('&MSG'(1,1) EQ '''').BYP110\n         LA    15,&MSG                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFS&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(SETMSG)                BROWSE LITERAL\n         AIF   ('&MSG' EQ '').BYP200\n         AIF   ('&MSG'(1,1) EQ '''').BYP210\n         DC    A(&MSG+X'80000000')      ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR MEMBER\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'MSG NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBADD": {"ttr": 8970, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBADD &TABLE,                  TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &SAVE=,                  SAVE NAME-LIST                 *\n               &ORDER=,                 ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBADD,&SPFDEBUG,&SPFVAR,&SPFORDER,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBADD &TABLE,&P2,&P3,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n         AIF   ('&ORDER' EQ '').K1\n         AIF   ('&ORDER'(1,1) NE '''' OR '&ORDER' EQ '''ORDER''').K1\n         MNOTE 4,'WARNING - ORDER KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBADD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&ORDER' EQ '').CNT3\n         AIF   ('&ORDER'(1,1) EQ '''').GENLIT\n.CNT3    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBADD).BYP20\nTBADD    DC    CL8'TBADD'               ISPF KEYWORD\n&SPFTBADD SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   ('&ORDER'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&ORDER                ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBADD                 GET ADDRESS OF TBADD KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         AIF   ('&ORDER'(1,1) EQ '''').BYP175\n         LA    1,&ORDER                 GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    1,SPFX&NDX               GET GENNED ORDER KEYWORD\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBADD)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         AIF   ('&ORDER'(1,1) EQ '''').BYP275\n         DC    A(&ORDER+X'80000000')    ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED ORDER KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'EXPECTED ORDER KEYWORD - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBBOTTOM": {"ttr": 9217, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBBOTTOM &TABLE,               TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &SAVE=,                  SAVE NAME-LIST                 *\n               &ROWID=,                 ROW ID NAME                    *\n               &NOREAD=,                NOREAD KEYWORD                 *\n               &POSITION=,              POSITION NUMBER                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBBOTTOM,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBBOTTO &TABLE,&P2,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' EQ '').K1\n         AIF   ('&NOREAD'(1,1) NE '''' OR '&NOREAD' EQ '''NOREAD''').K1\n         MNOTE 4,'WARNING - NOREAD KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBBOTTOM).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&ROWID' EQ '').CNT3\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&NOREAD' EQ '').CNT3A\n         AIF   ('&NOREAD'(1,1) EQ '''').GENLIT\n.CNT3A   ANOP\n         AIF   ('&POSITION' EQ '').CNT4\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&POSITION' EQ '').CNT5\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBBOTTOM).BYP20\nTBBOTTOM DC    CL8'TBBOTTOM'            ISPF KEYWORD\n&SPFTBBOTTOM SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&SAVE' EQ '').BYP40\n         AIF   ('&SAVE'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SAVE                 GENERATED SAVE NAME-LIST\n.BYP40   ANOP\n         AIF   ('&ROWID' EQ '').BYP50\n         AIF   ('&ROWID'(1,1) NE '''').BYP50\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP50   ANOP\n         AIF   ('&NOREAD' EQ '').BYP60\n         AIF   ('&NOREAD'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&NOREAD               GENERATED NOREAD KEYWORD\n.BYP60   ANOP\n         AIF   ('&POSITION' EQ '').BYP70\n         AIF   ('&POSITION'(1,1) NE '''').BYP70\nSPFP&NDX DC    CL8&POSITION             GENERATED POSITION VAR\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBBOTTOM              GET ADDRESS OF TBBOTTOM KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP1100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP1110\n         LA    0,&SAVE                  GET ADDRESS OF SAVE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SAVE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n.BYP1150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1210\n         LA    1,&ROWID                 GET ADDRESS OF ROWID NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWID\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFR&NDX               GET ADDRESS OF GENERATED ROWID\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NOREAD' EQ '').BYP1300\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP1305\n         LA    14,&NOREAD               GET ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR NOREAD\n         AGO   .BYP1350\n.BYP1305 ANOP\n         LA    14,SPFX&NDX              GENNED KEYWORD FOR NOREAD\n.BYP1350 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1400\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1410\n         LA    15,&POSITION             GET ADDRESS OF POSITION NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR POSITION\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED POS\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBBOTTOM)              TBBOTTOM LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&SAVE' EQ '').BYP2100\n         AIF   ('&SAVE'(1,1) EQ '''').BYP2110\n         DC    A(&SAVE)                 ADDRESS OF SAVE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SAVE NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SAVE\n.BYP2150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2210\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2250 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2300\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP2305\n         DC    A(&NOREAD)               ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n         AGO   .BYP2350\n.BYP2305 ANOP\n         DC    A(SPFX&NDX)              GENNED KEYWORD FOR NOREAD\n.BYP2350 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2400\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2410\n         DC    A(&POSITION+X'80000000') ADDRESS OF POSITION NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR POSITION\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFP&NDX+X'80000000')  ADDRESS OF GENERATED POSITION\n.BYP2450 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NOREAD KEYWORD EXPECTED - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBCLOSE": {"ttr": 9223, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   TBCLOSE &TABLE,                TABLE NAME                     *\n               &NEWCOPY,                NEWCOPY OR REPLCOPY            *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &NAME=,                  NAME FOR SAVE                  *\n               &PAD=,                   PAD AMOUNT                     *\n               &LIBRARY=,               LIBRARY                        *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBCLOSE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEWCOPY,&SPFREPLCOPY\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBCLOSE &TABLE,&NEWCOPY,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEWCOPY' NE '' AND '&NEWCOPY' NE 'NEWCOPY' AND       *\n               '&NEWCOPY' NE 'REPLCOPY').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBCLOSE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NEWCOPY' EQ 'NEWCOPY' AND NOT &SPFNEWCOPY).GENLIT\n         AIF   ('&NEWCOPY' EQ 'REPLCOPY' AND NOT &SPFREPLCOPY).GENLIT\n         AIF   ('&NAME' EQ '').CNT3\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   (T'&PAD EQ 'N').GENLIT\n         AIF   ('&LIBRARY' EQ '').CNT5\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBCLOSE).BYP20\nTBCLOSE  DC    CL8'TBCLOSE'             ISPF KEYWORD\n&SPFTBCLOSE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&NEWCOPY' EQ '').BYP40\n         AIF   ('&NEWCOPY' NE 'NEWCOPY' OR &SPFNEWCOPY).BYP35\nNEWCOPY  DC    CL8'NEWCOPY'             ISPF KEYWORD\n&SPFNEWCOPY SETB 1\n.BYP35   ANOP\n         AIF   ('&NEWCOPY' NE 'REPLCOPY' OR &SPFREPLCOPY).BYP40\nREPLCOPY DC    CL8'REPLCOPY'            ISPF KEYWORD\n&SPFREPLCOPY SETB 1\n.BYP40   ANOP\n         AIF   ('&NAME' EQ '').BYP50\n         AIF   ('&NAME'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&NAME                 GENERATED NAME NAME\n.BYP50   ANOP\n         AIF   (T'&PAD NE 'N').BYP60\nSPFP&NDX DC    F'&PAD'                  GENERATED PAD AMOUNT\n.BYP60   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP70\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP70\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBCLOSE               GET ADDRESS OF TBCLOSE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP1100\n         LA    0,&NEWCOPY               GET ADDRESS OF COPY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR COPY\n.BYP1150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP1200\n         AIF   ('&NAME'(1,1) EQ '''').BYP1210\n         LA    1,&NAME                  GET ADDRESS OF NAME NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED NAME\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PAD' EQ '').BYP1300\n         AIF   (T'&PAD EQ 'N').BYP1310\n         LA    14,&PAD                  GET ADDRESS OF PAD AMOUNT\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PAD AMT\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFP&NDX              GET ADDRESS OF GENERATED PAD\n.BYP1350 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP1400\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP1410\n         LA    15,&LIBRARY              GET ADDRESS OF LIBRARY NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR LIBRARY\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENERATED LIB\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBCLOSE)               TBCLOSE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP2100\n         DC    A(&NEWCOPY)              ADDRESS OF COPY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR COPY NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP2200\n         AIF   ('&NAME'(1,1) EQ '''').BYP2210\n         DC    A(&NAME)                 ADDRESS OF NAME NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED NAME\n.BYP2250 ANOP\n.*\n         AIF   ('&PAD' EQ '').BYP2300\n         AIF   (T'&PAD EQ 'N').BYP2310\n         DC    A(&PAD)                  ADDRESS OF PAD AMOUNT\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PAD AMOUNT\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PAD AMT\n.BYP2350 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2400\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2410\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n.BYP2450 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEWCOPY OR REPLCOPY EXPECTED AS KEYWORD - FOUND ''&N*\n               EWCOPY'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBCREATE": {"ttr": 9473, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LBL     TBCREATE &TABLE,               TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &KEYS=,                  KEYS NAME LIST                 *\n               &NAMES=,                 NAMES NAME LIST                *\n               &WRITE=,                 WRITE NOWRITE KEYWORD          *\n               &REPLACE=,               REPLACE KEYWORD                *\n               &LIBRARY=,               LIBRARY                        *\n               &SHARE=,                 SHARE STATUS                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBCREATE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBCREAT &TABLE,&P2,&P3,&P4,&P5,&P6,&P7,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LBL' EQ '').BYP10\n&LBL     DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&REPLACE' EQ '').K1\n         AIF   ('&REPLACE'(1,1) NE '''').K1\n         AIF   ('&REPLACE' EQ '''REPLACE''').K1\n         MNOTE 4,'WARNING - REPLACE KEYWORD EXPECTED IN QUOTES'\n.K1      ANOP\n         AIF   ('&SHARE' EQ '').K2\n         AIF   ('&SHARE'(1,1) NE '''' OR '&SHARE' EQ '''SHARE''').K2\n         MNOTE 4,'WARNING - SHARE KEYWORD EXPECTED IN QUOTES'\n.K2      ANOP\n         AIF   ('&WRITE' EQ '').K3\n         AIF   ('&WRITE'(1,1) NE '''').K3\n         AIF   ('&WRITE' EQ '''WRITE''').K3\n         AIF   ('&WRITE' EQ '''NOWRITE''').K3\n         MNOTE 4,'WARNING - WRITE KEYWORD EXPECTED WRITE OR NOWRITE IN *\n               QUOTES'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBCREATE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&KEYS' EQ '').CNT2\n         AIF   ('&KEYS'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NAMES' EQ '').CNT3\n         AIF   ('&NAMES'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&WRITE' EQ '').CNT4\n         AIF   ('&WRITE'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&REPLACE' EQ '').CNT5\n         AIF   ('&REPLACE'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&LIBRARY' EQ '').CNT6\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&SHARE' EQ '').CNT7\n         AIF   ('&SHARE'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBCREATE).BYP20\nTBCREATE DC    CL8'TBCREATE'            ISPF KEYWORD\n&SPFTBCREATE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&KEYS' EQ '').BYP40\n         AIF   ('&KEYS'(1,1) NE '''').BYP40\nSPFK&NDX DC    C&KEYS                   GENERATED KEYS NAME LIST\n.BYP40   ANOP\n         AIF   ('&NAMES' EQ '').BYP50\n         AIF   ('&NAMES'(1,1) NE '''').BYP50\nSPFN&NDX DC    C&NAMES                  GENERATED NAMELIST\n.BYP50   ANOP\n         AIF   ('&WRITE' EQ '').BYP60\n         AIF   ('&WRITE'(1,1) NE '''').BYP60\nSPFW&NDX DC    CL8&WRITE                GENERATED WRITE KEYWORD\n.BYP60   ANOP\n         AIF   ('&REPLACE' EQ '').BYP70\n         AIF   ('&REPLACE'(1,1) NE '''').BYP70\nSPFR&NDX DC    CL8&REPLACE              GENERATED REPLACE KEYWORD\n.BYP70   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP80\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP80\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP80   ANOP\n         AIF   ('&SHARE' EQ '').BYP90\n         AIF   ('&SHARE'(1,1) NE '''').BYP90\nSPFS&NDX DC    CL8&SHARE                GENERATED SHARE KEYWORD\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBCREATE              GET ADDRESS OF TBCREATE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP1100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP1110\n         LA    0,&KEYS                  GET ADDRESS OF KEYS NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR KEYS\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFK&NDX               GET ADDRESS OF GENERATED KEYS\n.BYP1150 ANOP\n.*\n         AIF   ('&NAMES' EQ '').BYP1200\n         AIF   ('&NAMES'(1,1) EQ '''').BYP1210\n         LA    1,&NAMES                 GET ADDRESS OF NAME NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFN&NDX               GET ADDRESS OF GENERATED NAME\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&WRITE' EQ '').BYP1300\n         AIF   ('&WRITE'(1,1) EQ '''').BYP1305\n         LA    14,&WRITE                GET ADDRESS OF WRITE NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR WRITE\n         AGO   .BYP1350\n.BYP1305 ANOP\n         LA    14,SPFW&NDX              GET GENNED WRITE KEYWORD\n.BYP1350 ANOP\n.*\n         AIF   ('&REPLACE' EQ '').BYP1400\n         AIF   ('&REPLACE'(1,1) EQ '''').BYP1405\n         LA    15,&REPLACE              GET ADDRESS OF REPLACE KEYWORD\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR REPLACE\n         AGO   .BYP1450\n.BYP1405 ANOP\n         LA    15,SPFR&NDX              GET GENNED REPLACE KEYWORD\n.BYP1450 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP1500\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP1510\n         LA    0,&LIBRARY               GET ADDRESS OF LIB NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIB\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n.BYP1550 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP1600\n         AIF   ('&SHARE'(1,1) EQ '''').BYP1605\n         LA    1,&SHARE                 GET ADDRESS OF SHARE NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR SHARE\n         AGO   .BYP1650\n.BYP1605 ANOP\n         LA    1,SPFS&NDX               GET GENNED SHARE KEYWORD\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBCREATE)              TBCREATE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP2100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP2110\n         DC    A(&KEYS)                 ADDRESS OF KEYS NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEYS NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFK&NDX)              ADDRESS OF GENERATED KEYS\n.BYP2150 ANOP\n.*\n         AIF   ('&NAMES' EQ '').BYP2200\n         AIF   ('&NAMES'(1,1) EQ '''').BYP2210\n         DC    A(&NAMES)                ADDRESS OF NAME LIST\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NAME\n.BYP2250 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP2300\n         AIF   ('&WRITE'(1,1) EQ '''').BYP2305\n         DC    A(&WRITE)                ADDRESS OF WRITE KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR WRITE\n         AGO   .BYP2350\n.BYP2305 ANOP\n         DC    A(SPFW&NDX)              GENNED WRITE KEYWORD\n.BYP2350 ANOP\n.*\n         AIF   ('&REPLACE' EQ '').BYP2400\n         AIF   ('&REPLACE'(1,1) EQ '''').BYP2405\n         DC    A(&REPLACE)              ADDRESS OF REPLACE KEYWORD\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR REPLACE\n         AGO   .BYP2450\n.BYP2405 ANOP\n         DC    A(SPFR&NDX)              GENNED REPLACE KEYWORD\n.BYP2450 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2500\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2510\n         DC    A(&LIBRARY)              ADDRESS OF LIB NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIB\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIB\n.BYP2550 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP2800\n         AIF   ('&SHARE'(1,1) EQ '''').BYP2805\n         DC    A(&SHARE+X'80000000')    ADDRESS OF SHARE KEYWORD\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SHARE\n         AGO   .BYP2850\n.BYP2805 ANOP\n         DC    A(SPFS&NDX+X'80000000')  GENNED SHARE KEYWORD\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'REPLACE KEYWORD EXPECTED - FOUND ''&REP'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'SHARE KEYWORD EXPECTED - FOUND ''&SHARE'''\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'WRITE/NOWRITE KEYWORD EXPECTED - FOUND ''&WRITE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBDELETE": {"ttr": 9480, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBDELETE &TABLE,               TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBDELETE,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBDELETE).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBDELETE).BYP20\nTBDELETE DC    CL8'TBDELETE'            ISPF KEYWORD\n&SPFTBDELETE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBDELETE              GET ADDRESS OF TBDELETE KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBDELETE)              BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBDISPL": {"ttr": 9483, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBDISPL &TABLE,                TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &P8,                                                    *\n               &P9,                                                    *\n               &PANEL=,                 PANEL NAME                     *\n               &MSG=,                   MESSAGE ID                     *\n               &CURSOR=,                CURSOR POSITION                *\n               &CSRROW=,                TABLE ROW NUMBER               *\n               &CSRPOS=,                CSR POSITION                   *\n               &AUTOSEL=,               AUTOSEL INDICATOR              *\n               &POSITION=,              ROW POINTED TO BY CRP          *\n               &ROWID=,                 SPECIAL ROWN NUMBER            *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBDISPL,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBDISPL &TABLE,&P2,&P3,&P4,&P5,&P6,&P7,                      *\n               &P8,&P9,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AIF   ('&P8' NE '').LVLERR\n         AIF   ('&P9' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&AUTOSEL' EQ '').K3\n         AIF   ('&AUTOSEL'(1,1) NE '''').K3\n         AIF   ('&AUTOSEL' EQ '''YES''').K3\n         AIF   ('&AUTOSEL' EQ '''NO''').K3\n         MNOTE 4,'WARNING - AUTOSEL KEYWORD EXPECTED TO BE YES OR NO'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBDISPL).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&PANEL' EQ '').CNT2\n         AIF   ('&PANEL'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&MSG' EQ '').CNT3\n         AIF   ('&MSG'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&CURSOR' EQ '').CNT4\n         AIF   ('&CURSOR'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&CSRROW' EQ '').CNT5\n         AIF   (T'&CSRROW EQ 'N').GENLIT\n.CNT5    ANOP\n         AIF   ('&CSRPOS' EQ '').CNT6\n         AIF   (T'&CSRPOS EQ 'N').GENLIT\n.CNT6    ANOP\n         AIF   ('&AUTOSEL' EQ '').CNT7\n         AIF   ('&AUTOSEL'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AIF   ('&POSITION' EQ '').CNT8\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&ROWID' EQ '').CNT9\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBDISPL).BYP20\nTBDISPL  DC    CL8'TBDISPL'             ISPF KEYWORD\n&SPFTBDISPL SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&PANEL' EQ '').BYP40\n         AIF   ('&PANEL'(1,1) NE '''').BYP40\nSPFP&NDX DC    CL8&PANEL                GENERATED PANEL NAME\n.BYP40   ANOP\n         AIF   ('&MSG' EQ '').BYP50\n         AIF   ('&MSG'(1,1) NE '''').BYP50\nSPFM&NDX DC    CL8&MSG                  GENERATED MSG NAME\n.BYP50   ANOP\n         AIF   ('&CURSOR' EQ '').BYP60\n         AIF   ('&CURSOR'(1,1) NE '''').BYP60\nSPFF&NDX DC    CL8&CURSOR               GENERATED CURSOR NAME\n.BYP60   ANOP\n         AIF   ('&CSRROW' EQ '').BYP70\n         AIF   (T'&CSRROW NE 'N').BYP70\nSPFR&NDX DC    F'&CSRROW'               GENERATED ROW NUMBER\n.BYP70   ANOP\n         AIF   ('&CSRPOS' EQ '').BYP80\n         AIF   (T'&CSRPOS NE 'N').BYP80\nSPFC&NDX DC    F'&CSRPOS'               GENERATED CSRPOS\n.BYP80   ANOP\n         AIF   ('&AUTOSEL' EQ '').BYP90\n         AIF   ('&AUTOSEL'(1,1) NE '''').BYP90\nSPFX&NDX DC    CL8&AUTOSEL              ISPF KEYWORD\n.BYP90   ANOP\n         AIF   ('&POSITION' EQ '').BYP100\n         AIF   ('&POSITION'(1,1) NE '''').BYP100\nSPFW&NDX DC    CL8&POSITION             GENERATED POSITION VALUE\n.BYP100  ANOP\n         AIF   ('&ROWID' EQ '').BYP110\n         AIF   ('&ROWID'(1,1) NE '''').BYP110\nSPFI&NDX DC    CL8&ROWID                GENERATED ROWID VALUE\n.BYP110  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF CURSOR\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBDISPL               GET ADDRESS OF TBDISPL KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&PANEL' EQ '').BYP1100\n         AIF   ('&PANEL'(1,1) EQ '''').BYP1110\n         LA    0,&PANEL                 GET ADDRESS OF PANEL NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PANEL\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFP&NDX               GET ADDRESS OF GENERATED PANEL\n.BYP1150 ANOP\n.*\n         AIF   ('&MSG' EQ '').BYP1200\n         AIF   ('&MSG'(1,1) EQ '''').BYP1210\n         LA    1,&MSG                   GET ADDRESS OF MSG NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR MSG\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFM&NDX               GET ADDRESS OF GENERATED MSG\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&CURSOR' EQ '').BYP1300\n         AIF   ('&CURSOR'(1,1) EQ '''').BYP1310\n         LA    14,&CURSOR               GET ADDRESS OF CURSOR NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR CURSOR\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFF&NDX              GET ADDRESS OF GENERATED CURSOR\n.BYP1350 ANOP\n.*\n         AIF   ('&CSRROW' EQ '').BYP1400\n         AIF   (T'&CSRROW EQ 'N').BYP1410\n         LA    15,&CSRROW               GET ADDRESS OF ROW NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&CSRPOS' EQ '').BYP1500\n         AIF   (T'&CSRPOS EQ 'N').BYP1510\n         LA    0,&CSRPOS                GET ADDRESS OF CSRPOS NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CSRPOS\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFC&NDX               GET ADDRESS OF GENERATED CSRPOS\n.BYP1550 ANOP\n.*\n         AIF   ('&AUTOSEL' EQ '').BYP1600\n         AIF   ('&AUTOSEL'(1,1) EQ '''').BYP1605\n         LA    1,&AUTOSEL               GET ADDRESS OF AUTOSEL NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR AUTOSEL\n         AGO   .BYP1650\n.BYP1605 ANOP\n         LA    1,SPFX&NDX               GET GENNED AUTOSEL VALUE\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         AIF   ('&POSITION' EQ '').BYP1700\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1710\n         LA    14,&POSITION             GET ADDRESS OF POSITION NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR POSITION\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFW&NDX              GET ADDRESS OF GENERATED CRPROW\n.BYP1750 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1800\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1810\n         LA    15,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFI&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1850 ANOP\n         STM   14,15,&TEMP+32           STORE PARAMETERS INTO LIST\n         OI    &TEMP+36,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 10).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 10).BYPVARS\n&SPFVARS SETA  10\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBDISPL)               TBDISPL LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&PANEL' EQ '').BYP2100\n         AIF   ('&PANEL'(1,1) EQ '''').BYP2110\n         DC    A(&PANEL)                ADDRESS OF PANEL NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PANEL NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PANEL\n.BYP2150 ANOP\n.*\n         AIF   ('&MSG' EQ '').BYP2200\n         AIF   ('&MSG'(1,1) EQ '''').BYP2210\n         DC    A(&MSG)                  ADDRESS OF MSG NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MSG\n.BYP2250 ANOP\n.*\n         AIF   ('&CURSOR' EQ '').BYP2300\n         AIF   ('&CURSOR'(1,1) EQ '''').BYP2310\n         DC    A(&CURSOR)               ADDRESS OF CURSOR NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CURSOR\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFF&NDX)              ADDRESS OF GENERATED CURSOR\n.BYP2350 ANOP\n.*\n         AIF   ('&CSRROW' EQ '').BYP2400\n         AIF   (T'&CSRROW EQ 'N').BYP2410\n         DC    A(&CSRROW)               ADDRESS OF ROW NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&CSRPOS' EQ '').BYP2500\n         AIF   (T'&CSRPOS EQ 'N').BYP2510\n         DC    A(&CSRPOS)               ADDRESS OF CSRPOS NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFC&NDX)              ADDRESS OF GENERATED CSRPOS\n.BYP2550 ANOP\n.*\n         AIF   ('&AUTOSEL' EQ '').BYP2600\n         AIF   ('&AUTOSEL'(1,1) EQ '''').BYP2605\n         DC    A(&AUTOSEL)              ADDRESS OF AUTOSEL NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR AUTOSEL\n         AGO   .BYP2650\n.BYP2605 ANOP\n         DC    A(SPFX&NDX)              GENNED AUTOSEL KEYWORD\n.BYP2650 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2700\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2710\n         DC    A(&POSITION)             ADDRESS OF POSITION NAME\n         AGO   .BYP2750\n.BYP2700 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR POSITION\n         AGO   .BYP2750\n.BYP2710 ANOP\n         DC    A(SPFW&NDX)              ADDRESS OF GENERATED POSITION\n.BYP2750 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2800\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2810\n         DC    A(&ROWID+X'80000000')    ADDRESS OF ROWID NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ROWID\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFI&NDX+X'80000000')  ADDRESS OF GENERATED ROWID\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBEND": {"ttr": 9735, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBEND &TABLE,                  TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBEND,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBEND).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBEND).BYP20\nTBEND DC       CL8'TBEND'               ISPF KEYWORD\n&SPFTBEND SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBEND                 GET ADDRESS OF TBEND KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBEND)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBERASE": {"ttr": 9738, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBERASE &MEM,                  MEMBER NAME                    *\n               &P2,                                                    *\n               &LIBRARY=,               LIBRARY NAME                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBERASE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBERASE &MEM,&P2,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&MEM' EQ '').ERR1\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBERASE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&MEM' EQ '').CNT1\n         AIF   ('&MEM'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&LIBRARY' EQ '').CNT2\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBERASE).BYP20\nTBERASE  DC    CL8'TBERASE'             ISPF KEYWORD\n&SPFTBERASE SETB 1\n.BYP20   ANOP\n         AIF   ('&MEM' EQ '').BYP40\n         AIF   ('&MEM'(1,1) NE '''').BYP40\nSPFM&NDX DC    CL8&MEM                  GENERATED MEMBER NAME\n.BYP40   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP50\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP50   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBERASE               GET ADDRESS OF TBERASE KEYWORD\n         AIF   ('&MEM' EQ '').BYP100\n         AIF   ('&MEM'(1,1) EQ '''').BYP110\n         LA    15,&MEM                  GET ADDRESS OF MEMBER\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFM&NDX              GET ADDRESS OF GENERATED MEMBER\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR MEMBER\n.BYP120  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP140\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP130\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,&LIBRARY               GET ADDRESS OF LIBRARY\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBERASE)               BROWSE LITERAL\n         AIF   ('&MEM' EQ '').BYP200\n         AIF   ('&MEM'(1,1) EQ '''').BYP210\n         DC    A(&MEM)                  ADDRESS OF MEMBER\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFM&NDX)              ADDRESS OF GENERATED MEMBER\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MEMBER\n.BYP220  ANOP\n         AIF   ('&LIBRARY' EQ '').BYP240\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP230\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'MEMBER NAME REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBEXIST": {"ttr": 9987, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBEXIST &TABLE,                TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBEXIST,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBEXIST).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBEXIST).BYP20\nTBEXIST DC     CL8'TBEXIST'             ISPF KEYWORD\n&SPFTBEXIST SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBEXIST               GET ADDRESS OF TBEXIST KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBEXIST)               ISPF KEYWORD\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBGET": {"ttr": 9990, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBGET &TABLE,                  TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &SAVENAME=,              SAVE NAME-LIST                 *\n               &ROWID=,                 ROW ID NAME                    *\n               &NOREAD=,                NOREAD KEYWORD                 *\n               &POSITION=,              POSITION NUMBER                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBGET,&SPFNULLC,&SPFDEBUG,&SPFVAR,&SPFNOREAD\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBGET &TABLE,&P2,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' EQ '').K3\n         AIF   ('&NOREAD'(1,1) NE '''').K3\n         AIF   ('&NOREAD' EQ '''NOREAD''').K3\n         MNOTE 4,'WARNING - NOREAD KEYWORD EXPECTED NOREAD IN QUOTES'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBGET).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&SAVENAME' EQ '').CNT2\n         AIF   ('&SAVENAME'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&ROWID' EQ '').CNT3\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&NOREAD' EQ '').CNT3A\n         AIF   ('&NOREAD'(1,1) EQ '''').GENLIT\n.CNT3A   ANOP\n         AIF   ('&POSITION' EQ '').CNT4\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&POSITION' EQ '').CNT5\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBGET).BYP20\nTBGET DC       CL8'TBGET'               ISPF KEYWORD\n&SPFTBGET SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&SAVENAME' EQ '').BYP40\n         AIF   ('&SAVENAME'(1,1) NE '''').BYP40\nSPFS&NDX DC    CL8&SAVENAME             GENERATED SAVE\n.BYP40   ANOP\n         AIF   ('&ROWID' EQ '').BYP50\n         AIF   ('&ROWID'(1,1) NE '''').BYP50\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP50   ANOP\n         AIF   ('&NOREAD' EQ '').BYP60\n         AIF   ('&NOREAD'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&NOREAD               GENERATED NOREAD KEYWORD\n.BYP60   ANOP\n         AIF   ('&POSITION' EQ '').BYP70\n         AIF   ('&POSITION'(1,1) NE '''').BYP70\nSPFP&NDX DC    CL8&POSITION             GENERATED POSITION VAR\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBGET                 GET ADDRESS OF TBGET KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP1100\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP1110\n         LA    0,&SAVENAME              GET ADDRESS OF SAVE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SAVE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n.BYP1150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP1200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1210\n         LA    1,&ROWID                 GET ADDRESS OF ROWID NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWID\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFR&NDX               GET ADDRESS OF GENERATED ROWID\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NOREAD' EQ '').BYP1300\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP1305\n         LA    14,&NOREAD               GET ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR NOREAD\n         AGO   .BYP1350\n.BYP1305 ANOP\n         LA    14,SPFX&NDX              GENNED NOREAD KEYWORD\n.BYP1350 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1400\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1410\n         LA    15,&POSITION             GET ADDRESS OF POSITION NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR POSITION\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFP&NDX              GET ADDRESS OF GENERATED POS\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBGET)                 TBGET LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP2100\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP2110\n         DC    A(&SAVENAME)             ADDRESS OF SAVE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR SAVE\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED SAVE\n.BYP2150 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2200\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2210\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2250 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2300\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP2305\n         DC    A(&NOREAD)               ADDRESS OF NOREAD KEYWORD\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n         AGO   .BYP2350\n.BYP2305 ANOP\n         DC    A(SPFX&NDX)              GENNED NOREAD KEYWORD\n.BYP2350 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2400\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2410\n         DC    A(&POSITION+X'80000000') ADDRESS OF POSITION NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR POSITION\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFP&NDX+X'80000000')  ADDRESS OF GENERATED POSITION\n.BYP2450 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NOREAD KEYWORD EXPECTED - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBMOD": {"ttr": 9996, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBMOD &TABLE,                  TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &SAVE=,                  SAVE NAME-LIST                 *\n               &ORDER=,                 ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBMOD,&SPFDEBUG,&SPFVAR,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBMOD &TABLE,&P2,&P3,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' EQ '').K3\n         AIF   ('&ORDER'(1,1) NE '''').K3\n         AIF   ('&ORDER' EQ '''ORDER''').K3\n         MNOTE 4,'WARNING - ORDER KEYWORD EXPECTED ENCLOSED IN QUOTES'\n.K3      ANOP\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBMOD).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' EQ '').CNT1A\n         AIF   ('&ORDER'(1,1) EQ '''').GENLIT\n.CNT1A   AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBMOD).BYP20\nTBMOD    DC    CL8'TBMOD'               ISPF KEYWORD\n&SPFTBMOD SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   ('&ORDER'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&ORDER                ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBMOD                 GET ADDRESS OF TBMOD KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         AIF   ('&ORDER'(1,1) EQ '''').BYP175\n         LA    1,&ORDER                 GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFX&NDX               GENNED ORDER KEYWORD\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBMOD)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         AIF   ('&ORDER'(1,1) EQ '''').BYP275\n         DC    A(&ORDER+X'80000000')    ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED ORDER KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'ORDER KEYWORD EXPECTED - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBOPEN": {"ttr": 10243, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBOPEN &TABLE,                 TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &WRITE=,                 WRITE/NOWRITE PARM             *\n               &LIBRARY=,               LIBRARY                        *\n               &SHARE=,                 SHARE OPERAND                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBOPEN,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFSHARE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBOPEN &TABLE,&P2,&P3,&P4,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&WRITE' EQ '').K3\n         AIF   ('&WRITE'(1,1) NE '''').K3\n         AIF   ('&WRITE' EQ '''WRITE''').K3\n         AIF   ('&WRITE' EQ '''NOWRITE''').K3\n         MNOTE 4,'WARNING - WRITE KEYWORD EXPECTED WRITE OR NOWRITE IN *\n               QUOTES'\n.K3      ANOP\n         AIF   ('&SHARE' EQ '').K2\n         AIF   ('&SHARE'(1,1) NE '''').K2\n         AIF   ('&SHARE' EQ '''SHARE''').K2\n         MNOTE 4,'WARNING - SHARE KEYWORD EXPECTED ENCLOSED IN QUOTES'\n.K2      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBOPEN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&WRITE' EQ '').CNT2\n         AIF   ('&WRITE'(1,1) EQ '''').GENLIT\n.CNT2    AIF   ('&LIBRARY' EQ '').CNT3\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&SHARE' EQ '').CNT4\n         AIF   ('&SHARE'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBOPEN).BYP20\nTBOPEN   DC    CL8'TBOPEN'              ISPF KEYWORD\n&SPFTBOPEN SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&WRITE' EQ '').BYP40\n         AIF   ('&WRITE'(1,1) NE '''').BYP40\nSPFW&NDX DC    CL8&WRITE                ISPF KEYWORD\n.BYP40   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP50\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP50\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY NAME\n.BYP50   ANOP\n         AIF   ('&SHARE' EQ '').BYP60\n         AIF   ('&SHARE'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&SHARE                ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBOPEN                GET ADDRESS OF TBOPEN KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP1100\n         AIF   ('&WRITE'(1,1) EQ '''').BYP1105\n         LA    0,&WRITE                 GET ADDRESS OF WRITE NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR WRITE\n         AGO   .BYP1150\n.BYP1105 ANOP\n         LA    0,SPFW&NDX               GENNED WRITE KEYWORD\n.BYP1150 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP1200\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP1210\n         LA    1,&LIBRARY               GET ADDRESS OF LIBRARY NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR LIBRARY\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFL&NDX               GET ADDRESS OF GENERATED LIB\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&SHARE' EQ '').BYP1300\n         AIF   ('&SHARE'(1,1) EQ '''').BYP1305\n         LA    14,&SHARE                GET ADDRESS OF FIELD NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR FIELD\n         AGO   .BYP1350\n.BYP1305 ANOP\n         LA    14,SPFX&NDX              GENNED SHARE KEYWORD\n.BYP1350 ANOP\n.*\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBOPEN)                TBOPEN LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&WRITE' EQ '').BYP2100\n         AIF   ('&WRITE'(1,1) EQ '''').BYP2105\n         DC    A(&WRITE)                ADDRESS OF WRITE NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR WRITE NAME\n         AGO   .BYP2150\n.BYP2105 ANOP\n         DC    A(SPFW&NDX)              WRITE KEYWORD\n.BYP2150 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2200\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2210\n         DC    A(&LIBRARY)              ADDRESS OF LIBRARY NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR LIBRARY\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LIBRARY\n.BYP2250 ANOP\n.*\n         AIF   ('&SHARE' EQ '').BYP2300\n         AIF   ('&SHARE'(1,1) EQ '''').BYP2305\n         DC    A(&SHARE+X'80000000')    ADDRESS OF SHARE NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SHARE\n         AGO   .BYP2350\n.BYP2305 ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED SHARE KEYWORD\n.BYP2350 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'SHARE KEYWORD EXPECTED - FOUND ''&SHARE'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'WRITE NOWRITE KEYWORD EXPECTED - FOUND ''&WRITE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBPUT": {"ttr": 10248, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBPUT &TABLE,                  TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &SAVE=,                  SAVE NAME-LIST                 *\n               &ORDER=,                 ORDER KEYWORD                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBPUT,&SPFDEBUG,&SPFVAR,&SPFNULLC\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBPUT &TABLE,&P2,&P3,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&ORDER' EQ '').K3\n         AIF   ('&ORDER'(1,1) NE '''').K3\n         AIF   ('&ORDER' EQ '''ORDER''').K3\n         MNOTE 4,'WARNING - ORDER KEYWORD EXPECTED ENCLOSED IN QUOTES'\n.K3      ANOP\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBPUT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    AIF   ('&ORDER' EQ '').CNT1A\n         AIF   ('&ORDER'(1,1) EQ '''').GENLIT\n.CNT1A   AIF   ('&SAVE' EQ '').CNT2\n         AIF   ('&SAVE'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBPUT).BYP20\nTBPUT    DC    CL8'TBPUT'               ISPF KEYWORD\n&SPFTBPUT SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&SAVE' EQ '').BYP50\n         AIF   ('&SAVE'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&SAVE                   GENERATED NAME-LIST\n.BYP50   ANOP\n         AIF   ('&ORDER' EQ '').BYP60\n         AIF   ('&ORDER'(1,1) NE '''').BYP60\nSPFX&NDX DC    CL8&ORDER                ISPF KEYWORD\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP70\nSPFNULLC DC    CL8' '                   ISPF DUMMY PARM\n&SPFNULLC SETB 1\n.BYP70   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBPUT                 GET ADDRESS OF TBPUT KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&SAVE' EQ '').BYP140\n         AIF   ('&SAVE'(1,1) EQ '''').BYP130\n         LA    0,&SAVE                  GET ADDRESS OF NAME-LIST\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENERATED SAVE\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NAME-LIST\n.BYP150  ANOP\n         AIF   ('&ORDER' EQ '').BYP170\n         AIF   ('&ORDER'(1,1) EQ '''').BYP175\n         LA    1,&ORDER                 GET ADDRESS OF ORDER\n         AGO   .BYP180\n.BYP170  ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ORDER\n         AGO   .BYP180\n.BYP175  ANOP\n         LA    1,SPFX&NDX               GENNED ORDER KEYWORD\n.BYP180  ANOP\n         STM   14,1,&TEMP               STORE PARAMETERS\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBPUT)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&SAVE' EQ '').BYP240\n         AIF   ('&SAVE'(1,1) EQ '''').BYP230\n         DC    A(&SAVE)                 ADDRESS OF NAME LIST\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX)              ADDRESS OF GENERATED NAME LIST\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME LIST\n.BYP250  ANOP\n         AIF   ('&ORDER' EQ '').BYP270\n         AIF   ('&ORDER'(1,1) EQ '''').BYP275\n         DC    A(&ORDER+X'80000000')    ADDRESS OF ORDER KEYWORD\n         AGO   .BYP300\n.BYP270  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ORDER\n         AGO   .BYP300\n.BYP275  ANOP\n         DC    A(SPFX&NDX+X'80000000')  GENNED ORDER KEYWORD\n.BYP300  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR1    ANOP\n         MNOTE 16,'ORDER KEYWORD EXPECTED - FOUND ''&ORDER'''\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBQUERY": {"ttr": 10252, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBQUERY &TABLE,                TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &KEYS=,                  KEY NAME                       *\n               &NAMES=,                 NAMES NAME                     *\n               &ROWNUM=,                NUMBER OF ROWS                 *\n               &KEYNUM=,                NUMBER OF KEYS                 *\n               &NAMENUM=,               NUMBER OF NAMES                *\n               &POSITION=,              CURRENT CRP                    *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBQUERY,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBQUERY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&KEYS' EQ '').CNT2\n         AIF   ('&KEYS'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&NAMES' EQ '').CNT3\n         AIF   ('&NAMES'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWNUM' EQ '').CNT4\n         AIF   ('&ROWNUM'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&KEYNUM' EQ '').CNT5\n         AIF   ('&KEYNUM'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&NAMENUM' EQ '').CNT6\n         AIF   ('&NAMENUM'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&POSITION' EQ '').CNT7\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBQUERY).BYP20\nTBQUERY  DC    CL8'TBQUERY'             ISPF KEYWORD\n&SPFTBQUERY SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&KEYS' EQ '').BYP40\n         AIF   ('&KEYS'(1,1) NE '''').BYP40\nSPFK&NDX DC    CL8&KEYS                 GENERATED KEY NAMES NAME\n.BYP40   ANOP\n         AIF   ('&NAMES' EQ '').BYP50\n         AIF   ('&NAMES'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&NAMES                GENERATED NAMES NAME\n.BYP50   ANOP\n         AIF   ('&ROWNUM' EQ '').BYP60\n         AIF   ('&ROWNUM'(1,1) NE '''').BYP60\nSPFR&NDX DC    CL8&ROWNUM               GENERATED ROWNUM NAMES\n.BYP60   ANOP\n         AIF   ('&KEYNUM' EQ '').BYP70\n         AIF   ('&KEYNUM'(1,1) NE '''').BYP70\nSPFE&NDX DC    CL8&KEYNUM               GENERATED KEYNUM NAMES\n.BYP70   ANOP\n         AIF   ('&NAMENUM' EQ '').BYP80\n         AIF   ('&NAMENUM'(1,1) NE '''').BYP80\nSPFA&NDX DC    CL8&NAMENUM              GENERATED VARNUM NAMES\n.BYP80   ANOP\n         AIF   ('&POSITION' EQ '').BYP90\n         AIF   ('&POSITION'(1,1) NE '''').BYP90\nSPFC&NDX DC    CL8&POSITION             GENERATED CRP NAMES\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBQUERY               GET ADDRESS OF TBQUERY KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP1100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP1110\n         LA    0,&KEYS                  GET ADDRESS OF KEY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR KEY\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFK&NDX               GET ADDRESS OF GENERATED KEY\n.BYP1150 ANOP\n.*\n         AIF   ('&NAMES' EQ '').BYP1200\n         AIF   ('&NAMES'(1,1) EQ '''').BYP1210\n         LA    1,&NAMES                 GET ADDRESS OF NAMES NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAMES\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED NAMES\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWNUM' EQ '').BYP1300\n         AIF   ('&ROWNUM'(1,1) EQ '''').BYP1310\n         LA    14,&ROWNUM               GET ADDRESS OF ROW NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1350 ANOP\n.*\n         AIF   ('&KEYNUM' EQ '').BYP1400\n         AIF   ('&KEYNUM'(1,1) EQ '''').BYP1410\n         LA    15,&KEYNUM               GET ADDRESS OF KEYNUM NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR KEYNUM\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFE&NDX              GET ADDRESS OF GENERATED KEY\n.BYP1450 ANOP\n.*\n         AIF   ('&NAMENUM' EQ '').BYP1500\n         AIF   ('&NAMENUM'(1,1) EQ '''').BYP1510\n         LA    0,&NAMENUM               GET ADDRESS OF VARN NAME\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VARN\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENERATED VARN\n.BYP1550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1610\n         LA    1,&POSITION              GET ADDRESS OF CRP NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR CRP\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFC&NDX               GET ADDRESS OF GENERATED CRP\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFQ&NDX               BRANCH AROUND LITERALS\n         DC    A(TBQUERY)               TBQUERY LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&KEYS' EQ '').BYP2100\n         AIF   ('&KEYS'(1,1) EQ '''').BYP2110\n         DC    A(&KEYS)                 ADDRESS OF KEY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEY NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFK&NDX)              ADDRESS OF GENERATED KEY\n.BYP2150 ANOP\n.*\n         AIF   ('&NAMES' EQ '').BYP2200\n         AIF   ('&NAMES'(1,1) EQ '''').BYP2210\n         DC    A(&NAMES)                ADDRESS OF NAMES NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAMES\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED NAMES\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWNUM' EQ '').BYP2300\n         AIF   ('&ROWNUM'(1,1) EQ '''').BYP2310\n         DC    A(&ROWNUM)               ADDRESS OF ROW NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2350 ANOP\n.*\n         AIF   ('&KEYNUM' EQ '').BYP2400\n         AIF   ('&KEYNUM'(1,1) EQ '''').BYP2410\n         DC    A(&KEYNUM)               ADDRESS OF KEYN NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR KEYN\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFE&NDX)              ADDRESS OF GENERATED KEYN\n.BYP2450 ANOP\n.*\n         AIF   ('&NAMENUM' EQ '').BYP2500\n         AIF   ('&NAMENUM'(1,1) EQ '''').BYP2510\n         DC    A(&NAMENUM)              ADDRESS OF VARN NAME\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VARN\n         AGO   .BYP2550\n.BYP2510 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED VARN\n.BYP2550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2610\n         DC    A(&POSITION+X'80000000') ADDRESS OF CRP NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CRP\n         AGO   .BYP2650\n.BYP2610 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED AUTOSE\n.BYP2650 ANOP\nSPFQ&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBSARG": {"ttr": 10502, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBSARG &TABLE,                 TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &ARGLIST=,               NAME LIST                      *\n               &DIRECTION=,             NEXT OR PREVIOUS               *\n               &NAMECOND=,              NAME COND PAIRS                *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSARG,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBSARG &TABLE,&P2,&P3,&P4,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&DIRECTION' EQ '').K3\n         AIF   ('&DIRECTION'(1,1) NE '''').K3\n         AIF   ('&DIRECTION' EQ '''NEXT''').K3\n         AIF   ('&DIRECTION' EQ '''PREVIOUS''').K3\n         MNOTE 4,'WARNING - DIRECTION KEYWORD EXPECTED NEXT OR PREVIOUS*\n                ENCLOSED IN QUOTES'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSARG).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&ARGLIST' EQ '').CNT2\n         AIF   ('&ARGLIST'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&DIRECTION' EQ '').CNT3\n         AIF   ('&DIRECTION'(1,1) EQ '''').GENLIT\n.CNT3    AIF   ('&NAMECOND' EQ '').CNT4\n         AIF   ('&NAMECOND'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSARG).BYP20\nTBSARG   DC    CL8'TBSARG'              ISPF KEYWORD\n&SPFTBSARG SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&ARGLIST' EQ '').BYP40\n         AIF   ('&ARGLIST'(1,1) NE '''').BYP40\nSPFV&NDX DC    C&ARGLIST                GENERATED NAMELIST\n.BYP40   ANOP\n         AIF   ('&DIRECTION' EQ '').BYP50\n         AIF   ('&DIRECTION'(1,1) NE '''').BYP50\nSPFD&NDX DC    CL8&DIRECTION            ISPF KEYWORD\n.BYP50   ANOP\n         AIF   ('&NAMECOND' EQ '').BYP60\n         AIF   ('&NAMECOND'(1,1) NE '''').BYP60\nSPFC&NDX DC    C&NAMECOND               GENERATED CONDITIONS\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSARG                GET ADDRESS OF TBSARG KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&ARGLIST' EQ '').BYP1100\n         AIF   ('&ARGLIST'(1,1) EQ '''').BYP1110\n         LA    0,&ARGLIST               GET ADDRESS OF VAR NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1150 ANOP\n.*\n         AIF   ('&DIRECTION' EQ '').BYP1200\n         AIF   ('&DIRECTION'(1,1) EQ '''').BYP1205\n         LA    1,&DIRECTION             GET ADDRESS OF KEYWORD\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM\n         AGO   .BYP1250\n.BYP1205 ANOP\n         LA    1,SPFD&NDX               GENNED NEXT/PREVIOUS KEYWORD\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&NAMECOND' EQ '').BYP1300\n         AIF   ('&NAMECOND'(1,1) EQ '''').BYP1310\n         LA    14,&NAMECOND             GET ADDRESS OF COND NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR COND\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED COND\n.BYP1350 ANOP\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSARG)                TBSARG LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&ARGLIST' EQ '').BYP2100\n         AIF   ('&ARGLIST'(1,1) EQ '''').BYP2110\n         DC    A(&ARGLIST)              ADDRESS OF VAR NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2150 ANOP\n.*\n         AIF   ('&DIRECTION' EQ '').BYP2200\n         AIF   ('&DIRECTION'(1,1) EQ '''').BYP2205\n         DC    A(&DIRECTION)            ISPF KEYWORD\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR MSG\n         AGO   .BYP2250\n.BYP2205 ANOP\n         DC    A(SPFD&NDX)              GENNED NEXT/PREVIOUS KEYWORD\n.BYP2250 ANOP\n.*\n         AIF   ('&NAMECOND' EQ '').BYP2300\n         AIF   ('&NAMECOND'(1,1) EQ '''').BYP2310\n         DC    A(&NAMECOND+X'80000000') ADDRESS OF COND NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR COND\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED COND\n.BYP2350 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBSAVE": {"ttr": 10507, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   TBSAVE &TABLE,                 TABLE NAME                     *\n               &NEWCOPY,                NEWCOPY OR REPLCOPY            *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &NAME=,                  NAME FOR SAVE                  *\n               &PAD=,                   PAD AMOUNT                     *\n               &LIBRARY=,               LIBRARY                        *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSAVE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNEWCOPY,&SPFREPLCOPY\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBSAVE &TABLE,&NEWCOPY,&P3,&P4,&P5,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NEWCOPY' NE '' AND '&NEWCOPY' NE 'NEWCOPY' AND       *\n               '&NEWCOPY' NE 'REPLCOPY').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSAVE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&NEWCOPY' EQ 'NEWCOPY' AND NOT &SPFNEWCOPY).GENLIT\n         AIF   ('&NEWCOPY' EQ 'REPLCOPY' AND NOT &SPFREPLCOPY).GENLIT\n         AIF   ('&NAME' EQ '').CNT3\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   (T'&PAD EQ 'N').GENLIT\n         AIF   ('&LIBRARY' EQ '').CNT5\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSAVE).BYP20\nTBSAVE   DC    CL8'TBSAVE'              ISPF KEYWORD\n&SPFTBSAVE SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&NEWCOPY' EQ '').BYP40\n         AIF   ('&NEWCOPY' NE 'NEWCOPY' OR &SPFNEWCOPY).BYP35\nNEWCOPY  DC    CL8'NEWCOPY'             ISPF KEYWORD\n&SPFNEWCOPY SETB 1\n.BYP35   ANOP\n         AIF   ('&NEWCOPY' NE 'REPLCOPY' OR &SPFREPLCOPY).BYP40\nREPLCOPY DC    CL8'REPLCOPY'            ISPF KEYWORD\n&SPFREPLCOPY SETB 1\n.BYP40   ANOP\n         AIF   ('&NAME' EQ '').BYP50\n         AIF   ('&NAME'(1,1) NE '''').BYP50\nSPFA&NDX DC    CL8&NAME                 GENERATED NAME NAME\n.BYP50   ANOP\n         AIF   (T'&PAD NE 'N').BYP60\nSPFP&NDX DC    F'&PAD'                  GENERATED PAD AMOUNT\n.BYP60   ANOP\n         AIF   ('&LIBRARY' EQ '').BYP70\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP70\nSPFL&NDX DC    CL8&LIBRARY              GENERATED LIBRARY\n.BYP70   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSAVE                GET ADDRESS OF TBSAVE KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP1100\n         LA    0,&NEWCOPY               GET ADDRESS OF COPY NAME\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR COPY\n.BYP1150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP1200\n         AIF   ('&NAME'(1,1) EQ '''').BYP1210\n         LA    1,&NAME                  GET ADDRESS OF NAME NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR NAME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED NAME\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&PAD' EQ '').BYP1300\n         AIF   (T'&PAD EQ 'N').BYP1310\n         LA    14,&PAD                  GET ADDRESS OF PAD AMOUNT\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR PAD AMT\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFP&NDX              GET ADDRESS OF GENERATED PAD\n.BYP1350 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP1400\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP1410\n         LA    15,&LIBRARY              GET ADDRESS OF LIBRARY NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR LIBRARY\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENERATED LIB\n.BYP1450 ANOP\n.*\n         STM   14,15,&TEMP+16           STORE PARAMETERS INTO LIST\n         OI    &TEMP+20,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 6).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 6).BYPVARS\n&SPFVARS SETA  6\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSAVE)                TBSAVE LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NEWCOPY' EQ '').BYP2100\n         DC    A(&NEWCOPY)              ADDRESS OF COPY NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR COPY NAME\n.BYP2150 ANOP\n.*\n         AIF   ('&NAME' EQ '').BYP2200\n         AIF   ('&NAME'(1,1) EQ '''').BYP2210\n         DC    A(&NAME)                 ADDRESS OF NAME NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAME\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED NAME\n.BYP2250 ANOP\n.*\n         AIF   ('&PAD' EQ '').BYP2300\n         AIF   (T'&PAD EQ 'N').BYP2310\n         DC    A(&PAD)                  ADDRESS OF PAD AMOUNT\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR PAD AMOUNT\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFP&NDX)              ADDRESS OF GENERATED PAD AMT\n.BYP2350 ANOP\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2400\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2410\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR LIBRARY\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFL&NDX+X'80000000')  ADDRESS OF GENERATED LIBRARY\n.BYP2450 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'NEWCOPY OR REPLCOPY EXPECTED AS KEYWORD - FOUND ''&N*\n               EWCOPY'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBSCAN": {"ttr": 10757, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBSCAN &TABLE,                 TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &P8,                                                    *\n               &ARGLIST=,               ARGLIST                        *\n               &SAVENAME=,              EXTENSION VAR LIST             *\n               &ROWID=,                 SAVE THE ROWID                 *\n               &DIRECTION=,             NEXT OR PREVIOUS               *\n               &NOREAD=,                NOREAD KEYWORD                 *\n               &POSITION=,              POSITION OF CRP                *\n               &CONDLIST=,              CONDITIONS FOR SEARCH          *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSCAN,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBSCAN &TABLE,&P2,&P3,&P4,&P5,&P6,&P7,&P8,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AIF   ('&P8' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&DIRECTION' EQ '').K3\n         AIF   ('&DIRECTION'(1,1) NE '''').K3\n         AIF   ('&DIRECTION' EQ '''NEXT''').K3\n         AIF   ('&DIRECTION' EQ '''PREVIOUS''').K3\n         MNOTE 4,'WARNING - DIRECTION KEYWORD EXPECTED NEXT OR PREVIOUS*\n                ENCLOSED IN QUOTES'\n.K3      ANOP\n         AIF   ('&NOREAD' EQ '').K2\n         AIF   ('&NOREAD'(1,1) NE '''').K2\n         AIF   ('&NOREAD' EQ '''NOREAD''').K2\n         MNOTE 4,'WARNING - NOREAD KEYWORD EXPECTED NOREAD IN QUOTES'\n.K2      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSCAN).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&ARGLIST' EQ '').CNT2\n         AIF   ('&ARGLIST'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&SAVENAME' EQ '').CNT3\n         AIF   ('&SAVENAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWID' EQ '').CNT4\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&DIRECTION' EQ '').CNT5\n         AIF   ('&DIRECTION'(1,1) EQ '''').GENLIT\n.CNT5    AIF   ('&NOREAD' EQ '').CNT6\n         AIF   ('&NOREAD'(1,1) EQ '''').GENLIT\n.CNT6    AIF   ('&POSITION' EQ '').CNT8\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&CONDLIST' EQ '').CNT9\n         AIF   ('&CONDLIST'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSCAN).BYP20\nTBSCAN   DC    CL8'TBSCAN'              ISPF KEYWORD\n&SPFTBSCAN SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   ('&ARGLIST' EQ '').BYP40\n         AIF   ('&ARGLIST'(1,1) NE '''').BYP40\nSPFA&NDX DC    C&ARGLIST                GENERATED ARGLIST-LIST\n.BYP40   ANOP\n         AIF   ('&SAVENAME' EQ '').BYP50\n         AIF   ('&SAVENAME'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&SAVENAME             GENERATED VARIABLE NAME\n.BYP50   ANOP\n         AIF   ('&ROWID' EQ '').BYP60\n         AIF   ('&ROWID'(1,1) NE '''').BYP60\nSPFR&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP60   ANOP\n         AIF   ('&DIRECTION' EQ '').BYP70\n         AIF   ('&DIRECTION'(1,1) NE '''').BYP70\nSPFD&NDX  DC   CL8&DIRECTION            ISPF KEYWORD\n.BYP70   ANOP\n         AIF   ('&NOREAD' EQ '').BYP80\n         AIF   ('&NOREAD'(1,1) NE '''').BYP80\nSPFN&NDX DC    CL8&NOREAD               ISPF KEYWORD\n.BYP80   ANOP\n         AIF   ('&POSITION' EQ '').BYP100\n         AIF   ('&POSITION'(1,1) NE '''').BYP100\nSPFP&NDX DC    CL8&POSITION             GENERATED POSITION VAR\n.BYP100  ANOP\n         AIF   ('&CONDLIST' EQ '').BYP110\n         AIF   ('&CONDLIST'(1,1) NE '''').BYP110\nSPFC&NDX DC    C&CONDLIST               GENERATED COND LIST\n.BYP110  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSCAN                GET ADDRESS OF TBSCAN KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&ARGLIST' EQ '').BYP1100\n         AIF   ('&ARGLIST'(1,1) EQ '''').BYP1110\n         LA    0,&ARGLIST               GET ADDRESS OF ARGLIST LIST\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR ARGLIST\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENERATED ARG\n.BYP1150 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP1200\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP1210\n         LA    1,&SAVENAME              GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWID' EQ '').BYP1300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1310\n         LA    14,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFR&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1350 ANOP\n.*\n         AIF   ('&DIRECTION' EQ '').BYP1400\n         AIF   ('&DIRECTION'(1,1) EQ '''').BYP1405\n         LA    15,&DIRECTION            GET ADDRESS OF KEYWORD\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1405 ANOP\n         LA    15,SPFD&NDX              GET GENNED NEXT/PREVIOUS\n.BYP1450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP1500\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP1505\n         LA    0,&NOREAD                GET ADDRESS OF KEYWORD\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CSRPOS\n         AGO   .BYP1550\n.BYP1505 ANOP\n         LA    0,SPFN&NDX               GET GENNED NOREAD KEYWORD\n.BYP1550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1610\n         LA    1,&POSITION              GET ADDRESS OF POS VAR NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR POS VAR\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFP&NDX               GET GENERATED POS VAR NAME\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         AIF   ('&CONDLIST' EQ '').BYP1700\n         AIF   ('&CONDLIST'(1,1) EQ '''').BYP1710\n         LA    14,&CONDLIST             GET ADDRESS OF COND NAME\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR COND\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENERATED COND\n.BYP1750 ANOP\n.*\n         ST    14,&TEMP+32              STORE PARAMETERS INTO LIST\n         OI    &TEMP+32,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 9).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 9).BYPVARS\n&SPFVARS SETA  9\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSCAN)                TBSCAN LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&ARGLIST' EQ '').BYP2100\n         AIF   ('&ARGLIST'(1,1) EQ '''').BYP2110\n         DC    A(&ARGLIST)              ADDRESS OF ARGLIST NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ARGLIST NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFA&NDX)              ADDRESS OF GENERATED ARGLIST\n.BYP2150 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP2200\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP2210\n         DC    A(&SAVENAME)             ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2310\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2350 ANOP\n.*\n         AIF   ('&DIRECTION' EQ '').BYP2400\n         AIF   ('&DIRECTION'(1,1) EQ '''').BYP2405\n         DC    A(&DIRECTION)            ADDRESS OF ISPF KEYWORD\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2405 ANOP\n         DC    A(SPFD&NDX)              GENNED NEXT/PREVIOUS\n.BYP2450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2500\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP2505\n         DC    A(&NOREAD)               ADDRESS OF ISPF KEYWORD\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR CSRPOS\n         AGO   .BYP2550\n.BYP2505 ANOP\n         DC    A(SPFN&NDX)              GENNED NOREAD KEYWORD\n.BYP2550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2610\n         DC    A(&POSITION)             ADDRESS OF POS NAME\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC)              ADDRESS OF DUMMY PARM\n         AGO   .BYP2650\n.BYP2610 ANOP\n         DC    A(SPFP&NDX)              GENERATED POS VAR NAME\n.BYP2650 ANOP\n.*\n         AIF   ('&CONDLIST' EQ '').BYP2800\n         AIF   ('&CONDLIST'(1,1) EQ '''').BYP2810\n         DC    A(&CONDLIST+X'80000000') ADDRESS OF COND NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR COND\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFC&NDX+X'80000000')  ADDRESS OF GENERATED COND\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'EXPECTED NOREAD KEYWORD - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBSKIP": {"ttr": 11009, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBSKIP &TABLE,                 TABLE NAME                     *\n               &P2,                                                    *\n               &P3,                                                    *\n               &P4,                                                    *\n               &P5,                                                    *\n               &P6,                                                    *\n               &P7,                                                    *\n               &NUMBER=SPFNULLC,        NUMBER                         *\n               &SAVENAME=,              VARIABLE FOR EXT VARS          *\n               &ROWID=,                 VARIABLE NAME FOR ROWID        *\n               &ROW=,                   ROWID TO GET                   *\n               &NOREAD=,                NOREAD KEYWORD                 *\n               &POSITION=,              CRP VARIABLE                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSKIP,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFNOREAD,&SPFF1\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n         GBLC  &SPFLVL\n         AIF   ('&SPFLVL' NE '1').NL1\n&NAME    @TBSKIP &TABLE,&P2,&P3,&P4,&P5,&P6,&P7,LOAD=&LOAD,MF=&MF\n         MEXIT\n.NL1     ANOP\n         AIF   ('&P2' NE '').LVLERR\n         AIF   ('&P3' NE '').LVLERR\n         AIF   ('&P4' NE '').LVLERR\n         AIF   ('&P5' NE '').LVLERR\n         AIF   ('&P6' NE '').LVLERR\n         AIF   ('&P7' NE '').LVLERR\n         AGO   .NL2\n.LVLERR  ANOP\n         MNOTE 12,'POSITIONAL PARAMETER FOUND - NOT ALLOWED'\n         MEXIT\n.NL2     ANOP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n         AIF   ('&NOREAD' EQ '').K3\n         AIF   ('&NOREAD'(1,1) NE '''').K3\n         AIF   ('&NOREAD' EQ '''NOREAD''').K3\n         MNOTE 4,'WARNING - NOREAD KEYWORD INVALID - EXPECTED NOREAD EN*\n               CLOSED IN QUOTES'\n.K3      ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSKIP).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   (T'&NUMBER EQ 'N').GENLIT\n         AIF   ('&NUMBER' EQ '' AND NOT &SPFF1).GENLIT\n         AIF   ('&SAVENAME' EQ '').CNT3\n         AIF   ('&SAVENAME'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&ROWID' EQ '').CNT4\n         AIF   ('&ROWID'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   (T'&ROW EQ 'N').GENLIT\n         AIF   ('&NOREAD' EQ '').CNT6\n         AIF   ('&NOREAD'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&POSITION' EQ '').CNT8\n         AIF   ('&POSITION'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSKIP).BYP20\nTBSKIP   DC    CL8'TBSKIP'              ISPF KEYWORD\n&SPFTBSKIP SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n         AIF   (T'&NUMBER NE 'N').BYP40\nSPFN&NDX DC    F'&NUMBER'               GENERATED NUMBER\n.BYP40   ANOP\n         AIF   ('&NUMBER' NE '' OR &SPFF1).BYP45\nSPFF1    DC    F'1'\n&SPFF1   SETB  1\n.BYP45   ANOP\n         AIF   ('&SAVENAME' EQ '').BYP50\n         AIF   ('&SAVENAME'(1,1) NE '''').BYP50\nSPFV&NDX DC    CL8&SAVENAME             GENERATED EXT VAR NAME\n.BYP50   ANOP\n         AIF   ('&ROWID' EQ '').BYP60\n         AIF   ('&ROWID'(1,1) NE '''').BYP60\nSPFI&NDX DC    CL8&ROWID                GENERATED ROWID VAR NAME\n.BYP60   ANOP\n         AIF   (T'&ROW NE 'N').BYP70\nSPFR&NDX DC    F'&ROW'                  GENERATED ROWID\n.BYP70   ANOP\n         AIF   ('&NOREAD' EQ '').BYP80\n         AIF   ('&NOREAD'(1,1) NE '''').BYP80\nSPFX&NDX DC    CL8&NOREAD               ISPF KEYWORD\n.BYP80   ANOP\n         AIF   ('&POSITION' EQ '').BYP100\n         AIF   ('&POSITION'(1,1) NE '''').BYP100\nSPFC&NDX DC    CL8&POSITION             GENERATED CRP VARIABLE NAME\n.BYP100  ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSKIP                GET ADDRESS OF TBSKIP KEYWORD\n.*\n         AIF   ('&TABLE' EQ '').BYP1000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n         AIF   ('&NUMBER' EQ '').BYP1100\n         AIF   (T'&NUMBER EQ 'N').BYP1110\n         LA    0,&NUMBER                GET ADDRESS OF NUMBER FIELD\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFF1                  GET DUMMY PARM FOR NUMBER\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFN&NDX               GET ADDRESS OF GENERATED NUMBER\n.BYP1150 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP1200\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP1210\n         LA    1,&SAVENAME              GET ADDRESS OF VAR NAME\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VAR\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFV&NDX               GET ADDRESS OF GENERATED VAR\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   ('&ROWID' EQ '').BYP1300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP1310\n         LA    14,&ROWID                GET ADDRESS OF ROWID NAME\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWID\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFI&NDX              GET ADDRESS OF GENERATED ROWID\n.BYP1350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP1400\n         AIF   (T'&ROW EQ 'N').BYP1410\n         LA    15,&ROW                  GET ADDRESS OF ROW NAME\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROW\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFR&NDX              GET ADDRESS OF GENERATED ROW\n.BYP1450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP1500\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP1505\n         LA    0,&NOREAD                GET ADDRESS OF NOREAD\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR NOREAD\n         AGO   .BYP1550\n.BYP1505 ANOP\n         LA    0,SPFX&NDX               GENNED NOREAD KEYWORD\n.BYP1550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP1600\n         AIF   ('&POSITION'(1,1) EQ '''').BYP1610\n         LA    1,&POSITION              GET ADDRESS OF CRP NAME\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR POS\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFC&NDX               GET DUMMY PARM FOR POS\n.BYP1650 ANOP\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+28,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 8).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 8).BYPVARS\n&SPFVARS SETA  8\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSKIP)                TBSKIP LITERAL\n.*\n         AIF   ('&TABLE' EQ '').BYP2000\n         AIF   ('&TABLE'(1,1) EQ '''').BYP2010\n         DC    A(&TABLE)                ADDRESS OF TABLE NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n.BYP2050 ANOP\n.*\n         AIF   ('&NUMBER' EQ '').BYP2100\n         AIF   (T'&NUMBER EQ 'N').BYP2110\n         DC    A(&NUMBER)               ADDRESS OF NUMBER NAME\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFF1)                 DUMMY PARM FOR NUMBER NAME\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NUMBER\n.BYP2150 ANOP\n.*\n         AIF   ('&SAVENAME' EQ '').BYP2200\n         AIF   ('&SAVENAME'(1,1) EQ '''').BYP2210\n         DC    A(&SAVENAME)             ADDRESS OF VAR NAME\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2250 ANOP\n.*\n         AIF   ('&ROWID' EQ '').BYP2300\n         AIF   ('&ROWID'(1,1) EQ '''').BYP2310\n         DC    A(&ROWID)                ADDRESS OF ROWID NAME\n         AGO   .BYP2350\n.BYP2300 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROWID\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFI&NDX)              ADDRESS OF GENERATED ROWID\n.BYP2350 ANOP\n.*\n         AIF   ('&ROW' EQ '').BYP2400\n         AIF   ('&ROW'(1,1) EQ '''').BYP2410\n         DC    A(&ROW)                  ADDRESS OF ROW NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR ROW\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFR&NDX)              ADDRESS OF GENERATED ROW\n.BYP2450 ANOP\n.*\n         AIF   ('&NOREAD' EQ '').BYP2500\n         AIF   ('&NOREAD'(1,1) EQ '''').BYP2505\n         DC    A(&NOREAD)               ADDRESS OF NOREAD\n         AGO   .BYP2550\n.BYP2500 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NOREAD\n         AGO   .BYP2550\n.BYP2505 ANOP\n         DC    A(SPFX&NDX)              GENNED NOREAD KEYWORD\n.BYP2550 ANOP\n.*\n         AIF   ('&POSITION' EQ '').BYP2800\n         AIF   ('&POSITION'(1,1) EQ '''').BYP2810\n         DC    A(&POSITION+X'80000000') ADDRESS OF CRP NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR CRP\n         AGO   .BYP2850\n.BYP2810 ANOP\n         DC    A(SPFI&NDX+X'80000000')  ADDRESS OF GENERATED CRP\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'EXPECTED NOREAD KEYWORD - FOUND ''&NOREAD'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBSORT": {"ttr": 11015, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBSORT &TABLE,                 TABLE NAME                     *\n               &FIELDS=,                FIELDS NAME-LIST               *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSORT,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&FIELDS' EQ '').ERR4\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSORT).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&FIELDS' EQ '').CNT2\n         AIF   ('&FIELDS'(1,1) EQ '''').GENLIT\n.CNT2    AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBSORT).BYP20\nTBSORT   DC    CL8'TBSORT'              ISPF KEYWORD\n&SPFTBSORT SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\n         AIF   ('&FIELDS' EQ '').BYP50\n         AIF   ('&FIELDS'(1,1) NE '''').BYP50\nSPFS&NDX DC    C&FIELDS                 GENERATED SORT KEYS\n.BYP50   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBSORT                GET ADDRESS OF TBSORT KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         AIF   ('&FIELDS' EQ '').BYP140\n         AIF   ('&FIELDS'(1,1) EQ '''').BYP130\n         LA    0,&FIELDS                GET ADDRESS OF SORT KEYS\n         AGO   .BYP150\n.BYP130  ANOP\n         LA    0,SPFS&NDX               GET ADDRESS OF GENNED FIELDS\n         AGO   .BYP150\n.BYP140  ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR SORT KEY\n.BYP150  ANOP\n         STM   14,0,&TEMP               STORE PARAMETERS\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBSORT)                BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE)                ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX)              ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR TABLE\n.BYP220  ANOP\n         AIF   ('&FIELDS' EQ '').BYP240\n         AIF   ('&FIELDS'(1,1) EQ '''').BYP230\n         DC    A(&FIELDS+X'80000000')   ADDRESS OF FIELDS\n         AGO   .BYP250\n.BYP230  ANOP\n         DC    A(SPFS&NDX+X'80000000')  ADDRESS OF GENERATED SORT KEYS\n         AGO   .BYP250\n.BYP240  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR SORT KEYS\n.BYP250  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'SORT KEYS ARE REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBSTATS": {"ttr": 11019, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   TBSTATS &TABLE,                TABLE NAME                     *\n               &CDATE=,                 CREATE DATE                    *\n               &CTIME=,                 CREATE TIME                    *\n               &UDATE=,                 UPDATE DATE                    *\n               &UTIME=,                 UPDATE TIME                    *\n               &USER=,                  USER ID                        *\n               &ROWCREAT=,              ROWS CREATED                   *\n               &ROWCURR=,               CURRENT NUMBER OF ROWS         *\n               &ROWUPD=,                ROWS UPDATED                   *\n               &TABLEUPD=,              TABLE UPDATED                  *\n               &SERVICE=,               LAST SERVICE                   *\n               &RETCODE=,               RETURN CODE                    *\n               &STATUS1=,               STATUS 1                       *\n               &STATUS2=,               STATUS 2                       *\n               &STATUS3=,               STATUS 3                       *\n               &LIBRARY=,               DDNAME FOR TABLE               *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBSTATS              GLOBAL FOR TBSTATS LITERAL\n         GBLB  &SPFNULLC                DUMMY PARAMTER FOR CALL\n         GBLB  &SPFDEBUG                DEBUG MODE\n         GBLB  &SPFVAR                  NUMBER OF REQUIRED FULLWORDS\n         GBLA  &SPFVARS                 NUMBER OF FULLWORDS\n         GBLA  &SPFVARC                 PREVIOUS FULLWORDS USED\n         LCLC  &NDX                     USED IN PLACE OF SYSNDX\n         LCLC  &TEMP                    USED AS TEMPORARY VARIABLE\n.*\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LABEL' EQ '').BYP10\n&LABEL   DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&TABLE' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBSTATS).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n         AIF   ('&CDATE' EQ '').CNT1\n         AIF   ('&CDATE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&CTIME' EQ '').CNT2\n         AIF   ('&CTIME'(1,1) EQ '''').GENLIT\n.CNT2    ANOP\n         AIF   ('&UDATE' EQ '').CNT3\n         AIF   ('&UDATE'(1,1) EQ '''').GENLIT\n.CNT3    ANOP\n         AIF   ('&UTIME' EQ '').CNT4\n         AIF   ('&UTIME'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AIF   ('&USER' EQ '').CNT5\n         AIF   ('&USER'(1,1) EQ '''').GENLIT\n.CNT5    ANOP\n         AIF   ('&ROWCREAT' EQ '').CNT6\n         AIF   ('&ROWCREAT'(1,1) EQ '''').GENLIT\n.CNT6    ANOP\n         AIF   ('&ROWCURR' EQ '').CNT7\n         AIF   ('&ROWCURR'(1,1) EQ '''').GENLIT\n.CNT7    ANOP\n         AIF   ('&ROWUPD' EQ '').CNT8\n         AIF   ('&ROWUPD'(1,1) EQ '''').GENLIT\n.CNT8    ANOP\n         AIF   ('&TABLEUPD' EQ '').CNT9\n         AIF   ('&TABLEUPD'(1,1) EQ '''').GENLIT\n.CNT9    ANOP\n         AIF   ('&SERVICE' EQ '').CNT10\n         AIF   ('&SERVICE'(1,1) EQ '''').GENLIT\n.CNT10   ANOP\n         AIF   ('&RETCODE' EQ '').CNT11\n         AIF   ('&RETCODE'(1,1) EQ '''').GENLIT\n.CNT11   ANOP\n         AIF   ('&STATUS1' EQ '').CNT12\n         AIF   ('&STATUS1'(1,1) EQ '''').GENLIT\n.CNT12   ANOP\n         AIF   ('&STATUS2' EQ '').CNT13\n         AIF   ('&STATUS2'(1,1) EQ '''').GENLIT\n.CNT13   ANOP\n         AIF   ('&STATUS3' EQ '').CNT14\n         AIF   ('&STATUS3'(1,1) EQ '''').GENLIT\n.CNT14   ANOP\n         AIF   ('&LIBRARY' EQ '').CNT15\n         AIF   ('&LIBRARY'(1,1) EQ '''').GENLIT\n.CNT15   ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFNULLC).BYP001\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP001  ANOP\n.*\n.*\n         AIF   (&SPFTBSTATS).BYP20\nTBSTATS  DC    CL8'TBSTATS'             ISPF KEYWORD\n&SPFTBSTATS SETB 1\n.BYP20   ANOP\n.*\n.*\n         AIF   ('&TABLE' EQ '').BYP30\n         AIF   ('&TABLE'(1,1) NE '''').BYP30\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP30   ANOP\n.*\n.*\n         AIF   ('&CDATE' EQ '').BYP40\n         AIF   ('&CDATE'(1,1) NE '''').BYP40\nSPFA&NDX DC    CL8&CDATE                CDATE VARIABLE NAME\n.BYP40   ANOP\n.*\n.*\n         AIF   ('&CTIME' EQ '').BYP50\n         AIF   ('&CTIME'(1,1) NE '''').BYP50\nSPFB&NDX DC    CL8&CTIME                CTIME VARIABLE NAME\n.BYP50   ANOP\n.*\n.*\n         AIF   ('&UDATE' EQ '').BYP60\n         AIF   ('&UDATE'(1,1) NE '''').BYP60\nSPFC&NDX DC    CL8&UDATE                UDATE VARIABLE NAME\n.BYP60   ANOP\n.*\n.*\n         AIF   ('&UTIME' EQ '').BYP70\n         AIF   ('&UTIME'(1,1) NE '''').BYP70\nSPFD&NDX DC    CL8&UTIME                UTIME VARIABLE NAME\n.BYP70   ANOP\n.*\n.*\n         AIF   ('&USER' EQ '').BYP80\n         AIF   ('&USER'(1,1) NE '''').BYP80\nSPFE&NDX DC    CL8&USER                 USERE VARIABLE NAME\n.BYP80   ANOP\n.*\n.*\n         AIF   ('&ROWCREAT' EQ '').BYP90\n         AIF   ('&ROWCREAT'(1,1) NE '''').BYP90\nSPFF&NDX DC    CL8&ROWCREAT             ROWCREAT VARIABLE NAME\n.BYP90   ANOP\n.*\n.*\n         AIF   ('&ROWCURR' EQ '').BYP100\n         AIF   ('&ROWCURR'(1,1) NE '''').BYP100\nSPFG&NDX DC    CL8&ROWCURR              ROWCURR VARIABLE NAME\n.BYP100  ANOP\n.*\n.*\n         AIF   ('&ROWUPD' EQ '').BYP110\n         AIF   ('&ROWUPD'(1,1) NE '''').BYP110\nSPFH&NDX DC    CL8&ROWUPD               ROWUPD VARIABLE NAME\n.BYP110  ANOP\n.*\n.*\n         AIF   ('&TABLEUPD' EQ '').BYP120\n         AIF   ('&TABLEUPD'(1,1) NE '''').BYP120\nSPFI&NDX DC    CL8&TABLEUPD             TABLEUPD VARIABLE NAME\n.BYP120  ANOP\n.*\n.*\n         AIF   ('&SERVICE' EQ '').BYP130\n         AIF   ('&SERVICE'(1,1) NE '''').BYP130\nSPFJ&NDX DC    CL8&SERVICE              SERVICE VARIABLE NAME\n.BYP130  ANOP\n.*\n.*\n         AIF   ('&RETCODE' EQ '').BYP140\n         AIF   ('&RETCODE'(1,1) NE '''').BYP140\nSPFK&NDX DC    CL8&RETCODE              RETCODE VARIABLE NAME\n.BYP140  ANOP\n.*\n.*\n         AIF   ('&STATUS1' EQ '').BYP150\n         AIF   ('&STATUS1'(1,1) NE '''').BYP150\nSPFL&NDX DC    CL8&STATUS1              STATUS1 VARIABLE NAME\n.BYP150  ANOP\n.*\n.*\n         AIF   ('&STATUS2' EQ '').BYP160\n         AIF   ('&STATUS2'(1,1) NE '''').BYP160\nSPFM&NDX DC    CL8&STATUS2              STATUS2 VARIABLE NAME\n.BYP160  ANOP\n.*\n.*\n         AIF   ('&STATUS3' EQ '').BYP170\n         AIF   ('&STATUS3'(1,1) NE '''').BYP170\nSPFN&NDX DC    CL8&STATUS3              STATUS3 VARIABLE NAME\n.BYP170  ANOP\n.*\n.*\n         AIF   ('&LIBRARY' EQ '').BYP180\n         AIF   ('&LIBRARY'(1,1) NE '''').BYP180\nSPFO&NDX DC    CL8&LIBRARY              LIBRARY NAME\n.BYP180  ANOP\n.*\n.*\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n.*\n.*\n         LA    14,TBSTATS               GET ADDRESS OF TBSTATS KEYWORD\n.*\n.*\n         AIF   ('&TABLE'(1,1) EQ '''').BYP1010\n         LA    15,&TABLE                GET ADDRESS OF TABLE NAME\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n.BYP1050 ANOP\n.*\n.*\n         AIF   ('&CDATE' EQ '').BYP1100\n         AIF   ('&CDATE'(1,1) EQ '''').BYP1110\n         LA    0,&CDATE                 GET ADDRESS OF CDATE VARIABLE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR CDATE\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFA&NDX               GET ADDRESS OF GENNED CDATE\n.BYP1150 ANOP\n.*\n.*\n         AIF   ('&CTIME' EQ '').BYP1200\n         AIF   ('&CTIME'(1,1) EQ '''').BYP1210\n         LA    1,&CTIME                 GET ADDRESS OF CTIME VARIABLE\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR CTIME\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFB&NDX               GET ADDRESS OF GENNED CTIME\n.BYP1250 ANOP\n.*\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&UDATE' EQ '').BYP1300\n         AIF   ('&UDATE'(1,1) EQ '''').BYP1310\n         LA    14,&UDATE                GET ADDRESS OF UDATE VARIABLE\n         AGO   .BYP1350\n.BYP1300 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR UDATE\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFC&NDX              GET ADDRESS OF GENNED UDATE\n.BYP1350 ANOP\n.*\n.*\n         AIF   ('&UTIME' EQ '').BYP1400\n         AIF   ('&UTIME'(1,1) EQ '''').BYP1410\n         LA    15,&UTIME                GET ADDRESS OF UTIME VARIABLE\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR UTIME\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFD&NDX              GET ADDRESS OF GENNED UTIME\n.BYP1450 ANOP\n.*\n.*\n         AIF   ('&USER' EQ '').BYP1500\n         AIF   ('&USER'(1,1) EQ '''').BYP1510\n         LA    0,&USER                  GET ADDRESS OF USER VARIABLE\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR USER\n         AGO   .BYP1550\n.BYP1510 ANOP\n         LA    0,SPFE&NDX               GET ADDRESS OF GENNED USER\n.BYP1550 ANOP\n.*\n.*\n         AIF   ('&ROWCREAT' EQ '').BYP1600\n         AIF   ('&ROWCREAT'(1,1) EQ '''').BYP1610\n         LA    1,&ROWCREAT              ADDRESS OF ROWCREAT VARIABLE\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR ROWCREAT\n         AGO   .BYP1650\n.BYP1610 ANOP\n         LA    1,SPFF&NDX               GET ADDRESS OF GENNED ROWCREAT\n.BYP1650 ANOP\n.*\n.*\n         STM   14,1,&TEMP+16            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&ROWCURR' EQ '').BYP1700\n         AIF   ('&ROWCURR'(1,1) EQ '''').BYP1710\n         LA    14,&ROWCURR              ADDRESS OF ROWCURR VARIABLE\n         AGO   .BYP1750\n.BYP1700 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR ROWCURR\n         AGO   .BYP1750\n.BYP1710 ANOP\n         LA    14,SPFG&NDX              GET ADDRESS OF GENNED ROWCURR\n.BYP1750 ANOP\n.*\n.*\n         AIF   ('&ROWUPD' EQ '').BYP1800\n         AIF   ('&ROWUPD'(1,1) EQ '''').BYP1810\n         LA    15,&ROWUPD               ADDRESS OF ROWUPD VARIABLE\n         AGO   .BYP1850\n.BYP1800 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR ROWUPD\n         AGO   .BYP1850\n.BYP1810 ANOP\n         LA    15,SPFH&NDX              GET ADDRESS OF GENNED ROWUPD\n.BYP1850 ANOP\n.*\n.*\n         AIF   ('&TABLEUPD' EQ '').BYP1900\n         AIF   ('&TABLEUPD'(1,1) EQ '''').BYP1910\n         LA    0,&TABLEUPD              ADDRESS OF TABLEUPD VARIABLE\n         AGO   .BYP1950\n.BYP1900 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR TABLEUPD\n         AGO   .BYP1950\n.BYP1910 ANOP\n         LA    0,SPFI&NDX               GET ADDRESS OF GENNED TABLEUPD\n.BYP1950 ANOP\n.*\n.*\n         AIF   ('&SERVICE' EQ '').BYP2000\n         AIF   ('&SERVICE'(1,1) EQ '''').BYP2010\n         LA    1,&SERVICE               ADDRESS OF SERVICE VARIABLE\n         AGO   .BYP2050\n.BYP2000 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR SERVICE\n         AGO   .BYP2050\n.BYP2010 ANOP\n         LA    1,SPFJ&NDX               GET ADDRESS OF GENNED SERVICE\n.BYP2050 ANOP\n.*\n.*\n         STM   14,1,&TEMP+32            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&RETCODE' EQ '').BYP2100\n         AIF   ('&RETCODE'(1,1) EQ '''').BYP2110\n         LA    14,&RETCODE              ADDRESS OF RETCODE VARIABLE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR RETCODE\n         AGO   .BYP2150\n.BYP2110 ANOP\n         LA    14,SPFK&NDX              GET ADDRESS OF GENNED RETCODE\n.BYP2150 ANOP\n.*\n.*\n         AIF   ('&STATUS1' EQ '').BYP2200\n         AIF   ('&STATUS1'(1,1) EQ '''').BYP2210\n         LA    15,&STATUS1              ADDRESS OF STATUS1 VARIABLE\n         AGO   .BYP2250\n.BYP2200 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR STATUS1\n         AGO   .BYP2250\n.BYP2210 ANOP\n         LA    15,SPFL&NDX              GET ADDRESS OF GENNED STATUS1\n.BYP2250 ANOP\n.*\n.*\n         AIF   ('&STATUS2' EQ '').BYP2300\n         AIF   ('&STATUS2'(1,1) EQ '''').BYP2310\n         LA    0,&STATUS2               ADDRESS OF STATUS2 VARIABLE\n         AGO   .BYP2350\n.BYP2300 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR STATUS2\n         AGO   .BYP2350\n.BYP2310 ANOP\n         LA    0,SPFM&NDX               GET ADDRESS OF GENNED STATUS2\n.BYP2350 ANOP\n.*\n.*\n         AIF   ('&STATUS3' EQ '').BYP2400\n         AIF   ('&STATUS3'(1,1) EQ '''').BYP2410\n         LA    1,&STATUS3               ADDRESS OF STATUS3 VARIABLE\n         AGO   .BYP2450\n.BYP2400 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR STATUS3\n         AGO   .BYP2450\n.BYP2410 ANOP\n         LA    1,SPFN&NDX               GET ADDRESS OF GENNED STATUS3\n.BYP2450 ANOP\n.*\n.*\n         STM   14,1,&TEMP+48            STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         AIF   ('&LIBRARY' EQ '').BYP2500\n         AIF   ('&LIBRARY'(1,1) EQ '''').BYP2510\n         LA    14,&LIBRARY              ADDRESS OF LIBRARY VARIABLE\n         AGO   .BYP2550\n.BYP2500 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR LIBRARY\n         AGO   .BYP2550\n.BYP2510 ANOP\n         LA    14,SPFO&NDX              GET ADDRESS OF GENNED LIBRARY\n.BYP2550 ANOP\n.*\n.*\n         ST    14,&TEMP+64              STORE PARAMETERS INTO LIST\n.*\n.*\n.*\n         OI    &TEMP+64,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 17).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 17).BYPVARS\n&SPFVARS SETA  17\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n.*\n.*\n         DC    A(TBSTATS)               GET ADDRESS OF TBSTATS KEYWORD\n.*\n.*\n         AIF   ('&TABLE'(1,1) EQ '''').BY1010\n         DC    A(&TABLE)                GET ADDRESS OF TABLE NAME\n         AGO   .BY1050\n.BY1010 ANOP\n         DC    A(SPFT&NDX)              GET ADDRESS OF GENERATED TABLE\n.BY1050 ANOP\n.*\n.*\n         AIF   ('&CDATE' EQ '').BY1100\n         AIF   ('&CDATE'(1,1) EQ '''').BY1110\n         DC    A(&CDATE)                GET ADDRESS OF CDATE VARIABLE\n         AGO   .BY1150\n.BY1100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR CDATE\n         AGO   .BY1150\n.BY1110 ANOP\n         DC    A(SPFA&NDX)              GET ADDRESS OF GENNED CDATE\n.BY1150 ANOP\n.*\n.*\n         AIF   ('&CTIME' EQ '').BY1200\n         AIF   ('&CTIME'(1,1) EQ '''').BY1210\n         DC    A(&CTIME)                GET ADDRESS OF CTIME VARIABLE\n         AGO   .BY1250\n.BY1200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR CTIME\n         AGO   .BY1250\n.BY1210 ANOP\n         DC    A(SPFB&NDX)              GET ADDRESS OF GENNED CTIME\n.BY1250 ANOP\n.*\n.*\n         AIF   ('&UDATE' EQ '').BY1300\n         AIF   ('&UDATE'(1,1) EQ '''').BY1310\n         DC    A(&UDATE)                GET ADDRESS OF UDATE VARIABLE\n         AGO   .BY1350\n.BY1300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR UDATE\n         AGO   .BY1350\n.BY1310 ANOP\n         DC    A(SPFC&NDX)              GET ADDRESS OF GENNED UDATE\n.BY1350 ANOP\n.*\n.*\n         AIF   ('&UTIME' EQ '').BY1400\n         AIF   ('&UTIME'(1,1) EQ '''').BY1410\n         DC    A(&UTIME)                GET ADDRESS OF UTIME VARIABLE\n         AGO   .BY1450\n.BY1400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR UTIME\n         AGO   .BY1450\n.BY1410 ANOP\n         DC    A(SPFD&NDX)              GET ADDRESS OF GENNED UTIME\n.BY1450 ANOP\n.*\n.*\n         AIF   ('&USER' EQ '').BY1500\n         AIF   ('&USER'(1,1) EQ '''').BY1510\n         DC    A(&USER)                 GET ADDRESS OF USER VARIABLE\n         AGO   .BY1550\n.BY1500 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR USER\n         AGO   .BY1550\n.BY1510 ANOP\n         DC    A(SPFE&NDX)              GET ADDRESS OF GENNED USER\n.BY1550 ANOP\n.*\n.*\n         AIF   ('&ROWCREAT' EQ '').BY1600\n         AIF   ('&ROWCREAT'(1,1) EQ '''').BY1610\n         DC    A(&ROWCREAT)             ADDRESS OF ROWCREAT VARIABLE\n         AGO   .BY1650\n.BY1600 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR ROWCREAT\n         AGO   .BY1650\n.BY1610 ANOP\n         DC    A(SPFF&NDX)              GET ADDRESS OF GENNED ROWCREAT\n.BY1650 ANOP\n.*\n.*\n         AIF   ('&ROWCURR' EQ '').BY1700\n         AIF   ('&ROWCURR'(1,1) EQ '''').BY1710\n         DC    A(&ROWCURR)              ADDRESS OF ROWCURR VARIABLE\n         AGO   .BY1750\n.BY1700 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR ROWCURR\n         AGO   .BY1750\n.BY1710 ANOP\n         DC    A(SPFG&NDX)              GET ADDRESS OF GENNED ROWCURR\n.BY1750 ANOP\n.*\n.*\n         AIF   ('&ROWUPD' EQ '').BY1800\n         AIF   ('&ROWUPD'(1,1) EQ '''').BY1810\n         DC    A(&ROWUPD)               ADDRESS OF ROWUPD VARIABLE\n         AGO   .BY1850\n.BY1800 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR ROWUPD\n         AGO   .BY1850\n.BY1810 ANOP\n         DC    A(SPFH&NDX)              GET ADDRESS OF GENNED ROWUPD\n.BY1850 ANOP\n.*\n.*\n         AIF   ('&TABLEUPD' EQ '').BY1900\n         AIF   ('&TABLEUPD'(1,1) EQ '''').BY1910\n         DC    A(&TABLEUPD)             ADDRESS OF TABLEUPD VARIABLE\n         AGO   .BY1950\n.BY1900 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR TABLEUPD\n         AGO   .BY1950\n.BY1910 ANOP\n         DC    A(SPFI&NDX)              GET ADDRESS OF GENNED TABLEUPD\n.BY1950 ANOP\n.*\n.*\n         AIF   ('&SERVICE' EQ '').BY2000\n         AIF   ('&SERVICE'(1,1) EQ '''').BY2010\n         DC    A(&SERVICE)              ADDRESS OF SERVICE VARIABLE\n         AGO   .BY2050\n.BY2000 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR SERVICE\n         AGO   .BY2050\n.BY2010 ANOP\n         DC    A(SPFJ&NDX)              GET ADDRESS OF GENNED SERVICE\n.BY2050 ANOP\n.*\n.*\n         AIF   ('&RETCODE' EQ '').BY2100\n         AIF   ('&RETCODE'(1,1) EQ '''').BY2110\n         DC    A(&RETCODE)              ADDRESS OF RETCODE VARIABLE\n         AGO   .BY2150\n.BY2100 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR RETCODE\n         AGO   .BY2150\n.BY2110 ANOP\n         DC    A(SPFK&NDX)              GET ADDRESS OF GENNED RETCODE\n.BY2150 ANOP\n.*\n.*\n         AIF   ('&STATUS1' EQ '').BY2200\n         AIF   ('&STATUS1'(1,1) EQ '''').BY2210\n         DC    A(&STATUS1)              ADDRESS OF STATUS1 VARIABLE\n         AGO   .BY2250\n.BY2200 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR STATUS1\n         AGO   .BY2250\n.BY2210 ANOP\n         DC    A(SPFL&NDX)              GET ADDRESS OF GENNED STATUS1\n.BY2250 ANOP\n.*\n.*\n         AIF   ('&STATUS2' EQ '').BY2300\n         AIF   ('&STATUS2'(1,1) EQ '''').BY2310\n         DC    A(&STATUS2)              ADDRESS OF STATUS2 VARIABLE\n         AGO   .BY2350\n.BY2300 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR STATUS2\n         AGO   .BY2350\n.BY2310 ANOP\n         DC    A(SPFM&NDX)              GET ADDRESS OF GENNED STATUS2\n.BY2350 ANOP\n.*\n.*\n         AIF   ('&STATUS3' EQ '').BY2400\n         AIF   ('&STATUS3'(1,1) EQ '''').BY2410\n         DC    A(&STATUS3)              ADDRESS OF STATUS3 VARIABLE\n         AGO   .BY2450\n.BY2400 ANOP\n         DC    A(SPFNULLC)              GET DUMMY PARM FOR STATUS3\n         AGO   .BY2450\n.BY2410 ANOP\n         DC    A(SPFN&NDX)              GET ADDRESS OF GENNED STATUS3\n.BY2450 ANOP\n.*\n.*\n         AIF   ('&LIBRARY' EQ '').BY2500\n         AIF   ('&LIBRARY'(1,1) EQ '''').BY2510\n         DC    A(&LIBRARY+X'80000000')  ADDRESS OF LIBRARY VARIABLE\n         AGO   .BY2550\n.BY2500 ANOP\n         DC    A(SPFNULLC+X'80000000')  GET DUMMY PARM FOR LIBRARY\n         AGO   .BY2550\n.BY2510 ANOP\n         DC    A(SPFO&NDX+X'80000000')  GET ADDRESS OF GENNED LIBRARY\n.BY2550 ANOP\n.*\n.*\nSPFE&NDX DS    0H\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBTOP": {"ttr": 11521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBTOP &TABLE,                  TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBTOP,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBTOP).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBTOP).BYP20\nTBTOP DC       CL8'TBTOP'               ISPF KEYWORD\n&SPFTBTOP SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBTOP                 GET ADDRESS OF TBTOP KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBTOP)                 BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TBVCLEAR": {"ttr": 11524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TBVCLEAR &TABLE,               TABLE NAME                     *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFTBVCLEAR,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n.*\n.**********************************************************************\n.*       GENERAL EDITS\n.**********************************************************************\n.*\n         AIF   ('&TABLE' EQ '').ERR3\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERR2\n.*\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n         AIF   ('&MF(2)' NE '').BYP15\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP17\n.BYP15   ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP17   ANOP\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFTBVCLEAR).GENLIT\n         AIF   ('&TABLE' EQ '').CNT1\n         AIF   ('&TABLE'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFTBVCLEAR).BYP20\nTBVCLEAR DC    CL8'TBVCLEAR'            ISPF KEYWORD\n&SPFTBVCLEAR SETB 1\n.BYP20   ANOP\n         AIF   ('&TABLE' EQ '').BYP40\n         AIF   ('&TABLE'(1,1) NE '''').BYP40\nSPFT&NDX DC    CL8&TABLE                GENERATED TABLE NAME\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,TBVCLEAR              GET ADDRESS OF TBVCLEAR KEYWORD\n         AIF   ('&TABLE' EQ '').BYP100\n         AIF   ('&TABLE'(1,1) EQ '''').BYP110\n         LA    15,&TABLE                GET ADDRESS OF TABLE\n         AGO   .BYP120\n.BYP110  ANOP\n         LA    15,SPFT&NDX              GET ADDRESS OF GENERATED TABLE\n         AGO   .BYP120\n.BYP100  ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR TABLE\n.BYP120  ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  2\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(TBVCLEAR)              BROWSE LITERAL\n         AIF   ('&TABLE' EQ '').BYP200\n         AIF   ('&TABLE'(1,1) EQ '''').BYP210\n         DC    A(&TABLE+X'80000000')    ADDRESS OF TABLE\n         AGO   .BYP220\n.BYP210  ANOP\n         DC    A(SPFT&NDX+X'80000000')  ADDRESS OF GENERATED TABLE\n         AGO   .BYP220\n.BYP200  ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR TABLE\n.BYP220  ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERR2    ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'TABLE NAME IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TPUTE": {"ttr": 11527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    TPUTE &COMMAND,&PARMS=\n         LCLA  &NDX\n&NDX     SETA  K'&COMMAND-2\n&NAME    TPUT  =C&COMMAND,&NDX,&PARMS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VCOPY": {"ttr": 11529, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    VCOPY &VAR,                    NAME LIST                      *\n               &LEN,                    LENGTH ARRAY                   *\n               &VAL,                    VALUE ARRAYS                   *\n               &MOVE,                   FIELD FOR CURSOR               *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVCOPY,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFLOCATE,&SPFMOVE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLA  &COUNT,&LIMIT\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n         AIF   ('&LEN' EQ '').ERR2\n         AIF   ('&VAL' EQ '').ERR3\n         AIF   ('&VAL'(1,1) EQ '''').ERR3\n         AIF   ('&MOVE' NE '' AND '&MOVE' NE 'MOVE' AND                *\n               '&MOVE' NE 'LOCATE').ERR4\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVCOPY).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&LEN' EQ '').CNT2\n         AIF   (T'&LEN EQ 'N').GENLIT\n         AIF   (N'&LEN GT 1).GENLIT\n.CNT2    ANOP\n         AIF   ('&MOVE' EQ '').CNT4\n         AIF   ('&MOVE' EQ 'MOVE' AND NOT &SPFMOVE).GENLIT\n         AIF   ('&MOVE' EQ 'LOCATE' AND NOT &SPFLOCATE).GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVCOPY).BYP20\nVCOPY    DC    CL8'VCOPY'               ISPF KEYWORD\n&SPFVCOPY SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED NAME LIST{\n.BYP30   ANOP\n         AIF   ('&LEN' EQ '').BYP40\n         AIF   (T'&LEN NE 'N' AND N'&LEN EQ 1).BYP40\n&COUNT   SETA  1\nSPFL&NDX DC    F'&LEN(1)'\n.BYP32   ANOP\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT GT N'&LEN).BYP40\n         DC    F'&LEN(&COUNT)'\n         AGO   .BYP32\n.BYP40   ANOP\n         AIF   ('&MOVE' EQ '').BYP90\n         AIF   ('&MOVE' NE 'MOVE' OR &SPFMOVE).BYP85\nMOVE     DC    CL8'MOVE'                ISPF KEYWORD\n&SPFMOVE SETB  1\n.BYP85   ANOP\n         AIF   ('&MOVE' NE 'LOCATE' OR &SPFLOCATE).BYP90\nLOCATE   DC    CL8'LOCATE'              ISPF KEYWORD\n&SPFLOCATE SETB 1\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VCOPY                 GET ADDRESS OF VCOPY KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF NAMELIST\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR NAMELIST\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED NAME\n.BYP1050 ANOP\n.*\n         AIF   (T'&LEN EQ 'N' OR N'&LEN GT 1).BYP1110\n         LA    0,&LEN                   GET ADDRESS OF LENGTH ARRAY\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LENGTH\n.BYP1150 ANOP\n.*\n         AIF   ('&VAL' EQ '').BYP1200\n         AIF   ('&VAL'(1,1) EQ '''').BYP1210\n         LA    1,&VAL                   GET ADDRESS OF VALUE ADDRESS\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VALUE ADDRE\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED VALUE\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n         AIF   ('&MOVE' EQ '').BYP1600\n         LA    14,&MOVE                 GET ADDRESS OF KEYWORD\n         AGO   .BYP1650\n.BYP1600 ANOP\n         LA    14,SPFNULLC              GET DUMMY PARM FOR AUTOSEL\n.BYP1650 ANOP\n.*\n         ST    14,&TEMP+16              STORE PARAMETERS INTO LIST\n         OI    &TEMP+16,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 5).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 5).BYPVARS\n&SPFVARS SETA  5\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VCOPY)                 VCOPY LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR)                  ADDRESS OF NAMELIST\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAMELIST\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED NAMELIST\n.BYP2050 ANOP\n.*\n         AIF   (T'&LEN EQ 'N' OR N'&LEN GT 1).BYP2110\n         DC    A(&LEN)                  ADDRESS OF LENGTH ARRAY\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LENGTHS\n.BYP2150 ANOP\n.*\n         AIF   ('&VAL' EQ '').BYP2200\n         AIF   ('&VAL'(1,1) EQ '''').BYP2210\n         DC    A(&VAL)                  ADDRESS OF STORAGE ADDRESS\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR STORAGE ADDRESS\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX)\n.BYP2250 ANOP\n         AIF   ('&MOVE' EQ '').BYP2600\n         DC    A(&MOVE+X'80000000')     ADDRESS OF KEYWORD\n         AGO   .BYP2650\n.BYP2600 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR KEYWORD\n.BYP2650 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'VCOPY REQUIRES A NAME LIST'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'VCOPY REQUIRES A LENGTH ARRAY'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'VCOPY REQUIRES STORAGE ADDRESS TO STORE DATA IN'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'EXPECTED MOVE/LOCATE KEYWORD - FOUND ''&MOVE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VDEFINE": {"ttr": 11534, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LBL     VDEFINE &NAME,                 NAME LIST                      *\n               &VAR,                    POINTER TO STORAGE             *\n               &FOR,                    FORMAT OF DATA                 *\n               &LEN,                    LENGTH OF FIELD                *\n               &OPT,                    OPTIONS LIST                   *\n               &USER,                   USER DATA FOR EXIT             *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVDEFINE,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFCHAR,&SPFFIXED,&SPFBIT,&SPFHEX,&SPFUSER\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&LBL' EQ '').BYP10\n&LBL     DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&NAME' EQ '').ERR1\n         AIF   ('&VAR' EQ '').ERR2\n         AIF   ('&VAR'(1,1) EQ '''').ERR3\n         AIF   ('&FOR' NE '' AND                                       *\n               '&FOR' NE 'CHAR' AND                                    *\n               '&FOR' NE 'BIT' AND                                     *\n               '&FOR' NE 'FIXED' AND                                   *\n               '&FOR' NE 'USER' AND                                    *\n               '&FOR' NE 'HEX').ERR4\n         AIF   ('&LEN' EQ '').ERR5\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVDEFINE).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&NAME' EQ '').CNT1\n         AIF   ('&NAME'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&FOR' EQ 'CHAR' AND NOT &SPFCHAR).GENLIT\n         AIF   ('&FOR' EQ 'BIT' AND NOT &SPFBIT).GENLIT\n         AIF   ('&FOR' EQ 'FIXED' AND NOT &SPFFIXED).GENLIT\n         AIF   ('&FOR' EQ 'USER' AND NOT &SPFUSER).GENLIT\n         AIF   ('&FOR' EQ 'HEX' AND NOT &SPFHEX).GENLIT\n         AIF   ('&LEN' EQ '').CNT3\n         AIF   (T'LEN EQ 'N').GENLIT\n.CNT3    ANOP\n         AIF   ('&OPT' EQ '').CNT4\n         AIF   ('&OPT'(1,1) EQ '''').GENLIT\n.CNT4    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVDEFINE).BYP20\nVDEFINE  DC    CL8'VDEFINE'             ISPF KEYWORD\n&SPFVDEFINE SETB 1\n.BYP20   ANOP\n         AIF   ('&NAME' EQ '').BYP30\n         AIF   ('&NAME'(1,1) NE '''').BYP30\nSPFN&NDX DC    C&NAME                   GENERATED NAME LIST\n.BYP30   ANOP\n         AIF   ('&FOR' EQ 'CHAR' AND &SPFCHAR).BYP40\n         AIF   ('&FOR' EQ 'FIXED' AND &SPFFIXED).BYP40\n         AIF   ('&FOR' EQ 'BIT' AND &SPFBIT).BYP40\n         AIF   ('&FOR' EQ 'USER' AND &SPFUSER).BYP40\n         AIF   ('&FOR' EQ 'HEX' AND &SPFHEX).BYP40\n&FOR     DC    CL8'&FOR'                ISPF KEYWORD\n         AIF   ('&FOR' NE 'CHAR').BYP32\n&SPFCHAR SETB  1\n.BYP32   ANOP\n         AIF   ('&FOR' NE 'FIXED').BYP33\n&SPFFIXED SETB  1\n.BYP33   ANOP\n         AIF   ('&FOR' NE 'CHAR').BYP34\n&SPFCHAR SETB  1\n.BYP34   ANOP\n         AIF   ('&FOR' NE 'BIT').BYP35\n&SPFBIT SETB  1\n.BYP35   ANOP\n         AIF   ('&FOR' NE 'USER').BYP36\n&SPFUSER SETB  1\n.BYP36   ANOP\n         AIF   ('&FOR' NE 'HEX').BYP40\n&SPFHEX  SETB  1\n.BYP40   ANOP\n         AIF   ('&LEN' EQ '').BYP50\n         AIF   (T'&LEN NE 'N').BYP50\nSPFL&NDX DC    F'&LEN'                  GENERATED LENGTH\n.BYP50   ANOP\n         AIF   ('&OPT' EQ '').BYP60\n         AIF   ('&OPT'(1,1) NE '''').BYP60\nSPFO&NDX DC    C&OPT                    GENERATED OPTION LIST\n.BYP60   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VDEFINE               GET ADDRESS OF VDEFINE KEYWORD\n.*\n         AIF   ('&NAME' EQ '').BYP1000\n         AIF   ('&NAME'(1,1) EQ '''').BYP1010\n         LA    15,&NAME                 GET ADDRESS OF NAMELIST\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR NAMELIST\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFN&NDX              GET ADDRESS OF GENERATED NAME\n.BYP1050 ANOP\n.*\n         LA    0,&VAR                   GET ADDRESS OF STORAGE\n.*\n         LA    1,&FOR                   GET ADDRESS OF FORMAT\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n         AIF   (T'&LEN EQ 'N').BYP1310\n         LA    14,&LEN                  GET ADDRESS OF LENGTH\n         AGO   .BYP1350\n.BYP1310 ANOP\n         LA    14,SPFL&NDX              GET ADDRESS OF GENERATED LEN\n.BYP1350 ANOP\n.*\n         AIF   ('&OPT' EQ '').BYP1400\n         AIF   ('&OPT'(1,1) EQ '''').BYP1410\n         LA    15,&OPT                  GET ADDRESS OF OPTION LIST\n         AGO   .BYP1450\n.BYP1400 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR OPTION\n         AGO   .BYP1450\n.BYP1410 ANOP\n         LA    15,SPFO&NDX              GET ADDRESS OF GENERATED OPT\n.BYP1450 ANOP\n.*\n         AIF   ('&USER' EQ '').BYP1500\n         LA    0,&USER                  GET ADDRESS OF USER DATA\n         AGO   .BYP1550\n.BYP1500 ANOP\n         LA    0,SPFNULLC               DUMMY USER DATA\n.BYP1550 ANOP\n.*\n         STM   14,0,&TEMP+16            STORE PARAMETERS INTO LIST\n         OI    &TEMP+24,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 7).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 7).BYPVARS\n&SPFVARS SETA  7\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VDEFINE)               VDEFINE LITERAL\n.*\n         AIF   ('&NAME' EQ '').BYP2000\n         AIF   ('&NAME'(1,1) EQ '''').BYP2010\n         DC    A(&NAME)                 ADDRESS OF NAMELIST\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAMELIST\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFN&NDX)              ADDRESS OF GENERATED NAMELIST\n.BYP2050 ANOP\n.*\n         DC    A(&VAR)                  ADDRESS OF STORAGE AREA\n.*\n         DC    A(&FOR)                  ADDRESS OF FORMAT TYPE\n.*\n         AIF   (T'&LEN EQ 'N').BYP2310\n         DC    A(&LEN)                  ADDRESS OF LENGTH\n         AGO   .BYP2350\n.BYP2310 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LENGTH\n.BYP2350 ANOP\n.*\n         AIF   ('&OPT' EQ '').BYP2400\n         AIF   ('&OPT'(1,1) EQ '''').BYP2410\n         DC    A(&OPT)                  ADDRESS OF OPT NAME\n         AGO   .BYP2450\n.BYP2400 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR OPT\n         AGO   .BYP2450\n.BYP2410 ANOP\n         DC    A(SPFO&NDX)              ADDRESS OF GENERATED OPT\n.BYP2450 ANOP\n.*\n         AIF   ('&USER' EQ '').BYP2800\n         DC    A(&USER+X'80000000')     ADDRESS OF ROWID NAME\n         AGO   .BYP2850\n.BYP2800 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR ROWID\n.BYP2850 ANOP\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'NAME LIST IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'AN ADDRESS POINTING TO STORAGE MAPPING VARIABLES IS *\n               REQUIRED'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'AN ADDRESS POINTING TO STORAGE MAPPING VARIABLES IS *\n               REQUIRED - MUST NOT BE A LITERAL'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'INVALID FORMAT SPECIFIED'\n         MEXIT\n.ERR5    ANOP\n         MNOTE 16,'LENGTH FIELD IS REQUIRED'\n         MEXIT\n.ERR6    ANOP\n         MNOTE 16,'USER DATA FIELD MUST NOT BE A LITERAL'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VDELETE": {"ttr": 11781, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    VDELETE &VAR,                  NAMELIST                       *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVDELETE,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVDELETE).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVDELETE).BYP20\nVDELETE  DC    CL8'VDELETE'             ISPF KEYWORD\n&SPFVDELETE SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED VAR LIST\n.BYP30   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VDELETE               GET ADDRESS OF VDELETE KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF VAR NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR VAR\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED VAR\n.BYP1050 ANOP\n         STM   14,15,&TEMP              STORE PARAMETERS INTO LIST\n         OI    &TEMP+4,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 2).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 2).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VDELETE)               VDELETE LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR+X'80000000')      ADDRESS OF VAR NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR VAR NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX+X'80000000')  ADDRESS OF GENERATED VAR\n.BYP2050 ANOP\n.*\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE NAME LIST PARAMETER IS REQUIRED'\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VGET": {"ttr": 11784, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    VGET &VAR,                     NAMELIST                       *\n               &POOL,                   VARIABLE POOL                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVGET,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFASIS,&SPFSHARED,&SPFPROFILE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n         AIF   ('&POOL' NE '' AND '&POOL' NE 'ASIS' AND                *\n               '&POOL' NE 'SHARED' AND  '&POOL' NE 'PROFILE').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVGET).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&POOL' EQ 'ASIS' AND NOT &SPFASIS).GENLIT\n         AIF   ('&POOL' EQ 'PROFILE' AND NOT &SPFPROFILE).GENLIT\n         AIF   ('&POOL' EQ 'SHARED' AND NOT &SPFSHARED).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVGET).BYP20\nVGET     DC    CL8'VGET'                ISPF KEYWORD\n&SPFVGET SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED VAR LIST\n.BYP30   ANOP\n         AIF   ('&POOL' EQ '').BYP90\n         AIF   ('&POOL' NE 'ASIS' OR &SPFASIS).BYP82\nASIS     DC    CL8'ASIS'                ISPF KEYWORD\n&SPFASIS SETB  1\n.BYP82   ANOP\n         AIF   ('&POOL' NE 'PROFILE' OR &SPFPROFILE).BYP84\nPROFILE  DC    CL8'PROFILE'             ISPF KEYWORD\n&SPFPROFILE SETB 1\n.BYP84   ANOP\n         AIF   ('&POOL' NE 'SHARED' OR  &SPFSHARED).BYP90\nSHARED   DC    CL8'SHARED'              ISPF KEYWORD\n&SPFSHARED SETB 1\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VGET                  GET ADDRESS OF VGET KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF VAR NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR VAR\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED VAR\n.BYP1050 ANOP\n.*\n         AIF   ('&POOL' EQ '').BYP1100\n         LA    0,&POOL                  GET POOL TYPE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PANEL\n.BYP1150 ANOP\n.*\n         STM   14,0,&TEMP               STORE PARAMETERS INTO LIST\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VGET)                  VGET LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2050 ANOP\n.*\n         AIF   ('&POOL' EQ '').BYP2100\n         DC    A(&POOL+X'80000000')     POOL TYPE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR PANEL NAME\n.BYP2150 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE NAME LIST PARAMETER IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID POOL SPECIFIED - FOUND ''&POOL'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VPUT": {"ttr": 11788, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    VPUT &VAR,                     NAMELIST                       *\n               &POOL,                   VARIABLE POOL                  *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVPUT,&SPFNULLC,&SPFDEBUG,&SPFVAR\n         GBLB  &SPFASIS,&SPFSHARED,&SPFPROFILE\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n         AIF   ('&POOL' NE '' AND '&POOL' NE 'ASIS' AND                *\n               '&POOL' NE 'SHARED' AND  '&POOL' NE 'PROFILE').ERR2\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVPUT).GENLIT\n         AIF   (NOT &SPFNULLC).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&POOL' EQ 'ASIS' AND NOT &SPFASIS).GENLIT\n         AIF   ('&POOL' EQ 'PROFILE' AND NOT &SPFPROFILE).GENLIT\n         AIF   ('&POOL' EQ 'SHARED' AND NOT &SPFSHARED).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVPUT).BYP20\nVPUT     DC    CL8'VPUT'                ISPF KEYWORD\n&SPFVPUT SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED VAR LIST\n.BYP30   ANOP\n         AIF   ('&POOL' EQ '').BYP90\n         AIF   ('&POOL' NE 'ASIS' OR &SPFASIS).BYP82\nASIS     DC    CL8'ASIS'                ISPF KEYWORD\n&SPFASIS SETB  1\n.BYP82   ANOP\n         AIF   ('&POOL' NE 'PROFILE' OR &SPFPROFILE).BYP84\nPROFILE  DC    CL8'PROFILE'             ISPF KEYWORD\n&SPFPROFILE SETB 1\n.BYP84   ANOP\n         AIF   ('&POOL' NE 'SHARED' OR  &SPFSHARED).BYP90\nSHARED   DC    CL8'SHARED'              ISPF KEYWORD\n&SPFSHARED SETB 1\n.BYP90   ANOP\n         AIF   (&SPFNULLC).BYP120\nSPFNULLC DC    CL8'        '            DUMMY ISPF FIELD\n&SPFNULLC SETB  1\n.BYP120  ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VPUT                  GET ADDRESS OF VPUT KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF VAR NAME\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR VAR\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED VAR\n.BYP1050 ANOP\n.*\n         AIF   ('&POOL' EQ '').BYP1100\n         LA    0,&POOL                  GET POOL TYPE\n         AGO   .BYP1150\n.BYP1100 ANOP\n         LA    0,SPFNULLC               GET DUMMY PARM FOR PANEL\n.BYP1150 ANOP\n.*\n         STM   14,0,&TEMP               STORE PARAMETERS INTO LIST\n         OI    &TEMP+8,X'80'            MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 3).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 3).BYPVARS\n&SPFVARS SETA  3\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VPUT)                  VPUT LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR)                  ADDRESS OF VAR NAME\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR VAR NAME\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED VAR\n.BYP2050 ANOP\n.*\n         AIF   ('&POOL' EQ '').BYP2100\n         DC    A(&POOL+X'80000000')     POOL TYPE\n         AGO   .BYP2150\n.BYP2100 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR PANEL NAME\n.BYP2150 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'THE NAME LIST PARAMETER IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'INVALID POOL SPECIFIED - FOUND ''&POOL'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VREPLACE": {"ttr": 12036, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    VREPLACE &VAR,                 NAME LIST                      *\n               &LEN,                    LENGTH ARRAY                   *\n               &VAL,                    VALUE ARRAYS                   *\n               &LOAD=ISPLINK,           ISPLINK ADDRESS                *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVREPLACE,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLA  &COUNT,&LIMIT\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n         AIF   ('&VAR' EQ '').ERR1\n         AIF   ('&LEN' EQ '').ERR2\n         AIF   ('&VAL' EQ '').ERR3\n         AIF   ('&VAL'(1,1) EQ '''').ERR3\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVREPLACE).GENLIT\n         AIF   ('&VAR' EQ '').CNT1\n         AIF   ('&VAR'(1,1) EQ '''').GENLIT\n.CNT1    ANOP\n         AIF   ('&LEN' EQ '').CNT2\n         AIF   (T'&LEN EQ 'N').GENLIT\n         AIF   (N'&LEN GT 1).GENLIT\n.CNT2    ANOP\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVREPLACE).BYP20\nVREPLACE DC    CL8'VREPLACE'            ISPF KEYWORD\n&SPFVREPLACE SETB 1\n.BYP20   ANOP\n         AIF   ('&VAR' EQ '').BYP30\n         AIF   ('&VAR'(1,1) NE '''').BYP30\nSPFV&NDX DC    C&VAR                    GENERATED NAME LIST{\n.BYP30   ANOP\n         AIF   ('&LEN' EQ '').BYP40\n         AIF   (T'&LEN NE 'N' AND N'&LEN EQ 1).BYP40\n&COUNT   SETA  1\nSPFL&NDX DC    F'&LEN(1)'\n.BYP32   ANOP\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT GT N'&LEN).BYP40\n         DC    F'&LEN(&COUNT)'\n         AGO   .BYP32\n.BYP40   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VREPLACE              GET ADDRESS OF VREPLACE KEYWORD\n.*\n         AIF   ('&VAR' EQ '').BYP1000\n         AIF   ('&VAR'(1,1) EQ '''').BYP1010\n         LA    15,&VAR                  GET ADDRESS OF NAMELIST\n         AGO   .BYP1050\n.BYP1000 ANOP\n         LA    15,SPFNULLC              GET DUMMY PARM FOR NAMELIST\n         AGO   .BYP1050\n.BYP1010 ANOP\n         LA    15,SPFV&NDX              GET ADDRESS OF GENERATED NAME\n.BYP1050 ANOP\n.*\n         AIF   (T'&LEN EQ 'N' OR N'&LEN GT 1).BYP1110\n         LA    0,&LEN                   GET ADDRESS OF LENGTH ARRAY\n         AGO   .BYP1150\n.BYP1110 ANOP\n         LA    0,SPFL&NDX               GET ADDRESS OF GENERATED LENGTH\n.BYP1150 ANOP\n.*\n         AIF   ('&VAL' EQ '').BYP1200\n         AIF   ('&VAL'(1,1) EQ '''').BYP1210\n         LA    1,&VAL                   GET ADDRESS OF VALUE ADDRESS\n         AGO   .BYP1250\n.BYP1200 ANOP\n         LA    1,SPFNULLC               GET DUMMY PARM FOR VALUE ADDRE\n         AGO   .BYP1250\n.BYP1210 ANOP\n         LA    1,SPFA&NDX               GET ADDRESS OF GENERATED VALUE\n.BYP1250 ANOP\n.*\n         STM   14,1,&TEMP               STORE PARAMETERS INTO LIST\n.*\n         OI    &TEMP+12,X'80'           MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 4).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 4).BYPVARS\n&SPFVARS SETA  4\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VREPLACE)              VREPLACE LITERAL\n.*\n         AIF   ('&VAR' EQ '').BYP2000\n         AIF   ('&VAR'(1,1) EQ '''').BYP2010\n         DC    A(&VAR)                  ADDRESS OF NAMELIST\n         AGO   .BYP2050\n.BYP2000 ANOP\n         DC    A(SPFNULLC)              DUMMY PARM FOR NAMELIST\n         AGO   .BYP2050\n.BYP2010 ANOP\n         DC    A(SPFV&NDX)              ADDRESS OF GENERATED NAMELIST\n.BYP2050 ANOP\n.*\n         AIF   (T'&LEN EQ 'N' OR N'&LEN GT 1).BYP2110\n         DC    A(&LEN)                  ADDRESS OF LENGTH ARRAY\n         AGO   .BYP2150\n.BYP2110 ANOP\n         DC    A(SPFL&NDX)              ADDRESS OF GENERATED LENGTHS\n.BYP2150 ANOP\n.*\n         AIF   ('&VAL' EQ '').BYP2200\n         AIF   ('&VAL'(1,1) EQ '''').BYP2210\n         DC    A(&VAL+X'80000000')      ADDRESS OF STORAGE ADDRESS\n         AGO   .BYP2250\n.BYP2200 ANOP\n         DC    A(SPFNULLC+X'80000000')  DUMMY PARM FOR STORAGE ADDRESS\n         AGO   .BYP2250\n.BYP2210 ANOP\n         DC    A(SPFA&NDX+X'80000000')\n.BYP2250 ANOP\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERR1    ANOP\n         MNOTE 16,'NAME LIST IS REQUIRED'\n         MEXIT\n.ERR2    ANOP\n         MNOTE 16,'LENGTH VALUES OR ADDRESS REQUIRED'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 16,'VALUE ADDRESS REQUIRED'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 16,'EXPECTED MOVE/LOCATE KEYWORD - FOUND ''&MOVE'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VRESET": {"ttr": 12040, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    VRESET &LOAD=ISPLINK,          ISPF ADDRESS                   *\n               &MF=I                    MACRO FORMAT\n.*\n.**********************************************************************\n.*       GLOBALS\n.**********************************************************************\n.*\n         GBLB  &SPFVRESET,&SPFDEBUG,&SPFVAR\n         GBLA  &SPFVARS,&SPFVARC\n         LCLC  &NDX,&TEMP\n&NDX     SETC  '&SYSNDX'\n         AIF   ('&MF(2)' NE '').BYP0\n&TEMP    SETC  'SPFPARMS'\n         AGO   .BYP00\n.BYP0    ANOP\n&TEMP    SETC  '&MF(2)'\n.BYP00   ANOP\n         AIF   ('&NAME' EQ '').BYP10\n&NAME    DS    0H\n.BYP10   ANOP\n.*\n.**********************************************************************\n.*       EDITS\n.**********************************************************************\n.*\n         AIF   ('&MF(1)' NE 'I' AND                                    *\n               '&MF(1)' NE 'E').ERRMF\n.*\n.**********************************************************************\n.*       CHECK TO SEE IF A BRANCH AROUND LITERALS IS REQUIRED\n.**********************************************************************\n.*\n         AIF   (NOT &SPFVRESET).GENLIT\n         AGO   .BRAREA\n.GENLIT  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE BRANCH AROUND LITERALS AND THE LITERALS\n.*********************************************************************\n.*\n         B     SPF&NDX\n         AIF   (&SPFVRESET).BYP20\nVRESET   DC    CL8'VRESET'              ISPF KEYWORD\n&SPFVRESET SETB 1\n.BYP20   ANOP\nSPF&NDX  DS    0H\n.BRAREA  ANOP\n.*\n.*********************************************************************\n.*       GENERATE THE CALL\n.*********************************************************************\n.*\n         AIF   ('&MF(1)' EQ 'I').MFI\n         LA    14,VRESET                GET ADDRESS OF VRESET KEYWORD\n         ST    14,&TEMP                 STORE PARAMETERS INTO LIST\n         OI    &TEMP,X'80'              MARK LAST PARM\n         LA    1,&TEMP                  GET PARAMETER LIST ADDRESS\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         AIF   (NOT &SPFVAR).BYVAR\n         AIF   (&SPFVARC LT 0).ERRVAR\n         AGO   .BYPVARS\n.BYVAR   AIF   (&SPFVARS GE 0).BYPVARS\n&SPFVARS SETA  0\n.BYPVARS ANOP\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO FORMAT I\n.**********************************************************************\n.*\n.MFI     ANOP\n         CNOP  0,4\n         BAL   1,SPFE&NDX               BRANCH AROUND LITERALS\n         DC    A(VRESET+X'80000000')    VRESET LITERAL\n.*\nSPFE&NDX DS    0H                       MARK LAST PARM\n         L     15,&LOAD                 LOAD ADDRESS OF ISPF\n         BALR  14,15                    CALL ISPF\n         MEXIT\n.*\n.**********************************************************************\n.*       MACRO ERRORS\n.**********************************************************************\n.*\n.ERRMF   ANOP\n         MNOTE 16,'INVALID MACRO FORMAT SPECIFIED - FOUND ''&MF(1)'''\n         MEXIT\n.ERRVAR  ANOP\n         MNOTE 16,'ISPF PARMS MACRO WILL NOT HOLD FULL PARMLIST'\n         MNOTE *,' ISPF PARMS MACRO GENERATE PARMLIST TOO SMALL'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT464/FILE464.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT464", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}