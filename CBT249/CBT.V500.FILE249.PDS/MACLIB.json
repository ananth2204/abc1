{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20141130204511000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 18400, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "SBGOLOB.FILE249.MACLIB", "INMMEMBR": "SBGOLOB.FILE249.MACLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SBGOLOB.FILE249.MACLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 18400, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 1113, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "140334", "DS1SCEXT": "b'\\x80G\\xe0'", "DS1SCALO": "b'P\\x00\\x00\\n'", "DS1LSTAR": "b'\\x00\\t\\x0c'", "DS1TRBAL": "b'\\x1d8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f,\\x90\\x00\\x04\\x99``'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f,\\x90\\x00\\x04\\x99``'", "b'X\\xf5&\\x00\\x00\\x00\\x00x\\x00\\t\\x00y\\x00\\x06\\x00\\r'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ALLOC": {"ttr": 10, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x00\\x82\\x06\\x0f\\x00\\x90'\\x0f\\x11F\\x004\\x004\\x00\\x00\\xc5\\xc9\\xd3\\xc5\\xc5\\xd5@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "1982-03-01T00:00:00", "modifydate": "1990-09-27T11:46:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "EILEEN"}, "text": "         MACRO                                                          ALL00080\n&LABEL   ALLOC  &DSN,&DDNAME,&PASS                                      ALL00090\n         LCLA &N                                                        ALL00100\n         LCLA &D                                                        ALL00110\n         LCLA &L                                                        ALL00120\n         LCLA &S                                                        ALL00130\n         LCLA &P                                                        ALL00140\n         LCLA &SP                                                       ALL00150\n         LCLC &N2                                                       ALL00160\n         LCLC &D2                                                       ALL00170\n         LCLC &L1                                                       ALL00180\n         LCLC &S1                                                       ALL00190\n         LCLC &P2                                                       ALL00200\n         LCLC &SP2                                                      ALL00210\n&N       SETA  K'&DSN                                                   ALL00220\n&D       SETA  K'&DDNAME                                                ALL00230\n&L       SETA  44-K'&DSN                                                ALL00240\n&S       SETA  12-K'&DDNAME                                             ALL00250\n&P       SETA  K'&PASS                                                  ALL00260\n&SP      SETA  10-K'&PASS                                               ALL00270\n&N2      SETC '&N'                                                      ALL00280\n&D2      SETC '&D'                                                      ALL00290\n&L1      SETC '&L'                                                      ALL00300\n&S1      SETC '&S'                                                      ALL00310\n&P2      SETC '&P'                                                      ALL00320\n&SP2     SETC '&SP'                                                     ALL00330\n         AIF  (T'&DSN EQ 'O' OR &N2 GT 44).DSNINV                       ALL00340\n         AIF  (T'DDNAME EQ 'O' OR &D2 GT 8).DDNINV                      ALL00350\n**  1ST LINE                                                            ALL00360\n         DC    C'('                                                     ALL00370\n         DC    CL&N2'&DSN'                                              ALL00380\n         DC    C')'                                                     ALL00390\n         DC    CL&L1' '                                                 ALL00400\n         DC    C'('                                                     ALL00410\n         DC    CL&D2'&DDNAME'                                           ALL00420\n         DC    C')'                                                     ALL00430\n         DC    CL&S1' '                                                 ALL00440\n         AIF   (T'&PASS EQ 'O').NOPASS                                  ALL00450\n         DC    CL&P2'&PASS'                                             ALL00460\n         DC    CL&SP2' '                                                ALL00470\n         SPACE                                                          ALL00480\n         MEXIT                                                          ALL00490\n.NOPASS  ANOP                                                           ALL00500\n         DC    CL10' '                                                  ALL00510\n         MEXIT                                                          ALL00520\n         SPACE                                                          ALL00530\n.DSNINV  ANOP                                                           ALL00540\n         MNOTE 8,'INVALID DSNAME'                                       ALL00550\n         MEXIT                                                          ALL00560\n.DDNINV   ANOP                                                          ALL00570\n         MNOTE 8,'INVALID DDNAME'                                       ALL00580\n         MEND                                                           ALL00590\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONVCODE": {"ttr": 12, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "          MACRO\n&NAME  CONVCODE &IN=0(3),&LEN=0(2),&OUT=0(1)\n&NAME.CONV DS  0H                  CONVERT TO DISPLAY\n         STM   1,3,&NAME.SAVE\n         LA    1,&OUT            ADDR TO MOVE TO\n         LA    3,&IN             FIELD TO CONVERT\n         LA    2,&LEN\n&NAME.GO  DS   0H\n         IC    0,0(3)            LOAD CHAR\n         SRL   0,4                 SHIFT OVER 4 BITS\n         STC   0,&NAME.CHAR        STORE IT\n         NI  &NAME.CHAR,X'0F'     ZERO OUT HI 4 BITS\n         TR   &NAME.CHAR,&NAME.TAB TRANSLATE TO DEC\n         MVC   0(1,1),&NAME.CHAR  MOVE TO OUTPUT\n         MVC  &NAME.CHAR,0(3)     MOVE FIELD\n         NI   &NAME.CHAR,X'0F'    ZERO OUT HI 4 BITS\n         TR  &NAME.CHAR,&NAME.TAB\n         MVC   1(1,1),&NAME.CHAR  MOVE TO TD ...MSGRET\n         LA    3,1(3)\n         LA    1,2(1)\n         BCT   2,&NAME.GO         NEXT BYTE IF ANY\n          LM   1,3,&NAME.SAVE\n           B    &NAME.END\n&NAME.SAVE DS  3F\n&NAME.TAB DC   X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n&NAME.CHAR DS  C\n&NAME.END  DS   0H\n          MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONVDAY": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92\\x17_\\x01\\x00\\to\\x16P\\x00l\\x00i\\x00\\x00\\xc5\\xc9\\xd3\\xc5\\xc5\\xd5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-06-23T00:00:00", "modifydate": "2000-04-05T16:50:00", "lines": 108, "newlines": 105, "modlines": 0, "user": "EILEEN"}, "text": "       MACRO\n&NAME CONVDAY &ADRF                                                     JUL00020\n.*CONVERT JULIAN DATE TO CALENDAR DATE\n.BIN     ANOP                                                           JUL00030\n         STM   0,15,&NAME.SAVE                                          JUL00040\n         SR    0,0                         CLEAR WORK REGISTER          JUL00050\n         SR    1,1                         CLEAR WORK REGISTER          JUL00060\n         CP    &ADRF+2(2),=P'32'                                        JUL00070\n         BNL   &NAME.GO                   NOT FIRST MONTH               JUL00080\n         UNPK  &NAME.DD,&ADRF+2(2)                                      JUL00090\n         OI    &NAME.DD+1,X'F0'                                         JUL00100\n         MVC   &NAME.MM,=CL2'01'                                        JUL00110\n         B     &NAME.GYR                                                JUL00120\n&NAME.GO  DS   0H                                                       JUL00130\n         MVO  &NAME.DW+6(2),&ADRF+1(1)\n         OI   &NAME.DW+7,X'0F'\n         CVB   0,&NAME.DW\n         XC    &NAME.DW,&NAME.DW      FIX FOR LEAP YR\n         MVC  &NAME.DW+6(1),&ADRF+1\n         MVI   &NAME.DW+7,X'0C'     FIX FOR LEAP YR\n         MVO   &NAME.DW+6(2),&NAME.DW+6(1) FIX FOR LEAP YR\n         ICM   1,1,&NAME.LEAP               LAST LEAP YEAR              JUL00150\n         SR    0,1                           SUBTRACT YEARS             JUL00160\n         LTR   0,0                                                      JUL00170\n         BZ    &NAME.SET                 LEAP YEAR                      JUL00180\n         C     0,=F'4'                   IF DIFFERENCE = 4              JUL00190\n         BE    &NAME.SET                 THEN THIS IS LEAP YEAR         JUL00200\n         BL    &NAME.GDAY                IF , 4, THEN NOT LEAP YEAR     JUL00210\n         LR    1,0\n         SR    0,0\n         D     0,=F'4'                   IS RESULT DIVISIBLE BY 4       JUL00220\n         C     0,=F'0'                   TEST REMAINDER                 JUL00230\n         BNE   *+8                        IF REMAINDER = 4, THEN LEAP   JUL00240\n&NAME.SET DS   0H                          SET LEAP YEAR SWITCH         JUL00250\n         OI    &NAME.LSW,X'01'            SET LEAP YEAR SWITCH          JUL00260\n&NAME.GDAY DS  0H                        CALCULATE DAY                  JUL00270\n         SR    0,0                      CLEAR WORK REG                  JUL00280\n         LA    1,1                      INITIALIZE TO 1ST MONTH         JUL00290\n         SR    4,4                      CLEAR WORK REG                  JUL00300\n         ZAP   &NAME.DW,&ADRF+2(2)       ZAP DAY VALUE                  JUL00310\n         CVB   0,&NAME.DW                   CONVERT TO BINARY           JUL00320\n         LA    3,&NAME.RDAY             LOAD NUMB. OF DAYS TABLE        JUL00330\n         CLI   &NAME.LSW,X'01'            IF LEAP YEAR USE LEAP         JUL00340\n         BNE   *+8                      YEAR TABLE                      JUL00350\n         LA    3,&NAME.LDAY            LEAP YEAR TABLE                  JUL00360\n         XC    &NAME.DW(2),&NAME.DW   ZERO WORK AREA                    JUL00370\n         ICM   4,1,0(3)               #DAYS IN FIRST MONTH              JUL00380\n         LA    3,1(3)                  POINT TO SECOND MONTH            JUL00390\n&NAME.CALC DS  0H                       BEGIN CALCULATION               JUL00400\n         LA    1,1(1)      INCREMENT COUNTER-R1 WILL POINT TO MONTH     JUL00410\n         MVC   &NAME.DW+1(1),0(3)             #OF DAYS IN MONTH         JUL00420\n         AH    4,&NAME.DW              ACCUMULATE DAYS SO FAR           JUL00430\n         LA    4,1(4)                                                   JUL00440\n         CR    0,4         IF CUM DAYS+1=JUL DAY, THEN FIRST IN MO      JUL00450\n         BE    &NAME.FIR        FIRST DAY IN MONTH                      JUL00460\n         BCTR  4,0              RESET CUM DAYS                          JUL00470\n         CR    0,4              JUL DAY:CUM DAYS                        JUL00480\n         BE    &NAME.VALG         IF =, THEN LAST DAY IN MONTH          JUL00490\n         BL    &NAME.VSUB         IF <, THEN SUB LAST MONTHS DAYS       JUL00500\n         LA    3,1(3)      POINT TO NEXT MONTHS DAYS                    JUL00510\n         B     &NAME.CALC        REPEAT UNTIL JUL DAY NOT HIGHER        JUL00520\n&NAME.FIR  DS   0H               DAY = FIRST IN MONTH                   JUL00530\n         LA    1,1(1)             INCREMENT MONTH                       JUL00540\n         LA    0,1                SET DAY TO ONE                        JUL00550\n         B     &NAME.DONE                                               JUL00560\n&NAME.VALG DS   0H               DAY = LAST IN MONTH                    JUL00570\n******   LA    3,1(3)            POINT TO NEXT MONTHS DAYS              JUL00580\n         SR     0,0                                                     JUL00590\n         ICM    0,1,0(3)         VALUE=#DAYS IN MONTH                   JUL00600\n         B      &NAME.DONE                                              JUL00610\n&NAME.VSUB DS   0H                 SUBTRACT VALUE FROM CUM DAYS         JUL00620\n         MVC   &NAME.DW+1(1),0(3)   #DAYS IN CURRENT MONTH              JUL00630\n           SH   4,&NAME.DW          SUBTRACT DAYS FROM CUM DAYS         JUL00640\n           SR   0,4                 JUL DAY-CUM DAYS=DAY VAL            JUL00650\n           B    &NAME.DONE                                              JUL00660\n&NAME.DONE DS   0H                 FORMAT CALCULATED DATE               JUL00670\n**AT THIS  POINT R0 CONTAINS THE DAY; R1 CONTAINS THE MONTH (-1)        JUL00680\n           STH  0,&NAME.BIMO      SAVE DAY IN BINARY                    JUL00690\n           STH  1,&NAME.BMON      SAVE DAY IN BINARY                    JUL00690\n           CVD  1,&NAME.DW        CONVERT MONTH TO DECIMAL              JUL00700\n           OI   &NAME.DW+7,X'0F'   STRIP SIGN                           JUL00710\n           UNPK &NAME.MM,&NAME.DW+6(2) UNPACK MONTH                     JUL00720\n           CVD  0,&NAME.DW        CONVERT DAY   TO DECIMAL              JUL00730\n           OI   &NAME.DW+7,X'0F'   STRIP SIGN                           JUL00740\n           UNPK &NAME.DD,&NAME.DW+6(2) UNPACK DAY                       JUL00750\n&NAME.GYR  DS   0H                                                      JUL00760\n           MVI  &ADRF+2,X'0C'      PACK YEAR                            JUL00770\n           SRP  &ADRF.(3),63,0    SHIFT HALF BYTE TO RIGHT              JUL00780\n           OI   &ADRF+2,X'0F'      STRIP SIGN                           JUL00790\n           UNPK &NAME.YY,&ADRF+1(2)  UNPACK YEAR AND STORE              JUL00800\n         LM    0,15,&NAME.SAVE                                          JUL00810\n         B     &NAME.E                                                  JUL00820\n&NAME.RDAY DC X'1F1C1F1E1F1E1F1F1E1F1E1F'  DAYS IN MONTH                JUL00830\n&NAME.LDAY DC X'1F1D1F1E1F1E1F1F1E1F1E1F'  DAYS IN MONTH-LEAPYEAR       JUL00840\n.*&NAME.LEAP DC X'50'          LAST LEAP YEAR WAS 1980                  JUL00850\n&NAME.LEAP DC X'00'          LAST LEAP YEAR WAS 2000                    JUL00850\n&NAME.LSW  DC X'00'          SWITCH FOR LEAP YEAR                       JUL00860\n&NAME.MM   DS CL2                                                       JUL00870\n&NAME.DD   DS CL2                                                       JUL00880\n&NAME.YY   DS CL2                                                       JUL00890\n&NAME.JDAY DS PL2                                                       JUL00900\n&NAME.BIMO DS H                                                         JUL00910\n&NAME.BMON DS H                                                         JUL00910\n&NAME.SAVE DS 9D                                                        JUL00920\n&NAME.DW   DS D                                                         JUL00930\n.END     ANOP                                                           JUL00940\n&NAME.E  DS  0H                                                         JUL00950\n         MEND                                                           JUL00960\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONVHEX": {"ttr": 14, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "        MACRO\n&NAME  CONVHEX &IN=(2),&OUT=(1),&LEN=(0),&WORK=(5)\n&NAME   DS  0H   CONVERT ERROR CODES FOR DISPLAY\n.*ADDR OF WORK AREA IN R5; OUTPUT AREA IN R1; INPUT AREA IN R2; LEN R0\n.*LEN CAN BE REG OR ABS VALUE\n        LCLC  &WR\n        LCLC  &IR\n        LCLC  &OR\n        LCLC  &LR\n.SETWORK ANOP\n        AIF   ('&WORK'(1,1) EQ '(').SETWREG\n&WR     SETC  '&WORK'\n        AGO   .SETIN\n.SETWREG ANOP\n&WR     SETC  '0&WORK'   SET WORK ADDR\n        AGO   .SETIN\n.SETIN  ANOP\n        AIF   ('&IN'(1,1) EQ '(').SETIREG\n&IR     SETC  '&IN'      SET INPUT ADDR\n        AGO  .SETOUT\n.SETIREG  ANOP\n&IR     SETC  '0&IN'     SET INPUT ADDR\n        AGO  .SETOUT\n.SETOUT  ANOP\n        AIF   ('&OUT'(1,1) EQ '(').SETOREG\n&OR     SETC  '&OUT'      SET OUTPUT ADDR\n        AGO  .SETLEN\n.SETOREG ANOP\n&OR     SETC  '0&OUT'     SET OUTPUT ADDR\n        AGO  .SETLEN\n.SETLEN ANOP\n        AGO  .ALLSET\n.ALLSET  ANOP\n&NAME.CONV DS  0H\n.*CONVERT HEX CODES TO DISPLAY\n     STM   14,12,&WR\n         LA    3,&IR               FIELD TO CONVERT-1\n         BCTR  3,0\n        LA 1,&OR             ADDR TO MOVE TO - 2\n        BCTR  1,0\n        BCTR  1,0\n        AIF   (K'&LEN LT 3).ABSLEN\n        AIF   (K'&LEN GT 3).LR2\n        AIF    ('&LEN'(1,1) NE '(').ABSLEN  L'FIELD\n&LR     SETC  '&LEN'(2,1)\n        LR    2,&LR             LEN OF FIELD\n        AGO   .GOCONV\n.LR2     ANOP\n        AIF    ('&LEN'(1,1) NE '(').ABSLEN  L'FIELD\n&LR      SETC  '&LEN'(2,2)\n         LR   2,&LR             LEN OF FIELD\n         AGO  .GOCONV\n.ABSLEN  ANOP     LEN ABS VALUE  LEN OF FIELD\n         LA    2,&LEN            LEN OF FIELD\n         AGO  .GOCONV\n.GOCONV  ANOP\n******\n&NAME.GO DS    0H\n         LA    1,2(1)              ADDR TO MOVE TO\n         LA    3,1(3)              FIELD TO CONVERT\n         IC    0,0(3)              LOAD CHAR\n         SRL   0,4                 SHIFT OVER 4 BITS\n         STC   0,&NAME.CHAR        STORE IT\n         NI   &NAME.CHAR,X'0F'    ZERO OUT HI 4 BITS\n         TR  &NAME.CHAR,&NAME.TAB  TRANSLATE TO DEC\n         MVC   0(1,1),&NAME.CHAR  MOVE TO TD ...\n         MVC &NAME.CHAR,0(3)      MOVE FIELD\n         NI  &NAME.CHAR,X'0F'     ZERO OUT HI 4 BITS\n         TR  &NAME.CHAR,&NAME.TAB  TRANSLATE TO DEC\n         MVC   1(1,1),&NAME.CHAR  MOVE TO TD ...MSGRET\n         BCT   2,&NAME.GO         NEXT BYTE IF ANY\n      LM   14,12,&WR\n       B    &NAME.END\n&NAME.TAB DC   X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n&NAME.CHAR DS  X\n&NAME.END DS 0H\n       MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAYOFWK": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x008\\x00\\x92 /\\x01\\x00\\x00\\x1f\\x10!\\x002\\x00+\\x00\\x00\\xc5\\xc9\\xd3\\xc5\\xc5\\xd5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-07-20T00:00:00", "modifydate": "2000-01-01T10:21:38", "lines": 50, "newlines": 43, "modlines": 0, "user": "EILEEN"}, "text": "          MACRO\n&NAME     DAYOFWK  &JDATE\n           STM   2,3,&NAME.SAVE\n           SR    0,0\n           SR    1,1\n           SR    3,3\n           ICM   0,3,&JDATE+2    JUL DAY\n           ST    0,&NAME.DW+4\n           CVB   0,&NAME.DW\n           IC    1,&JDATE+1       YEAR\n            LA   2,&NAME.TAB\n&NAME.TYR   DS   0H\n            CLI  0(2),X'FF'\n            BE    &NAME.SETZ\n            CLM   1,1,0(2)    SAME YEAR\n             BE   &NAME.FYR\n             LA   2,2(2)   NEXT ENTRY\n             B   &NAME.TYR\n&NAME.FYR    DS    0H   MATCHING YEAR FOUND\n             IC   3,1(2)  DAY OF NEW YEARS FOR GIVEN YEAR\n             LR   1,0   SET DAY\n             SR   0,0\n             BCTR 1,0       -1\n             D  0,=F'7'  DIVIDE BY 7\n             LR  1,0     REMAINDER\n             AR   1,3    ADD TO DAY OF NEW YEARS\n             CH   1,=H'7'\n              BNH  *+8\n              SH  1,=H'7'\n              LTR  1,1\n              BNZ  *+8\n              LA  1,1\n             STC  1,&NAME.DYWK\n            B   &NAME.WOUT\n&NAME.SETZ  DS   0H\n            MVI &NAME.DYWK,X'00'\n            B   &NAME.WOUT\n.* TABLE REPRESENTS DAY OF WEEK FOR JAN 1 IN GIVEN YEAR\n.* (EG 1/1/93 IS ON A FRIDAY)\n*NAME.TAB  DC X'92049306940795019602970498059906'\n&NAME.TAB  DC X'000701020203030404050507060107020803090510061107'\n           DC X'FFFF'\n&NAME.DYWK  DS  X\n&NAME.SAVE  DS   2F\n&NAME.DW    DS   D\n&NAME.WOUT   DS   0H\n             LM   2,3,&NAME.SAVE\n            SR   0,0\n            IC   0,&NAME.DYWK\n            MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEPACK": {"ttr": 16, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "        MACRO\n&N      DEPACK  &IN=,&OUT=,&OLEN=,&ILEN=\n        LCLA  &C1,&C2,&C3\n&C2     SETA  L'&OUT\n        AIF ('&OLEN' EQ '').NOLEN\n&C2    SETA  &OLEN\n.NOLEN  ANOP\n&C1     SETA L'&IN\n        AIF ('&ILEN' EQ '').GOTILEN\n&C1     SETA &ILEN\n        AGO .GOTILEN\n.GOTILEN ANOP\n&C3      SETA &C1+1\n        MVC &N.WORK(&C1),&IN\n       MVI &N.WORK+&C1,X'0C'\n       SRP &N.WORK(L'&N.WORK),63,0\n       UNPK &OUT.(&C2),&N.WORK(&C3)\n       OI  &OUT+&C2-1,X'F0'\n.OUT  ANOP\n        B  &N.MEND\n&N.WORK DS  CL(&C1+1)\n&N.MEND DS  0H\n       MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DFHIRPD": {"ttr": 18, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                 @BBDJ10X\n         DFHIRPD  ,                                            @BBDJ10X\n.**********************************************************************\n.*                                                                    *\n.* MACRO NAME = DFHIRPD                                               *\n.*                                                                    *\n.* DESCRIPTIVE NAME = INTER-REGION COMMUNICATION PROGRAM DSECTS       *\n.*                                                                    *\n.*  COPYRIGHT = 5655-018 (C) COPYRIGHT IBM CORP. 1979  1994           *\n.*              THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"          *\n.*              LICENSED MATERIALS - PROPERTY OF IBM                  *\n.*              REFER TO COPYRIGHT INSTRUCTIONS                       *\n.*              FORM NUMBER G120-2083                                 *\n.*                                                                    *\n.* STATUS = 4.1.0                                                     *\n.*                                                                    *\n.* CHANGE ACTIVITY :                                                  *\n.*  $MAC(DFHIRPD) COMP(IRC) PROD(CICS/ESA)   :                        *\n.*                                                                    *\n.*   PN= REASON REL YYMMDD HDXIII : REMARKS                           *\n.*  $D1= I01597 170 8402   HD0EGA : REWORK DCR                        *\n.*  $D2= I03170 310 870904 HD5LL  : MRO BATCHING                      *\n.*  $L1= J31    160 8204   HD8STC : FIX RECOVERY ERRORS IN IRP        *\n.*  $L2= J41    161 8210   HD0RJS : CROSS MEMORY SUPPORT              *\n.*  $L3= J45    170 8508   HD1MA  : SUPPORT VAE (VSE)                 *\n.*  $L4= 504    320 890410 HD2UJAH: 31 bit support for IRP cntrl blks *\n.*  $L5= 415    320 8909   HD2YAIH: SUPPORT INTER REGION WORK EXITS   *\n.*   $L6= 660    410 921110 HD5KASR : Add EXCI support                *\n.*  $L8= 641    410 930203 HD5LL  : XCF, dynamic ADD & EXCI sup@BA58600\n.*   $L9= 641    410 930518 HD2AIGR : XCF macros                     *\n.*   $LA= 641    410 930728 HD2YAIH : handle XCFBUSY conditions      *\n.*  $P1= M32244 170 860226 HD1MA  : CORRECT ATTACH FOR ICCF           *\n.*  $P2= M56295 310 890626 HD0VCAP: New exits (eg to simulate XM post)*\n.*  $P3= M90378 330 910702 HD2JPEH: FESTAE parameter list             *\n.*  $P4= M91572 330 911206 HD2JPEH: Symbolic value for maximum logons *\n.*   $P5= M83382 410 930924 HDATPMH : Move SCTE to DFHSABDS           *\n.*                                                                    *\n.**********************************************************************\n.* * *         G L O B A L   D E F I N I T I O N S                * * *\n.**********************************************************************\n         GBLB  &MVS        MVS INDICATOR                       @BBDJ10X\n         DFHEJECT\n         SPACE 2\n***********************************************************************\n* *      SUBPOOL DEFINITION AND USAGE.                              * *\n***********************************************************************\n         SPACE 1\n.*** SP129    EQU   129                 LARGE  DELETED BY APAR @BA58600\n.*** SP130    EQU   130                 SMALL  DELETED BY APAR @BA58600\nSPXSQC   EQU   252                 XCF small quick-cells       @BA58600\nSPXLQC   EQU   252                 XCF large quick-cells       @BA58600\nSP231    EQU   231 - CSA, CICS KEY, FETCH PROTECTED\nSPLQC      EQU   SP231     LARGE QUICK CELLS                   @BM14248\n         SPACE 1                                               @BM14248\nSP241    EQU   241 - CSA, CICS KEY, NON-FETCH PROTECTED        @BM14248\nSPSQC      EQU   SP241     SMALL QUICK CELLS                   @BM14248\nSPLCB      EQU   SP241     LCB & CCB                           @BM14248\nSPSCTE     EQU   SP241     SCTE & SSVT                         @BM14248\nSPLACB     EQU   SP241     LACB                                @BM14248\nSPSUDB     EQU   SP241     SUDB                                @BM14248\n         SPACE 1                                               @BM14248\nSP230    EQU   230 - Private,task related,requestor key,non fetch prot F\n                                                                   @D2A\nSPSAVE   EQU   230         WORK SPACE AREA, SUDB & SRB             @LBC\nSPLCBX   EQU   SP230               Subpool for XCF blocks      @BA58600\nSP245    EQU   245 - SQA, KEY 0, NON-FETCH PROTECTED SUBPOOL   @BM14248\nSPSRB      EQU   SP245     SRB                                 @BM14248\n.*** SPSQA    EQU   SP245                      DELETED BY APAR @BA58600\nSPTQE    EQU   SP245                                               @LAA\n         SPACE 1                                               @BM14248\nSP251    EQU   251 - TASK-LOCAL, CICS KEY, FETCH PROTECTED     @BM14248\nSPSLCB     EQU   SP251     SLCB, SCACB & SCCB                  @BM14248\n         SPACE 1                                               @BM14248\n.*** SP252    EQU   252 - TASK-LOCAL, KEY 0, N DELETED BY APAR @BA58600\nSPSSOB     EQU   SP230     SSOB & SSIB                         @BM14248\nSPLCL      EQU   SP230     COPY OF LOGON CONNECTION LIST           @LBC\n         SPACE 1                                               @BM14248\n.*** SP253    EQU   253 -LSQA TASK RELATED, KE DELETED BY APAR @BA58600\nSPUCA      EQU   SP241     USE COUNT ARRAY                 @FJ410R @L3A\n         DFHEJECT\n***********************************************************************\n* * * *                                                         * * * *\n* * * *  THE FOLLOWING DSECTS DEFINE THE CONTROL BLOCKS USED    * * * *\n* * * *  INTERNALLY BY THE INTER-REGION PROGRAM ONLY.  THEY     * * * *\n* * * *  ARE NOT USED BY ANY OTHER PROGRAMS AND THEIR FORMAT    * * * *\n* * * *  IS NOT PART OF ANY EXTERNAL INTERFACE.                 * * * *\n* * * *                                                         * * * *\n* * * *  THE DSECTS INCLUDED  ARE:                              * * * *\n* * * *                                                         * * * *\n* * * *  SUDB     SUBSYSTEM USER DEFINITION BLOCK               * * * *\n* * * *  LACB(E)  LOGON ADDRESS CONTROL BLOCK                   * * * *\n* * * *  LCB(E)   LOGON CONTROL BLOCK                           * * * *\n* * * *  CCB      CONNECTION CONTROL BLOCK                      * * * *\n* * * *  CSB      CONNECTION STATUS BLOCK                       * * * *\n* * * *                                                         * * * *\n***********************************************************************\n         SPACE 5                                               @BBDJ10X\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          SUBSYSTEM USER DEFINITION CONTROL BLOCK            * * *\n* * *                                                             * * *\n* * *    THE SUDB IS USED BY THE SVC TO REPRESENT THE             * * *\n* * *    CONNECTION BETWEEN A TASK USING THE SVC AND THE          * * *\n* * *    SVC CONTROL BLOCKS.                                      * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nSUDB     DSECT                                                 @BBDJ10X\nSUDBCHN  DS    A           ADDRESS OF NEXT SUDB                @BM13339\nSUDBLACB DS    A           ADDRESS OF LACB                     @BBDJ10X\nSUDBUID  DS    D           USER IDENTIFICATION                 @BBDJ10X\n         ORG   SUDBUID                                         @BBDJ104\nSUDBTCB  DS    A           Address of owning TCB               @BBDJ104\n         DS    H                                               @BBDJ104\nSUDBASID DS    H                   ASID of owning address space@BBDJ104\nSUDBJSDB DS    A           Pointer to job-step life-time SUDB      @L8A\nSUDBASCB DS    A           ADDRESS OF THE ASCB                 @BBDJ104\nSUDBJSB  DS    A           Pointer to IRP job-step block           @L8A\nSUDBAWS  DS    A           Address of working storage          @BM14268\nSUDBLCB  DS    A           ADDRESS OF FIRST OR ONLY LCB        @BBDJ10X\nSUDBECB  DS    F           ECB for IRWAITLK/X & IRWAITFP           @L8A\nSUDBTARG DS    A           LG of target LACBE (IRSETFP)    @FJ410R @L2C\nSUDBSR   DS    F           SRB SCHEDULE RECOVERY DATA. CONTAINS    @D1A\n*                          ..TARGET LG WHILE SRB BEING SCHEDULED\n         SPACE 1                                               @BBDJ10X\nSUDBUCA  DS    A           Pointer to XM UCA (job-step SUDB)       @L8A\nSUDBAXR# DS    H           No. of AXs required for AXRES (one)     @L8A\nSUDBAX   DS    H           XM authorization index (job-step SUDB)  @L8A\nSUDBJLLG DS    F           Index & generation no. of life of job-step  X\n                           LACBE                                   @L8A\n         SPACE 1                                               @BM14268\nSUDBAUDT DS    0XL12          AUDIT FIELDS                     @BA63731\nSUDBRCCB DS    A           Current request's CCB ptr. for recov@BA58600\nSUDBRLCB DS    A           Current request's LCB ptr. for recov@BA63731\nSUDBAFL1 DS    X           .. AUDIT FLAG 1                     @BBDJ10X\nSUDBAFPS EQU   X'80'               Foot-print is definitely set@BA58600\n*        EQU   X'40'          .. reserved                      @BBDJ10X\n*        EQU   X'20'          .. reserved\n*        EQU   X'10'          .. reserved                      @BBDJ10X\n*        EQU   X'08'          .. reserved\nSUDBAFL2 DS    X           .. AUDIT FLAG 2                     @BM14095\nSUDBAEOM EQU   X'80'          .. EOM EXIT ACTIVE (MVS ONLY)        @L3C\nSUDBAXMA EQU   X'40'               XM initialization / termination     X\n                                   active                          @L8A\n         DS    XL2         .. RESERVED                         @BM14095\n         DS    0S(*-SUDBAUDT-L'SUDBAUDT,L'SUDBAUDT+SUDBAUDT-*) @BA63731\n.*** SUDBWORK DS    2F          WORK AREA      DELETED BY APAR @BA63731\nSUDBSAV2 DS    4F          LEVEL 2 SAVE AREA                   @BM14268\nSUDBALN  DS    0D                                              @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nSUDBLEN  EQU   *-SUDB      LENGTH OF SUDB                      @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          WORK AREA AT END OF THE SRB USED BY SRB PROCESSING * * *\n* * *     RATHER THAN THE SUDB SAVE AREA.                         * * *\n* * *                                                             * * *\n***********************************************************************\n         DFHEJECT ,\n***********************************************************************\n*        Quick cell DSECTS                                            *\n***********************************************************************\n         SPACE 1\nQCCTL    DSECT ,                   Quick cell anchor               @L8A\nQCELM    DC    H'16'               Size of element                 @L8A\nQCSP#    DC    Y(SPSQC)            subpool #                       @L8A\nQCSTOR   DC    F'512'              size of block for getmain       @L8A\nQC#CELL  DC    Y(X'1F')            Number of cells in block        @L8A\n         DC    H'0'                Reserved                        @L8A\nQCFREE   DC    A(0)                storage blocks for freeing      @L8A\n         DS    0D                  align for CDS                   @L8A\nQCSEC    DC    F'0'                security count                  @L8A\nQCANCH   DC    A(0)                anchor of blocks                @L8A\n         SPACE 1\nQCCLEN   EQU   *-QCCTL             length of quick cell ctl. blk.  @L8A\n         SPACE 3\n***********************************************************************\n*  Index values corresponding to different types of small quick-cell  *\n***********************************************************************\nQCIXMXWS EQU   1                   Message Exit Working Storage    @L8A\nQCIXPHB  EQU   2                   Partner History Block           @L8A\nQCIXS#HE EQU   3                   Session Numbers Handled Element @L8A\nQCIXMQE  EQU   4                   Message Queue Element           @L8A\nQCIIRRXE EQU   5                   XCFBUSY Deferred msg element    @LAA\nQCIXMAX  EQU   5                   Maximum small quick-cell index  @LAC\n         SPACE 3\nQCBLK    DSECT ,                   Quick cell block                @L8A\nQCCHAINF DC    A(0)                forward chain                   @L8A\n         DC    A(0)                reserved - wasn't used !!!      @L8A\nQCCHAIN  DS    0A                  start of cell entries           @L8A\n         SPACE 3\nQCELL    DSECT ,                   Cell element                    @L8A\nQCELLNX  DS    A                   next cell                       @L8A\nQCELST   DS    0F                  start of data                   @L8A\n         DFHEJECT\n***********************************************************************\n*        Job Step Block                                               *\n***********************************************************************\nJSB      DSECT                     IRP job-step block              @L8A\nJSBSP    EQU   252                 Subpool for job-step block - must   X\n                                   be allocated to ACSBXTCB by branch  X\n                                   entry to GETMAIN in case DFHIRP     X\n                                   runs under a TCB ATTACHEd with      X\n                                   JSTCB=YES                       @L8A\nJSBSCTE  DS    A                   Pointer to SCTE if this JSB is      X\n                                   included in SCTECNT; zero if not@L8A\nJSBEOMRT DS    F                   Token for EOM resource manager so   X\n                                   that it can be deleted at EOT   @L8A\nJSBEOTRT DS    F                   Token for ASCBXTCB's EOT resource   X\n                                   manager                     @BA63731\nJSBXCFTR DS    A                   Pointer to XCF Trace Table      @L8A\nJSB#LCBS DS    F                   No. of LCBs in address space    @L8A\nJSBTSW#L DS    F                   TRANSWAP use count - no. of LCBs    X\n                                   requiring non-swappability      @L8A\nJSBUCA#L DS    F                   UCA & AX use count - no. of LCBs    X\n                                   with any XM-capable LCBEs       @L8A\nJSBETL#L DS    F                   ET & LX use count - no. of LCBs     X\n                                   that are allowed to use PC for XCF  X\n                                   or having any XM-capable LCBEs  @L8A\nJSBETTKN DS    F                   XM entry table token            @L8A\nJSBLX    DS    H                   XM linkage index                @L8A\nJSBXMFLG DS    X                   XM flags                        @L8A\nJSBXMTSW EQU   X'80'               TRANSWAP completed successfully @L8A\nJSBXMLLG EQU   X'40'               XM-owning LACBE fully allocated @L8A\nJSBXMETC EQU   X'20'               Entry table is connected        @L8A\n.*** JSBXMETH EQU   X'10'               ENTRY  DELETED BY APAR @BA63731\n.***                                    LX MUS DELETED BY APAR @BA63731\n         DS    X                   Reserved                        @L8A\n*** JSBUSRID DS    CL8                    @L8A DELETED BY APAR @BA58600\n         SPACE 2\nJSBQCA   DS    (QCIXMAX)A          Array of pointers to control areas  X\n                                   for small quick-cells           @L8A\nJSBLQCA  DC    A(JSBLQCAN)         ptr. to Large quick cell anch.  @L8A\n         DS    0D                  align for CDS                   @L8A\nJSBQCAN  DS    (QCIXMAX)XL(QCCLEN) Array of control areas for small    X\n                                   quick-cells                     @L8A\n         SPACE 1\n         DS    0D                  align for CDS fields            @L8A\nJSBLQCAN DS    (LQCCTLEN)X         Control area for large quick-cells  X\n                                                                   @L8A\n         SPACE 1\nJSBL     EQU   *-JSB               Length of job-step block        @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          LOGON ADDRESS CONTROL BLOCK                        * * *\n* * *                                                             * * *\n* * *    THE LACB IS USED BY THE INTER-REGION PROGRAM AS AN       * * *\n* * *    INDEX TABLE OF ADDRESSES OF LCBS.  EACH LOGON ADDRESS    * * *\n* * *    CONTROL BLOCK ENTRY (LACBE) REPRESENTS ONE ENTRY IN      * * *\n* * *    THE TABLE.  THE TABLE IS INDEXED BY THE LACBE INDEX      * * *\n* * *    NUMBER WHICH IS STORED IN THE CCB FOR EACH ACTIVE        * * *\n* * *    CONNECTION.                                              * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nLACB     DSECT                                                 @BBDJ10X\nLACBLEN  DS    F           TOTAL LENGTH OF LACB                @BBDJ10X\nLACBNE   DS    H           NUMBER OF LACB ENTRIES              @BBDJ10X\nLACBMAXU DS    H           Maximum number of XM users allowed      @L8A\n         DS    F           Reserved                                @L8C\nLACBSUDB DS    A           SUDB CHAIN ANCHOR                   @BBDJ10X\nLACBSCTE DS    A           ADDRESS OF SCTE                     @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nLACBQCA  DC    A(LACBQCAN)         pointer to Quick cell anchor    @L8A\nLACBLQCA DC    A(LACBLQCN)         pointer to Large quick cell anc @L8A\n         DS    0D                  align for CDS                   @L8A\nLACBQCAN DS    (QCCLEN)X           Quick cell anchor               @L8A\n         SPACE 1                                               @BBDJ10X\n         DS    0D                  align for CDS fields            @L8A\nLACBLQCN DS    (LQCCTLEN)X         Large quick cell anchor         @L8A\n         SPACE 1\nLACB#USR EQU   2047                Number of usable LACBEs         @L8A\nLACBENTY DS    0D          START OF ENTRIES                    @BBDJ104\n         SPACE 3                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            LOGON ADDRESS CONTROL BLOCK ENTRY                    * *\n* *                                                                 * *\n* *      EACH LACBE CONTAINS INFORMATION PERTINENT TO ONE USER      * *\n* *      WHO HAS LOGGED ON.  IT CONTAINS THE USER'S NAME, THE       * *\n* *      ADDRESS OF THE LCB AND THE CONTROLLING FOOTPRINT STRIP.    * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nLACBE    DSECT                                                 @BBDJ10X\nLACBENM  DS    CL8         USERID FOR THIS LOGON               @BBDJ10X\nLACBELG  DS    0F          LACBE INDEX & GENERATION NUMBERS    @BBDJ10X\nLACBEL   DS    H           .. LACBE INDEX NUMBER               @BBDJ10X\nLACBEG   DS    H           .. GENERATION NUMBER                @BBDJ10X\nLACBELCB DS    A           ADDRESS OF LCB                      @BBDJ10X\nLACBEST1 DS    X           STATUS BYTE 1                       @BA58600\n*   The value of status byte 1 specifies the weakest type of   @BA58600\n*   foot-print that may NOT be set.                            @BA58600\n*   If LACBEST1 = 0, no foot-prints may be set.                @BA58600\n*   If LACBEST1 = LACBESCN,  a CONNECT foot-print may not be se@BA58600\n*   the weaker foot-print needed for all other operations may b@BA58600\n*   If LACBEST1 = 2*LACBESCN, any type of foot-print may be set@BA58600\nLACBESCN EQU   X'20'       A CONNECT foot-print is requested by        X\n                           setting this bit to 1 in the first byte     X\n                           of the LG value passed to IRSETFP   @BA58600\n.*** *                          NO FOOTPRINTS  DELETED BY APAR @BA58600\n.***          DS   X            RESERVED       DELETED BY APAR @BA58600\n.*** *ACBENUQ EQU   X'80'       LOGON NAME NEE DELETED BY APAR @BA58600\n         DS    0F                                          @FJ410R @L2C\n         SPACE 1                                               @BBDJ10X\nLACBELEN EQU   *-LACBE     LENGTH OF LACB ENTRY                @BBDJ10X\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          LOGON CONTROL BLOCK.                               * * *\n* * *                                                             * * *\n* * *    THE LCB IS THE SOURCE OF ALL INFORMATION RELEVANT TO A   * * *\n* * *    PARTICULAR LOGON TO THE SVC; THE SUBSYSTEM LOGON CONTROL * * *\n* * *    BLOCK REFLECTS CERTAIN OF THE LCB INFORMATION WHICH IT   * * *\n* * *    IS RELEVANT FOR THE SUBSYSTEM LEVEL OF INTER-REGION      * * *\n* * *    COMMUNICATION FUNCTION TO SEE.  FOR THIS REASON THE      * * *\n* * *    STATUS BYTES IN THE LCB AND THE SLCB ARE IDENTICAL;      * * *\n* * *    FLAGS IN THOSE STATUS BYTES ARE DEFINED WITH THE         * * *\n* * *    DEFINITION OF THE SLCB IN THE DFHIRSDS COPY BOOK.        * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nLCB      DSECT                                                 @BBDJ10X\nLCBUSID  DS    0F          USER IDENTIFICATION                 @BBDJ10X\nLCBUSNUM DS    H           .. USER NUMBER                      @BBDJ10X\nLCBUSRID DS    H           .. USER IDENTIFIER                  @BBDJ10X\nLCBSLCBA DS    A           ADDRESS OF SLCB                     @BBDJ10X\nLCBSUDB  DS    A           ADDRESS OF SUDB                     @BBDJ10X\nLCBCHAIN DS    A           ADDRESS OF NEXT LCB FOR THIS SUDB   @BBDJ10X\nLCBLACBE DS    A           ADDRESS OF LACBE                    @BBDJ10X\n         DS    H           reserved\nLCBSYTOT DS    H           TOTAL NUMBER OF CONNECTABLE SYSTEMS @BBDJ10X\nLCBQICT  DS    F           QUIESCE CONNECTION COUNT            @BBDJ10X\nLCBSLSP  DS    0D          OPERAND FOR CDS INSTRUCTION             @D1A\nLCBSLOCK DS    0F          SRB LOCK USED TO SERIALIZE THE USE OF   @D1A\n*                          ..THE SRB BLOCK BY SCHEDULE AND\n*                          ..PROCESSING OF SRB PARAMETER BLOCK\n*                          ..WORK QUEUE BY THE SRB PROCESSOR\nLCBSLOI  DS    H           POSSIBLE VALUES ARE:                    @D1A\nLCBSLOIF EQU   X'8000'     LOCK NOT HELD                           @D1A\n*                          LACBE INDEX = A TCB HAS SCHEDULED SRB\n*                          ..AND SET ITS LACBE INDEX IN THE LOCK\n*                          ZERO        = SRB HOLDS LOCK\nLCBSLOC  DS    H           COUNTER INCREMENTED EACH TIME A TCB     @D1A\n*                          ..PLACES LACBE INDEX IN LOCK\nLCBSRBP  DS    F           SRB PARAMETER CHAIN                 @BBDJ104\nLCBSRB   DS    F           ADDR OF OUR SRB                     @BBDJ104\nLCBSRBWA DS    F           ADDR OF OUR SRB'S WORK AREA             @D1A\nLCBFRRPM DS    F           ADDRESS OF FRR PARAMETER AREA (UNUSED)  @L3C\nLCBRMTR  DS    H           RESOURCE MANAGER TERMINATION ROUTINE        C\n                           FOR PURGE OF SRBS                       @D1A\nLCBXMREQ DS    BL.8        XM resources needed for this LCB        @L8A\nLCBXMTSW EQU   X'80'       LCB requires / has got a non-swappable      X\n                           address space                           @L8A\nLCBXMUCA EQU   X'40'       LCB requires / has got an XM use count      X\n                           array (UCA) & authorization index (AX)  @L8A\nLCBXMETL EQU   X'20'       LCB requires / has got an entry table &     X\n                           linkage index (LX)                      @L8A\nLCBXMGOT DS    BL.8        XM resources obtained & fully initialized   X\n                           for this LCB and included in the        @L8AX\n                           corresponding JSB use count             @L8A\nLCBSTTUS DS    0F          STATUS BYTES                        @BBDJ10X\nLCBSTTS1 DS    C           .. STATUS BYTE 1                    @BBDJ10X\nLCBSTTS2 DS    C           .. STATUS BYTE 2                    @BBDJ10X\nLCBSTTS3 DS    C           .. STATUS BYTE 3                    @BBDJ10X\nLCBSTTS4 DS    C           .. STATUS BYTE 4                    @BBDJ10X\n         SPACE 1                                                   @D2A\nLCBBTCHV DS    F           Batching value                          @D2C\nLCBBTCHC DS    F           Current batch count                     @D2C\nLCBSVCL  DS    B           Save value of SVCLOC parm               @L4A\n*        EQU   B'10000000' 1... .... Get storage above 16m         @L8C\nLCBWEARR DS    A           address of exit point array             @L5A\nLCBWELTP DS    F           work exit latent parm                   @L5A\nLCBWEACT DS    F           bit map indicating active exits         @L5A\nWENCACT  EQU   X'01'       new connect exit point is active        @L5A\nWESWACT  EQU   X'02'       switch exit point is active             @L5A\nWESW1ACT EQU   X'04'       switch 1st exit point is active         @L5A\nWEDSNACT EQU   X'08'       disconnect normal exit point is active  @L5A\nWEDSAACT EQU   X'10'       disconnect abnormal exit pnt is active  @L5A\nWEIQUACT EQU   X'20'       immediate quiesce exit point is active  @L5A\nWEDWPACT EQU   X'40'       disc when possible exit point is active @L5A\nWEQCACT  EQU   X'80'       Quiesce complete exit point is active   @L5A\nLCBWENME DS    CL8         name of inter region work exit          @L5A\nLCBWETYP DS    0A          work exit type                          @L5A\nLCBWEVER DS    X           work exit version                       @L5A\nWETYP311 EQU   X'00'       311 work exit type                      @L5A\nWETYP320 EQU   X'01'       320 work exit type                      @L5A\n         DS    3X          reserved                                @L5A\n*  The Length/Address ordering of the following must be maintained\nLCBALCBL DS    F           Length of active vector                 @L8A\nLCBALCBV DS    A           Pointer to active LCBE address vector   @L8A\nLCBALCBE DS    A           Pointer to active LCBE chain            @L8A\nLCBASCAL DS    F           Length of active SCACB                  @L8A\nLCBASCAA DS    A           Pointer to active SCACB                 @L8A\nLCB#SCCB DS    F           Total number of SCCBs committed so far  @L8A\nLCBALCBD DS    A           Pointer to active LCBD chain            @L8A\nLCBAPPLD DS    CL8         APPLID (name specified on LOGON request)@L8A\nLCBMEMTK DS    XL8         Our XCF member token from IXCJOIN       @L8A\nLCBRCFGL DS    F           Reconfiguration lock (for dynamic CHANGE@L8A\nLCBRCFGO DS    X'80'       Reconfiguration in progress             @L8A\nLCBCC#   DS    H           Reconfiguration change counter which is @L8A\n*                          used to check whether a CCB address sent@L8A\n*                          in the XCF message control data is still@L8A\n*                          valid (for dynamic CHANGE)              @L8A\n         DS    H           Reserved                                @L8A\nLCBPHB   DS    A           Pointer to first partner history block  @L8A\n*                          for partners whose first XCF message    @L8A\n*                          arrived when this LCB had no active     @L8A\n*                          LCBE for the relevant APPLID            @L8A\nLCBQSYSL DS    F                Length of Group Exit's answer area for X\n                                IXCQUERY REQINFO=SYSPLEX requests  @L8A\nLCBQSYSA DS    A                Pointer to Group Exit's IXCQUERY       X\n                                REQINFO=SYSPLEX answer area        @L8A\nLCBGXWSA DS    A                Pointer to Group Exit's working        X\n                                storage                            @L8A\nLCBIRRX_INSTANCE  DS F          XCF retry SRB instance number      @LAA\n                  DS 0D         align for CDS on lock & q header   @LAA\nLCBIRRX_LOCK      DS A          XCF retry SRB lock                 @LAA\n***********************************************************************\nDIE_LOCKED        EQU 128       serialize access to TQE/SRB        @LAA\n*        This bit is used to serialize access to the TQE and          *\n*        SRB used for XCF MSGO retries. If a dispatchable             *\n*        unit (TCB or SRB) manages to set the DIE_LOCKED bit on       *\n*        then it may then set the DIE, the DIE will then              *\n*        schedule the SRB.                                            *\n***********************************************************************\n                  SPACE 1                                          @LAA\n***********************************************************************\nDIE_DISABLED      EQU 64                                           @LAA\n*        This bit is set during clear/logoff processing and indicates *\n*        that the DIE willnever be scheduled again. If this bit is on *\n*        then the DIE_LOCKED bit will also be on indicating that      *\n*        the DIE is locked to the termination process.                *\n*        This bit is neccessary so that if an unexpected message      *\n*        arrives in the message exit, and the reply generated within  *\n*        the message exit fails for an XCF busy condition then we can *\n*        detect that the message will never be resent.                *\n***********************************************************************\nLCBIRRX_Q         DS A          XCR retry SRB work queue head      @LAA\nLCBIRRX_TQE       DS A          Address of the XCF retry TQE       @LAA\nLCBIRRX_SRB       DS A          Address of the XCF retry SRB       @LAA\nLCBIRRX_WS        DS A          Address of the XCF retry SRB W/S   @LAA\nLCBIRRX_TIME      DS D          Time the SRB should next run       @LAA\nLCBIRRX_RMTR      DS H          XCF retry SRB RMTR routine (BR RE) @LAA\n         DS    0D                                              @BBDJ104\n         SPACE 1                                               @BBDJ10X\nLCBLNGTH EQU   *-LCB       LENGTH OF LCB                       @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n         SPACE 5                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            LOGON CONTROL BLOCK ENTRY                            * *\n* *                                                                 * *\n* *      THE LOGON CONTROL BLOCK CONTAINS AN ENTRY (LCBE) FOR       * *\n* *      EACH SYSTEM TO WHICH CONNECTIONS MAY BE MADE, I.E. ONE     * *\n* *      FOR EACH ENTRY IN THE LOGON CONNECTIONS LIST SPECIFIED     * *\n* *      WHEN THE USER LOGGED ON.                                   * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nLCBE     DSECT                                                 @BBDJ10X\nLCBENEXT DS    A                   address of next LCBE        @BA58600\nLCBELCBX DS    A           Pointer to XCF LCBE extension block @BA58600\nLCBECCB  DS    A           ADDRESS OF 1ST CCB FOR THIS SYSTEM  @BBDJ10X\nLCBENUM  DS    0F          NUMBERS OF CCBS FOR SYSTEM          @BBDJ10X\nLCBESNUM DS    H           NUMBER OF SECONDARY CCBS FOR SYSTEM @BBDJ10X\nLCBEPNUM DS    H           NUMBER OF PRIMARY CCBS FOR SYSTEM   @BBDJ10X\nLCBENAM  DS    CL8         NAME OF CONNECTED TO SYSTEM         @BA58600\nLCBEUSID DS    CL8         Our own USERID when we last used this LCBE  X\n                           for an outgoing CONNECT             @BA58600\nLCBELG   DS    F           LG of current partner for out-bound CONNECTsX\n                           - zero if XCF is being used         @BA58600\nLCBEFLG  DS    X           FLAG BYTE                           @BBDJ10X\n*** LCBESECN EQU   X'80'       .. ACCEP BDJ10X DELETED BY APAR @BA58600\nLCBEXMOK EQU   X'80'       .. XM ACCEPTABLE FOR THIS CNECTION          F\n                              MVS ONLY                             @L3C\n         SPACE 1                                               @BBDJ10X\nLCBEDYNF DS    X           Dynamic flags                           @L8C\nLCBEPTOK EQU   X'80'       Current partner's LG or XCF token kn@BA58600\nLCBESEOK EQU   X'40'       Our current USERID is authorized to CONNECT X\n                           to the current partner instance     @BA58600\nLCBEQUSC EQU   X'20'       LCBE in quiesce                             X\n                                                                   @L8A\nLCBEINDX DS    H           This LCBE's index in LCBE address vector@L8A\n*** LCBENEXT DS    A                      @L8A DELETED BY APAR @BA58600\n*** LCBELCBX DS    A           Pointer    @L8A DELETED BY APAR @BA58600\n*** LCBELG   DS    F           LG of cu NNECTs DELETED BY APAR @BA58600\n***                                       @L8A DELETED BY APAR @BA58600\n         DS    0D          Force length to multiple of 8       @BA58600\nLCBELEN  EQU   *-LCBE                                          @BBDJ10X\n         SPACE 3                                                   @L8A\nLCBEVECT DSECT                     LCBE address vector             @L8A\nLCBEVELM DS    A                   LCBE element address            @L8A\n         SPACE 3\nLCBD     DSECT                     LCBE block prefix               @L8A\nLCBDTOKN DS    CL8                 Token for block add             @L8A\nLCBDFLG  DS    B                   Flag byte                       @L8A\nLCBDFROK EQU   X'80'               ROLL-BACK is valid for this @BA58600\nLCBDFCOK EQU   X'40'               COMMIT is valid for this LCB@BA58600\n         DS    3X                  reserved                        @L8A\n* The length/address ordering of the following must be maintained\nLCBDLEN  DS    F                   Length of this block & prefix   @L8A\nLCBDNEXT DS    A                   pointer to next block or 0      @L8A\nLCBDEXTL DS    F                   Length of extension block       @L8A\nLCBDEXTP DS    A                   Pointer to XCF extension block  @L8A\nLCBDSCCL DS    F                   Length of SCCB block            @L8A\nLCBDSCCP DS    A                   pointer to SCCB block           @L8A\n         DS    0D                  round to double word            @L8A\nLCBDL    EQU   *-LCBD              length of this prefix           @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            XCF LOGON CONTROL BLOCK ENTRY EXTENSION              * *\n* *                                                                 * *\n* *      THE XCF EXTENSION TO THE LCBE CONTAINS XCF SPECIFIC        * *\n* *      INFORMATION REGARDING CONNECTIONS TO OTHER SYSTEMS. THIS   * *\n* *      BLOCK IS GETMAINED FROM PRIVATE STORAGE WHEN THE           * *\n* *      CORRESPONDING LCBE IS ACQUIRED.                            * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1\nLCBEX    DSECT\nLCBEXPHB DS    A           Pointer to first partner history block  @L8A\n*                          for partners whose APPLID matches that  @L8A\n*                          in the LCBE (LCBENAM)                   @L8A\nLCBEXPCC DS    F           \"Primary CONNECT successful\" change counter X\n                                                                   @L8A\nLCBEXPTK DS    XL8         XCF member token of partner for         @L8A\n*                          outgoing CONNECTS                       @L8A\nLCBEXCSC DS    F           Cumulative CONNECT counter              @L8A\nLCBEXSN# DS    F           Session number for next outgoing CONNECT@L8A\nLCBEXCSS DS    0D                Aligned for CDS                       X\n                                                                   @L8A\n         DS    F                 Session number of start of sequence   X\n                                                                   @L8A\nLCBEX#PC DS    F                 Partner's number of primary CCBS  @L8A\nLCBEXTOD DS    D                 TOD of end of \"CONNECTs inhibited\"    X\n                                 interval etc. - aligned for CDS   @L8A\n         DS    0D          Alignment for CCBX's                    @L8A\nLCBEXLEN EQU   *-LCBEX     Length of LCBE extension                @L8A\n         DFHEJECT\n***********************************************************************\n* * *                                                             * * *\n* * *          CONNECTION CONTROL BLOCK                           * * *\n* * *                                                             * * *\n* * *    THE CCB IS THE REPOSITORY OF ALL INFORMATION RELEVANT    * * *\n* * *    TO A PARTICULAR CONNECTION FROM THIS SUBSYSTEM.          * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nCCB      DSECT                                                 @BBDJ10X\nCCBOWNER DS    0D          OWNERSHIP FIELDS                        @D1A\nCCBLG    DS    0F          OTHER SIDE'S LACBE NO. & GENERATION @BBDJ10X\nCCBL     DS    H           .. OTHER SIDE LACBE INDEX NUMBER    @BBDJ10X\nCCBG     DS    H           .. OTHER SIDE GENERATION NUMBER     @BBDJ10X\nCCBCSB   DS    A           ADDRESS OF CONNECTED-TO CSB         @BBDJ10X\n         SPACE 2\n* When a CCB is being used for an XCF session, CCBCSB contains a bit  *\n* string instead of a CSB pointer.  CSBs are always double-word       *\n* aligned, so to ensure correct interpretation of the contents of     *\n* CCBCSB, the 3 low order bits of the XCF bit string must never all   *\n* be zero.  This requirement constrains the choice of values for      *\n* CCBKCONN, CCBKINIT and CCBKMXWH (but none of the others) to the 3   *\n* low order bits.                                                     *\nCCBKXCF  EQU   B'111'      The 3 low order bits being not all zero     X\n                           indicates that an XCF session exists    @L8A\n         SPACE 2\nCCBKCONN EQU   X'00000001' Indicator that XCF CONNECT is in progress,  X\n                           in TCB mode if this is a secondary CCB, in  X\n                           SRB mode in the XCF Message Exit if this is X\n                           a primary CCB                           @L8A\nCCBKINIT EQU   X'00000002' Indicator that XCF CCB is initialized -     X\n                           i.e. CCBXSN# & CCBXPTK are valid and the    X\n                           CCB and SCCB have been initialized too  @L8A\nCCBKMXWH EQU   X'00000004' Indicator that the Message Exit has done    X\n                           something affecting this session (Was Here) X\n                                                                   @L8A\nCCBKGXWH EQU   X'00000008' Indicator that the Group Exit has done      X\n                           something affecting this session (Was Here) X\n                                                                   @L8A\nCCBKOPEN EQU   X'00000010' Indicator that XCF connection to partner    X\n                           has been established, so SWITCH, PULL,      X\n                           QUIESCE and DISCONNECT should be processed  X\n                           normally                                @L8A\nCCBKTOKS EQU   X'00000020' Indicator that it is valid to issue SWITCH  X\n                           in TCB mode, i.e. PULL is not pending and   X\n                           our partner has replied to our last SWITCH  X\n                           (if we have issued any yet)             @L8A\nCCBKMOKS EQU   X'00000040' Indicator that it is valid for our Message  X\n                           Exit to accept an incoming SWITCH from our  X\n                           partner, i.e. PULL (in TCB mode) is not     X\n                           pending and we have already replied to our  X\n                           partner's last SWITCH (if any)          @L8A\n* Note that a TCB mode PULL is pending if and only if both CCBKTOKS and\n* CCBKMOKS are off and everything else is favourable, e.g. CCBKOPEN on\nCCBKWAIT EQU   X'00000080' Indicator that a TCB mode request is        X\n                           waiting for the completion of incompatible  X\n                           Group Exit or Message Exit processing   @L8A\nCCBKRESV EQU   X'00000700' Three bits reserved for future use      @L8A\nCCBKTSWI EQU   X'00000800' TCB mode SWITCH in progress             @L8A\nCCBKTIQU EQU   X'00001000' TCB mode IMMEDIATE QUIESCE in progress  @L8A\nCCBKTDSC EQU   X'00002000' TCB mode DISCONNECT in progress         @L8A\nCCBKTNQU EQU   X'00004000' TCB mode NORMAL QUIESCE in progress     @L8A\nCCBKTPUL EQU   X'00008000' TCB mode PULL in progress               @L8A\nCCBKGALV EQU   X'00010000' Group Exit ABNORMAL LEAVE in progress   @L8A\nCCBKGNLV EQU   X'00020000' Group Exit NORMAL LEAVE in progress     @L8A\nCCBKGNQU EQU   X'00040000' Group Exit NORMAL QUIESCE in progress   @L8A\nCCBKMRST EQU   X'00080000' Message Exit RESET in progress          @L8A\nCCBKMIQU EQU   X'00100000' Message Exit IMMEDIATE QUIESCE in progress  X\n                                                                   @L8A\nCCBKMDSC EQU   X'00200000' Message Exit DISCONNECT in progress     @L8A\nCCBKMNQU EQU   X'00400000' Message Exit NORMAL QUIESCE in progress @L8A\nCCBKMSSW EQU   X'00800000' Message Exit SWITCH started & still not     X\n                           finished (might be segmented)           @L8A\nCCBKM1SW EQU   X'01000000' Constant used to increase or decrease       X\n                           CCBKMSWI by 1                           @L8A\nCCBKMSWI EQU   -CCBKM1SW   Message Exit SWITCH in progress - count     X\n                           allowing many SWITCH Message Exit SRBs to   X\n                           run in parallel (current value is 255)  @L8A\n         SPACE 4\nCCBSCCBA DS    A           ADDRESS OF SCCB                     @BBDJ10X\nCCBCCBX  DS    A                   Pointer to XCF CCB extension@BA58600\nCCBLCBEP DS    A           address of LCBE for this CCB        @BA58600\nCCBLCBAD DS    A           ADDRESS OF LCB FOR THIS CCB         @BA58600\n*** CCBLCBEP DS    A           address    @L8C DELETED BY APAR @BA58600\nCCBDATA  DS    A           DATA BUFFER ADDRESS                     @L3C\nCCBSTATS DS    B           STATUS BYTES                        @BBDJ10X\nCCBPRIM  EQU   X'80'       .. PRIMARY CCB INDICATOR            @BBDJ10X\nCCBLOFS  EQU   X'40'       .. LAST CCB FOR A SYSTEM                @L8C\nCCBDYNF  DS    B           Dynamic flags                           @L8A\nCCBDPC   EQU   X'80'       .. PC instruction must be used for SWITCH   X\n                           and PULL requests (i.e. XCF/PC or XM)   @L8A\nCCBDXM   EQU   X'80'+X'40' .. This session is using XM             @L8A\nCCBDSEQ  EQU   X'30'       .. CCB sequence number                  @L8A\n******* Need to redefine CCBAXIST correctly ***************\nCCBAXIST DS    0F          AX INDEX AND STATUS FLAGS       @FJ410R @L2A\n         DS    H           INDEX OF AX VALUE IN USE FOR THIS           F\n                           CONNECTION                      @FJ410R @L2A\n         DS    H           STATUS FLAGS FOR COMPARE AND SWAP           F\n                                                           @FJ410R @L2A\n* FLAGS IN BYTE ONE OF STATUS\nCCBAXCNT EQU   X'80'       AX INCLUDED IN USE COUNT        @FJ410R @L2A\nCCBCNDP  DS    A                   Pointer to quick-cell containing    X\n                                   data (currently USERID & time-stamp)X\n                                   to be copied to this primary        X\n                                   CCB's SCCB by the CONNECT SRB -     X\n                                   field is used only by IRC, so it    X\n                                   could perhaps overlay CCBAXIST,     X\n                                   which is used only by XM        @L8A\n*** CCBCCBX  DS    A                      @L8A DELETED BY APAR @BA58600\n         SPACE 1                                               @BBDJ10X\n         DS    0D          ALIGNMENT                           @BBDJ10X\nCCBLNGTH EQU   *-CCB       LENGTH OF CCB                       @BBDJ10X\n         SPACE 8                                               @BBDJ10X\nCND      DSECT                                                     @L8A\nCNDUSRID DS    CL8                 RACF USERID of job-step owning the  X\n                                   secondary CCB which is being        X\n                                   connected to the primary CCB        X\n                                   pointing at this CND            @L8A\nCNDSTOD  DS    XL8                 TOD clock reading stored under the  X\n                                   secondary's TCB after deciding to   X\n                                   CONNECT to this CND's primary CCB   X\n                                                                   @L8A\nCNDLEN   EQU   *-CND               Length of CND                   @L8A\n         DS    0S(CSBLEN-CNDLEN)   Force assembly error if a CND       X\n                                   becomes longer than a CSB       @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          XCF CONNECTION CONTROL BLOCK EXTENSION             * * *\n* * *                                                             * * *\n* * *    THE CCBX IS THE XCF SPECIFIC EXTENSION TO THE CCB AND    * * *\n* * *    INCLUDES INFORMATION RELEVANT TO A PARTICULAR CONNECTION * * *\n* * *    FROM THIS SUBSYSTEM. IT IS GETMAINED OUT OF PRIVATE      * * *\n* * *    STORAGE.                                                 * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                                   @L8A\nCCBX     DSECT                                                     @L8A\nCCBXCMCT DS    0D          Message counter & queue pointer for CDS @L8A\n         DS    F           Cumulative message counter              @L8A\nCCBXMQP  DS    A           Pointer to message queue (the sign bit  @L8A\n*                          is a lock bit)                          @L8A\nCCBXMSG# DS    F           Message number for next message sent    @L8A\nCCBXSN#  DS    F           Current session number                  @L8A\nCCBXPTK  DS    D           Partner's XCF member token - must be D  @L8A\n         DS    0D          Force double-word alignment to ensure       X\n                           atomic fetch/store with LM/STM          @L8A\n         DS    H           Reserved                                @L8A\nCCBXPCC# DS    H           Partner's reconfiguration change counter@L8A\nCCBXPCCB DS    A           Address of partner's CCB                @L8A\nCCBXLREM DS    0D          Force double-word alignment for CDS     @L8A\n         DS    F           Length remaining to be received for a       X\n                           segmented SWITCH                        @L8A\nCCBXAREA DS    A           Pointer to target area captured from        X\n                           SCCBAREA during segmented SWITCH - sign bit X\n                           distinguishes between target address of     X\n                           zero & target area too small            @L8A\nCCBXPHB  DS    A           Pointer to associated PHB if this CCB/CCBX  X\n                           is included in the PHB's connected session  X\n                           count                                   @L8A\n         DS    0D          Force length to a double-word multiple  @L8A\nCCBXLEN  EQU   *-CCBX      Length of CCB extension                 @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          CONNECTION STATUS BLOCK                            * * *\n* * *                                                             * * *\n* * *    THE CSB DESCRIBES THE CURRENT STATUS OF A PARTICULAR     * * *\n* * *    CONNECTION BETWEEN TWO SYSTEMS.                          * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nCSB      DSECT                                                 @BBDJ10X\nCSBCHAIN DS    0A          ADDRESS OF NEXT AVAILABLE CSB       @BBDJ10X\nCSBCCB   DS    0D          ADDRESSES OF CCBS                   @BBDJ10X\nCSBPRIM  DS    A           .. ADDRESS OF PRIMARY CCB           @BBDJ10X\nCSBSECD  DS    A           .. ADDRESS OF SECONDARY CCB         @BBDJ10X\nCSBSTAT  DS    0D          CSB STATUS FLAGS                    @BBDJ10X\nCSBPFLAG DS    BL4         .. PRIMARY FLAG BYTES               @BBDJ10X\nCSBSFLAG DS    BL4         .. SECONDARY FLAG BYTES             @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nCSBLEN   EQU   *-CSB       LENGTH OF CSB                       @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            CONNECTION STATUS BLOCK FLAG DEFINITIONS             * *\n* *                                                                 * *\n* *      THE CONNECTION STATUS BLOCK (CSB) CONTAINS TWO WORDS OF    * *\n* *      FLAG BITS.  THE FIRST WORD REFERS TO THE PRIMARY SIDE OF   * *\n* *      THE CONNECTION AND THE SECOND TO THE SECONDARY SIDE.       * *\n* *      FLAGS ARE DEFINED IDENTICALLY IN THE TWO WORDS WITH THE    * *\n* *      EXCEPTION OF THE FLAGS IN THE FIRST BYTE WHICH ARE USED    * *\n* *      ONLY IN THE SECONDARY WORD.                                * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE ONE (SECONDARY SIDE ONLY)                      *\nCSBSPCNG EQU   X'80'       Secondary is acquiring primary CCB  @BA58600\nCSBSCNG  EQU   X'40'       SECONDARY IS CONNECTING             @BA58600\nCSBXMCNG EQU   X'20'       CROSS MEMORY CONNECT IN PROGRESS        @D1A\nCSBSCND  EQU   X'10'       LINK IS CONNECTED                   @BA58600\nCSBATREQ EQU   X'08'       ATSET REQUIRED BY SRB               @BA58600\nCSBATNCM EQU   X'04'       ATSET NOT YET COMPLETED BY SRB  @FJ410R @L2A\nCSBATINP EQU   X'02'       ATSET IN PROGRESS by SRB            @BA58600\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE TWO - STATUS FLAGS                             *\nCSBXDED  EQU   X'80'       THIS SIDE HAS DISCONNECTED          @BBDJ10X\nCSBXIQD  EQU   X'40'       This side has IQed                  @BA58600\n.*** CSBXIQD  EQU   X'20'       THIS SIDE HAS  DELETED BY APAR @BA58600\nCSBXWAIT EQU   X'04'       THIS SIDE IS WAITING                @BBDJ10X\nCSBXPP   EQU   X'02'       THIS SIDE HAS A PULL PENDING        @BBDJ10X\nCSBXIC   EQU   X'01'       CONTROL IS ON THIS SIDE             @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE THREE - PROGRESS FLAGS                         *\nCSBXDING EQU   X'80'       THIS SIDE IS DISCONNECTING          @BBDJ10X\nCSBXSWIT EQU   X'40'       THIS SIDE IS SWITCHING              @BBDJ10X\nCSBXPULL EQU   X'20'       THIS SIDE IS PULLING                @BBDJ10X\nCSBXNQ   EQU   X'10'       THIS SIDE IS NQING                  @BBDJ10X\nCSBXIQ   EQU   X'08'       THIS SIDE IS IQING                  @BBDJ10X\nCSBXCLER EQU   X'04'       THIS SIDE IS CLEARING               @BBDJ10X\nCSBXSWIS EQU   X'02'       The SRB scheduled to the other side is      X\n                           executing the SWITCH notification and       X\n                           termination logic                   @BA58600\n         DFHEJECT                                              @BA58600\n***************************************************************@BA58600\n***************************************************************@BA58600\n* *                                                            @BA58600\n* *               WORK QUEUE PARAMETER BLOCK                   @BA58600\n* *                                                            @BA58600\n* *       THIS BLOCK IS BUILT WHEN WORK TO BE PROCESSED IN SRB @BA58600\n* *       MODE IS SCHEDULED. IT PROVIDES INFORMATION TO IDENTIF@BA58600\n* *       THE CODE TO BE EXECUTED IN SRB MODE AND THE CONTROL  @BA58600\n* *       BLOCKS TO BE ACCESSED.                               @BA58600\n* *                                                            @BA58600\n***************************************************************@BA58600\n***************************************************************@BA58600\nSRBP     DSECT                                                 @BA58600\nSRBPFCHN DS    A                   ADDRESS OF NEXT PARM BLOCK  @BA58600\nSRBPBCHN DS    A                   ADDR OF PREVIOUS PARM BLOCK @BA58600\nSRBPCSB  DS    A                   ADDR OF CSB FOR PROCESSING  @BA58600\nSRBPFUNC DS    H                   REQUEST FUNCTION TYPE       @BA58600\nSRBPSIDE DS    C                   PRIM/SEC CSB INDICATOR      @BA58600\nSRBPFLAG DS    8B                  FLAG BYTE - reserved        @BA58600\n         SPACE ,                                               @BA58600\n         DFHEJECT                                              @BCDJ104\n***********************************************************************\n*                                                                     *\n*        Large quick cell anchor block                                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nLQCTL    DSECT ,                   Large quick cell anchor         @L8A\nLQCNOENT DC    H'64'         LQCCLEN/LQBDLEN - # entries in ladder @L8A\nLQCSP#   DC    AL1(0,SPXLQC)       Key & subpool number            @L8A\nLQCBLEN  DC    F'4096'             Size of large quick cell block  @L8A\nLQCCLEN  DC    F'512'              Size of each large quick cell   @L8A\nLQCALEN  DC    A(X'1F4')   LQCCLEN-LQCHLEN - Cell data area length @L8A\nLQCUSEM  DC    A(X'7FFFFFFF')      Cell use map - first in use     @L8A\nLQCLADD  DS    A                   Large quick cell Ladder address @L8A\nLQCBHDYN DS    F                   Highest transfer buffer usage   @L8C\nLQCBCDYN DS    F                   Current transfer buffer usage   @L8C\n         SPACE 1\nLQCCTLEN EQU   *-LQCTL             length of anchor                @L8A\n         SPACE 3\n***********************************************************************\n* *                                                                 * *\n* *            LADDER ENTRY DESCRIPTOR                              * *\n* *                                                                 * *\n* *      THE LADDER IS USED TO RECORD THE STORAGE BLOCKS IN USE AS  * *\n* *      DATA TRANSFER BUFFERS.                                     * *\n* *      A BLOCK OF STORAGE IS OBTAINED, FORMATTED INTO A NUMBER    * *\n* *      OF 'LARGE QUICK CELLS' AND THE BLOCK IS KEPT TRACK OF IN   * *\n* *      A LADDER.                                                  * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 2                                               @BCDJ104\nLQBD     DSECT                     Large quickcell block descriptor\nLQBDESCR DS    D                   field for CDS instruction       @L8A\n         ORG   LQBDESCR                                            @D1A\nLQBDSTGE DS    A                   Address of block containing cells   F\n                                                                   @D1A\n         DS    F                   Allocation bit map (1 => free cell) F\n                                                                   @D1A\n         ORG  ,                                                    @D1A\n         SPACE 1\nLQBDLEN  EQU   *-LQBD              length of anchor                @L8A\nLQBDSHFT EQU   3*(1+2*(LQBDLEN-8)*(8-LQBDLEN)) Use causes assembly     X\n                                   errors unless LQBDLEN = 8       @D1A\n         SPACE 2                                                   @D1A\n***********************************************************************\n* *                                                                 * *\n* *            LARGE QUICK CELL HEADER                              * *\n* *                                                                 * *\n* *      EACH LARGE QUICK CELL HAS A HEADER, WHICH INCLUDES         * *\n* *      THE INDEX OF THE LADDER ENTRY FOR THE BLOCK CONTAINING     * *\n* *      THE CELL, AND A POINTER TO THE NEXT CELL IN THE CHAIN      * *\n* *      OF LARGE QUICK CELLS (ANCHORED IN FIELD CCBDATA IN THE     * *\n* *      TARGET SYSTEM'S CCB) OR ZERO.                              * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 2                                               @BM14268\nLQCELL   DSECT                                                 @BM14268\nLQCINDEX DS    F           Index of ladder entry for this cell     @D1C\nLQNCELL  DS    A           Next cell in chain                      @L3C\nLQCLENG  DS    F           Length of data in transfer buffer   @BM14268\nLQCOFF   DS    F           Offset of message                       @L8A\nLQCHEND  DS    0F                                              @BM14268\nLQCHLEN  EQU   LQCHEND-LQCELL      Cell header length          @BM14268\nLQCPADD  EQU   0                   address offset in cell data     @L8A\nLQCPLEN  EQU   4                   length  offset in cell data     @L8A\nLQCPENT  EQU   8                   entry   offset in cell data     @L8A\n         DFHEJECT  ,                                               @L3A\n.*** ***************************************** DELETED BY APAR @BA58600\n.*** * *                                       DELETED BY APAR @BA58600\n.*** * *            WORK AREA                  DELETED BY APAR @BA58600\n.*** * *                                       DELETED BY APAR @BA58600\n.*** * *      A WORK AREA IS ACQUIRED AT ASSOC DELETED BY APAR @BA58600\n.*** * *      THE STORAGE OF REGISTERS FOR SUB DELETED BY APAR @BA58600\n.*** * *      ONCE A SUDB IS OBTAINED ITS ADDR DELETED BY APAR @BA58600\n.*** * *      THE PARAMETER BLOCK TO THE SVC I DELETED BY APAR @BA58600\n.*** * *      THIS SAVE AREA AND REGISTER 13(  DELETED BY APAR @BA58600\n.*** * *      RETURN ADDRESS - OS)  IT IS RELE DELETED BY APAR @BA58600\n.*** * *      OR IF THE ASSOCIATE FAILS.       DELETED BY APAR @BA58600\n.*** ***************************************** DELETED BY APAR @BA58600\n.***          SPACE 2                          DELETED BY APAR @BA58600\n.*** IRSVCFDS DSECT                            DELETED BY APAR @BA58600\n.***          ORG   IRVCEND             LENGTH DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSRPA    DS    0XL(L'WSSRBPB+L'WSRPAPHB)  DELETED BY APAR @BA58600\n.*** WSSRBPB  DS    0A                  POINTE DELETED BY APAR @BA58600\n.*** WSSANCH  DS    A                   PTR. T DELETED BY APAR @BA58600\n.*** WSRPAPHB DS    0A                  POINTE DELETED BY APAR @BA58600\n.*** WSRPALCB DS    A                   LCB PO DELETED BY APAR @BA58600\n.*** *** WSRPACCB DS    A                    Y DELETED BY APAR @BA58600\n.*** WSRESMTK DS    F                   TOKEN  DELETED BY APAR @BA58600\n.*** WSPREVR9 DS    A                   PREVIO DELETED BY APAR @BA58600\n.*** * LEVEL 1 STORAGE AREAS (SHORTEST LIFE-TI DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSGETSSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSGETSS1 DS    XL(4*(1+RE-RB))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV                   DELETED BY APAR @BA58600\n.*** WSGETSS2 DS    XL(4*(1+R0-R0))     REGIST DELETED BY APAR @BA58600\n.*** WSGETSS3 DS    XL(4*(1+RE-RE))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSRELSSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSRELSS1 DS    XL(4*(1+16+R1-RE))  REGIST DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSSTUPSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSTUPS1 DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSMAXSYS DS    F                   MAX. N DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSCSBSSV DS    XL(4*(1+R1-R0))     SAVE A DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** WSLEVEL2 EQU   *                   START  DELETED BY APAR @BA58600\n.*** * AREAS PRESENT ONLY IN THE SSI VERIFY ST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSRESMGR DS    XL(RESMGR_LIST_L)   RESMGR DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** *** WSUSERID DS    CL8                    DELETED BY APAR @BA58600\n.*** ***          ORG   WSUSERID               DELETED BY APAR @BA58600\n.*** WSRESMPM DS    XL8                 PARAME DELETED BY APAR @BA58600\n.*** WSSUDBWS DS    A                   SAVE A DELETED BY APAR @BA58600\n.*** * END OF AREAS PRESENT ONLY IN ASSOCIATE' DELETED BY APAR @BA58600\n.*** * LEVEL 2 STORAGE AREAS                   DELETED BY APAR @BA58600\n.***          ORG   WSLEVEL2            RESET  DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSQCASV  DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSQCAS1  DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSSHEDSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSHEDS1 DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600\n.***          DS    XL(4*(1+RF-RF))     REGIST DELETED BY APAR @BA58600\n.*** WSSHEDS2 DS    XL(4*(1+R1-R0))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSPHBASV DS    XL(4*(1+RD-RD))     SAVE A DELETED BY APAR @BA58600\n.*** WSPHBASN DS    0F                  END OF DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSPHBRSV DS    XL(4*(1+16+R1-RD))  SAVE A DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSLQCASV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.***          DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCAS1 DS    XL(4*(1+RF-RF))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCAS2 DS    XL(4*(1+R0-R0))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCAS3 DS    XL(4*(1+R5-R2))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCAS4 DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSLQCRSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSLQCRS1 DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCRS2 DS    XL(4*(1+16+R5-RD))  REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** WSPHBPSV DS    XL(4*(1+RD-RD))     SAVE A DELETED BY APAR @BA58600\n.***          ORG   WSPHBPSV            OVERLA DELETED BY APAR @BA58600\n.*** WSGETMSV DS    XL(4*(1+16+R2-RE))  REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSPOSTSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** *                                  AND PO DELETED BY APAR @BA58600\n.*** WSPOSTS1 DS    XL(4*(1+16+R3-RD))  REGIST DELETED BY APAR @BA58600\n.*** WSPOSTS2 DS    XL(4*(1+RB-RA))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          DS    0F                  ALIGN  DELETED BY APAR @BA58600\n.*** WSWEPARM DS    XL(IRWE_INPUT_L)    PARMLI DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSWESAVE DS    XL(4*(1+16+R2-RA))  SAVE A DELETED BY APAR @BA58600\n.*** ***          SPACE 1                    M DELETED BY APAR @BA58600\n.*** ***          ORG   WSWESAVE               DELETED BY APAR @BA58600\n.*** *** WSUNWRSV DS    0F                   M DELETED BY APAR @BA58600\n.*** *** WSUNWRS1 DS    (1+RD-RD)F             DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** ***          SPACE 1                      DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSXPSTSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSXPSTS1 DS    XL(4*(1+16+R2-RD))  REGIST DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSSHRSV  DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSHRS1  DS    XL(4*(1+16+R2-RC))  REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSSCHRSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSCHRS1 DS    XL(4*(1+16+R1-RA))  REGIST DELETED BY APAR @BA58600\n.*** ***          SPACE 1                      DELETED BY APAR @BA58600\n.*** ***          ORG   WSQCASV                DELETED BY APAR @BA58600\n.*** *** WSSRCHSV DS    0F                     DELETED BY APAR @BA58600\n.*** ***          DS    (1+16+R1-RD)F          DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** * AREAS THAT CAN SHARE STORAGE WITH BOTH  DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** LOADINST DS    0F                         DELETED BY APAR @BA58600\n.*** ******* HOW LONG IS THIS PARAMETER LIST?? DELETED BY APAR @BA58600\n.***          LOAD EPLOC=LCBWENME,GLOBAL=(YES, DELETED BY APAR @BA58600\n.*** LOADPLEN EQU   *-LOADINST                 DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSXMSAVE DS    XL(4*18)            SAVE A DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSUNWRSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSUNWRS1 DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSAXLIST DS    0F                         DELETED BY APAR @BA58600\n.***          DS    H                   NO. OF DELETED BY APAR @BA58600\n.***                                           DELETED BY APAR @BA58600\n.*** WSAX     DS    H                   AX IS  DELETED BY APAR @BA58600\n.*** WSLXLIST DS    0F                         DELETED BY APAR @BA58600\n.***          DS    F                   NO. OF DELETED BY APAR @BA58600\n.***                                           DELETED BY APAR @BA58600\n.***          DS    F                   LX IS  DELETED BY APAR @BA58600\n.*** WSTKLIST DS    0F                         DELETED BY APAR @BA58600\n.***          DS    F                   NO. OF DELETED BY APAR @BA58600\n.***                                           DELETED BY APAR @BA58600\n.***          DS    F                   TOKEN  DELETED BY APAR @BA58600\n.*** WSETDES  DS    0F                  ETDES  DELETED BY APAR @BA58600\n.***          DS    X                    FORMA DELETED BY APAR @BA58600\n.***          DS    B                    OPTIO DELETED BY APAR @BA58600\n.***          DS    AL2                  RESER DELETED BY APAR @BA58600\n.***          DS    A                    TOKEN DELETED BY APAR @BA58600\n.***          ORG   WSGETMSV            OVERLA DELETED BY APAR @BA58600\n.*** *** WS                                                    @BA58600\n.*** *** WS                                                    @BA58600\n.*** WS                                                        @BA58600\n.*** WSMSGLEN DS    F                   LENGTH DELETED BY APAR @BA58600\n.*** WSLENLFT DS    F                   LENGTH DELETED BY APAR @BA58600\n.*** *** WSPART   DS    A,H                    DELETED BY APAR @BA58600\n.*** *** WSLENPAR EQU   *-WSPART               DELETED BY APAR @BA58600\n.***          DS    0F                  ALIGN  DELETED BY APAR @BA58600\n.*** WSELEMTB DS    0XL8                MSG. P DELETED BY APAR @BA58600\n.***          ORG   WS                                         @BA58600\n.*** WSUSTATE DS    XL(USTATEL)         USER S DELETED BY APAR @BA58600\n.***          ORG   WSPHBASN            AREAS  DELETED BY APAR @BA58600\n.***                                    OVERLA DELETED BY APAR @BA58600\n.*** WSQUAHDR DS    XL(QUAHLENG)        HEADER DELETED BY APAR @BA58600\n.*** ***** WSQUAMEM MUST IMMEDIATELY FOLLOW WS DELETED BY APAR @BA58600\n.*** WSQUAMEM DS    XL(QUAMLENG)        QUAMEM DELETED BY APAR @BA58600\n.*** ***** WSQUAUST MUST IMMEDIATELY FOLLOW WS DELETED BY APAR @BA58600\n.*** WS                                                        @BA58600\n.*** WSQUAUST DS    XL(32)              USTATE DELETED BY APAR @BA58600\n.***          ORG   WSQUAUST            OVERLA DELETED BY APAR @BA58600\n.*** *** WS                                                    @BA58600\n.*** WSMCNTL  DS    XL(32)              XCF ME DELETED BY APAR @BA58600\n.*** WSIXCPL  DS    0F                  PARAME DELETED BY APAR @BA58600\n.***          IXCMSGO  PLISTVER=1,MF=(L,WSMSGO DELETED BY APAR @BA58600\n.***                                    IXCMSG DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCMSGI  PLISTVER=1,MF=(L,WSMSGI DELETED BY APAR @BA58600\n.***                                    IXCMSG DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCQUERY MF=(L,WSQURYPL)  PARAME DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCJOIN MF=(L,WSJOINPL)   PARAME DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCLEAVE MF=(L,WSLEAVPL)  PARAME DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCSETUS MF=(L,WSSTUSPL)  PARAME DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** * LEVEL 3 STORAGE AREAS                   DELETED BY APAR @BA58600\n.*** WSSRBPSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSRBPS2 DS    XL(4*(1+16+RD-RF))  REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** *   SRB CODE MAY NEED ACCESS TO THE SRB P DELETED BY APAR @BA58600\n.*** *   WHICH IS IN REGISTER 10, SO WSSRBPS2  DELETED BY APAR @BA58600\n.*** *   REFERENCE DIRECTLY TO REGISTER 10.    DELETED BY APAR @BA58600\n.***          ORG   WSSRBPS2            OVERLA DELETED BY APAR @BA58600\n.***          DS    XL(4*(1+16+R9-RF))  REGIST DELETED BY APAR @BA58600\n.*** WSSRBPAD DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600\n.***          ORG   WSSRBPSV                   DELETED BY APAR @BA58600\n.*** WSSWMVCS DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600\n.*** *** WSSWMVCS DS    (1+RD-RD)F             DELETED BY APAR @BA58600\n.*** WSBUFTYP DS    X                   BUFFER DELETED BY APAR @BA58600\n.*** LACB_BUFFTYPE EQU  0               LACB Q DELETED BY APAR @BA58600\n.*** JSB_BUFFTYPE  EQU  4               JSB QU DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSSWSTAT DS    X                   SWITCH DELETED BY APAR @BA58600\n.*** WSSWSTEL EQU   X'80'               HAVE C DELETED BY APAR @BA58600\n.*** WSSWSTAP EQU   X'40'               HAVE A DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** * LEVEL 4 STORAGE AREAS (LONGEST LIFE-TIM DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** WSSRBEND DS    0F                         DELETED BY APAR @BA58600\n.*** WSSRBLEN EQU   WSSRBEND-IRSVCFDS   LENGTH DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** * SOME FAIRLY LONG-LIVED AREAS NEEDING FU DELETED BY APAR @BA58600\n.***          ORG   WSSRBPSV            OVERLA DELETED BY APAR @BA58600\n.*** WSTIDYSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSTIDYS1 DS    F                   REGIST DELETED BY APAR @BA58600\n.*** WSADDWK  DS    F                   IRADD  DELETED BY APAR @BA58600\n.*** WSROLCNT DS    F                   IRROLC DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSCLSV   DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSCLS1   DS    F                   REGIST DELETED BY APAR @BA58600\n.*** WSCLS2   DS    F                   REGIST DELETED BY APAR @BA58600\n.*** *                                  2ND LE DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSEOCSV  DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSEOCPL  DS    F                   SVC PA DELETED BY APAR @BA58600\n.*** WSEOSASP DS    F                   SUBPOO DELETED BY APAR @BA58600\n.*** WSXMWORK DS    XL(4*3)             XM WOR DELETED BY APAR @BA58600\n.*** WSENQLST DS    0F                  ENQ RE DELETED BY APAR @BA58600\n.***          DS    AL1                 LISTEN DELETED BY APAR @BA58600\n.***          DS    AL1                 RNAME  DELETED BY APAR @BA58600\n.***          DS    BL1                 OPTION DELETED BY APAR @BA58600\n.***          DS    AL1                 RETURN DELETED BY APAR @BA58600\n.*** WSXMQNAM DS    A                   ADDRES DELETED BY APAR @BA58600\n.*** WSRNAME  DS    A                   ADDRES DELETED BY APAR @BA58600\n.***          DS    0F                  FULL W DELETED BY APAR @BA58600\n.*** WSAPPLID DS    CL8                 APPLID DELETED BY APAR @BA58600\n.***          ORG   WSAPPLID            OVERLA DELETED BY APAR @BA58600\n.*** WSMEMNAM DS    CL16                MEMBER DELETED BY APAR @BA58600\n.*** WSUSKEY  DS    C                   EXTRA  DELETED BY APAR @BA58600\n.***          ORG   *-1                 OVERLA DELETED BY APAR @BA58600\n.*** WSMEMDAT DS    2F                  MEMBER DELETED BY APAR @BA58600\n.*** WSIRRX_INSTANCE DS F               XCR RE DELETED BY APAR @BA58600\n.*** WSSWRSV  DS    F                   RETURN DELETED BY APAR @BA58600\n.*** WSTOD    DS    D                   AREA F DELETED BY APAR @BA58600\n.***                                    SUPPRE DELETED BY APAR @BA58600\n.*** ****** NEED TO SEE WHICH OF THESE AREAS C DELETED BY APAR @BA58600\n.*** WSS                                                       @BA58600\n.*** WSMEPL   DS    XL(MEPLLEN)         COPY O DELETED BY APAR @BA58600\n.***                                    MESSAG DELETED BY APAR @BA58600\n.*** WSMQEP   DS    A                   POINTE DELETED BY APAR @BA58600\n.***                                    ELEMEN DELETED BY APAR @BA58600\n.*** WSGXPSV  DS    XL(4*(1+RD-RD))     RD SAV DELETED BY APAR @BA58600\n.*** WSMXRPAP DS    A                   POINTE DELETED BY APAR @BA58600\n.***                                    PARAME DELETED BY APAR @BA58600\n.*** WSLCLAD  DS    A                   ADDRES DELETED BY APAR @BA58600\n.*** WSLCLLN  DS    F                   LENGTH DELETED BY APAR @BA58600\n.*** WSEND    DS    0D                  MAKE L DELETED BY APAR @BA58600\n.*** WSLEN    EQU   WSEND-IRSVCFDS      LENGTH DELETED BY APAR @BA58600\n.*** WSMXLEN  EQU   *-IRSVCFDS          LENGTH DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          DFHEJECT  ,                      DELETED BY APAR @BA58600\n.*** ***************************************** DELETED BY APAR @BA58600\n.*** * *                                       DELETED BY APAR @BA58600\n.*** * *        SRB WORK AREA                  DELETED BY APAR @BA58600\n.*** * *                                       DELETED BY APAR @BA58600\n.*** * *      A WORK AREA IS ACQUIRED AT LOGON DELETED BY APAR @BA58600\n.*** * *      THE STORAGE OF REGISTERS FOR SUB DELETED BY APAR @BA58600\n.*** * *      IT IS RELEASED IN TIDY, OR IF TH DELETED BY APAR @BA58600\n.*** ***************************************** DELETED BY APAR @BA58600\n.***          SPACE 2                          DELETED BY APAR @BA58600\n.*** IRSRBSEC DSECT  ,                         DELETED BY APAR @BA58600\n.*** SRBWKA   DS    CL(WSEND-IRSVCFDS)         DELETED BY APAR @BA58600\n.*** IRSRBEND DS    0F                         DELETED BY APAR @BA58600\n.*** IRSRBSIZ EQU   IRSRBEND-IRSRBSEC          DELETED BY APAR @BA58600\n.***          DFHEJECT  ,                      DELETED BY APAR @BA58600\n***********************************************************************\n* * *                                                             * * *\n* * *          USE COUNT ARRAY                                    * * *\n* * *                                                             * * *\n* * *   THE PREFIX TO THE ARRAY CONTAINS THE LINKAGE INDEX        * * *\n* * *   AND ENTRY TABLE TOKEN.                                    * * *\n* * *   THE USE COUNT ARRAY CONTAINS A RECORD OF THE NUMBER OF    * * *\n* * *   ACTIVE CONNECTIONS USING A PARTICULAR AX VALUE            * * *\n* * *     SINCE A USE COUNT INDEX OF ZERO IS REGARDED AS INVALID  * * *\n* * *   THE USE COUNT ARRAY BEGINS WITH THE ENTRY FOR INDEX = 1.  * * *\n* * *   TO ALLOW THE INDEX TO BE USED DIRECTLY THE VALUE UCAPRELN * * *\n* * *   IS SET TO THE LENGTH OF THE PREFIX - 4.                   * * *\n* * *   THE TRUE PREFIX LENGTH IS GIVEN BY THE VALUE UCATPREL.    * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                           @FJ410R @L2A\nUCA      DSECT  ,                                          @FJ410R @L2A\nUCALENTH DS    H              TOTAL LENGTH OF USE COUNT    @FJ410R @L2A\n*                             ARRAY FOR FORMATTED DUMP\n         DS    H                   Reserved                @FJ410R @L8C\nUCAPREND DS    0F                                          @FJ410R @L2A\nUCAPRELN EQU   UCAPREND-UCA-UCAELEN  PREFIX LENGTH FOR INDEX TO UCAE   F\n                                                           @FJ410R @L8C\nUCATPREL EQU   UCAPREND-UCA        TRUE PREFIX LENGTH      @FJ410R @L2A\n         SPACE 5                                           @FJ410R @L2A\n***********************************************************************\n* * *                                                             * * *\n* * *          USE COUNT ARRAY ENTRY                              * * *\n* * *                                                             * * *\n* * *   EACH ENTRY IN THE USE COUNT ARRAY CONSISTS OF THE NUMBER  * * *\n* * *   OF ACTIVE CONNECTIONS USING THE AX VALUE AT THE SAME      * * *\n* * *   OFFSET IN THE AX ARRAY.                                   * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                           @FJ410R @L2A\nUCAE     DSECT  ,                                          @FJ410R @L2A\nUCAECNT  DS    H                   USE COUNT               @FJ410R @L2A\nUCAEXMLG DS    H                   LG of XM-resource owning LACBE  @L8A\nUCAELEN  EQU   *-UCAE              ENTRY  LENGTH           @FJ410R @L2A\n         DFHEJECT ,                                                @L8A\n* XCF User State Data                                              @L8A\nUSTATE   DSECT                     User State data for XCF         @L8A\nUSTVER#  DS    AL1                 User State Data Version Number  @L8A\nUSTVER#1 EQU   1                   User State Data Version No. @BA58600\nUSTVER#2 EQU   2                   User State Data Version No. @BA58600\nUSTPRTCL DS    AL1                 Communication Protocol Number   @L8A\nPRTCL1   EQU   1                   Protocol Number 1           @BA58600\nUSTSTAT0 DS    AL1                 Reserved for Status expansio@BA58600\nUSTSTAT1 DS    AL1                 Status                      @BA58600\nUSTSTACT EQU   1                   Member is active & not quiesced @L8A\nUSTSTRDY EQU   2                   Member is ready for CONNECTs    @L8A\nUSTSTNQU EQU   3                   Member is in NORMAL QUIESCE     @L8A\nUSTSTIQU EQU   4                   Member is in IMMEDIATE QUIESCE  @L8A\nUSTSTNSD EQU   5                   Member is terminating normally  @L8A\nUSTSTABE EQU   6                   Member is terminating abnormally@L8A\nUSTST1M1 EQU   B'00000111'         Mask to isolate USTSTAT1 bits in    X\n                                   Version 2 User State Data which are X\n                                   meaningful to a Protocol 1 u@BA58600\nUSTTOKEN DS    F                   Token to allow an IRP user to find  X\n                                   out whether it is the current user  X\n                                   of a given XCF member name      @L8A\nUSTXAPPL EQU   X'80'               User's APPLID is present    @BA58600\nUSTTOD   DS    XL8                 User State Data time-stamp  @BA58600\nUSTAPPLD DS    CL8                 User's APPLID                   @L8A\n.*** USTUSRID DS    CL8                 USER'S DELETED BY APAR @BA58600\nUSTATEL  EQU   *-USTATE            Length of User State data       @L8A\n         DS    0S(32-USTATEL)      Assembly error if Length > 32   @L8A\n         SPACE 3\n         IXCYGEPL                  Group Exit Parameter List       @L8A\n         IXCYMEPL                  Message Exit Parameter List     @L8A\n***********************************************************************\n*        XCF Message Control Data                                     *\n***********************************************************************\nMEPL     DSECT                     Continue the MEPL DSECT         @L8A\n         ORG   MEPLMTOK            Overlay the Message Token       @L8A\nMQENEXT  DS    A                   Pointer to next Message Queue       X\n                                   Element                         @L8A\n         ORG   MEPLMDAT            Overlay the Member Data         @L8A\nMQEDATA  DS    A                   Pointer to first data buffer    @L8A\nMQEDLAST DS    A                   Pointer to last data buffer     @L8A\n         ORG   MEPLCNTL            Overlay the Message Control Data@L8A\nMCNTL    EQU   *                   Message Control Data for XCF    @L8A\nMCPRTCL  DS    AL1                 Communication Protocol Number   @L8A\nMCFUNC   DS    AL1                 Function code                   @L8A\n         SPACE 1\nMCFCONN  EQU   X'10'               Function - Connect              @L8A\nMCFDISC  EQU   X'20'               Function - Disconnect           @L8A\nMCFSWIT  EQU   X'30'               Function - Switch               @L8A\nMCFQUSC  EQU   X'40'               Function - Quiesce              @L8A\nMCFRESET EQU   X'00'               Function - Immediate Reset      @L8A\n         SPACE 1\n*              Function qualifiers\nMCFQABN  EQU   X'01'               Abnormal - disconnect       @BA58600\nMCFQ1ST  EQU   X'01'               First switch                    @L8A\nMCFQIMMD EQU   X'01'               Immediate quiesce               @L8A\nMCFQUNSL EQU   X'02'               Unsolicited switch              @L8A\n.*** MCFQSEG  EQU   X'04'               SEGMEN DELETED BY APAR @BA58600\nMCFQFRGT EQU   X'02'               Disconnect - Forget             @L8A\nMCFQNAVL EQU   X'04'               Disconnect - Not Available      @L8A\n         SPACE 1\nMCCC#S   DS    H                   All functions except CONNECT -      X\n                                   change counter (for dynamic CHANGE  X\n                                   of LCBEs) qualifying sender's CCB   X\n                                   pointer MCCCBPS (zero if MCCCBPS is X\n                                   not supplied)                   @L8A\nMCCCBPS  DS    A                   All functions except CONNECT -      X\n                                   pointer to sender's CCB (sometimes  X\n                                   zero if no reply is possible)   @L8A\nMCCCBPRX EQU   X'80'               If the sign bit of the sender's CCB X\n                                   pointer is on, the receiver's CCB   X\n                                   pointer & change counter are        X\n                                   present; otherwise, the sender's    X\n                                   APPLID is present               @L8A\nMCMSG#   DS    F                   All functions except CONNECT  -     X\n                                   Message number within session   @L8A\n         ORG   MCCC#S              CONNECT only                    @L8A\n         DS    H                   Reserved                        @L8A\nMCSTOD   DS    XL8                 TOD clock reading stored during TCB X\n                                   mode CONNECT processing between     X\n                                   deciding the target XCF token and   X\n                                   issuing the IXCMSGO             @L8A\nMCSN#    DS    F                   All functions - session number &    X\n                                   originator (primary/secondary flag).X\n                                   If sign bit is 0, the sender is the X\n                                   secondary and the receiver is the   X\n                                   primary; if the sign bit is 1, the  X\n                                   sender is the primary.          @L8A\nMCAPPLID DS    CL8                 If function is CONNECT or sign bit  X\n                                   of sender's CCB pointer (MCCCBPRX)  X\n                                   is zero - sender's APPLID       @L8A\n         ORG   MCAPPLID            All functions except CONNECT if     X\n                                   sign bit of sender's CCB pointer is X\n                                   one                             @L8A\n         DS    H                   Reserved                        @L8A\nMCCC#R   DS    H                   Change counter qualifying           X\n                                   receiver's CCB pointer MCCCBPR  @L8A\nMCCCBPR  DS    A                   Pointer to receiver's CCB       @L8A\nMCUSERID DS    CL8                 CONNECT only - sender's security    X\n                                   (RACF) user ID                  @L8A\n         ORG   MCUSERID                                            @L8A\nMCSSWLEN DS    F                   SWITCH only - length of the         X\n                                   complete message            @BA58600\n.***                                    MESSAG DELETED BY APAR @BA58600\nMCSSWOFF DS    F                   SWITCH only - offset of this        X\n                                   segment from start of the complete  X\n                                   message - zero unless segmen@BA58600\n         ORG   MCUSERID                                            @L8A\nMC#1CCBS DS    F                   DISCONNECT qualified by MCFQNAVL    X\n                                   only - <= 0 if the sender was not   X\n                                   willing at that time to accept any  X\n                                   of the receiver's CONNECT requests; X\n                                   number of candidate primary CCBs if X\n                                   the sender was willing to accept    X\n                                   the receiver's CONNECT requests but X\n                                   could not find a free primary CCB   X\n                                                                   @L8A\n         ORG   ,                                                   @L8A\n         DS    0S(32-(*-MCNTL))  Assembly error if Length > 32     @L8A\n         SPACE 8\n* Partner History Block                                            @L8A\nPHB      DSECT                   Partner History Block             @L8A\nPHBNEXT  DS    A                 Pointer to next PHB in chain      @L8A\nPHBMQP   DS    A                 Pointer to queue of messages which    X\n                                 cannot yet be assigned to CCBs        X\n                                 because the incoming CONNECT has not  X\n                                 been processed                    @L8A\nPHBS#HCP DS    A                 Pointer to chain of elements (S#HEs)  X\n                                 listing the incoming session numbers  X\n                                 that have been handled so far for     X\n                                 this partner                      @L8A\nPHBLCBE  DS    A                 Pointer to owning LCBE or to LCB      X\n                                 (& sign bit) if PHB is chained from   X\n                                 LCB                               @L8A\n         DS    0D                Align for CDS                     @L8A\nPHBAPCNT DS    F                 Active Process Count - a partner      X\n                                 state of \"active\" or a non-empty      X\n                                 message queue each contribute to this X\n                                 count too                         @L8A\nPHBCNCNT DS    F                 Connection Count                  @L8A\nPHB2CNCT DS    F                 Count of secondary connections    @L8A\nPHBMVSID DS    XL4               Partner's MVS system token        @L8A\nPHBMVSNM DS    CL8               Partner's MVS system name - for       X\n                                 diagnostic use only               @L8A\nPHBMEMTK DS    XL8               Partner's XCF member token        @L8A\nPHBSTTOD DS    XL8               Time-stamp for PHBSTATE value     @L8A\nPHBSTATE DS    C                 Partner's User State Status1      @L8A\nPHBS0CSC DS    F                 Cumulative session counter value      X\n                                 corresponding to session 0 with this  X\n                                 partner                           @L8A\n         DS    0D                Align to double-word multiple     @L8A\nPHBLEN   EQU   *-PHB             Length of PHB                     @L8A\nPHBAQLOC EQU   0                 \"Locate only\" function code IRPHBACQ  X\n                                                                   @L8A\nPHBAQCRE EQU   1                 \"Locate or Create\" function code for  X\n                                 IRPHBACQ                          @L8A\n         SPACE 8\n* Session numbers handled element                                  @L8A\nS#HE     DSECT                   Session numbers handled element   @L8A\nS#HENEXT DS    A                 Pointer to next S#HE in the chain @L8A\nS#HERNGE EQU   X'80'             If the sign bit of S#HENEXT is 0,     X\n                                 the element contains a bit string     X\n                                 representing individual session       X\n                                 numbers.  If the sign bit is 1, the   X\n                                 element contains upper and lower      X\n                                 bounds of a range of session numbers  X\n                                                                   @L8A\nS#HEHIGH DS    0F                One more than the highest session no. X\n                                 within the range if S#HERNGE is on -  X\n                                 must be next word after S#HENEXT  @L8A\nS#HEBITS DS    BL.64             Bit string representing individual    X\n                                 session numbers starting with the     X\n                                 lowest if element does not refer to a X\n                                 range                             @L8A\nS#HELOW  DS    F                 Lowest session number represented by  X\n                                 this element                      @L8A\n         DS    0D                  Make length a multiple of 8     @L8A\nS#HELEN  EQU   *-S#HE            Length of S#HE                    @L8A\nS#HMLOC  EQU   0                 IRS#HMGR function code for LOCATE @L8A\nS#HMADD  EQU   1                 IRS#HMGR function code for ADD    @L8A\n.***          SPACE 8                          DELETED BY APAR @BA58600\n.***          DFHEJECT ,                       DELETED BY APAR @BA58600\n.*** *                                         DELETED BY APAR @BA58600\n.*** *  FESTAE PARAMETER LIST                  DELETED BY APAR @BA58600\n.*** *                                         DELETED BY APAR @BA58600\n.*** *   THIS PARAMETER LIST IS BUILT IN THE R DELETED BY APAR @BA58600\n.*** *   SVRB BELONGING TO THE IRP SVC.  IT IS DELETED BY APAR @BA58600\n.*** *   BETWEEN THE IRP MAINLINE AND THE FEST DELETED BY APAR @BA58600\n.*** *   THE PARAMETER LIST IS RESTRICTED TO T DELETED BY APAR @BA58600\n.*** *   WHICH IS 24 BYTES.                    DELETED BY APAR @BA58600\n.*** *                                         DELETED BY APAR @BA58600\n.*** MXRPA    DSECT ,                   MESSAG DELETED BY APAR @BA58600\n.*** MXRPASV  DS    (1+16+R1-RD)F       SAVE A DELETED BY APAR @BA58600\n.*** MXRPAWSP DS    A                   POINTE DELETED BY APAR @BA58600\n.***          DS    0S(24-(*-MXRPA))    ASSEMB DELETED BY APAR @BA58600\n         DFHEJECT ,                                                @LAA\n*\n* XCF retry SRB work element\n*\n* When an XCFBUSY condition occurs a work element is built to pass\n* to the XCF retry SRB to cuase the request that raised the XCFBUSY\n* condition to be retried.\n*\nIRRX_ELEM     DSECT  ,                                             @LAA\nIRRX_FWD      DS    A     forward chain (public)                   @LAA\nIRRX_BWD      DS    A     backward chain (private)                 @LAA\nIRRX_FUNCTION DS    X     request type                             @LAA\nIRRX_DUMMY            EQU 0                                        @LAA\nIRRX_MSG_DATA         EQU 1                                        @LAA\nIRRX_MSG_NODATA       EQU 2                                        @LAA\nIRRX_QUIESCE_COMPLETE EQU 3                                        @LAA\nIRRX_RESP     DS    X     response from last msgo attempt          @LAA\nIRRX_REASN    DS    H     reason from last msgo attempt            @LAA\nIRRX_RETRY    DS    H     message retry count                      @LAA\nIRRX_NUMBUSY  DS    H     XCFBUSY count                            @LAA\nIRRX_INSTANCE DS    A     last SRB instance to retry this message  @LAA\nIRRX_BUFFER   DS    A     Data buffer chain addr or 0              @LAA\nIRRX_TARGET   DS    CL8   target XCF member token                  @LAA\nIRRX_MSGCNTL  DS    CL32  message control area                     @LAA\n              DS    0D                                             @LAA\nIRRX_LEN      EQU   *-IRRX_ELEM                                    @LAA\n*\n* R15 return codes for DFHIRRXS routines\n*\nIRRXERR       EQU   8                                              @LAA\n*\n* R0 reason codes corresponding to IRRXERR\n*\nIRRXERR_DISABLED        EQU 4                                      @LAA\nIRRXERR_GETMAIN_FAILED  EQU 8                                      @LAA\nIRRXERR_XCF_ERROR       EQU 16                                     @LAA\nIRRXERR_INVALID_FUNCTION EQU 20                                    @LAA\nIRRXERR_LOCKERR1    EQU 24   SRB dispatched without LCB LOCK       @LAA\nIRRXERR_LOCKERR2    EQU 28   SRB dispatched with LCB lock disabled @LAA\nIRRXERR_LOCKERR3    EQU 32   SRB dispatched while TQE enqueued     @LAA\nIRRXERR_LOCKERR4    EQU 36   SRB instance number mismatch          @LAA\n         MEND                                                      @P3M\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DFHIRSDS": {"ttr": 769, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n*   COPYRIGHT = 5655-018 (C) COPYRIGHT IBM CORP. 1975                 *\n*               THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"          *\n*               LICENSED MATERIALS - PROPERTY OF IBM                  *\n*               REFER TO COPYRIGHT INSTRUCTIONS                       *\n*               FORM NUMBER G120-2083                                 *\n***********************************************************************\n*                                                                     *\n*              DFHIRSDS COPY BOOK                                     *\n*                                                                     *\n*              THIS COPY BOOK CONTAINS THE DESCRIPTIONS OF ALL        *\n*        INTER-REGION COMMUNICATION CONTROL BLOCKS WHICH ARE          *\n*        VISIBLE TO THE SUBSYSTEM LEVEL OF INTER-REGION               *\n*        COMMUNICATION.                                               *\n*                                                                     *\n*=====================================================================*\n* Although provided in a general interface library, DFHIRSDS is       *\n* not to be used as a general programming interface. Refer to         *\n* product documentation to determine intended usage.                  *\n*=====================================================================*\n*                                                                     *\n*        $SEG(DFHIRSDS) COMP(IRC) PROD(CICS/ESA):                     *\n*         PN= REASON REL YYMMDD HDXXIII : REMARKS                     *\n*        $L1= 600 160 8010 HD8STC:      CICS/DOS 1.6 BASE FIXES       *\n*        $L2= J31 160 8204 HD8STC :  FIX IRP BUGS IN RECOVER          *\n*        $L3= J41 161 8210 HDXDRP :  CROSS MEMORY SUPPORT             *\n*        $L4= J45 170 8508 HD2FAGW:  MRO/VAE Support                  *\n*        $L5= DS1 310 8612 HDEDJZ :  EB1C. Logon options              *\n*        $L6= 415 320 8909 HDEDJZ :  MRO Work queues                  *\n*        $L7= 504 320 890306 HOUSEGO : IRPL contrl blk 31 bit conversn*\n*        $L8= 641 410 930318 HD5LL : XCF support & Dynamic add        *\n*    $L9= 641    410 930429 HDAHSCG : Add DFHIRP level checking       *\n*        $L9= RESERVED FOR LINE ITEM                                  *\n*    $LA= 641    410 930517 HDAHSCG : Dynamic ADD defines for XCF     *\n*        $LA= RESERVED FOR LINE ITEM                                  *\n*        $P1= M31977 170 8601 HD1MA : RE-INSTATE EQU FOR LCLFLGXM     *\n*        $P2= M32244 170 8602 HD1MA : ERROR CODE FOR GETVIS FAILURE   *\n*        $P3= M40931 310 8709 HDUGM : MVS global is now redundant     *\n*        $P4= M56295 310 8906 HD0VCAP:XM Post simulator exit          *\n*        $P5= M60854 320 9002 HD2YAIH:XA2/XB0 co-existence            *\n*        $P6= RESERVED FOR PTM                                        *\n*        $D1= I01597 170 840223 HD0RJS : REWORK DCR                   *\n*        $D2= I03170 310 870904 HD5LL  : MRO BATCHING                 *\n*        $D3= I03608 310 890712 HDPBGH : CSIR deadlock avoidance      *\n*        $D4= I04147 320 900109 HD5XTY : REMOVE REDUNDANT VTAM GLOBALS*\n*        $D5= RESERVED FOR DCR                                        *\n*        $D6= RESERVED FOR DCR                                        *\n*        $D7= RESERVED FOR DCR                                        *\n*        $01= A05567 160 8201    HD8STC: APAR MODIFICATION            *\n*                                                                     *\n*              THE CONTROL BLOCKS DEFINED IN THIS COPY BOOK           *\n*        ARE:                                                         *\n*                                                                     *\n*        SLCB     SUBSYSTEM LOGON CONTROL BLOCK                       *\n*        SCCB     SUBSYSTEM CONNECTION CONTROL BLOCK                  *\n*        SCACB(E) SUBSYSTEM CONNECTION ADDRESS CONTROL BLOCK          *\n*                                                                     *\n         DFHEJECT                                              @BBDJ104\n*                                                                     *\n*              SUBSYSTEM LOGON CONTROL BLOCK                          *\n*                                                                     *\n*              THIS DSECT DESCRIBES THE FORMAT OF THE SLCB WHICH      *\n*        IS THE CONTROL BLOCK THAT CONTAINS THE INFORMATION           *\n*        RELEVANT TO THE LOGON SESSION WHICH IS OF INTEREST TO THE    *\n*        SUBSYSTEM LEVEL OF INTER-REGION COMMUNICATION.               *\n*                                                                     *\n         SPACE 5                                               @BBDJ104\n*                                                                     *\n&SRVLEVL SETC  '0000'      Service level for IRP level check func. @L9A\n*\n*              FIRST DEFINE THE FORMAT OF THE FIELDS IN THE SLCB.     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\nSLCB     DSECT                                                 @BCA890E\nSLCBLECB DS    F           LOGON (MASTER) ECB                  @BCA890E\nSLCBSCAC DS    F           SCACB ADDRESS                       @BCA890E\nSLCBSTTS DS    0F          STATUS BYTES                        @BCA890E\nSLCBSTS1 DS    C           .. STATUS BYTE 1                    @BCA890E\nSLCBSTS2 DS    C           .. STATUS BYTE 2                    @BCA890E\nSLCBSTS3 DS    C           .. STATUS BYTE 3                    @BCA890E\nSLCBSTS4 DS    C           .. STATUS BYTE 4                    @BCA890E\nSLCBLCB  DS    A           ADDRESS OF LCB                      @BBDJ10X\n         SPACE 1                                               @BDDJ104\nSLCBALGN DS    0F                                              @BDDJ104\nSLCBLENG EQU   *-SLCB      LENGTH OF SLCB                      @BCA890E\n         SPACE 5                                               @BCA890E\n*                                                                     *\n*              THIS PART OF THE DSECT DESCRIBES THE FLAGS IN THE      *\n*        LCB AND SLCB STATUS BYTES. THESE FLAGS ARE COMMON TO THE     *\n*        TWO CONTROL BLOCKS (UNLESS OTHERWISE STATED) AND ARE         *\n*        THEREFORE ONLY DEFINED HERE                                  *\n*                                                                     *\n*                                                                     *\n*        FLAGS IN STATUS BYTE 1: LCBSTTS1 OR SLCBSTS1                 *\n*                                                                     *\nLCBFAM31 EQU   X'80'       User of LCB is AMODE(31)                @L8A\nLCBFQUIP EQU   X'40'       NORMAL QUIESCE IN PROGRESS          @BCA890E\nLCBFQUIM EQU   X'20'       IMMEDIATE QUIESCE REQUESTED         @BCA890E\nLCBFSPST EQU   X'10'       SYSTEM POST SCCBDECB for all events     @L5A\n*                          except SWITCH FIRST\nLCBFBTCH EQU   X'08'   (LCB only) - batching of opsys posts rqd    @D2A\nLCBFBTCP EQU   X'04'               BATCH=POSTEXIT                  @D2A\nLCBFBEXL EQU   X'02'               Exit loaded                     @P4A\nLCBFUNIQ EQU   X'01'       LCB corresponds to a UNIQUE user        @L8A\n*                                                                     *\n*        FLAGS IN STATUS BYTE 2: LCBSTTS2 OR SLCBSTS2                 *\n*                                                                     *\nLCBFNWCN EQU   X'80'       NEW CONNECTER: SCAN ECBS            @BM14056\nLCBFQUCM EQU   X'40'       QUIESCE COMPLETE                    @BCA890E\nLCBFSWFS EQU   X'20'       SWITCH FIRST RECEIVED               @BBDJ104\nLCBFDSCR EQU   X'10'       DISCONNECT RECEIVED                 @BBDJ104\nLCBFJOIN EQU   X'08'       IXCJOIN might have been done            @L8A\n*                                                                     *\n*        FLAGS IN STATUS BYTE 4: LCBSTTS4 OR SLCBSTS2                 *\n*                                                                     *\nLCBSRBSE EQU   X'80'       SERIALIZATION WITH WORK QUEUE PROCESSOR @L4C\n         SPACE 2                                               @BDDJ104\n         DFHEJECT                                              @BCA890E\n*                                                                     *\n*              SUBSYSTEM CONNECTION CONTROL BLOCK                     *\n*                                                                     *\n*              THIS DSECT DEFINES THE SCCB, THE CONTROL BLOCK         *\n*        WHICH CONTAINS THAT INFORMATION ABOUT A PARTICULAR           *\n*        CONNECTION WHICH CAN BE ACCESSED BY THE SUBSYSTEM            *\n*        LEVEL OF INTERREGION COMMUNICATION FUNCTION                  *\n*                                                                     *\n         SPACE 5                                               @BCA890E\n*                                                                     *\n*              FIRST DEFINE THE FORMAT OF THE FIELDS IN THE SCCB\n*                                                                     *\n*                                                                     *\n*                                                                     *\nSCCB     DSECT                                                 @BCA890E\nSCCBDECB DS    F           DEPENDENT ECB                       @BCA890E\nSCCBTHNM DS    F           THREAD NUMBER                       @BCA890E\nSCCBTHID DS    F           THREAD IDENTIFICATION               @BCA890E\nIRXMTHRD EQU   X'80'       If not XCF, Cross-Memory Thread ID      @L3A\nIRNXTHRD EQU   X'40'       Non-XCF Thread ID                       @L8A\nSCCBSTAT DS    0F          STATUS BYTES                        @BCA890E\nSCCBSTS1 DS    C           .. STATUS BYTE 1                    @BCA890E\nSCCBSTS2 DS    C           .. STATUS BYTE 2                    @BCA890E\nSCCBSTS3 DS    C           .. STATUS BYTE 3                    @BCA890E\nSCCBSTS4 DS    C           .. STATUS BYTE 4                    @BCA890E\nSCCBDLTH DS    F           TOTAL LENGTH OF DATA PASSED         @BBDJ104\nSCCBSLTH DS    F           TARGET AREA LENGTH                  @BBDJ104\nSCCBAREA DS    A           TARGET AREA ADDRESS                 @BBDJ104\nSCCBCNAM DS    CL8         CONNECTER LOGON NAME                @BM14056\nSCCBUSER DS    F           USER FIELD                          @BBDJ104\nSCCBSEC  DS    CL8         SECURITY USER FIELD                 @BBDJ104\nSCCBELA  DS    A           Address of SCCB associated element      @L6A\n******** Double word alignment causes a word to be skipped here!!!!!!!\nSCCBCTIM DS    D           STCK time at which connection connected @L6A\nSCCBSTOD DS    XL8         STCK time by when the secondary TCB had     X\n                           chosen a specific instance of the target    X\n                           primary                                 @L8A\n         DS    0D          align internal element on DWD           @L6A\nSCCBEL   DS    CL24        SCCB internal work element              @L6A\n         SPACE 1                                               @BDDJ104\nSCCBALGN DS    0F                                              @BDDJ104\nSCCBLENG EQU   *-SCCB      LENGTH OF SCCB                      @BCA890E\n         SPACE 5                                               @BCA890E\n*                                                                     *\n*              THIS PART OF THE DSECT DEFINES THE FLAGS IN THE        *\n*              SCCB STATUS BYTES                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              FLAGS IN STATUS BYTE 1: SCCBSTS1                       *\n*                                                                     *\nCCBFNWCN EQU   X'80'       NEW CONNECTER                       @BM14056\n******** EQU   X'40'       Was CCBFCNTR - now reserved         @BA58600\nCCBFSWDT EQU   X'20'       DATA PASSED WITH SWITCH             @BCA890E\nCCBFSWFS EQU   X'10'       SWITCH FIRST RECEIVED               @BBDJ104\nCCBFDTNF EQU   X'08'       DATA DOESN'T FIT                    @BBDJ104\nCCBFDWP  EQU   X'04'       DISCONNECT WHEN POSSIBLE            @BBDJ104\nCCBFSWIT EQU   X'02'       INVALID TARGET FOR SWITCH           @BCDJ10X\nCCBFUNEX EQU   X'02'       UNEXPECTED FAILURE IN SRB/SUBTASK       @L4C\nCCBIRCWT EQU   X'01'       this side is waiting for a session          *\n                           recovery response from the other side   @D3A\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              FLAGS IN STATUS BYTE 2: SCCBSTS2                       *\n*                                                                     *\nCCBFTERM EQU   X'80'       OTHER SIDE TERMINATED NORMALLY      @BCA890E\nCCBFABTM EQU   X'40'       OTHER SIDE TERMINATED ABNMLY        @BCA890E\nCCBFABTQ EQU   X'20'       ABNORMAL TERMINATION DUE TO QUIESCE @BBDJ104\nCCBFCNCT EQU   X'10'       Connection is currently connected       @L6A\n         SPACE 2                                               @BDDJ104\n*                                                                     *\n*              FLAGS IN STATUS BYTE 3: SCCBSTS3                       *\n*                                                                     *\nCCBFPRIM EQU   X'80'               This is a primary SCCB          @L8A\n         DFHEJECT                                              @BCA890E\n*                                                                     *\n*              SUBSYSTEM CONNECTION ADDRESS CONTROL BLOCK             *\n*                                                                     *\n*              THESE DSECTS DEFINE THE FORMAT OF THE SCACB            *\n*        AND ITS ENTRIES. THE SCACB IS USED BY THE SUBSYSTEM          *\n*        LEVEL OF INTERREGION COMMUNICATION FUNCTION TO OBTAIN        *\n*        THE ADDRESSES OF THE SCCB'S REPRESENTING ITS CONNECTIONS     *\n*                                                                     *\n         SPACE 5                                               @BCA890E\nSCACB    DSECT                                                 @BCA890E\nSCACBNUM DS    F           NUMBER OF ENTRIES IN SCACB          @BCA890E\nSCACBENT DS    0F          START OF ENTRIES                    @BCA890E\nSCACBEND DS    F           END MARKER = X'FFFFFFFF'            @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nSCACBLEN EQU   *-SCACB     BASIC SCACB LENGTH                  @BBDJ10X\n         SPACE 5                                               @BCA890E\nSCACBE   DSECT                                                 @BCA890E\nSCACBEAD DS    F           ADDRESS OF SCCB                     @BCA890E\n         SPACE 1                                               @BDDJ104\nSCACBELN EQU   *-SCACBE    LENGTH OF SCACB ENTRY               @BCA890E\n         SPACE 2                                               @BDDJ104\n         DFHEJECT                                              @BCA890E\n*                                                                     *\n*             LOGON CONNECTIONS LIST                                  *\n*                                                                     *\n*        LOGON CONNECTIONS LIST DSECT. THIS LIST IS PASSED            *\n*        TO LOGON BY THE REQUESTER, AND IT DESCRIBES THE              *\n*        SYSTEMS TO WHICH THIS LOGGER-ON CAN BE CONNECTED             *\n         SPACE ,                                               @BBDJ104\nLCL      DSECT                                                 @BBDJ104\nLCLNAME  DS    CL8         NAME OF CONNECTED SYSTEM            @BBDJ104\nLCLUSRID DS    CL8         ACCEPTABLE USERID (SECURITY)        @BBDJ104\nLCLSECNO DS    H           NUMBER OF SECONDARIES FOR           @BBDJ104\n*                            CONNECTIONS TO GIVEN SYSTEM       @BDDJ104\nLCLPRMNO DS    H           NUMBER OF PRIMARIES FOR             @BBDJ104\n*                            CONNECTIONS TO GIVEN SYSTEM       @BDDJ104\n         SPACE 2                                               @BBDJ104\nLCLFLG   DS    B           FLAG BYTE                           @BBDJ104\nLCLFLGLS EQU   X'80'       LAST ELEMENT IN LIST                @BBDJ104\nLCLFLGCN EQU   X'40'       CONNECTIONS TO THIS SYSTEM          @BBDJ104\n*                            ARE INITIALLY 'IN SERVICE'        @BDDJ104\nLCLFLGXM EQU   X'10'       CROSS-MEMORY ACCEPTABLE (MVS)\n         SPACE ,                                               @BBDJ104\n         DS    X           RESERVED                            @BBDJ104\n         SPACE ,                                               @BBDJ104\nLCLLENG  EQU   *-LCL       CONNECTION LIST ELEMENT LENGTH      @BBDJ104\n         SPACE 2                                               @BDDJ104\n         DFHEJECT                                              @BBDJ104\n***********************************************************************\n* * *                                                             * * *\n* * *    THE FOLLOWING DSECTS DEFINE THE FORMAT OF THE ARGUMENT   * * *\n* * *    LISTS USED WHEN INVOKING THE INTERREGION PROGRAM         * * *\n* * *                                                             * * *\n* * *    THERE ARE TWO DSECTS: THE SVC ARGUMENT LIST DSECT AND    * * *\n* * *    THE FUNCTION ARGUMENT DSECT                              * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *      THE SVC ARGUMENT LIST COMPRISES A LIST OF ADDRESSES,       * *\n* *      EACH OF WHICH IS THE ADDRESS OF A FUNCTION ARGUMENT LIST   * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nIRSVCADS DSECT                                                 @BBDJ10X\nIRVCAARG DS    F           ADDRESS OF FUNCTION ARGUMENT LIST   @BBDJ10X\n         SPACE 5                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *      THE FUNCTION ARGUMENT LIST, ADDRESSED FROM THE SVC         * *\n* *      ARGUMENT LIST, CONTAINS DIFFERENT ARGUMENTS ACCORDING TO   * *\n* *      THE FUNCTION BEING REQUESTED.  THE FIRST SIX ARGUMENTS     * *\n* *      IDENTIFY THE FUNCTION REQUIRED, THE FUNCTION               * *\n* *      MODIFIER (FOR SWITCH, DISCONNECT OR QUIESCE), THE USER     * *\n* *      NUMBER AND IDENTIFICATION AND THE THREAD NUMBER AND        * *\n* *      IDENTIFICATION (WHERE REQUIRED).  THE REMAINING THREE      * *\n* *      ARGUMENTS DEPEND ON THE FUNCTION REQUESTED AND IDENTIFY    * *\n* *      A SYSTEM NAME (FOR LOGON, INSERV OR QUIESCE), A            * *\n* *      SUBSYSTEM CONTROL BLOCK ADDRESS (FOR LOGON OR CONNECT)     * *\n* *      AND A PARAMETER LIST (FOR LOGON OR SWITCH).                * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nIRSVCFDS DSECT                                                 @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n         DS    0H                                                  @AIH\nIRVCLEN  DS    X           LENGTH OF PARAMETER LIST                @AIH\n         SPACE 1                                                   @AIH\nIRVCTYP  DS    X           FUNCTION TYPE                       @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nIRVCSTYP DS    H           FUNCTION MODIFIER                   @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nIRVCUSID DS    F           ADDRESS OF USER ID ARGUMENT (EXCEPT LOGON)  *\n                             OR USER ID RETURN SLOT (LOGON ONLY)       *\n                                                               @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nIRVCTHID DS    F           ADDRESS OF THREAD ID ARGUMENT (SWITCH,      *\n                             PULL OR DISCONNECT ONLY) OR THREAD        *\n                             NUMBER RETURN SLOT (CONNECT ONLY) @BBDJ10X\n         ORG   IRVCTHID                                            @L5A\nIRVCLGFL DS    0XL4        Logon - flags                           @L5A\nIRVCLGF1 DS    X           1st flag byte                           @L5A\nIRVCLGSP EQU   X'80'       SYS POST req'd on links                 @L5A\nIRVCLGBT EQU   X'40'       Batching of operating system POSTs      @D2A\nIRVCLGBX EQU   X'20'       BATCH=POSTEXIT                          @D2A\nIRVCLEXM EQU   X'10'       Exit module name given                  @P4A\nIRVCWELT EQU   X'08'       Latent parameter supplied on logon      @L6A\nIRVCLDOK EQU   X'04'       Allow duplicate names for this logon\nIRVCLGF2 DS    X           2nd flag byte                           @L5A\nIRVCLGBV DS    X           Batching value (if IRVCLGBT set)        @D2A\nIRVCLGGM DS    X           GETMAIN above if SVCLOC=ANY       @L5A  @L7C\n*                          1... .... SVCLOC=ANY\n*                          0... .... SVCLOC=BELOW\n         SPACE 1                                               @BBDJ10X\nIRVCALST DS    0F          START OF FUNCTION SPECIFIC ARGUMENT LIST    *\n                                                               @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR LOGON             @BBDJ10X\nIRVCLGIM DS    F           ADDRESS OF MYNAME ARGUMENT          @BBDJ10X\nIRVCLGSL DS    F           ADDRESS OF SLCB ADDR RETURN SLOT    @BBDJ10X\nIRVCLGMU DS    F           ADDRESS OF MAX USERS ARGUMENT       @BBDJ10X\nIRVCLGEX DS    F           Addr of Module name (if any) for exits  @P4A\nIRVCLGLT DS    F           Latent parameter (if any) for exits     @L6A\nIRVCLLEN EQU   *-IRSVCFDS  length of logon plist                   @L6A\n         SPACE 2                                               @BM13339\n         ORG   IRVCALST    ARGUMENT LIST FOR LOGOFF            @BM13339\nIRVCLODS DS    F           ADDRESS OF DYNAMIC STORAGE OPERAND  @BM13339\nIRVCOLEN EQU   *-IRSVCFDS  length of logoff plist                  @L6A\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR CONNECT           @BBDJ10X\nIRVCCNTO DS    F           ADDRESS OF TO ARGUMENT              @BBDJ10X\nIRVCCNSC DS    F           ADDRESS OF SCCB ADDR RETURN SLOT    @BBDJ10X\nIRVCCLEN EQU   *-IRSVCFDS  length of connect plist                 @L6A\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR SWITCH            @BBDJ10X\n         DS    F           RESERVED                            @BM14056\n         DS    F           RESERVED                            @BM14056\nIRVCSWPM DS    F           ADDRESS OF PARAMETER TO PASS        @BBDJ10X\nIRVCSLEN EQU   *-IRSVCFDS  length of switch plist                  @L6A\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR QUIESCE           @BBDJ10X\nIRVCQUTO DS    F           ADDRESS OF TO ARGUMENT              @BBDJ10X\nIRVCQLEN EQU   *-IRSVCFDS  length of quiesce plist                 @L6A\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR INSERV            @BBDJ10X\nIRVCINTO DS    F           ADDRESS OF TO ARGUMENT              @BBDJ10X\nIRVCILEN EQU   *-IRSVCFDS  length of inserv plist                  @L6A\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR RECOVER           @BBDJ10X\n         DS    F           .. RESERVED                         @BBDJ10X\nIRVCRCRS DS    F           REGISTER 13 SAVE AREA               @BBDJ10X\nIRVCRCSA DS    F           ADDRESS OF SAVE AREA ARGUMENT       @BBDJ10X\nIRVCRLEN EQU   *-IRSVCFDS  length of recover plist                 @L6A\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR EOT/M CLEAR           @D1C\nIRVCEOAS DS    H           ASID OF FAILING MEMORY                  @D1A\n*                          OR ASID OF MEMORY CONTAINING FAILING TASK\nIRVCEOTA DS    F           TCB ADDRESS OF FAILING TASK             @D1A\nIRVCEOSC DS    F           ADDRESS OF SSCT                    @D1A @P6C\nIRVCELEN EQU   *-IRSVCFDS  length of EOT/M plist                   @L6A\n         SPACE 1                                                   @LAA\n         ORG   IRVCALST            argument list for ADD           @LAA\nIRVCANM  DS    A                   Pointer to netname = (IRVCLGIM) @LAA\nIRVCATOK DS    A                   ADD token pointer               @LAA\nIRVCALCL DS    A                   LCL - same offset as for LOGON  @LAA\nIRVCALEN EQU   *-IRSVCFDS          length of ADD PLIST             @LAA\n         SPACE 2                                                   @L9A\n         ORG   IRVCALST    ARGUMENT LIST FOR IRP LEVEL CHECK       @L9A\nIRVCALVL DS    A           Value of DFHIRP level required by ca@BA58600\nIRVCLVL1 EQU   1           DFHIRP function level 1 - basic XCF @BA58600\nIRVCLVL2 EQU   2           DFHIRP function level 1 - reserved  @BA58600\nIRVCKLEN EQU   *-IRSVCFDS  Length of LEVEL CHECK plist             @L9A\n         SPACE 2                                                   @D1P\n         ORG   ,           ORG TO END OF PARAMETER LIST        @BBDJ10X\nIRVCEND  DS    0F                                              @BM14268\nIRVCMAXM EQU   *-IRSVCFDS  MAXIMUM PARAMETER LENGTH            @BBDJ10X\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *      THE FOLLOWING EQUATES DEFINE THE FUNCTION REQUEST          * *\n* *      CODES FOR THE INTERREGION COMMUNICATION PROGRAM            * *\n* *                                                                 * *\n* *      THERE ARE TWO LEVELS OF FUNCTION REQUEST DEFINED HERE:     * *\n* *      THE SVC FUNCTION CODE ADDRESSED FROM THE SVC ARG LIST,     * *\n* *      AND THE FUNCTION TYPE QUALIFICATION CODE ADDRESSED FROM    * *\n* *      THE FUNCTION ARGUMENT LIST FOR PARTICULAR FUNCTIONS        * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n*                                                                     *\n*              SVC FUNCTION CODES                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nIRVCEQLG EQU   0                LOGON                          @BM14056\nIRVCEQLF EQU   4                LOGOFF                         @BM14056\nIRVCEQCN EQU   8                CONNECT                        @BM14056\nIRVCEQDC EQU   12               DISCONNECT                     @BM14056\nIRVCEQSW EQU   16               SWITCH                         @BM14056\nIRVCEQQU EQU   20               QUIESCE                        @BM14056\nIRVCEQPL EQU   24               PULL                           @BM14056\nIRVCEQIN EQU   28               INSERV                         @BM14056\nIRVCEQCL EQU   32               CLEAR                          @BM14056\nIRVCEQRC EQU   36               RECOVER                        @BM14056\nIRVCEQEO EQU   40               EOT/M CLEAR                        @D1A\nIRVCEQMX EQU   44               Immediate Quiesce                  @LAA\nIRVCEQAD EQU   48               Connection ADD                     @LAA\nIRVCEQCK EQU   52               Check DFHIRP level                 @L9A\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n*                                                                     *\n*              FUNCTION QUALIFICATION CODES                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nIRVCEQDN EQU   0               NORMAL DISCONNECT               @BM14056\nIRVCEQDA EQU   4               ABNORMAL DISCONNECT             @BM14056\n         SPACE 1                                               @BBDJ10X\nIRVCEQQN EQU   0               NORMAL QUIESCE                  @BM14056\nIRVCEQQI EQU   4               IMMEDIATE QUIESCE               @BM14056\n         SPACE 1                                               @BBDJ10X\nIRVCEQSS EQU   0               SWITCH SUBSEQUENT               @BM14056\nIRVCEQSF EQU   4               SWITCH FIRST                    @BM14056\n         SPACE 1                                               @BBDJ10X\nIRVCEQRP EQU   0               RECOVER FROM PROGRAM CHECK      @BM14056\nIRVCEQRA EQU   4               RECOVER FROM ABEND              @BM14056\n         SPACE 1                                                   @D1A\nIRVCEQET EQU   0               END OF TASK                         @D1A\nIRVCEQEC EQU   4               END OF CROSS MEMORY RESOURCE OWNER TASK F\n                                                                   @D1A\nIRVCEQEM EQU   8               END OF MEMORY                       @D1A\n         SPACE 1\nIRVCEQPR EQU   0               ADD_PREPARE                         @L8A\nIRVCEQCM EQU   4               ADD_COMMIT                          @L8A\nIRVCEQRL EQU   8               ADD_ROLLBACK                        @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *                ERROR RETURN CODES                           * * *\n* * *                                                             * * *\n* * *    The following equates define the return codes passed     * * *\n* * *    back by the Interregion Communications SVC when it       * * *\n* * *    detects an error. These error codes are loaded in to RF. * * *\n* * *    R0 may also contain a reason code or qualifier.          * * *\n* * *    CICS code checks the L.S. 16 bits of RF which therefore  * * *\n* * *    need to be unique. Storage failures use the M.S. 16      * * *\n* * *    bits of RF to return the STORAGE macro error code.       * * *\n* * *                                                             * * *\n* * *                ERROR REASON CODES                           * * *\n* * *                                                             * * *\n* * *    The reason code returned in R0 is only meaningful        * * *\n* * *    for those RF return codes which specify it explicitly.   * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 5                                               @BCA890E\n*   INVALID REQUEST ERROR RETURN CODES                         @BM14056\nIRERRINF EQU   4           INVALID FUNCTION REQUESTED          @BBA890E\nIRERRAUT EQU   8           USER NOT AUTHORIZED TO USE SVC (MVS ONLY)   *\n                                                               @BCA890E\n         SPACE 1                                               @BBDJ104\n*   VALIDATE SUDB ERROR RETURN CODES                           @BM14056\nIRERRINE EQU   12          ENVIRONMENT INCORRECT               @BBDJ104\n         SPACE 1                                               @BBDJ10X\n*   VALIDATE USER ERROR RETURN CODES                           @BM14056\nIRERRUNM EQU   16          INVALID USER NUMBER                 @BBA890E\nIRERRUID EQU   20          INVALID USER IDENTIFICATION         @BBA890E\nIRERRUKN EQU   24          INVALID LCB ADDRESS                         *\n                                   (INTERNAL ERROR)            @BM14056\n         SPACE 1                                               @BBDJ10X\n*   VALIDATE THREAD ERROR RETURN CODES                         @BM14056\nIRERRTHN EQU   28          INVALID THREAD NUMBER               @BBA890E\nIRERRTHD EQU   32          INVALID THREAD ID                   @BBA890E\n         SPACE 1                                               @BBDJ10X\n*   SET FOOTPRINT ERROR RETURN CODES                           @BM14056\nIRERRCFT EQU   36          SET FOOTPRINT FAILED                @BBA890E\n         SPACE 1                                               @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   LOGON-SPECIFIC ERROR RETURN CODES                          @BM14056\nIRERRNOS EQU   52          NO SCTE IN THE SVA                  @BDDJ104\nIRERRNFL EQU   56          NO FREE LACBE FOR LOGON             @BBDJ104\nIRERRDPL EQU   60          DUPLICATE LOGON                     @BBA890E\nIRERRMXL EQU   64          MAXIMUM LOGONS ALREADY REACHED      @BBA890E\nIRERRGMD EQU   68          GETMAIN FAILED DIRECTORY STORAGE            *\n                           (DOS/VS ONLY)                       @BM14056\n         SPACE 1\n*        The following Error codes are used to qualify the\n*        STORAGE macro error codes shifted to the top 16 bits of RF\nIRERRGM1 EQU   72          GETMAIN FAILED LACB STORAGE         @BBA890E\nIRERRGM4 EQU   76          GETMAIN FAILED SUDB STORAGE         @BBDJ104\nIRERRGM2 EQU   80          GETMAIN FAILED LCB/CCB STORAGE      @BBA890E\nIRERRGM3 EQU   84          GETMAIN FAILED SLCB/SCCB STORAGE    @BBA890E\n         SPACE 1\nIRERRNAU EQU   204         NOT AUTH'D TO LOGON WITH THIS NAME      @L8A\nIRERRWEN EQU   256         Bad name supplied for inter rgn work ex @L6A\nIRERRWEL EQU   260         load failed for inter region work exit  @L6A\nIRERRWEF EQU   264         inter region work exit has bad format   @L6A\n         SPACE 1                                               @BBDJ10X\n*   LOGOFF-SPECIFIC ERROR RETURN CODES                         @BM14056\nIRERRLCB EQU   88          LCB NOT ON SUDB CHAIN               @BBDJ104\n         SPACE 1                                               @BBDJ10X\n*   CONNECT-SPECIFIC ERROR RETURN CODES                        @BM14056\nIRERRNLG EQU   92          SYSTEM NOT LOGGED ON                @BBDJ10X\nIRERRNCT EQU   96          Primary & secondary DFHIRP levels have      X\n                           incompatible XCF User State Data for@BA58600\nIRERRGM5 EQU   100         GETMAIN FAILED CSB STORAGE          @BBDJ10X\nIRERRNSS EQU   104         SECONDARY SYSTEM NOT IN PRIMARY LCB @BBDJ10X\nIRERRCCS EQU   108         NO SECONDARY CCB FOUND FOR PRIMARY SYSTEM   *\n                                                               @BBDJ10X\nIRERRIQS EQU   112         SECONDARY IS IN-QUIESCE             @BM14056\nIRERRSP  EQU   12          SECONDARY TO PRIMARY CONVERTER      @BBDJ10X\nIRERRNSP EQU   IRERRNSS+IRERRSP  PRIMARY SYSTEM NOT IN SECONDARY LCB   *\n                                                               @BBDJ10X\nIRERRCCP EQU   IRERRCCS+IRERRSP  NO PRIMARY CCB FOUND FOR SECONDARY    *\n                                   SYSTEM                      @BBDJ10X\nIRERRIQP EQU   IRERRIQS+IRERRSP  PRIMARY IS IN-QUIESCE         @BM14056\nIRERRCCR EQU   128         NO PRIMARY CCB - RETRY REQUEST      @BBDJ10X\nIRERRSCF EQU   176         SECURITY CHECK FAILED               @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   DISCONNECT-SPECIFIC ERROR RETURN CODES                     @BM14056\nIRERRDSC EQU   132         LINK IS ALREADY DISCONNECTED        @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   SWITCH-SPECIFIC ERROR RETURN CODES                         @BM14056\nIRERRSWI EQU   136         OTHER SIDE CANNOT RECEIVE DATA      @BBDJ10X\nIRERRNSW EQU   140         THIS SIDE CANNOT SEND DATA          @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   PULL-SPECIFIC ERROR RETURN CODES                           @BM14056\nIRERRPL1 EQU   144         OTHER SIDE CANNOT BE PULLED FROM    @BBDJ10X\nIRERRPL2 EQU   148         THIS SIDE CANNOT PULL DATA          @BBDJ10X\nIRERRNPP EQU   152         THERE IS NO PULL PENDING            @BBDJ10X\nIRERRNDP EQU   156         NO DATA TO BE PULLED (INTERNAL ERROR)       *\n                                                               @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   INSERVICE-SPECIFIC ERROR RETURN CODES                      @BM14056\nIRERRLIQ EQU   160         LCB IS IN-QUIESCE                   @BM14056\nIRERRUKS EQU   164         TARGET SYSTEM NOT FOUND IN LCB      @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   MISCELLANEOUS ERROR RETURN CODES                           @BM14056\nIRERRCSB EQU   168         CSB CANNOT BE FOUND                 @BBDJ10X\nIRERRLNC EQU   172         LINK IS NOT CONNECTED               @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nIRERRSCH EQU   180         ATTEMPT TO SCHEDULE AN SRB/SUBTASK FAILED   F\n                                                                   @L4C\n*                          ..EITHER GETMAIN FAILED FOR SRB\n*                          ..PARAMETER STORAGE,\n*                          ..OR PREVIOUSLY FAILED SCHEDULE\n*                          ..REQUEST HAS BEEN DETECTED.\n*                          ..or in VSE, an XPCC request failed\nIRERRGM7 EQU   184         GETMAIN FAILED FOR SRB STORAGE(MVS) @BBDJ104\nIRERRGM8 EQU   208         GETMAIN  FAILED FOR TRANSFER BUFFER @BCDJ104\nIRERRGM9 EQU   212         GETMAIN FAILED FOR SSVT,SCTE,WORKAREA       F\n                                                           @EAPAR8 @01C\nIRERRGMA EQU   236         GETMAIN FAILED FOR LOGON CONNECTIONS LIST   F\n                                                           @FJ410R @L3A\nIRERRGMX EQU   228         GETMAIN FAILED FOR USE COUNT ARRAY          F\n                                                           @FJ410R @L3A\nIRERRAX  EQU   232         NON-ZERO AX VALUE CURRENTLY SET @FJ410R @L3A\nIRERRCAT EQU   240         CONNECT SRB ATSET FAILED        @FJ410R @L3A\nIRERRAXA EQU   244         NO FREE ENTRIES IN AX ARRAY     @FJ410R @L3A\nIRERRLXA EQU   244         NO FREE ENTRIES IN LX ARRAY      @17879 @L3A\nIRERRXME EQU   244         CROSS MEMORY ENVIRONMENT ERROR  @FJ410R @L3A\nIRERRIDL EQU   248         TOTAL DATA LENGTH INVALID FOR SWITCH OR PULLF\n                                                           @FJ410R @L3A\nIRERRMPD EQU   252         M/C CHECK PAGING I/O OR DAT ERROR           F\n                                                           @FJ410R @L3A\nIRERRPST EQU   188         'SPECIAL' ABEND (BAD ECB ETC.)              F\n                                                           @FJ410R @L3A\nIRERRENV EQU   216         SUBSYSTEM NOTIFICATION ERROR (MVS ONLY) @L4C\nIRERRDNM EQU   268         Duplicate name in LCL or LCBE chain     @L8A\nIRERRDPA EQU   272         Invalid arguments for DPL               @L8A\n         SPACE 1                                               @BBDJ104\n*   INVALID ADDRESS RETURN CODES                               @BM14056\nIRERRIA0 EQU   192         INVALID ARGUMENT OR PARAMETER ADDR  @BM14056\nIRRSNDUP EQU   4           Reason - Duplicate names not allowed@BA58600\nIRRSNEXC EQU   8           Reason - Not valid for EXCI         @BA58600\n         SPACE 1                                               @BA58600\nIRERRIA1 EQU   196         INVALID ADDRESS IN PARAMETER LIST   @BM13484\nIRERRIA2 EQU   200         INVALID ADDRESS IN DATA LIST        @BM13484\nIRERRIA3 EQU   220         INVALID TARGET FOR DATA MOVEMENT        @L4C\n         SPACE 1                                               @BM14268\n*   INTERNAL LOGIC ERROR CODE                                  @BM14268\nIRERRILE EQU   224         INTERNAL LOGIC ERROR                @BM14268\n*   CHCKLEVL-SPECIFIC ERROR RETURN CODES                           @L9A\nIRERRLVE EQU   228         DFHIRP SERVICES ARE DOWN-LEVEL          @L9A\nIRERRXCF EQU   276         XCF failure, R0 has XCF RF return value @L8A\nIRERRTKN EQU   280         Token not found - Build/Cmt/Rollback    @L8A\n         DFHEJECT                                                  @L6A\n*+*-------------------------------------------------------*+       @L6A\n*+*                                                       *+       @L6A\n*+* IRWE_INPUT Describes the parameter list passed from   *+       @L6A\n*+* DFHIRP/DFHXMP to the inter region work exit.          *+       @L6A\n*+*                                                       *+       @L6A\n*+*-------------------------------------------------------*+       @L6A\nIRWE_INPUT DSECT ,                                                 @L6A\nIRWE_LATENT DS   F      work exit latent parm (default SLCB)       @L6A\nIRWE_SCCB   DS   A      address of session control block(if any)   @L6A\nIRWE_TARGET DS   F      ALET for target address psace              @L6A\nIRWE_INPUT_L EQU *-IRWE_INPUT  Length of parameter list            @L8A\n*                                                                  @L6A\n*+*-------------------------------------------------------*+       @L6A\n*+*                                                       *+       @L6A\n*+* The following equates define the inter region work    *+       @L6A\n*+* exit return codes (R15 values)                        *+       @L6A\n*+*                                                       *+       @L6A\n*+*-------------------------------------------------------*+       @L6A\nIRWE_OK     EQU   0       work exit has delivered the work         @L6A\nIRWE_IRPDEL EQU   4       IRP is to deliver the work               @L6A\nIRWE_ERROR  EQU   8       work exit was unable to deliber the work @L6A\n*                                                                  @L6A\n*+*-------------------------------------------------------*+       @L6A\n*+*                                                       *+       @L6A\n*+* The following equates define the exit point id's      *+       @L6A\n*+* used by the inter region work exits.                  *+       @L6A\n*+*                                                       *+       @L6A\n*+*-------------------------------------------------------*+       @L6A\nIRWEREC  EQU   0        recovery                                   @L6A\nIRWENC   EQU   1        new connect                                @L6A\nIRWESW   EQU   2        switch (not  first)                        @L6A\nIRWESW1  EQU   3        switch 1st                                 @L6A\nIRWENDIS EQU   4        normal disconnect                          @L6A\nIRWEADIS EQU   5        abnormal disconenct                        @L6A\nIRWEIQU  EQU   6        immediate quiesce                          @L6A\nIRWEDWP  EQU   7        disconnect when possible                   @L6A\nIRWECQU  EQU   8        quiesce complete                           @L6A\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EFHCRBDS": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x00\\x96&\\x9f\\x00\\x96&\\x9f\\x144\\x00E\\x00E\\x00\\x01\\xc1\\xc3\\xe2\\xc3\\xc5\\xe7\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-09-25T00:00:00", "modifydate": "1996-09-25T14:34:53", "lines": 69, "newlines": 69, "modlines": 1, "user": "ACSCEXB"}, "text": "***********************************************************************\n*    COPYRIGHT = 5665-403 (C) COPYRIGHT IBM CORP. 1975                *\n*                THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"         *\n*                LICENSED MATERIALS - PROPERTY OF IBM                 *\n*                REFER TO COPYRIGHT INSTRUCTIONS                      *\n*                FORM NUMBER G120-2083                                *\n***********************************************************************\n*        DSECT DFHCRBDS.\n*\n*        THIS DSECT DESCRIBES THE CICS REGION BLOCK, WHICH IS\n*        USED BY THE CICS INTER-REGION COMMUNICATION FACILITY.\n*        THE BLOCK IS USED TO CONTROL INTER-REGION ACTIVITY\n*        AT A GLOBAL LEVEL, AS OPPOSED TO CONTROLLING THE\n*        ACTIVITY OF INDIVIDUAL LINKS WITH OTHER REGIONS.\n*        THE CONVERSATIONAL TCTTE (HUNG OFF THE 'ISLINK'\n*        SYSTEM ENTRY IN THE TCT) IS THE BLOCK WHICH\n*        CONTROLS INDIVIDUAL 'CONVERSATIONS' BETWEEN CICS\n*        AND OTHER REGIONS.\n*        THE CRB IS ALLOCATED WHEN THE FACILITY IS STARTED\n*        UP (BY THE START-UP PROGRAM, DFHCRSP), AND FREED WHEN\n*        THE FACILITY IS SHUT DOWN (VIA THE IS LOGOFF COMMND).\n*        THE BLOCK CONTAINS, AMONGST OTHER THINGS, ARGUMENT\n*        LISTS AND OTHER INFORMATION REQUIRED TO COMMUNICATE\n*        WITH THE INTER-REGION SVC (DFHIRCP)\n         SPACE ,                                               @BCA890E\n*  $SEG(DFHCRBDS),COMP(IRC),PROD(CICS/VS) :                           *\n*  $D1= I01521 161 821217 HD0JADT: AD13 ADD SUSPENDED MIRROR COUNT    *\n*  $L1= J43    161 820825 HDXDRP : BBAB ADD SUSPENDED MIRROR ANCHOR   *\nDFHCRBDS DSECT                                                 @BCA890E\n         DS    F                   STORAGE ACCOUNTING          @BCA890E\nCRBSVCLS DS    F                   ALIST FOR SVC               @BCA890E\n         SPACE ,                                               @BCA890E\n         DS    0F                                              @BCA890E\nCRBSVCSB DS    XL40                SUBLIST FOR SVC             @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSTCA  DS    A                   SUSPENDED TCA CHAIN      @FJ43X @L1C\nCRBUSID  DS    F                   SVC USER ID ALLOC'D TO CICS @BCA890E\nCRBSLCB  DS    A                   A(SVC'S SLCB CTL BLOCK)     @BCA890E\nCRBRTRY  DS    A                   ANCHOR FOR CHAIN OF TCTTES  @BCA890E\n*                                  FOR WHICH ATTACH OF MIRROR\n*                                  IS TO BE RETRIED\nCRBRTRND DS    A                   A(LAST EL IN RETRY CHAIN)   @BCA890E\nCRBCSNC  DS    A                   A(CSNC'S TCA)               @BCA890E\nCRBRTSTP DS    F                   VAL OF STOPPER IN RETRY CHN @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSTASV DS    2F                  SAVE REGS 13,14 IN STAE     @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSVCIN DS    H                   INSTR TO INVOKE INTER-RGN   @BCA890E\n*                                  SVC\nCRBSMSA  DS    PL2                 SUSP MIRROR SLOTS AVLBLE @01521 @D1A\n         SPACE 2                                               @BCA890E\nCRBFLG1  DS    B                   FLAG BYTE                   @BCA890E\nCRBNCSUS EQU   X'80'               NEW CONNECTION TASK CSNC IS @BCA890E\n*                                  SUSPENDED\nCRBSCSMT EQU   X'40'               SUPPRESS 'QUIESCE COMPLETE' @BCA890E\n*                                  MSG TO CSMT IN CSNC. (THIS\n*                                  BIT SET WHEN INTER-RGN FCLY\n*                                  STOPPED BY STP OR SRP)\nCRBRESNC EQU   X'20'               REQUESTS RESUMPTION OF CSNC @BBDJ10E\nCRBWHR   EQU   X'10'               SET BY KCP IF IT WOULD HAVE @BBDJ10E\n*                                  RESUMED CSNC, HAD CSNC NOT  @BBDJ10E\n*                                  ALREADY BEEN ACTIVE. THIS   @BBDJ10E\n*                                  FLAG TELLS CSNC TO RESCAN   @BBDJ10E\n*                                  SCCB'S FOR MORE WORK        @BBDJ10E\nCRBABND  EQU   X'08'               CSNC HAS ABENDED- NRML SHUT @BBDJ10E\n*                                  MUSTN'T ISSUE IS STOPNML    @BBDJ10E\nCRBISPLS DFHISCRQ TYPE=STORAGE                                 @BCA890E\n         SPACE 3                                               @BCA890E\nCRBLEN   EQU   *-DFHCRBDS          LENGTH OF CRB               @BCA890E\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EFHIRPD": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00R\\x00\\x98(o\\x00\\x98(o\\x14H\\x05\\x80\\x05\\x80\\x00\\x00\\xc1\\xc3\\xe2\\xc3\\xc5\\xe7\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-10-13T00:00:00", "modifydate": "1998-10-13T14:48:52", "lines": 1408, "newlines": 1408, "modlines": 0, "user": "ACSCEXB"}, "text": "         MACRO                                                 @BBDJ10X\n         EFHIRPD  ,                                            @BBDJ10X\n.**********************************************************************\n.*                                                                    *\n.* MACRO NAME = DFHIRPD                                               *\n.*                                                                    *\n.* DESCRIPTIVE NAME = INTER-REGION COMMUNICATION PROGRAM DSECTS       *\n.*                                                                    *\n.*  COPYRIGHT = 5655-018 (C) COPYRIGHT IBM CORP. 1979  1994           *\n.*              THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"          *\n.*              LICENSED MATERIALS - PROPERTY OF IBM                  *\n.*              REFER TO COPYRIGHT INSTRUCTIONS                       *\n.*              FORM NUMBER G120-2083                                 *\n.*                                                                    *\n.* STATUS = 4.1.0                                                     *\n.*                                                                    *\n.* CHANGE ACTIVITY :                                                  *\n.*  $MAC(DFHIRPD) COMP(IRC) PROD(CICS/ESA)   :                        *\n.*                                                                    *\n.*   PN= REASON REL YYMMDD HDXIII : REMARKS                           *\n.*  $D1= I01597 170 8402   HD0EGA : REWORK DCR                        *\n.*  $D2= I03170 310 870904 HD5LL  : MRO BATCHING                      *\n.*  $L1= J31    160 8204   HD8STC : FIX RECOVERY ERRORS IN IRP        *\n.*  $L2= J41    161 8210   HD0RJS : CROSS MEMORY SUPPORT              *\n.*  $L3= J45    170 8508   HD1MA  : SUPPORT VAE (VSE)                 *\n.*  $L4= 504    320 890410 HD2UJAH: 31 bit support for IRP cntrl blks *\n.*  $L5= 415    320 8909   HD2YAIH: SUPPORT INTER REGION WORK EXITS   *\n.*   $L6= 660    410 921110 HD5KASR : Add EXCI support                *\n.*  $L8= 641    410 930203 HD5LL  : XCF, dynamic ADD & EXCI sup@BA58600\n.*   $L9= 641    410 930518 HD2AIGR : XCF macros                     *\n.*   $LA= 641    410 930728 HD2YAIH : handle XCFBUSY conditions      *\n.*  $P1= M32244 170 860226 HD1MA  : CORRECT ATTACH FOR ICCF           *\n.*  $P2= M56295 310 890626 HD0VCAP: New exits (eg to simulate XM post)*\n.*  $P3= M90378 330 910702 HD2JPEH: FESTAE parameter list             *\n.*  $P4= M91572 330 911206 HD2JPEH: Symbolic value for maximum logons *\n.*   $P5= M83382 410 930924 HDATPMH : Move SCTE to DFHSABDS           *\n.*                                                                    *\n.**********************************************************************\n.* * *         G L O B A L   D E F I N I T I O N S                * * *\n.**********************************************************************\n         GBLB  &MVS        MVS INDICATOR                       @BBDJ10X\n         DFHEJECT\n         SPACE 2\n***********************************************************************\n* *      SUBPOOL DEFINITION AND USAGE.                              * *\n***********************************************************************\n         SPACE 1\n.*** SP129    EQU   129                 LARGE  DELETED BY APAR @BA58600\n.*** SP130    EQU   130                 SMALL  DELETED BY APAR @BA58600\nSPXSQC   EQU   252                 XCF small quick-cells       @BA58600\nSPXLQC   EQU   252                 XCF large quick-cells       @BA58600\nSP231    EQU   231 - CSA, CICS KEY, FETCH PROTECTED\nSPLQC      EQU   SP231     LARGE QUICK CELLS                   @BM14248\n         SPACE 1                                               @BM14248\nSP241    EQU   241 - CSA, CICS KEY, NON-FETCH PROTECTED        @BM14248\nSPSQC      EQU   SP241     SMALL QUICK CELLS                   @BM14248\nSPLCB      EQU   SP241     LCB & CCB                           @BM14248\nSPSCTE     EQU   SP241     SCTE & SSVT                         @BM14248\nSPLACB     EQU   SP241     LACB                                @BM14248\nSPSUDB     EQU   SP241     SUDB                                @BM14248\n         SPACE 1                                               @BM14248\nSP230    EQU   230 - Private,task related,requestor key,non fetch prot F\n                                                                   @D2A\nSPSAVE   EQU   230         WORK SPACE AREA, SUDB & SRB             @LBC\nSPLCBX   EQU   SP230               Subpool for XCF blocks      @BA58600\nSP245    EQU   245 - SQA, KEY 0, NON-FETCH PROTECTED SUBPOOL   @BM14248\nSPSRB      EQU   SP245     SRB                                 @BM14248\n.*** SPSQA    EQU   SP245                      DELETED BY APAR @BA58600\nSPTQE    EQU   SP245                                               @LAA\n         SPACE 1                                               @BM14248\nSP251    EQU   251 - TASK-LOCAL, CICS KEY, FETCH PROTECTED     @BM14248\nSPSLCB     EQU   SP251     SLCB, SCACB & SCCB                  @BM14248\n         SPACE 1                                               @BM14248\n.*** SP252    EQU   252 - TASK-LOCAL, KEY 0, N DELETED BY APAR @BA58600\nSPSSOB     EQU   SP230     SSOB & SSIB                         @BM14248\nSPLCL      EQU   SP230     COPY OF LOGON CONNECTION LIST           @LBC\n         SPACE 1                                               @BM14248\n.*** SP253    EQU   253 -LSQA TASK RELATED, KE DELETED BY APAR @BA58600\nSPUCA      EQU   SP241     USE COUNT ARRAY                 @FJ410R @L3A\n         DFHEJECT\n***********************************************************************\n* * * *                                                         * * * *\n* * * *  THE FOLLOWING DSECTS DEFINE THE CONTROL BLOCKS USED    * * * *\n* * * *  INTERNALLY BY THE INTER-REGION PROGRAM ONLY.  THEY     * * * *\n* * * *  ARE NOT USED BY ANY OTHER PROGRAMS AND THEIR FORMAT    * * * *\n* * * *  IS NOT PART OF ANY EXTERNAL INTERFACE.                 * * * *\n* * * *                                                         * * * *\n* * * *  THE DSECTS INCLUDED  ARE:                              * * * *\n* * * *                                                         * * * *\n* * * *  SUDB     SUBSYSTEM USER DEFINITION BLOCK               * * * *\n* * * *  LACB(E)  LOGON ADDRESS CONTROL BLOCK                   * * * *\n* * * *  LCB(E)   LOGON CONTROL BLOCK                           * * * *\n* * * *  CCB      CONNECTION CONTROL BLOCK                      * * * *\n* * * *  CSB      CONNECTION STATUS BLOCK                       * * * *\n* * * *                                                         * * * *\n***********************************************************************\n         SPACE 5                                               @BBDJ10X\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          SUBSYSTEM USER DEFINITION CONTROL BLOCK            * * *\n* * *                                                             * * *\n* * *    THE SUDB IS USED BY THE SVC TO REPRESENT THE             * * *\n* * *    CONNECTION BETWEEN A TASK USING THE SVC AND THE          * * *\n* * *    SVC CONTROL BLOCKS.                                      * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nSUDB     DSECT                                                 @BBDJ10X\nSUDBCHN  DS    A           ADDRESS OF NEXT SUDB                @BM13339\nSUDBLACB DS    A           ADDRESS OF LACB                     @BBDJ10X\nSUDBUID  DS    D           USER IDENTIFICATION                 @BBDJ10X\n         ORG   SUDBUID                                         @BBDJ104\nSUDBTCB  DS    A           Address of owning TCB               @BBDJ104\n         DS    H                                               @BBDJ104\nSUDBASID DS    H                   ASID of owning address space@BBDJ104\nSUDBJSDB DS    A           Pointer to job-step life-time SUDB      @L8A\nSUDBASCB DS    A           ADDRESS OF THE ASCB                 @BBDJ104\nSUDBJSB  DS    A           Pointer to IRP job-step block           @L8A\nSUDBAWS  DS    A           Address of working storage          @BM14268\nSUDBLCB  DS    A           ADDRESS OF FIRST OR ONLY LCB        @BBDJ10X\nSUDBECB  DS    F           ECB for IRWAITLK/X & IRWAITFP           @L8A\nSUDBTARG DS    A           LG of target LACBE (IRSETFP)    @FJ410R @L2C\nSUDBSR   DS    F           SRB SCHEDULE RECOVERY DATA. CONTAINS    @D1A\n*                          ..TARGET LG WHILE SRB BEING SCHEDULED\n         SPACE 1                                               @BBDJ10X\nSUDBUCA  DS    A           Pointer to XM UCA (job-step SUDB)       @L8A\nSUDBAXR# DS    H           No. of AXs required for AXRES (one)     @L8A\nSUDBAX   DS    H           XM authorization index (job-step SUDB)  @L8A\nSUDBJLLG DS    F           Index & generation no. of life of job-step  X\n                           LACBE                                   @L8A\n         SPACE 1                                               @BM14268\nSUDBAUDT DS    0XL12          AUDIT FIELDS                     @BA63731\nSUDBRCCB DS    A           Current request's CCB ptr. for recov@BA58600\nSUDBRLCB DS    A           Current request's LCB ptr. for recov@BA63731\nSUDBAFL1 DS    X           .. AUDIT FLAG 1                     @BBDJ10X\nSUDBAFPS EQU   X'80'               Foot-print is definitely set@BA58600\n*        EQU   X'40'          .. reserved                      @BBDJ10X\n*        EQU   X'20'          .. reserved\n*        EQU   X'10'          .. reserved                      @BBDJ10X\n*        EQU   X'08'          .. reserved\nSUDBAFL2 DS    X           .. AUDIT FLAG 2                     @BM14095\nSUDBAEOM EQU   X'80'          .. EOM EXIT ACTIVE (MVS ONLY)        @L3C\nSUDBAXMA EQU   X'40'               XM initialization / termination     X\n                                   active                          @L8A\n         DS    XL2         .. RESERVED                         @BM14095\n         DS    0S(*-SUDBAUDT-L'SUDBAUDT,L'SUDBAUDT+SUDBAUDT-*) @BA63731\n.*** SUDBWORK DS    2F          WORK AREA      DELETED BY APAR @BA63731\nSUDBSAV2 DS    4F          LEVEL 2 SAVE AREA                   @BM14268\nSUDBALN  DS    0D                                              @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nSUDBLEN  EQU   *-SUDB      LENGTH OF SUDB                      @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          WORK AREA AT END OF THE SRB USED BY SRB PROCESSING * * *\n* * *     RATHER THAN THE SUDB SAVE AREA.                         * * *\n* * *                                                             * * *\n***********************************************************************\n         DFHEJECT ,\n***********************************************************************\n*        Quick cell DSECTS                                            *\n***********************************************************************\n         SPACE 1\nQCCTL    DSECT ,                   Quick cell anchor               @L8A\nQCELM    DC    H'16'               Size of element                 @L8A\nQCSP#    DC    Y(SPSQC)            subpool #                       @L8A\nQCSTOR   DC    F'512'              size of block for getmain       @L8A\nQC#CELL  DC    Y(X'1F')            Number of cells in block        @L8A\n         DC    H'0'                Reserved                        @L8A\nQCFREE   DC    A(0)                storage blocks for freeing      @L8A\n         DS    0D                  align for CDS                   @L8A\nQCSEC    DC    F'0'                security count                  @L8A\nQCANCH   DC    A(0)                anchor of blocks                @L8A\n         SPACE 1\nQCCLEN   EQU   *-QCCTL             length of quick cell ctl. blk.  @L8A\n         SPACE 3\n***********************************************************************\n*  Index values corresponding to different types of small quick-cell  *\n***********************************************************************\nQCIXMXWS EQU   1                   Message Exit Working Storage    @L8A\nQCIXPHB  EQU   2                   Partner History Block           @L8A\nQCIXS#HE EQU   3                   Session Numbers Handled Element @L8A\nQCIXMQE  EQU   4                   Message Queue Element           @L8A\nQCIIRRXE EQU   5                   XCFBUSY Deferred msg element    @LAA\nQCIXMAX  EQU   5                   Maximum small quick-cell index  @LAC\n         SPACE 3\nQCBLK    DSECT ,                   Quick cell block                @L8A\nQCCHAINF DC    A(0)                forward chain                   @L8A\n         DC    A(0)                reserved - wasn't used !!!      @L8A\nQCCHAIN  DS    0A                  start of cell entries           @L8A\n         SPACE 3\nQCELL    DSECT ,                   Cell element                    @L8A\nQCELLNX  DS    A                   next cell                       @L8A\nQCELST   DS    0F                  start of data                   @L8A\n         DFHEJECT\n***********************************************************************\n*        Job Step Block                                               *\n***********************************************************************\nJSB      DSECT                     IRP job-step block              @L8A\nJSBSP    EQU   252                 Subpool for job-step block - must   X\n                                   be allocated to ACSBXTCB by branch  X\n                                   entry to GETMAIN in case DFHIRP     X\n                                   runs under a TCB ATTACHEd with      X\n                                   JSTCB=YES                       @L8A\nJSBSCTE  DS    A                   Pointer to SCTE if this JSB is      X\n                                   included in SCTECNT; zero if not@L8A\nJSBEOMRT DS    F                   Token for EOM resource manager so   X\n                                   that it can be deleted at EOT   @L8A\nJSBEOTRT DS    F                   Token for ASCBXTCB's EOT resource   X\n                                   manager                     @BA63731\nJSBXCFTR DS    A                   Pointer to XCF Trace Table      @L8A\nJSB#LCBS DS    F                   No. of LCBs in address space    @L8A\nJSBTSW#L DS    F                   TRANSWAP use count - no. of LCBs    X\n                                   requiring non-swappability      @L8A\nJSBUCA#L DS    F                   UCA & AX use count - no. of LCBs    X\n                                   with any XM-capable LCBEs       @L8A\nJSBETL#L DS    F                   ET & LX use count - no. of LCBs     X\n                                   that are allowed to use PC for XCF  X\n                                   or having any XM-capable LCBEs  @L8A\nJSBETTKN DS    F                   XM entry table token            @L8A\nJSBLX    DS    H                   XM linkage index                @L8A\nJSBXMFLG DS    X                   XM flags                        @L8A\nJSBXMTSW EQU   X'80'               TRANSWAP completed successfully @L8A\nJSBXMLLG EQU   X'40'               XM-owning LACBE fully allocated @L8A\nJSBXMETC EQU   X'20'               Entry table is connected        @L8A\n.*** JSBXMETH EQU   X'10'               ENTRY  DELETED BY APAR @BA63731\n.***                                    LX MUS DELETED BY APAR @BA63731\n         DS    X                   Reserved                        @L8A\n*** JSBUSRID DS    CL8                    @L8A DELETED BY APAR @BA58600\n         SPACE 2\nJSBQCA   DS    (QCIXMAX)A          Array of pointers to control areas  X\n                                   for small quick-cells           @L8A\nJSBLQCA  DC    A(JSBLQCAN)         ptr. to Large quick cell anch.  @L8A\n         DS    0D                  align for CDS                   @L8A\nJSBQCAN  DS    (QCIXMAX)XL(QCCLEN) Array of control areas for small    X\n                                   quick-cells                     @L8A\n         SPACE 1\n         DS    0D                  align for CDS fields            @L8A\nJSBLQCAN DS    (LQCCTLEN)X         Control area for large quick-cells  X\n                                                                   @L8A\n         SPACE 1\nJSBL     EQU   *-JSB               Length of job-step block        @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          LOGON ADDRESS CONTROL BLOCK                        * * *\n* * *                                                             * * *\n* * *    THE LACB IS USED BY THE INTER-REGION PROGRAM AS AN       * * *\n* * *    INDEX TABLE OF ADDRESSES OF LCBS.  EACH LOGON ADDRESS    * * *\n* * *    CONTROL BLOCK ENTRY (LACBE) REPRESENTS ONE ENTRY IN      * * *\n* * *    THE TABLE.  THE TABLE IS INDEXED BY THE LACBE INDEX      * * *\n* * *    NUMBER WHICH IS STORED IN THE CCB FOR EACH ACTIVE        * * *\n* * *    CONNECTION.                                              * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nLACB     DSECT                                                 @BBDJ10X\nLACBLEN  DS    F           TOTAL LENGTH OF LACB                @BBDJ10X\nLACBNE   DS    H           NUMBER OF LACB ENTRIES              @BBDJ10X\nLACBMAXU DS    H           Maximum number of XM users allowed      @L8A\n         DS    F           Reserved                                @L8C\nLACBSUDB DS    A           SUDB CHAIN ANCHOR                   @BBDJ10X\nLACBSCTE DS    A           ADDRESS OF SCTE                     @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nLACBQCA  DC    A(LACBQCAN)         pointer to Quick cell anchor    @L8A\nLACBLQCA DC    A(LACBLQCN)         pointer to Large quick cell anc @L8A\n         DS    0D                  align for CDS                   @L8A\nLACBQCAN DS    (QCCLEN)X           Quick cell anchor               @L8A\n         SPACE 1                                               @BBDJ10X\n         DS    0D                  align for CDS fields            @L8A\nLACBLQCN DS    (LQCCTLEN)X         Large quick cell anchor         @L8A\n         SPACE 1\nLACB#USR EQU   2047                Number of usable LACBEs         @L8A\nLACBENTY DS    0D          START OF ENTRIES                    @BBDJ104\n         SPACE 3                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            LOGON ADDRESS CONTROL BLOCK ENTRY                    * *\n* *                                                                 * *\n* *      EACH LACBE CONTAINS INFORMATION PERTINENT TO ONE USER      * *\n* *      WHO HAS LOGGED ON.  IT CONTAINS THE USER'S NAME, THE       * *\n* *      ADDRESS OF THE LCB AND THE CONTROLLING FOOTPRINT STRIP.    * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nLACBE    DSECT                                                 @BBDJ10X\nLACBENM  DS    CL8         USERID FOR THIS LOGON               @BBDJ10X\nLACBELG  DS    0F          LACBE INDEX & GENERATION NUMBERS    @BBDJ10X\nLACBEL   DS    H           .. LACBE INDEX NUMBER               @BBDJ10X\nLACBEG   DS    H           .. GENERATION NUMBER                @BBDJ10X\nLACBELCB DS    A           ADDRESS OF LCB                      @BBDJ10X\nLACBEST1 DS    X           STATUS BYTE 1                       @BA58600\n*   The value of status byte 1 specifies the weakest type of   @BA58600\n*   foot-print that may NOT be set.                            @BA58600\n*   If LACBEST1 = 0, no foot-prints may be set.                @BA58600\n*   If LACBEST1 = LACBESCN,  a CONNECT foot-print may not be se@BA58600\n*   the weaker foot-print needed for all other operations may b@BA58600\n*   If LACBEST1 = 2*LACBESCN, any type of foot-print may be set@BA58600\nLACBESCN EQU   X'20'       A CONNECT foot-print is requested by        X\n                           setting this bit to 1 in the first byte     X\n                           of the LG value passed to IRSETFP   @BA58600\n.*** *                          NO FOOTPRINTS  DELETED BY APAR @BA58600\n.***          DS   X            RESERVED       DELETED BY APAR @BA58600\n.*** *ACBENUQ EQU   X'80'       LOGON NAME NEE DELETED BY APAR @BA58600\n         DS    0F                                          @FJ410R @L2C\n         SPACE 1                                               @BBDJ10X\nLACBELEN EQU   *-LACBE     LENGTH OF LACB ENTRY                @BBDJ10X\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          LOGON CONTROL BLOCK.                               * * *\n* * *                                                             * * *\n* * *    THE LCB IS THE SOURCE OF ALL INFORMATION RELEVANT TO A   * * *\n* * *    PARTICULAR LOGON TO THE SVC; THE SUBSYSTEM LOGON CONTROL * * *\n* * *    BLOCK REFLECTS CERTAIN OF THE LCB INFORMATION WHICH IT   * * *\n* * *    IS RELEVANT FOR THE SUBSYSTEM LEVEL OF INTER-REGION      * * *\n* * *    COMMUNICATION FUNCTION TO SEE.  FOR THIS REASON THE      * * *\n* * *    STATUS BYTES IN THE LCB AND THE SLCB ARE IDENTICAL;      * * *\n* * *    FLAGS IN THOSE STATUS BYTES ARE DEFINED WITH THE         * * *\n* * *    DEFINITION OF THE SLCB IN THE DFHIRSDS COPY BOOK.        * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nLCB      DSECT                                                 @BBDJ10X\nLCBUSID  DS    0F          USER IDENTIFICATION                 @BBDJ10X\nLCBUSNUM DS    H           .. USER NUMBER                      @BBDJ10X\nLCBUSRID DS    H           .. USER IDENTIFIER                  @BBDJ10X\nLCBSLCBA DS    A           ADDRESS OF SLCB                     @BBDJ10X\nLCBSUDB  DS    A           ADDRESS OF SUDB                     @BBDJ10X\nLCBCHAIN DS    A           ADDRESS OF NEXT LCB FOR THIS SUDB   @BBDJ10X\nLCBLACBE DS    A           ADDRESS OF LACBE                    @BBDJ10X\n         DS    H           reserved\nLCBSYTOT DS    H           TOTAL NUMBER OF CONNECTABLE SYSTEMS @BBDJ10X\nLCBQICT  DS    F           QUIESCE CONNECTION COUNT            @BBDJ10X\nLCBSLSP  DS    0D          OPERAND FOR CDS INSTRUCTION             @D1A\nLCBSLOCK DS    0F          SRB LOCK USED TO SERIALIZE THE USE OF   @D1A\n*                          ..THE SRB BLOCK BY SCHEDULE AND\n*                          ..PROCESSING OF SRB PARAMETER BLOCK\n*                          ..WORK QUEUE BY THE SRB PROCESSOR\nLCBSLOI  DS    H           POSSIBLE VALUES ARE:                    @D1A\nLCBSLOIF EQU   X'8000'     LOCK NOT HELD                           @D1A\n*                          LACBE INDEX = A TCB HAS SCHEDULED SRB\n*                          ..AND SET ITS LACBE INDEX IN THE LOCK\n*                          ZERO        = SRB HOLDS LOCK\nLCBSLOC  DS    H           COUNTER INCREMENTED EACH TIME A TCB     @D1A\n*                          ..PLACES LACBE INDEX IN LOCK\nLCBSRBP  DS    F           SRB PARAMETER CHAIN                 @BBDJ104\nLCBSRB   DS    F           ADDR OF OUR SRB                     @BBDJ104\nLCBSRBWA DS    F           ADDR OF OUR SRB'S WORK AREA             @D1A\nLCBFRRPM DS    F           ADDRESS OF FRR PARAMETER AREA (UNUSED)  @L3C\nLCBRMTR  DS    H           RESOURCE MANAGER TERMINATION ROUTINE        C\n                           FOR PURGE OF SRBS                       @D1A\nLCBXMREQ DS    BL.8        XM resources needed for this LCB        @L8A\nLCBXMTSW EQU   X'80'       LCB requires / has got a non-swappable      X\n                           address space                           @L8A\nLCBXMUCA EQU   X'40'       LCB requires / has got an XM use count      X\n                           array (UCA) & authorization index (AX)  @L8A\nLCBXMETL EQU   X'20'       LCB requires / has got an entry table &     X\n                           linkage index (LX)                      @L8A\nLCBXMGOT DS    BL.8        XM resources obtained & fully initialized   X\n                           for this LCB and included in the        @L8AX\n                           corresponding JSB use count             @L8A\nLCBSTTUS DS    0F          STATUS BYTES                        @BBDJ10X\nLCBSTTS1 DS    C           .. STATUS BYTE 1                    @BBDJ10X\nLCBSTTS2 DS    C           .. STATUS BYTE 2                    @BBDJ10X\nLCBSTTS3 DS    C           .. STATUS BYTE 3                    @BBDJ10X\nLCBSTTS4 DS    C           .. STATUS BYTE 4                    @BBDJ10X\n         SPACE 1                                                   @D2A\nLCBBTCHV DS    F           Batching value                          @D2C\nLCBBTCHC DS    F           Current batch count                     @D2C\nLCBSVCL  DS    B           Save value of SVCLOC parm               @L4A\n*        EQU   B'10000000' 1... .... Get storage above 16m         @L8C\nLCBWEARR DS    A           address of exit point array             @L5A\nLCBWELTP DS    F           work exit latent parm                   @L5A\nLCBWEACT DS    F           bit map indicating active exits         @L5A\nWENCACT  EQU   X'01'       new connect exit point is active        @L5A\nWESWACT  EQU   X'02'       switch exit point is active             @L5A\nWESW1ACT EQU   X'04'       switch 1st exit point is active         @L5A\nWEDSNACT EQU   X'08'       disconnect normal exit point is active  @L5A\nWEDSAACT EQU   X'10'       disconnect abnormal exit pnt is active  @L5A\nWEIQUACT EQU   X'20'       immediate quiesce exit point is active  @L5A\nWEDWPACT EQU   X'40'       disc when possible exit point is active @L5A\nWEQCACT  EQU   X'80'       Quiesce complete exit point is active   @L5A\nLCBWENME DS    CL8         name of inter region work exit          @L5A\nLCBWETYP DS    0A          work exit type                          @L5A\nLCBWEVER DS    X           work exit version                       @L5A\nWETYP311 EQU   X'00'       311 work exit type                      @L5A\nWETYP320 EQU   X'01'       320 work exit type                      @L5A\n         DS    3X          reserved                                @L5A\n*  The Length/Address ordering of the following must be maintained\nLCBALCBL DS    F           Length of active vector                 @L8A\nLCBALCBV DS    A           Pointer to active LCBE address vector   @L8A\nLCBALCBE DS    A           Pointer to active LCBE chain            @L8A\nLCBASCAL DS    F           Length of active SCACB                  @L8A\nLCBASCAA DS    A           Pointer to active SCACB                 @L8A\nLCB#SCCB DS    F           Total number of SCCBs committed so far  @L8A\nLCBALCBD DS    A           Pointer to active LCBD chain            @L8A\nLCBAPPLD DS    CL8         APPLID (name specified on LOGON request)@L8A\nLCBMEMTK DS    XL8         Our XCF member token from IXCJOIN       @L8A\nLCBRCFGL DS    F           Reconfiguration lock (for dynamic CHANGE@L8A\nLCBRCFGO DS    X'80'       Reconfiguration in progress             @L8A\nLCBCC#   DS    H           Reconfiguration change counter which is @L8A\n*                          used to check whether a CCB address sent@L8A\n*                          in the XCF message control data is still@L8A\n*                          valid (for dynamic CHANGE)              @L8A\n         DS    H           Reserved                                @L8A\nLCBPHB   DS    A           Pointer to first partner history block  @L8A\n*                          for partners whose first XCF message    @L8A\n*                          arrived when this LCB had no active     @L8A\n*                          LCBE for the relevant APPLID            @L8A\nLCBQSYSL DS    F                Length of Group Exit's answer area for X\n                                IXCQUERY REQINFO=SYSPLEX requests  @L8A\nLCBQSYSA DS    A                Pointer to Group Exit's IXCQUERY       X\n                                REQINFO=SYSPLEX answer area        @L8A\nLCBGXWSA DS    A                Pointer to Group Exit's working        X\n                                storage                            @L8A\nLCBIRRX_INSTANCE  DS F          XCF retry SRB instance number      @LAA\n                  DS 0D         align for CDS on lock & q header   @LAA\nLCBIRRX_LOCK      DS A          XCF retry SRB lock                 @LAA\n***********************************************************************\nDIE_LOCKED        EQU 128       serialize access to TQE/SRB        @LAA\n*        This bit is used to serialize access to the TQE and          *\n*        SRB used for XCF MSGO retries. If a dispatchable             *\n*        unit (TCB or SRB) manages to set the DIE_LOCKED bit on       *\n*        then it may then set the DIE, the DIE will then              *\n*        schedule the SRB.                                            *\n***********************************************************************\n                  SPACE 1                                          @LAA\n***********************************************************************\nDIE_DISABLED      EQU 64                                           @LAA\n*        This bit is set during clear/logoff processing and indicates *\n*        that the DIE willnever be scheduled again. If this bit is on *\n*        then the DIE_LOCKED bit will also be on indicating that      *\n*        the DIE is locked to the termination process.                *\n*        This bit is neccessary so that if an unexpected message      *\n*        arrives in the message exit, and the reply generated within  *\n*        the message exit fails for an XCF busy condition then we can *\n*        detect that the message will never be resent.                *\n***********************************************************************\nLCBIRRX_Q         DS A          XCR retry SRB work queue head      @LAA\nLCBIRRX_TQE       DS A          Address of the XCF retry TQE       @LAA\nLCBIRRX_SRB       DS A          Address of the XCF retry SRB       @LAA\nLCBIRRX_WS        DS A          Address of the XCF retry SRB W/S   @LAA\nLCBIRRX_TIME      DS D          Time the SRB should next run       @LAA\nLCBIRRX_RMTR      DS H          XCF retry SRB RMTR routine (BR RE) @LAA\n         DS    0D                                              @BBDJ104\n         SPACE 1                                               @BBDJ10X\nLCBLNGTH EQU   *-LCB       LENGTH OF LCB                       @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n         SPACE 5                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            LOGON CONTROL BLOCK ENTRY                            * *\n* *                                                                 * *\n* *      THE LOGON CONTROL BLOCK CONTAINS AN ENTRY (LCBE) FOR       * *\n* *      EACH SYSTEM TO WHICH CONNECTIONS MAY BE MADE, I.E. ONE     * *\n* *      FOR EACH ENTRY IN THE LOGON CONNECTIONS LIST SPECIFIED     * *\n* *      WHEN THE USER LOGGED ON.                                   * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nLCBE     DSECT                                                 @BBDJ10X\nLCBENEXT DS    A                   address of next LCBE        @BA58600\nLCBELCBX DS    A           Pointer to XCF LCBE extension block @BA58600\nLCBECCB  DS    A           ADDRESS OF 1ST CCB FOR THIS SYSTEM  @BBDJ10X\nLCBENUM  DS    0F          NUMBERS OF CCBS FOR SYSTEM          @BBDJ10X\nLCBESNUM DS    H           NUMBER OF SECONDARY CCBS FOR SYSTEM @BBDJ10X\nLCBEPNUM DS    H           NUMBER OF PRIMARY CCBS FOR SYSTEM   @BBDJ10X\nLCBENAM  DS    CL8         NAME OF CONNECTED TO SYSTEM         @BA58600\nLCBEUSID DS    CL8         Our own USERID when we last used this LCBE  X\n                           for an outgoing CONNECT             @BA58600\nLCBELG   DS    F           LG of current partner for out-bound CONNECTsX\n                           - zero if XCF is being used         @BA58600\nLCBEFLG  DS    X           FLAG BYTE                           @BBDJ10X\n*** LCBESECN EQU   X'80'       .. ACCEP BDJ10X DELETED BY APAR @BA58600\nLCBEXMOK EQU   X'80'       .. XM ACCEPTABLE FOR THIS CNECTION          F\n                              MVS ONLY                             @L3C\n         SPACE 1                                               @BBDJ10X\nLCBEDYNF DS    X           Dynamic flags                           @L8C\nLCBEPTOK EQU   X'80'       Current partner's LG or XCF token kn@BA58600\nLCBESEOK EQU   X'40'       Our current USERID is authorized to CONNECT X\n                           to the current partner instance     @BA58600\nLCBEQUSC EQU   X'20'       LCBE in quiesce                             X\n                                                                   @L8A\nLCBEINDX DS    H           This LCBE's index in LCBE address vector@L8A\n*** LCBENEXT DS    A                      @L8A DELETED BY APAR @BA58600\n*** LCBELCBX DS    A           Pointer    @L8A DELETED BY APAR @BA58600\n*** LCBELG   DS    F           LG of cu NNECTs DELETED BY APAR @BA58600\n***                                       @L8A DELETED BY APAR @BA58600\n         DS    0D          Force length to multiple of 8       @BA58600\nLCBELEN  EQU   *-LCBE                                          @BBDJ10X\n         SPACE 3                                                   @L8A\nLCBEVECT DSECT                     LCBE address vector             @L8A\nLCBEVELM DS    A                   LCBE element address            @L8A\n         SPACE 3\nLCBD     DSECT                     LCBE block prefix               @L8A\nLCBDTOKN DS    CL8                 Token for block add             @L8A\nLCBDFLG  DS    B                   Flag byte                       @L8A\nLCBDFROK EQU   X'80'               ROLL-BACK is valid for this @BA58600\nLCBDFCOK EQU   X'40'               COMMIT is valid for this LCB@BA58600\n         DS    3X                  reserved                        @L8A\n* The length/address ordering of the following must be maintained\nLCBDLEN  DS    F                   Length of this block & prefix   @L8A\nLCBDNEXT DS    A                   pointer to next block or 0      @L8A\nLCBDEXTL DS    F                   Length of extension block       @L8A\nLCBDEXTP DS    A                   Pointer to XCF extension block  @L8A\nLCBDSCCL DS    F                   Length of SCCB block            @L8A\nLCBDSCCP DS    A                   pointer to SCCB block           @L8A\n         DS    0D                  round to double word            @L8A\nLCBDL    EQU   *-LCBD              length of this prefix           @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            XCF LOGON CONTROL BLOCK ENTRY EXTENSION              * *\n* *                                                                 * *\n* *      THE XCF EXTENSION TO THE LCBE CONTAINS XCF SPECIFIC        * *\n* *      INFORMATION REGARDING CONNECTIONS TO OTHER SYSTEMS. THIS   * *\n* *      BLOCK IS GETMAINED FROM PRIVATE STORAGE WHEN THE           * *\n* *      CORRESPONDING LCBE IS ACQUIRED.                            * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1\nLCBEX    DSECT\nLCBEXPHB DS    A           Pointer to first partner history block  @L8A\n*                          for partners whose APPLID matches that  @L8A\n*                          in the LCBE (LCBENAM)                   @L8A\nLCBEXPCC DS    F           \"Primary CONNECT successful\" change counter X\n                                                                   @L8A\nLCBEXPTK DS    XL8         XCF member token of partner for         @L8A\n*                          outgoing CONNECTS                       @L8A\nLCBEXCSC DS    F           Cumulative CONNECT counter              @L8A\nLCBEXSN# DS    F           Session number for next outgoing CONNECT@L8A\nLCBEXCSS DS    0D                Aligned for CDS                       X\n                                                                   @L8A\n         DS    F                 Session number of start of sequence   X\n                                                                   @L8A\nLCBEX#PC DS    F                 Partner's number of primary CCBS  @L8A\nLCBEXTOD DS    D                 TOD of end of \"CONNECTs inhibited\"    X\n                                 interval etc. - aligned for CDS   @L8A\n         DS    0D          Alignment for CCBX's                    @L8A\nLCBEXLEN EQU   *-LCBEX     Length of LCBE extension                @L8A\n         DFHEJECT\n***********************************************************************\n* * *                                                             * * *\n* * *          CONNECTION CONTROL BLOCK                           * * *\n* * *                                                             * * *\n* * *    THE CCB IS THE REPOSITORY OF ALL INFORMATION RELEVANT    * * *\n* * *    TO A PARTICULAR CONNECTION FROM THIS SUBSYSTEM.          * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nCCB      DSECT                                                 @BBDJ10X\nCCBOWNER DS    0D          OWNERSHIP FIELDS                        @D1A\nCCBLG    DS    0F          OTHER SIDE'S LACBE NO. & GENERATION @BBDJ10X\nCCBL     DS    H           .. OTHER SIDE LACBE INDEX NUMBER    @BBDJ10X\nCCBG     DS    H           .. OTHER SIDE GENERATION NUMBER     @BBDJ10X\nCCBCSB   DS    A           ADDRESS OF CONNECTED-TO CSB         @BBDJ10X\n         SPACE 2\n* When a CCB is being used for an XCF session, CCBCSB contains a bit  *\n* string instead of a CSB pointer.  CSBs are always double-word       *\n* aligned, so to ensure correct interpretation of the contents of     *\n* CCBCSB, the 3 low order bits of the XCF bit string must never all   *\n* be zero.  This requirement constrains the choice of values for      *\n* CCBKCONN, CCBKINIT and CCBKMXWH (but none of the others) to the 3   *\n* low order bits.                                                     *\nCCBKXCF  EQU   B'111'      The 3 low order bits being not all zero     X\n                           indicates that an XCF session exists    @L8A\n         SPACE 2\nCCBKCONN EQU   X'00000001' Indicator that XCF CONNECT is in progress,  X\n                           in TCB mode if this is a secondary CCB, in  X\n                           SRB mode in the XCF Message Exit if this is X\n                           a primary CCB                           @L8A\nCCBKINIT EQU   X'00000002' Indicator that XCF CCB is initialized -     X\n                           i.e. CCBXSN# & CCBXPTK are valid and the    X\n                           CCB and SCCB have been initialized too  @L8A\nCCBKMXWH EQU   X'00000004' Indicator that the Message Exit has done    X\n                           something affecting this session (Was Here) X\n                                                                   @L8A\nCCBKGXWH EQU   X'00000008' Indicator that the Group Exit has done      X\n                           something affecting this session (Was Here) X\n                                                                   @L8A\nCCBKOPEN EQU   X'00000010' Indicator that XCF connection to partner    X\n                           has been established, so SWITCH, PULL,      X\n                           QUIESCE and DISCONNECT should be processed  X\n                           normally                                @L8A\nCCBKTOKS EQU   X'00000020' Indicator that it is valid to issue SWITCH  X\n                           in TCB mode, i.e. PULL is not pending and   X\n                           our partner has replied to our last SWITCH  X\n                           (if we have issued any yet)             @L8A\nCCBKMOKS EQU   X'00000040' Indicator that it is valid for our Message  X\n                           Exit to accept an incoming SWITCH from our  X\n                           partner, i.e. PULL (in TCB mode) is not     X\n                           pending and we have already replied to our  X\n                           partner's last SWITCH (if any)          @L8A\n* Note that a TCB mode PULL is pending if and only if both CCBKTOKS and\n* CCBKMOKS are off and everything else is favourable, e.g. CCBKOPEN on\nCCBKWAIT EQU   X'00000080' Indicator that a TCB mode request is        X\n                           waiting for the completion of incompatible  X\n                           Group Exit or Message Exit processing   @L8A\nCCBKRESV EQU   X'00000700' Three bits reserved for future use      @L8A\nCCBKTSWI EQU   X'00000800' TCB mode SWITCH in progress             @L8A\nCCBKTIQU EQU   X'00001000' TCB mode IMMEDIATE QUIESCE in progress  @L8A\nCCBKTDSC EQU   X'00002000' TCB mode DISCONNECT in progress         @L8A\nCCBKTNQU EQU   X'00004000' TCB mode NORMAL QUIESCE in progress     @L8A\nCCBKTPUL EQU   X'00008000' TCB mode PULL in progress               @L8A\nCCBKGALV EQU   X'00010000' Group Exit ABNORMAL LEAVE in progress   @L8A\nCCBKGNLV EQU   X'00020000' Group Exit NORMAL LEAVE in progress     @L8A\nCCBKGNQU EQU   X'00040000' Group Exit NORMAL QUIESCE in progress   @L8A\nCCBKMRST EQU   X'00080000' Message Exit RESET in progress          @L8A\nCCBKMIQU EQU   X'00100000' Message Exit IMMEDIATE QUIESCE in progress  X\n                                                                   @L8A\nCCBKMDSC EQU   X'00200000' Message Exit DISCONNECT in progress     @L8A\nCCBKMNQU EQU   X'00400000' Message Exit NORMAL QUIESCE in progress @L8A\nCCBKMSSW EQU   X'00800000' Message Exit SWITCH started & still not     X\n                           finished (might be segmented)           @L8A\nCCBKM1SW EQU   X'01000000' Constant used to increase or decrease       X\n                           CCBKMSWI by 1                           @L8A\nCCBKMSWI EQU   -CCBKM1SW   Message Exit SWITCH in progress - count     X\n                           allowing many SWITCH Message Exit SRBs to   X\n                           run in parallel (current value is 255)  @L8A\n         SPACE 4\nCCBSCCBA DS    A           ADDRESS OF SCCB                     @BBDJ10X\nCCBCCBX  DS    A                   Pointer to XCF CCB extension@BA58600\nCCBLCBEP DS    A           address of LCBE for this CCB        @BA58600\nCCBLCBAD DS    A           ADDRESS OF LCB FOR THIS CCB         @BA58600\n*** CCBLCBEP DS    A           address    @L8C DELETED BY APAR @BA58600\nCCBDATA  DS    A           DATA BUFFER ADDRESS                     @L3C\nCCBSTATS DS    B           STATUS BYTES                        @BBDJ10X\nCCBPRIM  EQU   X'80'       .. PRIMARY CCB INDICATOR            @BBDJ10X\nCCBLOFS  EQU   X'40'       .. LAST CCB FOR A SYSTEM                @L8C\nCCBDYNF  DS    B           Dynamic flags                           @L8A\nCCBDPC   EQU   X'80'       .. PC instruction must be used for SWITCH   X\n                           and PULL requests (i.e. XCF/PC or XM)   @L8A\nCCBDXM   EQU   X'80'+X'40' .. This session is using XM             @L8A\nCCBDSEQ  EQU   X'30'       .. CCB sequence number                  @L8A\n******* Need to redefine CCBAXIST correctly ***************\nCCBAXIST DS    0F          AX INDEX AND STATUS FLAGS       @FJ410R @L2A\n         DS    H           INDEX OF AX VALUE IN USE FOR THIS           F\n                           CONNECTION                      @FJ410R @L2A\n         DS    H           STATUS FLAGS FOR COMPARE AND SWAP           F\n                                                           @FJ410R @L2A\n* FLAGS IN BYTE ONE OF STATUS\nCCBAXCNT EQU   X'80'       AX INCLUDED IN USE COUNT        @FJ410R @L2A\nCCBCNDP  DS    A                   Pointer to quick-cell containing    X\n                                   data (currently USERID & time-stamp)X\n                                   to be copied to this primary        X\n                                   CCB's SCCB by the CONNECT SRB -     X\n                                   field is used only by IRC, so it    X\n                                   could perhaps overlay CCBAXIST,     X\n                                   which is used only by XM        @L8A\n*** CCBCCBX  DS    A                      @L8A DELETED BY APAR @BA58600\n         SPACE 1                                               @BBDJ10X\n         DS    0D          ALIGNMENT                           @BBDJ10X\nCCBLNGTH EQU   *-CCB       LENGTH OF CCB                       @BBDJ10X\n         SPACE 8                                               @BBDJ10X\nCND      DSECT                                                     @L8A\nCNDUSRID DS    CL8                 RACF USERID of job-step owning the  X\n                                   secondary CCB which is being        X\n                                   connected to the primary CCB        X\n                                   pointing at this CND            @L8A\nCNDSTOD  DS    XL8                 TOD clock reading stored under the  X\n                                   secondary's TCB after deciding to   X\n                                   CONNECT to this CND's primary CCB   X\n                                                                   @L8A\nCNDLEN   EQU   *-CND               Length of CND                   @L8A\n         DS    0S(CSBLEN-CNDLEN)   Force assembly error if a CND       X\n                                   becomes longer than a CSB       @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          XCF CONNECTION CONTROL BLOCK EXTENSION             * * *\n* * *                                                             * * *\n* * *    THE CCBX IS THE XCF SPECIFIC EXTENSION TO THE CCB AND    * * *\n* * *    INCLUDES INFORMATION RELEVANT TO A PARTICULAR CONNECTION * * *\n* * *    FROM THIS SUBSYSTEM. IT IS GETMAINED OUT OF PRIVATE      * * *\n* * *    STORAGE.                                                 * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                                   @L8A\nCCBX     DSECT                                                     @L8A\nCCBXCMCT DS    0D          Message counter & queue pointer for CDS @L8A\n         DS    F           Cumulative message counter              @L8A\nCCBXMQP  DS    A           Pointer to message queue (the sign bit  @L8A\n*                          is a lock bit)                          @L8A\nCCBXMSG# DS    F           Message number for next message sent    @L8A\nCCBXSN#  DS    F           Current session number                  @L8A\nCCBXPTK  DS    D           Partner's XCF member token - must be D  @L8A\n         DS    0D          Force double-word alignment to ensure       X\n                           atomic fetch/store with LM/STM          @L8A\n         DS    H           Reserved                                @L8A\nCCBXPCC# DS    H           Partner's reconfiguration change counter@L8A\nCCBXPCCB DS    A           Address of partner's CCB                @L8A\nCCBXLREM DS    0D          Force double-word alignment for CDS     @L8A\n         DS    F           Length remaining to be received for a       X\n                           segmented SWITCH                        @L8A\nCCBXAREA DS    A           Pointer to target area captured from        X\n                           SCCBAREA during segmented SWITCH - sign bit X\n                           distinguishes between target address of     X\n                           zero & target area too small            @L8A\nCCBXPHB  DS    A           Pointer to associated PHB if this CCB/CCBX  X\n                           is included in the PHB's connected session  X\n                           count                                   @L8A\n         DS    0D          Force length to a double-word multiple  @L8A\nCCBXLEN  EQU   *-CCBX      Length of CCB extension                 @L8A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          CONNECTION STATUS BLOCK                            * * *\n* * *                                                             * * *\n* * *    THE CSB DESCRIBES THE CURRENT STATUS OF A PARTICULAR     * * *\n* * *    CONNECTION BETWEEN TWO SYSTEMS.                          * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nCSB      DSECT                                                 @BBDJ10X\nCSBCHAIN DS    0A          ADDRESS OF NEXT AVAILABLE CSB       @BBDJ10X\nCSBCCB   DS    0D          ADDRESSES OF CCBS                   @BBDJ10X\nCSBPRIM  DS    A           .. ADDRESS OF PRIMARY CCB           @BBDJ10X\nCSBSECD  DS    A           .. ADDRESS OF SECONDARY CCB         @BBDJ10X\nCSBSTAT  DS    0D          CSB STATUS FLAGS                    @BBDJ10X\nCSBPFLAG DS    BL4         .. PRIMARY FLAG BYTES               @BBDJ10X\nCSBSFLAG DS    BL4         .. SECONDARY FLAG BYTES             @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nCSBLEN   EQU   *-CSB       LENGTH OF CSB                       @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            CONNECTION STATUS BLOCK FLAG DEFINITIONS             * *\n* *                                                                 * *\n* *      THE CONNECTION STATUS BLOCK (CSB) CONTAINS TWO WORDS OF    * *\n* *      FLAG BITS.  THE FIRST WORD REFERS TO THE PRIMARY SIDE OF   * *\n* *      THE CONNECTION AND THE SECOND TO THE SECONDARY SIDE.       * *\n* *      FLAGS ARE DEFINED IDENTICALLY IN THE TWO WORDS WITH THE    * *\n* *      EXCEPTION OF THE FLAGS IN THE FIRST BYTE WHICH ARE USED    * *\n* *      ONLY IN THE SECONDARY WORD.                                * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE ONE (SECONDARY SIDE ONLY)                      *\nCSBSPCNG EQU   X'80'       Secondary is acquiring primary CCB  @BA58600\nCSBSCNG  EQU   X'40'       SECONDARY IS CONNECTING             @BA58600\nCSBXMCNG EQU   X'20'       CROSS MEMORY CONNECT IN PROGRESS        @D1A\nCSBSCND  EQU   X'10'       LINK IS CONNECTED                   @BA58600\nCSBATREQ EQU   X'08'       ATSET REQUIRED BY SRB               @BA58600\nCSBATNCM EQU   X'04'       ATSET NOT YET COMPLETED BY SRB  @FJ410R @L2A\nCSBATINP EQU   X'02'       ATSET IN PROGRESS by SRB            @BA58600\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE TWO - STATUS FLAGS                             *\nCSBXDED  EQU   X'80'       THIS SIDE HAS DISCONNECTED          @BBDJ10X\nCSBXIQD  EQU   X'40'       This side has IQed                  @BA58600\n.*** CSBXIQD  EQU   X'20'       THIS SIDE HAS  DELETED BY APAR @BA58600\nCSBXWAIT EQU   X'04'       THIS SIDE IS WAITING                @BBDJ10X\nCSBXPP   EQU   X'02'       THIS SIDE HAS A PULL PENDING        @BBDJ10X\nCSBXIC   EQU   X'01'       CONTROL IS ON THIS SIDE             @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE THREE - PROGRESS FLAGS                         *\nCSBXDING EQU   X'80'       THIS SIDE IS DISCONNECTING          @BBDJ10X\nCSBXSWIT EQU   X'40'       THIS SIDE IS SWITCHING              @BBDJ10X\nCSBXPULL EQU   X'20'       THIS SIDE IS PULLING                @BBDJ10X\nCSBXNQ   EQU   X'10'       THIS SIDE IS NQING                  @BBDJ10X\nCSBXIQ   EQU   X'08'       THIS SIDE IS IQING                  @BBDJ10X\nCSBXCLER EQU   X'04'       THIS SIDE IS CLEARING               @BBDJ10X\nCSBXSWIS EQU   X'02'       The SRB scheduled to the other side is      X\n                           executing the SWITCH notification and       X\n                           termination logic                   @BA58600\n         DFHEJECT                                              @BA58600\n***************************************************************@BA58600\n***************************************************************@BA58600\n* *                                                            @BA58600\n* *               WORK QUEUE PARAMETER BLOCK                   @BA58600\n* *                                                            @BA58600\n* *       THIS BLOCK IS BUILT WHEN WORK TO BE PROCESSED IN SRB @BA58600\n* *       MODE IS SCHEDULED. IT PROVIDES INFORMATION TO IDENTIF@BA58600\n* *       THE CODE TO BE EXECUTED IN SRB MODE AND THE CONTROL  @BA58600\n* *       BLOCKS TO BE ACCESSED.                               @BA58600\n* *                                                            @BA58600\n***************************************************************@BA58600\n***************************************************************@BA58600\nSRBP     DSECT                                                 @BA58600\nSRBPFCHN DS    A                   ADDRESS OF NEXT PARM BLOCK  @BA58600\nSRBPBCHN DS    A                   ADDR OF PREVIOUS PARM BLOCK @BA58600\nSRBPCSB  DS    A                   ADDR OF CSB FOR PROCESSING  @BA58600\nSRBPFUNC DS    H                   REQUEST FUNCTION TYPE       @BA58600\nSRBPSIDE DS    C                   PRIM/SEC CSB INDICATOR      @BA58600\nSRBPFLAG DS    8B                  FLAG BYTE - reserved        @BA58600\n         SPACE ,                                               @BA58600\n         DFHEJECT                                              @BCDJ104\n***********************************************************************\n*                                                                     *\n*        Large quick cell anchor block                                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nLQCTL    DSECT ,                   Large quick cell anchor         @L8A\nLQCNOENT DC    H'64'         LQCCLEN/LQBDLEN - # entries in ladder @L8A\nLQCSP#   DC    AL1(0,SPXLQC)       Key & subpool number            @L8A\nLQCBLEN  DC    F'4096'             Size of large quick cell block  @L8A\nLQCCLEN  DC    F'512'              Size of each large quick cell   @L8A\nLQCALEN  DC    A(X'1F4')   LQCCLEN-LQCHLEN - Cell data area length @L8A\nLQCUSEM  DC    A(X'7FFFFFFF')      Cell use map - first in use     @L8A\nLQCLADD  DS    A                   Large quick cell Ladder address @L8A\nLQCBHDYN DS    F                   Highest transfer buffer usage   @L8C\nLQCBCDYN DS    F                   Current transfer buffer usage   @L8C\n         SPACE 1\nLQCCTLEN EQU   *-LQCTL             length of anchor                @L8A\n         SPACE 3\n***********************************************************************\n* *                                                                 * *\n* *            LADDER ENTRY DESCRIPTOR                              * *\n* *                                                                 * *\n* *      THE LADDER IS USED TO RECORD THE STORAGE BLOCKS IN USE AS  * *\n* *      DATA TRANSFER BUFFERS.                                     * *\n* *      A BLOCK OF STORAGE IS OBTAINED, FORMATTED INTO A NUMBER    * *\n* *      OF 'LARGE QUICK CELLS' AND THE BLOCK IS KEPT TRACK OF IN   * *\n* *      A LADDER.                                                  * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 2                                               @BCDJ104\nLQBD     DSECT                     Large quickcell block descriptor\nLQBDESCR DS    D                   field for CDS instruction       @L8A\n         ORG   LQBDESCR                                            @D1A\nLQBDSTGE DS    A                   Address of block containing cells   F\n                                                                   @D1A\n         DS    F                   Allocation bit map (1 => free cell) F\n                                                                   @D1A\n         ORG  ,                                                    @D1A\n         SPACE 1\nLQBDLEN  EQU   *-LQBD              length of anchor                @L8A\nLQBDSHFT EQU   3*(1+2*(LQBDLEN-8)*(8-LQBDLEN)) Use causes assembly     X\n                                   errors unless LQBDLEN = 8       @D1A\n         SPACE 2                                                   @D1A\n***********************************************************************\n* *                                                                 * *\n* *            LARGE QUICK CELL HEADER                              * *\n* *                                                                 * *\n* *      EACH LARGE QUICK CELL HAS A HEADER, WHICH INCLUDES         * *\n* *      THE INDEX OF THE LADDER ENTRY FOR THE BLOCK CONTAINING     * *\n* *      THE CELL, AND A POINTER TO THE NEXT CELL IN THE CHAIN      * *\n* *      OF LARGE QUICK CELLS (ANCHORED IN FIELD CCBDATA IN THE     * *\n* *      TARGET SYSTEM'S CCB) OR ZERO.                              * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 2                                               @BM14268\nLQCELL   DSECT                                                 @BM14268\nLQCINDEX DS    F           Index of ladder entry for this cell     @D1C\nLQNCELL  DS    A           Next cell in chain                      @L3C\nLQCLENG  DS    F           Length of data in transfer buffer   @BM14268\nLQCOFF   DS    F           Offset of message                       @L8A\nLQCHEND  DS    0F                                              @BM14268\nLQCHLEN  EQU   LQCHEND-LQCELL      Cell header length          @BM14268\nLQCPADD  EQU   0                   address offset in cell data     @L8A\nLQCPLEN  EQU   4                   length  offset in cell data     @L8A\nLQCPENT  EQU   8                   entry   offset in cell data     @L8A\n         DFHEJECT  ,                                               @L3A\n.*** ***************************************** DELETED BY APAR @BA58600\n.*** * *                                       DELETED BY APAR @BA58600\n.*** * *            WORK AREA                  DELETED BY APAR @BA58600\n.*** * *                                       DELETED BY APAR @BA58600\n.*** * *      A WORK AREA IS ACQUIRED AT ASSOC DELETED BY APAR @BA58600\n.*** * *      THE STORAGE OF REGISTERS FOR SUB DELETED BY APAR @BA58600\n.*** * *      ONCE A SUDB IS OBTAINED ITS ADDR DELETED BY APAR @BA58600\n.*** * *      THE PARAMETER BLOCK TO THE SVC I DELETED BY APAR @BA58600\n.*** * *      THIS SAVE AREA AND REGISTER 13(  DELETED BY APAR @BA58600\n.*** * *      RETURN ADDRESS - OS)  IT IS RELE DELETED BY APAR @BA58600\n.*** * *      OR IF THE ASSOCIATE FAILS.       DELETED BY APAR @BA58600\n.*** ***************************************** DELETED BY APAR @BA58600\n.***          SPACE 2                          DELETED BY APAR @BA58600\n.*** IRSVCFDS DSECT                            DELETED BY APAR @BA58600\n.***          ORG   IRVCEND             LENGTH DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSRPA    DS    0XL(L'WSSRBPB+L'WSRPAPHB)  DELETED BY APAR @BA58600\n.*** WSSRBPB  DS    0A                  POINTE DELETED BY APAR @BA58600\n.*** WSSANCH  DS    A                   PTR. T DELETED BY APAR @BA58600\n.*** WSRPAPHB DS    0A                  POINTE DELETED BY APAR @BA58600\n.*** WSRPALCB DS    A                   LCB PO DELETED BY APAR @BA58600\n.*** *** WSRPACCB DS    A                    Y DELETED BY APAR @BA58600\n.*** WSRESMTK DS    F                   TOKEN  DELETED BY APAR @BA58600\n.*** WSPREVR9 DS    A                   PREVIO DELETED BY APAR @BA58600\n.*** * LEVEL 1 STORAGE AREAS (SHORTEST LIFE-TI DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSGETSSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSGETSS1 DS    XL(4*(1+RE-RB))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV                   DELETED BY APAR @BA58600\n.*** WSGETSS2 DS    XL(4*(1+R0-R0))     REGIST DELETED BY APAR @BA58600\n.*** WSGETSS3 DS    XL(4*(1+RE-RE))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSRELSSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSRELSS1 DS    XL(4*(1+16+R1-RE))  REGIST DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSSTUPSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSTUPS1 DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSMAXSYS DS    F                   MAX. N DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSCSBSSV DS    XL(4*(1+R1-R0))     SAVE A DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** WSLEVEL2 EQU   *                   START  DELETED BY APAR @BA58600\n.*** * AREAS PRESENT ONLY IN THE SSI VERIFY ST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSRESMGR DS    XL(RESMGR_LIST_L)   RESMGR DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** *** WSUSERID DS    CL8                    DELETED BY APAR @BA58600\n.*** ***          ORG   WSUSERID               DELETED BY APAR @BA58600\n.*** WSRESMPM DS    XL8                 PARAME DELETED BY APAR @BA58600\n.*** WSSUDBWS DS    A                   SAVE A DELETED BY APAR @BA58600\n.*** * END OF AREAS PRESENT ONLY IN ASSOCIATE' DELETED BY APAR @BA58600\n.*** * LEVEL 2 STORAGE AREAS                   DELETED BY APAR @BA58600\n.***          ORG   WSLEVEL2            RESET  DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSQCASV  DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSQCAS1  DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSSHEDSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSHEDS1 DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600\n.***          DS    XL(4*(1+RF-RF))     REGIST DELETED BY APAR @BA58600\n.*** WSSHEDS2 DS    XL(4*(1+R1-R0))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSPHBASV DS    XL(4*(1+RD-RD))     SAVE A DELETED BY APAR @BA58600\n.*** WSPHBASN DS    0F                  END OF DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSPHBRSV DS    XL(4*(1+16+R1-RD))  SAVE A DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSLQCASV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.***          DS    XL(4*(1+RE-RD))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCAS1 DS    XL(4*(1+RF-RF))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCAS2 DS    XL(4*(1+R0-R0))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCAS3 DS    XL(4*(1+R5-R2))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCAS4 DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSLQCRSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSLQCRS1 DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600\n.*** WSLQCRS2 DS    XL(4*(1+16+R5-RD))  REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** WSPHBPSV DS    XL(4*(1+RD-RD))     SAVE A DELETED BY APAR @BA58600\n.***          ORG   WSPHBPSV            OVERLA DELETED BY APAR @BA58600\n.*** WSGETMSV DS    XL(4*(1+16+R2-RE))  REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSPOSTSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** *                                  AND PO DELETED BY APAR @BA58600\n.*** WSPOSTS1 DS    XL(4*(1+16+R3-RD))  REGIST DELETED BY APAR @BA58600\n.*** WSPOSTS2 DS    XL(4*(1+RB-RA))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          DS    0F                  ALIGN  DELETED BY APAR @BA58600\n.*** WSWEPARM DS    XL(IRWE_INPUT_L)    PARMLI DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSWESAVE DS    XL(4*(1+16+R2-RA))  SAVE A DELETED BY APAR @BA58600\n.*** ***          SPACE 1                    M DELETED BY APAR @BA58600\n.*** ***          ORG   WSWESAVE               DELETED BY APAR @BA58600\n.*** *** WSUNWRSV DS    0F                   M DELETED BY APAR @BA58600\n.*** *** WSUNWRS1 DS    (1+RD-RD)F             DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** ***          SPACE 1                      DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.*** WSXPSTSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSXPSTS1 DS    XL(4*(1+16+R2-RD))  REGIST DELETED BY APAR @BA58600\n.***          ORG   WSQCASV             OVERLA DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSSHRSV  DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSHRS1  DS    XL(4*(1+16+R2-RC))  REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSSCHRSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSCHRS1 DS    XL(4*(1+16+R1-RA))  REGIST DELETED BY APAR @BA58600\n.*** ***          SPACE 1                      DELETED BY APAR @BA58600\n.*** ***          ORG   WSQCASV                DELETED BY APAR @BA58600\n.*** *** WSSRCHSV DS    0F                     DELETED BY APAR @BA58600\n.*** ***          DS    (1+16+R1-RD)F          DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** * AREAS THAT CAN SHARE STORAGE WITH BOTH  DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** LOADINST DS    0F                         DELETED BY APAR @BA58600\n.*** ******* HOW LONG IS THIS PARAMETER LIST?? DELETED BY APAR @BA58600\n.***          LOAD EPLOC=LCBWENME,GLOBAL=(YES, DELETED BY APAR @BA58600\n.*** LOADPLEN EQU   *-LOADINST                 DELETED BY APAR @BA58600\n.***          ORG   WSGETSSV            OVERLA DELETED BY APAR @BA58600\n.*** WSXMSAVE DS    XL(4*18)            SAVE A DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSUNWRSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSUNWRS1 DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSAXLIST DS    0F                         DELETED BY APAR @BA58600\n.***          DS    H                   NO. OF DELETED BY APAR @BA58600\n.***                                           DELETED BY APAR @BA58600\n.*** WSAX     DS    H                   AX IS  DELETED BY APAR @BA58600\n.*** WSLXLIST DS    0F                         DELETED BY APAR @BA58600\n.***          DS    F                   NO. OF DELETED BY APAR @BA58600\n.***                                           DELETED BY APAR @BA58600\n.***          DS    F                   LX IS  DELETED BY APAR @BA58600\n.*** WSTKLIST DS    0F                         DELETED BY APAR @BA58600\n.***          DS    F                   NO. OF DELETED BY APAR @BA58600\n.***                                           DELETED BY APAR @BA58600\n.***          DS    F                   TOKEN  DELETED BY APAR @BA58600\n.*** WSETDES  DS    0F                  ETDES  DELETED BY APAR @BA58600\n.***          DS    X                    FORMA DELETED BY APAR @BA58600\n.***          DS    B                    OPTIO DELETED BY APAR @BA58600\n.***          DS    AL2                  RESER DELETED BY APAR @BA58600\n.***          DS    A                    TOKEN DELETED BY APAR @BA58600\n.***          ORG   WSGETMSV            OVERLA DELETED BY APAR @BA58600\n.*** *** WS                                                    @BA58600\n.*** *** WS                                                    @BA58600\n.*** WS                                                        @BA58600\n.*** WSMSGLEN DS    F                   LENGTH DELETED BY APAR @BA58600\n.*** WSLENLFT DS    F                   LENGTH DELETED BY APAR @BA58600\n.*** *** WSPART   DS    A,H                    DELETED BY APAR @BA58600\n.*** *** WSLENPAR EQU   *-WSPART               DELETED BY APAR @BA58600\n.***          DS    0F                  ALIGN  DELETED BY APAR @BA58600\n.*** WSELEMTB DS    0XL8                MSG. P DELETED BY APAR @BA58600\n.***          ORG   WS                                         @BA58600\n.*** WSUSTATE DS    XL(USTATEL)         USER S DELETED BY APAR @BA58600\n.***          ORG   WSPHBASN            AREAS  DELETED BY APAR @BA58600\n.***                                    OVERLA DELETED BY APAR @BA58600\n.*** WSQUAHDR DS    XL(QUAHLENG)        HEADER DELETED BY APAR @BA58600\n.*** ***** WSQUAMEM MUST IMMEDIATELY FOLLOW WS DELETED BY APAR @BA58600\n.*** WSQUAMEM DS    XL(QUAMLENG)        QUAMEM DELETED BY APAR @BA58600\n.*** ***** WSQUAUST MUST IMMEDIATELY FOLLOW WS DELETED BY APAR @BA58600\n.*** WS                                                        @BA58600\n.*** WSQUAUST DS    XL(32)              USTATE DELETED BY APAR @BA58600\n.***          ORG   WSQUAUST            OVERLA DELETED BY APAR @BA58600\n.*** *** WS                                                    @BA58600\n.*** WSMCNTL  DS    XL(32)              XCF ME DELETED BY APAR @BA58600\n.*** WSIXCPL  DS    0F                  PARAME DELETED BY APAR @BA58600\n.***          IXCMSGO  PLISTVER=1,MF=(L,WSMSGO DELETED BY APAR @BA58600\n.***                                    IXCMSG DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCMSGI  PLISTVER=1,MF=(L,WSMSGI DELETED BY APAR @BA58600\n.***                                    IXCMSG DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCQUERY MF=(L,WSQURYPL)  PARAME DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCJOIN MF=(L,WSJOINPL)   PARAME DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCLEAVE MF=(L,WSLEAVPL)  PARAME DELETED BY APAR @BA58600\n.***          ORG   WSIXCPL             OVERLA DELETED BY APAR @BA58600\n.***          IXCSETUS MF=(L,WSSTUSPL)  PARAME DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** * LEVEL 3 STORAGE AREAS                   DELETED BY APAR @BA58600\n.*** WSSRBPSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSSRBPS2 DS    XL(4*(1+16+RD-RF))  REGIST DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** *   SRB CODE MAY NEED ACCESS TO THE SRB P DELETED BY APAR @BA58600\n.*** *   WHICH IS IN REGISTER 10, SO WSSRBPS2  DELETED BY APAR @BA58600\n.*** *   REFERENCE DIRECTLY TO REGISTER 10.    DELETED BY APAR @BA58600\n.***          ORG   WSSRBPS2            OVERLA DELETED BY APAR @BA58600\n.***          DS    XL(4*(1+16+R9-RF))  REGIST DELETED BY APAR @BA58600\n.*** WSSRBPAD DS    XL(4*(1+RA-RA))     REGIST DELETED BY APAR @BA58600\n.***          ORG   WSSRBPSV                   DELETED BY APAR @BA58600\n.*** WSSWMVCS DS    XL(4*(1+RD-RD))     REGIST DELETED BY APAR @BA58600\n.*** *** WSSWMVCS DS    (1+RD-RD)F             DELETED BY APAR @BA58600\n.*** WSBUFTYP DS    X                   BUFFER DELETED BY APAR @BA58600\n.*** LACB_BUFFTYPE EQU  0               LACB Q DELETED BY APAR @BA58600\n.*** JSB_BUFFTYPE  EQU  4               JSB QU DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSSWSTAT DS    X                   SWITCH DELETED BY APAR @BA58600\n.*** WSSWSTEL EQU   X'80'               HAVE C DELETED BY APAR @BA58600\n.*** WSSWSTAP EQU   X'40'               HAVE A DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** * LEVEL 4 STORAGE AREAS (LONGEST LIFE-TIM DELETED BY APAR @BA58600\n.***          ORG   ,                   RESET  DELETED BY APAR @BA58600\n.*** WSSRBEND DS    0F                         DELETED BY APAR @BA58600\n.*** WSSRBLEN EQU   WSSRBEND-IRSVCFDS   LENGTH DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** * SOME FAIRLY LONG-LIVED AREAS NEEDING FU DELETED BY APAR @BA58600\n.***          ORG   WSSRBPSV            OVERLA DELETED BY APAR @BA58600\n.*** WSTIDYSV DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSTIDYS1 DS    F                   REGIST DELETED BY APAR @BA58600\n.*** WSADDWK  DS    F                   IRADD  DELETED BY APAR @BA58600\n.*** WSROLCNT DS    F                   IRROLC DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSCLSV   DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSCLS1   DS    F                   REGIST DELETED BY APAR @BA58600\n.*** WSCLS2   DS    F                   REGIST DELETED BY APAR @BA58600\n.*** *                                  2ND LE DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.*** WSEOCSV  DS    0F                  SAVE A DELETED BY APAR @BA58600\n.*** WSEOCPL  DS    F                   SVC PA DELETED BY APAR @BA58600\n.*** WSEOSASP DS    F                   SUBPOO DELETED BY APAR @BA58600\n.*** WSXMWORK DS    XL(4*3)             XM WOR DELETED BY APAR @BA58600\n.*** WSENQLST DS    0F                  ENQ RE DELETED BY APAR @BA58600\n.***          DS    AL1                 LISTEN DELETED BY APAR @BA58600\n.***          DS    AL1                 RNAME  DELETED BY APAR @BA58600\n.***          DS    BL1                 OPTION DELETED BY APAR @BA58600\n.***          DS    AL1                 RETURN DELETED BY APAR @BA58600\n.*** WSXMQNAM DS    A                   ADDRES DELETED BY APAR @BA58600\n.*** WSRNAME  DS    A                   ADDRES DELETED BY APAR @BA58600\n.***          DS    0F                  FULL W DELETED BY APAR @BA58600\n.*** WSAPPLID DS    CL8                 APPLID DELETED BY APAR @BA58600\n.***          ORG   WSAPPLID            OVERLA DELETED BY APAR @BA58600\n.*** WSMEMNAM DS    CL16                MEMBER DELETED BY APAR @BA58600\n.*** WSUSKEY  DS    C                   EXTRA  DELETED BY APAR @BA58600\n.***          ORG   *-1                 OVERLA DELETED BY APAR @BA58600\n.*** WSMEMDAT DS    2F                  MEMBER DELETED BY APAR @BA58600\n.*** WSIRRX_INSTANCE DS F               XCR RE DELETED BY APAR @BA58600\n.*** WSSWRSV  DS    F                   RETURN DELETED BY APAR @BA58600\n.*** WSTOD    DS    D                   AREA F DELETED BY APAR @BA58600\n.***                                    SUPPRE DELETED BY APAR @BA58600\n.*** ****** NEED TO SEE WHICH OF THESE AREAS C DELETED BY APAR @BA58600\n.*** WSS                                                       @BA58600\n.*** WSMEPL   DS    XL(MEPLLEN)         COPY O DELETED BY APAR @BA58600\n.***                                    MESSAG DELETED BY APAR @BA58600\n.*** WSMQEP   DS    A                   POINTE DELETED BY APAR @BA58600\n.***                                    ELEMEN DELETED BY APAR @BA58600\n.*** WSGXPSV  DS    XL(4*(1+RD-RD))     RD SAV DELETED BY APAR @BA58600\n.*** WSMXRPAP DS    A                   POINTE DELETED BY APAR @BA58600\n.***                                    PARAME DELETED BY APAR @BA58600\n.*** WSLCLAD  DS    A                   ADDRES DELETED BY APAR @BA58600\n.*** WSLCLLN  DS    F                   LENGTH DELETED BY APAR @BA58600\n.*** WSEND    DS    0D                  MAKE L DELETED BY APAR @BA58600\n.*** WSLEN    EQU   WSEND-IRSVCFDS      LENGTH DELETED BY APAR @BA58600\n.*** WSMXLEN  EQU   *-IRSVCFDS          LENGTH DELETED BY APAR @BA58600\n.***          SPACE 1                          DELETED BY APAR @BA58600\n.***          DFHEJECT  ,                      DELETED BY APAR @BA58600\n.*** ***************************************** DELETED BY APAR @BA58600\n.*** * *                                       DELETED BY APAR @BA58600\n.*** * *        SRB WORK AREA                  DELETED BY APAR @BA58600\n.*** * *                                       DELETED BY APAR @BA58600\n.*** * *      A WORK AREA IS ACQUIRED AT LOGON DELETED BY APAR @BA58600\n.*** * *      THE STORAGE OF REGISTERS FOR SUB DELETED BY APAR @BA58600\n.*** * *      IT IS RELEASED IN TIDY, OR IF TH DELETED BY APAR @BA58600\n.*** ***************************************** DELETED BY APAR @BA58600\n.***          SPACE 2                          DELETED BY APAR @BA58600\n.*** IRSRBSEC DSECT  ,                         DELETED BY APAR @BA58600\n.*** SRBWKA   DS    CL(WSEND-IRSVCFDS)         DELETED BY APAR @BA58600\n.*** IRSRBEND DS    0F                         DELETED BY APAR @BA58600\n.*** IRSRBSIZ EQU   IRSRBEND-IRSRBSEC          DELETED BY APAR @BA58600\n.***          DFHEJECT  ,                      DELETED BY APAR @BA58600\n***********************************************************************\n* * *                                                             * * *\n* * *          USE COUNT ARRAY                                    * * *\n* * *                                                             * * *\n* * *   THE PREFIX TO THE ARRAY CONTAINS THE LINKAGE INDEX        * * *\n* * *   AND ENTRY TABLE TOKEN.                                    * * *\n* * *   THE USE COUNT ARRAY CONTAINS A RECORD OF THE NUMBER OF    * * *\n* * *   ACTIVE CONNECTIONS USING A PARTICULAR AX VALUE            * * *\n* * *     SINCE A USE COUNT INDEX OF ZERO IS REGARDED AS INVALID  * * *\n* * *   THE USE COUNT ARRAY BEGINS WITH THE ENTRY FOR INDEX = 1.  * * *\n* * *   TO ALLOW THE INDEX TO BE USED DIRECTLY THE VALUE UCAPRELN * * *\n* * *   IS SET TO THE LENGTH OF THE PREFIX - 4.                   * * *\n* * *   THE TRUE PREFIX LENGTH IS GIVEN BY THE VALUE UCATPREL.    * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                           @FJ410R @L2A\nUCA      DSECT  ,                                          @FJ410R @L2A\nUCALENTH DS    H              TOTAL LENGTH OF USE COUNT    @FJ410R @L2A\n*                             ARRAY FOR FORMATTED DUMP\n         DS    H                   Reserved                @FJ410R @L8C\nUCAPREND DS    0F                                          @FJ410R @L2A\nUCAPRELN EQU   UCAPREND-UCA-UCAELEN  PREFIX LENGTH FOR INDEX TO UCAE   F\n                                                           @FJ410R @L8C\nUCATPREL EQU   UCAPREND-UCA        TRUE PREFIX LENGTH      @FJ410R @L2A\n         SPACE 5                                           @FJ410R @L2A\n***********************************************************************\n* * *                                                             * * *\n* * *          USE COUNT ARRAY ENTRY                              * * *\n* * *                                                             * * *\n* * *   EACH ENTRY IN THE USE COUNT ARRAY CONSISTS OF THE NUMBER  * * *\n* * *   OF ACTIVE CONNECTIONS USING THE AX VALUE AT THE SAME      * * *\n* * *   OFFSET IN THE AX ARRAY.                                   * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                           @FJ410R @L2A\nUCAE     DSECT  ,                                          @FJ410R @L2A\nUCAECNT  DS    H                   USE COUNT               @FJ410R @L2A\nUCAEXMLG DS    H                   LG of XM-resource owning LACBE  @L8A\nUCAELEN  EQU   *-UCAE              ENTRY  LENGTH           @FJ410R @L2A\n         DFHEJECT ,                                                @L8A\n* XCF User State Data                                              @L8A\nUSTATE   DSECT                     User State data for XCF         @L8A\nUSTVER#  DS    AL1                 User State Data Version Number  @L8A\nUSTVER#1 EQU   1                   User State Data Version No. @BA58600\nUSTVER#2 EQU   2                   User State Data Version No. @BA58600\nUSTPRTCL DS    AL1                 Communication Protocol Number   @L8A\nPRTCL1   EQU   1                   Protocol Number 1           @BA58600\nUSTSTAT0 DS    AL1                 Reserved for Status expansio@BA58600\nUSTSTAT1 DS    AL1                 Status                      @BA58600\nUSTSTACT EQU   1                   Member is active & not quiesced @L8A\nUSTSTRDY EQU   2                   Member is ready for CONNECTs    @L8A\nUSTSTNQU EQU   3                   Member is in NORMAL QUIESCE     @L8A\nUSTSTIQU EQU   4                   Member is in IMMEDIATE QUIESCE  @L8A\nUSTSTNSD EQU   5                   Member is terminating normally  @L8A\nUSTSTABE EQU   6                   Member is terminating abnormally@L8A\nUSTST1M1 EQU   B'00000111'         Mask to isolate USTSTAT1 bits in    X\n                                   Version 2 User State Data which are X\n                                   meaningful to a Protocol 1 u@BA58600\nUSTTOKEN DS    F                   Token to allow an IRP user to find  X\n                                   out whether it is the current user  X\n                                   of a given XCF member name      @L8A\nUSTXAPPL EQU   X'80'               User's APPLID is present    @BA58600\nUSTTOD   DS    XL8                 User State Data time-stamp  @BA58600\nUSTAPPLD DS    CL8                 User's APPLID                   @L8A\n.*** USTUSRID DS    CL8                 USER'S DELETED BY APAR @BA58600\nUSTATEL  EQU   *-USTATE            Length of User State data       @L8A\n         DS    0S(32-USTATEL)      Assembly error if Length > 32   @L8A\n         SPACE 3\n         IXCYGEPL                  Group Exit Parameter List       @L8A\n         IXCYMEPL                  Message Exit Parameter List     @L8A\n***********************************************************************\n*        XCF Message Control Data                                     *\n***********************************************************************\nMEPL     DSECT                     Continue the MEPL DSECT         @L8A\n         ORG   MEPLMTOK            Overlay the Message Token       @L8A\nMQENEXT  DS    A                   Pointer to next Message Queue       X\n                                   Element                         @L8A\n         ORG   MEPLMDAT            Overlay the Member Data         @L8A\nMQEDATA  DS    A                   Pointer to first data buffer    @L8A\nMQEDLAST DS    A                   Pointer to last data buffer     @L8A\n         ORG   MEPLCNTL            Overlay the Message Control Data@L8A\nMCNTL    EQU   *                   Message Control Data for XCF    @L8A\nMCPRTCL  DS    AL1                 Communication Protocol Number   @L8A\nMCFUNC   DS    AL1                 Function code                   @L8A\n         SPACE 1\nMCFCONN  EQU   X'10'               Function - Connect              @L8A\nMCFDISC  EQU   X'20'               Function - Disconnect           @L8A\nMCFSWIT  EQU   X'30'               Function - Switch               @L8A\nMCFQUSC  EQU   X'40'               Function - Quiesce              @L8A\nMCFRESET EQU   X'00'               Function - Immediate Reset      @L8A\n         SPACE 1\n*              Function qualifiers\nMCFQABN  EQU   X'01'               Abnormal - disconnect       @BA58600\nMCFQ1ST  EQU   X'01'               First switch                    @L8A\nMCFQIMMD EQU   X'01'               Immediate quiesce               @L8A\nMCFQUNSL EQU   X'02'               Unsolicited switch              @L8A\n.*** MCFQSEG  EQU   X'04'               SEGMEN DELETED BY APAR @BA58600\nMCFQFRGT EQU   X'02'               Disconnect - Forget             @L8A\nMCFQNAVL EQU   X'04'               Disconnect - Not Available      @L8A\n         SPACE 1\nMCCC#S   DS    H                   All functions except CONNECT -      X\n                                   change counter (for dynamic CHANGE  X\n                                   of LCBEs) qualifying sender's CCB   X\n                                   pointer MCCCBPS (zero if MCCCBPS is X\n                                   not supplied)                   @L8A\nMCCCBPS  DS    A                   All functions except CONNECT -      X\n                                   pointer to sender's CCB (sometimes  X\n                                   zero if no reply is possible)   @L8A\nMCCCBPRX EQU   X'80'               If the sign bit of the sender's CCB X\n                                   pointer is on, the receiver's CCB   X\n                                   pointer & change counter are        X\n                                   present; otherwise, the sender's    X\n                                   APPLID is present               @L8A\nMCMSG#   DS    F                   All functions except CONNECT  -     X\n                                   Message number within session   @L8A\n         ORG   MCCC#S              CONNECT only                    @L8A\n         DS    H                   Reserved                        @L8A\nMCSTOD   DS    XL8                 TOD clock reading stored during TCB X\n                                   mode CONNECT processing between     X\n                                   deciding the target XCF token and   X\n                                   issuing the IXCMSGO             @L8A\nMCSN#    DS    F                   All functions - session number &    X\n                                   originator (primary/secondary flag).X\n                                   If sign bit is 0, the sender is the X\n                                   secondary and the receiver is the   X\n                                   primary; if the sign bit is 1, the  X\n                                   sender is the primary.          @L8A\nMCAPPLID DS    CL8                 If function is CONNECT or sign bit  X\n                                   of sender's CCB pointer (MCCCBPRX)  X\n                                   is zero - sender's APPLID       @L8A\n         ORG   MCAPPLID            All functions except CONNECT if     X\n                                   sign bit of sender's CCB pointer is X\n                                   one                             @L8A\n         DS    H                   Reserved                        @L8A\nMCCC#R   DS    H                   Change counter qualifying           X\n                                   receiver's CCB pointer MCCCBPR  @L8A\nMCCCBPR  DS    A                   Pointer to receiver's CCB       @L8A\nMCUSERID DS    CL8                 CONNECT only - sender's security    X\n                                   (RACF) user ID                  @L8A\n         ORG   MCUSERID                                            @L8A\nMCSSWLEN DS    F                   SWITCH only - length of the         X\n                                   complete message            @BA58600\n.***                                    MESSAG DELETED BY APAR @BA58600\nMCSSWOFF DS    F                   SWITCH only - offset of this        X\n                                   segment from start of the complete  X\n                                   message - zero unless segmen@BA58600\n         ORG   MCUSERID                                            @L8A\nMC#1CCBS DS    F                   DISCONNECT qualified by MCFQNAVL    X\n                                   only - <= 0 if the sender was not   X\n                                   willing at that time to accept any  X\n                                   of the receiver's CONNECT requests; X\n                                   number of candidate primary CCBs if X\n                                   the sender was willing to accept    X\n                                   the receiver's CONNECT requests but X\n                                   could not find a free primary CCB   X\n                                                                   @L8A\n         ORG   ,                                                   @L8A\n*        DS    0S(32-(*-MCNTL))  Assembly error if Length > 32     @L8A\n         SPACE 8\n* Partner History Block                                            @L8A\nPHB      DSECT                   Partner History Block             @L8A\nPHBNEXT  DS    A                 Pointer to next PHB in chain      @L8A\nPHBMQP   DS    A                 Pointer to queue of messages which    X\n                                 cannot yet be assigned to CCBs        X\n                                 because the incoming CONNECT has not  X\n                                 been processed                    @L8A\nPHBS#HCP DS    A                 Pointer to chain of elements (S#HEs)  X\n                                 listing the incoming session numbers  X\n                                 that have been handled so far for     X\n                                 this partner                      @L8A\nPHBLCBE  DS    A                 Pointer to owning LCBE or to LCB      X\n                                 (& sign bit) if PHB is chained from   X\n                                 LCB                               @L8A\n         DS    0D                Align for CDS                     @L8A\nPHBAPCNT DS    F                 Active Process Count - a partner      X\n                                 state of \"active\" or a non-empty      X\n                                 message queue each contribute to this X\n                                 count too                         @L8A\nPHBCNCNT DS    F                 Connection Count                  @L8A\nPHB2CNCT DS    F                 Count of secondary connections    @L8A\nPHBMVSID DS    XL4               Partner's MVS system token        @L8A\nPHBMVSNM DS    CL8               Partner's MVS system name - for       X\n                                 diagnostic use only               @L8A\nPHBMEMTK DS    XL8               Partner's XCF member token        @L8A\nPHBSTTOD DS    XL8               Time-stamp for PHBSTATE value     @L8A\nPHBSTATE DS    C                 Partner's User State Status1      @L8A\nPHBS0CSC DS    F                 Cumulative session counter value      X\n                                 corresponding to session 0 with this  X\n                                 partner                           @L8A\n         DS    0D                Align to double-word multiple     @L8A\nPHBLEN   EQU   *-PHB             Length of PHB                     @L8A\nPHBAQLOC EQU   0                 \"Locate only\" function code IRPHBACQ  X\n                                                                   @L8A\nPHBAQCRE EQU   1                 \"Locate or Create\" function code for  X\n                                 IRPHBACQ                          @L8A\n         SPACE 8\n* Session numbers handled element                                  @L8A\nS#HE     DSECT                   Session numbers handled element   @L8A\nS#HENEXT DS    A                 Pointer to next S#HE in the chain @L8A\nS#HERNGE EQU   X'80'             If the sign bit of S#HENEXT is 0,     X\n                                 the element contains a bit string     X\n                                 representing individual session       X\n                                 numbers.  If the sign bit is 1, the   X\n                                 element contains upper and lower      X\n                                 bounds of a range of session numbers  X\n                                                                   @L8A\nS#HEHIGH DS    0F                One more than the highest session no. X\n                                 within the range if S#HERNGE is on -  X\n                                 must be next word after S#HENEXT  @L8A\nS#HEBITS DS    BL.64             Bit string representing individual    X\n                                 session numbers starting with the     X\n                                 lowest if element does not refer to a X\n                                 range                             @L8A\nS#HELOW  DS    F                 Lowest session number represented by  X\n                                 this element                      @L8A\n         DS    0D                  Make length a multiple of 8     @L8A\nS#HELEN  EQU   *-S#HE            Length of S#HE                    @L8A\nS#HMLOC  EQU   0                 IRS#HMGR function code for LOCATE @L8A\nS#HMADD  EQU   1                 IRS#HMGR function code for ADD    @L8A\n.***          SPACE 8                          DELETED BY APAR @BA58600\n.***          DFHEJECT ,                       DELETED BY APAR @BA58600\n.*** *                                         DELETED BY APAR @BA58600\n.*** *  FESTAE PARAMETER LIST                  DELETED BY APAR @BA58600\n.*** *                                         DELETED BY APAR @BA58600\n.*** *   THIS PARAMETER LIST IS BUILT IN THE R DELETED BY APAR @BA58600\n.*** *   SVRB BELONGING TO THE IRP SVC.  IT IS DELETED BY APAR @BA58600\n.*** *   BETWEEN THE IRP MAINLINE AND THE FEST DELETED BY APAR @BA58600\n.*** *   THE PARAMETER LIST IS RESTRICTED TO T DELETED BY APAR @BA58600\n.*** *   WHICH IS 24 BYTES.                    DELETED BY APAR @BA58600\n.*** *                                         DELETED BY APAR @BA58600\n.*** MXRPA    DSECT ,                   MESSAG DELETED BY APAR @BA58600\n.*** MXRPASV  DS    (1+16+R1-RD)F       SAVE A DELETED BY APAR @BA58600\n.*** MXRPAWSP DS    A                   POINTE DELETED BY APAR @BA58600\n.***          DS    0S(24-(*-MXRPA))    ASSEMB DELETED BY APAR @BA58600\n         DFHEJECT ,                                                @LAA\n*\n* XCF retry SRB work element\n*\n* When an XCFBUSY condition occurs a work element is built to pass\n* to the XCF retry SRB to cuase the request that raised the XCFBUSY\n* condition to be retried.\n*\nIRRX_ELEM     DSECT  ,                                             @LAA\nIRRX_FWD      DS    A     forward chain (public)                   @LAA\nIRRX_BWD      DS    A     backward chain (private)                 @LAA\nIRRX_FUNCTION DS    X     request type                             @LAA\nIRRX_DUMMY            EQU 0                                        @LAA\nIRRX_MSG_DATA         EQU 1                                        @LAA\nIRRX_MSG_NODATA       EQU 2                                        @LAA\nIRRX_QUIESCE_COMPLETE EQU 3                                        @LAA\nIRRX_RESP     DS    X     response from last msgo attempt          @LAA\nIRRX_REASN    DS    H     reason from last msgo attempt            @LAA\nIRRX_RETRY    DS    H     message retry count                      @LAA\nIRRX_NUMBUSY  DS    H     XCFBUSY count                            @LAA\nIRRX_INSTANCE DS    A     last SRB instance to retry this message  @LAA\nIRRX_BUFFER   DS    A     Data buffer chain addr or 0              @LAA\nIRRX_TARGET   DS    CL8   target XCF member token                  @LAA\nIRRX_MSGCNTL  DS    CL32  message control area                     @LAA\n              DS    0D                                             @LAA\nIRRX_LEN      EQU   *-IRRX_ELEM                                    @LAA\n*\n* R15 return codes for DFHIRRXS routines\n*\nIRRXERR       EQU   8                                              @LAA\n*\n* R0 reason codes corresponding to IRRXERR\n*\nIRRXERR_DISABLED        EQU 4                                      @LAA\nIRRXERR_GETMAIN_FAILED  EQU 8                                      @LAA\nIRRXERR_XCF_ERROR       EQU 16                                     @LAA\nIRRXERR_INVALID_FUNCTION EQU 20                                    @LAA\nIRRXERR_LOCKERR1    EQU 24   SRB dispatched without LCB LOCK       @LAA\nIRRXERR_LOCKERR2    EQU 28   SRB dispatched with LCB lock disabled @LAA\nIRRXERR_LOCKERR3    EQU 32   SRB dispatched while TQE enqueued     @LAA\nIRRXERR_LOCKERR4    EQU 36   SRB instance number mismatch          @LAA\n         MEND                                                      @P3M\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ESBA": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x10_\\x00\\x93\\x10_\\x13E\\x01\\r\\x01\\r\\x00\\x00\\xc5\\xc9\\xd3\\xc5\\xc5\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-15T00:00:00", "modifydate": "1993-04-15T13:45:00", "lines": 269, "newlines": 269, "modlines": 0, "user": "EILEEN"}, "text": "      MACRO\n&NAME ESBA  &ROW,&COL,&SKIP=NO,&MDT=NO,&PROT=NO,&HI=NO,&DSPD=MO,       X\n               &DNSPD=YES,&CURSOR=NO,&NNN=NO,&NUM=NO,                  X\n               &RSET=NO,&EHI=NO,&COLOR=NO,&PS=NO\n.* DSPD= DISPLAY/SELECTOR-PEN DETECTABLE\n.* DNSPD=DISPLAY/NOT SELECTOR PEN DETECTABLE\n.* NNN  =NONDISPLAY,NONPRINT,NONDETECTABLE\n.* RSET =CHAR ATTRIBUTE RESET TO DEFAULT\n.* EHI  =EXTENDED HILIGHT-DEFAULT,BLINK,REV VIDEO,UNDERSCORE\n.* COLOR =DEFAULT,BLUE,RED,PINK,GREEN,TURQ,YELLOW,WHITE,BLACK\n.* PS    =PROGRAMMED SYMBOLS 00,40-EF,F1\n        LCLC &TAB1(24),&TAB2(8),&Z,&T,&SBA1,&SBA2,&SBP2\n        LCLA &R,&C,&N,&S,&CLM,&PTR2\n     AIF  ('&COL' GT '80').ERR\n&T  SETC   T'&ROW\n     AIF  ('&T'     NE 'N').ERR\n&T  SETC   T'&COL\n     AIF  ('&T'     NE 'N').ERR\n.***EACH 2 BYTE ENTRY REPRESENTS FIRST BYTE SBA FOR COL 1-8 AND\n.***73-80  FOLLOWED BY TABLE 2 POINTER\n&TAB1(1) SETC '40014002400340044005400640074008C101C102'\n&TAB1(2) SETC 'C103C104C105C106C107C108C201C202C203C204'\n&TAB1(3) SETC 'C205C206C207C208C301C302C303C304C305C306'\n&TAB1(4) SETC 'C307C308C401C402C403C404C405C406C407C408'\n&TAB1(5) SETC 'C501C502C503C504C505C506C507C508C601C602'\n&TAB1(6) SETC 'C603C604C605C606C607C608C701C702C703C704'\n&TAB1(7) SETC 'C705C706C707C708C801C802C803C804C805C806'\n&TAB1(8) SETC 'C807C808C901C902C903C904C905C906C907C908'\n&TAB1(9) SETC '4A014A024A034A044A054A064A074A084B014B02'\n&TAB1(10) SETC '4B034B044B054B064B074B084C014C024C034C04'\n&TAB1(11) SETC '4C054C064C074C084D014D024D034D044D054D06'\n&TAB1(12) SETC '4D074D084E014E024E034E044E054E064E074E08'\n&TAB1(13) SETC '4F014F024F034F044F054F064F074F0850015002'\n&TAB1(14) SETC '500350045005500650075008D101D102D103D104'\n&TAB1(15) SETC 'D105D106D107D108D201D202D203D204D205D206'\n&TAB1(16) SETC 'D207D208D301D302D303D304D305D306D307D308'\n&TAB1(17) SETC 'D401D402D403D404D405D406D407D408D501D502'\n&TAB1(18) SETC 'D503D504D505D506D507D508D601D602D603D604'\n&TAB1(19) SETC 'D605D606D607D608D701D702D703D704D705D706'\n&TAB1(20) SETC 'D707D708D801D802D803D804D805D806D807D808'\n&TAB1(21) SETC 'D901D902D903D904D905D906D907D9085A015A02'\n&TAB1(22) SETC '5A035A045A055A065A075A085B015B025B035B04'\n&TAB1(23) SETC '5B055B065B075B085C015C025C035C045C055C06'\n&TAB1(24) SETC '5C075C085D015D025D035D045D055D065D075D08'\n.***EACH 8 BYTE ENTRY REPRESENTS 2ND   BYTE SBA FOR COL 1-8 THRU\n.**73-80. EACH ROW IS POINTED 2 BY TABLE POINTER IN TABLE 1.\n&TAB2(1) SETC '40C850D860E8F0F8'  COL 1-73 (SKIP 8)\n&TAB2(2) SETC 'C1C9D1D961E9F1F9'  COL 2-74\n&TAB2(3) SETC 'C24AD25AE26AF27A'  COL 3-75\n&TAB2(4) SETC 'C34BD35BE36BF37B'   COL 4-76\n&TAB2(5) SETC 'C44CD45CE46CF47C'   COL 5-77\n&TAB2(6) SETC 'C54DD55DE56DF57D'    COL 6-78\n&TAB2(7) SETC 'C64ED65EE66EF67E'    COL 7-79\n&TAB2(8) SETC 'C74FD75FE76FF77F'   COL 8-80\n        AGO .CALC\n.CALC   ANOP\n     AIF  ('&COL' LE '8').SET1\n&S   SETA  &COL-1\n&CLM  SETA  &S+1\n&C   SETA &CLM/8\n&C    SETA (&C)*4+1\n AIF (&CLM EQ 8).SUB4\n AIF (&CLM EQ 16).SUB4\n AIF (&CLM EQ 24).SUB4\n AIF (&CLM EQ 32).SUB4\n AIF (&CLM EQ 40).SUB4\n AIF (&CLM EQ 48).SUB4\n AIF (&CLM EQ 56).SUB4\n AIF (&CLM EQ 64).SUB4\n AIF (&CLM EQ 72).SUB4\n AIF (&CLM EQ 80).SUB4\n      AGO  .SETS\n.SUB4   ANOP\n&C  SETA &C-4\n.SETS ANOP\n&S    SETA &C+2\n       AGO  .DOSET\n.SET1  ANOP\n&C     SETA   1\n&S     SETA   3\n       AGO  .DOSET\n.DOSET   ANOP\n.*    AIF ('&COL' NE '80').NOT80\n.*&C     SETA  &C-4\n.*&S     SETA  &S-4\n.NOT80  ANOP\n&SBA1  SETC '&TAB1(&ROW)'(&C,2)\n&SBP2  SETC '&TAB1(&ROW)'(&S,2)\n&C   SETA  &SBP2\n&CLM   SETA  &COL\n      AIF  (&CLM LE 8).SET1R\n      AIF  (&CLM EQ 80).SET80R\n&R   SETA   &CLM/8\n&N   SETA   &R*8\n&R   SETA   &CLM-&N\n     AIF   (&R NE 0).SETSBA2\n&R  SETA   8\n      AGO   .SETSBA2\n.SET1R  ANOP\n&R    SETA   &COL\n     AGO  .SETSBA2\n.SET80R ANOP\n&R    SETA   8\n     AGO  .SETSBA2\n.SETSBA2 ANOP\n&C    SETA  (&C*2)-1\n.NOT0  ANOP\n&SBA2  SETC  '&TAB2(&R)'(&C,2)\n       DC   X'11&SBA1.&SBA2.1D'   SET SBA/SBA ADDR/START FIELD\n         AGO  .OUT\n.ERR   ANOP\n      MNOTE 12,'INVALID PARAMETER'\n       AGO   .OVER\n.OUT   ANOP\n.*  SET ATTRIBUTE BYTE\n      LCLC  &TAB3(32),&ATTR2,&ATTR,&CLR(8),&EXH(4)\n      LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7\n       AIF ('&SKIP' NE 'YES').NOSKIP\n&B2    SETB  1\n&B3    SETB  1\n       AGO  .SELHI\n.NOSKIP  ANOP\n       AIF ('&PROT' NE 'YES').NOPROT\n&B2    SETB  1\n       AGO  .SELHI\n.NOPROT ANOP\n       AIF ('&NUM' NE 'YES').NONUM\n&B3    SETB  1\n       AGO  .SELHI\n.NONUM  ANOP\n       AGO  .SELHI\n.SELHI   ANOP\n       AIF ('&HI' NE 'YES').NOHI\n&B4     SETB  1\n&B5     SETB  0\n        AGO   .SELMDT\n.NOHI   ANOP\n       AIF ('&NNN' NE 'YES').NONNN\n&B4     SETB  1\n&B5     SETB  1\n        AGO   .SELMDT\n.NONNN  ANOP\n       AIF ('&DSPD' NE 'YES').NODSPD\n&B4    SETB  0\n&B5    SETB  1\n       AGO   .SELMDT\n.NODSPD ANOP\n       AIF ('&DNSPD' NE 'YES').NODNSPD\n&B4     SETB  0\n&B5     SETB  0\n        AGO   .SELMDT\n.NODNSPD ANOP\n&B4      SETB  0\n&B5      SETB  1\n        AGO  .SELMDT\n.SELMDT  ANOP\n        AIF  ('&MDT' NE 'YES').NOMDT\n&B7     SETB   1\n.NOMDT   ANOP\n&ATTR2 SETC '&B2.&B3.&B4.&B5.&B6.&B7'\n.*PROT/AN/HI/SPD/NPD/MDT\n&TAB3(1)   SETC '01000000'  U.....\n&TAB3(2)   SETC '11000001'  U....Y\n&TAB3(3)   SETC '11000100'  U..Y..\n&TAB3(4)   SETC '11000101'  U..Y.Y\n&TAB3(5)   SETC '11001000'  U.HY..\n&TAB3(6)   SETC '11001001'  U.HY.Y\n&TAB3(7)   SETC '01001100'  U...Y.\n&TAB3(8)   SETC '01001101'  U...YY\n&TAB3(9)   SETC '01010000'  UN....\n&TAB3(10)  SETC '11010001'  UN...Y\n&TAB3(11)  SETC '11010100'  UN.Y..\n&TAB3(12)  SETC '11010101'  UN.Y.Y\n&TAB3(13)  SETC '11011000'  UNHY..\n&TAB3(14)  SETC '11011001'  UNHY.Y\n&TAB3(15)  SETC '01011100'  UN..Y.\n&TAB3(16)  SETC '01011101'  UN..YY\n&TAB3(17)  SETC '01100000'  P.....\n&TAB3(18)  SETC '01100001'  P....Y\n&TAB3(19)  SETC '11100100'  P..Y..\n&TAB3(20)  SETC '11100101'  P..Y.Y\n&TAB3(21)  SETC '11101000'  P.HY..\n&TAB3(22)  SETC '11101001'  P.HY.Y\n&TAB3(23)  SETC '01101100'  P...Y.\n&TAB3(24)  SETC '01101101'  P...YY\n&TAB3(25)  SETC '11110000'  PS....\n&TAB3(26)  SETC '11110001'  PS...Y\n&TAB3(27)  SETC '11110100'  PS.Y..\n&TAB3(28)  SETC '11110101'  PS.Y.Y\n&TAB3(29)  SETC '11111000'  PSHY..\n&TAB3(30)  SETC '11111001'  PSHY.Y\n&TAB3(31)  SETC '01111100'  PS..Y.\n&TAB3(32)  SETC '01111101'  PS..YY\n.* GET VALUE OF BITS 0 AND 1\n&ATTR SETC '&TAB3(1)'\n&N   SETA  N'&TAB3\n&R   SETA  1\n.GETATTR  ANOP\n&T   SETC  '&TAB3(&R)'(3,6)\n      AIF  ('&T' EQ '&ATTR2').GOTATTR\n&R   SETA   &R+1\n      AIF (&R GT &N).PUTATTR\n     AGO  .GETATTR\n.GOTATTR  ANOP\n&ATTR SETC  '&TAB3(&R)'\n       AGO   .PUTATTR\n.PUTATTR ANOP\n     AIF ('&ATTR' EQ '').SKA1\n     DC  B'&ATTR'\n.SKA1   ANOP\n       AIF ('&CURSOR' NE 'YES').NOCURS\n        DC   X'13'   INSERT CURSOR\n         AGO  .OVER\n.NOCURS   ANOP\n         AGO  .OVER\n.OVER    ANOP\n.*PROCESS EXTENDED ATTRIBUTES IF ANY\n      AIF ('&RSET' NE 'NO').SETRSET\n.TESTEHI  ANOP\n      AIF ('&EHI' NE 'NO').SETEHI\n.TESTCOLR ANOP\n      AIF ('&COLOR' NE 'NO').SETCOLOR\n.TESTPS   ANOP\n      AIF ('&PS' NE 'NO').SETPS\n       AGO .OVERMORE\n.SETRSET ANOP\n      AIF ('&RSET' NE 'YES').ERR\n       DC  X'2800'\n      AGO .TESTEHI\n.SETEHI  ANOP\n&EXH(1) SETC '00'  DEFAULT\n&EXH(2) SETC 'F1'  BLINK\n&EXH(3) SETC 'F2'  REVERSE VIDEO\n&EXH(4) SETC 'F4'  UNDERSCORE\n&N  SETA 1\n      AIF ('&EHI' EQ 'DEF').PUTEHI\n&N  SETA &N+1\n      AIF ('&EHI' EQ 'BLINK').PUTEHI\n&N  SETA &N+1\n      AIF ('&EHI' EQ 'RV').PUTEHI\n&N  SETA &N+1\n      AIF ('&EHI' EQ 'US').PUTEHI\n       AGO  .ERR\n.PUTEHI DC  X'2841',X'&EXH(&N)'\n       AGO  .TESTCOLR\n.SETCOLOR  ANOP\n&CLR(1) SETC '00' DEFAULT\n&CLR(2) SETC 'F1' BLUE\n&CLR(3) SETC 'F2' RED\n&CLR(4) SETC 'F3' PINK\n&CLR(5) SETC 'F4' GREEN\n&CLR(6) SETC 'F5' TURQUOISE\n&CLR(7) SETC 'F6' YELLOW\n&CLR(8) SETC 'F7' WHITE FOR 3279; BLACK FOR 3287\n&N  SETA 1\n      AIF ('&COLOR' EQ 'DEF').PUTCOLOR\n&N  SETA &N+1\n      AIF ('&COLOR' EQ 'BLUE').PUTCOLOR\n&N  SETA &N+1\n      AIF ('&COLOR' EQ 'RED').PUTCOLOR\n&N  SETA &N+1\n      AIF ('&COLOR' EQ 'PINK').PUTCOLOR\n&N  SETA &N+1\n      AIF ('&COLOR' EQ 'GREEN').PUTCOLOR\n&N  SETA &N+1\n      AIF ('&COLOR' EQ 'TURQ').PUTCOLOR\n&N  SETA &N+1\n      AIF ('&COLOR' EQ 'YEL').PUTCOLOR\n&N  SETA &N+1\n      AIF ('&COLOR' EQ 'WHITE').PUTCOLOR\n      AIF ('&COLOR' EQ 'BLACK').PUTCOLOR\n       AGO  .ERR\n.PUTCOLOR ANOP\n    DC  X'2842',X'&CLR(&N)'\n       AGO  .TESTPS\n.SETPS  DS  0H\n&Z SETC '00'\n      AIF ('&PS' EQ 'DEF').PUTPS\n&Z SETC '&PS'\n      AGO  .PUTPS\n.PUTPS ANOP\n    DC X'2843',X'&Z'\n    AGO .OVERMORE\n.OVERMORE ANOP\n        MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGGDEBD": {"ttr": 2315, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    IGGDEBD\n*    03/20/73          LEVEL=01\nDEBAVT   DSECT\n**********************************************************************\n*   APPENDAGE VECTOR TABLE FOR DEB. CONTAINS PTRS TO THE APPENDAGES  *\n*   USED BY IOS.                                                     *\n**********************************************************************\n         SPACE 3\nDEBEOEA  DS    A                        END OF EXTENT APPENDAGE\nDEBSIOA  DS    A                        START I/O APPENDAGE\nDEBPCIA  DS    A                        PROGRAM CONTROLLED INTERRUPT\nDEBCEA   DS    A                        CHANNEL END APPENDAGE\nDEBXCEA  DS    A                        ABNORMAL END APPENDAGE\n         SPACE 5\n*******************************************************\nDEBEXT   DSECT\n*                                       EXTENTION CONTAINS POINTERS\n*                                       TO BE PROTECTED FROM PROBLEM\n*                                       PROGRAM\nDEBDCBFA DS    A                        DCB FIELD AREA ADDRESS\nDEBPUT   DS    0A                       ADDR OF PUT MODULE\nDEBGET   DS    0A                       ADDR OF GET MODULE\nDEBDISAD DS    A                        ADDR OF PRIV MACRO MODULE\nDEBRPSL  DS    0A                       ADDRESS OF RPS SIO MODULE\nLOADEXT  EQU   *+4-DEBEXT               LENGTH OF LOAD EXTENSION\nDEBWKPT4 DS    A                        SAME AS DCBWKPT4\nDEBWKPT5 DS    A                        SAME AS DCBWKPT5\nDEBFREED DS    0A                       ADDR OF DYN BUFF MODULE\nDEBCEVEC DS    0BL24                    CHAN END VECT TBL CONSISTING OF\nDEBCREAD DS    A                        READ\nDEBRPSIO DS    0A                       ADDR OF SECONDARY RPS SIO APP\nDEBCSETL DS    A                        SETL\nDEBSIOA2 DS    0A                       ADDR OF SECONDARY SIO APP\nBISAMEXT EQU   *+4-DEBEXT               EXTENSION LENGTH OF BISAM\nDEBCWRIT DS    A                        WRITE\nDEBCCHK  DS    A                        WRITE VAL. CHECK\nDEBCREWT DS    A                        RE-WRITE\nDEBCRECK DS    A                        RE-CHECK\nDEBABVEC DS    0BL24                    ABNORMAL END VECT TBL CONSISTS\n*                                       OF THE FOLLOWING-\nDEBAREAD DS    A                        READ\nDEBASETL DS    A                        SETL\nDEBAWRIT DS    A                        WRITE\nDEBACHK  DS    A                        WRITE VAL. CHECK\nDEBAREWT DS    A                        RE-WRITE\nDEBARECK DS    A                        RE-CHECK\nDEBRPSS  DS    A                        SECONDARY SCAN SIO APP\nSCANEXT  EQU   *-DEBEXT\nW1CEVECT EQU   DEBCEVEC\nW1CEREAD EQU   DEBCREAD\nW1CESETL EQU   DEBCSETL\nW1CEWRIT EQU   DEBCWRIT\nW1CECHK  EQU   DEBCCHK\nW1CEREWT EQU   DEBCREWT\nW1CERECK EQU   DEBCRECK\nW1ABVECT EQU   DEBABVEC\nW1ABREAD EQU   DEBAREAD\nW1ABSETL EQU   DEBASETL\nW1ABWRIT EQU   DEBAWRIT\nW1ABCHK  EQU   DEBACHK\nW1ABREWT EQU   DEBAREWT\nW1ABRECK EQU   DEBARECK\n&NAME    DSECT\nDEBNMSUB DS    0BL1                    = SUBRTNS LOADED BY OPEN\nDEBTCBAD DS    A                       TCB POINTER\nDEBAMLNG DS    0BL1                    LENGTH OF ACCESS METHOD SECTION\nDEBDEBAD DS    A                       POINTER TO NEXT DEB IN TASK\nDEBOFLGS DS    0BL1                    DATA SET STATUS FLAGS\n*                                      B0.B1 01=DISP=OLD\n*                                            10=DISP=MOD\n*                                            11=DISP=NEW\n*                                      B2 EOV OR EOF\n*                                      B3 PARTIAL RELEASE\n*                                      B4 DCB MODIFICATION\n*                                      B5 SPLIT CYLINDER\n*                                      B6 NON STANDARD LABELS\n*                                      B7 MAG TAPE- USE REDUCED ERP\nDEBIRBAD DS    A                       POINTER TO IRB FOR ASYNC EXIT\nDEBOPATB DS    0BL1                    TYPE OF I/O\n*                                      B0 SYSABEND OR SYSUDUMP DS\n*                                      B1 0 (ALWAYS)\n*                                      B2.B3 01=REREAD\n*                                            11=LEAVE\n*                                      B4.B5.B6.B7 0000=INPUT\n*                                                  1111=OUTPUT\n*                                                  0011=INOUT\n*                                                  0111=OUTIN\n*                                                  0001=RDBACK\n*                                                  0100=UPDATE\nDEBQSCNT DS    BL1                     PURGE QUIESCE COUNT\n         DS    H                       RESERVED\nDEBNMEXT DS    0BL1                    NUMBER OF EXTENTS CONSTRUCTED\nDEBUSRPG DS    A                       AD OF 1ST IOB IN USR PURGE CHAIN\nDEBPRIOR DS    0BL1                    DISPATCHING PRIORITY\nDEBEDBAD DS    A                       POINTER TO PARMLIST OF PURGE ECB\nDEBPROTG DS    0BL.4                   TASK PROTECTION FLAG\nDEBDEBID DS    0BL.4'1111'             X'F' TO IDENTIFY AS A DEB\nDEBDCBAD DS    A                       POINTER TO CORRESPONDING DCB\nDEBEXSCL DS    0BL1                    SCALE FOR SIZE OF DEV SECTION\nDEBAPPAD DS    A                       POINTER TO APPENDAGE VECTOR TBL\n* ISAM DEPENDENT SECTION   (M=0 EXTENT NUMBER)\nDEBNIEE  DS    0BL1                    = INDEX EXTENTS\nDEBFIEAD DS    A                       ADDR OF 1ST INDEX EXTENT\nDEBNPEE  DS    0BL1                    = PRIME DATA EXTENTS\nDEBFPEAD DS    A                       ADDR OF 1ST PRIME DATA EXTENT\nDEBNOEE  DS    0BL1                    = OVERFLOW EXTENTS\nDEBFOEAD DS    A                       ADDR OF 1ST OVERFLOW EXTENT\nDEBRPSID DS    0BL1                    RPS IDENTIFIERS FOR PRI,IX,OVFLO\n*                                      B0 PRIME ON RPS\n*                                      B1 INDEX ON RPS\n*                                      B2 OVFLO ON RPS\n*                                      B3 SIO APPENDAGE LOADED\n*                                      B4-7 RESERVED\nDEBEXPTR DS    A                        POINTER TO DEB EXTENTION\n         ORG   &NAME+32\n* DIRECT ACCESS DEVICE DEPENDENT SECTION\n*        ADDRESS BY DEBAD + (M X (4 X EXSCL))\nDEBDVMOD DS    0BL1                    DEVICE MODIFIER (FILE MASK)\nDEBUCBAD DS    A                       POINTER TO UCB\nDEBBINUM DS    BL2                     BB OF EXTENT\nDEBSTRCC DS    BL2                     CYLINDER ADDR FOR START OF EXT\nDEBSTRHH DS    BL2                     HEAD NUMBER FOR START OF EXTENT\nDEBENDCC DS    BL2                     CYLINDER ADDR FOR END OF EXTENT\nDEBENDHH DS    BL2                     HEAD NUMBER FOR END OF EXTENT\nDEBNMTRK DS    BL2                     NUMBER OF TRACKS IN EXTENT\n*                                      ********************************\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULDATE": {"ttr": 1030, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*********************************************************************   JUL00970\n         MACRO                                                          JUL00010\n&NAME JULDATE &ADRF                                                     JUL00020\n.*CONVER DATE TO JULIAN\n.BIN     ANOP                                                           JUL00030\n         STM   0,15,&NAME.SAVE                                          JUL00040\n         SR    0,0                         CLEAR WORK REGISTER          JUL00050\n         SR    1,1                         CLEAR WORK REGISTER          JUL00060\n&NAME.GO  DS   0H                                                       JUL00130\n         PACK  &NAME.DW(2),&ADRF+6(2)       YEAR\n         ICM   0,3,&NAME.DW                 YEAR                        JUL00140\n         SRL   0,4                         SHIFT OUT SIGN\n         STC   0,&NAME.JYR+1\n         ICM   1,1,&NAME.LEAP               LAST LEAP YEAR              JUL00150\n         SR    0,1                           SUBTRACT YEARS             JUL00160\n         LTR   0,0                                                      JUL00170\n         BZ    &NAME.SET                 LEAP YEAR                      JUL00180\n         C     0,=F'4'                   IF DIFFERENCE = 4              JUL00190\n         BE    &NAME.SET                 THEN THIS IS LEAP YEAR         JUL00200\n         BL    &NAME.GDAY                IF , 4, THEN NOT LEAP YEAR     JUL00210\n         LR    1,0\n         SR    0,0\n         D     0,=F'4'                   IS RESULT DIVISIBLE BY 4       JUL00220\n         C     0,=F'4'                   TEST REMAINDER                 JUL00230\n         BNE   *+8                        IF REMAINDER = 4, THEN LEAP   JUL00240\n&NAME.SET DS   0H                          SET LEAP YEAR SWITCH         JUL00250\n         OI    &NAME.LSW,X'01'            SET LEAP YEAR SWITCH          JUL00260\n&NAME.GDAY DS  0H                        CALCULATE DAY                  JUL00270\n         SR    0,0                      CLEAR WORK REG                  JUL00280\n         LA    1,1                      INITIALIZE TO 1ST MONTH         JUL00290\n         SR    4,4                      CLEAR WORK REG                  JUL00300\n         CLC   &ADRF+0(2),=CL2'01'      FIRST MONTH\n         BE    &NAME.DGOT\n         PACK  &NAME.DW,&ADRF+0(2)    PACK MONTH VALUE\n         CVB   0,&NAME.DW                   CONVERT TO BINARY           JUL00320\n         LA    3,&NAME.RDAY             LOAD NUMB. OF DAYS TABLE        JUL00330\n         CLI   &NAME.LSW,X'01'            IF LEAP YEAR USE LEAP         JUL00340\n         BNE   *+8                      YEAR TABLE                      JUL00350\n         LA    3,&NAME.LDAY            LEAP YEAR TABLE                  JUL00360\n         XC    &NAME.DW(2),&NAME.DW   ZERO WORK AREA                    JUL00370\n         ICM   4,1,0(3)               #DAYS IN FIRST MONTH              JUL00380\n&NAME.CALC DS  0H                       BEGIN CALCULATION               JUL00400\n         LA    3,1(3)      NEXT MONTHS DAYS\n         LA    1,1(1)      INCREMENT COUNTER-R1 WILL POINT TO MONTH     JUL00410\n         CR    0,1         STOP WHEN GIVEN MONTH EQUAL\n         BE    &NAME.DGOT\n         MVC   &NAME.DW+1(1),0(3)             #OF DAYS IN MONTH         JUL00420\n         AH    4,&NAME.DW              ACCUMULATE DAYS SO FAR           JUL00430\n         B     &NAME.CALC        REPEAT UNTIL MONTHS EQUAL              JUL00520\n&NAME.DGOT DS   0H               MONTHS EQUAL - ADD IN GIVEN DAY        JUL00530\n         PACK  &NAME.DW,&ADRF+3(2)    PACK DAY VALUE\n         CVB   0,&NAME.DW                   CONVERT TO BINARY           JUL00320\n         AR    4,0               DAY NUMBER\n         CVD   4,&NAME.DW\n         ZAP   &NAME.JDAY,&NAME.DW+6(2)\n         B     &NAME.E                                                  JUL00820\n&NAME.RDAY DC X'1F1C1F1E1F1E1F1F1E1F1E1F'  DAYS IN MONTH                JUL00830\n&NAME.LDAY DC X'1F1D1F1E1F1E1F1F1E1F1E1F'  DAYS IN MONTH-LEAPYEAR       JUL00840\n&NAME.LEAP DC X'80'          LAST LEAP YEAR WAS 1980                    JUL00850\n&NAME.LSW  DC X'00'          SWITCH FOR LEAP YEAR                       JUL00860\n&NAME.JDTE  DS 0CL4\n&NAME.JYR   DS XL2\n&NAME.JDAY DS PL2                                                       JUL00900\n&NAME.SAVE DS 9D                                                        JUL00920\n&NAME.DW   DS D                                                         JUL00930\n.END     ANOP                                                           JUL00940\n&NAME.E  DS  0H                                                         JUL00950\n         LM   0,15,&NAME.SAVE\n         MEND                                                           JUL00960\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SBA": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x00\\x93\\x04\\x9f\\x00\\x99\\x11\\x0f\\x15 \\x00\\xc5\\x00\\xc2\\x00\\x00\\xc5\\xc9\\xd3\\xc5\\xc5\\xd5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-02-18T00:00:00", "modifydate": "1999-04-20T15:20:06", "lines": 197, "newlines": 194, "modlines": 0, "user": "EILEEN"}, "text": "      MACRO\n&NAME  SBA  &ROW,&COL,&SKIP=NO,&MDT=NO,&PROT=NO,&HI=NO,&DSPD=MO,       X\n               &DNSPD=YES,&CURSOR=NO,&NNN=NO,&NUM=NO\n.* DSPD= DISPLAY/SELECTOR-PEN DETECTABLE\n.* DNSPD=DISPLAY/NOT SELECTOR PEN DETECTABLE\n.* NNN  =NONDISPLAY,NONPRINT,NONDETECTABLE\n        LCLC &TAB1(24),&TAB2(8),&Z,&T,&SBA1,&SBA2,&SBP2\n        LCLA &R,&C,&N,&S,&CLM,&PTR2\n     AIF  ('&COL' GT '80').ERR\n&T  SETC   T'&ROW\n     AIF  ('&T'     NE 'N').ERR\n&T  SETC   T'&COL\n     AIF  ('&T'     NE 'N').ERR\n.***EACH 2 BYTE ENTRY REPRESENTS FIRST BYTE SBA FOR COL 1-8 AND\n.***73-80  FOLLOWED BY TABLE 2 POINTER\n&TAB1(1) SETC '40014002400340044005400640074008C101C102'\n&TAB1(2) SETC 'C103C104C105C106C107C108C201C202C203C204'\n&TAB1(3) SETC 'C205C206C207C208C301C302C303C304C305C306'\n&TAB1(4) SETC 'C307C308C401C402C403C404C405C406C407C408'\n&TAB1(5) SETC 'C501C502C503C504C505C506C507C508C601C602'\n&TAB1(6) SETC 'C603C604C605C606C607C608C701C702C703C704'\n&TAB1(7) SETC 'C705C706C707C708C801C802C803C804C805C806'\n&TAB1(8) SETC 'C807C808C901C902C903C904C905C906C907C908'\n&TAB1(9) SETC '4A014A024A034A044A054A064A074A084B014B02'\n&TAB1(10) SETC '4B034B044B054B064B074B084C014C024C034C04'\n&TAB1(11) SETC '4C054C064C074C084D014D024D034D044D054D06'\n&TAB1(12) SETC '4D074D084E014E024E034E044E054E064E074E08'\n&TAB1(13) SETC '4F014F024F034F044F054F064F074F0850015002'\n&TAB1(14) SETC '500350045005500650075008D101D102D103D104'\n&TAB1(15) SETC 'D105D106D107D108D201D202D203D204D205D206'\n&TAB1(16) SETC 'D207D208D301D302D303D304D305D306D307D308'\n&TAB1(17) SETC 'D401D402D403D404D405D406D407D408D501D502'\n&TAB1(18) SETC 'D503D504D505D506D507D508D601D602D603D604'\n&TAB1(19) SETC 'D605D606D607D608D701D702D703D704D705D706'\n&TAB1(20) SETC 'D707D708D801D802D803D804D805D806D807D808'\n&TAB1(21) SETC 'D901D902D903D904D905D906D907D9085A015A02'\n&TAB1(22) SETC '5A035A045A055A065A075A085B015B025B035B04'\n&TAB1(23) SETC '5B055B065B075B085C015C025C035C045C055C06'\n&TAB1(24) SETC '5C075C085D015D025D035D045D055D065D075D08'\n.***EACH 8 BYTE ENTRY REPRESENTS 2ND   BYTE SBA FOR COL 1-8 THRU\n.**73-80. EACH ROW IS POINTED 2 BY TABLE POINTER IN TABLE 1.\n&TAB2(1) SETC '40C850D860E8F0F8'  COL 1-73 (SKIP 8)\n&TAB2(2) SETC 'C1C9D1D961E9F1F9'  COL 2-74\n&TAB2(3) SETC 'C24AD25AE26AF27A'  COL 3-75\n&TAB2(4) SETC 'C34BD35BE36BF37B'   COL 4-76\n&TAB2(5) SETC 'C44CD45CE46CF47C'   COL 5-77\n&TAB2(6) SETC 'C54DD55DE56DF57D'    COL 6-78\n&TAB2(7) SETC 'C64ED65EE66EF67E'    COL 7-79\n&TAB2(8) SETC 'C74FD75FE76FF77F'   COL 8-80\n        AGO .CALC\n.CALC   ANOP\n     AIF  ('&COL' LE '8').SET1\n&S   SETA  &COL-1\n&CLM  SETA  &S+1\n&C   SETA &CLM/8\n&C    SETA (&C)*4+1\n&S    SETA &C+2\n       AGO  .DOSET\n.SET1  ANOP\n&C     SETA   1\n&S     SETA   3\n       AGO  .DOSET\n.DOSET   ANOP\n      AIF ('&COL' NE '80').NOT80\n&C     SETA  &C-4\n&S     SETA  &S-4\n.NOT80  ANOP\n&SBA1  SETC '&TAB1(&ROW)'(&C,2)\n&SBP2  SETC '&TAB1(&ROW)'(&S,2)\n&C   SETA  &SBP2\n&CLM   SETA  &COL\n      AIF  (&CLM LE 8).SET1R\n      AIF  (&CLM EQ 80).SET80R\n&R   SETA   &CLM/8\n&N   SETA   &R*8\n&R   SETA   &CLM-&N\n      AGO   .SETSBA2\n.SET1R  ANOP\n&R    SETA   &COL\n     AGO  .SETSBA2\n.SET80R ANOP\n&R    SETA   8\n     AGO  .SETSBA2\n.SETSBA2 ANOP\n&C    SETA  (&C*2)-1\n.NOT0  ANOP\n       AIF ('&R' GT '0').DOT0\n&R     SETA 1\n.DOT0   ANOP\n&SBA2  SETC  '&TAB2(&R)'(&C,2)\n       DC   X'11&SBA1.&SBA2.1D'   SET SBA/SBA ADDR/START FIELD\n         AGO  .OUT\n.ERR   ANOP\n      MNOTE 12,'INVALID PARAMETER'\n       AGO   .OVER\n.OUT   ANOP\n.*  SET ATTRIBUTE BYTE\n      LCLC  &TAB3(32),&ATTR2,&ATTR\n      LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7\n       AIF ('&SKIP' NE 'YES').NOSKIP\n&B2    SETB  1\n&B3    SETB  1\n       AGO  .SELHI\n.NOSKIP  ANOP\n       AIF ('&PROT' NE 'YES').NOPROT\n&B2    SETB  1\n       AGO  .SELHI\n.NOPROT ANOP\n       AIF ('&NUM' NE 'YES').NONUM\n&B3    SETB  1\n       AGO  .SELHI\n.NONUM  ANOP\n       AGO  .SELHI\n.SELHI   ANOP\n       AIF ('&HI' NE 'YES').NOHI\n&B4     SETB  1\n&B5     SETB  0\n        AGO   .SELMDT\n.NOHI   ANOP\n       AIF ('&NNN' NE 'YES').NONNN\n&B4     SETB  1\n&B5     SETB  1\n        AGO   .SELMDT\n.NONNN  ANOP\n       AIF ('&DSPD' NE 'YES').NODSPD\n&B4    SETB  0\n&B5    SETB  1\n       AGO   .SELMDT\n.NODSPD ANOP\n       AIF ('&DNSPD' NE 'YES').NODNSPD\n&B4     SETB  0\n&B5     SETB  0\n        AGO   .SELMDT\n.NODNSPD ANOP\n&B4      SETB  0\n&B5      SETB  1\n        AGO  .SELMDT\n.SELMDT  ANOP\n        AIF  ('&MDT' NE 'YES').NOMDT\n&B7     SETB   1\n.NOMDT   ANOP\n&ATTR2 SETC '&B2.&B3.&B4.&B5.&B6.&B7'\n.*PROT/AN/HI/SPD/NPD/MDT\n&TAB3(1)   SETC '01000000'  U.....\n&TAB3(2)   SETC '11000001'  U....Y\n&TAB3(3)   SETC '11000100'  U..Y..\n&TAB3(4)   SETC '11000101'  U..Y.Y\n&TAB3(5)   SETC '11001000'  U.HY..\n&TAB3(6)   SETC '11001001'  U.HY.Y\n&TAB3(7)   SETC '01001100'  U...Y.\n&TAB3(8)   SETC '01001101'  U...YY\n&TAB3(9)   SETC '01010000'  UN....\n&TAB3(10)  SETC '11010001'  UN...Y\n&TAB3(11)  SETC '11010100'  UN.Y..\n&TAB3(12)  SETC '11010101'  UN.Y.Y\n&TAB3(13)  SETC '11011000'  UNHY..\n&TAB3(14)  SETC '11011001'  UNHY.Y\n&TAB3(15)  SETC '01011100'  UN..Y.\n&TAB3(16)  SETC '01011101'  UN..YY\n&TAB3(17)  SETC '01100000'  P.....\n&TAB3(18)  SETC '01100001'  P....Y\n&TAB3(19)  SETC '11100100'  P..Y..\n&TAB3(20)  SETC '11100101'  P..Y.Y\n&TAB3(21)  SETC '11101000'  P.HY..\n&TAB3(22)  SETC '11101001'  P.HY.Y\n&TAB3(23)  SETC '01101100'  P...Y.\n&TAB3(24)  SETC '01101101'  P...YY\n&TAB3(25)  SETC '11110000'  PS....\n&TAB3(26)  SETC '11110001'  PS...Y\n&TAB3(27)  SETC '11110100'  PS.Y..\n&TAB3(28)  SETC '11110101'  PS.Y.Y\n&TAB3(29)  SETC '11111000'  PSHY..\n&TAB3(30)  SETC '11111001'  PSHY.Y\n&TAB3(31)  SETC '01111100'  PS..Y.\n&TAB3(32)  SETC '01111101'  PS..YY\n.* GET VALUE OF BITS 0 AND 1\n&ATTR SETC '&TAB3(1)'\n&N   SETA  N'&TAB3\n&R   SETA  1\n.GETATTR  ANOP\n&T   SETC  '&TAB3(&R)'(3,6)\n      AIF  ('&T' EQ '&ATTR2').GOTATTR\n&R   SETA   &R+1\n      AIF (&R GT &N).PUTATTR\n     AGO  .GETATTR\n.GOTATTR  ANOP\n&ATTR SETC  '&TAB3(&R)'\n       AGO   .PUTATTR\n.PUTATTR ANOP\n     DC  B'&ATTR'  ATTRIBUTE\n       AIF ('&CURSOR' NE 'YES').NOCURS\n        DC   X'13'   INSERT CURSOR\n         AGO  .OVER\n.NOCURS   ANOP\n         AGO  .OVER\n.OVER    ANOP\n        MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCANARG": {"ttr": 1032, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "     MACRO\n&NAME   SCANARG &ARG,&ADDR=TIOAFUNC,&LEN=(0)\n.* &ARG IS LITERAL TO BE SEARCHED FOR IN DATA WHOSE ADDR IS IN &ADDR\n.* AND LENGTH IN &LEN. IF SEARCH IS SUCCESSFUL, ADDRESS OF FOUND DATA\n.* WILL BE IN R1\n        LCLC  &SARG,&T,&LC\n        LCLA  &AL,&L\n&AL     SETA  K'&ARG-2\n&SARG   SETC  '&ARG'(2,&AL)\n        AIF  ('&ADDR'(1,1)  NE '(').AD\n         LA   1,0&ADDR\n          AGO  .GD\n.AD      ANOP\n        LA    1,&ADDR\n.GD     ANOP\n        AIF  ('&LEN'  EQ '').AR LENGTH IN R0\n        AIF  ('&LEN'(1,1)  EQ '(').LR\n&T     SETC  T'&LEN\n        AIF  ('&T'     EQ 'H').LH\n        AIF  (K'&LEN LT 4).LA\n.LA     LA    0,&LEN\n        AGO   .AR\n.LR     ANOP    PUT LENGTH  IN R0\n&L       SETA  K'&LEN\n&LC       SETC '&LEN(1,&L-2)'\n         LR   0,&LC\n        AGO   .AR\n.LH     ANOP\n        LH     0,&LEN\n        AGO   .AR\n.AR      ANOP\n        AR    0,1          END OF FIELD\n&NAME.ARGS DS  0H\n        CLC   0(&AL,1),=CL(&AL)'&SARG'\n        BE    &NAME.ARGF\n        LA    1,1(1)\n        CR    1,0\n        BL    &NAME.ARGS\n        SR   1,1\n        B   &NAME.ARGF\n&NAME.ARGF  DS  0H\n        LTR  1,1\n        AGO    .MEND\n.MEND   ANOP\n        MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCANARGX": {"ttr": 1034, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "     MACRO\n&NAME   SCANARG &ARG\n.* &ARG IS LITERAL TO BE SEARCHED FOR IN DATA WHOSE ADDR IS IN R1\n.* AND LENGTH IN R0; IF SEARCH IS SUCCESSFUL, ADDRESS OF FOUND DATA\n.* WILL BE IN R1\n        LCLC  &SARG\n        LCLA  &AL\n&AL     SETA  K'&ARG-2\n&SARG   SETC  '&ARG'(2,&AL)\n        LA    1,OUTBUFF\n        LA    0,121-0\n        AR    0,1          END OF FIELD\n&NAME.ARGS DS  0H\n        CLC   0(&AL,1),=CL(&AL)'&SARG'\n        BE    &NAME.ARGF\n        LA    1,1(1)\n        CR    1,0\n        BL    &NAME.ARGS\n        SR   1,1\n        B   &NAME.ARGF\n&NAME.ARGF  DS  0H\n        LTR  1,1\n        AGO    .MEND\n.MEND   ANOP\n        MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETM": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x18\\x00\\x99\\x10_\\x00\\x99\\x14\\x0f\\x11\\x08\\x00\\x10\\x00\\x11\\x00\\x00\\xc5\\xc9\\xd3\\xc5\\xc5\\xd5@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1999-04-15T00:00:00", "modifydate": "1999-05-20T11:08:18", "lines": 16, "newlines": 17, "modlines": 0, "user": "EILEEN"}, "text": "       MACRO\n        SETM  &I\n        AIF ('&I' EQ 'OFF').OFF\n        AIF ('&I' EQ 'ON').ON\n         MEXIT\n.OFF     ANOP\n         LA  1,*+10\n         N    1,=B'01111111111111111111111111111111'\n         BSM  0,1\n         MEXIT\n.ON      ANOP\n         LA  1,*+10\n         O    1,=B'10000000000000000000000000000000'\n         BSM  0,1\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFHCRBDS": {"ttr": 1036, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n*    COPYRIGHT = 5665-403 (C) COPYRIGHT IBM CORP. 1975                *\n*                THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"         *\n*                LICENSED MATERIALS - PROPERTY OF IBM                 *\n*                REFER TO COPYRIGHT INSTRUCTIONS                      *\n*                FORM NUMBER G120-2083                                *\n***********************************************************************\n*        DSECT DFHCRBDS.\n*\n*        THIS DSECT DESCRIBES THE CICS REGION BLOCK, WHICH IS\n*        USED BY THE CICS INTER-REGION COMMUNICATION FACILITY.\n*        THE BLOCK IS USED TO CONTROL INTER-REGION ACTIVITY\n*        AT A GLOBAL LEVEL, AS OPPOSED TO CONTROLLING THE\n*        ACTIVITY OF INDIVIDUAL LINKS WITH OTHER REGIONS.\n*        THE CONVERSATIONAL TCTTE (HUNG OFF THE 'ISLINK'\n*        SYSTEM ENTRY IN THE TCT) IS THE BLOCK WHICH\n*        CONTROLS INDIVIDUAL 'CONVERSATIONS' BETWEEN CICS\n*        AND OTHER REGIONS.\n*        THE CRB IS ALLOCATED WHEN THE FACILITY IS STARTED\n*        UP (BY THE START-UP PROGRAM, DFHCRSP), AND FREED WHEN\n*        THE FACILITY IS SHUT DOWN (VIA THE IS LOGOFF COMMND).\n*        THE BLOCK CONTAINS, AMONGST OTHER THINGS, ARGUMENT\n*        LISTS AND OTHER INFORMATION REQUIRED TO COMMUNICATE\n*        WITH THE INTER-REGION SVC (DFHIRCP)\n         SPACE ,                                               @BCA890E\n*  $SEG(DFHCRBDS),COMP(IRC),PROD(CICS/VS) :                           *\n*  $D1= I01521 161 821217 HD0JADT: AD13 ADD SUSPENDED MIRROR COUNT    *\n*  $L1= J43    161 820825 HDXDRP : BBAB ADD SUSPENDED MIRROR ANCHOR   *\nDFHCRBDS DSECT                                                 @BCA890E\n         DS    F                   STORAGE ACCOUNTING          @BCA890E\nCRBSVCLS DS    F                   ALIST FOR SVC               @BCA890E\n         SPACE ,                                               @BCA890E\n         DS    0F                                              @BCA890E\nCRBSVCSB DS    XL40                SUBLIST FOR SVC             @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSTCA  DS    A                   SUSPENDED TCA CHAIN      @FJ43X @L1C\nCRBUSID  DS    F                   SVC USER ID ALLOC'D TO CICS @BCA890E\nCRBSLCB  DS    A                   A(SVC'S SLCB CTL BLOCK)     @BCA890E\nCRBRTRY  DS    A                   ANCHOR FOR CHAIN OF TCTTES  @BCA890E\n*                                  FOR WHICH ATTACH OF MIRROR\n*                                  IS TO BE RETRIED\nCRBRTRND DS    A                   A(LAST EL IN RETRY CHAIN)   @BCA890E\nCRBCSNC  DS    A                   A(CSNC'S TCA)               @BCA890E\nCRBRTSTP DS    F                   VAL OF STOPPER IN RETRY CHN @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSTASV DS    2F                  SAVE REGS 13,14 IN STAE     @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSVCIN DS    H                   INSTR TO INVOKE INTER-RGN   @BCA890E\n*                                  SVC\nCRBSMSA  DS    PL2                 SUSP MIRROR SLOTS AVLBLE @01521 @D1A\n         SPACE 2                                               @BCA890E\nCRBFLG1  DS    B                   FLAG BYTE                   @BCA890E\nCRBNCSUS EQU   X'80'               NEW CONNECTION TASK CSNC IS @BCA890E\n*                                  SUSPENDED\nCRBSCSMT EQU   X'40'               SUPPRESS 'QUIESCE COMPLETE' @BCA890E\n*                                  MSG TO CSMT IN CSNC. (THIS\n*                                  BIT SET WHEN INTER-RGN FCLY\n*                                  STOPPED BY STP OR SRP)\nCRBRESNC EQU   X'20'               REQUESTS RESUMPTION OF CSNC @BBDJ10E\nCRBWHR   EQU   X'10'               SET BY KCP IF IT WOULD HAVE @BBDJ10E\n*                                  RESUMED CSNC, HAD CSNC NOT  @BBDJ10E\n*                                  ALREADY BEEN ACTIVE. THIS   @BBDJ10E\n*                                  FLAG TELLS CSNC TO RESCAN   @BBDJ10E\n*                                  SCCB'S FOR MORE WORK        @BBDJ10E\nCRBABND  EQU   X'08'               CSNC HAS ABENDED- NRML SHUT @BBDJ10E\n*                                  MUSTN'T ISSUE IS STOPNML    @BBDJ10E\nCRBISPLS DFHISCRQ TYPE=STORAGE                                 @BCA890E\n         SPACE 3                                               @BCA890E\nCRBLEN   EQU   *-DFHCRBDS          LENGTH OF CRB               @BCA890E\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFHCRB32": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92\\x19o\\x00\\x92\\x19o\\x12G\\x00F\\x00E\\x00\\x01\\xc5\\xc9\\xd3\\xc5\\xc5\\xd5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-07-14T00:00:00", "modifydate": "1992-07-14T12:47:00", "lines": 70, "newlines": 69, "modlines": 1, "user": "EILEEN"}, "text": "***********************************************************************\n*    COPYRIGHT = 5665-403 (C) COPYRIGHT IBM CORP. 1975                *\n*                THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"         *\n*                LICENSED MATERIALS - PROPERTY OF IBM                 *\n*                REFER TO COPYRIGHT INSTRUCTIONS                      *\n*                FORM NUMBER G120-2083                                *\n***********************************************************************\n*        DSECT DFHCRBDS.\n*\n*        THIS DSECT DESCRIBES THE CICS REGION BLOCK, WHICH IS\n*        USED BY THE CICS INTER-REGION COMMUNICATION FACILITY.\n*        THE BLOCK IS USED TO CONTROL INTER-REGION ACTIVITY\n*        AT A GLOBAL LEVEL, AS OPPOSED TO CONTROLLING THE\n*        ACTIVITY OF INDIVIDUAL LINKS WITH OTHER REGIONS.\n*        THE CONVERSATIONAL TCTTE (HUNG OFF THE 'ISLINK'\n*        SYSTEM ENTRY IN THE TCT) IS THE BLOCK WHICH\n*        CONTROLS INDIVIDUAL 'CONVERSATIONS' BETWEEN CICS\n*        AND OTHER REGIONS.\n*        THE CRB IS ALLOCATED WHEN THE FACILITY IS STARTED\n*        UP (BY THE START-UP PROGRAM, DFHCRSP), AND FREED WHEN\n*        THE FACILITY IS SHUT DOWN (VIA THE IS LOGOFF COMMND).\n*        THE BLOCK CONTAINS, AMONGST OTHER THINGS, ARGUMENT\n*        LISTS AND OTHER INFORMATION REQUIRED TO COMMUNICATE\n*        WITH THE INTER-REGION SVC (DFHIRCP)\n         SPACE ,                                               @BCA890E\n*  $SEG(DFHCRBDS),COMP(IRC),PROD(CICS/VS) :                           *\n*  $D1= I01521 161 821217 HD0JADT: AD13 ADD SUSPENDED MIRROR COUNT    *\n*  $L1= J43    161 820825 HDXDRP : BBAB ADD SUSPENDED MIRROR ANCHOR   *\nDFHCRBDS DSECT                                                 @BCA890E\n         DS    F                   STORAGE ACCOUNTING          @BCA890E\nCRBEYE   DS    F                   EYE CATCHER (NEW IN 3.2)    @BCA890E\nCRBSVCLS DS    F                   ALIST FOR SVC               @BCA890E\n         SPACE ,                                               @BCA890E\n         DS    0F                                              @BCA890E\nCRBSVCSB DS    XL40                SUBLIST FOR SVC             @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSTCA  DS    A                   SUSPENDED TCA CHAIN      @FJ43X @L1C\nCRBUSID  DS    F                   SVC USER ID ALLOC'D TO CICS @BCA890E\nCRBSLCB  DS    A                   A(SVC'S SLCB CTL BLOCK)     @BCA890E\nCRBRTRY  DS    A                   ANCHOR FOR CHAIN OF TCTTES  @BCA890E\n*                                  FOR WHICH ATTACH OF MIRROR\n*                                  IS TO BE RETRIED\nCRBRTRND DS    A                   A(LAST EL IN RETRY CHAIN)   @BCA890E\nCRBCSNC  DS    A                   A(CSNC'S TCA)               @BCA890E\nCRBRTSTP DS    F                   VAL OF STOPPER IN RETRY CHN @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSTASV DS    2F                  SAVE REGS 13,14 IN STAE     @BCA890E\n         SPACE ,                                               @BCA890E\nCRBSVCIN DS    H                   INSTR TO INVOKE INTER-RGN   @BCA890E\n*                                  SVC\nCRBSMSA  DS    PL2                 SUSP MIRROR SLOTS AVLBLE @01521 @D1A\n         SPACE 2                                               @BCA890E\nCRBFLG1  DS    B                   FLAG BYTE                   @BCA890E\nCRBNCSUS EQU   X'80'               NEW CONNECTION TASK CSNC IS @BCA890E\n*                                  SUSPENDED\nCRBSCSMT EQU   X'40'               SUPPRESS 'QUIESCE COMPLETE' @BCA890E\n*                                  MSG TO CSMT IN CSNC. (THIS\n*                                  BIT SET WHEN INTER-RGN FCLY\n*                                  STOPPED BY STP OR SRP)\nCRBRESNC EQU   X'20'               REQUESTS RESUMPTION OF CSNC @BBDJ10E\nCRBWHR   EQU   X'10'               SET BY KCP IF IT WOULD HAVE @BBDJ10E\n*                                  RESUMED CSNC, HAD CSNC NOT  @BBDJ10E\n*                                  ALREADY BEEN ACTIVE. THIS   @BBDJ10E\n*                                  FLAG TELLS CSNC TO RESCAN   @BBDJ10E\n*                                  SCCB'S FOR MORE WORK        @BBDJ10E\nCRBABND  EQU   X'08'               CSNC HAS ABENDED- NRML SHUT @BBDJ10E\n*                                  MUSTN'T ISSUE IS STOPNML    @BBDJ10E\nCRBISPLS DFHISCRQ TYPE=STORAGE                                 @BCA890E\n         SPACE 3                                               @BCA890E\nCRBLEN   EQU   *-DFHCRBDS          LENGTH OF CRB               @BCA890E\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFHIRPD": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x91\\x19o\\x00\\x91\\x19o\\x13\\x11\\x02\"\\x02\"\\x00\\x01\\xc5\\xc9\\xd3\\xc5\\xc5\\xd5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1991-07-15T00:00:00", "modifydate": "1991-07-15T13:11:00", "lines": 546, "newlines": 546, "modlines": 1, "user": "EILEEN"}, "text": "         MACRO                                                 @BBDJ10X\n         EFHIRPD  ,                                            @BBDJ10X\n.**********************************************************************\n.*                                                                    *\n.* MACRO NAME = DFHIRPD                                               *\n.*                                                                    *\n.* DESCRIPTIVE NAME = INTER-REGION COMMUNICATION PROGRAM DSECTS       *\n.*                                                                    *\n.*   COPYRIGHT = 5665-403 (C) COPYRIGHT IBM CORP. 1979, 1980          *\n.*               THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"         *\n.*               LICENSED MATERIALS - PROPERTY OF IBM                 *\n.*               REFER TO COPYRIGHT INSTRUCTIONS                      *\n.*               FORM NUMBER G120-2083                                *\n.*                                                                    *\n.* STATUS = 2.1.0                                                     *\n.* CHANGE ACTIVITY :                                                  *\n.*  $MAC(DFHIRPD),COMP(IRC),PROD(CICS/VS)   :                         *\n.*                                                                    *\n.*   PN= REASON REL YYMMDD HDXIII : REMARKS                           *\n.*  $D1= I01597 170 8402   HD0EGA : REWORK DCR                        *\n.*   D2= RESERVED FOR DCR               :                             *\n.*   D3= RESERVED FOR DCR               :                             *\n.*   H1= RESERVED FOR HARDWARE SUPPORT  :                             *\n.*   H2= RESERVED FOR HARDWARE SUPPORT  :                             *\n.*   H3= RESERVED FOR HARDWARE SUPPORT  :                             *\n.*  $L1= J31    160 8204   HD8STC : FIX RECOVERY ERRORS IN IRP        *\n.*  $L2= J41    161 8210   HD0RJS : CROSS MEMORY SUPPORT              *\n.*  $L3= J45    170 8508   HD1MA  : SUPPORT VAE (VSE)                 *\n.*   L4= RESERVED FOR LINE ITEM         :                             *\n.*   L5= RESERVED FOR LINE ITEM         :                             *\n.*   L6= RESERVED FOR LINE ITEM         :                             *\n.*  $P1= M32244,170,860226,HD1MA  : CORRECT ATTACH FOR ICCF           *\n.*   P2= RESERVED FOR PTM               :                             *\n.*   P3= RESERVED FOR PTM               :                             *\n.*                                                                    *\n.**********************************************************************\n.* * *         G L O B A L   D E F I N I T I O N S                * * *\n.**********************************************************************\n         GBLB  &MVS        MVS INDICATOR                       @BBDJ10X\n***********************************************************************\n* * * *                                                         * * * *\n* * * *  THE FOLLOWING DSECTS DEFINE THE CONTROL BLOCKS USED    * * * *\n* * * *  INTERNALLY BY THE INTER-REGION PROGRAM ONLY.  THEY     * * * *\n* * * *  ARE NOT USED BY ANY OTHER PROGRAMS AND THEIR FORMAT    * * * *\n* * * *  IS NOT PART OF ANY EXTERNAL INTERFACE.                 * * * *\n* * * *                                                         * * * *\n* * * *  THE DSECTS INCLUDED  ARE:                              * * * *\n* * * *                                                         * * * *\n* * * *  SCTE     SUBSYSTEM CONTROL TABLE EXTENSION             * * * *\n* * * *  SUDB     SUBSYSTEM USER DEFINITION BLOCK               * * * *\n* * * *  LACB(E)  LOGON ADDRESS CONTROL BLOCK                   * * * *\n* * * *  LCB(E)   LOGON CONTROL BLOCK                           * * * *\n* * * *  CCB      CONNECTION CONTROL BLOCK                      * * * *\n* * * *  CSB      CONNECTION STATUS BLOCK                       * * * *\n* * * *                                                         * * * *\n***********************************************************************\n         SPACE 5                                               @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          SUBSYSTEM CONTROL TABLE EXTENSION                  * * *\n* * *                                                             * * *\n* * *    THE SCTE IS USED BY THE SVC TO CONTROL THE EXISTENCE     * * *\n* * *    OF THE LACB (LOGON ADDRESS CONTROL BLOCK).               * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nSCTE     DSECT                                                 @BBDJ10X\nSCTELACB DS    A              ADRESS OF LACB                   @BBDJ10X\nSCTECNT  DS    F              NUMBER OF 'ASSOCIATED' TCBS      @BBDJ10X\nSCTELXA  DS    A              ADDRESS OF LX ARRAY                  @D1A\nSCTESVCI DS    H              INSTRUCTION TO INVOKE CICS SVC       @D1A\n         DS    H              RESERVED                             @D1A\n* MUST BE A MULTIPLE OF FULLWORDS FOR CORRECT ALIGNMENT OF LX ARRAY\n         SPACE 1                                               @BBDJ10X\nSCTELEN  EQU   *-SCTE         LENGTH OF SCTE ENTRY             @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          LX ARRAY ENTRY                                     * * *\n* * *                                                             * * *\n* * *   EACH ENTRY IN THE LX ARRAY CONSISTS OF AN ADDRESS SPACE   * * *\n* * *   ID AND THE LINKAGE INDEX CURRENTLY RESERVED FOR THAT ASID.* * *\n* * *   THERE IS ONE ENTRY IN THE ARRAY FOR EACH POSSIBLE USER.   * * *\n* * *   THIS ARRAY IS ALLOCATED AT FIRST ASSOCIATE AND IS NEVER   * * *\n* * *   RELEASED. THIS ALLOWS THE LACB TO BE FREED AT THE LAST    * * *\n* * *   LOGOFF BUT THE LX INFORMATION IS RETAINED FOR SUBSEQUENT  * * *\n* * *   LOGONS.                                                   * * *\n* * *    AN ENTRY IS CREATED IN THE ARRAY DURING THE FIRST LOGON  * * *\n* * *   IN ADDRESS SPACE AND THE ENTRY IS REMOVED WHEN THE CROSS  * * *\n* * *   MEMORY RESOURCE OWNER (CMRO) TASK ENDS.                   * * *\n* * *    THE STORAGE FOR THIS ARRAY IS ALLOCATED ADJACENT TO THE  * * *\n* * *   SCTE AND SSVT AND IS ACCESSED VIA THE LACBSCTE POINTER.   * * *\n* * *                                                             * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                            @17879 @L2A\nLXAE     DSECT  ,                                           @17879 @L2A\nLXAEASID DS    H                   ADDRESS SPACE ID         @17879 @L2A\nLXAELX   DS    H                   LINKAGE INDEX VALUE      @17879 @L2A\nLXAELEN  EQU   *-LXAE              ENTRY  LENGTH            @17879 @L2A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          SUBSYSTEM USER DEFINITION CONTROL BLOCK            * * *\n* * *                                                             * * *\n* * *    THE SUDB IS USED BY THE SVC TO REPRESENT THE             * * *\n* * *    CONNECTION BETWEEN A TASK USING THE SVC AND THE          * * *\n* * *    SVC CONTROL BLOCKS.                                      * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nSUDB     DSECT                                                 @BBDJ10X\nSUDBCODE DS    2F          CODE TO LOCATE THE SVC              @BCDJ104\nSUDBSVC  DS    A           ADDRESS OF SVC CODE                 @BCDJ104\nSUDBCHN  DS    A           ADDRESS OF NEXT SUDB                @BM13339\n***          AIF   (NOT &MVS).IRDM040          DELETED BY APAR @BA15793\nSUDBASCB DS    A           ADDRESS OF THE ASCB                 @BBDJ104\n*** .IRDM040 ANOP                          MVS DELETED BY APAR @BA15793\nSUDBSR   DS    F           SRB SCHEDULE RECOVERY DATA. CONTAINS    @D1A\n*                          ..TARGET LG WHILE SRB BEING SCHEDULED\nSUDBLCB  DS    A           ADDRESS OF FIRST OR ONLY LCB        @BBDJ10X\nSUDBUID  DS    D           USER IDENTIFICATION                 @BBDJ10X\n         ORG   SUDBUID                                         @BBDJ104\nSUDBTCB  DS    A           ADDRESS  OF THE TCB                 @BBDJ104\n         DS    H                                               @BBDJ104\nSUDBASID DS    H                   ADDRESS SPACE ID            @BBDJ104\nSUDBTARG DS    A           FOOTPRINT                       @FJ410R @L2C\nSUDBLACB DS    A           ADDRESS OF LACB                     @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nSUDBAWS  DS    A           ADDRESS OF PARAMATER LIST AND       @BM14268\n*                          SAVE AREA STORAGE                          *\n         SPACE 1                                               @BM14268\nSUDBAUDT DS    0CL16       AUDIT FIELDS                        @BBDJ10X\nSUDBARQT DS    F           .. REQUEST TYPE AND MODIFIER        @BBDJ10X\nSUDBALCB DS    A           .. ADDRESS OF LCB                   @BBDJ10X\nSUDBACSB DS    A           .. ADDRESS OF CSB                   @BBDJ10X\nSUDBAFL1 DS    X           .. AUDIT FLAG 1                     @BBDJ10X\nSUDBARCS EQU   X'80'          .. RETURN CODE STORED IN SUDB    @BBDJ10X\n*        EQU   X'40'          ..  SPARE                        @BBDJ10X\nSUDBAPFS EQU   X'20'          .. PROCESS FLAG SET              @BBDJ10X\nSUDBACAQ EQU   X'10'          .. CSB ACQUIRED                  @BBDJ10X\nSUDBAPSI EQU   X'08'          .. THIS IS SECONDARY             @BBDJ10X\nSUDBAFL2 DS    X           .. AUDIT FLAG 2                     @BM14095\nSUDBAEOM EQU   X'80'          .. EOM EXIT ACTIVE (MVS ONLY)        @L3C\n         DS    XL2         .. RESERVED                         @BM14095\nSUDBWKA  DS    0F          START OF WORK AREA                  @BM13546\nSUDBWORK DS    2F          WORK AREA                           @BBDJ10X\nSUDBSAV2 DS    4F          LEVEL 2 SAVE AREA                   @BM14268\nSUDBALN  DS    0D                                              @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nSUDBLEN  EQU   *-SUDB      LENGTH OF SUDB                      @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n***          AIF   (NOT &MVS).IRDM100          DELETED BY APAR @BA15793\n***********************************************************************\n* * *                                                             * * *\n* * *          WORK AREA AT END OF THE SRB USED BY SRB PROCESSING * * *\n* * *     RATHER THAN THE SUDB SAVE AREA.                         * * *\n* * *                                                             * * *\n***********************************************************************\n*** .IRDM100 ANOP                              DELETED BY APAR @BA15793\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          LOGON ADDRESS CONTROL BLOCK                        * * *\n* * *                                                             * * *\n* * *    THE LACB IS USED BY THE INTER-REGION PROGRAM AS AN       * * *\n* * *    INDEX TABLE OF ADDRESSES OF LCBS.  EACH LOGON ADDRESS    * * *\n* * *    CONTROL BLOCK ENTRY (LACBE) REPRESENTS ONE ENTRY IN      * * *\n* * *    THE TABLE.  THE TABLE IS INDEXED BY THE LACBE INDEX      * * *\n* * *    NUMBER WHICH IS STORED IN THE CCB FOR EACH ACTIVE        * * *\n* * *    CONNECTION.                                              * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nLACB     DSECT                                                 @BBDJ10X\nLACBLEN  DS    H           TOTAL LENGTH OF LACB                @BBDJ10X\nLACBNE   DS    H           NUMBER OF LACB ENTRIES              @BBDJ10X\nLACBFTCT DS    F           FOOTPRINT COUNT (NOW UNUSED)            @L3C\nLACBG    DS    F           LACB GENERATION COUNT               @BBDJ10X\nLACBSUDB DS    A           SUDB CHAIN ANCHOR                   @BBDJ10X\nLACBQCA  DS    A           FREE QUICK CELL CHAIN ANCHOR        @BBDJ104\nLACBQSEC DS    F           QUICK CELL SECURITY COUNT FOR CDS           F\n                                                            @EJ318 @L1A\nLACBFREE DS    A           STORAGE BLOCKS FOR FREEING          @BBDJ104\nLACBBUF  DS    A           Large quick cell storage anchor         @L3C\nLACBHDYN DS    F           Highest transfer buffer usage           @L3C\nLACBCDYN DS    F           Current transfer buffer usage           @L3C\n***          AIF   (NOT &MVS).IRLA10           DELETED BY APAR @BA15793\nLACBAXA  DS    F           POINTER TO AX ARRAY             @FJ410R @L2A\n*** .IRLA10  ANOP                              DELETED BY APAR @BA15793\nLACBSCTE DS    A           ADDRESS OF SCTE                     @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nLACBENTY DS    0D          START OF ENTRIES                    @BBDJ104\n         SPACE 3                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            LOGON ADDRESS CONTROL BLOCK ENTRY                    * *\n* *                                                                 * *\n* *      EACH LACBE CONTAINS INFORMATION PERTINENT TO ONE USER      * *\n* *      WHO HAS LOGGED ON.  IT CONTAINS THE USER'S NAME, THE       * *\n* *      ADDRESS OF THE LCB AND THE CONTROLLING FOOTPRINT STRIP.    * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nLACBE    DSECT                                                 @BBDJ10X\nLACBENM  DS    CL8         USERID FOR THIS LOGON               @BBDJ10X\nLACBELG  DS    0F          LACBE INDEX & GENERATION NUMBERS    @BBDJ10X\nLACBEL   DS    H           .. LACBE INDEX NUMBER               @BBDJ10X\nLACBEG   DS    H           .. GENERATION NUMBER                @BBDJ10X\nLACBELCB DS    A           ADDRESS OF LCB                      @BBDJ10X\nLACBEST1 DS    C           STATUS BYTE 1                       @BBDJ10X\n*   FLAGS IN STATUS BYTE 1                                            *\nLACBEPRG EQU   X'20'       A PURGE FOOTPRINT MAY BE SET    @FJ410R @L2A\n*                          A NORMAL FOOTPRINT CANT BE SET\nLACBENPR EQU   X'FF'       NOT PURGEABLE                   @FJ410R @L2A\n*                          NO FOOTPRINTS CAN BE SET        @FJ410R @L2A\n***          AIF   (NOT &MVS).IRDM150   MVS ON DELETED BY APAR @BA15793\nLACBEASD DS    H           ASID FOR CROSS MEMORY USER      @FJ410R @L2A\n*** .IRDM150 ANOP                       MVS ON DELETED BY APAR @BA15793\n         DS    0F                                          @FJ410R @L2C\n         SPACE 1                                               @BBDJ10X\nLACBELEN EQU   *-LACBE     LENGTH OF LACB ENTRY                @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n***          AIF   (NOT &MVS).IRDM160   MVS ON DELETED BY APAR @BA15793\n***********************************************************************\n* *                                                                 * *\n* *                     AX ARRAY                                    * *\n* *                                                                 * *\n* *      EACH ENTRY IN THE AX ARRAY IS EITHER ZERO OR CONTAINS      * *\n* *      A VALID AX VALUE. AN AX IS ADDED TO THE ARRAY USING CS.    * *\n* *      THE AX VALUE IS REFERRED TO BY ITS INDEX INTO THE ARRAY.   * *\n* *      THE INDEX IS SAVED IN THE LCB FOR EACH LOGON AND ALSO IN   * *\n* *      THE TARGET CCB FOR EACH CONNECTION.                        * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                           @FJ410R @L2A\nAXAE     DSECT  ,                                          @FJ410R @L2A\nAXAEVAL  DS    H           VALUE OF THE AX                 @FJ410R @L2C\n         SPACE 1                                           @FJ410R @L2A\nAXAELEN  EQU   *-AXAE      LENGTH OF THE AXAE              @FJ410R @L2A\n         SPACE 2                                           @FJ410R @L2A\n*** .IRDM160 ANOP                       MVS ON DELETED BY APAR @BA15793\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          LOGON CONTROL BLOCK.                               * * *\n* * *                                                             * * *\n* * *    THE LCB IS THE SOURCE OF ALL INFORMATION RELEVANT TO A   * * *\n* * *    PARTICULAR LOGON TO THE SVC; THE SUBSYSTEM LOGON CONTROL * * *\n* * *    BLOCK REFLECTS CERTAIN OF THE LCB INFORMATION WHICH IT   * * *\n* * *    IS RELEVANT FOR THE SUBSYSTEM LEVEL OF INTER-REGION      * * *\n* * *    COMMUNICATION FUNCTION TO SEE.  FOR THIS REASON THE      * * *\n* * *    STATUS BYTES IN THE LCB AND THE SLCB ARE IDENTICAL;      * * *\n* * *    FLAGS IN THOSE STATUS BYTES ARE DEFINED WITH THE         * * *\n* * *    DEFINITION OF THE SLCB IN THE DFHIRSDS COPY BOOK.        * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nLCB      DSECT                                                 @BBDJ10X\nLCBUSID  DS    0F          USER IDENTIFICATION                 @BBDJ10X\nLCBUSNUM DS    H           .. USER NUMBER                      @BBDJ10X\nLCBUSRID DS    H           .. USER IDENTIFIER                  @BBDJ10X\nLCBSLCBA DS    A           ADDRESS OF SLCB                     @BBDJ10X\nLCBSUDB  DS    A           ADDRESS OF SUDB                     @BBDJ10X\nLCBCCB   DS    A           ADDRESS OF THE FIRST CCB            @BBDJ10X\nLCBCHAIN DS    A           ADDRESS OF NEXT LCB FOR THIS SUDB   @BBDJ10X\nLCBLACBE DS    A           ADDRESS OF LACBE                    @BBDJ10X\nLCBSVCSZ DS    F           SVC STORAGE SIZE (FOR FREE)         @BBDJ10X\nLCBSUBSZ DS    F           SUBSYSTEM STGE SIZE (FOR FREE)      @BBDJ10X\nLCBTHTOT DS    H           TOTAL NUMBER OF THREADS             @BBDJ10X\nLCBSYTOT DS    H           TOTAL NUMBER OF CONNECTABLE SYSTEMS @BBDJ10X\nLCBQICT  DS    F           QUIESCE CONNECTION COUNT            @BBDJ10X\nLCBLECB  DS    F           LOGON ECB  - NO LONGER USED ?           @L3C\nLCBIECB  DS    F           LINK, 'DESTROY CAN PROCEED' AND             C\n                            LOGOFF SRB ECB (SVC INTERNAL ECB)  @BBDJ104\nLCBSLSP  DS    0D          OPERAND FOR CDS INSTRUCTION             @D1A\nLCBSLOCK DS    0F          SRB LOCK USED TO SERIALIZE THE USE OF   @D1A\n*                          ..THE SRB BLOCK BY SCHEDULE AND\n*                          ..PROCESSING OF SRB PARAMETER BLOCK\n*                          ..WORK QUEUE BY THE SRB PROCESSOR\nLCBSLOI  DS    H           POSSIBLE VALUES ARE:                    @D1A\nLCBSLOIF EQU   X'8000'     LOCK NOT HELD                           @D1A\n*                          LACBE INDEX = A TCB HAS SCHEDULED SRB\n*                          ..AND SET ITS LACBE INDEX IN THE LOCK\n*                          ZERO        = SRB HOLDS LOCK\nLCBSLOC  DS    H           COUNTER INCREMENTED EACH TIME A TCB     @D1A\n*                          ..PLACES LACBE INDEX IN LOCK\nLCBSRBP  DS    F           SRB PARAMETER CHAIN                 @BBDJ104\n***          AIF   (NOT &MVS).LCB200       MVS DELETED BY APAR @BA15793\nLCBSRB   DS    F           ADDR OF OUR SRB                     @BBDJ104\nLCBSRBWA DS    F           ADDR OF OUR SRB'S WORK AREA             @D1A\nLCBFRRPM DS    F           ADDRESS OF FRR PARAMETER AREA (UNUSED)  @L3C\nLCBUCA   DS    F           ADDRESS OF USE COUNT ARRAY      @FJ410R @L2A\nLCBRMTR  DS    H           RESOURCE MANAGER TERMINATION ROUTINE        C\n                           FOR PURGE OF SRBS                       @D1A\nLCBAXI   DS    H           OFFSET OF AX IN AX ARRAY        @FJ410R @L2A\n         DS    F           RESERVED                            @BCDJ10X\n*** .LCB200  ANOP                          MVS DELETED BY APAR @BA15793\nLCBSTTUS DS    0F          STATUS BYTES                        @BBDJ10X\nLCBSTTS1 DS    C           .. STATUS BYTE 1                    @BBDJ10X\nLCBSTTS2 DS    C           .. STATUS BYTE 2                    @BBDJ10X\nLCBSTTS3 DS    C           .. STATUS BYTE 3                    @BBDJ10X\nLCBSTTS4 DS    C           .. STATUS BYTE 4                    @BBDJ10X\n         SPACE 1                                               @BA16947\nLCBBTCHV DS    F           Batching value                      @BA16947\nLCBBTCHC DS    F           Current batch count                 @BA16947\n         DS    0D                                              @BBDJ104\n         SPACE 1                                               @BBDJ10X\nLCBLNGTH EQU   *-LCB       LENGTH OF LCB                       @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nLCBENTY  DS    0F          START OF LCB LOGON BLOCK ENTRIES    @BBDJ10X\n         SPACE 5                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            LOGON CONTROL BLOCK ENTRY                            * *\n* *                                                                 * *\n* *      THE LOGON CONTROL BLOCK CONTAINS AN ENTRY (LCBE) FOR       * *\n* *      EACH SYSTEM TO WHICH CONNECTIONS MAY BE MADE, I.E. ONE     * *\n* *      FOR EACH ENTRY IN THE LOGON CONNECTIONS LIST SPECIFIED     * *\n* *      WHEN THE USER LOGGED ON.                                   * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nLCBE     DSECT                                                 @BBDJ10X\nLCBENAM  DS    CL8         NAME OF CONNECTED TO SYSTEM         @BBDJ10X\nLCBEUSID DS    CL8         ACCEPTABLE USER ID (SECURITY)       @BBDJ104\nLCBEADD  DS    A           ADDRESS OF 1ST CCB FOR THIS SYSTEM  @BBDJ10X\nLCBENUM  DS    0F          NUMBERS OF CCBS FOR SYSTEM          @BBDJ10X\nLCBESNUM DS    H           NUMBER OF SECONDARY CCBS FOR SYSTEM @BBDJ10X\nLCBEPNUM DS    H           NUMBER OF PRIMARY CCBS FOR SYSTEM   @BBDJ10X\nLCBEFLG  DS    X           FLAG BYTE                           @BBDJ10X\nLCBESECN EQU   X'80'       .. ACCEPTABLE USER ID SPECIFIED     @BBDJ10X\nLCBEXMOK EQU   X'40'       .. XM ACCEPTABLE FOR THIS CNECTION          F\n                              MVS ONLY                             @L3C\n         SPACE 1                                               @BBDJ10X\n         DS    7X                  alignment for subsequent blocks @L3A\nLCBELEN  EQU   *-LCBE                                          @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          CONNECTION CONTROL BLOCK                           * * *\n* * *                                                             * * *\n* * *    THE CCB IS THE REPOSITORY OF ALL INFORMATION RELEVANT    * * *\n* * *    TO A PARTICULAR CONNECTION FROM THIS SUBSYSTEM.          * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nCCB      DSECT                                                 @BBDJ10X\nCCBOWNER DS    0D          OWNERSHIP FIELDS                        @D1A\nCCBLG    DS    0F          OTHER SIDE'S LACBE NO. & GENERATION @BBDJ10X\nCCBL     DS    H           .. OTHER SIDE LACBE INDEX NUMBER    @BBDJ10X\nCCBG     DS    H           .. OTHER SIDE GENERATION NUMBER     @BBDJ10X\nCCBCSB   DS    A           ADDRESS OF CONNECTED-TO CSB         @BBDJ10X\nCCBTHID  DS    0F          THREAD IDENTIFICATION               @BBDJ10X\nCCBTHNUM DS    H           .. THREAD NUMBER                    @BBDJ10X\nCCBTHRID DS    H           .. THREAD IDENTIFIER                @BBDJ10X\nCCBSCCBA DS    A           ADDRESS OF SCCB                     @BBDJ10X\nCCBLCBAD DS    A           ADDRESS OF LCB FOR THIS LOGON       @BBDJ10X\n         DS    F           RESERVED                                @L3C\nCCBDATA  DS    A           DATA BUFFER ADDRESS                     @L3C\nCCBSTATS DS    B           STATUS BYTES                        @BBDJ10X\nCCBPRIM    EQU   X'80'     .. PRIMARY CCB INDICATOR            @BBDJ10X\nCCBLOFC    EQU   X'40'     .. LAST CCB                         @BBDJ10X\nCCBLOFS    EQU   X'20'     .. LAST CCB FOR A SYSTEM            @BBDJ10X\n         DS    XL3         RESERVED                            @BBDJ10X\n***          AIF   (NOT &MVS).IRDM200     MVS  DELETED BY APAR @BA15793\n         ORG   CCBSTATS+L'CCBSTATS                         @FJ410R @L2A\nCCBAXIST DS    0F          AX INDEX AND STATUS FLAGS       @FJ410R @L2A\nCCBAXI   DS    H           INDEX OF AX VALUE IN USE FOR THIS           F\n                           CONNECTION                      @FJ410R @L2A\nCCBAXST  DS    H           STATUS FLAGS FOR COMPARE AND SWAP           F\n                                                           @FJ410R @L2A\n* FLAGS IN BYTE ONE OF STATUS\nCCBAXCNT EQU   X'80'       AX INCLUDED IN USE COUNT        @FJ410R @L2A\n         ORG   ,                                           @FJ410R @L2A\n*** .IRDM200 ANOP                         MVS  DELETED BY APAR @BA15793\n         SPACE 1                                               @BBDJ10X\n         DS    0D          ALIGNMENT                           @BBDJ10X\nCCBLNGTH EQU   *-CCB       LENGTH OF CCB                       @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *          CONNECTION STATUS BLOCK                            * * *\n* * *                                                             * * *\n* * *    THE CSB DESCRIBES THE CURRENT STATUS OF A PARTICULAR     * * *\n* * *    CONNECTION BETWEEN TWO SYSTEMS.                          * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\nCSB      DSECT                                                 @BBDJ10X\nCSBCHAIN DS    0A          ADDRESS OF NEXT AVAILABLE CSB       @BBDJ10X\nCSBCCB   DS    0D          ADDRESSES OF CCBS                   @BBDJ10X\nCSBPRIM  DS    A           .. ADDRESS OF PRIMARY CCB           @BBDJ10X\nCSBSECD  DS    A           .. ADDRESS OF SECONDARY CCB         @BBDJ10X\nCSBSTAT  DS    0D          CSB STATUS FLAGS                    @BBDJ10X\nCSBPFLAG DS    BL4         .. PRIMARY FLAG BYTES               @BBDJ10X\nCSBSFLAG DS    BL4         .. SECONDARY FLAG BYTES             @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nCSBLEN   EQU   *-CSB       LENGTH OF CSB                       @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *            CONNECTION STATUS BLOCK FLAG DEFINITIONS             * *\n* *                                                                 * *\n* *      THE CONNECTION STATUS BLOCK (CSB) CONTAINS TWO WORDS OF    * *\n* *      FLAG BITS.  THE FIRST WORD REFERS TO THE PRIMARY SIDE OF   * *\n* *      THE CONNECTION AND THE SECOND TO THE SECONDARY SIDE.       * *\n* *      FLAGS ARE DEFINED IDENTICALLY IN THE TWO WORDS WITH THE    * *\n* *      EXCEPTION OF THE FLAGS IN THE FIRST BYTE WHICH ARE USED    * *\n* *      ONLY IN THE SECONDARY WORD.                                * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE ONE (SECONDARY SIDE ONLY)                      *\nCSBSCNG  EQU   X'80'       SECONDARY IS CONNECTING             @BBDJ10X\nCSBSCND  EQU   X'40'       LINK IS CONNECTED                   @BBDJ10X\nCSBXMCNG EQU   X'20'       CROSS MEMORY CONNECT IN PROGRESS        @D1A\nCSBATREQ EQU   X'10'       ATSET REQUIRED BY SRB                   @D1C\nCSBATINP EQU   X'08'       ATSET IN PROGRESS                       @D1C\nCSBATNCM EQU   X'04'       ATSET NOT YET COMPLETED BY SRB  @FJ410R @L2A\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE TWO - STATUS FLAGS                             *\nCSBXDED  EQU   X'80'       THIS SIDE HAS DISCONNECTED          @BBDJ10X\nCSBXINQ  EQU   X'40'       THIS SIDE IS IN QUIESCE             @BBDJ10X\nCSBXWAIT EQU   X'04'       THIS SIDE IS WAITING                @BBDJ10X\nCSBXPP   EQU   X'02'       THIS SIDE HAS A PULL PENDING        @BBDJ10X\nCSBXIC   EQU   X'01'       CONTROL IS ON THIS SIDE             @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   FLAGS IN FLAG BYTE THREE - PROGRESS FLAGS                         *\nCSBXDING EQU   X'80'       THIS SIDE IS DISCONNECTING          @BBDJ10X\nCSBXSWIT EQU   X'40'       THIS SIDE IS SWITCHING              @BBDJ10X\nCSBXPULL EQU   X'20'       THIS SIDE IS PULLING                @BBDJ10X\nCSBXNQ   EQU   X'10'       THIS SIDE IS NQING                  @BBDJ10X\nCSBXIQ   EQU   X'08'       THIS SIDE IS IQING                  @BBDJ10X\nCSBXCLER EQU   X'04'       THIS SIDE IS CLEARING               @BBDJ10X\n         DFHEJECT                                              @BCDJ104\n***********************************************************************\n* *                                                                 * *\n* *            LADDER ENTRY DESCRIPTOR                              * *\n* *                                                                 * *\n* *      THE LADDER IS USED TO RECORD THE STORAGE BLOCKS IN USE AS  * *\n* *      DATA TRANSFER BUFFERS.                                     * *\n* *      A BLOCK OF STORAGE IS OBTAINED, FORMATTED INTO A NUMBER    * *\n* *      OF 'LARGE QUICK CELLS' AND THE BLOCK IS KEPT TRACK OF IN   * *\n* *      A LADDER.                                                  * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 2                                               @BCDJ104\nLQBD     DSECT                     Large quickcell block descriptor    F\n                                                                   @D1A\nLQCBLEN  EQU   4096                Size of large quick cell block  @D1A\nLQCCLEN  EQU   512                 Size of each large quick cell   @D1A\nLQBDESCR DS    D                   Field for CDS instruction       @D1A\n         ORG   LQBDESCR                                            @D1A\nLQBDSTGE DS    A                   Address of block containing cells   F\n                                                                   @D1A\n         DS    F                   Allocation bit map (1 => free cell) F\n                                                                   @D1A\n         ORG  ,                                                    @D1A\nLQBDLEN  EQU   *-LQBD                                              @D1A\nLQBDSHFT EQU   3*(1+2*(LQBDLEN-8)*(8-LQBDLEN)) Use causes assembly     X\n                                   errors unless LQBDLEN = 8       @D1A\nLQBDDUPF EQU   1+2*(LQCBLEN/LQCCLEN-8)*(8-LQCBLEN/LQCCLEN) Use causes  X\n                                   assembly errors unless number of    X\n                                   quickcells in block is 8        @D1A\n         SPACE 2                                                   @D1A\n***********************************************************************\n* *                                                                 * *\n* *            LARGE QUICK CELL HEADER                              * *\n* *                                                                 * *\n* *      EACH LARGE QUICK CELL HAS A HEADER, WHICH INCLUDES         * *\n* *      THE INDEX OF THE LADDER ENTRY FOR THE BLOCK CONTAINING     * *\n* *      THE CELL, AND A POINTER TO THE NEXT CELL IN THE CHAIN      * *\n* *      OF LARGE QUICK CELLS (ANCHORED IN FIELD CCBDATA IN THE     * *\n* *      TARGET SYSTEM'S CCB) OR ZERO.                              * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 2                                               @BM14268\nLQCELL   DSECT                                                 @BM14268\nLQCINDEX DS    F           Index of ladder entry for this cell     @D1C\nLQNCELL  DS    A           Next cell in chain                      @L3C\nLQCLENG  DS    F           Length of data in transfer buffer   @BM14268\nLQCHEND  DS    0F                                              @BM14268\nLQCHLEN  EQU   LQCHEND-LQCELL      Cell header length          @BM14268\nLQCALEN  EQU   LQCCLEN-LQCHLEN     Cell data area length           @D1A\n         DFHEJECT  ,                                               @L3A\n***********************************************************************\n* *                                                                 * *\n* *            WORK AREA                                            * *\n* *                                                                 * *\n* *      A WORK AREA IS ACQUIRED AT ASSOCIATE TIME TO BE USED FOR   * *\n* *      THE STORAGE OF REGISTERS FOR SUBROUTINE CALLS.             * *\n* *      ONCE A SUDB IS OBTAINED ITS ADDRESS IS SAVE IN THE SUDB.   * *\n* *      THE PARAMETER BLOCK TO THE SVC IS COPIED INTO THE HEAD OF  * *\n* *      THIS SAVE AREA AND REGISTER 13( SAVE AREA ADDRESS OR       * *\n* *      RETURN ADDRESS - OS)  IT IS RELEASED AT DISSOCIATE TIME,   * *\n* *      OR IF THE ASSOCIATE FAILS.                                 * *\n***********************************************************************\n         SPACE 2                                               @BM14268\n* *      IT IS RELEASED IN TIDY, OR IF THE LOGON FAILS              * *\n***********************************************************************\n* * *                                                             * * *\n* * *          USE COUNT ARRAY                                    * * *\n* * *                                                             * * *\n* * *   THE PREFIX TO THE ARRAY CONTAINS THE LINKAGE INDEX        * * *\n* * *   AND ENTRY TABLE TOKEN.                                    * * *\n* * *   THE USE COUNT ARRAY CONTAINS A RECORD OF THE NUMBER OF    * * *\n* * *   ACTIVE CONNECTIONS USING A PARTICULAR AX VALUE            * * *\n* * *     SINCE A USE COUNT INDEX OF ZERO IS REGARDED AS INVALID  * * *\n* * *   THE USE COUNT ARRAY BEGINS WITH THE ENTRY FOR INDEX = 2.  * * *\n* * *   TO ALLOW THE INDEX TO BE USED DIRECTLY THE VALUE UCAPRELN * * *\n* * *   IS SET TO THE LENGTH OF THE PREFIX - 2.                   * * *\n* * *   THE TRUE PREFIX LENGTH IS GIVEN BY THE VALUE UCATPREL.    * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                           @FJ410R @L2A\nUCA      DSECT  ,                                          @FJ410R @L2A\nUCALENTH DS    H              TOTAL LENGTH OF USE COUNT    @FJ410R @L2A\n*                             ARRAY FOR FORMATTED DUMP\nUCASTAT  DS    C                   STATUS FLAGS            @FJ410R @L2A\n*\nUCATRSWP EQU   X'80'               SYSEVENT TRANSWAP WAS SUCCESSFUL    F\n                                                           @FJ410R @L2A\nUCAOLDAX DS    H                   OLD AX VALUE            @FJ410R @L2A\nUCAAX    DS    H                   CURRENT AX VALUE        @FJ410R @L2A\nUCAETTK  DS    F                   ENTRY TABLE TOKEN       @FJ410R @L2A\nUCAPREND DS    0F                                          @FJ410R @L2A\nUCAPRELN EQU   UCAPREND-UCA-2      PREFIX LENGTH FOR INDEX  TO UCAE    F\n                                                           @FJ410R @L2A\nUCATPREL EQU   UCAPREND-UCA        TRUE PREFIX LENGTH      @FJ410R @L2A\n         SPACE 5                                           @FJ410R @L2A\n***********************************************************************\n* * *                                                             * * *\n* * *          USE COUNT ARRAY ENTRY                              * * *\n* * *                                                             * * *\n* * *   EACH ENTRY IN THE USE COUNT ARRAY CONSISTS OF THE NUMBER  * * *\n* * *   OF ACTIVE CONNECTIONS USING THE AX VALUE AT THE SAME      * * *\n* * *   OFFSET IN THE AX ARRAY.                                   * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                           @FJ410R @L2A\nUCAE     DSECT  ,                                          @FJ410R @L2A\nUCAECNT  DS    H                   USE COUNT               @FJ410R @L2A\nUCAELEN  EQU   *-UCAE              ENTRY  LENGTH           @FJ410R @L2A\n         MEND                                                  @BBDJ10X\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFHIRSDS": {"ttr": 1537, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n*    COPYRIGHT = 5665-403 (C) COPYRIGHT IBM CORP. 1975                *\n*                THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"         *\n*                LICENSED MATERIALS - PROPERTY OF IBM                 *\n*                REFER TO COPYRIGHT INSTRUCTIONS                      *\n*                FORM NUMBER G120-2083                                *\n***********************************************************************\n*                                                                     *\n*              DFHIRSDS COPY BOOK                                     *\n*                                                                     *\n*              THIS COPY BOOK CONTAINS THE DESCRIPTIONS OF ALL        *\n*        INTER-REGION COMMUNICATION CONTROL BLOCKS WHICH ARE          *\n*        VISIBLE TO THE SUBSYSTEM LEVEL OF INTER-REGION               *\n*        COMMUNICATION.                                               *\n*                                                                     *\n*        $SEG(DFHIRSDS),COMP(IRC),PROD(CICS/VS):                      *\n*        $L1= 600,160,8010,HD8STC:      CICS/DOS 1.6 BASE FIXES       *\n*        $L2= J31 160 8204 HD8STC :  FIX IRP BUGS IN RECOVER          *\n*        $L3= J41 161 8210 HDXDRP :  CROSS MEMORY SUPPORT             *\n*        $L4= J45 170 8508 HD2FAGW:  MRO/VAE SUPPORT                  *\n*        $P1= M31977 170 8601 HD1MA : RE-INSTATE EQU FOR LCLFLGXM     *\n*        $P2= M32244 170 8602 HD1MA : ERROR CODE FOR GETVIS FAILURE   *\n*        $P3= M40759 175 8612 HDEDJZ: DEFINE LOGON PLIST FLAGS,VERSION*\n*        $P4= M41589 212 900831 HD6KRAH: DATA AREAS TIDY UP           *\n*         P5= RESERVED FOR PTM                                        *\n*         P6= RESERVED FOR PTM                                        *\n*         P7= RESERVED FOR PTM                                        *\n*        $D1= I01597 170 840223 HD0RJS : REWORK DCR                   *\n*        $01= A05567 160 8201    HD8STC: APAR MODIFICATION            *\n*                                                                     *\n*              THE CONTROL BLOCKS DEFINED IN THIS COPY BOOK           *\n*        ARE:                                                         *\n*                                                                     *\n*        SLCB     SUBSYSTEM LOGON CONTROL BLOCK                       *\n*        SCCB     SUBSYSTEM CONNECTION CONTROL BLOCK                  *\n*        SCACB(E) SUBSYSTEM CONNECTION ADDRESS CONTROL BLOCK          *\n*                                                                     *\n         DFHEJECT                                              @BBDJ104\n*                                                                     *\n*              SUBSYSTEM LOGON CONTROL BLOCK                          *\n*                                                                     *\n*              THIS DSECT DESCRIBES THE FORMAT OF THE SLCB WHICH      *\n*        IS THE CONTROL BLOCK THAT CONTAINS THE INFORMATION           *\n*        RELEVANT TO THE LOGON SESSION WHICH IS OF INTEREST TO THE    *\n*        SUBSYSTEM LEVEL OF INTER-REGION COMMUNICATION.               *\n*                                                                     *\n         SPACE 5                                               @BBDJ104\n*                                                                     *\n*              FIRST DEFINE THE FORMAT OF THE FIELDS IN THE SLCB.     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\nSLCB     DSECT                                                 @BCA890E\nSLCBLECB DS    F           LOGON (MASTER) ECB                  @BCA890E\nSLCBSCAC DS    F           SCACB ADDRESS                       @BCA890E\nSLCBSTTS DS    0F          STATUS BYTES                        @BCA890E\nSLCBSTS1 DS    C           .. STATUS BYTE 1                    @BCA890E\nSLCBSTS2 DS    C           .. STATUS BYTE 2                    @BCA890E\nSLCBSTS3 DS    C           .. STATUS BYTE 3                    @BCA890E\nSLCBSTS4 DS    C           .. STATUS BYTE 4                    @BCA890E\nSLCBLCB  DS    A           ADDRESS OF LCB                      @BBDJ10X\n         SPACE 1                                               @BDDJ104\nSLCBALGN DS    0F                                              @BDDJ104\nSLCBLENG EQU   *-SLCB      LENGTH OF SLCB                      @BCA890E\n         SPACE 5                                               @BCA890E\n*                                                                     *\n*              THIS PART OF THE DSECT DESCRIBES THE FLAGS IN THE      *\n*        LCB AND SLCB STATUS BYTES. THESE FLAGS ARE COMMON TO THE     *\n*        TWO CONTROL BLOCKS (UNLESS OTHERWISE STATED) AND ARE  @BA16947\n*        THEREFORE ONLY DEFINED HERE                           @BA16947\n*                                                                     *\n*                                                                     *\n*        FLAGS IN STATUS BYTE 1: LCBSTTS1 OR SLCBSTS1                 *\n*                                                                     *\nLCBFQUIP EQU   X'40'       NORMAL QUIESCE IN PROGRESS          @BCA890E\nLCBFQUIM EQU   X'20'       IMMEDIATE QUIESCE REQUESTED         @BCA890E\n*              X'10'       RESERVED                            @BA16947\nLCBFBTCH EQU   X'08'       (LCB ONLY) BATCHING OF OPSYS POST   @BA16947\n*                                                                     *\n*        FLAGS IN STATUS BYTE 2: LCBSTTS2 OR SLCBSTS2                 *\n*                                                                     *\nLCBFNWCN EQU   X'80'       NEW CONNECTER: SCAN ECBS            @BM14056\nLCBFQUCM EQU   X'40'       QUIESCE COMPLETE                    @BCA890E\nLCBFSWFS EQU   X'20'       SWITCH FIRST RECEIVED               @BBDJ104\nLCBFDSCR EQU   X'10'       DISCONNECT RECEIVED                 @BBDJ104\n*                                                                     *\n*        FLAGS IN STATUS BYTE 4: LCBSTTS4 OR SLCBSTS2                 *\n*                                                                     *\nLCBSRBSE EQU   X'80'       SERIALIZATION WITH WORK QUEUE PROCESSOR @L4C\n         SPACE 2                                               @BDDJ104\n         DFHEJECT                                              @BCA890E\n*                                                                     *\n*              SUBSYSTEM CONNECTION CONTROL BLOCK                     *\n*                                                                     *\n*              THIS DSECT DEFINES THE SCCB, THE CONTROL BLOCK         *\n*        WHICH CONTAINS THAT INFORMATION ABOUT A PARTICULAR           *\n*        CONNECTION WHICH CAN BE ACCESSED BY THE SUBSYSTEM            *\n*        LEVEL OF INTERREGION COMMUNICATION FUNCTION                  *\n*                                                                     *\n         SPACE 5                                               @BCA890E\n*                                                                     *\n*              FIRST DEFINE THE FORMAT OF THE FIELDS IN THE SCCB\n*                                                                     *\n*                                                                     *\n*                                                                     *\nSCCB     DSECT                                                 @BCA890E\nSCCBDECB DS    F           DEPENDENT ECB                       @BCA890E\nSCCBTHNM DS    F           THREAD NUMBER                       @BCA890E\nSCCBTHID DS    F           THREAD IDENTIFICATION               @BCA890E\nIRXMTHRD EQU   X'80'       .. CROSS MEMORY THREAD ID       @FJ410R @L3A\nSCCBSTAT DS    0F          STATUS BYTES                        @BCA890E\nSCCBSTS1 DS    C           .. STATUS BYTE 1                    @BCA890E\nSCCBSTS2 DS    C           .. STATUS BYTE 2                    @BCA890E\nSCCBSTS3 DS    C           .. STATUS BYTE 3                    @BCA890E\nSCCBSTS4 DS    C           .. STATUS BYTE 4                    @BCA890E\nSCCBDLTH DS    F           TOTAL LENGTH OF DATA PASSED         @BBDJ104\nSCCBSLTH DS    F           TARGET AREA LENGTH                  @BBDJ104\nSCCBAREA DS    A           TARGET AREA ADDRESS                 @BBDJ104\nSCCBCNAM DS    CL8         CONNECTER LOGON NAME                @BM14056\nSCCBUSER DS    F           USER FIELD                          @BBDJ104\nSCCBSEC  DS    CL8         SECURITY USER FIELD                 @BBDJ104\n         SPACE 1                                               @BDDJ104\nSCCBALGN DS    0F                                              @BDDJ104\nSCCBLENG EQU   *-SCCB      LENGTH OF SCCB                      @BCA890E\n         SPACE 5                                               @BCA890E\n*                                                                     *\n*              THIS PART OF THE DSECT DEFINES THE FLAGS IN THE        *\n*              SCCB STATUS BYTES                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              FLAGS IN STATUS BYTE 1: SCCBSTS1                       *\n*                                                                     *\nCCBFNWCN EQU   X'80'       NEW CONNECTER                       @BM14056\nCCBFCNTR EQU   X'40'       CONTROL NOW ON THIS SIDE            @BCA890E\nCCBFSWDT EQU   X'20'       DATA PASSED WITH SWITCH             @BCA890E\nCCBFSWFS EQU   X'10'       SWITCH FIRST RECEIVED               @BBDJ104\nCCBFDTNF EQU   X'08'       DATA DOESN'T FIT                    @BBDJ104\nCCBFDWP  EQU   X'04'       DISCONNECT WHEN POSSIBLE            @BBDJ104\nCCBFSWIT EQU   X'02'       INVALID TARGET FOR SWITCH           @BCDJ10X\nCCBFUNEX EQU   X'02'       UNEXPECTED FAILURE IN SRB/SUBTASK       @L4C\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*              FLAGS IN STATUS BYTE 2: SCCBSTS2                       *\n*                                                                     *\nCCBFTERM EQU   X'80'       OTHER SIDE TERMINATED NORMALLY      @BCA890E\nCCBFABTM EQU   X'40'       OTHER SIDE TERMINATED ABNMLY        @BCA890E\nCCBFABTQ EQU   X'20'       ABNORMAL TERMINATION DUE TO QUIESCE @BBDJ104\n         SPACE 2                                               @BDDJ104\n         DFHEJECT                                              @BCA890E\n*                                                                     *\n*              SUBSYSTEM CONNECTION ADDRESS CONTROL BLOCK             *\n*                                                                     *\n*              THESE DSECTS DEFINE THE FORMAT OF THE SCACB            *\n*        AND ITS ENTRIES. THE SCACB IS USED BY THE SUBSYSTEM          *\n*        LEVEL OF INTERREGION COMMUNICATION FUNCTION TO OBTAIN        *\n*        THE ADDRESSES OF THE SCCB'S REPRESENTING ITS CONNECTIONS     *\n*                                                                     *\n         SPACE 5                                               @BCA890E\nSCACB    DSECT                                                 @BCA890E\nSCACBNUM DS    F           NUMBER OF ENTRIES IN SCACB          @BCA890E\nSCACBENT DS    0F          START OF ENTRIES                    @BCA890E\nSCACBEND DS    F           END MARKER = X'FFFFFFFF'            @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nSCACBLEN EQU   *-SCACB     BASIC SCACB LENGTH                  @BBDJ10X\n         SPACE 5                                               @BCA890E\nSCACBE   DSECT                                                 @BCA890E\nSCACBEAD DS    F           ADDRESS OF SCCB                     @BCA890E\n         SPACE 1                                               @BDDJ104\nSCACBELN EQU   *-SCACBE    LENGTH OF SCACB ENTRY               @BCA890E\n         SPACE 2                                               @BDDJ104\n         DFHEJECT                                              @BCA890E\n*                                                                     *\n*             LOGON CONNECTIONS LIST                                  *\n*                                                                     *\n*        LOGON CONNECTIONS LIST DSECT. THIS LIST IS PASSED            *\n*        TO LOGON BY THE REQUESTER, AND IT DESCRIBES THE              *\n*        SYSTEMS TO WHICH THIS LOGGER-ON CAN BE CONNECTED             *\n         SPACE ,                                               @BBDJ104\nLCL      DSECT                                                 @BBDJ104\nLCLNAME  DS    CL8         NAME OF CONNECTED SYSTEM            @BBDJ104\nLCLUSRID DS    CL8         ACCEPTABLE USERID (SECURITY)        @BBDJ104\nLCLSECNO DS    H           NUMBER OF SECONDARIES FOR           @BBDJ104\n*                            CONNECTIONS TO GIVEN SYSTEM       @BDDJ104\nLCLPRMNO DS    H           NUMBER OF PRIMARIES FOR             @BBDJ104\n*                            CONNECTIONS TO GIVEN SYSTEM       @BDDJ104\n         SPACE 2                                               @BBDJ104\nLCLFLG   DS    B           FLAG BYTE                           @BBDJ104\nLCLFLGLS EQU   X'80'       LAST ELEMENT IN LIST                @BBDJ104\nLCLFLGCN EQU   X'40'       CONNECTIONS TO THIS SYSTEM          @BBDJ104\n*                            ARE INITIALLY 'IN SERVICE'        @BDDJ104\nLCLFLGXM EQU   X'10'       CROSS-MEMORY ACCEPTABLE (MVS)\n         SPACE ,                                               @BBDJ104\n         DS    X           RESERVED                            @BBDJ104\n         SPACE ,                                               @BBDJ104\nLCLLENG  EQU   *-LCL       CONNECTION LIST ELEMENT LENGTH      @BBDJ104\n         SPACE 2                                               @BDDJ104\n         DFHEJECT                                              @BBDJ104\n***********************************************************************\n* * *                                                             * * *\n* * *    THE FOLLOWING DSECTS DEFINE THE FORMAT OF THE ARGUMENT   * * *\n* * *    LISTS USED WHEN INVOKING THE INTERREGION PROGRAM         * * *\n* * *                                                             * * *\n* * *    THERE ARE TWO DSECTS: THE SVC ARGUMENT LIST DSECT AND    * * *\n* * *    THE FUNCTION ARGUMENT DSECT                              * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *      THE SVC ARGUMENT LIST COMPRISES A LIST OF ADDRESSES,       * *\n* *      EACH OF WHICH IS THE ADDRESS OF A FUNCTION ARGUMENT LIST   * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nIRSVCADS DSECT                                                 @BBDJ10X\nIRVCAARG DS    F           ADDRESS OF FUNCTION ARGUMENT LIST   @BBDJ10X\n         SPACE 5                                               @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *      THE FUNCTION ARGUMENT LIST, ADDRESSED FROM THE SVC         * *\n* *      ARGUMENT LIST, CONTAINS DIFFERENT ARGUMENTS ACCORDING TO   * *\n* *      THE FUNCTION BEING REQUESTED.  THE FIRST SIX ARGUMENTS     * *\n* *      IDENTIFY THE FUNCTION REQUIRED, THE FUNCTION               * *\n* *      MODIFIER (FOR SWITCH, DISCONNECT OR QUIESCE), THE USER     * *\n* *      NUMBER AND IDENTIFICATION AND THE THREAD NUMBER AND        * *\n* *      IDENTIFICATION (WHERE REQUIRED).  THE REMAINING THREE      * *\n* *      ARGUMENTS DEPEND ON THE FUNCTION REQUESTED AND IDENTIFY    * *\n* *      A SYSTEM NAME (FOR LOGON, INSERV OR QUIESCE), A            * *\n* *      SUBSYSTEM CONTROL BLOCK ADDRESS (FOR LOGON OR CONNECT)     * *\n* *      AND A PARAMETER LIST (FOR LOGON OR SWITCH).                * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nIRSVCFDS DSECT                                                 @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nIRVCTYP  DS    H           FUNCTION TYPE                       @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nIRVCSTYP DS    H           FUNCTION MODIFIER                   @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nIRVCUSID DS    F           ADDRESS OF USER ID ARGUMENT (EXCEPT LOGON)  *\n                             OR USER ID RETURN SLOT (LOGON ONLY)       *\n                                                               @BBDJ10X\n         SPACE 1                                               @BBDJ10X\nIRVCTHID DS    F           ADDRESS OF THREAD ID ARGUMENT (SWITCH,      *\n                             PULL OR DISCONNECT ONLY) OR THREAD        *\n                             NUMBER RETURN SLOT (CONNECT ONLY)     @P3C\n         ORG   IRVCTHID                                            @P3A\nIRVCLGFL DS    0F          LOGON - FLAGS ETC                   @BA16947\nIRVCLGF1 DS    X           1st flag byte                           @P3A\n*              X'80'       RESERVED                            @BA16947\nIRVCLGBT EQU   X'40'       BATCHING OF OPSYS POSTS             @BA16947\nIRVCLGF2 DS    X           2nd flag byte                           @P3A\nIRVCLGBV DS    X           BATCHING VALUE (IF IRVCLGBT SET)    @BA16947\nIRVCLGVR DS    X           RESERVED                            @BA16947\n         SPACE 1                                               @BBDJ10X\nIRVCALST DS    0F          START OF FUNCTION SPECIFIC ARGUMENT LIST    *\n                                                               @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR LOGON             @BBDJ10X\nIRVCLGIM DS    F           ADDRESS OF MYNAME ARGUMENT          @BBDJ10X\nIRVCLGSL DS    F           ADDRESS OF SLCB ADDR RETURN SLOT    @BBDJ10X\nIRVCLGMU DS    F           ADDRESS OF MAX USERS ARGUMENT       @BBDJ10X\n         SPACE 2                                               @BM13339\n         ORG   IRVCALST    ARGUMENT LIST FOR LOGOFF            @BM13339\nIRVCLODS DS    F           ADDRESS OF DYNAMIC STORAGE OPERAND  @BM13339\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR CONNECT           @BBDJ10X\nIRVCCNTO DS    F           ADDRESS OF TO ARGUMENT              @BBDJ10X\nIRVCCNSC DS    F           ADDRESS OF SCCB ADDR RETURN SLOT    @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR SWITCH            @BBDJ10X\n         DS    F           RESERVED                            @BM14056\n         DS    F           RESERVED                            @BM14056\nIRVCSWPM DS    F           ADDRESS OF PARAMETER TO PASS        @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR QUIESCE           @BBDJ10X\nIRVCQUTO DS    F           ADDRESS OF TO ARGUMENT              @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR INSERV            @BBDJ10X\nIRVCINTO DS    F           ADDRESS OF TO ARGUMENT              @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR RECOVER           @BBDJ10X\n         DS    F           .. RESERVED                         @BBDJ10X\nIRVCRCRS DS    F           REGISTER 13 SAVE AREA               @BBDJ10X\nIRVCRCSA DS    F           ADDRESS OF SAVE AREA ARGUMENT       @BBDJ10X\n         SPACE 2                                               @BBDJ10X\n         ORG   IRVCALST    ARGUMENT LIST FOR EOT/M CLEAR           @D1C\nIRVCEOAS DS    H           ASID OF FAILING MEMORY                  @D1A\n*                          OR ASID OF MEMORY CONTAINING FAILING TASK\nIRVCEOTA DS    F           TCB ADDRESS OF FAILING TASK             @D1A\nIRVCEOSC DS    F           ADDRESS OF SCTE                         @D1A\n         SPACE 2                                                   @D1P\n         ORG   ,           ORG TO END OF PARAMETER LIST        @BBDJ10X\nIRVCEND  DS    0F                                              @BM14268\nIRVCMAXM EQU   *-IRSVCFDS  MAXIMUM PARAMETER LENGTH            @BBDJ10X\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* *                                                                 * *\n* *      THE FOLLOWING EQUATES DEFINE THE FUNCTION REQUEST          * *\n* *      CODES FOR THE INTERREGION COMMUNICATION PROGRAM            * *\n* *                                                                 * *\n* *      THERE ARE TWO LEVELS OF FUNCTION REQUEST DEFINED HERE:     * *\n* *      THE SVC FUNCTION CODE ADDRESSED FROM THE SVC ARG LIST,     * *\n* *      AND THE FUNCTION TYPE QUALIFICATION CODE ADDRESSED FROM    * *\n* *      THE FUNCTION ARGUMENT LIST FOR PARTICULAR FUNCTIONS        * *\n* *                                                                 * *\n***********************************************************************\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n*                                                                     *\n*              SVC FUNCTION CODES                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nIRVCEQLG EQU   0                LOGON                          @BM14056\nIRVCEQLF EQU   4                LOGOFF                         @BM14056\nIRVCEQCN EQU   8                CONNECT                        @BM14056\nIRVCEQDC EQU   12               DISCONNECT                     @BM14056\nIRVCEQSW EQU   16               SWITCH                         @BM14056\nIRVCEQQU EQU   20               QUIESCE                        @BM14056\nIRVCEQPL EQU   24               PULL                           @BM14056\nIRVCEQIN EQU   28               INSERV                         @BM14056\nIRVCEQCL EQU   32               CLEAR                          @BM14056\nIRVCEQRC EQU   36               RECOVER                        @BM14056\nIRVCEQEO EQU   40               EOT/M CLEAR                        @D1A\nIRVCEQMX EQU   44               GREATER THAN MAX FUNCTION CODE     @D1C\n         SPACE 2                                               @BBDJ10X\n***********************************************************************\n*                                                                     *\n*              FUNCTION QUALIFICATION CODES                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1                                               @BBDJ10X\nIRVCEQDN EQU   0               NORMAL DISCONNECT               @BM14056\nIRVCEQDA EQU   4               ABNORMAL DISCONNECT             @BM14056\n         SPACE 1                                               @BBDJ10X\nIRVCEQQN EQU   0               NORMAL QUIESCE                  @BM14056\nIRVCEQQI EQU   4               IMMEDIATE QUIESCE               @BM14056\n         SPACE 1                                               @BBDJ10X\nIRVCEQSS EQU   0               SWITCH SUBSEQUENT               @BM14056\nIRVCEQSF EQU   4               SWITCH FIRST                    @BM14056\n         SPACE 1                                               @BBDJ10X\nIRVCEQRP EQU   0               RECOVER FROM PROGRAM CHECK      @BM14056\nIRVCEQRA EQU   4               RECOVER FROM ABEND              @BM14056\n         SPACE 1                                                   @D1A\nIRVCEQET EQU   0               END OF TASK                         @D1A\nIRVCEQEC EQU   4               END OF CROSS MEMORY RESOURCE OWNER TASK F\n                                                                   @D1A\nIRVCEQEM EQU   8               END OF MEMORY                       @D1A\n         DFHEJECT                                              @BBDJ10X\n***********************************************************************\n* * *                                                             * * *\n* * *                ERROR RETURN CODES                           * * *\n* * *                                                             * * *\n* * *    THE FOLLOWING EQUATES DEFINE THE RETURN CODES PASSED     * * *\n* * *    BACK BY THE INTERREGION COMMUNICATION SVC WHEN IT        * * *\n* * *    DETECTS AN ERROR. THESE ERROR CODES ARE LOADED INTO R15  * * *\n* * *                                                             * * *\n***********************************************************************\n         SPACE 5                                               @BCA890E\n*   INVALID REQUEST ERROR RETURN CODES                         @BM14056\nIRERRINF EQU   4           INVALID FUNCTION REQUESTED          @BBA890E\nIRERRAUT EQU   8           USER NOT AUTHORIZED TO USE SVC (MVS ONLY)   *\n                                                               @BCA890E\n         SPACE 1                                               @BBDJ104\n*   VALIDATE SUDB ERROR RETURN CODES                           @BM14056\nIRERRINE EQU   12          ENVIRONMENT INCORRECT               @BBDJ104\n         SPACE 1                                               @BBDJ10X\n*   VALIDATE USER ERROR RETURN CODES                           @BM14056\nIRERRUNM EQU   16          INVALID USER NUMBER                 @BBA890E\nIRERRUID EQU   20          INVALID USER IDENTIFICATION         @BBA890E\nIRERRUKN EQU   24          INVALID LCB ADDRESS                         *\n                                   (INTERNAL ERROR)            @BM14056\n         SPACE 1                                               @BBDJ10X\n*   VALIDATE THREAD ERROR RETURN CODES                         @BM14056\nIRERRTHN EQU   28          INVALID THREAD NUMBER               @BBA890E\nIRERRTHD EQU   32          INVALID THREAD ID                   @BBA890E\n         SPACE 1                                               @BBDJ10X\n*   SET FOOTPRINT ERROR RETURN CODES                           @BM14056\nIRERRCFT EQU   36          SET FOOTPRINT FAILED                @BBA890E\n         SPACE 1                                               @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   LOGON-SPECIFIC ERROR RETURN CODES                          @BM14056\nIRERRNOS EQU   52          NO SCTE IN THE SVA                  @BDDJ104\nIRERRNFL EQU   56          NO FREE LACBE FOR LOGON             @BBDJ104\nIRERRDPL EQU   60          DUPLICATE LOGON                     @BBA890E\nIRERRMXL EQU   64          MAXIMUM LOGONS ALREADY REACHED      @BBA890E\nIRERRGMD EQU   68          GETMAIN FAILED DIRECTORY STORAGE            *\n                           (DOS/VS ONLY)                       @BM14056\nIRERRGM1 EQU   72          GETMAIN FAILED LACB STORAGE         @BBA890E\nIRERRGM4 EQU   76          GETMAIN FAILED SUDB STORAGE         @BBDJ104\nIRERRGM2 EQU   80          GETMAIN FAILED LCB/CCB STORAGE      @BBA890E\nIRERRGM3 EQU   84          GETMAIN FAILED SLCB/SCCB STORAGE    @BBA890E\n         SPACE 1                                               @BBDJ10X\n*   LOGOFF-SPECIFIC ERROR RETURN CODES                         @BM14056\nIRERRLCB EQU   88          LCB NOT ON SUDB CHAIN               @BBDJ104\n         SPACE 1                                               @BBDJ10X\n*   CONNECT-SPECIFIC ERROR RETURN CODES                        @BM14056\nIRERRNLG EQU   92          SYSTEM NOT LOGGED ON                @BBDJ10X\nIRERRNCT EQU   96          SYSTEM NOT CONNECTABLE              @BBDJ10X\nIRERRGM5 EQU   100         GETMAIN FAILED CSB STORAGE          @BBDJ10X\nIRERRNSS EQU   104         SECONDARY SYSTEM NOT IN PRIMARY LCB @BBDJ10X\nIRERRCCS EQU   108         NO SECONDARY CCB FOUND FOR PRIMARY SYSTEM   *\n                                                               @BBDJ10X\nIRERRIQS EQU   112         SECONDARY IS IN-QUIESCE             @BM14056\nIRERRSP  EQU   12          SECONDARY TO PRIMARY CONVERTER      @BBDJ10X\nIRERRNSP EQU   IRERRNSS+IRERRSP  PRIMARY SYSTEM NOT IN SECONDARY LCB   *\n                                                               @BBDJ10X\nIRERRCCP EQU   IRERRCCS+IRERRSP  NO PRIMARY CCB FOUND FOR SECONDARY    *\n                                   SYSTEM                      @BBDJ10X\nIRERRIQP EQU   IRERRIQS+IRERRSP  PRIMARY IS IN-QUIESCE         @BM14056\nIRERRCCR EQU   128         NO PRIMARY CCB - RETRY REQUEST      @BBDJ10X\nIRERRSCF EQU   176         SECURITY CHECK FAILED               @BBDJ10X\nIRERRACE EQU   204         LOAD OF DFHACEE FAILED              @BBDJ104\n         SPACE 1                                               @BBDJ10X\n*   DISCONNECT-SPECIFIC ERROR RETURN CODES                     @BM14056\nIRERRDSC EQU   132         LINK IS ALREADY DISCONNECTED        @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   SWITCH-SPECIFIC ERROR RETURN CODES                         @BM14056\nIRERRSWI EQU   136         OTHER SIDE CANNOT RECEIVE DATA      @BBDJ10X\nIRERRNSW EQU   140         THIS SIDE CANNOT SEND DATA          @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   PULL-SPECIFIC ERROR RETURN CODES                           @BM14056\nIRERRPL1 EQU   144         OTHER SIDE CANNOT BE PULLED FROM    @BBDJ10X\nIRERRPL2 EQU   148         THIS SIDE CANNOT PULL DATA          @BBDJ10X\nIRERRNPP EQU   152         THERE IS NO PULL PENDING            @BBDJ10X\nIRERRNDP EQU   156         NO DATA TO BE PULLED (INTERNAL ERROR)       *\n                                                               @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   INSERVICE-SPECIFIC ERROR RETURN CODES                      @BM14056\nIRERRLIQ EQU   160         LCB IS IN-QUIESCE                   @BM14056\nIRERRUKS EQU   164         TARGET SYSTEM NOT FOUND IN LCB      @BBDJ10X\n         SPACE 1                                               @BBDJ10X\n*   MISCELLANEOUS ERROR RETURN CODES                           @BM14056\nIRERRCSB EQU   168         CSB CANNOT BE FOUND                 @BBDJ10X\nIRERRLNC EQU   172         LINK IS NOT CONNECTED               @BBDJ10X\n*RERRIAS EQU   188         INVALID ADDRESS SPECIFIED (DELETED)     @L4C\n         SPACE 1                                               @BBDJ10X\nIRERRSCH EQU   180         ATTEMPT TO SCHEDULE AN SRB/SUBTASK FAILED   F\n                                                                   @L4C\n*                          ..EITHER GETMAIN FAILED FOR SRB\n*                          ..PARAMETER STORAGE,\n*                          ..OR PREVIOUSLY FAILED SCHEDULE\n*                          ..REQUEST HAS BEEN DETECTED.\n*                          ..OR IN VSE, AN XPCC REQUEST FAILED\nIRERRGM7 EQU   184         GETMAIN FAILED FOR SRB STORAGE(MVS) @BBDJ104\nIRERRGM8 EQU   208         GETMAIN  FAILED FOR TRANSFER BUFFER @BCDJ104\nIRERRGM9 EQU   212         GETMAIN FAILED FOR SSVT,SCTE,WORKAREA       F\n                                                           @EAPAR8 @01C\nIRERRGMA EQU   236         GETMAIN FAILED FOR LOGON CONNECTIONS LIST   F\n                                                           @FJ410R @L3A\nIRERRGMX EQU   228         GETMAIN FAILED FOR USE COUNT ARRAY          F\n                                                           @FJ410R @L3A\nIRERRAX  EQU   232         NON-ZERO AX VALUE CURRENTLY SET @FJ410R @L3A\nIRERRCAT EQU   240         CONNECT SRB ATSET FAILED        @FJ410R @L3A\nIRERRAXA EQU   244         NO FREE ENTRIES IN AX ARRAY     @FJ410R @L3A\nIRERRLXA EQU   244         NO FREE ENTRIES IN LX ARRAY      @17879 @L3A\nIRERRXME EQU   244         CROSS MEMORY ENVIRONMENT ERROR  @FJ410R @L3A\nIRERRIDL EQU   248         TOTAL DATA LENGTH INVALID FOR SWITCH OR PULLF\n                                                           @FJ410R @L3A\nIRERRMPD EQU   252         M/C CHECK PAGING I/O OR DAT ERROR           F\n                                                           @FJ410R @L3A\nIRERRPST EQU   188         'SPECIAL' ABEND (BAD ECB ETC.)              F\n                                                           @FJ410R @L3A\nIRERRENV EQU   216         SUBSYSTEM NOTIFICATION ERROR (MVS ONLY) @L4C\n         SPACE 1                                               @BBDJ104\n*   INVALID ADDRESS RETURN CODES                               @BM14056\nIRERRIA0 EQU   192         INVALID ARGUMENT OR PARAMETER ADDR  @BM14056\nIRERRIA1 EQU   196         INVALID ADDRESS IN PARAMETER LIST   @BM13484\nIRERRIA2 EQU   200         INVALID ADDRESS IN DATA LIST        @BM13484\nIRERRIA3 EQU   220         INVALID TARGET FOR DATA MOVEMENT        @L4C\n         SPACE 1                                               @BM14268\n*   INTERNAL LOGIC ERROR CODE                                  @BM14268\nIRERRILE EQU   224         INTERNAL LOGIC ERROR                @BM14268\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT249/CBT.V500.FILE249.PDS/MACLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT249/CBT.V500.FILE249.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}