//MPF2REXX JOB (JOB,JOB),'XXXXXXXXXXXXXXXXXX',CLASS=Z,COND=(8,LT),
//         MSGCLASS=M,REGION=3M
//ASM      EXEC PGM=ASMA90,PARM='XREF,NODECK,OBJECT'
//* SLIB   DD DSN=THRD.MVSPUB.FILE332.PDS,DISP=SHR
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD DSN=&&SYSUT1,UNIT=SYSSQ,SPACE=(1700,(600,100))
//SYSUT2   DD DSN=&&SYSUT2,UNIT=SYSSQ,SPACE=(1700,(300,50))
//SYSUT3   DD DSN=&&SYSUT3,UNIT=SYSSQ,SPACE=(1700,(300,50))
//SYSPRINT DD SYSOUT=*
//*YSPRINT DD SYSOUT=(P,,1PN),FCB=1PW,COPIES=1,
//*      DCB=(RECFM=FM),FREE=CLOSE
//SYSLIN   DD DSN=&&OBJLIB(MPF2REXX),DISP=(MOD,PASS),
//            UNIT=SYSSQ,SPACE=(400,(800,400,10),,,ROUND),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)
//SYSIN    DD *
MPF2REXX TITLE '- MPF exit to call SYSTEM REXX'
         PRINT GEN
***********************************************************************
*                                                                     *
* Name: MPF2REXX                                                      *
*                                                                     *
*      Author: Dana Mitchell      email:  mitchdana@gmail.com         *
*                                                                     *
* Description: MPF Installation exit to process WTO                   *
*              messages using SYSTEM REXX execs                       *
*                                                                     *
*   Operation: Call a SYSTEM REXX EXEC when the specfied message      *
*              is issued.  The default name of the SYSREXX to be      *
*              called is the message identifier.  If an alternate     *
*              REXX is to be called, specify AUTO(rexxname) on the    *
*              MPFLSTxx statement.                                    *
*                                                                     *
*              Sample MPFLSTxx statements:                            *
*                                                                     *
*              msgid,USEREXIT(MPF2REXX)                               *
*                                                                     *
*                    When <msgid> message is issued,  call a System   *
*                    Rexx with the name of <msgid>.                   *
*                                                                     *
*              msgid,USEREXIT(MPF2REXX),AUTO(altrexx)                 *
*                                                                     *
*                    When <msgid> message is issued,  call a System   *
*                    Rexx with the name of <altrexx>.                 *
*                                                                     *
*       Input: R1->  Address of CTXT                                  *
*              R13-> Standard save area                               *
*              R14-> Return address                                   *
*              R15-> Entry point                                      *
*                                                                     *
*   Regs used: R2 R6 and R7 work                                      *
*              R3  Ptr to WORKDS   workarea                           *
*              R4  Ptr to CTXTATTR                                    *
*              R5  Ptr to CTXT                                        *
*              R12 Base                                               *
*              R13 Register save area                                 *
*              R14 Return address                                     *
*                                                                     *
* Fields passed to REXX exec:                                         *
*                                                                     *
*              MPF2REXXJOB     Job name of issuer                     *
*              MPF2REXXJID     Job ID of issuer            @DM11032010*
*              MPF2REXXSYS     System name where message originated   *
*              MPF2REXXMSG.0   Number of lines returned               *
*              MPF2REXXMSG.x   Where x= 1-20 lines of WTO text        *
*                                                                     *
*                                                                     *
*                                                                     *
* Change Log                                                          *
* ------------------------------------------------------------------- *
* Mitchell  9/22/2010 Initial coding                                  *
*                                                                     *
* Mitchell 10/22/2010 Insert test for valid System Rexx environment.  *
*  AXREXX macro fails w/RC 0000000C  RSN 041E0C0F if the AS issuing   *
*  the message is not valid for creation of a dependant enclave.      *
*  Check for  OUCBIac>0                                               *
*                                                                     *
* Mitchell @DM11032010 Add CTXTOJBID field passed to REXX             *
* Mitchell @DM11112010 Set actual length of MPF2REXXJOB and 'SYS      *
*                      fields.                                        *
* TONY THIGPEN - FIXED 'MESSAGE' LESS THAN 7 CHARACTERS               *
*                                                                     *
***********************************************************************
MPF2REXX CSECT
MPF2REXX AMODE 31                      31-BIT ADDRESSING MODE
MPF2REXX RMODE ANY                     31-BIT RESIDENCE

* Registers

R0       EQU   0
R1       EQU   1             TRT
R2       EQU   2             TRT
R3       EQU   3             Work area (dynamic storage)
R4       EQU   4             CTXTATTR
R5       EQU   5             CTXT
R6       EQU   6             Work
R7       EQU   7             Work
R8       EQU   8             Work for REXX areas
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12            BASE
R13      EQU   13            Save area
R14      EQU   14
R15      EQU   15

* Setup Entry Linkage

         USING *,R12                    Tell assembler
         BAKR  R14,0                    Save regs
         LAE   R12,0(,R15)              Load base
         B     Begin                    Branch around eyecatchers
         DC    C'MPF2REXX '
         DC    C'&SYSDATE &SYSTIME '
Begin    DS    0H
         L     R5,0(R1)                 Get poitner to CTXT
         USING CTXT,R5                  use R5

         TM    CTXTSFB4,CTXTCIDA        Is this termination call?
         BO    Return                   Yes-> return

* Determine type of call

         L     R4,CTXTTXPN              Load pointer to minor line
         LTR   R4,R4                    Is there a minor line?
         BNZ   MinorLine                Yes-> Go process minor line

* Check for valid environment                               @DM10222010

         B     EnvOK          **** Don't check Environment ****

         USING PSA,R0              Point to PSA             @DM10222010
         L     R6,PSAAOLD          Point to Current ASCB    @DM10222010
         USING ASCB,R6             Use pointer to ASCB      @DM10222010
         L     R6,ASCBOUCB         Point to OUCB            @DM10222010
         Drop  R6                  Reg is now pointing to OU@DM10222010
         USING OUCB,R6             Tell assembler           @DM10222010
         CLI   OUCBIAC,x'00'       Is OUCBIAC>0?            @DM10222010
         BH    EnvOK               Yes-> Continue           @DM10222010
         WTO   'MPF2REXX Invalid environment for System REXX'
         B     Return                                       @DM10222010
         Drop  R6                                           @DM10222010

* Getmain workarea

EnvOK    DS    0H                                           @DM10222010
         GETMAIN RU,LV=WORKLEN,SP=230,LOC=(BELOW,ANY)
         LTR   R15,R15             Getmain OK?
         BZ    GM1OK               Yes-> continue
         WTO   'MPF2REXX Getmain Error'
         B     Return              Bye

GM1OK    DS    0H
         LR    R3,R1               Get address of storage
         USING WORKDS,R3           Tell assembler
         LA    R13,SAVEAREA        Point to save area
         MVC   SAVEAREA+4,=C'F1SA' Mark stack in use

* Save various fixed fields from the message header

         MVC   NumMin,=F'1'        Set beginning number of lines
         L     R4,CTXTTXPJ         Load address of ptr to text
         USING CTXTATTR,R4         Use this for the base
         MVC   VARTMSG,CTXTTMSG    Move in message text
         MVC   VARTLEN,CTXTTLEN    Get Length of message text
         MVC   VARJBNM,CTXTJBNM    Move in JOB name
         MVC   VARJBID,CTXTOJBID   Move in JOB ID           @DM11032010
         MVC   VARSYSN,CTXTSYSN    Move in system name

* Get name of exec

         MVC   EXECNAME(8),CTXTTMSG  Move in first 8 chars of text
         MVI   EXECEOF,C' '          SET STOPPER BYTE         TT 021518
         LA    R1,EXECNAME-1         CLEAN NAME BECAUSE IT    TT 120817
CLEANIT  DS    0H                      . MAY BE SHORT AND     TT 120817
         LA    R1,1(,R1)               . ANOTHER PARM STARTS  TT 120817
         CLI   0(R1),C' '              . WITHIN THE 8 CHARS   TT 120817
         BNE   CLEANIT                 .                      TT 120817
         MVC   0(8,R1),=CL8'        '  .                      TT 120817
         CLC   CTXTAUTT,=CL8' '      Is any token specified?
         BNH   Defname               No-> use name from message text
         MVC   EXECNAME,CTXTAUTT     Move in name from auto token
Defname  DS    0H

* Determine type of line

         TM    CTXTTFB1,CTXTTFMJ   Is this a MLWTO?
         BZ    BuildRexx           No-> go build SYSREXX call
         TM    CTXTTFB1,CTXTTFME   Is this the last line?
         BO    BuildRexx           Yes-> go build SYSREXX call

* Chain workarea

         MVC   Seqno,CTXTSEQN      Save sequence number of this MSG
         L     R15,CTXTIWKP        Point to exit work area

AddWork  DS    0h

         XR    R1,R1               Clear work reg
         CS    R1,R3,0(R15)        Add pointer to chain OK?
         BE    ReqMinors           Yes-> go get more minors
         LR    R15,R1              No-> point to next minor block
         B     AddWork             Go try adding the next block

ReqMinors DS   0H

         OI    CTXTRFB1,CTXTRPML   Request more minors if available
         B     Return              Go back

* Process Minor Line

MinorLine DS    0H

         NI    CTXTRFB1,255-CTXTRPML Turn off request bit
         L     R3,CTXTIWKP          Get pointer to exit work area

TryNext  DS    0H

         L     R3,0(R3)             Get pointer to first/next work area
         LTR   R3,R3                Is there a work area exist?
         BNZ   WorkOK               Yes-> See if its the right one
         WTO   'MPF2REXX No workarea found for minor'
         B     Return               Go Back

WorkOK   Ds    0H

         CLC   Seqno,CTXTSEQN       Is this the right one?
         Bne   TryNext              No-> try the next one

* Store message line in work area

         LA    R6,VARTMSG           Point to line array
         L     R8,NumMin            Get number of minor lines
         CH    R8,=H'20'            Max minor lines reached?
         BNL   MinFull              Yes-> Dont add to buffer
         MH    R8,=AL2(L'CTXTTMSG)  Find index into table
         AR    R6,R8                Point to next entry
         MVC   0(L'CTXTTMSG,R6),CTXTTMSG  Move in message text
         L     R8,NumMin            Get number of minor lines
         SLA   R8,1                 Multiply by 2
         LA    R6,VARTLEN(R8)       Point to length entry
         MVC   0(2,R6),CTXTTLEN     Save length of message
         L     R8,NumMin            Get number of minor lines
         LA    R8,1(,R8)            Increment number of minors
         ST    R8,NumMin            Store number of minors

         TM    CTXTTFB1,CTXTTFME    Is this the END line?
         BZ    ReqMinors            No-> Go get more

MinFull  DS    0H
* Remove workarea from chain

         L     R1,CTXTIWKP          Point to exit workarea

RemWork  DS    0H

         LR    R15,R3               Point to our workarea
         L     R14,NextWrk          Load pointer to next one
         CS    R15,R14,0(R1)        Try Removing chain
         BE    BuildRexx            Yes-> Go build REXX request
         LR    R1,R15               No-> Point to next one
         B     RemWork              Go try to remove it

* Begin building SYSTEM REXX call areas

BuildRexx DS   0H

         XC    RxVarLst,RxVarLst    Clear the VarLst header
         LA    R8,RxVarLst

* Build headers

         USING AxrArgLst,R8
         MVC   AxrArgLstId,=A(AxrVarLstAcro) Set it to varible type
         MVC   AxrArgLstVer,=A(AxrArgLstCurVer) Set it to version
         L     R6,NumMin           Get number of wto lines
         LA    R6,ExtraFields(,R6) Add more fields to count
         STH   R6,AxrArgLstNumber  Store the number of variables
         DROP  R8

* Prepare variable entries

        LA     R8,RxVarEnt          Point to first entry
        USING  AxrArgEntry,R8

* Job name

         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R6,jbnmName          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'jbnmName
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
         LA    R6,L'VARJBNM         Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry
         LA    R6,VARJBNM           Get address of Job name
         ST    R6,AXRARGADDRLOW     Store address in arglist
         TRT   VARJBNM,TRTTAB       Find length of JOB name @DM11112010
         BZ    DefJOB               Job name is default leng@DM11112010
         SR    R1,R6                Calculate length        @DM11112010
         ST    R1,AxrArgLength      Store length            @DM11112010
DefJOB   DS    0H                                           @DM11112010

* Job ID

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R6,VARJBID           Get address of Job ID
         ST    R6,AXRARGADDRLOW     Store address in arglist
         LA    R6,jbidName          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'jbidName
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
         LA    R6,L'VARJBID         Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* System name

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R6,sysnName          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'sysnName store length of name
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
         LA    R6,L'VARSYSN         Plug in default length
         ST    R6,AxrArgLength      Store length in var entry
         LA    R6,VARSYSN           Get address of System name
         ST    R6,AXRARGADDRLOW     Store address in arglist
         TRT   VARSYSN,TRTTAB       Find length of System na@DM11112010
         BZ    DefSYS               Default length          @DM11112010
         SR    R1,R6                Calculate length        @DM11112010
         ST    R1,AxrArgLength      Store length            @DM11112010
DefSYS   DS    0H                                           @DM11112010

* Message text .0

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8)  Clear entry
         LA    R6,NumMin            Get address of varable
         ST    R6,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam0          get address of variable name
         ST    R6,AXRARGNameADDRLOW Store address of name
         MVI   AxrArgNameLength,L'tmsgNam0
         OI    AXRARGINPUTFLGS1,AXRARGInput   input varible
         MVI   AxrArgType,AXRARGTYPEUNSIGNED  type is unsigned binary
         LA    R6,L'NumMin          Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .1

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,VARTMSG           Get address of message text line
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam1          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam1
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+0         Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .2

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam2          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam2
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+2         Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .3

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam3          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam3
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+4         Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .4

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam4          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam4
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+6         Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .5

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam5          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam5
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+8         Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .6

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam6          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam6
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+10        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .7

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam7          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam7
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+12        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .8

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam8          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam8
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+14        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .9

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNam9          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNam9
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+16        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .10

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamA          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamA
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+18        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .11

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamb          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamb
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+20        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .12

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamc          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamc
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+22        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .13

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamd          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamd
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+24        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .14

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgName          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgName
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+26        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .15

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamf          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamf
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+28        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .16

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamg          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamg
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+30        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .17

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamh          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamh
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+32        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .18

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNami          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNami
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+34        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .19

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamj          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamj
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+36        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

* Message text .20

         LA    R8,AXRARGENTRY_LEN(,R8)     Point to next entry
         XC    0(AXRARGENTRY_LEN,R8),0(R8) Clear entry
         LA    R7,L'CTXTTMSG(,R7) Point to next line of message text
         ST    R7,AXRARGADDRLOW     Store address in arglist
         LA    R6,tmsgNamk          Get address of name
         ST    R6,AXRARGNameADDRLOW Store address of name of varible
         MVI   AxrArgNameLength,L'tmsgNamk
         OI    AXRARGINPUTFLGS1,AXRARGInput  Input variable
         MVI   AxrArgType,AxrArgTypeChar        Indicate char string
*        LA    R6,L'CTXTTMSG        Obtain length (in bytes)
         LH    R6,VARTLEN+38        Obtain length (in bytes)
         ST    R6,AxrArgLength      Store length in var entry

         DROP  R8
         WTO   'MPF2REXX INVOKED',MCSFLAG=(HRDCPY)

* Call system rexx

         AXREXX REQUEST=EXECUTE,   Execute a rexx                      X
               SECURITY=BYAXRUSER, Run under ID in AXRUSER of AXRxx    X
               NAME=EXECNAME,      Name is stored in execname          X
               SYNC=NO,            Asyncrounous call                   X
               TSO=NO,             TSO environment                     X
               REXXVARS=RxVarLst,  Point to variable list              X
               REXXDIAG=RxAxrDiag, Diagnosis area                      X
               PLISTVER=MAX,       Largest possible AXREXX plist size  X
               RETCODE=OutRC,      Store return code                   X
               RSNCODE=OutRsn,     Store reason code                   X
               MF=(E,RXPLIST,COMPLETE)

         LTR   R15,R15
         BNZ   FailLabel
         USING AxrDiag,R9
         LA    R9,RxAxrDiag
         TM    AxrDiagFlgs1,AxrDiagNoExecRetCode
         BNZ   FailLabel
         L     R15,AxrDiagExecRetCode
         LTR   R15,R15
         BNZ   FailLabel

* Cleanup

         LA    R1,WORKLEN
         FREEMAIN R,LV=(R1),A=(R3),SP=230
         LTR   R15,R15             Free OK?
         BZ    RETURN              Yes-> Return
         WTO   'MPF2REXX FREEMAIN FAILED'

* Exit

Return   DS    0h
         PR                             Restore callers regs

* Perform error checking

FailLabel DS   0H

         MVC   WTOPLIST(WTOLISTL),WTOLIST Move in WTO plist

         UNPK  WTOPLIST+29(9),OutRC(5)  Unpack RC
         MVI   WTOPLIST+37,C' '         Clear old sign
         TR    WTOPLIST+29(8),TRTABLE   Convert to printable hex chars

         UNPK  WTOPLIST+43(9),OutRsn(5) Unpack RSN code
         MVI   WTOPLIST+51,C' '         Clear old sign
         TR    WTOPLIST+43(8),TRTABLE   Convert to printable hex chars
         WTO   MF=(E,WTOPLIST)
         AGO   .SKIP
*
* OUTPUT AXRDIAG CODES AS WELL - MCKOWN
         MVC   WTOPLIST(WTOLISTL2),WTOLIST2
         UNPK  WTOPLIST+19(9),AXRDIAG1(5)
         TR    WTOPLIST+19(8),TRTABLE
         MVI   WTOPLIST+27,C' '
         UNPK  WTOPLIST+34(9),AXRDIAG2(5)
         TR    WTOPLIST+34(8),TRTABLE
         MVI   WTOPLIST+42,C' '
         UNPK  WTOPLIST+49(9),AXRDIAG3(5)
         TR    WTOPLIST+49(8),TRTABLE
         MVI   WTOPLIST+57,C' '
         UNPK  WTOPLIST+64(9),AXRDIAG4(5)
         TR    WTOPLIST+64(8),TRTABLE
         MVI   WTOPLIST+72,C' '
         WTO   MF=(E,WTOPLIST)
.SKIP    ANOP
*

         PR

* Local storage

NumVars  EQU   24                Total number of variables  @DM11032010
ExtraFields EQU 4                Extra fields beyond wto lin@DM11032010
tmsgNam0 DC    C'MPF2REXXMSG.0'
tmsgNam1 DC    C'MPF2REXXMSG.1'
tmsgNam2 DC    C'MPF2REXXMSG.2'
tmsgNam3 DC    C'MPF2REXXMSG.3'
tmsgNam4 DC    C'MPF2REXXMSG.4'
tmsgNam5 DC    C'MPF2REXXMSG.5'
tmsgNam6 DC    C'MPF2REXXMSG.6'
tmsgNam7 DC    C'MPF2REXXMSG.7'
tmsgNam8 DC    C'MPF2REXXMSG.8'
tmsgNam9 DC    C'MPF2REXXMSG.9'
tmsgNamA DC    C'MPF2REXXMSG.10'
tmsgNamb DC    C'MPF2REXXMSG.11'
tmsgNamc DC    C'MPF2REXXMSG.12'
tmsgNamd DC    C'MPF2REXXMSG.13'
tmsgName DC    C'MPF2REXXMSG.14'
tmsgNamf DC    C'MPF2REXXMSG.15'
tmsgNamg DC    C'MPF2REXXMSG.16'
tmsgNamh DC    C'MPF2REXXMSG.17'
tmsgNami DC    C'MPF2REXXMSG.18'
tmsgNamj DC    C'MPF2REXXMSG.19'
tmsgNamk DC    C'MPF2REXXMSG.20'
jbnmName DC    C'MPF2REXXJOB'
jbidName DC    C'MPF2REXXJID'                               @DM11032010
sysnName DC    C'MPF2REXXSYS'
WTOLIST  WTO   'MPF2REXX AXREXX ERROR RC XXXXXXXX  RSN XXXXXXXX',      X
               MF=L
WTOLISTL EQU   *-WTOLIST
         AGO   .SKIP2
WTOLIST2 WTO   'MPF2REXX DIAG1 XXXXXXXX DIAG2 XXXXXXXX DIAG3 XXXXXXXX DI
               IAG4 XXXXXXXX',                                         X
               MF=L
WTOLISTL2 EQU  *-WTOLIST2
.SKIP2   ANOP
* TR table for decoding hex values
         ORG   *-240
TRTABLE  EQU   *
         DS    CL240
         DC    C'0123456789ABCDEF'
         ORG   ,
* TRT table for finding length of fields
TRTTAB   DC    256X'FF'           All values invalid
         ORG   TRTTAB+C'#'
         DC    1X'00'             #
         ORG   TRTTAB+C'$'
         DC    1X'00'             $
         ORG   TRTTAB+C'@'
         DC    1X'00'             @
         ORG   TRTTAB+C'A'
         DC    9X'00'             ABCDEFGHI
         ORG   TRTTAB+C'J'
         DC    9X'00'             JKLMNOPQR
         ORG   TRTTAB+C'S'
         DC    8X'00'             STUVWXYZ
         ORG   TRTTAB+C'0'
         DC    10X'00'            0123456789
         ORG   ,

* Work area DSECT

WORKDS   DSECT
Nextwrk  DS    F                        Ptr to next work area
Seqno    DS    F                        Sequence number
SAVEAREA DS    18F                      Reg save area
DWORD    DS    D                        Doubleword
NumMin   DS    F                        Number of Minor lines
NumMinC  DS    C
ExecName DS    CL8                      Exec Name
ExecEOF  DS    CL8          **REQ**     MUST BE AFTER NAME    TT 120817
RxVarLst DS    CL(AXRARGLST_LEN)        Variable List
RxVarEnt DS    24CL(AXRARGENTRY_LEN)    Varible entries
*xVarEnt DS    CL(AXRARGENTRY_LEN*NumVars)    Varible entries
RxAxrDiag DS   CL(AXRDIAG_LEN)          Diagnostic area
VARTMSG  DS    CL(L'CTXTTMSG)           message text
MinLines DS    19CL(L'CTXTTMSG)         19 more minor lines
VARTLEN  DS    H                        Length of Line
MinLens  DS    19H                      19 more lengths
VARJBNM  DS    CL(L'CTXTJBNM)           job issuing message
VARSYSN  DS    CL(L'CTXTSYSN)           System issuing message
VARJBID  DS    CL(L'CTXTOJBID)          Job ID              @DM11032010
OutRC    DS    F                        Return code from axrexx
         DS    C                        Pad char
OutRsn   DS    F                        Reason code
         DS    C                        Pad char
         AXREXX PLISTVER=MAX,MF=(L,RXPLIST)
WTOPLIST WTO   'MPF2REXX AXREXX ERROR RC XXXXXXXX  RSN XXXXXXXX ',     X
               MF=L
         AGO   .SKIP3
WTOPLIST WTO   'MPF2REXX DIAG1 XXXXXXXX DIAG2 XXXXXXXX DIAG3 XXXXXXXX DI
               IAG4 XXXXXXXX',                                         X
               MF=L
.SKIP3   ANOP
WORKLEN  EQU   *-WORKDS

* Other DSECTS

         EJECT
         IEZVX100                       CTXT
         AXRZARG DSECT=YES,AXRARGLST=YES,AXRARGENTRY=YES,AXRDIAG=YES
         IHAASCB DSECT=YES
         IRAOUCB DSECT=YES
         IHAPSA  DSECT=YES
         EJECT
         END   MPF2REXX
/*
//LKED   EXEC PGM=IEWL,
//   PARM='XREF,LIST,REUS,AC=1,RENT,AMODE=31,RMODE=ANY'
//SYSLMOD  DD  DSN=SYS1.LINKLIB(MPF2REXX),DISP=SHR
//SYSUT1   DD  UNIT=SYSSQ,SPACE=(CYL,(2,1))
//SYSPRINT DD SYSOUT=*
//*YSPRINT DD SYSOUT=(P,,1PN),FCB=1PW,COPIES=1,
//*      DCB=(RECFM=FM),FREE=CLOSE
//SYSLIB   DD  DSN=&&OBJLIB,DISP=(OLD,PASS),UNIT=SYSSQ
//SYSLIN   DD  *
 INCLUDE SYSLIB(MPF2REXX)
 NAME MPF2REXX(R)
/*
//
