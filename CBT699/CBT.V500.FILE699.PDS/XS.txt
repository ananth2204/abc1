* +++++ dairfail - need to test error path.
* +++++ cppl address for the dairfail routine(?) for putline.
         MACRO
&NAME    ISPLINK &OPRNDS,&RC=,&ERROR=
         GBLB  &IHBSWA
&IHBSWA  SETB  1                       VL=1
&NAME    LA    R1,ISPLINK_PLIST        ; ISPLINK parm list
         IHBOPLST ,&OPRNDS,MF=(E,(1))
         L     R15,ISPLINK@            ; Address from load
         BALR  R14,R15                 ; Invoke ISPLINK
         AIF   (T'&RC EQ 'O').ERR
         ST    R15,&RC                 ; Save retcode
.ERR     ANOP
         AIF   (T'&ERROR EQ 'O').MEND
         LTR   R15,R15                 ; Set condition code
         BNZ   &ERROR
.MEND    MEND
*
XS          TITLE 'Submit Edit Macro'
XS          AMODE 31
XS          RMODE ANY
*----------------------------------------------------------------------
*  This is the XS macro which will submit the member being edited
*   to JES2 internal reader for processing.
*  The "NX" operand on the command line will cause the XS to honor
*   the excluded lines status and only submit non-excluded lines.
*
*  Note that workarea is below the line.
* 02/99 axb
*----------------------------------------------------------------------
XS       CSECT
         USING XS,R15             ; Address program.
         SAVE  (14,12),,XS.SSE.ALEX.BRODSKY.&SYSDATE.&SYSTIME
         LR    R12,R15            ; Set program base.
         DROP  R15
         USING XS,R12,R11         ; Address program.
         LA    R11,2048(R12)
         LA    R11,2048(R11)
         LA    R0,WORKLEN         ; Set length and
         GETMAIN R,LV=(0),LOC=BELOW ; ... get dynamic save area.
         LA    R6,0(R1)
         LA    R7,WORKLEN         ; Clear save area.
         SR    R8,R8
         SR    R9,R9
         MVCL  R6,R8              ; Clear GETMAIN area.
         ST    R1,8(R13)          ; Chain saveareas.
         ST    R13,4(R1)          ; ...
         LR    R13,R1             ; ...
         USING WORKAREA,R13
****     XC    RETCODE(4),RETCODE ; Set normal return code - 0
         L     R1,4(,R13)         ; Get to the prev savearea
         LM    R0,R1,20(R1)       ; Restore parm pointers
         SPACE 3
*
* End of housekeeping statements.
*
*------------------------------------------------------------------
START    DS    0H
         LR    R10,R1
         MVC   XNXPARM(2),BLANKS  ; Prepare
         MVC   XNX(2),BLANKS      ; Prepare
         MVC   OPENWRK(L_OPENMDL),OPENMDL    ; Open and Close macros
         MVC   CLOSEWRK(L_CLOSEMDL),CLOSEMDL ; ... workareas
         OI    FIRSTCARD,L'FIRSTCARD  ; flag
         MVC   JOBNAME(8),BLANKS      ; Prepare
*
* Load the ISPLINK interface module address and save it.
*
         LOAD  EPLOC=@ISPLINK
         ST    R0,ISPLINK@        ; Save ISPLINK address
*
         ISPLINK (@CONTROL,@ERRORS,@RETURN),RC=RETCODE,ERROR=EXIT
*
* Issue VDEFINE for the following variables:
*   XNXPARM = parameter X or NX from the command line
*   XNX     = exclude status of a current line
*   LRECL   = LRECL of a current dataset
*   LINE    = data line currently processed
*   LINE1   = 1 (starting line to be submitted)
*   LINE2   = Ending line of member/dataset (last line)
*
  ISPLINK (@VDEFINE,@XNXPARM,XNXPARM,@CHAR,L2),RC=RETCODE,ERROR=EXIT
  ISPLINK (@VDEFINE,@ZERRMSG,ZERMSG,@CHAR,L8)
*
* Issue first macro cmd
*
* ISREDIT MACRO (XNXPARM) PROCESS
*
      ISPLINK (@ISREDIT,@ISREM1SZ,@ISREM1),RC=RETCODE,ERROR=MACEXIT
*
  ISPLINK (@VDEFINE,@XNX,XNX,@CHAR,L2),RC=RETCODE,ERROR=EXIT
  ISPLINK (@VDEFINE,@LINE1,LINE1,@FIXED,L4),RC=RETCODE,ERROR=EXIT
  ISPLINK (@VDEFINE,@LINE2,LINE2,@FIXED,L4),RC=RETCODE,ERROR=EXIT
  ISPLINK (@VDEFINE,@LRECL,LRECL,@FIXED,L4),RC=RETCODE,ERROR=EXIT
*
* ISREDIT (LRECL) = LRECL
*
      ISPLINK (@ISREDIT,@ISREM2SZ,@ISREM2),RC=RETCODE,ERROR=MACEXIT
*
*
* We will be punching out no more than 80 bytes. Exit if lrecl > 255
*
*
         MVC   LRECL@(4),LRECL    ; Init data size
         CLC   LRECL(4),=F'255'   ; Too wide?
         BH    PROCESS_ERROR      ; LRECL > 255
         CLC   LRECL(4),=F'80'    ; Too wide?
         BNH   *+10               ; No, skip next instruction ------+
         MVC   LRECL@(4),=F'80'   ; ... yes, limit to 80            |
*                                            <----------------------+
*
  ISPLINK (@VDEFINE,@LINE,LINE,@CHAR,L255),RC=RETCODE,ERROR=EXIT
*--------------------------------------------------------------------*
* Extract the first and last line numbers
*  ISREDIT (LINE1) = LINENUM .ZFIRST
*  ISREDIT (LINE2) = LINENUM .ZLAST
*--------------------------------------------------------------------*
*
      ISPLINK (@ISREDIT,@ISREM4SZ,@ISREM4),RC=RETCODE
      ISPLINK (@ISREDIT,@ISREM5SZ,@ISREM5),RC=RETCODE
*--------------------------------------------------------------------*
* Determine if the user requested processing of
*  non-exclulded lines. Note that macro arguments are not uppercased
*  by the ISREDIT processing.
*--------------------------------------------------------------------*
         OC    XNXPARM,BLANKS     ; Cheap uppercase
         CLC   XNXPARM(2),=CL2'NX'     ; Nonexcluded lines only?
         BE    NONEXCLUDED
         CLC   XNXPARM(2),BLANKS  ; Indifferent?
         BNE   INVALID_XNXPARM    ; Bad input.
         B     XNXDONE            ; Continue
NONEXCLUDED  OI  FLAG1NX,L'FLAG1NX     ; Set flag
XNXDONE  DS    0H
*
* Allocate internal reader.
*
         BAL   R8,ALLOC_INTRDR    ; Build svc99 plist and issue it
         LTR   R15,R15            ; Any luck?
         BNZ   SVC99ERR           ; No.
         OI    RDRALLOC,L'RDRALLOC  ; mark as allocated
         MVC   INTRDR_DDNAME(8),BLANKS    ; Prepare
         LA    R4,RTDDN+SVC99TU-SVC99TUM  ; First text unit
         USING S99TUNIT,R4
         LH    R15,S99TULNG       ; Length of returned DDNAME
         BCT   R15,*+10           ; around ----------------------+
         MVC   INTRDR_DDNAME(0),S99TUPAR  ; *** executed ***     |
         EX    R15,*-6            ; copy ddname  <---------------+
         DROP  R4
* fill up unalloc plist (need it just in case)
         BAL   R8,UNALC_INTRDR_BUILD   ; Build plist
         BAL   R8,GENCB_INTRDR         ; Build ACB and RPL for INTRDR
         LTR   R15,R15
         BNZ   GENCB_ERR
         BAL   R8,OPEN_INTRDR     ; Open INTRDR.
         LTR   R15,R15
         BNZ   OPEN_INTRDR_ERR    ; Did not work
         OI    RDROPEN,L'RDROPEN  ; mark as open
*--------------------------------------------------------------------*
* Loop thru the lines specified, "punching" lines as required.
*  if "NX" was requested, query the exclude status of each
*  line, otherwise dont bother.
*--------------------------------------------------------------------*
         L     R5,LINE1           ; Get starting line
LOOP     DS    0H
         C     R5,LINE2           ; Are we at the end?
         BH    LOOP_OUT           ; yes, we are finished
*
* Get the data line
*  ISREDIT (LINE) = LINE &&LINE1
*
      ISPLINK (@ISREDIT,@ISREM6SZ,@ISREM6),RC=RETCODE,ERROR=MACEXIT
*
         TM    FLAG1NX,L'FLAG1NX  ; NX flag set?
         BE    XNX00              ; No, dont bother getting stat
*
* get the exclude status for this line
*
*  ISREDIT (XNX) = XSTATUS &&LINE1
*
      ISPLINK (@ISREDIT,@ISREM7SZ,@ISREM7),RC=RETCODE,ERROR=MACEXIT
XNX00    DS    0H
         TM    FLAG1NX,L'FLAG1NX  ; Process non-excluded lines only?
         BO    NX_ON              ; Yes
* all lines are eligible.
         B     PUNCH              ; Go write the line to INTRDR
NX_ON    DS    0H
         CLC   XNX(2),=CL2'NX'    ; Is it non-excluded line?
         BE    PUNCH              ; Yes, write the line to INTRDR
         B     LOOP_END
PUNCH    DS    0H
         MVI   CARD,C' '          ; Prepare
         MVC   CARD+1(L'CARD-1),CARD   ; ...
         L     R15,LRECL@         ; Length to move
         BCT   R15,*+10           ; Copy the file line to ------+
         MVC   CARD(0),LINE       ; *** executed ***            |
         EX    R15,*-6            ; ... punch card  <-----------+
* make sure the first card is a job card.
         TM    FIRSTCARD,L'FIRSTCARD  ; Did we read anything yet?
         BNO   NOT_FIRSTCARD      ; Yes, job card already sent
         NI    FIRSTCARD,255-L'FIRSTCARD ; Reset the flag
* check the first card, make sure it is a job card, else
* exit with error message.
         CLC   CARD(1),=CL2'//'   ; JCL?
         BNE   NOJOB_ERR          ; No, exit
         LA    R1,CARD+2          ; first char of possible jobname
         TRT   0(68,R1),TBLBLNK   ; Find first blank
         BZ    NOJOB_ERR          ; Not there
         LR    R15,R1             ; address of a blank
         LA    R14,CARD+2         ; First non-blank address
         SR    R15,R14            ; Get the size
         LTR   R15,R15            ; Just //
         BNP   NOJOB_ERR          ; Looks like it
         C     R15,=F'8'          ; ???
         BH    NOJOB_ERR          ; Too big
         BCT   R15,*+10           ; Copy Possible jobname ------+
         MVC   JOBNAME(0),CARD+2  ; *** executed ***            |
         EX    R15,*-6            ; to the holding area <-------+
         LA    R15,CARD           ; Get the last byte
         A     R15,LRECL@         ; ... address
         BCTR  R15,0              ; ... of a card
         SR    R15,R1             ; That much is left to scan
         BCT   R15,*+10           ; Look for the first non-blank -+
         TRT   0(0,R1),TBLNBLNK   ; *** executed ***              |
         EX    R15,*-6            ; ...   <-----------------------+
         BZ    NOJOB_ERR          ; Not there
         CLC   0(4,R1),=CL4'JOB ' ; Is it a JOB card?
         BNE   NOJOB_ERR          ; No, too bad
NOT_FIRSTCARD DS 0H
*+       LA    R1,CARD
*+       L     R0,LRECL@
*+       TPUT  (1),(0)
*
* Write the card to internal reader.
*
         PUT   RPL=INTRPL
         LTR   R15,R15
         BZ    LOOP_INCR
         LA    R1,=CL6'PUT'       ; Substitution for error message
         B     XSRPLERR           ; Issue error end exit
* incr the count of "punched" lines
LOOP_INCR L    R1,COUNT
         LA    R1,1(,R1)
         ST    R1,COUNT
LOOP_END DS 0H
         LA    R5,1(,R5)          ; Get the next line number
         ST    R5,LINE1           ; Save there for ISREDIT
         B     LOOP               ; Keep processing lines.
LOOP_OUT DS 0H
*--------------------------------------------------------------------*
* Normal exit - display count of changed lines, also job name.
*--------------------------------------------------------------------*
FINAL_MSG  DS 0H
         MVC   EWORKS(LFINAL_S_MSG+4),FINAL_S_MSG ; Short msg model
         MVC   EWORKL(LFINAL_L_MSG+4),FINAL_L_MSG ; Long  msg model
* Issue ENDREQ, get the job number
         ENDREQ RPL=INTRPL
         LA    R1,=CL6'ENDREQ'    ; setup for error message
         LTR   R15,R15            ; Was there an error?
         BNZ   XSRPLERR           ; Yes.
 MVC (EWORKS+JOB_S_MSG-FINAL_S_MSG)(8),RPLRBAR-IFGRPL+INTRPL ; Jobnum
 MVC (EWORKL+JOB_L_MSG-FINAL_L_MSG)(8),RPLRBAR-IFGRPL+INTRPL ; ...
 MVC (EWORKL+JOBN_L_MSG-FINAL_L_MSG)(8),JOBNAME              ; Jobname
         L     R1,COUNT           ; Cards count
         CVD   R1,DWORD           ; ... printable
 ED  (EWORKL+FINAL_L_COUNT-FINAL_L_MSG)(L'FINAL_L_COUNT),DWORD+5
         BAL   R8,XSERRMSG        ; Issue SETMSG
         BAL   R8,CLOSE_INTRDR    ; Close/Dealloc INTRDR
         B     EXIT0              ; Done
     EJECT ,
*==============================
* Allocate the internal reader
*==============================
ALLOC_INTRDR DS 0H
         MVC   SVC99TU(LSVC99TU),SVC99TUM  ; Copy text units to wrkarea
         LA    R4,SVC99RB         ; SVC 99 request block
         ST    R4,SVC99ARB        ; SVC 99 plist
         OI    SVC99ARB,X'80'
         USING S99RB,R4
         MVI   S99RBLN,20         ; Size
         MVI   S99VERB,S99VRBAL   ; DSNAME allocation
         LA    R0,SVC99TUP        ; pointers to text units
         ST    R0,S99TXTPP        ; Save in svc 99 rb
         DROP  R4
* build text units and their pointers.
         LA    R0,RTDDN-SVC99TUM+SVC99TU ; ... in workarea
         ST    R0,SVC99TUP        ; Create 1st pointer
         LA    R0,CLOSEF-SVC99TUM+SVC99TU ; ... in workarea
         ST    R0,SVC99TUP+4      ;    2nd pointer
         LA    R0,SYSOU-SVC99TUM+SVC99TU ; ... in workarea
         ST    R0,SVC99TUP+8      ;    3rd pointer
         LA    R0,SPGNM-SVC99TUM+SVC99TU ; ... in workarea
         ST    R0,SVC99TUP+12     ;    4th pointer
         OI    SVC99TUP+12,X'80'  ; mark as last pointer
         LA    R1,SVC99ARB        ; Plist address
         DYNALLOC                 ; svc 99
         BR    R8                 ; Back to caller
         EJECT ,
*=============================================
* Unalocate the internal reader - build plist
*=============================================
UNALC_INTRDR_BUILD DS 0H
         LA    R4,SVC99RB_U       ; SVC 99 request block
         ST    R4,SVC99ARB_U      ; SVC 99 plist
         OI    SVC99ARB_U,X'80'
         USING S99RB,R4
         MVI   S99RBLN,20         ; Size
         MVI   S99VERB,S99VRBUN   ; DSNAME unallocation
         LA    R0,SVC99TUP_U      ; Pointer to text units - dealloc
         ST    R0,S99TXTPP        ; Save in svc 99 rb
         DROP  R4
* build text units and their pointers.
         LA    R0,UNDDN-SVC99TUM+SVC99TU ; ... in workarea
         ST    R0,SVC99TUP_U      ; Create 1st pointer
         LA    R0,UNALC-SVC99TUM+SVC99TU ; ... in workarea
         ST    R0,SVC99TUP_U+4    ;    2nd pointer
         OI    SVC99TUP_U+4,X'80' ; mark as last pointer
         LA    R4,RTDDN+SVC99TU-SVC99TUM  ; First text unit
         USING S99TUNIT,R4
* copy length+ddname to unalloc text unit
         MVC   (S99TULNG-S99TUNIT+UNDDN-SVC99TUM+SVC99TU)(2),S99TULNG
         MVC   (S99TUPAR-S99TUNIT+UNDDN-SVC99TUM+SVC99TU)(8),S99TUPAR
         DROP  R4
         BR    R8                 ; Back to caller
         EJECT ,
*=============================================================
* Build ACB and RPL for internal reader
*=============================================================
GENCB_INTRDR DS 0H
         GENCB  BLK=ACB,DDNAME=(*,INTRDR_DDNAME),                      *
               LENGTH=INTACBL,                                         *
               MACRF=(OUT,ADR,SEQ),                                    *
               WAREA=(S,INTACB),                                       *
               MF=(G,EWORKL,GACBL)
         LTR   R15,R15
         BNZ   GENCB_ERR_ACB      ; Did not work
         GENCB  BLK=RPL,ACB=(S,INTACB),                                *
               AREA=(S,CARD),AREALEN=L'CARD,                           *
               LENGTH=INTRPLL,                                         *
               MSGAREA=(S,EWORKL),                                     *
               MSGLEN=L'EWORKL,                                        *
               RECLEN=L'CARD,                                          *
               WAREA=(S,INTRPL),                                       *
               OPTCD=(ADR,SEQ,SYN,NUP),                                *
               MF=(G,EWORKL,GRPLL)
         LTR   R15,R15
         BNZ   GENCB_ERR_RPL      ; Did not work
         BR    R8                 ; Back to caller
GENCB_ERR_ACB LA   R1,=CL3'ACB'   ; For the error message
         BR    R8
GENCB_ERR_RPL LA   R1,=CL3'RPL'   ; For the error message
         BR    R8
       EJECT ,
*======================
* OPEN Internal reader
*======================
OPEN_INTRDR DS 0H
         OPEN  (INTACB,OUTPUT),MF=(E,OPENWRK)
         BR    R8
*=============================================================
* CLOSE Internal reader, will be deallocated automatically
*=============================================================
CLOSE_INTRDR DS 0H
         CLOSE (INTACB),MF=(E,CLOSEWRK)
*
* Issue unalloc request, just in case.
*
UNALLOC_INTRDR DS 0H
         LA    R1,SVC99ARB_U      ; Plist address
         DYNALLOC                 ; Free it up, just in case
         BR    R8
         EJECT ,
*================
* Error routines
*================
         SPACE 2
*####################################################################
* Process dynamic allocation errors.
*####################################################################
SVC99ERR DS  0H
         ST    R15,SVC99RC        ; Save return code
         LA    R1,DAIRFAIL_PLIST
         USING DFDSECTD,R1
         LA    R0,SVC99RB         ; SVC 99 request block addr
         ST    R0,DFS99RBP        ; ... into DAIRFAIL plist.
         LA    R0,SVC99RC         ; SVC 99 retcode
         ST    R0,DFRCP           ; ... into DAIRFAIL plist.
         LA    R0,SVC99FF02       ; IKJEFF02 address
         ST    R0,DFJEFF02        ; ... into DAIRFAIL plist.
         LA    R0,SVC99DP         ; Flags
         ST    R0,DFIDP           ; ... into DAIRFAIL plist.
* no need for CPPL address
* also no need for DFBUFP - message is not extracted.
         OI    SVC99DP,DFWTP      ; Issue WTP
         MVI   SVC99DP,DFSVC99    ; = X'32' to indicate svc 99
***
         LINK  EP=IKJEFF18        ; Link to the service routine
         LTR   R15,R15            ; ok?
         BNZ   DAIRFAIL_ISPFMSG   ; no, set ispf message.
         MVC   RETCODE(4),=F'16'  ; return code
         B     EXIT               ; bye
DAIRFAIL_ISPFMSG DS 0H
 MVC  EWORKS(LDAIRFAIL_S_ERR+4),DAIRFAIL_S_ERR ; Short msg model
 MVC  EWORKL(LDAIRFAIL_L_ERR+4),DAIRFAIL_L_ERR ; Long  msg model
         CVD   R15,DWORD          ; Edit retcode into message
 ED (EWORKL+DAIRFAIL_L_RC-DAIRFAIL_L_ERR)(L'DAIRFAIL_L_RC),DWORD+6
         BAL   R8,XSERRMSG        ; Issue SETMSG
         MVC   RETCODE(4),=F'16'
         B     EXIT
     EJECT ,
*####################################################################
* Error from GENCB building ACB or RPL for Internal Reader access.
*####################################################################
GENCB_ERR DS   0H
         MVC   EWORKS(LGENCB_S_ERR+4),GENCB_S_ERR ; Short msg model
         MVC   EWORKL(LGENCB_L_ERR+4),GENCB_L_ERR ; Long  msg model
 MVC (EWORKS+ACB_S_RPL-GENCB_S_ERR)(3),0(R1)  ; ACB or RPL substitution
 MVC (EWORKL+ACB_L_RPL-GENCB_L_ERR)(3),0(R1)  ; for short and long msgs
         BAL   R8,XSERRMSG                    ; Issue SETMSG
         MVC   RETCODE(4),=F'16'
         B     EXIT
     SPACE 3
*#############################
* First card is not a job card
*#############################
NOJOB_ERR DS  0H
         MVC   EWORKS(LNOJOB_S_ERR+4),NOJOB_S_ERR ; Short msg model
         MVC   EWORKL(LNOJOB_L_ERR+4),NOJOB_L_ERR ; Long  msg model
         BAL   R8,XSERRMSG                     ; Issue SETMSG
         MVC   RETCODE(4),=F'16'
         B     EXIT
         EJECT ,
*###########################
* Error from OPEN for INTRDR
*###########################
OPEN_INTRDR_ERR DS  0H
         MVC   EWORKS(LOPEN_S_ERR+4),OPEN_S_ERR ; Short msg model
         MVC   EWORKL(LOPEN_L_ERR+4),OPEN_L_ERR ; Long  msg model
         BAL   R8,XSERRMSG                      ; Issue SETMSG
         MVC   RETCODE(4),=F'16'
         B     EXIT
*#################################################################
* PUT or ENDREQ error processing internal reader.
*   macro name address is in r1 for message substitution
*#################################################################
*
XSRPLERR DS    0H
         MVC   EWORKS(LRPL_S_ERR+4),RPL_S_ERR ; Short msg model
         MVC   EWORKL(LRPL_L_ERR+4),RPL_L_ERR ; Long  msg model
*
         MVC   (EWORKS+RPL_S_ENDREQ-RPL_S_ERR)(6),0(R1) ; PUT or ENDREQ
         MVC   (EWORKL+RPL_L_ENDREQ-RPL_L_ERR)(6),0(R1) ; ...
*
         CVD   R15,DWORD          ; Make retcode readable
  ED    (EWORKL+RPLERRC-RPL_L_ERR)(L'RPLERRC),DWORD+6  ; into a message
         XR    R15,R15            ; Prepare
         IC    R15,RPLERRCD-IFGRPL+INTRPL ; RPL error code (reason)
         CVD   R15,DWORD          ; Make reason readable
  ED    (EWORKL+RPLREAC-RPL_L_ERR)(L'RPLREAC),DWORD+6  ; into a message
         BAL   R8,XSERRMSG        ; Issue SETMSG
         BAL   R8,CLOSE_INTRDR    ; Close/deall INTRDR
         MVC   RETCODE(4),=F'16'
         B     EXIT               ; Bye
*--------------------------------------------------------------------*
* Error routine - Process error
*   LRECL > 255 bytes
*--------------------------------------------------------------------*
PROCESS_ERROR    DS 0H
         MVC   EWORKS(LPROC_S_ERR+4),PROC_S_ERR ; Short msg model
         MVC   EWORKL(LPROC_L_ERR+4),PROC_L_ERR ; Long  msg model
         BAL   R8,XSERRMSG                      ; Issue SETMSG
         MVC   RETCODE(4),=F'12'
         B     EXIT
*--------------------------------------------------------------------*
* Error routine - invalid XNXPARM
*   user specified something other then X or NX on command line
*--------------------------------------------------------------------*
INVALID_XNXPARM  DS 0H
         MVC   EWORKS(LXNXP_S_ERR+4),XNXP_S_ERR ; Short msg model
         MVC   EWORKL(LXNXP_L_ERR+4),XNXP_L_ERR ; Long  msg model
         BAL   R8,XSERRMSG                      ; Issue SETMSG
         MVC   RETCODE(4),=F'12'
         B     EXIT
*--------------------------------------------------------------------*
* Error routine - for misc. messages
*  Error message is already built in the work area.
*   EWORKS   - short message size, 4 bytes
*   EWORKS+4 - short message, already filled up.
*   EWORKL   - long  message size, 4 bytes
*   EWORKL+4 - long  message, already filled up.
*--------------------------------------------------------------------*
XSERRMSG  DS 0H
  ISPLINK (@VDEFINE,@ZEDSMSG,EWORKS+4,@CHAR,EWORKS)
  ISPLINK (@VDEFINE,@ZEDLMSG,EWORKL+4,@CHAR,EWORKL)
  ISPLINK (@SETMSG,@ISRZ001)
  BR    R8            ; Back to caller
*--------------------------------------------------------------------*
*                    Exits
*--------------------------------------------------------------------*
EXIT0    DS    0H
         XC    RETCODE,RETCODE
         B     EXIT
*
* This exit is taken after edit macro command, and if ispf error
*  message has been set, it will be displayed.
*
MACEXIT  DS    0H                 ; Exit after edit macro.
         CLI   ZERMSG,C' '        ; ??
         BE    EXIT0
         CLI   ZERMSG,X'00'       ; ??
         BE    EXIT0
         ISPLINK (@SETMSG,ZERMSG) ; Error message set by ISPF function
EXIT     DS    0H
*
* make sure INTRDR is closed and deallocated, else c03 abend
*
         TM    RDROPEN,L'RDROPEN  ; Still open?
         BNO   EXIT98
         BAL   R8,CLOSE_INTRDR    ; Close and unalloc
         B     EXIT99
EXIT98   DS    0H
         TM    RDRALLOC,L'RDRALLOC  ; Was allocated?
         BNO   EXIT99
         BAL   R8,UNALLOC_INTRDR  ; Unallocate
EXIT99   DS    0H
         ISPLINK (@VRESET)        ; Undo VDEFINE's
         L     R15,RETCODE        ; Get return code.
         LR    R1,R13             ; Address save area.
         L     R13,4(,R13)        ; Address prev save area.
         ST    R15,16(R13)        ; Set return code.
         LA    R0,WORKLEN         ; Set length and
         FREEMAIN R,A=(1),LV=(0)  ; ... free workarea.
EXITX    DS    0H
         RETURN (14,12)           ; Retcode already set
         EJECT
*--------------------------------------------------------------------*
*     Constants and work areas
*--------------------------------------------------------------------*
*
* Models for OPEN/CLOSE macros, for INTRDR. Copied to work area
*
OPENMDL  OPEN  (*,OUTPUT),MF=L
L_OPENMDL EQU  *-OPENMDL
CLOSEMDL CLOSE (*),MF=L
L_CLOSEMDL EQU *-CLOSEMDL
*
L2       DC    F'2'
L4       DC    F'4'
L6       DC    F'6'
L8       DC    F'8'
L44      DC    F'44'
L255     DC    AL4(L'LINE)
*
* ISPLINK stuff
*
@CHAR    DC    CL8'CHAR'
@CONTROL DC    CL8'CONTROL'
@ERRORS  DC    CL8'ERRORS'
@FIXED   DC    CL8'FIXED'
@ISPLINK DC    CL8'ISPLINK'
@ISREDIT DC    CL8'ISREDIT'         ; Service name
@ISREM1  DC    C'MACRO (XNXPARM) PROCESS'   ; first macro command
@ISREM2  DC    C'(LRECL) = LRECL'           ;  macro command
* @ISREM3  DC    C'PROCESS RANGE O $'         ; Macro command
@ISREM4  DC    C'(LINE1) = LINENUM .ZFIRST'   ; Macro command
@ISREM5  DC    C'(LINE2) = LINENUM .ZLAST'    ; Macro command
@ISREM6  DC    C'(LINE) = LINE &&LINE1'       ; Macro command
@ISREM7  DC    C'(XNX) = XSTATUS &&LINE1'     ; Macro command
* @ISREM8  DC    C'LINE &&LINE1 = (LINE)'       ; Macro command
* @ISRZ000 DC    CL8'ISRZ000'         ; Message id
@ISRZ001 DC    CL8'ISRZ001'         ; Message id
@LINE    DC    C'(LINE)'
@LINE1   DC    C'(LINE1)'
@LINE2   DC    C'(LINE2)'
@LRECL   DC    C'(LRECL)'
@RETURN  DC    CL8'RETURN'
@SETMSG  DC    CL8'SETMSG'
@VDEFINE DC    CL8'VDEFINE'
@VRESET  DC    CL8'VRESET'
@XNXPARM DC    C'(XNXPARM)'
@XNX     DC    C'(XNX)'
@ZEDSMSG DC    CL8'ZEDSMSG'
@ZEDLMSG DC    CL8'ZEDLMSG'
@ZERRMSG DC    CL8'ZERRMSG'
         DS    0F
@ISREM1SZ DC   AL4(L'@ISREM1)  ; Size of 1st command
@ISREM2SZ DC   AL4(L'@ISREM2)  ; Size of 2nd command
* @ISREM3SZ DC   AL4(L'@ISREM3)  ; Size of 3rd command
@ISREM4SZ DC   AL4(L'@ISREM4)  ; Size of 4th command
@ISREM5SZ DC   AL4(L'@ISREM5)  ; Size of 5th command
@ISREM6SZ DC   AL4(L'@ISREM6)  ; Size of 6th command
@ISREM7SZ DC   AL4(L'@ISREM7)  ; Size of 7th command
* @ISREM8SZ DC   AL4(L'@ISREM8)  ; Size of 8th command
*
BLANKS   DC    CL80' '             ; Handy
*
*
* SVC 99 text units - copied to working storage
*     first 4 are for INTRDR allocation
*     next  2 are for INTRDR deallocation, just in case, to
*      prevent C03 abends.
*
SVC99TUM DS    0H
* 1st  text unit
RTDDN    DC    AL2(DALRTDDN)      ; Return ddname
         DC    AL2(1)             ; 1 parm
         DC    AL2(8)             ; size
RTDDN_N  DC    CL8' '             ; returned ddname
* 2nd  text unit
CLOSEF   DC    AL2(DALCLOSE)      ; close=free
         DC    AL2(0)             ; 0 parms
* 3rd  text unit
SYSOU    DC    AL2(DALSYSOU)      ; SYSOUT
         DC    AL2(1)             ; 1 parm
         DC    AL2(1)             ; size
         DC    C'A'               ; sysout=a
* 4th  text unit
SPGNM    DC    AL2(DALSPGNM)      ; Program name
         DC    AL2(1)             ; 1 parm
         DC    AL2(6)             ; size
         DC    CL6'INTRDR'        ; sysout=(a,,intrdr)
* 1st text unit - deallocation
UNDDN    DC    AL2(DUNDDNAM)      ; Unalloc ddname
         DC    AL2(1)             ; 1 parm
UNDDN_S  DC    AL2(0)             ; length (from alloc)
UNDDN_N  DC    CL8' '             ; ddname (from alloc)
* 2nd text unit - deallocation
UNALC    DC    AL2(DUNUNALC)      ; unalloc even if perm alloc
         DC    AL2(0)             ; no parms
LSVC99TU EQU   *-SVC99TUM
         DS    0D
*
* Two TRT tables to locate next blank and next non-blank.
*   Used in locating JOBNAME on a JOB card.
*
TBLBLNK  DC    256XL1'00'         ; Locate the blank
         ORG   TBLBLNK+C' '
         DC    X'40'              ; Stopper
         ORG   ,
TBLNBLNK DC    256AL1(*-TBLNBLNK) ; Locate non-blank
         ORG   TBLNBLNK+C' '
         DC    X'00'              ; Dont stop
         ORG   ,
         EJECT ,
*---------------------------------------------
* Error messages models - copied to work area
*---------------------------------------------
         SPACE 3
*************************************
* Final message - short message model
*************************************
         DS   0F
FINAL_S_MSG DC   AL4(LFINAL_S_MSG)     ; Message size
JOB_S_MSG DC   CL8' '
          DC   C' submitted'
LFINAL_S_MSG EQU *-FINAL_S_MSG-4       ; Message size
*************************************
* FINAL message - long  message model
*************************************
         DS   0F
FINAL_L_MSG DC   AL4(LFINAL_L_MSG)     ; Message size
         DC   C'XSUB001I Job '
JOBN_L_MSG DC   CL8' '                 ; Job name
         DC   C'('
JOB_L_MSG DC   CL8' '                  ; Job number
          DC   C') submitted; '
FINAL_L_COUNT DC X'4020206B202120'     ; Edit mask for card count
          DC   C' cards punched'
LFINAL_L_MSG EQU *-FINAL_L_MSG-4       ; Message size
         SPACE 3
*************************************
* DAIRFAIL error - short message model
*************************************
         DS    0F
DAIRFAIL_S_ERR DC   AL4(LDAIRFAIL_S_ERR)     ; Error message size
         DC    C'Dairfail error'
LDAIRFAIL_S_ERR EQU *-DAIRFAIL_S_ERR-4       ; Error message size
*************************************
* DAIRFAIL error - long  message model
*************************************
         DS    0F
DAIRFAIL_L_ERR DC   AL4(LDAIRFAIL_L_ERR)     ; Error message size
         DC    C'XSUB002E Error='
DAIRFAIL_L_RC DC X'40202120'
         DC    C' from IKJEFF18 after SVC 99 error'
LDAIRFAIL_L_ERR EQU *-DAIRFAIL_L_ERR-4       ; Error message size
         SPACE 2
*************************************
* GENCB error - short message model
*************************************
         DS   0F
GENCB_S_ERR DC   AL4(LGENCB_S_ERR)     ; Error message size
         DC   C'Unable to build '
ACB_S_RPL DC   CL3' '                ACB or RPL
LGENCB_S_ERR EQU *-GENCB_S_ERR-4       ; Error message size
*************************************
* GENCB error - long  message model
*************************************
         DS   0F
GENCB_L_ERR DC   AL4(LGENCB_L_ERR)     ; Error message size
         DC   C'XSUB003E Error from GENCB macro building '
ACB_L_RPL DC   CL3' '                ACB or RPL
         DC   C' for internal reader'
LGENCB_L_ERR EQU *-GENCB_L_ERR-4       ; Error message size
         SPACE 2
*************************************
* NOJOB error - short message model
*************************************
         DS    0F
NOJOB_S_ERR DC   AL4(LNOJOB_S_ERR)     ; Error message size
         DC    C'Not a JOB'
LNOJOB_S_ERR EQU *-NOJOB_S_ERR-4       ; Error message size
*************************************
* NOJOB error - long  message model
*************************************
         DS    0F
NOJOB_L_ERR DC   AL4(LNOJOB_L_ERR)     ; Error message size
         DC    C'XSUB004E First card of the member being edited'
         DC    C' is not a JOB card'
LNOJOB_L_ERR EQU *-NOJOB_L_ERR-4       ; Error message size
         SPACE 3
*************************************
* OPEN  error - short message model
*************************************
         DS   0F
OPEN_S_ERR DC   AL4(LOPEN_S_ERR)     ; Error message size
         DC   C'Unable to OPEN INTRDR'
LOPEN_S_ERR EQU *-OPEN_S_ERR-4       ; Error message size
*************************************
* OPEN error - long  message model
*************************************
         DS    0F
OPEN_L_ERR DC  AL4(LOPEN_L_ERR)   ; Error message size
         DC    C'XSUB005E Error from OPEN macro - '
         DC    C' for internal reader'
LOPEN_L_ERR EQU *-OPEN_L_ERR-4    ; Error message size
         SPACE 2
*********************************************
* PUT or ENDREQ error - short message model
*********************************************
         DS   0F
RPL_S_ERR DC  AL4(LRPL_S_ERR)       ; Error message size
RPL_S_ENDREQ DC CL6'nnnnnn'              ; RPL or ENDREQ
          DC C' macro error'
LRPL_S_ERR EQU *-RPL_S_ERR-4         ; Error message length
*********************************************
* PUT or ENDREQ error - long  message model
*********************************************
         DS   0F
RPL_L_ERR DC  AL4(LRPL_L_ERR)        ; Error message size
          DC  C'XSUB006E '           ; Message number
RPL_L_ENDREQ DC CL6'nnnnnn'              ; RPL or ENDREQ
          DC C' macro error; R15 ='
RPLERRC DC X'40202120'               ; Error code
          DC C' Reason ='
RPLREAC DC X'40202120'               ; Reason code
LRPL_L_ERR EQU *-RPL_L_ERR-4         ; Error message length
         SPACE 2
*************************************
* PROCESS  error - short message model
*************************************
         DS   0F
PROC_S_ERR DC   AL4(LPROC_S_ERR)     ; Error message size
         DC     C'Lrecl > 255 bytes'
LPROC_S_ERR EQU *-PROC_S_ERR-4       ; Error message size
*************************************
* PROCESS error - long  message model
*************************************
         DS    0F
PROC_L_ERR DC  AL4(LPROC_L_ERR)   ; Error message size
     DC C'XSUB007E Dataset/member Lrecl cannot be more than 255 bytes'
LPROC_L_ERR EQU *-PROC_L_ERR-4    ; Error message size
         SPACE 2
*************************************
* XNXPARM  error - short message model
*************************************
         DS   0F
XNXP_S_ERR DC   AL4(LXNXP_S_ERR)     ; Error message size
         DC    C'Invalid XS option'
LXNXP_S_ERR EQU *-XNXP_S_ERR-4       ; Error message size
*************************************
* XNXPARM error - long  message model
*************************************
         DS    0F
XNXP_L_ERR DC  AL4(LXNXP_L_ERR)   ; Error message size
   DC C'XSUB008E On command line, use "NX" to submit only non-excluded *
               lines.'
LXNXP_L_ERR EQU *-XNXP_L_ERR-4    ; Error message size
     EJECT ,
         DS    0D
         LTORG
*--------------------------------------------------------------------*
*                    DSECTS
*--------------------------------------------------------------------*
*
* Workarea dsect. R13 points to it.
*
WORKAREA DSECT
SAVEAREA DS    18F                ; Registers save area
RETCODE  DS    F                  ; Return code
*
* Work areas for OPEN/CLOSE macros, for INTRDR. Copied from data area.
*
OPENWRK  DS    XL(L_OPENMDL)      ; Open macro  work area
CLOSEWRK DS    XL(L_CLOSEMDL)     ; Close macro work area
*
ISPLINK_PLIST DS 10F              ; plist to call ISPLINK
RC       DS    F                  ; Retcode after ISPLINK
ISPLINK@ DS    F                  ; Address from load
DWORD    DS    D                  ; Dword for misc work
JOBNAME  DS    CL8                ; Jobname from the job card
         SPACE 2
*
* ISPF stuff
*
COUNT    DS    F                  ; Count of changed lines
XNXPARM  DS    CL2' '             ; Parm entered by user
XNX      DS    CL2' '             ; Current line exclude status
LINE     DS    CL255' '           ; Current line from the file
LINE1    DS    F                  ; Starting/current line number
LINE2    DS    F                  ; Last line number
LRECL    DS    F                  ; LRECL of a dataset
LRECL@   DS    F                  ; Data size (sent to INTRDR)
ZERMSG   DS    CL8' '             ; Error message ID variable
CARD     DS    CL80               ; Sent to INTRDR
*
         DS    0F
EWORKS   DS    CL80               ; Short error message work area
EWORKL   DS    CL256              ; Long  error message work area
*
*
FLAG1    DS    X'00'              ; Flag
FLAG1X   EQU   FLAG1,X'80'        ;  X was specified on command line
FLAG1NX  EQU   FLAG1,X'40'        ; NX was specified on command line
FIRSTCARD EQU  FLAG1,X'20'        ; Did not read first card yet.
RDRALLOC EQU   FLAG1,X'10'        ; INTRDR is allocated
RDROPEN  EQU   FLAG1,X'08'        ; INTRDR is open.
*
* SVC 99 areas. Initialized to zeros.
*
         DS    0D
INTRDR_DDNAME DS CL8              ; DDNAME for internal reader
DAIRFAIL_PLIST DS   XL(DFLEN)'00' ; Plist to call IKJEFF18
         DS    0F
SVC99ARB DS    F                  ; SVC99 RB address
SVC99ARB_U DS  F                  ; SVC99 RB address - unalloc
SVC99RB  DS    XL20               ; SVC 99 request block area
SVC99RB_U  DS  XL20               ; SVC 99 request block area-unalloc
SVC99TUP DS    4F'0'              ; 4 pointers to text units.
SVC99TU  DS    XL(LSVC99TU)       ; SVC 99 text units copied here
SVC99TUP_U DS  2F'0'              ; 2 pointers to text units - unalloc
SVC99RC  DS    F                  ; retcode after svc 99.
SVC99FF02 DS   F                  ; IKJEFF02 addr or zero
SVC99DP  DS    H                  ; Switches for DAIRFAIL
         PUSH  PRINT
         PRINT NOGEN
INTACB   ACB   DDNAME=INTRDR      ; ACB work area
INTACBL  EQU   *-INTACB           ; length
INTRPL   RPL   ACB=INTACB         ; RPL work area
INTRPLL  EQU   *-INTRPL           ; length
         POP   PRINT
         DS    0D
WORKLEN  EQU   *-WORKAREA
*--------------------------------------------------------------------*
         PRINT ON
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12   BASE
R13      EQU   13   WORKAREA BASE
R14      EQU   14
R15      EQU   15
*--------------------------------------------------------------------*
* MACROS and MVS control blocks
*--------------------------------------------------------------------*
*
         PRINT NOGEN
         IKJEFFDF DFDSECT=YES       ; IKJEFF18 plist
         IEFZB4D0                   ; SVC 99 plist
         IEFZB4D2                   ; SVC 99 key alloc table
*
         IFGACB
         IFGRPL
         END
