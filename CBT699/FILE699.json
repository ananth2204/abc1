{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012623000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE699.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE699.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x07'", "DS1TRBAL": "b'R6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xd8\\x00\\x01\\x04\\xd8\\x00\\x04\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04C\\x00\\x00\\x01\\x040\\x9f\\x01\\x040\\x9f#\\x03\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf7@@@'", "ispf": {"version": "04.67", "flags": 0, "createdate": "2004-11-04T00:00:00", "modifydate": "2004-11-04T23:03:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-467"}, "text": "REGULAR CBT TAPE - VERSION 467    FILE:  699\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT467.FILE699\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 4 MEMBERS COUNTED; CUMULATIVE SIZE IS 934 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/04/04    23:03:46    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x040\\x9f\\x01\\x040\\x9f\"Y\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-04T00:00:00", "modifydate": "2004-11-04T22:59:55", "lines": 17, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "Hi Sam,\n\na. you can submit the whole thing from edit session, or excluded\n   lines only or not excluded lines only - something like !XSUB NX.\nb. only first 80 bytes or less are submitted.\nc) 1st card is verified to be a job card.\nd) stays in full screen mode.\ne) short message in the upper right corner; press PF1 for a long\n   message.\nf) I use XSUB as module name; for ispf macros in assembler you\n   have to use !XSUB. not sure if there is a shortcut?\n\nI had to look thru the code since I wrote it many years ago and\nthen cleaned up in 1999.\n\nAlex\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE699": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04C\\x00\\x00\\x01\\x040\\x9f\\x01\\x040\\x9f#\\x03\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf7@@@'", "ispf": {"version": "04.67", "flags": 0, "createdate": "2004-11-04T00:00:00", "modifydate": "2004-11-04T23:03:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT-467"}, "text": "//***FILE 699 is from Alex Brodsky and contains an edit macro       *   FILE 699\n//*           written in Assembler to submit the jobstream being    *   FILE 699\n//*           edited under ISPF, into the Internal Reader.          *   FILE 699\n//*                                                                 *   FILE 699\n//*     This is the XS macro which will submit the member being     *   FILE 699\n//*      edited to JES2 internal reader for processing.             *   FILE 699\n//*                                                                 *   FILE 699\n//*     The \"NX\" operand on the command line will cause the XS      *   FILE 699\n//*      to honor the excluded lines status and only submit         *   FILE 699\n//*      non-excluded lines.                                        *   FILE 699\n//*                                                                 *   FILE 699\n//*           email:  lbaaxb@verizon.net                            *   FILE 699\n//*                                                                 *   FILE 699\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XS": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x040\\x9f\\x01\\x040\\x9f\"I\\x03|\\x03|\\x00\\x00\\xc2\\xd9\\xd6\\xc4\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-04T00:00:00", "modifydate": "2004-11-04T22:49:00", "lines": 892, "newlines": 892, "modlines": 0, "user": "BRODSKY"}, "text": "* +++++ dairfail - need to test error path.\n* +++++ cppl address for the dairfail routine(?) for putline.\n         MACRO\n&NAME    ISPLINK &OPRNDS,&RC=,&ERROR=\n         GBLB  &IHBSWA\n&IHBSWA  SETB  1                       VL=1\n&NAME    LA    R1,ISPLINK_PLIST        ; ISPLINK parm list\n         IHBOPLST ,&OPRNDS,MF=(E,(1))\n         L     R15,ISPLINK@            ; Address from load\n         BALR  R14,R15                 ; Invoke ISPLINK\n         AIF   (T'&RC EQ 'O').ERR\n         ST    R15,&RC                 ; Save retcode\n.ERR     ANOP\n         AIF   (T'&ERROR EQ 'O').MEND\n         LTR   R15,R15                 ; Set condition code\n         BNZ   &ERROR\n.MEND    MEND\n*\nXS          TITLE 'Submit Edit Macro'\nXS          AMODE 31\nXS          RMODE ANY\n*----------------------------------------------------------------------\n*  This is the XS macro which will submit the member being edited\n*   to JES2 internal reader for processing.\n*  The \"NX\" operand on the command line will cause the XS to honor\n*   the excluded lines status and only submit non-excluded lines.\n*\n*  Note that workarea is below the line.\n* 02/99 axb\n*----------------------------------------------------------------------\nXS       CSECT\n         USING XS,R15             ; Address program.\n         SAVE  (14,12),,XS.SSE.ALEX.BRODSKY.&SYSDATE.&SYSTIME\n         LR    R12,R15            ; Set program base.\n         DROP  R15\n         USING XS,R12,R11         ; Address program.\n         LA    R11,2048(R12)\n         LA    R11,2048(R11)\n         LA    R0,WORKLEN         ; Set length and\n         GETMAIN R,LV=(0),LOC=BELOW ; ... get dynamic save area.\n         LA    R6,0(R1)\n         LA    R7,WORKLEN         ; Clear save area.\n         SR    R8,R8\n         SR    R9,R9\n         MVCL  R6,R8              ; Clear GETMAIN area.\n         ST    R1,8(R13)          ; Chain saveareas.\n         ST    R13,4(R1)          ; ...\n         LR    R13,R1             ; ...\n         USING WORKAREA,R13\n****     XC    RETCODE(4),RETCODE ; Set normal return code - 0\n         L     R1,4(,R13)         ; Get to the prev savearea\n         LM    R0,R1,20(R1)       ; Restore parm pointers\n         SPACE 3\n*\n* End of housekeeping statements.\n*\n*------------------------------------------------------------------\nSTART    DS    0H\n         LR    R10,R1\n         MVC   XNXPARM(2),BLANKS  ; Prepare\n         MVC   XNX(2),BLANKS      ; Prepare\n         MVC   OPENWRK(L_OPENMDL),OPENMDL    ; Open and Close macros\n         MVC   CLOSEWRK(L_CLOSEMDL),CLOSEMDL ; ... workareas\n         OI    FIRSTCARD,L'FIRSTCARD  ; flag\n         MVC   JOBNAME(8),BLANKS      ; Prepare\n*\n* Load the ISPLINK interface module address and save it.\n*\n         LOAD  EPLOC=@ISPLINK\n         ST    R0,ISPLINK@        ; Save ISPLINK address\n*\n         ISPLINK (@CONTROL,@ERRORS,@RETURN),RC=RETCODE,ERROR=EXIT\n*\n* Issue VDEFINE for the following variables:\n*   XNXPARM = parameter X or NX from the command line\n*   XNX     = exclude status of a current line\n*   LRECL   = LRECL of a current dataset\n*   LINE    = data line currently processed\n*   LINE1   = 1 (starting line to be submitted)\n*   LINE2   = Ending line of member/dataset (last line)\n*\n  ISPLINK (@VDEFINE,@XNXPARM,XNXPARM,@CHAR,L2),RC=RETCODE,ERROR=EXIT\n  ISPLINK (@VDEFINE,@ZERRMSG,ZERMSG,@CHAR,L8)\n*\n* Issue first macro cmd\n*\n* ISREDIT MACRO (XNXPARM) PROCESS\n*\n      ISPLINK (@ISREDIT,@ISREM1SZ,@ISREM1),RC=RETCODE,ERROR=MACEXIT\n*\n  ISPLINK (@VDEFINE,@XNX,XNX,@CHAR,L2),RC=RETCODE,ERROR=EXIT\n  ISPLINK (@VDEFINE,@LINE1,LINE1,@FIXED,L4),RC=RETCODE,ERROR=EXIT\n  ISPLINK (@VDEFINE,@LINE2,LINE2,@FIXED,L4),RC=RETCODE,ERROR=EXIT\n  ISPLINK (@VDEFINE,@LRECL,LRECL,@FIXED,L4),RC=RETCODE,ERROR=EXIT\n*\n* ISREDIT (LRECL) = LRECL\n*\n      ISPLINK (@ISREDIT,@ISREM2SZ,@ISREM2),RC=RETCODE,ERROR=MACEXIT\n*\n*\n* We will be punching out no more than 80 bytes. Exit if lrecl > 255\n*\n*\n         MVC   LRECL@(4),LRECL    ; Init data size\n         CLC   LRECL(4),=F'255'   ; Too wide?\n         BH    PROCESS_ERROR      ; LRECL > 255\n         CLC   LRECL(4),=F'80'    ; Too wide?\n         BNH   *+10               ; No, skip next instruction ------+\n         MVC   LRECL@(4),=F'80'   ; ... yes, limit to 80            |\n*                                            <----------------------+\n*\n  ISPLINK (@VDEFINE,@LINE,LINE,@CHAR,L255),RC=RETCODE,ERROR=EXIT\n*--------------------------------------------------------------------*\n* Extract the first and last line numbers\n*  ISREDIT (LINE1) = LINENUM .ZFIRST\n*  ISREDIT (LINE2) = LINENUM .ZLAST\n*--------------------------------------------------------------------*\n*\n      ISPLINK (@ISREDIT,@ISREM4SZ,@ISREM4),RC=RETCODE\n      ISPLINK (@ISREDIT,@ISREM5SZ,@ISREM5),RC=RETCODE\n*--------------------------------------------------------------------*\n* Determine if the user requested processing of\n*  non-exclulded lines. Note that macro arguments are not uppercased\n*  by the ISREDIT processing.\n*--------------------------------------------------------------------*\n         OC    XNXPARM,BLANKS     ; Cheap uppercase\n         CLC   XNXPARM(2),=CL2'NX'     ; Nonexcluded lines only?\n         BE    NONEXCLUDED\n         CLC   XNXPARM(2),BLANKS  ; Indifferent?\n         BNE   INVALID_XNXPARM    ; Bad input.\n         B     XNXDONE            ; Continue\nNONEXCLUDED  OI  FLAG1NX,L'FLAG1NX     ; Set flag\nXNXDONE  DS    0H\n*\n* Allocate internal reader.\n*\n         BAL   R8,ALLOC_INTRDR    ; Build svc99 plist and issue it\n         LTR   R15,R15            ; Any luck?\n         BNZ   SVC99ERR           ; No.\n         OI    RDRALLOC,L'RDRALLOC  ; mark as allocated\n         MVC   INTRDR_DDNAME(8),BLANKS    ; Prepare\n         LA    R4,RTDDN+SVC99TU-SVC99TUM  ; First text unit\n         USING S99TUNIT,R4\n         LH    R15,S99TULNG       ; Length of returned DDNAME\n         BCT   R15,*+10           ; around ----------------------+\n         MVC   INTRDR_DDNAME(0),S99TUPAR  ; *** executed ***     |\n         EX    R15,*-6            ; copy ddname  <---------------+\n         DROP  R4\n* fill up unalloc plist (need it just in case)\n         BAL   R8,UNALC_INTRDR_BUILD   ; Build plist\n         BAL   R8,GENCB_INTRDR         ; Build ACB and RPL for INTRDR\n         LTR   R15,R15\n         BNZ   GENCB_ERR\n         BAL   R8,OPEN_INTRDR     ; Open INTRDR.\n         LTR   R15,R15\n         BNZ   OPEN_INTRDR_ERR    ; Did not work\n         OI    RDROPEN,L'RDROPEN  ; mark as open\n*--------------------------------------------------------------------*\n* Loop thru the lines specified, \"punching\" lines as required.\n*  if \"NX\" was requested, query the exclude status of each\n*  line, otherwise dont bother.\n*--------------------------------------------------------------------*\n         L     R5,LINE1           ; Get starting line\nLOOP     DS    0H\n         C     R5,LINE2           ; Are we at the end?\n         BH    LOOP_OUT           ; yes, we are finished\n*\n* Get the data line\n*  ISREDIT (LINE) = LINE &&LINE1\n*\n      ISPLINK (@ISREDIT,@ISREM6SZ,@ISREM6),RC=RETCODE,ERROR=MACEXIT\n*\n         TM    FLAG1NX,L'FLAG1NX  ; NX flag set?\n         BE    XNX00              ; No, dont bother getting stat\n*\n* get the exclude status for this line\n*\n*  ISREDIT (XNX) = XSTATUS &&LINE1\n*\n      ISPLINK (@ISREDIT,@ISREM7SZ,@ISREM7),RC=RETCODE,ERROR=MACEXIT\nXNX00    DS    0H\n         TM    FLAG1NX,L'FLAG1NX  ; Process non-excluded lines only?\n         BO    NX_ON              ; Yes\n* all lines are eligible.\n         B     PUNCH              ; Go write the line to INTRDR\nNX_ON    DS    0H\n         CLC   XNX(2),=CL2'NX'    ; Is it non-excluded line?\n         BE    PUNCH              ; Yes, write the line to INTRDR\n         B     LOOP_END\nPUNCH    DS    0H\n         MVI   CARD,C' '          ; Prepare\n         MVC   CARD+1(L'CARD-1),CARD   ; ...\n         L     R15,LRECL@         ; Length to move\n         BCT   R15,*+10           ; Copy the file line to ------+\n         MVC   CARD(0),LINE       ; *** executed ***            |\n         EX    R15,*-6            ; ... punch card  <-----------+\n* make sure the first card is a job card.\n         TM    FIRSTCARD,L'FIRSTCARD  ; Did we read anything yet?\n         BNO   NOT_FIRSTCARD      ; Yes, job card already sent\n         NI    FIRSTCARD,255-L'FIRSTCARD ; Reset the flag\n* check the first card, make sure it is a job card, else\n* exit with error message.\n         CLC   CARD(1),=CL2'//'   ; JCL?\n         BNE   NOJOB_ERR          ; No, exit\n         LA    R1,CARD+2          ; first char of possible jobname\n         TRT   0(68,R1),TBLBLNK   ; Find first blank\n         BZ    NOJOB_ERR          ; Not there\n         LR    R15,R1             ; address of a blank\n         LA    R14,CARD+2         ; First non-blank address\n         SR    R15,R14            ; Get the size\n         LTR   R15,R15            ; Just //\n         BNP   NOJOB_ERR          ; Looks like it\n         C     R15,=F'8'          ; ???\n         BH    NOJOB_ERR          ; Too big\n         BCT   R15,*+10           ; Copy Possible jobname ------+\n         MVC   JOBNAME(0),CARD+2  ; *** executed ***            |\n         EX    R15,*-6            ; to the holding area <-------+\n         LA    R15,CARD           ; Get the last byte\n         A     R15,LRECL@         ; ... address\n         BCTR  R15,0              ; ... of a card\n         SR    R15,R1             ; That much is left to scan\n         BCT   R15,*+10           ; Look for the first non-blank -+\n         TRT   0(0,R1),TBLNBLNK   ; *** executed ***              |\n         EX    R15,*-6            ; ...   <-----------------------+\n         BZ    NOJOB_ERR          ; Not there\n         CLC   0(4,R1),=CL4'JOB ' ; Is it a JOB card?\n         BNE   NOJOB_ERR          ; No, too bad\nNOT_FIRSTCARD DS 0H\n*+       LA    R1,CARD\n*+       L     R0,LRECL@\n*+       TPUT  (1),(0)\n*\n* Write the card to internal reader.\n*\n         PUT   RPL=INTRPL\n         LTR   R15,R15\n         BZ    LOOP_INCR\n         LA    R1,=CL6'PUT'       ; Substitution for error message\n         B     XSRPLERR           ; Issue error end exit\n* incr the count of \"punched\" lines\nLOOP_INCR L    R1,COUNT\n         LA    R1,1(,R1)\n         ST    R1,COUNT\nLOOP_END DS 0H\n         LA    R5,1(,R5)          ; Get the next line number\n         ST    R5,LINE1           ; Save there for ISREDIT\n         B     LOOP               ; Keep processing lines.\nLOOP_OUT DS 0H\n*--------------------------------------------------------------------*\n* Normal exit - display count of changed lines, also job name.\n*--------------------------------------------------------------------*\nFINAL_MSG  DS 0H\n         MVC   EWORKS(LFINAL_S_MSG+4),FINAL_S_MSG ; Short msg model\n         MVC   EWORKL(LFINAL_L_MSG+4),FINAL_L_MSG ; Long  msg model\n* Issue ENDREQ, get the job number\n         ENDREQ RPL=INTRPL\n         LA    R1,=CL6'ENDREQ'    ; setup for error message\n         LTR   R15,R15            ; Was there an error?\n         BNZ   XSRPLERR           ; Yes.\n MVC (EWORKS+JOB_S_MSG-FINAL_S_MSG)(8),RPLRBAR-IFGRPL+INTRPL ; Jobnum\n MVC (EWORKL+JOB_L_MSG-FINAL_L_MSG)(8),RPLRBAR-IFGRPL+INTRPL ; ...\n MVC (EWORKL+JOBN_L_MSG-FINAL_L_MSG)(8),JOBNAME              ; Jobname\n         L     R1,COUNT           ; Cards count\n         CVD   R1,DWORD           ; ... printable\n ED  (EWORKL+FINAL_L_COUNT-FINAL_L_MSG)(L'FINAL_L_COUNT),DWORD+5\n         BAL   R8,XSERRMSG        ; Issue SETMSG\n         BAL   R8,CLOSE_INTRDR    ; Close/Dealloc INTRDR\n         B     EXIT0              ; Done\n     EJECT ,\n*==============================\n* Allocate the internal reader\n*==============================\nALLOC_INTRDR DS 0H\n         MVC   SVC99TU(LSVC99TU),SVC99TUM  ; Copy text units to wrkarea\n         LA    R4,SVC99RB         ; SVC 99 request block\n         ST    R4,SVC99ARB        ; SVC 99 plist\n         OI    SVC99ARB,X'80'\n         USING S99RB,R4\n         MVI   S99RBLN,20         ; Size\n         MVI   S99VERB,S99VRBAL   ; DSNAME allocation\n         LA    R0,SVC99TUP        ; pointers to text units\n         ST    R0,S99TXTPP        ; Save in svc 99 rb\n         DROP  R4\n* build text units and their pointers.\n         LA    R0,RTDDN-SVC99TUM+SVC99TU ; ... in workarea\n         ST    R0,SVC99TUP        ; Create 1st pointer\n         LA    R0,CLOSEF-SVC99TUM+SVC99TU ; ... in workarea\n         ST    R0,SVC99TUP+4      ;    2nd pointer\n         LA    R0,SYSOU-SVC99TUM+SVC99TU ; ... in workarea\n         ST    R0,SVC99TUP+8      ;    3rd pointer\n         LA    R0,SPGNM-SVC99TUM+SVC99TU ; ... in workarea\n         ST    R0,SVC99TUP+12     ;    4th pointer\n         OI    SVC99TUP+12,X'80'  ; mark as last pointer\n         LA    R1,SVC99ARB        ; Plist address\n         DYNALLOC                 ; svc 99\n         BR    R8                 ; Back to caller\n         EJECT ,\n*=============================================\n* Unalocate the internal reader - build plist\n*=============================================\nUNALC_INTRDR_BUILD DS 0H\n         LA    R4,SVC99RB_U       ; SVC 99 request block\n         ST    R4,SVC99ARB_U      ; SVC 99 plist\n         OI    SVC99ARB_U,X'80'\n         USING S99RB,R4\n         MVI   S99RBLN,20         ; Size\n         MVI   S99VERB,S99VRBUN   ; DSNAME unallocation\n         LA    R0,SVC99TUP_U      ; Pointer to text units - dealloc\n         ST    R0,S99TXTPP        ; Save in svc 99 rb\n         DROP  R4\n* build text units and their pointers.\n         LA    R0,UNDDN-SVC99TUM+SVC99TU ; ... in workarea\n         ST    R0,SVC99TUP_U      ; Create 1st pointer\n         LA    R0,UNALC-SVC99TUM+SVC99TU ; ... in workarea\n         ST    R0,SVC99TUP_U+4    ;    2nd pointer\n         OI    SVC99TUP_U+4,X'80' ; mark as last pointer\n         LA    R4,RTDDN+SVC99TU-SVC99TUM  ; First text unit\n         USING S99TUNIT,R4\n* copy length+ddname to unalloc text unit\n         MVC   (S99TULNG-S99TUNIT+UNDDN-SVC99TUM+SVC99TU)(2),S99TULNG\n         MVC   (S99TUPAR-S99TUNIT+UNDDN-SVC99TUM+SVC99TU)(8),S99TUPAR\n         DROP  R4\n         BR    R8                 ; Back to caller\n         EJECT ,\n*=============================================================\n* Build ACB and RPL for internal reader\n*=============================================================\nGENCB_INTRDR DS 0H\n         GENCB  BLK=ACB,DDNAME=(*,INTRDR_DDNAME),                      *\n               LENGTH=INTACBL,                                         *\n               MACRF=(OUT,ADR,SEQ),                                    *\n               WAREA=(S,INTACB),                                       *\n               MF=(G,EWORKL,GACBL)\n         LTR   R15,R15\n         BNZ   GENCB_ERR_ACB      ; Did not work\n         GENCB  BLK=RPL,ACB=(S,INTACB),                                *\n               AREA=(S,CARD),AREALEN=L'CARD,                           *\n               LENGTH=INTRPLL,                                         *\n               MSGAREA=(S,EWORKL),                                     *\n               MSGLEN=L'EWORKL,                                        *\n               RECLEN=L'CARD,                                          *\n               WAREA=(S,INTRPL),                                       *\n               OPTCD=(ADR,SEQ,SYN,NUP),                                *\n               MF=(G,EWORKL,GRPLL)\n         LTR   R15,R15\n         BNZ   GENCB_ERR_RPL      ; Did not work\n         BR    R8                 ; Back to caller\nGENCB_ERR_ACB LA   R1,=CL3'ACB'   ; For the error message\n         BR    R8\nGENCB_ERR_RPL LA   R1,=CL3'RPL'   ; For the error message\n         BR    R8\n       EJECT ,\n*======================\n* OPEN Internal reader\n*======================\nOPEN_INTRDR DS 0H\n         OPEN  (INTACB,OUTPUT),MF=(E,OPENWRK)\n         BR    R8\n*=============================================================\n* CLOSE Internal reader, will be deallocated automatically\n*=============================================================\nCLOSE_INTRDR DS 0H\n         CLOSE (INTACB),MF=(E,CLOSEWRK)\n*\n* Issue unalloc request, just in case.\n*\nUNALLOC_INTRDR DS 0H\n         LA    R1,SVC99ARB_U      ; Plist address\n         DYNALLOC                 ; Free it up, just in case\n         BR    R8\n         EJECT ,\n*================\n* Error routines\n*================\n         SPACE 2\n*####################################################################\n* Process dynamic allocation errors.\n*####################################################################\nSVC99ERR DS  0H\n         ST    R15,SVC99RC        ; Save return code\n         LA    R1,DAIRFAIL_PLIST\n         USING DFDSECTD,R1\n         LA    R0,SVC99RB         ; SVC 99 request block addr\n         ST    R0,DFS99RBP        ; ... into DAIRFAIL plist.\n         LA    R0,SVC99RC         ; SVC 99 retcode\n         ST    R0,DFRCP           ; ... into DAIRFAIL plist.\n         LA    R0,SVC99FF02       ; IKJEFF02 address\n         ST    R0,DFJEFF02        ; ... into DAIRFAIL plist.\n         LA    R0,SVC99DP         ; Flags\n         ST    R0,DFIDP           ; ... into DAIRFAIL plist.\n* no need for CPPL address\n* also no need for DFBUFP - message is not extracted.\n         OI    SVC99DP,DFWTP      ; Issue WTP\n         MVI   SVC99DP,DFSVC99    ; = X'32' to indicate svc 99\n***\n         LINK  EP=IKJEFF18        ; Link to the service routine\n         LTR   R15,R15            ; ok?\n         BNZ   DAIRFAIL_ISPFMSG   ; no, set ispf message.\n         MVC   RETCODE(4),=F'16'  ; return code\n         B     EXIT               ; bye\nDAIRFAIL_ISPFMSG DS 0H\n MVC  EWORKS(LDAIRFAIL_S_ERR+4),DAIRFAIL_S_ERR ; Short msg model\n MVC  EWORKL(LDAIRFAIL_L_ERR+4),DAIRFAIL_L_ERR ; Long  msg model\n         CVD   R15,DWORD          ; Edit retcode into message\n ED (EWORKL+DAIRFAIL_L_RC-DAIRFAIL_L_ERR)(L'DAIRFAIL_L_RC),DWORD+6\n         BAL   R8,XSERRMSG        ; Issue SETMSG\n         MVC   RETCODE(4),=F'16'\n         B     EXIT\n     EJECT ,\n*####################################################################\n* Error from GENCB building ACB or RPL for Internal Reader access.\n*####################################################################\nGENCB_ERR DS   0H\n         MVC   EWORKS(LGENCB_S_ERR+4),GENCB_S_ERR ; Short msg model\n         MVC   EWORKL(LGENCB_L_ERR+4),GENCB_L_ERR ; Long  msg model\n MVC (EWORKS+ACB_S_RPL-GENCB_S_ERR)(3),0(R1)  ; ACB or RPL substitution\n MVC (EWORKL+ACB_L_RPL-GENCB_L_ERR)(3),0(R1)  ; for short and long msgs\n         BAL   R8,XSERRMSG                    ; Issue SETMSG\n         MVC   RETCODE(4),=F'16'\n         B     EXIT\n     SPACE 3\n*#############################\n* First card is not a job card\n*#############################\nNOJOB_ERR DS  0H\n         MVC   EWORKS(LNOJOB_S_ERR+4),NOJOB_S_ERR ; Short msg model\n         MVC   EWORKL(LNOJOB_L_ERR+4),NOJOB_L_ERR ; Long  msg model\n         BAL   R8,XSERRMSG                     ; Issue SETMSG\n         MVC   RETCODE(4),=F'16'\n         B     EXIT\n         EJECT ,\n*###########################\n* Error from OPEN for INTRDR\n*###########################\nOPEN_INTRDR_ERR DS  0H\n         MVC   EWORKS(LOPEN_S_ERR+4),OPEN_S_ERR ; Short msg model\n         MVC   EWORKL(LOPEN_L_ERR+4),OPEN_L_ERR ; Long  msg model\n         BAL   R8,XSERRMSG                      ; Issue SETMSG\n         MVC   RETCODE(4),=F'16'\n         B     EXIT\n*#################################################################\n* PUT or ENDREQ error processing internal reader.\n*   macro name address is in r1 for message substitution\n*#################################################################\n*\nXSRPLERR DS    0H\n         MVC   EWORKS(LRPL_S_ERR+4),RPL_S_ERR ; Short msg model\n         MVC   EWORKL(LRPL_L_ERR+4),RPL_L_ERR ; Long  msg model\n*\n         MVC   (EWORKS+RPL_S_ENDREQ-RPL_S_ERR)(6),0(R1) ; PUT or ENDREQ\n         MVC   (EWORKL+RPL_L_ENDREQ-RPL_L_ERR)(6),0(R1) ; ...\n*\n         CVD   R15,DWORD          ; Make retcode readable\n  ED    (EWORKL+RPLERRC-RPL_L_ERR)(L'RPLERRC),DWORD+6  ; into a message\n         XR    R15,R15            ; Prepare\n         IC    R15,RPLERRCD-IFGRPL+INTRPL ; RPL error code (reason)\n         CVD   R15,DWORD          ; Make reason readable\n  ED    (EWORKL+RPLREAC-RPL_L_ERR)(L'RPLREAC),DWORD+6  ; into a message\n         BAL   R8,XSERRMSG        ; Issue SETMSG\n         BAL   R8,CLOSE_INTRDR    ; Close/deall INTRDR\n         MVC   RETCODE(4),=F'16'\n         B     EXIT               ; Bye\n*--------------------------------------------------------------------*\n* Error routine - Process error\n*   LRECL > 255 bytes\n*--------------------------------------------------------------------*\nPROCESS_ERROR    DS 0H\n         MVC   EWORKS(LPROC_S_ERR+4),PROC_S_ERR ; Short msg model\n         MVC   EWORKL(LPROC_L_ERR+4),PROC_L_ERR ; Long  msg model\n         BAL   R8,XSERRMSG                      ; Issue SETMSG\n         MVC   RETCODE(4),=F'12'\n         B     EXIT\n*--------------------------------------------------------------------*\n* Error routine - invalid XNXPARM\n*   user specified something other then X or NX on command line\n*--------------------------------------------------------------------*\nINVALID_XNXPARM  DS 0H\n         MVC   EWORKS(LXNXP_S_ERR+4),XNXP_S_ERR ; Short msg model\n         MVC   EWORKL(LXNXP_L_ERR+4),XNXP_L_ERR ; Long  msg model\n         BAL   R8,XSERRMSG                      ; Issue SETMSG\n         MVC   RETCODE(4),=F'12'\n         B     EXIT\n*--------------------------------------------------------------------*\n* Error routine - for misc. messages\n*  Error message is already built in the work area.\n*   EWORKS   - short message size, 4 bytes\n*   EWORKS+4 - short message, already filled up.\n*   EWORKL   - long  message size, 4 bytes\n*   EWORKL+4 - long  message, already filled up.\n*--------------------------------------------------------------------*\nXSERRMSG  DS 0H\n  ISPLINK (@VDEFINE,@ZEDSMSG,EWORKS+4,@CHAR,EWORKS)\n  ISPLINK (@VDEFINE,@ZEDLMSG,EWORKL+4,@CHAR,EWORKL)\n  ISPLINK (@SETMSG,@ISRZ001)\n  BR    R8            ; Back to caller\n*--------------------------------------------------------------------*\n*                    Exits\n*--------------------------------------------------------------------*\nEXIT0    DS    0H\n         XC    RETCODE,RETCODE\n         B     EXIT\n*\n* This exit is taken after edit macro command, and if ispf error\n*  message has been set, it will be displayed.\n*\nMACEXIT  DS    0H                 ; Exit after edit macro.\n         CLI   ZERMSG,C' '        ; ??\n         BE    EXIT0\n         CLI   ZERMSG,X'00'       ; ??\n         BE    EXIT0\n         ISPLINK (@SETMSG,ZERMSG) ; Error message set by ISPF function\nEXIT     DS    0H\n*\n* make sure INTRDR is closed and deallocated, else c03 abend\n*\n         TM    RDROPEN,L'RDROPEN  ; Still open?\n         BNO   EXIT98\n         BAL   R8,CLOSE_INTRDR    ; Close and unalloc\n         B     EXIT99\nEXIT98   DS    0H\n         TM    RDRALLOC,L'RDRALLOC  ; Was allocated?\n         BNO   EXIT99\n         BAL   R8,UNALLOC_INTRDR  ; Unallocate\nEXIT99   DS    0H\n         ISPLINK (@VRESET)        ; Undo VDEFINE's\n         L     R15,RETCODE        ; Get return code.\n         LR    R1,R13             ; Address save area.\n         L     R13,4(,R13)        ; Address prev save area.\n         ST    R15,16(R13)        ; Set return code.\n         LA    R0,WORKLEN         ; Set length and\n         FREEMAIN R,A=(1),LV=(0)  ; ... free workarea.\nEXITX    DS    0H\n         RETURN (14,12)           ; Retcode already set\n         EJECT\n*--------------------------------------------------------------------*\n*     Constants and work areas\n*--------------------------------------------------------------------*\n*\n* Models for OPEN/CLOSE macros, for INTRDR. Copied to work area\n*\nOPENMDL  OPEN  (*,OUTPUT),MF=L\nL_OPENMDL EQU  *-OPENMDL\nCLOSEMDL CLOSE (*),MF=L\nL_CLOSEMDL EQU *-CLOSEMDL\n*\nL2       DC    F'2'\nL4       DC    F'4'\nL6       DC    F'6'\nL8       DC    F'8'\nL44      DC    F'44'\nL255     DC    AL4(L'LINE)\n*\n* ISPLINK stuff\n*\n@CHAR    DC    CL8'CHAR'\n@CONTROL DC    CL8'CONTROL'\n@ERRORS  DC    CL8'ERRORS'\n@FIXED   DC    CL8'FIXED'\n@ISPLINK DC    CL8'ISPLINK'\n@ISREDIT DC    CL8'ISREDIT'         ; Service name\n@ISREM1  DC    C'MACRO (XNXPARM) PROCESS'   ; first macro command\n@ISREM2  DC    C'(LRECL) = LRECL'           ;  macro command\n* @ISREM3  DC    C'PROCESS RANGE O $'         ; Macro command\n@ISREM4  DC    C'(LINE1) = LINENUM .ZFIRST'   ; Macro command\n@ISREM5  DC    C'(LINE2) = LINENUM .ZLAST'    ; Macro command\n@ISREM6  DC    C'(LINE) = LINE &&LINE1'       ; Macro command\n@ISREM7  DC    C'(XNX) = XSTATUS &&LINE1'     ; Macro command\n* @ISREM8  DC    C'LINE &&LINE1 = (LINE)'       ; Macro command\n* @ISRZ000 DC    CL8'ISRZ000'         ; Message id\n@ISRZ001 DC    CL8'ISRZ001'         ; Message id\n@LINE    DC    C'(LINE)'\n@LINE1   DC    C'(LINE1)'\n@LINE2   DC    C'(LINE2)'\n@LRECL   DC    C'(LRECL)'\n@RETURN  DC    CL8'RETURN'\n@SETMSG  DC    CL8'SETMSG'\n@VDEFINE DC    CL8'VDEFINE'\n@VRESET  DC    CL8'VRESET'\n@XNXPARM DC    C'(XNXPARM)'\n@XNX     DC    C'(XNX)'\n@ZEDSMSG DC    CL8'ZEDSMSG'\n@ZEDLMSG DC    CL8'ZEDLMSG'\n@ZERRMSG DC    CL8'ZERRMSG'\n         DS    0F\n@ISREM1SZ DC   AL4(L'@ISREM1)  ; Size of 1st command\n@ISREM2SZ DC   AL4(L'@ISREM2)  ; Size of 2nd command\n* @ISREM3SZ DC   AL4(L'@ISREM3)  ; Size of 3rd command\n@ISREM4SZ DC   AL4(L'@ISREM4)  ; Size of 4th command\n@ISREM5SZ DC   AL4(L'@ISREM5)  ; Size of 5th command\n@ISREM6SZ DC   AL4(L'@ISREM6)  ; Size of 6th command\n@ISREM7SZ DC   AL4(L'@ISREM7)  ; Size of 7th command\n* @ISREM8SZ DC   AL4(L'@ISREM8)  ; Size of 8th command\n*\nBLANKS   DC    CL80' '             ; Handy\n*\n*\n* SVC 99 text units - copied to working storage\n*     first 4 are for INTRDR allocation\n*     next  2 are for INTRDR deallocation, just in case, to\n*      prevent C03 abends.\n*\nSVC99TUM DS    0H\n* 1st  text unit\nRTDDN    DC    AL2(DALRTDDN)      ; Return ddname\n         DC    AL2(1)             ; 1 parm\n         DC    AL2(8)             ; size\nRTDDN_N  DC    CL8' '             ; returned ddname\n* 2nd  text unit\nCLOSEF   DC    AL2(DALCLOSE)      ; close=free\n         DC    AL2(0)             ; 0 parms\n* 3rd  text unit\nSYSOU    DC    AL2(DALSYSOU)      ; SYSOUT\n         DC    AL2(1)             ; 1 parm\n         DC    AL2(1)             ; size\n         DC    C'A'               ; sysout=a\n* 4th  text unit\nSPGNM    DC    AL2(DALSPGNM)      ; Program name\n         DC    AL2(1)             ; 1 parm\n         DC    AL2(6)             ; size\n         DC    CL6'INTRDR'        ; sysout=(a,,intrdr)\n* 1st text unit - deallocation\nUNDDN    DC    AL2(DUNDDNAM)      ; Unalloc ddname\n         DC    AL2(1)             ; 1 parm\nUNDDN_S  DC    AL2(0)             ; length (from alloc)\nUNDDN_N  DC    CL8' '             ; ddname (from alloc)\n* 2nd text unit - deallocation\nUNALC    DC    AL2(DUNUNALC)      ; unalloc even if perm alloc\n         DC    AL2(0)             ; no parms\nLSVC99TU EQU   *-SVC99TUM\n         DS    0D\n*\n* Two TRT tables to locate next blank and next non-blank.\n*   Used in locating JOBNAME on a JOB card.\n*\nTBLBLNK  DC    256XL1'00'         ; Locate the blank\n         ORG   TBLBLNK+C' '\n         DC    X'40'              ; Stopper\n         ORG   ,\nTBLNBLNK DC    256AL1(*-TBLNBLNK) ; Locate non-blank\n         ORG   TBLNBLNK+C' '\n         DC    X'00'              ; Dont stop\n         ORG   ,\n         EJECT ,\n*---------------------------------------------\n* Error messages models - copied to work area\n*---------------------------------------------\n         SPACE 3\n*************************************\n* Final message - short message model\n*************************************\n         DS   0F\nFINAL_S_MSG DC   AL4(LFINAL_S_MSG)     ; Message size\nJOB_S_MSG DC   CL8' '\n          DC   C' submitted'\nLFINAL_S_MSG EQU *-FINAL_S_MSG-4       ; Message size\n*************************************\n* FINAL message - long  message model\n*************************************\n         DS   0F\nFINAL_L_MSG DC   AL4(LFINAL_L_MSG)     ; Message size\n         DC   C'XSUB001I Job '\nJOBN_L_MSG DC   CL8' '                 ; Job name\n         DC   C'('\nJOB_L_MSG DC   CL8' '                  ; Job number\n          DC   C') submitted; '\nFINAL_L_COUNT DC X'4020206B202120'     ; Edit mask for card count\n          DC   C' cards punched'\nLFINAL_L_MSG EQU *-FINAL_L_MSG-4       ; Message size\n         SPACE 3\n*************************************\n* DAIRFAIL error - short message model\n*************************************\n         DS    0F\nDAIRFAIL_S_ERR DC   AL4(LDAIRFAIL_S_ERR)     ; Error message size\n         DC    C'Dairfail error'\nLDAIRFAIL_S_ERR EQU *-DAIRFAIL_S_ERR-4       ; Error message size\n*************************************\n* DAIRFAIL error - long  message model\n*************************************\n         DS    0F\nDAIRFAIL_L_ERR DC   AL4(LDAIRFAIL_L_ERR)     ; Error message size\n         DC    C'XSUB002E Error='\nDAIRFAIL_L_RC DC X'40202120'\n         DC    C' from IKJEFF18 after SVC 99 error'\nLDAIRFAIL_L_ERR EQU *-DAIRFAIL_L_ERR-4       ; Error message size\n         SPACE 2\n*************************************\n* GENCB error - short message model\n*************************************\n         DS   0F\nGENCB_S_ERR DC   AL4(LGENCB_S_ERR)     ; Error message size\n         DC   C'Unable to build '\nACB_S_RPL DC   CL3' '                ACB or RPL\nLGENCB_S_ERR EQU *-GENCB_S_ERR-4       ; Error message size\n*************************************\n* GENCB error - long  message model\n*************************************\n         DS   0F\nGENCB_L_ERR DC   AL4(LGENCB_L_ERR)     ; Error message size\n         DC   C'XSUB003E Error from GENCB macro building '\nACB_L_RPL DC   CL3' '                ACB or RPL\n         DC   C' for internal reader'\nLGENCB_L_ERR EQU *-GENCB_L_ERR-4       ; Error message size\n         SPACE 2\n*************************************\n* NOJOB error - short message model\n*************************************\n         DS    0F\nNOJOB_S_ERR DC   AL4(LNOJOB_S_ERR)     ; Error message size\n         DC    C'Not a JOB'\nLNOJOB_S_ERR EQU *-NOJOB_S_ERR-4       ; Error message size\n*************************************\n* NOJOB error - long  message model\n*************************************\n         DS    0F\nNOJOB_L_ERR DC   AL4(LNOJOB_L_ERR)     ; Error message size\n         DC    C'XSUB004E First card of the member being edited'\n         DC    C' is not a JOB card'\nLNOJOB_L_ERR EQU *-NOJOB_L_ERR-4       ; Error message size\n         SPACE 3\n*************************************\n* OPEN  error - short message model\n*************************************\n         DS   0F\nOPEN_S_ERR DC   AL4(LOPEN_S_ERR)     ; Error message size\n         DC   C'Unable to OPEN INTRDR'\nLOPEN_S_ERR EQU *-OPEN_S_ERR-4       ; Error message size\n*************************************\n* OPEN error - long  message model\n*************************************\n         DS    0F\nOPEN_L_ERR DC  AL4(LOPEN_L_ERR)   ; Error message size\n         DC    C'XSUB005E Error from OPEN macro - '\n         DC    C' for internal reader'\nLOPEN_L_ERR EQU *-OPEN_L_ERR-4    ; Error message size\n         SPACE 2\n*********************************************\n* PUT or ENDREQ error - short message model\n*********************************************\n         DS   0F\nRPL_S_ERR DC  AL4(LRPL_S_ERR)       ; Error message size\nRPL_S_ENDREQ DC CL6'nnnnnn'              ; RPL or ENDREQ\n          DC C' macro error'\nLRPL_S_ERR EQU *-RPL_S_ERR-4         ; Error message length\n*********************************************\n* PUT or ENDREQ error - long  message model\n*********************************************\n         DS   0F\nRPL_L_ERR DC  AL4(LRPL_L_ERR)        ; Error message size\n          DC  C'XSUB006E '           ; Message number\nRPL_L_ENDREQ DC CL6'nnnnnn'              ; RPL or ENDREQ\n          DC C' macro error; R15 ='\nRPLERRC DC X'40202120'               ; Error code\n          DC C' Reason ='\nRPLREAC DC X'40202120'               ; Reason code\nLRPL_L_ERR EQU *-RPL_L_ERR-4         ; Error message length\n         SPACE 2\n*************************************\n* PROCESS  error - short message model\n*************************************\n         DS   0F\nPROC_S_ERR DC   AL4(LPROC_S_ERR)     ; Error message size\n         DC     C'Lrecl > 255 bytes'\nLPROC_S_ERR EQU *-PROC_S_ERR-4       ; Error message size\n*************************************\n* PROCESS error - long  message model\n*************************************\n         DS    0F\nPROC_L_ERR DC  AL4(LPROC_L_ERR)   ; Error message size\n     DC C'XSUB007E Dataset/member Lrecl cannot be more than 255 bytes'\nLPROC_L_ERR EQU *-PROC_L_ERR-4    ; Error message size\n         SPACE 2\n*************************************\n* XNXPARM  error - short message model\n*************************************\n         DS   0F\nXNXP_S_ERR DC   AL4(LXNXP_S_ERR)     ; Error message size\n         DC    C'Invalid XS option'\nLXNXP_S_ERR EQU *-XNXP_S_ERR-4       ; Error message size\n*************************************\n* XNXPARM error - long  message model\n*************************************\n         DS    0F\nXNXP_L_ERR DC  AL4(LXNXP_L_ERR)   ; Error message size\n   DC C'XSUB008E On command line, use \"NX\" to submit only non-excluded *\n               lines.'\nLXNXP_L_ERR EQU *-XNXP_L_ERR-4    ; Error message size\n     EJECT ,\n         DS    0D\n         LTORG\n*--------------------------------------------------------------------*\n*                    DSECTS\n*--------------------------------------------------------------------*\n*\n* Workarea dsect. R13 points to it.\n*\nWORKAREA DSECT\nSAVEAREA DS    18F                ; Registers save area\nRETCODE  DS    F                  ; Return code\n*\n* Work areas for OPEN/CLOSE macros, for INTRDR. Copied from data area.\n*\nOPENWRK  DS    XL(L_OPENMDL)      ; Open macro  work area\nCLOSEWRK DS    XL(L_CLOSEMDL)     ; Close macro work area\n*\nISPLINK_PLIST DS 10F              ; plist to call ISPLINK\nRC       DS    F                  ; Retcode after ISPLINK\nISPLINK@ DS    F                  ; Address from load\nDWORD    DS    D                  ; Dword for misc work\nJOBNAME  DS    CL8                ; Jobname from the job card\n         SPACE 2\n*\n* ISPF stuff\n*\nCOUNT    DS    F                  ; Count of changed lines\nXNXPARM  DS    CL2' '             ; Parm entered by user\nXNX      DS    CL2' '             ; Current line exclude status\nLINE     DS    CL255' '           ; Current line from the file\nLINE1    DS    F                  ; Starting/current line number\nLINE2    DS    F                  ; Last line number\nLRECL    DS    F                  ; LRECL of a dataset\nLRECL@   DS    F                  ; Data size (sent to INTRDR)\nZERMSG   DS    CL8' '             ; Error message ID variable\nCARD     DS    CL80               ; Sent to INTRDR\n*\n         DS    0F\nEWORKS   DS    CL80               ; Short error message work area\nEWORKL   DS    CL256              ; Long  error message work area\n*\n*\nFLAG1    DS    X'00'              ; Flag\nFLAG1X   EQU   FLAG1,X'80'        ;  X was specified on command line\nFLAG1NX  EQU   FLAG1,X'40'        ; NX was specified on command line\nFIRSTCARD EQU  FLAG1,X'20'        ; Did not read first card yet.\nRDRALLOC EQU   FLAG1,X'10'        ; INTRDR is allocated\nRDROPEN  EQU   FLAG1,X'08'        ; INTRDR is open.\n*\n* SVC 99 areas. Initialized to zeros.\n*\n         DS    0D\nINTRDR_DDNAME DS CL8              ; DDNAME for internal reader\nDAIRFAIL_PLIST DS   XL(DFLEN)'00' ; Plist to call IKJEFF18\n         DS    0F\nSVC99ARB DS    F                  ; SVC99 RB address\nSVC99ARB_U DS  F                  ; SVC99 RB address - unalloc\nSVC99RB  DS    XL20               ; SVC 99 request block area\nSVC99RB_U  DS  XL20               ; SVC 99 request block area-unalloc\nSVC99TUP DS    4F'0'              ; 4 pointers to text units.\nSVC99TU  DS    XL(LSVC99TU)       ; SVC 99 text units copied here\nSVC99TUP_U DS  2F'0'              ; 2 pointers to text units - unalloc\nSVC99RC  DS    F                  ; retcode after svc 99.\nSVC99FF02 DS   F                  ; IKJEFF02 addr or zero\nSVC99DP  DS    H                  ; Switches for DAIRFAIL\n         PUSH  PRINT\n         PRINT NOGEN\nINTACB   ACB   DDNAME=INTRDR      ; ACB work area\nINTACBL  EQU   *-INTACB           ; length\nINTRPL   RPL   ACB=INTACB         ; RPL work area\nINTRPLL  EQU   *-INTRPL           ; length\n         POP   PRINT\n         DS    0D\nWORKLEN  EQU   *-WORKAREA\n*--------------------------------------------------------------------*\n         PRINT ON\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12   BASE\nR13      EQU   13   WORKAREA BASE\nR14      EQU   14\nR15      EQU   15\n*--------------------------------------------------------------------*\n* MACROS and MVS control blocks\n*--------------------------------------------------------------------*\n*\n         PRINT NOGEN\n         IKJEFFDF DFDSECT=YES       ; IKJEFF18 plist\n         IEFZB4D0                   ; SVC 99 plist\n         IEFZB4D2                   ; SVC 99 key alloc table\n*\n         IFGACB\n         IFGRPL\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT699/FILE699.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT699", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}