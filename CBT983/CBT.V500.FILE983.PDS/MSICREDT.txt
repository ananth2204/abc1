/* We first need rexx in comment if compiled or read from SYSPROC. */
rexx_msicredt:
  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 2'. */

  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Main_Code:
  return_code = Initialization_routine()
  If (return_code = 0) Then Do
    return_code = Process_routine()
  End
  return_code = Termination_routine()
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: This is an ISPF dialog program called to do variable
            replacement in identified members.

  Syntax:   Called from MSIC.


=======================================================================

  History of Modifications
  ------------------------
vv.mm When     Who  /  What you did
----- -------- --------------------------------------------------------
01.00 20170728 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code started.

----- -------- --------------------------------------------------------

=======================================================================

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_routine:
  return_code = 0
  msg_rc = 0
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_routine:
  ADDRESS ISPEXEC "VGET (EDITDSN)"
  @trap_state = TRAPMSG("On")
  msg_state = Msg("OFF")
  sysdsn_rc = SysDsn("'"editdsn"'")
  If (sysdsn_rc <> "OK") Then Do
    msg_rc = 1
    return_code = 16
    Return return_code
  End
  msg_rc = Msg(msg_state)
  @trap_state = TRAPMSG(@trap_state)
  Address TSO ,
    "ALLOC File(@EDIT) DataSet('"editdsn"(#3EDIT)') SHR REUSE"
  alloc_rc = RC
  Address MVS ,
    "EXECIO * DiskR @EDIT (Stem editlist. Finis)"
  execio_rc = RC
  Address TSO ,
    "FREE File(@EDIT)"
  free_rc = RC

  zerrlm = ""
  Do tx = 1 to editlist.0
    If (Left(editlist.tx,1) = "*") Then Iterate
    editlist_item = Strip(Left(editlist.tx,8),"T"," ")
    Address ISPEXEC "EDIT" ,
      "Dataset('"editdsn"("editlist_item")') MACRO(MSICRMBR)"
    edit_rc = RC
    If (edit_rc = 0) Then Do
      zerrlm = zerrlm || Left(editlist_item "OK",79)
    End
    Else Do
      zerrlm = zerrlm || Left(editlist_item "Nothing changed",79)
    End
  End
  ZERRALRM = "Yes"
  ZERRSM = "Edit results"
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
  return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does any pre-termination cleanup.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_routine:
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: Parse arg myarg
  defined_state = Symbol(uppercase_letters)
  If (defined_state = "LIT") Then Do
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  End
  Return Translate(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: Parse arg myarg
  defined_state = Symbol(uppercase_letters)
  If (defined_state = "LIT") Then Do
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  End
  Return Translate(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
