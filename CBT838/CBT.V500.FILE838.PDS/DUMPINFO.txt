DUMPINFO TITLE                                                        'X
               -- DUMP SVC99 INFORMATION RETRIEVAL INFO --             X
               CENTERIOR ENERGY CORPORATION'
* MODULE NAME = DUMPINFO
* FUNCTION = PRINT SVC99 INFORMATION FROM ALL CURRENT ALLOCATIONS.
* OPERATION = GETMAIN WORKING STORAGE, ESTABLISH SAVEAREA LINKAGES;
*             IF DCB NOT SUPPLIED, OPEN DDNAME SYSPRINT;
*             PRINT SUPPLIED CHARACTER STRING ON SYSPRINT;
*             FOR EACH EXISTING ALLOCATION,
*                CALL SVC99 FOR INFORMATION;
*                PRINT INFORMATION ON SYSPRINT;
*             DUMP TRANSLATE TABLES
*             IF DCB WAS NOT SUPPLIED, CLOSE SYSPRINT;
*             UNLINK SAVEAREAS, FREEMAIN STORAGE, RETURN.
* PARAMETERS = 1. CHARACTER STRING ( AL2(LENGTH), CL(LENGTH)'...' )
*                TO BE PRINTED IN HEADINGS.
*              2. CHARACTER STRING ( CL8'...' )
*                DDNAME OF PRINT FILE TO BE USED
*             WHEN INVOKED THROUGH JCL, PARAMETER 2 NOT PRESENT.
* ATTRIBUTES = REENTRANT, REUSABLE, PROBLEM PROGRAM STATE
* DURING EXECUTION:  R13 POINTS TO GOTTEN STORAGE (SAVEAREA @ START)
*                    R12 POINTS TO START OF CSECT, IS BASE REGISTER
*                    R9 POINTS TO SYSPRINT DCB
*
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
*
DUMPINFO CSECT
DUMPINFO AMODE 24
DUMPINFO RMODE 24
         PRINT ON,GEN
         SPLEVEL
*
*...+....1....+....2....+....3....+,
         MACRO                     , THE LOCAL SYSTEM VARIABLE SYMBOL
         SETTEMP                   , &SYSECT IS ASSIGNED A VALUE WHEN
         GBLC  &TEMP               , A MACRO IS CALLED, AND THE VALUE
&TEMP    SETC '&SYSECT.'           , IS ONLY AVAILABLE IN THE MACRO--
         MEND                      , THIS MACRO, PLUS THE DECLARATION
         GBLC  &TEMP               , OF &TEMP, PROPOGATE IT OUTSIDE.
*...+....1....+....2....+....3....+,
*
         LCLC  &CSECTNM            , DEFINE FOR LATER USE
         SETTEMP                   , MAKE &SYSECT AVAILABLE, IN &TEMP
&CSECTNM SETC  '&TEMP.'            ,   AND SAVE IT FOR LATER USE
*
         LCLA  &LCLA
         LCLC  &LCLC
&LCLC    SETC  '&CSECTNM. (ASM &SYSDATE. &SYSTIME.) CENTERIOR '
&LCLA    SETA  (K'&LCLC+8-1)/8*8-1   PAD TO A MULTIPLE OF 8 MINUS 1
*
         B     AROUND-*(,R15)      BRANCH AROUND LGH BYTE, ID TEXT
*
LGHBYTE  DC    AL1(&LCLA.)                       LGH BYTE,
IDTEXT   DC    CL&LCLA.'&LCLC.'                          , ID TEXT
*
AROUND   DS    0H
         SAVE  (14,12)             SAVE CALLER'S REGISTERS
*
         LR    R12,R15             COPY BASE REGISTER
         USING &CSECTNM.,R12       TELL ASEMBLER
*
         LA    R0,L'USRDSECT       LENGTH OF DSECT
         GETMAIN RU,LV=(0)         UNCONDITIONAL
* REGISTERS 0,1,15 NOT PRESERVED -- ADDRESS OF GOTTEN STORAGE IS IN R1
*
         LR    R2,R1               PAIR R2,R3 = GOTTEN STORAGE,LENGTH
         LA    R3,L'USRDSECT       PAIR R2,R3 = GOTTEN STORAGE,LENGTH
         LR    R4,R1            PAIR R4,R5 = ANYWHERE LOC, 0 LENGTH/PAD
         XR    R5,R5            PAIR R4,R5 = ANYWHERE LOC, 0 LENGTH/PAD
         MVCL  R2,R4               CLEAR THE GOTTEN STORAGE
*
* CHAIN THE SAVE AREAS
         ST    R13,4(,R1)          STORE BACKWARD PTR IN GOTTEN
         ST    R1,8(,R13)          STORE FORWARD PTR IN CALLER'S
         LR    R13,R1              POINT R13 TO GOTTEN STORAGE
         USING USRDSECT,R13        ESTABLISH ADDRESSABILITY
*
         B     AROUND2             SKIP TO CONTINUED PROCESSING
*
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
*
RETURN   DS    0H
*
         L     R8,RC               SAVE RETURN CODE, BEFORE DROP R13
*
*        PREPARE R0 AND R1 FOR FREEMAIN, BEFORE R13 IS DROPPED
         LA    R0,L'USRDSECT       LENGTH OF AREA TO FREEMAIN
         LA    R1,USRDSECT         ADDRESS OF AREA TO FREEMAIN
         DROP  R13
         L     R13,4(,R13)         RESTORE PTR TO CALLER'S SAVE AREA
         FREEMAIN RU,LV=(0),A=(1)  UNCONDITIONAL
*
         LR    R15,R8              MOVE RETURN CODE TO PROPER REGISTER
         RETURN (14,12),T,RC=(15)  RETURN TO CALLER, WITH RC IN R15
*
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
*
AROUND2  DS    0H
         USING USRDSECT,R13        RE-ESTABLISH ADDRESSABILITY
*
         MVC   LBLSTM16,=CL4':STM'  FOR DEBUGGING PURPOSES
         MVC   LBLWCRE,=CL4'WCRE'   FOR DEBUGGING PURPOSES
         MVC   LBLDS1F,=CL4'DS1F'   FOR DEBUGGING PURPOSES
         MVC   LBLDS1H,=CL4'DS1H'   FOR DEBUGGING PURPOSES
         MVC   LBLDS1X,=CL4'DS1X'   FOR DEBUGGING PURPOSES
         MVC   ZTLIBGOT,=CL8':TLIBGOT'
         MVC   ZSDCBGOT,=CL8':SDCBGOT'
         MVC   ZOPENGOT,=CL8':OPENGOT'
         MVC   ZSNAPGOT,=CL8':SNAPGOT'
         MVC   ZWRITGOT,=CL8':WRITGOT'
*
         MVI   PRTLINE,C' '
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE
*
         MVC   SDCBGOT(DCBL#L),SDCBL       MOVE MODEL TO GOTTEN
*
         L     R6,SAVE#BWD         FETCH POINTER TO CALLER'S SAVEAREA
         L     R6,SAVE#R1-SAVEAREA(R6) FETCH SAVED PARM POINTER
         LTR   R6,R6               Q. ANY PARAMETERS?
         BZ    XPARM2               A. NO -- NO PARM 2
         TM    0(R6),X'80'         Q. IS HIGH BIT SET IN 1ST POINTER ?
         BO    XPARM2               A. YES -- ONLY 1 PARM, NO PARM 2
         L     R8,4(R6)            FETCH SECOND PARAMETER
         LTR   R8,R8               Q. IS ADDRESS ZERO ?
         BZ    XPARM2               A. YES -- NO DCB SUPPLIED
         LA    R9,SDCBGOT          R9 -> SDCBGOT
         USING IHADCB,R9           ESTABLISH ADDRESSABILITY
         MVC   DCBDDNAM,0(R8)      MOVE IN DDNAME SUPPLIED
         DROP  R9                  DROP ADDRESSABILITY
XPARM2   DS    0H
*
         TM    SYSPROPN,X'FF'      TEST THE FLAG FIELD
         BO    SNAPOPEN            FLAG WAS SET, MEANS NO NEED TO OPEN.
         LA    R9,SDCBGOT          R9 -> SDCBGOT
         USING IHADCB,R9           ESTABLISH ADDRESSABILITY
         MVC   OPENGOT(OPENL#L),OPENL     MOVE MODEL TO GOTTEN
         OPEN  ((R9),OUTPUT),MF=(E,OPENGOT)
         TM    DCBOFLGS,DCBOFOPN   Q. OPEN SUCCESSFUL ?
         BO    SNAPOPEN            A. YES -- SKIP ERROR MESSAGE
* ALLOCATE DDNAME SYSPRINT, WITH DEFAULT SYSOUT CLASS
         CECDYN  PREFIX=YYY,MF=(E,WORKAREA),                           X
               VERB=AL,      ALLOCATE                                  X
               TEXT=((DDNAM,'SYSPRINT'),SYSOU)
         DYNALLOC            ISSUE SVC99
         OPEN  ((R9),OUTPUT),MF=(E,OPENGOT)
         MVI   SYSPRDYN,X'FF'      REMEMBER TO DEALLOCATE
         TM    DCBOFLGS,DCBOFOPN   Q. OPEN SUCCESSFUL ?
         BO    SNAPOPEN            A. YES -- SKIP ERROR MESSAGE
         MVI   SYSPRDYN,X'00'      NO NEED TO DEALLOCATE
         DROP  R9                  DROP ADDRESSABILITY
         WTO   '&CSECTNM. -- OPEN UNSUCCESSFUL FOR SYSPRINT'
         MVC   RC,=F'16'           SET RETURN CODE
         B     RETURN              AND RETURN
SNAPOPEN DS    0H
         MVI   SYSPROPN,X'FF'      MESSAGE FILE IS OPEN
*
         MVC   SNAPGOT(SNAPL#L),SNAPL     MOVE MODEL TO GOTTEN
*                   (MUST BE DONE BEFORE FIRST   SNAP MF=(E,SNAPGOT) )
*
         MVC   WRITGOT(WRITL#L),WRITL     MOVE MODEL TO GOTTEN
*                      (MUST BE DONE BEFORE FIRST   BAS R14,WRITCHEK )
*
******** LA    R3,L'USRDSECT(R13)    POINT TO END OF GOTTEN STORAGE
******** LA    R2,LTORGED            POINT TO END OF CODE
******** SNAP  DCB=(R9),MF=(E,SNAPGOT),ID=101,STORAGE=((R13),(R3),     X
               (R12),(R2)),PDATA=REGS,SDATA=CB
*
         MVI   PRTLINE,C'1'
         LA    R5,PRTLINE+1
*
         MVC   0(L'IDTEXT,R5),IDTEXT                                 A
         LA    R5,L'IDTEXT+1(,R5)                                     B
*
         L     R6,SAVE#BWD         FETCH POINTER TO CALLER'S SAVEAREA
         ICM   R6,B'1111',SAVE#R1-SAVEAREA(R6) FETCH AND TEST SAVED R1
         BZ    YPARM1              WAS ZERO -- NO PARMS AT ALL
         L     R8,0(R6)            FETCH POINTER TO 1ST PARAMETER
 LA    R1,=CL16'PARMLGH='                                        DEBUG
 LA    R1,8(R1)          TARGET ADDRESS   NON-REENTRANT!!!       DEBUG
 LA    R2,0(R8)          SOURCE ADDRESS                          DEBUG
 LA    R3,2              SOURCE LENGTH                           DEBUG
 BAS   R14,CONVHEX       CALL SUBROUTINE                         DEBUG
 LA    R1,=CL16'PARM1-8='                                        DEBUG
 LA    R1,8(R1)          TARGET ADDRESS   NON-REENTRANT!!!       DEBUG
 MVC   0(8,R1),2(R8)     SOURCE ADDRESS                          DEBUG
         LH    R7,0(R8)            FETCH LENGTH FIELD
         LTR   R7,R7               Q. WAS LENGTH ZERO ?
         BZ    YPARM1              A. YES -- NULL STRING
 STH   R7,DS1H                                                   DEBUG
 LA    R1,=CL8'.R7='                                             DEBUG
 LA    R1,4(R1)          TARGET ADDRESS   NON-REENTRANT!!!       DEBUG
 LA    R2,DS1H           SOURCE ADDRESS                          DEBUG
 LA    R3,2              SOURCE LENGTH                           DEBUG
 BAS   R14,CONVHEX       CALL SUBROUTINE                         DEBUG
         CH    R7,=AL2(L'PRTLINE-1-L'IDTEXT) CHECK WHETHER TOO LONG
         BL    R7OK                NO, IT IS OK
         LH    R7,=AL2(L'PRTLINE-1-L'IDTEXT) TOO LONG -- LIMIT TO MAX.
R7OK     BCTR  R7,0                DECREMENT FOR EX INSTRUCTIONS
         EX    R7,EXMVCPRT         MOVE CHARACTER STRING TO PRINT LINE
         LA    R5,0+1+2(R7,R5)                                        B
         C     R7,=F'3'            CHECK PARM LENGTH (REMEMBER, -1)
         BL    ZPARM1              SHORTER THAN 4
         CLC   =C'SNAP',2(R8)      Q. CHECK 1ST 4 CHARACTERS
         BNE   ZPARM1              A. NO, SNAP NOT REQUESTED
         LA    R3,L'USRDSECT(R13)    POINT TO END OF GOTTEN STORAGE
         LA    R2,LTORGED            POINT TO END OF CODE
         SNAP  DCB=(R9),MF=(E,SNAPGOT),ID=103,STORAGE=((R13),(R3),     X
               (R12),(R2)),PDATA=REGS,SDATA=CB
         B     ZPARM1
EXMVCPRT MVC   0(*-*,R5),2(R8)     WILL BE EXECUTED
YPARM1   DS    0H
* FOLLOWING CODE FROM "MVS UPDATE" NO.22, JULY 1988, XEPHON INC.
         L     R2,16               POINT TO CVT
         L     R2,0(,R2)           TO TCBWORDS
         L     R2,4(,R2)           TO TCB
         L     R3,12(,R2)                    TO TIOT, & SAVE IN R3
         L     R2,180(,R2)         TO JSCB (TCBJSCB)
         L     R2,348(,R2)         TO ACTIVE JSCB (JSCBACT)
         ICM   R2,B'1111',316(R2)  TO LIFE-OF-JOB SSIB (JSCBSSIB)
         MVC   DSCL8(8),=CL8' '
         BZ    NOID                (SKIP IF NO L-O-J SSIB)
         MVC   DSCL8(8),12(R2)     COPY JOB NUMBER (SSIBJBID)
NOID     EQU   *
*     ABOVE CODE FROM "MVS UPDATE" NO.22, JULY 1988, XEPHON INC.
*
         MVC   0(8,R5),DSCL8       JOB NUMBER FROM SSIB              A
         LA    R5,8+2(,R5)                                            B
*
         MVC   0(8,R5),0(R3)       JOB NAME FROM TIOT                A
         LA    R5,8+2(,R5)                                            B
*
         MVC   0(8,R5),8(R3)       STEP NAME FROM TIOT               A
         LA    R5,8+2(,R5)                                            B
*
         MVC   0(8,R5),16(R3)      PROCSTEPNAME FROM TIOT            A
         LA    R5,8+2(,R5)                                            B
*
         USING PSA,R0              MACRO IHAPSA FROM SYS1.MACLIB
         L     R1,FLCCVT      ADDRESS OF CVT (AFTER IPL).  THIS OFFSET
*                             FIXED BY ARCHITECTURE.  (MDC450) @G50EP9A
         DROP  R0                  MACRO IHAPSA FROM SYS1.MACLIB
         USING CVT,R1              MACRO CVT FROM SYS1.AMODGEN
         L     R2,CVTSMCA    ADDRESS OF THE SYSTEM MANAGEMENT CONTROL
*                            AREA (SMCA) IF THE SYSTEM MANAGEMENT
*                            FACILITIES (SMF) OPTION IS PRESENT IN THE
*                            SYSTEM.  OTHERWISE, ZERO.
         DROP  R1                  MACRO CVT FROM SYS1.AMODGEN
         USING SMCABASE,R2         MACRO IEESMCA FROM SYS1.AMODGEN
         LA    R3,SMCASID    SYSTEM IDENTIFICATION (SID)         MDC002
         DROP  R2                  MACRO IEESMCA FROM SYS1.AMODGEN
*
         MVC   0(4,R5),0(R3)       SYSTEM IDENTIFICATION (SID)       A
         LA    R5,4+2(,R5)                                            B
*
         TIME  , RETURN DATE IN R1 AS 00YYDDDC, TIME IN R0 AS HHMMSSTH
         STM   R0,R1,STM16F        SAVE
*
         MVC   0(6,R5),=XL7'F0202020202020'                          A
         ED    0(6,R5),STM16F+5    SOURCE IS YYDDDC, FROM R1         A
         MVI   0(R5),C'D'          LEADING CHARACTER                 A
         LA    R5,6+2(,R5)                                            B
*
         MVC   0(7,R5),=XL7'F0202020202020'                          A
         ED    0(7,R5),STM16F      SOURCE IS HHMMSSTH, FROM R0       A
         MVI   0(R5),C'T'          LEADING CHARACTER                 A
         LA    R5,7+2(,R5)                                            B
* NOTE: THE EDIT MASKS ABOVE ARE BOTH XL7, SO ONLY 1 FIELD IS USED,
*      BUT DIFFERENT SUBSTRINGS OF IT ARE USED IN THE TWO INSTANCES.
*
ZPARM1   DS    0H
         BAS   R14,WRITCHEK
*
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         MACRO
         PRTFORM
&KEYSFX  SETC  '&SYSLIST(2)'(4,K'&SYSLIST(2)-4+1) RTSTA,RTTYP,RELNO,ETC
         AIF   (N'&SYSLIST NE 4).NO4TH
&SHORT   SETC  '&SYSLIST(4)'
         AIF   (K'&SHORT LT 4).NO4TH
         AIF   ('&SHORT'(1,1) NE '''' OR '&SHORT'(K'&SHORT,1) NE '''').X
               SHORTED
&SHORT   SETC  '&SHORT'(2,K'&SHORT-2)      TRIM QUOTES
         AGO   .SHORTED                    SPECIAL CASE -- PRTBITS
.NO4TH   ANOP
&SHORT   SETC  '&KEYSFX'    DUPLICATE
         AIF   ('&KEYSFX'(1,2) NE 'RT').SHORTED
&SHORT   SETC  '&KEYSFX'(3,K'&KEYSFX-3+1)         STA,  TYP,  LNO,  ETC
.SHORTED ANOP  , DONE SHORTENING                              RELNO.
&LCLA    SETA  K'&SHORT
         AIF   ('&SYSLIST(1)' EQ 'HEAD').HEAD
         AIF   ('&SYSLIST(1)' EQ 'DETAIL').DETAIL
         MNOTE 12,'&SYSLIST(1) INVALID, ONLY HEAD OR DETAIL PERMITTED'
.HEAD    MVC   PRT&KEYSFX.(&LCLA.),=C'&SHORT.'
         MEXIT
.MVC     MVC   PRT&KEYSFX.(L'&SYSLIST(2).),&SYSLIST(2).
         MEXIT
.DETAIL  ANOP
         AIF   (T'&SYSLIST(2) EQ 'C').MVC
         LA    R1,PRT&KEYSFX.      LOAD TARGET ADDRESS
         LA    R2,&SYSLIST(2).     LOAD SOURCE ADDRESS
         LA    R3,L'&SYSLIST(2).   LOAD SOURCE LENGTH
         BAS   R14,CONVHEX         CALL SUBROUTINE
         AIF   ('&SYSLIST(3)' EQ 'LOOKUP').LOOKUP
         AIF   ('&SYSLIST(3)' EQ '').MEXIT
         MNOTE 12,'SYSLIST(3)=&SYSLIST(3) INVALID, ONLY LOOKUP VALID'
.MEXIT   MEXIT
.LOOKUP  LA    R1,PRT&KEYSFX.      LOAD ADDRESS OF KEY TO LOOKUP
         LA    R2,TBL&KEYSFX.      LOAD ADDRESS OF TABLE
         BAS   R14,LOOKUP          CALL SUBROUTINE
         MEND
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
*
         PRTFORM HEAD,ZZZRELNO
         PRTFORM HEAD,ZZZRTDDN,,' DDN'
         PRTFORM HEAD,ZZZRTDSN
         PRTFORM HEAD,ZZZRTMEM
         PRTFORM HEAD,ZZZRTSTA
         PRTFORM HEAD,ZZZRTNDP
         PRTFORM HEAD,ZZZRTCDP
         PRTFORM HEAD,ZZZRTORG
         PRTFORM HEAD,ZZZRTLIM
         PRTFORM HEAD,ZZZRTTYP
         PRTFORM HEAD,ZZZRTATT
         PRTFORM HEAD,PRTBITS,,' ATTBITS'
         PRTFORM HEAD,ZZZRTLST
         MVI   PRTCCG,C'0'
*
         BAS   R14,WRITCHEK
*
*
******** LA    R3,L'USRDSECT(R13)    POINT TO END OF GOTTEN STORAGE
******** LA    R2,LTORGED            POINT TO END OF CODE
******** SNAP  DCB=(R9),MF=(E,SNAPGOT),ID=105,STORAGE=((R13),(R3),     X
               (R12),(R2)),PDATA=REGS,SDATA=CB
*
* MAIN LOOP:
         LA    R5,1          SET COUNTER TO ORDINAL 1 (1ST)
NEXTINFO EQU   *
         ST    R5,DS#RELNO
         LA    R4,DS#RELNO
* REQUEST INFORMATION FOR RELATIVE NUMBER SPECIFIED IN REGISTER 5:
         CECDYN  PREFIX=ZZZ,MF=(E,WORKAREA),                           X
               VERB=IN,      INFORMATION RETRIEVAL                     X
               TEXT=((RELNO,(R4)),RTLST,RTDDN,RTDSN,RTMEM,RTSTA,       X
               RTNDP,RTCDP,RTORG,RTLIM,RTATT,RTTYP)
         DYNALLOC            ISSUE SVC99
*
         LA    R8,WORKAREA
         USING ZZZDSECT,R8   ESTABLISH ADDRESSABILITY TO ZZZ... FIELDS
         PRTFORM DETAIL,ZZZRELNO
         PRTFORM DETAIL,ZZZRTDDN
         PRTFORM DETAIL,ZZZRTDSN
         PRTFORM DETAIL,ZZZRTMEM
         PRTFORM DETAIL,ZZZRTSTA,LOOKUP
         PRTFORM DETAIL,ZZZRTNDP,LOOKUP
         PRTFORM DETAIL,ZZZRTCDP,LOOKUP
         PRTFORM DETAIL,ZZZRTORG,LOOKUP
         PRTFORM DETAIL,ZZZRTLIM
         PRTFORM DETAIL,ZZZRTTYP,LOOKUP
         PRTFORM DETAIL,ZZZRTATT
         MVC   DS1X,ZZZRTATT
         BAS   R14,DS1XBITS  TRANSFORM DS1X INTO PRTBITS
         PRTFORM DETAIL,ZZZRTLST,LOOKUP
         DROP  R8            NO MORE NEED FOR ZZZ... FIELDS
*
         BAS   R14,WRITCHEK
*
* FORMAT INFORMATION RETURNED:
******** LA    R3,L'USRDSECT(R13)    POINT TO END OF GOTTEN STORAGE
******** LA    R2,LTORGED            POINT TO END OF CODE
******** SNAP  DCB=(R9),MF=(E,SNAPGOT),ID=(R5),STORAGE=((R13),(R3),    X
               (R12),(R2)),PDATA=REGS,SDATA=CB
*
         LA    R5,1(R5)      INCREMENT RELATIVE NUMBER REQUESTED
         LA    R1,WORKAREA   LOAD ADDRESS OF LIST
         USING ZZZDSECT,R1   REG1 POINTS TO DSECT
         TM    ZZZRTLST,X'80'  Q. IS THE HIGH BIT ON?
         DROP  R1
         BZ    NEXTINFO        A. NO, GO DO ANOTHER ONE
*
*
         LA    R1,TBLRTLST
         LA    R3,PRTLINE+1
         LA    R4,PRTLINE+L'PRTLINE-9
         BAS   R14,TBLDUMP
         MVI   PRTCCG,C'0'
         BAS   R14,WRITCHEK
*
         LA    R1,TBLRTSTA
         LA    R3,PRTLINE+1
         LA    R4,PRTLINE+L'PRTLINE-9
         BAS   R14,TBLDUMP
         BAS   R14,WRITCHEK
*
         LA    R1,TBLRTNDP
         LA    R3,PRTLINE+1
         LA    R4,PRTLINE+L'PRTLINE-9
         BAS   R14,TBLDUMP
         BAS   R14,WRITCHEK
*
         LA    R1,TBLRTCDP
         LA    R3,PRTLINE+1
         LA    R4,PRTLINE+L'PRTLINE-9
         BAS   R14,TBLDUMP
         BAS   R14,WRITCHEK
*
         LA    R1,TBLRTORG
         LA    R3,PRTLINE+1
         LA    R4,PRTLINE+L'PRTLINE-9
         BAS   R14,TBLDUMP
MORE#ORG STM   R15,R2,STM16F SAVE POINTERS+INDICATORS BEFORE WRITCHEK
*STM   R15,R2,STM16F     SAVE REGISTERS                          DEBUG
*LA    R1,=CL64'MORE#ORG R15,0-2'                                DEBUG
*LA    R1,16(R1)         TARGET ADDRESS   NON-REENTRANT!!!       DEBUG
*LA    R2,STM16F         SOURCE ADDRESS                          DEBUG
*LA    R3,4              SOURCE LENGTH                           DEBUG
*BAS   R14,CONVHEX       CALL SUBROUTINE                         DEBUG
*BAS   R14,CONVHEX       CALL SUBROUTINE                         DEBUG
*BAS   R14,CONVHEX       CALL SUBROUTINE                         DEBUG
*BAS   R14,CONVHEX       CALL SUBROUTINE                         DEBUG
*LM    R15,R2,STM16F     RESTORE REGISTERS                       DEBUG
         BAS   R14,WRITCHEK
         LM    R15,R2,STM16F RESTORE POINTERS & INDICATORS
         LTR   R15,R15       CHECK RETURN FROM TBLDUMP ROUTINE
         BZ    DONE#ORG      NO, THERE IS NO MORE TO DO
         BAS   R14,TBLDUMP2  ALTERNATE ENTRY POINT -- R0-4 SET-UP
         B     MORE#ORG
DONE#ORG DS    0H
*
         LA    R1,TBLRTTYP
         LA    R3,PRTLINE+1
         LA    R4,PRTLINE+L'PRTLINE-9
         BAS   R14,TBLDUMP
         BAS   R14,WRITCHEK
*
*                               '....+....1....+...~.2....+...~.3.'
         MVC   PRTLINE(31),=CL31' ATT - BIT 0=PERM''LY CONCAT''D; '
*                                  '....+....1....'
         MVC   PRTLINE+31(14),=CL14'BIT 1=IN USE; '
*                                     '....+....1.~...+....2....+'
         MVC   PRTLINE+31+14(25),=CL25'BIT 2=PERM''LY ALLOCATED; '
*                                        '....+....1....+....'
         MVC   PRTLINE+31+14+25(19),=CL19'BIT 3=CONVERTIBLE; '
*                                           '....+....1....+~...'
         MVC   PRTLINE+31+14+25+19(18),=CL18'BIT 4=DYNALLOC''D; '
*                                              '....+....1....+...'
         MVC   PRTLINE+31+14+25+19+18(18),=CL18'BITS 5-7=RESERVED.'
         BAS   R14,WRITCHEK
*
*
******** LA    R3,L'USRDSECT(R13)    POINT TO END OF GOTTEN STORAGE
******** LA    R2,LTORGED            POINT TO END OF CODE
******** SNAP  DCB=(R9),MF=(E,SNAPGOT),ID=255,STORAGE=((R13),(R3),     X
               (R12),(R2)),PDATA=REGS,SDATA=CB
*
         CLOSE ((R9)),MF=(E,OPENGOT)
SNAPCLOS DS    0H
*
         TM    SYSPRDYN,X'01'      TEST A BIT OF FLAG FIELD
         BNO   SYSPRUN             FLAG IS NO, NO NEED TO UNALLOCATE
* UNALLOCATE DDNAME SYSPRINT
         CECDYN  PREFIX=XXX,MF=(E,WORKAREA),                           X
               VERB=UN,      UNALLOCATE                                X
               TEXT=((DDNAM,'SYSPRINT'))
         DYNALLOC            ISSUE SVC99
SYSPRUN  EQU   *
*
         B     RETURN              ALL DONE WITH PROCESSING
*
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
*
WRITCHEK ST    R14,WC#R14    SAVE, BECAUSE WRITE & CHECK WILL USE R14.
         LA    R0,L'PRTLINE+L'PRTRDW+L'PRTRDW00+L'PRTBDW+L'PRTBDW00
         STH   R0,PRTBDW
         XC    PRTBDW00,PRTBDW00
         LA    R0,L'PRTLINE+L'PRTRDW+L'PRTRDW00
         STH   R0,PRTRDW
         XC    PRTRDW00,PRTRDW00
         WRITE WRITGOT,SF,(R9),PRTAREA,MF=E
         CHECK WRITGOT
         MVI   PRTLINE,C' '
         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE
         L     R14,WC#R14    RESTORE
         BR    R14
*
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         EJECT
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
CONVHEX  DS   0H , CONVERT BINARY TO ZONED HEXIDECIMAL EQUIVALENT
* R1    = TARGET ADDRESS.   (TARGET EXACTLY TWICE AS LONG AS SOURCE)
* R2    = SOURCE ADDRESS.
* R3    = SOURCE LENGTH.    (ONLY 1 THRU 16 IS PERMITTED)
* R4,R5 = WORK REGISTERS.
* R14   = RETURN ADDRESS -- CALL:  BAS R14,CONVHEX
* ON RETURN: R1 & R2 WILL BE POSITIONED JUST-PAST PROCESSED AREAS,
*            R3 WILL BE UNCHANGED.
         SAVE  (3,5)
         N     R3,=X'000000FF' FORCE TO 16 OR LESS
         LTR   R4,R3         RESULT:  L'SRC
         BZ    XCONVHEX      IF ZERO, DO NOTHING
         BCTR  R4,0          RESULT:  L'SRC-1
         IC    R5,0(R2,R4)   FETCH LAST BYTE OF SOURCE
         AR    R4,R4         RESULT:  2*L'SRC-2
         STC   R5,1(R1,R4)   STORE INTO LAST BYTE OF TARGET
         LR    R5,R4         SAVE     2*L'SRC-2   FOR LATER EXMVZ
         SLL   R4,FOUR       RESULT:  AL1(2*L'SRC-2),AL1(0)
         OR    R4,R3         RESULT:  AL1(2*L'SRC-2),AL1(L'SRC)
         BCTR  R4,0          RESULT:  AL1(2*L'SRC-2),AL1(L'SRC-1)
         EX    R4,EXUNPK     UNPACK (SOURCE) TO (TARGET MINUS 1 BYTE)
         NI    0(R1),X'0F'   CLEAR FIRST HI-BYTE OF TARGET
         EX    R5,EXMVZ      CLEAR ALL HI-BYTES OF TARGET
         LA    R5,1(R5)      RESULT:  2*L'SRC-1
         EX    R5,EXTR       CHANGE LO-BYTES TO PRINTABLE CHARACTERS
         LA    R1,1(R5,R1)   ADVANCE PAST TARGET
         LA    R2,0(R3,R2)   ADVANCE PAST SOURCE
XCONVHEX RETURN (3,5),RC=0   RETURN TO CALLER
EXUNPK   UNPK  0(*-*,R1),0(*-*,R2)    EXECUTED
EXMVZ    MVZ   1(*-*,R1),0(R1)        EXECUTED
EXTR     TR    0(*-*,R1),TRANTBL      EXECUTED
TRANTBL  DC    C'0123456789ABCDEF' TRANSLATE TABLE
FOUR     EQU   4
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         EJECT
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
* LOOKUP -- LOOKUP VALUE IN TABLE, REPLACE WITH TABLE ENTRY'S VALUE
* R1    = ADDRESS OF KEY TO LOOKUP
* R2    = ADDRESS OF TABLE
* R14   = RETURN ADDRESS.      CALL:    BAS R14,LOOKUP
* R15,R0,R3,R4 = WORK REGISTERS.
* ON RETURN: R1 AND R2 WILL BE UNCHANGED.
*            IF KEY WAS FOUND IN TABLE,
*                 REPLACEMENT VALUE WAS PLACED JUST-AFTER KEY AND R15=0
*            IF KEY WAS NOT FOUND, R15 IS NON-ZERO
* FIRST FULLWORD AT START OF TABLE IS A(TABLE ID), WHICH IS AL1(),C'  '
* NEXT FULLWORD AT START OF TABLE CONTAINS:
*  1 BYTE = KEY LENGTH, 1 BYTE = REPLACEMENT LENGTH,
*  HALFWORD = NUMBER OF PAIRS IN TABLE;
* THEN FOLLOWING, PAIRS OF KEY + REPLACEMENT.
EXCLC1F  CLC   0(*-*,R1),0(R15)        WILL BE EXECUTED (R1, R'F')
EXMVC3F  MVC   0(*-*,R3),0(R15)        WILL BE EXECUTED (R3, R'F')
LOOKUP   LA    R0,1                    PRIME
         XR    R3,R3                   CLEAR
         XR    R4,R4                   CLEAR
         IC    R3,4(R2)                FETCH KEY LENGTH FROM TABLE
         IC    R4,5(R2)                FETCH REPLACEMENT LENGTH
         AH    R0,6(R2)                R0 CONTAINS 1 + # OF ENTRIES
         LA    R15,8(R2)               POINT TO FIRST TABLE ENTRY
         BCTR  R3,0                    DECREMENT FOR EX INSTRUCTIONS
         BCTR  R4,0                    DECREMENT FOR EX INSTRUCTIONS
LOOKLOOP EX    R3,EXCLC1F              Q. IS IT A MATCH ?
         LA    R15,1(R3,R15)           STEP PAST KEY (NO CC CHANGE)
         BE    LOOKHERE                A. YES, JUMP OUT OF LOOP
         LA    R15,1(R4,R15)           STEP PAST REPLACEMENT
         BCT   R0,LOOKLOOP             POSSIBLY CHECK SOME MORE
         RETURN RC=(15)                RETURN TO CALLER (R15 NON-ZERO)
LOOKHERE LA    R3,1(R1,R3)             POINT TO JUST-PAST KEY
         C     R4,=F'-1'               Q. WAS REPLACEMENT LENGTH 0 ?
         BE    LOOKDONE                A. YES--NO REPLACE, JUST RETURN
         EX    R4,EXMVC3F              MOVE REPLACEMENT THERE
LOOKDONE RETURN RC=0                   RETURN TO CALLER WITH R15=0
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         EJECT
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
* TBLDUMP -- FORMAT TRANSFORMATION TABLE FOR PRINTING
* R1    = ADDRESS OF TABLE
* R3    = ADDRESS OF PRINT LINE
* R4    = ADDRESS OF END OF PRINT LINE (TO CHECK FOR FILLING-UP)
* R14   = RETURN ADDRESS.      CALL:    BAS R14,TBLDUMP
* R15,R0,R2,R3,R4,R5 = WORK REGISTERS
* DURING EXECUTION: R15 POINTS TO LAST BYTE MOVED INTO PRINT LINE
*                   R0 CONTAINS COUNT OF ENTRIES TO BE PROCESSED
* ON RETURN: R1,R3,R4 WILL BE UNCHANGED.
*            PRTLINE WILL BE SET-UP.
*            IF TABLE EXHAUSTED, RC=0 -- ELSE, NON-ZERO.
*
* FIRST FULLWORD AT START OF TABLE IS A(TABLE ID), WHICH IS AL1(),C'  '
* NEXT FULLWORD AT START OF TABLE CONTAINS:
*  1 BYTE = KEY LENGTH, 1 BYTE = REPLACEMENT LENGTH,
*  HALFWORD = NUMBER OF PAIRS IN TABLE;
* THEN FOLLOWING, PAIRS OF KEY + REPLACEMENT.
EXMVCF2  MVC   0(*-*,R15),0(R2)        WILL BE EXECUTED (R'F', R2)
EXMVCF3  MVC   0(*-*,R15),0(R3)        WILL BE EXECUTED (R'F', R3)
TBLDUMP  DS   0H                       NORMAL ENTRY POINT.
         LH    R0,6(R1)                FETCH # OF ENTRIES IN TABLE
         LA    R2,8(R1)                POINT TO FIRST TABLE ENTRY
TBLDUMP2 DS   0H , ALTERNATE ENTRY POINT: EXPECT R0,R2 UNCHANGED
         SAVE  (3,4)
         LR    R15,R3                  SAVE START-ADDRESS OF PRINT LINE
         LR    R5,R4                   SAVE END-ADDRESS OF PRINT LINE
         L     R3,0(R1)                FETCH ADDRESS OF TABLE-ID
         XR    R4,R4                   CLEAR
         IC    R4,0(R3)                FETCH TABLE-ID LENGTH FROM TABLE
         BCTR  R4,0                    DECREMENT FOR EX INSTRUCTIONS
         LA    R3,1(R3)                POINT TO TABLE-ID CHARACTERS
         EX    R4,EXMVCF3              MOVE TABLE-ID TO PRINT LINE
         LA    R15,1(R4,R15)           ADVANCE TARGET POINTER, R4+1
         MVI   0(R15),C':'             MOVE TO PRINT LINE
         XR    R3,R3                   CLEAR
         XR    R4,R4                   CLEAR
         IC    R3,4(R1)                FETCH KEY LENGTH FROM TABLE
         IC    R4,5(R1)                FETCH REPLACEMENT LENGTH
         BCTR  R3,0                    DECREMENT FOR EX INSTRUCTIONS
         BCTR  R4,0                    DECREMENT FOR EX INSTRUCTIONS
DUMPLOOP LA    R15,2(R15)              ADVANCE TARGET POINTER, 2 BYTES
         EX    R3,EXMVCF2              MOVE KEY TO PRINT LINE
         LA    R2,1(R3,R2)             STEP PAST KEY,          R3+1
         LA    R15,1(R3,R15)           ADVANCE TARGET POINTER, R3+1
         MVI   0(R15),C','             MOVE TO PRINT LINE
         C     R4,=F'-1'               Q. WAS REPLACEMENT LENGTH 0 ?
         BE    DONTEXR4                A. DON'T MOVE REPLACEMENT
         LA    R15,1(R15)              ADVANCE TARGET POINTER
         EX    R4,EXMVCF2              MOVE REPLACEMENT TO PRINT LINE
         LA    R2,1(R4,R2)             STEP PAST REPLACEMENT,  R4+1
         LA    R15,1(R4,R15)           ADVANCE TARGET POINTER, R4+1
DONTEXR4 MVI   0(R15),C';'             MOVE TO PRINT LINE
         CR    R15,R5                  Q. ARE WE PAST THE END ?
         BNL   TBLOVER                 A. YES, DON'T LOOP
TBLBCT   BCT   R0,DUMPLOOP             POSSIBLY CHECK SOME MORE
         MVI   0(R15),C'.'             MOVE TO PRINT LINE, REPLACE ';'
         RETURN (3,4),RC=0             RETURN TO CALLER WITH R15=0
TBLOVER  DS   0H                       PRTLINE IS FULL
         BCTR  R0,0                    DECREMENT, FOR NEXT TIME ROUND
         RETURN (3,4),RC=4             RETURN TO CALLER WITH R15 NON-0
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         EJECT
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
* DS1XBITS -- TAKE DS1X, CHANGE BITS TO DIGITS 0/1 IN FIELD PRTBITS.
* R14   = RETURN ADDRESS.      CALL:    BAS R14,DS1XBITS
* R15   = WORK REGISTER.
*
DS1XBITS MVC   PRTBITS(8),=CL8'00000XXX'   SET DEFAULT
*
*...+....1....+....2....+....3....+....4....+..&B
         MACRO ,                               &B
         TESTBIT &MASK,&BIT                    &B
&B       SETC  ''                              &B
&OPND    SETC  'DS1X,X''&MASK.''             ' &B
&OPND    SETC  '&OPND'(1,20).'TEST BIT &BIT.'  &B
         TM    &OPND.&B&B&B&B&B&B&B&B&B&B&B&B&B&B
&OPND    SETC  'XBIT&BIT                     ' &B
&OPND    SETC  '&OPND'(1,20).'DONE W/BIT &BIT' &B
         BZ    &OPND.&B&B&B&B&B&B&B&B&B&B&B&B&B&B
&OPND    SETC  'PRTBITS+&BIT.,C''1''         ' &B
&OPND    SETC  '&OPND'(1,20).'IT WAS NON-ZERO' &B
         MVI   &OPND.&B&B&B&B&B&B&B&B&B&B&B&B&B&B
&OPND    SETC  '0H'                            &B
XBIT&BIT DS    &OPND.&B&B&B&B&B&B&B&B&B&B&B&B&B&B
         MEND                                  &B
*...+....1....+....2....+....3....+....4....+..&B
*
         TESTBIT 80,0
         TESTBIT 40,1
         TESTBIT 20,2
         TESTBIT 10,3
         TESTBIT 08,4
         BR    R14                     RETURN TO CALLER
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         EJECT
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
*
* MODEL MACRO CALLS
*
OPENL    DS    0F
         OPEN  (,),MF=L
OPENL#L  EQU   *-OPENL             LENGTH OF MODEL
*
SDCBL    DCB   MACRF=(W),DDNAME=SYSPRINT,                         DEBUGX
               DSORG=PS,RECFM=VBA,LRECL=125,BLKSIZE=1632          DEBUG
DCBL#L   EQU   *-SDCBL             LENGTH OF MODEL
*
SNAPL    SNAP  MF=L,STORAGE=(,,,)  ROOM FOR TWO PAIRS OF ADDRESSES
SNAPL#L  EQU   *-SNAPL             LENGTH OF MODEL
*
WRITL    WRITE WRITDECB,SF,MF=L
WRITL#L  EQU   *-WRITL
*
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         EJECT
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
*
WORKDSCT DSECT , THIS STORAGE MUST BE GOTTEN BELOW 16M,                X
               BECAUSE IT CONTAINS DCB.S
*
SAVEAREA DC    0CL72' '
DONOTUSE DC    F'0'    DO NOT USE
SAVE#BWD DC    F'0'
SAVE#FWD DC    F'0'
SAVE#R14 DC    F'0'
SAVE#R15 DC    F'0'
SAVE#R0  DC    F'0'
SAVE#R1  DC    F'0'
SAVE#R2  DC    F'0'
SAVE#R3  DC    F'0'
SAVE#R4  DC    F'0'
SAVE#R5  DC    F'0'
SAVE#R6  DC    F'0'
SAVE#R7  DC    F'0'
SAVE#R8  DC    F'0'
SAVE#R9  DC    F'0'
SAVE#R10 DC    F'0'
SAVE#R11 DC    F'0'
SAVE#R12 DC    F'0'
*
ZTLIBGOT DC    CL8':SDCBGOT'
TLIBGOT  DS    0F'0',CL(DCBL#L)      DCB LIST IN GOTTEN STORAGE
ZSDCBGOT DC    CL8':SDCBGOT'
SDCBGOT  DS    0F'0',CL(DCBL#L)      DCB LIST IN GOTTEN STORAGE
*
SYSPRDYN DS    X             FLAG WHETHER TO DEALLOCATE SYSPRINT @ END
SYSPROPN DS    X             FLAG WHETHER DCB IS OPENED
*
         DS    0F
*
LBLSTM16 DC    CL4':STM'
STM16F   DS    16F
*
LBLWCRE  DC    CL4'WCRE'     R'E' = R14
WC#R14   DC    1F'0'
*
LBLDS1F  DC    CL4'DS1F'
DS1F     DC    1F'0'
LBLDS1H  DC    CL4'DS1H'
DS1H     DC    1H'0'
LBLDS1X  DC    CL4'DS1X'
DS1X     DC    1X'0'
DSCL8    DC    CL8' '
         DS    C
*
DS#RELNO DS    F
*
RC       DS    F             RETURN CODE TO BE PASSED BACK
*
ZOPENGOT DC    CL8':OPENGOT'
OPENGOT  DS    0F'0',CL(OPENL#L)     OPEN LIST IN GOTTEN STORAGE
ZSNAPGOT DC    CL8':SNAPGOT'
SNAPGOT  DS    0F'0',CL(SNAPL#L)     SNAP LIST IN GOTTEN STORAGE
*
PRTLINEX DS    F             WILL CONTAIN A(PRTLINE+L'PRTLINE)
*
PRTAREA  DS    0F            ALIGN
PRTBDW   DS    AL2           RESERVE SPACE FOR BDW, RDW
PRTBDW00 DC    AL2(0)
PRTRDW   DS    AL2           RESERVE SPACE FOR BDW, RDW
PRTRDW00 DC    AL2(0)
PRTBEGIN EQU   *             PRTLINE WILL BEGIN HERE
PRTCCG   DS    CL1
PRTRELNO DS    CL5
PRTRTDDN DS    CL8,CL1
PRTRTDSN DS    CL44
PRTRTMEM DS    CL8,CL1
PRTRTSTA DS    CL2                 KEY FIELD
PRTXXSTA DS            CL4,CL1         TRANSLATED KEY FIELD, BLANK
PRTRTNDP DS    CL2                 KEY FIELD
PRTXXNDP DS            CL4,CL1         TRANSLATED KEY FIELD, BLANK
PRTRTCDP DS    CL2                 KEY FIELD
PRTXXCDP DS            CL4,CL1         TRANSLATED KEY FIELD, BLANK
PRTRTORG DS    CL4                 KEY FIELD
PRTXXORG DS            CL4,CL1         TRANSLATED KEY FIELD, BLANK
PRTRTTYP DS    CL2                 KEY FIELD
PRTXXTYP DS            CL5,CL1         TRANSLATED KEY FIELD, BLANK
PRTRTLIM DS    CL5
PRTRTATT DS    CL3
PRTBITS  DS    CL9
PRTRTLST DS    CL2                 KEY FIELD
PRTXXLST DS            CL4,CL1         TRANSLATED KEY FIELD, BLANK
*
******** ORG   PRTBEGIN+125                               LIMIT TO 125
******** 125 IS THE MAX. PERMITTED ON SNAP DCB            LIMIT TO 125
*
PRTLGH   EQU   *-PRTBEGIN
         ORG   PRTBEGIN
PRTLINE  DS    CL(PRTLGH)
*
         ORG   ,                                          LIMIT TO 125
*        JUMP PAST ANY SHORTENING ORG.S                   LIMIT TO 125
*
         DS    CL20               PAD, JUST IN CASE
*
ZWRITGOT DC    CL8':WRITGOT'
WRITGOT  DC    0F'0',CL(WRITL#L)' ' WRITE LIST IN GOTTEN STORAGE
*
WORKAREA DS    CL512
*
LASTWORD DS    F
*
*-------------*
* FOLLOWING CODE WORKS, AS LONG THE DSECT HAS A NAME.
         SETTEMP                   , MAKE &SYSECT AVAILABLE, IN &TEMP
USRDSCTL EQU   *-&TEMP             , NON-RELOCATABLE, LENGTH OF DSECT
         ORG   &TEMP
USRDSECT DS    CL(USRDSCTL)        NOW L'USRDSECT AVAILABLE IN CONDITIOX
               NAL ASSEMBLY STATEMENTS                                 X
               NOTE -- IT MUST BE DS, DC HAS A MAX OF 256
*
&CSECTNM. CSECT , BACK TO CODE
*
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         EJECT
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
*
* CONSTANTS
*
*
         MACRO
&NAME    TABLE &POS1,&ID=,&L1=,&L2=
         GBLC  &CEC#L1,&CEC#L2
         GBLC  &CEC#GBLC
&NX      SETC  '&SYSNDX'
         AIF   ('&POS1' EQ 'START').START
         AIF   ('&POS1' EQ 'END').END
         AIF   ('&POS1' EQ 'ENTRY').ENTRY
         MNOTE 12,'&POS1 INVALID, ONLY START/END/ENTRY PERMITTED'
         MEXIT
.*..+....1....+....2....+....3....+....4....+....5....+....6....+....7*
.START   ANOP
         AIF   (K'&ID GT 2).STARTOK
         AIF   ('&ID'(1,1) EQ '''').STARTOK
         AIF   ('&ID'(K'&ID,1) EQ '''').STARTOK
         MNOTE 12,'ERROR, QUOTES REQUIRED ON ID="&ID"'
.STARTOK ANOP
&LCLC    SETC  '&ID'(2,K'&ID-2) REMOVE QUOTES
&CEC#L1  SETC  '&L1'
&CEC#L2  SETC  '&L2'
&LCLA    SETA  K'&LCLC
CEC&NX.A DC   0F'0',AL1(&LCLA),CL&LCLA'&LCLC'        TABLE ID
&NAME    DC    A(CEC&NX.A)                           A(TABLE ID)
         DC    AL1(&CEC#L1),AL1(&CEC#L2)             FIELD LENGTHS
         DS    AL2                 RESERVE SPACE FOR # ENTRIES IN TABLE
CEC&NX.B EQU   *
&CEC#GBLC SETC 'CEC&NX'
         MEXIT
.*..+....1....+....2....+....3....+....4....+....5....+....6....+....7*
.END     ANOP
&LCLC    SETC  '&CEC#GBLC.C'
&LCLC2   SETC  '   CALCULATE # ENTRIES'
&LCLC    EQU   (*-&CEC#GBLC.B)/(&CEC#L1+&CEC#L2)&LCLC2
         ORG   &CEC#GBLC.B-2       POSITION TO PROPER PLACE
         DC    AL2(&LCLC)          FIXUP # ENTRIES IN TABLE
         ORG
         MEXIT
.ENTRY   ANOP
&I       SETA  2
.NEXTI   ANOP
&LCLC    SETC  '&SYSLIST(&I)'
&LCLC2   SETC  '&SYSLIST(&I+1)'
         AIF   ('&CEC#L2' EQ '0').NOL2
         DC    CL(&CEC#L1)'&LCLC',CL(&CEC#L2)'&LCLC2'
         AGO   .ADVI
.NOL2    DC    CL(&CEC#L1)'&LCLC'
.ADVI    ANOP
&I       SETA  &I+2
         AIF   (&I LT N'&SYSLIST).NEXTI
         MEND
*
*
TBLRTLST TABLE START,ID='LST-INDICATE LAST',L1=L'PRTRTLST,L2=L'PRTXXLST
         TABLE ENTRY,80,LAST
         TABLE END
*
*
TBLRTSTA TABLE START,ID='STA - DSET STATUS',L1=L'PRTRTSTA,L2=L'PRTXXSTA
         TABLE ENTRY,01,=OLD,02,=MOD,04,=NEW,08,=SHR
         TABLE END
*
*
TBLRTNDP TABLE START,ID='NDP - NORMAL DISP',L1=L'PRTRTNDP,L2=L'PRTXXNDP
         TABLE ENTRY,01,=UNCATLG,02,=CATLG,04,=DELETE,08,=KEEP,10,=PASS
         TABLE END
*
*
TBLRTCDP TABLE START,ID='CDP - COND"L DISP',L1=L'PRTRTCDP,L2=L'PRTXXCDP
         TABLE ENTRY,01,=UNCATLG,02,=CATLG,04,=DELETE,08,=KEEP,10,=PASS
         TABLE END
*
*
TBLRTORG TABLE START,ID='ORG - ORGANIZATION',                          X
               L1=L'PRTRTORG,L2=L'PRTXXORG
         TABLE ENTRY,0004,=TR,0008,=VSAM,0020,=TQ,0040,=TX,0080,=GS
         TABLE ENTRY,0200,=PO,0300,=POU,0400,=MQ,0800,=CQ,1000,=CX
         TABLE ENTRY,2000,=DA,2100,=DAU,4000,=PS,4100,=PSU,8000,=IS
         TABLE ENTRY,8100,=ISU
         TABLE END
*
*
TBLRTTYP TABLE START,ID='TYP - TYPE',L1=L'PRTRTTYP,L2=L'PRTXXTYP
         TABLE ENTRY,80,=DUMMY,40,=TERM,20,=SYSIN,10,=SYSOUT
         TABLE END
         SPACE 1
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         EJECT
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         SPACE 1 LINE
&CSECTNM. CSECT , BACK TO CODE
*
         LTORG ,             GENERATE ALL LITERALS HERE
LTORGED  EQU   * ,           NO MORE CODE BEYOND THIS POINT
         SPACE 1
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         SPACE 1 LINE
         PRINT ON,NOGEN
         CVT   DSECT=YES           FROM SYS1.AMODGEN
         DCBD  DSORG=XE,DEVD=DA    FROM SYS1.MACLIB
         IEESMCA ,                 FROM SYS1.AMODGEN
         IEFZB4D0 ,                FROM SYS1.MACLIB
         IEFZB4D2 ,                FROM SYS1.MACLIB
         IHAPSA ,                  FROM SYS1.MACLIB
         SPACE 1
*...+....1....+....2....+....3....+....4....+....5....+....6....+....7*
         SPACE 1 LINE
         END
