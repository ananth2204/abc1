{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011501000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 764218, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "CBT.V500.FILE200.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE200.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0e\\x04'", "DS1TRBAL": "b'\\xa0\\n'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x89\\x00\\x03\\x01\\x8a\\x00\\x02\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04W\\x00\\x19\\x01\\x13\\x10\\x1f\\x01\\x13\\x10\\x1f\\x01\\x14\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf7@@@'", "ispf": {"version": "04.87", "flags": 0, "createdate": "2013-04-11T00:00:00", "modifydate": "2013-04-11T01:14:19", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-487"}, "text": "REGULAR CBT TAPE - VERSION 487    FILE:  200\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT487.FILE200\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 30 MEMBERS COUNTED; CUMULATIVE SIZE IS 7,065 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/11/13    01:14:19    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x00o\\x00o\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "TWA"}, "text": "         TWA TOOLBOX PACKAGE DOCUMENTATION\n\n         A COPY OF THIS DOCUMENT IS CONTAINED IN THE DISTRIBUTION PDS\n         AS MEMBER $DOC.\n\n\n         REX WIDMER / RON STUBBLEFIELD\n\n         TRANS WORLD AIRLINES INC.\n         KANSAS CITY ADMINISTRATIVE CENTER\n         11500 AMBASADOR DRIVE\n         KANSAS CITY, MO 64195\n\n         816-464-6671\n         816-464-6512\n\n         THIS PACKAGE IS DISTRIBUTED WITHOUT CHARGE TO MEMBERS\n         OF SHARE AND GUIDE. IT IS DISTRIBUTED ON AN AS IS,\n         WHERE IS BASIS, WITHOUT EXPRESSED OR IMPLIED WARRANTY\n         OF ANY KIND.  IT IS DISTRIBUTED IN HOPE THAT IT MAY SAVE\n         OTHER MEMBERS OF THE PROJECT SOME WHEEL RE-INVENTING...\n\n         THE PACKAGE CONSISTS OF THE FOLLOWING PROGRAMS....\n\n           WHATSNEW  THIS PROGRAM ANALYZES A PDS AND LISTS\n                     THE MEMBERS IN MOST RECENTLY CHANGED ORDER\n                     A CHANGE IS CONSTITUTED TO MEAN A RE-LINKEDIT,\n                     OR A CHANGE BY SUPERZAP.  IT IS DRIVEN BY THE\n                     IDR DATA RECORDS WITHIN THE PDS.\n\n                       LANGUAGE  OS BAL\n\n           WHEREUSD  THIS PROGRAM ANALYZES A PDS AND LISTS ALL MEMBERS\n                     WHICH CONTAIN A REFERENCE TO A GIVEN EXTERNAL\n                     SYMBOL.\n\n                       LANGUAGE  OS BAL\n\n           COMPARE   THIS PROGRAM ANALYZES GIVEN MEMBERS WHICH EXIST IN\n                     A PAIR OF PDS'S.  THE MEMBERS ARE CHECKED FOR\n                     DIFFERENCES AND FOR ADHERANCE TO INSTALLATION\n                     STANDARDS AS A PRE-IMPLEMENTATION Q/C MEASURE.\n\n                       LANGUAGE  OS BAL\n                       MEMBERS / CSECTS\n                          COMPARE  -- MAINLINE\n                          COBFMT   -- SUBROUTINE\n                          COMPDS   -- SUBROUTINE\n                          COMPTBL  -- SUBROUTINE\n                          PRTTBL   -- SUBROUTINE\n\n           COBREAD   THIS PROGRAM ANALYZES A PDS AND LISTS ALL MEMBERS\n                     ALONG WITH THE COBOL ATTRIBUTES ASSOCIATED WITH\n                     THE MAIN CSECT WITHIN THE MODULE.  SUCH ITEMS AS\n                     COBOL /STATE/, /FLOW/, /OPTIMIZATION/, /TEST/,\n                     /ENDJOB/, AND /DYNAM/ ARE LISTED.\n                     THE ABILITY TO SELECTIVELY ANALYZE A SINGLE\n                     MEMBER IS ALSO SUPPORTED.\n\n                       LANGUAGE  OS BAL\n                       MEMBERS / CSECTS\n                          COBREAD  -- MAINLINE\n                          COBFMT   -- SUBROUTINE TO COBREAD\n\n                       NOTES...  REPLACES EARLIER PROGRAM /COBAUDIT/\n                          THIS IS AN ENHANCED VERSION WITH CSECT BY\n                          CSECT SCANNING ABILITY\n\n           XREF1     THIS PROGRAM SCANS A PDS AND PRODUCES INTERMEDIATE\n                     RECORDS TO ALLOW XREF2 TO CREATE A GLOBAL CROSS-\n                     REFERENCE OF EXTERNAL SYMBOLS IN THE PDS.  THIS\n                     REPORT PROVIDES INFORMATION OF THE FORM  CSECT IS\n                     CONTAINED IN THE FOLLOWING LOAD MODULES...\n\n                       LANGUAGE  OS BAL\n\n           XREF2     THIS IS THE REPORT PROGRAM TO PROCESS THE OUTPUT\n                     OF XREF1.  IT MAY HAVE MULTIPLE XREF1 FILES AS\n                     INPUT, ALL INPUTS WILL BE MERGED WITHIN THE REPORT\n                     GENERATION PROCESS.\n\n                       LANGUAGE  PL/I OPTIMIZER / CHECKOUT COMPILER\n\n           INSTALLATION INSTRUCTIONS....\n\n                     THE PACKAGE IS IN THE FORM OF IEBUPDTE SYSIN.\n                     IT REQUIRES ABOUT 2.5 MEGABYTE OF DISK STORAGE\n                     TO HOLD THE PDS (1 3350 CYLINDER AT 80 X 19040).\n\n                     ONCE THE PDS HAS BEEN CREATED ON YOUR SYSTEM THE 5\n                     PROGRAMS MAY BE RECOMPILED.  ALL OF THE PROGRAMS\n                     EXCEPT XREF2 ARE WRITTEN IN OS/VS ASSEMBLER\n                     LANGUAGE.  THE PRIVATE MACROS UTILIZED WITHIN THE\n                     PROGRAM ARE INCLUDED IN THE PDS.  THE DISTRIBUTION\n                     PDS SHOULD BE INCLUDED WITHIN THE SYSLIB DD-CARD\n                     SPECIFICATION FOR THE ASSEMBLIES.  PROGRAM XREF2\n                     IS WRITTEN IN PL/I UTILIZING THE OPTIMIZING\n                     COMPILER.  IF THE OPTIMIZER IS NOT AVAILABLE, THE\n                     F LEVEL PL/I (FREEBEE) MAY BE USED WITH MINOR\n                     CHANGES TO THE BUILTIN FUNCTION NAMES.  IF PL/I IS\n                     NOT AVAILABLE IN ANY FORM THE PROGRAM MAY EASILY BE\n                     RECODED IN COBOL, OR IN BAL.\n                     EXECUTION JCL AND INSTRUCTIONS ARE INCLUDED IN THE\n                     COMMENT BLOCK AT THE START OF EACH PROGRAM.\n\n                     IF WE MAY PROVIDE ADDITIONAL INFORMATION OR\n                     ASSISTANCE, DON'T HESITATE TO CALL OR WRITE.\n\n\n                                                 REX WIDMER\n                                                 RON STUBBLEFIELD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC1": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x95\\x10\\x7f\\x01\\x00)\\x9f\\x113\\x00*\\x00\\x0b\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1995-04-17T00:00:00", "modifydate": "2000-10-25T11:33:00", "lines": 42, "newlines": 11, "modlines": 0, "user": "WSBG"}, "text": "Notes:  03/21/00                              Sam Golob\n\n   Ran COBREAD by Roland Schiradin, who is an expert (the author\n   of COBANAL on File 321).  Roland noticed that the S0C4 can be\n   avoided by linkediting COBREAD and COBFMT with AMODE ANY or\n   AMODE 31.  Fixed dates of the format 00.nnn , in COBREAD.\n\n   This program still needs a lot of modernization, and a second\n   base register.\n\n\nNotes:  03/12/00                              Sam Golob\n\n   Fixed WHATSNEW and WHEREUSD for Y2K.  Reformatted yy.ddd date\n   in the report headers to have X'F0' for the fill character in\n   the edit pattern PAT01, and blanked out the first zero, so the\n   year comes out as 00.045, for example.  Second fix was the sort.\n   Used the Y2D sort parameter, so the year 00 sorts ahead of 99.\n\n   Tried to run COBREAD program, but it gets an S0C4, running past\n   the end of the CESD Table.  For now, I'd suggest using the far\n   more modern program:  COBANAL from Roland Schiradin on File 321\n   of the CBT MVS Utilities Tape.\n\n\nNotes:  04/17/95                              Sam Golob\n\n   Tried WHATSNEW program using DFSORT on MVS/ESA 4.3 with DFSORT 12.0.\n   It seems that with DFSORT, the \"delete record\" code from an\n   Assembler E35 exit routine should be 4 instead of 12.  I also\n   took out the size parameter from the sort parms, and let it\n   default.  Seems to work OK on our system.  Increased size of CESD\n   table - made it 4x bigger.  Works on SYS1.LINKLIB and SYS1.NUCLEUS.\n   Ran pgm with 9000K region.  May not need this much.  But we have\n   bigger systems nowadays.\n\n*     MADE 3 CHANGES:                                                 *\n*         1.  ELIMINATED SIZE PARAMETER FROM SORT INVOCATION.         *\n*         2.  INCREASED SIZE OF CESD TABLE 4X (LABEL \"GETLEN\").       *\n*         3.  DFSORT HAS A DIFFERENT RETURN CODE FROM AN ASSEMBLER    *\n*              E35 EXIT, TO DELETE A RECORD.  IT IS 4 INSTEAD OF 12.  *\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE200": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04W\\x00\\x14\\x01\\x13\\x10\\x1f\\x01\\x13\\x10\\x1f\\x01\\x14\\x00B\\x00B\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf7@@@'", "ispf": {"version": "04.87", "flags": 0, "createdate": "2013-04-11T00:00:00", "modifydate": "2013-04-11T01:14:14", "lines": 66, "newlines": 66, "modlines": 0, "user": "CBT-487"}, "text": "//***FILE 200 is from TWA and contains the following programs:      *   FILE 200\n//*                                                                 *   FILE 200\n//*    Most of these programs were written by Rex Widmer and/or     *   FILE 200\n//*    Peter Farrell.                                               *   FILE 200\n//*                                                                 *   FILE 200\n//*    Some fixes were made by Roland Schiradin and Sam Golob.      *   FILE 200\n//*    These were just so the programs would work.  The COBOL       *   FILE 200\n//*    load module programs still need modernization.               *   FILE 200\n//*                                                                 *   FILE 200\n//*    WHATSNEW  THIS PROGRAM ANALYZES A PDS AND LISTS              *   FILE 200\n//*              THE MEMBERS IN MOST RECENTLY CHANGED ORDER         *   FILE 200\n//*              A CHANGE IS CONSTITUTED TO MEAN A RE-LINKEDIT,     *   FILE 200\n//*              OR A CHANGE BY SUPERZAP.  IT IS DRIVEN BY THE      *   FILE 200\n//*              IDR DATA RECORDS WITHIN THE PDS.                   *   FILE 200\n//*                                                                 *   FILE 200\n//*              (Program updated for DFSORT Release 13.0 and       *   FILE 200\n//*              z/OS Rel 1.13.  OLD VERSION STILL INCLUDED.)       *   FILE 200\n//*                                                                 *   FILE 200\n//*              This version needs Y2D sort parameter to be        *   FILE 200\n//*              supported.                                         *   FILE 200\n//*                                                                 *   FILE 200\n//*    WHEREUSD  THIS PROGRAM ANALYZES A PDS AND LISTS ALL MEMBERS  *   FILE 200\n//*              WHICH CONTAIN A REFERENCE TO A GIVEN EXTERNAL      *   FILE 200\n//*              SYMBOL.                                            *   FILE 200\n//*                                                                 *   FILE 200\n//*              Updated for Y2K - Format dates in header of the    *   FILE 200\n//*                                report.                          *   FILE 200\n//*                                                                 *   FILE 200\n//*    COMPARE   THIS PROGRAM ANALYZES GIVEN MEMBERS WHICH EXIST IN *   FILE 200\n//*              A PAIR OF PDS'S.  THE MEMBERS ARE CHECKED FOR      *   FILE 200\n//*              DIFFERENCES AND FOR ADHERENCE TO INSTALLATION      *   FILE 200\n//*              STANDARDS AS A PRE-IMPLEMENTATION Q/C MEASURE.     *   FILE 200\n//*                                                                 *   FILE 200\n//*    COBREAD   THIS PROGRAM ANALYZES A PDS AND LISTS ALL MEMBERS  *   FILE 200\n//*              ALONG WITH THE COBOL ATTRIBUTES ASSOCIATED WITH    *   FILE 200\n//*              THE MAIN CSECT WITHIN THE MODULE.  SUCH ITEMS AS   *   FILE 200\n//*              COBOL / STATE / / FLOW / / OPTIMIZATION / /TEST/,  *   FILE 200\n//*              / ENDJOB /,  AND  / DYNAM / ARE LISTED.            *   FILE 200\n//*              THE ABILITY TO SELECTIVELY ANALYZE A SINGLE        *   FILE 200\n//*              MEMBER IS ALSO SUPPORTED.                          *   FILE 200\n//*                                                                 *   FILE 200\n//*              I would suggest running COBANAL from File 321.     *   FILE 200\n//*              That's a more modern program, which does the job   *   FILE 200\n//*              better.   (SBG 03/00)                              *   FILE 200\n//*                                                                 *   FILE 200\n//*              This program must be linkedited AMODE 31 or ANY.   *   FILE 200\n//*                                                                 *   FILE 200\n//*    XREF1     THIS PROGRAM SCANS A PDS AND PRODUCES INTERMEDIATE *   FILE 200\n//*              RECORDS TO ALLOW XREF2 TO CREATE A GLOBAL CROSS-   *   FILE 200\n//*              REFERENCE OF EXTERNAL SYMBOLS IN THE PDS.  THIS    *   FILE 200\n//*              REPORT PROVIDES INFORMATION OF THE FORM: CSECT IS  *   FILE 200\n//*              CONTAINED IN THE FOLLOWING LOAD MODULES ...        *   FILE 200\n//*                                                                 *   FILE 200\n//*    XREF2     THIS IS THE REPORT PROGRAM TO PROCESS THE OUTPUT   *   FILE 200\n//*              OF XREF1.  IT MAY HAVE MULTIPLE XREF1 FILES AS     *   FILE 200\n//*              INPUT.  ALL INPUTS WILL BE MERGED WITHIN THE       *   FILE 200\n//*              REPORT GENERATION PROCESS.                         *   FILE 200\n//*                                                                 *   FILE 200\n//*    CPUID     PROGRAM TO LIST CPUIDS OF ALL PROCESSORS           *   FILE 200\n//*              (WRITTEN BY REX WIDMER. RESCUED FROM GILBERT       *   FILE 200\n//*              SAINT-FLOUR'S ARCHIVES.)                           *   FILE 200\n//*                                                                 *   FILE 200\n//*    CPUIDX    REXX FROM MARCEL SCHMIDT TO LIST CPUIDS OF ALL     *   FILE 200\n//*              PROCESSORS.  PROBABLY BETTER THAN THE CPUID        *   FILE 200\n//*              PROGRAM.  THAT IS WHY WE INCLUDED IT HERE.         *   FILE 200\n//*                                                                 *   FILE 200\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CENTER": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x007\\x007\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "TWA"}, "text": "         MACRO\n&NAME    CENTER &BASE=12,&SAVE=,&TYPE=E\n         LCLA  &A1,&A2\n         LCLB  &B1\n         LCLC  &C1\n&A1      SETA  K'&NAME\n&B1      SETB  (T'&SAVE NE 'O')\n         AIF   ('&BASE' GT '2' AND '&BASE' LT '13').BASEOK\n         MNOTE 13,'REGISTER &BASE MAY NOT BE USED AS A BASE REG.'\n         AGO   .MEND\n.BASEOK  AIF   (&A1 GE 1).GE1\n         MNOTE 13,'NO NAME ENTRY FOR CENTER MACRO'\n         AGO   .MEND\n.GE1     AIF   (&A1 LE 8).NAMEOK\n         MNOTE 13,'THE NAME &NAME CONTAINS &A1 CHARACTERS'\n         AGO   .MEND\n.NAMEOK  AIF   (&B1).GOTSAVE\n&C1      SETC  'SVR&SYSNDX'\n         AGO   .SAVEOK\n.GOTSAVE ANOP\n&C1      SETC  '&SAVE'\n.SAVEOK  AIF   ((&A1/2)*2 NE &A1).A1OK\n&A1      SETA  &A1+1          MAKE L'NAME ODD IF NECESSARY\n.A1OK    ANOP\n&A2      SETA  &A1+5\n         MNOTE *,' REG &BASE IS THE BASE REG FOR THIS ROUTINE'\n         MNOTE *,' &C1 IS THE 18 WORD SAVE AREA FOR THIS ROUTINE'\n         MNOTE *,' &NAME IS THE ENTRY POINT FOR THIS ROUTINE'\n         AIF   ('&TYPE' EQ 'E').ENTRY\n         AIF   ('&TYPE' EQ 'C').CSECT\n         MNOTE 9,'INVALID TYPE OPERAND. &TYPE WAS SPECIFIED. E ASSUMED'\n         AGO   .ENTRY\n.CSECT   ANOP\n&NAME    CSECT\n         USING *,&BASE\n         B     &A2.(15)       BOUNCE AROUND ID\n         DC    X'&A1'\n         DC    CL&A1'&NAME'\n         STM   14,12,12(13)   SAVE REGS 14,15,0,...,12\n         AGO   .COMMON\n.ENTRY   ENTRY &NAME\n         DC    X'&A1'\n         DC    CL&A1'&NAME'\n         USING *,&BASE\n&NAME    STM   14,12,12(13)   SAVE REGS 14,15,0,...,12\n.COMMON  LR    &BASE,15       PROVIDE ADDRESSABILITY\n         LA    2,&C1          PICK UP ADDR OF THIS SAVE AREA\n         ST    2,8(0,13)      STORE SAVE AREA ADDR IN CALLER\n         ST    13,4(0,2)      STORE CALLER'S SAVE AREA ADDR IN SA\n         LR    13,2           SET UP SAVE AREA POINTER REG.\n         AIF   (&B1).MEND\n         B     BYP&SYSNDX     BOUNCE AROUND SAVE AREA\n&C1      DC    9D'0' .        SAVE AREA FOR THIS ROUTINE\nBYP&SYSNDX EQU *\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBFMT": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x01\\x95\\x01\\x95\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 405, "newlines": 405, "modlines": 0, "user": "TWA"}, "text": "TWA      TITLE 'REPORT ATTRIBUTES OF A COBOL CSECT'\n***********************************************************************\n*                                                                     *\n*        COBFMT                                                       *\n*        ------                                                       *\n*                                                                     *\n*        REPORTS THE COMPILER ATTRIBUTES OF A COBOL CSECT             *\n*        CURRENTLY LOADED INTO MEMORY.                                *\n*                                                                     *\n*        THIS VERSION SUPPORTS THE FOLLOWING COBOL COMPILERS          *\n*             VERSION 4, COBOL VS.                                    *\n*                                                                     *\n*        FOR EACH CSECT, THE FOLLOWING IS LISTED  -                   *\n*                                                                     *\n*               IS IT COBOL?                                          *\n*               IS IT OBJ360 OR OBJ370                                *\n*               IS COBOL /TEST/ OPTION SPECIFIED                      *\n*               IS COBOL /FLOW/ OPTION SPECIFIED                      *\n*               IS COBOL /STATE/ OPTION SPECIFIED                     *\n*               IS COBOL /SYMDUMP/ OPTION SPECIFIED                   *\n*               IS COBOL /RESIDENT/ OPTION SPECIFIED    3/79          *\n*               IS COBOL /ENDJOB/ OPTION SPECIFIED                    *\n*               WAS COBOL /OPTIMIZE/ OPTION SPECIFIED - V4 ONLY       *\n*               WAS CAPEX OPTIMIZE SPECIFIED                          *\n*               WAS CAPEX DTECT SPECIFIED             - CAPEX ONLY    *\n*               WAS COBOL V4 OR COBOL VS UTILIZED FOR COMPILE         *\n*               WAS COBOL /COUNT/ OPTION SPECIFIED    - VS ONLY       *\n*               WAS COBOL /TRACE/ VERB SPECIFIED      - VS ONLY       *\n*               DATE AND TIME COMPILED                - COBOL ONLY    *\n*                                                                     *\n*        A CHECK FOR \"WITHIN PRODUCTION STANDARDS\" IS ALSO MADE.      *\n*        NO DEBUGGING OPTIONS ARE PERMITTED TO EXIST WITHIN THE       *\n*        TWA ONLINE SYSTEMS; CAPEX OPTIMIZATION IS REQUIRED,          *\n*        OBJ370 IS REQUIRED, RES IS REQUIRED, AND ENDJOB IS           *\n*        REQUIRED IN AT LEAST ONE ALWAYS EXECUTED PGM WITHIN A        *\n*        RUN UNIT.  IF THESE CONDITIONS ARE NOT TRUE \"NON-STD\"        *\n*        IS NOTED ON THE OUTPUT RECORD.                               *\n*                                                                     *\n*        MODIFIED 3/10/80                                             *\n*        -     CORRECTED BUG IN TGT IDENTIFIER CHECK (WAS TESTING     *\n*              MORE FIELD THAN WAS PRESENT)                           *\n*        -     ADDED PASS BACK OF STATISTICS TABLE TO CALLER          *\n*              CALLER MAY IGNORE IF DESIRED, BUT ALTERS CALLER'S      *\n*              PARAMETER LIST                                         *\n*        -     INSERTED TITLES WITHIN STATISTICS TABLE                *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY REX WIDMER                                        *\n*                                                                     *\n*        TRANS WORLD AIRLINES INC.                                    *\n*        KANSAS CITY ADMINISTRATIVE CENTER                            *\n*        11500 AMBASSADOR DRIVE                                       *\n*        KANSAS CITY, MO 64153                                        *\n*                                                                     *\n*        816-464-6671                                                 *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PARAMETERS PASSED BY CALLER  (COBREAD)                       *\n*                                                                     *\n*           1.  NOT USED - COBFMT RETURNS ADDRESS OF COUNT TABLE      *\n*           2.  ADDRESS OF CSECT INFO BLOCK                           *\n*                                                                     *\n*        CSECT INFO BLOCK CONTAINS                                    *\n*           1.  FULLWORD ADDRESS OF START OF CSECT IN MEMORY          *\n*           2.  FULLWORD LENGTH OF CSECT                              *\n*           3.  CSECT NAME                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\nCOBFMT   CENTER TYPE=C\n         SYMREGS\n         EJECT\n         SPACE 1\n*        REGISTER USAGE\n         SPACE 1\n*        R2\n*        R3\n*        R4    POINTS TO CSECT STARTING POINT/INIT1 POINTER\n*        R5    POINTS TO COBOL PGMS TGT\n*        R6\n*        R7\n*        R8\n*        R9    POINTS TO SYSPRINT DCB\n*        R10   POINTS TO START OF CSECT TO PROCESS\n*        R11   CONTAINS LENGTH OF CSECT\n*        R12   PROGRAM BASE\n         EJECT\n         MVC   0(4,R1),=A(CTTGT)   RETURNS ADDRESS OF COUNT TABLE\n         L     R10,4(,R1)          GET ADDRESS OF CSECT INFO BLOCK\n         MVI   PRTMSG,C' '         CLEAR OLD DATA FROM PRINT LINE\n         MVC   PRTMSG+1(132),PRTMSG\n         MVC   CID,=C'    CS-'\n         MVC   CNAME(8),8(R10)    GET CSECT NAME INTO PRINT LINE\n         UNPK  CLENGTH,4(5,R10)   FORMAT CSECT LENGTH FOR PRINTING\n         TR    CLENGTH,TABLE1     FORMAT HEX INTO PRINTABLE\n         MVI   CLENGTH+L'CLENGTH-1,C' ' BLANK AFTER LAST DIGIT\n         LM    R10,R11,0(R10)     GET CSECT INFO BLOCK VALUES\n         L     R4,0(,R1)           PICK UP CSECT STARTING POINT\n         C     R11,=F'450'         IS MODULE POSSIBLY COBOL\n         BL    NOTCOB              TOO SHORT TO BE COBOL\n         SPACE 1\n         LR    R4,R10\n         CLC   0(2,R4),=XL2'0700'  IS IT A PADDED NOP E.P. CODE\n         BNE   TRYEP\n         CLC   X'E'(8,R4),=CL8' '  IS IT PADDED E.P.\n         BNE   MAINLINE\n         L     R4,X'16'(,R4)       GET THE REAL POINTER\n         B     MAINLINE\nTRYEP    CLC   X'C'(8,R4),=CL8' '  IS IT ENTRY POINT CODING\n         BNE   MAINLINE\n*        GOT AN ENTRY POINT SITUATION, GET THE START POINTER\n         L     R4,X'14'(,R4)   GET THE REAL POINTER\n         LA    R4,0(,R4)           CLEAR THE HIGH BYTE\n         LR    R8,R10              GET THE CSECT BASE ADDR\n         AR    R8,R11              ADD ON THE LENGTH\n         CR    R8,R4               SEE IF GENERATED ADDRESS IS VALID\n         BL    NOTCOB              IF OUTSIDE OF CSECT - TRASH\n         SPACE 1\n*\n*        R4 NOW POINTS TO THE START OF THE CSECT\n*\n*        FIRST LOOK FOR IDENTIFIER WITHIN THE INITIALIZATION CODE\nMAINLINE CLC   X'14'(4,R4),=CL4'ANS4' IS IT COBOL VERSION 4\n         BE    ITSV4                   THEN HANDLE IT\n         CLC   X'14'(4,R4),=CL4'VSR1' IS IT COBOL VS (REL 1 OR 2)\n         BNE   NOTCOB                  ELSE IT IS WHO KNOWS WHAT\n         MVC   FLAGA,=CL2'VS'         SHOW IT IS VS COMPILER\n         AP    CTVSC,=P'1'            COUNT IT UP\n         B     COUNTCOB               AND CONTINUE WITH PROCESSING\nITSV4    DS    0H                     TO HANDLE COBOL V4 MODULES\n         MVC   FLAGA,=CL2'V4'         SHOW IT IS V4 COMPILER\n         AP    CTV4C,=P'1'            COUNT IT UP\nCOUNTCOB AP    CTCOB,=P'1'         COUNT NUMBER COBOL\n         L     R5,60(,R4)     GET R13 POINTER ADCON (TGT POINTER)\n*                             TO ADDRESS THE PGMS TASK GLOBAL TABLE\n         ST    R5,TGTPTR              SAVE FOR OTHER USAGE\n         ST    R4,INIT1PTR            SAVE FOR OTHER USAGE\n         CLC   X'1BC'(8,R5),=CL8'SYSOUT  ' CHECK FOR GOOD TGT\n         BNE   NOTTGT                       GOT PROBLEMS UNDERSTANDING\n         EJECT\n*\n*        SET FLAGS IN DETAIL PRINT LINE  -\n*        BASED UPON THE SWITCH WORD IN THE TGT\n*\n*        SWITCH BIT MEANINGS - SOURCE COBOL COMPILER PLM\n*         BYTE 1  BIT 0 MASK X'80'  USED BY ON SIZE ERROR\n*         BYTE 1  BIT 1 MASK X'40'  USED BY READY TRACE VERB\n*         BYTE 1  BIT 2 MASK X'20'  INITIALIZATION FLAG\n*         BYTE 1  BIT 3 MASK X'10'  MAIN PROGRAM FLAG\n*         BYTE 1  BIT 4 MASK X'08'  SYMDUMP FLAG\n*         BYTE 1  BIT 5 MASK X'04'  FLOW FLAG\n*         BYTE 1  BIT 6 MASK X'02'  STATE FLAG / REUSED AT RUN TIME\n*         BYTE 1  BIT 7 MASK X'01'  OPTIMIZATION FLAG\n*         BYTE 2  BIT 0 MASK X'80'  RESERVED\n*         BYTE 2  BIT 1 MASK X'40'  USED BY CALL AND CANCEL\n*         BYTE 2  BIT 2 MASK X'20'  EXEC TIME STATE FLAG\n*         BYTE 2  BIT 3 MASK X'10'  TEST ATTRIBUTE FLAG\n*         BYTE 2  BIT 4 MASK X'08'  QUOTE IS APOST FLAG\n*         BYTE 2  BIT 5 MASK X'04'  SPECIAL SYMDUMP USAGE\n*         BYTE 2  BIT 6 MASK X'02'  LONG TGT FLAG, ALWAYS 1 FOR V4 / VS\n*         BYTE 2  BIT 7 MASK X'01'  Q-ROUTINE USAGE\n*         BYTE 3  BIT 0 MASK X'80'  NORES FLAG, SET TO 0 FOR RES OPTION\n*         BYTE 3  BIT 1 MASK X'40'  ENDJOB WAS SPECIFIED\n*         BYTE 3  BIT 2 MASK X'20'  OBJECT COMPUTER 370 SPECIFIED\n*         BYTE 3  BIT 3 MASK X'10'  Q-ROUTINE FLAG\n*         BYTE 3  BIT 4 MASK X'08'  COUNT OPTION - VS\n*         BYTE 3  BIT 5 MASK X'04'  TRACE VERB IS PRESENT\n*         BYTE 3  BIT 6 MASK X'02'  SYNADAF USAGE\n*         BYTE 3  BIT 7 MASK X'01'  UNUSED BIT\n*         BYTE 4  DEC POINT IS COMMA BYTE\n*                 C',' IF SPECIFIED, ELSE C'.'\n         EJECT\n         TM    X'48'(R5),X'08' IS IT SYMDUMP\n         BZ    X01\n         MVC   FLAG1,=CL8'SYMD'\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\n         AP    CTSYM,=P'1'         COUNT NUMBER USING SYMDUMP\nX01      DS    0H\n         SPACE 1\n         TM    X'48'(R5),X'04' IS IT FLOW\n         BZ    X02\n         MVC   FLAG2,=CL8'FLOW   '\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\n         AP    CTFLO,=P'1'         COUNT NUMBER USING FLOW\nX02      DS    0H\n         SPACE 1\n         TM    X'48'(R5),X'02' IS IT STATE\n         BZ    X03\n         MVC   FLAG3,=CL8'STATE  '\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\n         AP    CTSTA,=P'1'         COUNT NUMBER USING STATE\nX03      DS    0H\n         SPACE 1\n         TM    X'49'(R5),X'10' IS IT TEST\n         BZ    X04\n         MVC   FLAG4,=CL8'TEST   '\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\n         AP    CTEST,=P'1'         COUNT NUMBER USING TEST\nX04      DS    0H\n         SPACE 1\n         TM    X'4A'(R5),X'80' IS IT RESIDENT\n         BO    X05\n         MVC   FLAG5,=CL8'RES    '\n         AP    CTRES,=P'1'         COUNT NUMBER USING RES\n         B     X05A\nX05      DS    0H\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\nX05A     DS    0H\n         SPACE 1\n         TM    X'4A'(R5),X'40' IS IT ENDJOB\n         BZ    X06\n         MVC   FLAG6,=CL8'ENDJOB '\n         AP    CTEND,=P'1'         COUNT NUMBER USING ENDJOB\n         B     X06A                AND CONTINUE THE SEARCH\nX06      DS    0H\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\nX06A     DS    0H\n         SPACE 1\n*        LOOK FOR MODULES THAT HAVE RES   BUT NOT ENDJOB  -\n         TM    X'4A'(R5),X'80' IS IT RES\n         BO    X06B\n         TM    X'4A'(R5),X'40' IS IT ENDJOB\n         BO    X06B\n         AP    CTDNE,=P'1'         NUMBER USING RES   BUT NO ENDJOB\nX06B     DS    0H\n         SPACE 1\n         TM    X'4A'(R5),X'20' IS IT OBJECT 370\n         BZ    X07\n         MVC   FLAG7,=CL8'OBJ370 '\n         AP    CTOBJ,=P'1'         COUNT NUMBER USING OBJ 370\n         B     X07A\nX07      DS    0H\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\nX07A     DS    0H\n         SPACE 1\n         TM    X'48'(R5),X'01' IS IT COBOL OPTIMISED\n         BZ    X08\n         MVC   FLAG8,=CL8'COBOPT '\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\n         AP    CTOPT,=P'1'         COUNT NUMBER OPTIMISED\n         B     X08A                IT CANNOT THEREFORE BE CAPEX OPT.\nX08      DS    0H\n         CLC   X'48'(6,R4),=CL6'CAPEX'  IS IT CAPEX OPTIMISED ?\n         BE    X08B\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\n         B     X08A\nX08B     MVC   FLAG8,=CL8'CAPEX  '\n         AP    CTCAP,=P'1'         COUNT NUMBER OPTIMISED\n         MVC   DATECOMP,X'48'+X'27'(R4) PICK UP CAPEX'S DATE & TIME\n*                                  STAMP I.E. OCT 22,1979 18.30.40\n         L     R14,INIT1PTR        GET INIT1 POINTER\n         L     R14,X'38'(,R14)     GET PGT POINTER\n         S     R14,=F'8'           THIS IS THE FULLWORD FOR CAPEX\n         L     R14,0(,R14)         GET ITS VALUE\n         LTR   R14,R14                 IS DTECT POSSIBLE\nT0       BZ    X08A                 NO, CONTINUE\n*        EITHER DTECT, XCOUNT, OR PFLOW IS ON\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\nT1       A     R14,TGTPTR           POINT TO OPTION BYTE\n*        WE NOW HAVE THE CAPEX OPTION BYTE\nT2       TM    0(R14),X'60'         IS IT DTECT OR XCOUNT\n         BZ    X08A\n         MVC   FLAGD,=CL5'DTECT'    FLAG OPTION IS ON\nX08A     DS    0H\n         CLC   FLAGA,=C'VS'        CHECK FOR VS ONLY OPTIONS\n         BNE   NOTVS\n         TM    X'4A'(R5),X'08'     SEE IF COUNT WAS SPECIFIED\n         BZ    X09                 NO COUNT OPTION\n         MVC   FLAGB,=C'COUNT'     PUT IT IN MSG\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\n         AP    CTCNT,=P'1'         COUNT NUMBER WITH OPTION\nX09      DS    0H\n         TM    X'4A'(R5),X'04'     WAS TRACE VERB IN PGM\n         BZ    X10                  NO, DO NOT FLAG IT ON LISTING\n         MVC   FLAGC,=C'TRACE'     PUT IT IN MSG\n         MVC   FLAGS,NONSTD        SHOW OUTSIDE OF PROD STANDARDS\n         AP    CTTRC,=P'1'         COUNT NUMBER WITH OPTION\nNOTVS    DS    0H\nX10      DS    0H\nDONEFMT  DS    0H\n*        PUT   (R9),PRTMSG\n         LA    R1,POINTR           SET UP PRINT ROUTINE PARM LIST PTR\n         L     R15,=V(PRINTR)      POINT TO PRINT ROUTINE\n         BALR  R14,R15             CALL THE ROUTINE\n         RETRN RC=0\n*\n*        UNABLE TO FIND THE TASK GLOBAL TABLE  -\n*\nNOTTGT   MVC   DETMSG(16),=CL16'NO TGT      '\n         AP    CTTGT,=P'1'         COUNT NUMBER WITH NO TGT\n         B     DONEFMT\n         SPACE 1\n*\n*        THIS LOAD MODULE NOT CREATED BY COBOL  -\n*\nNOTCOB   MVC   DETMSG(16),=CL16'NOT COBOL   '\n         AP    CTNCB,=P'1'         COUNT LOAD MODULES NOT COBOL\n         B     DONEFMT\n         SPACE 1\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE 1\nMASK     DC    F'63'               MASK FOR 6 BITS   2 - 7\nMASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7\nTGTPTR   DC    F'0'                POINTER TO CURRENT TGT\nINIT1PTR DC    F'0'                POINTER TO CURRENT INIT1 CODE\nNONSTD   DC    C'N'                OUT OF STANDARDS MESSAGE\n         SPACE 1\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        COUNTERS FOR EOJ STATISTICS                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE 1\n*\n*\nCTTGT    DC    PL4'0'              NUMBER FOR WHICH TGT NOT LOCATED\n         DC    CL40'CSECTS FOR WHICH TGT NOT LOCATED'\nCTCOB    DC    PL4'0'              TOTAL MEMBERS CREATED BY COBOL\n         DC    CL40'CSECTS CREATED BY COBOL'\nCTSYM    DC    PL4'0'              TOTAL USING SYMDUMP OPTION\n         DC    CL40'CSECTS USING SYMDUMP OPTION'\nCTFLO    DC    PL4'0'              TOTAL USING FLOW OPTION\n         DC    CL40'CSECTS USING FLOW OPTION'\nCTSTA    DC    PL4'0'              TOTAL USING STATE OPTION\n         DC    CL40'CSECTS USING STATE OPTION'\nCTEST    DC    PL4'0'              TOTAL USING TEST OPTION\n         DC    CL40'CSECTS USING TEST OPTION'\nCTRES    DC    PL4'0'              TOTAL USING RES OPTION\n         DC    CL40'CSECTS USING RES OPTION'\nCTEND    DC    PL4'0'              TOTAL USING ENDJOB OPTION\n         DC    CL40'CSECTS USING ENDJOB OPTION'\nCTOBJ    DC    PL4'0'              TOTAL USING OBJ-370 OPTION\n         DC    CL40'CSECTS USING OBJ-370 OPTION'\nCTOPT    DC    PL4'0'              TOTAL OPTIMISED USING COBOL OPTION\n         DC    CL40'CSECTS OPTIMISED USING COBOL OPTION'\nCTCAP    DC    PL4'0'              TOTAL OPTIMISED USING CAPEX\n         DC    CL40'CSECTS OPTIMISED USING CAPEX'\nCTNCB    DC    PL4'0'              TOTAL LOAD MODULES NOT COBOL\n         DC    CL40'CSECTS NOT COBOL'\n*\nCTDNE    DC    PL4'0'              NUMBER USING RES BUT NOT ENDJOB\n         DC    CL40'CSECTS USING RES BUT NOT ENDJOB'\nCTV4C    DC    PL4'0'              NUMBER USING COBOL V4 COMPILER\n         DC    CL40'CSECTS USING COBOL V4 COMPILER'\nCTVSC    DC    PL4'0'              NUMBER USING COBOL VS COMPILER\n         DC    CL40'CSECTS USING COBOL VS COMPILER'\nCTCNT    DC    PL4'0'              NUMBER USING COUNT OPTION (VS)\n         DC    CL40'CSECTS USING COUNT OPTION (VS)'\nCTTRC    DC    PL4'0'              NUMBER USING TRACE VERB (VS)\n         DC    CL40'CSECTS USING TRACE VERB (VS)'\n         DC    X'FF'               SHOW END OF COUNT TABLE\n         EJECT\n         PRINT GEN\n         ORG   *-240\nTABLE1   EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nPOINTR   DC    A(PRTMSG)\nPRTMSG   DC    CL133' '\n         ORG   PRTMSG\n         DS    CL1 -\nCID      DS    CL7 -\nCNAME    DS    CL8 -               CSECT NAME\n         DS    CL1 -\nCLENGTH  DS    CL7 -               LENGTH OF CSECT\n         DS    CL1 -\nDATECOMP DS    CL20 -\n         DS    CL1 -\nDETMSG   EQU   *\nFLAG1    DS    CL8 -               SYMDUMP\nFLAG2    DS    CL8 -               FLOW\nFLAG3    DS    CL8 -               STATE\nFLAG4    DS    CL8 -               TESTM\nFLAG5    DS    CL8 -               RES\nFLAG6    DS    CL8 -               ENDJOB\nFLAG7    DS    CL8 -               OBJ370\nFLAG8    DS    CL8 -               CAPEX\nFLAGA    DS    CL2 -               VS OR V4\n         DS    C\nFLAGB    DS    CL5 -               COUNT FOR VS\n         DS    C\nFLAGC    DS    CL5 -               TRACE FOR VS\n         DS    C\nFLAGD    DS    CL5 -               DTECT FOR CAPEX\n         DS    C\nFLAGS    DS    C                   NON-STD FLAG\nCHECKL   EQU   *-PRTMSG            MAXIMUM VALUE IS 133\n         ORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBFMT#": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x01\\x00\\x04\\x8f\\x01\\x00\\x08\\x1f\"U\\x00 \\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2000-03-21T22:55:00", "lines": 32, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//STEPLIB DD DISP=SHR,DSN=ASMA.V1R2M0.SASMMOD1\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT424.FILE200\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(COBFMT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ORDER   COBFMT\n MODE    RMODE(24),AMODE(ANY)\n ENTRY   COBFMT\n SETCODE AC(0)\n NAME    COBFMT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBREAD": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x00\\x08O\\x01\\x00\\x08O\\x19\\x06\\x03\\x1c\\x03\\x1a\\x00\\x04\\xd9\\xd6\\xd3\\xc1\\xd5\\xc4\\xe2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2000-03-24T00:00:00", "modifydate": "2000-03-24T19:06:00", "lines": 796, "newlines": 794, "modlines": 4, "user": "ROLANDS"}, "text": "TWA      TITLE 'COBOL TOTAL ATTRIBUTE READER'\n***********************************************************************\n*                                                                     *\n*        COBREAD                                                      *\n*        -------                                                      *\n*                                                             SBG 03/00\n*        YOU HAVE TO BE CAREFUL TO LINKEDIT THIS MODULE WITH  SBG 03/00\n*        AMODE 31 OR ANY, AND RMODE 24, AND NOT RENT.         SBG 03/00\n*                                                                     *\n*        SEARCH A PDS AND REPORT ON THE ATTRIBUTES                    *\n*        OF EACH LOAD MODULE CREATED BY COBOL.                        *\n*                                                                     *\n*        OPTIONALLY READ AND REPORT ON A SINGLE MEMBER OF             *\n*        A PDS, TRIGGERED BY PRESENCE OF A PARM (MEMBER NAME)         *\n*                                                                     *\n*        THIS VERSION SUPPORTS THE FOLLOWING COBOL COMPILERS          *\n*             VERSION 4, COBOL VS.                                    *\n*                                                                     *\n*        FOR EACH MEMBER, THE FOLLOWING IS LISTED                     *\n*            BY THE FORMATTER SUBROUTINE COBRPT                       *\n*                                                                     *\n*               IS PROGRAM MARKED EXECUTABLE                          *\n*               IS IT COBOL?                                          *\n*               IS IT OBJ360 OR OBJ370                                *\n*               IS COBOL /TEST/ OPTION SPECIFIED                      *\n*               IS COBOL /FLOW/ OPTION SPECIFIED                      *\n*               IS COBOL /STATE/ OPTION SPECIFIED                     *\n*               IS COBOL /SYMDUMP/ OPTION SPECIFIED                   *\n*               IS COBOL /RESIDENT/ OPTION SPECIFIED    3/79          *\n*               IS COBOL /ENDJOB/ OPTION SPECIFIED                    *\n*               WAS COBOL /OPTIMIZE/ OPTION SPECIFIED - V4 ONLY       *\n*               WAS CAPEX OPTIMIZE SPECIFIED                          *\n*               WAS CAPEX DTECT SPECIFIED             - CAPEX ONLY    *\n*               WAS COBOL V4 OR COBOL VS UTILIZED FOR COMPILE         *\n*               WAS COBOL /COUNT/ OPTION SPECIFIED    - VS ONLY       *\n*               WAS COBOL /TRACE/ VERB SPECIFIED      - VS ONLY       *\n*               DATE LINKEDITED                                       *\n*                                                                     *\n*        MODIFIED 3/10/80                                             *\n*        -     ADDED ADDITIONAL CHECK FOR NON-EXECUTABLE, NOW         *\n*              SEPERATES NON-EXEC FROM OTHER LOAD FAILURES            *\n*        -     ADDED ADDITIONAL SUMMARY INFORMATION PRINT FROM        *\n*              COBFMT                                                 *\n*        -     CORRECTED MINOR BUGGIES                                *\n*                                                                     *\n*        WRITTEN BY REX WIDMER                                        *\n*                                                                     *\n*        TRANS WORLD AIRLINES INC.                                    *\n*        KANSAS CITY ADMINISTRATIVE CENTER                            *\n*        11500 AMBASSADOR DRIVE                                       *\n*        KANSAS CITY, MO 64153                                        *\n*                                                                     *\n*        816-464-6671                                                 *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        JCL / DD-CARD REQUIREMENTS                                   *\n*                                                                     *\n*        SAMPLE JOBSTREAM                                             *\n*                                                                     *\n*          //S1 EXEC PGM=COBREAD                                      *\n*          //* PARM='MEMNAME'                                         *\n*          //*  OPTIONAL PARM OF MEMBER NAME TO PROCESS               *\n*          //SYSPRINT  DD  SYSOUT=A      FOR THE REPORT               *\n*          //PDS   DD  DSN=SYPP.PGMLIB,DISP=SHR                       *\n*          //*         THE PDS TO ANALYZE                             *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        ABENDS WITHIN THIS MODULE                                    *\n*          USER CODE    MEANING                                       *\n*           U0027       TABLE OVERFLOW, TOO MANY ESDS IN LOAD MODULE  *\n*           U0002       RDJFCB FAILED                                 *\n*           U0003       OBTAIN FAILED                                 *\n*           U0004       DATASET TO BE PROCESSED NOT A PDS             *\n*           U0005       OPEN FAILED FOR PDS DCBS                      *\n*           U0006       OPEN FAILED FOR SYSPRINT                      *\n*                                                                     *\n***********************************************************************\n         EJECT\nCOBREAD  CENTER TYPE=C\n         SYMREGS\n         EJECT\n         L     R2,0(R1)            GET THE PARM POINTER\n         LH    R1,0(R2)            GET PARM LENGTH\n         LTR   R1,R1               SEE IF ZERO\n         BZ    ALLMEM              YES, DO ALL MEMBERS\n         BCTR  R1,0                DECREMENT FOR MVC\n         EX    R1,MVCNAME          MOVE THE NAME\n         OI    MSW,ONEMEM          SET THE 1 - MEMBER SWITCH\n*        READ THE JFCB TO PREPARE FOR AN OBTAIN  -\nALLMEM   RDJFCB (MEMDCB)           READ THE JFCB FOR THE PDS\n         LTR   R15,R15             DID IT DO THAT O.K.  ?\n         BNZ   ERROR2              NO - BRANCH\n         SPACE 1\n*        ISSUE  AN OBTAIN, TO SEE IF THE PDS EXISTS -\n         OBTAIN CAMLIST            ISSUE OBTAIN\n         LTR   R15,R15             DID THE OBTAIN OBTAIN ANYTHING ?\n         BNZ   ERROR3              NO - BRANCH\n         SPACE 1\n*        TEST TO ENSURE THAT THIS DATASET IS A PDS  -\n         TM    AREA+38,X'02'       TEST FOR 'DSORG=PO' IN FORMAT 1\n         BZ    ERROR4              NOT A PDS - BRANCH\n         SPACE 1\n*        OPEN THE DCBS FOR THE DIRECTORY AND THE MEMBERS  -\n         OPEN  (DIRDCB,,MEMDCB)    ISSUE THE OPEN\n         TM    DIRDCB+48,X'10'     DID THE DIRECTORY DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         TM    MEMDCB+48,X'10'     DID THE MEMBER DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         SPACE 1\n*        GET A BUFFER TO READ THE MEMBERS INTO  -\n         MVC   BUFFLEN,MEMDCB+62   GET BLOCKSIZE FROM THE DCB\n         L     R0,BUFFER           LENGTH + SP I.D. FOR GETMAIN\n         GETMAIN R,LV=(0)          ISSUE GETMAIN\n         ST    R1,DECB+12          PUT POINTER TO BUFFER IN DECB\n         SPACE 1\n*        INITIALISE  THE BUFFER TO ZEROS (EASIER DEBUGGING)  -\n         LH    R2,BUFFLEN          GET LENGTH OF THE BUFFER\nZEROLOOP MVI   0(R1),0             MOVE A ZERO INTO THE BUFFER\n         LA    R1,1(,R1)           INDEX THROUGH THE BUFFER\n         BCT   R2,ZEROLOOP         ZERO THE ENTIRE BUFFER\n         SPACE 1\n         OPEN  (SYSPRINT,(OUTPUT)) OPEN SYSPRINT\n         TM    SYSPRINT+48,X'10'   DID IT OPEN O.K.  ?\n         BZ    ERROR6              NO - BRANCH\n         SPACE 1\n*        GET TIME AND DATE  -\n         TIME  DEC\n         ST    R0,TIME             SAVE TIME\n         ST    R1,DATE             SAVE DATE\n         MVO   TIM,TIME(2)         SAVE TIME\n         SPACE 1\n*        GET JOBNAME OF JOB, AND SAVE IT  -\n         EXTRACT FIELD1,FIELDS=(TIOT)\n         L     R1,FIELD1           POINT TO TIOT\n         MVC   JNAME,0(R1)         SAVE JOBNAME\n         B     GET                 GET THE FIRST PDS DIRECTORY BLOCK\n         SPACE 2\n*\n*        GET NEXT MEMBER IN THE PDS  -\n*\n*        FIRST  LOOK FOR A MEMBER IN THE CURRENT DIRECTORY BLOCK -\nLOOPDS1  L     R2,DIRPOINT         POINT TO THE NEXT MEMBER\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            LENGTH IS 5 BITS\n         SLL   R3,1                X 2 BECAUSE LENGTH IN HALF-WORDS\n         LA    R3,12(,R3)          ADD LENGTH OF MEMBER NAME + TTRC\n         AR    R3,R2               POINT TO NEXT MEMBER\n         SPACE 1\n*        FIND  THE END OF THE DIRECTORY BLOCK  -\n         LA    R4,DIRBLOCK         POINT TO THE CURRENT DIRECTORY BLK\n         LH    R5,0(,R4)           GET LENGTH USED\n         AR    R5,R4               POINT TO END OF THE BLOCK\n         CR    R5,R3               HAS THIS BLOCK BEEN EXAUSTED ?\n         BH    GOTNEXT             NO - BRANCH\n         SPACE 1\n*        READ THE NEXT DIRECTORY BLOCK  -\nGET      GET   DIRDCB,DIRBLOCK     READ THE NEXT DIRECTORY BLOCK\n         LA    R3,DIRBLOCK+2       POINT TO THE FIRST MEMBER IN BLOCK\nGOTNEXT  ST    R3,DIRPOINT         SAVE POINTER TO NEXT MEMBER\n         SPACE 1\n*        TEST TO SEE IF WE HAVE GOT TO THE END OF THE PDS  -\nPROCALL  CLC   0(8,R3),LASTMEM     LOOK FOR A MEMBER NAME OF FOXES\n         BE    ENDPDS              GOT TO END - BRANCH\n         TM    MSW,ONEMEM          ARE WE IN 1 MEMBER ONLY MODE\n         BZ    COUNT               NO, CONTINUE\n         CLC   0(8,R3),CNAME       COMPARE FOR DESIRED NAME\n         BE    COUNT               WE FOUND DESIRED NAME\n         BH    ENDPDS              WE ARE PAST THE DESIRED ONE\n         B     LOOPDS1             GO AND TRY THE NEXT MEMBER\n         SPACE 1\n*        COUNT # OF MEMBERS READ  -\nCOUNT    L     R1,CPMEM            GET # OF MEMBERS READ\n         AL    R1,=F'1'            INCREMENT BY 1\n         ST    R1,CPMEM            AND SAVE IT\n         SPACE 2\nHITIT    L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         MVC   TTRZ(3),8(R2)       SAVE TTR OF MEMBER\n         POINT MEMDCB,TTRZ         POINT TO THIS MEMBER\n         SPACE 1\n*\n*        TEST FOR ALIAS  -\n*\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         TM    11(R2),X'80'        IS THIS ENTRY AN ALIAS  ?\n*        PROCESS ALIAS THE SAME AS OTHER MEMBERS  -\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOAD THE MEMBER, THEN READ THE LOAD MODULE RECORDS TO        *\n*        LOCATE CSECTS WITHIN THE MODULE.                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*\n*        BUILD A PRINT LINE  -\n*\nBUILD    LA    R7,LINE             R7 WILL POINT TO DETAIL PRINT LINE\n         USING DETLINE,R7          -\n         MVI   LINE,C' '           BLANK THE PRINT LINE\n         MVC   LINE+1(131),LINE    -\n         SPACE 1\n         AP    CTMEM,=P'1'         COUNT NUMBER OF MEMBERS IN PDS\n         SPACE 1\n         L     R3,DIRPOINT         POINT TO DIRECTORY ENTRY\n         SPACE 1\n*        DETERMINE IF THE MEMBER WAS CREATED BY THE LINKAGE-EDITOR  -\n         IC    R4,11(,R3)          GET LENGTH OF USER DATA\n         N     R4,MASK2            -\n         C     R4,=F'11'           MUST BE AT LEAST 11 HALF-WORDS\n         BNL   CHEKEXEC            IT WAS LINKED - BRANCH\n         SPACE 1\n*        ISSUE MESSAGE - MODULE NOT CREATED BY LINKAGE-EDITOR  -\n         MVC   DETMSG(16),=CL16'NOT LINKED'\n         AP    CTNLE,=P'1'         COUNT NUMBER NOT LINKED\n         MVI   RPTSW,1             SHOW DO NOT PRODUCE CSECT REPORT\n         B     PUTTTRC\nCHEKEXEC DS    0H                  DETERMINE IF MEMBER IS EXECUATBLE\n         TM    20(R3),X'02'        DID L/E MARK IT EXEC\n         BO    LOADIT              YES, TRY TO LOAD IT\n*        ISSUE MESSAGE, MODULE NON EXECUTABLE\n         MVC   DETMSG(16),=CL16'NOT EXECUTABLE'\n         AP    CTNXE,=P'1'         COUNT NUMBER NOT EXECUTABLE\n         MVI   RPTSW,1             SHOW DO NOT PRODUCE CSECT REPORT\n         B     PUTTTRC\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOAD THE MODULE INTO STORAGE                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nLOADIT   DS    0H\n         LOAD  EPLOC=(R3),ERRET=CANTRD,DCB=MEMDCB\n         LR    R4,R0               SAVE LOAD MODULE ADDRESS\n         EJECT\n*\n*        READ THE MODULE, TO GET THE DATE-LINKED FROM THE IDRDATA  -\n*                            AND READ THE CESD RECORDS\nDLINK    DS    0H\nRX       EQU   8     *\nRY       EQU   10      *   TEMPORARY FOR NOW\nRZ       EQU   11    *\n         L     RX,=A(CESDT)  GET ADDRESS OF CESD TABLE\n         SR    RZ,RZ         COUNT OF ENTRIES IN USE\n         ST    RZ,NRESD            STORE NUMBER CURRENTLY IN USE\n         USING ESD,RX        ADDRESS ESD DSECT\n         ST    RX,CURESD     STORE IN CURRENT RECORD\n         ZAP   SKDTL,=P'0'         INITIALISE DATE-LINKED TO ZEROS\nGETLOOP  L     R6,DECB+12          POINT TO INPUT AREA\n         READ  DECB,SF,MF=E        READ THE NEXT RECORD\n         CHECK DECB\n         CLI   0(R6),X'20'         IS THIS A CESD RECORD\n         BNE   NOTCESD              NO, LOOK FOR OTHER INTERESTING RECS\n*        WE NOW HAVE A CESD RECORD, PULL SD SUBRECORDS\nGOTCESD  LA    RY,8(,R6)           POINT TO ESD DATA AREA IN CESD REC\n         LH    RZ,6(,R6)           COUNT OF BYTES OF ESD DATA\n         USING CESD,RY             ADDRESS CESD SUBREC DESCRIPTION\nNEXTSRL  TM    CESDTY,X'0F'        IS IT A SD TYPE\n         BNZ   NEXTSR               IF ANY BITS ON, IT ISNT\n         MVC   ESDNAME,CESDNM      PUT NAME IN TABLE\n         MVC   ESDLENG,CESDIDL     PUT LENGTH IN TABLE\n         MVC   ESDAD,CESDAD        PUT LINKEDITOR ADDRESS IN TABLE\n         LA    RX,ESDLAST-ESD(,RX) TO THE NEXT SLOT\n         L     R1,NRESD            GET CURRENT IN USE COUNT\n         LA    R1,1(,R1)           INCREMENT\n         ST    R1,NRESD            PUT IT BACK\n         C     R1,=F'512'      SEE IF TABLE OVERFLOW\n         BNE   NEXTSR              NO, ITS OK\n         ABEND 27,DUMP             TIME TO QUIT POST HASTE\nNEXTSR   DS    0H                  TO NEXT SUBRECORD\n         LA    RY,16(,RY)          POINT TO NEXT SR SLOT\n         S     RZ,=F'16'           SEE IF ANY DATA IS REALLY LEFT\n         BP    NEXTSRL\n*                                  WE NOW HAVE ALL S/R FROM THIS CESD\nNOTCESD  TM    0(R6),1             DOES THIS RECORD PRECEED A TEXT REC.\n         BO    EODAD               YES - BRANCH (NO IDRDATA RECORDS)\n         CLI   0(R6),X'80'         IS THIS AN IDRDATA RECORD ?\n         BNE   GETLOOP             NO - BRANCH\n         TM    2(R6),2             IS THIS IDRDATA FROM LINK-EDITOR ?\n         BNO   GETLOOP             NO - BRANCH\n         ZAP   SKDTL,15(3,R6)      SAVE DATE LINKED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT AND PRINT GENERAL ITEMS ABOUT LOAD MODULE             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEODAD    DS    0H\n         MVC   DETDTL-1(7),PAT01\n         ED    DETDTL-1(7),SKDTL   PUT DATE LINKED INTO PRINT LINE\n*        OI    DETDTL,C'0'         FIX HIGH ORDER BYTE        SBG 03/00\n         MVI   DETDTL-1,X'40'      0 FILL BYTE NOW-NEED BLANK SBG 03/00\n         SPACE 1\n*        MODULE ENTRY POINT  -\n         MVC   MODEP+1(3),27(R3)   CAPTURE EP OFFSET FOR LATER USE\n         S     R4,MODEP            ADJUST IF MODULE E.P. NOT 0\n         UNPK  DWA(7),27(4,R3)     UNPACK IT\n         MVC   DETEP,DWA           MOVE THE 6 SIGNIFICANT CHARS\n         TR    DETEP,TABLE1        AND MAKE INTO PRINTABLE HEX\n         SPACE 1\n*        MODULE SIZE  -\n         UNPK  DWA(7),22(4,R3)\n         MVC   DETSIZE,DWA\n         TR    DETSIZE,TABLE1\n         SPACE 1\n*        MODULE ATTRIBUTES  -\n         UNPK  DWA(5),20(3,R3)\n         MVC   DETATTR,DWA\n         TR    DETATTR,TABLE1\n         SPACE 1\n*        TTRC  -\nPUTTTRC  DS    0H\n         UNPK  DWA(9),8(5,R3)\n         MVC   DETTTRC,DWA\n         TR    DETTTRC,TABLE1\n         SPACE 1\n*        MEMBER NAME  -\nPUTMEM   DS    0H\n         MVC   DETMEM,0(R3)\n         SPACE 2\nSPC1     EQU   C' '\nSPC3     EQU   C'-'\nPAGEE    EQU   C'1'\n         MVI   CNTL,SPC1\n         BAL   R9,WRITE            PUT A LINE TO THE PRINTER\n         EJECT\n*\n*        NOW CALL CSECT REPORTER WITH CSECT TABLE\n*\n         CLI   RPTSW,1              DID MODULE FAIL TO LOAD\n         BE    DONEREP              YES, WE CANNOT REPORT IT\n         L     RX,=A(CESDT)         GET ADDRESS OF CESD TABLE\n         L     RZ,NRESD             GET COUNT OF ENTRIES\n         LTR   RZ,RZ                ANY MORE LEFT\n         BZ    DONEREP               NO, DONE WITH REPORTING\nREPLOOP  DS    0H\n*        FIND A CSECT TO PASS, RELOCATE THE LOAD POINT\n*        BY THE CSECT ADDRESS\n         L     R1,ESDAD             GET THE LINKEDIT ADDRESS\n         SRL   R1,8                 MAKE 3 BYTE INTO 4\n         LA    R1,0(R1,R4)          RELOCATE THE LOAD ADDRESS\n         ST    R1,POINTER           PUT IT IN THE PARAMETER\n         MVC   LENGTH+1(3),ESDLENG  PICK UP 3 BYTE LENGTH CODE\n         MVC   NAME,ESDNAME         PICK UP 8 BYTE CSECT NAME\n         CLI   ALLSW,1              ARE WE PRINTING ALL CSECTS\n         BE    POINTP               IF SO, DONT SUPPRESS LIB CODES\n         CLC   NAME(3),=CL3'ILB'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               COBOL V2, V3, V4, VS LIBRARY\n         CLC   NAME(3),=CL3'IHO'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               FORTRAN MOD II LIBRARY\n         CLC   NAME(3),=CL3'IHC'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               FORTRAN FREEBIE LIBRARY\n         CLC   NAME(3),=CL3'IHN'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               FORTRAN MOD I LIBRARY\n         CLC   NAME(3),=CL3'IBM'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               PL/I OPTIMIZER LIBRARY\n         CLC   NAME(3),=CL3'IHE'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               PL/I FREEBIE LIBRARY\n         CLC   NAME(3),=CL3'IHD'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               COBOL F LIBRARY (ANCIENT)\nPOINTP   LA    R1,PARMLIST          POINT TO PARAMETER LIST\n         L     R15,=V(COBFMT)       GET ADDRESS OF REPORT ROUTINE\n         BALR  R14,R15             CALL THE CSECT REPORT ROUTINE\nNEXTONE  LA    RX,ESDLAST-ESD(,RX) TO NEXT ENTRY IF PRESENT\n         BCT   RZ,REPLOOP          ANY MORE LEFT?\nDONEREP  DS    0H                  DONE WITH PRINT\n         MVI   RPTSW,0             CLEAR ERROR SWITCH\n*\n*        DELETE MODULE - AND GO TO NEXT ONE  -\n*\nDONETHIS DELETE EPLOC=(R3)\n         TM    MSW,ONEMEM\n         BO    ENDPDS              QUIT AFTER FORMATTING SINGLE REQ\n         B     LOOPDS1             GO AND WORK ON NEXT MEMBER\n         SPACE 1\n*\n*        ERROR TRYING TO LOAD THIS MODULE  -\n*\nCANTRD   STC   R15,WORK+6          SAVE RETURN CODE FROM LOAD MACRO\n         MVC   DETMSG(16),=CL16'CANT LOAD OK -'\n         UNPK  WORK(3),WORK+6(2)   MAKE RETURN CODE PRINTABLE\n         TR    WORK(2),TABLE1\n         MVC   DETMSG+15(2),WORK   PUT RETURN CODE INTO MSG.\n         AP    CTWNL,=P'1'         COUNT NUMBER UNABLE TO LOAD\n         MVI   RPTSW,1             SHOW DO NOT PREPARE CSECT REPORT\n         B     DLINK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF THE PDS - CLEAN UP AND EOJ                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        CLOSE DCBS FOR THE PDS  -\nENDPDS   CLOSE (MEMDCB,,DIRDCB)    ISSUE CLOSE\n         SPACE 1\n*        FREE THE BUFFER USED TO READ THE MEMBERS  -\n         L     R0,BUFFER           GET LENGTH AND S.P.\n         L     R1,DECB+12          POINT TO BUFFER\n         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN\n         SPACE 1\n*        FREE  THE BUFFERS USED BY THE DIRECTORY DCB  -\n         FREEPOOL DIRDCB\n         SPACE 1\n*        ISSUE THE END MESSAGES  -\n         TM    MSW,ONEMEM          ARE WE PROCESSING ONE MEMBER ONLY ?\n         BO    CLOSPRNT            YES - BRANCH\n         SPACE 1\n         OI    MSW,MSW40           SET 'NO SECONDARY HEADINGS'\n         ZAP   LINENO,MAXLINE      FORCE PAGE SKIP\n         MVI   CNTL,SPC3           SPACE 3 IMMED.\n         BAL   R9,WRITE\n         MVI   CNTL,SPC3           SPACE 3 IMMED.\n         BAL   R9,WRITE\n         SPACE 1\n*        PUT SUMMARY LINE - TOTAL MEMBERS IN LIBRARY  -\n         MVI   CNTL,SPC1\n         MVC   LINE+50(10),PAT04\n         ED    LINE+50(10),CTMEM\n         MVC   LINE+5(40),HDMEM\n         BAL   R9,WRITE\n         SPACE 1\n*        PUT SUMMARY LINE - NOT CREATED BY LINKAGE-EDITOR  -\n         MVI   CNTL,SPC1\n         MVC   LINE+50(10),PAT04\n         ED    LINE+50(10),CTNLE\n         MVC   LINE+5(40),HDNLE\n         BAL   R9,WRITE\n         SPACE 1\n*        PUT SUMMARY LINE - NON EXECUTABLE\n         MVI   CNTL,SPC1\n         MVC   LINE+50(10),PAT04\n         ED    LINE+50(10),CTNXE\n         MVC   LINE+5(40),HDNXE\n         BAL   R9,WRITE\n         SPACE 1\n*        PUT SUMMARY LINE - TOTAL MEMBERS THAT WILL NOT LOAD  -\n         MVI   CNTL,SPC1\n         MVC   LINE+50(10),PAT04\n         ED    LINE+50(10),CTWNL\n         MVC   LINE+5(40),HDWNL\n         BAL   R9,WRITE\n*        PUT SUMMARY FROM COBFMT -\n         MVI   CNTL,SPC3           SPACE 3 IMMED.\n         BAL   R9,WRITE\n         MVI   CNTL,SPC3           SPACE 3 IMMED.\n         BAL   R9,WRITE\n         L     R3,PARMLIST         GET ADDRESS OF COUNT TABLE\nPRNTCNTS DS    0H\n         LTR   R3,R3               IS THE COUNT TABLE PRESENT    RS0300\n         BZ    CLOSPRNT            NO - LEAVE                    RS0300\n         CLI   0(R3),X'FF'         IS THIS THE END OF COUNT TABLE\n         BE    CLOSPRNT            YES - BRANCH\n         MVI   CNTL,SPC1\n         MVC   LINE+50(10),PAT04   PATTERN FOR COUNT FORMATTING\n         ED    LINE+50(10),0(R3)   COUNT\n         MVC   LINE+5(40),4(R3)    TEXT OF MESSAGE\n         BAL   R9,WRITE            OUT WITH THE MESSAGE\n         LA    R3,44(,R3)          TO THE NEXT ENTRY IN COUNT TABLE\n         B     PRNTCNTS            AND LOOP\n         SPACE 1\nCLOSPRNT CLOSE (SYSPRINT)          CLOSE SYSPRINT\n         SPACE 1\n         FREEPOOL SYSPRINT         FREE THE SYSPRINT BUFFER POOL\n         SPACE 1\nGOBACK   RETRN  RC=0\n         LTORG\n         EJECT\n         DS    0H                  FORCE ALIGNMENT\nPRINTR   CENTER TYPE=E,BASE=11    FOR EXTERNAL CALLS ONLY\n         L     R12,=A(COBREAD)    RESET BASE AS NEEDED\n         L     R1,0(,R1)          POINT TO THE PASSED RECORD\n         MVC   CNTL(133),0(R1)\n         BAL   R9,WRITE           ISSUE THE PUT\n         RETRN RC=0\n         LTORG\n         DROP  R11\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WRITE A LINE TO THE PRINTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nWRITE    ST    R9,SAVE9\n*\n*        TEST  FOR HEADINGS REQUIRED  -\n*\n         CP    LINENO,MAXLINE      IS IT BOTTOM OF PAGE YET  ?\n         BL    NOHEAD              NO - BRANCH\n         SPACE 1\n         ZAP   LINENO,=P'0'        RESET LINE COUNTER\n         AP    PAGE,=P'1'          INCREMENT PAGE #\n         SPACE 1\n         MVI   HCNTL,PAGEE         SKIP TO 01\n         MVI   HLINE,C' '          BLANK HEADING PRINT LINE\n         MVC   HLINE+1(131),HLINE  -\n         LA    R2,HCNTL            POINT TO PRINT LINE\n         BAL   R9,PRINT            GO PRINT\n         SPACE 1\n         MVC   HLINE+110(6),PAT02\n         ED    HLINE+110(6),PAGE   EDIT PAGE #\n         MVC   HLINE+106(4),=C'PAGE'\n         MVC   HLINE+90(7),PAT01\n         ED    HLINE+90(7),DATE+1  EDIT DATE  YY.DDD\n         MVI   HLINE+90,X'40'   ZERO FILL BYTE NOW-NEED BLANK SBG 03/00\n         MVC   HLINE+83(5),=C'DATE:'\n         MVC   HLINE+30(L'HEAD01),HEAD01\n         MVC   HLINE(8),JNAME\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE+90(7),PAT03\n         ED    HLINE+90(7),TIM     EDIT TIME  HH.MM\n         MVC   HLINE+83(5),=C'TIME:'\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\n*        PUT DSNAME = AND VOLSER =  -\n         LA    R1,JFCB             POINT TO JFCB\n         MVC   HLINE+25(44),0(R1)  MOVE DSNAME\n         MVC   HLINE+16(8),=C'DSNAME ='\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         LA    R1,JFCB             POINT TO JFCB\n         MVC   HLINE+25(6),118(R1) MOVE VOLSER\n         MVC   HLINE+16(8),=C'VOLUME ='\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         TM    MSW,MSW40\n         BO    NOHEAD\n         SPACE 1\n         MVC   HLINE(132),HEAD02\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD03\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD04\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\nNOHEAD   AP    LINENO,=P'1'        INCREMENT LINE #\n         LA    R2,CNTL             POINT TO DETAIL PRINT LINE\n         BAL   R9,PRINT            PRINT IT\n         L     R9,SAVE9            RESTORE RETUTN REGISTER\n         BR    R9                  RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT A LINE SUBROUTINE                                      *\n*                                                                     *\n***********************************************************************\nPRINT    LR    R0,R2               POINT TO LINE TO PRINT\n         PUT   SYSPRINT            PUT IT\n         MVI   0(R2),C' '          BLANK OUT THE LINE WE PRINTED\n         MVC   1(131,R2),0(R2)     -\n         BR    R9                  RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR CONDITIONS                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        ERROR IN RDJFCB  -\nERROR2   LA    R2,MEMDCB           POINT TO DCB\n         ABEND 2,DUMP\n         SPACE 1\n*        ERROR IN OBTAIN  -\nERROR3   LA    R2,CAMLIST          POINT TO CAMLST\n         ABEND 3,DUMP\n         SPACE 1\n*        DATASET TO BE PROCESSED IS NOT A PDS  -\nERROR4   LA    R2,AREA             POINT TO FORMAT 1 LABEL\n         ABEND 4,DUMP\n         SPACE 1\n*        CANNOT OPEN PDS DCBS  -\nERROR5   LA    R2,DIRDCB           POINT TO DIRECTORY DCB\n         LA    R3,MEMDCB           POINT TO MEMBER DCB\n         ABEND 5,DUMP\n         SPACE 1\n*        UNABLE TO OPEN SYSPRINT  -\nERROR6   LA    R2,SYSPRINT         POINT TO SYSPRINT DCB\n         ABEND 6,DUMP              ABEND\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nWORK     DC    D'0'                WORK AREA\nSAVE9    DC    F'0'                REG. 9 SAVE AREA\n         SPACE 1\nPARMLIST DC    A(0)                ADDRESS OF COUNT TABLE\n         DC    X'80',AL3(POINTER)\nPOINTER  DC    F'0'                CURRENT CSECT ADDRESS\nLENGTH   DC    F'0'                CURRENT CSECT LENGTH\nNAME     DC    CL8' '              CURRENT CSECT NAME\nMODEP    DC    F'0'                RELATIVE EP OF CURRENT MODULE\n         SPACE 1\nMASK     DC    F'63'               MASK FOR 6 BITS   2 - 7\nMASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7\n         DC    0H'0'\nMVCNAME  MVC   CNAME(0),2(R2)      MOVE PARM FIELD\nCNAME    DC    CL8' '              NAME PASSED IN PARM FIELD\n         SPACE 1\n*        FLAGS  -\nMSW      DC    X'00'               FLAGS\nONEMEM EQU     X'80'               ONLY ONE MEMBER TO BE PROCESSED\nMSW40 EQU      X'40'               BYPASS SECONDARY HEADINGS\nRPTSW    DC    X'00'               IF NON-ZERO DONT REPORT CSECTS\nALLSW    DC    X'00'               IF NON-ZERO REPORT ALL CSECTS\n*                                  ELSE SUPPRESS ILB, IBM, IHO\n         SPACE 1\n*        FIELDS RELATING TO THE PDS  -\nTTRZ     DC    F'0'                TTR OF MEMBER I AM PROCESSING\n         READ  DECB,SF,MEMDCB,0,'S',MF=L                       DECB\n         SPACE 1\nBUFFER   DC    0F'0',X'0200'       LENGTH + SP FOR GETMAIN\nBUFFLEN  DC    H'0'                -\n         SPACE 1\nCPMEM    DC    F'0'                # OF MEMBERS PROCESSED FROM PDS\n         SPACE 1\nDIRPOINT DC    F'0'                POINTER TO CURRENT MEMBER\nLASTMEM  DC    8X'FF'              NAME OF LAST MEMBER IN PDS\nEXLST    DC    0F'0',X'87',AL3(JFCB)\nTGTPTR   DC    F'0'                POINTER TO CURRENT TGT\nINIT1PTR DC    F'0'                POINTER TO CURRENT INIT1 CODE\n         SPACE 1\n*        TRANSLATE TABLE TO CONVERT TO PRINTABLE HEX  -\n         ORG   *-240\nTABLE1   EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         SPACE 1\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         SPACE 1\nCAMLIST  CAMLST SEARCH,JFCB,JFCB+118,AREA\n         SPACE 1\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nAREA     DC    0D'0',148X'00'      AREA TO CONTAIN THE FORMAT 1 LABEL\nDIRBLOCK DC    32D'0'              CURRENT DIRECTORY BLOCK\n         SPACE 1\nJNAME    DC    CL8' '              JOBNAME OF THIS JOB\nFIELD1   DC    F'0'                POINTER TO TIOT\n         SPACE\n*        DETAIL PRINT LINE  _\nCNTL     DC    C' '\nLINE     DC    132C' '\n         SPACE 1\n*        HEADING PRINT LINE  -\nHCNTL    DC    C'1'\nHLINE    DC    132C' '\n         SPACE 1\nPAT01    DC    XL7'F021204B202020'\nPAT02    DC    XL6'402020202120'\nPAT03    DC    XL7'402120204B2020'\nPAT04    DC    XL10'40206B2020206B202120'\n         SPACE 1\nSKDTL    DC    PL3'0'              DATE-LINKED FOR CURRENT MEMBER\n         SPACE 1\nPAGE     DC    PL3'0'              CURRENT PAGE #\nLINENO   DC    PL2'99'             CURRENT LINE #\nMAXLINE  DC    PL2'45'             MAX # OF LINES/PAGE\n         SPACE 1\nDWA      DC    2D'0'               WORK SPACE\nTIME     DC    F'0'\nTIM      DC    X'00000F'\nDATE     DC    F'0'\n         SPACE 1\n         SPACE 1\n*        COUNTERS FOR EOJ STATISTICS  -\nHDMEM    DC    CL40'TOTAL MEMBERS IN LIBRARY'\nHDNLE    DC    CL40'NUMBER NOT CREATED BY LINK-EDITOR'\nHDNXE    DC    CL40'NUMBER NOT EXECUTABLE'\nHDWNL    DC    CL40'MEMBERS WOULD NOT LOAD'\n         SPACE 1\n*        COUNTERS FOR EOJ STATISTICS  -\nCTMEM    DC    PL4'0'              TOTAL MEMBERS IN LIBRARY\nCTNLE    DC    PL4'0'              NUMBER NOT CREATED BY LINK-EDITOR\nCTNXE    DC    PL4'0'              NUMBER NOT EXECUTABLE\nCTWNL    DC    PL4'0'              NUMBER FOR WHICH WILL NOT LOAD\nCTCOB    DC    PL4'0'              TOTAL MEMBERS CREATED BY COBOL\n*        POINTERS AND COUNTERS FOR ESD TABLE\nCURESD   DC    A(CESDT)            POINTS TO CURRENT SLOT\nNRESD    DC    F'0'                CURRENT IN USE COUNT\n*        D C B S  -\n         PRINT NOGEN\n*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -\nMEMDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST,        X\n               EODAD=EODAD\n         SPACE 1\n*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -\nDIRDCB   DCB   DDNAME=PDS,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,       X\n               LRECL=256,BUFNO=100\n         SPACE 1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA,  X\n               BLKSIZE=1995\nHEAD01   DC    C'T W A - PDS - CSECT ATTRIBUTES REPORT 01/80 VERSION'\nHEAD02   DC    CL132' MOD-NAME    TTRC  L-ATTR LGTH  E.P.   L-DATE ----X\n               ----------------------- ATTRIBUTE FLAGS ----------------X\n               ---------------------'\nHEAD03   DC    CL132'   CSECT-NM    LENGTH    DATE COMPILED        SYMDX\n                  FLOW    STATE   TEST    RES     ENDJOB  OBJECT  OPT  X\n                 VER COUNT TRACE DET'\n         EJECT\nHEAD04   DC    CL132'  ------------------------------------------------X\n               --------------------------------------------------------X\n               ---------------------'\n         PRINT GEN\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CESD STORAGE TABLE                                           *\n*         THIS TABLE STORES THE CESD INFORMATION FOR A SINGLE         *\n*         LOAD MODULE                                                 *\n*                                                                     *\n*         TABLE ENTRIES ARE DESCRIBED BY THE DSECT CALLED ESD         *\n*                                                                     *\n***********************************************************************\n         DC    D'0'\nMAXCESD  EQU   0512          MAXIMUM ENTRIES IN ESD TABLE\n*\n*\nCESDT    DC    512XL16'00'   CESD ENTRIES\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE AN CESD SUBRECORD                              *\n*                                                                     *\n***********************************************************************\nCESD     DSECT\nCESDNM   DS    CL8 -               CSECT NAME\nCESDTY   DS    XL1 -               TYPE OF SYMBOL\nCESDAD   DS    CL3 -               ADDRESS ASSIGNED TO SYMBOL\nCESDSN   DS    CL1 -               SEGMENT NUMBER\nCESDIDL  DS    CL3 -               ID FOR LR (2 BYTES)\n*                                  LENGTH OF SD, PC, CM, PR (3 BYTES)\n*                                  ZERO FOR WX, NULL, ER    (3 BYTES)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE AN ESD TABLE ENTRY                             *\n*                                                                     *\n***********************************************************************\nESD      DSECT\nESDNAME  DS    CL8 -               CSECT NAME\nESDAD    DS    XL3 -               LINKEDITOR ASSIGNED ADDRESS\nESDLENG  DS    CL3 -               CSECT LENGTH\n         DS    CL2 -               FILLER\nESDLAST  EQU   *\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nDETLINE  DSECT\n         DS    CL1 -\nDETMEM   DS    CL8 -               MEMBER NAME\n         DS    CL1 -\nDETTTRC  DS    XL8 -               TTRC\n         DS    CL1 -\nDETATTR  DS    XL4 -               MODULE ATTRIBUTES\n         DS    CL1 -\nDETSIZE  DS    CL6 -               MODULE SIZE\n         DS    CL1 -\nDETEP    DS    CL6 -               MODULE ENTRY POINT\n         DS    CL1 -\nDETDTL   DS    CL6 -               DATE LINKED\n         DS    CL1 -\nDETMSG   EQU   *\nLNLGTH   EQU   *-DETLINE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBREAD#": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x01\\x00\\x04\\x8f\\x01\\x00\\x08\\x1f\"S\\x00!\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2000-03-21T22:53:00", "lines": 33, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//STEPLIB DD DISP=SHR,DSN=ASMA.V1R2M0.SASMMOD1\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT424.FILE200\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(COBREAD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n INCLUDE SYSLIB(COBFMT)\n ORDER COBREAD,COBFMT\n MODE    RMODE(24),AMODE(ANY)\n ENTRY   COBREAD\n SETCODE AC(0)\n NAME    COBREAD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBRJCL": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "TWA"}, "text": "//S815FIX JOB 1,REXW,REGION=1000K,PRTY=9,NOTIFY=S815,MSGCLASS=M\n//*MAIN ORG=LV2\n//*\n//*     JCL TO RUN COBREAD LOAD MODULE ANALYZER\n//*     THIS ANALYZER REPLACES EARLIER COBAUDIT PROCESSOR\n//*\n//S1 EXEC PGM=COBREAD,ACCT='3200001020T00008484039554SF110B'\n//STEPLIB DD  DSN=S815.MASTER.LOAD,DISP=SHR\n//SYSUDUMP  DD  SYSOUT=M\n//PDS  DD  DSN=IMSTST.PGMLIB,DISP=SHR\n//SYSPRINT  DD  SYSOUT=M\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPARE": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x01g\\x01g\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 359, "newlines": 359, "modlines": 0, "user": "TWA"}, "text": "TWA      TITLE 'COMPARE TWO LOAD MODULES FOR DIFFERENCES '\n***********************************************************************\n*                                                                     *\n*        COMPARE                                                      *\n*        -------                                                      *\n*                                                                     *\n*        PROCESS PAIRS OF COPIES OF A PROGRAM AND DETECT WHICH        *\n*        CSECTS ARE                                                   *\n*                  1.  DIFFERENT                                      *\n*                  2.  WITHIN INSTALLATION STANDARDS                  *\n*                                                                     *\n*        THIS VERSION SUPPORTS THE FOLLOWING COBOL COMPILERS          *\n*             VERSION 4, COBOL VS.                                    *\n*                                                                     *\n*        FOR EACH MEMBER, THE FOLLOWING IS EXAMINED -                 *\n*                                                                     *\n*               IS PROGRAM MARKED EXECUTABLE                          *\n*               IS IT COBOL?                                          *\n*               IS IT OBJ360 OR OBJ370                                *\n*               IS COBOL /TEST/ OPTION SPECIFIED                      *\n*               IS COBOL /FLOW/ OPTION SPECIFIED                      *\n*               IS COBOL /STATE/ OPTION SPECIFIED                     *\n*               IS COBOL /SYMDUMP/ OPTION SPECIFIED                   *\n*               IS COBOL /RESIDENT/ OPTION SPECIFIED    3/79          *\n*               IS COBOL /ENDJOB/ OPTION SPECIFIED                    *\n*               WAS COBOL /OPTIMIZE/ OPTION SPECIFIED - V4 ONLY       *\n*               WAS CAPEX OPTIMIZE SPECIFIED                          *\n*               WAS CAPEX DTECT SPECIFIED             - CAPEX ONLY    *\n*               WAS COBOL V4 OR COBOL VS UTILIZED FOR COMPILE         *\n*               WAS COBOL /COUNT/ OPTION SPECIFIED    - VS ONLY       *\n*               WAS COBOL /TRACE/ VERB SPECIFIED      - VS ONLY       *\n*               DATE LINKEDITED                                       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        JCL / DD-CARD REQUIREMENTS                                   *\n*                                                                     *\n*        SAMPLE JOBSTREAM                                             *\n*                                                                     *\n*          //S1 EXEC PGM=COMPARE                                      *\n*          //SYSPRINT  DD  SYSOUT=A      FOR THE REPORT               *\n*          //PDS   DD  DSN=SYPP.PGMLIB,DISP=SHR                       *\n*          //*         THE PDS TO ANALYZE NEW PGMS                    *\n*          //PDS2  DD  DSN=SYPP.XGMLIB,DISP=SHR                       *\n*          //*         THE PDS TO ANALYZE OLD PGMS                    *\n*          //SYSIN  DD  *     MEMBER NAMES TO COMPARE                 *\n*          NAME1                                                      *\n*          NAME2                                                      *\n*          NAME3                                                      *\n*          NAMEN                                                      *\n*          /*                                                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ABENDS                                                       *\n*          USER CODE    REASON                                        *\n*           U0010       NO INPUT IN SYSIN                             *\n*           U0014       OPEN FAILED FOR SYSIN                         *\n*           U0015       CONTROL STATEMENT INVALID                     *\n*           U0006       OPEN FAILED FOR SYSPRINT                      *\n*           U0011       NON-ZERO RETURN CODE FROM COMPDS - FIRST CALL *\n*           U0012       NON-ZERO RETURN CODE FROM COMPDS - 2ND CALL   *\n*                       NOW REPLACED BY MESSAGE - NO ABEND            *\n*                       ALSO WILL SET RC=4                            *\n*           U0006       NON-ZERO RETURN CODE FROM COMPTBL             *\n*                                                                     *\n***********************************************************************\n         EJECT\nCOMPARE  CENTER TYPE=C\n         SYMREGS\n         EJECT\n         OPEN  (SYSPRINT,(OUTPUT)) OPEN SYSPRINT\n         TM    SYSPRINT+48,X'10'   DID IT OPEN O.K.  ?\n         BZ    ERROR6              NO - BRANCH\n         OPEN  (SYSIN,(INPUT))     OPEN SYSIN\n         TM    SYSIN+48,X'10'      DID IT OPEN O.K.  ?\n         BZ    ERROR14             NO - BRANCH\n         SPACE 1\nLOOP     GET   SYSIN               READ CONTROL STMT\n         OI    MSW,INPUT                SHOW THAT WE READ SOMETHING\n         CLI   0(R1),C' '          IS SOMETHING THERE\n         BE    ERROR15              NO, DIE\n         MVC   REALNAME,0(R1)      MOVE NAME TO HOLD AREA\n         MVC   MNAME,REALNAME      FOR POSSIBLE MSG USAGE\n         GETMAIN R,LV=PLISTL,SP=3  GET AREA FOR FIRST LIBRARY\n         ST    R1,PLIST1\n         ST    R1,PLIST31\n         ST    R1,PLIST41\n         OI    PLIST1,X'80'        SET END OF PARM LIST\n         USING PLIST,R1\n         LA    R0,PLISTC           GET MAX NUMBER OF RECORDS\n         ST    R0,PRECMX\n         LA    R0,JFCB             GET ADDRESS OF JFCB WORK AREA\n         ST    R0,EXLST1A          PUT IT IN DCB#1 EXIT LIST\n         OI    EXLST1A,X'87'       MARK ENTRY AS ACTIVE, JFCB, LAST\n         MVC   CNAME,REALNAME\n         DROP  R1\n         GETMAIN R,LV=PLISTL,SP=4  GET AREA FOR SECOND LIBRARY\n         ST    R1,PLIST2\n         ST    R1,PLIST32\n         ST    R1,PLIST42\n         OI    PLIST2,X'80'        SET END OF PARM LIST\n         USING PLIST,R1\n         LA    R0,PLISTC           GET MAX NUMBER OF RECORDS\n         ST    R0,PRECMX\n         LA    R0,JFCB             GET ADDRESS OF JFCB WORK AREA\n         ST    R0,EXLST2A          PUT IT IN DCB#2 EXIT LIST\n         OI    EXLST2A,X'87'       MARK ENTRY AS ACTIVE, JFCB, LAST\n         MVC   CNAME,REALNAME\n         DROP  R1\n*\n*        SET UP AND CALL THE PGM ANALYZER FOR THE FIRST LIBRARY\n*\n         LA    R1,PARM1            FIRST PARM LIST POINTER\n         L     R15,=V(COMPDS)      POINT TO THE ROUTINE\n         BALR  R14,R15             CALL THE ROUTINE\n         LTR   R15,R15             CHECK ITS RETURN CODE\n         BNZ   ERR01                CANNOT CONTINUE WITH THIS MEMBER\n*\n*        SET UP AND CALL THE PGM ANALYZER FOR THE SECOND LIBRARY\n*\n         LA    R1,PARM2            FIRST PARM LIST POINTER\n         L     R15,=V(COMPDS)      POINT TO THE ROUTINE\n         BALR  R14,R15             CALL THE ROUTINE\n         LTR   R15,R15             CHECK ITS RETURN CODE\n         BNZ   ERR02                CANNOT CONTINUE WITH THIS MEMBER\n*\n*        SET UP AND CALL THE ACTUAL COMPARE ROUTINE\n*\n         TM    MSW,TEST            ARE WE TEST MODE\n         BZ    NOTEST1\n*        L     R15,=V(SNAP)  TEMP  POINT TO THE ROUTINE\n*        BALR  R14,R15             CALL THE ROUTINE\nNOTEST1  DS    0H\n         GETMAIN R,LV=MTABLL,SP=5  GET AREA FOR MESSAGE TABLE\n         ST    R1,MTABL3\n         ST    R1,MTABL4\n         OI    MTABL3,X'80'        SET END OF PARM LIST\n         USING MTABL,R1\n         LA    R15,MSGA\n         ST    R15,MSGCA           SET CURRENT SLOT TO FIRST\n         XC    MSGCCT,MSGCCT       SET IN USE COUNT TO ZERO\n         LA    R15,MSGMAXX         GET MAXIMUM SLOTS IN TABLE\n         ST    R15,MSGMAX          SET IT IN THE TABLE\n         DROP  R1\n         LA    R1,PARM3            FIRST PARM LIST POINTER\n         L     R15,=V(COMPTBL)     POINT TO THE ROUTINE\n         BALR  R14,R15             CALL THE ROUTINE\n         LTR   R15,R15             CHECK ITS RETURN CODE\n         BNZ   ERR03                CANNOT CONTINUE WITH THIS MEMBER\n         TM    MSW,TEST            ARE WE TEST MODE\n         BZ    NOTEST2\n*        L     R15,=V(SNAP)  TEMP  POINT TO THE ROUTINE\n*        BALR  R14,R15             CALL THE ROUTINE\nNOTEST2  DS    0H\n         LA    R1,PARM4\n         L     R15,=V(PRTTBL)      POINT TO THE ROUTINE\n         BALR  R14,R15             CALL THE ROUTINE\n         L     R2,MTABL3                PREPARE FOR FREEMAIN\n         FREEMAIN R,LV=MTABLL,SP=5,A=(R2) FREE UP A TABLE\nCONTINUE L     R2,PLIST1                PREPARE FOR FREEMAIN\n         FREEMAIN R,LV=PLISTL,SP=3,A=(R2) FREE UP A TABLE\n         L     R2,PLIST2                PREPARE FOR FREEMAIN\n         FREEMAIN R,LV=PLISTL,SP=4,A=(R2) FREE UP A TABLE\n         B     LOOP                     DO IT AGAIN, SAM\nDONE     CLOSE (SYSPRINT,,SYSIN)   CLOSE SYSPRINT AND SYSIN\n         SPACE 1\n         FREEPOOL SYSPRINT         FREE THE SYSPRINT BUFFER POOL\n         FREEPOOL SYSIN            FREE THE SYSIN BUFFER POOL\n         SPACE 1\n         TM    MSW,INPUT                DID WE HAVE SOME INPUT\n         BZ    DONEX                     NO, ABEND\nGOBACK   RETRN  RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR CONDITIONS                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        NO INPUT\nDONEX    ABEND 10,DUMP             NO INPUT PRESENT\n         SPACE 1\n*        UNABLE TO OPEN SYSIN     -\nERROR14  LA    R2,SYSIN            POINT TO SYSIN    DCB\n         ABEND 14,DUMP             ABEND\n         SPACE 1\n*        BLANK CONTROL STMT\nERROR15  LA    R2,0(,R1)           POINT TO BAD CONTROL RECORD\n         ABEND 15,DUMP             ABEND\n         SPACE 1\n*        UNABLE TO OPEN SYSPRINT  -\nERROR6   LA    R2,SYSPRINT         POINT TO SYSPRINT DCB\n         ABEND 6,DUMP              ABEND\nERR01    ABEND 11,DUMP             ABEND\nERR03    ABEND 13,DUMP             ABEND\n         EJECT\nERR02    DS    0H      BAD RETURN CODE WHEN READING /OLD/ MODULE\n*                      RETURN CODE =16 -> MESSAGE CANNOT LOAD MODULE\n*                      RETURN CODE =8 -> MESSAGE MODULE NOT THERE\n         C     R15,=F'16'  WAS IT A LOAD FAILURE\n         BE    CANTLOAD    PUT OUT THE MSG\n         C     R15,=F'8'   WAS IT A MODULE NOT FOUND\n         BE    NOTHOME     PUT OUT THE MSG\n         LR    R2,R15      WHO KNOWS WHAT HIT US\n         ABEND 12,DUMP     SHOULD NEVER OCCUR\nSPLAT    LA    R9,5        COUNT\nPL0      PUT   SYSPRINT,SPLATMSG\n         BCT   R9,PL0\n         BR    R10         BACK TO CALLER\nNOTHOME  BAL   R10,SPLAT   PUT OUT ATTENTION GETTER\n         LA    R9,2        COUNT\nPL2      PUT   SYSPRINT,NOTMSG\n         BCT   R9,PL2\n         BAL   R10,SPLAT\n         B     CONTINUE\nCANTLOAD BAL   R10,SPLAT   PUT OUT ATTENTION GETTER\n         LA    R9,2        COUNT\nPL1      PUT   SYSPRINT,CANTMSG\n         BCT   R9,PL1\n         BAL   R10,SPLAT\n         B     CONTINUE\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nREALNAME DC    CL8'TEMPCOB'   PLACE FOR NAME FROM CTL RECORD\nMSW      DC    X'00'               GENERAL PURPOSE MASTER SWITCH\nTEST     EQU   X'80'                    WAS TEST DUMP REQUESTED\nINPUT    EQU   X'40'               WAS  INPUT PRESENT\nPARM1    DC    0F'0'               PARAMETER LIST TO S/R\n         DC    A(DIRDCB)\n         DC    A(MEMDCB)\nPLIST1   DC    X'80',AL3(0)        PLIST POINTER\nPARM2    DC    0F'0'               PARAMETER LIST TO S/R\n         DC    A(DIRDCB2)\n         DC    A(MEMDCB2)\nPLIST2   DC    X'80',AL3(0)        PLIST POINTER\nPARM3    DC    0F'0'               PARAMETER LIST TO S/R\nPLIST31  DC    X'00',AL3(0)        PLIST1 POINTER\nPLIST32  DC    X'00',AL3(0)        PLIST2 POINTER\nMTABL3   DC    X'80',AL3(0)        MESSAGETABLE POINTER\nPARM4    DC    0F'0'               PARAMETER LIST TO S/R\nPLIST41  DC    X'00',AL3(0)        PLIST1 POINTER\nPLIST42  DC    X'00',AL3(0)        PLIST2 POINTER\nMTABL4   DC    X'00',AL3(0)        MESSAGETABLE POINTER\n         DC    X'80',AL3(SYSPRINT) SYSPRINT DCB POINTER\n         EJECT\n*        D C B S  -\n         PRINT NOGEN\n*        SYSIN  DCB - USED TO READ NAMES OF MEMBERS TO PROCESS -\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL), .......................\n               EODAD=DONE,LRECL=80\n         SPACE 1\n*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -\nMEMDCB   DCB   DDNAME=PDS,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST1\n*              EODAD FILLED IN BY USER\n         SPACE 1\n*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -\nDIRDCB   DCB   DDNAME=PDS,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,       X\n               LRECL=256,BUFNO=100\n         SPACE 1\n*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -\nMEMDCB2  DCB   DDNAME=PDS2,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST2\n*              EODAD FILLED IN BY USER\n         SPACE 1\n*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -\nDIRDCB2  DCB   DDNAME=PDS2,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,      X\n               LRECL=256,BUFNO=100\n         SPACE 1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA,  X\n               BLKSIZE=1995\nEXLST1   DC    0F'0'         MEMDCB EXIT LIST\nEXLST1A  DC    F'0'          FILLED IN WITH X'87',AL3(JFCB) WORK #1\nEXLST2   DC    0F'0'         MEMDCB2 EXIT LIST\nEXLST2A  DC    F'0'          FILLED IN WITH X'87',AL3(JFCB) WORK#2\n         EJECT\n         PRINT GEN\n         LTORG\nSPLATMSG DC    CL40'0  * * *    W A R N I N G   * * * '\n         DC    CL33'  COMPARE OPERATION FAILED FOR ->'\nMNAME    DC    CL8'XXXXXXXX'\n         DC    CL52' '\nNOTMSG   DC    CL133'-    MODULE NOT FOUND IN PDS2 (OLD MODULE)'\nCANTMSG  DC    CL133'-    MODULE IN PDS2 (OLD MODULE) WOULD NOT LOAD'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE MESSAGE BUILD AREA  1.00                       *\n*                                                                     *\n***********************************************************************\nMTABL    DSECT\nMSGCA    DS    A         ADDR OF CURRENT SLOT\nMSGCCT   DS    F         NUMBER OF RECORDS IN USE\nMSGMAX   DS    F         MAX NUMBER OF RECORDS AVAILABLE\nMSGMAXX  EQU   255       COUNT IN THE NEXT DS\nMSGA     DS    255CL133  SPACE FOR RECORDS\nMTABLL   EQU   *-MTABL\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE PARAMETER AREA 1.02                            *\n*                                                                     *\n***********************************************************************\nPLIST    DSECT\nCNAME    DS    CL8       MEMBER NAME TO PROCESS\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nPLISTCA  DS    A         ADDR OF CURRENT SLOT\nPRECCT   DS    F         NUMBER OF RECORDS IN USE\nPRECMX   DS    F         MAX NUMBER OF RECORDS AVAILABLE\nPLISTC   EQU   255       COUNT IN THE NEXT DS\nPREC     DS    255CL133  SPACE FOR RECORDS\nPLISTL   EQU   *-PLIST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nDETLINE  DSECT\n         DS    CL1 -\nDETMEM   DS    CL8 -               MEMBER NAME\n         DS    CL1 -\nDETTTRC  DS    XL8 -               TTRC\n         DS    CL1 -\nDETATTR  DS    XL4 -               MODULE ATTRIBUTES\n         DS    CL1 -\nDETSIZE  DS    CL6 -               MODULE SIZE\n         DS    CL1 -\nDETEP    DS    CL6 -               MODULE ENTRY POINT\n         DS    CL1 -\nDETDTL   DS    CL6 -               DATE LINKED\n         DS    CL1 -\nDETMSG   EQU   *\nFLAG1    DS    CL8 -               SYMDUMP\nFLAG2    DS    CL8 -               FLOW\nFLAG3    DS    CL8 -               STATE\nFLAG4    DS    CL8 -               TESTM\nFLAG5    DS    CL8 -               RES\nFLAG6    DS    CL8 -               ENDJOB\nFLAG7    DS    CL8 -               OBJ370\nFLAG8    DS    CL8 -               CAPEX\nFLAGA    DS    CL2 -               VS OR V4\n         DS    C\nFLAGB    DS    CL5 -               COUNT FOR VS\n         DS    C\nFLAGC    DS    CL5 -               TRACE FOR VS\n         DS    C\nFLAGD    DS    CL5 -               DTECT FOR CAPEX\nLNLGTH   EQU   *-DETLINE\n         END   COMPARE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPDS": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x02\\x0e\\x02\\x0e\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 526, "newlines": 526, "modlines": 0, "user": "TWA"}, "text": "TWA      TITLE 'COMPARE - DATASET PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        COMPDS                                                       *\n*        ------                                                       *\n*                                                                     *\n*        PERFORMS PDS RELATED FUNCTIONS WITHIN COMPARE SYSTEM         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PARAMETERS...                                                *\n*           1.  MEMBER DCB ADDRESS      R11                           *\n*           2.  DIRECTORY DCB ADDRESS   R10                           *\n*           3.  PARAMETER LIST POINTER  R8                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        RETURN CODE VALUES                                           *\n*          CODE         MEANING                                       *\n*              0     NO ERRORS ENCOUNTERED                            *\n*              8     SPECIFIED MODULE NOT IN DATASET                  *\n*             16     CANNOT SUCCESFULLY LOAD MODULE                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        ABENDS                                                       *\n*         USER CODE     MEANING                                       *\n*          U0029     MODULE NOT CREATED BY LINKAGE EDITOR             *\n*          U0027     ESD TABLES CAPACITY EXCEEDED                     *\n*          U0002     NON-ZERO RETURN FROM RDJFCB MACRO                *\n*          U0005     CANNOT OPEN PDS DCB'S                            *\n*          U0029     MODULE NOT CREATED BY LINKAGE EDITOR             *\n*          U0028     PARAMTER TABLE  MAXSIZE EXCEEDED                 *\n*                                                                     *\n***********************************************************************\n         EJECT\nCOMPDS   CENTER TYPE=C\n         SYMREGS\nRW0      EQU   7     *\nRW1      EQU   5       *   TEMPORARY  FOR NOW\nRW2      EQU   9     *\nSPC1     EQU   C' '\nSPC2     EQU   C'0'\nSPC3     EQU   C'-'\nSPCP     EQU   C'1'\n         PRINT ON,NOGEN\n         EJECT\n         MVI   RC,0                CLEAR RETURN CODE\n         LM    R9,R11,0(R1)        GET VARIOUS PARAMETERS\n         LR    R8,R11              SET UP PER OUR NEEDS\n         ST    R8,PLISTA           FOR LATER ASYNCH USAGE\n         LR    R11,R10             GET THE MEMBER DCB ADDRESS INTO\n*                                  CORRECT REGISTER\n         LR    R10,R9              GET THE DIRECTORY DCB ADDRESS INTO\n*                                  CORRECT REGISTER\n         USING PLIST,R8            ADDRESS THE DSECT\n         LA    R9,PREC\n         ST    R9,PLISTCA\n         XC    PRECCT,PRECCT\n         MVI   RPTSW,0             CLEAR ERROR SWITCH\n         RDJFCB ((R11))            READ THE JFCB FOR THE PDS\n         LTR   R15,R15             DID IT DO THAT O.K.  ?\n         BNZ   ERROR2              NO - BRANCH\n         SPACE 1\n*        OPEN THE DCBS FOR THE DIRECTORY AND THE MEMBERS  -\n         OPEN  ((R10),,(R11))      ISSUE THE OPEN\n         TM    48(R10),X'10'       DID THE DIRECTORY DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         TM    48(R11),X'10'       DID THE MEMBER DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         SPACE 1\n*        GET A BUFFER TO READ THE MEMBERS INTO  -\n         MVC   BUFFLEN,62(R11)     GET BLOCKSIZE FROM THE DCB\n         L     R0,BUFFER           LENGTH + SP I.D. FOR GETMAIN\n         GETMAIN R,LV=(0)          ISSUE GETMAIN\n         ST    R1,DECB+12          PUT POINTER TO BUFFER IN DECB\n         SPACE 1\n*        INITIALISE  THE BUFFER TO ZEROS (EASIER DEBUGGING)  -\n         LH    R2,BUFFLEN          GET LENGTH OF THE BUFFER\nZEROLOOP MVI   0(R1),0             MOVE A ZERO INTO THE BUFFER\n         LA    R1,1(,R1)           INDEX THROUGH THE BUFFER\n         BCT   R2,ZEROLOOP         ZERO THE ENTIRE BUFFER\n         SPACE 1\n         B     GET                 GET THE FIRST PDS DIRECTORY BLOCK\n         SPACE 2\n*\n*        GET NEXT MEMBER IN THE PDS  -\n*\n*        FIRST  LOOK FOR A MEMBER IN THE CURRENT DIRECTORY BLOCK -\nLOOPDS1  L     R2,DIRPOINT         POINT TO THE NEXT MEMBER\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            LENGTH IS 5 BITS\n         SLL   R3,1                X 2 BECAUSE LENGTH IN HALF-WORDS\n         LA    R3,12(,R3)          ADD LENGTH OF MEMBER NAME + TTRC\n         AR    R3,R2               POINT TO NEXT MEMBER\n         SPACE 1\n*        FIND  THE END OF THE DIRECTORY BLOCK  -\n         LA    R4,DIRBLOCK         POINT TO THE CURRENT DIRECTORY BLK\n         LH    RW1,0(,R4)          GET LENGTH USED\n         AR    RW1,R4              POINT TO END OF THE BLOCK\n         CR    RW1,R3              HAS THIS BLOCK BEEN EXAUSTED ?\n*              RW1 NO LONGER UTILIZED\n         BH    GOTNEXT             NO - BRANCH\n         SPACE 1\n*        READ THE NEXT DIRECTORY BLOCK  -\nGET      GET   (R10),DIRBLOCK      READ THE NEXT DIRECTORY BLOCK\n         LA    R3,DIRBLOCK+2       POINT TO THE FIRST MEMBER IN BLOCK\nGOTNEXT  ST    R3,DIRPOINT         SAVE POINTER TO NEXT MEMBER\n         SPACE 1\n         CLC   0(8,R3),CNAME       IS THIS THE ONE WE WANT ?\n         BL    LOOPDS1             NO - BRANCH (NOT THERE YET)\n         BE    HITIT               YES - GOT THE ONE\n*        ( OTHERWISE THE NAMED MEMBER ISN'T IN THE LIBRARY )\n         MVI   CNTL,SPC3           SPACE 3 IMMED.\n         MVI   LINE,C' '           BLANK THE PRINT LINE\n         MVC   LINE+1(131),LINE    -\n         BAL   R14,WRITE\n         MVC   LINE+40(16),=CL16'NOT IN LIBRARY'\n         MVC   LINE+30(8),CNAME    PUT MEMBER NAME INTO MESSAGE\n         MVC   LINE+22(6),=CL6'MEMBER'\n         MVI   CNTL,SPC1\n         BAL   R14,WRITE\n         MVI   RC,8                SET ERROR RETURN\n         B     ENDPDS              END WITH ERRORS\n         SPACE 1\nHITIT    L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         MVC   TTRZ(3),8(R2)       SAVE TTR OF MEMBER\n         POINT (R11),TTRZ          POINT TO THIS MEMBER\n         SPACE 1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        LOAD THE MEMBER, AND LOOK FOR COBOL TYPE ATTRIBUTES.         *\n*        TABLE THE INFORMATION FOR THE COMPARE PROCESS                *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*\n*        BUILD A PRINT LINE  -\n*\nBUILD    MVI   LINE,C' '           BLANK THE PRINT LINE\n         MVC   LINE+1(131),LINE    -\n         SPACE 1\n         SPACE 1\n         L     R3,DIRPOINT         POINT TO DIRECTORY ENTRY\n         SPACE 1\n*        DETERMINE IF THE MEMBER WAS CREATED BY THE LINKAGE-EDITOR  -\n         IC    R4,11(,R3)          GET LENGTH OF USER DATA\n         N     R4,MASK2            -\n         C     R4,=F'11'           MUST BE AT LEAST 11 HALF-WORDS\n         BNL   LOADIT              IT WAS LINKED - BRANCH\n         SPACE 1\n         ABEND 29,DUMP - MODULE NOT CREATED BY LINKAGE-EDITOR  -\n         SPACE 2\nLOADIT   EQU   *\n         LOAD  EPLOC=(R3),ERRET=CANTRD,DCB=(R11)\n         LR    R4,R0               SAVE LOAD MODULE ADDRESS\n*        MODULE ENTRY POINT  -\n         MVC   MODEP+1(3),27(R3)   CAPTURE EP OFFSET FOR LATER USE\n         S     R4,MODEP            ADJUST IF MODULE E.P. NOT 0\n         UNPK  DWA(7),27(4,R3)     UNPACK IT\n         MVC   DETEP-DETLINE+LINE,DWA MOVE THE 6 SIGNIFICANT CHARS\n         TR    DETEP-DETLINE+LINE,TABLE1 AND MAKE INTO PRINTABLE HEX\n         SPACE 1\n*        MODULE SIZE  -\n         UNPK  DWA(7),22(4,R3)\n         MVC   DETSIZE-DETLINE+LINE,DWA\n         TR    DETSIZE-DETLINE+LINE,TABLE1\n         SPACE 1\n*        MODULE ATTRIBUTES  -\n         UNPK  DWA(5),20(3,R3)\n         MVC   DETATTR-DETLINE+LINE,DWA\n         TR    DETATTR-DETLINE+LINE,TABLE1\n         SPACE 1\n*        TTRC  -\nPUTTTRC  DS    0H\n         UNPK  DWA(9),8(5,R3)\n         MVC   DETTTRC-DETLINE+LINE,DWA\n         TR    DETTTRC-DETLINE+LINE,TABLE1\n         SPACE 1\n*        MEMBER NAME  -\nPUTMEM   DS    0H\n         MVC   DETMEM-DETLINE+LINE,0(R3)\n         SPACE 2\n*\n*        READ THE MODULE, TO GET THE DATE-LINKED FROM THE IDRDATA  -\n*                            AND READ THE CESD RECORDS\n*\nDLINK    DS    0H\n         LA    RW0,CESDT     GET ADDRESS OF CESD TABLE\n         SR    RW2,RW2       COUNT OF ENTRIES IN USE\n         ST    RW2,NRESD           STORE NUMBER CURRENTLY IN USE\n         USING ESD,RW0       ADDRESS ESD DSECT\n         ST    RW0,CURESD    STORE IN CURRENT RECORD\n         ZAP   SKDTL,=P'0'         INITIALISE DATE-LINKED TO ZEROS\nGETLOOP  L     R6,DECB+12          POINT TO INPUT AREA\n         READ  DECB,SF,(R11),MF=E  READ THE NEXT RECORD\n         CHECK DECB\n         CLI   0(R6),X'20'         IS THIS A CESD RECORD\n         BNE   NOTCESD              NO, LOOK FOR OTHER INTERESTING RECS\n*        WE NOW HAVE A CESD RECORD, PULL SD SUBRECORDS\nGOTCESD  LA    RW1,8(,R6)          POINT TO ESD DATA AREA IN CESD REC\n         LH    RW2,6(,R6)          COUNT OF BYTES OF ESD DATA\n         USING CESD,RW1            ADDRESS CESD SUBREC DESCRIPTION\nNEXTSRL  TM    CESDTY,X'0F'        IS IT A SD TYPE\n         BNZ   NEXTSR               IF ANY BITS ON, IT ISNT\n         MVC   ESDNAME,CESDNM      PUT NAME IN TABLE\n         MVC   ESDLENG,CESDIDL     PUT LENGTH IN TABLE\n         MVC   ESDAD,CESDAD        PUT LINKEDITOR ADDRESS IN TABLE\n         LA    RW0,ESDLAST-ESD(,RW0) TO THE NEXT SLOT\n         L     R1,NRESD            GET CURRENT IN USE COUNT\n         LA    R1,1(,R1)           INCREMENT\n         ST    R1,NRESD            PUT IT BACK\n         C     R1,=F'512'      SEE IF TABLE OVERFLOW\n         BNE   NEXTSR              NO, ITS OK\n         ABEND 27,DUMP             TIME TO QUIT POST HASTE\nNEXTSR   DS    0H                  TO NEXT SUBRECORD\n         LA    RW1,16(,RW1)        POINT TO NEXT SR SLOT\n         S     RW2,=F'16'          SEE IF ANY DATA IS REALLY LEFT\n         BP    NEXTSRL\n*                                  WE NOW HAVE ALL S/R FROM THIS CESD\nNOTCESD  TM    0(R6),1             DOES THIS RECORD PRECEED A TEXT REC.\n         BO    EODAD               YES - BRANCH (NO IDRDATA RECORDS)\n         CLI   0(R6),X'80'         IS THIS AN IDRDATA RECORD ?\n         BNE   GETLOOP             NO - BRANCH\n         TM    2(R6),2             IS THIS IDRDATA FROM LINK-EDITOR ?\n         BNO   GETLOOP             NO - BRANCH\n         ZAP   SKDTL,15(3,R6)      SAVE DATE LINKED\n         EJECT\n         SPACE 1\n*\n*        NOW CALL CSECT REPORTER WITH CSECT TABLE\n*\nEODAD    DS    0H                   FOR NOW TO HANDLE NON-IDR MODS\n         MVC   DETDTL-DETLINE+LINE-1(7),PAT01\n         ED    DETDTL-DETLINE+LINE-1(7),SKDTL\n         MVI   CNTL,SPC1\n         BAL   R14,WRITE           PUT A LINE TO THE PRINTER\n         CLI   RPTSW,1              DID MODULE FAIL TO LOAD\n         BE    DONEREP              YES, WE CANNOT REPORT IT\n         LA    RW0,CESDT            GET ADDRESS OF CESD TABLE\n         L     RW2,NRESD            GET COUNT OF ENTRIES\n         LTR   RW2,RW2              ANY MORE LEFT\n         BZ    DONEREP               NO, DONE WITH REPORTING\nREPLOOP  DS    0H\n*        FIND A CSECT TO PASS, RELOCATE THE LOAD POINT\n*        BY THE CSECT ADDRESS\n         L     R1,ESDAD             GET THE LINKEDIT ADDRESS\n         SRL   R1,8                 MAKE 3 BYTE INTO 4\n         LA    R1,0(R1,R4)          RELOCATE THE LOAD ADDRESS\n         ST    R1,POINTER           PUT IT IN THE PARAMETER\n         MVC   LENGTH+1(3),ESDLENG  PICK UP 3 BYTE LENGTH CODE\n         MVC   NAME,ESDNAME         PICK UP 8 BYTE CSECT NAME\n         CLI   ALLSW,1              ARE WE PRINTING ALL CSECTS\n         BE    POINTP               IF SO, DONT SUPPRESS LIB CODES\n         CLC   NAME(3),=CL3'ILB'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               COBOL V2, V3, V4, VS LIBRARY\n         CLC   NAME(3),=CL3'IHO'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               FORTRAN MOD II LIBRARY\n         CLC   NAME(3),=CL3'IHC'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               FORTRAN FREEBIE LIBRARY\n         CLC   NAME(3),=CL3'IHN'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               FORTRAN MOD I LIBRARY\n         CLC   NAME(3),=CL3'IBM'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               PL/I OPTIMIZER LIBRARY\n         CLC   NAME(3),=CL3'IHE'    IS IT A SUPPRESSED NAME\n         BE    NEXTONE               PL/I FREEBIE LIBRARY\nPOINTP   LA    R1,PARMLIST          POINT TO PARAMETER LIST\n         L     R15,=V(COBFMT)       GET ADDRESS OF REPORT ROUTINE\n         BALR  R14,R15             CALL THE CSECT REPORT ROUTINE\nNEXTONE  LA    RW0,ESDLAST-ESD(,RW0) TO NEXT ENTRY IF PRESENT\n         BCT   RW2,REPLOOP         ANY MORE LEFT?\n*              RW2 NOW USABLE\nDONEREP  DS    0H                  DONE WITH PRINT\n         MVI   RPTSW,0             CLEAR ERROR SWITCH\n*\n*        DELETE MODULE\n*\nDONETHIS DELETE EPLOC=(R3)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF THE PROCESS - CLEAN UP AND EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        CLOSE DCBS FOR THE PDS  -\nENDPDS   CLOSE ((R11),,(R10))      ISSUE CLOSE\n         SPACE 1\n*        FREE THE BUFFER USED TO READ THE MEMBERS  -\n         L     R0,BUFFER           GET LENGTH AND S.P.\n         L     R1,DECB+12          POINT TO BUFFER\n         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN\n         SPACE 1\n*        FREE  THE BUFFERS USED BY THE DIRECTORY DCB  -\n         FREEPOOL (R10)\n         SPACE 1\n         L      R15,RETRNC\n         RETRN  RC=(R15)           DO RETURN, BUT DONT RELOAD R15\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR TRYING TO LOAD THIS MODULE  -                          *\n*                                                                     *\n***********************************************************************\nCANTRD   STC   R15,WORK+6          SAVE RETURN CODE FROM LOAD MACRO\n         MVC   DETMSG-DETLINE+LINE(16),=CL16'CANT LOAD OK -'\n         UNPK  WORK(3),WORK+6(2)   MAKE RETURN CODE PRINTABLE\n         TR    WORK(2),TABLE1\n         MVC   DETMSG-DETLINE+LINE+15(2),WORK PUT RETURN CODE INTO MSG.\n         MVI   RC,16               SET RETURN CODE TO CALLER\n         OI    RPTSW,X'80'\n         B     DLINK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT A LINE SUBROUTINE                                      *\n*                                                                     *\n***********************************************************************\nWRITE    LA    R2,CNTL             POINT TO DETAIL PRINT LINE\n         ST    R14,SAVE14\n         ST    R2,PRTPARM          POINT TO LINE TO PRINT\n         LA    R1,PRTPARM          POINT TO PARAMETER LIST\n         L     R15,=V(PRINTR)      POINT TO PRINTER ROUTINEINTED\n         BALR  R14,R15              GO AND DO THE PRINT OPERATION\n         MVI   0(R2),C' '          BLANK OUT THE LINE\n         MVC   1(131,R2),0(R2)      BLANK OUT REST OF LINE\n         L     R14,SAVE14\n         BR    R14                 RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR CONDITIONS                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        ERROR IN RDJFCB  -\nERROR2   LA    R2,(R11)            POINT TO DCB\n         ABEND 2,DUMP\n         SPACE 1\n*        CANNOT OPEN PDS DCBS  -\nERROR5   LA    R2,(R10)            POINT TO DIRECTORY DCB\n         LA    R3,(R11)            POINT TO MEMBER DCB\n         ABEND 5,DUMP\n         EJECT\n         DROP  R8,RW0,RW1\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        PRINT INTERFACE ROUTINE                                      *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nPRINTR   CENTER TYPE=E\n         L     R2,0(,R1)       GET THE RECORD ADDRESS\n         L     R3,PLISTA       GET THE WORK AREA ADDRESS\n         USING PLIST,R3        ADDRESS THE DSECT\n         L     R4,PLISTCA      GET ADDRESS OF CURRENT SLOT\n         MVC   0(133,R4),0(R2) COPY THE RECORD\n         LA    R4,133(,R4)     INCREMENT THE RECORD POINTER\n         ST    R4,PLISTCA      AND STORE IT BACK\n         L     R4,PRECCT       GET CURRENT COUNT\n         LA    R4,1(,R4)       INCREMENT IT\n         C     R4,PRECMX       CHECK AGAINST MAX\n         BL    PRINT1          OK TO CONTINUE\n         ABEND 28,DUMP         WHO KNOWS WHAT HIT US\nPRINT1   DS    0H\n         ST    R4,PRECCT\n         RETRN RC=0\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nWORK     DC    D'0'\nSAVE14   DC    F'0'\nPLISTA   DC    F'0'\nRETRNC   DC    F'0'\n         ORG   RETRNC\n         DS    XL3\nRC       DS    X\n         ORG   ,\nPRTPARM  DC    F'0'                ADDRESS OF RECORD TO PRINT\n         SPACE 1\nMASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7\nMASKFF   DC    0F'0',X'FF000000'   MASK FOR 1 BYTE, HIGH ORDER OF WORD\n*        FLAGS  -\n         SPACE 1\n*        FIELDS RELATING TO THE PDS  -\nTTRZ     DC    F'0'                TTR OF MEMBER I AM PROCESSING\n         READ  DECB,SF,*,0,'S',MF=L       BUILD A DECB CALLED DECB\n         SPACE 1\nBUFFER   DC    0F'0',X'0200'       LENGTH + SP FOR GETMAIN\nBUFFLEN  DC    H'0'                -\n         SPACE 1\nDIRPOINT DC    F'0'                POINTER TO CURRENT MEMBER\nLASTMEM  DC    8X'FF'              NAME OF LAST MEMBER IN PDS\n         SPACE 1\n*        TRANSLATE TABLE TO CONVERT TO PRINTABLE HEX  -\n         ORG   *-240\nTABLE1   EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         SPACE 1\n         DC    0D'0'\n         LTORG\n         SPACE 1\nDIRBLOCK DC    32D'0'              CURRENT DIRECTORY BLOCK\n         SPACE\n*        DETAIL PRINT LINE  _\nCNTL     DC    C' '\nLINE     DC    132C' '\nPAT01    DC    XL7'4021204B202020'\n         SPACE 1\nSKDTL    DC    PL3'0'              DATE-LINKED FOR CURRENT MEMBER\n         SPACE 1\nDWA      DC    2D'0'               WORK SPACE\n         SPACE 1\n         PRINT GEN\n         LTORG\nPARMLIST DC    F'0'      FORMERLY  DCB ADDRESS\n         DC    X'80',AL3(POINTER)\nPOINTER  DC    F'0'                CURRENT CSECT ADDRESS\nLENGTH   DC    F'0'                CURRENT CSECT LENGTH\nNAME     DC    CL8' '              CURRENT CSECT NAME\nMODEP    DC    F'0'                RELATIVE EP OF CURRENT MODULE\n         SPACE 1\nRPTSW    DC    X'00'               IF NON-ZERO DONT REPORT CSECTS\nALLSW    DC    X'00'               IF NON-ZERO REPORT ALL CSECTS\n*                                  ELSE SUPPRESS ILB, IBM, IHO\nMAXCESD  EQU   0512          MAXIMUM ENTRIES IN ESD TABLE\nCURESD   DC    A(CESDT)      POINTS TO CURRENT SLOT\nNRESD    DC    F'0'          CURRENT IN USE COUNT\nCESDT    DC    512XL16'00'   CESD ENTRIES\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE PARAMETER AREA 1.02                            *\n*                                                                     *\n***********************************************************************\nPLIST    DSECT\nCNAME    DS    CL8       MEMBER NAME TO PROCESS\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nPLISTCA  DS    A         ADDR OF CURRENT SLOT\nPRECCT   DS    F         NUMBER OF RECORDS IN USE\nPRECMX   DS    F         MAX NUMBER OF RECORDS AVAILABLE\nPLISTC   EQU   255       COUNT IN THE NEXT DS\nPREC     DS    255CL133  SPACE FOR RECORDS\nPLISTL   EQU   *-PLIST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nDETLINE  DSECT\n         DS    CL1 -\nDETMEM   DS    CL8 -               MEMBER NAME\n         DS    CL1 -\nDETTTRC  DS    XL8 -               TTRC\n         DS    CL1 -\nDETATTR  DS    XL4 -               MODULE ATTRIBUTES\n         DS    CL1 -\nDETSIZE  DS    CL6 -               MODULE SIZE\n         DS    CL1 -\nDETEP    DS    CL6 -               MODULE ENTRY POINT\n         DS    CL1 -\nDETDTL   DS    CL6 -               DATE LINKED\n         DS    CL1 -\nDETMSG   EQU   *\n         DS    CL8 -               SYMDUMP\n         DS    CL8 -               FLOW\n         DS    CL8 -               STATE\n         DS    CL8 -               TESTM\n         DS    CL8 -               RES\n         DS    CL8 -               ENDJOB\n         DS    CL8 -               OBJ370\n         DS    CL8 -               CAPEX\n         DS    CL2 -               VS OR V4\n         DS    C\n         DS    CL5 -               COUNT FOR VS\n         DS    C\n         DS    CL5 -               TRACE FOR VS\n         DS    C\n         DS    CL5 -               DTECT FOR CAPEX\nLNLGTH   EQU   *-DETLINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE AN CESD SUBRECORD                              *\n*                                                                     *\n***********************************************************************\nCESD     DSECT\nCESDNM   DS    CL8 -               CSECT NAME\nCESDTY   DS    XL1 -               TYPE OF SYMBOL\nCESDAD   DS    CL3 -               ADDRESS ASSIGNED TO SYMBOL\nCESDSN   DS    CL1 -               SEGMENT NUMBER\nCESDIDL  DS    CL3 -               ID FOR LR (2 BYTES)\n*                                  LENGTH OF SD, PC, CM, PR (3 BYTES)\n*                                  ZERO FOR WX, NULL, ER    (3 BYTES)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE AN ESD TABLE ENTRY                             *\n*                                                                     *\n***********************************************************************\nESD      DSECT\nESDNAME  DS    CL8 -               CSECT NAME\nESDAD    DS    XL3 -               LINKEDITOR ASSIGNED ADDRESS\nESDLENG  DS    CL3 -               CSECT LENGTH\n         DS    CL1 -               FILLER\nESDLAST  EQU   *\n         PRINT NOGEN\n         DCBD  DEVD=DA,DSORG=QS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPTBL": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x00\\xd8\\x00\\xd8\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "TWA"}, "text": "TWA      TITLE 'COMPARE THE TABLES FOR COMPARE PROCESS '\n***********************************************************************\n*                                                                     *\n*        COMPTBL                                                      *\n*        -------                                                      *\n*                                                                     *\n*           COMPARES THE ATTRIBUTE TABLES GENERATED BY                *\n*           PROCESSING 2 COPIES OF A LOAD MODULE.                     *\n*                                                                     *\n*           OUTPUT IS A TABLE OF THE DIFFERENCES FOUND                *\n*           WHICH WILL BE PRINTED BY THE MAINLINE PROGRAM             *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ABENDS                                                       *\n*         USER CODE   REASON                                          *\n*          U0200      NUMBER OF PARAMETER RECORDS NOT POSITIVE        *\n*          U0201      PRINT MESSGE TABLE OVERFLOWED                   *\n*                                                                     *\n***********************************************************************\n         EJECT\nCOMPTBL  CENTER TYPE=C\n         SYMREGS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER USAGE                                               *\n*                                                                     *\n*           R2    RECORD POINTER TO MESSAGE TABLE ROUTINE             *\n*           R3    PLIST # 1           BASE                            *\n*           R4    PLIST # 2           BASE                            *\n*           R5    MESSAGE TABLE AREA  BASE                            *\n*           R6    POINTS TO CURRENT ENTRY IN PLIST # 1                *\n*           R7    POINTS TO CURRENT ENTRY IN PLIST # 2                *\n*           R8    POINTS TO CURRENT ENTRY IN MESSAGE TABLE AREA       *\n*           R9    DECREASING COUNT OF MESSAGES TO PROCESS IN # 1      *\n*           R10   CURRENT COUNT OF MESSAGES IN MESSAGE TABLE AREA     *\n*           R11   U N U S E D                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PARAMETERS PASSED BY THE CALLER                              *\n*                                                                     *\n*           #1    PLIST # 1           BASE                            *\n*           #2    PLIST # 2           BASE                            *\n*           #3    MESSAGE TABLE AREA  BASE                            *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         LM    R3,R5,0(R1)          PICK UP PASSED PARAMETERS\n         USING PLIST,R3                PLIST DSECT (COPY # 1)\n*                    R4 ALSO POINTS TO PLIST DSECT (COPY # 2)\n         USING MTABL,R5\n         L     R9,PRECCT            GET CURRENT RECORDS IN PLIST #1\n         BCTR  R9,0                 ADJUST FOR HEADER RECORD\n         LA    R6,PREC              POINT TO THE FIRST SLOT\n         LTR   R9,R9                JUST A BIT OF VALIDITY CHECK\n         BP    OK\n         ABEND 200,DUMP             IN CASE OF TRASH\nOK       DS    0H\n         LA    R8,MSGA              FIRST AVAILABLE MESSAGE SLOT\n         SR    R10,R10              CLEAR THE COUNT OF MSG IN USE\n         ST    R10,MSGCCT           STORE IN THE TABLE\n*\n*        ALL INITIALIZATION REGS HAVE BEEN LOADED\n*\n         EJECT\nPL1      DS    0H           ENTER HERE TILL FIRST LIST EXHASUTED\n         LA    R6,L'PREC(,R6)   GET THE NEXT TABLE #1 RECORD\n         LA    R2,00(,R6)           POINT TO CURRENT RECORD\n         BAL   R14,PRINTR           PUT IT IN THE TABLE\n         LA    R7,PREC-PLIST(,R4)   POINT TO FIRST RECORD IN # 2\n         LA    R7,L'PREC(,R7)       SKIP THE HEADER RECORD IN #2\n         L     R11,PRECCT-PLIST(,R4) GET COUNT OF ENTRIES IN # 2\n         BCTR  R11,0                ADJUST FOR THE HEADER\nPLL2     CLC   0(17,R6),0(R7)       COMPARE NAME PORTION\n         BE    GOTIT                    WE FOUND THE ONE WE WANT\n         LA    R7,L'PREC(,R7)       NOT FOUND, ADDRESS THE NEXT\n         BCT   R11,PLL2              TO NEXT # 2 SLOT IF SOME LEFT\n*        NAME NOT FOUND IN TABLE # 2, MUST BE NEW\n         LA    R2,NEWM              POINT TO NEW CSECT MESSAGE\n         BAL   R14,PRINTR           PUT IT OUT\n         XC    00(L'PREC,R6),00(R6) WIPE OUT THE USED ENTRY\n         B     PLNEXT               DONE WITH THIS ONE\nGOTIT    DS    0H                   NOW DO FULL COMPARE\n         CLC   00(L'PREC,R6),00(R7) SEE IF EQUAL\n         BNE   DIFFER               NO, THEY DIFFER SOMEHOW\n         LA    R2,NOCHGM            POINT TO NO CHANGE MESSAGE\n         BAL   R14,PRINTR           AND OUTPUT IT\n*        TEST COULD BE PLACED HERE TO VALIDATE STANDARDS\nPL1A     XC    00(L'PREC,R6),00(R6)\n         XC    00(L'PREC,R7),00(R7)\nPLNEXT   DS    0H\n         BCT   R9,PL1               IF SOME ARE LEFT\n*      CHECK IF ANY TABLE 2 RECORDS ARE LEFT, THIS MEANS DROPPED CSECT\n*        SCAN TABLE # 2 FOR NON-ZERO MESSAGES\n*        THESE HAVE NOT BEEN MATCHED\n         LA    R7,PREC-PLIST(,R4)   FIRST SLOT IN TABLE\n*            NOTE THAT WE WILL SKIP THE HEADER RECORD\n         L     R11,PRECCT-PLIST(,R4) COUNT OF TOTAL ENTRIES\n         BCTR  R11,0                 REMOVE 1 FOR HEADER\nNXT2     LA    R7,L'PREC(,R7)        TO THE NEXT RECORD\n         OC    0(L'PREC,R7),0(R7)    SEE IF FIELD IS ALL BIN 0'S\n         BNZ   UNMATCH               IF NOT, THIS ONE WAS NOT MATCHED\nNXT3     BCT   R11,NXT2              STEP THRU TABLE\n         B     GOBACK\nUNMATCH  DS    0H    TABLE 2 RECORD NOT MATCHED BY TABLE 1 RECORD\n         LA    R2,0(,R7)            POINT TO THE RECORD\n         BAL   R14,PRINTR\n         LA    R2,GONEM\n         BAL   R14,PRINTR\n         XC    0(L'PREC,R7),0(R7)\n         B     NXT3\nDIFFER   DS    0H                   HANDLE CHANGES\n         LA    R2,00(R7)            POINT TO OLD INFO\n         BAL   R14,PRINTR\n         LA    R2,CHGM              SET UP AND ISSUE CHANGED MESSAGE\n         BAL   R14,PRINTR\n         B     PL1A                 DONE, DO CLEANUP\n         EJECT\nGOBACK   RETRN  RC=0\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        PRINT LINE LOAD ROUTINE                                      *\n*           R2 POINTS TO THE RECORD TO STORE                          *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nPRINTR   DS    0H\n         MVC   0(133,R8),0(R2) COPY THE RECORD\n         LA    R8,133(,R8)     INCREMENT THE RECORD POINTER\n         ST    R8,MSGCA        AND STORE IT BACK\n         LA    R10,1(,R10)     INCREMENT COUNT\n         C     R10,MSGMAX      CHECK AGAINST MAX\n         BL    PRINT1          OK TO CONTINUE\n         ABEND 201,DUMP        WHO KNOWS WHAT HIT US\nPRINT1   DS    0H\n         ST    R10,MSGCCT      STORE NEW MESSAGE COUNT FOR LATER\n         BR    R14\n         EJECT\n         PRINT GEN\nNOCHGM   DC    CL133'         NO CHANGE IN ABOVE CSECT'\nNEWM     DC    CL133'         ABOVE CSECT HAS BEEN ADDED'\nGONEM    DC    CL133'         ABOVE CSECT HAS BEEN DELETED'\nCHGM     DC    CL133'         ABOVE CSECT HAS BEEN CHANGED'\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE MESSAGE BUILD AREA  1.00                       *\n*                                                                     *\n***********************************************************************\nMTABL    DSECT\nMSGCA    DS    A         ADDR OF CURRENT SLOT\nMSGCCT   DS    F         NUMBER OF RECORDS IN USE\nMSGMAX   DS    F         MAX NUMBER OF RECORDS AVAILABLE\nMSGMAXX  EQU   255       COUNT IN THE NEXT DS\nMSGA     DS    255CL133  SPACE FOR RECORDS\nMTABLL   EQU   *-MTABL\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE PARAMETER AREA 1.02                            *\n*                                                                     *\n***********************************************************************\nPLIST    DSECT\nCNAME    DS    CL8       MEMBER NAME TO PROCESS\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nPLISTCA  DS    A         ADDR OF CURRENT SLOT\nPRECCT   DS    F         NUMBER OF RECORDS IN USE\nPRECMX   DS    F         MAX NUMBER OF RECORDS AVAILABLE\nPLISTC   EQU   255       COUNT IN THE NEXT DS\nPREC     DS    255CL133  SPACE FOR RECORDS\nPLISTL   EQU   *-PLIST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nDETLINE  DSECT\n         DS    CL1 -\nDETMEM   DS    CL8 -               MEMBER NAME\n         DS    CL1 -\nDETTTRC  DS    XL8 -               TTRC\n         DS    CL1 -\nDETATTR  DS    XL4 -               MODULE ATTRIBUTES\n         DS    CL1 -\nDETSIZE  DS    CL6 -               MODULE SIZE\n         DS    CL1 -\nDETEP    DS    CL6 -               MODULE ENTRY POINT\n         DS    CL1 -\nDETDTL   DS    CL6 -               DATE LINKED\n         DS    CL1 -\nDETMSG   EQU   *\nFLAG1    DS    CL8 -               SYMDUMP\nFLAG2    DS    CL8 -               FLOW\nFLAG3    DS    CL8 -               STATE\nFLAG4    DS    CL8 -               TESTM\nFLAG5    DS    CL8 -               RES\nFLAG6    DS    CL8 -               ENDJOB\nFLAG7    DS    CL8 -               OBJ370\nFLAG8    DS    CL8 -               CAPEX\nFLAGA    DS    CL2 -               VS OR V4\n         DS    C\nFLAGB    DS    CL5 -               COUNT FOR VS\n         DS    C\nFLAGC    DS    CL5 -               TRACE FOR VS\n         DS    C\nFLAGD    DS    CL5 -               DTECT FOR CAPEX\nLNLGTH   EQU   *-DETLINE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPUID": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x03\\x00\\x98\\x16o\\x01\\x13\\x10\\x1f\\x00\\x00\\x02\\x9a\\x012\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1998-06-15T00:00:00", "modifydate": "2013-04-11T00:00:03", "lines": 666, "newlines": 306, "modlines": 0, "user": "SBGOLOB"}, "text": "CPUID    TITLE 'DISPLAY THE CPU ID FOR ALL PROCESSORS'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    Written by Rex Widmer                                            *\n*    ------- -- --- ------                                            *\n*                                                                     *\n*    Discovered in Gilbert Saint-flour's archives by Sam Golob.       *\n*                                                                     *\n*    Fixed for 128 CPU's and to do PUTLINE output instead of TPUT.    *\n*      (S.Golob - 2013/04/10)                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         PUSH PRINT\n         PRINT ON\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    RETRN &RC=\n&NAME    L     13,4(0,13)     PICK UP THE OLD SAVE AREA ADDRESS\n         AIF   ('&RC' EQ '(R15)').GOTRC\n         LM    14,15,12(13)   RESTORE THE REGS. 14,15\n         LM    2,12,28(13)    RESTORE THE REGS. 2,3,...,12\n         MVI   12(13),X'FF'   SET RETURN INDICATION\n         AIF   (T'&RC EQ 'O').NORC\n         AIF   ('&RC' LT '4096').RCOK\n         MNOTE 1,'RETURN CODE RC=&RC IS > 4095, RC IGNORED'\n         AGO   .NORC\n.GOTRC   L     14,12(,13)     RESTORE REG 14\n         LM    2,12,28(13)    RESTORE THE REGS 2,3,...,12\n         MVI   12(13),X'FF'   SET RETURN INDICATION\n         BR    14             RETURN\n         MEXIT\n.RCOK    LA    15,&RC.(0,0)   LOAD RETURN CODE\n.NORC    BR    14             RETURN\n*\n*  REGISTERS 2-15 RESTORED PER STANDARD LINKAGE CONVENTIONS.\n*\n         MEND\n         MACRO\n&NAME    CENTER &BASE=12,&SAVE=,&TYPE=E\n         LCLA  &A1,&A2\n         LCLB  &B1\n         LCLC  &C1\n&A1      SETA  K'&NAME\n&B1      SETB  (T'&SAVE NE 'O')\n         AIF   ('&BASE' GT '2' AND '&BASE' LT '13').BASEOK\n         MNOTE 13,'REGISTER &BASE MAY NOT BE USED AS A BASE REG.'\n         AGO   .MEND\n.BASEOK  AIF   (&A1 GE 1).GE1\n         MNOTE 13,'NO NAME ENTRY FOR CENTER MACRO'\n         AGO   .MEND\n.GE1     AIF   (&A1 LE 8).NAMEOK\n         MNOTE 13,'THE NAME &NAME CONTAINS &A1 CHARACTERS'\n         AGO   .MEND\n.NAMEOK  AIF   (&B1).GOTSAVE\n&C1      SETC  'SVR&SYSNDX'\n         AGO   .SAVEOK\n.GOTSAVE ANOP\n&C1      SETC  '&SAVE'\n.SAVEOK  AIF   ((&A1/2)*2 NE &A1).A1OK\n&A1      SETA  &A1+1          MAKE L'NAME ODD IF NECESSARY\n.A1OK    ANOP\n&A2      SETA  &A1+5\n         MNOTE *,' REG &BASE IS THE BASE REG FOR THIS ROUTINE'\n         MNOTE *,' &C1 IS THE 18 WORD SAVE AREA FOR THIS ROUTINE'\n         MNOTE *,' &NAME IS THE ENTRY POINT FOR THIS ROUTINE'\n         AIF   ('&TYPE' EQ 'E').ENTRY\n         AIF   ('&TYPE' EQ 'C').CSECT\n         MNOTE 9,'INVALID TYPE OPERAND. &TYPE WAS SPECIFIED. E ASSUMED'\n         AGO   .ENTRY\n.CSECT   ANOP\n&NAME    CSECT\n         USING *,&BASE\n         B     &A2.+20(,15)      BOUNCE AROUND ID\n         DC    X'&A1'\n         DC    CL&A1'&NAME'\n         DC    CL20'COPYRIGHT 1997 RWS'\n         STM   14,12,12(13)   SAVE REGS 14,15,0,...,12\n         AGO   .COMMON\n.ENTRY   ENTRY &NAME\n         DC    X'&A1'\n         DC    CL&A1'&NAME'\n         USING *,&BASE\n&NAME    STM   14,12,12(13)   SAVE REGS 14,15,0,...,12\n.COMMON  LR    &BASE,15       PROVIDE ADDRESSABILITY\n         LA    2,&C1          PICK UP ADDR OF THIS SAVE AREA\n         ST    2,8(0,13)      STORE SAVE AREA ADDR IN CALLER\n         ST    13,4(0,2)      STORE CALLER'S SAVE AREA ADDR IN SA\n         LR    13,2           SET UP SAVE AREA POINTER REG.\n         AIF   (&B1).MEND\n         B     BYP&SYSNDX     BOUNCE AROUND SAVE AREA\n&C1      DC    9D'0' .        SAVE AREA FOR THIS ROUTINE\nBYP&SYSNDX EQU *\n.MEND    MEND\n         MACRO\n         SYMREGS\n         GBLB  &REGO\n         AIF   (NOT &REGO).OK1\n         MEXIT\n.OK1     ANOP\n*\n**       GENERAL PURPOSE REGISTER EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n**       FLOATING POINT REGISTER EQUATES\n*\nFR0      EQU   0\nFR1      EQU   2\nFR2      EQU   4\nFR3      EQU   6\n&REGO    SETB  1\n         MEND\n         POP   PRINT\nTESTPCCA CENTER TYPE=C\n         SYMREGS\nTESTPCCA RMODE 24                  KEEP ME BELOW LINE\nTESTPCCA AMODE 31                  BUT I CAN SPEAK 31 BIT MODE\n*        PROGRAM TO RETREIVE CPU ID-S\n*        CONTROL BLOCKS USED - CVT  - CVT MACRO\n*                              PCCA VECTOR (NOT DOCUMENTED)\n*                              PCCA - IHAPCCA MACRO\n         L     R3,016(0,0)         CVT POINTER\n         USING CVT,R3\n         L     R4,CVTPCCAT         POINTS TO VECTOR OF PCCA POINTERS\n         LA    R5,128              MAXIMUM NUMBER OF PCCAS\n         LA    R7,BLANKS12         PUT CPU SERIALS HERE\n         APUT  CPUIDTIT,L'CPUIDTIT\n         APUT  CPUIDTID,L'CPUIDTID\nGETDATA  DS    0H\n         L     R6,0(,R4)           ADDRESS CURRENT PCCA\n         LTR   R6,R6               NO POINTER?\n         BZ    SKIPTHIS            NO CPU IN THIS SLOT\n         MVC   BLANKS12(12),BLANKS   CLEAR AREA\n         MVC   BLANKS12(12),4(R6)  MOVE SERIAL FROM PCCA TO MSG AREA\n         APUT  CPUXD,L'CPUXD\n*\n*        TYPICAL VALUE -  UNKNO ENVIRONMENT  C'FF1C00669021'\n*        TYPICAL VALUE -     VM ENVIRONMENT  C'FF1701953090'\n*        TYPICAL VALUE -     VM ENVIRONMENT  C'FF2701953090'\n*        TYPICAL VALUE -     VM ENVIRONMENT  C'FF3701953090'\n*        TYPICAL VALUE - NON-VM ENVIRONMENT  C'620743653090'\n*        TYPICAL VALUE - NON-VM ENVIRONMENT  C'621743653090'\n*        TYPICAL VALUE - NON-VM ENVIRONMENT  C'622743653090'\n*        TYPICAL VALUE - NON-VM ENVIRONMENT  C'623743653090'\n*        TYPICAL VALUE - NON-VM ENVIRONMENT  C'624743653090'\n*        TYPICAL VALUE - NON-VM ENVIRONMENT  C'625743653090'\n*\nSKIPTHIS DS    0H\n         LA    R4,4(,R4)           TO THE NEXT PCCA\n*        LA    R7,12(,R7)          INCREMENT DOWN WORKAREA\n         BCT   R5,GETDATA          TILL ALL DONE\n*        CALL  SNAP\n         RETRN RC=0\nCPUIDTIT DC    C'Display CPUIDs For All Processors'\nCPUIDTID DC    C'------- ------ --- --- ----------'\nCPUXD    DS    0CL20\n         DC    C'CPUID   '\nBLANKS12 DC    CL12' '\nWORKAREA DC    XL256'FF'\nBLANKS   DC    CL12' '\n         LTORG\nCPUID    DSECT\nSUBMODEL DS    2C      MAY ALSO CONTAIN VM-INDICATOR C'FF'\nENGINE   DS    C       C'0' TO C'7' HAS BEEN SEEN - ENGINE NUMBER\nSERIAL   DS    CL5     ACTUAL SERIAL NUMBER FIELD\nMODEL    DS    CL4     GENERIC MODEL NUMBER I.E. 3090\n         CVT   DSECT=YES\n         IHAPCCA\n         END   TESTPCCA\nSNAP     TITLE   '***   SNAP --- ROUTINE TO PROVIDE SNAP DUMPS *'\n         PUSH PRINT\n         PRINT OFF\n         MACRO\n&NAME    RETRN &RC=\n&NAME    L     13,4(0,13)     PICK UP THE OLD SAVE AREA ADDRESS\n         AIF   ('&RC' EQ '(R15)').GOTRC\n         LM    14,15,12(13)   RESTORE THE REGS. 14,15\n         LM    2,12,28(13)    RESTORE THE REGS. 2,3,...,12\n         MVI   12(13),X'FF'   SET RETURN INDICATION\n         AIF   (T'&RC EQ 'O').NORC\n         AIF   ('&RC' LT '4096').RCOK\n         MNOTE 1,'RETURN CODE RC=&RC IS > 4095, RC IGNORED'\n         AGO   .NORC\n.GOTRC   L     14,12(,13)     RESTORE REG 14\n         LM    2,12,28(13)    RESTORE THE REGS 2,3,...,12\n         MVI   12(13),X'FF'   SET RETURN INDICATION\n         BR    14             RETURN\n         MEXIT\n.RCOK    LA    15,&RC.(0,0)   LOAD RETURN CODE\n.NORC    BR    14             RETURN\n*\n*  REGISTERS 2-15 RESTORED PER STANDARD LINKAGE CONVENTIONS.\n*\n         MEND\n         MACRO\n&NAME    CENTER &BASE=12,&SAVE=,&TYPE=E\n         LCLA  &A1,&A2\n         LCLB  &B1\n         LCLC  &C1\n&A1      SETA  K'&NAME\n&B1      SETB  (T'&SAVE NE 'O')\n         AIF   ('&BASE' GT '2' AND '&BASE' LT '13').BASEOK\n         MNOTE 13,'REGISTER &BASE MAY NOT BE USED AS A BASE REG.'\n         AGO   .MEND\n.BASEOK  AIF   (&A1 GE 1).GE1\n         MNOTE 13,'NO NAME ENTRY FOR CENTER MACRO'\n         AGO   .MEND\n.GE1     AIF   (&A1 LE 8).NAMEOK\n         MNOTE 13,'THE NAME &NAME CONTAINS &A1 CHARACTERS'\n         AGO   .MEND\n.NAMEOK  AIF   (&B1).GOTSAVE\n&C1      SETC  'SVR&SYSNDX'\n         AGO   .SAVEOK\n.GOTSAVE ANOP\n&C1      SETC  '&SAVE'\n.SAVEOK  AIF   ((&A1/2)*2 NE &A1).A1OK\n&A1      SETA  &A1+1          MAKE L'NAME ODD IF NECESSARY\n.A1OK    ANOP\n&A2      SETA  &A1+5\n         MNOTE *,' REG &BASE IS THE BASE REG FOR THIS ROUTINE'\n         MNOTE *,' &C1 IS THE 18 WORD SAVE AREA FOR THIS ROUTINE'\n         MNOTE *,' &NAME IS THE ENTRY POINT FOR THIS ROUTINE'\n         AIF   ('&TYPE' EQ 'E').ENTRY\n         AIF   ('&TYPE' EQ 'C').CSECT\n         MNOTE 9,'INVALID TYPE OPERAND. &TYPE WAS SPECIFIED. E ASSUMED'\n         AGO   .ENTRY\n.CSECT   ANOP\n&NAME    CSECT\n         USING *,&BASE\n         B     &A2.+20(,15)      BOUNCE AROUND ID\n         DC    X'&A1'\n         DC    CL&A1'&NAME'\n         DC    CL20'COPYRIGHT 1997 RWS'\n         STM   14,12,12(13)   SAVE REGS 14,15,0,...,12\n         AGO   .COMMON\n.ENTRY   ENTRY &NAME\n         DC    X'&A1'\n         DC    CL&A1'&NAME'\n         USING *,&BASE\n&NAME    STM   14,12,12(13)   SAVE REGS 14,15,0,...,12\n.COMMON  LR    &BASE,15       PROVIDE ADDRESSABILITY\n         LA    2,&C1          PICK UP ADDR OF THIS SAVE AREA\n         ST    2,8(0,13)      STORE SAVE AREA ADDR IN CALLER\n         ST    13,4(0,2)      STORE CALLER'S SAVE AREA ADDR IN SA\n         LR    13,2           SET UP SAVE AREA POINTER REG.\n         AIF   (&B1).MEND\n         B     BYP&SYSNDX     BOUNCE AROUND SAVE AREA\n&C1      DC    9D'0' .        SAVE AREA FOR THIS ROUTINE\nBYP&SYSNDX EQU *\n.MEND    MEND\n         MACRO\n         SYMREGS\n         GBLB  &REGO\n         AIF   (NOT &REGO).OK1\n         MEXIT\n.OK1     ANOP\n*\n**       GENERAL PURPOSE REGISTER EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n**       FLOATING POINT REGISTER EQUATES\n*\nFR0      EQU   0\nFR1      EQU   2\nFR2      EQU   4\nFR3      EQU   6\n&REGO    SETB  1\n         MEND\n         POP   PRINT\n***********************************************************************\n**                                                                   **\n**       SNAP   A ROUTINE TO PROVIDE A SNAP FACILITY.                **\n**                                                                   **\n**       THIS ROUTINE PROVIDES THE ABILITY TO REQUEST A SNAP DUMP    **\n**       OF THE REGION OF AN APPLICATION PROGRAM.                    **\n**                                                                   **\n**       TO USE ALL THAT IS NEEDED IS THE FOLLOWING...               **\n**           AS REQUIRED CODE   CALL SNAP                            **\n**             PROVIDE A     //SNAPOUT  DD  SYSOUT=A DD CARD         **\n**                                                                   **\n**       5/2/74     R C WIDMER                                       **\n**                                                                   **\n***********************************************************************\n         EJECT\nSNAP     CENTER TYPE=C\n         SYMREGS\n         OPEN  (SNAPOUT,(OUTPUT))\n         SNAP  DCB=SNAPOUT,ID=1,PDATA=ALL,SDATA=CB\n         CLOSE  (SNAPOUT)\n         RETRN RC=0\n         EJECT\n         PRINT NOGEN\nSNAPOUT  DCB   DDNAME=SNAPOUT,DSORG=PS,RECFM=VBA,MACRF=W,LRECL=125,    X\n               BLKSIZE=882\n*PANVALET-LEVEL\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CPUID$": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00(\\x00\\x98\\x16o\\x01\\x13\\x10\\x0f\"#\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-06-15T00:00:00", "modifydate": "2013-04-10T22:23:28", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT487.FILE200(CPUID)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB487200\n ENTRY   TESTPCCA\n NAME    CPUID(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPUIDX": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x03\\x01\\x13\\x10\\x0f\\x01\\x13\\x10\\x1f\\x00Y\\x00C\\x00C\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xc9\\xc4\\xe3@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "2013-04-10T00:00:00", "modifydate": "2013-04-11T00:59:03", "lines": 67, "newlines": 67, "modlines": 0, "user": "SCHMIDT"}, "text": "/* REXX      Author:   Marcel Schmidt */\nCVT = STORAGE(10,4)\nRMCT = STORAGE(D2X(C2D(CVT)+604),4)\nSU = STORAGE(D2X(C2D(RMCT)+64),4)\nSU = 16000000/C2D(SU)\nSAY 'SU/SEC FACTOR IS' SU ,\n'(1 CPU SECOND EQUALS' SU 'SERVICE UNITS)'\nCVTPCCAT = STORAGE(D2X(C2D(CVT)+764),4)\nSAY 'PCCA VECTOR TABLE AT' C2X(CVTPCCAT)\nI = 0\nP = 0\nNUMIFA = 0\nNUMZIIP = 0\nSAY '----------------------------------------------------------------'\nSAY ' PROC IFA ZIIP WLM VERSION CPUID MODEL RELATIVE PCCA '\nSAY '                   NUMBER        CODE  SPEED    ADDRESS'\nSAY '----------------------------------------------------------------'\nDo While I < 64\nPCCA = STORAGE(D2X(C2D(CVTPCCAT)+I*4),4)\nIF PCCA \\= '00000000'X THEN DO\nPCCAPCCA = STORAGE(D2X(C2D(PCCA)),4)\nPCCAVC = STORAGE(D2X(C2D(PCCA)+4),2)\nPCCACPID = STORAGE(D2X(C2D(PCCA)+6),6)\nPCCAMDL = STORAGE(D2X(C2D(PCCA)+12),4)\nPCCACPUA = X2D(C2X(STORAGE(D2X(C2D(PCCA)+16),2)))\nPCCARSPR = X2D(C2X(STORAGE(D2X(C2D(PCCA)+52),4)))\nPCCAATTR = STORAGE(D2X(C2D(PCCA)+376),1)\nPCCARCFF = STORAGE(D2X(C2D(PCCA)+379),1) /* reconfig flags */\nIf Bitand(PCCAATTR,'01'x)='01'x Then Do /* IFA */\nIFA = 'Y'\nNUMIFA = NUMIFA + 1\nEnd\nElse\nIFA = ' '\nIf Bitand(PCCAATTR,'04'x)='04'x Then Do /* zIIP */\nZIIP = 'Y'\nNUMZIIP = NUMZIIP + 1\nEnd\nElse\nZIIP = ' '\nIf Bitand(PCCARCFF,'80'x)='80'x Then /* WLM on-/offline */\nWLM = 'Y'\nElse\nWLM = ' '\nIF PCCAPCCA = 'PCCA' THEN DO\nSAY ' ' RIGHT(PCCACPUA,2) ' 'IFA' 'ZIIP' 'WLM' '   '         ',\nPCCAVC' 'PCCACPID' 'PCCAMDL' 'RIGHT(PCCARSPR,8) ' 'C2X(PCCA)\nP = P + 1\nEND\nEND\nI = I + 1\nEND\nIF P > 1 THEN PROCS = 'Processors'\nELSE PROCS = 'Processor'\nSAY\nSAY P PROCS 'in this complex'\nMIPS = SU/48.5\nSAY\nSAY '** Total MIPS :' RIGHT(MIPS*P,12)\nIF P > 1 THEN SAY ,\n'** Equivalent Uniprocessor MIPS :' RIGHT(MIPS,12)\n/* */\n/* MSU EVALUATION */\n/* */\nMSU = SU*(P-NUMIFA-NUMZIIP)*3600/1000000\nSAY FORMAT(MSU,,0) 'MSU (FOR PSLC PRICING -'\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRTTBL": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x01\"\\x01\"\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 290, "newlines": 290, "modlines": 0, "user": "TWA"}, "text": "TWA      TITLE 'PRINT THE COMPARISON RESULTS'\n***********************************************************************\n*                                                                     *\n*        PRTTBL                                                       *\n*        ------                                                       *\n*                                                                     *\n*           PRINTS   THE ATTRIBUTE TABLES GENERATED BY                *\n*           PROCESSING 2 COPIES OF A LOAD MODULE.                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nPRTTBL   CENTER TYPE=C\n         SYMREGS\nSPC1     EQU   C' '\nSPC2     EQU   C'0'\nSPC3     EQU   C'-'\nSPCP     EQU   C'1'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER USAGE                                               *\n*                                                                     *\n*           R2                                                        *\n*           R3    PLIST # 1           BASE                            *\n*           R4    PLIST # 2           BASE                            *\n*           R5    MESSAGE TABLE AREA  BASE                            *\n*           R6    SYSPRINT DCB POINTER                                *\n*           R7    LOOP COUNTER FOR PRINTING                           *\n*           R8    CURRENT RECORD POINTER WITHIN MESSAGE TABLE         *\n*           R9    BAL TO PRINT ROUTINE                                *\n*           R10                                                       *\n*           R11                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PARAMETERS PASSED BY THE CALLER                              *\n*                                                                     *\n*           #1    PLIST # 1           BASE                            *\n*           #2    PLIST # 2           BASE                            *\n*           #3    MESSAGE TABLE AREA  BASE                            *\n*           #4    SYSPRINT DCB (OPEN) BASE                            *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         LM    R3,R6,0(R1)          PICK UP PASSED PARAMETERS\n         USING PLIST,R3                PLIST DSECT (COPY # 1)\n*                    R4 ALSO POINTS TO PLIST DSECT (COPY # 2)\n         USING MTABL,R5\n*\n*        GET TIME AND DATE  -\n*\n         PRINT ON,NOGEN\n         TIME  DEC\n         ST    R0,TIME             SAVE TIME\n         ST    R1,DATE             SAVE DATE\n         MVO   TIM,TIME(2)         SAVE TIME\n*        GET JOBNAME OF JOB, AND SAVE IT  -\n         EXTRACT FIELD1,FIELDS=(TIOT)\n         L     R1,FIELD1           POINT TO TIOT\n         MVC   JNAME,0(R1)         SAVE JOBNAME\n         SPACE 1\n         ZAP   LINENO,=PL2'99'     RESET FOR NEW HEADING AT EACH CALL\n*\n*        ALL INITIALIZATION REGS HAVE BEEN LOADED\n*\n         EJECT\n         L     R7,MSGCCT   GET NUMBER OF RECORDS IN MTABLE\n         LA    R8,MSGA     POINT TO FIRST POSSIBLE MESSAGE SLOT\nMLOOP    DS    0H          ENTER FOR PRINTING NEXT ONE\n         MVC   CNTL(L'MSGA),0(R8) MOVE MESSAGE TO AREA\n         BAL   R9,WRITE    WRITE IT OUT\n         LA    R8,L'MSGA(,R8) TO THE NEXT RECORD\n         BCT   R7,MLOOP    IF MORE TO PRINT\nGOBACK   RETRN  RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WRITE A LINE TO THE PRINTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nWRITE    ST    R9,SAVE9\n*\n*        TEST  FOR HEADINGS REQUIRED  -\n*\n         CP    LINENO,MAXLINE      IS IT BOTTOM OF PAGE YET  ?\n         BL    NOHEAD              NO - BRANCH\n         SPACE 1\n         ZAP   LINENO,=P'0'        RESET LINE COUNTER\n         AP    PAGE,=P'1'          INCREMENT PAGE #\n         SPACE 1\n         MVI   HCNTL,SPCP          SKIP TO 01\n         MVI   HLINE,C' '          BLANK HEADING PRINT LINE\n         MVC   HLINE+1(131),HLINE  -\n         LA    R2,HCNTL            POINT TO PRINT LINE\n         BAL   R9,PRINT            GO PRINT\n         SPACE 1\n         MVC   HLINE+110(6),PAT02\n         ED    HLINE+110(6),PAGE   EDIT PAGE #\n         MVC   HLINE+106(4),=C'PAGE'\n         MVC   HLINE+90(7),PAT01\n         ED    HLINE+90(7),DATE+1  EDIT DATE  YY.DDD\n         MVC   HLINE+83(5),=C'DATE:'\n         MVC   HLINE+30(L'HEAD01),HEAD01\n         MVC   HLINE(8),JNAME\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE+90(7),PAT03\n         ED    HLINE+90(7),TIM     EDIT TIME  HH.MM\n         MVC   HLINE+83(5),=C'TIME:'\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\n*        PUT MEMBER AND DATE LINKED -\n         MVC   HLINE+15(8),CNAME-PLIST(R3) MEMBER NAME FROM PLIST 2\n         MVC   HLINE+06(8),=C'MEMBER ='\n         MVC   HLINE+25(10),=C'LINKED ON '\n         MVC   HLINE+35(6),DETDTL-DETLINE+PREC-PLIST+1(R3) DATE\n         MVC   HLINE+65(8),CNAME-PLIST(R4) MEMBER NAME FROM PLIST 2\n         MVC   HLINE+56(8),=C'MEMBER ='\n         MVC   HLINE+75(10),=C'LINKED ON '\n         MVC   HLINE+85(6),DETDTL-DETLINE+PREC-PLIST+1(R4) DATE\n         MVI   HCNTL,SPC3\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n*        PUT DSNAME = AND VOLSER =  -\n         LR    R2,R4\n         USING PLIST,R2\n         MVC   HLINE+15(44),JFCB-PLIST(R3) DSN FROM JFCB IN PLIST 1\n         MVC   HLINE+06(8),=C'DSNAME ='\n         MVC   HLINE+65(44),JFCB-PLIST(R4) DSN FROM JFCB IN PLIST 2\n         MVC   HLINE+56(8),=C'DSNAME ='\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE+15(6),118+JFCB-PLIST(R3) SER FROM JFCB IN PLIST 1\n         MVC   HLINE+06(8),=C'VOLUME ='\n         MVC   HLINE+65(6),118+JFCB-PLIST(R4) SER FROM JFCB IN PLIST 2\n         MVC   HLINE+56(8),=C'VOLUME ='\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         DROP  R2\n         SPACE 1\n         MVC   HLINE(132),HEAD02\n         MVI   HCNTL,SPC3\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD03\n         MVI   HCNTL,SPC1\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD04\n         MVI   HCNTL,SPC2\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\nNOHEAD   AP    LINENO,=P'1'        INCREMENT LINE #\n         LA    R2,CNTL             POINT TO DETAIL PRINT LINE\n         BAL   R9,PRINT            PRINT IT\n         L     R9,SAVE9            RESTORE RETUTN REGISTER\n         BR    R9                  RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT A LINE SUBROUTINE                                      *\n*                                                                     *\n***********************************************************************\nPRINT    LR    R0,R2               POINT TO LINE TO PRINT\n         PUT   (R6)                PUT IT\n         MVI   0(R2),C' '          BLANK OUT THE LINE WE PRINTED\n         MVC   1(131,R2),0(R2)     -\n         BR    R9                  RETURN\n         EJECT\nSAVE9    DC    F'0'                REG. 9 SAVE AREA\n         SPACE 1\nJNAME    DC    CL8' '              JOBNAME OF THIS JOB\nFIELD1   DC    F'0'                POINTER TO TIOT\n         SPACE\n*        DETAIL PRINT LINE  _\nCNTL     DC    C' '\nLINE     DC    132C' '\n         SPACE 1\n*        HEADING PRINT LINE  -\nHCNTL    DC    C'1'\nHLINE    DC    132C' '\n         SPACE 1\nPAT01    DC    XL7'4021204B202020'\nPAT02    DC    XL6'402020202120'\nPAT03    DC    XL7'402120204B2020'\n         SPACE 1\nPAGE     DC    PL3'0'              CURRENT PAGE #\nLINENO   DC    PL2'99'             CURRENT LINE #\nMAXLINE  DC    PL2'45'             MAX # OF LINES/PAGE\n         SPACE 1\nTIME     DC    F'0'\nTIM      DC    X'00000F'\nDATE     DC    F'0'\n         SPACE 1\nHEAD01   DC    C'T W A - PDS - LOAD MODULE COMPARATOR          '\nHEAD02   DC    CL132'                            DATE AND TIME     ----X\n               ----------------------- ATTRIBUTE FLAGS ----------------X\n               ---------------------'\nHEAD03   DC    CL132'                 LENGTH       COMPILED        SYMDX\n                  FLOW    STATE   TEST    RES     ENDJOB  OBJECT  OPT  X\n                 VER COUNT TRACE DET'\n         EJECT\nHEAD04   DC    CL132'  ------------------------------------------------X\n               --------------------------------------------------------X\n               ---------------------'\n         SPACE 1\n         PRINT NOGEN\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE MESSAGE BUILD AREA  1.00                       *\n*                                                                     *\n***********************************************************************\nMTABL    DSECT\nMSGCA    DS    A         ADDR OF CURRENT SLOT\nMSGCCT   DS    F         NUMBER OF RECORDS IN USE\nMSGMAX   DS    F         MAX NUMBER OF RECORDS AVAILABLE\nMSGMAXX  EQU   255       COUNT IN THE NEXT DS\nMSGA     DS    255CL133  SPACE FOR RECORDS\nMTABLL   EQU   *-MTABL\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE PARAMETER AREA 1.02                            *\n*                                                                     *\n***********************************************************************\nPLIST    DSECT\nCNAME    DS    CL8       MEMBER NAME TO PROCESS\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nPLISTCA  DS    A         ADDR OF CURRENT SLOT\nPRECCT   DS    F         NUMBER OF RECORDS IN USE\nPRECMX   DS    F         MAX NUMBER OF RECORDS AVAILABLE\nPLISTC   EQU   255       COUNT IN THE NEXT DS\nPREC     DS    255CL133  SPACE FOR RECORDS\nPLISTL   EQU   *-PLIST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nDETLINE  DSECT\n         DS    CL1 -\nDETMEM   DS    CL8 -               MEMBER NAME\n         DS    CL1 -\nDETTTRC  DS    XL8 -               TTRC\n         DS    CL1 -\nDETATTR  DS    XL4 -               MODULE ATTRIBUTES\n         DS    CL1 -\nDETSIZE  DS    CL6 -               MODULE SIZE\n         DS    CL1 -\nDETEP    DS    CL6 -               MODULE ENTRY POINT\n         DS    CL1 -\nDETDTL   DS    CL6 -               DATE LINKED\n         DS    CL1 -\nDETMSG   EQU   *\nFLAG1    DS    CL8 -               SYMDUMP\nFLAG2    DS    CL8 -               FLOW\nFLAG3    DS    CL8 -               STATE\nFLAG4    DS    CL8 -               TESTM\nFLAG5    DS    CL8 -               RES\nFLAG6    DS    CL8 -               ENDJOB\nFLAG7    DS    CL8 -               OBJ370\nFLAG8    DS    CL8 -               CAPEX\nFLAGA    DS    CL2 -               VS OR V4\n         DS    C\nFLAGB    DS    CL5 -               COUNT FOR VS\n         DS    C\nFLAGC    DS    CL5 -               TRACE FOR VS\n         DS    C\nFLAGD    DS    CL5 -               DTECT FOR CAPEX\nLNLGTH   EQU   *-DETLINE\nJFCBD    DSECT                    , MAP THE JFCB\n         IEFJFCBN\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RETRN": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x00\\x16\\x00\\x16\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "TWA"}, "text": "         MACRO\n&NAME    RETRN &RC=\n&NAME    L     13,4(0,13)     PICK UP THE OLD SAVE AREA ADDRESS\n         AIF   ('&RC' EQ '(R15)').GOTRC\n         LM    14,15,12(13)   RESTORE THE REGS. 14,15\n         LM    2,12,28(13)    RESTORE THE REGS. 2,3,...,12\n         MVI   12(13),X'FF'   SET RETURN INDICATION\n         AIF   (T'&RC EQ 'O').NORC\n         AIF   ('&RC' LT '4096').RCOK\n         MNOTE 1,'RETURN CODE RC=&RC IS > 4095, RC IGNORED'\n         AGO   .NORC\n.GOTRC   L     14,12(,13)     RESTORE REG 14\n         LM    2,12,28(13)    RESTORE THE REGS 2,3,...,12\n         MVI   12(13),X'FF'   SET RETURN INDICATION\n         BR    14             RETURN\n         MEXIT\n.RCOK    LA    15,&RC.(0,0)   LOAD RETURN CODE\n.NORC    BR    14             RETURN\n*\n*  REGISTERS 2-15 RESTORED PER STANDARD LINKAGE CONVENTIONS.\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYMREGS": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x00\"\\x00\"\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "TWA"}, "text": "         MACRO\n         SYMREGS\n         GBLB  &REGO\n         AIF   (NOT &REGO).OK1\n         MEXIT\n.OK1     ANOP\n*\n**       GENERAL PURPOSE REGISTER EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n**       FLOATING POINT REGISTER EQUATES\n*\nFR0      EQU   0\nFR1      EQU   2\nFR2      EQU   4\nFR3      EQU   6\n&REGO    SETB  1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHATSNE$": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00A\\x01\\x00\\x04\\x8f\\x01\\x13\\x00?!Y\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2013-01-03T21:59:41", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE200\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE200(WHATSNEW)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n NAME    WHATSNEW(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHATSNE#": {"ttr": 2063, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x008\\x01\\x00\\x06\\x8f\\x01\\x13\\x00? Y\\x00\\x0c\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2000-03-08T00:00:00", "modifydate": "2013-01-03T20:59:38", "lines": 12, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//WN      EXEC PGM=WHATSNEW,REGION=6000K\n//STEPLIB   DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSOUT    DD SYSOUT=*\n//SORTWK01  DD UNIT=SYSDA,SPACE=(CYL,2)\n//SORTWK02  DD UNIT=SYSDA,SPACE=(CYL,2)\n//SORTWK03  DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSUDUMP  DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHATSNEO": {"ttr": 2065, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x03|\\x03|\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 892, "newlines": 892, "modlines": 0, "user": "TWA"}, "text": "TWA      TITLE 'WHATSNEW  -  LIST PDS DIRECTORY WITH DATE INFORMATION'\nWHATSNEW START 0\n         SYMREGS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WHATSNEW                                                     *\n*        --------                                                     *\n*                                                                     *\n*        LIST THE DIRECTORY OF A PDS.                                 *\n*        ( MUST CONTAIN MEMBERS CREATED BY THE LINKAGE EDITOR )       *\n*                                                                     *\n*        FOR EACH MEMBER, THE FOLLOWING IS LISTED  -                  *\n*              1. THE MEMBER NAME                                     *\n*              2. THE TTRC         ( FROM THE DIRECTORY )             *\n*              3. THE LINK-EDIT ATTRIBUTES                            *\n*              4. THE LENGTH OF THE MODULE                            *\n*              5. THE ENTRY POINT                                     *\n*              6. THE TOTAL NUMBER OF CSECTS IN THE MODULE            *\n*              7. THE NUMBER OF ZAPS ON THE MODULE                    *\n*              8. THE CSECT TYPES - AS FOLLOWS -                      *\n*                 C = AT LEAST ONE CSECT BEGINS 'ILB'                 *\n*                 I = AT LEAST ONE CSECT BEGINS 'DFS'                 *\n*              9. DATE THE MODULE WAS LINKED                          *\n*             10. DATE OF THE LATEST ZAP.                             *\n*                                                                     *\n*                                                                     *\n*        THE REPORT IS SORTED BY                                      *\n*              1. THE GREATER OF 9. & 10. ABOVE                       *\n*              2. MODULE NAME                                         *\n*                                                                     *\n*        WRITTEN BY   REX WIDMER / PETER FARRELL                      *\n*                                                                     *\n*        TRANS WORLD AIRLINES INC.                                    *\n*        KANSAS CITY ADMINISTRATIVE CENTER                            *\n*        11500 AMBASADOR DRIVE                                        *\n*        KANSAS CITY, MO 64153                                        *\n*                                                                     *\n*        816-464-6671                                                 *\n*                                                                     *\n*        THIS PROGRAM IS DISTRIBUTED WITHOUT CHARGE TO MEMBERS        *\n*        OF THE GUIDE COBOL GROUP.  IT IS DIRTRIBUTED ON AN AS        *\n*        IS, WHERE IS BASIS, WITHOUT EXPRESSED OR IMPLIED WARRANTY    *\n*        OF ANY KIND.  IT IS DISTRIBUTED IN HOPE THAT IT MAY SAVE     *\n*        OTHER MEMBERS OF THE PROJECT SOME WHEEL RE-INVENTING...      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*     SAMPLE JCL / JOBSTREAM                                          *\n*                                                                     *\n*       //WN      PROC NAME=,RGN=256K,CLS=X                           *\n*       //WN      EXEC PGM=WHATSNEW,REGION=&RGN,                      *\n*       //             ACCT='3600001020T    8484OBSDBSIM000B'         *\n*       //SYSPRINT  DD SYSOUT=&CLS   THE OUTPUT REPORT                *\n*       //SYSUT1    DD DISP=SHR,UNIT=SYSDA,                           *\n*       //             DSN=&NAME    THE PDS TO ANALYZE                *\n*       //SYSOUT    DD SYSOUT=&CLS FOR SORT                           *\n*       //SORTWK01  DD UNIT=SYSDA,SPACE=(CYL,1)                       *\n*       //SORTWK02  DD UNIT=SYSDA,SPACE=(CYL,1)                       *\n*       //SORTWK03  DD UNIT=SYSDA,SPACE=(CYL,1)                       *\n*                                                                     *\n***********************************************************************\n         EJECT\nWHATSNEW CSECT\n         SAVE  (14,12),T,*\n         LR    R10,R15             ESTABLISH A BASE REGISTER\n         USING WHATSNEW,R10        -\n         LA    R12,SAVE            CHAIN SAVE AREAS\n         ST    R12,8(,R13)         -\n         ST    R13,4(,R12)         -\n         LR    R13,R12             -\n         SPACE  2\n*\n*        LINK  TO THE SORT  -\n*\n         LA    R1,SRTPOINT         POINT TO SORT PARM LIST\n         LINK  EP=SORT             GO TO THE SORT\n         LTR   R15,R15             DID THE SORT RUN O.K.  ?\n         BNZ   ERROR1              NO - BRANCH\n         SPACE 1\n*        RETURN TO O.S.  -\n         L     R13,4(,R13)\n         RETURN (14,12),T,RC=0\n         SPACE 2\n*\n*        ERROR IN THE SORT  -\n*\nERROR1   EQU   *\n         LR    R9,R15              GET RETURN CODE FROM THE SORT\n         STC   R9,WORK             SAVE IT\n         UNPK  WORK+2(3),WORK+2    CONVERT TO PRINTABLE HEX\n         MVC   WTOMSG1C,WORK+2     PUT IN MSG.\n         TR    WTOMSG1C,TABLE      -\n         SPACE 1\n         LA    R1,WTOMSG1          POINT TO ERROR MESSAGE\n         WTO   MF=(E,(1))          WTO\n         LR    R15,R9              SAVE RETURN CODE\n         ABEND 1,DUMP              ERROR IN SORT\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N  S T A N T S                                           *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSAVE     DC    9D'0'               REGISTER SAVE AREA\nWORK     DC    D'0'                WORK AREA\n         SPACE 1\n*        ERROR MESSAGE ISSUED IF THE SORT TERMINATES WITH ERRORS  -\nWTOMSG1  DC    0F'0',Y(WTOMSG1E-*),H'0'\n         DC    C'SORT TERMINATED WITH COMPLETION CODE '\nWTOMSG1C DC    C'XX'               SORT COMPLETION CODE\nWTOMSG1E EQU   *\n         SPACE 1\n*        PARMS  TO PASS TO THE SORT  -\nSRTPOINT DC    0F'0',X'80',AL3(SORTPARM)\n         DC    0F'0',H'0'\nSORTPARM DC    Y(SORTPL-SORTPF)\nSORTPF   DC    A(SORTCF)\n         DC    A(SORTCL)\n         DC    A(RECDCF)\n         DC    A(RECDCL)\n         DC    A(E15)\n         DC    A(E35)\n         DC    X'FF00',C'SC'\n         DC    X'01',XL3'010000'   LEAVE ME 64K\nSORTPL   EQU   *\n         SPACE 1\n*        HERE IS THE SORT CARD  -\nSORTCF   DC    C' SORT FIELDS=(1,'\n         DC    C'3,BI,D,4,8'\n         DC    C',BI,A),SIZE=E10000'\nSORTCL   DC    C' '\n         SPACE 1\n*        HERE IS THE RECORD CARD  -\nRECDCF   DC    C' RECORD TYPE=F,LENGTH=('\n         DC    C'00040'            LENGTH OF RECORD TO SORT\n         DC    C')'\nRECDCL   DC    C' '\n         SPACE 1\n*        TABLE USED FOR TRANSLATING TO PRINTABLE HEX  -\n         DC    0D'0'\n         ORG   *-240\nTABLE    EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         SPACE 1\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         DROP  R10\n         EJECT\n***********************************************************************\n*                                                                     *\n*        E15 EXIT                                                     *\n*                                                                     *\n***********************************************************************\n         DC    0D'0'\nE15      SAVE  (14,12),T,E15       SAVE REGISTERS\n         LR    R10,R15             ESTABLISH A BASE\n         USING E15,R10             -\n         LA    R12,SAVEXIT         CHAIN SAVE AREAS\n         ST    R12,8(,R13)         -\n         ST    R13,4(,R12)\n         LR    R13,R12\n         SPACE 2\n*\n*        TEST TO SEE IF THE PDS IS OPEN  -\n*\n         TM    DIRDCB+48,X'10'     IS THE PDS OPEN  ?\n         BO    LOOPDS1             YES - BRANCH\n         SPACE 1\n*        READ THE JFCB TO PREPARE FOR AN OBTAIN  -\n         RDJFCB (MEMDCB)           READ THE JFCB FOR THE PDS\n         LTR   R15,R15             DID IT DO THAT O.K.  ?\n         BNZ   ERROR2              NO - BRANCH\n         SPACE 1\n*        ISSUE  AN OBTAIN, TO SEE IF THE PDS EXISTS -\n         OBTAIN CAMLIST            ISSUE OBTAIN\n         LTR   R15,R15             DID THE OBTAIN OBTAIN ANYTHING ?\n         BNZ   ERROR3              NO - BRANCH\n         SPACE 1\n*        TEST TO ENSURE THAT THIS DATASET IS A PDS  -\n         TM    AREA+38,X'02'       TEST FOR 'DSORG=PO' IN FORMAT 1\n         BZ    ERROR4              NOT A PDS - BRANCH\n         SPACE 1\n*        OPEN THE DCBS FOR THE DIRECTORY AND THE MEMBERS  -\n         OPEN  (DIRDCB,,MEMDCB)    ISSUE THE OPEN\n         TM    DIRDCB+48,X'10'     DID THE DIRECTORY DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         TM    MEMDCB+48,X'10'     DID THE MEMBER DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         SPACE 1\n*        GET A BUFFER TO READ THE MEMBERS INTO  -\n         MVC   BUFFLEN,MEMDCB+62   GET BLOCKSIZE FROM THE DCB\n         L     R0,BUFFER           LENGTH + SP I.D. FOR GETMAIN\n         GETMAIN R,LV=(0)          ISSUE GETMAIN\n         ST    R1,DECB+12          PUT POINTER TO BUFFER IN DECB\n         SPACE 1\n*        INITIALISE  THE BUFFER TO ZEROS (EASIER DEBUGGING)  -\n         LH    R2,BUFFLEN          GET LENGTH OF THE BUFFER\nZEROLOOP MVI   0(R1),0             MOVE A ZERO INTO THE BUFFER\n         LA    R1,1(,R1)           INDEX THROUGH THE BUFFER\n         BCT   R2,ZEROLOOP         ZERO THE ENTIRE BUFFER\n         SPACE 1\n*\n*        GET CORE FOR THE CESD TABLE  -\n*\n*              THIS TABLE WILL BE USED TO CONTAIN SD ENTRIES\n*              FROM THE CESD RECORDS.\n*              IT IS USED TO RESOLVE ZAP IDRDATA TO THE CORRESPONDING\n*              CSECT NAME.\n*        TABLE FORMAT IS AS FOLLOWS -\n*\n*        0 - 3  = POINTER TO THE FIRST SLOT IN TABLE\n*        4 - 7  = LENGTH OF EACH TABLE ENTRY  ( 10 BYTES )\n*        8 - B  = POINTER TO NEXT AVAIL. SLOT TO ADD AN ENTRY\n*        C - F  = POINTER TO THE END OF THE TABLE\n*\n         L     R0,GETLEN           GET LENGTH AND SUBPOOL I.D.\n         GETMAIN R,LV=(0)          GET AREA FOR THE TABLE\n         ST    R1,TABLESD          SAVE POINTER TO THE TABLE\n         SPACE 1\n*        ZERO  THE TABLE  -\n         LH    R3,GETLEN+2         GET LENGTH OF THE TABLE\nLOOPZERO MVI   0(R1),0             MOVE A ZERO INTO THE TABLE\n         LA    R1,1(,R1)           INCREMENT ALONG THE TABLE\n         BCT   R3,LOOPZERO         AND ZAP\n         SPACE 1\n*        INITIALISE THE TABLE  -\n         L     R2,TABLESD          POINT TO THE TABLE\n         LH    R3,GETLEN+2         GET LENGTH OF THE TABLE\n         AR    R3,R2               POINT TO THE END OF THE TABLE\n         ST    R3,12(,R2)          SAVE POINTER TO THE END OF THE TABLE\n         LA    R3,16(,R2)          POINTER TO FIRST SLOT IN THE TABLE\n         ST    R3,0(,R2)           SAVE POINTER TO FIRST SLOT IN TABLE\n         ST    R3,8(,R2)           SAVE POINTER TO NEXT AVAIL. SLOT\n         MVI   7(R2),10            LENGTH OF EACH TABLE ENTRY\n         B     GET                 GO GET THE FIRST MEMBER\n         SPACE 2\n*\n*        GET NEXT MEMBER IN THE PDS  -\n*\n*        FIRST  LOOK FOR A MEMBER IN THE CURRENT DIRECTORY BLOCK -\nLOOPDS1  L     R2,DIRPOINT         POINT TO THE NEXT MEMBER\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            LENGTH IS 5 BITS\n         SLL   R3,1                X 2 BECAUSE LENGTH IN HALF-WORDS\n         LA    R3,12(,R3)          ADD LENGTH OF MEMBER NAME + TTRC\n         AR    R3,R2               POINT TO NEXT MEMBER\n         SPACE 1\n*        FIND  THE END OF THE DIRECTORY BLOCK  -\n         LA    R4,DIRBLOCK         POINT TO THE CURRENT DIRECTORY BLK\n         LH    R5,0(,R4)           GET LENGTH USED\n         AR    R5,R4               POINT TO END OF THE BLOCK\n         CR    R5,R3               HAS THIS BLOCK BEEN EXAUSTED ?\n         BH    GOTNEXT             NO - BRANCH\n         SPACE 1\n*        READ THE NEXT DIRECTORY BLOCK  -\nGET      GET   DIRDCB,DIRBLOCK     READ THE NEXT DIRECTORY BLOCK\n         LA    R3,DIRBLOCK+2       POINT TO THE FIRST MEMBER IN BLOCK\nGOTNEXT  ST    R3,DIRPOINT         SAVE POINTER TO NEXT MEMBER\n         SPACE 1\n         XC    CMREC,CMREC         # OF RECORDS READ FOR THIS MEMBER\n         MVI   SWITCH,0            INITIALISE SWITCH\n         SPACE 1\n*        TEST TO SEE IF WE HAVE GOT TO THE END OF THE PDS  -\n         CLC   0(8,R3),LASTMEM     LOOK FOR A MEMBER NAME OF FOXES\n         BE    ENDPDS              GOT TO END - BRANCH\n         SPACE 1\n*        COUNT # OF MEMBERS READ  -\n         L     R1,CPMEM            GET # OF MEMBERS READ\n         AL    R1,=F'1'            INCREMENT BY 1\n         ST    R1,CPMEM            AND SAVE IT\n         SPACE 2\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         MVC   TTRZ(3),8(R2)       SAVE TTR OF MEMBER\n         POINT MEMDCB,TTRZ         POINT TO THIS MEMBER\n         SPACE 1\n*        BUILD FIRST PART OF THE SORT KEY  -\n         LA    R11,OUTREC          POINT TO AREA TO BUILD SORT RECORD\n         USING SKREC,R11\n         ZAP   SKDATE,=P'0'        DATE OF LAST LINK OR ZAP\n         MVC   SKMEM,0(R2)         MEMBER NAME\n         MVC   SKTTRC,8(R2)        TTRC\n         MVC   SKATTR,20(R2)       LINK-EDIT ATTRIBUTES\n         MVC   SKSIZE,22(R2)       SIZE OF MODULE\n         MVC   SKEP,27(R2)         ENTRY POINT\n         ZAP   SKCST,=P'0'         # OF CSECTS\n         ZAP   SKZAP,=P'0'         # OF ZAPS\n         MVI   SKTYPE,C' '         CSECT TYPES FIELD\n         MVC   SKTYPE+1(L'SKTYPE-1),SKTYPE\n         ZAP   SKDTL,=P'0'         DATE OF LINK-EDIT\n         ZAP   SKDTZ,=P'0'         DATE OF MOST RECENT ZAP\n         SPACE 1\n*        RE-INITIALISE CESD TABLE  -\n         L     R2,TABLESD          POINT TO CESD TABLE\n         MVC   8(4,R2),0(R2)       POINTER TO NEXT AVAIL. SLOT\n         SPACE 1\n*\n*        TEST FOR ALIAS  -\n*\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         TM    11(R2),X'80'        IS THIS ENTRY AN ALIAS  ?\n*        PROCESS ALIAS THE SAME AS OTHER MEMBERS  -\n         SPACE 2\n*        DETERMINE IF THE MEMBER WAS CREATED BY THE LINKAGE-EDITOR  -\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            -\n         C     R3,=F'11'           MUST BE AT LEAST 11 HALF-WORDS\n         BL    LOOPDS1             IT WAS NOT LINKED - BRANCH\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ THE MEMBER SEQUENTIALLY, EXTRACTING INFORMATION         *\n*        AND WRITING IT TO THE OUTPUT FILE.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETLOOP  EQU   *\n         L     R6,DECB+12          POINT TO INPUT AREA\n         READ  DECB,SF,MF=E        READ THE NEXT RECORD\n         CHECK DECB\n         SPACE 1\n*        INCREMENT COUNT OF # OF RECORDS READ BY 1  -\n         L     R1,CMREC            COUNTS # OF INPUT RECORDS\n         AL    R1,=F'1'            INCREMENT\n         ST    R1,CMREC            AND SAVE\n         SPACE 1\n         L     R1,CPREC            COUNTS # OF READS FOR THIS PDS\n         AL    R1,=F'1'            BUMP BY 1\n         ST    R1,CPREC            AND SAVE\n         SPACE 3\n*\n*        LOOK AT RECORD TYPE, PROCES ACORDINGLY  -\n*\n         TM    0(R6),1             DOES THIS RECORD PRECEED A TEXT REC.\n         BO    EODAD               YES - BRANCH ( WE ARE DONE )\n         SPACE 1\n         CLI   0(R6),X'20'         IS IT A CESD RECORD  ?\n         BE    CESD                YES - BRANCH\n         CLI   0(R6),X'80'         IS IT AN IDR DATA RECORD ?\n         BE    IDR                 YES - BRANCH\n         B     GETLOOP             GO GET ANOTHER RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE CESD TYPE INPUT RECORD                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCESD     LA    R3,8(,R6)           POINT TO 1ST ESD ENTRY\n         LH    R4,6(,R6)           GET LENGTH OF ESD DATA\n         AR    R4,R3               POINT TO END OF RECORD\n         LH    R5,4(,R6)           GET # OF FIRST ESD ENTRY IN THIS REC\n         SPACE 1\nLOOPESD  CR    R4,R3               HAVE WE GOT TO THE END YET ?\n         BNH   GETLOOP             YES - GO GET ANOTHER INPUT RECORD\n         SPACE 1\n         TM    8(R3),X'0F'         LOOK FOR TYPE SD ENTRIES\n         BZ    GOTSD               GOT AN SD ENTRY - BRANCH\n         SPACE 1\nLOOPESD2 LA    R3,16(,R3)          BUMP TO NEXT ESD ENTRY\n         AL    R5,=F'1'            KEEP COUNT OF ESD ENTRY #\n         B     LOOPESD             AND LOOK AT IT\n         SPACE 2\n*\n*        WE HAVE AD SD ENTRY, MUST ADD IT TO THE TABLE -\n*\nGOTSD    L     R2,TABLESD          POINT TO ESD TABLE\n         L     R8,8(,R2)           POINT TO NEXT SLOT TO ADD AN ENTRY\n         C     R8,12(,R2)          IS THERE ROOM IN THE TABLE  ?\n         BNL   ERROR6              NO - BRANCH\n         MVC   0(8,R8),0(R3)       MOVE SD NAME INTO THE TABLE\n         STH   R5,8(,R8)           PUT ESD # INTO TABLE\n         AL    R8,4(,R2)           BUMP BY LENGTH OF A TABLE ENTRY\n         ST    R8,8(,R2)           SAVE POINTER TO NEXT AVAIL. SLOT\n         SPACE 2\n*\n*        ACCUMULATE DATA FOR THE SORT RECORD  -\n*\n         AP    SKCST,=P'1'         # OF CSECTS IN MODULE\n         SPACE 1\n         CLC   =C'DFS',0(R3)       IS THIS AN IMS MODULE  ?\n         BNE   NOTIMS              NO - BRANCH\n         MVI   SKTYPE+4,C'I'       SET IMS TYPE\n         B     NOTCOBOL\nNOTIMS   CLC   =C'ILB',0(R3)       IS THIS A COBOL MODULE ?\n         BNE   NOTCOBOL            NO - BRANCH\n         MVI   SKTYPE+3,C'C'       SET COBOL TYPE\nNOTCOBOL B     LOOPESD2            GO LOOK AT NEXT CSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE IDR DATA TYPE RECORD.                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*\n*        FIRST TEST FOR TYPE OF IDR RECORD  -\n*\nIDR      TM    2(R6),1             IS IT AMASPZAP  ?\n         BO    IDRZAP              YES - BRANCH\n         TM    2(R6),2             IS IT THE LINKAGE EDITOR  ?\n         BO    IDRLINK             YES - BRANCH\n*        INSERT OTHER TESTS IN HERE  -\n         B     GETLOOP             WE DO NOT WANT THIS IDR RECORD\n         SPACE 2\n*\n*        AMASPZAP  - SUPERZAP IDR RECORD  -\n*\nIDRZAP   LA    R5,4(,R6)           POINT TO FIRST ZAP DATA\n         IC    R8,3(,R6)           GET # OF ENTRIES\n         N     R8,MASK             GET LAST 6 BITS ONLY\n         LTR   R8,R8               ARE THERE ANY ENTRIES  ?\n         BNP   GETLOOP             NO - BTANCH\n         SPACE 1\nZAPLOOP2 EQU   *\n         L     R4,TABLESD          POINT TO CESD TABLE\n         LM    R1,R3,0(R4)         GET POINTERS TO SLOTS\n         SPACE 1\nZAPLOOP  CLC   8(2,R1),0(R5)       TRY TO MATCH ESD # WITH A TABLE ENTR\n         BE    PUTZAP              GOT ONE - BRANCH\n         BXLE  R1,R2,ZAPLOOP       SCAN THROUGH THE TABLE\n         B     ERROR7              TABLE ENTRY NOT FOUND\n         SPACE 1\n*\n*        ACCUMULATE COUNT OF ZAP RECORDS, AND HWM ZAP DATE  -\n*\nPUTZAP   AP    SKZAP,=P'1'         COUNT # OF ZAPS\n         CP    SKDTZ,2(3,R5)       IS THIS A LATER ZAP THAN PREVIOUS ?\n         BNL   NOMOREZ             NO - BRANCH\n         ZAP   SKDTZ,2(3,R5)       ACCUMULATE HWM OF ZAP DATE\n*\n*        INDEX THROUGH THE ZAP IDR RECORD  -\n*\nNOMOREZ  LA    R5,13(,R5)          BUMP TO NEXT ZAP ENTRY\n         BCT   R8,ZAPLOOP2         AND WORK ON IT\n         B     GETLOOP             GET NEXT INPUT RECORD\n         SPACE 3\n*\n*        GOT LINK-EDIT RECORD,\n*        CAN NOW ACCUMULATE THE LINK-EDIT DATE  -\n*\nIDRLINK  EQU   *\n         TM    SWITCH,X'80'        HAVE WE ALREADY GOT THE LINK-DATE ?\n         BO    ERROR8              YES - BRANCH\n         OI    SWITCH,X'80'        SET FLAG 'GOT LINK-DATE'\n         ZAP   SKDTL,15(3,R6)      DATE LINKED\n         B     GETLOOP             GO GET ANOTHER RECORD\n         SPACE 1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO THE SORT                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        COUNT # OF RECORDS SORTED  -\nEODAD    L     R1,CSREC            COUNT # OF RECORDS\n         AL    R1,=F'1'            - PASSED TO THE SORT\n         ST    R1,CSREC            -\n         SPACE 1\n*        SET SORT-KEY DATE TO THE HIGHER OF  -\n*              - DATE LINKED\n*              - DATE OF LAST ZAP\n         ZAP   SKDATE,SKDTL        LINK DATE\n         CP    SKDATE,SKDTZ        IS LATEST ZAP LATER  ?\n         BNL   EODAD1              NO - BRANCH\n         ZAP   SKDATE,SKDTZ        HWM ZAP DATE\nEODAD1   OI    SKDATE+2,X'0F'      ENSURE A GOOD SORT KEY\n         SPACE 1\n         LA    R1,OUTREC           POINT TO RECORD TO PASS TO THE SORT\n         LA    R15,12              INSERT A RECORD\n         SPACE 1\nGOTATTR  L     R13,4(,R13)\n         L     R14,12(,R13)\n         RETURN (2,12),T,RC=(15)\n         SPACE 2\n*        END OF THE PDS - MUST TELL THE SORT NO MORE RECORDS  -\nENDPDS   CLC   CSREC,=F'0'         DO WE HAVE ANY RECORDS TO SORT\n         BE    ERROR9              NO - BRANCH\n         SPACE 1\n*        CLOSE DCBS FOR THE PDS  -\n         CLOSE (MEMDCB,,DIRDCB)    ISSUE CLOSE\n         SPACE 1\n*        FREE THE BUFFRE USED TO READ THE MEMBERS  -\n         L     R0,BUFFER           GET LENGTH AND S.P.\n         L     R1,DECB+12          POINT TO BUFFER\n         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN\n         SPACE 1\n*        FREE THE CESD TABLE  -\n         L     R0,GETLEN           GET LENGTH & SP.\n         L     R1,TABLESD          POINT TO TABLE\n         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN\n         SPACE 1\n*        FREE  THE BUFFERS USED BY THE DIRECTORY DCB  -\n         FREEPOOL DIRDCB\n         SPACE 1\n         LA    R15,8               SET 'DO NOT RETURN' CODE\n         B     GOTATTR             RETURN TO THE SORT - LAST TIME\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR CONDITIONS                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        ERROR IN RDJFCB  -\nERROR2   LA    R2,MEMDCB           POINT TO DCB\n         ABEND 2,DUMP\n         SPACE 1\n*        ERROR IN OBTAIN  -\nERROR3   LA    R2,CAMLIST          POINT TO CAMLST\n         ABEND 3,DUMP\n         SPACE 1\n*        DATASET TO BE PROCESSED IS NOT A PDS  -\nERROR4   LA    R2,AREA             POINT TO FORMAT 1 LABEL\n         ABEND 4,DUMP\n         SPACE 1\n*        CANNOT OPEN PDS DCBS  -\nERROR5   LA    R2,DIRDCB           POINT TO DIRECTORY DCB\n         LA    R3,MEMDCB           POINT TO MEMBER DCB\n         ABEND 5,DUMP\n         SPACE 1\n*\n*        CESD TABLE HAS OVERFLOWED -\n*              R2 POINTS TO THE TABLE -\nERROR6   ABEND 6,DUMP\n         SPACE 1\n*        WE HAVE A ZAP RECORD, AND NO SD ENTRY WITH A CORRESPONDING\n*        ESD # IN A PREVIOUS CESD RECORD.\n*\n*              R4 = CESD TABLE POINTER\n*              R5 = POINTER TO ZAP RECORD WE ARE WORKING ON\n*              R6 = POINTER TO IDR DATA RECORD\nERROR7   ABEND 4,DUMP\n         SPACE 1\n*        MORE THAN 1 LINK-EDIT IDR RECORD  -\n*              R6 POINTS TO THE SECOND ONE FOUND\nERROR8   ABEND 8,DUMP\n         SPACE 1\n*        NO RECORDS FOUND TO PASS TO THE SORT  -\n*         THE PDS CONTAINS NO MEMBERS CREATED BY THE LINKAGE-EDITOR\nERROR9   ABEND 9,DUMP\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSAVEXIT  DC    9D'0'               REGISTER SAVE AREA\n         SPACE 1\nMASK     DC    F'63'               MASK FOR 6 BITS   2 - 7\nMASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7\nSWITCH   DC    X'00'               SWITCHES\n*        X'80' = THE LINK-EDIT IDR RECORD HAS BEEN READ FOR THIS MEM.\n         SPACE 1\n*        FIELDS RELATING TO THE PDS  -\nTTRZ     DC    F'0'                TTR OF MEMBER I AM PROCESSING\n         READ  DECB,SF,MEMDCB,0,'S',MF=L                       DECB\n         SPACE 1\nBUFFER   DC    0F'0',X'0200'       LENGTH + SP FOR GETMAIN\nBUFFLEN  DC    H'0'                -\nGETLEN   DC    0F'0',X'03001000'   SP + LENGTH FOR CESD TABLE\n         SPACE 1\nCPMEM    DC    F'0'                # OF MEMBERS PROCESSED FROM PDS\nCMREC    DC    F'0'                # OF RECORDS READ FOR THIS MEMBER\nCPREC    DC    F'0'                # OF READS FOR THE PDS\nCSREC    DC    F'0'                # OF RECORDS PASSED TO THE SORT\n         SPACE 1\nTABLESD  DC    F'0'                POINTER TO CESD TABLE\nDIRPOINT DC    F'0'                POINTER TO CURRENT MEMBER\nLASTMEM  DC    8X'FF'              NAME OF LAST MEMBER IN PDS\nEXLST    DC    0F'0',X'87',AL3(JFCB)\n         SPACE 1\n*        TRANSLATE TABLE TO CONVERT TO PRINTABLE HEX  -\n         ORG   *-240\nTABLE1   EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         SPACE 1\n*        OUTPUT RECORD  -\nOUTREC   DC    0D'0'\n         DC    40X'00'             AREA TO BUILD SORT RECORD\n         SPACE 1\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         SPACE 1\nCAMLIST  CAMLST SEARCH,JFCB,JFCB+118,AREA\n         SPACE 1\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nAREA     DC    0D'0',148X'00'      AREA TO CONTAIN THE FORMAT 1 LABEL\nDIRBLOCK DC    32D'0'              CURRENT DIRECTORY BLOCK\n         SPACE 1\n*        D C B S  -\n         PRINT NOGEN\n*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -\nMEMDCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST,     X\n               EODAD=EODAD\n         SPACE 1\n*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -\nDIRDCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,    X\n               LRECL=256,BUFNO=100\n         PRINT GEN\n         DROP  R10\n         EJECT\n***********************************************************************\n*                                                                     *\n*        E35 EXIT                                                     *\n*                                                                     *\n***********************************************************************\n         DC    0D'0'\nE35      SAVE  (14,12),T,E35       SAVE REGISTERS\n         LR    R10,R15             ESTABLISH A BASE\n         USING E35,R10             -\n         LA    R12,SAVE35          CHAIN SAVE AREAS\n         ST    R12,8(,R13)         -\n         ST    R13,4(,R12)\n         LR    R13,R12\n         SPACE 2\n*        GET RECORD LEAVING THE SORT, AND TEST FOR EOF  -\n         L     R11,0(,R1)          POINT TO RECORD LEAVING THE SORT\n         LA    R11,0(,R11)         ZERO HI-ORDER BYTE\n         LTR   R11,R11             TEST FOR EOF\n         BNP   ENDE35              NO MORE RECORDS - BRANCH\n         USING SKREC,R11           FORMAT OF SORTED RECORD\n         SPACE 2\n*\n*        OPEN SYSPRINT IF NOT OPEN  -\n*\n         TM    SYSPRINT+48,X'10'   IS SYSPRINT OPEN ?\n         BO    BUILD               YES - BRANCH\n         SPACE 1\n         OPEN  (SYSPRINT,(OUTPUT)) OPEN SYSPRINT\n         TM    SYSPRINT+48,X'10'   DID IT OPEN O.K.  ?\n         BO    GETIME              YES - BRANCH\n         SPACE 1\n*        UNABLE TO OPEN SYSPRINT  -\n         ABEND 20,DUMP             ABEND\n         SPACE 1\n*        GET TIME AND DATE  -\nGETIME   TIME  DEC\n         ST    R0,TIME             SAVE TIME\n         ST    R1,DATE             SAVE DATE\n         MVO   TIM,TIME(2)         SAVE TIME\n         SPACE 1\n*        GET JOBNAME OF JOB, AND SAVE IT  -\n         EXTRACT FIELD1,FIELDS=(TIOT)\n         L     R1,FIELD1           POINT TO TIOT\n         MVC   JNAME,0(R1)         SAVE JOBNAME\n*\n*        BUILD A PRINT LINE  -\n*\nBUILD    LA    R3,LINE             R3 WILL POINT TO DETAIL PRINT LINE\n         USING DETLINE,R3          -\n         MVI   LINE,C' '           BLANK THE PRINT LINE\n         MVC   LINE+1(131),LINE    -\n         SPACE 1\n*        LATEST ZAP DATE  -\n         CP    SKZAP,=P'0'         ARE THERE ANY ZAPS ?\n         BE    PRINDL              NO - BRANCH\n         MVC   DETDTZ-1(7),PAT01\n         ED    DETDTZ-1(7),SKDTZ\n         SPACE 1\n*        DATE LINKED  -\nPRINDL   MVC   DETDTL-1(7),PAT01\n         ED    DETDTL-1(7),SKDTL\n         SPACE 1\n*        CSECT TYPES  -\n         MVC   DETTYPE,SKTYPE\n         SPACE 1\n*        NUMBER OF ZAPS  -\n         MVC   DETZAP,PAT02\n         ED    DETZAP,SKZAP\n         SPACE 1\n*        NUMBER OF CSECTS  -\n         MVC   DETCST,PAT02\n         ED    DETCST,SKCST\n         SPACE 1\n*        MODULE ENTRY POINT  -\n         UNPK  DWA(7),SKEP(4)\n         MVC   DETEP,DWA\n         TR    DETEP,TABLE2\n         SPACE 1\n*        MODULE SIZE  -\n         UNPK  DWA(7),SKSIZE(4)\n         MVC   DETSIZE,DWA\n         TR    DETSIZE,TABLE2\n         SPACE 1\n*        MODULE ATTRIBUTES  -\n         UNPK  DWA(5),SKATTR(3)\n         MVC   DETATTR,DWA\n         TR    DETATTR,TABLE2\n         SPACE 1\n*        TTRC  -\n         UNPK  DWA(9),SKTTRC(5)\n         MVC   DETTTRC,DWA\n         TR    DETTTRC,TABLE2\n         SPACE 1\n*        MEMBER NAME  -\n         MVC   DETMEM,SKMEM\n         SPACE 2\n*\n*        TEST  FOR HEADINGS REQUIRED  -\n*\n         CP    LINENO,MAXLINE      IS IT BOTTOM OF PAGE YET  ?\n         BL    NOHEAD              NO - BRANCH\n         SPACE 1\n         ZAP   LINENO,=P'0'        RESET LINE COUNTER\n         AP    PAGE,=P'1'          INCREMENT PAGE #\n         SPACE 1\n         MVI   HCNTL,X'8B'         SKIP TO 01\n         MVI   HLINE,C' '          BLANK HEADING PRINT LINE\n         MVC   HLINE+1(131),HLINE  -\n         LA    R2,HCNTL            POINT TO PRINT LINE\n         BAL   R9,PRINT            GO PRINT\n         SPACE 1\n         MVC   HLINE+110(6),PAT02\n         ED    HLINE+110(6),PAGE   EDIT PAGE #\n         MVC   HLINE+106(4),=C'PAGE'\n         MVC   HLINE+90(7),PAT01\n         ED    HLINE+90(7),DATE+1  EDIT DATE  YY.DDD\n         MVC   HLINE+83(5),=C'DATE:'\n         MVC   HLINE+30(L'HEAD01),HEAD01\n         MVC   HLINE(8),JNAME\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE+90(7),PAT03\n         ED    HLINE+90(7),TIM     EDIT TIME  HH.MM\n         MVC   HLINE+83(5),=C'TIME:'\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\n*        PUT DSNAME = AND VOLSER =  -\n         L     R3,=A(JFCB)         POINT TO JFCB READ IN E15 EXIT\n         MVC   HLINE+25(44),0(R3)  MOVE DSNAME\n         MVC   HLINE+16(8),=C'DSNAME ='\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE+25(6),118(R3) MOVE VOLSER\n         MVC   HLINE+16(8),=C'VOLUME ='\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD02\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD03\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD04\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\nNOHEAD   AP    LINENO,=P'1'        INCREMENT LINE #\n         LA    R2,CNTL             POINT TO DETAIL PRINT LINE\n         MVI   CNTL,X'09'\n         BAL   R9,PRINT            PRINT IT\n         SPACE 2\n*\n*        RETURN TO SORT, DELETE A RECORD  -\n*\n         LA    R15,12              DELETE A RECORD CODE\nGOBACK   L     R13,4(,R13)\n         RETURN (14,12),T,RC=(15)\n         SPACE 2\nENDE35   CLOSE (SYSPRINT)          CLOSE SYSPRINT\n         LA    R15,8               SET 'DO NOT RETURN' CODE\n         B     GOBACK              RETURN TO SORT FOR LAST TIME\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT A LINE SUBROUTINE                                      *\n*                                                                     *\n***********************************************************************\nPRINT    LR    R0,R2               POINT TO LINE TO PRINT\n         PUT   SYSPRINT            PUT IT\n         MVI   0(R2),C' '          BLANK OUT THE LINE WE PRINTED\n         MVC   1(131,R2),0(R2)     -\n         BR    R9                  RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N  S T A N T S                                           *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSAVE35   DC    9D'0'               REGISTER SAVE AREA\nJNAME    DC    CL8' '              JOBNAME OF THIS JOB\nFIELD1   DC    F'0'                POINTER TO TIOT\n         SPACE\n*        DETAIL PRINT LINE  _\nCNTL     DC    X'09'\nLINE     DC    132C' '\n         SPACE 1\n*        HEADING PRINT LINE  -\nHCNTL    DC    X'8B'\nHLINE    DC    132C' '\n         SPACE 1\nPAT01    DC    XL7'4021204B202020'\nPAT02    DC    XL6'402020202120'\nPAT03    DC    XL7'402120204B2020'\n         SPACE 1\nPAGE     DC    PL3'0'              CURRENT PAGE #\nLINENO   DC    PL2'99'             CURRENT LINE #\nMAXLINE  DC    PL2'45'             MAX # OF LINES/PAGE\n         SPACE 1\nDWA      DC    2D'0'               WORK SPACE\nTIME     DC    F'0'\nTIM      DC    X'00000F'\nDATE     DC    F'0'\n         SPACE 1\nHEAD01   DC    C'T W A - PDS LISTING - LINK/ZAP DATE REPORT'\nHEAD02   DC    CL132'        MEMBER             LINK           ENTRY   X\n                 CSECT    ZAP    CSECT     DATE   LATEST'\nHEAD03   DC    CL132'         NAME       TTRC   ATTR  LENGTH   POINT   X\n                 COUNT   COUNT   TYPES    LINKED    ZAP'\nHEAD04   DC    CL132'       --------  --------  ----  ------  ------   X\n                 -----   -----   -----    ------  ------'\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         ORG   *-240\nTABLE2   EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         PRINT NOGEN\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBM,  X\n               BLKSIZE=1995\n         DC    4D'0'\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE RECORD SENT TO THE SORT                        *\n*                                                                     *\n***********************************************************************\nSKREC    DSECT\nSKDATE   DS    PL3 -               DATE OF LAST LINK OR ZAP\nSKMEM    DS    CL8 -               MEMBER NAME\nSKTTRC   DS    XL4 -               TTRC\nSKATTR   DS    XL2 -               LINK-EDIT ATTRIBUTES\nSKSIZE   DS    XL3 -               SIZE OF MODULE\nSKEP     DS    XL3 -               ENTRY POINT OF MODULE\nSKCST    DS    PL3 -               COUNT OF # OF CSECTS\nSKZAP    DS    PL3 -               COUNT OF # OF ZAPS\nSKTYPE   DS    CL5 -               TYPE OF CSECT(S)\nSKDTL    DS    PL3 -               DATE OF LINK-EDIT\nSKDTZ    DS    PL3 -               DATE OF LATEST ZAP\nSKEND    EQU   *\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nDETLINE  DSECT\n         DS    CL7 -\nDETMEM   DS    CL8 -               MEMBER NAME\n         DS    CL2 -\nDETTTRC  DS    XL8 -               TTRC\n         DS    CL2 -\nDETATTR  DS    XL4 -               MODULE ATTRIBUTES\n         DS    CL2 -\nDETSIZE  DS    CL6 -               MODULE SIZE\n         DS    CL2 -\nDETEP    DS    CL6 -               MODULE ENTRY POINT\n         DS    CL4 -\nDETCST   DS    CL6 -               NUMBER OF CSECTS\n         DS    CL2 -\nDETZAP   DS    CL6 -               NUMBER OF ZAPS\n         DS    CL3 -\nDETTYPE  DS    CL5 -               CSECT TYPES\n         DS    CL4 -\nDETDTL   DS    CL6 -               DATE LINKED\n         DS    CL2 -\nDETDTZ   DS    CL6 -               DATE OF LATEST ZAP\n         END   WHATSNEW\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHATSNEW": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01&\\x00&\\x00\\x95\\x10\\x7f\\x01\\x13\\x00?!R\\x03\\xf0\\x03|\\x00\\x85\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.38", "flags": 0, "createdate": "1995-04-17T00:00:00", "modifydate": "2013-01-03T21:52:26", "lines": 1008, "newlines": 892, "modlines": 133, "user": "SBGOLOB"}, "text": "TWA      TITLE 'WHATSNEW  -  LIST PDS DIRECTORY WITH DATE INFORMATION'\n***********************************************************************\n*   S. GOLOB - 04/17/95                                               *\n*       MADE 3 CHANGES:                                               *\n*         1.  ELIMINATED SIZE PARAMETER FROM SORT INVOCATION.         *\n*         2.  INCREASED SIZE OF CESD TABLE 4X (LABEL \"GETLEN\").       *\n*         3.  DFSORT HAS A DIFFERENT RETURN CODE FROM AN ASSEMBLER    *\n*              E35 EXIT, TO DELETE A RECORD.  IT IS 4 INSTEAD OF 12.  *\n*                                                                     *\n*       TESTED THIS PROGRAM AGAINST MVS/ESA 4.3 SYS1.LINKLIB TO SEE   *\n*       IF IT COULD HANDLE THE SIZE.  ALSO SYS1.NUCLEUS.              *\n***********************************************************************\n*   S. GOLOB - 03/09/00                                               *\n*       MADE 2 CHANGES:                                               *\n*         1.  CHANGED SORT PARMS TO SORT WITH Y2K WINDOWING.  USES    *\n*             THE Y2D STATEMENT WHICH IS SUPPORTED IN AT LEAST        *\n*             RELEASE 13 OF IBM DFSORT, AND POSSIBLY EARLIER.  ALSO   *\n*             SUPPORTED IN RELEASE 3.6 PTF LEVEL 4 OF SYNCSORT, OR    *\n*             LATER.  TESTED ON RELEASE 13 OF DFSORT, 13.04.12.       *\n*                                                                     *\n*           IBM SUPPORT LEVEL NECESSARY FOR Y2D:                      *\n*           DFSORT RELEASE 13 WITH PTFS UN90139, UQ05520 AND UQ22533. *\n*                                                                     *\n*         2.  CHANGED THE EDIT PATTERN TO REPORT THE DATES, TO USE    *\n*             ZERO X'F0' FOR THE FILL CHARACTER.  BECAUSE OF THAT,    *\n*             IT WAS NECESSARY TO MOVE A BLANK IN TO COVER THE FIRST  *\n*             ZERO.  ONLY PAT01 WAS CHANGED.                          *\n***********************************************************************\n*   S. GOLOB - 07/09/00                                               *\n*       MADE 2 CHANGES:                                               *\n*         1.  INCREASED SIZE OF CESD TABLE A LOT, AND CHANGED         *\n*             THE ARITHMETIC HANDLING THE GETMAIN FROM LH (32767      *\n*             MAX) TO FULL HALFWORD (65535 MAX).                      *\n*         2.  FIXED SORT RECORDS TO WINDOW LKED AND ZAP DATES         *\n*             AS OF 1962-2061.                                        *\n***********************************************************************\n*   S. GOLOB - 01/03/13                                               *\n*       MADE 2 CHANGES:                                               *\n*         1.  INCREASED SIZE OF CESD AGAIN. 4 TIMES PREVIOUS VALUE.   *\n*             NEED 3-BYTE ARITHMETIC INSTEAD OF 2-BYTE.               *\n*         2.  ERROR7 WAS CAUSING AN ABEND 4 BY MISTAKE. CHANGED IT    *\n*             TO AN ABEND 7. (WE REALLY GOT SUCH AN ERROR IN TESTING) *\n***********************************************************************\n         MACRO\n         SYMREGS\n         GBLB  &REGO\n         AIF   (NOT &REGO).OK1\n         MEXIT\n.OK1     ANOP\n*\n**       GENERAL PURPOSE REGISTER EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n**       FLOATING POINT REGISTER EQUATES\n*\nFR0      EQU   0\nFR1      EQU   2\nFR2      EQU   4\nFR3      EQU   6\n&REGO    SETB  1\n         MEND\nWHATSNEW START 0\n         SYMREGS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WHATSNEW                                                     *\n*        --------                                                     *\n*                                                                     *\n*        LIST THE DIRECTORY OF A PDS.                                 *\n*        ( MUST CONTAIN MEMBERS CREATED BY THE LINKAGE EDITOR )       *\n*                                                                     *\n*        FOR EACH MEMBER, THE FOLLOWING IS LISTED  -                  *\n*              1. THE MEMBER NAME                                     *\n*              2. THE TTRC         ( FROM THE DIRECTORY )             *\n*              3. THE LINK-EDIT ATTRIBUTES                            *\n*              4. THE LENGTH OF THE MODULE                            *\n*              5. THE ENTRY POINT                                     *\n*              6. THE TOTAL NUMBER OF CSECTS IN THE MODULE            *\n*              7. THE NUMBER OF ZAPS ON THE MODULE                    *\n*              8. THE CSECT TYPES - AS FOLLOWS -                      *\n*                 C = AT LEAST ONE CSECT BEGINS 'ILB'                 *\n*                 I = AT LEAST ONE CSECT BEGINS 'DFS'                 *\n*              9. DATE THE MODULE WAS LINKED                          *\n*             10. DATE OF THE LATEST ZAP.                             *\n*                                                                     *\n*                                                                     *\n*        THE REPORT IS SORTED BY                                      *\n*              1. THE GREATER OF 9. & 10. ABOVE                       *\n*              2. MODULE NAME                                         *\n*                                                                     *\n*        WRITTEN BY   REX WIDMER / PETER FARRELL                      *\n*                                                                     *\n*        TRANS WORLD AIRLINES INC.                                    *\n*        KANSAS CITY ADMINISTRATIVE CENTER                            *\n*        11500 AMBASADOR DRIVE                                        *\n*        KANSAS CITY, MO 64153                                        *\n*                                                                     *\n*        816-464-6671                                                 *\n*                                                                     *\n*        THIS PROGRAM IS DISTRIBUTED WITHOUT CHARGE TO MEMBERS        *\n*        OF THE GUIDE COBOL GROUP.  IT IS DIRTRIBUTED ON AN AS        *\n*        IS, WHERE IS BASIS, WITHOUT EXPRESSED OR IMPLIED WARRANTY    *\n*        OF ANY KIND.  IT IS DISTRIBUTED IN HOPE THAT IT MAY SAVE     *\n*        OTHER MEMBERS OF THE PROJECT SOME WHEEL RE-INVENTING...      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*     SAMPLE JCL / JOBSTREAM                                          *\n*                                                                     *\n*       //WN      PROC NAME=,RGN=8000K,CLS=X                SBG 04/95 *\n*       //WN      EXEC PGM=WHATSNEW,REGION=&RGN,                      *\n*       //             ACCT='3600001020T    8484OBSDBSIM000B'         *\n*       //SYSPRINT  DD SYSOUT=&CLS   THE OUTPUT REPORT                *\n*       //SYSUT1    DD DISP=SHR,UNIT=SYSDA,                           *\n*       //             DSN=&NAME    THE PDS TO ANALYZE                *\n*       //SYSOUT    DD SYSOUT=&CLS FOR SORT                           *\n*       //SORTWK01  DD UNIT=SYSDA,SPACE=(CYL,1)                       *\n*       //SORTWK02  DD UNIT=SYSDA,SPACE=(CYL,1)                       *\n*       //SORTWK03  DD UNIT=SYSDA,SPACE=(CYL,1)                       *\n*                                                                     *\n***********************************************************************\n         EJECT\nWHATSNEW CSECT\n         SAVE  (14,12),T,*\n         LR    R10,R15             ESTABLISH A BASE REGISTER\n         USING WHATSNEW,R10        -\n         LA    R12,SAVE            CHAIN SAVE AREAS\n         ST    R12,8(,R13)         -\n         ST    R13,4(,R12)         -\n         LR    R13,R12             -\n         SPACE  2\n*\n*        LINK  TO THE SORT  -\n*\n         LA    R1,SRTPOINT         POINT TO SORT PARM LIST\n         LINK  EP=SORT             GO TO THE SORT\n         LTR   R15,R15             DID THE SORT RUN O.K.  ?\n         BNZ   ERROR1              NO - BRANCH\n         SPACE 1\n*        RETURN TO O.S.  -\n         L     R13,4(,R13)\n         RETURN (14,12),T,RC=0\n         SPACE 2\n*\n*        ERROR IN THE SORT  -\n*\nERROR1   EQU   *\n         LR    R9,R15              GET RETURN CODE FROM THE SORT\n         STC   R9,WORK             SAVE IT\n         UNPK  WORK+2(3),WORK+2    CONVERT TO PRINTABLE HEX\n         MVC   WTOMSG1C,WORK+2     PUT IN MSG.\n         TR    WTOMSG1C,TABLE      -\n         SPACE 1\n         LA    R1,WTOMSG1          POINT TO ERROR MESSAGE\n         WTO   MF=(E,(1))          WTO\n         LR    R15,R9              SAVE RETURN CODE\n         ABEND 1,DUMP              ERROR IN SORT\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N  S T A N T S                                           *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSAVE     DC    9D'0'               REGISTER SAVE AREA\nWORK     DC    D'0'                WORK AREA\n         SPACE 1\n*        ERROR MESSAGE ISSUED IF THE SORT TERMINATES WITH ERRORS  -\nWTOMSG1  DC    0F'0',Y(WTOMSG1E-*),H'0'\n         DC    C'SORT TERMINATED WITH COMPLETION CODE '\nWTOMSG1C DC    C'XX'               SORT COMPLETION CODE\nWTOMSG1E EQU   *\n         SPACE 1\n*        PARMS  TO PASS TO THE SORT  -\nSRTPOINT DC    0F'0',X'80',AL3(SORTPARM)\n         DC    0F'0',H'0'\nSORTPARM DC    Y(SORTPL-SORTPF)\nSORTPF   DC    A(SORTCF)\n         DC    A(SORTCL)\n         DC    A(RECDCF)\n         DC    A(RECDCL)\n         DC    A(E15)\n         DC    A(E35)\n         DC    X'FF00',C'SC'\n         DC    X'01',XL3'010000'   LEAVE ME 64K\nSORTPL   EQU   *\n         SPACE 1\n*        HERE IS THE SORT CARD  -\nSORTCF   DC    C' SORT FIELDS=(1,'\n         DC    C'1,Y2D,D,2,2,BI,D,4,8'                        SBG 03/00\n         DC    C',BI,A)'                 TAKE OUT SIZE PARAM  SBG 04/95\nSORTCL   DC    C' '\n         SPACE 1\n*        HERE IS THE RECORD CARD  -\nRECDCF   DC    C' RECORD TYPE=F,LENGTH=('\n         DC    C'00040'            LENGTH OF RECORD TO SORT\n         DC    C')'\nRECDCL   DC    C' '\n         SPACE 1\n*        TABLE USED FOR TRANSLATING TO PRINTABLE HEX  -\n         DC    0D'0'\n         ORG   *-240\nTABLE    EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         SPACE 1\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         DROP  R10\n         EJECT\n***********************************************************************\n*                                                                     *\n*        E15 EXIT                                                     *\n*                                                                     *\n***********************************************************************\n         DC    0D'0'\nE15      SAVE  (14,12),T,E15       SAVE REGISTERS\n         LR    R10,R15             ESTABLISH A BASE\n         USING E15,R10             -\n         LA    R12,SAVEXIT         CHAIN SAVE AREAS\n         ST    R12,8(,R13)         -\n         ST    R13,4(,R12)\n         LR    R13,R12\n         SPACE 2\n*\n*        TEST TO SEE IF THE PDS IS OPEN  -\n*\n         TM    DIRDCB+48,X'10'     IS THE PDS OPEN  ?\n         BO    LOOPDS1             YES - BRANCH\n         SPACE 1\n*        READ THE JFCB TO PREPARE FOR AN OBTAIN  -\n         RDJFCB (MEMDCB)           READ THE JFCB FOR THE PDS\n         LTR   R15,R15             DID IT DO THAT O.K.  ?\n         BNZ   ERROR2              NO - BRANCH\n         SPACE 1\n*        ISSUE  AN OBTAIN, TO SEE IF THE PDS EXISTS -\n         OBTAIN CAMLIST            ISSUE OBTAIN\n         LTR   R15,R15             DID THE OBTAIN OBTAIN ANYTHING ?\n         BNZ   ERROR3              NO - BRANCH\n         SPACE 1\n*        TEST TO ENSURE THAT THIS DATASET IS A PDS  -\n         TM    AREA+38,X'02'       TEST FOR 'DSORG=PO' IN FORMAT 1\n         BZ    ERROR4              NOT A PDS - BRANCH\n         SPACE 1\n*        OPEN THE DCBS FOR THE DIRECTORY AND THE MEMBERS  -\n         OPEN  (DIRDCB,,MEMDCB)    ISSUE THE OPEN\n         TM    DIRDCB+48,X'10'     DID THE DIRECTORY DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         TM    MEMDCB+48,X'10'     DID THE MEMBER DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         SPACE 1\n*        GET A BUFFER TO READ THE MEMBERS INTO  -\n         MVC   BUFFLEN,MEMDCB+62   GET BLOCKSIZE FROM THE DCB\n         L     R0,BUFFER           LENGTH + SP I.D. FOR GETMAIN\n         GETMAIN R,LV=(0)          ISSUE GETMAIN\n         ST    R1,DECB+12          PUT POINTER TO BUFFER IN DECB\n         SPACE 1\n*        INITIALISE  THE BUFFER TO ZEROS (EASIER DEBUGGING)  -\n         LH    R2,BUFFLEN          GET LENGTH OF THE BUFFER\nZEROLOOP MVI   0(R1),0             MOVE A ZERO INTO THE BUFFER\n         LA    R1,1(,R1)           INDEX THROUGH THE BUFFER\n         BCT   R2,ZEROLOOP         ZERO THE ENTIRE BUFFER\n         SPACE 1\n*\n*        GET CORE FOR THE CESD TABLE  -\n*\n*              THIS TABLE WILL BE USED TO CONTAIN SD ENTRIES\n*              FROM THE CESD RECORDS.\n*              IT IS USED TO RESOLVE ZAP IDRDATA TO THE CORRESPONDING\n*              CSECT NAME.\n*        TABLE FORMAT IS AS FOLLOWS -\n*\n*        0 - 3  = POINTER TO THE FIRST SLOT IN TABLE\n*        4 - 7  = LENGTH OF EACH TABLE ENTRY  ( 10 BYTES )\n*        8 - B  = POINTER TO NEXT AVAIL. SLOT TO ADD AN ENTRY\n*        C - F  = POINTER TO THE END OF THE TABLE\n*\n         L     R0,GETLEN           GET LENGTH AND SUBPOOL I.D.\n         GETMAIN R,LV=(0)          GET AREA FOR THE TABLE\n         ST    R1,TABLESD          SAVE POINTER TO THE TABLE\n         SPACE 1\n*        ZERO  THE TABLE  -\n*        LH    R3,GETLEN+2         GET LENGTH OF THE TABLE\n         XR    R3,R3\n         ICM   R3,7,GETLEN+1       GET LENGTH OF THE TABLE\nLOOPZERO MVI   0(R1),0             MOVE A ZERO INTO THE TABLE\n         LA    R1,1(,R1)           INCREMENT ALONG THE TABLE\n         BCT   R3,LOOPZERO         AND ZAP\n         SPACE 1\n*        INITIALISE THE TABLE  -\n         L     R2,TABLESD          POINT TO THE TABLE\n*        LH    R3,GETLEN+2         GET LENGTH OF THE TABLE\n         ICM   R3,7,GETLEN+1       GET LENGTH OF THE TABLE\n         AR    R3,R2               POINT TO THE END OF THE TABLE\n         ST    R3,12(,R2)          SAVE POINTER TO THE END OF THE TABLE\n         LA    R3,16(,R2)          POINTER TO FIRST SLOT IN THE TABLE\n         ST    R3,0(,R2)           SAVE POINTER TO FIRST SLOT IN TABLE\n         ST    R3,8(,R2)           SAVE POINTER TO NEXT AVAIL. SLOT\n         MVI   7(R2),10            LENGTH OF EACH TABLE ENTRY\n         B     GET                 GO GET THE FIRST MEMBER\n         SPACE 2\n*\n*        GET NEXT MEMBER IN THE PDS  -\n*\n*        FIRST  LOOK FOR A MEMBER IN THE CURRENT DIRECTORY BLOCK -\nLOOPDS1  L     R2,DIRPOINT         POINT TO THE NEXT MEMBER\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            LENGTH IS 5 BITS\n         SLL   R3,1                X 2 BECAUSE LENGTH IN HALF-WORDS\n         LA    R3,12(,R3)          ADD LENGTH OF MEMBER NAME + TTRC\n         AR    R3,R2               POINT TO NEXT MEMBER\n         SPACE 1\n*        FIND  THE END OF THE DIRECTORY BLOCK  -\n         LA    R4,DIRBLOCK         POINT TO THE CURRENT DIRECTORY BLK\n         LH    R5,0(,R4)           GET LENGTH USED\n         AR    R5,R4               POINT TO END OF THE BLOCK\n         CR    R5,R3               HAS THIS BLOCK BEEN EXAUSTED ?\n         BH    GOTNEXT             NO - BRANCH\n         SPACE 1\n*        READ THE NEXT DIRECTORY BLOCK  -\nGET      GET   DIRDCB,DIRBLOCK     READ THE NEXT DIRECTORY BLOCK\n         LA    R3,DIRBLOCK+2       POINT TO THE FIRST MEMBER IN BLOCK\nGOTNEXT  ST    R3,DIRPOINT         SAVE POINTER TO NEXT MEMBER\n         SPACE 1\n         XC    CMREC,CMREC         # OF RECORDS READ FOR THIS MEMBER\n         MVI   SWITCH,0            INITIALISE SWITCH\n         SPACE 1\n*        TEST TO SEE IF WE HAVE GOT TO THE END OF THE PDS  -\n         CLC   0(8,R3),LASTMEM     LOOK FOR A MEMBER NAME OF FOXES\n         BE    ENDPDS              GOT TO END - BRANCH\n         SPACE 1\n*        COUNT # OF MEMBERS READ  -\n         L     R1,CPMEM            GET # OF MEMBERS READ\n         AL    R1,=F'1'            INCREMENT BY 1\n         ST    R1,CPMEM            AND SAVE IT\n         SPACE 2\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         MVC   TTRZ(3),8(R2)       SAVE TTR OF MEMBER\n         POINT MEMDCB,TTRZ         POINT TO THIS MEMBER\n         SPACE 1\n*        BUILD FIRST PART OF THE SORT KEY  -\n         LA    R11,OUTREC          POINT TO AREA TO BUILD SORT RECORD\n         USING SKREC,R11\n         ZAP   SKDATE,=P'0'        DATE OF LAST LINK OR ZAP\n         MVC   SKMEM,0(R2)         MEMBER NAME\n         MVC   SKTTRC,8(R2)        TTRC\n         MVC   SKATTR,20(R2)       LINK-EDIT ATTRIBUTES\n         MVC   SKSIZE,22(R2)       SIZE OF MODULE\n         MVC   SKEP,27(R2)         ENTRY POINT\n         ZAP   SKCST,=P'0'         # OF CSECTS\n         ZAP   SKZAP,=P'0'         # OF ZAPS\n         MVI   SKTYPE,C' '         CSECT TYPES FIELD\n         MVC   SKTYPE+1(L'SKTYPE-1),SKTYPE\n         ZAP   SKDTL,=P'0'         DATE OF LINK-EDIT\n         ZAP   SKDTZ,=P'0'         DATE OF MOST RECENT ZAP\n         SPACE 1\n*        RE-INITIALISE CESD TABLE  -\n         L     R2,TABLESD          POINT TO CESD TABLE\n         MVC   8(4,R2),0(R2)       POINTER TO NEXT AVAIL. SLOT\n         SPACE 1\n*\n*        TEST FOR ALIAS  -\n*\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         TM    11(R2),X'80'        IS THIS ENTRY AN ALIAS  ?\n*        PROCESS ALIAS THE SAME AS OTHER MEMBERS  -\n         SPACE 2\n*        DETERMINE IF THE MEMBER WAS CREATED BY THE LINKAGE-EDITOR  -\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            -\n         C     R3,=F'11'           MUST BE AT LEAST 11 HALF-WORDS\n         BL    LOOPDS1             IT WAS NOT LINKED - BRANCH\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ THE MEMBER SEQUENTIALLY, EXTRACTING INFORMATION         *\n*        AND WRITING IT TO THE OUTPUT FILE.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETLOOP  EQU   *\n         L     R6,DECB+12          POINT TO INPUT AREA\n         READ  DECB,SF,MF=E        READ THE NEXT RECORD\n         CHECK DECB\n         SPACE 1\n*        INCREMENT COUNT OF # OF RECORDS READ BY 1  -\n         L     R1,CMREC            COUNTS # OF INPUT RECORDS\n         AL    R1,=F'1'            INCREMENT\n         ST    R1,CMREC            AND SAVE\n         SPACE 1\n         L     R1,CPREC            COUNTS # OF READS FOR THIS PDS\n         AL    R1,=F'1'            BUMP BY 1\n         ST    R1,CPREC            AND SAVE\n         SPACE 3\n*\n*        LOOK AT RECORD TYPE, PROCES ACORDINGLY  -\n*\n         TM    0(R6),1             DOES THIS RECORD PRECEED A TEXT REC.\n         BO    EODAD               YES - BRANCH ( WE ARE DONE )\n         SPACE 1\n         CLI   0(R6),X'20'         IS IT A CESD RECORD  ?\n         BE    CESD                YES - BRANCH\n         CLI   0(R6),X'80'         IS IT AN IDR DATA RECORD ?\n         BE    IDR                 YES - BRANCH\n         B     GETLOOP             GO GET ANOTHER RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE CESD TYPE INPUT RECORD                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCESD     LA    R3,8(,R6)           POINT TO 1ST ESD ENTRY\n         LH    R4,6(,R6)           GET LENGTH OF ESD DATA\n         AR    R4,R3               POINT TO END OF RECORD\n         LH    R5,4(,R6)           GET # OF FIRST ESD ENTRY IN THIS REC\n         SPACE 1\nLOOPESD  CR    R4,R3               HAVE WE GOT TO THE END YET ?\n         BNH   GETLOOP             YES - GO GET ANOTHER INPUT RECORD\n         SPACE 1\n         TM    8(R3),X'0F'         LOOK FOR TYPE SD ENTRIES\n         BZ    GOTSD               GOT AN SD ENTRY - BRANCH\n         SPACE 1\nLOOPESD2 LA    R3,16(,R3)          BUMP TO NEXT ESD ENTRY\n         AL    R5,=F'1'            KEEP COUNT OF ESD ENTRY #\n         B     LOOPESD             AND LOOK AT IT\n         SPACE 2\n*\n*        WE HAVE AD SD ENTRY, MUST ADD IT TO THE TABLE -\n*\nGOTSD    L     R2,TABLESD          POINT TO ESD TABLE\n         L     R8,8(,R2)           POINT TO NEXT SLOT TO ADD AN ENTRY\n         C     R8,12(,R2)          IS THERE ROOM IN THE TABLE  ?\n         BNL   ERROR6              NO - BRANCH\n         MVC   0(8,R8),0(R3)       MOVE SD NAME INTO THE TABLE\n         STH   R5,8(,R8)           PUT ESD # INTO TABLE\n         AL    R8,4(,R2)           BUMP BY LENGTH OF A TABLE ENTRY\n         ST    R8,8(,R2)           SAVE POINTER TO NEXT AVAIL. SLOT\n         SPACE 2\n*\n*        ACCUMULATE DATA FOR THE SORT RECORD  -\n*\n         AP    SKCST,=P'1'         # OF CSECTS IN MODULE\n         SPACE 1\n         CLC   =C'DFS',0(R3)       IS THIS AN IMS MODULE  ?\n         BNE   NOTIMS              NO - BRANCH\n         MVI   SKTYPE+4,C'I'       SET IMS TYPE\n         B     NOTCOBOL\nNOTIMS   CLC   =C'ILB',0(R3)       IS THIS A COBOL MODULE ?\n         BNE   NOTCOBOL            NO - BRANCH\n         MVI   SKTYPE+3,C'C'       SET COBOL TYPE\nNOTCOBOL B     LOOPESD2            GO LOOK AT NEXT CSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE IDR DATA TYPE RECORD.                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*\n*        FIRST TEST FOR TYPE OF IDR RECORD  -\n*\nIDR      TM    2(R6),1             IS IT AMASPZAP  ?\n         BO    IDRZAP              YES - BRANCH\n         TM    2(R6),2             IS IT THE LINKAGE EDITOR  ?\n         BO    IDRLINK             YES - BRANCH\n*        INSERT OTHER TESTS IN HERE  -\n         B     GETLOOP             WE DO NOT WANT THIS IDR RECORD\n         SPACE 2\n*\n*        AMASPZAP  - SUPERZAP IDR RECORD  -\n*\nIDRZAP   LA    R5,4(,R6)           POINT TO FIRST ZAP DATA\n         IC    R8,3(,R6)           GET # OF ENTRIES\n         N     R8,MASK             GET LAST 6 BITS ONLY\n         LTR   R8,R8               ARE THERE ANY ENTRIES  ?\n         BNP   GETLOOP             NO - BRANCH\n         SPACE 1\nZAPLOOP2 EQU   *\n         L     R4,TABLESD          POINT TO CESD TABLE\n         LM    R1,R3,0(R4)         GET POINTERS TO SLOTS\n         SPACE 1\nZAPLOOP  CLC   8(2,R1),0(R5)       TRY TO MATCH ESD # WITH A TABLE ENTR\n         BE    PUTZAP              GOT ONE - BRANCH\n         BXLE  R1,R2,ZAPLOOP       SCAN THROUGH THE TABLE\n         B     ERROR7              TABLE ENTRY NOT FOUND\n         SPACE 1\n*\n*        ACCUMULATE COUNT OF ZAP RECORDS, AND HWM ZAP DATE  -\n*\nPUTZAP   AP    SKZAP,=P'1'         COUNT # OF ZAPS\n         ZAP   NWZAP4,2(3,R5)      MOVE TO BIGGER FIELD       SBG 07/00\n         CP    NWZAP4,=PL4'0'      IS THERE A LEGITIMATE ZAP? SBG 07/00\n         BE    Y2K0001             NO. DON'T DEAL WITH NUMBER SBG 07/00\n         CP    NWZAP4,=PL3'62000'                             SBG 07/00\n         BNL   Y2K0001                                        SBG 07/00\n         AP    NWZAP4,=PL4'100000'                            SBG 07/00\nY2K0001  ZAP   HIZAP4,SKDTZ        MOVE TO BIGGER FIELD       SBG 07/00\n         CP    HIZAP4,=PL4'0'      IS THERE A LEGITIMATE ZAP? SBG 07/00\n         BE    Y2K0002             NO. DON'T DEAL WITH NUMBER SBG 07/00\n         CP    HIZAP4,=PL3'62000'                             SBG 07/00\n         BNL   Y2K0002                                        SBG 07/00\n         AP    HIZAP4,=PL4'100000'                            SBG 07/00\n*        CP    SKDTZ,2(3,R5)       IS THIS A LATER ZAP THAN PREVIOUS ?\nY2K0002  CP    HIZAP4,NWZAP4       A LATER ZAP THAN PREVIOUS? SBG 07/00\n         BNL   NOMOREZ             NO - BRANCH\n         ZAP   SKDTZ,2(3,R5)       ACCUMULATE HWM OF ZAP DATE\n         B     NOMOREZ             SKIP OVER DATA AREAS       SBG 07/00\nNWZAP4   DC    PL4'0'                                         SBG 07/00\nHIZAP4   DC    PL4'0'                                         SBG 07/00\n*\n*        INDEX THROUGH THE ZAP IDR RECORD  -\n*\nNOMOREZ  LA    R5,13(,R5)          BUMP TO NEXT ZAP ENTRY\n         BCT   R8,ZAPLOOP2         AND WORK ON IT\n         B     GETLOOP             GET NEXT INPUT RECORD\n         SPACE 3\n*\n*        GOT LINK-EDIT RECORD,\n*        CAN NOW ACCUMULATE THE LINK-EDIT DATE  -\n*\nIDRLINK  EQU   *\n         TM    SWITCH,X'80'        HAVE WE ALREADY GOT THE LINK-DATE ?\n         BO    ERROR8              YES - BRANCH\n         OI    SWITCH,X'80'        SET FLAG 'GOT LINK-DATE'\n         ZAP   SKDTL,15(3,R6)      DATE LINKED\n         B     GETLOOP             GO GET ANOTHER RECORD\n         SPACE 1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RETURN TO THE SORT                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        COUNT # OF RECORDS SORTED  -\nEODAD    L     R1,CSREC            COUNT # OF RECORDS\n         AL    R1,=F'1'            - PASSED TO THE SORT\n         ST    R1,CSREC            -\n         SPACE 1\n*        SET SORT-KEY DATE TO THE HIGHER OF  -\n*              - DATE LINKED\n*              - DATE OF LAST ZAP\n         ZAP   SKLDT4,SKDTL                                   SBG 07/00\n         CP    SKLDT4,=PL4'0'      IS LKED DATE LEGITIMATE?   SBG 07/00\n         BE    Y2K0003             NO. DON'T DEAL WITH NUMBER SBG 07/00\n         CP    SKLDT4,=PL3'62000'                             SBG 07/00\n         BNL   Y2K0003                                        SBG 07/00\n         AP    SKLDT4,=PL4'100000'                            SBG 07/00\nY2K0003  ZAP   SKZDT4,SKDTZ                                   SBG 07/00\n         CP    SKZDT4,=PL4'0'      IS THERE A LEGITIMATE ZAP? SBG 07/00\n         BE    Y2K0004             NO. DON'T DEAL WITH NUMBER SBG 07/00\n         CP    SKZDT4,=PL3'62000'                             SBG 07/00\n         BNL   Y2K0004                                        SBG 07/00\n         AP    SKZDT4,=PL4'100000'                            SBG 07/00\nY2K0004  ZAP   SKDATE,SKDTL        LINK DATE\n*        CP    SKDATE,SKDTZ        IS LATEST ZAP LATER  ?     SBG 07/00\n         CP    SKLDT4,SKZDT4       IS LATEST ZAP REALLY LATER SBG 07/00\n         BNL   EODAD1              NO - BRANCH\n         ZAP   SKDATE,SKDTZ        HWM ZAP DATE\n         B     EODAD1                                         SBG 07/00\nSKLDT4   DC    PL4'0'                                         SBG 07/00\nSKZDT4   DC    PL4'0'                                         SBG 07/00\nEODAD1   OI    SKDATE+2,X'0F'      ENSURE A GOOD SORT KEY\n         SPACE 1\n         LA    R1,OUTREC           POINT TO RECORD TO PASS TO THE SORT\n         LA    R15,12              INSERT A RECORD\n         SPACE 1\nGOTATTR  L     R13,4(,R13)\n         L     R14,12(,R13)\n         RETURN (2,12),T,RC=(15)\n         SPACE 2\n*        END OF THE PDS - MUST TELL THE SORT NO MORE RECORDS  -\nENDPDS   CLC   CSREC,=F'0'         DO WE HAVE ANY RECORDS TO SORT\n         BE    ERROR9              NO - BRANCH\n         SPACE 1\n*        CLOSE DCBS FOR THE PDS  -\n         CLOSE (MEMDCB,,DIRDCB)    ISSUE CLOSE\n         SPACE 1\n*        FREE THE BUFFRE USED TO READ THE MEMBERS  -\n         L     R0,BUFFER           GET LENGTH AND S.P.\n         L     R1,DECB+12          POINT TO BUFFER\n         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN\n         SPACE 1\n*        FREE THE CESD TABLE  -\n         L     R0,GETLEN           GET LENGTH & SP.\n         L     R1,TABLESD          POINT TO TABLE\n         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN\n         SPACE 1\n*        FREE  THE BUFFERS USED BY THE DIRECTORY DCB  -\n         FREEPOOL DIRDCB\n         SPACE 1\n         LA    R15,8               SET 'DO NOT RETURN' CODE\n         B     GOTATTR             RETURN TO THE SORT - LAST TIME\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR CONDITIONS                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        ERROR IN RDJFCB  -\nERROR2   LA    R2,MEMDCB           POINT TO DCB\n         ABEND 2,DUMP\n         SPACE 1\n*        ERROR IN OBTAIN  -\nERROR3   LA    R2,CAMLIST          POINT TO CAMLST\n         ABEND 3,DUMP\n         SPACE 1\n*        DATASET TO BE PROCESSED IS NOT A PDS  -\nERROR4   LA    R2,AREA             POINT TO FORMAT 1 LABEL\n         ABEND 4,DUMP\n         SPACE 1\n*        CANNOT OPEN PDS DCBS  -\nERROR5   LA    R2,DIRDCB           POINT TO DIRECTORY DCB\n         LA    R3,MEMDCB           POINT TO MEMBER DCB\n         ABEND 5,DUMP\n         SPACE 1\n*\n*        CESD TABLE HAS OVERFLOWED -\n*              R2 POINTS TO THE TABLE -\nERROR6   ABEND 6,DUMP\n         SPACE 1\n*        WE HAVE A ZAP RECORD, AND NO SD ENTRY WITH A CORRESPONDING\n*        ESD # IN A PREVIOUS CESD RECORD.\n*\n*              R4 = CESD TABLE POINTER\n*              R5 = POINTER TO ZAP RECORD WE ARE WORKING ON\n*              R6 = POINTER TO IDR DATA RECORD\nERROR7   ABEND 7,DUMP\n         SPACE 1\n*        MORE THAN 1 LINK-EDIT IDR RECORD  -\n*              R6 POINTS TO THE SECOND ONE FOUND\nERROR8   ABEND 8,DUMP\n         SPACE 1\n*        NO RECORDS FOUND TO PASS TO THE SORT  -\n*         THE PDS CONTAINS NO MEMBERS CREATED BY THE LINKAGE-EDITOR\nERROR9   ABEND 9,DUMP\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSAVEXIT  DC    9D'0'               REGISTER SAVE AREA\n         SPACE 1\nMASK     DC    F'63'               MASK FOR 6 BITS   2 - 7\nMASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7\nSWITCH   DC    X'00'               SWITCHES\n*        X'80' = THE LINK-EDIT IDR RECORD HAS BEEN READ FOR THIS MEM.\n         SPACE 1\n*        FIELDS RELATING TO THE PDS  -\nTTRZ     DC    F'0'                TTR OF MEMBER I AM PROCESSING\n         READ  DECB,SF,MEMDCB,0,'S',MF=L                       DECB\n         SPACE 1\nBUFFER   DC    0F'0',X'0200'       LENGTH + SP FOR GETMAIN\nBUFFLEN  DC    H'0'                -\nGETLEN   DC    0F'0',X'0302FFF0'   SP + LENGTH FOR CESD TABLE SBG 04/95\n         SPACE 1\nCPMEM    DC    F'0'                # OF MEMBERS PROCESSED FROM PDS\nCMREC    DC    F'0'                # OF RECORDS READ FOR THIS MEMBER\nCPREC    DC    F'0'                # OF READS FOR THE PDS\nCSREC    DC    F'0'                # OF RECORDS PASSED TO THE SORT\n         SPACE 1\nTABLESD  DC    F'0'                POINTER TO CESD TABLE\nDIRPOINT DC    F'0'                POINTER TO CURRENT MEMBER\nLASTMEM  DC    8X'FF'              NAME OF LAST MEMBER IN PDS\nEXLST    DC    0F'0',X'87',AL3(JFCB)\n         SPACE 1\n*        TRANSLATE TABLE TO CONVERT TO PRINTABLE HEX  -\n         ORG   *-240\nTABLE1   EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         SPACE 1\n*        OUTPUT RECORD  -\nOUTREC   DC    0D'0'\n         DC    40X'00'             AREA TO BUILD SORT RECORD\n         SPACE 1\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         SPACE 1\nCAMLIST  CAMLST SEARCH,JFCB,JFCB+118,AREA\n         SPACE 1\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nAREA     DC    0D'0',148X'00'      AREA TO CONTAIN THE FORMAT 1 LABEL\nDIRBLOCK DC    32D'0'              CURRENT DIRECTORY BLOCK\n         SPACE 1\n*        D C B S  -\n         PRINT NOGEN\n*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -\nMEMDCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST,     X\n               EODAD=EODAD\n         SPACE 1\n*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -\nDIRDCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,    X\n               LRECL=256,BUFNO=100\n         PRINT GEN\n         DROP  R10\n         EJECT\n***********************************************************************\n*                                                                     *\n*        E35 EXIT                                                     *\n*                                                                     *\n***********************************************************************\n         DC    0D'0'\nE35      SAVE  (14,12),T,E35       SAVE REGISTERS\n         LR    R10,R15             ESTABLISH A BASE\n         USING E35,R10             -\n         LA    R12,SAVE35          CHAIN SAVE AREAS\n         ST    R12,8(,R13)         -\n         ST    R13,4(,R12)\n         LR    R13,R12\n         SPACE 2\n*        GET RECORD LEAVING THE SORT, AND TEST FOR EOF  -\n         L     R11,0(,R1)          POINT TO RECORD LEAVING THE SORT\n         LA    R11,0(,R11)         ZERO HI-ORDER BYTE\n         LTR   R11,R11             TEST FOR EOF\n         BNP   ENDE35              NO MORE RECORDS - BRANCH\n         USING SKREC,R11           FORMAT OF SORTED RECORD\n         SPACE 2\n*\n*        OPEN SYSPRINT IF NOT OPEN  -\n*\n         TM    SYSPRINT+48,X'10'   IS SYSPRINT OPEN ?\n         BO    BUILD               YES - BRANCH\n         SPACE 1\n         OPEN  (SYSPRINT,(OUTPUT)) OPEN SYSPRINT\n         TM    SYSPRINT+48,X'10'   DID IT OPEN O.K.  ?\n         BO    GETIME              YES - BRANCH\n         SPACE 1\n*        UNABLE TO OPEN SYSPRINT  -\n         ABEND 20,DUMP             ABEND\n         SPACE 1\n*        GET TIME AND DATE  -\nGETIME   TIME  DEC\n         ST    R0,TIME             SAVE TIME\n         ST    R1,DATE             SAVE DATE\n         MVO   TIM,TIME(2)         SAVE TIME\n         SPACE 1\n*        GET JOBNAME OF JOB, AND SAVE IT  -\n         EXTRACT FIELD1,FIELDS=(TIOT)\n         L     R1,FIELD1           POINT TO TIOT\n         MVC   JNAME,0(R1)         SAVE JOBNAME\n*\n*        BUILD A PRINT LINE  -\n*\nBUILD    LA    R3,LINE             R3 WILL POINT TO DETAIL PRINT LINE\n         USING DETLINE,R3          -\n         MVI   LINE,C' '           BLANK THE PRINT LINE\n         MVC   LINE+1(131),LINE    -\n         SPACE 1\n*        LATEST ZAP DATE  -\n         CP    SKZAP,=P'0'         ARE THERE ANY ZAPS ?\n         BE    PRINDL              NO - BRANCH\n         MVC   DETDTZ-1(7),PAT01\n         ED    DETDTZ-1(7),SKDTZ\n         MVI   DETDTZ-1,X'40'      COVER UP FIRST ZERO        SBG 03/00\n         SPACE 1\n*        DATE LINKED  -\nPRINDL   MVC   DETDTL-1(7),PAT01\n         ED    DETDTL-1(7),SKDTL\n         MVI   DETDTL-1,X'40'      COVER UP FIRST ZERO        SBG 03/00\n         SPACE 1\n*        CSECT TYPES  -\n         MVC   DETTYPE,SKTYPE\n         SPACE 1\n*        NUMBER OF ZAPS  -\n         MVC   DETZAP,PAT02\n         ED    DETZAP,SKZAP\n         SPACE 1\n*        NUMBER OF CSECTS  -\n         MVC   DETCST,PAT02\n         ED    DETCST,SKCST\n         SPACE 1\n*        MODULE ENTRY POINT  -\n         UNPK  DWA(7),SKEP(4)\n         MVC   DETEP,DWA\n         TR    DETEP,TABLE2\n         SPACE 1\n*        MODULE SIZE  -\n         UNPK  DWA(7),SKSIZE(4)\n         MVC   DETSIZE,DWA\n         TR    DETSIZE,TABLE2\n         SPACE 1\n*        MODULE ATTRIBUTES  -\n         UNPK  DWA(5),SKATTR(3)\n         MVC   DETATTR,DWA\n         TR    DETATTR,TABLE2\n         SPACE 1\n*        TTRC  -\n         UNPK  DWA(9),SKTTRC(5)\n         MVC   DETTTRC,DWA\n         TR    DETTTRC,TABLE2\n         SPACE 1\n*        MEMBER NAME  -\n         MVC   DETMEM,SKMEM\n         SPACE 2\n*\n*        TEST  FOR HEADINGS REQUIRED  -\n*\n         CP    LINENO,MAXLINE      IS IT BOTTOM OF PAGE YET  ?\n         BL    NOHEAD              NO - BRANCH\n         SPACE 1\n         ZAP   LINENO,=P'0'        RESET LINE COUNTER\n         AP    PAGE,=P'1'          INCREMENT PAGE #\n         SPACE 1\n         MVI   HCNTL,X'8B'         SKIP TO 01\n         MVI   HLINE,C' '          BLANK HEADING PRINT LINE\n         MVC   HLINE+1(131),HLINE  -\n         LA    R2,HCNTL            POINT TO PRINT LINE\n         BAL   R9,PRINT            GO PRINT\n         SPACE 1\n         MVC   HLINE+110(6),PAT02\n         ED    HLINE+110(6),PAGE   EDIT PAGE #\n         MVC   HLINE+106(4),=C'PAGE'\n         MVC   HLINE+90(7),PAT01\n         ED    HLINE+90(7),DATE+1  EDIT DATE  YY.DDD\n         MVI   HLINE+90,X'40'      COVER UP FIRST ZERO        SBG 03/00\n         MVC   HLINE+83(5),=C'DATE:'\n         MVC   HLINE+30(L'HEAD01),HEAD01\n         MVC   HLINE(8),JNAME\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE+90(7),PAT03\n         ED    HLINE+90(7),TIM     EDIT TIME  HH.MM\n         MVC   HLINE+83(5),=C'TIME:'\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\n*        PUT DSNAME = AND VOLSER =  -\n         L     R3,=A(JFCB)         POINT TO JFCB READ IN E15 EXIT\n         MVC   HLINE+25(44),0(R3)  MOVE DSNAME\n         MVC   HLINE+16(8),=C'DSNAME ='\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE+25(6),118(R3) MOVE VOLSER\n         MVC   HLINE+16(8),=C'VOLUME ='\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD02\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD03\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD04\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\nNOHEAD   AP    LINENO,=P'1'        INCREMENT LINE #\n         LA    R2,CNTL             POINT TO DETAIL PRINT LINE\n         MVI   CNTL,X'09'\n         BAL   R9,PRINT            PRINT IT\n         SPACE 2\n*\n*        RETURN TO SORT, DELETE A RECORD  -\n*\n         LA    R15,4               DELETE A RECORD CODE       SBG 04/95\n*                       RC 4 FOR DFSORT, 12 FOR SYNCSORT ?    SBG 04/95\n*  (WAS 12 IN ORIG PGM) RC 12 IS INVALID FOR DFSORT.          SBG 04/95\nGOBACK   L     R13,4(,R13)\n         RETURN (14,12),T,RC=(15)\n         SPACE 2\nENDE35   CLOSE (SYSPRINT)          CLOSE SYSPRINT\n         LA    R15,8               SET 'DO NOT RETURN' CODE\n         B     GOBACK              RETURN TO SORT FOR LAST TIME\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT A LINE SUBROUTINE                                      *\n*                                                                     *\n***********************************************************************\nPRINT    LR    R0,R2               POINT TO LINE TO PRINT\n         PUT   SYSPRINT            PUT IT\n         MVI   0(R2),C' '          BLANK OUT THE LINE WE PRINTED\n         MVC   1(131,R2),0(R2)     -\n         BR    R9                  RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N  S T A N T S                                           *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSAVE35   DC    9D'0'               REGISTER SAVE AREA\nJNAME    DC    CL8' '              JOBNAME OF THIS JOB\nFIELD1   DC    F'0'                POINTER TO TIOT\n         SPACE\n*        DETAIL PRINT LINE  _\nCNTL     DC    X'09'\nLINE     DC    132C' '\n         SPACE 1\n*        HEADING PRINT LINE  -\nHCNTL    DC    X'8B'\nHLINE    DC    132C' '\n         SPACE 1\nPAT01    DC    XL7'F021204B202020' MAKE 0 THE FILL CHARACTER  SBG 03/00\nPAT02    DC    XL6'402020202120'\nPAT03    DC    XL7'402120204B2020'                            SBG 03/00\n         SPACE 1\nPAGE     DC    PL3'0'              CURRENT PAGE #\nLINENO   DC    PL2'99'             CURRENT LINE #\nMAXLINE  DC    PL2'45'             MAX # OF LINES/PAGE\n         SPACE 1\nDWA      DC    2D'0'               WORK SPACE\nTIME     DC    F'0'\nTIM      DC    X'00000F'\nDATE     DC    F'0'\n         SPACE 1\nHEAD01   DC    C'T W A - PDS LISTING + LINK/ZAP DATE REPORT'\nHEAD02   DC    CL132'        MEMBER             LINK           ENTRY   X\n                 CSECT    ZAP    CSECT     DATE   LATEST'\nHEAD03   DC    CL132'         NAME       TTRC   ATTR  LENGTH   POINT   X\n                 COUNT   COUNT   TYPES    LINKED    ZAP'\nHEAD04   DC    CL132'       --------  --------  ----  ------  ------   X\n                 -----   -----   -----    ------  ------'\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         ORG   *-240\nTABLE2   EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         PRINT NOGEN\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBM,  X\n               BLKSIZE=1995\n         DC    4D'0'\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE RECORD SENT TO THE SORT                        *\n*                                                                     *\n***********************************************************************\nSKREC    DSECT\nSKDATE   DS    PL3 -               DATE OF LAST LINK OR ZAP\nSKMEM    DS    CL8 -               MEMBER NAME\nSKTTRC   DS    XL4 -               TTRC\nSKATTR   DS    XL2 -               LINK-EDIT ATTRIBUTES\nSKSIZE   DS    XL3 -               SIZE OF MODULE\nSKEP     DS    XL3 -               ENTRY POINT OF MODULE\nSKCST    DS    PL3 -               COUNT OF # OF CSECTS\nSKZAP    DS    PL3 -               COUNT OF # OF ZAPS\nSKTYPE   DS    CL5 -               TYPE OF CSECT(S)\nSKDTL    DS    PL3 -               DATE OF LINK-EDIT\nSKDTZ    DS    PL3 -               DATE OF LATEST ZAP\nSKEND    EQU   *\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nDETLINE  DSECT\n         DS    CL7 -\nDETMEM   DS    CL8 -               MEMBER NAME\n         DS    CL2 -\nDETTTRC  DS    XL8 -               TTRC\n         DS    CL2 -\nDETATTR  DS    XL4 -               MODULE ATTRIBUTES\n         DS    CL2 -\nDETSIZE  DS    CL6 -               MODULE SIZE\n         DS    CL2 -\nDETEP    DS    CL6 -               MODULE ENTRY POINT\n         DS    CL4 -\nDETCST   DS    CL6 -               NUMBER OF CSECTS\n         DS    CL2 -\nDETZAP   DS    CL6 -               NUMBER OF ZAPS\n         DS    CL3 -\nDETTYPE  DS    CL5 -               CSECT TYPES\n         DS    CL4 -\nDETDTL   DS    CL6 -               DATE LINKED\n         DS    CL2 -\nDETDTZ   DS    CL6 -               DATE OF LATEST ZAP\n         END   WHATSNEW\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WHEREUS$": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x01\\x00\\x04\\x8f\\x01\\x00\\x07\\x0f\\x00\\x04\\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2000-03-10T00:04:00", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//STEPLIB DD DISP=SHR,DSN=ASMA.V1R2M0.SASMMOD1   <== IF NEEDED\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.FILE200.PDS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.FILE200.PDS(WHEREUSD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n NAME    WHEREUSD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHEREUS#": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x06\\x9f\\x01\\x00\\x06\\x9f#D\\x00\\t\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-03-09T00:00:00", "modifydate": "2000-03-09T23:44:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBW  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//WU      EXEC PGM=WHEREUSD,REGION=3000K,\n//             PARM='TODAY'\n//STEPLIB   DD DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSPRINT  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//SYSUT1    DD DISP=SHR,DSN=SBGOLOB.LOAD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHEREUSD": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x80\"\\x8f\\x01\\x00\\x06\\x9f#X\\x02~\\x02w\\x00$\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "2000-03-09T23:58:00", "lines": 638, "newlines": 631, "modlines": 36, "user": "SBGOLOB"}, "text": "TWA      TITLE 'WHEREUSD  -  LIST PDS DIRECTORY WITH DATE INFORMATION'\nWHEREUSD START 0\n         SYMREGS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WHEREUSD                                                     *\n*        --------                                                     *\n*                                                                     *\n*        SEARCH A PDS FOR A GIVEN  CSECT NAME                         *\n*        ( MUST CONTAIN MEMBERS CREATED BY THE LINKAGE EDITOR )       *\n*                                                                     *\n*        FOR EACH MEMBER, THE FOLLOWING IS LISTED  -                  *\n*                                                                     *\n*              1. THE MEMBER NAME                                     *\n*              2. THE TTRC         ( FROM THE DIRECTORY )             *\n*              3. THE LINK-EDIT ATTRIBUTES                            *\n*              4. THE LENGTH OF THE MODULE                            *\n*              5. THE ENTRY POINT                                     *\n*                                                                     *\n*        WRITTEN BY   REX WIDMER / PETER FARRELL                      *\n*                                                                     *\n*        TRANS WORLD AIRLINES INC.                                    *\n*        KANSAS CITY ADMINISTRATIVE CENTER                            *\n*        11500 AMBASADOR DRIVE                                        *\n*        KANSAS CITY, MO 64153                                        *\n*                                                                     *\n*        816-464-6671                                                 *\n*                                                                     *\n*        THIS PROGRAM IS DISTRIBUTED WITHOUT CHARGE TO MEMBERS        *\n*        OF THE GUIDE COBOL GROUP.  IT IS DIRTRIBUTED ON AN AS        *\n*        IS, WHERE IS BASIS, WITHOUT EXPRESSED OR IMPLIED WARRANTY    *\n*        OF ANY KIND.  IT IS DISTRIBUTED IN HOPE THAT IT MAY SAVE     *\n*        OTHER MEMBERS OF THE PROJECT SOME WHEEL RE-INVENTING...      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        JCL / DD-CARD REQUIREMENTS                                   *\n*               SAMPLE PROC FOR USAGE OF WHEREUSD                     *\n*                                                                     *\n*       //WU      PROC NAME=,RGN=128K,CLS=X,P=                        *\n*       //WU      EXEC PGM=WHEREUSD,REGION=&RGN,                      *\n*       //             PARM='&P'                                      *\n*       //STEPLIB   DD DISP=SHR,DSN=SYPP.PGMLIB                       *\n*       //SYSPRINT  DD SYSOUT=&CLS                                    *\n*       //SYSYDUMP  DD SYSOUT=&CLS                                    *\n*       //SYSUT1    DD DISP=SHR,UNIT=SYSDA,                           *\n*       //             DSN=&NAME                                      *\n*                                                                     *\n*        DD-CARDS / FUNCTION                                          *\n*                                                                     *\n*           SYSUT1   THE PDS TO ANALYZE                               *\n*           SYSPRINT THE OUTPUT REPORT                                *\n*                                                                     *\n*        PARM INFORMATION                                             *\n*                                                                     *\n*          SYMBOLIC /P/     1-8 CHARACTER EXTERNAL SYMBOL TO          *\n*                           SEARCH FOR                                *\n*                                                                     *\n***********************************************************************\n*   CHANGE LOG                                            SBG 03/00   *\n*        03/09/00 - FIX DATE IN HEADER FOR Y2K.  CHANGE   SBG 03/00   *\n*                   PAT01 FILL BYTE TO X'F0' AND BLANK    SBG 03/00   *\n*                   OUT THE FIRST OCCURRENCE.             SBG 03/00   *\n*                                                                     *\n***********************************************************************\n         EJECT\nWHEREUSD CSECT\n         SAVE  (14,12),T,*\n         LR    R10,R15             ESTABLISH A BASE REGISTER\n         USING WHEREUSD,R10        -\n         LA    R12,SAVE            CHAIN SAVE AREAS\n         ST    R12,8(,R13)         -\n         ST    R13,4(,R12)         -\n         LR    R13,R12             -\n         SPACE  2\n*\n*        SAVE THE CSECT NAME TO LOOK FOR, GIVEN IN THE PARM FIELD  -\n*\n         L     R2,0(,R1)           GET POINTER TO THE PARMS\n         LA    R2,0(,R2)           -\n         LH    R3,0(,R2)           GET LENGTH OF THE PARMS\n         LTR   R3,R3               WERE ANY PARMS PASSED  ?\n         BNP   ERROR1              NO - BRANCH\n         C     R3,=F'8'            WAS THE PARM LENGTH GT 8\n         BH    ERROR1              YES - BRANCH\n         SPACE 1\n         BCTR  R3,0                PREPARE TO EXECUTE\n         EX    R3,MOVEPARM         MOVE THE PARM TO AN AREA\n         SPACE 2\n*        READ THE JFCB TO PREPARE FOR AN OBTAIN  -\n         RDJFCB (MEMDCB)           READ THE JFCB FOR THE PDS\n         LTR   R15,R15             DID IT DO THAT O.K.  ?\n         BNZ   ERROR2              NO - BRANCH\n         SPACE 1\n*        ISSUE  AN OBTAIN, TO SEE IF THE PDS EXISTS -\n         OBTAIN CAMLIST            ISSUE OBTAIN\n         LTR   R15,R15             DID THE OBTAIN OBTAIN ANYTHING ?\n         BNZ   ERROR3              NO - BRANCH\n         SPACE 1\n*        TEST TO ENSURE THAT THIS DATASET IS A PDS  -\n         TM    AREA+38,X'02'       TEST FOR 'DSORG=PO' IN FORMAT 1\n         BZ    ERROR4              NOT A PDS - BRANCH\n         SPACE 1\n*        OPEN THE DCBS FOR THE DIRECTORY AND THE MEMBERS  -\n         OPEN  (DIRDCB,,MEMDCB)    ISSUE THE OPEN\n         TM    DIRDCB+48,X'10'     DID THE DIRECTORY DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         TM    MEMDCB+48,X'10'     DID THE MEMBER DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         SPACE 1\n*        GET A BUFFER TO READ THE MEMBERS INTO  -\n         MVC   BUFFLEN,MEMDCB+62   GET BLOCKSIZE FROM THE DCB\n         L     R0,BUFFER           LENGTH + SP I.D. FOR GETMAIN\n         GETMAIN R,LV=(0)          ISSUE GETMAIN\n         ST    R1,DECB+12          PUT POINTER TO BUFFER IN DECB\n         SPACE 1\n*        INITIALISE  THE BUFFER TO ZEROS (EASIER DEBUGGING)  -\n         LH    R2,BUFFLEN          GET LENGTH OF THE BUFFER\nZEROLOOP MVI   0(R1),0             MOVE A ZERO INTO THE BUFFER\n         LA    R1,1(,R1)           INDEX THROUGH THE BUFFER\n         BCT   R2,ZEROLOOP         ZERO THE ENTIRE BUFFER\n         SPACE 1\n         OPEN  (SYSPRINT,(OUTPUT)) OPEN SYSPRINT\n         TM    SYSPRINT+48,X'10'   DID IT OPEN O.K.  ?\n         BZ    ERROR6              NO - BRANCH\n         SPACE 1\n*        GET TIME AND DATE  -\n         TIME  DEC\n         ST    R0,TIME             SAVE TIME\n         ST    R1,DATE             SAVE DATE\n         MVO   TIM,TIME(2)         SAVE TIME\n         SPACE 1\n*        GET JOBNAME OF JOB, AND SAVE IT  -\n         EXTRACT FIELD1,FIELDS=(TIOT)\n         L     R1,FIELD1           POINT TO TIOT\n         MVC   JNAME,0(R1)         SAVE JOBNAME\n         B     GET                 GET THE FIRST PDS DIRECTORY BLOCK\n         SPACE 2\n*\n*        GET NEXT MEMBER IN THE PDS  -\n*\n*        FIRST  LOOK FOR A MEMBER IN THE CURRENT DIRECTORY BLOCK -\nEODAD    EQU   *\nLOOPDS1  L     R2,DIRPOINT         POINT TO THE NEXT MEMBER\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            LENGTH IS 5 BITS\n         SLL   R3,1                X 2 BECAUSE LENGTH IN HALF-WORDS\n         LA    R3,12(,R3)          ADD LENGTH OF MEMBER NAME + TTRC\n         AR    R3,R2               POINT TO NEXT MEMBER\n         SPACE 1\n*        FIND  THE END OF THE DIRECTORY BLOCK  -\n         LA    R4,DIRBLOCK         POINT TO THE CURRENT DIRECTORY BLK\n         LH    R5,0(,R4)           GET LENGTH USED\n         AR    R5,R4               POINT TO END OF THE BLOCK\n         CR    R5,R3               HAS THIS BLOCK BEEN EXAUSTED ?\n         BH    GOTNEXT             NO - BRANCH\n         SPACE 1\n*        READ THE NEXT DIRECTORY BLOCK  -\nGET      GET   DIRDCB,DIRBLOCK     READ THE NEXT DIRECTORY BLOCK\n         LA    R3,DIRBLOCK+2       POINT TO THE FIRST MEMBER IN BLOCK\nGOTNEXT  ST    R3,DIRPOINT         SAVE POINTER TO NEXT MEMBER\n         SPACE 1\n         XC    CMREC,CMREC         # OF RECORDS READ FOR THIS MEMBER\n         SPACE 1\n*        TEST TO SEE IF WE HAVE GOT TO THE END OF THE PDS  -\n         CLC   0(8,R3),LASTMEM     LOOK FOR A MEMBER NAME OF FOXES\n         BE    ENDPDS              GOT TO END - BRANCH\n         SPACE 1\n*        COUNT # OF MEMBERS READ  -\n         L     R1,CPMEM            GET # OF MEMBERS READ\n         AL    R1,=F'1'            INCREMENT BY 1\n         ST    R1,CPMEM            AND SAVE IT\n         SPACE 2\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         MVC   TTRZ(3),8(R2)       SAVE TTR OF MEMBER\n         POINT MEMDCB,TTRZ         POINT TO THIS MEMBER\n         SPACE 1\n*\n*        TEST FOR ALIAS  -\n*\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         TM    11(R2),X'80'        IS THIS ENTRY AN ALIAS  ?\n*        PROCESS ALIAS THE SAME AS OTHER MEMBERS  -\n         SPACE 2\n*        DETERMINE IF THE MEMBER WAS CREATED BY THE LINKAGE-EDITOR  -\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            -\n         C     R3,=F'11'           MUST BE AT LEAST 11 HALF-WORDS\n         BL    LOOPDS1             IT WAS NOT LINKED - BRANCH\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ THE MEMBER SEQUENTIALLY, EXTRACTING INFORMATION         *\n*        AND WRITING IT TO THE OUTPUT FILE.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETLOOP  EQU   *\n         L     R6,DECB+12          POINT TO INPUT AREA\n         READ  DECB,SF,MF=E        READ THE NEXT RECORD\n         CHECK DECB\n         SPACE 1\n*        INCREMENT COUNT OF # OF RECORDS READ BY 1  -\n         L     R1,CMREC            COUNTS # OF INPUT RECORDS\n         AL    R1,=F'1'            INCREMENT\n         ST    R1,CMREC            AND SAVE\n         SPACE 1\n         L     R1,CPREC            COUNTS # OF READS FOR THIS PDS\n         AL    R1,=F'1'            BUMP BY 1\n         ST    R1,CPREC            AND SAVE\n         SPACE 3\n*\n*        LOOK AT RECORD TYPE, PROCES ACORDINGLY  -\n*\n         TM    0(R6),1             DOES THIS RECORD PRECEED A TEXT REC.\n         BO    EODAD               YES - BRANCH ( WE ARE DONE )\n         SPACE 1\n         CLI   0(R6),X'20'         IS IT A CESD RECORD  ?\n         BE    CESD                YES - BRANCH\n         B     GETLOOP             GO GET ANOTHER RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE CESD TYPE INPUT RECORD                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCESD     LA    R3,8(,R6)           POINT TO 1ST ESD ENTRY\n         LH    R4,6(,R6)           GET LENGTH OF ESD DATA\n         AR    R4,R3               POINT TO END OF RECORD\n         LH    R5,4(,R6)           GET # OF FIRST ESD ENTRY IN THIS REC\n         SPACE 1\nLOOPESD  CR    R4,R3               HAVE WE GOT TO THE END YET ?\n         BNH   GETLOOP             YES - GO GET ANOTHER INPUT RECORD\n         SPACE 1\n         L     R1,CCSCAN           # OF CSECTS SCANNED\n         AL    R1,=F'1'            INCREMENT BY 1\n         ST    R1,CCSCAN           AND SAVE IT\n         SPACE 1\n         CLC   0(8,R3),CNAME       IS THIS CSECT THE NAME WE WANT ?\n         BE    BUILD               YES - BRANCH\n         SPACE 1\nLOOPESD2 LA    R3,16(,R3)          BUMP TO NEXT ESD ENTRY\n         AL    R5,=F'1'            KEEP COUNT OF ESD ENTRY #\n         B     LOOPESD             AND LOOK AT IT\n         SPACE 2\n         EJECT\n*\n*        BUILD A PRINT LINE  -\n*\nBUILD    LA    R7,LINE             R7 WILL POINT TO DETAIL PRINT LINE\n         USING DETLINE,R7          -\n         MVI   LINE,C' '           BLANK THE PRINT LINE\n         MVC   LINE+1(131),LINE    -\n         SPACE 1\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         SPACE 1\n*        COUNT # OF HITS FOUND  -\n         L     R1,CCHIT            GET # OF HITS\n         AL    R1,=F'1'            INCREMEMNT BY 1\n         ST    R1,CCHIT            AND SAVE IT\n         SPACE 1\n*        ID/LENGTH  -\n         UNPK  DWA(7),13(4,R3)\n         MVC   DETIDL,DWA\n         TR    DETIDL,TABLE1\n         SPACE 1\n*        SEGMENT #  -\n         UNPK  DWA(3),12(2,R3)\n         MVC   DETSEGN,DWA\n         TR    DETSEGN,TABLE1\n         SPACE 1\n*        ADDRESS  -\n         UNPK  DWA(7),9(4,R3)\n         MVC   DETADDR,DWA\n         TR    DETADDR,TABLE1\n         SPACE 1\n*        TYPE  IN HEX  -\n         UNPK  DWA(3),8(2,R3)\n         MVC   DETTYPC,DWA\n         TR    DETTYPC,TABLE1\n*        TYPE   -\n         LA    R15,TYPTABL         POINT TO TABLE END\n         LA    R1,TYPTAB           POINT TO TABLE\n         MVC   DWA(1),8(R3)        GET SEGMENT TYPE\n         NI    DWA,X'0F'\nNEXTYPE  CLC   0(1,R1),DWA         TRY TO MATCH WITH A TABLE ENTRY\n         BE    GOTYPE              GOT A HIT - BRANCH\n         CR    R1,R15              IS THIS THE  END OF THE TABLE  ?\n         BNL   NOTYPE              YES - BRANCH\n         LA    R1,3(,R1)           INDEX ALONG THE TABLE\n         B     NEXTYPE             AND TRY NEXT ENTRY\nGOTYPE   MVC   DETTYP,1(R1)        MOVE TYPE TO PRINT LINE\n         SPACE 1\n*        NAME   -\nNOTYPE   MVC   DETNAME,0(R3)       MODULE NAME\n         SPACE 1\n*        MODULE ENTRY POINT  -\n         UNPK  DWA(7),27(4,R2)\n         MVC   DETEP,DWA\n         TR    DETEP,TABLE1\n         SPACE 1\n*        MODULE SIZE  -\n         UNPK  DWA(7),22(4,R2)\n         MVC   DETSIZE,DWA\n         TR    DETSIZE,TABLE1\n         SPACE 1\n*        MODULE ATTRIBUTES  -\n         UNPK  DWA(5),20(3,R2)\n         MVC   DETATTR,DWA\n         TR    DETATTR,TABLE1\n         SPACE 1\n*        TTRC  -\n         UNPK  DWA(9),8(5,R2)\n         MVC   DETTTRC,DWA\n         TR    DETTTRC,TABLE1\n         SPACE 1\n*        MEMBER NAME  -\n         MVC   DETMEM,0(R2)\n         SPACE 2\n         BAL   R9,WRITE            PUT A LINE TO THE PRINTER\n         B     LOOPESD2\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WRITE A LINE TO THE PRINTER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nWRITE    ST    R9,SAVE9\n*\n*        TEST  FOR HEADINGS REQUIRED  -\n*\n         CP    LINENO,MAXLINE      IS IT BOTTOM OF PAGE YET  ?\n         BL    NOHEAD              NO - BRANCH\n         SPACE 1\n         ZAP   LINENO,=P'0'        RESET LINE COUNTER\n         AP    PAGE,=P'1'          INCREMENT PAGE #\n         SPACE 1\n         MVI   HCNTL,X'8B'         SKIP TO 01\n         MVI   HLINE,C' '          BLANK HEADING PRINT LINE\n         MVC   HLINE+1(131),HLINE  -\n         LA    R2,HCNTL            POINT TO PRINT LINE\n         BAL   R9,PRINT            GO PRINT\n         SPACE 1\n         MVC   HLINE+110(6),PAT02\n         ED    HLINE+110(6),PAGE   EDIT PAGE #\n         MVC   HLINE+106(4),=C'PAGE'\n         MVC   HLINE+90(7),PAT01\n         ED    HLINE+90(7),DATE+1  EDIT DATE  YY.DDD\n         MVI   HLINE+90,X'40'      STUFF FIRST BYTE W/BLANK   SBG 03/00\n         MVC   HLINE+83(5),=C'DATE:'\n         MVC   HLINE+30(L'HEAD01),HEAD01\n         MVC   HLINE(8),JNAME\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE+90(7),PAT03\n         ED    HLINE+90(7),TIM     EDIT TIME  HH.MM\n         MVC   HLINE+83(5),=C'TIME:'\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\n*        PUT DSNAME = AND VOLSER =  -\n         LA    R1,JFCB             POINT TO JFCB\n         MVC   HLINE+25(44),0(R1)  MOVE DSNAME\n         MVC   HLINE+16(8),=C'DSNAME ='\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         LA    R1,JFCB             POINT TO JFCB\n         MVC   HLINE+25(6),118(R1) MOVE VOLSER\n         MVC   HLINE+16(8),=C'VOLUME ='\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD02\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD03\n         MVI   HCNTL,X'09'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 1\n         MVC   HLINE(132),HEAD04\n         MVI   HCNTL,X'19'\n         LA    R2,HCNTL\n         BAL   R9,PRINT\n         SPACE 2\nNOHEAD   AP    LINENO,=P'1'        INCREMENT LINE #\n         LA    R2,CNTL             POINT TO DETAIL PRINT LINE\n         MVI   CNTL,X'09'\n         BAL   R9,PRINT            PRINT IT\n         L     R9,SAVE9            RESTORE RETUTN REGISTER\n         BR    R9                  RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF THE PDS - CLEAN UP AND EOJ                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        CLOSE DCBS FOR THE PDS  -\nENDPDS   CLOSE (MEMDCB,,DIRDCB)    ISSUE CLOSE\n         SPACE 1\n*        FREE THE BUFFER USED TO READ THE MEMBERS  -\n         L     R0,BUFFER           GET LENGTH AND S.P.\n         L     R1,DECB+12          POINT TO BUFFER\n         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN\n         SPACE 1\n*        FREE  THE BUFFERS USED BY THE DIRECTORY DCB  -\n         FREEPOOL DIRDCB\n         SPACE 1\n*        ISSUE THE END MSG. INDICATING # OF HITS  -\n         MVC   ENDMSGN,CNAME       PUT NAME OF SEARCH FIELD IN MSG\n         L     R1,CCHIT            GET # OF HITS\n         CVD   R1,DWA              CVD\n         ED    ENDMSGP,DWA+4\n         MVI   CNTL,X'1B'          SPACE 3 IMMED.\n         BAL   R9,WRITE\n         MVI   CNTL,X'1B'          SPACE 3 IMMED.\n         BAL   R9,WRITE\n         MVI   CNTL,X'09'\n         MVC   LINE+10(ENDMSGL),ENDMSG\n         BAL   R9,WRITE\n         SPACE 1\n         LA    R1,ENDMSGW\n         WTO   MF=(E,(1))\n         SPACE 2\n         CLOSE (SYSPRINT)          CLOSE SYSPRINT\n         SPACE 1\n         FREEPOOL SYSPRINT         FREE THE SYSPRINT BUFFER POOL\n         SPACE 1\nGOBACK   L     R13,4(,R13)\n         RETURN (14,12),T,RC=(15)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT A LINE SUBROUTINE                                      *\n*                                                                     *\n***********************************************************************\nPRINT    LR    R0,R2               POINT TO LINE TO PRINT\n         PUT   SYSPRINT            PUT IT\n         MVI   0(R2),C' '          BLANK OUT THE LINE WE PRINTED\n         MVC   1(131,R2),0(R2)     -\n         BR    R9                  RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR CONDITIONS                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        NO PARMS PASSED ON ENTRY  -\nERROR1   EQU   *\n         LA    R1,WTOMSG1          POINT TO ERROR MESSAGE\n         WTO   MF=(E,(1))          WTO\n         ABEND 1,DUMP              ERROR IN SORT\n         SPACE 1\n*        ERROR IN RDJFCB  -\nERROR2   LA    R2,MEMDCB           POINT TO DCB\n         ABEND 2,DUMP\n         SPACE 1\n*        ERROR IN OBTAIN  -\nERROR3   LA    R2,CAMLIST          POINT TO CAMLST\n         ABEND 3,DUMP\n         SPACE 1\n*        DATASET TO BE PROCESSED IS NOT A PDS  -\nERROR4   LA    R2,AREA             POINT TO FORMAT 1 LABEL\n         ABEND 4,DUMP\n         SPACE 1\n*        CANNOT OPEN PDS DCBS  -\nERROR5   LA    R2,DIRDCB           POINT TO DIRECTORY DCB\n         LA    R3,MEMDCB           POINT TO MEMBER DCB\n         ABEND 5,DUMP\n         SPACE 1\n*        UNABLE TO OPEN SYSPRINT  -\nERROR6   LA    R2,SYSPRINT         POINT TO SYSPRINT DCB\n         ABEND 6,DUMP              ABEND\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSAVE     DC    9D'0'               REGISTER SAVE AREA\nWORK     DC    D'0'                WORK AREA\nSAVE9    DC    F'0'                REG. 9 SAVE AREA\n         SPACE 1\n*        ERROR MESSAGE ISSUED IF NO PARMS PASSED ON INPUT  -\nWTOMSG1  DC    0F'0',Y(WTOMSG1E-*),H'0'\n         DC    C'INPUT PARMS MISSING OR INVALID'\nWTOMSG1E EQU   *\n         SPACE 1\nMASK     DC    F'63'               MASK FOR 6 BITS   2 - 7\nMASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7\n         DC    0H'0'\nMOVEPARM MVC   CNAME(0),2(R2)      MOVE PARM FIELD\nCNAME    DC    CL8' '              NAME PASSED IN PARM FIELD\n         SPACE 1\n*        FIELDS RELATING TO THE PDS  -\nTTRZ     DC    F'0'                TTR OF MEMBER I AM PROCESSING\n         READ  DECB,SF,MEMDCB,0,'S',MF=L                       DECB\n         SPACE 1\nBUFFER   DC    0F'0',X'0200'       LENGTH + SP FOR GETMAIN\nBUFFLEN  DC    H'0'                -\n         SPACE 1\nCPMEM    DC    F'0'                # OF MEMBERS PROCESSED FROM PDS\nCMREC    DC    F'0'                # OF RECORDS READ FOR THIS MEMBER\nCPREC    DC    F'0'                # OF READS FOR THE PDS\nCCSCAN   DC    F'0'                # OF CSECTS SCANNED\nCCHIT    DC    F'0'                # OF CSECTS WE GOT A HIT ON\n         SPACE 1\nDIRPOINT DC    F'0'                POINTER TO CURRENT MEMBER\nLASTMEM  DC    8X'FF'              NAME OF LAST MEMBER IN PDS\nEXLST    DC    0F'0',X'87',AL3(JFCB)\n         SPACE 1\n*        TABLE  USED TO CONVERT ESD TYPE TO PRINTABLE TYPE FORMAT  -\nTYPTAB   DC    X'00',C'SD'         SECTION DEFINITION\n         DC    X'02',C'ER'         EXTERNAL REFERENCE\n         DC    X'03',C'LR'         LABEL REFERENCE\n         DC    X'04',C'PC'         PRIVATE CODE\n         DC    X'05',C'CM'         COMMON AREA\n         DC    X'06',C'PR'         PSEUDO REGISTER\n         DC    X'07',C'NL'         NULL\nTYPTABL  DC    X'0A',C'WX'         WEAK EXTERNAL REFERENCE\n         SPACE 1\n*        TRANSLATE TABLE TO CONVERT TO PRINTABLE HEX  -\n         ORG   *-240\nTABLE1   EQU   *\n         ORG\n         DC    C'0123456789ABCDEF'\n         SPACE 1\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         SPACE 1\nCAMLIST  CAMLST SEARCH,JFCB,JFCB+118,AREA\n         SPACE 1\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nAREA     DC    0D'0',148X'00'      AREA TO CONTAIN THE FORMAT 1 LABEL\nDIRBLOCK DC    32D'0'              CURRENT DIRECTORY BLOCK\n         SPACE 1\nSAVE35   DC    9D'0'               REGISTER SAVE AREA\nJNAME    DC    CL8' '              JOBNAME OF THIS JOB\nFIELD1   DC    F'0'                POINTER TO TIOT\n         SPACE\n*        DETAIL PRINT LINE  _\nCNTL     DC    X'09'\nLINE     DC    132C' '\n         SPACE 1\n*        HEADING PRINT LINE  -\nHCNTL    DC    X'8B'\nHLINE    DC    132C' '\n         SPACE 1\nPAT01    DC    XL7'F021204B202020'                            SBG 03/00\nPAT02    DC    XL6'402020202120'\nPAT03    DC    XL7'402120204B2020'\n         SPACE 1\nPAGE     DC    PL3'0'              CURRENT PAGE #\nLINENO   DC    PL2'99'             CURRENT LINE #\nMAXLINE  DC    PL2'45'             MAX # OF LINES/PAGE\n         SPACE 1\nDWA      DC    2D'0'               WORK SPACE\nTIME     DC    F'0'\nTIM      DC    X'00000F'\nDATE     DC    F'0'\n         SPACE 1\nHEAD01   DC    C'T W A - PDS - CSECT SEARCH REPORT'\nHEAD02   DC    CL132'         MODULE            LINK           ENTRY   X\n                      CSECT                      SG   I.D./'\nHEAD03   DC    CL132'          NAME      TTRC   ATTR  LENGTH   POINT   X\n                      FOUND     TYPE      ADDR.  NO  LENGTH'\nHEAD04   DC    CL132'       --------  --------  ----  ------  ------   X\n                    --------  -------    ------  --  ------'\n         SPACE 1\n*        END MESSAGE - SHOWS NUMBER OF HITS  -\nENDMSGW  DC    0F'0',Y(ENDMSGE-ENDMSGW),H'0'\nENDMSG   DC    C'TOTAL OCCURRENCES OF CSECT NAME '  SPELLING  SBG 03/00\nENDMSGN  DC    CL8'XXXXXXXX'\n         DC    C' IS'\nENDMSGP  DC    X'4020202020202120'\nENDMSGE  EQU   *\nENDMSGL  EQU   ENDMSGE-ENDMSG\n         SPACE 1\n*        D C B S  -\n         PRINT NOGEN\n*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -\nMEMDCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST,     X\n               EODAD=EODAD\n         SPACE 1\n*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -\nDIRDCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,    X\n               LRECL=256,BUFNO=100\n         SPACE 1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBM,  X\n               BLKSIZE=1995\n         PRINT GEN\n         DC    4D'0'\n***********************************************************************\n*                                                                     *\n*        FORMAT OF THE DETAIL PRINT LINE                              *\n*                                                                     *\n***********************************************************************\nDETLINE  DSECT\n         DS    CL7 -\nDETMEM   DS    CL8 -               MEMBER NAME\n         DS    CL2 -\nDETTTRC  DS    XL8 -               TTRC\n         DS    CL2 -\nDETATTR  DS    XL4 -               MODULE ATTRIBUTES\n         DS    CL2 -\nDETSIZE  DS    CL6 -               MODULE SIZE\n         DS    CL2 -\nDETEP    DS    CL6 -               MODULE ENTRY POINT\n         DS    CL8 -\nDETNAME  DS    CL8 -               NAME OF SEARCH CSECT\n         DS    CL2 -\nDETTYP   DS    CL2 -               TYPE OF ESD ENTRY\n         DS    CL3 -\nDETTYPC  DS    XL2 -               TYPE OF ESD ENTRY - IN HEX\n         DS    CL4 -\nDETADDR  DS    XL6 -               ADDRESS FIELD\n         DS    CL2 -\nDETSEGN  DS    XL2 -               SEGMENT #\n         DS    CL2 -\nDETIDL   DS    XL6 -               ID/LENGTH FIELD\n         END   WHEREUSD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XREFGJCL": {"ttr": 3332, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x009\\x009\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "TWA"}, "text": "//S815Z JOB 1,REX,REGION=512K,PRTY=9,NOTIFY=S815\n//*MAIN ORG=LV2\n//*FORMAT PR,DDNAME=,DEST=01E\n//S1 EXEC PGM=SFXREF1,                                    *\n// ACCT='3200001020T00008484039554SF110B'\n//SYSUT1  DD  DSN=SYS1.PRODA,DISP=SHR                     *\n//*       THIS IS THE PDS TO SEARCH                       *\n//SYSUT2  DD  DSN=&&ES1,DISP=(,PASS),                     *\n//        UNIT=SYSDA,SPACE=(CYL,(5,5))                   *\n//*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2   *\n//STEPLIB  DD  DSN=SYPP.PGMLIB,DISP=SHR\n//SB EXEC PGM=SFXREF1,                                    *\n// ACCT='3200001020T00008484039554SF110B'\n//SYSUT1  DD  DSN=SYS1.PRODB,DISP=SHR                     *\n//*       THIS IS THE PDS TO SEARCH                       *\n//SYSUT2  DD  DSN=&&ES2,DISP=(,PASS),                     *\n//        UNIT=SYSDA,SPACE=(CYL,(5,5))                   *\n//*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2   *\n//STEPLIB  DD  DSN=SYPP.PGMLIB,DISP=SHR\n//SC EXEC PGM=SFXREF1,                                    *\n// ACCT='3200001020T00008484039554SF110B'\n//SYSUT1  DD  DSN=SYS1.PRODSUB,DISP=SHR                   *\n//*       THIS IS THE PDS TO SEARCH                       *\n//SYSUT2  DD  DSN=&&ES3,DISP=(,PASS),                     *\n//        UNIT=SYSDA,SPACE=(CYL,(5,5))                   *\n//*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2   *\n//STEPLIB  DD  DSN=SYPP.PGMLIB,DISP=SHR\n//SD EXEC PGM=SFXREF1,                                    *\n// ACCT='3200001020T00008484039554SF110B'\n//SYSUT1  DD  DSN=IMSPRD.PGMLIB,DISP=SHR                  *\n//*       THIS IS THE PDS TO SEARCH                       *\n//SYSUT2  DD  DSN=&&ES4,DISP=(,PASS),                     *\n//        UNIT=SYSDA,SPACE=(CYL,(5,5))                   *\n//*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2   *\n//STEPLIB  DD  DSN=SYPP.PGMLIB,DISP=SHR\n//SE EXEC PGM=SFXREF1,                                    *\n// ACCT='3200001020T00008484039554SF110B'\n//SYSUT1  DD  DSN=IMSTST.PGMLIB,DISP=SHR                  *\n//*       THIS IS THE PDS TO SEARCH                       *\n//SYSUT2  DD  DSN=&&ES5,DISP=(,PASS),                     *\n//        UNIT=SYSDA,SPACE=(CYL,(5,5))                   *\n//*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2   *\n//STEPLIB  DD  DSN=SYPP.PGMLIB,DISP=SHR\n//S2 EXEC PGM=SFXREF2,                                    *\n// ACCT='3200001020T00008484039554SF110B'\n//SYSPRINT DD  SYSOUT=A,                                  *\n//         DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330)         *\n//*        THIS IS THE FINAL REPORT                       *\n//ESDIN   DD  DSN=&&ES1,DISP=(OLD,DELETE)                 *\n//        DD  DSN=&&ES2,DISP=(OLD,DELETE)                 *\n//        DD  DSN=&&ES3,DISP=(OLD,DELETE)                 *\n//        DD  DSN=&&ES4,DISP=(OLD,DELETE)                 *\n//        DD  DSN=&&ES5,DISP=(OLD,DELETE)                 *\n//*         INPUT TO REPORTING PROCESS                    *\n//SYSOUT  DD  SYSOUT=A  FOR SORT/MERGE                    *\n//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,(1)) FOR SORT       *\n//STEPLIB  DD  DSN=SYPP.PGMLIB,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XREFJCL": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x00\\x15\\x00\\x15\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "TWA"}, "text": "//S815X JOB 1,REX,REGION=512K,PRTY=9,NOTIFY=S815,MSGCLASS=M\n//*MAIN ORG=LV2\n//*FORMAT PR,DDNAME=,DEST=01E\n//S1 EXEC PGM=SFXREF1,                                    *\n// ACCT='3200001020T00008484039554SF110B'\n//SYSUT1  DD  DSN=IMSPRD.PGMLIB,DISP=SHR                 *\n//*       THIS IS THE PDS TO SEARCH                       *\n//SYSUT2  DD  DSN=&&ESD,DISP=(,PASS),                     *\n//        UNIT=SYSVIO,SPACE=(CYL,(5,5))                   *\n//*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2   *\n//STEPLIB  DD  DSN=SYPP.PGMLIB,DISP=SHR\n//S2 EXEC PGM=SFXREF2,                                    *\n// ACCT='3200001020T00008484039554SF110B'\n//SYSPRINT DD  SYSOUT=M,                                  *\n//         DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330)         *\n//*        THIS IS THE FINAL REPORT                       *\n//ESDIN   DD  DSN=&&ESD,DISP=(OLD,DELETE)                 *\n//*         INPUT TO REPORTING PROCESS                    *\n//SYSOUT  DD  SYSOUT=M  FOR SORT/MERGE                    *\n//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,(1)) FOR SORT       *\n//STEPLIB  DD  DSN=SYPP.PGMLIB,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XREF1": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x01Z\\x01Z\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 346, "newlines": 346, "modlines": 0, "user": "TWA"}, "text": "XREF     TITLE 'TWA EXTERNAL SYMBOL CROSSREF ROUTINE'\n***********************************************************************\n*                                                                     *\n*        XREF1                                                        *\n*        --------                                                     *\n*                                                                     *\n*        SCANNS A PDS FOR ALL EXTERNAL SYMBOLS                        *\n*        ( MUST CONTAIN MEMBERS CREATED BY THE LINKAGE EDITOR )       *\n*                                                                     *\n*        PREPARES A FILE TO GENERATE AN EXTERNAL SYMBOL CROSS-        *\n*        REFERENCE FOR THE ENTIRE DATA SET (OR DATA SETS IF           *\n*        MULTIPLE FILES ARE COMBINED INTO A SINGLE REPORT RUN)        *\n*        THE SYSUT2 OUTPUT FILE FROM THIS PROGRAM IS FED INTO         *\n*        THE REPORT PROGRAM /XREF2/ TO PRODUCE THE FINAL REPORT.      *\n*                                                                     *\n*        REX WIDMER        PHONE 816-464-6671                         *\n*                                                                     *\n*        TWA  KANSAS CITY ADMINISTRATIVE CENTER                       *\n*                                                                     *\n*        JANUARY, 1979                                                *\n*                                                                     *\n*                                                                     *\n*        THIS PROGRAM IS DISTRIBUTED WITHOUT CHARGE TO MEMBERS        *\n*        OF THE GUIDE COBOL GROUP ON AN AS IS, WHERE IS BASIS.        *\n*        IT IS DISTRIBUTED WITHOUT WARRANTY OF ANY KIND, EITHER       *\n*        EXPRESSED OR IMPLIED.  IT IS DISTRIBUTED IN HOPE THAT        *\n*        IT MAY HELP OTHER MEMBERS OF THE GROUP AVOID RE-INVENTING    *\n*        AT LEAST A FEW WHEELS.                                       *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SAMPLE JCL FOR ENTIRE STREAM                                 *\n*                                                                     *\n*           //S1 EXEC PGM=XREF1                                       *\n*           //SYSUT1  DD  DSN=SYPP.PGMLIB,DISP=SHR                    *\n*           //*       THIS IS THE PDS TO SEARCH                       *\n*           //SYSUT2  DD  DSN=&&ESD,DISP=(,PASS),                     *\n*           //        UNIT=SYSVIO,SPACE=(CYL,(5,5))                   *\n*           //*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2   *\n*           //S2 EXEC PGM=XREF2                                       *\n*           //SYSPRINT DD  SYSOUT=A,                                  *\n*           //         DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330)         *\n*           //*        THIS IS THE FINAL REPORT                       *\n*           //ESDIN   DD  DSN=&&ESD,DISP=(OLD,DELETE)                 *\n*           //*         INPUT TO REPORTING PROCESS                    *\n*           //SYSOUT  DD  SYSOUT=A  FOR SORT/MERGE                    *\n*           //SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,(1)) FOR SORT       *\n*                                                                     *\n*        DD-CARD REQUIREMENTS                                         *\n*                                                                     *\n*           SYSUT1           PDS TO SCAN FOR EXTERNAL SYMBOLS         *\n*           SYSUT2           OUTPUT FILE NAME/MODULE/TYPE/DSN         *\n*                                                                     *\n***********************************************************************\n         EJECT\nXREF1    CENTER TYPE=C\n         SYMREGS\n         EJECT\n         OPEN  (SYSUT2,(OUTPUT))   OPEN OUTPUT FILE\n         TM    SYSUT2+48,X'10'     DID IT OPEN O.K.   ?\n         BO    OKSYSUT2             YES, CONTINUE\n         ABEND 99                   ELSE QUIT\nOKSYSUT2 EQU   *\n         SPACE 1\n*        READ THE JFCB TO PREPARE FOR AN OBTAIN  -\n         RDJFCB (MEMDCB)           READ THE JFCB FOR THE PDS\n         LTR   R15,R15             DID IT DO THAT O.K.  ?\n         BNZ   ERROR2              NO - BRANCH\n         SPACE 1\n*        ISSUE  AN OBTAIN, TO SEE IF THE PDS EXISTS -\n         OBTAIN CAMLIST            ISSUE OBTAIN\n         LTR   R15,R15             DID THE OBTAIN OBTAIN ANYTHING ?\n         BNZ   ERROR3              NO - BRANCH\n         SPACE 1\n*        TEST TO ENSURE THAT THIS DATASET IS A PDS  -\n         TM    AREA+38,X'02'       TEST FOR 'DSORG=PO' IN FORMAT 1\n         BZ    ERROR4              NOT A PDS - BRANCH\n         SPACE 1\n*        OPEN THE DCBS FOR THE DIRECTORY AND THE MEMBERS  -\n         OPEN  (DIRDCB,,MEMDCB)    ISSUE THE OPEN\n         TM    DIRDCB+48,X'10'     DID THE DIRECTORY DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         TM    MEMDCB+48,X'10'     DID THE MEMBER DCB OPEN O.K. ?\n         BZ    ERROR5              NO - BRANCH\n         SPACE 1\n*        GET A BUFFER TO READ THE MEMBERS INTO  -\n         MVC   BUFFLEN,MEMDCB+62   GET BLOCKSIZE FROM THE DCB\n         L     R0,BUFFER           LENGTH + SP I.D. FOR GETMAIN\n         GETMAIN R,LV=(0)          ISSUE GETMAIN\n         ST    R1,DECB+12          PUT POINTER TO BUFFER IN DECB\n         SPACE 1\n*        INITIALISE  THE BUFFER TO ZEROS (EASIER DEBUGGING)  -\n         LH    R2,BUFFLEN          GET LENGTH OF THE BUFFER\nZEROLOOP MVI   0(R1),0             MOVE A ZERO INTO THE BUFFER\n         LA    R1,1(,R1)           INDEX THROUGH THE BUFFER\n         BCT   R2,ZEROLOOP         ZERO THE ENTIRE BUFFER\n         B     GET                 NOW START OUT BY READING DIRECTORY\n*\n*        GET NEXT MEMBER IN THE PDS  -\n*\n*        FIRST  LOOK FOR A MEMBER IN THE CURRENT DIRECTORY BLOCK -\nEODAD    EQU   *\nLOOPDS1  L     R2,DIRPOINT         POINT TO THE NEXT MEMBER\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            LENGTH IS 5 BITS\n         SLL   R3,1                X 2 BECAUSE LENGTH IN HALF-WORDS\n         LA    R3,12(,R3)          ADD LENGTH OF MEMBER NAME + TTRC\n         AR    R3,R2               POINT TO NEXT MEMBER\n         SPACE 1\n*        FIND  THE END OF THE DIRECTORY BLOCK  -\n         LA    R4,DIRBLOCK         POINT TO THE CURRENT DIRECTORY BLK\n         LH    R5,0(,R4)           GET LENGTH USED\n         AR    R5,R4               POINT TO END OF THE BLOCK\n         CR    R5,R3               HAS THIS BLOCK BEEN EXAUSTED ?\n         BH    GOTNEXT             NO - BRANCH\n         SPACE 1\n*        READ THE NEXT DIRECTORY BLOCK  -\nGET      GET   DIRDCB,DIRBLOCK     READ THE NEXT DIRECTORY BLOCK\n         LA    R3,DIRBLOCK+2       POINT TO THE FIRST MEMBER IN BLOCK\nGOTNEXT  ST    R3,DIRPOINT         SAVE POINTER TO NEXT MEMBER\n         SPACE 1\n         XC    CMREC,CMREC         # OF RECORDS READ FOR THIS MEMBER\n         SPACE 1\n*        TEST TO SEE IF WE HAVE GOT TO THE END OF THE PDS  -\n         CLC   0(8,R3),LASTMEM     LOOK FOR A MEMBER NAME OF FOXES\n         BE    ENDPDS              GOT TO END - BRANCH\n         SPACE 1\n*        COUNT # OF MEMBERS READ  -\n         L     R1,CPMEM            GET # OF MEMBERS READ\n         AL    R1,=F'1'            INCREMENT BY 1\n         ST    R1,CPMEM            AND SAVE IT\n         SPACE 2\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         MVC   TTRZ(3),8(R2)       SAVE TTR OF MEMBER\n         POINT MEMDCB,TTRZ         POINT TO THIS MEMBER\n         SPACE 1\n*\n*        TEST FOR ALIAS  -\n*\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n         TM    11(R2),X'80'        IS THIS ENTRY AN ALIAS  ?\n*        PROCESS ALIAS THE SAME AS OTHER MEMBERS  -\n         SPACE 2\n*        DETERMINE IF THE MEMBER WAS CREATED BY THE LINKAGE-EDITOR  -\n         IC    R3,11(,R2)          GET LENGTH OF USER DATA\n         N     R3,MASK2            -\n         C     R3,=F'11'           MUST BE AT LEAST 11 HALF-WORDS\n         BL    LOOPDS1             IT WAS NOT LINKED - BRANCH\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ THE MEMBER SEQUENTIALLY, EXTRACTING INFORMATION         *\n*        AND WRITING IT TO THE OUTPUT FILE.                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGETLOOP  EQU   *\n         L     R6,DECB+12          POINT TO INPUT AREA\n         READ  DECB,SF,MF=E        READ THE NEXT RECORD\n         CHECK DECB\n         SPACE 1\n*        INCREMENT COUNT OF # OF RECORDS READ BY 1  -\n         L     R1,CMREC            COUNTS # OF INPUT RECORDS\n         AL    R1,=F'1'            INCREMENT\n         ST    R1,CMREC            AND SAVE\n         SPACE 1\n         L     R1,CPREC            COUNTS # OF READS FOR THIS PDS\n         AL    R1,=F'1'            BUMP BY 1\n         ST    R1,CPREC            AND SAVE\n         SPACE 3\n*\n*        LOOK AT RECORD TYPE, PROCES ACORDINGLY  -\n*\n         TM    0(R6),1             DOES THIS RECORD PRECEED A TEXT REC.\n         BO    EODAD               YES - BRANCH ( WE ARE DONE )\n         SPACE 1\n         CLI   0(R6),X'20'         IS IT A CESD RECORD  ?\n         BE    CESD                YES - BRANCH\n         B     GETLOOP             GO GET ANOTHER RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE CESD TYPE INPUT RECORD                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCESD     LA    R3,8(,R6)           POINT TO 1ST ESD ENTRY\n         LH    R4,6(,R6)           GET LENGTH OF ESD DATA\n         AR    R4,R3               POINT TO END OF RECORD\n         LH    R5,4(,R6)           GET # OF FIRST ESD ENTRY IN THIS REC\n         SPACE 1\nLOOPESD  CR    R4,R3               HAVE WE GOT TO THE END YET ?\n         BNH   GETLOOP             YES - GO GET ANOTHER INPUT RECORD\n         SPACE 1\n         L     R1,CCSCAN           # OF CSECTS SCANNED\n         AL    R1,=F'1'            INCREMENT BY 1\n         ST    R1,CCSCAN           AND SAVE IT\n         SPACE 1\n*        R3 NOW POINTS TO THE NAME IN THE RECORD - BUILD OUTPUT RECORD\n*        AND WRITE IT OUT FOR PROCESSING\n         L     R2,DIRPOINT         POINT TO DIRECTORY ENTRY\n*        TYPE   -\n         LA    R15,TYPTABL         POINT TO TABLE END\n         LA    R1,TYPTAB           POINT TO TABLE\n         MVC   DWA(1),8(R3)        GET SEGMENT TYPE\n         NI    DWA,X'0F'\nNEXTYPE  CLC   0(1,R1),DWA         TRY TO MATCH WITH A TABLE ENTRY\n         BE    GOTYPE              GOT A HIT - BRANCH\n         CR    R1,R15              IS THIS THE  END OF THE TABLE  ?\n         BNL   NOTYPE              YES - BRANCH\n         LA    R1,3(,R1)           INDEX ALONG THE TABLE\n         B     NEXTYPE             AND TRY NEXT ENTRY\nGOTYPE   MVC   OUTTYP,1(R1)        MOVE TYPE TO PRINT LINE\n         SPACE 1\n*        NAME   -\nNOTYPE   MVC   OUTNAME,0(R3)       MODULE NAME\n         SPACE 1\n*        MEMBER NAME  -\n         MVC   OUTMEM,0(R2)\n         SPACE 2\n*        PUT DSNAME = AND VOLSER =  -\n         LA    R1,JFCB             POINT TO JFCB\n         MVC   OUTDSN(44),0(R1)  MOVE DSNAME\n         MVC   OUTSER(6),118(R1) MOVE VOLSER\n         SPACE 2\n         PUT   SYSUT2,OUTREC       WRITE OUT CROSSREF RECORD\n         B     LOOPESD2\nLOOPESD2 LA    R3,16(,R3)          BUMP TO NEXT ESD ENTRY\n         AL    R5,=F'1'            KEEP COUNT OF ESD ENTRY #\n         B     LOOPESD             AND LOOK AT IT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF THE PDS - CLEAN UP AND EOJ                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        CLOSE DCBS FOR THE PDS  -\nENDPDS   CLOSE (MEMDCB,,DIRDCB)    ISSUE CLOSE\n         SPACE 1\n*        FREE THE BUFFER USED TO READ THE MEMBERS  -\n         L     R0,BUFFER           GET LENGTH AND S.P.\n         L     R1,DECB+12          POINT TO BUFFER\n         FREEMAIN R,LV=(0),A=(1)   ISSUE FREEMAIN\n         SPACE 1\n*        FREE  THE BUFFERS USED BY THE DIRECTORY DCB  -\n         FREEPOOL DIRDCB\n         SPACE 1\nGOBACK   RETRN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR CONDITIONS                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*        ERROR IN RDJFCB  -\nERROR2   LA    R2,MEMDCB           POINT TO DCB\n         ABEND 2,DUMP\n         SPACE 1\n*        ERROR IN OBTAIN  -\nERROR3   LA    R2,CAMLIST          POINT TO CAMLST\n         ABEND 3,DUMP\n         SPACE 1\n*        DATASET TO BE PROCESSED IS NOT A PDS  -\nERROR4   LA    R2,AREA             POINT TO FORMAT 1 LABEL\n         ABEND 4,DUMP\n         SPACE 1\n*        CANNOT OPEN PDS DCBS  -\nERROR5   LA    R2,DIRDCB           POINT TO DIRECTORY DCB\n         LA    R3,MEMDCB           POINT TO MEMBER DCB\n         ABEND 5,DUMP\n         SPACE 1\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*        C O N S T A N T S                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE 1\nMASK2    DC    F'31'               MASK FOR 5 BITS   3 - 7\n*        FIELDS RELATING TO THE PDS  -\nTTRZ     DC    F'0'                TTR OF MEMBER I AM PROCESSING\n         READ  DECB,SF,MEMDCB,0,'S',MF=L                       DECB\n         SPACE 1\nBUFFER   DC    0F'0',X'0200'       LENGTH + SP FOR GETMAIN\nBUFFLEN  DC    H'0'                -\n         SPACE 1\nCPMEM    DC    F'0'                # OF MEMBERS PROCESSED FROM PDS\nCMREC    DC    F'0'                # OF RECORDS READ FOR THIS MEMBER\nCPREC    DC    F'0'                # OF READS FOR THE PDS\nCCSCAN   DC    F'0'                # OF CSECTS SCANNED\nCCHIT    DC    F'0'                # OF CSECTS WE GOT A HIT ON\n         SPACE 1\nDIRPOINT DC    F'0'                POINTER TO CURRENT MEMBER\nLASTMEM  DC    8X'FF'              NAME OF LAST MEMBER IN PDS\nEXLST    DC    0F'0',X'87',AL3(JFCB)\n         SPACE 1\n*        TABLE  USED TO CONVERT ESD TYPE TO PRINTABLE TYPE FORMAT  -\nTYPTAB   DC    X'00',C'SD'         SECTION DEFINITION\n         DC    X'02',C'ER'         EXTERNAL REFERENCE\n         DC    X'03',C'LR'         LABEL REFERENCE\n         DC    X'04',C'PC'         PRIVATE CODE\n         DC    X'05',C'CM'         COMMON AREA\n         DC    X'06',C'PR'         PSEUDO REGISTER\n         DC    X'07',C'NL'         NULL\nTYPTABL  DC    X'0A',C'WX'         WEAK EXTERNAL REFERENCE\n         SPACE 1\n         DC    0D'0'\n         LTORG\n         DC    0D'0'\n         SPACE 1\nCAMLIST  CAMLST SEARCH,JFCB,JFCB+118,AREA\n         SPACE 1\nJFCB     DC    0D'0',176X'00'      AREA TO READ THE JFCB INTO\nAREA     DC    0D'0',148X'00'      AREA TO CONTAIN THE FORMAT 1 LABEL\nDIRBLOCK DC    32D'0'              CURRENT DIRECTORY BLOCK\n         SPACE 1\nDWA      DC    1D'0'               GENERAL WORK AREA\nJNAME    DC    CL8' '              JOBNAME OF THIS JOB\nFIELD1   DC    F'0'                POINTER TO TIOT\nOUTREC   DC    XL80'00'            OUTPUT RECORD ASSEMBLY AREA\n         ORG   OUTREC\nOUTMEM   DS    CL8                 MEMBER NAME\nOUTDSN   DS    CL44                DATASET NAME\nOUTSER   DS    CL6                 VOL SER OF DSN\nOUTNAME  DS    CL8                 EXTERNAL NAME FOUND\nOUTTYP   DS    CL2                 EBCDIC TYPE OF EXTERNAL SYMBOL\n         ORG\n*        D C B S  -\n         PRINT NOGEN\n*        MEMBER DCB - USED TO READ EACH MEMBER OF THE PDS  -\nMEMDCB   DCB   DDNAME=SYSUT1,DSORG=PO,MACRF=R,RECFM=U,EXLST=EXLST,     X\n               EODAD=EODAD\n         SPACE 1\n*        DIRECTORY DCB - USED TO READ THE DIRECTORY OF THE PDS  -\nDIRDCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GM,RECFM=F,BLKSIZE=256,    X\n               LRECL=256,BUFNO=100\n         SPACE 1\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=80,               X\n               RECFM=FBS,BLKSIZE=2000,BUFNO=5\n         PRINT GEN\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XREF2": {"ttr": 3342, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80\"\\x8f\\x00\\x80\"\\x8f\\x157\\x00\\xfe\\x00\\xfe\\x00\\x00\\xe3\\xe6\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-08-15T00:00:00", "modifydate": "1980-08-15T15:37:00", "lines": 254, "newlines": 254, "modlines": 0, "user": "TWA"}, "text": "    /*     PDS EXTERNAL SYMBOL CROSS-REFERENCE PROCESS - RPT PGM  */\n    /*                                                            */\n    /*     THIS PROGRAM IS BEING DISTRIBUTED WITHOUT CHARGE TO    */\n    /*     MEMBERS OF THE GUIDE COBOL GROUP.  IT IS DISTRIBUTED   */\n    /*     ON AN AS IS, WHERE IS BASIS, WITHOUT WARRANTY OF ANY   */\n    /*     KIND, EITHER EXPRESSED OR IMPLIED.  IT IS HOPED THAT   */\n    /*     THE PROGRAM MAY SAVE THE RECIPIANT SOME WHEEL RE-      */\n    /*     INVENTING...                                           */\n    /*                                                            */\n   XREF2:  PROCEDURE         OPTIONS (MAIN);\n    /*                                                            */\n    /*     ESD     CROSSREFERENCE                                 */\n    /*                                                            */\n    /*     WRITTEN JANUARY, 1979        REX WIDMER                */\n    /*                                                            */\n    /*     TRANS WORLD AIRLINES INC.                              */\n    /*     KANSAS CITY ADMINISTRATIVE CENTER                      */\n    /*     11500 AMBASSADOR DRIVE                                 */\n    /*     KANSAS CITY, MO 64153                                  */\n    /*                                                            */\n    /*     816-464-6671                                           */\n    /*                                                            */\n1   /*                                                            */\n    /*     GENERATES A REPORT DRIVEN BY THE OUTPUT OF PGM XREF1   */\n    /*     OF ALL ESD REFERENCES WITHIN A DATASET OR GROUP OF     */\n    /*     DATASETS.  ORIGINAL INPUT IS A PDS CONTAINING          */\n    /*     LINKEDITOR CREATED LOADMODULES.  OUTPUT IS A LIST OF   */\n    /*     CSECTS AND THE MODULES WHICH CONTAIN THEM.             */\n    /*                                                            */\n    /*     THIS PROGRAM IS DRIVEN BY THE OUTPUT OF PROGRAM        */\n    /*     XREF1, WHICH DOES THE ACTUAL SCAN OF THE PDS'S         */\n    /*                                                            */\n    /*     THIS PROGRAM IS DESIGNED TO BE EXECUTED WITH THE       */\n    /*     PL/I OPTIMIZING COMPILER.  IT SHOULD BE EASILY         */\n    /*     CONVERTED BACK TO THE PL/I (F) COMPILER BY CHANGING    */\n    /*     THE REFERENCES TO THE VARIOUS BUILTIN FUNCTIONS        */\n    /*     SUCH AS PLISRTD BECOMES IHESRTD,                       */\n    /*                                                            */\n    /*     THE PROGRAM DOES NOT USE ANY PL/I SPECIFIC LANGUAGE    */\n    /*     FEATURES, IT COULD EASILY BE CONVERTED TO COBOL,       */\n    /*     BAL, OR WHAT EVER THE IMPLEMENTOR DESIRES.  THE LOGIC  */\n    /*     OF THE PROGRAM IS VERY SIMPLE, IT IS BASICLY A SORT    */\n    /*     WITH E15 AND E35 EXITS.                                */\n    /*                                                            */\n1   /*     JCL / DDCARD REQUIREMENTS...                           */\n    /*\n\n            //S1 EXEC PGM=XREF1\n            //SYSUT1  DD  DSN=SYPP.PGMLIB,DISP=SHR\n            //*       THIS IS THE PDS TO SEARCH\n            //SYSUT2  DD  DSN=&&ESD,DISP=(,PASS),\n            //        UNIT=SYSVIO,SPACE=(CYL,(5,5))\n            //*       THIS IS THE EXTERNAL SYMBOLS TO PASS TO XREF2\n            //S2 EXEC PGM=XREF2\n            //SYSPRINT DD  SYSOUT=A,\n            //         DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330)\n            //*        THIS IS THE FINAL REPORT\n            //ESDIN   DD  DSN=&&ESD,DISP=(OLD,DELETE)\n            //*         INPUT TO REPORTING PROCESS\n            //SYSOUT  DD  SYSOUT=A  FOR SORT/MERGE\n            //SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,(1)) FOR SORT\n\n         DD-CARD REQUIREMENTS\n\n            ESDIN        OUTPUT FILE FROM XREF1\n            SYSPRINT     FINAL REPORT\n            OTHERS    DD-CARDS APPLICABLE TO YOUR SORT PACKAGE    */\n    /*                                                            */\n1        /*    DECLARES FOR RECORDS TO SORT    */\n-        /*     THESE RECORDS ARE CREATED BY PROGRAM XREF1\n                AND DESCRIBE ALL ESD REFERENCES FOUND IN LOAD\n                MODULES WITHIN A PDS.\n                MULTIPLE RUNS OF XREF1 CAN BE PROCESSED IN A\n                SINGLE EXECUTION OF XREF2. SINCE EACH RECORD\n                HAS THE ORIGINAL DATASET NAME TAGGED ALONG WITH\n                IT.  THE FINAL REPORT PRODUCED BY THIS PROGRAM\n                WILL LIST THE DATASET KEY NUMBERS AT THE END OF\n                THE REPORT.\n                                                                  */\n-        DCL   1   OUTREC UNALIGNED BASED (PTOUT),\n               2   OUTMEM CHAR(8),   /* PDS MEMBER NAME           */\n               2   OUTDSN CHAR (44), /* DSN WHICH WAS SCANNED     */\n               2   OUTSER CHAR (6),  /* VOLSER CONTAINING OUTDSN  */\n               2   OUTNAME CHAR (8), /* THE EXTERNAL SYMBOL FOUND */\n               2   OUTTYP CHAR (2),  /* EBCDIC TYPE OF OUTNAME    */\n                                     /*  POSSIBLE VALUES...       */\n                                     /*                           */\n                                     /*    SD   SECTION DEFINITION*/\n                                     /*    ER   EXTERNAL REFERENCE*/\n                                     /*    LR   LABEL REFERENCE   */\n                                     /*    PC   PRIVATE CODE      */\n                                     /*    CM   COMMON AREA       */\n                                     /*    PR   PSEUDO REGISTED   */\n                                     /*    NL   NULL              */\n                                     /*    WX   WEAK EXTERNAL REF */\n                                     /*                           */\n               2   FILLER CHAR (12); /* SPARE SPACE FOR LATER     */\n-        DCL   DMYREC CHAR (80) STATIC; /* ALLOW EASY REDEFINITION */\n1        /*    DECLARES FOR WORKING STORAGE VARIABLES    */\n0        DCL   TITLE1 CHAR (100) STATIC INIT (' ');\n         DCL   TITLE2 CHAR (132) STATIC INIT (' ');\n         DCL   PAGE_CTR FIXED DEC (7,0) STATIC INIT (0);\n         DCL   (I,J) FIXED BINARY (31) STATIC;\n         DCL   CTR FIXED BIN (31,0) STATIC INIT (0);\n               /*  CURRENT SLOTS LEFT ON PRINT LINE */\n         DCL   CTRMAX FIXED BIN (31,0) STATIC INIT (08);\n               /*  MAX SLOTS TO UTILIZE ON A PRINT LINE */\n         DCL   NAME_HOLD CHAR (8) STATIC INIT (' ');\n0        DCL   ( PTOUT) POINTER STATIC;\n         DCL   ESDIN FILE RECORD SEQUENTIAL INPUT ENV (LEAVE);\n         DCL   SIGND BIT (1) STATIC INIT ('0'B); /* ENDPAGE FORCED */\n         DCL   (ADDR,INDEX,MOD,PLIDUMP,PLIRETC,PLISRTD,SUBSTR,VERIFY)\n               BUILTIN;\n         DCL   LINENO BUILTIN;\n1        /*    DECLARES FOR DSN GATHERING DATA    */\n         /*    THESE TABLES ARE UTILIZED FOR ACCUMULATION OF THE\n               PDS NAMES WHICH WERE ORIGINALLY SCANNED.\n               IT IS APPROPRIATE TO INSERT COMMON PDS NAMES\n               IN THE TABLE AS SHOWN BELOW, TO REDUCE SCAN TIME\n               THE MOST COMMON SHOULD APPEAR FIRST, SINCE A VERY\n               SIMPLE SEQUENTIAL SCAN ALGORITHM IS UTILIZED.\n                                                              */\n         DCL   DSNS (99) CHAR (44) STATIC;\n         DCL   DSN_MAX FIXED BIN (31,0) STATIC INIT (99);\n         DCL   DSN_IN_USE FIXED BIN (31,0) STATIC INIT (6);\n               /*  THIS IS THE NUMBER OF SLOTS CURRENTLY IN USE\n                   ITS INITIAL VALUE SHOULD BE THE NUMBER WITH\n                   DEFAULT DSNS SPECIFIED    */\n         DSNS (*) = ' ';    /* CLEAR TO NOT IN USE STATUS */\n               /*  SET UP SOME DEFAULT VALUES    */\n         DSNS (1) = 'TEMPCAT';\n         DSNS (2) = 'SYS1.PRODA';\n         DSNS (3) = 'SYS1.PRODB';\n         DSNS (4) = 'IMSTST.PGMLIB';\n         DSNS (5) = 'IMSONL.PGMLIB';\n         DSNS (6) = 'SYS1.PRODSUB';\n1         /*    DECLARES FOR SORT ASSOCIATED AREAS    */\n-         DCL   SORT_CORE FIXED BIN (31) STATIC INIT (128000);\n          DCL   SORT_RET FIXED BIN (31) STATIC INIT (0);\n          DCL   SORT_RECORD CHAR (80) STATIC INIT\n                (' RECORD TYPE=F,LENGTH=88 ');\n          DCL   SORT_FIELD CHAR (80) STATIC INIT\n               (' SORT FIELDS=(59,8,CH,A,1,8,CH,A,9,44,CH,A) ');\n                /*   SORT ON THE FOLLOWING FIELDS:\n                   CSECT NAME,\n                   MEMBER NAME, DSNAME      */\n1        /*    INITIALIZATION CODING    */\n0        ON ERROR BEGIN;   /*  DIE IF ANY ERROR IS ENCOUNTERED */\n               CALL PLIDUMP ('TFSH');\n         END;\n0        PTOUT = ADDR (DMYREC);  /* INITIALIZE RECORD POINTER */\n0        ON ENDPAGE (SYSPRINT) BEGIN;\n               PAGE_CTR = PAGE_CTR + 1;\n             PUT FILE (SYSPRINT) PAGE EDIT (\n                 TITLE1, 'PAGE ', PAGE_CTR)\n                 (A,X(5),A(5),F(5,0));\n             PUT FILE (SYSPRINT) SKIP (2) EDIT\n                (TITLE2) (A);\n             IF SIGND                 /* WAS THIS ENDPAGE FORCED?    */\n                THEN DO;\n                  PUT FILE (SYSPRINT) SKIP;   /* SKIP ONLY 1 LINE    */\n                  SIGND = '0'B;               /* RESET SWITCH        */\n                END;\n                ELSE PUT FILE (SYSPRINT) SKIP (2);\n         END;\n         DCL   MAXPAGE FIXED BIN (31) STATIC INIT (58);\n               /*  USED TO LIMIT LINES / PAGE  */\n0        OPEN FILE (SYSPRINT) STREAM OUTPUT PRINT PAGESIZE (MAXPAGE)\n              LINESIZE (132);\n         TITLE1 = '   ***     XREF2     TWA   EXTERNAL SYMBOL CROSS REFE\n RENCE PROCESSOR';\n         TITLE2 = 'CSECT        IS CONTAINED IN MODULE(S)\n                                                              ';\n         SIGND = '1'B;            /* SHOW ENDPAGE WAS FORCED  */\n         SIGNAL ENDPAGE (SYSPRINT);\n1          /*   SORT INPUT AND FORMAT REPORT USING E15 / E35 EXITS */\n         CALL PLISRTD (SORT_FIELD, SORT_RECORD, SORT_CORE, SORT_RET,\n                        SORTIN, SORTOUT);\n         IF SORT_RET \u00ac= 0 THEN DO;\n               PUT FILE (SYSPRINT) SKIP EDIT (\n                   '***   SORT ERROR   ***') (A);\n                   STOP;\n               END;\n1        /*   SORT INPUT PROCEDURE - SUBROUTINE TO SORT/MERGE      */\n-SORTIN: PROCEDURE RETURNS ( CHAR (80) );\n         ON ENDFILE (ESDIN) BEGIN;\n              CALL PLIRETC (8); /* SIGNAL END OF SORT INPUT */\n              GOTO RETRN;\n         END;\n-READESD: READ FILE (ESDIN) SET(PTOUT);\n          IF \u00ac (( OUTTYP = 'SD' ))  /* KEEP ONLY CSECT ID RECORDS */\n                                    /* IF IT IS DESIRED TO KEEP OTHER\n                                       CLASSES OF SYMBOLS, THE CODE\n                                       WOULD BE INSERTED HERE     */\n             THEN GOTO READESD;                        /* ELSE SKIP  */\n         CALL PLIRETC (12); /* SIGNAL MORE INPUT */\n         DMYREC = STRING (OUTREC); /* SET UP RECORD BACK TO SORT */\n0RETRN:  RETURN (DMYREC);\n         END;\n1         /*   SORT OUTPUT PROCEDURE - PRODUCES REPORT   */\n-SORTOUT: PROCEDURE ( INREC );\n         DCL  INREC CHAR (80);\n         PTOUT = ADDR (INREC);     /* MAP OUT THE RECORD */\n         IF NAME_HOLD \u00ac= OUTNAME   /* NEW EXTERNAL SYMBOL HIT */\n           THEN DO;                /* PUT OUT A NEW HEADER    */\n             NAME_HOLD = OUTNAME;  /* SET UP FOR NEXT TIME    */\n             PUT FILE (SYSPRINT) SKIP EDIT\n               ( NAME_HOLD )\n               ( X(3), A(8));\n             CTR = CTRMAX;         /* SET NUMBER LEFT ON LINE  */\n           END;\n         /*     PRINT THIS MODULE REFERENCE  */\n         IF  CTR = 0               /* IS ROOM LEFT ON THE LINE */\n            THEN DO;\n              CTR = CTRMAX;\n              PUT FILE (SYSPRINT) SKIP EDIT\n                (' ') ( X(10),A);\n            END;\n         CTR = CTR - 1;\n         PUT FILE (SYSPRINT) EDIT\n           ( OUTMEM  )\n           ( X(2),A(8));\n         /*   IDENTIFY THE DATASET WHICH CONTAINED REF */\n         DO I = 1 TO DSN_IN_USE;   /* SCAN KNOWN DSN TABLE */\n           IF OUTREC.OUTDSN = DSNS (I)\n             THEN DO;\n               PUT FILE (SYSPRINT)  EDIT\n                 ('(',I,')')\n                 ( A(1),F(2),A(1));\n               GOTO A2;\n             END;\n          END;\n          /*  ADD DSN TO TABLE IF POSSIBLE */\n          DSN_IN_USE = DSN_IN_USE + 1;\n          IF DSN_IN_USE > DSN_MAX THEN SIGNAL ERROR;\n          DSNS (DSN_IN_USE ) = OUTREC.OUTDSN;\n          PUT FILE (SYSPRINT) EDIT\n             ('(',I,')')\n             ( A(1),F(2),A(1));\n A2:;\n         CALL PLIRETC (4); /*   SIGNAL WE WANT MORE */\n         END;\n1        /*    JOB TERMINATION ROUTINE    */\n         /*    PRINT THE DSNS TABLE AS FILLED IN BY THE RUN */\n         SIGNAL ENDPAGE (SYSPRINT);\n         PUT FILE (SYSPRINT) SKIP EDIT\n           ('DSN REFERENCE NUMBER TABLE DUMP.....')\n           ( X(2),A);\n         DO I = 1 TO DSN_IN_USE;\n           PUT FILE (SYSPRINT) SKIP EDIT\n              ('REFERENCE NUMBER (',I,') = ', DSNS (I))\n              ( X(2),A,F(2),A,A);\n         END;\n         END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT200/FILE200.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT200", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}