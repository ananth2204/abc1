{"INMR01": {"INMLRECL": 80, "INMFNODE": "BVOJ1", "INMFUID": "RLRICE", "INMTNODE": "BVOMM", "INMTUID": "RLRICE", "INMFTIME": "20081014191614000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 4000, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "RLRICE.SDF.ASM", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RLRICE.SDF.ASM": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 4000, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\nP\\x00\\x04z`P'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\nP\\x00\\x04z`P'", "b'X\\xf3\\x96p\\x00\\x00\\x00\\x10\\x00\\t\\x00\\x11\\x00\\x08\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"SDFACT": {"ttr": 17, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00C\\x01\\x08(/\\x01\\x08(?\\x08\\x05\\x04\\x04\\x04A\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2008-10-08T00:00:00", "modifydate": "2008-10-09T08:05:43", "lines": 1028, "newlines": 1089, "modlines": 0, "user": "RLRICE"}, "text": "         TITLE 'SDFACT: DISPLAY ACTIVE REGIONS'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* MODULE NAME:     SDFACT                                             *\n*                                                                     *\n* FUNCTION:        DISPLAY ACTIVE REGIONS                             *\n*                                                                     *\n* RETURN CODES:    None                                               *\n*                                                                     *\n* REGISTER USAGE:  R15, entry point address and return codes          *\n*                  R14, used for bal to subroutines                   *\n*                  R13, save area address                             *\n*                  R12, base for global data area                     *\n*                  R11, program base                                  *\n*                  R0-R10, general work registers                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n\nSDFACT   CSECT\nSDFACT   AMODE 31\nSDFACT   RMODE ANY\n         USING *,R15\n         B     START\n         DC    AL1(L'IDENT)\nIDENT    DC    C'SDFACT   &SYSDATE &SYSTIME' MODULE IDENTIFIER\nVERSION  DC    CL8'VER 2.9'                     SDF VERSION\nSTART    DS    0H\n         DROP  R15\n         STM   R14,R12,12(R13)\n         LR    R11,R15                          SET BASE REGS\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         USING SDFACT,R11,R10                   BASE FOR PROGRAM\n         USING GDA,R12                          BASE FOR GDA\n         L     R15,GDALDA                       EXTERNAL WORK AREA\n         A     R15,LDASTART                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                          SET WORK AREA BASE\n         USING LDAACT,R13                       DEFINE BASE\n* ------------------------------------------------------------------- *\n*        DEFINE VARIABLES                                             *\n* ------------------------------------------------------------------- *\n         LA    R1,VARS                          VDEFINE PARM LIST\n         LA    R2,VARNUM                        NUMBER OF PARM LISTS\n         BAL   R5,VDEF0000                      DEFINE VARIABLES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ISPLINK VGET,(SCRLAMT),RETNZ=*\n         LTR   R15,R15                          SUCCESSFUL?\n         BZ    INIT0010                         YES\n         MVC   LDA_SCROLL,=C'CSR '              DEFAULT TO CURSOR\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0010 DS    0H\n         ISPLINK VGET,(FILTERS),RETNZ=*\n         LTR   R15,R15                          SUCCESSFUL?\n         BZ    INIT0020                         YES\n         MVC   LDA_FILTER_TYPE,TYPE_ALL\n         MVC   LDA_FILTER_USER,BLANKS\n         MVC   LDA_FILTER_PRFX,BLANKS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         LA    R1,L'LDA_FILTER_USER\n         LA    R2,LDA_FILTER_USER+L'LDA_FILTER_USER-1\nINIT0030 DS    0H\n         CLI   0(R2),C' '                       BLANK?\n         BNE   INIT0040\n         BCTR  R2,0\n         BCT   R1,INIT0030\nINIT0040 DS    0H\n         STH   R1,LDA_USER_LENGTH               LENGTH OF FILTER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R1,L'LDA_FILTER_PRFX\n         LA    R2,LDA_FILTER_PRFX+L'LDA_FILTER_PRFX-1\nINIT0050 DS    0H\n         CLI   0(R2),C' '                       BLANK?\n         BNE   INIT0060\n         BCTR  R2,0\n         BCT   R1,INIT0050\nINIT0060 DS    0H\n         STH   R1,LDA_PRFX_LENGTH               LENGTH OF FILTER\n* ------------------------------------------------------------------- *\n*        QUERY DYNAMIC AREA SIZE                                      *\n* ------------------------------------------------------------------- *\nINIT0070 DS    0H\n         ISPLINK PQUERY,(PANEL,CVDATA,,CVWIDTH,CVDEPTH)\n* ------------------------------------------------------------------- *\n*        GETMAIN DYNAMIC AREA                                         *\n* ------------------------------------------------------------------- *\n         LH    R0,VWIDTH                        WIDTH\n         MH    R0,VDEPTH                        MULTIPLY BY DEPTH\n         ST    R0,LDA_VDATA_SIZE                SAVE VDATA SIZE\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,LDA_VDATA_ADDR                SAVE ADDRESS\n         LR    R2,R1                            COPY VDATA ADDRESS\n         ISPLINK VDEFINE,(CHARDATA,0(R2),CHAR,LDA_VDATA_SIZE)\n         L     R2,GDASDVT                       SDVT ADDRESS\n         USING SDVT,R2\n         MVC   LDA_DSP_TABLE,SDVADSP            COPY DSP TABLE ADDRESS\n         TM    LDA_FLAGS,$LDA_INIT              ALREADY DONE INIT?\n         BO    BLD0010                          YES\n* ------------------------------------------------------------------- *\n*        BUILD DISPLAY                                                *\n* ------------------------------------------------------------------- *\nBLD0000  DS    0H\n         OI    LDA_FLAGS,$LDA_INIT              SET FLAG\n         L     R1,CVTPTR                        CVT ADDRESS\n         USING CVT,R1                           DEFINE BASE\n         L     R1,CVTASVT                       ASVT ADDRESS\n         USING ASVT,R1                          DEFINE BASE\n         LA    R2,ASVTFRST                      1ST ASVT ENTRY\n         ST    R2,LDA_FIRST_AS                  FIRST A/S\n         ST    R2,LDA_CURR_AS                   CURRENT A/S\n         L     R3,ASVTMAXU                      MAXIMUM ADDRESS SPACES\n         BCTR  R3,0                             MINUS 1\n         SLL   R3,2                             TIMES 4\n         AR    R3,R1                            ADDRESS OF LAST ENTRY\n         ST    R3,LDA_LAST_AS                   SAVE ADDRESS\nBLD0010  DS    0H\n         L     R0,LDA_VDATA_ADDR\n         L     R1,LDA_VDATA_SIZE\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                           INITIALIZE VDATA\n         L     R9,LDA_CURR_AS                   CURRENT ADDRESS SPACE\n         L     R8,LDA_VDATA_ADDR\n         LH    R7,VDEPTH                        NBR OF ROWS\nBLD0020  DS    0H\n         ICM   R6,15,0(R9)                      ASCB ADDRESS FROM ASVT\n         BM    BLD0190                          A/S NOT IN USE\n         USING ASCB,R6\n         L     R2,ASCBOUCB                      OUCB ADDRESS\n         USING OUCB,R2\n         MVC   0(DETAIL_L,R8),DETAIL\nV        USING DETAIL,R8\n         MVI   V.DETAIL_ATTR_1,2\n         MVI   V.DETAIL_ATTR_2,1\n         MVC   V.DETAIL_USER,OUCBUSRD           COPY USER ID\n         ICM   R4,15,ASCBJBNI                   JOB NAME?\n         BZ    BLD0030                          NO\n         MVC   V.DETAIL_NAME,0(R4)              COPY JOB NAME\n         B     BLD0080\nBLD0030  DS    0H\n         ICM   R4,15,ASCBJBNS                   TRY STC NAME\n         BZ    BLD0190                          VERY STRANGE\n         MVC   V.DETAIL_NAME,0(R4)              COPY JOB OR STC NAME\n         CLI   0(R4),C'*'                       MASTER SCHEDULER?\n         BE    BLD0100                          YES\n         S     R4,=A(CHNAME-CSCX)               ADDRESS OF CSCX\n         USING CSCX,R4\n         L     R3,CHCSCBP                       CSCB ADDRESS\n         USING CSCB,R3\n         TM    OUCBYFL,OUCBSTT                  STARTED TASK?\n         BO    BLD0040                          YES\n         TM    OUCBYFL,OUCBLOG                  TSO USER?\n         BO    BLD0050\n         MVI   V.DETAIL_TYPE,C'M'               A/S IS A MOUNT\n         B     BLD0060\nBLD0040  DS    0H\n         MVI   V.DETAIL_TYPE,C'S'               A/S IS AN STC\n         B     BLD0060\nBLD0050  DS    0H\n         MVI   V.DETAIL_TYPE,C'T'               TSO USER\nBLD0060  DS    0H\n         LTR   R3,R3                            CSCB PRESENT?\n         BZ    BLD0100                          NO\nBLD0070  DS    0H\n         CLI   CHKEY,C' '                       STEP NAME PRESENT?\n         BNH   BLD0090                          NO\n         MVC   V.DETAIL_STEP,CHKEY              COPY STEP NAME\n         TM    OUCBYFL,OUCBLOG                  TSO USER?\n         BNO   BLD0090                          NO\n         CLI   CHCLS,C' '                       PROC NAME PRESENT?\n         BNH   BLD0100                          NO\n         MVC   V.DETAIL_PROC,CHCLS              COPY PROC NAME\n         B     BLD0100\nBLD0080  DS    0H\n         MVI   V.DETAIL_TYPE,C'B'               A/S IS A BATCH JOB\n         S     R4,=A(CHNAME-CSCX)               ADDRESS OF CSCX\n         L     R3,CHCSCBP                       CSCB ADDRESS\n         CLI   CHSTEP,C' '                      STEP NAME PRESENT?\n         BNH   BLD0090                          NO\n         MVC   V.DETAIL_STEP,CHSTEP             COPY STEP NAME\nBLD0090  DS    0H\n         CLI   CHPROCSN,C' '                    PROC STEP NAME PRESENT?\n         BNH   BLD0100                          NO\n         MVC   V.DETAIL_PROC,CHPROCSN           COPY PROC STEP NAME\nBLD0100  DS    0H\n         LM    R0,R1,ASCBEJST\n         LM    R14,R15,ASCBSRBT\n         SRDL  R0,12\n         SRDL  R14,12\n         AR    R1,R15\n         SR    R0,R0                            CLEAR R0\n         D     R0,F10000                        COMPUTE 100THS\n         SR    R0,R0\n         D     R0,F100                          COMPUTE WHOLE SECONDS\n         CVD   R0,LDA_DWORD                     CONVERT TO DECIMAL\n         MVC   LDA_EDWORD,=X'F0202020'\n         ED    LDA_EDWORD,LDA_DWORD+6           EDIT HUNDREDTHS\n         MVC   V.DETAIL_HUNDREDTHS,LDA_EDWORD+2 COPY HUNDREDTHS\n         MVI   V.DETAIL_DECIMAL,C'.'            INSERT decimal\n         SR    R0,R0                            CLEAR REMAINDER\n         D     R0,F60                           COMPUTE MINUTES\n         CVD   R0,LDA_DWORD\n         MVC   LDA_EDWORD,=X'F0202020'          INITIALIZE\n         ED    LDA_EDWORD,LDA_DWORD+6           EDIT SECONDS\n         MVC   V.DETAIL_SECONDS,LDA_EDWORD+2    COPY MINUTES\n         MVI   V.DETAIL_COLON2,C':'             INSERT COLON\n         SR    R0,R0\n         D     R0,F60                           COMPUTE HOURS\n         CVD   R0,LDA_DWORD                     CONVERT TO DECIMAL\n         MVC   LDA_EDWORD,=X'F0202020'          INITIALIZE\n         ED    LDA_EDWORD,LDA_DWORD+6           EDIT MINUTES\n         MVC   V.DETAIL_MINUTES,LDA_EDWORD+2    COPY MINUTES\n         MVI   V.DETAIL_COLON1,C':'             INSERT COLON\n         CVD   R1,LDA_DWORD                     CONVERT TO DECIMAL\n         MVC   LDA_EDWORD,=X'F0202020'          INITIALIZE\n         ED    LDA_EDWORD,LDA_DWORD+6           EDIT HOURS\n         MVC   V.DETAIL_HOURS,LDA_EDWORD+2      COPY HOURS\n         L     R1,ASCBIOSC                      NBR OF I/O'S\n         CVD   R1,LDA_DWORD                     CONVERT TO DECIMAL\n         MVC   V.DETAIL_IO,=X'402020206B2020206B202120'\n         ED    V.DETAIL_IO,LDA_DWORD+3          EDIT I/O'S\n         ICM   R1,15,ASCBASSB                   ASSB PRESENT?\n         BZ    BLD0110                          NO\n         USING ASSB,R1\n         ICM   R1,15,ASSBJSAB                   JSCB PRESENT?\n         BZ    BLD0110\n         USING IAZJSAB,R1\n         MVC   V.DETAIL_JOB_NBR,JSABJBID+3      COPY JOB NUMBER\n         DROP  R1\nBLD0110  DS    0H\n         CLC   LDA_FILTER_TYPE,TYPE_ALL         DISPLAY ALL TYPES?\n         BE    BLD0130                          YES\n         CLC   V.DETAIL_TYPE,LDA_FILTER_TYPE    TYPES MATCH?\n         BNE   BLD0190                          NO\nBLD0130  DS    0H\n         SR    R1,R1\n         ICM   R1,3,LDA_USER_LENGTH             USER GIVEN?\n         BZ    BLD0140                          NO\n         BCTR  R1,0\n         EX    R1,USERCLC                       CORRECT USER?\n         BNE   BLD0190                          NO\nBLD0140  DS    0H\n         ICM   R1,3,LDA_PRFX_LENGTH             PREFIX GIVEN?\n         BZ    BLD0180                          NO\n         BCTR  R1,0\n         EX    R1,PRFXCLC                       CORRECT PREFIX?\n         BNE   BLD0190                          NO\nBLD0180  DS    0H\n         AH    R8,VWIDTH                        NEXT LINE\n         BCT   R7,BLD0200                       LOOP\n         B     DISP0000                         BUFFER FULL\nBLD0190  DS    0H\n         MVC   0(80,R8),BLANKS                  WIPE OUT THE DATA\nBLD0200  DS    0H\n         C     R9,LDA_LAST_AS                   AT LAST A/S?\n         BE    DISP0000                         YES\n         LA    R9,4(,R9)                        NEXT IN ASVT\n         B     BLD0020\nUSERCLC  CLC   LDA_FILTER_USER(0),V.DETAIL_USER\nPRFXCLC  CLC   LDA_FILTER_PRFX(0),V.DETAIL_NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0000 DS    0H\n         ISPLINK DISPLAY,(PANEL),RET8=EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for line command(s)                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0010 DS    0H\n         L     R8,LDA_VDATA_ADDR\n         LH    R7,VDEPTH\n         NI    LDA_FLAGS,$LDA_LINE_CMD          NO LINE COMMANDS\n         NI    LDA_FLAGS,$LDA_ERROR             NO ERRORS\nDISP0020 DS    0H\n         OI    V.DETAIL_SELECT,C' '             'TRANSLATE' TO UPPER\n         CLI   V.DETAIL_SELECT,C'E'             DISPLAY ENQ's?\n         BE    ENQ0000                          YES\n         CLI   V.DETAIL_SELECT,C' '             BLANK?\n         BE    DISP0060                         YES\n         CLI   V.DETAIL_JOB_NBR,C' '            JOB NUMBER PRESENT?\n         BE    DISP0040                         NO\n         CLI   V.DETAIL_SELECT,C'C'             CANCEL?\n         BE    CAN0000                          YES\n         CLI   V.DETAIL_SELECT,C'S'             SELECT?\n         BE    DISP0030                         YES\n         LA    R0,0\n         BAL   R5,MSG0000\n         B     DISP0000\nDISP0030 DS    0H\n         MVI   V.DETAIL_SELECT,C' '             RESET LINE COMMAND\n         OI    LDA_FLAGS,$LDA_LINE_CMD          SET INDICATOR\n         PACK  LDA_DWORD,V.DETAIL_JOB_NBR\n         CVB   R1,LDA_DWORD                     CONVERT TO BINARY\n         STCM  R1,3,JSBJOBNO                    SET JOB NUMBER\n         SDFXJSB JOBNUM=JSBJOBNO                UPDATE JSB\n         MVC   JSB+000(256),0(R1)               COPY JSB\n         MVC   JSB+256(JSBSIZE-256),256(R1)\n         LTR   R15,R15                          SUCCESSFUL?\n         BNZ   DISP0060                         NO\n\n         AGO   .BYPASS1\nI don't understand the newer authorization method and I don't\nhave the means to test SDF 3.4 (we still use 2.9).\nHopefully someone will know how to add the authorization\ncheck for version 3.4\n\n         AUTHCHK TYPE=READ,JSB=JSB              CHECK AUTHORIZATION\n         LTR   R15,R15                          USER AUTHORIZED?\n         BNZ   DISP0050                         NO\n.BYPASS1 ANOP\n\n\n         BAL   R5,JSB0000\n         SDFCALL SDFDSLST,(SDFDSLST_CMD,JSB)\n         B     DISP0060\nDISP0040 DS    0H\n         LA    R0,1\n         BAL   R5,MSG0000                       SET MESSAGE\n         B     DISP0000\nDISP0050 DS    0H\n         MVI   V.DETAIL_ATTR_1,3                SET ATTRIBUTE\n         MVI   V.DETAIL_ATTR_2,3                SET ATTRIBUTE\n         MVC   V.DETAIL_STEP(L'NOT_AUTH),NOT_AUTH\n         OI    LDA_FLAGS,$LDA_ERROR             SET ERROR INDICATOR\nDISP0060 DS    0H\n         AH    R8,VWIDTH                        NEXT LINE\n         BCT   R7,DISP0020                      LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        If there were any line commands or errors                    *\n*        suppress scrolling.                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TM    LDA_FLAGS,$LDA_LINE_CMD          LINE COMMAND(S)?\n         BO    DISP0000                         YES, DON'T SCROLL\n         TM    LDA_FLAGS,$LDA_ERROR             ERROR(S)?\n         BO    DISP0000                         YES, DON'T SCROLL\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        No line commands check for scrolling                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NI    LDA_FLAGS,255-$LDA_VPUT\nDISP0070 DS    0H\n         ISPLINK VGET,(SCRLVARS,SHARED),RET8=DISP0140\n         CLI   LDA_ZVERB,C'B'                   BOTTOM?\n         BE    DISP0230                         YES\n         CLI   LDA_ZVERB,C'D'                   SCROLL DOWN?\n         BE    DISP0200                         YES\n         CLI   LDA_ZVERB,C'T'                   TOP?\n         BE    DISP0180                         YES\n         CLI   LDA_ZVERB,C'U'                   SCROLL UP?\n         BE    DISP0150                         YES\n* ------------------------------------------------------------------- *\n*        CHECK FOR COMMAND LINE (ZCMD) COMMAND                        *\n* ------------------------------------------------------------------- *\n         CLC   LDA_ZCMD,BLANKS                  BLANK?\n         BE    BLD0010                          YES\n         LA    R1,L'LDA_ZCMD-2                  LOOP COUNTER/LENGTH\n         LA    R2,LDA_ZCMD\nDISP0080 DS    0H\n         CLC   BLANKS(2),0(R2)                  TWO BLANKS?\n         BNE   DISP0090                         NO\n         EX    R1,MVC1                          COPY\n         MVI   LDA_ZCMD+L'LDA_ZCMD-1,C' '       INSERT BLANK\n         B     DISP0100\nDISP0090 DS    0H\n         LA    R2,1(,R2)                        NEXT\nDISP0100 DS    0H\n         BCT   R1,DISP0080                      LOOP\n         CLC   ABEND,LDA_ZCMD                   CAUSE AN ABEND?\n         BE    ABEND000\n         CLC   ENQ,LDA_ZCMD                     DISPLAY ALL ENQS?\n         BE    ENQ0010\n         CLC   TYPE_JOB,LDA_ZCMD                DISPLAY JOBS?\n         BE    DISP0300\n         CLC   TYPE_STC,LDA_ZCMD                DISPLAY STCS?\n         BE    DISP0310\n         CLC   TYPE_TSO,LDA_ZCMD                DISPLAY TSO USERS?\n         BE    DISP0320\n         CLC   TYPE_ALL,LDA_ZCMD                DISPLAY ALL?\n         BE    DISP0330\n         CLC   USER,LDA_ZCMD                    USER?\n         BE    DISP0350\n         CLC   PREFIX,LDA_ZCMD                  PREFIX?\n         BE    DISP0400\n         LA    R0,2                             MSG NBR\n         BAL   R5,MSG0000                       SET MESSAGE\n         B     BLD0010\nDISP0140 DS    0H\n         TM    LDA_FLAGS,$LDA_VPUT              ALREADY DONE VPUT?\n         BO    DISP0000                         YES\n         OI    LDA_FLAGS,$LDA_VPUT              SET VPUT FLAG\n         ISPLINK VPUT,(SCRLVARS,SHARED),RETNZ=*\n         B     DISP0070                         TRY VGET AGAIN\nMVC1     MVC   0(0,R2),1(R2)                    COPY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0150 DS    0H\n         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD\n         CLI   ZSCROLLA,C'M'                    MAX?\n         BE    DISP0180                         YES\n         L     R1,LDA_ZSCROLLN                  NUMBER TO SCROLL\n         L     R2,LDA_CURR_AS                   CURRENT ASVT\nDISP0160 DS    0H\n         C     R2,LDA_FIRST_AS                  AT FIRST ASVT SLOT?\n         BE    BLD0010                          YES.. GOTTA STOP HERE\n         TM    0(R2),X'80'                      IN USE?\n         BO    DISP0170                         NO\n         SH    R2,H4                            UP 1 IN ASVT\n         ST    R2,LDA_CURR_AS                   SAVE ADDRESS\n         BCT   R1,DISP0160                      LOOP\n         B     BLD0010                          RE-BUILD DISPLAY\nDISP0170 DS    0H\n         SH    R2,H4                            SKIP THIS A/S\n         B     DISP0160\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0180 DS    0H\n         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD\n         MVC   LDA_CURR_AS,LDA_FIRST_AS         1ST AS\n         B     BLD0010                          RE-BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*        SCROLL DOWN                                                  *\n* ------------------------------------------------------------------- *\nDISP0200 DS    0H\n         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD\n         CLI   ZSCROLLA,C'M'                    MAX?\n         BE    DISP0230                         YES\n         L     R1,LDA_ZSCROLLN                  NUMBER TO SCROLL\n         L     R2,LDA_CURR_AS                   FIRST A/S DISPLAYED\nDISP0210 DS    0H\n         ST    R2,LDA_CURR_AS                   SET FIRST TO DISPLAY\nDISP0220 DS    0H\n         C     R2,LDA_LAST_AS                   AT LAST?\n         BE    BLD0010                          YES.. REBUILD DISPLAY\n         AH    R2,H4                            NEXT IN ASVT\n         TM    0(R2),X'80'                      A/S IN USE?\n         BO    DISP0220                         NO\n         BCT   R1,DISP0210                      LOOP\n         B     BLD0010                          REBUILD DISPLAY\n*---------------------------------------------------------------------*\n*        BOTTOM                                                       *\n*---------------------------------------------------------------------*\nDISP0230 DS    0H\n         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD\n         L     R2,LDA_LAST_AS                   LAST ASCB IN ASVT\n         LH    R1,VDEPTH                        SCREEN DEPTH\nDISP0240 DS    0H\n         ST    R2,LDA_CURR_AS                   SET FIRST TO DISPLAY\nDISP0250 DS    0H\n         C     R2,LDA_FIRST_AS                  AT FIRST A/S?\n         BE    BLD0010                          YES.. BUILD DISPLAY\n         SH    R2,H4                            PREVIOUS A/S IN ASVT\n         TM    0(R2),X'80'                      A/S IN USE?\n         BO    DISP0250                         NO\n         BCT   R1,DISP0240                      LOOP\n         B     BLD0010                          REBUILD DISPLAY\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDISP0300 DS    0H\n         MVC   LDA_FILTER_TYPE,TYPE_JOB\n         B     DISP0430\nDISP0310 DS    0H\n         MVC   LDA_FILTER_TYPE,TYPE_STC\n         B     DISP0430\nDISP0320 DS    0H\n         MVC   LDA_FILTER_TYPE,TYPE_TSO\n         B     DISP0430\nDISP0330 DS    0H\n         MVC   LDA_FILTER_TYPE,TYPE_ALL\n         B     DISP0430\nDISP0350 DS    0H\n         MVC   LDA_FILTER_USER,LDA_ZCMD+L'USER\n         LA    R1,L'LDA_FILTER_USER\n         LA    R2,LDA_FILTER_USER+L'LDA_FILTER_USER-1\nDISP0360 DS    0H\n         CLI   0(R2),C' '                       BLANK?\n         BNE   DISP0370\n         BCTR  R2,0\n         BCT   R1,DISP0360\nDISP0370 DS    0H\n         STH   R1,LDA_USER_LENGTH               LENGTH OF FILTER\n         B     DISP0430\nDISP0400 DS    0H\n         MVC   LDA_FILTER_PRFX,LDA_ZCMD+L'PREFIX\n         LA    R1,L'LDA_FILTER_PRFX\n         LA    R2,LDA_FILTER_PRFX+L'LDA_FILTER_PRFX-1\nDISP0410 DS    0H\n         CLI   0(R2),C' '                       BLANK?\n         BNE   DISP0420                         NO\n         BCTR  R2,0\n         BCT   R1,DISP0410\nDISP0420 DS    0H\n         STH   R1,LDA_PRFX_LENGTH               LENGTH OF FILTER\nDISP0430 DS    0H\n         MVC   LDA_ZCMD,BLANKS                  RESET COMMAND\n         B     BLD0010\n*---------------------------------------------------------------------*\n*        Link to SDFENQ                                               *\n*---------------------------------------------------------------------*\nENQ0000  DS    0H\n         MVI   V.DETAIL_SELECT,C' '             RESET LINE COMMAND\n         MVC   LDA_ENQ_JOB,V.DETAIL_NAME\n         B     ENQ0020\nENQ0010  DS    0H\n         MVC   LDA_ZCMD,BLANKS                  RESET ZCMD\n         MVC   LDA_ENQ_JOB,ALL\nENQ0020  DS    0H\n         ISPLINK VDELETE,(CHARDATA)             VDELETE OUR VDATA\n         SDFCALL SDFENQ,(LDA_ENQ_JOB)           CALL SDFENQ\n         L     R2,LDA_VDATA_ADDR                VDATA ADDRESS\n         ISPLINK VDEFINE,(CHARDATA,0(R2),CHAR,LDA_VDATA_SIZE)\n         CLC   LDA_ENQ_JOB,ALL                  ALL JOBS?\n         BE    BLD0010                          YES\n         B     DISP0060\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCAN0000  DS    0H\n         MVI   V.DETAIL_SELECT,C' '             RESET LINE COMMAND\n         OI    LDA_FLAGS,$LDA_LINE_CMD          SET INDICATOR\n         PACK  LDA_DWORD,V.DETAIL_JOB_NBR\n         CVB   R1,LDA_DWORD                     CONVERT TO BINARY\n         STCM  R1,3,JSBJOBNO                    SET JOB NUMBER\n         SDFXJSB JOBNUM=JSBJOBNO\n         LA    R0,JSB\n         ST    R0,SSPJSBA\n         MVI   SSPFUNC,SSPCAN                   SET FUNCTION\n         SDFSSI SSPL\n         MVC   V.DETAIL_MSG,BLANKS\n         CH    R15,H4                           SUCCESSFUL?\n         BL    CAN0010                          YES\n         BE    CAN0020\n         MVC   V.DETAIL_MSG(L'PURGED),PURGED\n         B     DISP0060\nCAN0010  DS    0H\n         MVC   V.DETAIL_MSG(L'CANCELLED),CANCELLED\n         B     DISP0060\nCAN0020  DS    0H\n         MVC   V.DETAIL_MSG(L'SSI_ERROR),SSI_ERROR\n         B     DISP0060\n*---------------------------------------------------------------------*\n*        FORMAT JSB INFORMATION                                       *\n*---------------------------------------------------------------------*\nJSB0000  DS    0H\n         MVC   LDA_JSENM,BLANKS                 CLEAR FIELDS\n         MVC   LDA_JSTAT,BLANKS\n         MVC   LDA_JFCODE,BLANKS\n         MVC   JLINE,JSBLINES                   SET LINE COUNT\n         MVC   JPRTY+1(1),JSBPRTY\n         CLI   JSBDSPNO,0                       ANY DSP NUMBER ?\n         BE    JSB0030                          BRANCH IF YES\n         SR    R1,R1\n         IC    R1,JSBDSPNO\n         BCTR  R1,0\n         SLL   R1,3\n         A     R1,LDA_DSP_TABLE\n         MVC   LDA_JSENM,0(R1)\n         CLC   JSBDSPNO,GDAMNDSP                JOB IN MAIN?\n         BNE   JSB0030                          BRANCH IF NO\n         MVI   LDA_JSENM+5,C'.'\n         CLI   JSYSID,C' '                      PROCESSOR NAME KNOWN?\n         BNH   JSB0030                          NO\n         MVC   LDA_JSENM+5(3),JSYSID            MOVE IN SYSTEM NAME\n         CLI   JSYSID+3,C' '                    LONGER THAN 3?\n         BNH   JSB0030                          NO\n         LA    R15,JSYSID+4                     START FOR SCAN\n         LA    R0,1                             INCREMENT FOR SCAN\n         LA    R1,JSYSID+L'JSYSID-1             LIMIT FOR SCAN\nJSB0010  DS    0H\n         CLI   0(R15),C' '                      END OF SYSTEM NAME?\n         BNH   JSB0020                          QUIT LOOKING\n         BXLE  R15,R0,JSB0010                   LOOP\nJSB0020  DS    0H\n         BCTR  R15,0                            BACK UP ONE CHARACTER\n         MVC   LDA_JSENM+5(1),0(R15)            MOVE LAST CHARACTER\n         MVC   LDA_JSENM+6(2),BLANKS\nJSB0030  DS    0H\n         TM    JSBFLAG4,JSBCIERR\n         BNZ   JSB0050\n         ICM   R1,B'1111',JSBCONDC              DID IT FAIL?\n         BZ    JSB0060                          BRANCH IF NO\n         CLI   JSBCONDC,X'FF'                   CANCELED BY CI?\n         BE    JSB0050                          BRANCH IF YES\n         CLI   JSBCONDC+1,0                     CHECK FOR SYSTEM ABEND\n         BNE   JSB0040                          BRANCH IF ZERO\n         TM    JSBCONDC+2,X'F0'\n         BNZ   JSB0040\n         XR    R1,R1\n         ICM   R1,B'0111',JSBCONDC+1\n         CVD   R1,LDA_DWORD\n         UNPK  LDA_JFCODE(5),LDA_DWORD\n         OI    LDA_JFCODE+4,C'0'\n         MVI   LDA_JFCODE,C'U'\n         TM    JSBFLAG1,JSBABCOD                ABEND CODE?\n         BO    JSB0060                          BRANCH IF YES\n         MVI   LDA_JFCODE,C'C'                  INDICATE CONDITION CODE\n         B     JSB0060\nJSB0040  DS    0H                               FORMAT ABEND CODE\n         UNPK  LDA_JFCODE+1(5),JSBCONDC+1(3)\n         TR    LDA_JFCODE+1(3),HEXCHAR\n         MVI   LDA_JFCODE,C'S'\n         MVC   LDA_JFCODE+4(2),BLANKS\n         B     JSB0060\nJSB0050  DS    0H\n         MVC   LDA_JFCODE(5),=CL5'CI'\n         B     JSB0080\nJSB0060  DS    0H\n         TM    JSBFLAG4,JSBFAIL+JSBCANC\n         BZ    JSB0070\n         MVC   LDA_JFCODE(5),=CL5'FAIL'\n         B     JSB0080\nJSB0070  DS    0H\n         TM    JSBFLAG4,JSBCANCO\n         BZ    JSB0080\n         MVC   LDA_JFCODE(6),=CL6'CANCEL'\n         TM    JSBFLAG4,JSBCANUR\n         BZ    JSB0080\n         MVC   LDA_JFCODE(6),=CL6'USER'\nJSB0080  DS    0H\n         TODCNV29 DATE=(JSBDATE,LDA_JTIME),TIME=(JSBTIME,LDA_JTIME+9)\n         MVC   LDA_JLTIME(2),=C'20'             DEFAULT TO YEAR 20XX\n         CLC   =C'80',LDA_JTIME                 YEAR < 80?\n         BH    JSB0090                          YES - SKIP\n         MVC   LDA_JLTIME(2),=C'19'             MAKE YEAR 19XX\nJSB0090  DS    0H\n         MVC   LDA_JLTIME+2(L'LDA_JTIME),LDA_JTIME Move in Date/Time\n         MVI   LDA_JFLGS,C' '\n         MVC   LDA_JFLGS+1(L'LDA_JFLGS-1),LDA_JFLGS\n         LA    R1,LDA_JFLGS\n         TM    JSBFLAG3,JSBOPHLD                OPERATOR HOLD?\n         BZ    JSB0100\n         MVC   0(2,R1),=C'OP'\n         LA    R1,3(R1)\nJSB0100  DS    0H\n         TM    JSBFLAG3,JSBDJCOH                NET OPERATOR HOLD?\n         BZ    JSB0110\n         MVC   0(3,R1),=C'OPN'\n         LA    R1,4(R1)\nJSB0110  DS    0H\n         TM    JSBFLAG3,JSBDJHLD                NET HOLD?\n         BZ    JSB0120\n         MVC   0(3,R1),=C'NET'\n         LA    R1,4(R1)\nJSB0120  DS    0H\n         CLI   JSBDSPNO,0                       ANY DSP NUMBER ?\n         BER   R5                               RETURN IF NO\n         CLI   JSBSEFLG,0\n         BER   R5\n         TM    JSBSEFLG,SERESCH\n         BO    JSB0130\n         TM    JSBSEFLG,SEISTART\n         BO    JSB0140\n         TM    JSBSEFLG,SEIEND\n         BO    JSB0150\n         TM    JSBSEFLG,SEIPASS\n         BO    JSB0160\n         TM    JSBSEFLG,SEDSPAB\n         BO    JSB0170\n         TM    JSBSEFLG,SEACTIVE\n         BO    JSB0180\n         MVC   LDA_JSTAT,OTHER\n         BR    R5\nJSB0130  DS    0H\n         MVC   LDA_JSTAT,RESCHED\n         BR    R5\nJSB0140  DS    0H\n         MVC   LDA_JSTAT,ISTART\n         BR    R5\nJSB0150  DS    0H\n         MVC   LDA_JSTAT,IEND\n         BR    R5\nJSB0160  DS    0H\n         MVC   LDA_JSTAT,IPASS\n         BR    R5\nJSB0170  DS    0H\n         MVC   LDA_JSTAT,DSPAB\n         BR    R5\nJSB0180  DS    0H\n         CLC   JSBDSPNO,GDAOSDSP                JOB IN OUTSERV?\n         BER   R5                               YES\n         CLC   JSBDSPNO,GDAMNDSP                JOB IN MAIN?\n         BNE   JSB0190                          NO\n         CLI   JSYSID,C' '                      ANY SYSTEM ID\n         BNH   JSB0200                          NO\nJSB0190  DS    0H\n         MVC   LDA_JSTAT,ACTIVE\n         BR    R5\nJSB0200  DS    0H\n         MVC   LDA_JSTAT,WAIT\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        VDEFINE VARIABLES                                            *\n*        R1    1ST ISPLINK PARM LIST                                  *\n*        R2    NUMBER OF PARM LISTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVDEF0000 DS    0H\nVDEF0010 DS    0H\n         ISPLINK MF=(E,(R1))\n         LA    R1,10(,R1)\n         BCT   R2,VDEF0010\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        VDELETE VARAIBLES                                            *\n*                                                                     *\n*    It may be a bit cludgy, but copying \"+2\" allows the same         *\n*    parm list to be used for VDEFINE and VDELETE                     *\n*                                                                     *\n*                                                                     *\n*        R1    FIRST ISPLINK PARM LIST                                *\n*        R2    NUMBER OF PARM LISTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVDEL0000 DS    0H\n         LR    R3,R1                           FIRST PARAMETER LIST\n         MVC   LDA_PLIST(2),VDELLIST           COPY LIST\nVDEL0010 DS    0H\n         MVC   LDA_PLIST+2(2),2(R3)            COPY PARAMETER LIST\n         ISPLINK MF=(E,LDA_PLIST)              CALL ISPF INTERFACE\n         LA    R3,10(,R3)                      NEXT ISPLINK PLIST\n         BCT   R2,VDEL0010                     LOOP\n         BR    R5                              RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         MVC   LDA_MSG,=CL8'SDFE000'\n         CVD   R0,LDA_DWORD                    CONVERT TO DECIMAL\n         UNPK  LDA_MSG+4(3),LDA_DWORD+6(2)     UNPACK MESSAGE NUMBER\n         OI    LDA_MSG+6,X'F0'                 MAKE SIGN PRINTABLE\n         ISPLINK SETMSG,(LDA_MSG)              SET ISPF MESSAGE\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*        EXIT TO CALLER                                               *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ISPLINK VPUT,(SCRLAMT,PROFILE),RETNZ=*\n         ISPLINK VPUT,(FILTERS,PROFILE),RETNZ=*\n         LA    R1,VARS\n         LA    R2,VARNUM\n         BAL   R5,VDEL0000\n         ISPLINK VDELETE,(CHARDATA)             VDELETE OUR VDATA\n         L     R1,LDA_VDATA_ADDR\n         L     R0,LDA_VDATA_SIZE\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=(0)\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n* ------------------------------------------------------------------- *\n*                            CONSTANTS                                *\n* ------------------------------------------------------------------- *\nLDASTART         DC    Q(LDAACT)\n\nF60              DC    F'60'\nF100             DC    F'100'\nF10000           DC    F'10000'\nH4               DC    H'4'\n\nVDELLIST         ISPLINK VDELETE,(0),MF=L\n\nVARS             DS    0F\n                 ISPLINK VDEFINE,(FIXED4,LDA_ZSCROLLN,FIXED,4),MF=L\nVARL             EQU   *-VARS\n                 ISPLINK VDEFINE,(FIXED2,VWIDTH,FIXED,2),MF=L\n                 ISPLINK VDEFINE,(CJJBNO,JJBNO,FIXED,2),MF=L\n                 ISPLINK VDEFINE,(CHAR4,ZSCROLLA,CHAR,4),MF=L\n                 ISPLINK VDEFINE,(CHAR8A,LDA_ZVERB,CHAR,8),MF=L\n                 ISPLINK VDEFINE,(CHAR8B,JJBNM,CHAR,8),MF=L\n                 ISPLINK VDEFINE,(CHAR8C,JORG,CHAR,8),MF=L\n                 ISPLINK VDEFINE,(FILTERS,LDA_FILTER_TYPE,CHAR,8),MF=L\n                 ISPLINK VDEFINE,(CHAR17,LDA_JTIME,CHAR,17),MF=L\n                 ISPLINK VDEFINE,(CHAR19,LDA_JLTIME,CHAR,19),MF=L\n                 ISPLINK VDEFINE,(CHAR20,JPGMR,CHAR,20),MF=L\n                 ISPLINK VDEFINE,(CHAR21,LDA_JFLGS,CHAR,21),MF=L\n                 ISPLINK VDEFINE,(CHAR80,LDA_ZCMD,CHAR,80),MF=L\nVARNUM           EQU   (*-VARS)/VARL\n\nPANEL            DC    CL8'SDFACT'\nCVDATA           DC    CL8'VDATA'\nCVWIDTH          DC    CL8'VWIDTH'\nCVDEPTH          DC    CL8'VDEPTH'\nSDFDSLST_CMD     DC    CL2'S '\n\nFIXED4           DC    C'(ZSCROLLN JLINE)'\nFIXED2           DC    C'(VWIDTH VDEPTH VVDEPTH JPRTY)'\nCJJBNO           DC    C'(JJBNO)'\nCHARDATA         DC    C'(VDATA)'\nCHAR4            DC    C'(ZSCROLLA VSCR)'\nCHAR8A           DC    C'(ZVERB JKEY TJNM TJID JSENM JFCODE JCLINE JSFL+\n               GS JSTAT)'\nCHAR8B           DC    C'(JJBNM JTUID  JSUID  JJBCLS JINDEV)'\nCHAR8C           DC    C'(JORG  JXNODE JNETID JSYSID JFPROC JFSTEP)'\nFILTERS          DC    C'(ACTTYPE ACTUSER ACTPRFX)'\nCHAR17           DC    C'(JTIME)'\nCHAR19           DC    C'(JLTIME)'\nCHAR20           DC    C'(JPGMR)'\nCHAR21           DC    C'(JFLGS)'\nCHAR80           DC    C'(ZCMD)'\nSCRLAMT          DC    C'(VSCR)'\n\nSCRLVARS         DC    C'(ZVERB ZSCROLLA ZSCROLLN)'\n\nABEND            DC    C'ABEND'\nALL              DC    CL8'ALL'\nACTIVE           DC    CL8'ACTIVE'\nBLANKS           DC    CL80' '\nCANCELLED        DC    C'CANCELLED'\nDSPAB            DC    CL8'DSPAB'\nENQ              DC    C'ENQ '\nIEND             DC    CL8'IEND'\nIPASS            DC    CL8'IPASS'\nISTART           DC    CL8'ISTART'\nNOT_AUTH         DC    C'Not authorized'\nOTHER            DC    CL8'OTHER'\nPREFIX           DC    C'PREFIX '\nPURGED           DC    C'JOB PURGED'\nRESCHED          DC    CL8'RESCHED'\nSSI_ERROR        DC    C'SSI ERROR'\nSTARTING         DC    CL8'STARTING'\nUNKNOWN          DC    C'UNKN'\nUSER             DC    C'USER '\nWAIT             DC    CL8'WAIT'\n\nSWAP_IN          DC    CL3'IN'\nSWAP_LOGICAL     DC    CL3'LSW'\nSWAP_OUT         DC    CL3'OUT'\nSWAP_NON         DC    CL3'NSW'\nSWAP_TRANSITION  DC    CL3'<->'\n\nTYPE_ALL         DC    CL8'ALL'\nTYPE_JOB         DC    CL8'JOB'\nTYPE_MOUNT       DC    CL8'MNT'\nTYPE_STC         DC    CL8'STC'\nTYPE_TSO         DC    CL8'TSU'\n\nEDIT_WORD        DC    X'40202020202020202020'\n\nHEXCHAR          EQU   *-C'0'\n                 DC    C'0123456789ABCDEF'\n\n                 LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDETAIL           DC  0C\nDETAIL_ATTR_1    DC  X'00'\nDETAIL_SELECT    DC  CL1' '\nDETAIL_ATTR_2    DC  X'00'\nDETAIL_JOB_NBR   DC  CL5' '\n                 DC  CL1' '\nDETAIL_NAME      DC  CL8' '\n                 DC  CL1' '\nDETAIL_STEP      DC  CL8' '\n                 DC  CL1' '\nDETAIL_PROC      DC  CL8' '\n                 DC  CL1' '\nDETAIL_PROC_STEP DC  CL8' '\n                 DC  CL1' '\nDETAIL_USER      DC  CL8' '\n                 DC  CL1' '\nDETAIL_TYPE      DC  CL1' '\n                 DC  CL1' '\nDETAIL_HOURS     DC  CL2' '\nDETAIL_COLON1    DC  C' '\nDETAIL_MINUTES   DC  CL2' '\nDETAIL_COLON2    DC  C' '\nDETAIL_SECONDS   DC  CL2' '\nDETAIL_DECIMAL   DC  C' '\nDETAIL_HUNDREDTHS DC CL2' '\n                 DC  CL1' '\nDETAIL_IO        DC  CL12' '\n                 ORG DETAIL_HOURS\nDETAIL_MSG       DS  CL20' '\n                 ORG\nDETAIL_L         EQU *-DETAIL\n* ------------------------------------------------------------------- *\n*                      DUMMY EXTERNAL SECTION                         *\n* ------------------------------------------------------------------- *\nLDAACT           DSECT                 EXTERNAL WORK AREA\nLDAID            DS    CL8             MODULE IDENTIFIER\nSAVEAREA         DS    18F             PROGRAM REGISTER SAVE AREA\n                 DS    CL8\n\nLDA_DWORD        DS    D\n\nLDA_PLIST        DS    3F\n\nLDA_DSP_TABLE    DS    A               JES3 DSP TABLE ADDRESS\n\nLDA_FIRST_AS     DS    A               FIRST ADDRESS SPACE\nLDA_LAST_AS      DS    A               LAST ADDRESS SPACE\nLDA_CURR_AS      DS    A               CURRENT ADDRESS SPACE\n\nLDA_VDATA_ADDR   DS    A               VDATA ADDRESS\nLDA_VDATA_SIZE   DS    F               VDATA SIZE\n\nLDA_ZSCROLLN     DS    F               NBR OF LINES TO SCROLL\nJLINE            DS    F\n\nVWIDTH           DS    H               DYNAMIC AREA WIDTH\nVDEPTH           DS    H               DYNAMIC AREA DEPTH\nVVDEPTH          DS    H               VISIBLE DEPTH\nJPRTY            DS    H\n\nZSCROLLA         DS    CL4             SCROLL AMOUNT\nLDA_SCROLL       DS    CL4             SCROLL AMOUNT\n\nLDA_FLAGS        DS    X\n$LDA_LINE_CMD    EQU   X'80'\n$LDA_ERROR       EQU   X'40'\n$LDA_VPUT        EQU   X'20'\n$LDA_INIT        EQU   X'10'\n\nLDA_EDWORD       DS    XL4\n\nLDA_ZVERB        DS    CL8             SCROLL VERB\nLDA_JKEY         DS    CL8\nLDA_TJNM         DS    CL8\nLDA_TJID         DS    CL8\nLDA_JSENM        DS    CL8\nLDA_JFCODE       DS    CL8\nLDA_JCLINE       DS    CL8\nLDA_JSLINE       DS    CL8\nLDA_JSFLGS       DS    CL8\nLDA_JSTAT        DS    CL8\n\nLDA_MSG          DS    CL8\n\nLDA_ENQ_JOB      DS    CL8\n\nLDA_USER_LENGTH  DS    H\nLDA_PRFX_LENGTH  DS    H\nLDA_FILTER_TYPE  DS    CL8\nLDA_FILTER_USER  DS    CL8\nLDA_FILTER_PRFX  DS    CL8\n\nLDA_JTIME        DS    CL17\nLDA_JLTIME       DS    CL19\nLDA_JFLGS        DS    CL21\n\nLDA_ZCMD         DS    CL80\n\n         SDFYSSPL DSECT=NO\n         SDFYJSB  DSECT=NO\n         ORG      JSBJOBNO\nJJBNO    DS    H                       JOB NUMBER\n         ORG   JSBJBNAM\nJJBNM    DS    CL8                     JOB NAME\nJTUID    DS    CL8                     TSO USER ID\nJSUID    DS    CL8                     SECURITY USER ID\nJJBCLS   DS    CL8                     JOB CLASS\nJINDEV   DS    CL8                     INPUT DEVICE\nJORG     DS    CL8                     JOB ORIGIN\nJXNODE   DS    CL8                     EXECUTION NODE\nJNETID   DS    CL8                     DJC NETWORK ID\nJSYSID   DS    CL8                     SYSTEM ID\nJFPROC   DS    CL8                     FAILING PROC NAME\nJFSTEP   DS    CL8                     FAILING STEP NAME\n         ORG   JSBSDSPA\nJSDSPA   DS    A                       SDSB POINTER ADDRESS\nJOSBPA   DS    A                       OSB POINTER ADDRESS\n         ORG   JSBJCTMR\nJJCTMR   DS    XL6                     JCT SPOOL ADDRESS\nJJDBMR   DS    XL6                     JDAB SPOOL ADDRESS\nJJBTMR   DS    XL6                     JOBTAT SPOOL ADDRESS\nJJDSMR   DS    XL6                     JDS SPOOL ADDRESS\nJOSEMR   DS    XL6                     OSE SPOOL ADDRESS\nJJMRMR   DS    XL6                     JMR SPOOL ADDRESS\nJJSTMR   DS    XL6                     JST SPOOL ADDRESS\n         ORG   JSBPGMR\nJPGMR    DS    CL20                    PROGRAMMER NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         SDFYGDA  ,\n         SDFYPDA  ,\n         SDFYSDVT ,\n         IATYJCT\n\n         IHAPSA   DSECT=YES,LIST=NO\n         CVT      DSECT=YES,LIST=NO\n         IKJTCB   DSECT=YES,LIST=NO\n\n         IHAASCB  DSECT=YES,LIST=NO\n         IHAASSB  LIST=NO\n         IHAASVT  DSECT=YES,LIST=NO\n         IAZJSAB  DSECT=YES,LIST=NO\n\nCSCB     DSECT\n         IEECHAIN INCCSCX=YES\n\n         IRAOUCB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IATYREG ,\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SDFENQ": {"ttr": 515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00Y\\x01\\x08(/\\x01\\x08(\\x8f\\x14\\x00\\x02\\xf6\\x02\\x8d\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2008-10-08T00:00:00", "modifydate": "2008-10-14T14:00:59", "lines": 758, "newlines": 653, "modlines": 0, "user": "RLRICE"}, "text": "         TITLE 'SDFENQ: DISPLAY ENQ''s for an active region'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* MODULE NAME:     SDFENQ                                             *\n*                                                                     *\n* FUNCTION:        DISPLAY ENQ's for a region                         *\n*                                                                     *\n* Invoked by       'E' line command on the 'A' (active region display)*\n*                                                                     *\n* RETURN CODES:    None                                               *\n*                                                                     *\n* REGISTER USAGE:  R15, entry point address and return codes          *\n*                  R14, used for bal to subroutines                   *\n*                  R13, save area address                             *\n*                  R12, base for global data area                     *\n*                  R11, program base                                  *\n*                  R0-R10, general work registers                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n\nSDFENQ   CSECT\nSDFENQ   AMODE 31\nSDFENQ   RMODE ANY\n         USING *,R15\n         B     START\n         DC    AL1(L'IDENT)\nIDENT    DC    C'SDFENQ   &SYSDATE &SYSTIME'    MODULE IDENTIFIER\nVERSION  DC    CL8'VER 2.9'                     SDF VERSION\nSTART    DS    0H\n         DROP  R15\n         STM   R14,R12,12(R13)\n         LR    R11,R15                          SET BASE REGS\n         LA    R10,2048(,R11)\n         LA    R10,2048(,R10)\n         USING SDFENQ,R11,R10                   BASE FOR PROGRAM\n         USING GDA,R12                          BASE FOR GDA\n         L     R15,GDALDA                       EXTERNAL WORK AREA\n         A     R15,LDASTART                     PLUS DISP\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15                          SET WORK AREA BASE\n         USING LDAENQ,R13                       DEFINE BASE\n         MVC   LDA_GQSCAN(GQSCAN_L),GQSCAN_I    INIT GQSCAN\n         L     R1,0(R1)                         PARM ADDRESS\n         MVC   LDA_JOB_NAME,0(R1)               COPY JOB NAME\n         XC    LDA_ENQ_CHAIN,LDA_ENQ_CHAIN\n         XC    LDA_INDEX_FIRST,LDA_INDEX_FIRST\n         XC    LDA_LAST_ENQ,LDA_LAST_ENQ\n         XC    LDA_NBR_ON_CHAIN,LDA_NBR_ON_CHAIN\n* ------------------------------------------------------------------- *\n*        DEFINE VARIABLES                                             *\n* ------------------------------------------------------------------- *\n         LA    R1,VARS                          VDEFINE PARM LIST\n         LA    R2,VARNUM                        NUMBER OF PARM LISTS\n         BAL   R5,VDEF0000                      DEFINE VARIABLES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ISPLINK VGET,(SCRLAMT),RETNZ=*\n         LTR   R15,R15                          SUCCESSFUL?\n         BZ    INIT0010                         YES\n         MVC   LDA_SCROLL,=C'CSR '              DEFAULT TO CURSOR\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0010 DS    0H\n         ISPLINK VGET,(ENQSORT),RETNZ=*\n         LTR   R15,R15                          SUCCESSFUL?\n         BZ    INIT0020                         YES\n         MVC   LDA_ENQ_SORT,SORT_JOB            DEFAULT SORT BY JOB\n* ------------------------------------------------------------------- *\n*        QUERY DYNAMIC AREA SIZE                                      *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         ISPLINK PQUERY,(PANEL,CVDATA,,CVWIDTH,CVDEPTH)\n* ------------------------------------------------------------------- *\n*        GETMAIN DYNAMIC AREA                                         *\n* ------------------------------------------------------------------- *\n         LH    R0,LDA_VWIDTH                    WIDTH\n         MH    R0,LDA_VDEPTH                    MULTIPLY BY DEPTH\n         ST    R0,LDA_VDATA_SIZE                SAVE VDATA SIZE\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,LDA_VDATA_ADDR                SAVE ADDRESS\n         LR    R2,R1                            COPY VDATA ADDRESS\n         ISPLINK VDEFINE,(CHARDATA,0(R2),CHAR,LDA_VDATA_SIZE)\n* ------------------------------------------------------------------- *\n*        OBTAIN THE ENQ INFO                                          *\n* ------------------------------------------------------------------- *\nENQ0000  DS    0H\n         XC    LDA_TOKEN,LDA_TOKEN              RESET TOKEN\nENQ0010  DS    0H\n         GQSCAN QUIT=NO,                        REQUEST ENQ INFO       +\n               TOKEN=LDA_TOKEN,                                        +\n               AREA=(LDA_GQSCAN_DATA,GQSCAN_DATA_L),                   +\n               MF=(E,LDA_GQSCAN)\n         ST    R0,LDA_RIB_LENGTH                SAVE RIB AND RIBE SIZES\n         ST    R1,LDA_RIBS                      SAVE NBR OF RIBS\n         STC   R15,LDA_GQSCAN_RC                SAVE RC\n         LTR   R15,R15                          SUCCESSFUL?\n         BZ    ENQ0020                          YES\n         CLI   LDA_GQSCAN_RC,8                  YES.. WITH MORE TO GO?\n         BNE   ERR0010                          NO\nENQ0020  DS    0H\n         LA    R7,LDA_GQSCAN_DATA               FIRST RIB\n         USING RIB,R7\nENQ0030  DS    0H\n         ICM   R2,15,RIBNRIBE                   NBR OF RIBE'S\n         BZ    ENQ0100\n         LH    R6,RIBVLEN                       RIBE VARIABLE LENGTH\n         AH    R6,LDA_RIB_LENGTH                PLUS FIXED RIBE LENGTH\n         AR    R6,R7                            FIRST RIBE\n         USING RIBE,R6\nENQ0040  DS    0H\n         CLC   LDA_JOB_NAME,ALL                 ALL?\n         BE    ENQ0050                          YES\n         CLC   LDA_JOB_NAME,RIBEJBNM            FOR THIS JOB?\n         BNE   ENQ0090                          NO\nENQ0050  DS    0H\n         LA    R1,1\n         A     R1,LDA_NBR_ON_CHAIN              PLUS NBR ON CHAIN\n         ST    R1,LDA_NBR_ON_CHAIN              UPDATE NBR\n         GETMAIN RU,                                                   +\n               LV=ENQ_L,                                               +\n               LOC=ANY\n         LR    R5,R1                            COPY ADDRESS\n         USING ENQ_CHAIN,R5                     DEFINE BASE\n         OC    LDA_ENQ_CHAIN,LDA_ENQ_CHAIN      ANYTHING ON CHAIN?\n         BNZ   ENQ0060                          YES\n         ST    R5,LDA_ENQ_CHAIN                 SAVE FIRST ON CHAIN\nENQ0060  DS    0H\n         ICM   R1,15,LDA_LAST_ENQ               LAST ENQ GETMAIN'D\n         BZ    ENQ0070\nLAST     USING ENQ_CHAIN,R1\n         ST    R5,LAST.ENQ_NEXT                 SET NEXT\n         DROP  LAST\nENQ0070  DS    0H\n         ST    R5,LDA_LAST_ENQ                  SAVE LAST ON CHAIN\n         XC    ENQ_NEXT,ENQ_NEXT\n         MVC   ENQ_JOB_NAME,RIBEJBNM            COPY JOB NAME\n         MVC   ENQ_QNAME,RIBQNAME               COPY QNAME\n         MVC   ENQ_RNAME,BLANKS                 INITIALIZE RNAME\n         MVI   ENQ_PLUS,C' '\n         LH    R1,RIBVLEN                       RNAME LENGTH\n         CH    R1,=Y(L'ENQ_RNAME)               TOO LONG?\n         BNH   ENQ0080                          NO\n         MVI   ENQ_PLUS,C'+'                    NAME TRUNCATED\n         LH    R1,=Y(L'ENQ_RNAME)               LIMIT LENGTH\nENQ0080  DS    0H\n         BCTR  R1,0\n         EX    R1,RNAME_MVC                     COPY RNAME\n         MVC   ENQ_SCOPE,RIBSCOPE               COPY SCOPE\n         MVC   ENQ_TYPE,RIBERFLG                COPY FLAGS\n         L     R1,RIBNTWE                       WAITING FOR EXCLUSIVE\n         A     R1,RIBNTWS                       PLUS WAITING FOR SHARED\n         ST    R1,ENQ_WAITING                   SAVE TOTAL WAITING\n         MVC   ENQ_STATUS,RIBESFLG              COPY STATUS\nENQ0090  DS    0H\n         AH    R6,LDA_RIBE_LENGTH               NEXT RIBE\n         BCT   R2,ENQ0040\nENQ0100  DS    0H\n         L     R1,RIBNRIBE                      NBR OF RIBE'S\n         MH    R1,LDA_RIBE_LENGTH               TIMES FIXED SIZE\n         AH    R1,LDA_RIB_LENGTH                PLUS FIXED RIB LENGTH\n         AH    R1,RIBVLEN                       PLUS VARIABLE RIB LEN\n         AR    R7,R1                            NEXT RIB\n         L     R1,LDA_RIBS                      NBR OF RIB'S\n         BCTR  R1,0                             MINUS 1\n         ST    R1,LDA_RIBS                      UPDATE REMAINING\n         LTR   R1,R1                            ANY LEFT?\n         BNZ   ENQ0030                          YES\n         CLI   LDA_GQSCAN_RC,8                  MORE DATA?\n         BE    ENQ0010                          YES\n* ------------------------------------------------------------------- *\n*        BUILD INDEX                                                  *\n* ------------------------------------------------------------------- *\nINDX0000 DS    0H\n         ICM   R0,15,LDA_NBR_ON_CHAIN           NBR ON CHAIN\n         BZ    ERR0010\n         SLL   R0,2                             MULTIPLY BY 4\n         ST    R0,LDA_INDEX_SIZE                SAVE INDEX SIZE\n         GETMAIN RU,                                                   +\n               LV=(0),                                                 +\n               LOC=ANY\n         ST    R1,LDA_INDEX_FIRST               SAVE ADDR OF INDEX\n         ST    R1,LDA_INDEX_CURR                SET CURRENT TO 1ST\n         ICM   R5,15,LDA_ENQ_CHAIN              FIRST ON CHAIN\n         BZ    ERR0020\nINDX0010 DS    0H\n         ST    R5,0(,R1)                        SAVE ENQ BLOCK ADDR\n         LA    R1,4(,R1)                        NEXT IN INDEX\n         ICM   R5,15,ENQ_NEXT                   NEXT ON CHAIN\n         BNZ   INDX0010                         LOOP\n         SH    R1,H4                            MINUS 4\n         ST    R1,LDA_INDEX_LAST\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   LDA_ZCMD(L'SORT),SORT\n         MVC   LDA_ZCMD+L'SORT(L'LDA_ENQ_SORT),LDA_ENQ_SORT\n         B     SORT0000                         SORT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBLD0000  DS    0H\n         L     R0,LDA_VDATA_ADDR                VDATA ADDRESS\n         L     R1,LDA_VDATA_SIZE                VDATA LENGTH\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                           INITIALIZE VDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LH    R9,LDA_VDEPTH                    NBR OF LINES\n         L     R8,LDA_VDATA_ADDR                VDATA\n         USING DETAIL,R8\n         L     R4,LDA_INDEX_CURR                FIRST TO DISPLAY\n* ------------------------------------------------------------------- *\n*        BUILD DETAIL                                                 *\n* ------------------------------------------------------------------- *\nBLD0010  DS    0H\n         L     R5,0(,R4)                        ENQ INFO\n         MVI   DETAIL_ATTR_1,1                  DEFAULT ATTRIBUTE\n         MVC   DETAIL_JOB_NAME,ENQ_JOB_NAME     COPY JOB NAME\n         MVC   DETAIL_QNAME,ENQ_QNAME           COPY QNAME\n         MVC   DETAIL_RNAME,ENQ_RNAME           COPY RNAME\n         MVC   DETAIL_PLUS,ENQ_PLUS             COPY TRUNCATE INDICATOR\n         TM    ENQ_SCOPE,RIBSYS                 SYSTEM?\n         BO    BLD0030\n         TM    ENQ_SCOPE,RIBSYSS                SYSTEMS?\n         BO    BLD0040\n         TM    ENQ_SCOPE,RIBSTEP                STEP?\n         BO    BLD0050\n         MVI   DETAIL_SCOPE,C'?'                UNKNOWN\n         B     BLD0060\nBLD0030  DS    0H\n         MVI   DETAIL_SCOPE,C'S'                SCOPE IS 'SYSTEM'\n         B     BLD0060\nBLD0040  DS    0H\n         MVI   DETAIL_SCOPE,C'X'                SCOPE IS 'SYSTEMS'\n         B     BLD0060\nBLD0050  DS    0H\n         MVI   DETAIL_SCOPE,C'T'                SCOPE IS 'STEP'\nBLD0060  DS    0H\n         TM    ENQ_TYPE,RIBETYPE                EXCLUSIVE?\n         BO    BLD0070                          NO\n         MVI   DETAIL_TYPE,C'E'                 EXCLUSIVE\n         B     BLD0080\nBLD0070  DS    0H\n         MVI   DETAIL_TYPE,C'S'                 SHARED\nBLD0080  DS    0H\n         ICM   R1,15,ENQ_WAITING                NBR OF TASKS WAITING\n         BZ    BLD0090\n         CVD   R1,LDA_DWORD                     CONVERT TO DECIMAL\n         MVC   DETAIL_WAITING,=X'40202120'      SET EDIT WORD\n         ED    DETAIL_WAITING,LDA_DWORD+6       EDIT NBR WAITING\n         B     BLD0100\nBLD0090  DS    0H\n         MVC   DETAIL_WAITING,=C'None'          NONE WAITING\nBLD0100  DS    0H\n         TM    ENQ_STATUS,RIBESTAT              OWN RESOURCE?\n         BO    BLD0110                          YES\n         MVI   DETAIL_STATUS,C'W'               WAITING\n         B     BLD0120\nBLD0110  DS    0H\n         MVI   DETAIL_STATUS,C'O'               OWN THE RESOURCE\nBLD0120  DS    0H\n         CLI   DETAIL_TYPE,C'E'                 EXCLUSIVE ENQ?\n         BNE   BLD0130                          NO\n         MVI   DETAIL_ATTR_1,2                  HIGHLIGHT\nBLD0130  DS    0H\n         CLI   DETAIL_STATUS,C'W'               WAITING?\n         BNE   BLD0140                          NO\n         MVI   DETAIL_ATTR_1,3                  SET COLOR TURQUOISE\n         B     BLD0150\nBLD0140  DS    0H\n         CLI   DETAIL_WAITING,C'N'              ANYONE ELSE WAITING?\n         BE    BLD0150                          NO\n         MVI   DETAIL_ATTR_1,4                  SET COLOR RED\nBLD0150  DS    0H\n         AH    R8,LDA_VWIDTH                    NEXT LINE\n         BCT   R9,BLD0210\n         B     DISP0000                         SCREEN FULL\nBLD0210  DS    0H\n         C     R4,LDA_INDEX_LAST                AT LAST ENQ BLOCK?\n         BE    DISP0000                         YES\n         LA    R4,4(,R4)                        NEXT\n         B     BLD0010                          BUILD DATA\nBLD0220  DS    0H\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0000 DS    0H\n         ISPLINK DISPLAY,(PANEL),RET8=EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for primary (ZCMD) commands                            *\n*                                                                     *\n*   First shift out any leading blanks                                *\n*   Second 'squeeze' out multiple blanks                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLC   LDA_ZCMD,BLANKS                   BLANK?\n         BE    DISP0120                          YES\n         LA    R2,L'LDA_ZCMD-1\nDISP0010 DS    0H\n         CLI   LDA_ZCMD,C' '                     BLANK?\n         BNE   DISP0020                          NO\n         MVC   LDA_ZCMD(L'LDA_ZCMD-1),LDA_ZCMD+1 SHIFT LEFT 1\n         MVI   LDA_ZCMD+(L'LDA_ZCMD-1),C' '      INSERT BLANK\n         BCT   R2,DISP0010                       LOOP\nDISP0020 DS    0H\n         LA    R1,LDA_ZCMD\nDISP0030 DS    0H\n         CLC   BLANKS(2),0(R1)                   TWO BLANKS?\n         BNE   DISP0040                          NO\n         EX    R2,CMD_MVC                        SHIFT LEFT 1\n         MVI   LDA_ZCMD+(L'LDA_ZCMD-1),C' '      INSERT BLANK\n         B     DISP0050\nCMD_MVC  MVC   0(0,R1),1(R1)                     SHIFT LEFT 1\nDISP0040 DS    0H\n         LA    R1,1(,R1)                         NEXT\nDISP0050 DS    0H\n         BCT   R2,DISP0030                       LOOP\n         CLC   SORT,LDA_ZCMD                     SORT?\n         BE    SORT0000                          YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Check for scrolling                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0120 DS    0H\n         NI    LDA_FLAGS,255-$LDA_VPUT\nDISP0130 DS    0H\n         ISPLINK VGET,(SCRLVARS,SHARED),RET8=DISP0140\n         CLC   ABEND,LDA_ZVERB                  ABEND?\n         BE    ABEND000                         YES\n         CLI   LDA_ZVERB,C'B'                   BOTTOM?\n         BE    DISP0230                         YES\n         CLI   LDA_ZVERB,C'D'                   SCROLL DOWN?\n         BE    DISP0200                         YES\n         CLI   LDA_ZVERB,C'T'                   TOP?\n         BE    DISP0180                         YES\n         CLI   LDA_ZVERB,C'U'                   SCROLL UP?\n         BE    DISP0150                         YES\nDISP0140 DS    0H\n         TM    LDA_FLAGS,$LDA_VPUT              ALREADY DONE VPUT?\n         BO    DISP0000                         YES\n         OI    LDA_FLAGS,$LDA_VPUT              SET VPUT FLAG\n         ISPLINK VPUT,(SCRLVARS,SHARED),RETNZ=*\n         B     DISP0130                         TRY VGET AGAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0150 DS    0H\n         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD\n         CLI   LDA_ZSCROLLA,C'M'                MAX?\n         BE    DISP0180                         YES\n         L     R1,LDA_ZSCROLLN                  NBR TO SCROLL\n         SLL   R1,2                             MULT BY 4\n         L     R0,LDA_INDEX_CURR                CURRENT STARTING POINT\n         SR    R0,R1                            MINUS SCROLL\n         C     R0,LDA_INDEX_FIRST               BEYOND TOP?\n         BL    DISP0180                         YES\n         ST    R0,LDA_INDEX_CURR                CHANGE STARTING POINT\n         B     BLD0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDISP0180 DS    0H\n         MVC   LDA_INDEX_CURR,LDA_INDEX_FIRST   FORCE TO FIRST\n         B     BLD0000                          RE-BUILD DISPLAY\n* ------------------------------------------------------------------- *\n*        SCROLL DOWN                                                  *\n* ------------------------------------------------------------------- *\nDISP0200 DS    0H\n         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD\n         CLI   LDA_ZSCROLLA,C'M'                MAX?\n         BE    DISP0230                         YES\n         L     R1,LDA_ZSCROLLN                  NBR OF LINES TO SCROLL\n         SLL   R1,2                             MULT BY 4\n         A     R1,LDA_INDEX_CURR                PLUS CURRENT\n         C     R1,LDA_INDEX_LAST                BEYOND END?\n         BH    DISP0230                         YES\n         ST    R1,LDA_INDEX_CURR                CHANGE START POINT\n         B     BLD0000                          REBUILD DISPLAY\n*---------------------------------------------------------------------*\n*        BOTTOM                                                       *\n*---------------------------------------------------------------------*\nDISP0230 DS    0H\n         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD\n         MVC   LDA_INDEX_CURR,LDA_INDEX_LAST    FORCE TO LAST\n         B     BLD0000                          REBUILD DISPLAY\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Sort ENQs                                                    *\n*                                                                     *\n*    Sort options are                                                 *\n*        JOB       JOB name                                           *\n*        SCOPE     Task, SYSTEM, or SYSTEMS                           *\n*        STATUS    Own or Wait status                                 *\n*        QNAME     QNAME (Major name)                                 *\n*        RNAME     RNAME (Minor name)                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSORT0000 DS    0H\n         CLC   SORT_JOB,LDA_ZCMD+L'SORT         SORT BY JOB NAME?\n         BE    SORT0010                         YES\n         CLC   SORT_SCOPE,LDA_ZCMD+L'SORT       SORT BY SCOPE?\n         BE    SORT0020                         YES\n         CLC   SORT_STATUS,LDA_ZCMD+L'SORT      SORT BY STATUS\n         BE    SORT0030                         YES\n         CLC   SORT_QNAME,LDA_ZCMD+L'SORT       SORT BY QNAME?\n         BE    SORT0040                         YES\n         CLC   SORT_RNAME,LDA_ZCMD+L'SORT       SORT BY RNAME\n         BE    SORT0050                         YES\n         LA    R0,6\n         BAL   R5,MSG0000                       SET MESSAGE\n         B     DISP0000\nSORT0010 DS    0H\n         MVC   LDA_SORT_CLC,JOB_CLC             COMPARE JOB NAMES\n         B     SORT0060\nSORT0020 DS    0H\n         MVC   LDA_SORT_CLC,SCOPE_CLC           COMPARE SCOPES\n         B     SORT0060\nSORT0030 DS    0H\n         MVC   LDA_SORT_CLC,STATUS_CLC          COMPARE SCOPES\n         B     SORT0060\nSORT0040 DS    0H\n         MVC   LDA_SORT_CLC,QNAME_CLC           COMPARE QNAMES\n         B     SORT0060\nSORT0050 DS    0H\n         MVC   LDA_SORT_CLC,RNAME_CLC           COMPARE RNAMES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Sort logic                                                   *\n*                                                                     *\n*  LDA_SORT_CLC will have been set to the CLC to use for compares     *\n*  LDA_INDEX_FIRST is the address of 1st ENQ_CHAIN in index table     *\n*  LDA_NBR_ON_CHAIN is the number of entries                          *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSORT0060 DS    0H\nA        USING ENQ_CHAIN,R4\nB        USING ENQ_CHAIN,R5\n         MVC   LDA_ENQ_SORT,LDA_ZCMD+L'SORT       COPY SORT FIELD NAME\n         MVC   LDA_ZCMD,BLANKS                    RESET COMMAND\n         L     R2,LDA_INDEX_FIRST                 FIRST IN TABLE\n         L     R7,LDA_NBR_ON_CHAIN                NUMBER ON CHAIN\nSORT0070 DS    0H\n         ST    R2,LDA_SORT_TOP                    SAVE LOOP START\n         LA    R3,4(,R2)                          ENTRY FOLLOWING 'TOP'\n         LR    R6,R7                              COPY NBR TO SCAN\n         BCTR  R6,0                               MINUS 1\n         CH    R6,H2                              AT LEAST 2 LEFT?\n         BL    BLD0000                            NO\nSORT0080 DS    0H\n         L     R4,0(,R2)                          ADDR OF RECORD 'A'\n         L     R5,0(,R3)                          ADDR OF RECORD 'B'\n         EX    R0,LDA_SORT_CLC                    COMPARE\n         BL    SORT0090                           A < B\n         XC    0(4,R2),0(R3)                      SWAP\n         XC    0(4,R3),0(R2)\n         XC    0(4,R2),0(R3)\nSORT0090 DS    0H\n         LA    R3,4(,R3)                          NEXT IN TABLE\n         BCT   R6,SORT0080                        LOOP\n         L     R2,LDA_SORT_TOP                    START OF LAST LOOP\n         LA    R2,4(,R2)                          DOWN 1\n         BCT   R7,SORT0070\n         DC    H'0'                               SHOULD NEVER HAPPEN\n\nJOB_CLC    CLC   A.ENQ_JOB_NAME,B.ENQ_JOB_NAME    COMPARE JOB NAMES\nSCOPE_CLC  CLC   A.ENQ_SCOPE,B.ENQ_SCOPE          COMPARE SCOPES\nSTATUS_CLC CLC   A.ENQ_STATUS,B.ENQ_STATUS        COMPARE STATUS\nQNAME_CLC  CLC   A.ENQ_QNAME,B.ENQ_QNAME          COMPARE QNAME\nRNAME_CLC  CLC   A.ENQ_RNAME,B.ENQ_RNAME          COMPARE RNAME\n           DROP  A,B\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        VDEFINE VARIABLES                                            *\n*        R1    1ST ISPLINK PARM LIST                                  *\n*        R2    NUMBER OF PARM LISTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVDEF0000 DS    0H\nVDEF0010 DS    0H\n         ISPLINK MF=(E,(R1))\n         LA    R1,10(,R1)\n         BCT   R2,VDEF0010\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        VDELETE VARAIBLES                                            *\n*                                                                     *\n*    It may be a bit cludgy, but copying \"+2\" allows the same         *\n*    parm list to be used for VDEFINE and VDELETE                     *\n*                                                                     *\n*                                                                     *\n*        R1    FIRST ISPLINK PARM LIST                                *\n*        R2    NUMBER OF PARM LISTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVDEL0000 DS    0H\n         LR    R3,R1                           FIRST PARAMETER LIST\n         MVC   LDA_PLIST(2),VDELLIST           COPY LIST\nVDEL0010 DS    0H\n         MVC   LDA_PLIST+2(2),2(R3)            COPY PARAMETER LIST\n         ISPLINK MF=(E,LDA_PLIST)              CALL ISPF INTERFACE\n         LA    R3,10(,R3)                      NEXT ISPLINK PLIST\n         BCT   R2,VDEL0010                     LOOP\n         BR    R5                              RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         LA    R0,3\n         BAL   R5,MSG0000\n         B     EXIT0000\nERR0020  DS    0H\n         LA    R0,4\n         BAL   R5,MSG0000\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSG0000  DS    0H\n         MVC   LDA_MSG,=CL8'SDFE000'\n         CVD   R0,LDA_DWORD                    CONVERT TO DECIMAL\n         UNPK  LDA_MSG+4(3),LDA_DWORD+6(2)     UNPACK MESSAGE NUMBER\n         OI    LDA_MSG+6,X'F0'                 MAKE SIGN PRINTABLE\n         ISPLINK SETMSG,(LDA_MSG)              SET ISPF MESSAGE\n         BR    R5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nABEND000 DS    0H\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ISPLINK VPUT,(SCRLAMT,PROFILE),RETNZ=*\n         ISPLINK VPUT,(ENQSORT,PROFILE),RETNZ=*\n         LA    R1,VARS\n         LA    R2,VARNUM\n         BAL   R5,VDEL0000\n         ISPLINK VDELETE,(CHARDATA)\n         L     R1,LDA_VDATA_ADDR\n         L     R0,LDA_VDATA_SIZE\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=(0)\n         ICM   R5,15,LDA_ENQ_CHAIN\n         BZ    EXIT0020                        NONE ON CHAIN\nEXIT0010 DS    0H\n         LR    R1,R5                           COPY ADDRESS\n         L     R5,ENQ_NEXT                     NEXT ON CHAIN\n         FREEMAIN RU,                          FREE ENQ BLOCK          +\n               A=(1),                                                  +\n               LV=ENQ_L\n         LTR   R5,R5                           END OF CHAIN\n         BNZ   EXIT0010                        NO\nEXIT0020 DS    0H\n         ICM   R1,15,LDA_INDEX_FIRST           INDEX ALLOCATED?\n         BZ    EXIT0030                        NO\n         L     R0,LDA_INDEX_SIZE               INDEX SIZE\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0030 DS    0H\n         XC    LDA_ENQ_CHAIN,LDA_ENQ_CHAIN\n         XC    LDA_INDEX_FIRST,LDA_INDEX_FIRST\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRNAME_MVC MVC  ENQ_RNAME(0),RIBEND             COPY RNAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLDASTART         DC    Q(LDAENQ)\n\nGQSCAN_I       GQSCAN  SCOPE=ALL,                                      +\n               QUIT=NO,                                                +\n               AREA=(*,GQSCAN_DATA_L),                                 +\n               MF=L\nGQSCAN_L       EQU    *-GQSCAN_I\n\nVDELLIST         ISPLINK VDELETE,(0),MF=L\n\nVARS             DS      0F\n                 ISPLINK VDEFINE,(FIXED4,LDA_ZSCROLLN,FIXED,4),MF=L\nVARL             EQU     *-VARS\n                 ISPLINK VDEFINE,(FIXED2,LDA_VWIDTH,FIXED,2),MF=L\n                 ISPLINK VDEFINE,(CHAR4,LDA_ZSCROLLA,CHAR,4),MF=L\n                 ISPLINK VDEFINE,(CHAR8,LDA_ZVERB,CHAR,8),MF=L\n                 ISPLINK VDEFINE,(CHAR80,LDA_ZCMD,CHAR,80),MF=L\nVARNUM           EQU     (*-VARS)/VARL\n\nH2               DC    H'2'\nH4               DC    H'4'\n\nALL              DC    CL8'ALL'\nBLANKS           DC    CL80' '\nPANEL            DC    CL8'SDFENQ'\nCVDATA           DC    CL8'VDATA'\nCVWIDTH          DC    CL8'VWIDTH'\nCVDEPTH          DC    CL8'VDEPTH'\nSORT             DC    C'SORT '\nSORT_JOB         DC    CL8'JOB '\nSORT_SCOPE       DC    CL8'SCOPE '\nSORT_STATUS      DC    CL8'STATUS '\nSORT_QNAME       DC    CL8'QNAME '\nSORT_RNAME       DC    CL8'RNAME '\n\nFIXED4           DC    C'(ZSCROLLN)'\nFIXED2           DC    C'(VWIDTH VDEPTH VVDEPTH)'\nCHARDATA         DC    C'(VDATA)'\nCHAR4            DC    C'(ZSCROLLA VSCR)'\nCHAR8            DC    C'(ZVERB ENQJNAME ENQSORT)'\nCHAR80           DC    C'(ZCMD)'\nSCRLAMT          DC    C'(VSCR)'\nENQSORT          DC    C'(ENQSORT)'\n\nSCRLVARS         DC    C'(ZVERB ZSCROLLA ZSCROLLN)'\n\nABEND            DC    C'ABEND'\n\nHEXCHAR          EQU   *-C'0'\n                 DC    C'0123456789ABCDEF'\n\n                 LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDETAIL           DC  0C\nDETAIL_ATTR_1    DS  X\nDETAIL_JOB_NAME  DS  CL8\n                 DS  C\nDETAIL_SCOPE     DS  C\n                 DS  C\nDETAIL_TYPE      DS  C\n                 DS  C\nDETAIL_STATUS    DS  C\n                 DS  C\nDETAIL_WAITING   DS  CL4\n                 DS  C\nDETAIL_QNAME     DS  CL8' '\n                 DS  X\nDETAIL_RNAME     DS  CL40' '\nDETAIL_PLUS      DS  C\nDETAIL_L         EQU *-DETAIL\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLDAENQ           DSECT\nLDAID            DS    CL8             MODULE IDENTIFIER\nSAVEAREA         DS    18F             PROGRAM REGISTER SAVE AREA\n                 DS    CL8\n\nLDA_DWORD        DS    D\n\nLDA_PLIST        DS    3F\n\nLDA_GQSCAN       DS    0F,(GQSCAN_L)X  GQSCAN MF=L\n\nLDA_VDATA_ADDR   DS    A               VDATA ADDRESS\nLDA_VDATA_SIZE   DS    F               VDATA SIZE\n\nLDA_TOKEN        DS    F\nLDA_RIB_LENGTH   DS    H               SIZE OF RIB'S\nLDA_RIBE_LENGTH  DS    H               SIZE OF RIBE'S\nLDA_RIBS         DS    F               NBR OF RIBS\n\nLDA_ZSCROLLN     DS    F               NBR OF LINES TO SCROLL\n\n\nLDA_ENQ_CHAIN    DS    A               CHAIN OF MATCHING ENQ DATA\nLDA_LAST_ENQ     DS    A               LAST ENQ BLOCK GETMAINED\nLDA_NBR_ON_CHAIN DS    F               NBR OF RIBE'S ON CHAIN\nLDA_INDEX_SIZE   DS    F               INDEX SIZE\nLDA_INDEX_FIRST  DS    A               1ST ENTRY IN INDEX\nLDA_INDEX_LAST   DS    A               LAST ENTRY IN INDEX\nLDA_INDEX_CURR   DS    A               CURRENT INDEX ENTRY\n\nLDA_SORT_TOP     DS    A\n\nLDA_SORT_CLC     CLC   0(0,R4),0(R5)\n\nLDA_VWIDTH       DS    H\nLDA_VDEPTH       DS    H\nLDA_VVDEPTH      DS    H\n\nLDA_ZSCROLLA     DS    CL4             SCROLL AMOUNT\nLDA_SCROLL       DS    CL4             SCROLL CONTROL (PAGE, CSR, ...)\n\nLDA_GQSCAN_RC    DS    X\n\nLDA_FLAGS        DS    X\n$LDA_ERROR       EQU   X'80'\n$LDA_VPUT        EQU   X'40'\n\nLDA_EDWORD       DS    XL4\n\nLDA_PLUS         DS    C\n\nLDA_ZVERB        DS    CL8             SCROLL VERB\nLDA_JOB_NAME     DS    CL8\nLDA_ENQ_SORT     DS    CL8\n\nLDA_MSG          DS    CL8\n\nLDA_ZCMD         DS    CL80\n\nLDA_GQSCAN_DATA  DS    8192X\nGQSCAN_DATA_L    EQU   *-LDA_GQSCAN_DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nENQ_CHAIN        DSECT\nENQ_NEXT         DS    A               NEXT ON CHAIN\nENQ_WAITING      DS    F               NBR OF WAITING FOR RESOURCE\nENQ_JOB_NAME     DS    CL8             JOB NAME\nENQ_QNAME        DS    CL8             QNAME\nENQ_RNAME        DS    CL40            RNAME\nENQ_PLUS         DS    C               RNAME TRUNCATION INDICATOR\nENQ_SCOPE        DS    X               SCOPE\nENQ_TYPE         DS    X               TYPE\nENQ_STATUS       DS    X               STATUS\nENQ_L            EQU   *-ENQ_CHAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         SDFYGDA  ,\n         SDFYPDA  ,\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n         IKJTCB   DSECT=YES,LIST=NO\n         ISGRIB   ,\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IATYREG ,\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SDFMAIN": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x08(\\x8f\\x01\\x08(\\x8f\\x14\\x13\\x07\\xcf\\x07\\xcf\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-10-14T00:00:00", "modifydate": "2008-10-14T14:13:18", "lines": 1999, "newlines": 1999, "modlines": 0, "user": "RLRICE"}, "text": "         TITLE 'SDFMAIN: JES3 SPOOL DISPLAY DRIVER'\n***********************************************************************\n*                                                                     *\n* MODULE NAME:     SDFMAIN                                            *\n*                                                                     *\n* FUNCTION:        SDFMAIN is the driver module for SDF (JES3         *\n*                  spool display facility).                           *\n*                                                                     *\n*                  SDFMAIN checks if the ISPF application id is 'SDF'.*\n*                  If not, SDF reinvokes itself using the ISPF select *\n*                  service with 'NEWAPPL(SDF)' specified.             *\n*                                                                     *\n*                  At initialization, SDFMAIN issues GETMAINs to get  *\n*                  two areas, one above and one below the 16mb line.  *\n*                                                                     *\n*                  The area above the 16mb line contains:             *\n*                  - A global data area (mapped by SDFYGDA) for data  *\n*                    commonly accessed by all subroutines.            *\n*                  - A local data area for each of the programs       *\n*                    linked with SDFMAIN.                             *\n*                                                                     *\n*                  On entry to all to all subprograms, register 12    *\n*                  contains the address of the global data area.      *\n*                  Register 12 must point to the global data area     *\n*                  at all times and should not be modified by any     *\n*                  subprograms.                                       *\n*                                                                     *\n*                  The high order bit of reg 12 is set as follows:    *\n*                  - 0 for main task                                  *\n*                  - 1 for subtask                                    *\n*                                                                     *\n*                  The area below the 16mb line contains:             *\n*                  - a 24-bit service data area (mapped by SDFYLSA).  *\n*                  - interface routines for 24-bit services.          *\n*                                                                     *\n*                  The address of the 24-bit (below the line)         *\n*                  services data area is contained in the             *\n*                  global data area (field GDALSA).                   *\n*                                                                     *\n*                  The 24-bit service interface routines are          *\n*                  embedded within SDFMAIN and copied into the        *\n*                  24-bit program area at initialization.             *\n*                                                                     *\n*                  These routines are fully described in the section  *\n*                  on 24-bit service interface routines below.        *\n*                  Entry point addresses for these routines are       *\n*                  placed in the global data area.                    *\n*                                                                     *\n* REQUIREMENTS:    SDF must be loaded from an APF authorized library. *\n*                                                                     *\n*                  SDF is a TSO command processor and must be called  *\n*                  from an ISPF environment.                          *\n*                                                                     *\n*                  Make sure that if the JES3 proc references the     *\n*                  JCT data set, that the dd statement specifies      *\n*                  DISP=SHR.  Failure to do so may prevent you from   *\n*                  doing a JES3 hot start while TSO is active.        *\n*                                                                     *\n*                  If the SDF DSP is not installed on your JES3       *\n*                  system, the JCT data set must be allocated.        *\n*                  Without the SDF DSP, when accessing spool          *\n*                  belonging to the user's JES3 complex, SDF          *\n*                  allocates the JCT data set to ddname SDFJCT.       *\n*                  SDFJCT remains allocated after SDF terminates for  *\n*                  reuse.                                             *\n*                                                                     *\n*                  You may access spool for another system by         *\n*                  specifying the 'NOSSI' parameter on the SDF        *\n*                  TSO command.  SDF finds the spool data sets by     *\n*                  reading the JES3 checkpoint data set, and then     *\n*                  reading the VTOC for those volumes listed in the   *\n*                  checkpoint volume record.                          *\n*                                                                     *\n*                  When accessing spool for another system            *\n*                  ('NOSSI' specified), you can preallocate           *\n*                  the JES3 checkpoint data set for the system to     *\n*                  be accessed.  If preallocated, specify the         *\n*                  CHKPNT('ddname') parameter on the SDF TSO command. *\n*                  Otherwise, SDF will display a panel for specifying *\n*                  the data set name and volser for the checkpoint    *\n*                  data set.                                          *\n*                                                                     *\n*                  As a debugging aid, you may allocate an SDFSNAP    *\n*                  file.  SDF will take a snap dump when an error is  *\n*                  detected if an SDFSNAP file is allocated.          *\n*                  The 'TRACE' parameter can be specified to          *\n*                  activate an internal trace table of calls and      *\n*                  returns.                                           *\n*                                                                     *\n* ENTRY POINTS:    SDFMAIN, normal entry                              *\n*                  SDFEXIT, entry point used to exit after error      *\n*                                                                     *\n* COMMAND SYNTAX:  SDF option/OPT(option)       (default none)        *\n*                      JOB(jobid)               (default none)        *\n*                      USERID(userid)           (default none)        *\n*                      NETID(netid)             (default none)        *\n*                      EXEC('cmd parms')        (default none)        *\n*                      SSI/NOSSI                (default SSI)         *\n*                      CHKPNT(ddname)           (default none)        *\n*                      DSP/NODSP                (default DSP)         *\n*                      TEST/NOTEST              (default NOTEST)      *\n*                                                                     *\n* PARAMETERS:      option     Specifies any valid option that can     *\n*                             be specfied from SDF main selection     *\n*                             panel.  Causes the specified option     *\n*                             to be selected without displaying the   *\n*                             SDF main selection panel.               *\n*                                                                     *\n*                             valid options are:                      *\n*                               A,C,J,JN,L,LB,LL,N,O,P,Q,R,S,T,U,Y,Z  *\n*                                                                     *\n*                             The option can also be specified        *\n*                             in the format OPT(option).              *\n*                             When this format is used, the option    *\n*                             text is scanned for a period.           *\n*                             All characters up to and including the  *\n*                             first period are ignored.               *\n*                             This allows SDF to be called from an    *\n*                             ISPF selection panel as follows:        *\n*                                                                     *\n*                             &ZSEL = TRANS(TRUNC(&ZCMD),'.')         *\n*                                     1,'CMD(SDF OPT(&ZCMD)) NOCHECK' *\n*                                     2, ...                          *\n*                                                                     *\n*                  jobid    - Specfies either a jobname or job number.*\n*                             Used in conjunction with select option  *\n*                             J, JN, or O.  Will automatically search *\n*                             for jobs with the specified job name or *\n*                             job number.                             *\n*                                                                     *\n*                  userid   - Specfies a userid.  Used in conjunction *\n*                             with select option J, JN, or O.  Will   *\n*                             automatically search for jobs submitted *\n*                             by the specified userid.                *\n*                                                                     *\n*                  netid    - Specfies a DJC network id.  Used in     *\n*                             conjunction with select option N.  Will *\n*                             automatically search for jobs belonging *\n*                             to the specified DJC network.           *\n*                                                                     *\n*                  cmd      - Specfies a REXX exec or TSO CLIST that  *\n*                             is to process the job specified in the  *\n*                             the JOB parameter.  If job name is      *\n*                             specified and multiple job names match, *\n*                             the exec is used to process each of the *\n*                             jobs.                                   *\n*                                                                     *\n*                             The exec name along with its parameters *\n*                             must be enclosed in quotes.             *\n*                                                                     *\n*                             The JOB parameter is required if EXEC   *\n*                             is specified.  The EXEC parameter is    *\n*                             required when executing SDF in batch.   *\n*                                                                     *\n*                  SSI      - Specfies that subsystem services are    *\n*                             to be used for spool access.            *\n*                             This is the default mode, and allows    *\n*                             access only to spool data sets within   *\n*                             the user's JES3 complex.                *\n*                                                                     *\n*                  NOSSI    - Specifies that no subsystem services    *\n*                             are to be used for spool access.        *\n*                             This allows reading spool data sets     *\n*                             in another JES3 complex.                *\n*                             Internal options/commands which cause   *\n*                             updates or use of the subsystem         *\n*                             interface are unavailable to the user.  *\n*                                                                     *\n*                  CHKPNT   - Specifies a ddname to which the JES3    *\n*                             checkpoint data set has been allocated. *\n*                             this parameter is used only when        *\n*                             NOSSI is specified.  If NOSSI is        *\n*                             specified and this parameter is         *\n*                             omitted, a panel will be displayed for  *\n*                             the user to enter the dsn and volser    *\n*                             of the checkpoint data set to be used.  *\n*                                                                     *\n*                  DSP      - Specfies that JES3 SDF DSP should be    *\n*                             used for job searches if installed.     *\n*                             This is the default mode, and allows    *\n*                             access only to spool data sets within   *\n*                             the user's JES3 complex.                *\n*                                                                     *\n*                  NODSP    - Specifies that job searches are to be   *\n*                             performed by reading the JCT data set   *\n*                             instead of using services of SDF DSP.   *\n*                             Some options/commands which require     *\n*                             communication with SDF DSP are then     *\n*                             unavailable to the user.                *\n*                                                                     *\n*                  TEST     - The test parameter activates an         *\n*                             internal trace table and enables        *\n*                             breakpoints.  Breakpoints are           *\n*                             established by inserting the break      *\n*                             macro instruction in the source code.   *\n*                                                                     *\n*                             This also causes a panel to be          *\n*                             displayed during SDF initialization     *\n*                             giving SDF entry point and data area    *\n*                             addresses.  This allows SDF execution   *\n*                             to be traced on a virtual machine under *\n*                             VM using the CP TRACE command.          *\n*                             command.                                *\n*                                                                     *\n* INPUT:           R1,  Address of the CPPL                           *\n*                                                                     *\n* OUTPUT:          R15, Return code                                   *\n*                                                                     *\n* PARAMETER LIST:  Same as CPPL                                       *\n*                                                                     *\n* ATTRIBUTES:      REENTRANT, REFRESHABLE, REUSABLE                   *\n*                  AMODE 31, RMODE ANY                                *\n*                                                                     *\n* CALLED BY:       None                                               *\n*                                                                     *\n* CALLED PROGRAMS: IKJPARS,  to parse command parameters              *\n*                  SDFAUTH,  to check read authorization              *\n*                  SDFALLOC, to unallocate data sets                  *\n*                  SDFBROWS, to browse spool data                     *\n*                  SDFDDCHK, to check ddname allocation               *\n*                  SDFERROR, to handle errors                         *\n*                  SDFISPF,  to invoke ISPF services                  *\n*                  SDFJESIO, to open/close spool data sets            *\n*                  SDFJOBQ,  to search/display job queue              *\n*                  SDFLOG,   to display SYSLOG by date/time           *\n*                  SDFPARM,  to set SDF parameter options             *\n*                  SDFPUTL,  to display messages                      *\n*                  SDFRECV,  to receive data sets                     *\n*                  SDFTRACE, to free trace table                      *\n*                  SDFVIEW,  to display JES3 console                  *\n*                  SDFZERO,  to display job zero                      *\n*                                                                     *\n* RETURN CODES:    None                                               *\n*                                                                     *\n* REGISTER USAGE:  R15, entry point address and return codes          *\n*                  R14, used for bal to subroutines                   *\n*                  R13, save area pointer                             *\n*                  R12, base for global data area                     *\n*                  R10-R11, program base                              *\n*                  R9,  base for local data area                      *\n*                  R8,  base for low strage area and user parameters  *\n*                  R7,  used for subroutine linkage                   *\n*                  R0-R6, general work registers                      *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n* CHANGE HISTORY:                                                     *\n*                                                                     *\n* 06/91  Bruce Engle                                                  *\n*        - Added new function to transmit data sets.                  *\n*        - Added new security administration function.                *\n*        - Changed to support JES 3.1.3 / RACF 1.9 security.          *\n*                                                                     *\n* 01/92  Bruce Engle                                                  *\n*        - Added new fields to SDF user parameter options.            *\n*                                                                     *\n* 07/92  Bruce Engle                                                  *\n*        - Changed to allow SDF to be invoked from native TSO.        *\n*        - Changed to support protected data area.                    *\n*                                                                     *\n* 02/94  Bruce Engle                                                  *\n*        - Added function to allocate SDF libraries.                  *\n*                                                                     *\n* 08/94  Bruce Engle                                                  *\n*        - Added option Q to display job queue without args panel.    *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                        GLOBAL VARIABLES                             *\n***********************************************************************\n         SPACE 1\n         PRINT NOGEN\n         SPACE 1\n         SDFVARS MODTYPE=INTERNAL      set global variables\n         SPACE 1\n         PRINT GEN\n         SPACE 3\n***********************************************************************\n*                             EQUATES                                 *\n***********************************************************************\n         SPACE 1\n         SDFYEQU ,                     standard equates\n         SPACE 1\n         PRINT NOGEN\n         SPACE 1\n         IATYREG ,                     register equates\n         IATYEQU ,                     standard equates\n         SDFYMSG  ,                    equates for message identifiers\n         SDFYALL  ,                    SDFALLOC function codes\n         SDFYBRO  ,                    SDFBROWS function codes\n         SDFYCPY  ,                    SDFCOPY function codes\n         SPACE 3\n***********************************************************************\n*                          MAPPING MACROS                             *\n***********************************************************************\n         SPACE 1\n         PRINT NOGEN\n         SPACE 1\n         IHAPSA ,                      PSA mapping\n         IHAASVT ,                     ASVT mapping\n         IHAASCB ,                     ASCB mapping\n         IHAASXB ,                     ASXB mapping\n         IHAACEE ,                     ACEE mapping\n         CVT   DSECT=YES               CVT mapping\n         IKJTCB ,                      TCB mapping\n         IHARB ,                       RB mapping\n         IHACDE ,                      CDE mapping\n         IKJCPPL ,                     CPPL mapping\n         IKJPPL ,                      PPL mapping\n         IKJPSCB ,                     PSCB mapping\n         IKJTSVT ,                     TSVT mapping\n         IEFJSCVT                      SSCT mapping\n         IEFJESCT                      JESCT mapping\n         IATYDAT ,                     DAT mapping\n         IATYDST ,                     DST mapping\n         IATYSVT                       SSVT mapping\n         IATYMOD BRANCH=NO,DSECT=YES   module id mapping\n         IATYISR ,                     ISR mapping\n         IATYIOP ,                     IOP mapping\n         IATYBLK ,                     block I/O control block\n         DCBD  DEVD=DA,DSORG=PO        DCB mapping\n         SPACE 1\n         PRINT GEN\n         EJECT\n***********************************************************************\n*        REINVOKE SDF IF ISPF APPLICATION ID IS NOT 'SDF'             *\n***********************************************************************\n         SPACE 1\nSDFMAIN  CSECT\nSDFMAIN  AMODE 31\nSDFMAIN  RMODE ANY\n         B     START-*(,R15)           branch aroud identifier\n         DC    AL1(L'IDENT)\nIDENT    DC    C'SDFMAIN 94/08/19 '    module identifier\nVERSION  SDFVERS ,                     SDF version\n         DC    C' '\n         DC    A(EPAAUTH)              address of entry point list\nSTART    DS    0H\n         SAVE  (14,12)\n         LR    R11,R15                 set program base registers\n         LA    R15,2048\n         LA    R10,2048(R15,R11)\n         USING SDFMAIN,R11,R10         base for program\n         LR    R4,R1                   save parameter list address\n         USING CPPL,R4\n         LA    R0,INITLEN\n         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=ANY\n         LR    R15,R13                 save caller's save area addr\n         LR    R13,R1                  point to our save area\n         USING SAVEINIT,R13\n         ST    R15,SAVEINIT+4          store backward save area ptr\n         ST    R13,8(,R15)             save forward save area ptr\n         XR    R12,R12                 clear global data area addr\n         USING PSA,0                   base for PSA\n         L     R3,PSATOLD              get TCB address\n         USING TCB,R3                  base for TCB\n         B     STRT040\nSTRT010  DS    0H\n         ICM   R0,B'1111',TCBRBP\n         BZ    STRT020\nSTRT020  DS    0H\n         CR    R0,R3                   last RB ?\n         BE    STRT030                 branch if yes\n         LR    R2,R0                   point to RB\n         USING RBBASIC,R2\n         ICM   R0,B'0111',RBLINKB      point to next RB\n         BNZ   STRT020                 loop until last RB\nSTRT030  DS    0H\n         TM    RBSIZE+2,RBFTP          check RB type\n         BNZ   STRT040                 branch if not PRB\n         XR    R1,R1\n         ICM   R1,B'0111',RBCDE1       point to CDE for this RB\n         BZ    STRT040                 branch if no CDE\n         USING CDENTRY,R1              base for CDE\n         CLC   CDNAME,ISPTASK          is this CDE for ISPTASK\n         BE    STRT060                 branch if yes\nSTRT040  DS    0H\n         ICM   R3,B'1111',TCBOTC       get parent TCB address\n         BZ    STRT050                 loop until last subtask\n         CL    R3,TCBJSTCB             job step TCB ?\n         BNE   STRT010\nSTRT050  DS    0H\n         L     R1,CPPLCBUF             point to command buffer\n         LH    R15,0(,R1)              get command length\n         SH    R15,=Y(5)               text length for execute\n         MVC   ICOMMAND(13),=CL13'ISPSTART CMD('\n         EX    R15,MOVCMD1             move in command\n*MOVCMD1 MVC   ICOMMAND+13(0),4(R1)\n         LA    R1,ICOMMAND+14(R15)\n         MVC   0(14,R1),=CL14') NEWAPPL(SDF)'\n         LA    R1,14(,R1)              point to end of text\n         LA    R0,ICOMMAND             point to start of text\n         SR    R1,R0                   get text length\n         ST    R1,ILENGTH\n         LA    R14,CMDFLAGS            get TSF parameter addresses\n         LA    R15,ICOMMAND\n         LA    R0,ILENGTH\n         LA    R1,IRETCODE\n         LA    R2,IRSNCODE\n         LA    R3,IABNCODE\n         STM   R14,R3,IPLIST           initialize TSF parameter list\n         OI    IPLIST+20,X'80'         mark end of parameter list\n         L     R15,CVTPTR              get CVT address\n         USING CVT,R15                 base for CVT\n         L     R15,CVTTVT              get TSVT address\n         USING TSVT,R15                base for TSVT\n         L     R15,TSVTASF             TSO Service Facility entry point\n         LA    R1,IPLIST               point to parameter list\n         BASR  R14,R15                 call TSO Service Facility\n         LA    R5,4                    indicate processing complete\n         B     STRT090\nSTRT060  DS    0H\n         LA    R5,4                    branch index to stop\n         L     R2,CPPLCBUF             point to command buffer\n         LH    R15,0(,R2)              get command length\n         SH    R15,=Y(5)               text length for execute\n         MVC   ICOMMAND(4),=CL4'CMD('  clear command buffer\n         EX    R15,MOVCMD2             move in command\n*MOVCMD2 MVC   ICOMMAND+4(0),4(R2)\n         LA    R2,ICOMMAND+5(R15)      point to end of command\n         MVC   0(14,R2),=CL14') NEWAPPL(SDF)'\n         LA    R2,14(,R2)              point to end of command\n         XC    ZAPPLID,ZAPPLID         clear applid field\n         LA    R0,L'ZAPPLID\n         ST    R0,ILENGTH              set applid length\n         ISPLINK VCOPY,(CZAPPLID,ILENGTH,ZAPPLID,MOVE)\n         LTR   R15,R15                 VCOPY error occur ?\n         BNZ   STRT090                 branch if yes\n         CLC   ZAPPLID(L'SDF),SDF      applid SDF ?\n         BNE   STRT080                 branch if yes\n         XR    R5,R5                   set branch index to continue\n         USING PSA,0                   base for PSA\n         L     R15,PSAAOLD             get ASCB address\n         USING ASCB,R15                base for ASCB\n         ICM   R0,B'1111',ASCBTSB      are we running in batch mode ?\n         BZ    STRT090                 if no TSB, running in batch\n         DDCHK DDNAME=SDFTLIB          see if SDFTLIB allocated\n         LTR   R15,R15                 library allocated ?\n         BZ    STRT070                 yes, branch\n         L     R3,IPAADDR              get addr of installation options\n         USING IPA,R3                  base for installation options\n         ICM   R0,B'1111',IPATLIB      any SDFTLIB defined ?\n         BZ    STRT090                 no, branch\n         SDFCALL SDFALLOC,(ALLLIB)     allocate SDF libraries\nSTRT070  DS    0H\n         ISPLINK LIBDEF,(ISPTLIB,LIBRARY,SDFTLIB,COND),RET8=*\n         LTR   R15,R15                 LIBDEF successful ?\n         BNZ   STRT090                 branch if yes\n         MVC   0(8,R2),=CL8' PASSLIB'\n         LA    R2,8(,R2)               point to end of text\nSTRT080  DS    0H\n         LA    R5,4                    branch index to stop\n         LA    R0,ICOMMAND             point to start of text\n         SR    R2,R0                   get text length\n         ST    R2,ILENGTH\n         ISPLINK SELECT,(ILENGTH,ICOMMAND),RETNZ=*\nSTRT090  DS    0H\n         LA    R0,INITLEN              get area length\n         LR    R1,R13                  point to start of area\n         L     R13,SAVEINIT+4          restore caller's save area addr\n         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL\n         B     *+4(R5)                 branch according to index\n         B     DATAINIT                - continue processing\n         B     EXITB                   - exit program\n         DROP  R1,R2,R3\n         EJECT\n***********************************************************************\n*        INITIALIZE DATA AREAS                                        *\n***********************************************************************\n         SPACE 1\nDATAINIT DS    0H\n         L     R2,LDASIZE              get length of external work area\n         LA    R2,GDASIZE(,R2)         add size for GDA\n         LA    R2,WAVTSIZE(,R2)        add size for WAVT\n         LA    R2,UPASIZE(,R2)         add size for UPA\n         LA    R3,X'400'-1(,R2)        round up to 1K boundary\n         N     R3,=A(X'7FFFFC00')\n         GETMAIN RU,LV=(3),SP=SUBPOOL,LOC=ANY\n         LR    R12,R1                  start of global data area\n         LR    R14,R12                 start of external area\n         LR    R15,R2                  length of external area\n         XR    R0,R0\n         XR    R1,R1\n         MVCL  R14,R0                  clear external area\n         USING GDA,R12                 base for global data area\n         MVC   GDAID,=CL4'GDA'         move in identifier\n         LA    R0,GDASIZE\n         ST    R0,GDALEN               set GDA length field\n         LA    R1,GDASIZE(,R12)        point to work area vector table\n         ST    R1,GDAWAVT              save WAVT address\n         USING WAVT,R1\n         MVC   WAVTID,=CL4'WAVT'       move in identifier\n         LA    R0,WAVTSIZE\n         ST    R0,WAVTLEN              set WAVT length field\n         AR    R1,R0                   point to user parameter area\n         ST    R1,GDAUPA               save UPA address\n         USING UPA,R1\n         MVC   UPAID,=CL4'UPA'         move in identifier\n         LA    R0,UPASIZE\n         ST    R0,UPALEN               set WAVT length field\n         LA    R9,UPASIZE(,R1)         point to dummy external area\n         ST    R9,GDALDA               save external section address\n         A     R9,LDASTART             start of local external wk area\n         USING LDAMAIN,R9              base for external work area\n         LR    R15,R13                 caller's save area address\n         LA    R13,SAVEAREA            point to save area\n         ST    R15,SAVEAREA+4          store backward save area ptr\n         ST    R13,8(,R15)             store forward save area ptr\n         ST    R3,LDALEN               save external section length\n         LA    R2,LSASIZE              size of low storage area\n         GETMAIN RU,LV=(2),SP=SUBPOOL,LOC=(BELOW,ANY)\n         LR    R8,R1                   point to 24-bit service area\n         USING LSA,R8\n         ST    R8,GDALSA               save starting address\n         LA    R0,LSAWORK\n         ST    R0,GDALWORK             save addr of general work area\n         LA    R14,LSA                 start of area to clear\n         LR    R15,R2                  length of area to clear\n         XR    R0,R0\n         XR    R1,R1\n         MVCL  R14,R0                  clear 24-bit service area\n         MVC   LSAID,=CL4'LSA'         move in identifier\n         ST    R2,LSALEN               save length\n         LA    R0,LSAAMVT              get addr of AMVT\n         ST    R0,LSAAMVTA             set AMVT pointer\n         MVC   GDAEPTBL(EPALEN),EPALIST initialize entry point addr\n         MVC   GDASVERS,VERSION+4      set SDF version number\n         MVC   MVER(6),VERSION\n         MVI   MVER+6,C'.'\n         MVC   MVER+7(2),VERSION+6\n         MVI   GDABLANK,C' '           initialize constant fields\n         MVC   GDABLANK+1(L'GDABLANK-1),GDABLANK\n         MVI   GDAFFFF,X'FF'\n         MVC   GDAFFFF+1(L'GDAFFFF-1),GDAFFFF\n         MVC   GDADXLEN,LDASIZE        save LDA area size\n         ST    R4,GDACPPL              save ptr to CPPL\n         STM   R9,R12,BASEREG          save base regs for parse exit\n         LA    R6,PPLIST               point to PPL\n         USING PPL,R6\n         L     R0,CPPLUPT              get UPT ptr\n         L     R1,CPPLECT              get ect ptr\n         LA    R2,CPECB                get ECB ptr\n         STM   R0,R2,PPLUPT            set up PPL pointers\n         MVC   PPLCBUF,CPPLCBUF        set command buffer ptr\n         LA    R0,BASEREG\n         ST    R0,PPLUWA               set user work area ptr\n         L     R0,PCLPTR1\n         ST    R0,PPLPCL               set PPL ptr\n         LA    R0,PDLPTR\n         ST    R0,PPLANS               set answer area ptr\n         DROP  R4,R6\n         USING PSA,0\n         L     R3,PSATOLD              point to current TCB\n         USING TCB,R3\n         ST    R3,GDATCB\n         L     R3,GDALDA               get address of first LDA\n         L     R2,GDAEPTBL             get address of entry point table\n         LA    R1,64*8(,R2)            limit for loop\n         LA    R0,8                    increment for loop\nDATA010  DS    0H\n         CLI   0(R2),X'FF'             end of entry point table ?\n         BE    PARSE                   branch if yes\n         ICM   R14,B'1111',4(R2)       get offset for LDA\n         BM    DATA020                 branch if no LDA\n         ICM   R15,B'1111',0(R2)       get entry point address\n         BZ    DATA020                 branch if null\n         AR    R14,R3                  get address of LDA\n         MVC   0(3,R14),=CL3'LDA'      move LDA prefix into identifier\n         MVC   3(5,R14),5+3(R15)       move in module name suffix\nDATA020  DS    0H\n         BXLE  R2,R0,DATA010           loop for each module\n         DROP  R1\n         EJECT\n***********************************************************************\n*        PARSE THE INPUT PARAMETERS                                   *\n***********************************************************************\n         SPACE 1\nPARSE    DS    0H\n         MVC   GDAZCMD,GDABLANK\n         MVC   PRIMOPT,GDABLANK\n         LA    R6,PPLIST               point to PPL\n         USING PPL,R6\n         L     R4,PPLCBUF              point to command buffer\n         LH    R1,0(,R4)               get command buffer length\n         AR    R1,R4                   point to end of command buffer\n         BCTR  R1,0                    limit for scan\n         LA    R0,1                    increment for scan\n         LH    R15,2(,R4)              get operands offset\n         LA    R3,4(R15,R4)            point to start of operands\n         CR    R3,R1                   any operands ?\n         BH    PARS220                 branch if no\n         LR    R2,R3                   save starting address\nPARS010  DS    0H\n         CLI   0(R2),C' '              end of operand ?\n         BNH   PARS030                 branch if yes\n         CLI   0(R2),C'.'              period ?\n         BE    PARS050                 branch if yes\n         CLI   0(R2),C'A'-X'40'        keyword parameter ?\n         BL    PARS090                 yes, not a select option\n         CLI   0(R2),C'Z'-X'40'        lower case alpha ?\n         BH    PARS020                 branch if no\n         OI    0(R2),X'40'             fold to upper case\nPARS020  DS    0H\n         BXLE  R2,R0,PARS010           loop until end of operand\nPARS030  DS    0H\n         CR    R2,R3                   compute operand length\n         BNH   PARS220\n         XR    R14,R14\n         LA    R0,2(,R3)\n         CR    R2,R0                   longer than 2 characters ?\n         BH    PARS090                 yes, can not be select option\n         BL    PARS070                 branch if only one character\n         ICM   R14,B'0011',0(R3)       insert two characters\n         LA    R0,2                    increment for loop\n         LA    R1,KEYTBEND             limit for loop\n         LA    R15,KEYTABLE            index for loop\nPARS040  DS    0H\n         CLM   R14,B'0011',0(R15)      select option found ?\n         BE    PARS090                 branch if match found\n         BXLE  R15,R0,PARS040          loop until end of keyword table\n         B     PARS070\nPARS050  DS    0H\n         CLI   0(R2),C' '              end of operand ?\n         BNH   PARS070                 branch if yes\n         CLI   0(R2),C'A'-X'40'        lower case alpha ?\n         BL    PARS060                 branch if no\n         CLI   0(R2),C'Z'-X'40'        lower case alpha ?\n         BH    PARS060                 branch if no\n         OI    0(R2),X'40'             fold to upper case\nPARS060  DS    0H\n         BXLE  R2,R0,PARS050           loop until end of operand\nPARS070  DS    0H\n         SR    R2,R3                   compute option length\n         BNP   PARS090                 branch if none\n         LR    R0,R2\n         AH    R0,2(,R4)               compute new buffer offset\n         STH   R0,2(,R4)               save new buffer offset\n         CH    R2,=Y(L'PRIMOPT)        over max length ?\n         BNH   PARS080                 branch if no\n         LA    R2,L'PRIMOPT            reset to max length\nPARS080  DS    0H\n         BCTR  R2,0                    decrement for execute\n         EX    R2,MOVOPT1              move in secondary option\n*MOVOPT1 MVC   PRIMOPT(0),0(R3)\nPARS090  DS    0H\n         LH    R1,2(,R4)               get buffer offset\n         LA    R1,4(,R1)               add buffer prefix length\n         CH    R1,0(,R4)               anything left to parse ?\n         BNL   PARS220                 branch if no\n         L     R0,PCLPTR1              point to PCL\n         BAS   R7,PARSCALL             call TSO parse routine\n         B     FINISH                  - error return\n         L     R5,PDLPTR               point to pdl\n         USING SDFPDL1,R5\n         CLI   PDEKOPT+1,0             was OPT parameter specified ?\n         BE    PARS140                 branch if not specified\n         ICM   R2,B'1111',PDEOPT       point to select option text\n         BZ    PARS140                 branch if no select option\n         LH    R1,PDEOPT+4             get length of select option\n         LTR   R1,R1                   anything entered ?\n         BZ    PARS140                 branch if nothing entered\n         LR    R14,R1                  remaining length for scan\n         LR    R15,R2                  starting point for scan\n         B     PARS110\nPARS100  DS    0H                      eat everything up to first '.'\n         CLI   0(R15),C'.'             scan for first '.'\n         LA    R15,1(,R15)             point to next character\n         BE    PARS120                 branch if '.' found\nPARS110  DS    0H                      eat everything up to first '.'\n         BCT   R14,PARS100             scan until end of option text\n         B     PARS140                 no period found\nPARS120  DS    0H\n         LTR   R14,R14\n         BNP   PARS140\n         CH    R14,=Y(L'PRIMOPT)       over max length ?\n         BNH   PARS130                 branch if no\n         LA    R14,L'PRIMOPT           reset to max length\nPARS130  DS    0H\n         BCTR  R14,0                   decrement for execute\n         EX    R14,MOVOPT2\n*MOVOPT2 MVC   PRIMOPT(0),0(R15)       move select option\nPARS140  DS    0H\n         MVC   JOBID,GDABLANK          clear job name/number\n         CLI   PDEKJOB+1,0             jobid specified ?\n         BE    PARS150                 branch if no\n         ICM   R2,B'1111',PDEJOB       point to jobid\n         BZ    PARS150                 branch if no jobid\n         LH    R1,PDEJOB+4             get jobid length\n         LTR   R1,R1\n         BNP   PARS150                 branch if zero length\n         BCTR  R1,0                    decrement for execute\n         EX    R1,MOVJOB\n*MOVJOB  MVC   JOBID(0),0(R2)          move job name/number\nPARS150  DS    0H\n         MVC   USERID,GDABLANK         clear userid\n         CLI   PDEKUSER+1,0            userid specified ?\n         BE    PARS160                 branch if no\n         ICM   R2,B'1111',PDEUSER      point to userid\n         BZ    PARS160                 branch if no userid\n         LH    R1,PDEUSER+4            get userid length\n         LTR   R1,R1\n         BNP   PARS160                 branch if zero length\n         BCTR  R1,0                    decrement for execute\n         EX    R1,MOVUSID\n*MOVUSID MVC   USERID(0),0(R2)         move userid\nPARS160  DS    0H\n         MVC   NETID,GDABLANK          clear netid\n         CLI   PDEKNET+1,0             netid specified ?\n         BE    PARS170                 branch if no\n         ICM   R2,B'1111',PDENET       point to netid\n         BZ    PARS170                 branch if no netid\n         LH    R1,PDENET+4             get netid length\n         LTR   R1,R1\n         BNP   PARS170                 branch if zero length\n         BCTR  R1,0                    decrement for execute\n         EX    R1,MOVNET\n*MOVNET  MVC   NETID(0),0(R2)          move netid\nPARS170  DS    0H\n         CLI   PDEKSSI+1,1             was 'NOSSI' specified ?\n         BH    PARS180                 branch if 'NOSSI'\n         OI    GDASTAT,GDASSSI         set to use subsystem services\n         CLI   PDEKDSP+1,1             was 'NODSP' specified ?\n         BH    PARS190                 branch if 'NODSP'\n         OI    GDASTAT,GDASDSP         set to use SDF DSP services\n         B     PARS190\nPARS180  DS    0H\n         MVC   CKPDDNAM,GDABLANK       clear checkpoint ddname\n         CLI   PDEKCKP+1,0             checkpoint ddname specified ?\n         BE    PARS190                 branch if no\n         OI    MAINFLAG,CKPALLOC       show checkpoint allocated\n         ICM   R2,B'1111',PDECKP       point to ddname\n         BZ    PARS190                 branch if no ddname\n         LH    R1,PDECKP+4             get ddname length\n         LTR   R1,R1\n         BNP   PARS190                 branch if zero length\n         BCTR  R1,0                    decrement for execute\n         EX    R1,MOVCKP\n*MOVCKP  MVC   CKPDDNAM(0),0(R2)        move checkpoint ddname\nPARS190  DS    0H\n         CLI   PDEKRIN+1,0             was 'REINIT' specified ?\n         BE    PARS200                 branch if no reinit\n         OI    GDASTAT,GDASRIN         indicate reinit wanted\nPARS200  DS    0H\n         CLI   PDEKTEST+1,1            was 'TEST' specified ?\n         BNE   PARS210                 branch if no 'test'\n         OI    GDASTAT,GDASTRC+GDASBRK   indicate trace table active\nPARS210  DS    0H\n         BAS   R7,PARSFREE             free IKJPARS storage\n         TM    GDASTAT,GDASRIN         was 'REINIT' specified ?\n         BZ    PARS230                 branch if no\n         L     R1,GDACPPL              get CPPL address\n         USING CPPL,R1\n         L     R1,CPPLPSCB             get PSCB address\n         USING PSCB,R1\n         TM    PSCBATR1,PSCBCTRL       user have oper authority ?\n         BO    PARS230                 branch if yes\n         SDFCALL SDFPUTL,(MSG009)      oper required for REINIT\n         B     FINISH\nPARS220  DS    0H\n         OI    GDASTAT,GDASDSP+GDASSSI set default flag values\nPARS230  DS    0H\n         L     R15,PSAAOLD             get ASCB address\n         USING ASCB,R15                base for ASCB\n         ICM   R0,B'1111',ASCBTSB      are we running in batch mode ?\n         BZ    PARS250                 if no TSB, running in batch\n         ICM   R0,B'0011',EXECLEN      EXEC parameter specified ?\n         BZ    INIT                    branch if no\n         CLI   JOBID,C' '              job name/number specified ?\n         BH    INIT                    branch if yes\n         LA    R0,CMDBUF               switch to null command buffer\n         ST    R0,PPLCBUF              command buffer ptr\n         L     R0,PCLPTR2              point to PCL\n         BAS   R7,PARSCALL             call TSO parse routine\n         B     FINISH                  - error return\n         L     R5,PDLPTR               point to pdl\n         USING SDFPDL2,R5\n         MVC   JOBID,GDABLANK          clear job name/number\n         ICM   R2,B'1111',PDEJOB2      point to jobid\n         BZ    PARS240                 branch if no jobid\n         LH    R1,PDEJOB2+4            get jobid length\n         LTR   R1,R1\n         BNP   PARS240                 branch if zero length\n         BCTR  R1,0                    decrement for execute\n         EX    R1,MOVJOB\n*MOVJOB  MVC   JOBID(0),0(R2)          move job name/number\nPARS240  DS    0H\n         BAS   R7,PARSFREE             free IKJPARS storage\n         B     INIT\nPARS250  DS    0H\n         LA    R2,MSGEXEC              point to required batch operand\n         ICM   R0,B'0011',EXECLEN      EXEC operand specified ?\n         BZ    PARS260                 branch if no\n         LA    R2,MSGJOB               point to required batch operand\n         CLI   JOBID,C' '              JOB operand specified ?\n         BNH   PARS260                 branch if no\n         TM    GDASTAT,GDASSSI         NOSSI specified ?\n         BO    INIT                    branch if no\n         LA    R2,MSGCHKPT             point to required batch operand\n         CLI   CKPDDNAM,C' '           CHKPNT operand specified ?\n         BH    INIT                    branch if yes\nPARS260  DS    0H\n         SDFCALL SDFPUTL,(MSG008,0(R2)) required parameter missing\n         B     FINISH\n         DROP  R1,R5,R6\n         EJECT\n***********************************************************************\n*        INITIALIZE THE ENVIRONMENT                                   *\n***********************************************************************\n         SPACE 1\nINIT     DS    0H\n         ST    R12,STAEPARM\n         LA    R0,TERMMAIN\n         ST    R0,STAEPARM+4\n         L     R2,=V(SDFESTAE)\n         MVC   LSALIST1(ESTAEL),ESTAE\n         ESTAE (2),PARAM=STAEPARM,MF=(E,LSALIST1)\n         SDFCALL SDFALLOC,(ALLLIB)     allocate SDF libraries\n         MVC   DDNAME,SDFTLIB\n         MVI   DDNAME+3,C'P'           set ddname for panels\n         BAS   R7,LIBDEF               define panel library\n         MVI   DDNAME+3,C'M'           set ddname for message\n         BAS   R7,LIBDEF               define message library\n         MVI   DDNAME+3,C'L'           set ddname for load library\n         BAS   R7,LIBDEF               define load library\n         CLI   LIBTYPE+3,C'L'          load library needed ?\n         BNE   INIT010                 branch if no\n         MVC   LSALDCB,BPAMDCB         move in model DCB\n         MVC   LSALIST1(OPENL),OPEN\n         OPEN  (LSALDCB),MF=(E,LSALIST1)\n         TM    DCBOFLGS-IHADCB+LSALDCB,DCBOFOPN  opened ?\n         BZ    INIT010                 branch if no\n         LA    R0,LSALDCB\n         ST    R0,GDALDCB\nINIT010  DS    0H\n         DDCHK DDNAME=SDFEXEC          see if SDFEXEC allocated\n         LTR   R15,R15                 library allocated ?\n         BNZ   INIT020                 branch if no\n         LA    R14,CMDFLAGS            get TSF parameter addresses\n         LA    R15,ALTLBCMD\n         LA    R0,ALTLBLEN\n         LA    R1,RETCODE\n         LA    R2,RSNCODE\n         LA    R3,ABNCODE\n         STM   R14,R3,LSALIST1         initialize TSF parameter list\n         OI    LSALIST1+20,X'80'       mark end of parameter list\n         L     R15,CVTPTR              get CVT address\n         USING CVT,R15                 base for CVT\n         L     R15,CVTTVT              get TSVT address\n         USING TSVT,R15                base for TSVT\n         L     R15,TSVTASF             TSO Service Facility entry point\n         LA    R1,LSALIST1             point to parameter list\n         BASR  R14,R15                 call TSO Service Facility\nINIT020  DS    0H\n         TM    GDASTAT,GDASTRC         trace table to be used ?\n         BZ    INIT030                 branch if no\n         L     R1,GDALDCB              get load library DCB addreess\n         LOAD  EPLOC=SDFTRACE,DCB=(1)  load SDFTRACE\n         ST    R0,GDATRACE             save SDFTRACE entry point addr\nINIT030  DS    0H\n         TM    GDASTAT,GDASBRK         breakpoints enabled ?\n         BZ    INIT040                 branch if no\n         L     R1,GDALDCB              get load library DCB addreess\n         LOAD  EPLOC=SDFBREAK,DCB=(1)  load SDFBREAK\n         ST    R0,GDABREAK             save SDFBREAK entry point addr\n         L     R1,GDALDCB              get load library DCB addreess\n         LOAD  EPLOC=SDFMAP,DCB=(1)    load SDFMAP\n         ST    R0,GDAMAP               save SDFMAP entry point addr\nINIT040  DS    0H\n         L     R0,PSATOLD              get TCB address\n         STCM  R0,B'0111',DOUBLE\n         UNPK  GDATBLID,DOUBLE(4)\n         TR    GDATBLID,HEXCHAR        convert to printable hex\n         MVI   GDATBLID+7,C' '         use TCB addr for ISPF table id\nINIT050  DS    0H\n         ISPLINK CONTROL,(ERRORS,RETURN)\n         LTR   R15,R15\n         BNZ   FINISH\n         L     R8,GDAUPA               point to user parameter area\n         USING UPA,R8\n         LA    R1,VARS                 point to VDEFINE parameter list\n         LA    R2,VARNUM               number of parameter lists\n         BAS   R7,VDEFINE              define variables\n         L     R15,CVTPTR              point to CVT\n         USING CVT,R15\n         L     R2,CVTJESCT             point to JESCT\n         USING JESCT,R2\n         L     R1,JESCTEXT             get the JESCT extension\n         USING JESPEXT,R1              JESCT extension\n         ICM   R0,B'1111',JESSMSIB     any SMS?\n         BZ    INIT060                 branch if no\n         OI    GDASTAT,GDASSMS         indicate SMS active\nINIT060  DS    0H\n         L     R2,JESSSCT              point to SSCT\n         USING SSCT,R2\n         L     R2,SSCTSSVT             point to SSVT\n         USING SSVT,R2\n         ST    R2,GDASSVT              save SSVT address\n         ICM   R1,B'1111',SVTRSVU4     SDVT initialized ?\n         BZ    INIT070                 branch if no SDVT\n         USING SDVT,R1\n         CLC   SDVTID,IDSDVT           SDVT id valid ?\n         BNE   INIT070                 branch if invalid\n         ICM   R0,B'0011',SDVFLEN\n         BZ    INIT070\n         CLC   SDVVERS,=Y(SDVCVER)     SDVT for this version of SDF ?\n         BL    INIT070                 branch if no\n         CLI   SDVPREV,C'0'            old format SDVT ?\n         BNL   INIT070                 branch if yes\n         ICM   R0,B'1111',SDVADSN      SDVT JCT dsn addr valid ?\n         BZ    INIT070                 branch if invalid\n         L     R15,CVTPTR              point to CVT\n         USING CVT,R15\n         L     R15,CVTASVT             point to ASVT\n         USING ASVT,R15\n         ICM   R15,B'1111',ASVTENTY    point to ASCB\n         BNP   INIT070                 branch if no ASCB\n         USING ASCB,R15\n         CLC   SDVMINTS,ASCBINTS       master addr space restarted ?\n         BNE   INIT070                 branch if yes\n         ST    R1,GDASDVT              save SDVT address\n         B     INIT080\nINIT070  DS    0H\n         OI    GDASTAT,GDASRIN         error, initialize SDVT\nINIT080  DS    0H\n         L     R0,SVTDATSZ             get DAT size\n         SH    R0,=Y(DATFSIZE)         subtract size of DAT prefix\n         STH   R0,GDABLKSZ             save block size\n         LA    R1,SVTID-3              point to iatSSVT module name\n         USING MODNAME,R1\n         MVC   GDAJVERS,GDABLANK       clear release level\n         MVC   GDAJVERS(L'MODREL),MODREL save JES3 release level\n         DROP  R1\n         L     R1,SVTIOPRM             point to I/O parameter block\n         USING IOPSTART,R1             base for I/O parameter block\n         L     R1,IOPEXTAB             point to extent table\n         USING EXTSTART,R1             base for extent table\n         L     R0,EXTBUFSZ             get JCT block size\n         STH   R0,GDAJCTSZ             save JCT block size\n         DROP  R1,R2\nINIT090  DS    0H\n         L     R14,GDALWORK            point to work area\n         LA    R15,L'LSAWORK           length of work area\n         XR    R0,R0\n         XR    R1,R1\n         MVCL  R14,R0                  clear work area\n         ST    R12,TPLGDA              set global data area address\n         LA    R0,INITECB              point to initializatioon ECB\n         ST    R0,TPLINECB             set initialization ECB address\n         LA    R0,CKPDDNAM             point to checkpoint ddname\n         ST    R0,TPLCKPDD             set checkpoint ddname address\n         OI    TPLCKPDD,X'80'          mark end of parameter list\n         MVC   SLIST,ATTACH            copy attach parameter list\n         L     R2,GDALDCB              get load library DCB addreess\n         ATTACH DCB=(2),ECB=GDATCECB,MF=(E,TASKPARM),SF=(E,SLIST)\n         LTR   R15,R15                 attach successful ?\n         BNZ   FAILTASK                no, get out\n         ST    R1,TASKTCB              save subtask TCB address\n         L     R1,GDALDCB              get load library DCB addreess\n         LOAD  EPLOC=SDFCMD,DCB=(1)    load SDFCMD\n         L     R3,IPAADDR              get addr of installation options\n         USING IPA,R3                  base for installation options\n         ISPLINK VGET,(OPTS),RETNZ=*\n         MVI   GDASHOW,C'0'            set show options off\n         CLI   UPASHOW,C'N'            show options suppressed ?\n         BE    INIT100                 branch if suppressed\n         MVI   UPASHOW,C'Y'            set show options on\n         MVI   GDASHOW,C'1'            set show options on\nINIT100  DS    0H\n         ICM   R1,B'1111',UPATCYL1     get primary space allocation\n         BP    INIT110\n         LA    R1,2                    set default for primary\n         ST    R1,UPATCYL1\nINIT110  DS    0H\n         ICM   R0,B'1111',UPATCYL2     get secondary space allocation\n         BP    INIT120\n         SRA   R1,1\n         ST    R1,UPATCYL2             set default for secondary\nINIT120  DS    0H\n         CLI   UPAPCLS,C'A'            print class missing ?\n         BNL   INIT130\n         MVC   UPAPCLS,IPAPPRCL        use default print class\nINIT130  DS    0H\n         CLI   UPAFCLS,C'A'            fiche class missing ?\n         BNL   INIT140\n         MVC   UPAFCLS,IPAFPRCL        use default fiche class\nINIT140  DS    0H\n         CLI   UPAACLS,C'A'            archive class missing ?\n         BNL   INIT150\n         MVC   UPAACLS,IPAAPRCL        use default archive class\nINIT150  DS    0H\n         CLI   UPATUNIT,C' '           unit name already present ?\n         BH    INIT160                 branch if yes\n         MVC   UPATUNIT,IPATUNIT       use default unit name\n         CLI   UPATUNIT,C' '           any default unit ?\n         BH    INIT160                 branch if yes\n         L     R1,GDACPPL              get CPPL address\n         USING CPPL,R1\n         L     R1,CPPLPSCB             point to PSCB\n         USING PSCB,R1\n         MVC   UPATUNIT,PSCBGPNM       use unit name from UADS\n         CLI   UPATUNIT,C' '           any UADS unit ?\n         BH    INIT160                 branch if yes\n         MVC   UPATUNIT,SYSALLDA       use SYSALLDA for unit name\n         DROP  R3\nINIT160  DS    0H\n         CLI   UPANAME,C' '            programmer name initialized ?\n         BH    INIT220                 branch if yes\n         MVC   UPANAME,GDABLANK        clear name field\n         USING PSA,0                   base for PSA\n         L     R15,PSAAOLD             get ASCB address\n         USING ASCB,R15                base for ASCB\n         L     R15,ASCBASXB            get ASXB address\n         USING ASXB,R15                base for ASXB\n         ICM   R15,B'1111',ASXBSENV    get ACEE address\n         BZ    INIT220                 branch if no ACEE\n         USING ACEE,R15                base for ACEE\n         CLC   ACEEACEE,IDACEE         control block id correct ?\n         BNE   INIT220                 branch if no\n         ICM   R1,B'1111',ACEEUNAM     get user name address\n         BZ    INIT220                 branch if no name\n         LA    R15,L'UPANAME-1         set to maximum length\n         CLI   0(R1),L'UPANAME+1       over maximum  length ?\n         BNL   INIT170                 branch if no\n         XR    R15,R15\n         IC    R15,0(,R1)              get name length\n         CH    R15,=Y(2)\n         BM    INIT220                 branch if null length\nINIT170  DS    0H\n         EX    R15,MOVNAME             move in programmer name\n*MOVNAME MVC   UPANAME(0),1(R1)\n         LA    R2,UPANAME-1            index for scan\n         LA    R1,UPANAME-1(R15)       limit for scan\n         LA    R0,1                    increment for scan\n         B     INIT190\nINIT180  DS    0H\n         CLI   0(R2),C'A'-X'40'        possible start of word ?\n         BL    INIT190                 branch if yes\n         CLI   1(R2),C'A'              upper case alpha ?\n         BL    INIT210                 branch if no\n         CLI   1(R2),C'Z'              upper case alpha ?\n         BH    INIT210                 branch if no\n         NI    1(R2),X'FF'-X'40'       fold to lower case\n         B     INIT210\nINIT190  DS    0H\n         CLC   1(2,R2),=CL2'MC'        name start with MC ?\n         BNE   INIT200                 branch if no\n         NI    2(R2),X'FF'-X'40'       fold C to lower case\n         LA    R2,2(,R2)               skip past MC\nINIT200  DS    0H\n         CLI   1(R2),C'A'-X'40'        lower case alpha ?\n         BL    INIT210                 branch if no\n         CLI   1(R2),C'Z'-X'40'        lower case alpha ?\n         BH    INIT210                 branch if no\n         OI    1(R2),X'40'             fold to upper case\nINIT210  DS    0H\n         BXLE  R2,R0,INIT180           loop for each character\nINIT220  DS    0H\n         OI    MAINFLAG,ISPFINIT       indicate ISPF initialized\n         LA    R0,INITECB              initialize ECB list\n         ST    R0,ECBLIST\n         LA    R0,GDATCECB\n         ST    R0,ECBLIST+4\n         OI    ECBLIST+4,X'80'\n         TM    INITECB,X'40'           subtask initialization complete?\n         BO    INIT230                 yes, bypass wait\n         TM    GDATCECB,X'40'          subtask terminate ?\n         BO    INIT230                 yes, bypass wait\n         WAIT  ECBLIST=ECBLIST         wait for completion of subtask\nINIT230  DS    0H\n         LA    R7,FINISH\n         TM    INITECB,X'40'           subtask initialization complete?\n         BZ    FINISH                  branch if not complete\n         TM    GDATCECB,X'40'          subtask terminate ?\n         BO    TASKTERM                if yes, terminate processing\n         L     R1,GDASDVT              get SDVT address\n         USING SDVT,R1\n         MVC   GDAMNDSP(2),SDVMNDSP    get MAIN/OUTSERV DSP numbers\n         MVC   GDAZCMD(L'PRIMOPT),PRIMOPT\n         DROP  R1,R15\n         EJECT\n***********************************************************************\n*        DISPLAY SELECTION PANEL AND SELECT FUNCTION TO PERFORM       *\n***********************************************************************\n         SPACE 1\nPROCESS  DS    0H\n         USING PSA,0\n         L     R1,PSATOLD              get current TCB address\n         USING TCB,R1                  base for TCB\n         L     R6,TCBUSER              get PDA address\n         USING PDA,R6\n         MVI   MSYSP,C'N'              set authorization flags\n         MVI   MOPER,C'N'\n         MVC   SELPANEL,SDFPPRI        set panel id to 0\n         TM    PDAOAUTH,PDAOALL+PDAOPRT+PDAODSPL operator authority ?\n         BZ    PROC010                 branch if no\n         MVI   MOPER,C'Y'              set authorization flag\nPROC010  DS    0H\n         TM    PDAVAUTH,PDAVALL+PDAVCTL systems programmer authority ?\n         BZ    PROC020\n         MVI   MSYSP,C'Y'              set authorization flag\n         B     PROC030\nPROC020  DS    0H\n         MVI   SELPANEL+7,C'1'         set panel id to 1\n         TM    PDAOAUTH,PDAOALL+PDAOPRT+PDAODSPL operator authority ?\n         BNZ   PROC030                 branch if yes\n         TM    PDAVAUTH,PDAVSMSG+PDAVLOG system messages authorized ?\n         BNZ   PROC030                 branch if system msgs okay\n         MVI   SELPANEL+7,C'2'         set panel id to 2\nPROC030  DS    0H\n         ICM   R0,B'0011',EXECLEN      EXEC parameter specified ?\n         BNZ   PROCEXEC                branch if yes\n         CLI   GDAZCMD,C' '            is option blank ?\n         BNH   PROC040\n         OI    MAINFLAG,MAINBYP        set to bypass selection pane\n         B     PROC080\nPROC040  DS    0H\n         MVC   GDAZCMD,GDABLANK\n         CLI   GDAJUMP,C' '            jump option present ?\n         BNH   PROC050\n         MVC   GDAZCMD(L'GDAJUMP-1),GDAJUMP+1 set jump option\n         MVC   GDAJUMP,GDABLANK\n         CLI   GDAZCMD,C' '            null jump command ?\n         BH    PROC080                 branch if no\n         NI    MAINFLAG,X'FF'-MAINBYP  turn off bypass flag\n         B     PROC070                 go display selection panel\nPROC050  DS    0H\n         TM    MAINFLAG,MAINBYP        bypass selection panel ?\n         BO    FINISH                  yes, we are finished\nPROC060  DS    0H\n         TM    GDATCECB,X'40'          subtask terminate ?\n         BO    TASKTERM                if yes, terminate processing\nPROC070  DS    0H\n         ISPLINK DISPLAY,(SELPANEL),RET8=FINISH\n         CH    R15,=Y(8)               severe error ?\n         BH    FINISH                  exit if yes\nPROC080  DS    0H\n         TM    GDATCECB,X'40'          subtask terminate ?\n         BO    TASKTERM                if yes, terminate processing\n         CLI   GDAZCMD,C'.'            jump command ?\n         BNE   PROC090                 branch if no\n         MVC   GDAZCMD(L'GDAZCMD-1),GDAZCMD+1 shift out period\nPROC090  DS    0H\n         CLI   GDAZCMD,C' '            blank ?\n         BNH   PROC060                 branch if yes\n         MVC   ZOPT2,GDABLANK\nPROC100  DS    0H\n         LA    R0,1                    increment for scan\n         LA    R1,GDAZCMD+8            limit for scan\n         LA    R2,GDAZCMD+1            index for scan\nPROC110  DS    0H\n         CLI   0(R2),C' '              end of select option ?\n         BNH   PROC130                 branch if yes\n         CLI   0(R2),C'.'              sub-option specified ?\n         BE    PROC120                 branch if yes\n         BXLE  R2,R0,PROC110           loop until end of option\n         B     PROC130\nPROC120  DS    0H\n         MVC   ZOPT2,1(R2)             save sub-option\n         MVC   0(16,R2),GDABLANK\nPROC130  DS    0H\n         MVC   ZOPT1,GDAZCMD\n         ICM   R15,B'0011',GDAZCMD     get select option\n         LA    R0,OPTSIZE              increment for loop\n         LA    R1,OPTTBEND             limit for loop\n         LA    R2,OPTTABLE             index for loop\n         USING OPTENTRY,R2             base for select option table\nPROC140  DS    0H\n         CLM   R15,B'0011',OPTION      select option found ?\n         BE    PROC160                 branch if match found\n         BL    PROC150                 branch if not found\n         BXLE  R2,R0,PROC140\nPROC150  DS    0H\n         LA    R0,MSG002               invalid option message\n         B     PROC230\nPROC160  DS    0H\n         TM    OPTFLAG,SSI+DSP         is subsys interface required ?\n         BZ    PROC180                 branch if no\n         TM    GDASTAT,GDASSSI         is SSI available ?\n         BZ    PROC210                 branch if no - SSI required\nPROC170  DS    0H\n         TM    OPTFLAG,DSP             is SDF DSP required ?\n         BZ    PROC180                 branch if no\n         TM    GDASTAT,GDASDSP         is SDF DSP available ?\n         BZ    PROC220                 branch if no - DSP required\nPROC180  DS    0H\n         ICM   R15,B'0001',OPTAUTH     get required authorization\n         BZ    PROC190                 branch if none required\n         EX    R15,CHKAUTH             check authorization\n         BO    PROC190                 branch if authorized\n*CHKAUTH TM    PDAVAUTH,0              check authorization\n         TM    PDAOAUTH,PDAOALL+PDAOPRT+PDAODSPL operator authority ?\n         BZ    PROC200                 branch if no\n         TM    OPTFLAG,OPR             is operations auth okay ?\n         BZ    PROC200                 branch if no\nPROC190  DS    0H\n         MVC   GDAZCMD,GDABLANK\n         LH    R15,OPTPROC             get branch address\n         BAS   R7,PROCESS(R15)         go process select option\n         B     PROC040\nPROC200  DS    0H\n         LA    R0,MSG001               not authorized message\n         B     PROC230\nPROC210  DS    0H\n         LA    R0,MSG003               SSI required message\n         B     PROC230\nPROC220  DS    0H\n         LA    R0,MSG004               SDF DSP required message\nPROC230  DS    0H\n         BAS   R7,ISPFMSG              issue error message\n         NI    MAINFLAG,X'FF'-MAINBYP  do not bypass selection pane\n         B     PROC060\nPROCACT  DS    0H\n         SDFCALL SDFACT\n         BR    R7\nPROCENQ  DS    0H\n         SDFCALL SDFENQ,(ALL)\n         BR    R7\nPROCJOB  DS    0H\n         SDFCALL SDFJOBQ,(ZOPT1,JOBID,USERID) display job queue\n         BR    R7\nPROCNET  DS    0H\n         SDFCALL SDFNET,(NETID)        display DJC networks\n         BR    R7\nPROCOUT  DS    0H\n         SDFCALL SDFOUTQ,(,JOBID,USERID) display output queue\n         BR    R7\nPROCRECV DS    0H\n         SDFCALL SDFRECV,(JOBID,USERID) receive data sets\n         BR    R7\nPROCXMIT DS    0H\n         SDFCALL SDFXMIT               transmit data sets\n         BR    R7\nPROCLOG  DS    0H\n         SDFCALL SDFLOG,(ZOPT1)        display SYSLOG\n         BR    R7\nPROCCONS DS    0H\n         SDFCALL SDFVIEW               display console\n         BR    R7\nPROCZERO DS    0H\n         SDFCALL SDFZERO,(ZOPT2)       display job zero\n         BR    R7\nPROCBROW DS    0H\n         ISPLINK DISPLAY,(SDFPHXBR),RET8=0(R7)\n         CLI   GDAZCMD,C'.'            jump command entered ?\n         BE    PROC080                 branch if yes\n         SDFCALL SDFBROWS,(BROHEX,,MMR,MID)\n         B     PROCBROW\nPROCSEC  DS    0H\n         SDFCALL SDFSEC,(ZOPT2)        security administration\n         BR    R7\nPROCPARM DS    0H\n         SDFCALL SDFPARM,(ZOPT2)\n         BR    R7\nPROCTUT  DS    0H\n         ISPLINK VPUT,(VERS,SHARED)\n         ISPLINK SELECT,(PGMTLEN,PGMTUTOR),RET4=*\n         BR    R7\nPROCUPD  DS    0H\n         ISPLINK SELECT,(PGMULEN,PGMUPDAT),RET4=*\n         BR    R7\nPROCEXEC DS    0H\n         SDFCALL SDFEXEC,(,EXECLEN,JOBID) display job queue\n         ISPLINK CONTROL,(NONDISPL,ENTER)\n         ISPLINK DISPLAY,(SELPANEL),RETNZ=*\n         B     FINISH\n         EJECT\n***********************************************************************\n*        SUBTASK ATTACH FAILURE                                       *\n***********************************************************************\n         SPACE 1\nFAILTASK DS    0H\n         LR    R2,R15                  save return code\n         STC   R15,MSGRC+1             format error message\n         MVI   MSGRC,X'80'+1\n         SDFCALL SDFPUTL,(MSG016,MSGRC)\n         BAS   R7,PUTERROR\n         B     FINISH\n         EJECT\n***********************************************************************\n*        SUBTASK HAS TERMINATED PREMATURELY                           *\n***********************************************************************\n         SPACE 1\nTASKTERM DS    0H\n         SDFCALL SDFPUTL,(MSG017)      display error message\n         B     FINISH\n         EJECT\n***********************************************************************\n*        TERMINATE PROGRAM                                            *\n***********************************************************************\n         SPACE 1\nFINISH   DS    0H\n         TM    MAINFLAG,ISPFINIT       ISPF initialized ?\n         BZ    FIN010                  branch if no\n         SDFCALL SDFBROWS,(BROFREE)    lmfree browse data set\n         ISPLINK VPUT,(OPTS,PROFILE)\n         ISPLINK VRESET                reset ISPF variables\nFIN010   DS    0H\n         LA    R15,TERMMAIN            get termination roitine address\n         BASR  R14,R15                 call termination routine\n         SDFTRACE END                  free trace table\n         EJECT\n***********************************************************************\n*        EXIT TO CALLER                                               *\n***********************************************************************\n         SPACE 1\nEXITA    DS    0H\n         L     R13,SAVEAREA+4          restore caller's save area addr\n         FREEMAIN RU,SP=SUBPOOL        free all SDF storage\nEXITB    DS    0H\n         RETURN (14,12),T,RC=0\n         EJECT\n***********************************************************************\n*        TERMMAIN: MAIN TASK TERMINATION ROUTINE                      *\n***********************************************************************\n         SPACE 1\nTERMMAIN DS    0H\n         SAVE  (14,12),,TERMMAIN       save callers registers\n         LA    R0,TERMMAIN-SDFMAIN\n         LR    R11,R15                 get entry point address\n         SR    R11,R0                  set program base register\n         LA    R15,2048\n         LA    R10,2048(R15,R11)\n         L     R9,GDALDA               start of external area\n         A     R9,LDASTART             start of local external section\n         LR    R15,R13                 caller's save area address\n         LA    R13,SAVETERM            point to save area\n         ST    R15,SAVETERM+4          store backward save area ptr\n         ST    R13,8(,R15)             store forward save area ptr\n         L     R8,GDALSA               point to 24-bit service area\n         USING LSA,R8\n         ICM   R5,B'1111',TASKTCB      get subtask TCB address\n         BZ    TERM030                 exit if no subtask\n         TM    GDATCECB,X'40'          has subtask completed ?\n         BO    TERM020                 yes, no need to wait\n         MVI   TRBFUNC,TRBTERM         set TRB function to terminate\n         LA    R0,TRB\n         ST    R0,GDATRB               set TRB address\n         POST  GDATRECB                post subtask to terminate\n         XR    R0,R0\n         ST    R0,TIMEECB\n         LA    R0,TIMEECB\n         ST    R0,TIMEPARM\n         MVC   SLIST(STIMERML),STIMERM\n         STIMERM SET,ID=TIMEID,BINTVL=TIMELIM,   set timer             *\n               EXIT=TIMEXIT,PARM=TIMEPARM,                             *\n               ERRET=TERM010,MF=(E,SLIST)\n         LA    R0,GDATCECB             initialize ECB list\n         ST    R0,ECBLIST\n         LA    R0,TIMEECB\n         ST    R0,ECBLIST+4\n         OI    ECBLIST+4,X'80'\n         TM    GDATCECB,X'40'          competion bit on in ECB ?\n         BO    TERM010                 yes, bypass wait\n         WAIT  ECBLIST=ECBLIST         wait for completion of subtask\nTERM010  DS    0H\n         MVC   SLIST(CTIMERML),CTIMERM\n         STIMERM CANCEL,ID=TIMEID,     cancel timer                    *\n               ERRET=TERM020,MF=(E,SLIST)\nTERM020  DS    0H\n         DETACH TASKTCB,STAE=YES       detach subtask\nTERM030  DS    0H\n         SDFCALL SDFALLOC,(ALLFREE)    free all data sets\n         XR    R2,R2                   constant zero\n         LA    R3,GDAEPDYN             point to first entry point addr\n         LA    R4,EPNAMES              point to first entry point name\n         LA    R5,EPNUM                initialize loop counter\nTERM040  DS    0H\n         ICM   R0,B'1111',0(R3)        has this module been loaded ?\n         BZ    TERM050                 branch if no\n         ST    R2,0(,R3)               clear entry point addr\n         LR    R0,R4                   point to entry point name\n         DELETE EPLOC=(0)              delete this module\nTERM050  DS    0H\n         LA    R3,4(,R3)               point to next entry point addr\n         LA    R4,8(,R4)               point to next entry point name\n         BCT   R5,TERM040              loop for each entry module\n         DELETE EPLOC=SDFCMD           delete SDFCMD entry point\n         TM    DCBOFLGS-IHADCB+LSALDCB,DCBOFOPN  load lib opened ?\n         BZ    TERM060                 branch if no\n         MVC   LSALIST1(OPENL),OPEN\n         CLOSE (LSALDCB),MF=(E,LSALIST1)\nTERM060  DS    0H\n         XR    R0,R0\n         ST    R0,GDALDCB\n         L     R13,SAVETERM+4          restore caller's save area addr\n         RETURN (14,12),T,RC=0\n         DROP  R8\n         EJECT\n***********************************************************************\n*        PARSCALL: CALL TSO PARSE ROUTINE                             *\n*---------------------------------------------------------------------*\n*        INPUT:  R0 = PCL address                                     *\n*                R7 = return address                                  *\n*                                                                     *\n*        RETURN: +0 parse error                                       *\n*                +4 normal return                                     *\n***********************************************************************\n         SPACE 1\nPARSCALL DS    0H\n         ST    R0,PPLPCL-PPL+PPLIST    set answer area ptr\n         XR    R0,R0\n         ST    R0,CPECB                clear ECB\n         ST    R0,CMDBUF               clear null command buffer\n         ST    R0,PDLPTR               clear answer area pointer\n         CALLTSSR EP=IKJPARS,MF=(E,PPLIST)\n         LTR   R15,R15                 test parse return code\n         BZ    4(,R7)                  return if parse successful\n         CH    R15,=Y(12)              severe error ?\n         BNHR  R7                      no, return to caller\n         MVI   MSGRC,X'80'+1\n         STC   R15,MSGRC+1             set return code for message\n         SDFCALL SDFPUTL,(MSG010,MSGRC) issue error message\n         B     PUTERROR\n         EJECT                         get out\n***********************************************************************\n*        PARSFREE: FREE STORAGE FROM TSO PARSE ROUTINE                *\n*---------------------------------------------------------------------*\n*        INPUT:  R7 = return address                                  *\n***********************************************************************\n         SPACE 1\nPARSFREE DS    0H\n         ICM   R0,B'1111',PDLPTR       anything to free ?\n         BZR   R7                      no, return to caller\n         IKJRLSA PDLPTR                free storage gotten by IKJPARS\n         XC    PDLPTR,PDLPTR           clear answer area pointer\n         BR    R7                      return to caller\n         EJECT                         get out\n***********************************************************************\n*        LIBDEF: DEFINE ISPF LIBRARY                                  *\n***********************************************************************\n         SPACE 1\nLIBDEF   DS    0H\n         DDCHK DDNAME=DDNAME           see if library allocated\n         LTR   R15,R15                 library allocated ?\n         BNZR  R7                      no, return\n         MVC   LIBTYPE(3),ISP\n         MVC   LIBTYPE+3(5),DDNAME+3   move in library type suffix\n         ISPLINK LIBDEF,(LIBTYPE,LIBRARY,DDNAME,COND),RET8=*\n         BR    R7                      return to caller\n         EJECT\n***********************************************************************\n*        VDEFINE: DEFINE ISPF VARIABLES                               *\n*---------------------------------------------------------------------*\n*        INPUT:  R1 = pointer to first ISPLINK parameter list         *\n*                R2 = number of ISPLINK parameter lists               *\n***********************************************************************\n         SPACE 1\nVDEFINE  DS    0H\n         ISPLINK MF=(E,(1))            call ISPF interface\n         LA    R1,10(,R1)              point to next ISPLINK plist\n         BCT   R2,VDEFINE              loop for each parameter list\n         BR    R7                      return to caller\n         EJECT\n***********************************************************************\n*        ISPFMSG: CALL ISPF SETMSG SERVICE                            *\n*---------------------------------------------------------------------*\n*        INPUT:  R0 = message number                                  *\n***********************************************************************\n         SPACE 1\nISPFMSG  DS    0H\n         MVC   MSG,=CL8'SDFM000'\n         CVD   R0,DOUBLE               convert msg number to decimal\n         UNPK  MSG+4(3),DOUBLE+6(2)    unpack message number\n         OI    MSG+6,X'F0'             make sign printable\n         ISPLINK SETMSG,(MSG)          set ISPF message\n         BR    R7                      return to caller\n         EJECT\n***********************************************************************\n*        PUTERROR: DISPLAY ERROR LOCATION MESSAGE                     *\n***********************************************************************\n         SPACE 1\nPUTERROR DS    0H\n         SDFCALL SDFERROR,(0(R7))      error handling routune\n         BR    R7                      return to caller\n         EJECT\n***********************************************************************\n*        TIMER EXIT ROUTINE                                           *\n***********************************************************************\n         SPACE 1\nTIMEXIT  DS    0H\n         USING *,R15\n         L     R1,4(,R1)               get ECB address\n         POST  (1)                     post timer expiration ECB\n         XR    R15,R15                 set return code zero\n         BR    R14                     return to caller\n         DROP  R15\n         EJECT\n***********************************************************************\n*                       EXECUTE INSTRUCTIONS                          *\n***********************************************************************\n         SPACE 1\n         USING UPA,R8\nMOVNAME  MVC   UPANAME(0),1(R1)\nMOVOPT1  MVC   PRIMOPT(0),0(R3)\nMOVOPT2  MVC   PRIMOPT(0),0(R15)       move select option\nMOVJOB   MVC   JOBID(0),0(R2)          move job name/number\nMOVUSID  MVC   USERID(0),0(R2)         move userid\nMOVNET   MVC   NETID(0),0(R2)          move netid\nMOVCKP   MVC   CKPDDNAM(0),0(R2)       move checkpoint ddname\nCHKAUTH  TM    PDAVAUTH,0              check authorization\nMOVCMD1  MVC   ICOMMAND+13(0),4(R1)\nMOVCMD2  MVC   ICOMMAND+4(0),4(R2)\nMOVEXEC  MVC   EXECCMD(0),0(R2)\n         DROP  R1\n         EJECT\n***********************************************************************\n*                            CONSTANTS                                *\n***********************************************************************\n         SPACE 1\nLDASIZE  CXD                           size of external work area\nLDASTART DC    Q(LDAMAIN)              offset for external work area\nPCLPTR1  DC    V(SDFPCL1)              PCL pointer\nPCLPTR2  DC    V(SDFPCL2)              PCL pointer\nIPAADDR  DC    V(SDFOPTS)              SDF installation options addr\n         SPACE 1\nEPAAUTH  DC    V(SDFOPTS)\n         DC    V(SDFCALL)\n         DC    V(SDFISPF)\n         DC    V(SDFAUTH)\n         DC    V(SDFGENCB)\n         DC    V(SDFSSI)\n         DC    V(SDFDDCHK)\n         SPACE 1\nEPALIST  DC    V(SDFEPTBL)\n         DC    V(SDFBSAM)\n         DC    V(SDFTIME)\n         DC    V(SDFDSN)\n         DC    V(SDFPARSE)\nEPALEN   EQU   *-EPALIST\n         SPACE 1\nTIMELIM  DC    A(15*100)               15 second time limit for timer\n         SPACE 1\nSPLIST   DC    AL1(2),AL1(SUBPOOL),AL1(78)\nCMDFLAGS DC    X'00010101'             IKJEFTSR command flags\n         SPACE 1\nALL      DC    CL8'ALL'\nIDACEE   DC    CL4'ACEE'               ACEE identifier\nIDSDVT   DC    CL4'SDVT'               SDVT identifier\nSDF      DC    CL4'SDF'                SDF applid\nCZAPPLID DC    CL8'ZAPPLID'\nSYSALLDA DC    CL8'SYSALLDA'           SYSALLDA unit name\nSDFEXEC  DC    CL8'SDFEXEC'            SDF exec library ddname\nSDFTLIB  DC    CL8'SDFTLIB'            SDF table library ddname\nISPTLIB  DC    CL8'ISPTLIB'\nISP      EQU   ISPTLIB,3,C'C'\n         SPACE 1\nISPTASK  DC    CL8'ISPTASK'\nSDFTASK  DC    CL8'SDFTASK'\nSDFCMD   DC    CL8'SDFCMD'\n         SPACE 1\nEPNAMES  EQU   *                       same order as GDA addresses\nSDFBLOCK DC    CL8'SDFBLOCK'\nSDFTRACE DC    CL8'SDFTRACE'\nSDFMAP   DC    CL8'SDFMAP'\nSDFBREAK DC    CL8'SDFBREAK'\nSDFPUTM  DC    CL8'SDFPUTM'\nSDFVGET  DC    CL8'SDFVGET'\nSDFEDIT  DC    CL8'SDFEDIT'\nSDFIMAC  DC    CL8'SDFIMAC'\nEPNUM    EQU   (*-EPNAMES)/8\n         SPACE 1\nSDFPPRI  DC    CL8'SDFPPRI0'           main selection panel\nSDFPHXBR DC    CL8'SDFPHXBR'           SRF/MRF browse panel\n         SPACE 1\nCHAR64   DC    C'(ZCMD)'\nVERS     DC    C'(MVER)'\nCHAR8    DC    C'(MJES)'\nCHAR4    DC    C'(MID MSCR)'\nHEX6     DC    C'(MMR)'\nAUTH     DC    C'(MSYSP MOPER)'\nOPT1     DC    C'(MLL MCYL1 MCYL2)'\nOPT2     DC    C'(MPCLS MFCLS MACLS MCD MIN MPSA MSHOW)'\nOPT3     DC    C'(MPDST MPDS2 MFDST MFDS2 MADST MADS2 MUNIT'\n         DC    C' MDEPT MBLDG MROOM)'\nOPT4     DC    C'(MNAME)'\nOPT5     DC    C'(MADR1 MADR2 MADR3 MADR4)'\nOPT6     DC    C'(MX0 MX1 MX2 MX3 MX4 MX5 MX6 MX7 MX8 MX9)'\nOPT7     DC    C'(MJCL1 MJCL2 MJCL3 MJCL4 MJCL5 MJCL6)'\nOPTS     DC    C'(MPCLS MFCLS MACLS MCD MIN MPSA MSHOW'\n         DC    C' MPDST MPDS2 MFDST MFDS2 MADST MADS2 MUNIT'\n         DC    C' MDEPT MBLDG MROOM MLL MCYL1 MCYL2 MSCR MNAME'\n         DC    C' MADR1 MADR2 MADR3 MADR4'\n         DC    C' MX0 MX1 MX2 MX3 MX4 MX5 MX6 MX7 MX8 MX9'\n         DC    C' MJCL1 MJCL2 MJCL3 MJCL4 MJCL5 MJCL6)'\n         SPACE 1\nPGMTLEN  DC    A(L'PGMTUTOR)\nPGMTUTOR DC    C'PGM(ISPTUTOR) PARM(SDFHTUT)'\n         SPACE 1\nPGMULEN  DC    A(L'PGMUPDAT)\nPGMUPDAT DC    C'PGM(ISPTUTOR) PARM(SDFUPDT)'\n         SPACE 1\nALTLBLEN DC    A(L'ALTLBCMD)\nALTLBCMD DC    C'ALTLIB ACT APPL(EXEC) LIB(SDFEXEC)'\n         SPACE 1\nMSGJOB   DC    AL1(3),CL3'JOB'\nMSGEXEC  DC    AL1(4),CL4'EXEC'\nMSGCHKPT DC    AL1(6),CL6'CHKPNT'\n         SPACE 1\n         LTORG ,\n         EJECT\n***********************************************************************\n*                         LIST FORM MACROS                            *\n***********************************************************************\n         SPACE 1\n         PRINT NOGEN\n         SPACE 1\nESTAE    ESTAE MF=L\nESTAEL   EQU   *-ESTAE\n         SPACE 1\nATTACH   ATTACH EPLOC=SDFTASK,SHSPL=SPLIST,SF=L\nATTACHL  EQU   *-ATTACH\n         SPACE 1\nSTIMERM  STIMERM SET,MF=L\nSTIMERML EQU   *-STIMERM\n         SPACE 1\nCTIMERM  STIMERM CANCEL,MF=L\nCTIMERML EQU   *-CTIMERM\n         SPACE 1\nOPEN     OPEN  (,),MF=L\nOPENL    EQU   *-OPEN\n         SPACE 1\nBPAMDCB  DCB   DDNAME=SDFLLIB,DSORG=PO,MACRF=(R)\n         SPACE 1\n         USING UPA,R8\nVARS     ISPLINK VDEFINE,(CHAR64,GDAZCMD,CHAR,64),MF=L\n         ISPLINK VDEFINE,(VERS,MVER,CHAR,9),MF=L\n         ISPLINK VDEFINE,(CHAR8,GDAJVERS,CHAR,8),MF=L\n         ISPLINK VDEFINE,(CHAR4,MID,CHAR,4),MF=L\n         ISPLINK VDEFINE,(HEX6,MMR,HEX,6),MF=L\n         ISPLINK VDEFINE,(AUTH,MSYSP,CHAR,1),MF=L\n         ISPLINK VDEFINE,(OPT1,UPACLIM,FIXED,4),MF=L\n         ISPLINK VDEFINE,(OPT2,UPAOPTS,CHAR,1),MF=L\n         ISPLINK VDEFINE,(OPT3,UPAPDEST,CHAR,8),MF=L\n         ISPLINK VDEFINE,(OPT4,UPANAME,CHAR,20),MF=L\n         ISPLINK VDEFINE,(OPT5,UPAADDR1,CHAR,40),MF=L\n         ISPLINK VDEFINE,(OPT6,UPAEXEC0,CHAR,32),MF=L\n         ISPLINK VDEFINE,(OPT7,UPAJCL1,CHAR,72),MF=L\nVARNUM   EQU   (*-VARS)/10\n         EJECT\n***********************************************************************\n*                              TABLES                                 *\n***********************************************************************\n         SPACE 1\nHEXCHAR  EQU   *-C'0'\n         DC    C'0123456789ABCDEF'     table to convert hex to char\n         SPACE 1\nOPTTABLE DS    0H                      table of select options\n         DC    CL2'A ',AL1(0000),AL1(000+000),Y(PROCACT-PROCESS)\n         DC    CL2'E ',AL1(0000),AL1(000+000),Y(PROCENQ-PROCESS)\n         DC    CL2'C ',AL1(SMSG),AL1(OPR+SSI),Y(PROCCONS-PROCESS)\n         DC    CL2'J ',AL1(0000),AL1(OPR+000),Y(PROCJOB-PROCESS)\n         DC    CL2'JN',AL1(0000),AL1(OPR+000),Y(PROCJOB-PROCESS)\n         DC    CL2'L ',AL1(SLOG),AL1(OPR+000),Y(PROCLOG-PROCESS)\n         DC    CL2'LB',AL1(SLOG),AL1(OPR+000),Y(PROCLOG-PROCESS)\n         DC    CL2'N ',AL1(0000),AL1(OPR+DSP),Y(PROCNET-PROCESS)\n         DC    CL2'O ',AL1(0000),AL1(OPR+DSP),Y(PROCOUT-PROCESS)\n         DC    CL2'P ',AL1(0000),AL1(OPR+000),Y(PROCPARM-PROCESS)\n         DC    CL2'Q ',AL1(0000),AL1(OPR+000),Y(PROCJOB-PROCESS)\n         DC    CL2'R ',AL1(0000),AL1(OPR+000),Y(PROCRECV-PROCESS)\n         DC    CL2'S ',AL1(0000),AL1(OPR+000),Y(PROCSEC-PROCESS)\n         DC    CL2'T ',AL1(0000),AL1(OPR+000),Y(PROCTUT-PROCESS)\n         DC    CL2'U ',AL1(0000),AL1(OPR+000),Y(PROCUPD-PROCESS)\n         DC    CL2'X ',AL1(0000),AL1(OPR+000),Y(PROCXMIT-PROCESS)\n         DC    CL2'Y ',AL1(SYSP),AL1(000+000),Y(PROCBROW-PROCESS)\n         DC    CL2'Z ',AL1(SMSG),AL1(OPR+DSP),Y(PROCZERO-PROCESS)\nOPTTBEND EQU   *-1\n         SPACE 1\nKEYTABLE DS    0H                      table of keyords (first 2 chars)\n         DC    CL2'DS'                 DSP\n         DC    CL2'NO'                 NODSP/NOSSI/NOTEST\n         DC    CL2'RE'                 REINIT\n         DC    CL2'SS'                 SSI\n         DC    CL2'TE'                 TEST\nKEYTBEND EQU   *-1\n         EJECT\n***********************************************************************\n*        ENTRY POINT FOR QUICK EXIT AFTER SEVERE ERROR                *\n***********************************************************************\n         SPACE 1\n         ENTRY SDFEXIT\nSDFEXIT  DS    0H\n         SAVE  (14,12),,SDFEXIT        save callers registers\n         LA    R1,4095\n         LA    R0,SDFEXIT-SDFMAIN-4095\n         AR    R0,R1\n         LR    R11,R15                 get entry point address\n         SR    R11,R0                  set program base register\n         LA    R10,1(R1,R11)\n         LTR   R12,R12\n         BNP   SDFX010\n         L     R9,GDALDA               start of external area\n         A     R9,LDASTART             start of local external section\n         LA    R13,SAVEAREA            point to save area\n         L     R8,GDALSA               point to 24-bit service area\n         B     FINISH\nSDFX010  DS    0H\n         USING PSA,0\n         L     R1,PSATOLD              get current TCB address\n         USING TCB,R1                  base for TCB\n         L     R13,TCBFSA              point to first save area\n         B     EXITB\n         EJECT\n***********************************************************************\n*        CMDCHECK: PARSE VALIDITY CHECK ROUTINE FOR MACRO COMMAND     *\n*---------------------------------------------------------------------*\n*        INPUT:  R1 = parameter list address                          *\n***********************************************************************\n         SPACE 1\nCMDCHECK DS    0H\n         SAVE  (14,12),,CMDCHECK       save caller's registers\n         L     R2,4(,R1)               get parameter address\n         LM    R9,R12,0(R2)            load base registers\n         XC    EXECLEN,EXECLEN         clear command length\n         MVI   EXECCMD,C' '\n         MVC   EXECCMD+1(L'EXECCMD-1),EXECCMD\n         LR    R4,R1                   save parameter list address\n         ICM   R1,B'1111',0(R4)        get PDE address\n         BZ    CMDC050\n         USING PDEEXEC,R1              base for PDE\n         ICM   R2,B'1111',PDEEXEC      point to macro command\n         BZ    CMDC050                 branch if no text\n         LH    R3,PDEEXEC+4            get text length\n         LTR   R3,R3\n         BNP   CMDC050                 branch if zero length\n         AR    R3,R2                   point to end of text\n         BCTR  R3,0                    point to last character\n         LA    R0,1                    increment for scan (+1)\n         LR    R1,R3                   limit for scan\nCMDC010  DS    0H\n         CLI   0(R2),C' '              start of text ?\n         BH    CMDC020                 branch if yes\n         BXLE  R2,R0,CMDC010           loop until start of text\n         B     CMDC050                 branch if no text\nCMDC020  DS    0H\n         LNR   R0,R0                   decrement for scan (-1)\n         LR    R1,R2                   limit for scan\nCMDC030  DS    0H\n         CLI   0(R3),C' '              end of text ?\n         BH    CMDC040                 branch if yes\n         BXH   R3,R0,CMDC030           loop until end of text\nCMDC040  DS    0H\n         SR    R3,R2                   get text length\n         EX    R3,MOVEXEC\n*MOVEXEC MVC   EXECCMD(0),0(R2)\n         LA    R3,1(,R3)               get text length\n         STH   R3,EXECLEN\n         B     CMDC060\nCMDC050  DS    0H\n         LA    R15,4                   set return code for invalid parm\n         B     CMDC070\nCMDC060  DS    0H\n         XR    R15,R15                 set good return code\nCMDC070  DS    0H\n         RETURN (14,12),T,RC=(15)      return to caller\n         EJECT\n***********************************************************************\n*                       PARSE PARAMETER LIST                          *\n***********************************************************************\n         SPACE 1\n         PRINT NOGEN\n         SPACE 1\nSDFPCL1  RMODE ANY\nSDFPCL1  IKJPARM DSECT=SDFPDL1\nPDEKOPT  IKJKEYWD\n         IKJNAME 'OPT',SUBFLD=PDESOPT\nPDEKJOB  IKJKEYWD\n         IKJNAME 'JOB',SUBFLD=PDESJOB,                                 *\n               ALIAS=('JOBNAME','JOBNUM','JOBNO','JOBID')\nPDEKUSER IKJKEYWD\n         IKJNAME 'USERID',SUBFLD=PDESUSER\nPDEKNET  IKJKEYWD\n         IKJNAME 'NETID',SUBFLD=PDESNET\nPDEKSSI  IKJKEYWD DEFAULT='SSI'\n         IKJNAME 'SSI'\n         IKJNAME 'NOSSI'\nPDEKDSP  IKJKEYWD DEFAULT='DSP'\n         IKJNAME 'DSP'\n         IKJNAME 'NODSP'\nPDEKCKP  IKJKEYWD\n         IKJNAME 'CHKPNT',SUBFLD=PDESCKP\nPDEKTEST IKJKEYWD DEFAULT='NOTEST'\n         IKJNAME 'TEST'\n         IKJNAME 'NOTEST'\nPDEKRIN  IKJKEYWD\n         IKJNAME 'REINIT'\nPDEKEXEC IKJKEYWD\n         IKJNAME 'EXEC',SUBFLD=PDESEXEC\nPDESOPT  IKJSUBF\nPDEOPT   IKJIDENT 'SELECT OPTION',MAXLNTH=8,FIRST=ALPHANUM,            *\n               OTHER=ANY,PROMPT='SELECT OPTION',                       *\n               HELP='SDF PRIMARY MENU OPTION'\nPDESJOB  IKJSUBF\nPDEJOB   IKJIDENT 'JOB NAME/NUMBER',MAXLNTH=8,FIRST=ALPHANUM,          *\n               OTHER=ALPHANUM,PROMPT='JOB NAME/NUMBER',                *\n               HELP='JOB NAME OR JOB NUMBER OF JOBS TO DISPLAY'\nPDESUSER IKJSUBF\nPDEUSER  IKJIDENT 'USERID',MAXLNTH=8,FIRST=ALPHA,                      *\n               OTHER=ALPHANUM,PROMPT='USERID',                         *\n               HELP='USERID FOR JOBS TO DISPLAY'\nPDESNET  IKJSUBF\nPDENET   IKJIDENT 'DJC NETID',MAXLNTH=8,FIRST=ALPHA,                   *\n               OTHER=ALPHANUM,PROMPT='DJC NETID',                      *\n               HELP='NETID FOR DJC NETWORK JOBS TO DISPLAY'\nPDESCKP  IKJSUBF\nPDECKP   IKJIDENT 'CHECKPOINT DDNAME',MAXLNTH=8,FIRST=ALPHA,           *\n               OTHER=ALPHANUM,PROMPT='CHECKPOINT DDNAME',              *\n               HELP='DDNAME OF JES3 CHECKPOINT DATA SET'\nPDESEXEC IKJSUBF\nPDEEXEC  IKJIDENT 'REXX EXEC OR TSO CLIST COMMAND',CHAR,               *\n               FIRST=ALPHA,OTHER=ANY,VALIDCK=CMDCHECK,                 *\n               PROMPT='REXX EXEC OR TSO CLIST COMMAND',                *\n               HELP='EXEC OR CLIST NAME WITH PARAMETERS'\n         IKJENDP\n         SPACE 2\nSDFPCL2  RMODE ANY\nSDFPCL2  IKJPARM DSECT=SDFPDL2\nPDEJOB2  IKJIDENT 'JOB NAME/NUMBER',MAXLNTH=8,FIRST=ALPHANUM,          *\n               OTHER=ALPHANUM,PROMPT='JOB NAME/NUMBER',                *\n               HELP='JOB NAME OR JOB NUMBER OF JOBS TO PROCESS'\n         IKJENDP\n         EJECT\n***********************************************************************\n*                         LOCAL DATA AREA                             *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         SPACE 1\nLDAMAIN  DSECT                         external work area\nLDAID    DS    CL8                     module identifier\nSAVEAREA DS    (18+PLSIZE)F            program register save area\nSAVETERM DS    18F                     termination routine save area\n         SPACE 1\nDOUBLE   DS    D\nBASEREG  DS    4F                      base registers\nSTAEPARM DS    3F                      ESTAE exit parameter list\n         SPACE 1\nTASKPARM DS    0F                      subtask parameter list\nTPLGDA   DS    A                       addr of global data area\nTPLINECB DS    A                       addr of initialization ECB\nTPLCKPDD DS    A                       addr of JES3 CHKPNT ds ddname\n         SPACE 1\nTASKTCB  DS    A                       address of subtack ECB\nBUFPTR   DS    A                       address of checkpoint buffer\n         SPACE 1\nINITECB  DS    F                       initialization ECB\nCPECB    DS    F                       command processor ECB\nPDLPTR   DS    A                       pdl pointer\nPPLIST   DS    8F                      parse parameter list\nCMDBUF   DS    F                       null command buffer\n         SPACE 1\nLDALEN   DS    F                       length of local data area\n         SPACE 1\nTIMEID   DS    F                       timer id\nTIMEPARM DS    F                       timer exit parm\nTIMEECB  DS    F                       timer ECB\nECBLIST  DS    2F                      ECB list\n         SPACE 1\nPLIST    DS    F                       parameter list\nSLIST    DS    XL(ATTACHL)             SVC parameter list\n         SPACE 1\nRETCODE  DS    F                       return code\nRSNCODE  DS    F                       reason code\nABNCODE  DS    F                       abend code\nDDNAME   DS    CL8                     ISPF library type\nLIBTYPE  DS    CL8                     ISPF library type\nPRIMOPT  DS    CL8                     initial primary option\n         SPACE 1\nMVER     DS    CL9                     SDF version number\nMMR      DS    XL6                     M.R spool address\n         SPACE 1\nMID      DS    CL4                     SRF identifier\nMSCR     DS    CL4                     scroll amount\n         SPACE 1\nMSYSP    DS    CL1                     systems programmer auth Y/N\nMOPER    DS    CL1                     operations authority  Y/N\n         SPACE 1\nSELPANEL DS    CL8                     selection panel name\nMSG      DS    CL8                     ISPF message number\n         SPACE 1\nZOPT1    DS    CL8\nZOPT2    DS    CL8\nJOBID    DS    CL8                     job name/number\nUSERID   DS    CL8                     userid\nNETID    DS    CL8                     DJC network id\n         SPACE 1\nJESDDNAM DS    CL8                     JCT/spool data set ddname\nCKPDDNAM DS    CL8                     checkpoint data set ddname\nTTR      DS    XL3                     ttr for checkpoint read\n         SPACE 1\nMAINFLAG DS    X                       status flags\nCKPALLOC EQU   X'80'                   - checkpoint data set allocated\nMAINBYP  EQU   X'40'                   - bypass main selection panel\nISPFINIT EQU   X'20'                   - ISPF initializion done\n         SPACE 1\nMSGRC    DS    X,XL1                   message insert segments\nMSGRETC  DS    X,XL2\nMSGRSNC  DS    X,XL2\nMSGABNDC DS    X,XL2\nMSGABND  DS    X,CL6\n         SPACE 1\nEXECLEN  DS    H                       exec command length\nEXECCMD  DS    CL256                   exec command text\n         SPACE 1\n         SDFYTRB DSECT=NO              task request block\n         SPACE 1\n         ORG   LDAMAIN+(*-LDAMAIN+15)/16*16\n         EJECT\n***********************************************************************\n*                     INITIALIZATION WORK AREA                        *\n***********************************************************************\n         SPACE 1\nINITAREA DSECT                         initialization work area\nSAVEINIT DS    (18+PLSIZE)F            program save area\nIPLIST   EQU   SAVEINIT+18*4           patrameter list area\nILENGTH  DS    F                       length of applid\nIRETCODE DS    F                       return code\nIRSNCODE DS    F                       reason code\nIABNCODE DS    F                       abend code\nZAPPLID  DS    CL8                     ISPF applid\nICOMMAND DS    CL80                    select service command buffer\nINITLEN  EQU   (*-INITAREA+15)/16*16\n         EJECT\n***********************************************************************\n*                              DSECTS                                 *\n***********************************************************************\n         SPACE 1\nOPTDSECT DSECT                         selection table dsect\nOPTENTRY EQU   *                       selection table entry\nOPTION   DS    CL2                     select option\nOPTAUTH  DS    XL1                     authorization flags required\nSYSP     EQU   PDAVCTL                 - systems prog auth required\nSMSG     EQU   PDAVSMSG                - system messages auth required\nSLOG     EQU   PDAVLOG                 - system log auth required\nOPTFLAG  DS    XL1                     flags\nOPR      EQU   X'80'                   - operations auth code okay\nDSP      EQU   X'40'                   - SDF DSP is required\nSSI      EQU   X'20'                   - subsystem interface required\nOPTPROC  DS    XL2                     branch offset for select option\nOPTSIZE  EQU   *-OPTDSECT              length of select table entry\n         SPACE 1\n***********************************************************************\n*                       SDF USER PARAMETERS                           *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         SPACE 1\n         SDFYUPA DSECT=YES             SDF installation options\n         EJECT\n***********************************************************************\n*                   SDF INSTALLATION PARAMETERS                       *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         SPACE 1\n         SDFYIPA DSECT=YES             SDF installation options\n         EJECT\n***********************************************************************\n*                   SPOOL DISPLAY VECTOR TABLE                        *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         SPACE 1\n         SDFYSDVT ,                    spool display vector table\n         EJECT\n***********************************************************************\n*                       PROTECTED DATA AREA                           *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         SPACE 1\n         SDFYPDA ,                     protected data area mapping\n         EJECT\n***********************************************************************\n*                         GLOBAL DATA AREA                            *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         SPACE 1\n         SDFYGDA ,                     global data area mapping\n         EJECT\n***********************************************************************\n*                  24-BIT (LOW STORAGE) SERVICE AREA                  *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         SPACE 1\n         SDFYLSA ,                     24-bit service area\n         EJECT\n***********************************************************************\n*                      WORK AREA VECTOR TABLE                         *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         SPACE 1\n         SDFYWAVT ,                    Work Area Vector Table\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT793/CBT.V500.FILE793.PDS/SDFSRC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT793/CBT.V500.FILE793.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}