         TITLE 'SDFENQ: DISPLAY ENQ''s for an active region'
* ------------------------------------------------------------------- *
*                                                                     *
* MODULE NAME:     SDFENQ                                             *
*                                                                     *
* FUNCTION:        DISPLAY ENQ's for a region                         *
*                                                                     *
* Invoked by       'E' line command on the 'A' (active region display)*
*                                                                     *
* RETURN CODES:    None                                               *
*                                                                     *
* REGISTER USAGE:  R15, entry point address and return codes          *
*                  R14, used for bal to subroutines                   *
*                  R13, save area address                             *
*                  R12, base for global data area                     *
*                  R11, program base                                  *
*                  R0-R10, general work registers                     *
*                                                                     *
* ------------------------------------------------------------------- *

SDFENQ   CSECT
SDFENQ   AMODE 31
SDFENQ   RMODE ANY
         USING *,R15
         B     START
         DC    AL1(L'IDENT)
IDENT    DC    C'SDFENQ   &SYSDATE &SYSTIME'    MODULE IDENTIFIER
VERSION  DC    CL8'VER 2.9'                     SDF VERSION
START    DS    0H
         DROP  R15
         STM   R14,R12,12(R13)
         LR    R11,R15                          SET BASE REGS
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         USING SDFENQ,R11,R10                   BASE FOR PROGRAM
         USING GDA,R12                          BASE FOR GDA
         L     R15,GDALDA                       EXTERNAL WORK AREA
         A     R15,LDASTART                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                          SET WORK AREA BASE
         USING LDAENQ,R13                       DEFINE BASE
         MVC   LDA_GQSCAN(GQSCAN_L),GQSCAN_I    INIT GQSCAN
         L     R1,0(R1)                         PARM ADDRESS
         MVC   LDA_JOB_NAME,0(R1)               COPY JOB NAME
         XC    LDA_ENQ_CHAIN,LDA_ENQ_CHAIN
         XC    LDA_INDEX_FIRST,LDA_INDEX_FIRST
         XC    LDA_LAST_ENQ,LDA_LAST_ENQ
         XC    LDA_NBR_ON_CHAIN,LDA_NBR_ON_CHAIN
* ------------------------------------------------------------------- *
*        DEFINE VARIABLES                                             *
* ------------------------------------------------------------------- *
         LA    R1,VARS                          VDEFINE PARM LIST
         LA    R2,VARNUM                        NUMBER OF PARM LISTS
         BAL   R5,VDEF0000                      DEFINE VARIABLES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ISPLINK VGET,(SCRLAMT),RETNZ=*
         LTR   R15,R15                          SUCCESSFUL?
         BZ    INIT0010                         YES
         MVC   LDA_SCROLL,=C'CSR '              DEFAULT TO CURSOR
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0010 DS    0H
         ISPLINK VGET,(ENQSORT),RETNZ=*
         LTR   R15,R15                          SUCCESSFUL?
         BZ    INIT0020                         YES
         MVC   LDA_ENQ_SORT,SORT_JOB            DEFAULT SORT BY JOB
* ------------------------------------------------------------------- *
*        QUERY DYNAMIC AREA SIZE                                      *
* ------------------------------------------------------------------- *
INIT0020 DS    0H
         ISPLINK PQUERY,(PANEL,CVDATA,,CVWIDTH,CVDEPTH)
* ------------------------------------------------------------------- *
*        GETMAIN DYNAMIC AREA                                         *
* ------------------------------------------------------------------- *
         LH    R0,LDA_VWIDTH                    WIDTH
         MH    R0,LDA_VDEPTH                    MULTIPLY BY DEPTH
         ST    R0,LDA_VDATA_SIZE                SAVE VDATA SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,LDA_VDATA_ADDR                SAVE ADDRESS
         LR    R2,R1                            COPY VDATA ADDRESS
         ISPLINK VDEFINE,(CHARDATA,0(R2),CHAR,LDA_VDATA_SIZE)
* ------------------------------------------------------------------- *
*        OBTAIN THE ENQ INFO                                          *
* ------------------------------------------------------------------- *
ENQ0000  DS    0H
         XC    LDA_TOKEN,LDA_TOKEN              RESET TOKEN
ENQ0010  DS    0H
         GQSCAN QUIT=NO,                        REQUEST ENQ INFO       +
               TOKEN=LDA_TOKEN,                                        +
               AREA=(LDA_GQSCAN_DATA,GQSCAN_DATA_L),                   +
               MF=(E,LDA_GQSCAN)
         ST    R0,LDA_RIB_LENGTH                SAVE RIB AND RIBE SIZES
         ST    R1,LDA_RIBS                      SAVE NBR OF RIBS
         STC   R15,LDA_GQSCAN_RC                SAVE RC
         LTR   R15,R15                          SUCCESSFUL?
         BZ    ENQ0020                          YES
         CLI   LDA_GQSCAN_RC,8                  YES.. WITH MORE TO GO?
         BNE   ERR0010                          NO
ENQ0020  DS    0H
         LA    R7,LDA_GQSCAN_DATA               FIRST RIB
         USING RIB,R7
ENQ0030  DS    0H
         ICM   R2,15,RIBNRIBE                   NBR OF RIBE'S
         BZ    ENQ0100
         LH    R6,RIBVLEN                       RIBE VARIABLE LENGTH
         AH    R6,LDA_RIB_LENGTH                PLUS FIXED RIBE LENGTH
         AR    R6,R7                            FIRST RIBE
         USING RIBE,R6
ENQ0040  DS    0H
         CLC   LDA_JOB_NAME,ALL                 ALL?
         BE    ENQ0050                          YES
         CLC   LDA_JOB_NAME,RIBEJBNM            FOR THIS JOB?
         BNE   ENQ0090                          NO
ENQ0050  DS    0H
         LA    R1,1
         A     R1,LDA_NBR_ON_CHAIN              PLUS NBR ON CHAIN
         ST    R1,LDA_NBR_ON_CHAIN              UPDATE NBR
         GETMAIN RU,                                                   +
               LV=ENQ_L,                                               +
               LOC=ANY
         LR    R5,R1                            COPY ADDRESS
         USING ENQ_CHAIN,R5                     DEFINE BASE
         OC    LDA_ENQ_CHAIN,LDA_ENQ_CHAIN      ANYTHING ON CHAIN?
         BNZ   ENQ0060                          YES
         ST    R5,LDA_ENQ_CHAIN                 SAVE FIRST ON CHAIN
ENQ0060  DS    0H
         ICM   R1,15,LDA_LAST_ENQ               LAST ENQ GETMAIN'D
         BZ    ENQ0070
LAST     USING ENQ_CHAIN,R1
         ST    R5,LAST.ENQ_NEXT                 SET NEXT
         DROP  LAST
ENQ0070  DS    0H
         ST    R5,LDA_LAST_ENQ                  SAVE LAST ON CHAIN
         XC    ENQ_NEXT,ENQ_NEXT
         MVC   ENQ_JOB_NAME,RIBEJBNM            COPY JOB NAME
         MVC   ENQ_QNAME,RIBQNAME               COPY QNAME
         MVC   ENQ_RNAME,BLANKS                 INITIALIZE RNAME
         MVI   ENQ_PLUS,C' '
         LH    R1,RIBVLEN                       RNAME LENGTH
         CH    R1,=Y(L'ENQ_RNAME)               TOO LONG?
         BNH   ENQ0080                          NO
         MVI   ENQ_PLUS,C'+'                    NAME TRUNCATED
         LH    R1,=Y(L'ENQ_RNAME)               LIMIT LENGTH
ENQ0080  DS    0H
         BCTR  R1,0
         EX    R1,RNAME_MVC                     COPY RNAME
         MVC   ENQ_SCOPE,RIBSCOPE               COPY SCOPE
         MVC   ENQ_TYPE,RIBERFLG                COPY FLAGS
         L     R1,RIBNTWE                       WAITING FOR EXCLUSIVE
         A     R1,RIBNTWS                       PLUS WAITING FOR SHARED
         ST    R1,ENQ_WAITING                   SAVE TOTAL WAITING
         MVC   ENQ_STATUS,RIBESFLG              COPY STATUS
ENQ0090  DS    0H
         AH    R6,LDA_RIBE_LENGTH               NEXT RIBE
         BCT   R2,ENQ0040
ENQ0100  DS    0H
         L     R1,RIBNRIBE                      NBR OF RIBE'S
         MH    R1,LDA_RIBE_LENGTH               TIMES FIXED SIZE
         AH    R1,LDA_RIB_LENGTH                PLUS FIXED RIB LENGTH
         AH    R1,RIBVLEN                       PLUS VARIABLE RIB LEN
         AR    R7,R1                            NEXT RIB
         L     R1,LDA_RIBS                      NBR OF RIB'S
         BCTR  R1,0                             MINUS 1
         ST    R1,LDA_RIBS                      UPDATE REMAINING
         LTR   R1,R1                            ANY LEFT?
         BNZ   ENQ0030                          YES
         CLI   LDA_GQSCAN_RC,8                  MORE DATA?
         BE    ENQ0010                          YES
* ------------------------------------------------------------------- *
*        BUILD INDEX                                                  *
* ------------------------------------------------------------------- *
INDX0000 DS    0H
         ICM   R0,15,LDA_NBR_ON_CHAIN           NBR ON CHAIN
         BZ    ERR0010
         SLL   R0,2                             MULTIPLY BY 4
         ST    R0,LDA_INDEX_SIZE                SAVE INDEX SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,LDA_INDEX_FIRST               SAVE ADDR OF INDEX
         ST    R1,LDA_INDEX_CURR                SET CURRENT TO 1ST
         ICM   R5,15,LDA_ENQ_CHAIN              FIRST ON CHAIN
         BZ    ERR0020
INDX0010 DS    0H
         ST    R5,0(,R1)                        SAVE ENQ BLOCK ADDR
         LA    R1,4(,R1)                        NEXT IN INDEX
         ICM   R5,15,ENQ_NEXT                   NEXT ON CHAIN
         BNZ   INDX0010                         LOOP
         SH    R1,H4                            MINUS 4
         ST    R1,LDA_INDEX_LAST
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         MVC   LDA_ZCMD(L'SORT),SORT
         MVC   LDA_ZCMD+L'SORT(L'LDA_ENQ_SORT),LDA_ENQ_SORT
         B     SORT0000                         SORT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
BLD0000  DS    0H
         L     R0,LDA_VDATA_ADDR                VDATA ADDRESS
         L     R1,LDA_VDATA_SIZE                VDATA LENGTH
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                           INITIALIZE VDATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         LH    R9,LDA_VDEPTH                    NBR OF LINES
         L     R8,LDA_VDATA_ADDR                VDATA
         USING DETAIL,R8
         L     R4,LDA_INDEX_CURR                FIRST TO DISPLAY
* ------------------------------------------------------------------- *
*        BUILD DETAIL                                                 *
* ------------------------------------------------------------------- *
BLD0010  DS    0H
         L     R5,0(,R4)                        ENQ INFO
         MVI   DETAIL_ATTR_1,1                  DEFAULT ATTRIBUTE
         MVC   DETAIL_JOB_NAME,ENQ_JOB_NAME     COPY JOB NAME
         MVC   DETAIL_QNAME,ENQ_QNAME           COPY QNAME
         MVC   DETAIL_RNAME,ENQ_RNAME           COPY RNAME
         MVC   DETAIL_PLUS,ENQ_PLUS             COPY TRUNCATE INDICATOR
         TM    ENQ_SCOPE,RIBSYS                 SYSTEM?
         BO    BLD0030
         TM    ENQ_SCOPE,RIBSYSS                SYSTEMS?
         BO    BLD0040
         TM    ENQ_SCOPE,RIBSTEP                STEP?
         BO    BLD0050
         MVI   DETAIL_SCOPE,C'?'                UNKNOWN
         B     BLD0060
BLD0030  DS    0H
         MVI   DETAIL_SCOPE,C'S'                SCOPE IS 'SYSTEM'
         B     BLD0060
BLD0040  DS    0H
         MVI   DETAIL_SCOPE,C'X'                SCOPE IS 'SYSTEMS'
         B     BLD0060
BLD0050  DS    0H
         MVI   DETAIL_SCOPE,C'T'                SCOPE IS 'STEP'
BLD0060  DS    0H
         TM    ENQ_TYPE,RIBETYPE                EXCLUSIVE?
         BO    BLD0070                          NO
         MVI   DETAIL_TYPE,C'E'                 EXCLUSIVE
         B     BLD0080
BLD0070  DS    0H
         MVI   DETAIL_TYPE,C'S'                 SHARED
BLD0080  DS    0H
         ICM   R1,15,ENQ_WAITING                NBR OF TASKS WAITING
         BZ    BLD0090
         CVD   R1,LDA_DWORD                     CONVERT TO DECIMAL
         MVC   DETAIL_WAITING,=X'40202120'      SET EDIT WORD
         ED    DETAIL_WAITING,LDA_DWORD+6       EDIT NBR WAITING
         B     BLD0100
BLD0090  DS    0H
         MVC   DETAIL_WAITING,=C'None'          NONE WAITING
BLD0100  DS    0H
         TM    ENQ_STATUS,RIBESTAT              OWN RESOURCE?
         BO    BLD0110                          YES
         MVI   DETAIL_STATUS,C'W'               WAITING
         B     BLD0120
BLD0110  DS    0H
         MVI   DETAIL_STATUS,C'O'               OWN THE RESOURCE
BLD0120  DS    0H
         CLI   DETAIL_TYPE,C'E'                 EXCLUSIVE ENQ?
         BNE   BLD0130                          NO
         MVI   DETAIL_ATTR_1,2                  HIGHLIGHT
BLD0130  DS    0H
         CLI   DETAIL_STATUS,C'W'               WAITING?
         BNE   BLD0140                          NO
         MVI   DETAIL_ATTR_1,3                  SET COLOR TURQUOISE
         B     BLD0150
BLD0140  DS    0H
         CLI   DETAIL_WAITING,C'N'              ANYONE ELSE WAITING?
         BE    BLD0150                          NO
         MVI   DETAIL_ATTR_1,4                  SET COLOR RED
BLD0150  DS    0H
         AH    R8,LDA_VWIDTH                    NEXT LINE
         BCT   R9,BLD0210
         B     DISP0000                         SCREEN FULL
BLD0210  DS    0H
         C     R4,LDA_INDEX_LAST                AT LAST ENQ BLOCK?
         BE    DISP0000                         YES
         LA    R4,4(,R4)                        NEXT
         B     BLD0010                          BUILD DATA
BLD0220  DS    0H
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0000 DS    0H
         ISPLINK DISPLAY,(PANEL),RET8=EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for primary (ZCMD) commands                            *
*                                                                     *
*   First shift out any leading blanks                                *
*   Second 'squeeze' out multiple blanks                              *
*                                                                     *
* ------------------------------------------------------------------- *
         CLC   LDA_ZCMD,BLANKS                   BLANK?
         BE    DISP0120                          YES
         LA    R2,L'LDA_ZCMD-1
DISP0010 DS    0H
         CLI   LDA_ZCMD,C' '                     BLANK?
         BNE   DISP0020                          NO
         MVC   LDA_ZCMD(L'LDA_ZCMD-1),LDA_ZCMD+1 SHIFT LEFT 1
         MVI   LDA_ZCMD+(L'LDA_ZCMD-1),C' '      INSERT BLANK
         BCT   R2,DISP0010                       LOOP
DISP0020 DS    0H
         LA    R1,LDA_ZCMD
DISP0030 DS    0H
         CLC   BLANKS(2),0(R1)                   TWO BLANKS?
         BNE   DISP0040                          NO
         EX    R2,CMD_MVC                        SHIFT LEFT 1
         MVI   LDA_ZCMD+(L'LDA_ZCMD-1),C' '      INSERT BLANK
         B     DISP0050
CMD_MVC  MVC   0(0,R1),1(R1)                     SHIFT LEFT 1
DISP0040 DS    0H
         LA    R1,1(,R1)                         NEXT
DISP0050 DS    0H
         BCT   R2,DISP0030                       LOOP
         CLC   SORT,LDA_ZCMD                     SORT?
         BE    SORT0000                          YES
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for scrolling                                          *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0120 DS    0H
         NI    LDA_FLAGS,255-$LDA_VPUT
DISP0130 DS    0H
         ISPLINK VGET,(SCRLVARS,SHARED),RET8=DISP0140
         CLC   ABEND,LDA_ZVERB                  ABEND?
         BE    ABEND000                         YES
         CLI   LDA_ZVERB,C'B'                   BOTTOM?
         BE    DISP0230                         YES
         CLI   LDA_ZVERB,C'D'                   SCROLL DOWN?
         BE    DISP0200                         YES
         CLI   LDA_ZVERB,C'T'                   TOP?
         BE    DISP0180                         YES
         CLI   LDA_ZVERB,C'U'                   SCROLL UP?
         BE    DISP0150                         YES
DISP0140 DS    0H
         TM    LDA_FLAGS,$LDA_VPUT              ALREADY DONE VPUT?
         BO    DISP0000                         YES
         OI    LDA_FLAGS,$LDA_VPUT              SET VPUT FLAG
         ISPLINK VPUT,(SCRLVARS,SHARED),RETNZ=*
         B     DISP0130                         TRY VGET AGAIN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0150 DS    0H
         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD
         CLI   LDA_ZSCROLLA,C'M'                MAX?
         BE    DISP0180                         YES
         L     R1,LDA_ZSCROLLN                  NBR TO SCROLL
         SLL   R1,2                             MULT BY 4
         L     R0,LDA_INDEX_CURR                CURRENT STARTING POINT
         SR    R0,R1                            MINUS SCROLL
         C     R0,LDA_INDEX_FIRST               BEYOND TOP?
         BL    DISP0180                         YES
         ST    R0,LDA_INDEX_CURR                CHANGE STARTING POINT
         B     BLD0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0180 DS    0H
         MVC   LDA_INDEX_CURR,LDA_INDEX_FIRST   FORCE TO FIRST
         B     BLD0000                          RE-BUILD DISPLAY
* ------------------------------------------------------------------- *
*        SCROLL DOWN                                                  *
* ------------------------------------------------------------------- *
DISP0200 DS    0H
         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD
         CLI   LDA_ZSCROLLA,C'M'                MAX?
         BE    DISP0230                         YES
         L     R1,LDA_ZSCROLLN                  NBR OF LINES TO SCROLL
         SLL   R1,2                             MULT BY 4
         A     R1,LDA_INDEX_CURR                PLUS CURRENT
         C     R1,LDA_INDEX_LAST                BEYOND END?
         BH    DISP0230                         YES
         ST    R1,LDA_INDEX_CURR                CHANGE START POINT
         B     BLD0000                          REBUILD DISPLAY
*---------------------------------------------------------------------*
*        BOTTOM                                                       *
*---------------------------------------------------------------------*
DISP0230 DS    0H
         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD
         MVC   LDA_INDEX_CURR,LDA_INDEX_LAST    FORCE TO LAST
         B     BLD0000                          REBUILD DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
*        Sort ENQs                                                    *
*                                                                     *
*    Sort options are                                                 *
*        JOB       JOB name                                           *
*        SCOPE     Task, SYSTEM, or SYSTEMS                           *
*        STATUS    Own or Wait status                                 *
*        QNAME     QNAME (Major name)                                 *
*        RNAME     RNAME (Minor name)                                 *
*                                                                     *
* ------------------------------------------------------------------- *
SORT0000 DS    0H
         CLC   SORT_JOB,LDA_ZCMD+L'SORT         SORT BY JOB NAME?
         BE    SORT0010                         YES
         CLC   SORT_SCOPE,LDA_ZCMD+L'SORT       SORT BY SCOPE?
         BE    SORT0020                         YES
         CLC   SORT_STATUS,LDA_ZCMD+L'SORT      SORT BY STATUS
         BE    SORT0030                         YES
         CLC   SORT_QNAME,LDA_ZCMD+L'SORT       SORT BY QNAME?
         BE    SORT0040                         YES
         CLC   SORT_RNAME,LDA_ZCMD+L'SORT       SORT BY RNAME
         BE    SORT0050                         YES
         LA    R0,6
         BAL   R5,MSG0000                       SET MESSAGE
         B     DISP0000
SORT0010 DS    0H
         MVC   LDA_SORT_CLC,JOB_CLC             COMPARE JOB NAMES
         B     SORT0060
SORT0020 DS    0H
         MVC   LDA_SORT_CLC,SCOPE_CLC           COMPARE SCOPES
         B     SORT0060
SORT0030 DS    0H
         MVC   LDA_SORT_CLC,STATUS_CLC          COMPARE SCOPES
         B     SORT0060
SORT0040 DS    0H
         MVC   LDA_SORT_CLC,QNAME_CLC           COMPARE QNAMES
         B     SORT0060
SORT0050 DS    0H
         MVC   LDA_SORT_CLC,RNAME_CLC           COMPARE RNAMES
* ------------------------------------------------------------------- *
*                                                                     *
*        Sort logic                                                   *
*                                                                     *
*  LDA_SORT_CLC will have been set to the CLC to use for compares     *
*  LDA_INDEX_FIRST is the address of 1st ENQ_CHAIN in index table     *
*  LDA_NBR_ON_CHAIN is the number of entries                          *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
SORT0060 DS    0H
A        USING ENQ_CHAIN,R4
B        USING ENQ_CHAIN,R5
         MVC   LDA_ENQ_SORT,LDA_ZCMD+L'SORT       COPY SORT FIELD NAME
         MVC   LDA_ZCMD,BLANKS                    RESET COMMAND
         L     R2,LDA_INDEX_FIRST                 FIRST IN TABLE
         L     R7,LDA_NBR_ON_CHAIN                NUMBER ON CHAIN
SORT0070 DS    0H
         ST    R2,LDA_SORT_TOP                    SAVE LOOP START
         LA    R3,4(,R2)                          ENTRY FOLLOWING 'TOP'
         LR    R6,R7                              COPY NBR TO SCAN
         BCTR  R6,0                               MINUS 1
         CH    R6,H2                              AT LEAST 2 LEFT?
         BL    BLD0000                            NO
SORT0080 DS    0H
         L     R4,0(,R2)                          ADDR OF RECORD 'A'
         L     R5,0(,R3)                          ADDR OF RECORD 'B'
         EX    R0,LDA_SORT_CLC                    COMPARE
         BL    SORT0090                           A < B
         XC    0(4,R2),0(R3)                      SWAP
         XC    0(4,R3),0(R2)
         XC    0(4,R2),0(R3)
SORT0090 DS    0H
         LA    R3,4(,R3)                          NEXT IN TABLE
         BCT   R6,SORT0080                        LOOP
         L     R2,LDA_SORT_TOP                    START OF LAST LOOP
         LA    R2,4(,R2)                          DOWN 1
         BCT   R7,SORT0070
         DC    H'0'                               SHOULD NEVER HAPPEN

JOB_CLC    CLC   A.ENQ_JOB_NAME,B.ENQ_JOB_NAME    COMPARE JOB NAMES
SCOPE_CLC  CLC   A.ENQ_SCOPE,B.ENQ_SCOPE          COMPARE SCOPES
STATUS_CLC CLC   A.ENQ_STATUS,B.ENQ_STATUS        COMPARE STATUS
QNAME_CLC  CLC   A.ENQ_QNAME,B.ENQ_QNAME          COMPARE QNAME
RNAME_CLC  CLC   A.ENQ_RNAME,B.ENQ_RNAME          COMPARE RNAME
           DROP  A,B
* ------------------------------------------------------------------- *
*                                                                     *
*        VDEFINE VARIABLES                                            *
*        R1    1ST ISPLINK PARM LIST                                  *
*        R2    NUMBER OF PARM LISTS                                   *
*                                                                     *
* ------------------------------------------------------------------- *
VDEF0000 DS    0H
VDEF0010 DS    0H
         ISPLINK MF=(E,(R1))
         LA    R1,10(,R1)
         BCT   R2,VDEF0010
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
*        VDELETE VARAIBLES                                            *
*                                                                     *
*    It may be a bit cludgy, but copying "+2" allows the same         *
*    parm list to be used for VDEFINE and VDELETE                     *
*                                                                     *
*                                                                     *
*        R1    FIRST ISPLINK PARM LIST                                *
*        R2    NUMBER OF PARM LISTS                                   *
*                                                                     *
* ------------------------------------------------------------------- *
VDEL0000 DS    0H
         LR    R3,R1                           FIRST PARAMETER LIST
         MVC   LDA_PLIST(2),VDELLIST           COPY LIST
VDEL0010 DS    0H
         MVC   LDA_PLIST+2(2),2(R3)            COPY PARAMETER LIST
         ISPLINK MF=(E,LDA_PLIST)              CALL ISPF INTERFACE
         LA    R3,10(,R3)                      NEXT ISPLINK PLIST
         BCT   R2,VDEL0010                     LOOP
         BR    R5                              RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         LA    R0,3
         BAL   R5,MSG0000
         B     EXIT0000
ERR0020  DS    0H
         LA    R0,4
         BAL   R5,MSG0000
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVC   LDA_MSG,=CL8'SDFE000'
         CVD   R0,LDA_DWORD                    CONVERT TO DECIMAL
         UNPK  LDA_MSG+4(3),LDA_DWORD+6(2)     UNPACK MESSAGE NUMBER
         OI    LDA_MSG+6,X'F0'                 MAKE SIGN PRINTABLE
         ISPLINK SETMSG,(LDA_MSG)              SET ISPF MESSAGE
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ISPLINK VPUT,(SCRLAMT,PROFILE),RETNZ=*
         ISPLINK VPUT,(ENQSORT,PROFILE),RETNZ=*
         LA    R1,VARS
         LA    R2,VARNUM
         BAL   R5,VDEL0000
         ISPLINK VDELETE,(CHARDATA)
         L     R1,LDA_VDATA_ADDR
         L     R0,LDA_VDATA_SIZE
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=(0)
         ICM   R5,15,LDA_ENQ_CHAIN
         BZ    EXIT0020                        NONE ON CHAIN
EXIT0010 DS    0H
         LR    R1,R5                           COPY ADDRESS
         L     R5,ENQ_NEXT                     NEXT ON CHAIN
         FREEMAIN RU,                          FREE ENQ BLOCK          +
               A=(1),                                                  +
               LV=ENQ_L
         LTR   R5,R5                           END OF CHAIN
         BNZ   EXIT0010                        NO
EXIT0020 DS    0H
         ICM   R1,15,LDA_INDEX_FIRST           INDEX ALLOCATED?
         BZ    EXIT0030                        NO
         L     R0,LDA_INDEX_SIZE               INDEX SIZE
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=(0)
EXIT0030 DS    0H
         XC    LDA_ENQ_CHAIN,LDA_ENQ_CHAIN
         XC    LDA_INDEX_FIRST,LDA_INDEX_FIRST
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
RNAME_MVC MVC  ENQ_RNAME(0),RIBEND             COPY RNAME
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
LDASTART         DC    Q(LDAENQ)

GQSCAN_I       GQSCAN  SCOPE=ALL,                                      +
               QUIT=NO,                                                +
               AREA=(*,GQSCAN_DATA_L),                                 +
               MF=L
GQSCAN_L       EQU    *-GQSCAN_I

VDELLIST         ISPLINK VDELETE,(0),MF=L

VARS             DS      0F
                 ISPLINK VDEFINE,(FIXED4,LDA_ZSCROLLN,FIXED,4),MF=L
VARL             EQU     *-VARS
                 ISPLINK VDEFINE,(FIXED2,LDA_VWIDTH,FIXED,2),MF=L
                 ISPLINK VDEFINE,(CHAR4,LDA_ZSCROLLA,CHAR,4),MF=L
                 ISPLINK VDEFINE,(CHAR8,LDA_ZVERB,CHAR,8),MF=L
                 ISPLINK VDEFINE,(CHAR80,LDA_ZCMD,CHAR,80),MF=L
VARNUM           EQU     (*-VARS)/VARL

H2               DC    H'2'
H4               DC    H'4'

ALL              DC    CL8'ALL'
BLANKS           DC    CL80' '
PANEL            DC    CL8'SDFENQ'
CVDATA           DC    CL8'VDATA'
CVWIDTH          DC    CL8'VWIDTH'
CVDEPTH          DC    CL8'VDEPTH'
SORT             DC    C'SORT '
SORT_JOB         DC    CL8'JOB '
SORT_SCOPE       DC    CL8'SCOPE '
SORT_STATUS      DC    CL8'STATUS '
SORT_QNAME       DC    CL8'QNAME '
SORT_RNAME       DC    CL8'RNAME '

FIXED4           DC    C'(ZSCROLLN)'
FIXED2           DC    C'(VWIDTH VDEPTH VVDEPTH)'
CHARDATA         DC    C'(VDATA)'
CHAR4            DC    C'(ZSCROLLA VSCR)'
CHAR8            DC    C'(ZVERB ENQJNAME ENQSORT)'
CHAR80           DC    C'(ZCMD)'
SCRLAMT          DC    C'(VSCR)'
ENQSORT          DC    C'(ENQSORT)'

SCRLVARS         DC    C'(ZVERB ZSCROLLA ZSCROLLN)'

ABEND            DC    C'ABEND'

HEXCHAR          EQU   *-C'0'
                 DC    C'0123456789ABCDEF'

                 LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DETAIL           DC  0C
DETAIL_ATTR_1    DS  X
DETAIL_JOB_NAME  DS  CL8
                 DS  C
DETAIL_SCOPE     DS  C
                 DS  C
DETAIL_TYPE      DS  C
                 DS  C
DETAIL_STATUS    DS  C
                 DS  C
DETAIL_WAITING   DS  CL4
                 DS  C
DETAIL_QNAME     DS  CL8' '
                 DS  X
DETAIL_RNAME     DS  CL40' '
DETAIL_PLUS      DS  C
DETAIL_L         EQU *-DETAIL
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
LDAENQ           DSECT
LDAID            DS    CL8             MODULE IDENTIFIER
SAVEAREA         DS    18F             PROGRAM REGISTER SAVE AREA
                 DS    CL8

LDA_DWORD        DS    D

LDA_PLIST        DS    3F

LDA_GQSCAN       DS    0F,(GQSCAN_L)X  GQSCAN MF=L

LDA_VDATA_ADDR   DS    A               VDATA ADDRESS
LDA_VDATA_SIZE   DS    F               VDATA SIZE

LDA_TOKEN        DS    F
LDA_RIB_LENGTH   DS    H               SIZE OF RIB'S
LDA_RIBE_LENGTH  DS    H               SIZE OF RIBE'S
LDA_RIBS         DS    F               NBR OF RIBS

LDA_ZSCROLLN     DS    F               NBR OF LINES TO SCROLL


LDA_ENQ_CHAIN    DS    A               CHAIN OF MATCHING ENQ DATA
LDA_LAST_ENQ     DS    A               LAST ENQ BLOCK GETMAINED
LDA_NBR_ON_CHAIN DS    F               NBR OF RIBE'S ON CHAIN
LDA_INDEX_SIZE   DS    F               INDEX SIZE
LDA_INDEX_FIRST  DS    A               1ST ENTRY IN INDEX
LDA_INDEX_LAST   DS    A               LAST ENTRY IN INDEX
LDA_INDEX_CURR   DS    A               CURRENT INDEX ENTRY

LDA_SORT_TOP     DS    A

LDA_SORT_CLC     CLC   0(0,R4),0(R5)

LDA_VWIDTH       DS    H
LDA_VDEPTH       DS    H
LDA_VVDEPTH      DS    H

LDA_ZSCROLLA     DS    CL4             SCROLL AMOUNT
LDA_SCROLL       DS    CL4             SCROLL CONTROL (PAGE, CSR, ...)

LDA_GQSCAN_RC    DS    X

LDA_FLAGS        DS    X
$LDA_ERROR       EQU   X'80'
$LDA_VPUT        EQU   X'40'

LDA_EDWORD       DS    XL4

LDA_PLUS         DS    C

LDA_ZVERB        DS    CL8             SCROLL VERB
LDA_JOB_NAME     DS    CL8
LDA_ENQ_SORT     DS    CL8

LDA_MSG          DS    CL8

LDA_ZCMD         DS    CL80

LDA_GQSCAN_DATA  DS    8192X
GQSCAN_DATA_L    EQU   *-LDA_GQSCAN_DATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ENQ_CHAIN        DSECT
ENQ_NEXT         DS    A               NEXT ON CHAIN
ENQ_WAITING      DS    F               NBR OF WAITING FOR RESOURCE
ENQ_JOB_NAME     DS    CL8             JOB NAME
ENQ_QNAME        DS    CL8             QNAME
ENQ_RNAME        DS    CL40            RNAME
ENQ_PLUS         DS    C               RNAME TRUNCATION INDICATOR
ENQ_SCOPE        DS    X               SCOPE
ENQ_TYPE         DS    X               TYPE
ENQ_STATUS       DS    X               STATUS
ENQ_L            EQU   *-ENQ_CHAIN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         SDFYGDA  ,
         SDFYPDA  ,

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
         IKJTCB   DSECT=YES,LIST=NO
         ISGRIB   ,

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IATYREG ,
         END
