         TITLE 'SDFACT: DISPLAY ACTIVE REGIONS'
* ------------------------------------------------------------------- *
*                                                                     *
* MODULE NAME:     SDFACT                                             *
*                                                                     *
* FUNCTION:        DISPLAY ACTIVE REGIONS                             *
*                                                                     *
* RETURN CODES:    None                                               *
*                                                                     *
* REGISTER USAGE:  R15, entry point address and return codes          *
*                  R14, used for bal to subroutines                   *
*                  R13, save area address                             *
*                  R12, base for global data area                     *
*                  R11, program base                                  *
*                  R0-R10, general work registers                     *
*                                                                     *
* ------------------------------------------------------------------- *

SDFACT   CSECT
SDFACT   AMODE 31
SDFACT   RMODE ANY
         USING *,R15
         B     START
         DC    AL1(L'IDENT)
IDENT    DC    C'SDFACT   &SYSDATE &SYSTIME' MODULE IDENTIFIER
VERSION  DC    CL8'VER 2.9'                     SDF VERSION
START    DS    0H
         DROP  R15
         STM   R14,R12,12(R13)
         LR    R11,R15                          SET BASE REGS
         LA    R10,2048(,R11)
         LA    R10,2048(,R10)
         USING SDFACT,R11,R10                   BASE FOR PROGRAM
         USING GDA,R12                          BASE FOR GDA
         L     R15,GDALDA                       EXTERNAL WORK AREA
         A     R15,LDASTART                     PLUS DISP
         ST    R13,4(,R15)
         ST    R15,8(,R13)
         LR    R13,R15                          SET WORK AREA BASE
         USING LDAACT,R13                       DEFINE BASE
* ------------------------------------------------------------------- *
*        DEFINE VARIABLES                                             *
* ------------------------------------------------------------------- *
         LA    R1,VARS                          VDEFINE PARM LIST
         LA    R2,VARNUM                        NUMBER OF PARM LISTS
         BAL   R5,VDEF0000                      DEFINE VARIABLES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ISPLINK VGET,(SCRLAMT),RETNZ=*
         LTR   R15,R15                          SUCCESSFUL?
         BZ    INIT0010                         YES
         MVC   LDA_SCROLL,=C'CSR '              DEFAULT TO CURSOR
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0010 DS    0H
         ISPLINK VGET,(FILTERS),RETNZ=*
         LTR   R15,R15                          SUCCESSFUL?
         BZ    INIT0020                         YES
         MVC   LDA_FILTER_TYPE,TYPE_ALL
         MVC   LDA_FILTER_USER,BLANKS
         MVC   LDA_FILTER_PRFX,BLANKS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0020 DS    0H
         LA    R1,L'LDA_FILTER_USER
         LA    R2,LDA_FILTER_USER+L'LDA_FILTER_USER-1
INIT0030 DS    0H
         CLI   0(R2),C' '                       BLANK?
         BNE   INIT0040
         BCTR  R2,0
         BCT   R1,INIT0030
INIT0040 DS    0H
         STH   R1,LDA_USER_LENGTH               LENGTH OF FILTER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R1,L'LDA_FILTER_PRFX
         LA    R2,LDA_FILTER_PRFX+L'LDA_FILTER_PRFX-1
INIT0050 DS    0H
         CLI   0(R2),C' '                       BLANK?
         BNE   INIT0060
         BCTR  R2,0
         BCT   R1,INIT0050
INIT0060 DS    0H
         STH   R1,LDA_PRFX_LENGTH               LENGTH OF FILTER
* ------------------------------------------------------------------- *
*        QUERY DYNAMIC AREA SIZE                                      *
* ------------------------------------------------------------------- *
INIT0070 DS    0H
         ISPLINK PQUERY,(PANEL,CVDATA,,CVWIDTH,CVDEPTH)
* ------------------------------------------------------------------- *
*        GETMAIN DYNAMIC AREA                                         *
* ------------------------------------------------------------------- *
         LH    R0,VWIDTH                        WIDTH
         MH    R0,VDEPTH                        MULTIPLY BY DEPTH
         ST    R0,LDA_VDATA_SIZE                SAVE VDATA SIZE
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ST    R1,LDA_VDATA_ADDR                SAVE ADDRESS
         LR    R2,R1                            COPY VDATA ADDRESS
         ISPLINK VDEFINE,(CHARDATA,0(R2),CHAR,LDA_VDATA_SIZE)
         L     R2,GDASDVT                       SDVT ADDRESS
         USING SDVT,R2
         MVC   LDA_DSP_TABLE,SDVADSP            COPY DSP TABLE ADDRESS
         TM    LDA_FLAGS,$LDA_INIT              ALREADY DONE INIT?
         BO    BLD0010                          YES
* ------------------------------------------------------------------- *
*        BUILD DISPLAY                                                *
* ------------------------------------------------------------------- *
BLD0000  DS    0H
         OI    LDA_FLAGS,$LDA_INIT              SET FLAG
         L     R1,CVTPTR                        CVT ADDRESS
         USING CVT,R1                           DEFINE BASE
         L     R1,CVTASVT                       ASVT ADDRESS
         USING ASVT,R1                          DEFINE BASE
         LA    R2,ASVTFRST                      1ST ASVT ENTRY
         ST    R2,LDA_FIRST_AS                  FIRST A/S
         ST    R2,LDA_CURR_AS                   CURRENT A/S
         L     R3,ASVTMAXU                      MAXIMUM ADDRESS SPACES
         BCTR  R3,0                             MINUS 1
         SLL   R3,2                             TIMES 4
         AR    R3,R1                            ADDRESS OF LAST ENTRY
         ST    R3,LDA_LAST_AS                   SAVE ADDRESS
BLD0010  DS    0H
         L     R0,LDA_VDATA_ADDR
         L     R1,LDA_VDATA_SIZE
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14                           INITIALIZE VDATA
         L     R9,LDA_CURR_AS                   CURRENT ADDRESS SPACE
         L     R8,LDA_VDATA_ADDR
         LH    R7,VDEPTH                        NBR OF ROWS
BLD0020  DS    0H
         ICM   R6,15,0(R9)                      ASCB ADDRESS FROM ASVT
         BM    BLD0190                          A/S NOT IN USE
         USING ASCB,R6
         L     R2,ASCBOUCB                      OUCB ADDRESS
         USING OUCB,R2
         MVC   0(DETAIL_L,R8),DETAIL
V        USING DETAIL,R8
         MVI   V.DETAIL_ATTR_1,2
         MVI   V.DETAIL_ATTR_2,1
         MVC   V.DETAIL_USER,OUCBUSRD           COPY USER ID
         ICM   R4,15,ASCBJBNI                   JOB NAME?
         BZ    BLD0030                          NO
         MVC   V.DETAIL_NAME,0(R4)              COPY JOB NAME
         B     BLD0080
BLD0030  DS    0H
         ICM   R4,15,ASCBJBNS                   TRY STC NAME
         BZ    BLD0190                          VERY STRANGE
         MVC   V.DETAIL_NAME,0(R4)              COPY JOB OR STC NAME
         CLI   0(R4),C'*'                       MASTER SCHEDULER?
         BE    BLD0100                          YES
         S     R4,=A(CHNAME-CSCX)               ADDRESS OF CSCX
         USING CSCX,R4
         L     R3,CHCSCBP                       CSCB ADDRESS
         USING CSCB,R3
         TM    OUCBYFL,OUCBSTT                  STARTED TASK?
         BO    BLD0040                          YES
         TM    OUCBYFL,OUCBLOG                  TSO USER?
         BO    BLD0050
         MVI   V.DETAIL_TYPE,C'M'               A/S IS A MOUNT
         B     BLD0060
BLD0040  DS    0H
         MVI   V.DETAIL_TYPE,C'S'               A/S IS AN STC
         B     BLD0060
BLD0050  DS    0H
         MVI   V.DETAIL_TYPE,C'T'               TSO USER
BLD0060  DS    0H
         LTR   R3,R3                            CSCB PRESENT?
         BZ    BLD0100                          NO
BLD0070  DS    0H
         CLI   CHKEY,C' '                       STEP NAME PRESENT?
         BNH   BLD0090                          NO
         MVC   V.DETAIL_STEP,CHKEY              COPY STEP NAME
         TM    OUCBYFL,OUCBLOG                  TSO USER?
         BNO   BLD0090                          NO
         CLI   CHCLS,C' '                       PROC NAME PRESENT?
         BNH   BLD0100                          NO
         MVC   V.DETAIL_PROC,CHCLS              COPY PROC NAME
         B     BLD0100
BLD0080  DS    0H
         MVI   V.DETAIL_TYPE,C'B'               A/S IS A BATCH JOB
         S     R4,=A(CHNAME-CSCX)               ADDRESS OF CSCX
         L     R3,CHCSCBP                       CSCB ADDRESS
         CLI   CHSTEP,C' '                      STEP NAME PRESENT?
         BNH   BLD0090                          NO
         MVC   V.DETAIL_STEP,CHSTEP             COPY STEP NAME
BLD0090  DS    0H
         CLI   CHPROCSN,C' '                    PROC STEP NAME PRESENT?
         BNH   BLD0100                          NO
         MVC   V.DETAIL_PROC,CHPROCSN           COPY PROC STEP NAME
BLD0100  DS    0H
         LM    R0,R1,ASCBEJST
         LM    R14,R15,ASCBSRBT
         SRDL  R0,12
         SRDL  R14,12
         AR    R1,R15
         SR    R0,R0                            CLEAR R0
         D     R0,F10000                        COMPUTE 100THS
         SR    R0,R0
         D     R0,F100                          COMPUTE WHOLE SECONDS
         CVD   R0,LDA_DWORD                     CONVERT TO DECIMAL
         MVC   LDA_EDWORD,=X'F0202020'
         ED    LDA_EDWORD,LDA_DWORD+6           EDIT HUNDREDTHS
         MVC   V.DETAIL_HUNDREDTHS,LDA_EDWORD+2 COPY HUNDREDTHS
         MVI   V.DETAIL_DECIMAL,C'.'            INSERT decimal
         SR    R0,R0                            CLEAR REMAINDER
         D     R0,F60                           COMPUTE MINUTES
         CVD   R0,LDA_DWORD
         MVC   LDA_EDWORD,=X'F0202020'          INITIALIZE
         ED    LDA_EDWORD,LDA_DWORD+6           EDIT SECONDS
         MVC   V.DETAIL_SECONDS,LDA_EDWORD+2    COPY MINUTES
         MVI   V.DETAIL_COLON2,C':'             INSERT COLON
         SR    R0,R0
         D     R0,F60                           COMPUTE HOURS
         CVD   R0,LDA_DWORD                     CONVERT TO DECIMAL
         MVC   LDA_EDWORD,=X'F0202020'          INITIALIZE
         ED    LDA_EDWORD,LDA_DWORD+6           EDIT MINUTES
         MVC   V.DETAIL_MINUTES,LDA_EDWORD+2    COPY MINUTES
         MVI   V.DETAIL_COLON1,C':'             INSERT COLON
         CVD   R1,LDA_DWORD                     CONVERT TO DECIMAL
         MVC   LDA_EDWORD,=X'F0202020'          INITIALIZE
         ED    LDA_EDWORD,LDA_DWORD+6           EDIT HOURS
         MVC   V.DETAIL_HOURS,LDA_EDWORD+2      COPY HOURS
         L     R1,ASCBIOSC                      NBR OF I/O'S
         CVD   R1,LDA_DWORD                     CONVERT TO DECIMAL
         MVC   V.DETAIL_IO,=X'402020206B2020206B202120'
         ED    V.DETAIL_IO,LDA_DWORD+3          EDIT I/O'S
         ICM   R1,15,ASCBASSB                   ASSB PRESENT?
         BZ    BLD0110                          NO
         USING ASSB,R1
         ICM   R1,15,ASSBJSAB                   JSCB PRESENT?
         BZ    BLD0110
         USING IAZJSAB,R1
         MVC   V.DETAIL_JOB_NBR,JSABJBID+3      COPY JOB NUMBER
         DROP  R1
BLD0110  DS    0H
         CLC   LDA_FILTER_TYPE,TYPE_ALL         DISPLAY ALL TYPES?
         BE    BLD0130                          YES
         CLC   V.DETAIL_TYPE,LDA_FILTER_TYPE    TYPES MATCH?
         BNE   BLD0190                          NO
BLD0130  DS    0H
         SR    R1,R1
         ICM   R1,3,LDA_USER_LENGTH             USER GIVEN?
         BZ    BLD0140                          NO
         BCTR  R1,0
         EX    R1,USERCLC                       CORRECT USER?
         BNE   BLD0190                          NO
BLD0140  DS    0H
         ICM   R1,3,LDA_PRFX_LENGTH             PREFIX GIVEN?
         BZ    BLD0180                          NO
         BCTR  R1,0
         EX    R1,PRFXCLC                       CORRECT PREFIX?
         BNE   BLD0190                          NO
BLD0180  DS    0H
         AH    R8,VWIDTH                        NEXT LINE
         BCT   R7,BLD0200                       LOOP
         B     DISP0000                         BUFFER FULL
BLD0190  DS    0H
         MVC   0(80,R8),BLANKS                  WIPE OUT THE DATA
BLD0200  DS    0H
         C     R9,LDA_LAST_AS                   AT LAST A/S?
         BE    DISP0000                         YES
         LA    R9,4(,R9)                        NEXT IN ASVT
         B     BLD0020
USERCLC  CLC   LDA_FILTER_USER(0),V.DETAIL_USER
PRFXCLC  CLC   LDA_FILTER_PRFX(0),V.DETAIL_NAME
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0000 DS    0H
         ISPLINK DISPLAY,(PANEL),RET8=EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*        Check for line command(s)                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0010 DS    0H
         L     R8,LDA_VDATA_ADDR
         LH    R7,VDEPTH
         NI    LDA_FLAGS,$LDA_LINE_CMD          NO LINE COMMANDS
         NI    LDA_FLAGS,$LDA_ERROR             NO ERRORS
DISP0020 DS    0H
         OI    V.DETAIL_SELECT,C' '             'TRANSLATE' TO UPPER
         CLI   V.DETAIL_SELECT,C'E'             DISPLAY ENQ's?
         BE    ENQ0000                          YES
         CLI   V.DETAIL_SELECT,C' '             BLANK?
         BE    DISP0060                         YES
         CLI   V.DETAIL_JOB_NBR,C' '            JOB NUMBER PRESENT?
         BE    DISP0040                         NO
         CLI   V.DETAIL_SELECT,C'C'             CANCEL?
         BE    CAN0000                          YES
         CLI   V.DETAIL_SELECT,C'S'             SELECT?
         BE    DISP0030                         YES
         LA    R0,0
         BAL   R5,MSG0000
         B     DISP0000
DISP0030 DS    0H
         MVI   V.DETAIL_SELECT,C' '             RESET LINE COMMAND
         OI    LDA_FLAGS,$LDA_LINE_CMD          SET INDICATOR
         PACK  LDA_DWORD,V.DETAIL_JOB_NBR
         CVB   R1,LDA_DWORD                     CONVERT TO BINARY
         STCM  R1,3,JSBJOBNO                    SET JOB NUMBER
         SDFXJSB JOBNUM=JSBJOBNO                UPDATE JSB
         MVC   JSB+000(256),0(R1)               COPY JSB
         MVC   JSB+256(JSBSIZE-256),256(R1)
         LTR   R15,R15                          SUCCESSFUL?
         BNZ   DISP0060                         NO

         AGO   .BYPASS1
I don't understand the newer authorization method and I don't
have the means to test SDF 3.4 (we still use 2.9).
Hopefully someone will know how to add the authorization
check for version 3.4

         AUTHCHK TYPE=READ,JSB=JSB              CHECK AUTHORIZATION
         LTR   R15,R15                          USER AUTHORIZED?
         BNZ   DISP0050                         NO
.BYPASS1 ANOP


         BAL   R5,JSB0000
         SDFCALL SDFDSLST,(SDFDSLST_CMD,JSB)
         B     DISP0060
DISP0040 DS    0H
         LA    R0,1
         BAL   R5,MSG0000                       SET MESSAGE
         B     DISP0000
DISP0050 DS    0H
         MVI   V.DETAIL_ATTR_1,3                SET ATTRIBUTE
         MVI   V.DETAIL_ATTR_2,3                SET ATTRIBUTE
         MVC   V.DETAIL_STEP(L'NOT_AUTH),NOT_AUTH
         OI    LDA_FLAGS,$LDA_ERROR             SET ERROR INDICATOR
DISP0060 DS    0H
         AH    R8,VWIDTH                        NEXT LINE
         BCT   R7,DISP0020                      LOOP
* ------------------------------------------------------------------- *
*                                                                     *
*        If there were any line commands or errors                    *
*        suppress scrolling.                                          *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    LDA_FLAGS,$LDA_LINE_CMD          LINE COMMAND(S)?
         BO    DISP0000                         YES, DON'T SCROLL
         TM    LDA_FLAGS,$LDA_ERROR             ERROR(S)?
         BO    DISP0000                         YES, DON'T SCROLL
* ------------------------------------------------------------------- *
*                                                                     *
*        No line commands check for scrolling                         *
*                                                                     *
* ------------------------------------------------------------------- *
         NI    LDA_FLAGS,255-$LDA_VPUT
DISP0070 DS    0H
         ISPLINK VGET,(SCRLVARS,SHARED),RET8=DISP0140
         CLI   LDA_ZVERB,C'B'                   BOTTOM?
         BE    DISP0230                         YES
         CLI   LDA_ZVERB,C'D'                   SCROLL DOWN?
         BE    DISP0200                         YES
         CLI   LDA_ZVERB,C'T'                   TOP?
         BE    DISP0180                         YES
         CLI   LDA_ZVERB,C'U'                   SCROLL UP?
         BE    DISP0150                         YES
* ------------------------------------------------------------------- *
*        CHECK FOR COMMAND LINE (ZCMD) COMMAND                        *
* ------------------------------------------------------------------- *
         CLC   LDA_ZCMD,BLANKS                  BLANK?
         BE    BLD0010                          YES
         LA    R1,L'LDA_ZCMD-2                  LOOP COUNTER/LENGTH
         LA    R2,LDA_ZCMD
DISP0080 DS    0H
         CLC   BLANKS(2),0(R2)                  TWO BLANKS?
         BNE   DISP0090                         NO
         EX    R1,MVC1                          COPY
         MVI   LDA_ZCMD+L'LDA_ZCMD-1,C' '       INSERT BLANK
         B     DISP0100
DISP0090 DS    0H
         LA    R2,1(,R2)                        NEXT
DISP0100 DS    0H
         BCT   R1,DISP0080                      LOOP
         CLC   ABEND,LDA_ZCMD                   CAUSE AN ABEND?
         BE    ABEND000
         CLC   ENQ,LDA_ZCMD                     DISPLAY ALL ENQS?
         BE    ENQ0010
         CLC   TYPE_JOB,LDA_ZCMD                DISPLAY JOBS?
         BE    DISP0300
         CLC   TYPE_STC,LDA_ZCMD                DISPLAY STCS?
         BE    DISP0310
         CLC   TYPE_TSO,LDA_ZCMD                DISPLAY TSO USERS?
         BE    DISP0320
         CLC   TYPE_ALL,LDA_ZCMD                DISPLAY ALL?
         BE    DISP0330
         CLC   USER,LDA_ZCMD                    USER?
         BE    DISP0350
         CLC   PREFIX,LDA_ZCMD                  PREFIX?
         BE    DISP0400
         LA    R0,2                             MSG NBR
         BAL   R5,MSG0000                       SET MESSAGE
         B     BLD0010
DISP0140 DS    0H
         TM    LDA_FLAGS,$LDA_VPUT              ALREADY DONE VPUT?
         BO    DISP0000                         YES
         OI    LDA_FLAGS,$LDA_VPUT              SET VPUT FLAG
         ISPLINK VPUT,(SCRLVARS,SHARED),RETNZ=*
         B     DISP0070                         TRY VGET AGAIN
MVC1     MVC   0(0,R2),1(R2)                    COPY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0150 DS    0H
         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD
         CLI   ZSCROLLA,C'M'                    MAX?
         BE    DISP0180                         YES
         L     R1,LDA_ZSCROLLN                  NUMBER TO SCROLL
         L     R2,LDA_CURR_AS                   CURRENT ASVT
DISP0160 DS    0H
         C     R2,LDA_FIRST_AS                  AT FIRST ASVT SLOT?
         BE    BLD0010                          YES.. GOTTA STOP HERE
         TM    0(R2),X'80'                      IN USE?
         BO    DISP0170                         NO
         SH    R2,H4                            UP 1 IN ASVT
         ST    R2,LDA_CURR_AS                   SAVE ADDRESS
         BCT   R1,DISP0160                      LOOP
         B     BLD0010                          RE-BUILD DISPLAY
DISP0170 DS    0H
         SH    R2,H4                            SKIP THIS A/S
         B     DISP0160
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DISP0180 DS    0H
         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD
         MVC   LDA_CURR_AS,LDA_FIRST_AS         1ST AS
         B     BLD0010                          RE-BUILD DISPLAY
* ------------------------------------------------------------------- *
*        SCROLL DOWN                                                  *
* ------------------------------------------------------------------- *
DISP0200 DS    0H
         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD
         CLI   ZSCROLLA,C'M'                    MAX?
         BE    DISP0230                         YES
         L     R1,LDA_ZSCROLLN                  NUMBER TO SCROLL
         L     R2,LDA_CURR_AS                   FIRST A/S DISPLAYED
DISP0210 DS    0H
         ST    R2,LDA_CURR_AS                   SET FIRST TO DISPLAY
DISP0220 DS    0H
         C     R2,LDA_LAST_AS                   AT LAST?
         BE    BLD0010                          YES.. REBUILD DISPLAY
         AH    R2,H4                            NEXT IN ASVT
         TM    0(R2),X'80'                      A/S IN USE?
         BO    DISP0220                         NO
         BCT   R1,DISP0210                      LOOP
         B     BLD0010                          REBUILD DISPLAY
*---------------------------------------------------------------------*
*        BOTTOM                                                       *
*---------------------------------------------------------------------*
DISP0230 DS    0H
         MVC   LDA_ZCMD,BLANKS                  CLEAR ZCMD
         L     R2,LDA_LAST_AS                   LAST ASCB IN ASVT
         LH    R1,VDEPTH                        SCREEN DEPTH
DISP0240 DS    0H
         ST    R2,LDA_CURR_AS                   SET FIRST TO DISPLAY
DISP0250 DS    0H
         C     R2,LDA_FIRST_AS                  AT FIRST A/S?
         BE    BLD0010                          YES.. BUILD DISPLAY
         SH    R2,H4                            PREVIOUS A/S IN ASVT
         TM    0(R2),X'80'                      A/S IN USE?
         BO    DISP0250                         NO
         BCT   R1,DISP0240                      LOOP
         B     BLD0010                          REBUILD DISPLAY
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DISP0300 DS    0H
         MVC   LDA_FILTER_TYPE,TYPE_JOB
         B     DISP0430
DISP0310 DS    0H
         MVC   LDA_FILTER_TYPE,TYPE_STC
         B     DISP0430
DISP0320 DS    0H
         MVC   LDA_FILTER_TYPE,TYPE_TSO
         B     DISP0430
DISP0330 DS    0H
         MVC   LDA_FILTER_TYPE,TYPE_ALL
         B     DISP0430
DISP0350 DS    0H
         MVC   LDA_FILTER_USER,LDA_ZCMD+L'USER
         LA    R1,L'LDA_FILTER_USER
         LA    R2,LDA_FILTER_USER+L'LDA_FILTER_USER-1
DISP0360 DS    0H
         CLI   0(R2),C' '                       BLANK?
         BNE   DISP0370
         BCTR  R2,0
         BCT   R1,DISP0360
DISP0370 DS    0H
         STH   R1,LDA_USER_LENGTH               LENGTH OF FILTER
         B     DISP0430
DISP0400 DS    0H
         MVC   LDA_FILTER_PRFX,LDA_ZCMD+L'PREFIX
         LA    R1,L'LDA_FILTER_PRFX
         LA    R2,LDA_FILTER_PRFX+L'LDA_FILTER_PRFX-1
DISP0410 DS    0H
         CLI   0(R2),C' '                       BLANK?
         BNE   DISP0420                         NO
         BCTR  R2,0
         BCT   R1,DISP0410
DISP0420 DS    0H
         STH   R1,LDA_PRFX_LENGTH               LENGTH OF FILTER
DISP0430 DS    0H
         MVC   LDA_ZCMD,BLANKS                  RESET COMMAND
         B     BLD0010
*---------------------------------------------------------------------*
*        Link to SDFENQ                                               *
*---------------------------------------------------------------------*
ENQ0000  DS    0H
         MVI   V.DETAIL_SELECT,C' '             RESET LINE COMMAND
         MVC   LDA_ENQ_JOB,V.DETAIL_NAME
         B     ENQ0020
ENQ0010  DS    0H
         MVC   LDA_ZCMD,BLANKS                  RESET ZCMD
         MVC   LDA_ENQ_JOB,ALL
ENQ0020  DS    0H
         ISPLINK VDELETE,(CHARDATA)             VDELETE OUR VDATA
         SDFCALL SDFENQ,(LDA_ENQ_JOB)           CALL SDFENQ
         L     R2,LDA_VDATA_ADDR                VDATA ADDRESS
         ISPLINK VDEFINE,(CHARDATA,0(R2),CHAR,LDA_VDATA_SIZE)
         CLC   LDA_ENQ_JOB,ALL                  ALL JOBS?
         BE    BLD0010                          YES
         B     DISP0060
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
CAN0000  DS    0H
         MVI   V.DETAIL_SELECT,C' '             RESET LINE COMMAND
         OI    LDA_FLAGS,$LDA_LINE_CMD          SET INDICATOR
         PACK  LDA_DWORD,V.DETAIL_JOB_NBR
         CVB   R1,LDA_DWORD                     CONVERT TO BINARY
         STCM  R1,3,JSBJOBNO                    SET JOB NUMBER
         SDFXJSB JOBNUM=JSBJOBNO
         LA    R0,JSB
         ST    R0,SSPJSBA
         MVI   SSPFUNC,SSPCAN                   SET FUNCTION
         SDFSSI SSPL
         MVC   V.DETAIL_MSG,BLANKS
         CH    R15,H4                           SUCCESSFUL?
         BL    CAN0010                          YES
         BE    CAN0020
         MVC   V.DETAIL_MSG(L'PURGED),PURGED
         B     DISP0060
CAN0010  DS    0H
         MVC   V.DETAIL_MSG(L'CANCELLED),CANCELLED
         B     DISP0060
CAN0020  DS    0H
         MVC   V.DETAIL_MSG(L'SSI_ERROR),SSI_ERROR
         B     DISP0060
*---------------------------------------------------------------------*
*        FORMAT JSB INFORMATION                                       *
*---------------------------------------------------------------------*
JSB0000  DS    0H
         MVC   LDA_JSENM,BLANKS                 CLEAR FIELDS
         MVC   LDA_JSTAT,BLANKS
         MVC   LDA_JFCODE,BLANKS
         MVC   JLINE,JSBLINES                   SET LINE COUNT
         MVC   JPRTY+1(1),JSBPRTY
         CLI   JSBDSPNO,0                       ANY DSP NUMBER ?
         BE    JSB0030                          BRANCH IF YES
         SR    R1,R1
         IC    R1,JSBDSPNO
         BCTR  R1,0
         SLL   R1,3
         A     R1,LDA_DSP_TABLE
         MVC   LDA_JSENM,0(R1)
         CLC   JSBDSPNO,GDAMNDSP                JOB IN MAIN?
         BNE   JSB0030                          BRANCH IF NO
         MVI   LDA_JSENM+5,C'.'
         CLI   JSYSID,C' '                      PROCESSOR NAME KNOWN?
         BNH   JSB0030                          NO
         MVC   LDA_JSENM+5(3),JSYSID            MOVE IN SYSTEM NAME
         CLI   JSYSID+3,C' '                    LONGER THAN 3?
         BNH   JSB0030                          NO
         LA    R15,JSYSID+4                     START FOR SCAN
         LA    R0,1                             INCREMENT FOR SCAN
         LA    R1,JSYSID+L'JSYSID-1             LIMIT FOR SCAN
JSB0010  DS    0H
         CLI   0(R15),C' '                      END OF SYSTEM NAME?
         BNH   JSB0020                          QUIT LOOKING
         BXLE  R15,R0,JSB0010                   LOOP
JSB0020  DS    0H
         BCTR  R15,0                            BACK UP ONE CHARACTER
         MVC   LDA_JSENM+5(1),0(R15)            MOVE LAST CHARACTER
         MVC   LDA_JSENM+6(2),BLANKS
JSB0030  DS    0H
         TM    JSBFLAG4,JSBCIERR
         BNZ   JSB0050
         ICM   R1,B'1111',JSBCONDC              DID IT FAIL?
         BZ    JSB0060                          BRANCH IF NO
         CLI   JSBCONDC,X'FF'                   CANCELED BY CI?
         BE    JSB0050                          BRANCH IF YES
         CLI   JSBCONDC+1,0                     CHECK FOR SYSTEM ABEND
         BNE   JSB0040                          BRANCH IF ZERO
         TM    JSBCONDC+2,X'F0'
         BNZ   JSB0040
         XR    R1,R1
         ICM   R1,B'0111',JSBCONDC+1
         CVD   R1,LDA_DWORD
         UNPK  LDA_JFCODE(5),LDA_DWORD
         OI    LDA_JFCODE+4,C'0'
         MVI   LDA_JFCODE,C'U'
         TM    JSBFLAG1,JSBABCOD                ABEND CODE?
         BO    JSB0060                          BRANCH IF YES
         MVI   LDA_JFCODE,C'C'                  INDICATE CONDITION CODE
         B     JSB0060
JSB0040  DS    0H                               FORMAT ABEND CODE
         UNPK  LDA_JFCODE+1(5),JSBCONDC+1(3)
         TR    LDA_JFCODE+1(3),HEXCHAR
         MVI   LDA_JFCODE,C'S'
         MVC   LDA_JFCODE+4(2),BLANKS
         B     JSB0060
JSB0050  DS    0H
         MVC   LDA_JFCODE(5),=CL5'CI'
         B     JSB0080
JSB0060  DS    0H
         TM    JSBFLAG4,JSBFAIL+JSBCANC
         BZ    JSB0070
         MVC   LDA_JFCODE(5),=CL5'FAIL'
         B     JSB0080
JSB0070  DS    0H
         TM    JSBFLAG4,JSBCANCO
         BZ    JSB0080
         MVC   LDA_JFCODE(6),=CL6'CANCEL'
         TM    JSBFLAG4,JSBCANUR
         BZ    JSB0080
         MVC   LDA_JFCODE(6),=CL6'USER'
JSB0080  DS    0H
         TODCNV29 DATE=(JSBDATE,LDA_JTIME),TIME=(JSBTIME,LDA_JTIME+9)
         MVC   LDA_JLTIME(2),=C'20'             DEFAULT TO YEAR 20XX
         CLC   =C'80',LDA_JTIME                 YEAR < 80?
         BH    JSB0090                          YES - SKIP
         MVC   LDA_JLTIME(2),=C'19'             MAKE YEAR 19XX
JSB0090  DS    0H
         MVC   LDA_JLTIME+2(L'LDA_JTIME),LDA_JTIME Move in Date/Time
         MVI   LDA_JFLGS,C' '
         MVC   LDA_JFLGS+1(L'LDA_JFLGS-1),LDA_JFLGS
         LA    R1,LDA_JFLGS
         TM    JSBFLAG3,JSBOPHLD                OPERATOR HOLD?
         BZ    JSB0100
         MVC   0(2,R1),=C'OP'
         LA    R1,3(R1)
JSB0100  DS    0H
         TM    JSBFLAG3,JSBDJCOH                NET OPERATOR HOLD?
         BZ    JSB0110
         MVC   0(3,R1),=C'OPN'
         LA    R1,4(R1)
JSB0110  DS    0H
         TM    JSBFLAG3,JSBDJHLD                NET HOLD?
         BZ    JSB0120
         MVC   0(3,R1),=C'NET'
         LA    R1,4(R1)
JSB0120  DS    0H
         CLI   JSBDSPNO,0                       ANY DSP NUMBER ?
         BER   R5                               RETURN IF NO
         CLI   JSBSEFLG,0
         BER   R5
         TM    JSBSEFLG,SERESCH
         BO    JSB0130
         TM    JSBSEFLG,SEISTART
         BO    JSB0140
         TM    JSBSEFLG,SEIEND
         BO    JSB0150
         TM    JSBSEFLG,SEIPASS
         BO    JSB0160
         TM    JSBSEFLG,SEDSPAB
         BO    JSB0170
         TM    JSBSEFLG,SEACTIVE
         BO    JSB0180
         MVC   LDA_JSTAT,OTHER
         BR    R5
JSB0130  DS    0H
         MVC   LDA_JSTAT,RESCHED
         BR    R5
JSB0140  DS    0H
         MVC   LDA_JSTAT,ISTART
         BR    R5
JSB0150  DS    0H
         MVC   LDA_JSTAT,IEND
         BR    R5
JSB0160  DS    0H
         MVC   LDA_JSTAT,IPASS
         BR    R5
JSB0170  DS    0H
         MVC   LDA_JSTAT,DSPAB
         BR    R5
JSB0180  DS    0H
         CLC   JSBDSPNO,GDAOSDSP                JOB IN OUTSERV?
         BER   R5                               YES
         CLC   JSBDSPNO,GDAMNDSP                JOB IN MAIN?
         BNE   JSB0190                          NO
         CLI   JSYSID,C' '                      ANY SYSTEM ID
         BNH   JSB0200                          NO
JSB0190  DS    0H
         MVC   LDA_JSTAT,ACTIVE
         BR    R5
JSB0200  DS    0H
         MVC   LDA_JSTAT,WAIT
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
*        VDEFINE VARIABLES                                            *
*        R1    1ST ISPLINK PARM LIST                                  *
*        R2    NUMBER OF PARM LISTS                                   *
*                                                                     *
* ------------------------------------------------------------------- *
VDEF0000 DS    0H
VDEF0010 DS    0H
         ISPLINK MF=(E,(R1))
         LA    R1,10(,R1)
         BCT   R2,VDEF0010
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
*        VDELETE VARAIBLES                                            *
*                                                                     *
*    It may be a bit cludgy, but copying "+2" allows the same         *
*    parm list to be used for VDEFINE and VDELETE                     *
*                                                                     *
*                                                                     *
*        R1    FIRST ISPLINK PARM LIST                                *
*        R2    NUMBER OF PARM LISTS                                   *
*                                                                     *
* ------------------------------------------------------------------- *
VDEL0000 DS    0H
         LR    R3,R1                           FIRST PARAMETER LIST
         MVC   LDA_PLIST(2),VDELLIST           COPY LIST
VDEL0010 DS    0H
         MVC   LDA_PLIST+2(2),2(R3)            COPY PARAMETER LIST
         ISPLINK MF=(E,LDA_PLIST)              CALL ISPF INTERFACE
         LA    R3,10(,R3)                      NEXT ISPLINK PLIST
         BCT   R2,VDEL0010                     LOOP
         BR    R5                              RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
MSG0000  DS    0H
         MVC   LDA_MSG,=CL8'SDFE000'
         CVD   R0,LDA_DWORD                    CONVERT TO DECIMAL
         UNPK  LDA_MSG+4(3),LDA_DWORD+6(2)     UNPACK MESSAGE NUMBER
         OI    LDA_MSG+6,X'F0'                 MAKE SIGN PRINTABLE
         ISPLINK SETMSG,(LDA_MSG)              SET ISPF MESSAGE
         BR    R5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ABEND000 DS    0H
         DC    H'0'
* ------------------------------------------------------------------- *
*        EXIT TO CALLER                                               *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ISPLINK VPUT,(SCRLAMT,PROFILE),RETNZ=*
         ISPLINK VPUT,(FILTERS,PROFILE),RETNZ=*
         LA    R1,VARS
         LA    R2,VARNUM
         BAL   R5,VDEL0000
         ISPLINK VDELETE,(CHARDATA)             VDELETE OUR VDATA
         L     R1,LDA_VDATA_ADDR
         L     R0,LDA_VDATA_SIZE
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=(0)
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
* ------------------------------------------------------------------- *
*                            CONSTANTS                                *
* ------------------------------------------------------------------- *
LDASTART         DC    Q(LDAACT)

F60              DC    F'60'
F100             DC    F'100'
F10000           DC    F'10000'
H4               DC    H'4'

VDELLIST         ISPLINK VDELETE,(0),MF=L

VARS             DS    0F
                 ISPLINK VDEFINE,(FIXED4,LDA_ZSCROLLN,FIXED,4),MF=L
VARL             EQU   *-VARS
                 ISPLINK VDEFINE,(FIXED2,VWIDTH,FIXED,2),MF=L
                 ISPLINK VDEFINE,(CJJBNO,JJBNO,FIXED,2),MF=L
                 ISPLINK VDEFINE,(CHAR4,ZSCROLLA,CHAR,4),MF=L
                 ISPLINK VDEFINE,(CHAR8A,LDA_ZVERB,CHAR,8),MF=L
                 ISPLINK VDEFINE,(CHAR8B,JJBNM,CHAR,8),MF=L
                 ISPLINK VDEFINE,(CHAR8C,JORG,CHAR,8),MF=L
                 ISPLINK VDEFINE,(FILTERS,LDA_FILTER_TYPE,CHAR,8),MF=L
                 ISPLINK VDEFINE,(CHAR17,LDA_JTIME,CHAR,17),MF=L
                 ISPLINK VDEFINE,(CHAR19,LDA_JLTIME,CHAR,19),MF=L
                 ISPLINK VDEFINE,(CHAR20,JPGMR,CHAR,20),MF=L
                 ISPLINK VDEFINE,(CHAR21,LDA_JFLGS,CHAR,21),MF=L
                 ISPLINK VDEFINE,(CHAR80,LDA_ZCMD,CHAR,80),MF=L
VARNUM           EQU   (*-VARS)/VARL

PANEL            DC    CL8'SDFACT'
CVDATA           DC    CL8'VDATA'
CVWIDTH          DC    CL8'VWIDTH'
CVDEPTH          DC    CL8'VDEPTH'
SDFDSLST_CMD     DC    CL2'S '

FIXED4           DC    C'(ZSCROLLN JLINE)'
FIXED2           DC    C'(VWIDTH VDEPTH VVDEPTH JPRTY)'
CJJBNO           DC    C'(JJBNO)'
CHARDATA         DC    C'(VDATA)'
CHAR4            DC    C'(ZSCROLLA VSCR)'
CHAR8A           DC    C'(ZVERB JKEY TJNM TJID JSENM JFCODE JCLINE JSFL+
               GS JSTAT)'
CHAR8B           DC    C'(JJBNM JTUID  JSUID  JJBCLS JINDEV)'
CHAR8C           DC    C'(JORG  JXNODE JNETID JSYSID JFPROC JFSTEP)'
FILTERS          DC    C'(ACTTYPE ACTUSER ACTPRFX)'
CHAR17           DC    C'(JTIME)'
CHAR19           DC    C'(JLTIME)'
CHAR20           DC    C'(JPGMR)'
CHAR21           DC    C'(JFLGS)'
CHAR80           DC    C'(ZCMD)'
SCRLAMT          DC    C'(VSCR)'

SCRLVARS         DC    C'(ZVERB ZSCROLLA ZSCROLLN)'

ABEND            DC    C'ABEND'
ALL              DC    CL8'ALL'
ACTIVE           DC    CL8'ACTIVE'
BLANKS           DC    CL80' '
CANCELLED        DC    C'CANCELLED'
DSPAB            DC    CL8'DSPAB'
ENQ              DC    C'ENQ '
IEND             DC    CL8'IEND'
IPASS            DC    CL8'IPASS'
ISTART           DC    CL8'ISTART'
NOT_AUTH         DC    C'Not authorized'
OTHER            DC    CL8'OTHER'
PREFIX           DC    C'PREFIX '
PURGED           DC    C'JOB PURGED'
RESCHED          DC    CL8'RESCHED'
SSI_ERROR        DC    C'SSI ERROR'
STARTING         DC    CL8'STARTING'
UNKNOWN          DC    C'UNKN'
USER             DC    C'USER '
WAIT             DC    CL8'WAIT'

SWAP_IN          DC    CL3'IN'
SWAP_LOGICAL     DC    CL3'LSW'
SWAP_OUT         DC    CL3'OUT'
SWAP_NON         DC    CL3'NSW'
SWAP_TRANSITION  DC    CL3'<->'

TYPE_ALL         DC    CL8'ALL'
TYPE_JOB         DC    CL8'JOB'
TYPE_MOUNT       DC    CL8'MNT'
TYPE_STC         DC    CL8'STC'
TYPE_TSO         DC    CL8'TSU'

EDIT_WORD        DC    X'40202020202020202020'

HEXCHAR          EQU   *-C'0'
                 DC    C'0123456789ABCDEF'

                 LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DETAIL           DC  0C
DETAIL_ATTR_1    DC  X'00'
DETAIL_SELECT    DC  CL1' '
DETAIL_ATTR_2    DC  X'00'
DETAIL_JOB_NBR   DC  CL5' '
                 DC  CL1' '
DETAIL_NAME      DC  CL8' '
                 DC  CL1' '
DETAIL_STEP      DC  CL8' '
                 DC  CL1' '
DETAIL_PROC      DC  CL8' '
                 DC  CL1' '
DETAIL_PROC_STEP DC  CL8' '
                 DC  CL1' '
DETAIL_USER      DC  CL8' '
                 DC  CL1' '
DETAIL_TYPE      DC  CL1' '
                 DC  CL1' '
DETAIL_HOURS     DC  CL2' '
DETAIL_COLON1    DC  C' '
DETAIL_MINUTES   DC  CL2' '
DETAIL_COLON2    DC  C' '
DETAIL_SECONDS   DC  CL2' '
DETAIL_DECIMAL   DC  C' '
DETAIL_HUNDREDTHS DC CL2' '
                 DC  CL1' '
DETAIL_IO        DC  CL12' '
                 ORG DETAIL_HOURS
DETAIL_MSG       DS  CL20' '
                 ORG
DETAIL_L         EQU *-DETAIL
* ------------------------------------------------------------------- *
*                      DUMMY EXTERNAL SECTION                         *
* ------------------------------------------------------------------- *
LDAACT           DSECT                 EXTERNAL WORK AREA
LDAID            DS    CL8             MODULE IDENTIFIER
SAVEAREA         DS    18F             PROGRAM REGISTER SAVE AREA
                 DS    CL8

LDA_DWORD        DS    D

LDA_PLIST        DS    3F

LDA_DSP_TABLE    DS    A               JES3 DSP TABLE ADDRESS

LDA_FIRST_AS     DS    A               FIRST ADDRESS SPACE
LDA_LAST_AS      DS    A               LAST ADDRESS SPACE
LDA_CURR_AS      DS    A               CURRENT ADDRESS SPACE

LDA_VDATA_ADDR   DS    A               VDATA ADDRESS
LDA_VDATA_SIZE   DS    F               VDATA SIZE

LDA_ZSCROLLN     DS    F               NBR OF LINES TO SCROLL
JLINE            DS    F

VWIDTH           DS    H               DYNAMIC AREA WIDTH
VDEPTH           DS    H               DYNAMIC AREA DEPTH
VVDEPTH          DS    H               VISIBLE DEPTH
JPRTY            DS    H

ZSCROLLA         DS    CL4             SCROLL AMOUNT
LDA_SCROLL       DS    CL4             SCROLL AMOUNT

LDA_FLAGS        DS    X
$LDA_LINE_CMD    EQU   X'80'
$LDA_ERROR       EQU   X'40'
$LDA_VPUT        EQU   X'20'
$LDA_INIT        EQU   X'10'

LDA_EDWORD       DS    XL4

LDA_ZVERB        DS    CL8             SCROLL VERB
LDA_JKEY         DS    CL8
LDA_TJNM         DS    CL8
LDA_TJID         DS    CL8
LDA_JSENM        DS    CL8
LDA_JFCODE       DS    CL8
LDA_JCLINE       DS    CL8
LDA_JSLINE       DS    CL8
LDA_JSFLGS       DS    CL8
LDA_JSTAT        DS    CL8

LDA_MSG          DS    CL8

LDA_ENQ_JOB      DS    CL8

LDA_USER_LENGTH  DS    H
LDA_PRFX_LENGTH  DS    H
LDA_FILTER_TYPE  DS    CL8
LDA_FILTER_USER  DS    CL8
LDA_FILTER_PRFX  DS    CL8

LDA_JTIME        DS    CL17
LDA_JLTIME       DS    CL19
LDA_JFLGS        DS    CL21

LDA_ZCMD         DS    CL80

         SDFYSSPL DSECT=NO
         SDFYJSB  DSECT=NO
         ORG      JSBJOBNO
JJBNO    DS    H                       JOB NUMBER
         ORG   JSBJBNAM
JJBNM    DS    CL8                     JOB NAME
JTUID    DS    CL8                     TSO USER ID
JSUID    DS    CL8                     SECURITY USER ID
JJBCLS   DS    CL8                     JOB CLASS
JINDEV   DS    CL8                     INPUT DEVICE
JORG     DS    CL8                     JOB ORIGIN
JXNODE   DS    CL8                     EXECUTION NODE
JNETID   DS    CL8                     DJC NETWORK ID
JSYSID   DS    CL8                     SYSTEM ID
JFPROC   DS    CL8                     FAILING PROC NAME
JFSTEP   DS    CL8                     FAILING STEP NAME
         ORG   JSBSDSPA
JSDSPA   DS    A                       SDSB POINTER ADDRESS
JOSBPA   DS    A                       OSB POINTER ADDRESS
         ORG   JSBJCTMR
JJCTMR   DS    XL6                     JCT SPOOL ADDRESS
JJDBMR   DS    XL6                     JDAB SPOOL ADDRESS
JJBTMR   DS    XL6                     JOBTAT SPOOL ADDRESS
JJDSMR   DS    XL6                     JDS SPOOL ADDRESS
JOSEMR   DS    XL6                     OSE SPOOL ADDRESS
JJMRMR   DS    XL6                     JMR SPOOL ADDRESS
JJSTMR   DS    XL6                     JST SPOOL ADDRESS
         ORG   JSBPGMR
JPGMR    DS    CL20                    PROGRAMMER NAME
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         SDFYGDA  ,
         SDFYPDA  ,
         SDFYSDVT ,
         IATYJCT

         IHAPSA   DSECT=YES,LIST=NO
         CVT      DSECT=YES,LIST=NO
         IKJTCB   DSECT=YES,LIST=NO

         IHAASCB  DSECT=YES,LIST=NO
         IHAASSB  LIST=NO
         IHAASVT  DSECT=YES,LIST=NO
         IAZJSAB  DSECT=YES,LIST=NO

CSCB     DSECT
         IEECHAIN INCCSCX=YES

         IRAOUCB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IATYREG ,
         END
