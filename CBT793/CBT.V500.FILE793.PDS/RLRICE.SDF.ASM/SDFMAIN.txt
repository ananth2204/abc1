         TITLE 'SDFMAIN: JES3 SPOOL DISPLAY DRIVER'
***********************************************************************
*                                                                     *
* MODULE NAME:     SDFMAIN                                            *
*                                                                     *
* FUNCTION:        SDFMAIN is the driver module for SDF (JES3         *
*                  spool display facility).                           *
*                                                                     *
*                  SDFMAIN checks if the ISPF application id is 'SDF'.*
*                  If not, SDF reinvokes itself using the ISPF select *
*                  service with 'NEWAPPL(SDF)' specified.             *
*                                                                     *
*                  At initialization, SDFMAIN issues GETMAINs to get  *
*                  two areas, one above and one below the 16mb line.  *
*                                                                     *
*                  The area above the 16mb line contains:             *
*                  - A global data area (mapped by SDFYGDA) for data  *
*                    commonly accessed by all subroutines.            *
*                  - A local data area for each of the programs       *
*                    linked with SDFMAIN.                             *
*                                                                     *
*                  On entry to all to all subprograms, register 12    *
*                  contains the address of the global data area.      *
*                  Register 12 must point to the global data area     *
*                  at all times and should not be modified by any     *
*                  subprograms.                                       *
*                                                                     *
*                  The high order bit of reg 12 is set as follows:    *
*                  - 0 for main task                                  *
*                  - 1 for subtask                                    *
*                                                                     *
*                  The area below the 16mb line contains:             *
*                  - a 24-bit service data area (mapped by SDFYLSA).  *
*                  - interface routines for 24-bit services.          *
*                                                                     *
*                  The address of the 24-bit (below the line)         *
*                  services data area is contained in the             *
*                  global data area (field GDALSA).                   *
*                                                                     *
*                  The 24-bit service interface routines are          *
*                  embedded within SDFMAIN and copied into the        *
*                  24-bit program area at initialization.             *
*                                                                     *
*                  These routines are fully described in the section  *
*                  on 24-bit service interface routines below.        *
*                  Entry point addresses for these routines are       *
*                  placed in the global data area.                    *
*                                                                     *
* REQUIREMENTS:    SDF must be loaded from an APF authorized library. *
*                                                                     *
*                  SDF is a TSO command processor and must be called  *
*                  from an ISPF environment.                          *
*                                                                     *
*                  Make sure that if the JES3 proc references the     *
*                  JCT data set, that the dd statement specifies      *
*                  DISP=SHR.  Failure to do so may prevent you from   *
*                  doing a JES3 hot start while TSO is active.        *
*                                                                     *
*                  If the SDF DSP is not installed on your JES3       *
*                  system, the JCT data set must be allocated.        *
*                  Without the SDF DSP, when accessing spool          *
*                  belonging to the user's JES3 complex, SDF          *
*                  allocates the JCT data set to ddname SDFJCT.       *
*                  SDFJCT remains allocated after SDF terminates for  *
*                  reuse.                                             *
*                                                                     *
*                  You may access spool for another system by         *
*                  specifying the 'NOSSI' parameter on the SDF        *
*                  TSO command.  SDF finds the spool data sets by     *
*                  reading the JES3 checkpoint data set, and then     *
*                  reading the VTOC for those volumes listed in the   *
*                  checkpoint volume record.                          *
*                                                                     *
*                  When accessing spool for another system            *
*                  ('NOSSI' specified), you can preallocate           *
*                  the JES3 checkpoint data set for the system to     *
*                  be accessed.  If preallocated, specify the         *
*                  CHKPNT('ddname') parameter on the SDF TSO command. *
*                  Otherwise, SDF will display a panel for specifying *
*                  the data set name and volser for the checkpoint    *
*                  data set.                                          *
*                                                                     *
*                  As a debugging aid, you may allocate an SDFSNAP    *
*                  file.  SDF will take a snap dump when an error is  *
*                  detected if an SDFSNAP file is allocated.          *
*                  The 'TRACE' parameter can be specified to          *
*                  activate an internal trace table of calls and      *
*                  returns.                                           *
*                                                                     *
* ENTRY POINTS:    SDFMAIN, normal entry                              *
*                  SDFEXIT, entry point used to exit after error      *
*                                                                     *
* COMMAND SYNTAX:  SDF option/OPT(option)       (default none)        *
*                      JOB(jobid)               (default none)        *
*                      USERID(userid)           (default none)        *
*                      NETID(netid)             (default none)        *
*                      EXEC('cmd parms')        (default none)        *
*                      SSI/NOSSI                (default SSI)         *
*                      CHKPNT(ddname)           (default none)        *
*                      DSP/NODSP                (default DSP)         *
*                      TEST/NOTEST              (default NOTEST)      *
*                                                                     *
* PARAMETERS:      option     Specifies any valid option that can     *
*                             be specfied from SDF main selection     *
*                             panel.  Causes the specified option     *
*                             to be selected without displaying the   *
*                             SDF main selection panel.               *
*                                                                     *
*                             valid options are:                      *
*                               A,C,J,JN,L,LB,LL,N,O,P,Q,R,S,T,U,Y,Z  *
*                                                                     *
*                             The option can also be specified        *
*                             in the format OPT(option).              *
*                             When this format is used, the option    *
*                             text is scanned for a period.           *
*                             All characters up to and including the  *
*                             first period are ignored.               *
*                             This allows SDF to be called from an    *
*                             ISPF selection panel as follows:        *
*                                                                     *
*                             &ZSEL = TRANS(TRUNC(&ZCMD),'.')         *
*                                     1,'CMD(SDF OPT(&ZCMD)) NOCHECK' *
*                                     2, ...                          *
*                                                                     *
*                  jobid    - Specfies either a jobname or job number.*
*                             Used in conjunction with select option  *
*                             J, JN, or O.  Will automatically search *
*                             for jobs with the specified job name or *
*                             job number.                             *
*                                                                     *
*                  userid   - Specfies a userid.  Used in conjunction *
*                             with select option J, JN, or O.  Will   *
*                             automatically search for jobs submitted *
*                             by the specified userid.                *
*                                                                     *
*                  netid    - Specfies a DJC network id.  Used in     *
*                             conjunction with select option N.  Will *
*                             automatically search for jobs belonging *
*                             to the specified DJC network.           *
*                                                                     *
*                  cmd      - Specfies a REXX exec or TSO CLIST that  *
*                             is to process the job specified in the  *
*                             the JOB parameter.  If job name is      *
*                             specified and multiple job names match, *
*                             the exec is used to process each of the *
*                             jobs.                                   *
*                                                                     *
*                             The exec name along with its parameters *
*                             must be enclosed in quotes.             *
*                                                                     *
*                             The JOB parameter is required if EXEC   *
*                             is specified.  The EXEC parameter is    *
*                             required when executing SDF in batch.   *
*                                                                     *
*                  SSI      - Specfies that subsystem services are    *
*                             to be used for spool access.            *
*                             This is the default mode, and allows    *
*                             access only to spool data sets within   *
*                             the user's JES3 complex.                *
*                                                                     *
*                  NOSSI    - Specifies that no subsystem services    *
*                             are to be used for spool access.        *
*                             This allows reading spool data sets     *
*                             in another JES3 complex.                *
*                             Internal options/commands which cause   *
*                             updates or use of the subsystem         *
*                             interface are unavailable to the user.  *
*                                                                     *
*                  CHKPNT   - Specifies a ddname to which the JES3    *
*                             checkpoint data set has been allocated. *
*                             this parameter is used only when        *
*                             NOSSI is specified.  If NOSSI is        *
*                             specified and this parameter is         *
*                             omitted, a panel will be displayed for  *
*                             the user to enter the dsn and volser    *
*                             of the checkpoint data set to be used.  *
*                                                                     *
*                  DSP      - Specfies that JES3 SDF DSP should be    *
*                             used for job searches if installed.     *
*                             This is the default mode, and allows    *
*                             access only to spool data sets within   *
*                             the user's JES3 complex.                *
*                                                                     *
*                  NODSP    - Specifies that job searches are to be   *
*                             performed by reading the JCT data set   *
*                             instead of using services of SDF DSP.   *
*                             Some options/commands which require     *
*                             communication with SDF DSP are then     *
*                             unavailable to the user.                *
*                                                                     *
*                  TEST     - The test parameter activates an         *
*                             internal trace table and enables        *
*                             breakpoints.  Breakpoints are           *
*                             established by inserting the break      *
*                             macro instruction in the source code.   *
*                                                                     *
*                             This also causes a panel to be          *
*                             displayed during SDF initialization     *
*                             giving SDF entry point and data area    *
*                             addresses.  This allows SDF execution   *
*                             to be traced on a virtual machine under *
*                             VM using the CP TRACE command.          *
*                             command.                                *
*                                                                     *
* INPUT:           R1,  Address of the CPPL                           *
*                                                                     *
* OUTPUT:          R15, Return code                                   *
*                                                                     *
* PARAMETER LIST:  Same as CPPL                                       *
*                                                                     *
* ATTRIBUTES:      REENTRANT, REFRESHABLE, REUSABLE                   *
*                  AMODE 31, RMODE ANY                                *
*                                                                     *
* CALLED BY:       None                                               *
*                                                                     *
* CALLED PROGRAMS: IKJPARS,  to parse command parameters              *
*                  SDFAUTH,  to check read authorization              *
*                  SDFALLOC, to unallocate data sets                  *
*                  SDFBROWS, to browse spool data                     *
*                  SDFDDCHK, to check ddname allocation               *
*                  SDFERROR, to handle errors                         *
*                  SDFISPF,  to invoke ISPF services                  *
*                  SDFJESIO, to open/close spool data sets            *
*                  SDFJOBQ,  to search/display job queue              *
*                  SDFLOG,   to display SYSLOG by date/time           *
*                  SDFPARM,  to set SDF parameter options             *
*                  SDFPUTL,  to display messages                      *
*                  SDFRECV,  to receive data sets                     *
*                  SDFTRACE, to free trace table                      *
*                  SDFVIEW,  to display JES3 console                  *
*                  SDFZERO,  to display job zero                      *
*                                                                     *
* RETURN CODES:    None                                               *
*                                                                     *
* REGISTER USAGE:  R15, entry point address and return codes          *
*                  R14, used for bal to subroutines                   *
*                  R13, save area pointer                             *
*                  R12, base for global data area                     *
*                  R10-R11, program base                              *
*                  R9,  base for local data area                      *
*                  R8,  base for low strage area and user parameters  *
*                  R7,  used for subroutine linkage                   *
*                  R0-R6, general work registers                      *
*                                                                     *
***********************************************************************
***********************************************************************
*                                                                     *
* CHANGE HISTORY:                                                     *
*                                                                     *
* 06/91  Bruce Engle                                                  *
*        - Added new function to transmit data sets.                  *
*        - Added new security administration function.                *
*        - Changed to support JES 3.1.3 / RACF 1.9 security.          *
*                                                                     *
* 01/92  Bruce Engle                                                  *
*        - Added new fields to SDF user parameter options.            *
*                                                                     *
* 07/92  Bruce Engle                                                  *
*        - Changed to allow SDF to be invoked from native TSO.        *
*        - Changed to support protected data area.                    *
*                                                                     *
* 02/94  Bruce Engle                                                  *
*        - Added function to allocate SDF libraries.                  *
*                                                                     *
* 08/94  Bruce Engle                                                  *
*        - Added option Q to display job queue without args panel.    *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                        GLOBAL VARIABLES                             *
***********************************************************************
         SPACE 1
         PRINT NOGEN
         SPACE 1
         SDFVARS MODTYPE=INTERNAL      set global variables
         SPACE 1
         PRINT GEN
         SPACE 3
***********************************************************************
*                             EQUATES                                 *
***********************************************************************
         SPACE 1
         SDFYEQU ,                     standard equates
         SPACE 1
         PRINT NOGEN
         SPACE 1
         IATYREG ,                     register equates
         IATYEQU ,                     standard equates
         SDFYMSG  ,                    equates for message identifiers
         SDFYALL  ,                    SDFALLOC function codes
         SDFYBRO  ,                    SDFBROWS function codes
         SDFYCPY  ,                    SDFCOPY function codes
         SPACE 3
***********************************************************************
*                          MAPPING MACROS                             *
***********************************************************************
         SPACE 1
         PRINT NOGEN
         SPACE 1
         IHAPSA ,                      PSA mapping
         IHAASVT ,                     ASVT mapping
         IHAASCB ,                     ASCB mapping
         IHAASXB ,                     ASXB mapping
         IHAACEE ,                     ACEE mapping
         CVT   DSECT=YES               CVT mapping
         IKJTCB ,                      TCB mapping
         IHARB ,                       RB mapping
         IHACDE ,                      CDE mapping
         IKJCPPL ,                     CPPL mapping
         IKJPPL ,                      PPL mapping
         IKJPSCB ,                     PSCB mapping
         IKJTSVT ,                     TSVT mapping
         IEFJSCVT                      SSCT mapping
         IEFJESCT                      JESCT mapping
         IATYDAT ,                     DAT mapping
         IATYDST ,                     DST mapping
         IATYSVT                       SSVT mapping
         IATYMOD BRANCH=NO,DSECT=YES   module id mapping
         IATYISR ,                     ISR mapping
         IATYIOP ,                     IOP mapping
         IATYBLK ,                     block I/O control block
         DCBD  DEVD=DA,DSORG=PO        DCB mapping
         SPACE 1
         PRINT GEN
         EJECT
***********************************************************************
*        REINVOKE SDF IF ISPF APPLICATION ID IS NOT 'SDF'             *
***********************************************************************
         SPACE 1
SDFMAIN  CSECT
SDFMAIN  AMODE 31
SDFMAIN  RMODE ANY
         B     START-*(,R15)           branch aroud identifier
         DC    AL1(L'IDENT)
IDENT    DC    C'SDFMAIN 94/08/19 '    module identifier
VERSION  SDFVERS ,                     SDF version
         DC    C' '
         DC    A(EPAAUTH)              address of entry point list
START    DS    0H
         SAVE  (14,12)
         LR    R11,R15                 set program base registers
         LA    R15,2048
         LA    R10,2048(R15,R11)
         USING SDFMAIN,R11,R10         base for program
         LR    R4,R1                   save parameter list address
         USING CPPL,R4
         LA    R0,INITLEN
         GETMAIN RU,LV=(0),SP=SUBPOOL,LOC=ANY
         LR    R15,R13                 save caller's save area addr
         LR    R13,R1                  point to our save area
         USING SAVEINIT,R13
         ST    R15,SAVEINIT+4          store backward save area ptr
         ST    R13,8(,R15)             save forward save area ptr
         XR    R12,R12                 clear global data area addr
         USING PSA,0                   base for PSA
         L     R3,PSATOLD              get TCB address
         USING TCB,R3                  base for TCB
         B     STRT040
STRT010  DS    0H
         ICM   R0,B'1111',TCBRBP
         BZ    STRT020
STRT020  DS    0H
         CR    R0,R3                   last RB ?
         BE    STRT030                 branch if yes
         LR    R2,R0                   point to RB
         USING RBBASIC,R2
         ICM   R0,B'0111',RBLINKB      point to next RB
         BNZ   STRT020                 loop until last RB
STRT030  DS    0H
         TM    RBSIZE+2,RBFTP          check RB type
         BNZ   STRT040                 branch if not PRB
         XR    R1,R1
         ICM   R1,B'0111',RBCDE1       point to CDE for this RB
         BZ    STRT040                 branch if no CDE
         USING CDENTRY,R1              base for CDE
         CLC   CDNAME,ISPTASK          is this CDE for ISPTASK
         BE    STRT060                 branch if yes
STRT040  DS    0H
         ICM   R3,B'1111',TCBOTC       get parent TCB address
         BZ    STRT050                 loop until last subtask
         CL    R3,TCBJSTCB             job step TCB ?
         BNE   STRT010
STRT050  DS    0H
         L     R1,CPPLCBUF             point to command buffer
         LH    R15,0(,R1)              get command length
         SH    R15,=Y(5)               text length for execute
         MVC   ICOMMAND(13),=CL13'ISPSTART CMD('
         EX    R15,MOVCMD1             move in command
*MOVCMD1 MVC   ICOMMAND+13(0),4(R1)
         LA    R1,ICOMMAND+14(R15)
         MVC   0(14,R1),=CL14') NEWAPPL(SDF)'
         LA    R1,14(,R1)              point to end of text
         LA    R0,ICOMMAND             point to start of text
         SR    R1,R0                   get text length
         ST    R1,ILENGTH
         LA    R14,CMDFLAGS            get TSF parameter addresses
         LA    R15,ICOMMAND
         LA    R0,ILENGTH
         LA    R1,IRETCODE
         LA    R2,IRSNCODE
         LA    R3,IABNCODE
         STM   R14,R3,IPLIST           initialize TSF parameter list
         OI    IPLIST+20,X'80'         mark end of parameter list
         L     R15,CVTPTR              get CVT address
         USING CVT,R15                 base for CVT
         L     R15,CVTTVT              get TSVT address
         USING TSVT,R15                base for TSVT
         L     R15,TSVTASF             TSO Service Facility entry point
         LA    R1,IPLIST               point to parameter list
         BASR  R14,R15                 call TSO Service Facility
         LA    R5,4                    indicate processing complete
         B     STRT090
STRT060  DS    0H
         LA    R5,4                    branch index to stop
         L     R2,CPPLCBUF             point to command buffer
         LH    R15,0(,R2)              get command length
         SH    R15,=Y(5)               text length for execute
         MVC   ICOMMAND(4),=CL4'CMD('  clear command buffer
         EX    R15,MOVCMD2             move in command
*MOVCMD2 MVC   ICOMMAND+4(0),4(R2)
         LA    R2,ICOMMAND+5(R15)      point to end of command
         MVC   0(14,R2),=CL14') NEWAPPL(SDF)'
         LA    R2,14(,R2)              point to end of command
         XC    ZAPPLID,ZAPPLID         clear applid field
         LA    R0,L'ZAPPLID
         ST    R0,ILENGTH              set applid length
         ISPLINK VCOPY,(CZAPPLID,ILENGTH,ZAPPLID,MOVE)
         LTR   R15,R15                 VCOPY error occur ?
         BNZ   STRT090                 branch if yes
         CLC   ZAPPLID(L'SDF),SDF      applid SDF ?
         BNE   STRT080                 branch if yes
         XR    R5,R5                   set branch index to continue
         USING PSA,0                   base for PSA
         L     R15,PSAAOLD             get ASCB address
         USING ASCB,R15                base for ASCB
         ICM   R0,B'1111',ASCBTSB      are we running in batch mode ?
         BZ    STRT090                 if no TSB, running in batch
         DDCHK DDNAME=SDFTLIB          see if SDFTLIB allocated
         LTR   R15,R15                 library allocated ?
         BZ    STRT070                 yes, branch
         L     R3,IPAADDR              get addr of installation options
         USING IPA,R3                  base for installation options
         ICM   R0,B'1111',IPATLIB      any SDFTLIB defined ?
         BZ    STRT090                 no, branch
         SDFCALL SDFALLOC,(ALLLIB)     allocate SDF libraries
STRT070  DS    0H
         ISPLINK LIBDEF,(ISPTLIB,LIBRARY,SDFTLIB,COND),RET8=*
         LTR   R15,R15                 LIBDEF successful ?
         BNZ   STRT090                 branch if yes
         MVC   0(8,R2),=CL8' PASSLIB'
         LA    R2,8(,R2)               point to end of text
STRT080  DS    0H
         LA    R5,4                    branch index to stop
         LA    R0,ICOMMAND             point to start of text
         SR    R2,R0                   get text length
         ST    R2,ILENGTH
         ISPLINK SELECT,(ILENGTH,ICOMMAND),RETNZ=*
STRT090  DS    0H
         LA    R0,INITLEN              get area length
         LR    R1,R13                  point to start of area
         L     R13,SAVEINIT+4          restore caller's save area addr
         FREEMAIN RU,LV=(0),A=(1),SP=SUBPOOL
         B     *+4(R5)                 branch according to index
         B     DATAINIT                - continue processing
         B     EXITB                   - exit program
         DROP  R1,R2,R3
         EJECT
***********************************************************************
*        INITIALIZE DATA AREAS                                        *
***********************************************************************
         SPACE 1
DATAINIT DS    0H
         L     R2,LDASIZE              get length of external work area
         LA    R2,GDASIZE(,R2)         add size for GDA
         LA    R2,WAVTSIZE(,R2)        add size for WAVT
         LA    R2,UPASIZE(,R2)         add size for UPA
         LA    R3,X'400'-1(,R2)        round up to 1K boundary
         N     R3,=A(X'7FFFFC00')
         GETMAIN RU,LV=(3),SP=SUBPOOL,LOC=ANY
         LR    R12,R1                  start of global data area
         LR    R14,R12                 start of external area
         LR    R15,R2                  length of external area
         XR    R0,R0
         XR    R1,R1
         MVCL  R14,R0                  clear external area
         USING GDA,R12                 base for global data area
         MVC   GDAID,=CL4'GDA'         move in identifier
         LA    R0,GDASIZE
         ST    R0,GDALEN               set GDA length field
         LA    R1,GDASIZE(,R12)        point to work area vector table
         ST    R1,GDAWAVT              save WAVT address
         USING WAVT,R1
         MVC   WAVTID,=CL4'WAVT'       move in identifier
         LA    R0,WAVTSIZE
         ST    R0,WAVTLEN              set WAVT length field
         AR    R1,R0                   point to user parameter area
         ST    R1,GDAUPA               save UPA address
         USING UPA,R1
         MVC   UPAID,=CL4'UPA'         move in identifier
         LA    R0,UPASIZE
         ST    R0,UPALEN               set WAVT length field
         LA    R9,UPASIZE(,R1)         point to dummy external area
         ST    R9,GDALDA               save external section address
         A     R9,LDASTART             start of local external wk area
         USING LDAMAIN,R9              base for external work area
         LR    R15,R13                 caller's save area address
         LA    R13,SAVEAREA            point to save area
         ST    R15,SAVEAREA+4          store backward save area ptr
         ST    R13,8(,R15)             store forward save area ptr
         ST    R3,LDALEN               save external section length
         LA    R2,LSASIZE              size of low storage area
         GETMAIN RU,LV=(2),SP=SUBPOOL,LOC=(BELOW,ANY)
         LR    R8,R1                   point to 24-bit service area
         USING LSA,R8
         ST    R8,GDALSA               save starting address
         LA    R0,LSAWORK
         ST    R0,GDALWORK             save addr of general work area
         LA    R14,LSA                 start of area to clear
         LR    R15,R2                  length of area to clear
         XR    R0,R0
         XR    R1,R1
         MVCL  R14,R0                  clear 24-bit service area
         MVC   LSAID,=CL4'LSA'         move in identifier
         ST    R2,LSALEN               save length
         LA    R0,LSAAMVT              get addr of AMVT
         ST    R0,LSAAMVTA             set AMVT pointer
         MVC   GDAEPTBL(EPALEN),EPALIST initialize entry point addr
         MVC   GDASVERS,VERSION+4      set SDF version number
         MVC   MVER(6),VERSION
         MVI   MVER+6,C'.'
         MVC   MVER+7(2),VERSION+6
         MVI   GDABLANK,C' '           initialize constant fields
         MVC   GDABLANK+1(L'GDABLANK-1),GDABLANK
         MVI   GDAFFFF,X'FF'
         MVC   GDAFFFF+1(L'GDAFFFF-1),GDAFFFF
         MVC   GDADXLEN,LDASIZE        save LDA area size
         ST    R4,GDACPPL              save ptr to CPPL
         STM   R9,R12,BASEREG          save base regs for parse exit
         LA    R6,PPLIST               point to PPL
         USING PPL,R6
         L     R0,CPPLUPT              get UPT ptr
         L     R1,CPPLECT              get ect ptr
         LA    R2,CPECB                get ECB ptr
         STM   R0,R2,PPLUPT            set up PPL pointers
         MVC   PPLCBUF,CPPLCBUF        set command buffer ptr
         LA    R0,BASEREG
         ST    R0,PPLUWA               set user work area ptr
         L     R0,PCLPTR1
         ST    R0,PPLPCL               set PPL ptr
         LA    R0,PDLPTR
         ST    R0,PPLANS               set answer area ptr
         DROP  R4,R6
         USING PSA,0
         L     R3,PSATOLD              point to current TCB
         USING TCB,R3
         ST    R3,GDATCB
         L     R3,GDALDA               get address of first LDA
         L     R2,GDAEPTBL             get address of entry point table
         LA    R1,64*8(,R2)            limit for loop
         LA    R0,8                    increment for loop
DATA010  DS    0H
         CLI   0(R2),X'FF'             end of entry point table ?
         BE    PARSE                   branch if yes
         ICM   R14,B'1111',4(R2)       get offset for LDA
         BM    DATA020                 branch if no LDA
         ICM   R15,B'1111',0(R2)       get entry point address
         BZ    DATA020                 branch if null
         AR    R14,R3                  get address of LDA
         MVC   0(3,R14),=CL3'LDA'      move LDA prefix into identifier
         MVC   3(5,R14),5+3(R15)       move in module name suffix
DATA020  DS    0H
         BXLE  R2,R0,DATA010           loop for each module
         DROP  R1
         EJECT
***********************************************************************
*        PARSE THE INPUT PARAMETERS                                   *
***********************************************************************
         SPACE 1
PARSE    DS    0H
         MVC   GDAZCMD,GDABLANK
         MVC   PRIMOPT,GDABLANK
         LA    R6,PPLIST               point to PPL
         USING PPL,R6
         L     R4,PPLCBUF              point to command buffer
         LH    R1,0(,R4)               get command buffer length
         AR    R1,R4                   point to end of command buffer
         BCTR  R1,0                    limit for scan
         LA    R0,1                    increment for scan
         LH    R15,2(,R4)              get operands offset
         LA    R3,4(R15,R4)            point to start of operands
         CR    R3,R1                   any operands ?
         BH    PARS220                 branch if no
         LR    R2,R3                   save starting address
PARS010  DS    0H
         CLI   0(R2),C' '              end of operand ?
         BNH   PARS030                 branch if yes
         CLI   0(R2),C'.'              period ?
         BE    PARS050                 branch if yes
         CLI   0(R2),C'A'-X'40'        keyword parameter ?
         BL    PARS090                 yes, not a select option
         CLI   0(R2),C'Z'-X'40'        lower case alpha ?
         BH    PARS020                 branch if no
         OI    0(R2),X'40'             fold to upper case
PARS020  DS    0H
         BXLE  R2,R0,PARS010           loop until end of operand
PARS030  DS    0H
         CR    R2,R3                   compute operand length
         BNH   PARS220
         XR    R14,R14
         LA    R0,2(,R3)
         CR    R2,R0                   longer than 2 characters ?
         BH    PARS090                 yes, can not be select option
         BL    PARS070                 branch if only one character
         ICM   R14,B'0011',0(R3)       insert two characters
         LA    R0,2                    increment for loop
         LA    R1,KEYTBEND             limit for loop
         LA    R15,KEYTABLE            index for loop
PARS040  DS    0H
         CLM   R14,B'0011',0(R15)      select option found ?
         BE    PARS090                 branch if match found
         BXLE  R15,R0,PARS040          loop until end of keyword table
         B     PARS070
PARS050  DS    0H
         CLI   0(R2),C' '              end of operand ?
         BNH   PARS070                 branch if yes
         CLI   0(R2),C'A'-X'40'        lower case alpha ?
         BL    PARS060                 branch if no
         CLI   0(R2),C'Z'-X'40'        lower case alpha ?
         BH    PARS060                 branch if no
         OI    0(R2),X'40'             fold to upper case
PARS060  DS    0H
         BXLE  R2,R0,PARS050           loop until end of operand
PARS070  DS    0H
         SR    R2,R3                   compute option length
         BNP   PARS090                 branch if none
         LR    R0,R2
         AH    R0,2(,R4)               compute new buffer offset
         STH   R0,2(,R4)               save new buffer offset
         CH    R2,=Y(L'PRIMOPT)        over max length ?
         BNH   PARS080                 branch if no
         LA    R2,L'PRIMOPT            reset to max length
PARS080  DS    0H
         BCTR  R2,0                    decrement for execute
         EX    R2,MOVOPT1              move in secondary option
*MOVOPT1 MVC   PRIMOPT(0),0(R3)
PARS090  DS    0H
         LH    R1,2(,R4)               get buffer offset
         LA    R1,4(,R1)               add buffer prefix length
         CH    R1,0(,R4)               anything left to parse ?
         BNL   PARS220                 branch if no
         L     R0,PCLPTR1              point to PCL
         BAS   R7,PARSCALL             call TSO parse routine
         B     FINISH                  - error return
         L     R5,PDLPTR               point to pdl
         USING SDFPDL1,R5
         CLI   PDEKOPT+1,0             was OPT parameter specified ?
         BE    PARS140                 branch if not specified
         ICM   R2,B'1111',PDEOPT       point to select option text
         BZ    PARS140                 branch if no select option
         LH    R1,PDEOPT+4             get length of select option
         LTR   R1,R1                   anything entered ?
         BZ    PARS140                 branch if nothing entered
         LR    R14,R1                  remaining length for scan
         LR    R15,R2                  starting point for scan
         B     PARS110
PARS100  DS    0H                      eat everything up to first '.'
         CLI   0(R15),C'.'             scan for first '.'
         LA    R15,1(,R15)             point to next character
         BE    PARS120                 branch if '.' found
PARS110  DS    0H                      eat everything up to first '.'
         BCT   R14,PARS100             scan until end of option text
         B     PARS140                 no period found
PARS120  DS    0H
         LTR   R14,R14
         BNP   PARS140
         CH    R14,=Y(L'PRIMOPT)       over max length ?
         BNH   PARS130                 branch if no
         LA    R14,L'PRIMOPT           reset to max length
PARS130  DS    0H
         BCTR  R14,0                   decrement for execute
         EX    R14,MOVOPT2
*MOVOPT2 MVC   PRIMOPT(0),0(R15)       move select option
PARS140  DS    0H
         MVC   JOBID,GDABLANK          clear job name/number
         CLI   PDEKJOB+1,0             jobid specified ?
         BE    PARS150                 branch if no
         ICM   R2,B'1111',PDEJOB       point to jobid
         BZ    PARS150                 branch if no jobid
         LH    R1,PDEJOB+4             get jobid length
         LTR   R1,R1
         BNP   PARS150                 branch if zero length
         BCTR  R1,0                    decrement for execute
         EX    R1,MOVJOB
*MOVJOB  MVC   JOBID(0),0(R2)          move job name/number
PARS150  DS    0H
         MVC   USERID,GDABLANK         clear userid
         CLI   PDEKUSER+1,0            userid specified ?
         BE    PARS160                 branch if no
         ICM   R2,B'1111',PDEUSER      point to userid
         BZ    PARS160                 branch if no userid
         LH    R1,PDEUSER+4            get userid length
         LTR   R1,R1
         BNP   PARS160                 branch if zero length
         BCTR  R1,0                    decrement for execute
         EX    R1,MOVUSID
*MOVUSID MVC   USERID(0),0(R2)         move userid
PARS160  DS    0H
         MVC   NETID,GDABLANK          clear netid
         CLI   PDEKNET+1,0             netid specified ?
         BE    PARS170                 branch if no
         ICM   R2,B'1111',PDENET       point to netid
         BZ    PARS170                 branch if no netid
         LH    R1,PDENET+4             get netid length
         LTR   R1,R1
         BNP   PARS170                 branch if zero length
         BCTR  R1,0                    decrement for execute
         EX    R1,MOVNET
*MOVNET  MVC   NETID(0),0(R2)          move netid
PARS170  DS    0H
         CLI   PDEKSSI+1,1             was 'NOSSI' specified ?
         BH    PARS180                 branch if 'NOSSI'
         OI    GDASTAT,GDASSSI         set to use subsystem services
         CLI   PDEKDSP+1,1             was 'NODSP' specified ?
         BH    PARS190                 branch if 'NODSP'
         OI    GDASTAT,GDASDSP         set to use SDF DSP services
         B     PARS190
PARS180  DS    0H
         MVC   CKPDDNAM,GDABLANK       clear checkpoint ddname
         CLI   PDEKCKP+1,0             checkpoint ddname specified ?
         BE    PARS190                 branch if no
         OI    MAINFLAG,CKPALLOC       show checkpoint allocated
         ICM   R2,B'1111',PDECKP       point to ddname
         BZ    PARS190                 branch if no ddname
         LH    R1,PDECKP+4             get ddname length
         LTR   R1,R1
         BNP   PARS190                 branch if zero length
         BCTR  R1,0                    decrement for execute
         EX    R1,MOVCKP
*MOVCKP  MVC   CKPDDNAM(0),0(R2)        move checkpoint ddname
PARS190  DS    0H
         CLI   PDEKRIN+1,0             was 'REINIT' specified ?
         BE    PARS200                 branch if no reinit
         OI    GDASTAT,GDASRIN         indicate reinit wanted
PARS200  DS    0H
         CLI   PDEKTEST+1,1            was 'TEST' specified ?
         BNE   PARS210                 branch if no 'test'
         OI    GDASTAT,GDASTRC+GDASBRK   indicate trace table active
PARS210  DS    0H
         BAS   R7,PARSFREE             free IKJPARS storage
         TM    GDASTAT,GDASRIN         was 'REINIT' specified ?
         BZ    PARS230                 branch if no
         L     R1,GDACPPL              get CPPL address
         USING CPPL,R1
         L     R1,CPPLPSCB             get PSCB address
         USING PSCB,R1
         TM    PSCBATR1,PSCBCTRL       user have oper authority ?
         BO    PARS230                 branch if yes
         SDFCALL SDFPUTL,(MSG009)      oper required for REINIT
         B     FINISH
PARS220  DS    0H
         OI    GDASTAT,GDASDSP+GDASSSI set default flag values
PARS230  DS    0H
         L     R15,PSAAOLD             get ASCB address
         USING ASCB,R15                base for ASCB
         ICM   R0,B'1111',ASCBTSB      are we running in batch mode ?
         BZ    PARS250                 if no TSB, running in batch
         ICM   R0,B'0011',EXECLEN      EXEC parameter specified ?
         BZ    INIT                    branch if no
         CLI   JOBID,C' '              job name/number specified ?
         BH    INIT                    branch if yes
         LA    R0,CMDBUF               switch to null command buffer
         ST    R0,PPLCBUF              command buffer ptr
         L     R0,PCLPTR2              point to PCL
         BAS   R7,PARSCALL             call TSO parse routine
         B     FINISH                  - error return
         L     R5,PDLPTR               point to pdl
         USING SDFPDL2,R5
         MVC   JOBID,GDABLANK          clear job name/number
         ICM   R2,B'1111',PDEJOB2      point to jobid
         BZ    PARS240                 branch if no jobid
         LH    R1,PDEJOB2+4            get jobid length
         LTR   R1,R1
         BNP   PARS240                 branch if zero length
         BCTR  R1,0                    decrement for execute
         EX    R1,MOVJOB
*MOVJOB  MVC   JOBID(0),0(R2)          move job name/number
PARS240  DS    0H
         BAS   R7,PARSFREE             free IKJPARS storage
         B     INIT
PARS250  DS    0H
         LA    R2,MSGEXEC              point to required batch operand
         ICM   R0,B'0011',EXECLEN      EXEC operand specified ?
         BZ    PARS260                 branch if no
         LA    R2,MSGJOB               point to required batch operand
         CLI   JOBID,C' '              JOB operand specified ?
         BNH   PARS260                 branch if no
         TM    GDASTAT,GDASSSI         NOSSI specified ?
         BO    INIT                    branch if no
         LA    R2,MSGCHKPT             point to required batch operand
         CLI   CKPDDNAM,C' '           CHKPNT operand specified ?
         BH    INIT                    branch if yes
PARS260  DS    0H
         SDFCALL SDFPUTL,(MSG008,0(R2)) required parameter missing
         B     FINISH
         DROP  R1,R5,R6
         EJECT
***********************************************************************
*        INITIALIZE THE ENVIRONMENT                                   *
***********************************************************************
         SPACE 1
INIT     DS    0H
         ST    R12,STAEPARM
         LA    R0,TERMMAIN
         ST    R0,STAEPARM+4
         L     R2,=V(SDFESTAE)
         MVC   LSALIST1(ESTAEL),ESTAE
         ESTAE (2),PARAM=STAEPARM,MF=(E,LSALIST1)
         SDFCALL SDFALLOC,(ALLLIB)     allocate SDF libraries
         MVC   DDNAME,SDFTLIB
         MVI   DDNAME+3,C'P'           set ddname for panels
         BAS   R7,LIBDEF               define panel library
         MVI   DDNAME+3,C'M'           set ddname for message
         BAS   R7,LIBDEF               define message library
         MVI   DDNAME+3,C'L'           set ddname for load library
         BAS   R7,LIBDEF               define load library
         CLI   LIBTYPE+3,C'L'          load library needed ?
         BNE   INIT010                 branch if no
         MVC   LSALDCB,BPAMDCB         move in model DCB
         MVC   LSALIST1(OPENL),OPEN
         OPEN  (LSALDCB),MF=(E,LSALIST1)
         TM    DCBOFLGS-IHADCB+LSALDCB,DCBOFOPN  opened ?
         BZ    INIT010                 branch if no
         LA    R0,LSALDCB
         ST    R0,GDALDCB
INIT010  DS    0H
         DDCHK DDNAME=SDFEXEC          see if SDFEXEC allocated
         LTR   R15,R15                 library allocated ?
         BNZ   INIT020                 branch if no
         LA    R14,CMDFLAGS            get TSF parameter addresses
         LA    R15,ALTLBCMD
         LA    R0,ALTLBLEN
         LA    R1,RETCODE
         LA    R2,RSNCODE
         LA    R3,ABNCODE
         STM   R14,R3,LSALIST1         initialize TSF parameter list
         OI    LSALIST1+20,X'80'       mark end of parameter list
         L     R15,CVTPTR              get CVT address
         USING CVT,R15                 base for CVT
         L     R15,CVTTVT              get TSVT address
         USING TSVT,R15                base for TSVT
         L     R15,TSVTASF             TSO Service Facility entry point
         LA    R1,LSALIST1             point to parameter list
         BASR  R14,R15                 call TSO Service Facility
INIT020  DS    0H
         TM    GDASTAT,GDASTRC         trace table to be used ?
         BZ    INIT030                 branch if no
         L     R1,GDALDCB              get load library DCB addreess
         LOAD  EPLOC=SDFTRACE,DCB=(1)  load SDFTRACE
         ST    R0,GDATRACE             save SDFTRACE entry point addr
INIT030  DS    0H
         TM    GDASTAT,GDASBRK         breakpoints enabled ?
         BZ    INIT040                 branch if no
         L     R1,GDALDCB              get load library DCB addreess
         LOAD  EPLOC=SDFBREAK,DCB=(1)  load SDFBREAK
         ST    R0,GDABREAK             save SDFBREAK entry point addr
         L     R1,GDALDCB              get load library DCB addreess
         LOAD  EPLOC=SDFMAP,DCB=(1)    load SDFMAP
         ST    R0,GDAMAP               save SDFMAP entry point addr
INIT040  DS    0H
         L     R0,PSATOLD              get TCB address
         STCM  R0,B'0111',DOUBLE
         UNPK  GDATBLID,DOUBLE(4)
         TR    GDATBLID,HEXCHAR        convert to printable hex
         MVI   GDATBLID+7,C' '         use TCB addr for ISPF table id
INIT050  DS    0H
         ISPLINK CONTROL,(ERRORS,RETURN)
         LTR   R15,R15
         BNZ   FINISH
         L     R8,GDAUPA               point to user parameter area
         USING UPA,R8
         LA    R1,VARS                 point to VDEFINE parameter list
         LA    R2,VARNUM               number of parameter lists
         BAS   R7,VDEFINE              define variables
         L     R15,CVTPTR              point to CVT
         USING CVT,R15
         L     R2,CVTJESCT             point to JESCT
         USING JESCT,R2
         L     R1,JESCTEXT             get the JESCT extension
         USING JESPEXT,R1              JESCT extension
         ICM   R0,B'1111',JESSMSIB     any SMS?
         BZ    INIT060                 branch if no
         OI    GDASTAT,GDASSMS         indicate SMS active
INIT060  DS    0H
         L     R2,JESSSCT              point to SSCT
         USING SSCT,R2
         L     R2,SSCTSSVT             point to SSVT
         USING SSVT,R2
         ST    R2,GDASSVT              save SSVT address
         ICM   R1,B'1111',SVTRSVU4     SDVT initialized ?
         BZ    INIT070                 branch if no SDVT
         USING SDVT,R1
         CLC   SDVTID,IDSDVT           SDVT id valid ?
         BNE   INIT070                 branch if invalid
         ICM   R0,B'0011',SDVFLEN
         BZ    INIT070
         CLC   SDVVERS,=Y(SDVCVER)     SDVT for this version of SDF ?
         BL    INIT070                 branch if no
         CLI   SDVPREV,C'0'            old format SDVT ?
         BNL   INIT070                 branch if yes
         ICM   R0,B'1111',SDVADSN      SDVT JCT dsn addr valid ?
         BZ    INIT070                 branch if invalid
         L     R15,CVTPTR              point to CVT
         USING CVT,R15
         L     R15,CVTASVT             point to ASVT
         USING ASVT,R15
         ICM   R15,B'1111',ASVTENTY    point to ASCB
         BNP   INIT070                 branch if no ASCB
         USING ASCB,R15
         CLC   SDVMINTS,ASCBINTS       master addr space restarted ?
         BNE   INIT070                 branch if yes
         ST    R1,GDASDVT              save SDVT address
         B     INIT080
INIT070  DS    0H
         OI    GDASTAT,GDASRIN         error, initialize SDVT
INIT080  DS    0H
         L     R0,SVTDATSZ             get DAT size
         SH    R0,=Y(DATFSIZE)         subtract size of DAT prefix
         STH   R0,GDABLKSZ             save block size
         LA    R1,SVTID-3              point to iatSSVT module name
         USING MODNAME,R1
         MVC   GDAJVERS,GDABLANK       clear release level
         MVC   GDAJVERS(L'MODREL),MODREL save JES3 release level
         DROP  R1
         L     R1,SVTIOPRM             point to I/O parameter block
         USING IOPSTART,R1             base for I/O parameter block
         L     R1,IOPEXTAB             point to extent table
         USING EXTSTART,R1             base for extent table
         L     R0,EXTBUFSZ             get JCT block size
         STH   R0,GDAJCTSZ             save JCT block size
         DROP  R1,R2
INIT090  DS    0H
         L     R14,GDALWORK            point to work area
         LA    R15,L'LSAWORK           length of work area
         XR    R0,R0
         XR    R1,R1
         MVCL  R14,R0                  clear work area
         ST    R12,TPLGDA              set global data area address
         LA    R0,INITECB              point to initializatioon ECB
         ST    R0,TPLINECB             set initialization ECB address
         LA    R0,CKPDDNAM             point to checkpoint ddname
         ST    R0,TPLCKPDD             set checkpoint ddname address
         OI    TPLCKPDD,X'80'          mark end of parameter list
         MVC   SLIST,ATTACH            copy attach parameter list
         L     R2,GDALDCB              get load library DCB addreess
         ATTACH DCB=(2),ECB=GDATCECB,MF=(E,TASKPARM),SF=(E,SLIST)
         LTR   R15,R15                 attach successful ?
         BNZ   FAILTASK                no, get out
         ST    R1,TASKTCB              save subtask TCB address
         L     R1,GDALDCB              get load library DCB addreess
         LOAD  EPLOC=SDFCMD,DCB=(1)    load SDFCMD
         L     R3,IPAADDR              get addr of installation options
         USING IPA,R3                  base for installation options
         ISPLINK VGET,(OPTS),RETNZ=*
         MVI   GDASHOW,C'0'            set show options off
         CLI   UPASHOW,C'N'            show options suppressed ?
         BE    INIT100                 branch if suppressed
         MVI   UPASHOW,C'Y'            set show options on
         MVI   GDASHOW,C'1'            set show options on
INIT100  DS    0H
         ICM   R1,B'1111',UPATCYL1     get primary space allocation
         BP    INIT110
         LA    R1,2                    set default for primary
         ST    R1,UPATCYL1
INIT110  DS    0H
         ICM   R0,B'1111',UPATCYL2     get secondary space allocation
         BP    INIT120
         SRA   R1,1
         ST    R1,UPATCYL2             set default for secondary
INIT120  DS    0H
         CLI   UPAPCLS,C'A'            print class missing ?
         BNL   INIT130
         MVC   UPAPCLS,IPAPPRCL        use default print class
INIT130  DS    0H
         CLI   UPAFCLS,C'A'            fiche class missing ?
         BNL   INIT140
         MVC   UPAFCLS,IPAFPRCL        use default fiche class
INIT140  DS    0H
         CLI   UPAACLS,C'A'            archive class missing ?
         BNL   INIT150
         MVC   UPAACLS,IPAAPRCL        use default archive class
INIT150  DS    0H
         CLI   UPATUNIT,C' '           unit name already present ?
         BH    INIT160                 branch if yes
         MVC   UPATUNIT,IPATUNIT       use default unit name
         CLI   UPATUNIT,C' '           any default unit ?
         BH    INIT160                 branch if yes
         L     R1,GDACPPL              get CPPL address
         USING CPPL,R1
         L     R1,CPPLPSCB             point to PSCB
         USING PSCB,R1
         MVC   UPATUNIT,PSCBGPNM       use unit name from UADS
         CLI   UPATUNIT,C' '           any UADS unit ?
         BH    INIT160                 branch if yes
         MVC   UPATUNIT,SYSALLDA       use SYSALLDA for unit name
         DROP  R3
INIT160  DS    0H
         CLI   UPANAME,C' '            programmer name initialized ?
         BH    INIT220                 branch if yes
         MVC   UPANAME,GDABLANK        clear name field
         USING PSA,0                   base for PSA
         L     R15,PSAAOLD             get ASCB address
         USING ASCB,R15                base for ASCB
         L     R15,ASCBASXB            get ASXB address
         USING ASXB,R15                base for ASXB
         ICM   R15,B'1111',ASXBSENV    get ACEE address
         BZ    INIT220                 branch if no ACEE
         USING ACEE,R15                base for ACEE
         CLC   ACEEACEE,IDACEE         control block id correct ?
         BNE   INIT220                 branch if no
         ICM   R1,B'1111',ACEEUNAM     get user name address
         BZ    INIT220                 branch if no name
         LA    R15,L'UPANAME-1         set to maximum length
         CLI   0(R1),L'UPANAME+1       over maximum  length ?
         BNL   INIT170                 branch if no
         XR    R15,R15
         IC    R15,0(,R1)              get name length
         CH    R15,=Y(2)
         BM    INIT220                 branch if null length
INIT170  DS    0H
         EX    R15,MOVNAME             move in programmer name
*MOVNAME MVC   UPANAME(0),1(R1)
         LA    R2,UPANAME-1            index for scan
         LA    R1,UPANAME-1(R15)       limit for scan
         LA    R0,1                    increment for scan
         B     INIT190
INIT180  DS    0H
         CLI   0(R2),C'A'-X'40'        possible start of word ?
         BL    INIT190                 branch if yes
         CLI   1(R2),C'A'              upper case alpha ?
         BL    INIT210                 branch if no
         CLI   1(R2),C'Z'              upper case alpha ?
         BH    INIT210                 branch if no
         NI    1(R2),X'FF'-X'40'       fold to lower case
         B     INIT210
INIT190  DS    0H
         CLC   1(2,R2),=CL2'MC'        name start with MC ?
         BNE   INIT200                 branch if no
         NI    2(R2),X'FF'-X'40'       fold C to lower case
         LA    R2,2(,R2)               skip past MC
INIT200  DS    0H
         CLI   1(R2),C'A'-X'40'        lower case alpha ?
         BL    INIT210                 branch if no
         CLI   1(R2),C'Z'-X'40'        lower case alpha ?
         BH    INIT210                 branch if no
         OI    1(R2),X'40'             fold to upper case
INIT210  DS    0H
         BXLE  R2,R0,INIT180           loop for each character
INIT220  DS    0H
         OI    MAINFLAG,ISPFINIT       indicate ISPF initialized
         LA    R0,INITECB              initialize ECB list
         ST    R0,ECBLIST
         LA    R0,GDATCECB
         ST    R0,ECBLIST+4
         OI    ECBLIST+4,X'80'
         TM    INITECB,X'40'           subtask initialization complete?
         BO    INIT230                 yes, bypass wait
         TM    GDATCECB,X'40'          subtask terminate ?
         BO    INIT230                 yes, bypass wait
         WAIT  ECBLIST=ECBLIST         wait for completion of subtask
INIT230  DS    0H
         LA    R7,FINISH
         TM    INITECB,X'40'           subtask initialization complete?
         BZ    FINISH                  branch if not complete
         TM    GDATCECB,X'40'          subtask terminate ?
         BO    TASKTERM                if yes, terminate processing
         L     R1,GDASDVT              get SDVT address
         USING SDVT,R1
         MVC   GDAMNDSP(2),SDVMNDSP    get MAIN/OUTSERV DSP numbers
         MVC   GDAZCMD(L'PRIMOPT),PRIMOPT
         DROP  R1,R15
         EJECT
***********************************************************************
*        DISPLAY SELECTION PANEL AND SELECT FUNCTION TO PERFORM       *
***********************************************************************
         SPACE 1
PROCESS  DS    0H
         USING PSA,0
         L     R1,PSATOLD              get current TCB address
         USING TCB,R1                  base for TCB
         L     R6,TCBUSER              get PDA address
         USING PDA,R6
         MVI   MSYSP,C'N'              set authorization flags
         MVI   MOPER,C'N'
         MVC   SELPANEL,SDFPPRI        set panel id to 0
         TM    PDAOAUTH,PDAOALL+PDAOPRT+PDAODSPL operator authority ?
         BZ    PROC010                 branch if no
         MVI   MOPER,C'Y'              set authorization flag
PROC010  DS    0H
         TM    PDAVAUTH,PDAVALL+PDAVCTL systems programmer authority ?
         BZ    PROC020
         MVI   MSYSP,C'Y'              set authorization flag
         B     PROC030
PROC020  DS    0H
         MVI   SELPANEL+7,C'1'         set panel id to 1
         TM    PDAOAUTH,PDAOALL+PDAOPRT+PDAODSPL operator authority ?
         BNZ   PROC030                 branch if yes
         TM    PDAVAUTH,PDAVSMSG+PDAVLOG system messages authorized ?
         BNZ   PROC030                 branch if system msgs okay
         MVI   SELPANEL+7,C'2'         set panel id to 2
PROC030  DS    0H
         ICM   R0,B'0011',EXECLEN      EXEC parameter specified ?
         BNZ   PROCEXEC                branch if yes
         CLI   GDAZCMD,C' '            is option blank ?
         BNH   PROC040
         OI    MAINFLAG,MAINBYP        set to bypass selection pane
         B     PROC080
PROC040  DS    0H
         MVC   GDAZCMD,GDABLANK
         CLI   GDAJUMP,C' '            jump option present ?
         BNH   PROC050
         MVC   GDAZCMD(L'GDAJUMP-1),GDAJUMP+1 set jump option
         MVC   GDAJUMP,GDABLANK
         CLI   GDAZCMD,C' '            null jump command ?
         BH    PROC080                 branch if no
         NI    MAINFLAG,X'FF'-MAINBYP  turn off bypass flag
         B     PROC070                 go display selection panel
PROC050  DS    0H
         TM    MAINFLAG,MAINBYP        bypass selection panel ?
         BO    FINISH                  yes, we are finished
PROC060  DS    0H
         TM    GDATCECB,X'40'          subtask terminate ?
         BO    TASKTERM                if yes, terminate processing
PROC070  DS    0H
         ISPLINK DISPLAY,(SELPANEL),RET8=FINISH
         CH    R15,=Y(8)               severe error ?
         BH    FINISH                  exit if yes
PROC080  DS    0H
         TM    GDATCECB,X'40'          subtask terminate ?
         BO    TASKTERM                if yes, terminate processing
         CLI   GDAZCMD,C'.'            jump command ?
         BNE   PROC090                 branch if no
         MVC   GDAZCMD(L'GDAZCMD-1),GDAZCMD+1 shift out period
PROC090  DS    0H
         CLI   GDAZCMD,C' '            blank ?
         BNH   PROC060                 branch if yes
         MVC   ZOPT2,GDABLANK
PROC100  DS    0H
         LA    R0,1                    increment for scan
         LA    R1,GDAZCMD+8            limit for scan
         LA    R2,GDAZCMD+1            index for scan
PROC110  DS    0H
         CLI   0(R2),C' '              end of select option ?
         BNH   PROC130                 branch if yes
         CLI   0(R2),C'.'              sub-option specified ?
         BE    PROC120                 branch if yes
         BXLE  R2,R0,PROC110           loop until end of option
         B     PROC130
PROC120  DS    0H
         MVC   ZOPT2,1(R2)             save sub-option
         MVC   0(16,R2),GDABLANK
PROC130  DS    0H
         MVC   ZOPT1,GDAZCMD
         ICM   R15,B'0011',GDAZCMD     get select option
         LA    R0,OPTSIZE              increment for loop
         LA    R1,OPTTBEND             limit for loop
         LA    R2,OPTTABLE             index for loop
         USING OPTENTRY,R2             base for select option table
PROC140  DS    0H
         CLM   R15,B'0011',OPTION      select option found ?
         BE    PROC160                 branch if match found
         BL    PROC150                 branch if not found
         BXLE  R2,R0,PROC140
PROC150  DS    0H
         LA    R0,MSG002               invalid option message
         B     PROC230
PROC160  DS    0H
         TM    OPTFLAG,SSI+DSP         is subsys interface required ?
         BZ    PROC180                 branch if no
         TM    GDASTAT,GDASSSI         is SSI available ?
         BZ    PROC210                 branch if no - SSI required
PROC170  DS    0H
         TM    OPTFLAG,DSP             is SDF DSP required ?
         BZ    PROC180                 branch if no
         TM    GDASTAT,GDASDSP         is SDF DSP available ?
         BZ    PROC220                 branch if no - DSP required
PROC180  DS    0H
         ICM   R15,B'0001',OPTAUTH     get required authorization
         BZ    PROC190                 branch if none required
         EX    R15,CHKAUTH             check authorization
         BO    PROC190                 branch if authorized
*CHKAUTH TM    PDAVAUTH,0              check authorization
         TM    PDAOAUTH,PDAOALL+PDAOPRT+PDAODSPL operator authority ?
         BZ    PROC200                 branch if no
         TM    OPTFLAG,OPR             is operations auth okay ?
         BZ    PROC200                 branch if no
PROC190  DS    0H
         MVC   GDAZCMD,GDABLANK
         LH    R15,OPTPROC             get branch address
         BAS   R7,PROCESS(R15)         go process select option
         B     PROC040
PROC200  DS    0H
         LA    R0,MSG001               not authorized message
         B     PROC230
PROC210  DS    0H
         LA    R0,MSG003               SSI required message
         B     PROC230
PROC220  DS    0H
         LA    R0,MSG004               SDF DSP required message
PROC230  DS    0H
         BAS   R7,ISPFMSG              issue error message
         NI    MAINFLAG,X'FF'-MAINBYP  do not bypass selection pane
         B     PROC060
PROCACT  DS    0H
         SDFCALL SDFACT
         BR    R7
PROCENQ  DS    0H
         SDFCALL SDFENQ,(ALL)
         BR    R7
PROCJOB  DS    0H
         SDFCALL SDFJOBQ,(ZOPT1,JOBID,USERID) display job queue
         BR    R7
PROCNET  DS    0H
         SDFCALL SDFNET,(NETID)        display DJC networks
         BR    R7
PROCOUT  DS    0H
         SDFCALL SDFOUTQ,(,JOBID,USERID) display output queue
         BR    R7
PROCRECV DS    0H
         SDFCALL SDFRECV,(JOBID,USERID) receive data sets
         BR    R7
PROCXMIT DS    0H
         SDFCALL SDFXMIT               transmit data sets
         BR    R7
PROCLOG  DS    0H
         SDFCALL SDFLOG,(ZOPT1)        display SYSLOG
         BR    R7
PROCCONS DS    0H
         SDFCALL SDFVIEW               display console
         BR    R7
PROCZERO DS    0H
         SDFCALL SDFZERO,(ZOPT2)       display job zero
         BR    R7
PROCBROW DS    0H
         ISPLINK DISPLAY,(SDFPHXBR),RET8=0(R7)
         CLI   GDAZCMD,C'.'            jump command entered ?
         BE    PROC080                 branch if yes
         SDFCALL SDFBROWS,(BROHEX,,MMR,MID)
         B     PROCBROW
PROCSEC  DS    0H
         SDFCALL SDFSEC,(ZOPT2)        security administration
         BR    R7
PROCPARM DS    0H
         SDFCALL SDFPARM,(ZOPT2)
         BR    R7
PROCTUT  DS    0H
         ISPLINK VPUT,(VERS,SHARED)
         ISPLINK SELECT,(PGMTLEN,PGMTUTOR),RET4=*
         BR    R7
PROCUPD  DS    0H
         ISPLINK SELECT,(PGMULEN,PGMUPDAT),RET4=*
         BR    R7
PROCEXEC DS    0H
         SDFCALL SDFEXEC,(,EXECLEN,JOBID) display job queue
         ISPLINK CONTROL,(NONDISPL,ENTER)
         ISPLINK DISPLAY,(SELPANEL),RETNZ=*
         B     FINISH
         EJECT
***********************************************************************
*        SUBTASK ATTACH FAILURE                                       *
***********************************************************************
         SPACE 1
FAILTASK DS    0H
         LR    R2,R15                  save return code
         STC   R15,MSGRC+1             format error message
         MVI   MSGRC,X'80'+1
         SDFCALL SDFPUTL,(MSG016,MSGRC)
         BAS   R7,PUTERROR
         B     FINISH
         EJECT
***********************************************************************
*        SUBTASK HAS TERMINATED PREMATURELY                           *
***********************************************************************
         SPACE 1
TASKTERM DS    0H
         SDFCALL SDFPUTL,(MSG017)      display error message
         B     FINISH
         EJECT
***********************************************************************
*        TERMINATE PROGRAM                                            *
***********************************************************************
         SPACE 1
FINISH   DS    0H
         TM    MAINFLAG,ISPFINIT       ISPF initialized ?
         BZ    FIN010                  branch if no
         SDFCALL SDFBROWS,(BROFREE)    lmfree browse data set
         ISPLINK VPUT,(OPTS,PROFILE)
         ISPLINK VRESET                reset ISPF variables
FIN010   DS    0H
         LA    R15,TERMMAIN            get termination roitine address
         BASR  R14,R15                 call termination routine
         SDFTRACE END                  free trace table
         EJECT
***********************************************************************
*        EXIT TO CALLER                                               *
***********************************************************************
         SPACE 1
EXITA    DS    0H
         L     R13,SAVEAREA+4          restore caller's save area addr
         FREEMAIN RU,SP=SUBPOOL        free all SDF storage
EXITB    DS    0H
         RETURN (14,12),T,RC=0
         EJECT
***********************************************************************
*        TERMMAIN: MAIN TASK TERMINATION ROUTINE                      *
***********************************************************************
         SPACE 1
TERMMAIN DS    0H
         SAVE  (14,12),,TERMMAIN       save callers registers
         LA    R0,TERMMAIN-SDFMAIN
         LR    R11,R15                 get entry point address
         SR    R11,R0                  set program base register
         LA    R15,2048
         LA    R10,2048(R15,R11)
         L     R9,GDALDA               start of external area
         A     R9,LDASTART             start of local external section
         LR    R15,R13                 caller's save area address
         LA    R13,SAVETERM            point to save area
         ST    R15,SAVETERM+4          store backward save area ptr
         ST    R13,8(,R15)             store forward save area ptr
         L     R8,GDALSA               point to 24-bit service area
         USING LSA,R8
         ICM   R5,B'1111',TASKTCB      get subtask TCB address
         BZ    TERM030                 exit if no subtask
         TM    GDATCECB,X'40'          has subtask completed ?
         BO    TERM020                 yes, no need to wait
         MVI   TRBFUNC,TRBTERM         set TRB function to terminate
         LA    R0,TRB
         ST    R0,GDATRB               set TRB address
         POST  GDATRECB                post subtask to terminate
         XR    R0,R0
         ST    R0,TIMEECB
         LA    R0,TIMEECB
         ST    R0,TIMEPARM
         MVC   SLIST(STIMERML),STIMERM
         STIMERM SET,ID=TIMEID,BINTVL=TIMELIM,   set timer             *
               EXIT=TIMEXIT,PARM=TIMEPARM,                             *
               ERRET=TERM010,MF=(E,SLIST)
         LA    R0,GDATCECB             initialize ECB list
         ST    R0,ECBLIST
         LA    R0,TIMEECB
         ST    R0,ECBLIST+4
         OI    ECBLIST+4,X'80'
         TM    GDATCECB,X'40'          competion bit on in ECB ?
         BO    TERM010                 yes, bypass wait
         WAIT  ECBLIST=ECBLIST         wait for completion of subtask
TERM010  DS    0H
         MVC   SLIST(CTIMERML),CTIMERM
         STIMERM CANCEL,ID=TIMEID,     cancel timer                    *
               ERRET=TERM020,MF=(E,SLIST)
TERM020  DS    0H
         DETACH TASKTCB,STAE=YES       detach subtask
TERM030  DS    0H
         SDFCALL SDFALLOC,(ALLFREE)    free all data sets
         XR    R2,R2                   constant zero
         LA    R3,GDAEPDYN             point to first entry point addr
         LA    R4,EPNAMES              point to first entry point name
         LA    R5,EPNUM                initialize loop counter
TERM040  DS    0H
         ICM   R0,B'1111',0(R3)        has this module been loaded ?
         BZ    TERM050                 branch if no
         ST    R2,0(,R3)               clear entry point addr
         LR    R0,R4                   point to entry point name
         DELETE EPLOC=(0)              delete this module
TERM050  DS    0H
         LA    R3,4(,R3)               point to next entry point addr
         LA    R4,8(,R4)               point to next entry point name
         BCT   R5,TERM040              loop for each entry module
         DELETE EPLOC=SDFCMD           delete SDFCMD entry point
         TM    DCBOFLGS-IHADCB+LSALDCB,DCBOFOPN  load lib opened ?
         BZ    TERM060                 branch if no
         MVC   LSALIST1(OPENL),OPEN
         CLOSE (LSALDCB),MF=(E,LSALIST1)
TERM060  DS    0H
         XR    R0,R0
         ST    R0,GDALDCB
         L     R13,SAVETERM+4          restore caller's save area addr
         RETURN (14,12),T,RC=0
         DROP  R8
         EJECT
***********************************************************************
*        PARSCALL: CALL TSO PARSE ROUTINE                             *
*---------------------------------------------------------------------*
*        INPUT:  R0 = PCL address                                     *
*                R7 = return address                                  *
*                                                                     *
*        RETURN: +0 parse error                                       *
*                +4 normal return                                     *
***********************************************************************
         SPACE 1
PARSCALL DS    0H
         ST    R0,PPLPCL-PPL+PPLIST    set answer area ptr
         XR    R0,R0
         ST    R0,CPECB                clear ECB
         ST    R0,CMDBUF               clear null command buffer
         ST    R0,PDLPTR               clear answer area pointer
         CALLTSSR EP=IKJPARS,MF=(E,PPLIST)
         LTR   R15,R15                 test parse return code
         BZ    4(,R7)                  return if parse successful
         CH    R15,=Y(12)              severe error ?
         BNHR  R7                      no, return to caller
         MVI   MSGRC,X'80'+1
         STC   R15,MSGRC+1             set return code for message
         SDFCALL SDFPUTL,(MSG010,MSGRC) issue error message
         B     PUTERROR
         EJECT                         get out
***********************************************************************
*        PARSFREE: FREE STORAGE FROM TSO PARSE ROUTINE                *
*---------------------------------------------------------------------*
*        INPUT:  R7 = return address                                  *
***********************************************************************
         SPACE 1
PARSFREE DS    0H
         ICM   R0,B'1111',PDLPTR       anything to free ?
         BZR   R7                      no, return to caller
         IKJRLSA PDLPTR                free storage gotten by IKJPARS
         XC    PDLPTR,PDLPTR           clear answer area pointer
         BR    R7                      return to caller
         EJECT                         get out
***********************************************************************
*        LIBDEF: DEFINE ISPF LIBRARY                                  *
***********************************************************************
         SPACE 1
LIBDEF   DS    0H
         DDCHK DDNAME=DDNAME           see if library allocated
         LTR   R15,R15                 library allocated ?
         BNZR  R7                      no, return
         MVC   LIBTYPE(3),ISP
         MVC   LIBTYPE+3(5),DDNAME+3   move in library type suffix
         ISPLINK LIBDEF,(LIBTYPE,LIBRARY,DDNAME,COND),RET8=*
         BR    R7                      return to caller
         EJECT
***********************************************************************
*        VDEFINE: DEFINE ISPF VARIABLES                               *
*---------------------------------------------------------------------*
*        INPUT:  R1 = pointer to first ISPLINK parameter list         *
*                R2 = number of ISPLINK parameter lists               *
***********************************************************************
         SPACE 1
VDEFINE  DS    0H
         ISPLINK MF=(E,(1))            call ISPF interface
         LA    R1,10(,R1)              point to next ISPLINK plist
         BCT   R2,VDEFINE              loop for each parameter list
         BR    R7                      return to caller
         EJECT
***********************************************************************
*        ISPFMSG: CALL ISPF SETMSG SERVICE                            *
*---------------------------------------------------------------------*
*        INPUT:  R0 = message number                                  *
***********************************************************************
         SPACE 1
ISPFMSG  DS    0H
         MVC   MSG,=CL8'SDFM000'
         CVD   R0,DOUBLE               convert msg number to decimal
         UNPK  MSG+4(3),DOUBLE+6(2)    unpack message number
         OI    MSG+6,X'F0'             make sign printable
         ISPLINK SETMSG,(MSG)          set ISPF message
         BR    R7                      return to caller
         EJECT
***********************************************************************
*        PUTERROR: DISPLAY ERROR LOCATION MESSAGE                     *
***********************************************************************
         SPACE 1
PUTERROR DS    0H
         SDFCALL SDFERROR,(0(R7))      error handling routune
         BR    R7                      return to caller
         EJECT
***********************************************************************
*        TIMER EXIT ROUTINE                                           *
***********************************************************************
         SPACE 1
TIMEXIT  DS    0H
         USING *,R15
         L     R1,4(,R1)               get ECB address
         POST  (1)                     post timer expiration ECB
         XR    R15,R15                 set return code zero
         BR    R14                     return to caller
         DROP  R15
         EJECT
***********************************************************************
*                       EXECUTE INSTRUCTIONS                          *
***********************************************************************
         SPACE 1
         USING UPA,R8
MOVNAME  MVC   UPANAME(0),1(R1)
MOVOPT1  MVC   PRIMOPT(0),0(R3)
MOVOPT2  MVC   PRIMOPT(0),0(R15)       move select option
MOVJOB   MVC   JOBID(0),0(R2)          move job name/number
MOVUSID  MVC   USERID(0),0(R2)         move userid
MOVNET   MVC   NETID(0),0(R2)          move netid
MOVCKP   MVC   CKPDDNAM(0),0(R2)       move checkpoint ddname
CHKAUTH  TM    PDAVAUTH,0              check authorization
MOVCMD1  MVC   ICOMMAND+13(0),4(R1)
MOVCMD2  MVC   ICOMMAND+4(0),4(R2)
MOVEXEC  MVC   EXECCMD(0),0(R2)
         DROP  R1
         EJECT
***********************************************************************
*                            CONSTANTS                                *
***********************************************************************
         SPACE 1
LDASIZE  CXD                           size of external work area
LDASTART DC    Q(LDAMAIN)              offset for external work area
PCLPTR1  DC    V(SDFPCL1)              PCL pointer
PCLPTR2  DC    V(SDFPCL2)              PCL pointer
IPAADDR  DC    V(SDFOPTS)              SDF installation options addr
         SPACE 1
EPAAUTH  DC    V(SDFOPTS)
         DC    V(SDFCALL)
         DC    V(SDFISPF)
         DC    V(SDFAUTH)
         DC    V(SDFGENCB)
         DC    V(SDFSSI)
         DC    V(SDFDDCHK)
         SPACE 1
EPALIST  DC    V(SDFEPTBL)
         DC    V(SDFBSAM)
         DC    V(SDFTIME)
         DC    V(SDFDSN)
         DC    V(SDFPARSE)
EPALEN   EQU   *-EPALIST
         SPACE 1
TIMELIM  DC    A(15*100)               15 second time limit for timer
         SPACE 1
SPLIST   DC    AL1(2),AL1(SUBPOOL),AL1(78)
CMDFLAGS DC    X'00010101'             IKJEFTSR command flags
         SPACE 1
ALL      DC    CL8'ALL'
IDACEE   DC    CL4'ACEE'               ACEE identifier
IDSDVT   DC    CL4'SDVT'               SDVT identifier
SDF      DC    CL4'SDF'                SDF applid
CZAPPLID DC    CL8'ZAPPLID'
SYSALLDA DC    CL8'SYSALLDA'           SYSALLDA unit name
SDFEXEC  DC    CL8'SDFEXEC'            SDF exec library ddname
SDFTLIB  DC    CL8'SDFTLIB'            SDF table library ddname
ISPTLIB  DC    CL8'ISPTLIB'
ISP      EQU   ISPTLIB,3,C'C'
         SPACE 1
ISPTASK  DC    CL8'ISPTASK'
SDFTASK  DC    CL8'SDFTASK'
SDFCMD   DC    CL8'SDFCMD'
         SPACE 1
EPNAMES  EQU   *                       same order as GDA addresses
SDFBLOCK DC    CL8'SDFBLOCK'
SDFTRACE DC    CL8'SDFTRACE'
SDFMAP   DC    CL8'SDFMAP'
SDFBREAK DC    CL8'SDFBREAK'
SDFPUTM  DC    CL8'SDFPUTM'
SDFVGET  DC    CL8'SDFVGET'
SDFEDIT  DC    CL8'SDFEDIT'
SDFIMAC  DC    CL8'SDFIMAC'
EPNUM    EQU   (*-EPNAMES)/8
         SPACE 1
SDFPPRI  DC    CL8'SDFPPRI0'           main selection panel
SDFPHXBR DC    CL8'SDFPHXBR'           SRF/MRF browse panel
         SPACE 1
CHAR64   DC    C'(ZCMD)'
VERS     DC    C'(MVER)'
CHAR8    DC    C'(MJES)'
CHAR4    DC    C'(MID MSCR)'
HEX6     DC    C'(MMR)'
AUTH     DC    C'(MSYSP MOPER)'
OPT1     DC    C'(MLL MCYL1 MCYL2)'
OPT2     DC    C'(MPCLS MFCLS MACLS MCD MIN MPSA MSHOW)'
OPT3     DC    C'(MPDST MPDS2 MFDST MFDS2 MADST MADS2 MUNIT'
         DC    C' MDEPT MBLDG MROOM)'
OPT4     DC    C'(MNAME)'
OPT5     DC    C'(MADR1 MADR2 MADR3 MADR4)'
OPT6     DC    C'(MX0 MX1 MX2 MX3 MX4 MX5 MX6 MX7 MX8 MX9)'
OPT7     DC    C'(MJCL1 MJCL2 MJCL3 MJCL4 MJCL5 MJCL6)'
OPTS     DC    C'(MPCLS MFCLS MACLS MCD MIN MPSA MSHOW'
         DC    C' MPDST MPDS2 MFDST MFDS2 MADST MADS2 MUNIT'
         DC    C' MDEPT MBLDG MROOM MLL MCYL1 MCYL2 MSCR MNAME'
         DC    C' MADR1 MADR2 MADR3 MADR4'
         DC    C' MX0 MX1 MX2 MX3 MX4 MX5 MX6 MX7 MX8 MX9'
         DC    C' MJCL1 MJCL2 MJCL3 MJCL4 MJCL5 MJCL6)'
         SPACE 1
PGMTLEN  DC    A(L'PGMTUTOR)
PGMTUTOR DC    C'PGM(ISPTUTOR) PARM(SDFHTUT)'
         SPACE 1
PGMULEN  DC    A(L'PGMUPDAT)
PGMUPDAT DC    C'PGM(ISPTUTOR) PARM(SDFUPDT)'
         SPACE 1
ALTLBLEN DC    A(L'ALTLBCMD)
ALTLBCMD DC    C'ALTLIB ACT APPL(EXEC) LIB(SDFEXEC)'
         SPACE 1
MSGJOB   DC    AL1(3),CL3'JOB'
MSGEXEC  DC    AL1(4),CL4'EXEC'
MSGCHKPT DC    AL1(6),CL6'CHKPNT'
         SPACE 1
         LTORG ,
         EJECT
***********************************************************************
*                         LIST FORM MACROS                            *
***********************************************************************
         SPACE 1
         PRINT NOGEN
         SPACE 1
ESTAE    ESTAE MF=L
ESTAEL   EQU   *-ESTAE
         SPACE 1
ATTACH   ATTACH EPLOC=SDFTASK,SHSPL=SPLIST,SF=L
ATTACHL  EQU   *-ATTACH
         SPACE 1
STIMERM  STIMERM SET,MF=L
STIMERML EQU   *-STIMERM
         SPACE 1
CTIMERM  STIMERM CANCEL,MF=L
CTIMERML EQU   *-CTIMERM
         SPACE 1
OPEN     OPEN  (,),MF=L
OPENL    EQU   *-OPEN
         SPACE 1
BPAMDCB  DCB   DDNAME=SDFLLIB,DSORG=PO,MACRF=(R)
         SPACE 1
         USING UPA,R8
VARS     ISPLINK VDEFINE,(CHAR64,GDAZCMD,CHAR,64),MF=L
         ISPLINK VDEFINE,(VERS,MVER,CHAR,9),MF=L
         ISPLINK VDEFINE,(CHAR8,GDAJVERS,CHAR,8),MF=L
         ISPLINK VDEFINE,(CHAR4,MID,CHAR,4),MF=L
         ISPLINK VDEFINE,(HEX6,MMR,HEX,6),MF=L
         ISPLINK VDEFINE,(AUTH,MSYSP,CHAR,1),MF=L
         ISPLINK VDEFINE,(OPT1,UPACLIM,FIXED,4),MF=L
         ISPLINK VDEFINE,(OPT2,UPAOPTS,CHAR,1),MF=L
         ISPLINK VDEFINE,(OPT3,UPAPDEST,CHAR,8),MF=L
         ISPLINK VDEFINE,(OPT4,UPANAME,CHAR,20),MF=L
         ISPLINK VDEFINE,(OPT5,UPAADDR1,CHAR,40),MF=L
         ISPLINK VDEFINE,(OPT6,UPAEXEC0,CHAR,32),MF=L
         ISPLINK VDEFINE,(OPT7,UPAJCL1,CHAR,72),MF=L
VARNUM   EQU   (*-VARS)/10
         EJECT
***********************************************************************
*                              TABLES                                 *
***********************************************************************
         SPACE 1
HEXCHAR  EQU   *-C'0'
         DC    C'0123456789ABCDEF'     table to convert hex to char
         SPACE 1
OPTTABLE DS    0H                      table of select options
         DC    CL2'A ',AL1(0000),AL1(000+000),Y(PROCACT-PROCESS)
         DC    CL2'E ',AL1(0000),AL1(000+000),Y(PROCENQ-PROCESS)
         DC    CL2'C ',AL1(SMSG),AL1(OPR+SSI),Y(PROCCONS-PROCESS)
         DC    CL2'J ',AL1(0000),AL1(OPR+000),Y(PROCJOB-PROCESS)
         DC    CL2'JN',AL1(0000),AL1(OPR+000),Y(PROCJOB-PROCESS)
         DC    CL2'L ',AL1(SLOG),AL1(OPR+000),Y(PROCLOG-PROCESS)
         DC    CL2'LB',AL1(SLOG),AL1(OPR+000),Y(PROCLOG-PROCESS)
         DC    CL2'N ',AL1(0000),AL1(OPR+DSP),Y(PROCNET-PROCESS)
         DC    CL2'O ',AL1(0000),AL1(OPR+DSP),Y(PROCOUT-PROCESS)
         DC    CL2'P ',AL1(0000),AL1(OPR+000),Y(PROCPARM-PROCESS)
         DC    CL2'Q ',AL1(0000),AL1(OPR+000),Y(PROCJOB-PROCESS)
         DC    CL2'R ',AL1(0000),AL1(OPR+000),Y(PROCRECV-PROCESS)
         DC    CL2'S ',AL1(0000),AL1(OPR+000),Y(PROCSEC-PROCESS)
         DC    CL2'T ',AL1(0000),AL1(OPR+000),Y(PROCTUT-PROCESS)
         DC    CL2'U ',AL1(0000),AL1(OPR+000),Y(PROCUPD-PROCESS)
         DC    CL2'X ',AL1(0000),AL1(OPR+000),Y(PROCXMIT-PROCESS)
         DC    CL2'Y ',AL1(SYSP),AL1(000+000),Y(PROCBROW-PROCESS)
         DC    CL2'Z ',AL1(SMSG),AL1(OPR+DSP),Y(PROCZERO-PROCESS)
OPTTBEND EQU   *-1
         SPACE 1
KEYTABLE DS    0H                      table of keyords (first 2 chars)
         DC    CL2'DS'                 DSP
         DC    CL2'NO'                 NODSP/NOSSI/NOTEST
         DC    CL2'RE'                 REINIT
         DC    CL2'SS'                 SSI
         DC    CL2'TE'                 TEST
KEYTBEND EQU   *-1
         EJECT
***********************************************************************
*        ENTRY POINT FOR QUICK EXIT AFTER SEVERE ERROR                *
***********************************************************************
         SPACE 1
         ENTRY SDFEXIT
SDFEXIT  DS    0H
         SAVE  (14,12),,SDFEXIT        save callers registers
         LA    R1,4095
         LA    R0,SDFEXIT-SDFMAIN-4095
         AR    R0,R1
         LR    R11,R15                 get entry point address
         SR    R11,R0                  set program base register
         LA    R10,1(R1,R11)
         LTR   R12,R12
         BNP   SDFX010
         L     R9,GDALDA               start of external area
         A     R9,LDASTART             start of local external section
         LA    R13,SAVEAREA            point to save area
         L     R8,GDALSA               point to 24-bit service area
         B     FINISH
SDFX010  DS    0H
         USING PSA,0
         L     R1,PSATOLD              get current TCB address
         USING TCB,R1                  base for TCB
         L     R13,TCBFSA              point to first save area
         B     EXITB
         EJECT
***********************************************************************
*        CMDCHECK: PARSE VALIDITY CHECK ROUTINE FOR MACRO COMMAND     *
*---------------------------------------------------------------------*
*        INPUT:  R1 = parameter list address                          *
***********************************************************************
         SPACE 1
CMDCHECK DS    0H
         SAVE  (14,12),,CMDCHECK       save caller's registers
         L     R2,4(,R1)               get parameter address
         LM    R9,R12,0(R2)            load base registers
         XC    EXECLEN,EXECLEN         clear command length
         MVI   EXECCMD,C' '
         MVC   EXECCMD+1(L'EXECCMD-1),EXECCMD
         LR    R4,R1                   save parameter list address
         ICM   R1,B'1111',0(R4)        get PDE address
         BZ    CMDC050
         USING PDEEXEC,R1              base for PDE
         ICM   R2,B'1111',PDEEXEC      point to macro command
         BZ    CMDC050                 branch if no text
         LH    R3,PDEEXEC+4            get text length
         LTR   R3,R3
         BNP   CMDC050                 branch if zero length
         AR    R3,R2                   point to end of text
         BCTR  R3,0                    point to last character
         LA    R0,1                    increment for scan (+1)
         LR    R1,R3                   limit for scan
CMDC010  DS    0H
         CLI   0(R2),C' '              start of text ?
         BH    CMDC020                 branch if yes
         BXLE  R2,R0,CMDC010           loop until start of text
         B     CMDC050                 branch if no text
CMDC020  DS    0H
         LNR   R0,R0                   decrement for scan (-1)
         LR    R1,R2                   limit for scan
CMDC030  DS    0H
         CLI   0(R3),C' '              end of text ?
         BH    CMDC040                 branch if yes
         BXH   R3,R0,CMDC030           loop until end of text
CMDC040  DS    0H
         SR    R3,R2                   get text length
         EX    R3,MOVEXEC
*MOVEXEC MVC   EXECCMD(0),0(R2)
         LA    R3,1(,R3)               get text length
         STH   R3,EXECLEN
         B     CMDC060
CMDC050  DS    0H
         LA    R15,4                   set return code for invalid parm
         B     CMDC070
CMDC060  DS    0H
         XR    R15,R15                 set good return code
CMDC070  DS    0H
         RETURN (14,12),T,RC=(15)      return to caller
         EJECT
***********************************************************************
*                       PARSE PARAMETER LIST                          *
***********************************************************************
         SPACE 1
         PRINT NOGEN
         SPACE 1
SDFPCL1  RMODE ANY
SDFPCL1  IKJPARM DSECT=SDFPDL1
PDEKOPT  IKJKEYWD
         IKJNAME 'OPT',SUBFLD=PDESOPT
PDEKJOB  IKJKEYWD
         IKJNAME 'JOB',SUBFLD=PDESJOB,                                 *
               ALIAS=('JOBNAME','JOBNUM','JOBNO','JOBID')
PDEKUSER IKJKEYWD
         IKJNAME 'USERID',SUBFLD=PDESUSER
PDEKNET  IKJKEYWD
         IKJNAME 'NETID',SUBFLD=PDESNET
PDEKSSI  IKJKEYWD DEFAULT='SSI'
         IKJNAME 'SSI'
         IKJNAME 'NOSSI'
PDEKDSP  IKJKEYWD DEFAULT='DSP'
         IKJNAME 'DSP'
         IKJNAME 'NODSP'
PDEKCKP  IKJKEYWD
         IKJNAME 'CHKPNT',SUBFLD=PDESCKP
PDEKTEST IKJKEYWD DEFAULT='NOTEST'
         IKJNAME 'TEST'
         IKJNAME 'NOTEST'
PDEKRIN  IKJKEYWD
         IKJNAME 'REINIT'
PDEKEXEC IKJKEYWD
         IKJNAME 'EXEC',SUBFLD=PDESEXEC
PDESOPT  IKJSUBF
PDEOPT   IKJIDENT 'SELECT OPTION',MAXLNTH=8,FIRST=ALPHANUM,            *
               OTHER=ANY,PROMPT='SELECT OPTION',                       *
               HELP='SDF PRIMARY MENU OPTION'
PDESJOB  IKJSUBF
PDEJOB   IKJIDENT 'JOB NAME/NUMBER',MAXLNTH=8,FIRST=ALPHANUM,          *
               OTHER=ALPHANUM,PROMPT='JOB NAME/NUMBER',                *
               HELP='JOB NAME OR JOB NUMBER OF JOBS TO DISPLAY'
PDESUSER IKJSUBF
PDEUSER  IKJIDENT 'USERID',MAXLNTH=8,FIRST=ALPHA,                      *
               OTHER=ALPHANUM,PROMPT='USERID',                         *
               HELP='USERID FOR JOBS TO DISPLAY'
PDESNET  IKJSUBF
PDENET   IKJIDENT 'DJC NETID',MAXLNTH=8,FIRST=ALPHA,                   *
               OTHER=ALPHANUM,PROMPT='DJC NETID',                      *
               HELP='NETID FOR DJC NETWORK JOBS TO DISPLAY'
PDESCKP  IKJSUBF
PDECKP   IKJIDENT 'CHECKPOINT DDNAME',MAXLNTH=8,FIRST=ALPHA,           *
               OTHER=ALPHANUM,PROMPT='CHECKPOINT DDNAME',              *
               HELP='DDNAME OF JES3 CHECKPOINT DATA SET'
PDESEXEC IKJSUBF
PDEEXEC  IKJIDENT 'REXX EXEC OR TSO CLIST COMMAND',CHAR,               *
               FIRST=ALPHA,OTHER=ANY,VALIDCK=CMDCHECK,                 *
               PROMPT='REXX EXEC OR TSO CLIST COMMAND',                *
               HELP='EXEC OR CLIST NAME WITH PARAMETERS'
         IKJENDP
         SPACE 2
SDFPCL2  RMODE ANY
SDFPCL2  IKJPARM DSECT=SDFPDL2
PDEJOB2  IKJIDENT 'JOB NAME/NUMBER',MAXLNTH=8,FIRST=ALPHANUM,          *
               OTHER=ALPHANUM,PROMPT='JOB NAME/NUMBER',                *
               HELP='JOB NAME OR JOB NUMBER OF JOBS TO PROCESS'
         IKJENDP
         EJECT
***********************************************************************
*                         LOCAL DATA AREA                             *
***********************************************************************
         SPACE 1
         PRINT GEN
         SPACE 1
LDAMAIN  DSECT                         external work area
LDAID    DS    CL8                     module identifier
SAVEAREA DS    (18+PLSIZE)F            program register save area
SAVETERM DS    18F                     termination routine save area
         SPACE 1
DOUBLE   DS    D
BASEREG  DS    4F                      base registers
STAEPARM DS    3F                      ESTAE exit parameter list
         SPACE 1
TASKPARM DS    0F                      subtask parameter list
TPLGDA   DS    A                       addr of global data area
TPLINECB DS    A                       addr of initialization ECB
TPLCKPDD DS    A                       addr of JES3 CHKPNT ds ddname
         SPACE 1
TASKTCB  DS    A                       address of subtack ECB
BUFPTR   DS    A                       address of checkpoint buffer
         SPACE 1
INITECB  DS    F                       initialization ECB
CPECB    DS    F                       command processor ECB
PDLPTR   DS    A                       pdl pointer
PPLIST   DS    8F                      parse parameter list
CMDBUF   DS    F                       null command buffer
         SPACE 1
LDALEN   DS    F                       length of local data area
         SPACE 1
TIMEID   DS    F                       timer id
TIMEPARM DS    F                       timer exit parm
TIMEECB  DS    F                       timer ECB
ECBLIST  DS    2F                      ECB list
         SPACE 1
PLIST    DS    F                       parameter list
SLIST    DS    XL(ATTACHL)             SVC parameter list
         SPACE 1
RETCODE  DS    F                       return code
RSNCODE  DS    F                       reason code
ABNCODE  DS    F                       abend code
DDNAME   DS    CL8                     ISPF library type
LIBTYPE  DS    CL8                     ISPF library type
PRIMOPT  DS    CL8                     initial primary option
         SPACE 1
MVER     DS    CL9                     SDF version number
MMR      DS    XL6                     M.R spool address
         SPACE 1
MID      DS    CL4                     SRF identifier
MSCR     DS    CL4                     scroll amount
         SPACE 1
MSYSP    DS    CL1                     systems programmer auth Y/N
MOPER    DS    CL1                     operations authority  Y/N
         SPACE 1
SELPANEL DS    CL8                     selection panel name
MSG      DS    CL8                     ISPF message number
         SPACE 1
ZOPT1    DS    CL8
ZOPT2    DS    CL8
JOBID    DS    CL8                     job name/number
USERID   DS    CL8                     userid
NETID    DS    CL8                     DJC network id
         SPACE 1
JESDDNAM DS    CL8                     JCT/spool data set ddname
CKPDDNAM DS    CL8                     checkpoint data set ddname
TTR      DS    XL3                     ttr for checkpoint read
         SPACE 1
MAINFLAG DS    X                       status flags
CKPALLOC EQU   X'80'                   - checkpoint data set allocated
MAINBYP  EQU   X'40'                   - bypass main selection panel
ISPFINIT EQU   X'20'                   - ISPF initializion done
         SPACE 1
MSGRC    DS    X,XL1                   message insert segments
MSGRETC  DS    X,XL2
MSGRSNC  DS    X,XL2
MSGABNDC DS    X,XL2
MSGABND  DS    X,CL6
         SPACE 1
EXECLEN  DS    H                       exec command length
EXECCMD  DS    CL256                   exec command text
         SPACE 1
         SDFYTRB DSECT=NO              task request block
         SPACE 1
         ORG   LDAMAIN+(*-LDAMAIN+15)/16*16
         EJECT
***********************************************************************
*                     INITIALIZATION WORK AREA                        *
***********************************************************************
         SPACE 1
INITAREA DSECT                         initialization work area
SAVEINIT DS    (18+PLSIZE)F            program save area
IPLIST   EQU   SAVEINIT+18*4           patrameter list area
ILENGTH  DS    F                       length of applid
IRETCODE DS    F                       return code
IRSNCODE DS    F                       reason code
IABNCODE DS    F                       abend code
ZAPPLID  DS    CL8                     ISPF applid
ICOMMAND DS    CL80                    select service command buffer
INITLEN  EQU   (*-INITAREA+15)/16*16
         EJECT
***********************************************************************
*                              DSECTS                                 *
***********************************************************************
         SPACE 1
OPTDSECT DSECT                         selection table dsect
OPTENTRY EQU   *                       selection table entry
OPTION   DS    CL2                     select option
OPTAUTH  DS    XL1                     authorization flags required
SYSP     EQU   PDAVCTL                 - systems prog auth required
SMSG     EQU   PDAVSMSG                - system messages auth required
SLOG     EQU   PDAVLOG                 - system log auth required
OPTFLAG  DS    XL1                     flags
OPR      EQU   X'80'                   - operations auth code okay
DSP      EQU   X'40'                   - SDF DSP is required
SSI      EQU   X'20'                   - subsystem interface required
OPTPROC  DS    XL2                     branch offset for select option
OPTSIZE  EQU   *-OPTDSECT              length of select table entry
         SPACE 1
***********************************************************************
*                       SDF USER PARAMETERS                           *
***********************************************************************
         SPACE 1
         PRINT GEN
         SPACE 1
         SDFYUPA DSECT=YES             SDF installation options
         EJECT
***********************************************************************
*                   SDF INSTALLATION PARAMETERS                       *
***********************************************************************
         SPACE 1
         PRINT GEN
         SPACE 1
         SDFYIPA DSECT=YES             SDF installation options
         EJECT
***********************************************************************
*                   SPOOL DISPLAY VECTOR TABLE                        *
***********************************************************************
         SPACE 1
         PRINT GEN
         SPACE 1
         SDFYSDVT ,                    spool display vector table
         EJECT
***********************************************************************
*                       PROTECTED DATA AREA                           *
***********************************************************************
         SPACE 1
         PRINT GEN
         SPACE 1
         SDFYPDA ,                     protected data area mapping
         EJECT
***********************************************************************
*                         GLOBAL DATA AREA                            *
***********************************************************************
         SPACE 1
         PRINT GEN
         SPACE 1
         SDFYGDA ,                     global data area mapping
         EJECT
***********************************************************************
*                  24-BIT (LOW STORAGE) SERVICE AREA                  *
***********************************************************************
         SPACE 1
         PRINT GEN
         SPACE 1
         SDFYLSA ,                     24-bit service area
         EJECT
***********************************************************************
*                      WORK AREA VECTOR TABLE                         *
***********************************************************************
         SPACE 1
         PRINT GEN
         SPACE 1
         SDFYWAVT ,                    Work Area Vector Table
         SPACE 3
         END
