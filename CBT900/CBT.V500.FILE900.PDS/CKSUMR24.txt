         TITLE ' C K S U M R '
*
*        SUBROUTINE TO COMPUTE THE SAME KIND OF CHECKSUM
*        USED IN THE Z/OS UNIX SYSTEM SERVICES 'CKSUM' COMMAND,
*        NOT TO MENTION THE SAME COMMAND IN AIX AND LINUX.
*        THE ARGUMENT LIST IS SIMILAR IN MANY RESPECTS TO THE
*        'MD5' SUBROUTINE IN FILE 900 OF THE CBT TAPE.
*
*        WRITTEN MAY 31 2020 FOR THE 'CKSUM' TSO COMMAND
*
*        JIM CONNELLEY DESERVES ACKNOWLEDGEMENT FOR THE ASSEMBLER
*        CODE IN CBT FILE 493 MEMBER CRC32, WHICH COMPUTES A
*        ANOTHER CRCSUM USING A SLIGHTLY DIFFERENT ALGORITHM
*        AND A DIFFERENT POLYNOMIAL TABLE.
*
*        CALL CKSUMR(STRING,LENGTH,CONTEXT,RESULT,WORKSPACE)
*
*        LENGTH IS A FULLWORD CONTAINING THE LENGTH OF STRING.
*
*        CONTEXT IS 3 FULLWORDS WHICH SHOULD BE CLEARED TO BINARY
*        ZEROES BEFORE THE FIRST CALL, AND LEFT UNCHANGED AFTER THAT,
*        UNLESS AN ADDITIONAL CHECKSUM IS TO BE COMPUTED FOR ANOTHER
*        STRING, IN WHICH CASE IT SHOULD BE CLEARED AGAIN FOR THE
*        FIRST CALL FOR THE OTHER STRING.
*
*        RESULT IS 10 FULLWORDS WHICH WILL CONTAIN, AFTER THE
*        FINAL CALL:
*        1) THE CHECKSUM AS A 32-BIT UNSIGNED NUMBER,
*        2) THE BYTE COUNT AS A 64-BIT NUMBER,
*        3) A SPAN OF 3 WORDS CONTAINING A 12-BYTE EBCDIC STRING
*           CONSISTING OF LEADING SPACES AND A 1-TO-10-DIGIT NUMBER
*           REPRESENTING THE SAME CHECKSUM AS THE FIRST WORD,
*           RANGING FROM '           0' TO '  4294967295'.
*           THIS IS PROVIDED AS A CONVENIENCE FOR CASES WHERE THE
*           THE CALLING PROGRAM IS IN A LANGUAGE THAT ONLY
*           SUPPORTS CONVERTING SIGNED INTEGERS TO A PRINTABLE FORM.
*        4) A SPAN OF 4 WORDS CONTAINING A 16-BYTE EBCDIC STRING
*           REPRESENTING THE BYTE COUNT
*           IF THE LEFTMOST BYTE IS A BLANK, THE NUMBER IS DECIMAL,
*           WITH LEADING ZEROES CHANGED TO BLANKS.
*           OTHERWISE THE NUMBER IS HEXADECIMAL EBCDIC DIGITS,
*           WHICH ONLY HAPPENS IF THE BYTE COUNT EXCEEDS
*           214,748,364,799,999.
*
*        WORKSPACE IS 30 FULLWORDS AND ITS CONTENTS DO NOT NEED TO
*        BE SET BY THE CALLER. IT IS USED AS A REGISTER SAVE AREA
*        AND TEMPORARY WORK SPACE.
*
*        AT LEAST 2 CALLS WILL BE NEEDED - ONE OR MORE WITH
*        A STRING AND ONE WITH THE STRING LENGTH SET TO ZERO.
*        IF LENGTH IS 0, RESULT WILL CONTAIN AN UNSIGNED
*        32-BIT NUMBER, AMONG OTHER THINGS DESCRIBED EARLIER.
*
*        IF LENGTH IS NEGATIVE, ONLY ONE CALL IS NEEDED. IT IS THE
*        EQUIVALENT OF ONE CALL WITH A POSITIVE LENGTH AND
*        ANOTHER WITH A ZERO LENGTH. THE NEGATIVE LENGTH IS
*        ZERO MINUS THE STRING LENGTH. THE CONTEXT IN THIS CASE
*        DOES NOT NEED TO BE CLEARED TO ZEROES.
*
CKSUMR   CSECT
*CKSUMR  AMODE ANY31
*CKSUMR  RMODE 31
         USING *,R12
         B     BEGIN-*(,R15)
         DC    AL1(7),CL7'CKSUMR'
         DC    CL16' &SYSDATE &SYSTIME '
*        DC    CL16' 05/31/20 11:00 '
WORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)
BEGIN    STM   14,12,12(13)
         LR    R12,R15
         LR    R2,R1               POINT TO ARGS PASSED
         L     R7,16(,R2)          POINT TO WORKSPACE, 5TH ARG
*        L     R0,WORKSIZ
*        GETMAIN R,LV=(0)
*        LR    R7,R1
         USING WORKD,R7
         XC    0(WORKINI,R7),0(R7)
         ST    R13,4(,R7)          OLD ADDRESS IN NEW SAVE AREA
         ST    R7,8(,R13)          NEW ADDRESS IN OLD SAVE AREA
         LR    R13,R7
         MVC   ARGLIST(16),0(R2)   SAVE 1ST 4 ARG ADDRESSES
         SPACE
         LM    R8,R10,ARGLIST      GET STRING ADDR, LEN ADDR, CONTEXT
         L     R2,4(,R10)          GET TOTAL LENGTH SO FAR
         L     R3,8(,R10)          GET TOTAL LENGTH SO FAR
         L     R10,0(,R10)         GET INITIAL/CURRENT CRC
         L     R9,0(,R9)           GET LENGTH
         LTR   R0,R9               IF LENGTH ZERO
         BZ    FINAL                 DO FINAL PROCESSING
         BM    BOTH                DO BOTH IF LENGTH NEGATIVE
         ALR   R3,R9               ADD LENGTH TO TOTAL
         BC    12,NOCARRY1
*        AFI   R2,1
         A     R2,=F'1'
NOCARRY1 EQU   *
         BAL   R11,CSUM            CHECKSUM THE STRING
         B     DONE
BOTH     LCR   R9,R9
         ALR   R3,R9               ADD LENGTH TO TOTAL
         BC    12,NOCARRY2         ADD LENGTH TO TOTAL
*        AFI   R2,1
         A     R2,=F'1'
NOCARRY2 EQU   *
         BAL   R11,CSUM            CHECKSUM THE STRING
FINAL    BAL   R11,TERM            FINALIZE THE CHECKSUM
         L     R1,ARGLIST+12       POINT TO RESULT
         ST    R10,0(,R1)          SAVE CRC IN CONTEXT
         ST    R2,4(,R1)           SAVE TOTAL LENGTH IN CONTEXT
         ST    R3,8(,R1)           SAVE TOTAL LENGTH IN CONTEXT
*              CONVERT INTEGERS TO EBCDIC
         LA    R5,DOUBLE
         LA    R5,7(,R5)           ROUND UP
*        NILF  R5,-8               DOES SAME THING AS NEXT INSTR
         N     R5,=A(X'FFFFFFF8')  TO DOUBLEWORD OUNDARY
*              IF BYTECOUNT > ABOUT 200 TERABYTES
*              THE DIVIDE-BY-100000 WILL GET A S0C9 EXCEPTION.
*              HERE THE LIMIT IS CHECKED AND IF EXCEEDED
*              THE DIVIDE WILL NOT BE USED, AND THE RESULT    .
*              WILL BE 16 HEX DIGITS, WITH NO LEADING BLANK.
*              SINCE 200 TERABYTES IS 15 DECIMAL DIGITS,
*              AND THE RESULT AREA IS 16 BYTES, A DECIMAL RESULT
*              WILL ALWAYS HAVE AT LEAST ONE LEADING BLANK.
         CLC   4(8,R1),=X'0000C34FFFFFFFFF' 214,748,364,799,999
         BNH   USEDEC
USEHEX   UNPK  UNPACK(9),4(5,R1)   HIGH WORD OF COUNT
         UNPK  UNPACK+8(9),8(5,R1) LOW WORD OF COUNT
         TR    UNPACK(16),HEXTAB-240
         B     SETBYTES
USEDEC   D     R2,=F'100000'       DIVIDE BY 10 THOUSAND
         CVD   R2,0(,R5)           REMAINDER TO PACKED DECIMAL
         OI    7(R5),X'0F'         FIX SIGN IN DOUBLE+7 FOR UNPACK
         UNPK  UNPACK+11(5),5(3,R5) DOUBLE+5(3) LAST 5 DIGITS
         CVD   R3,0(,R5)           QUOTIENT TO PACKED DECIMAL
         OI    7(R5),X'0F'         FIX SIGN IN DOUBLE+7 FOR UNPACK
         UNPK  UNPACK(11),2(6,R5)  DOUBLE+2(6) FIRST 11 DIGITS
         LA    R0,15
         BAL   R11,ZEROSUP
SETBYTES MVC   24(16,R1),UNPACK    COPY TO 7TH TO 10TH WORD OF RESULT
         LR    R14,R1              SAVE R1
         LR    R1,R10              GET CRC
         SR    R0,R0               PREPARE TO DIVIDE
         D     R0,=F'100000'       DIVIDE BY 10 THOUSAND
         CVD   R0,0(,R5)           REMAINDER TO PACKED DECIMAL
         OI    7(R5),X'0F'         FIX SIGN IN DOUBLE+7 FOR UNPACK
         UNPK  UNPACK+7(5),5(3,R5) DOUBLE+5(3) LAST 5 DIGITS
*                                  MAX QUOTIENT WILL BE 42949
         CVD   R1,0(,R5)           QUOTIENT TO PACKED DECIMAL
         OI    7(R5),X'0F'         FIX SIGN IN DOUBLE+7 FOR UNPACK
         UNPK  UNPACK(7),3(5,R5)   DOUBLE+2(6) FIRST 7 DIGITS
         LA    R0,11
         BAL   R11,ZEROSUP
         LR    R1,R14              RESTORE R1
         MVC   12(12,R1),UNPACK    COPY TO 4TH TO 6TH WORD OF RESULT
         B     DONE
DONE     L     R1,ARGLIST+8        POINT TO CONTEXT
         ST    R10,0(,R1)          SAVE CRC IN CONTEXT
         ST    R2,4(,R1)           SAVE TOTAL LENGTH IN CONTEXT
         ST    R3,8(,R1)           SAVE TOTAL LENGTH IN CONTEXT
         B     EXIT0
         SPACE
ZEROSUP  LA    R15,UNPACK
ZEROLOOP CLI   0(R15),C'0'
         BNER  R11
         MVI   0(R15),C' '
         LA    R15,1(,R15)
         BCT   R0,ZEROLOOP
         BR    R11
         SPACE
CSUM     EQU   *
         LA    R0,255              USED FOR 'NR'
CSLOOP   SLR   R15,R15             CLEAR FOR IC
         IC    R15,0(,R8)          GET NEXT CHAR
         LR    R14,R10             GET INITIAL OR CURRENT CRC
         SRL   R14,24              SHIFT RIGHT 24
         XR    R15,R14             EXCLUSIVE OR
         NR    R15,R0              ISOLATE LOW 8 BITS (LIKE NILF R,255)
         SLL   R15,2               TIMES 4 FOR WORD OFFSET INTO TABLE
         SLL   R10,8               SHIFT ORIGINAL/CURRENT CRC LEFT 8
         X     R10,CRCTAB(R15)     EXCLUSIVE OR AGAINST TABLE WORD
         LA    R8,1(,R8)           NEXT INPUT
         BCT   R9,CSLOOP           DECREMENT, LOOP UNTIL LENGTH ZERO
         BR    R11
         SPACE
*         FINALLY, WHEN ALL STRINGS FROM ALL CALLS ARE DONE,
*         INSTEAD OF A STRING OF BYTES OF INPUT DATA,
*         THE ENTIRE 64-BIT VALUE OF THE LENGTH IS USED,
*         FOLLOWED BY THE VALUE SHIFTED RIGHT 8
*         FOLLOWED BY THE VALUE SHIFTED RIGHT 8 AGAIN ...
*         STOPPING AS SOON AS THE VALUE SHIFTED RIGHT 8 IS ZERO,
*         FOLLOWED BY A BITWISE NOT USING HEX FFFFFFFF.
*         A FINAL "AND" WITH HEX FFFFFFFF IS NOT NEEDED
*         BECAUSE ONLY THE LOW 32 BITS ARE RETURNED TO CALLER.
TERM     LR    R0,R2               GET TOTAL LENGTH HIGH HALF
         LR    R1,R3               GET TOTAL LENGTH LOW HALF
LENLOOP  LR    R14,R10             GET INITIAL OR CURRENT CRC
         SRL   R14,24              SHIFT RIGHT 24
         LR    R15,R1              COPY LENGTH
*               WE ONLY NEED THE LOW HALF OF LENGTH,
*               IN FACT, ONLY THE LOW 8 BITS OF LENGTH
         XR    R15,R14             EXCLUSIVE OR WITH LENGTH
*        NILF  R15,255             ISOLATE LOW 8 BITS
         N     R15,=F'255'         ISOLATE LOW 8 BITS
         SLL   R15,2               TIMES 4 FOR WORD OFFSET INTO TABLE
         SLL   R10,8               SHIFT ORIGINAL/CURRENT CRC LEFT 8
*                                  (IGNORING WHAT GETS SHIFTED OUT)
         X     R10,CRCTAB(R15)     EXCLUSIVE OR AGAINST TABLE WORD
         SRDA  R0,8                LENGTH SHIFTED RIGHT 8
         BNZ   LENLOOP             BRANCH IF NOT ZERO
*        XILF  R10,-1              (EQUIVALENT OF NEXT INSTR)
         X     R10,=X'FFFFFFFF'    BITWISE NOT (TILDE IN C)
         BR    R11
*
EXIT0    SR    R2,R2               RETURN CODE 0
*        LR    R1,R13              POINT TO ADDRESS TO FREEMAIN
*        L     R0,WORKSIZ          LENGTH TO FREEMAIN
         L     R13,4(,R13)         RESTORE ORIGINAL R13
*        FREEMAIN R,A=(1),LV=(0)
         DROP  R7
         LR    R15,R2
         RETURN (14,12),RC=(15)
         SPACE
         LTORG
         DC    0D'0'
HEXTAB   DC    C'0123456789ABCDEF'
         SPACE
CRCTAB   DC    X'00000000',X'04C11DB7',X'09823B6E',X'0D4326D9'
         DC    X'130476DC',X'17C56B6B',X'1A864DB2',X'1E475005'
         DC    X'2608EDB8',X'22C9F00F',X'2F8AD6D6',X'2B4BCB61'
         DC    X'350C9B64',X'31CD86D3',X'3C8EA00A',X'384FBDBD'
         DC    X'4C11DB70',X'48D0C6C7',X'4593E01E',X'4152FDA9'
         DC    X'5F15ADAC',X'5BD4B01B',X'569796C2',X'52568B75'
         DC    X'6A1936C8',X'6ED82B7F',X'639B0DA6',X'675A1011'
         DC    X'791D4014',X'7DDC5DA3',X'709F7B7A',X'745E66CD'
         DC    X'9823B6E0',X'9CE2AB57',X'91A18D8E',X'95609039'
         DC    X'8B27C03C',X'8FE6DD8B',X'82A5FB52',X'8664E6E5'
         DC    X'BE2B5B58',X'BAEA46EF',X'B7A96036',X'B3687D81'
         DC    X'AD2F2D84',X'A9EE3033',X'A4AD16EA',X'A06C0B5D'
         DC    X'D4326D90',X'D0F37027',X'DDB056FE',X'D9714B49'
         DC    X'C7361B4C',X'C3F706FB',X'CEB42022',X'CA753D95'
         DC    X'F23A8028',X'F6FB9D9F',X'FBB8BB46',X'FF79A6F1'
         DC    X'E13EF6F4',X'E5FFEB43',X'E8BCCD9A',X'EC7DD02D'
         DC    X'34867077',X'30476DC0',X'3D044B19',X'39C556AE'
         DC    X'278206AB',X'23431B1C',X'2E003DC5',X'2AC12072'
         DC    X'128E9DCF',X'164F8078',X'1B0CA6A1',X'1FCDBB16'
         DC    X'018AEB13',X'054BF6A4',X'0808D07D',X'0CC9CDCA'
         DC    X'7897AB07',X'7C56B6B0',X'71159069',X'75D48DDE'
         DC    X'6B93DDDB',X'6F52C06C',X'6211E6B5',X'66D0FB02'
         DC    X'5E9F46BF',X'5A5E5B08',X'571D7DD1',X'53DC6066'
         DC    X'4D9B3063',X'495A2DD4',X'44190B0D',X'40D816BA'
         DC    X'ACA5C697',X'A864DB20',X'A527FDF9',X'A1E6E04E'
         DC    X'BFA1B04B',X'BB60ADFC',X'B6238B25',X'B2E29692'
         DC    X'8AAD2B2F',X'8E6C3698',X'832F1041',X'87EE0DF6'
         DC    X'99A95DF3',X'9D684044',X'902B669D',X'94EA7B2A'
         DC    X'E0B41DE7',X'E4750050',X'E9362689',X'EDF73B3E'
         DC    X'F3B06B3B',X'F771768C',X'FA325055',X'FEF34DE2'
         DC    X'C6BCF05F',X'C27DEDE8',X'CF3ECB31',X'CBFFD686'
         DC    X'D5B88683',X'D1799B34',X'DC3ABDED',X'D8FBA05A'
         DC    X'690CE0EE',X'6DCDFD59',X'608EDB80',X'644FC637'
         DC    X'7A089632',X'7EC98B85',X'738AAD5C',X'774BB0EB'
         DC    X'4F040D56',X'4BC510E1',X'46863638',X'42472B8F'
         DC    X'5C007B8A',X'58C1663D',X'558240E4',X'51435D53'
         DC    X'251D3B9E',X'21DC2629',X'2C9F00F0',X'285E1D47'
         DC    X'36194D42',X'32D850F5',X'3F9B762C',X'3B5A6B9B'
         DC    X'0315D626',X'07D4CB91',X'0A97ED48',X'0E56F0FF'
         DC    X'1011A0FA',X'14D0BD4D',X'19939B94',X'1D528623'
         DC    X'F12F560E',X'F5EE4BB9',X'F8AD6D60',X'FC6C70D7'
         DC    X'E22B20D2',X'E6EA3D65',X'EBA91BBC',X'EF68060B'
         DC    X'D727BBB6',X'D3E6A601',X'DEA580D8',X'DA649D6F'
         DC    X'C423CD6A',X'C0E2D0DD',X'CDA1F604',X'C960EBB3'
         DC    X'BD3E8D7E',X'B9FF90C9',X'B4BCB610',X'B07DABA7'
         DC    X'AE3AFBA2',X'AAFBE615',X'A7B8C0CC',X'A379DD7B'
         DC    X'9B3660C6',X'9FF77D71',X'92B45BA8',X'9675461F'
         DC    X'8832161A',X'8CF30BAD',X'81B02D74',X'857130C3'
         DC    X'5D8A9099',X'594B8D2E',X'5408ABF7',X'50C9B640'
         DC    X'4E8EE645',X'4A4FFBF2',X'470CDD2B',X'43CDC09C'
         DC    X'7B827D21',X'7F436096',X'7200464F',X'76C15BF8'
         DC    X'68860BFD',X'6C47164A',X'61043093',X'65C52D24'
         DC    X'119B4BE9',X'155A565E',X'18197087',X'1CD86D30'
         DC    X'029F3D35',X'065E2082',X'0B1D065B',X'0FDC1BEC'
         DC    X'3793A651',X'3352BBE6',X'3E119D3F',X'3AD08088'
         DC    X'2497D08D',X'2056CD3A',X'2D15EBE3',X'29D4F654'
         DC    X'C5A92679',X'C1683BCE',X'CC2B1D17',X'C8EA00A0'
         DC    X'D6AD50A5',X'D26C4D12',X'DF2F6BCB',X'DBEE767C'
         DC    X'E3A1CBC1',X'E760D676',X'EA23F0AF',X'EEE2ED18'
         DC    X'F0A5BD1D',X'F464A0AA',X'F9278673',X'FDE69BC4'
         DC    X'89B8FD09',X'8D79E0BE',X'803AC667',X'84FBDBD0'
         DC    X'9ABC8BD5',X'9E7D9662',X'933EB0BB',X'97FFAD0C'
         DC    X'AFB010B1',X'AB710D06',X'A6322BDF',X'A2F33668'
         DC    X'BCB4666D',X'B8757BDA',X'B5365D03',X'B1F740B4'
         DC    0D'0'
WORKD    DSECT
         DS    18F
ARGLIST  DS    4F
DOUBLE   DS    3F
UNPACK   DS    5F
WORKINI  EQU   *-WORKD
         DS    0D
WORKLEN  EQU   *-WORKD
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
